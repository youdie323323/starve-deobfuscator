(function () {
  const Vf = window;
  Math.floor(216[216 .ⵠΔⵠⵠⵠⵠΔ]);
  var Xf = 40;
  if (Xf === 9) {
    Xf = 195;
  }
  var Zf = 115;
  if (Zf === 13) {
    Zf = 83;
  }
  let $f = 183;
  const aj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += Vf.String.fromCharCode(a[c] ^ $f++ % 255);
    }
    return b;
  };
  ᐃᐃ = [[211, 138, 255, 202, 223, 251, 209, 203, 229, 183, 252, 255], [161, 131, 252, 176, 164, 141, 159, 191, 145, 141, 240, 243], [172, 151, 151, 171, 176, 230, 131, 145, 181, 159, 224, 178, 191, 157, 224, 227], [133, 141, 141, 145, 135, 163, 179, 159], [191, 217, 208, 159, 177, 180, 142, 211], [187, 167, 183, 194, 146, 181, 200, 203], [149, 202, 204, 151, 162, 171, 175, 146], [89, 89, 84, 51, 102, 54, 68, 116, 81, 81, 97, 54], [111, 96, 88, 117, 115, 86, 43, 102, 119, 39, 64, 66, 125, 65, 88, 119], [126, 74, 88, 43, 114, 102, 78, 89, 64, 98, 96, 82, 113, 27, 127, 22], [72, 31, 70, 95, 105, 3, 85, 14], [87, 7, 112, 67, 91, 126, 66, 87, 105, 80, 120, 15, 26, 16, 127, 126], [38, 29, 16, 119, 18, 30, 27, 118], [47, 32, 24, 55, 52, 6, 4, 41, 48, 16, 16, 34, 57, 14, 107, 51, 56, 26, 50, 41, 2, 10, 56, 26, 61, 50, 87, 11], [9, 62, 91, 3, 54, 95, 56, 60, 42, 38, 71, 24, 46, 45, 60, 7, 26, 20, 25, 70], [31, 58, 56, 10, 226, 236, 238, 246, 222, 181, 183, 241, 210, 206, 220, 248], [238, 202, 216, 250, 202, 162, 192, 252], [240, 221, 220, 255, 250, 247, 212, 232, 197, 197, 204, 243], [195, 147, 228, 215, 199, 226, 222, 203], [241, 154, 252, 210, 207, 192, 248, 218, 212, 247, 224, 195, 214, 226, 227, 138], [217, 238, 143, 206, 230, 229, 244, 231, 161, 150, 144, 243, 165, 132, 251, 250], [146, 251, 156, 251, 157, 160, 247, 254, 178, 188, 128, 163, 182, 184, 178, 147, 186, 158, 182, 183, 190, 179, 140, 140, 186, 182, 172, 211], [182, 136, 158, 145, 177, 177, 187, 145, 161, 134, 168, 150, 147, 156, 180, 198], [167, 162, 195, 199, 183, 188, 188, 130, 159, 144, 184, 53], [87, 48, 85, 109, 84, 94, 73, 114, 83, 93, 58, 101, 111, 70, 100, 45], [72, 69, 89, 110], [76, 120, 65, 113, 64, 119, 99, 112, 126, 105, 34, 29], [66, 101, 91, 76, 64, 113, 109, 64, 112, 24, 95, 127, 116, 118, 125, 92], [85, 0, 117, 77, 87, 81, 10, 5], [96, 98, 121, 75, 95, 118, 84, 125], [37, 10, 47, 51, 31, 23, 122, 117], [42, 39, 29, 38, 47, 124, 122, 37, 11, 5, 29, 100], [54, 59, 1, 48, 3, 27, 102, 97], [4, 41, 98, 93], [59, 80, 27, 18, 60, 11, 33, 27, 56, 61, 19, 27, 12, 41, 42, 77], [40, 37, 11, 7], [44, 68, 15, 78, 52, 0, 50, 65], [43, 41, 19, 245, 229, 198, 235, 198, 230, 232, 205, 224, 236, 219, 182, 177], [239, 217, 182, 162, 203, 196, 193, 226], [204, 164, 239, 232, 195, 205, 174, 172, 202, 223, 162, 157], [244, 231, 200, 153], [196, 254, 233, 231, 240, 255, 159, 145], [254, 251, 253, 253, 227, 227, 142, 137], [239, 254, 253, 208, 221, 138, 215, 200, 228, 233, 219, 172], [163, 149, 133, 179, 166, 129, 171, 189, 147, 189, 246, 241], [151, 137, 153, 170, 181, 149, 191, 161, 140, 142, 133, 168, 187, 232, 239, 225], [191, 137, 230, 139, 128, 181, 185, 209], [134, 213, 165, 155, 136, 189, 165, 128], [142, 166, 165, 156, 149, 159, 165, 129, 145, 179, 165, 148, 163, 151, 189, 205, 159, 182, 81, 60], [88, 109, 78, 105, 92, 95, 120, 101], [107, 83, 94, 97, 108, 94, 45, 44], [75, 68, 90, 37, 119, 79, 66, 117], [64, 76, 41, 118, 68, 72, 113, 28], [120, 17, 114, 21, 112, 96, 68, 93, 112, 122, 17, 16], [77, 28, 98, 89, 81, 93, 101, 8], [84, 112, 126, 76, 96, 8, 106, 85, 100, 13, 21, 124], [27, 113, 2, 48, 31, 117, 30, 58, 27, 28, 121, 61, 44, 24, 22, 97, 51, 4, 109, 32, 4, 57, 18, 49, 56, 12, 9, 96], [8, 109, 54, 8, 55, 81, 93, 15, 7, 85, 62, 89], [9, 89, 58, 93], [12, 93, 69, 5, 22, 43, 38, 25], [44, 25, 50, 15, 24, 46, 50, 18, 39, 39, 202, 197, 224, 177, 214, 233], [229, 181, 222, 185, 223, 204, 181, 247, 239, 215, 194, 225, 240, 161, 160, 168], [207, 240, 165, 164], [248, 220, 202, 175, 196, 200, 215, 156], [192, 228, 157, 205, 252, 224, 254, 194], [243, 153, 212, 221, 244, 248, 133, 129, 229, 226, 137, 136], [213, 133, 238, 137, 236, 214, 250, 206, 218, 232, 150, 131, 166, 133, 150, 181, 164, 144, 157, 244], [155, 147, 134, 180, 151, 151, 187, 236], [176, 225, 225, 163, 181, 144, 142, 172], [185, 147, 150, 171, 186, 152, 217, 139, 128, 209, 147, 216], [132, 176, 132, 156], [137, 134, 186, 158, 180, 184, 182, 139, 168, 162, 201, 200], [149, 197, 182, 128, 160, 172, 170, 136], [157, 50, 105, 114, 89, 106, 87, 74, 93, 80, 98, 55], [105, 91, 91, 116, 108, 34, 87, 124, 73, 69, 40, 43], [78, 118, 79, 119, 65, 113, 75, 103], [124, 77, 119, 88, 64, 99, 28, 83, 68, 26, 127, 127, 113, 116, 69, 30], [117, 93, 93, 65, 81, 114, 103, 90, 82, 112, 104, 7], [89, 14, 8, 73, 102, 24, 23, 56, 25, 21, 120, 123], [29, 37, 15, 33, 17, 29, 112, 115], [22, 98, 57, 58, 48, 63, 19, 102], [13, 0, 49, 45, 58, 4, 23, 50, 60, 23, 92, 95], [0, 35, 35, 31, 61, 63, 92, 90, 63, 1, 84, 5, 53, 33, 76, 79], [32, 35, 68, 30, 45, 74, 44, 71], [34, 78, 21, 22, 28, 235, 207, 244, 217, 195, 211, 196, 227, 201, 180, 183], [210, 212, 223, 230, 237, 250, 216, 175], [202, 195, 199, 253, 198, 170, 225, 242, 248, 175, 208, 163], [197, 205, 152, 200, 199, 252, 232, 155], [195, 239, 144, 221], [241, 244, 197, 194, 246, 199, 140, 143], [208, 252, 255, 192, 211, 255, 128, 138, 222, 228, 255, 210], [221, 242, 244, 169, 160, 169, 131, 168, 164, 251, 155, 162, 168, 162, 156, 243], [157, 151, 151, 226, 137, 133, 232, 235], [180, 234, 143, 175, 129, 157, 224, 227], [188, 211, 179, 148, 128, 165, 216, 219], [134, 133, 208, 154, 137, 139, 208, 211], [182, 194, 200, 135, 144, 198, 204, 133, 173, 169, 196, 199], [162, 206, 133, 142, 90, 86, 55, 51, 87, 66, 80, 119, 82, 59, 98, 59], [105, 92, 51, 50], [73, 35, 106, 127, 77, 77, 92, 93, 122, 119, 72, 119, 127, 115, 68, 119, 66, 96, 31, 30], [71, 72, 112, 79, 114, 97, 70, 127, 72, 106, 104, 31, 106, 96, 15, 14], [86, 88, 112, 5, 89, 110, 94, 83, 88, 122, 7, 70], [26, 9, 20, 58, 29, 29, 20, 55, 42, 123, 126, 118], [46, 126, 12, 35, 50, 54, 111, 110], [55, 102, 0, 62, 59, 106, 8, 34, 61, 10, 107, 49], [3, 82, 52, 25, 7, 34, 48, 18, 50, 40, 87, 86], [53, 58, 60, 4], [19, 67, 36, 67, 32, 70, 60, 7, 34, 46, 79, 75, 37, 37, 44, 15, 226, 179, 182, 190], [229, 221, 212, 235, 234, 209, 199, 182], [232, 202, 183, 191, 201, 198, 229, 174], [246, 167, 163, 251, 250, 244, 203, 166], [197, 175, 216, 236, 194, 224, 159, 158], [199, 151, 159, 150, 203, 196, 228, 199], [201, 233, 231, 146], [228, 223, 228, 199, 237, 216, 224, 206], [219, 138, 252, 194, 216, 252, 131, 130], [152, 240, 251, 186, 160, 141, 148, 183, 144, 251, 128, 163, 175, 255, 155, 242], [178, 150, 235, 165, 183, 147, 152, 231, 129, 129, 144, 235], [191, 239, 136, 172, 186, 182, 172, 211, 190, 178, 180, 173, 138, 132, 184, 135, 137, 172, 211, 210], [145, 166, 199, 134, 174, 173, 188, 190, 174, 188, 203, 182], [165, 207, 134, 104, 96, 85, 50, 104, 95, 71, 58, 53], [106, 57, 89, 100, 105, 70, 89, 106], [114, 33, 81, 103, 116, 78, 70, 37], [125, 40, 93, 108, 121, 95, 34, 29], [120, 117, 109, 20, 68, 113, 30, 93], [115, 114, 97, 85, 79, 29, 102, 13], [83, 117, 10, 90], [87, 4, 2, 65, 99, 98, 117, 76, 88, 83, 106, 125], [37, 112, 47, 47, 33, 1, 32, 117], [19, 13, 29, 38, 47, 124, 29, 60, 7, 4, 25, 30, 4, 100, 110, 44, 58, 29, 98, 41, 7, 9, 106, 80], [2, 15, 37, 84, 63, 55, 90, 85], [51, 7, 7, 31, 15, 40, 37, 28, 40, 65, 34, 73], [47, 68, 33, 72, 43, 45, 3, 16, 31, 41, 41, 245, 229, 199, 201, 177, 214, 209, 214, 181], [208, 231, 221, 186, 236, 217, 217, 233, 192, 161, 197, 237, 241, 251, 193, 205, 251, 237, 166, 161], [196, 173, 213, 204, 248, 250, 241, 200, 247, 241, 223, 196, 203, 253, 253, 217, 201, 239, 146, 141], [208, 234, 253, 246, 214, 216, 253, 208, 220, 235, 134, 129], [217, 211, 134, 179, 165, 149, 242, 168], [166, 129, 191, 160, 173, 141, 145, 186, 174, 163, 255, 237], [139, 224, 133, 228, 129, 129, 187, 171, 187, 157, 183, 166, 135, 137, 145, 150, 131, 143, 177, 158], [191, 161, 222, 156, 176, 189, 135, 153], [180, 220, 185, 128, 147, 179, 206, 201], [151, 177, 177, 145, 163, 173, 140, 193], [170, 187, 49, 76, 81, 75, 86, 53, 101, 65, 66, 101, 105, 83, 90, 97, 109, 60, 65, 44], [112, 84, 120, 96, 76, 64, 94, 96, 79, 118, 90, 105, 125, 89, 114, 87, 116, 78, 98, 86, 66, 112, 126, 107, 78, 109, 126, 93, 76, 120, 101, 12], [80, 116, 13, 95, 87, 64, 5, 4], [96, 92, 1, 0], [93, 120, 6, 112, 33, 113, 17, 120], [37, 0, 14, 48, 41, 121, 25, 112], [20, 8, 6, 59, 48, 97, 6, 57, 7, 15, 14, 50, 59, 12, 101, 24, 7, 7, 50, 9], [59, 80, 46, 9, 63, 63, 58, 5, 63, 88, 62, 1, 13, 2, 38, 7, 39, 52, 50, 0, 20, 26, 46, 0], [24, 60, 69, 23, 39, 39, 210, 241, 224, 177, 176, 184], [223, 234, 222, 231, 235, 220, 185, 220, 215, 215, 194, 254], [241, 161, 194, 165, 194, 192, 244, 234, 248, 220, 240, 231, 196, 200, 238, 215, 192, 206, 246, 223], [197, 148, 250, 208, 200, 153, 216, 193, 251, 156, 226, 132, 208, 244, 225, 136], [215, 255, 242, 213, 224, 220, 129, 128], [234, 141, 138, 176, 152, 148, 138, 245], [162, 176, 245, 244], [174, 140, 160, 185, 148, 154, 134, 164, 136, 146, 233, 232], [143, 228, 146, 181, 131, 131, 142, 177, 140, 237, 166, 145, 128, 132, 217, 216], [191, 213, 209, 156, 176, 190, 213, 220, 138, 168, 166, 136, 163, 164, 193, 155, 148, 176, 173, 196], [158, 188, 144, 137, 164, 87, 56, 51, 103, 69, 56, 59], [95, 57, 48, 125, 106, 91, 57, 51], [108, 34, 125, 36, 73, 69, 40, 43], [116, 42, 79, 42, 77, 91, 113, 106, 69, 119, 24, 19, 71, 101, 24, 27], [69, 111, 69, 95, 113, 121, 99, 70, 76, 113, 12, 15], [80, 6, 99, 6, 100, 111, 12, 10, 97, 100, 119, 12, 102, 23, 54, 127], [26, 28, 11, 54, 37, 47, 116, 119], [17, 126, 27, 126], [43, 61, 61, 62, 55, 35, 104, 107], [5, 54, 15, 47, 2, 111, 15, 46, 61, 82, 85, 95], [57, 35, 51, 15, 3, 63, 10, 87], [49, 94, 59, 94, 58, 29, 39, 8, 16, 51, 76, 3, 20, 74, 47, 51, 33, 43, 59, 21, 37, 216, 200, 191], [224, 182, 211, 245, 221, 223, 199, 186], [233, 191, 207, 230, 214, 162, 253, 162, 246, 197, 168, 171], [244, 245, 207, 224, 255, 219, 164, 231, 197, 241, 156, 159], [192, 201, 243, 210, 197, 155, 243, 198, 250, 158, 213, 198, 204, 131, 252, 143], [234, 227, 128, 216, 213, 255, 236, 135], [225, 251, 235, 140, 222, 151, 143, 174, 150, 131, 169, 242, 157, 159, 177, 153, 146, 148, 159, 190, 173, 167, 236, 239], [138, 131, 173, 186, 180, 182, 136, 231], [185, 139, 139, 170, 189, 211, 171, 215], [128, 163, 163, 159, 132, 218, 191, 160, 137, 130, 188, 211], [140, 184, 187, 158, 169, 153, 153, 194], [147, 176, 179, 138, 153, 173, 192, 195], [85, 73, 72, 117, 102, 82, 106, 125, 82, 88, 55, 54], [85, 62, 68, 99, 73, 73, 64, 127, 69, 123, 64, 122, 66, 116, 76, 98], [70, 90, 114, 101, 67, 102, 90, 75, 65, 116, 27, 26], [75, 68, 124, 81, 79, 106, 23, 90, 83, 3, 103, 14], [110, 114, 90, 77, 97, 11, 3, 78, 94, 80, 104, 85, 36, 0, 127, 126], [30, 18, 115, 44], [42, 14, 28, 38, 40, 12, 115, 114], [10, 16, 111, 110], [14, 13, 24, 61, 1, 1, 24, 55], [5, 48, 50, 42, 58, 32, 95, 94], [61, 61, 44, 13], [9, 62, 95, 0, 54, 53, 6, 63, 42, 22, 79, 78], [46, 24, 79, 2, 28, 56, 71, 70], [31, 79, 22, 15, 218, 239, 211, 190], [220, 180, 191, 182, 234, 231, 200, 251, 238, 234, 179, 178], [242, 163, 167, 255, 247, 251, 220, 225, 251, 254, 167, 166], [198, 202, 171, 245, 194, 147, 240, 207, 242, 243, 236, 237, 249, 155, 147, 223, 207, 234, 151, 218, 234, 230, 135, 131], [215, 219, 209, 138], [219, 212, 236, 214, 238, 250, 210, 197, 164, 134, 132, 182, 157, 247, 147, 250], [153, 145, 156, 160, 173, 154, 246, 242], [180, 153, 152, 187, 141, 231, 131, 234], [186, 142, 156, 235, 133, 239, 185, 226], [185, 211, 219, 150, 128, 173, 172, 145, 138, 168, 215, 214], [141, 223, 184, 218, 147, 134, 207, 206], [144, 173, 184, 155, 155, 146, 188, 149, 166, 170, 203, 48], [98, 111, 58, 53, 103, 107, 86, 53], [83, 56, 93, 60, 95, 89, 119, 124, 115, 69, 69, 97, 113, 94, 89, 91, 124, 76, 73, 116, 71, 46, 42, 72, 67, 117, 118, 25], [124, 20, 79, 64, 74, 65, 101, 90, 119, 105, 122, 13], [107, 117, 10, 94, 81, 97, 6, 84, 91, 84, 106, 1], [88, 127, 2, 125], [37, 47, 5, 55, 33, 17, 18, 117], [43, 120, 126, 63, 47, 124, 9, 59], [48, 5, 102, 46, 15, 14, 29, 104, 8, 55, 13, 49, 63, 109, 21, 12], [55, 53, 15, 17, 1, 34, 34, 90, 56, 50, 33, 21, 52, 54, 4, 77], [21, 53, 74, 49, 44, 46, 37, 16, 47, 44, 49, 49], [31, 41, 70, 235, 219, 211, 190, 185], [214, 209, 178, 184, 196, 222, 209, 206, 238, 224, 197, 248, 244, 195, 174, 169], [204, 164, 174, 226], [248, 205, 202, 161], [196, 243, 217, 202, 192, 144, 199, 221, 199, 149, 241, 221, 243, 239, 229, 218, 207, 233, 150, 201], [211, 245, 223, 193, 239, 227, 199, 206, 216, 237, 143, 129], [222, 141, 237, 185, 160, 149, 246, 170, 164, 145, 157, 253], [171, 157, 141, 248, 155, 137, 246, 225, 136, 224, 187, 133, 183, 228, 187, 173, 189, 146, 150, 225], [191, 236, 234, 138, 184, 181, 214, 147, 135, 161, 161, 221, 141, 173, 131, 149, 143, 221, 185, 158, 144, 179, 206, 201], [150, 155, 161, 140, 155, 201, 161, 144, 175, 166, 90, 109, 96, 109, 86, 72, 103, 95, 70, 57, 80, 92, 57, 97, 109, 104, 45, 44], [72, 75, 124, 98, 116, 36, 82, 41, 121, 108, 33, 32], [123, 75, 105, 28], [64, 100, 29, 22], [127, 21, 17, 92, 72, 70, 122, 71, 74, 104, 102, 90], [80, 0, 118, 5, 87, 96, 1, 76, 89, 76, 1, 0], [103, 81, 22, 113, 38, 4, 125, 48, 37, 48, 117, 116], [31, 120, 30, 52, 47, 24, 101, 63], [49, 20, 56, 32, 12, 32, 101, 100], [59, 105, 10, 104, 61, 23, 42, 13, 1, 80, 41, 88], [5, 10, 4, 7, 11, 35, 61, 80], [12, 56, 54, 69], [35, 43, 62, 12, 47, 47, 20, 58, 30, 44, 38, 16, 36, 39, 201, 188], [224, 177, 176, 184], [229, 192, 206, 252], [233, 185, 202, 191, 212, 222, 173, 172], [200, 253, 222, 227, 244, 198, 165, 164], [248, 220, 240, 232, 196, 201, 242, 215], [248, 206, 220, 211, 196, 148, 225, 148], [207, 239, 233, 144], [205, 157, 220, 223, 208, 212, 137, 136], [236, 240, 129, 138, 216, 220, 129, 128], [220, 141, 245, 181, 152, 155, 138, 191, 159, 144, 172, 165], [169, 249, 245, 180, 170, 142, 237, 236], [129, 191, 154, 133, 130, 176, 229, 228], [185, 233, 138, 177, 132, 158, 221, 220], [129, 209, 178, 213, 179, 138, 190, 145, 142, 188, 186, 151, 138, 170, 152, 157, 171, 164, 166, 153, 149, 144, 197, 196], [153, 201, 178, 149, 156, 71, 84, 63], [103, 83, 48, 117, 101, 58, 71, 120], [106, 91, 56, 121, 107, 72, 64, 47], [113, 67, 121, 38, 77, 64, 83, 87, 122, 75, 44, 110, 123, 97, 28, 31], [65, 22, 16, 92, 67, 111, 16, 93], [114, 30, 20, 91, 117, 101, 8, 3, 87, 115, 99, 79, 101, 10, 127, 74, 89, 91, 0, 3], [90, 20, 4, 127], [32, 118, 41, 51], [36, 0, 3, 38, 41, 11, 116, 38, 21, 17, 108, 111], [10, 5, 104, 107], [51, 31, 15, 32, 63, 29, 96, 99], [5, 49, 92, 95], [0, 87, 55, 14, 3, 47, 60, 87], [8, 1, 59, 26, 13, 67, 43, 30], [16, 51, 51, 70, 22, 57, 68, 71], [34, 36, 47, 8, 38, 231, 188, 191], [231, 195, 233, 242, 221, 217, 180, 183], [233, 203, 180, 248, 236, 209, 172, 175], [241, 166, 160, 253, 244, 245, 160, 237], [194, 196, 223, 233, 197, 247, 148, 201, 242, 150, 205, 214, 197, 239, 248, 151], [200, 235, 148, 157], [205, 130, 132, 203, 233, 227, 243, 221, 210, 224, 247, 138, 226, 228, 239, 210, 230, 242, 169, 170, 161, 169, 161, 170], [163, 143, 240, 135, 169, 255, 169, 162, 172, 187, 159, 186, 176, 230, 128, 235], [142, 234, 159, 175, 142, 155, 165, 182, 186, 182, 179, 215, 128, 163, 176, 219], [182, 176, 191, 129, 138, 187, 212, 170, 141, 194, 196, 194, 169, 172, 157, 198], [148, 149, 175, 128, 159, 171, 204, 146], [90, 51, 122, 117, 93, 104, 64, 116, 89, 59, 51, 127, 111, 74, 55, 117, 113, 73, 64, 127, 64, 38, 84, 123, 123, 116, 92, 43, 125, 74, 39, 106], [67, 18, 104, 73], [70, 98, 74, 82, 114, 127, 78, 91, 118, 101, 124, 64], [84, 118, 100, 7, 80, 112, 124, 95, 91, 11, 108, 72, 93, 106, 11, 83], [36, 6, 123, 21, 18, 0, 8, 19, 44, 1, 0, 59, 46, 32, 45, 114], [10, 99, 20, 35, 54, 50, 107, 106], [60, 17, 16, 51, 62, 51, 16, 47, 4, 38, 14, 21, 6, 2, 91, 90], [49, 91, 18, 7, 53, 53, 36, 60, 42, 38, 60, 67], [23, 70, 32, 30, 33, 33, 48, 2, 37, 37, 21, 66], [226, 178, 200, 243, 222, 210, 179, 183, 209, 209, 216, 251, 238, 191, 186, 178], [194, 196, 163, 194, 194, 211, 253, 170], [192, 168, 163, 241, 254, 175, 230, 236, 250, 246, 236, 147], [197, 242, 147, 221, 204, 238, 236, 222, 200, 234, 194, 199, 212, 246, 231, 142], [237, 226, 228, 220, 234, 225, 224, 215, 222, 211, 236, 242, 161, 153, 140, 243, 158, 146, 243, 171, 171, 174, 247, 246], [150, 149, 148, 163, 178, 191, 131, 238], [141, 231, 144, 162, 129, 235, 140, 168, 137, 239, 144, 176, 186, 182, 176, 210, 134, 162, 176, 140, 190, 132, 172, 152, 136, 186, 184, 149], [147, 194, 160, 198, 150, 178, 163, 202], [162, 203, 172, 203, 170, 186, 146, 116, 91, 90, 115, 114, 103, 107, 81, 88, 83, 103, 81, 118, 87, 86, 94, 45], [72, 32, 42, 97, 79, 67, 123, 109, 123, 119, 77, 101, 76, 73, 42, 78, 67, 101, 118, 25], [70, 97, 95, 64, 112, 24, 125, 67, 79, 28, 87, 91, 107, 106, 122, 9], [111, 91, 91, 75, 91, 124, 117, 12, 88, 105, 71, 44], [27, 21, 118, 44, 28, 43, 63, 36, 19, 11, 118, 113], [46, 124, 55, 32, 8, 96, 6, 105], [54, 17, 47, 48, 60, 11, 102, 97], [7, 25, 25, 80, 56, 51, 94, 89], [4, 49, 86, 0, 51, 88, 61, 56, 15, 57, 86, 6, 21, 53, 27, 4, 23, 27, 19, 62, 27, 23, 61, 21, 31, 57, 41, 235], [210, 213, 182, 180, 200, 252, 205, 202, 234, 228, 193, 228, 232, 223, 178, 173], [242, 245, 174, 169], [241, 165, 221, 232, 253, 221, 206, 161], [255, 217, 243, 218, 197, 229, 245, 209, 255, 254, 238, 149], [202, 153, 249, 192, 206, 239, 146, 141], [210, 129, 225, 205, 215, 132, 195, 212], [219, 215, 130, 143], [222, 246, 233, 186, 160, 131, 254, 249], [161, 158, 134, 245], [170, 141, 141, 253, 174, 252, 153, 187], [136, 224, 187, 184, 140, 228, 164, 229], [136, 183, 183, 178, 142, 137, 234, 208, 175, 136, 177, 166, 134, 136, 173, 128, 140, 187, 214, 209], [140, 169, 185, 128, 171, 192, 155, 196], [172, 174, 189, 146, 175, 189, 195, 193], [164, 144, 86, 49, 102, 68, 61, 112], [101, 106, 49, 57, 83, 83, 94, 97], [111, 61, 70, 36], [118, 84, 45, 65, 114, 95, 82, 105, 120, 118, 127, 32], [124, 45, 21, 72, 120, 116, 126, 83, 69, 74, 126, 24, 72, 70, 84, 91, 119, 120, 97, 12], [81, 116, 13, 79, 87, 111, 106, 73, 88, 9, 8, 0], [92, 13, 117, 45, 32, 46, 22, 41, 28, 6, 117, 116], [28, 28, 32, 56, 42, 11, 29, 40, 3, 11, 30, 44, 15, 15, 51, 100], [3, 3, 30, 42, 8, 50, 54, 24, 1, 81, 8, 19, 4, 0, 85, 84], [14, 44, 85, 3, 52, 93, 8, 29, 35, 65, 12, 29, 21, 68, 53, 68], [47, 62, 69, 55, 42, 19, 210, 213], [219, 177, 189, 240, 228, 234, 222, 227, 238, 202, 177, 176], [234, 216, 165, 250, 200, 196, 206, 229, 244, 250, 206, 242], [248, 169, 169, 234, 252, 216, 230, 148], [198, 228, 242, 145, 194, 226, 238, 218, 203, 252, 200, 216], [247, 156, 250, 221, 235, 235, 230, 217, 227, 240, 254, 204, 216, 214, 234, 196], [221, 140, 146, 184, 160, 241, 176, 169, 144, 128, 158, 253, 174, 138, 241, 240], [148, 162, 233, 164, 182, 155, 153, 232], [183, 144, 180, 183, 187, 154, 225, 224], [135, 237, 152, 151, 129, 209, 178, 180, 191, 191, 186, 134], [176, 172, 128, 151, 138, 168, 182, 132, 171, 193, 162, 187, 148, 197, 170, 149, 152, 186, 193, 192], [171, 109, 87, 108, 81, 92, 109, 113], [100, 101, 48, 121, 105, 75, 52, 99, 85, 123, 75, 122, 74, 39, 71, 96, 116, 127, 36, 39], [121, 113, 91, 106, 69, 113, 28, 31], [65, 22, 16, 76, 69, 26, 28, 26, 113, 116, 69, 30, 77, 103, 103, 71, 87, 101, 8, 11], [110, 85, 111, 10, 98, 109, 0, 3], [101, 45, 45, 55, 25, 5, 120, 123], [30, 122, 112, 33, 17, 29, 112, 115], [21, 98, 7, 98, 2, 102, 108, 35, 51, 31, 15, 110, 63, 29, 96, 99], [62, 55, 84, 23, 57, 60, 47, 47, 61, 63, 5, 4, 10, 36, 60, 83], [13, 39, 39, 26, 16, 71, 35, 15, 45, 46, 43, 22, 30, 52, 44, 67], [28, 237, 215, 232, 231, 197, 184, 187], [230, 223, 188, 231, 233, 251, 176, 179], [238, 215, 253, 231, 247, 213, 168, 171], [244, 245, 223, 239, 193, 219, 164, 234], [198, 146, 152, 209, 193, 151, 236, 155], [254, 155, 227, 198, 242, 244, 255, 194, 254, 222, 231, 223, 233, 217, 227, 207, 226, 138, 128, 139, 216, 209, 243, 210], [221, 135, 248, 170, 153, 133, 248, 251], [164, 166, 162, 247], [169, 139, 244, 164, 174, 226, 135, 185], [138, 231, 159, 186, 142, 128, 139, 182], [130, 139, 165, 169, 190, 167, 164, 223], [186, 215, 179, 159, 132, 218, 208, 147], [186, 129, 129, 128, 185, 167, 157, 135, 151, 176, 172, 198, 166, 160, 179, 131, 162, 164, 150, 195], [89, 51, 122, 117, 103, 55, 83, 58], [81, 94, 68, 125, 111, 122, 51, 50], [73, 35, 43, 101, 117, 39, 122, 123], [65, 43, 98, 119, 69, 69, 84, 74, 65, 118, 19, 79, 70, 22, 112, 23], [73, 126, 31, 81, 72, 106, 104, 90, 105, 3, 103, 14], [86, 114, 15, 89, 117, 109, 123, 6], [101, 101, 108, 15, 25, 22, 12, 49], [22, 40, 62, 49, 17, 17, 27, 121, 2, 8, 8, 54, 51, 60, 20, 102], [55, 56, 0, 32, 58, 30, 28, 49, 6, 12, 99, 98], [58, 12, 14, 16, 6, 36, 91, 90], [11, 4, 60, 17, 54, 53, 63, 82], [17, 67, 36, 70, 37, 71, 79, 28, 34, 40, 71, 70], [24, 37, 48, 19, 227, 234, 250, 235, 230, 232, 226, 182, 209, 222, 238, 231], [238, 202, 226, 245, 244, 208, 175, 174]];
  var o = 237;
  if (o == 0) {
    o = 151;
  }
  var bj = 210;
  if (bj >= 6) {
    bj = 140;
  }
  for (let a = 0; a < ᐃᐃ.length; a++) {
    ᐃᐃ[a] = Vf.atob(aj(ᐃᐃ[a]));
  }
  const cj = 13;
  const dj = 2;
  const ej = false;
  const h = 19;
  const fj = ["id", "#ac222a", "#16695f", "#57442a", "Crab sticks", "object", "#4eb687", "Starve.io", "XPayStationWidget", "#042b30", "#032428", "#041c21", "dano em construções: 1", "#7c4908", "Pomocny w niszczeniu budowli", "#1f4948", "#634828", "#2b6664", "#c26de0", "middle", "#af59cd", "source-over", "#BB0000", "#fef4f4", "#c27add", "Прочность: 2000", "#cd98e5", "#0a4049", "011_111_111", "010_111_011", "MADBalgouthi", "#564021", "#3dc4c0", "#184747", "#b29e4d", "#163a3a", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "También puedes conseguir minerales", "cave o chão para pegar terra, areia e gelo", "Durabilité: 1000", "#342C7C", "Food: 10", " Collect 1 dragon heart", "#73dde5", "time", "Cactus", "#ffffff", "#1b170c", "Crab claws can also be eaten", "#A89F67", "treasure_chest_4", "azerty_ing", "#0B6A84", "010_011_000", "DESERT", "On-Hit Damage: 3", "Используется для разрушения зданий", "plm", "Cava para conseguir tierra, arena y hielo", "#2b9390", "#bbbbbb", "send", "#b7252c", "#a7983c", "011_111_000", "#9E8456", "Time Remaining", "_number", "000_010_000", "#174a51", "You are the king of crabs!", "#092813", "__default", "Chrono Quests", "#3e3c25", "Oh, yeah? Is there crab in the crab sticks?", "Так же вы можете получить ресурсы", "000_110_110", "#4c3a15", "fo", " Open 5 treasure chests", "#077b49", "comida: 100", "#d588f1", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "010_010_010", "upfiz", "Daño: 2", "#d7990c", "#77371f", "#200333", "rgba(255, 255, 255, 0)", "#111316", "#1a4545", "#1f773d", "#58452b", "init", "sw", "#083326", "#D8DC74", " Reward", "#b15ecf", " QUIT", "110_110_000", "starve_quality", "#B56D18", "#f9efeb", "#43b5af", "Allow you to calm crabs, and heal them", "#C1C0C0", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "Урон по строениям: 1", "#A9D6D3", "claim_rewards", "Durabilité: 2000", "Animals Defense: 13", "011_011_011", "#187484", "011_111_011", "low_ing", "000_010_010", "#388AC7", "#120202", ".md-languages label button", "defesa de jogadores: 4, defesa de animais: 16", "canvas", "_on", "WINTER", "#25c5d6", "011_111_110", "Players Defense: 4", "Creuse la terre, le sable et la neige", "#d45ce5", "When you are flying,", "#29aaa1", "000_011_011", "#bfb360", "input_ratio", "2d", "110_111_111", "#86d4e0", "#073030", "Damage: 3", "Kill", "#46554D", "#8c29aa", "#A5A244", "Chapka", "de", "000_110_010", "#58645F", "#09373F", "#092b29", "#74ede6", "Durabilité: 700", "game_body", "You feel a great power emanating from this orb", "#53A4D5", "#f4efc6", "Building method: Free. Press G to change", "#ff0000", "eogito", "#44301b", "Réchauffe en dehors de l'eau et dans l'hiver", "You can not attack when you use it", "Players Defense: 4, Animals Defense: 16", "#614627", "#f0f4f0", "Прочность: 700", "dont_hit_5", "winter_7", "#183f3f", "#c67933", "#0a2728", "#c1b06b", "stop", "Crab Claw", "#555555", "000_011_010", "#322413", "_trad_number", "#b3e0e3", "#394841", "#4d2d14", "fade", "#072824", "#281A49", "#493e26", "#4d4a2e", "cancel_sure_delete", "#21112D", "010_011_010", "nickname_input", "#242503", "forest", "#c4bc51", "starve_info_box", "#e8e8e8", "000_110_000", "#FFF", "#efd435", "111_111_010", "eject_member", "#665329", "#9b2b25", "Du kannst auch Mineralien bekommen", "bread_6", "Building Damage: 4", "durabilidade: 700", "#7f6d52", "_blank", "high_ing", "#07393d", "inv_shop", "000_111_110", "#dfd1cb", "010_111_110", "Bed", "#7d6144", "#5cc5ce", "gm", "#939995", "You will be cured faster", "FB", "Wytrzymałość: 1000", "Możesz także zdobyć minerały", "#e9dad9", "isl", "#67766F", "#be8d50", "#141414", "#8255b5", "Taco4Life", "#7C5A29", "Easter Egg", "Anyone want to play?", "#34255d", "Durability: 400", "re", "#2E85A0", "#242330", "#000000", "Relax in this confortable bed", "#182935", "Crab Spear", "servselect", " Be peaceful", "Survive without losing life", "durabilidade: 1000", "Content-Type", "pos", "claim_reward_", "lock_team", "#c7a726", "#313041", "Damage: 1", "Damage: 24", "#EBF2F0", "load", "#5E3E1A", "#163A3A", "Haltbarkeit: 2000", "LAVA", "Damage: 14", "#1d051e", "#1a4935", "#83827e", "#b864d6", " you can only hit people who are flying too", "#252525", "none", "Schaden an Gebäuden: 1", "#83ddd4", "Pixelbitie", "#e2cf27", " Constraints", "Dégâts: 2", "time_finished_", "#a33e2b", "recipe_craft", "#2b5c48", "#3ba578", "Dig the ground to gather dirt, ice, and sand", "010_111_000", "#8359d3", "#2a2938", "#281C08", "você também pode pegar minerais", "#747471", "Damage: 30", "#031619", "constraintquest", "function", "aloner", "number", "010_011_011", "#485e66", "Защищает от холода вне воды.", "Защита от игроков: 4, Защита от животных: 16", "mouseup", "#232828", "Peut aussi récupérer des minéraux", "Wytrzymałość: 2000", "#454545", "Warm outside water and in winter", "#9baaa3", "#EAEAEA", "shop_starterkit", "#d2c77b", "#0d1b1c", "Crabs follow you", " Share on Twitter", "name", "Te calienta en invierno y fuera del agua", "You can buy items on the shop in the next game with your points", "dano: 2", "Starve.io ", "#0e3022", "running", "cs", "#082b22", "points", "#554139", "Emerald Machine", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "Widget", "#0F3A24", "durabilidade: 2000", "Birth: 4min", "#660000", "#eda80d", "#47341d", "#2b280a", "starve_safe", "#afac98", "Building Damage: 1", "#5E3C10", "#c3be9a", "nu", "px", "#523e26", "Haltbarkeit: 1000", "#115E60", "#0e3838", "#939393", "Utile pour détruire les bâtiments", "#b29c32", "#5f6061", "gapi", "#adbcb5", "#123335", "click", "starve_aliasing", "Lebenszeit: 8 Tage", "011_111_010", "Uuunnnggg", "#392C16", " Gather 1 amethyst", "Damage: 4", "'Baloo Paaji', sans-serif", "#214C4B", "Durability: 2000", "#2b7c57", "#C0BF55", "#4c3b19", "pizza wa", "#816511", "volume", "gw", "event", "#FFFFFF", "string", "Haltbarkeit: 700", "#352b10", "kit", "111_111_110", "#347f93", "#87d2e6", "#C09D6F", "110_111_011", "#C98435", "#2A8B9B", "loaded", "#0c0c0d", "#1e2021", "team_box", "#C6AF81", "#e0f2f6", "#1d1d22", "#3d2a6e", "typequest", "They can't hit you and you can't hit them", "#032b23", "#785f4c", "Défense: 4, Défense contre animaux: 16", "#5cccc4", "#80500b", "#000", "Урон: 2", "account_nickname_input", "#280e09", "#c4a23a", "spectator", "#59c9c0", "You are less cold, less thirsty, and less hungry", "#171a19", "000_011_000", "#7d5234", "score", "Jedzenie: 100", "Sushui", "#A37943", "#0b3432", "111_111_111", "#95d5d8", "#EDCE4F", "010_110_110", "wtb", "</div>", "Building method: Grid. Press G to change", "destination-out", "#63c9d6", "Czas życia: 8 dni", "Damage: 5", "FOREST", "#133a2b", "Useful to destroy buildings", "#123b3f", "Daño para estructuras: 1", "Obrażenia do budowli: 1", "Sandwich", "#654320", "inline-block", "Crab Helmet", "amethyst_2", "#ee593d", "#0F464C", "#B6222A", "011_011_010", "CrysTal", "#136167", "Durabilidad: 700", " Collect 100 bread in deep winter", "Durabilidad: 2000", "Communist", "You can also gather minerals", "serverAddressInput", "Ciepło w i poza zimą", "#6a7570", "111_111_011", "#3f332a", "000_111_000", "110_110_010", "010_111_111", "110_111_010", "010_110_010", "#1F343F", "Прочность: 1000", "loaderror", "#fff", "#43aa82", "#a9e4ed", "Grab herum um Dreck, Eis und Sand zu bekommen", "#0a0b0c", " After 1 day, survive in winter", "Damage: 20", "Nützlich um Gebäude zu zerstören", "img/avatar-player14.png", "#252B28", "Food: 20", "011_011_000", "000_111_111", "Days survived", "#75827D", "110_111_110", "quit_chronoquest", "Bueno para destruir estructuras", "#54a4ba", "Essen: 100", "110_110_110", "active", "round", "spatial", "#1a7961", "Wytrzymałość: 700", "rewardquest", "timeremainingquest", " BACK TO THE GAME", "Totem", "#B26F31", "auth2", "application/x-www-form-urlencoded", "Uuunnnggg...", "play", "starve_quests", "fod", " Share on Facebook", "GET", "#1f5453", "#b2d4d1", "Durabilidad: 1000", "mousemove", "iblk", "útil para destruir construções", "#674C2A", "#86d0d1", "qwerty_ing", "#1678a2", "#263947", "#89d1d4", "#8a938e", "opacity", "Durée de vie: 8 jours", "Копайте землю, чтобы получить грязь, лед и песок", "#211108", "Durability: 1000", "#0b2326", "#0a2f2b", "#0d2e33", "#68622D", "#c04933", "Game", "#33b4e4", "010_111_010", "#596560", "010_110_000", "cursor", "starve_mapping", "010_010_000", "buy_kit", "#328587", "#46c2c9", "Lifetime: 8 days", "Comida: 100", "#a08f47", "#3fc9c9", "#043c37", "Winter", "Durability: 700", "home_craft", "#382e19", "#29997c", "110_111_000", "nickname_block", "Продолжительность: 8 дней", "#3da34d", "starve_cancel", "#e4efe8", "&userid=", "111_111_000", "mousedown", "undefined", " Claim rewards", "audio/ambience.mp3", "#764eb5", "#3A2A0D", "px Baloo Paaji", "#35b1b5", "#73583e", "la", "#124949", "killdragon_1", "000_111_010", "#e7dc8f", "CLAIM REWARD!", "#462966", "Score", "dw", "survive20min_3", "#ddcf8a", "#262114", "#030d14", "#24878f", "Damage: 2", "Hält dich warm außerhalb von Wasser und Winter", "#4C3B19", "000_111_011", "#123d38", "#877d36", "Schaden: 2", "#432516", "#0a2d18", "#574122", "timeremain_", "#EFE4B4", "#e45936", "playing", "#1f343f"];
  const g = 12;
  const l = cj;
  const b = 18;
  const v = 255;
  const d = 256;
  const c = -8;
  const m = -4;
  const p = true;
  const C = undefined;
  const u = 20;
  const f = 6;
  const s = 17;
  const y = 1;
  const w = y * 2;
  const z = f;
  const A = 4;
  const k = 100;
  const x = s;
  const J = cj;
  const M = 15;
  const B = 16;
  const D = 14;
  const E = 7;
  const I = 8;
  const P = 11;
  const T = 4;
  const Q = 9;
  const F = 2048;
  const R = 3;
  const j = 10;
  const G = g;
  const L = y * 4096;
  const S = T;
  const O = 5;
  const N = 12;
  const q = P;
  const gj = 0;
  let H;
  let U = C;
  let W = C;
  const hj = y;
  let X;
  const _ = D;
  const ee = J;
  const ie = u;
  const te = I;
  let ne;
  const ij = h;
  const re = Q;
  let ae;
  let jj;
  let kj = C;
  const lj = te;
  let ge;
  let mj = [];
  let be = "_";
  const nj = E;
  const de = p;
  let ce;
  let oj = C;
  const pj = G;
  let Ce;
  let qj;
  let rj;
  let sj = C;
  const tj = b;
  const we = M;
  let Pe;
  const uj = dj;
  const ke = ej;
  let xe;
  let vj;
  let wj;
  let xj;
  let yj = C;
  const zj = de;
  let Ie;
  const Aj = k;
  let Qe;
  const Bj = C;
  let Fe;
  let Cj = C;
  const Dj = y;
  const Ge = g;
  let Le;
  let Ej;
  const Fj = d;
  const Ne = v;
  const qe = B;
  const He = nj;
  let Ue;
  const Gj = O;
  let Ke = Bj;
  const Hj = h;
  const Xe = ie;
  let Ze;
  let Ij = C;
  let Jj;
  let Kj = C;
  const Lj = Gj;
  let ni = C;
  const Mj = zj;
  let ri;
  const Nj = Ge;
  const si = P;
  const hi = Aj;
  const li = tj;
  let gi = C;
  const Oj = R;
  const bi = P;
  const vi = j;
  const di = qe;
  const ci = s;
  const mi = T;
  const pi = f;
  const Ci = uj;
  let Ti = C;
  const Pj = M;
  let zi;
  let Qj = C;
  const Rj = B;
  const Pi = h;
  const Ai = pj;
  let ki = Bj;
  const Sj = we;
  const Ji = C;
  const Mi = re;
  const Bi = Pi;
  const Di = l;
  let Ei;
  let Tj;
  let Uj = Ji;
  const Vj = v;
  const _i = D;
  let Fi;
  let Wj;
  const Xj = Ci;
  let Gi = Bj;
  let Yj = Ji;
  const Zj = lj;
  let Oi;
  let $j = Ji;
  const _j = Zj;
  const Hi = C;
  const Ui = Oj;
  let Yi = 0;
  let ak = C;
  if (!Vf.WebAssembly || !Vf.WebAssembly.instantiate) {
    ᐃⲆⲆΔⵠⵠᐃⲆⵠ();
  }
  const bk = re;
  const Xi = {
    Date: Date
  };
  const Zi = Q;
  const $i = v;
  const ck = Dj;


  /*
  *****************
  *CHEAT VARIABLES*
  *****************
  */
  !function (t) {
    if ("object" == typeof exports) module.exports = t();
    else if ("function" == typeof define && define.amd) define(t);
    else {
      var e;
      "undefined" != typeof window ? e = window : "undefined" != typeof global ? e = global : "undefined" != typeof self && (e = self), e.PF = t()
    }
  }(function () {
    return function t(e, i, n) {
      function o(a, s) {
        if (!i[a]) {
          if (!e[a]) {
            var l = "function" == typeof require && require;
            if (!s && l) return l(a, !0);
            if (r) return r(a, !0);
            throw new Error("Cannot find module '" + a + "'")
          }
          var h = i[a] = {
            exports: {}
          };
          e[a][0].call(h.exports, function (t) {
            var i = e[a][1][t];
            return o(i || t)
          }, h, h.exports, t, e, i, n)
        }
        return i[a].exports
      }
      for (var r = "function" == typeof require && require, a = 0; a < n.length; a++) o(n[a]);
      return o
    }({
      1: [function (t, e, i) {
        e.exports = t("./lib/heap")
      }, {
        "./lib/heap": 2
      }],
      2: [function (t, e, i) {
        (function () {
          var t, i, n, o, r, a, s, l, h, u, p, c, f, d, g;
          n = Math.floor, u = Math.min, i = function (t, e) {
            return e > t ? -1 : t > e ? 1 : 0
          }, h = function (t, e, o, r, a) {
            var s;
            if (null == o && (o = 0), null == a && (a = i), 0 > o) throw new Error("lo must be non-negative");
            for (null == r && (r = t.length); r > o;) a(e, t[s = n((o + r) / 2)]) < 0 ? r = s : o = s + 1;
            return [].splice.apply(t, [o, o - o].concat(e)), e
          }, a = function (t, e, n) {
            return null == n && (n = i), t.push(e), d(t, 0, t.length - 1, n)
          }, r = function (t, e) {
            var n, o;
            return null == e && (e = i), n = t.pop(), t.length ? (o = t[0], t[0] = n, g(t, 0, e)) : o = n, o
          }, l = function (t, e, n) {
            var o;
            return null == n && (n = i), o = t[0], t[0] = e, g(t, 0, n), o
          }, s = function (t, e, n) {
            var o;
            return null == n && (n = i), t.length && n(t[0], e) < 0 && (e = (o = [t[0], e])[0], t[0] = o[1], g(t, 0, n)), e
          }, o = function (t, e) {
            var o, r, a, s, l, h;
            for (null == e && (e = i), l = [], r = 0, a = (s = function () {
              h = [];
              for (var e = 0, i = n(t.length / 2); i >= 0 ? i > e : e > i; i >= 0 ? e++ : e--) h.push(e);
              return h
            }.apply(this).reverse()).length; a > r; r++) o = s[r], l.push(g(t, o, e));
            return l
          }, f = function (t, e, n) {
            var o;
            return null == n && (n = i), -1 !== (o = t.indexOf(e)) ? (d(t, 0, o, n), g(t, o, n)) : void 0
          }, p = function (t, e, n) {
            var r, a, l, h, u;
            if (null == n && (n = i), !(a = t.slice(0, e)).length) return a;
            for (o(a, n), l = 0, h = (u = t.slice(e)).length; h > l; l++) r = u[l], s(a, r, n);
            return a.sort(n).reverse()
          }, c = function (t, e, n) {
            var a, s, l, p, c, f, d, g, b;
            if (null == n && (n = i), 10 * e <= t.length) {
              if (!(l = t.slice(0, e).sort(n)).length) return l;
              for (s = l[l.length - 1], p = 0, f = (d = t.slice(e)).length; f > p; p++) n(a = d[p], s) < 0 && (h(l, a, 0, null, n), l.pop(), s = l[l.length - 1]);
              return l
            }
            for (o(t, n), b = [], c = 0, g = u(e, t.length); g >= 0 ? g > c : c > g; g >= 0 ? ++c : --c) b.push(r(t, n));
            return b
          }, d = function (t, e, n, o) {
            var r, a, s;
            for (null == o && (o = i), r = t[n]; n > e && o(r, a = t[s = n - 1 >> 1]) < 0;) t[n] = a, n = s;
            return t[n] = r
          }, g = function (t, e, n) {
            var o, r, a, s, l;
            for (null == n && (n = i), r = t.length, l = e, a = t[e], o = 2 * e + 1; r > o;) r > (s = o + 1) && !(n(t[o], t[s]) < 0) && (o = s), t[e] = t[o], o = 2 * (e = o) + 1;
            return t[e] = a, d(t, l, e, n)
          }, t = function () {
            function t(t) {
              this.cmp = null != t ? t : i, this.nodes = []
            }
            return t.push = a, t.pop = r, t.replace = l, t.pushpop = s, t.heapify = o, t.updateItem = f, t.nlargest = p, t.nsmallest = c, t.prototype.push = function (t) {
              return a(this.nodes, t, this.cmp)
            }, t.prototype.pop = function () {
              return r(this.nodes, this.cmp)
            }, t.prototype.peek = function () {
              return this.nodes[0]
            }, t.prototype.contains = function (t) {
              return -1 !== this.nodes.indexOf(t)
            }, t.prototype.replace = function (t) {
              return l(this.nodes, t, this.cmp)
            }, t.prototype.pushpop = function (t) {
              return s(this.nodes, t, this.cmp)
            }, t.prototype.heapify = function () {
              return o(this.nodes, this.cmp)
            }, t.prototype.updateItem = function (t) {
              return f(this.nodes, t, this.cmp)
            }, t.prototype.clear = function () {
              return this.nodes = []
            }, t.prototype.empty = function () {
              return 0 === this.nodes.length
            }, t.prototype.size = function () {
              return this.nodes.length
            }, t.prototype.clone = function () {
              var e;
              return (e = new t).nodes = this.nodes.slice(0), e
            }, t.prototype.toArray = function () {
              return this.nodes.slice(0)
            }, t.prototype.insert = t.prototype.push, t.prototype.top = t.prototype.peek, t.prototype.front = t.prototype.peek, t.prototype.has = t.prototype.contains, t.prototype.copy = t.prototype.clone, t
          }(), (null != e ? e.exports : void 0) ? e.exports = t : window.Heap = t
        }).call(this)
      }, {}],
      3: [function (t, e, i) {
        e.exports = {
          Always: 1,
          Never: 2,
          IfAtMostOneObstacle: 3,
          OnlyWhenNoObstacles: 4
        }
      }, {}],
      4: [function (t, e, i) {
        function n(t, e, i) {
          var n;
          "object" != typeof t ? n = t : (e = t.length, n = t[0].length, i = t), this.width = n, this.height = e, this.nodes = this._buildNodes(n, e, i)
        }
        var o = t("./Node"),
          r = t("./DiagonalMovement");
        n.prototype._buildNodes = function (t, e, i) {
          var n, r, a = new Array(e);
          for (n = 0; e > n; ++n)
            for (a[n] = new Array(t), r = 0; t > r; ++r) a[n][r] = new o(r, n);
          if (void 0 === i) return a;
          if (i.length !== e || i[0].length !== t) throw new Error("Matrix size does not fit");
          for (n = 0; e > n; ++n)
            for (r = 0; t > r; ++r) i[n][r] && (a[n][r].walkable = !1);
          return a
        }, n.prototype.getNodeAt = function (t, e) {
          return this.nodes[e][t]
        }, n.prototype.isWalkableAt = function (t, e) {
          return this.isInside(t, e) && this.nodes[e][t].walkable
        }, n.prototype.isInside = function (t, e) {
          return t >= 0 && t < this.width && e >= 0 && e < this.height
        }, n.prototype.setWalkableAt = function (t, e, i) {
          if (e >= 0 && t >= 0 && e < p.vWu && t < p.VOW) {
            this.nodes[e][t].walkable = i
          }
        }, n.prototype.getNeighbors = function (t, e) {
          var i = t.x,
            n = t.y,
            o = [],
            a = !1,
            s = !1,
            l = !1,
            h = !1,
            u = !1,
            p = !1,
            c = !1,
            f = !1,
            d = this.nodes;
          if (this.isWalkableAt(i, n - 1) && (o.push(d[n - 1][i]), a = !0), this.isWalkableAt(i + 1, n) && (o.push(d[n][i + 1]), l = !0), this.isWalkableAt(i, n + 1) && (o.push(d[n + 1][i]), u = !0), this.isWalkableAt(i - 1, n) && (o.push(d[n][i - 1]), c = !0), e === r.Never) return o;
          if (e === r.OnlyWhenNoObstacles) s = c && a, h = a && l, p = l && u, f = u && c;
          else if (e === r.IfAtMostOneObstacle) s = c || a, h = a || l, p = l || u, f = u || c;
          else {
            if (e !== r.Always) throw new Error("Incorrect value of diagonalMovement");
            s = !0, h = !0, p = !0, f = !0
          }
          return s && this.isWalkableAt(i - 1, n - 1) && o.push(d[n - 1][i - 1]), h && this.isWalkableAt(i + 1, n - 1) && o.push(d[n - 1][i + 1]), p && this.isWalkableAt(i + 1, n + 1) && o.push(d[n + 1][i + 1]), f && this.isWalkableAt(i - 1, n + 1) && o.push(d[n + 1][i - 1]), o
        }, n.prototype.clone = function () {
          var t, e, i = this.width,
            r = this.height,
            a = this.nodes,
            s = new n(i, r),
            l = new Array(r);
          for (t = 0; r > t; ++t)
            for (l[t] = new Array(i), e = 0; i > e; ++e) l[t][e] = new o(e, t, a[t][e].walkable);
          return s.nodes = l, s
        }, e.exports = n
      }, {
        "./DiagonalMovement": 3,
        "./Node": 6
      }],
      5: [function (t, e, i) {
        e.exports = {
          manhattan: function (t, e) {
            return t + e
          },
          euclidean: function (t, e) {
            return Math.sqrt(t * t + e * e)
          },
          octile: function (t, e) {
            var i = Math.SQRT2 - 1;
            return e > t ? i * t + e : i * e + t
          },
          chebyshev: function (t, e) {
            return Math.max(t, e)
          }
        }
      }, {}],
      6: [function (t, e, i) {
        e.exports = function (t, e, i) {
          this.x = t, this.y = e, this.walkable = void 0 === i || i
        }
      }, {}],
      7: [function (t, e, i) {
        function n(t) {
          for (var e = [
            [t.x, t.y]
          ]; t.parent;) t = t.parent, e.push([t.x, t.y]);
          return e.reverse()
        }

        function o(t, e, i, n) {
          var o, r, a, s, l, h, u = Math.abs,
            p = [];
          for (o = i > t ? 1 : -1, r = n > e ? 1 : -1, l = (a = u(i - t)) - (s = u(n - e)); p.push([t, e]), t !== i || e !== n;)(h = 2 * l) > -s && (l -= s, t += o), a > h && (l += a, e += r);
          return p
        }
        i.backtrace = n, i.biBacktrace = function (t, e) {
          var i = n(t),
            o = n(e);
          return i.concat(o.reverse())
        }, i.pathLength = function (t) {
          var e, i, n, o, r, a = 0;
          for (e = 1; e < t.length; ++e) i = t[e - 1], n = t[e], o = i[0] - n[0], r = i[1] - n[1], a += Math.sqrt(o * o + r * r);
          return a
        }, i.interpolate = o, i.expandPath = function (t) {
          var e, i, n, r, a, s, l = [],
            h = t.length;
          if (2 > h) return l;
          for (a = 0; h - 1 > a; ++a)
            for (e = t[a], i = t[a + 1], r = (n = o(e[0], e[1], i[0], i[1])).length, s = 0; r - 1 > s; ++s) l.push(n[s]);
          return l.push(t[h - 1]), l
        }, i.smoothenPath = function (t, e) {
          var i, n, r, a, s, l, h, u, p, c = e.length,
            f = e[0][0],
            d = e[0][1],
            g = e[c - 1][0],
            b = e[c - 1][1];
          for (r = [
            [i = f, n = d]
          ], a = 2; c > a; ++a) {
            for (h = o(i, n, (l = e[a])[0], l[1]), p = !1, s = 1; s < h.length; ++s)
              if (u = h[s], !t.isWalkableAt(u[0], u[1])) {
                p = !0;
                break
              } p && (lastValidCoord = e[a - 1], r.push(lastValidCoord), i = lastValidCoord[0], n = lastValidCoord[1])
          }
          return r.push([g, b]), r
        }, i.compressPath = function (t) {
          if (t.length < 3) return t;
          var e, i, n, o, r, a, s = [],
            l = t[0][0],
            h = t[0][1],
            u = t[1][0],
            p = t[1][1],
            c = u - l,
            f = p - h;
          for (c /= r = Math.sqrt(c * c + f * f), f /= r, s.push([l, h]), a = 2; a < t.length; a++) e = u, i = p, n = c, o = f, c = (u = t[a][0]) - e, f = (p = t[a][1]) - i, f /= r = Math.sqrt(c * c + f * f), (c /= r) === n && f === o || s.push([e, i]);
          return s.push([u, p]), s
        }
      }, {}],
      8: [function (t, e, i) {
        e.exports = {
          Heap: t("heap"),
          Node: t("./core/Node"),
          Grid: t("./core/Grid"),
          Util: t("./core/Util"),
          DiagonalMovement: t("./core/DiagonalMovement"),
          Heuristic: t("./core/Heuristic"),
          AStarFinder: t("./finders/AStarFinder"),
          BestFirstFinder: t("./finders/BestFirstFinder"),
          BreadthFirstFinder: t("./finders/BreadthFirstFinder"),
          DijkstraFinder: t("./finders/DijkstraFinder"),
          BiAStarFinder: t("./finders/BiAStarFinder"),
          BiBestFirstFinder: t("./finders/BiBestFirstFinder"),
          BiBreadthFirstFinder: t("./finders/BiBreadthFirstFinder"),
          BiDijkstraFinder: t("./finders/BiDijkstraFinder"),
          IDAStarFinder: t("./finders/IDAStarFinder"),
          JumpPointFinder: t("./finders/JumpPointFinder")
        }
      }, {
        "./core/DiagonalMovement": 3,
        "./core/Grid": 4,
        "./core/Heuristic": 5,
        "./core/Node": 6,
        "./core/Util": 7,
        "./finders/AStarFinder": 9,
        "./finders/BestFirstFinder": 10,
        "./finders/BiAStarFinder": 11,
        "./finders/BiBestFirstFinder": 12,
        "./finders/BiBreadthFirstFinder": 13,
        "./finders/BiDijkstraFinder": 14,
        "./finders/BreadthFirstFinder": 15,
        "./finders/DijkstraFinder": 16,
        "./finders/IDAStarFinder": 17,
        "./finders/JumpPointFinder": 22,
        heap: 1
      }],
      9: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.heuristic = t.heuristic || a.manhattan, this.weight = t.weight || 1, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = s.OnlyWhenNoObstacles : this.diagonalMovement = s.IfAtMostOneObstacle : this.diagonalMovement = s.Never), this.diagonalMovement === s.Never ? this.heuristic = t.heuristic || a.manhattan : this.heuristic = t.heuristic || a.octile
        }
        var o = t("heap"),
          r = t("../core/Util"),
          a = t("../core/Heuristic"),
          s = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, a) {
          var s, l, h, u, p, c, f, d, g = new o(function (t, e) {
            return t.f - e.f
          }),
            b = a.getNodeAt(t, e),
            v = a.getNodeAt(i, n),
            A = this.heuristic,
            m = this.diagonalMovement,
            y = this.weight,
            k = Math.abs,
            M = Math.SQRT2;
          for (b.g = 0, b.f = 0, g.push(b), b.opened = !0; !g.empty();) {
            if ((s = g.pop()).closed = !0, s === v) return r.backtrace(v);
            for (u = 0, p = (l = a.getNeighbors(s, m)).length; p > u; ++u)(h = l[u]).closed || (c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : M), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || y * A(k(c - i), k(f - n)), h.f = h.g + h.h, h.parent = s, h.opened ? g.updateItem(h) : (g.push(h), h.opened = !0)))
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Util": 7,
        heap: 1
      }],
      10: [function (t, e, i) {
        function n(t) {
          o.call(this, t);
          var e = this.heuristic;
          this.heuristic = function (t, i) {
            return 1e6 * e(t, i)
          }
        }
        var o = t("./AStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./AStarFinder": 9
      }],
      11: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.heuristic = t.heuristic || a.manhattan, this.weight = t.weight || 1, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = s.OnlyWhenNoObstacles : this.diagonalMovement = s.IfAtMostOneObstacle : this.diagonalMovement = s.Never), this.diagonalMovement === s.Never ? this.heuristic = t.heuristic || a.manhattan : this.heuristic = t.heuristic || a.octile
        }
        var o = t("heap"),
          r = t("../core/Util"),
          a = t("../core/Heuristic"),
          s = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, a) {
          var s, l, h, u, p, c, f, d, g = function (t, e) {
            return t.f - e.f
          },
            b = new o(g),
            v = new o(g),
            A = a.getNodeAt(t, e),
            m = a.getNodeAt(i, n),
            y = this.heuristic,
            k = this.diagonalMovement,
            M = this.weight,
            W = Math.abs,
            w = Math.SQRT2;
          for (A.g = 0, A.f = 0, b.push(A), A.opened = 1, m.g = 0, m.f = 0, v.push(m), m.opened = 2; !b.empty() && !v.empty();) {
            for ((s = b.pop()).closed = !0, u = 0, p = (l = a.getNeighbors(s, k)).length; p > u; ++u)
              if (!(h = l[u]).closed) {
                if (2 === h.opened) return r.biBacktrace(s, h);
                c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || M * y(W(c - i), W(f - n)), h.f = h.g + h.h, h.parent = s, h.opened ? b.updateItem(h) : (b.push(h), h.opened = 1))
              } for ((s = v.pop()).closed = !0, u = 0, p = (l = a.getNeighbors(s, k)).length; p > u; ++u)
              if (!(h = l[u]).closed) {
                if (1 === h.opened) return r.biBacktrace(h, s);
                c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || M * y(W(c - t), W(f - e)), h.f = h.g + h.h, h.parent = s, h.opened ? v.updateItem(h) : (v.push(h), h.opened = 2))
              }
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Util": 7,
        heap: 1
      }],
      12: [function (t, e, i) {
        function n(t) {
          o.call(this, t);
          var e = this.heuristic;
          this.heuristic = function (t, i) {
            return 1e6 * e(t, i)
          }
        }
        var o = t("./BiAStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./BiAStarFinder": 11
      }],
      13: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never)
        }
        var o = t("../core/Util"),
          r = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, r) {
          var a, s, l, h, u, p = r.getNodeAt(t, e),
            c = r.getNodeAt(i, n),
            f = [],
            d = [],
            g = this.diagonalMovement;
          for (f.push(p), p.opened = !0, p.by = 0, d.push(c), c.opened = !0, c.by = 1; f.length && d.length;) {
            for ((l = f.shift()).closed = !0, h = 0, u = (a = r.getNeighbors(l, g)).length; u > h; ++h)
              if (!(s = a[h]).closed)
                if (s.opened) {
                  if (1 === s.by) return o.biBacktrace(l, s)
                } else f.push(s), s.parent = l, s.opened = !0, s.by = 0;
            for ((l = d.shift()).closed = !0, h = 0, u = (a = r.getNeighbors(l, g)).length; u > h; ++h)
              if (!(s = a[h]).closed)
                if (s.opened) {
                  if (0 === s.by) return o.biBacktrace(s, l)
                } else d.push(s), s.parent = l, s.opened = !0, s.by = 1
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Util": 7
      }],
      14: [function (t, e, i) {
        function n(t) {
          o.call(this, t), this.heuristic = function (t, e) {
            return 0
          }
        }
        var o = t("./BiAStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./BiAStarFinder": 11
      }],
      15: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never)
        }
        var o = t("../core/Util"),
          r = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, r) {
          var a, s, l, h, u, p = [],
            c = this.diagonalMovement,
            f = r.getNodeAt(t, e),
            d = r.getNodeAt(i, n);
          for (p.push(f), f.opened = !0; p.length;) {
            if ((l = p.shift()).closed = !0, l === d) return o.backtrace(d);
            for (h = 0, u = (a = r.getNeighbors(l, c)).length; u > h; ++h)(s = a[h]).closed || s.opened || (p.push(s), s.opened = !0, s.parent = l)
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Util": 7
      }],
      16: [function (t, e, i) {
        function n(t) {
          o.call(this, t), this.heuristic = function (t, e) {
            return 0
          }
        }
        var o = t("./AStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./AStarFinder": 9
      }],
      17: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.heuristic = t.heuristic || o.manhattan, this.weight = t.weight || 1, this.trackRecursion = t.trackRecursion || !1, this.timeLimit = t.timeLimit || Infinity, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = a.OnlyWhenNoObstacles : this.diagonalMovement = a.IfAtMostOneObstacle : this.diagonalMovement = a.Never), this.diagonalMovement === a.Never ? this.heuristic = t.heuristic || o.manhattan : this.heuristic = t.heuristic || o.octile
        }
        var o = (t("../core/Util"), t("../core/Heuristic")),
          r = t("../core/Node"),
          a = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, o) {
          var a, s, l, h = (new Date).getTime(),
            u = function (t, e) {
              return this.heuristic(Math.abs(e.x - t.x), Math.abs(e.y - t.y))
            }.bind(this),
            p = function (t, e) {
              return t.x === e.x || t.y === e.y ? 1 : Math.SQRT2
            },
            c = function (t, e, i, n, a) {
              if (0, this.timeLimit > 0 && (new Date).getTime() - h > 1e3 * this.timeLimit) return Infinity;
              var s = e + u(t, d) * this.weight;
              if (s > i) return s;
              if (t == d) return n[a] = [t.x, t.y], t;
              var l, f, g, b, v = o.getNeighbors(t, this.diagonalMovement);
              for (g = 0, l = Infinity; b = v[g]; ++g) {
                if (this.trackRecursion && (b.retainCount = b.retainCount + 1 || 1, !0 !== b.tested && (b.tested = !0)), (f = c(b, e + p(t, b), i, n, a + 1)) instanceof r) return n[a] = [t.x, t.y], f;
                this.trackRecursion && 0 == --b.retainCount && (b.tested = !1), l > f && (l = f)
              }
              return l
            }.bind(this),
            f = o.getNodeAt(t, e),
            d = o.getNodeAt(i, n),
            g = u(f, d);
          for (a = 0; ; ++a) {
            if (Infinity === (l = c(f, 0, g, s = [], 0))) return [];
            if (l instanceof r) return s;
            g = l
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Node": 6,
        "../core/Util": 7
      }],
      18: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r && 0 !== a) {
            if (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e) || o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a)) return [t, e];
            if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e]
          } else if (0 !== r) {
            if (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1) || o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1)) return [t, e]
          } else if (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e) || o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e)) return [t, e];
          return this._jump(t + r, e + a, t, e)
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p + n, c + o) && d.push([p + n, c + o]), f.isWalkableAt(p - n, c) || d.push([p - n, c + o]), f.isWalkableAt(p, c - o) || d.push([p + n, c - o])) : 0 === n ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]), f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o])) : (f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]), f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1]));
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.Always)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      19: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r && 0 !== a) {
            if (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e) || o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a)) return [t, e];
            if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e]
          } else if (0 !== r) {
            if (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1) || o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1)) return [t, e]
          } else if (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e) || o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e)) return [t, e];
          return o.isWalkableAt(t + r, e) || o.isWalkableAt(t, e + a) ? this._jump(t + r, e + a, t, e) : null
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), (f.isWalkableAt(p, c + o) || f.isWalkableAt(p + n, c)) && d.push([p + n, c + o]), !f.isWalkableAt(p - n, c) && f.isWalkableAt(p, c + o) && d.push([p - n, c + o]), !f.isWalkableAt(p, c - o) && f.isWalkableAt(p + n, c) && d.push([p + n, c - o])) : 0 === n ? f.isWalkableAt(p, c + o) && (d.push([p, c + o]), f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]), f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o])) : f.isWalkableAt(p + n, c) && (d.push([p + n, c]), f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]), f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1]));
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.IfAtMostOneObstacle)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      20: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r && 0 !== a) {
            if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e]
          } else if (0 !== r) {
            if (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1) || o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1)) return [t, e]
          } else if (0 !== a && (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a) || o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a))) return [t, e];
          return o.isWalkableAt(t + r, e) && o.isWalkableAt(t, e + a) ? this._jump(t + r, e + a, t, e) : null
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u)
            if (e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o) f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p, c + o) && f.isWalkableAt(p + n, c) && d.push([p + n, c + o]);
            else {
              var g;
              if (0 !== n) {
                g = f.isWalkableAt(p + n, c);
                var b = f.isWalkableAt(p, c + 1),
                  v = f.isWalkableAt(p, c - 1);
                g && (d.push([p + n, c]), b && d.push([p + n, c + 1]), v && d.push([p + n, c - 1])), b && d.push([p, c + 1]), v && d.push([p, c - 1])
              } else if (0 !== o) {
                g = f.isWalkableAt(p, c + o);
                var A = f.isWalkableAt(p + 1, c),
                  m = f.isWalkableAt(p - 1, c);
                g && (d.push([p, c + o]), A && d.push([p + 1, c + o]), m && d.push([p - 1, c + o])), A && d.push([p + 1, c]), m && d.push([p - 1, c])
              }
            }
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.OnlyWhenNoObstacles)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      21: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r) {
            if (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1) || o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1)) return [t, e]
          } else {
            if (0 === a) throw new Error("Only horizontal and vertical movements are allowed");
            if (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a) || o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a)) return [t, e];
            if (this._jump(t + 1, e, t, e) || this._jump(t - 1, e, t, e)) return [t, e]
          }
          return this._jump(t + r, e + a, t, e)
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n ? (f.isWalkableAt(p, c - 1) && d.push([p, c - 1]), f.isWalkableAt(p, c + 1) && d.push([p, c + 1]), f.isWalkableAt(p + n, c) && d.push([p + n, c])) : 0 !== o && (f.isWalkableAt(p - 1, c) && d.push([p - 1, c]), f.isWalkableAt(p + 1, c) && d.push([p + 1, c]), f.isWalkableAt(p, c + o) && d.push([p, c + o]));
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.Never)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      22: [function (t, e, i) {
        var n = t("../core/DiagonalMovement"),
          o = t("./JPFNeverMoveDiagonally"),
          r = t("./JPFAlwaysMoveDiagonally"),
          a = t("./JPFMoveDiagonallyIfNoObstacles"),
          s = t("./JPFMoveDiagonallyIfAtMostOneObstacle");
        e.exports = function (t) {
          return (t = t || {}).diagonalMovement === n.Never ? new o(t) : t.diagonalMovement === n.Always ? new r(t) : t.diagonalMovement === n.OnlyWhenNoObstacles ? new a(t) : new s(t)
        }
      }, {
        "../core/DiagonalMovement": 3,
        "./JPFAlwaysMoveDiagonally": 18,
        "./JPFMoveDiagonallyIfAtMostOneObstacle": 19,
        "./JPFMoveDiagonallyIfNoObstacles": 20,
        "./JPFNeverMoveDiagonally": 21
      }],
      23: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.heuristic = t.heuristic || a.manhattan, this.trackJumpRecursion = t.trackJumpRecursion || !1
        }
        var o = t("heap"),
          r = t("../core/Util"),
          a = t("../core/Heuristic");
        t("../core/DiagonalMovement"), n.prototype.findPath = function (t, e, i, n, a) {
          var s, l = this.openList = new o(function (t, e) {
            return t.f - e.f
          }),
            h = this.startNode = a.getNodeAt(t, e),
            u = this.endNode = a.getNodeAt(i, n);
          for (this.grid = a, h.g = 0, h.f = 0, l.push(h), h.opened = !0; !l.empty();) {
            if ((s = l.pop()).closed = !0, s === u) return r.expandPath(r.backtrace(u));
            this._identifySuccessors(s)
          }
          return []
        }, n.prototype._identifySuccessors = function (t) {
          var e, i, n, o, r, s, l, h, u, p, c = this.grid,
            f = this.heuristic,
            d = this.openList,
            g = this.endNode.x,
            b = this.endNode.y,
            v = t.x,
            A = t.y,
            m = Math.abs;
          for (Math.max, o = 0, r = (e = this._findNeighbors(t)).length; r > o; ++o)
            if (i = e[o], n = this._jump(i[0], i[1], v, A)) {
              if (s = n[0], l = n[1], (p = c.getNodeAt(s, l)).closed) continue;
              h = a.octile(m(s - v), m(l - A)), u = t.g + h, (!p.opened || u < p.g) && (p.g = u, p.h = p.h || f(m(s - g), m(l - b)), p.f = p.g + p.h, p.parent = t, p.opened ? d.updateItem(p) : (d.push(p), p.opened = !0))
            }
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Util": 7,
        heap: 1
      }]
    }, {}, [8])(8)
  });
  (function () {
    function e(t, r, n) {
      function i(a, s) {
        if (!r[a]) {
          if (!t[a]) {
            var u = "function" == typeof require && require;
            if (!s && u) return u(a, !0);
            if (o) return o(a, !0);
            var d = Error("Cannot find module '" + a + "'");
            throw d.code = "MODULE_NOT_FOUND", d
          }
          var m = r[a] = {
            exports: {}
          };
          t[a][0].call(m.exports, function (e) {
            return i(t[a][1][e] || e)
          }, m, m.exports, e, t, r, n)
        }
        return r[a].exports
      }
      for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
      return i
    }
    return e
  })()({
    1: [function (e, t, r) {
      let n = e("worker-timers");
      window.workerTimers = n
    }, {
      "worker-timers": 4
    }],
    2: [function (e, t, r) {
      var n, i;
      n = this, i = function (e) {
        "use strict";
        var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
          a = new WeakMap,
          s = (r = (t = a, function (e, r) {
            return t.set(e, r), r
          }), n = a, function (e) {
            var t = n.get(e),
              i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
            if (!e.has(i)) return r(e, i);
            if (e.size < 536870912) {
              for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
              return r(e, i)
            }
            if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
            for (; e.has(i);) i = Math.floor(Math.random() * o);
            return r(e, i)
          }),
          u = (i = s, function (e) {
            var t = i(e);
            return e.add(t), t
          });
        e.addUniqueNumber = u, e.generateUniqueNumber = s
      }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
    }, {}],
    3: [function (e, t, r) {
      var n, i;
      n = this, i = function (e, t) {
        "use strict";
        var r = function e(r) {
          var n = new Map([
            [0, function () { }]
          ]),
            i = new Map([
              [0, function () { }]
            ]),
            o = new Map,
            a = new Worker(r);
          return a.addEventListener("message", function (e) {
            var t, r = e.data;
            if (void 0 !== (t = r).method && "call" === t.method) {
              var a = r.params,
                s = a.timerId,
                u = a.timerType;
              if ("interval" === u) {
                var d = n.get(s);
                if ("number" == typeof d) {
                  var m = o.get(d);
                  if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                } else if (void 0 !== d) d();
                else throw Error("The timer is in an undefined state.")
              } else if ("timeout" === u) {
                var f = i.get(s);
                if ("number" == typeof f) {
                  var c = o.get(f);
                  if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                } else if (void 0 !== f) f(), i["delete"](s);
                else throw Error("The timer is in an undefined state.")
              }
            } else if (null === (l = r).error && "number" == typeof l.id) {
              var l, v = r.id,
                p = o.get(v);
              if (void 0 === p) throw Error("The timer is in an undefined state.");
              var h = p.timerId,
                w = p.timerType;
              o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
            } else throw Error(r.error.message)
          }), {
            clearInterval: function e(r) {
              var i = t.generateUniqueNumber(o);
              o.set(i, {
                timerId: r,
                timerType: "interval"
              }), n.set(r, i), a.postMessage({
                id: i,
                method: "clear",
                params: {
                  timerId: r,
                  timerType: "interval"
                }
              })
            },
            clearTimeout: function e(r) {
              var n = t.generateUniqueNumber(o);
              o.set(n, {
                timerId: r,
                timerType: "timeout"
              }), i.set(r, n), a.postMessage({
                id: n,
                method: "clear",
                params: {
                  timerId: r,
                  timerType: "timeout"
                }
              })
            },
            setInterval: function e(r, i) {
              var o = t.generateUniqueNumber(n);
              return n.set(o, function () {
                r(), "function" == typeof n.get(o) && a.postMessage({
                  id: null,
                  method: "set",
                  params: {
                    delay: i,
                    now: performance.now(),
                    timerId: o,
                    timerType: "interval"
                  }
                })
              }), a.postMessage({
                id: null,
                method: "set",
                params: {
                  delay: i,
                  now: performance.now(),
                  timerId: o,
                  timerType: "interval"
                }
              }), o
            },
            setTimeout: function e(r, n) {
              var o = t.generateUniqueNumber(i);
              return i.set(o, r), a.postMessage({
                id: null,
                method: "set",
                params: {
                  delay: n,
                  now: performance.now(),
                  timerId: o,
                  timerType: "timeout"
                }
              }), o
            }
          }
        };
        e.load = r
      }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
    }, {
      "fast-unique-numbers": 2
    }],
    4: [function (e, t, r) {
      var n, i;
      n = this, i = function (e, t) {
        "use strict";
        var r, n, i = (r = t.load, n = null, function () {
          if (null !== n) return n;
          var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
            type: "application/javascript; charset=utf-8"
          }),
            t = URL.createObjectURL(e);
          return n = r(t), setTimeout(function () {
            return URL.revokeObjectURL(t)
          }), n
        }),
          o = function e(t) {
            return i().clearInterval(t)
          },
          a = function e(t) {
            return i().clearTimeout(t)
          },
          s = function e(t, r) {
            return i().setInterval(t, r)
          },
          u = function e(t, r) {
            return i().setTimeout(t, r)
          };
        e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
      }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
    }, {
      "worker-timers-broker": 3
    }]
  }, {}, [1]);

  class createText {
    constructor(width, height, buildType) {
      this.canvas = document.createElement("canvas");
      this.ctx = this.canvas.getContext("2d");
      this.canvas.width = width;
      this.canvas.height = height;
      this.buildType = buildType
    }
    drawText(text, size, color, color2) {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.font = size + "px Baloo Paaji";
      this.ctx.strokeStyle = color;
      this.ctx.fillStyle = color2;
      this.ctx.lineWidth = 7;
      switch (this.buildType) {
        case 1:
          this.ctx.strokeText(`x${text & 255}`, 15, 40);
          this.ctx.fillText(`x${text & 255}`, 15, 40);
          this.ctx.strokeText(`x${(text & 65280) >> 8}`, 15, 60);
          this.ctx.fillText(`x${(text & 65280) >> 8}`, 15, 60);
          break;
        case 2:
          this.ctx.strokeText(`x${text & 31}`, 15, 40);
          this.ctx.fillText(`x${text & 31}`, 15, 40);
          this.ctx.strokeText(`x${(text & 992) >> 5}`, 15, 60);
          this.ctx.fillText(`x${(text & 992) >> 5}`, 15, 60);
          this.ctx.strokeText(`x${(text & 31744) >> 10}`, 15, 80);
          this.ctx.fillText(`x${(text & 31744) >> 10}`, 15, 80);
          break;
        case 3:
          this.ctx.strokeText(text[0], 15, 40);
          this.ctx.fillText(text[0], 15, 40);
          this.ctx.strokeText((text[1] & 16) >> 4 ? "L" : "U", 15, 60);
          this.ctx.fillText((text[1] & 16) >> 4 ? "L" : "U", 15, 60);
          this.ctx.strokeText((text[1] & 16) >> 4 ? text[1] - 16 : text[1], 15, 80);
          this.ctx.fillText((text[1] & 16) >> 4 ? text[1] - 16 : text[1], 15, 80);
          break;
        default:
          this.ctx.strokeText(text, 15, 40);
          this.ctx.fillText(text, 15, 40);
          break
      }
    }
  }

  function getHitbox(objectType, objectSizeType) {
    let objRadius = 0;
    switch (objectType) {
      case "t":
        if (objectSizeType == 0 || objectSizeType == 1) {
          objRadius = 102
        } else if (objectSizeType == 2 || objectSizeType == 3) {
          objRadius = 77
        } else if (objectSizeType == 4 || objectSizeType == 5) {
          objRadius = 60
        };
        break;
      case "b":
        if (objectSizeType == 0 || objectSizeType == 1) {
          objRadius = 97
        } else if (objectSizeType == 2 || objectSizeType == 3) {
          objRadius = 80
        };
        break;
      case "s":
        if (objectSizeType == 0) {
          objRadius = 102
        } else if (objectSizeType == 1) {
          objRadius = 87
        } else if (objectSizeType == 2) {
          objRadius = 58
        };
        break;
      case "g":
        if (objectSizeType == 0) {
          objRadius = 90
        } else if (objectSizeType == 1) {
          objRadius = 75
        } else if (objectSizeType == 2) {
          objRadius = 65
        };
        break;
      case "p":
        objRadius = 77;
        break;
      case "f":
        if (objectSizeType == 0) {
          objRadius = 140
        } else if (objectSizeType == 1) {
          objRadius = 115
        } else if (objectSizeType == 2) {
          objRadius = 95
        };
        break;
      case "d":
        if (objectSizeType == 0) {
          objRadius = 85
        } else if (objectSizeType == 1) {
          objRadius = 75
        } else if (objectSizeType == 2) {
          objRadius = 60
        };
        break;
      case "a":
        if (objectSizeType == 0) {
          objRadius = 85
        } else if (objectSizeType == 1) {
          objRadius = 75
        };
        break;
      case "cs":
        if (objectSizeType == 0) {
          objRadius = 100
        } else if (objectSizeType == 1) {
          objRadius = 87
        } else if (objectSizeType == 2) {
          objRadius = 95
        } else if (objectSizeType == 3) {
          objRadius = 90
        };
        break;
      case "re":
        if (objectSizeType == 0) {
          objRadius = 67
        } else if (objectSizeType == 1) {
          objRadius = 82
        } else if (objectSizeType == 2) {
          objRadius = 90
        };
        break;
      case "c":
        objRadius = 55;
        break;
      case "m":
        if (objectSizeType == 1) {
          objRadius = 85
        } else if (objectSizeType == 2) {
          objRadius = 90
        };
        break;
      case 4:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 7:
      case 8:
      case 9:
      case 10:
      case 15:
      case 16:
      case 17:
      case 19:
      case 21:
      case 50:
      case 51:
      case 18:
      case 32:
      case 34:
      case 29:
      case 22:
        objRadius = 45;
        break;
      case 2:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
      case 53:
      case 49:
      case 48:
      case 47:
      case 46:
      case 45:
        objRadius = 35;
        break;
      case 11:
      case 0:
        objRadius = 25;
        break
    }
    return objRadius
  }
  let Hitboxes = {};

  function createHitbox(g, h, l2) {
    let hitbox = getHitbox(g, h);
    if (hitbox) {
      let cnvs = document.createElement("canvas");
      let l = cnvs.getContext("2d");
      cnvs.width = 300;
      cnvs.height = 300;
      l.lineWidth = 2.5;
      l.strokeStyle = "red";
      l.beginPath();
      l.arc(150, 150, hitbox, 0, 2 * Math.PI);
      l.stroke();
      l2 ? Hitboxes[g] = cnvs : Hitboxes[g][h] = cnvs
    }
  }

  let SandStormImage = new Image;
  let BlizzardImage = new Image;
  SandStormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
  BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
  let AutoRespawnInterval;
  let Settings = {
    Fly: {
      o: .5,
      e: false
    },
    Hitbox: false,
    Debug: false,
    Xray: {
      e: false,
      k: "Backquote",
      o: .5
    },
    Timer: true,
    Respawn: false,
    AutoSeed: false,
    PCount: false,
    Ice: false,
    JoinLeave: false,
    AutoSpike: {
      e: false,
      k: "Space",
      m: true,
      p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
    },
    Crown: true,
    Spectator: {
      k: "KeyP"
    },
    DropSword: {
      k: "KeyV"
    },
    PutInChest: 10,
    AutoBook: true,
    AutoBridge: {
      e: false,
      k: "KeyT",
      m: false
    },
    Bed: false,
    Equiq: false,
    PlayerOntop: true,
    BoxOntop: true,
    ChestOntop: false,
    BS: true,
    BuildingInfo: true,
    BoxInfo: true,
    Tracers: false,
    Esp: false,
    MarkTotem: true,
    MarkDeath: true,
    SandwormTracers: false,
    KrakenTracers: false,
    ColoredSpikes: true,
    NoFog: true,
    ListEnabledHacks: true,
    MovementPredicter: false,
    LockedChests: true,
    DrawItemsOnChest: true,
    ShowNames: true,
    Roofs: true,
    AutoTotem: {
      e: false,
      k: "KeyH"
    },
    PathFinder: {
      e: false,
      g: false,
      k: "Numpad3"
    },
    AutoSteal: {
      e: false,
      k: "KeyQ",
      l: [],
      u: false,
      o: 0
    },
    AutoExtTake: {
      e: false,
      k: "NONE"
    },
    AutoExtPut: {
      e: false,
      k: "NONE"
    },
    AutoBreadTake: {
      e: false,
      k: "NONE"
    },
    AutoBreadPut: {
      e: false,
      k: "NONE"
    },
    SwordInChest: {
      e: false,
      k: "KeyE"
    },
    Aimbot: {
      e: false,
      k: "KeyF",
      a: null
    },
    AutoTame: {
      e: false,
      k: "KeyJ",
      a: null
    },
    AutoEme: {
      e: false,
      k: "Numpad2",
      a: null
    },
    Autofarm: {
      e: false,
      k: "Numpad1",
      a: null,
      w: false,
      x: null,
      xx: null,
      y: null,
      yy: null,
      sy: null,
      sx: null
    },
    AutoRes: {
      e: false,
      k: "NONE",
      a: null
    },
    AutoCraft: {
      e: false,
      k: "KeyK"
    },
    AutoRecycle: {
      e: false,
      k: "KeyL"
    }
  };
  let LastMove = 0;
  let WeaponDamageList = {};
  WeaponDamageList[-1] = 5;
  WeaponDamageList[12] = 10;
  WeaponDamageList[13] = 14;
  WeaponDamageList[14] = 15;
  WeaponDamageList[15] = 17;
  WeaponDamageList[33] = 18;
  WeaponDamageList[34] = 22;
  WeaponDamageList[16] = 22;
  WeaponDamageList[18] = 13;
  WeaponDamageList[17] = 24;
  WeaponDamageList[55] = 2;
  WeaponDamageList[32] = 6;
  WeaponDamageList[31] = 5;
  WeaponDamageList[8] = 1;
  WeaponDamageList[1] = 2;
  WeaponDamageList[3] = 3;
  WeaponDamageList[4] = 4;
  WeaponDamageList[49] = 1;
  WeaponDamageList[56] = 5;
  WeaponDamageList[46] = 2;
  WeaponDamageList[50] = 3;
  WeaponDamageList[51] = 4;
  WeaponDamageList[52] = 5;
  WeaponDamageList[36] = 3;
  WeaponDamageList[37] = 4;
  WeaponDamageList[38] = 5;
  WeaponDamageList[45] = 12;
  WeaponDamageList[57] = 12;
  WeaponDamageList[0] = 19;
  WeaponDamageList[5] = 22;
  WeaponDamageList[6] = 24;
  WeaponDamageList[30] = 27;
  WeaponDamageList[63] = 33;
  WeaponDamageList[62] = 30;
  WeaponDamageList[19] = 30;
  let lastBoughtKit = -1;
  let XrayCtx = CanvasRenderingContext2D.prototype.drawImage;
  let PathfinderEnd = {
    x: -1,
    y: -1
  };
  let CrownCooldown = 0;
  let Spectator;
  let EmeraldPos = [
    [21550, 29718],
    [21963, 29773],
    [21919, 29350]
  ];
  let EmeraldIndex = 0;
  let lastrecycled = -1;
  let lastcrafted = -1;
  let toPlace = -1;
  let Totem = {
    x: null,
    y: null
  };
  let Death = {
    x: null,
    y: null
  };
  let TimerTools = {
    HPTimer: 0,
    GaugeTimer: 0
  };
  let Limit = {
    L: 0,
    I: new createText(250, 70, 0),
    E: false
  };
  let JoinLeave = {
    Join: [],
    Leave: [],
    toggle1: false,
    toggle2: false,
    toggle11: false,
    toggle22: false
  };

  CanvasRenderingContext2D.prototype.drawImage = function () {
    if (Settings.Xray.e) {
      this.globalAlpha = Settings.Xray.o;
      let e = XrayCtx.apply(this, arguments);
      this.globalAlpha = 1;
      return e
    }
    return XrayCtx.apply(this, arguments)
  };

  window.Utils = {
    initUI: () => {
      let gui = new guify({
        title: "deobfuscate in 30min",
        theme: {
          name: "LOUX",
          colors: {
            panelBackground: "rgb(0,0,0)",
            componentBackground: "rgb(3, 16, 34)",
            componentForeground: "rgb(62, 125, 215)",
            textPrimary: "rgb(0, 255, 255)",
            textSecondary: "rgb(255,255,255)",
            textHover: "rgb(43, 16, 159)"
          },
          font: {
            fontFamily: "Baloo Paaji",
            fontSize: "20px",
            fontWeight: "1"
          }
        },
        align: "right",
        width: 550,
        barMode: "none",
        panelMode: "none",
        opacity: .6,
        root: document.body,
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Visuals",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Misc",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Binds",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoFarm",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "PathFinder",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoSteal",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoSpike",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoCraft&Recycle",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Token",
        open: false
      });
      gui.Register([{
        type: "button",
        label: "Set AutoSpike Key",
        action: data => {
          Utils.controls.setKeyBind("AutoSpike")
        }
      }, {
        type: "display",
        label: "AutoSpike Key:",
        object: Settings.AutoSpike,
        property: "k"
      }, {
        type: "checkbox",
        label: "AutoSpike 2",
        object: Settings.AutoSpike,
        property: "m",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "1",
        object: Settings.AutoSpike.p,
        property: "0",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "2",
        object: Settings.AutoSpike.p,
        property: "1",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "3",
        object: Settings.AutoSpike.p,
        property: "2",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "4",
        object: Settings.AutoSpike.p,
        property: "3",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "5",
        object: Settings.AutoSpike.p,
        property: "4",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "6",
        object: Settings.AutoSpike.p,
        property: "5",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "7",
        object: Settings.AutoSpike.p,
        property: "6",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "AutoSpike"
      });
      gui.Register([{
        type: "button",
        label: "Set AutoSteal Key",
        action: data => {
          Utils.controls.setKeyBind("AutoSteal")
        }
      }, {
        type: "display",
        label: "AutoSteal Key:",
        object: Settings.AutoSteal,
        property: "k"
      }, {
        type: "checkbox",
        label: "AutoSteal",
        object: Settings.AutoSteal,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoUnlock",
        object: Settings.AutoSteal,
        property: "u",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "ItemID",
        min: 0,
        max: 1e4,
        step: 1,
        object: Settings.AutoSteal,
        property: "o",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Add Item ID to SmartSteal",
        action: data => {
          Settings.AutoSteal.l.push(Settings.AutoSteal.o);
          updateChest()
        }
      }, {
        type: "button",
        label: "Delete ID",
        action: data => {
          let index = Settings.AutoSteal.l.indexOf(Settings.AutoSteal.o);
          if (index !== -1) {
            Settings.AutoSteal.l.splice(index, 1)
          }
          updateChest()
        }
      }, {
        type: "button",
        label: "Clear",
        action: data => {
          Settings.AutoSteal.l = [];
          updateChest()
        }
      }], {
        folder: "AutoSteal"
      });
      gui.Register([{
        type: "checkbox",
        label: "AutoCraft",
        object: Settings.AutoCraft,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoRecycle",
        object: Settings.AutoRecycle,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Set AutoCraft Key",
        action: data => {
          Utils.controls.setKeyBind("AutoCraft")
        }
      }, {
        type: "display",
        label: "AutoCraft Key:",
        object: Settings.AutoCraft,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoRecycle Key",
        action: data => {
          Utils.controls.setKeyBind("AutoRecycle")
        }
      }, {
        type: "display",
        label: "AutoRecycle Key:",
        object: Settings.AutoRecycle,
        property: "k"
      }], {
        folder: "AutoCraft&Recycle"
      });
      gui.Register([{
        type: "checkbox",
        label: "Start PathFinder",
        object: Settings.PathFinder,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Put Your Inventory to Chest",
        object: Settings.PathFinder,
        property: "g",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Set target location",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            PathfinderEnd.x = Math.floor(myPlayer.x / 100);
            PathfinderEnd.y = Math.floor(myPlayer.y / 100)
          }
        }
      }, {
        type: "text",
        label: "Set X",
        object: PathfinderEnd,
        property: "x",
        onChange: data => { }
      }, {
        type: "text",
        label: "Set Y",
        object: PathfinderEnd,
        property: "y",
        onChange: data => { }
      }, {
        type: "display",
        label: "Target X",
        object: PathfinderEnd,
        property: "x"
      }, {
        type: "display",
        label: "Target Y",
        object: PathfinderEnd,
        property: "y"
      }], {
        folder: "PathFinder"
      });
      gui.Register([{
        type: "button",
        label: "Set AutoExtractor Put Key",
        action: data => {
          Utils.controls.setKeyBind("AutoExtPut")
        }
      }, {
        type: "display",
        label: "AutoExtractor Put Key:",
        object: Settings.AutoExtPut,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoExtractor Take Key",
        action: data => {
          Utils.controls.setKeyBind("AutoExtTake")
        }
      }, {
        type: "display",
        label: "AutoExtractor Take Key:",
        object: Settings.AutoExtTake,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoBread Take Key",
        action: data => {
          Utils.controls.setKeyBind("AutoBreadTake")
        }
      }, {
        type: "display",
        label: "AutoBread Take Key:",
        object: Settings.AutoBreadTake,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoBread Put Key",
        action: data => {
          Utils.controls.setKeyBind("AutoBreadPut")
        }
      }, {
        type: "display",
        label: "AutoBread Put Key:",
        object: Settings.AutoBreadPut,
        property: "k"
      }, {
        type: "button",
        label: "Set Aimbot Key",
        action: data => {
          Utils.controls.setKeyBind("Aimbot")
        }
      }, {
        type: "display",
        label: "Aimbot Key:",
        object: Settings.Aimbot,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoTame Key",
        action: data => {
          Utils.controls.setKeyBind("AutoTame")
        }
      }, {
        type: "display",
        label: "AutoTame Key:",
        object: Settings.AutoTame,
        property: "k"
      }, {
        type: "button",
        label: "Set SwordInChest Key",
        action: data => {
          Utils.controls.setKeyBind("SwordInChest")
        }
      }, {
        type: "display",
        label: "SwordInChest Key:",
        object: Settings.SwordInChest,
        property: "k"
      }, {
        type: "button",
        label: "Set Xray Key",
        action: data => {
          Utils.controls.setKeyBind("Xray")
        }
      }, {
        type: "display",
        label: "Xray Key:",
        object: Settings.Xray,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoBridge Key",
        action: data => {
          Utils.controls.setKeyBind("AutoBridge")
        }
      }, {
        type: "display",
        label: "AutoBridge Key:",
        object: Settings.AutoBridge,
        property: "k"
      }, {
        type: "button",
        label: "Set PathFinder Key",
        action: data => {
          Utils.controls.setKeyBind("PathFinder")
        }
      }, {
        type: "display",
        label: "PathFinder Key:",
        object: Settings.PathFinder,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoTotem Key",
        action: data => {
          Utils.controls.setKeyBind("AutoTotem")
        }
      }, {
        type: "display",
        label: "AutoTotem Key:",
        object: Settings.AutoTotem,
        property: "k"
      }, {
        type: "button",
        label: "Set Autofarm Key",
        action: data => {
          Utils.controls.setKeyBind("Autofarm")
        }
      }, {
        type: "display",
        label: "Autofarm Key:",
        object: Settings.Autofarm,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoEmerald Key",
        action: data => {
          Utils.controls.setKeyBind("AutoEme")
        }
      }, {
        type: "display",
        label: "AutoEmerald Key:",
        object: Settings.AutoEme,
        property: "k"
      }, {
        type: "button",
        label: "Set Spectator Key",
        action: data => {
          Utils.controls.setKeyBind("Spectator")
        }
      }, {
        type: "display",
        label: "Spectator Key:",
        object: Settings.Spectator,
        property: "k"
      }, {
        type: "button",
        label: "Set DropSword Key",
        action: data => {
          Utils.controls.setKeyBind("DropSword")
        }
      }, {
        type: "display",
        label: "DropSword Key:",
        object: Settings.DropSword,
        property: "k"
      }], {
        folder: "Binds"
      });
      gui.Register([{
        type: "checkbox",
        label: "Autobridge with G mode",
        object: Settings.AutoBridge,
        property: "m",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Equip after place",
        object: Settings,
        property: "Equiq",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoExtractor Take",
        object: Settings.AutoExtTake,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoExtractor Put",
        object: Settings.AutoExtPut,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoBread Take",
        object: Settings.AutoBreadTake,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoBread Put",
        object: Settings.AutoBreadPut,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoEmerald",
        object: Settings.AutoEme,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoRespawn",
        object: Settings,
        property: "Respawn",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoCrown",
        object: Settings,
        property: "Crown",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Auto-Book",
        object: Settings,
        property: "AutoBook",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoTotem",
        object: Settings.AutoTotem,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoSeed",
        object: Settings,
        property: "AutoSeed",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoIce",
        object: Settings,
        property: "Ice",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Aimbot",
        object: Settings.Aimbot,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoTame",
        object: Settings.AutoTame,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "Put that much in chest",
        min: 10,
        max: 8e3,
        step: 1,
        object: Settings,
        property: "PutInChest",
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "Misc"
      });
      gui.Register([{
        type: "checkbox",
        label: "BlizzardSandstorm",
        object: Settings,
        property: "BS",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "MovementPredicter",
        object: Settings,
        property: "MovementPredicter",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Show Join&Leaves",
        object: Settings,
        property: "JoinLeave",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "DrawItemsOnChest",
        object: Settings,
        property: "DrawItemsOnChest",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ListEnabledHacks",
        object: Settings,
        property: "ListEnabledHacks",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "SandwormTracers",
        object: Settings,
        property: "SandwormTracers",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Show If in bed",
        object: Settings,
        property: "Bed",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "KrakenTracers",
        object: Settings,
        property: "KrakenTracers",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ColoredSpikes",
        object: Settings,
        property: "ColoredSpikes",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "LockedChests",
        object: Settings,
        property: "LockedChests",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "BuildingInfo",
        object: Settings,
        property: "BuildingInfo",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "PlayerOntop",
        object: Settings,
        property: "PlayerOntop",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ChestOntop",
        object: Settings,
        property: "ChestOntop",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "BoxOntop",
        object: Settings,
        property: "BoxOntop",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "PlayerInfo",
        object: Settings,
        property: "PCount",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "MarkTotem",
        object: Settings,
        property: "MarkTotem",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "MarkDeath",
        object: Settings,
        property: "MarkDeath",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Debugger",
        object: Settings,
        property: "Debug",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Hitboxes",
        object: Settings,
        property: "Hitbox",
        onChange: data => {
          for (let hitbox in Hitboxes) delete Hitboxes[hitbox];
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ShowName",
        object: Settings,
        property: "ShowNames",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "BoxInfo",
        object: Settings,
        property: "BoxInfo",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Tracers",
        object: Settings,
        property: "Tracers",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Timers",
        object: Settings,
        property: "Timer",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "NoFog",
        object: Settings,
        property: "NoFog",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Roofs",
        object: Settings,
        property: "Roofs",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Xray",
        object: Settings.Xray,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Vehicle Xray",
        object: Settings.Fly,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Esp",
        object: Settings,
        property: "Esp",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "Xray Opacity",
        min: 0,
        max: 1,
        step: .1,
        object: Settings.Xray,
        property: "o",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "Vehicle Opacity",
        min: 0,
        max: 1,
        step: .1,
        object: Settings.Fly,
        property: "o",
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "Visuals"
      });
      gui.Register([{
        type: "checkbox",
        label: "Start AutoFarm",
        object: Settings.Autofarm,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoWater",
        object: Settings.Autofarm,
        property: "w",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Top left of farm",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            Settings.Autofarm.x = myPlayer.x;
            Settings.Autofarm.y = myPlayer.y
          }
        }
      }, {
        type: "button",
        label: "Bottom right of farm",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            Settings.Autofarm.xx = myPlayer.x;
            Settings.Autofarm.yy = myPlayer.y
          }
        }
      }, {
        type: "button",
        label: "Safe Point",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            Settings.Autofarm.sx = myPlayer.x;
            Settings.Autofarm.sy = myPlayer.y
          }
        }
      }, {
        type: "display",
        label: "X",
        object: Settings.Autofarm,
        property: "x"
      }, {
        type: "display",
        label: "Y",
        object: Settings.Autofarm,
        property: "y"
      }, {
        type: "display",
        label: "X1",
        object: Settings.Autofarm,
        property: "xx"
      }, {
        type: "display",
        label: "Y1",
        object: Settings.Autofarm,
        property: "yy"
      }, {
        type: "display",
        label: "SX",
        object: Settings.Autofarm,
        property: "sx"
      }, {
        type: "display",
        label: "SY",
        object: Settings.Autofarm,
        property: "sy"
      }], {
        folder: "AutoFarm"
      });
      gui.Register([{
        type: "button",
        label: "Copy Token and TokenID",
        action: data => {
          let str = "```" + `Token: ${m.Vw_}\nTokenID: ${m.$UQ_0}` + "```";
          window.prompt("Press CTRL C", str)
        }
      }], {
        folder: "Token"
      })
    },
    controls: null,
    controller: class {
      setKeyBind(callback) {
        Settings[callback].k = "Press any key";
        let click = 0;
        document.addEventListener("keydown", function abc(event) {
          click++;
          if (click >= 1) {
            if (event.code == "Escape") {
              Settings[callback].k = "NONE"
            } else {
              Settings[callback].k = event.code
            }
            document.removeEventListener("keydown", abc);
            Utils.saveSettings()
          }
        })
      }
    },
    saveSettings: () => {
      for (let HACK in Settings) {
        localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
      }
    },
    loadSettings: () => {
      for (let HACK in Settings) {
        let data = localStorage.getItem(HACK + "loux");
        if (data) Settings[HACK] = JSON.parse(data)
      }
    },
    LoadHack: () => {
      Utils.loadSettings();
      Settings.Xray.e = false;
      Settings.AutoSpike.e = false;
      Settings.PathFinder.e = false;
      Settings.Aimbot.e = false;
      Settings.AutoTame.e = false;
      Settings.Autofarm.e = false;
      Settings.AutoEme.e = false;
      Utils.controls = new Utils.controller;
      let script = document.createElement("script");
      script.onload = function () {
        Utils.initUI()
      };
      script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
      document.body.appendChild(script);
      setTimeout(() => {
        let mainFlakes = document.getElementById("snowflakeContainer");
        if (mainFlakes) {
          mainFlakes.nextElementSibling.remove();
          mainFlakes.previousElementSibling.remove();
          for (let i = 0; i < mainFlakes.childNodes.length; i++) {
            mainFlakes.childNodes[i].remove()
          }
          mainFlakes.remove()
        }
      }, 1e4)
    }
  };


  Vf.WebAssembly.instantiate(Uint8Array.from(Vf.atob(""), function (a) {
    return a.charCodeAt(gj);
  }), Xi).then(function (a) {
    U = a.instance;
    H = U.exports;
    W = H.memory;
    X = W.buffer;
    ne = H.__pin;
    ae = H.__unpin;
    jj = H.__new;
    kj = H.__collect;
    be = "_";
    for (let b = 0; b < 30; b++) {
      mj[b] = H[be + b];
    }
    ge = H.__rtti_base;
    ce = new Float32Array(X);
    oj = new Float64Array(X);
    Ce = new BigUint64Array(X);
    sj = new Uint32Array(X);
    qj = new Uint16Array(X);
    rj = new Uint8Array(X);
    Pe = new BigInt64Array(X);
    yj = new Int32Array(X);
    xe = new Int16Array(X);
    vj = new Int8Array(X);
    Fi = mj[2];
    Fe = mj[25];
    Ze = mj[Ai];
    Le = mj[19];
    $j = mj[29];
    Uj = mj[si];
    Ti = mj[Xe];
    Ie = mj[Pj];
    Ij = mj[28];
    zi = mj[26];
    xj = mj[T];
    ki = mj[7];
    Qj = mj[27];
    Gi = mj[re];
    Yj = mj[j];
    Kj = mj[gj];
    Oi = mj[y];
    gi = mj[pi];
    wj = mj[22];
    Jj = mj[_i];
    Wj = mj[R];
    Tj = mj[Lj];
    Ke = mj[b];
    ri = mj[16];
    Ei = mj[24];
    Ue = mj[23];
    Ej = mj[13];
    Cj = mj[8];
    ni = mj[21];
    Qe = mj[s];
    Yi = 1;
    if (ak) {
      ak();
    }
  });
  const dk = hi;
  const ek = j;
  const fk = ej;
  const gk = function (a) {
    return sj[(ge + T >>> Ci) + (a << y)];
  };
  const hk = gj;
  function ik(a, b, c) {
    if (c) {
      switch (a) {
        case Ci:
          return ce;
        case 3:
          return oj;
      }
    } else {
      switch (a) {
        case gj:
          if (b) {
            return vj;
          } else {
            return rj;
          }
        case Dj:
          if (b) {
            return xe;
          } else {
            return qj;
          }
        case 2:
          if (b) {
            return yj;
          } else {
            return sj;
          }
        case 3:
          if (b) {
            return Pe;
          } else {
            return Ce;
          }
      }
    }
  }
  function jk(a) {
    return 31 - Math.clz32(a >>> z & 31);
  }
  const kk = Fj;
  function lk(a) {
    const b = sj[a + c >>> 2];
    const d = gk(b);
    const e = jk(d);
    let f = d & A ? a : sj[a + S >>> 2];
    const g = d & w ? sj[a + N >>> Ci] : sj[f + m >>> 2] >>> e;
    return ik(e, d & F, d & L).subarray(f >>>= e, f + g);
  }
  const mk = pj;
  const nk = ci;
  const ok = j;
  function pk(a, b, c, d, e) {
    Cj(Ak, a, b, c, d, e);
    return ((205 + ($c(zk[hk], zk[1], zk[uj], zk[Oj]) ^ function (a, b, c, d) {
      ki(Ak, a, b, c, d);
      const e = nf(zk[0], zk[Dj], zk[kg]);
      const f = function (b, c, d, e, f, g) {
        xj(Ak, b, c, d, e, f, g);
        const h = yk(zk[0], zk[bh], zk[ys], zk[3], zk[4], zk[Xk]);
        const a = function (a, b, c) {
          Wj(Ak, a, b, c);
          const d = function (a, b, c) {
            Ke(Ak, a, b, c);
            const d = nf(zk[gj], zk[1], zk[2]);
            const e = function (b, c, d, e, f, g) {
              Gi(Ak, b, c, d, e, f, g);
              const h = function (a, b, c, d) {
                Ie(Ak, a, b, c, d);
                const e = xo(zk[0], zk[1]);
                (function (a, b, c) {
                  Ej(Ak, a, b, c);
                  const d = pt(zk[vl], zk[vg], zk[2], zk[Et]);
                  xo(zk[1], zk[2]);
                })(zk[2], zk[3], zk[gj]);
                return e ^ 63745;
              }(zk[0], zk[1], zk[2], zk[Ia]);
              const a = So(zk[4], zk[Gj], zk[0], zk[Th], zk[it]);
              return (8 << ((h ^ a) >> 8 & 255)) + (16 << ((h ^ a) >> ka & 255)) + (0 << ((h ^ a) >> 16 & Rk)) + (24 << ((h ^ a) >> 24 & 255));
            }(zk[gj], zk[y], zk[dj], zk[hk], zk[1], zk[2]);
            return (8 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) & 255)) + (qe << ((d ^ e) >> di & 255)) + (0 << ((d ^ e) >> 8 & 255));
          }(zk[0], zk[1], zk[2]);
          const e = pt(zk[ka], zk[1], zk[Xj], zk[0]);
          return ((233 + (d ^ e)) * 75 + 74) % 65537;
        }(zk[0], zk[ck], zk[Og]);
        return ((234 + (h ^ a)) * 16807 + 0) % 2147483647;
      }(zk[Kl], zk[0], zk[1], zk[2], zk[kl], zk[Bs]);
      return ((108 + (e ^ f)) * 48271 + 0) % 2147483647;
    }(zk[T], zk[gj], zk[1], zk[2]))) * 75 + 74) % 65537;
  }
  function qk(a, b) {
    const c = ~(a & 56758) & 56758 | ~(a & 56758) & a;
    const d = ~(b & 21953) & (b | 21953);
    const e = Nr(c, d, c, d, c, d);
    const f = function (b, c, d) {
      const e = ~(b & 16347) & 16347 | ~(b & 16347) & b;
      const f = c ^ 30675;
      const g = ~(d & 33945) & (d | 33945);
      const h = Jo(e, f, g, e, f, g);
      const a = function (c, d, e, f, i, j) {
        const k = ~(c & 51476) & 51476 | ~(c & 51476) & c;
        const a = ~(d & 65196) & (d | 65196);
        const m = ~(e & 1626) & e | ~(e & 1626) & 1626;
        const h = ~(f & 11312) & 11312 | ~(f & 11312) & f;
        const l = ((i + 51351) * 1103515245 + 12345) % 2147483648;
        const g = (24 << (j >> 16 & 255)) + (0 << (j >> 24 & 255)) + (8 << (j & 255)) + (16 << (j >> 8 & 255));
        const n = function (b, c, d) {
          const e = (b | 5301) & ~(b & 5301);
          const f = (c + 54951) % 65424;
          const g = (0 << (d >> 24 & 255)) + (24 << (d >> 16 & wa)) + (16 << (d >> I & 255)) + (yg << (d & $i));
          const h = function (b, c, d, e) {
            const f = ((46782 + b) * 2147483629 + 2147483587) % 2147483647;
            const g = (2531011 + (c + 12803) * 214013) % 4294967296;
            const i = (d + 43194) % 65347;
            const a = e ^ 48528;
            const j = Nr(f, g, i, a, f, g);
            rf(i, a, f, g);
            return ~(j & 3771) & j | ~(j & 3771) & 3771;
          }(e, f, g, e);
          ew(f, g, e, f, g);
          return h ^ 33185;
        }(k, a, m);
        const b = Nr(h, l, g, k, a, m);
        return (24 << ((n ^ b) >> 24 & Vj)) + (16 << ((n ^ b) & 255)) + (0 << ((n ^ b) >> ct & 255)) + (8 << ((n ^ b) >> 16 & 255));
      }(e, f, g, e, f, g);
      return ((22941 + (h ^ a)) * 2147483629 + 2147483587) % 2147483647;
    }(c, d, c);
    return (lj << ((e ^ f) >> 8 & 255)) + (16 << ((e ^ f) & 255)) + (0 << ((e ^ f) >> 16 & 255)) + (24 << ((e ^ f) >> 24 & 255));
  }
  const rk = Sj;
  const sk = ee;
  const tk = zj;
  const uk = Rj;
  const vk = P;
  const wk = mi;
  const xk = tk;
  function yk(b, c, d, e, f, g) {
    Ij(Ak, b, c, d, e, f, g);
    const h = $c(zk[hk], zk[1], zk[Ci], zk[3]);
    cw(zk[mi], zk[5], zk[gj], zk[Dj], zk[Ci]);
    return h ^ 31239;
  }
  let zk = Hi;
  let Ak = C;
  const Bk = ak;
  ak = function () {
    Ak = ne(ri(13));
    zk = lk(Ak);
    if (Bk) {
      Bk();
    };
    window.Utils.LoadHack();
  };
  const Ck = "development";
  const Dk = "production";
  const Ek = l;
  const Fk = u;
  function Gk(a) {
    this.ⵠᐃᐃⵠ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor((this.ⵠᐃᐃⵠ - 1) * Math.random());
  }
  const Hk = Hj;
  Gk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠᐃᐃⵠ;
    return this.state / this.ⵠᐃᐃⵠ;
  };
  const Ik = T;
  const Jk = J;
  const Kk = C;
  Gk.prototype.ᐃᐃⲆᐃⲆⲆᐃ = function (a) {
    this.state = a;
  };
  const Lk = ci;
  ᐃᐃⵠᐃⵠⵠⲆ = 10000;
  ΔⵠⲆᐃᐃΔⵠ = [];
  const Mk = li;
  const Nk = lj;
  const Ok = Q;
  var Pk = new Gk();
  const Qk = _i;
  const Rk = $i;
  Pk.ᐃᐃⲆᐃⲆⲆᐃ(new Date().getTime());
  for (var Sk = gj; ᐃᐃⵠᐃⵠⵠⲆ > Sk; Sk++) {
    ΔⵠⲆᐃᐃΔⵠ.push(Pk.random());
  }
  const Tk = nj;
  function Uk(a, b) {
    const c = (2147483587 + (60014 + a) * 2147483629) % 2147483647;
    const d = ~(b & 18605) & b | ~(b & 18605) & 18605;
    return ((5354 + (zo(c, d, c, d, c) ^ Vk(d, c, d, c, d, c))) * 22695477 + Dj) % 4294967296;
  }
  function Vk(b, c, d, e, f, i) {
    const j = ~(b & 23002) & b | ~(b & 23002) & 23002;
    const a = f ^ 35943;
    const k = i ^ 36773;
    const h = rf(j, c ^ 21973, (1013904223 + (63691 + d) * 1664525) % 4294967296, ~(e & 16720) & 16720 | ~(e & 16720) & e);
    const l = function (b, c, d) {
      const e = b ^ 32587;
      const f = ((19981 + c) * 1664525 + 1013904223) % 4294967296;
      const g = ((39766 + d) * 1664525 + 1013904223) % 4294967296;
      const h = qk(e, f);
      (function (b, c, d, e, f, g) {
        const i = (2147483587 + (55915 + b) * 2147483629) % 2147483647;
        const a = (12345 + (15503 + g) * 1103515245) % 2147483648;
        const j = ew(i, (12345 + (12846 + c) * 1103515245) % 2147483648, d ^ 65503, ~(e & 32611) & e | ~(e & 32611) & 32611, ~(f & 58450) & 58450 | ~(f & 58450) & f);
        qk(a, i);
      })(g, e, f, g, e, f);
      return h ^ 54677;
    }(a, k, j);
    return (16 << ((h ^ l) >> 8 & 255)) + (24 << ((h ^ l) >> 16 & 255)) + (0 << ((h ^ l) >> hk & 255)) + (8 << ((h ^ l) >> 24 & 255));
  }
  const Wk = B;
  const Xk = Lj;
  function Yk(b, c, d, e, f) {
    const i = (12345 + (56214 + b) * 1103515245) % 2147483648;
    const j = (31264 + c) % 65426;
    const a = (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)) + (8 << (e & v)) + (0 << (e >> 16 & 255));
    const k = (1013904223 + (13546 + f) * 1664525) % 4294967296;
    const h = function (b, c, d) {
      const e = (8 << (b >> 8 & 255)) + (0 << (b >> 16 & Wq)) + (16 << (b >> Ob & 255)) + (24 << (b >> 24 & 255));
      const f = (Rj << (c >> 24 & 255)) + (0 << (c >> 16 & 255)) + (24 << (c & 255)) + (Sr << (c >> 8 & co));
      const g = (55188 + d) % 65322;
      const h = function (b, c, d, e, f, i) {
        const j = ~(e & 16217) & 16217 | ~(e & 16217) & e;
        const a = ((47059 + f) * 1103515245 + 12345) % 2147483648;
        const k = i ^ 63571;
        const h = $k(((b + 63530) * 214013 + 2531011) % 4294967296, ~(c & 19757) & 19757 | ~(c & 19757) & c, (d | 33789) & ~(d & 33789));
        const l = of(j, a, k);
        return (16 << ((h ^ l) >> 16 & 255)) + (8 << ((h ^ l) >> 24 & 255)) + (24 << ((h ^ l) & 255)) + (0 << ((h ^ l) >> 8 & 255));
      }(e, f, g, e, f, g);
      $k(e, f, g);
      return (h | 27408) & ~(h & 27408);
    }(i, j, ((d + 43685) * 2147483629 + 2147483587) % 2147483647);
    const l = eb(a, k, i, j);
    return (te << ((h ^ l) >> gj & $i)) + (24 << ((h ^ l) >> 24 & v)) + (16 << ((h ^ l) >> 8 & 255)) + (0 << ((h ^ l) >> 16 & 255));
  }
  const Zk = ck;
  function $k(a, b, c) {
    const d = (a | 40411) & ~(a & 40411);
    const e = (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> Nk & 255)) + (uk << (b >> 16 & 255));
    const f = (8 << (c >> 16 & Ne)) + (16 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (24 << (c & 255));
    return (2147483587 + (55497 + (ef(d, e) ^ function (b, c, d, e, f, g) {
      const i = (8 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 24 & 255)) + (0 << (e & 255));
      const a = f ^ 8570;
      const j = ow((1013904223 + (b + 183) * 1664525) % 4294967296, (24 << (c & 255)) + (8 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c >> 16 & 255)), (d | 58528) & ~(d & 58528));
      ef(i, a);
      return ~(j & 42875) & j | ~(j & 42875) & 42875;
    }(f, d, e, f, d))) * 2147483629) % 2147483647;
  }
  const _k = si;
  const aq = ie;
  const bq = hj;
  const en = Mk;
  function tn(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const j = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const a = (lj << (e >> 24 & v)) + (32 << (e >> 32 & v)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, d, e, f, i, j) {
      const k = c ^ 10715;
      const a = (24 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
      const m = (Zj << (e >> di & 255)) + (32 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 32 & 255));
      const h = f ^ 40782;
      const l = i ^ 41301;
      const g = ~(j & 12091) & (j | 12091);
      const n = Mn(k, a, m, h, l, g);
      Mn(k, a, m, h, l, g);
      Yn(k, a, m, h, l);
      const b = (n | 3006) & ~(n & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, j, a, f, i);
    const h = uo(j, a, f, i, j);
    Mn(a, f, i, j, a, f);
    const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  function nn(b, c, d, e, f) {
    const i = ((15761 + b) * 2147483629 + 2147483587) % 2147483647;
    const j = (1 + (c + 7965) * 22695477) % 4294967296;
    const a = (2531011 + (d + 57477) * 214013) % 4294967296;
    const k = (Nk << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> te & 255)) + (24 << (e >> 24 & 255));
    const h = (2531011 + (f + 14526) * 214013) % 4294967296;
    const l = function (b, c, d, e) {
      const f = (0 << (b >> 8 & 255)) + (Zj << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (uk << (b & 255));
      const g = ~(c & 40808) & (c | 40808);
      const i = ~(d & 22660) & d | ~(d & 22660) & 22660;
      const a = (59111 + e) % 65436;
      const j = To(f, g, i);
      Iw(a, f, g, i, a);
      return (j | 34960) & ~(j & 34960);
    }(i, j, a, k);
    Pw(h, i, j, a, k, h);
    return ~(l & 33202) & 33202 | ~(l & 33202) & l;
  }
  const on = Vj;
  function rn(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const k = d ^ 58614;
    const a = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & on)) + (16 << (i >> 16 & 255));
    const l = go(j, k);
    const g = tn(a, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const j = (16 << (d >> 8 & $i)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const a = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = mo(c, d, c);
        En(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ mn(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = to(j, a, f, i, j);
      go(a, f);
      const l = (58498 + (k ^ h)) % 65531;
    })(k, a, m, h);
    const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> Nk & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  function an(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const j = c ^ 63080;
    const a = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = d ^ 62842;
      const a = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = un(f, i, j, a);
      const h = Kn(f, i, j, a);
      tn(f, i, j, a);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (B << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(l & 63304) & (l | 63304);
    }(i, j, a, k);
    const g = uo(h, i, j, a, k);
    return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ fo(h, i, j, a, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function sn(c, e, f, i, j, k) {
    const m = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const a = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = $n(m, a, n, h, l);
    const b = function (c, d, e, f, i, j) {
      const k = c ^ 30142;
      const a = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & on));
      const g = (j | 45652) & ~(j & 45652);
      const n = $n(k, a, m, h, l);
      an(g, k, a, m, h);
      On(l, g, k, a, m, h);
      return n ^ 60048;
    }(g, m, a, n, h, l);
    Fn(g, m, a, n, h, l);
    const p = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(p & 42138) & p | ~(p & 42138) & 42138;
  }
  const hn = dk;
  const ln = bk;
  const gn = xk;
  function un(a, b, c, d) {
    const e = a ^ 11762;
    const f = ~(b & 19425) & 19425 | ~(b & 19425) & b;
    return ((55182 + (((17757 + ((32 << ((e ^ f) >> 32 & 255)) + (8 << ((e ^ f) >> te & 255)) + (24 << ((e ^ f) >> 24 & Ne)) + (16 << ((e ^ f) >> 16 & 255)) ^ (32 << (c >> 16 & 255)) + (8 << (c >> 32 & 255)) + (24 << (c >> 24 & Rk)) + (16 << (c >> _j & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(d & 259) & 259 | ~(d & 259) & d))) * 1664525 + 1013904223) % 4294967296;
  }
  const bn = Nk;
  const vn = tj;
  const dn = f;
  const cn = Ci;
  function mn(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (qe << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const j = (c + 39144) % 65406;
    const a = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = un(i, j, a, k);
    to(h, i, j, a, k);
    Fn(h, i, j, a, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  const pn = cn;
  const Cn = nk;
  function Tn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> Rj & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const j = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const a = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & on));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = io(i, j);
    to(a, k, h, i, j);
    On(a, k, h, i, j, a);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const fn = Kk;
  const zn = fk;
  const yn = bn;
  const wn = Ui;
  const Pn = pn;
  const An = Q;
  function kn(c, d, e, f, i, j) {
    const k = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const a = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (qe << (f >> 8 & 255)) + (I << (f >> di & $i)) + (32 << (f >> 32 & 255));
    const l = (Dj + (39199 + i) * 22695477) % 4294967296;
    const g = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & on)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & Ne));
      const i = Gn(e, f, g, e, f);
      const a = fo(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & po)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & po)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & on)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = On(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const j = (2531011 + (c + 41768) * 214013) % 4294967296;
          const a = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (Nk << (e >> 24 & 255)) + (32 << (e >> B & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const h = an(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const m = (2531011 + (c + 16955) * 214013) % 4294967296;
                const a = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (I << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = Bn(m, a, n, h);
                const b = to(l, g, m, a, n);
                const p = Bn(h, l, g, m);
              })(g, e, f, g, e, f);
              Kn(g, e, f, g);
              return ~(h & 43875) & (h | 43875) ^ 15116;
            }(c, d, c);
            Yn(d, c, d, c, d);
            un(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, j);
          En(a, k, h, i);
          const g = Tn(j, a, k, h, i);
        })(c, d, c, d, c);
        io(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((i ^ a) >> 32 & Qn)) + (24 << ((i ^ a) >> 24 & 255)) + (32 << ((i ^ a) >> 8 & 255)) + (yn << ((i ^ a) >> 16 & 255));
      return (8 << ((h ^ j) >> 32 & v)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(k, a, m);
    Kn(h, l, g, k);
    return ((34159 + (n ^ 2959 ^ Bn(a, m, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  const xn = P;
  const Jn = Fj;
  function Mn(b, c, d, e, f, i) {
    const j = ~(b & 36133) & (b | 36133);
    const a = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (so(j, a, k, h, l) ^ Kn(g, j, a, k))) * 2147483629 + 2147483587) % 2147483647 ^ Yn(h, l, g, j, a))) * 1103515245) % 2147483648;
  }
  function Bn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & Vj));
    const i = ~(d & 32053) & (d | 32053);
    const a = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> Rj & 255)) + (24 << (b >> 24 & 255)) + (bn << (b >> 8 & 255));
      const i = (bq + (50595 + c) * 22695477) % 4294967296;
      const j = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const a = e ^ 18768;
      const k = $n(f, i, j, a, f);
      const h = rn(i, j, a, f, i);
      const l = Wn(j, a);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, i, a);
    Kn(f, g, i, a);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ $n(f, g, i, a, f))) * 214013) % 4294967296;
  }
  const Dn = kk;
  function En(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const i = d ^ 38714;
    const a = e ^ 58084;
    const j = sn(f, g, i, a, f, g);
    Kn(i, a, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ Fn(i, a, f, g, i, a))) * 214013 + 2531011) % 4294967296;
  }
  const In = xk;
  const Sn = Hi;
  const Qn = $i;
  const _n = pi;
  function Fn(b, c, d, e, f, g) {
    const i = b ^ 23409;
    const a = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (un(i, a, d ^ 53590, e ^ 36633) ^ un(j, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  const Rn = Ai;
  const jn = _n;
  function Gn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const j = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const a = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> Rj & 255)) + (16 << (f >> 32 & 255));
    const l = Fn(i, j, a, k, h, i);
    const g = un(j, a, k, h);
    mo(i, j, a);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & Vj)) ^ 31710;
  }
  const Ln = rk;
  function Wn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> Wk & 255));
    const f = Fn(d, e, d, e, d, e);
    const g = Fn(d, e, d, e, d, e);
    un(d, e, d, e);
    const h = (16 << ((f ^ g) >> 32 & $i)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & Qn));
    return ~(h & 55949) & 55949 | ~(h & 55949) & h;
  }
  function On(c, d, e, f, i, j) {
    const k = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (_j << (c >> 32 & 255));
    const a = (d | 41551) & ~(d & 41551);
    const m = (24 << (e >> 24 & 255)) + (16 << (e >> 32 & $i)) + (I << (e >> 16 & Vj)) + (32 << (e >> 8 & 255));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const n = fo(k, a, m, h, l, g);
    mn(k, a, m, h, l);
    un(g, k, a, m);
    const b = ~(n & 8077) & 8077 | ~(n & 8077) & n;
    return ~(b & 3708) & (b | 3708);
  }
  const Nn = Pi;
  const qn = zn;
  const Hn = Ai;
  const Un = B;
  function Yn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const j = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const a = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & Ne)) + (uk << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = Fn(i, j, a, k, h, i);
    const g = On(j, a, k, h, i, j);
    un(a, k, h, i);
    return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> di & Rk)) + (24 << ((l ^ g) >> _j & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  function Kn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const a = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = io(f, g);
    io(i, a);
    uo(f, g, i, a, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  const Vn = O;
  const Xn = ok;
  const Zn = y;
  function $n(b, c, d, e, f) {
    const i = b ^ 62008;
    const j = (24 << (c >> 32 & 255)) + (I << (c >> 16 & 255)) + (32 << (c >> I & 255)) + (16 << (c >> 24 & 255));
    const a = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = an(i, j, a, k, h);
    fo(i, j, a, k, h, i);
    return ((3037 + (l ^ 57467 ^ uo(j, a, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const eo = In;
  function io(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (so(c, d, c, d, c) ^ to(d, c, d, c, d))) % 65357 ^ un(c, d, c, d))) * 22695477) % 4294967296;
  }
  function to(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = c ^ 50118;
    const a = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = fo(i, j, a, k, h, i);
    fo(j, a, k, h, i, j);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ un(a, k, h, i))) * 214013) % 4294967296;
  }
  const no = x;
  const oo = T;
  const ro = fk;
  const ao = Di;
  function so(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const k = d ^ 55978;
    const a = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = to(j, k, a, m, h);
    const g = Yn(j, k, a, m, h);
    un(j, k, a, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> I & v)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & Qn));
    return ~(n & 23686) & (n | 23686);
  }
  const ho = hk;
  const lo = nj;
  function go(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & v)) + (24 << (c >> yn & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = Tn(d, e, d, e, d);
    const g = so(e, d, e, d, e);
    Gn(d, e, d, e, d);
    const h = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(h & 40927) & 40927 | ~(h & 40927) & h;
  }
  function uo(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (d + 52922) % 65337;
    const a = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = mn(j, k, a, m, h);
    const g = go(j, k);
    mn(a, m, h, j, k);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const bo = _i;
  const vo = tj;
  const co = $i;
  function mo(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const h = Tn(e, f, g, e, f);
    const a = Tn(g, e, f, g, e);
    Tn(f, g, e, f, g);
    return (16 << ((h ^ a) >> 32 & 255)) + (8 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 24 & 255)) + (32 << ((h ^ a) >> di & 255)) ^ 31181;
  }
  const po = Vj;
  const Co = bi;
  function To(a, b, c) {
    const d = (a | 46973) & ~(a & 46973);
    const e = ~(b & 23097) & b | ~(b & 23097) & 23097;
    const f = c ^ 61143;
    return (41038 + (Jo(d, e, f, d, e, f) ^ Jo(d, e, f, d, e, f))) % 65297;
  }
  function fo(b, c, d, e, f, i) {
    const j = d ^ 8102;
    const a = (24 << (e >> Wk & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> I & po));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (y + (62237 + i) * 22695477) % 4294967296;
    const l = Wn((b + 52483) % 65496, (Rj << (c >> 16 & 255)) + (24 << (c >> bn & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = Wn(j, a);
    Wn(k, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  function zo(b, c, d, e, f) {
    const g = ~(b & 50523) & 50523 | ~(b & 50523) & b;
    const i = c ^ 52430;
    const a = ((d + 36606) * 22695477 + 1) % 4294967296;
    const j = (e | 12735) & ~(e & 12735);
    const h = f ^ 19534;
    return (2147483587 + (25023 + (rf(g, i, a, j) ^ Pw(h, g, i, a, j, h))) * 2147483629) % 2147483647;
  }
  ⵠⲆᐃⲆ = {
    ΔⲆⲆΔᐃⵠⲆ: () => new Promise((a, b) => {
      Vf.grecaptcha.ready(function () {
        Vf.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Yv) {
            a(hk);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ΔⲆΔⵠⵠᐃΔⲆΔ: function (a) {
      Vf.open(a, "_blank").focus();
    },
    ΔΔⵠᐃⵠⲆᐃ: function (a) {
      Vf.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ΔⵠⵠΔⲆΔᐃ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return ke;
        }
      }
      return true;
    },
    ΔΔᐃⲆΔᐃΔⵠΔ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = gj; c < a.length; c++) {
        if (typeof a == fj[Vn]) {
          if (!this.ΔⵠⵠΔⲆΔᐃ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return Mj;
    },
    ΔⲆⵠᐃⲆⲆⲆ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⵠΔᐃΔΔᐃⵠ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⲆⲆⲆᐃⲆΔΔⵠⵠ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠⲆⵠᐃᐃΔᐃ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ΔⵠᐃⵠⲆⲆⲆ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < hk) {
        return -1;
      } else {
        return 1;
      }
    },
    ΔᐃΔΔⲆᐃⵠ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ᐃᐃⵠⵠⵠⵠΔ: function (a, b, c, d) {
      var e = d - b;
      var f = c - a;
      return Math.atan2(e, f);
    },
    ⵠΔⵠΔⲆᐃⲆ: function (a, b) {
      return Math.asin(this.ⵠⲆⵠᐃᐃΔᐃ(a, b) / (this.ΔⵠᐃⵠⲆⲆⲆ(a) * this.ΔⵠᐃⵠⲆⲆⲆ(b))) * this.sign(this.ΔᐃΔΔⲆᐃⵠ(a, b));
    },
    ⵠΔᐃᐃΔᐃᐃ: function (a) {
      ᐃⲆⵠⲆΔΔᐃ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ᐃⲆⵠⲆΔΔᐃ);
      if (b === null) {
        return null;
      } else {
        return b[y];
      }
    },
    ΔΔΔⵠⲆᐃⵠ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔⵠΔᐃᐃᐃᐃ: function (a, b) {
      return this.ⵠΔⵠΔⲆᐃⲆ({
        x: y,
        y: gj
      }, this.ⵠΔᐃΔΔᐃⵠ(a, b));
    },
    ᐃⵠᐃᐃ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ΔⲆⲆⵠᐃᐃᐃ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ᐃⵠⵠᐃⲆⲆⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ᐃΔΔⲆᐃⵠⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⵠⲆⵠⲆⵠⵠΔΔΔ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ⲆⲆΔΔⲆⵠⵠⲆⲆ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠΔᐃⲆⵠ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⲆᐃΔᐃⵠᐃⲆ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⵠⵠΔⲆⵠᐃΔ: function (a, b) {
      return {
        x: (a.x + b.x) / cn,
        y: (a.y + b.y) / 2
      };
    },
    ⵠⵠΔⲆᐃⲆⲆ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⵠᐃᐃⲆΔⲆᐃΔⵠ: function (a, b, c) {
      var d = this.ⵠⵠΔⲆᐃⲆⲆ();
      var e = this.ⵠⵠΔⲆᐃⲆⲆ();
      var f = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(a + Math.sin(f) * d * c),
        y: Math.floor(b + Math.cos(f) * e * c)
      };
    },
    ⵠⵠⵠΔΔᐃΔᐃΔ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃᐃⲆ = d;
    },
    ⵠΔⵠᐃⲆΔⲆΔⵠ: function (a) {
      ⲆⲆᐃ = [];
      ⲆⲆᐃ.push.apply(ⲆⲆᐃ, a);
      var b = [];
      while (ⲆⲆᐃ.length > 0) {
        var c = Math.floor(Math.random() * ⲆⲆᐃ.length);
        b.push(ⲆⲆᐃ[c]);
        ⲆⲆᐃ.splice(c, 1);
      }
      return b;
    },
    ⵠⲆⲆᐃⵠΔΔ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⵠΔⵠⵠⲆⵠⵠ: function (a) {
      if (typeof a !== "number") {
        return "0";
      }
      if (a >= 10000) {
        var b = Math.floor(Math.log10(a)) - pn;
        var c = Math.max(ho, 3 - b);
        var d = Math.floor(a / 1000).toString();
        if (c) {
          for (var e = (d += "." + (a % 1000 / 1000).toString().substring(2).substring(0, c)).length - 1, f = hk; e > ho && d[e] == "0"; e--) {
            f++;
          }
          if ((d = d.substring(ho, d.length - f))[d.length - 1] == ".") {
            d = d.substring(0, d.length - ck);
          }
        }
        return d += "k";
      }
      return a.toString();
    },
    ⲆⵠᐃΔⵠⵠΔ: function (a) {
      return a * (2 - a);
    },
    ΔⲆᐃⵠⲆⵠⲆ: function (a) {
      return --a * a * a + bq;
    },
    ΔⲆΔⵠⵠ: function (a) {
      if (a < 0.5) {
        return pn * a * a;
      } else {
        return (T - a * 2) * a - ck;
      }
    },
    ᐃΔⵠⲆⲆⲆⲆ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - uj) * (Xj * a - dj) + 1;
      }
    },
    ⵠⵠᐃⲆⲆΔⲆⵠⵠ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return Zk - --a * 8 * a * a * a;
      }
    },
    ⲆᐃΔⵠⵠΔᐃ: function (a) {
      return y - --a * a * a * a;
    },
    ⵠⲆⲆⵠⲆⵠⵠ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⲆⲆⲆⵠ: function (a, b, c, d, e, f) {
      this.ᐃⵠᐃ = a;
      this.ⲆⵠⲆ = b;
      this.max = c;
      this.min = d;
      this.ΔᐃΔΔⵠΔᐃ = e;
      this.ᐃΔⵠᐃᐃΔΔ = f;
      this.ⲆᐃⲆΔⲆΔᐃ = 0;
      this.ᐃᐃᐃ = function () {
        if (this.ᐃⵠᐃ) {
          if ((a = this.ⲆⵠⲆ + Cf * this.ΔᐃΔΔⵠΔᐃ) > this.max) {
            this.ⲆⵠⲆ = this.max;
            this.ᐃⵠᐃ = ro;
            return true;
          }
          this.ⲆⵠⲆ = a;
        } else {
          var a;
          if ((a = this.ⲆⵠⲆ - Cf * this.ᐃΔⵠᐃᐃΔΔ) < this.min) {
            this.ⲆⵠⲆ = this.min;
            this.ᐃⵠᐃ = tk;
          } else {
            this.ⲆⵠⲆ = a;
          }
        }
      };
      return zn;
    },
    ΔⲆⲆΔⲆ: function (a, b, c, d, e, f) {
      this.ⲆⲆⲆΔᐃ = a;
      this.ⵠⲆΔⵠⵠ = b;
      this.ᐃⲆⵠΔⲆ = c;
      this.ᐃΔⲆⲆⵠ = d;
      this.x = e;
      this.ΔΔᐃΔᐃ = f;
      this.ΔΔⲆᐃΔⲆᐃ = function () {
        this.x = this.ⲆᐃᐃⲆⵠᐃΔᐃⲆ;
        this.ⵠⲆΔⵠⵠ = hk;
      };
      this.ⲆΔⵠⵠΔᐃᐃ = function (a) {
        if (a !== this.ΔΔᐃΔᐃ) {
          this.ΔΔᐃΔᐃ = a;
          this.ᐃΔⲆⲆⵠ = this.x;
          this.ⵠⲆΔⵠⵠ = 0;
        }
        if (this.ΔΔᐃΔᐃ !== this.x) {
          this.ⵠⲆΔⵠⵠ += Cf;
          if (this.ⵠⲆΔⵠⵠ > this.ᐃⲆⵠΔⲆ) {
            this.x = this.ΔΔᐃΔᐃ;
          } else {
            var b = this.ⲆⲆⲆΔᐃ(this.ⵠⲆΔⵠⵠ / this.ᐃⲆⵠΔⲆ);
            this.x = this.ᐃΔⲆⲆⵠ + (this.ΔΔᐃΔᐃ - this.ᐃΔⲆⲆⵠ) * b;
          }
        }
      };
    },
    Ⲇⵠⵠᐃⵠᐃᐃ: function (b, c, d, e, f, g, i, a, j) {
      this.ⲆⲆⲆΔᐃ = b;
      this.ⵠⲆΔⵠⵠ = c;
      this.ᐃⲆⵠΔⲆ = d;
      this.ᐃΔⲆⲆⵠ = e;
      this.ⲆΔᐃᐃᐃ = f;
      this.x = g;
      this.y = i;
      this.ΔΔᐃΔᐃ = a;
      this.ᐃΔⵠΔᐃᐃᐃ = j;
      this.ⲆΔⵠⵠΔᐃᐃ = function (a) {
        if (a.x != this.ΔΔᐃΔᐃ || a.y != this.ᐃΔⵠΔᐃᐃᐃ) {
          this.ΔΔᐃΔᐃ = a.x;
          this.ᐃΔⵠΔᐃᐃᐃ = a.y;
          this.ᐃΔⲆⲆⵠ = this.x;
          this.ⲆΔᐃᐃᐃ = this.y;
          this.ⵠⲆΔⵠⵠ = 0;
        }
        if (this.ΔΔᐃΔᐃ != this.x || this.ᐃΔⵠΔᐃᐃᐃ != this.y) {
          this.ⵠⲆΔⵠⵠ += Cf;
          if (this.ⵠⲆΔⵠⵠ > this.ᐃⲆⵠΔⲆ) {
            this.x = this.ΔΔᐃΔᐃ;
            this.y = this.ᐃΔⵠΔᐃᐃᐃ;
          } else {
            var b = this.ⲆⲆⲆΔᐃ(this.ⵠⲆΔⵠⵠ / this.ᐃⲆⵠΔⲆ);
            this.x = this.ᐃΔⲆⲆⵠ + (this.ΔΔᐃΔᐃ - this.ᐃΔⲆⲆⵠ) * b;
            this.y = this.ⲆΔᐃᐃᐃ + (this.ᐃΔⵠΔᐃᐃᐃ - this.ⲆΔᐃᐃᐃ) * b;
          }
        }
      };
    },
    ⵠⲆᐃⵠᐃⲆΔ: function (a) {
      var b = "";
      for (var c = gj; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⵠᐃΔⲆᐃⵠⲆ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⵠᐃΔᐃⲆ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = gj; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ΔᐃΔⲆᐃᐃΔ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃᐃⲆ || ke;
    },
    ΔᐃⵠⲆᐃΔᐃ: function (b, c, d, e, f, g, h, a) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, h) < Math.min(e, a)) {
        return 1;
      } else {
        return hk;
      }
    },
    ᐃΔⲆΔⵠᐃΔ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ΔΔⵠΔⵠᐃⵠ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const yo = Qk;
  const wo = Pj;
  const Po = kk;
  const Ao = Rj;
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return hk;
    } else if (hk < a) {
      return Zn;
    } else {
      return -y;
    }
  };
  const ko = Fk;
  function xo(a, b) {
    gi(Ak, a, b);
    const c = nf(zk[ho], zk[ck], zk[hk]);
    nf(zk[ck], zk[0], zk[y]);
    return c ^ 54357;
  }
  function Jo(b, c, d, e, f, i) {
    const j = (8 << (b >> 24 & 255)) + (B << (b & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> 16 & 255));
    const a = (24 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & 255)) + (8 << (c >> 24 & 255));
    const k = ~(d & 36151) & (d | 36151);
    const h = ~(f & 14288) & f | ~(f & 14288) & 14288;
    const l = i ^ 31054;
    const g = function (b, c, d, e) {
      const f = (16 << (b >> 8 & 255)) + (24 << (b >> fs & 255)) + (8 << (b >> 16 & on)) + (0 << (b >> 24 & 255));
      const g = ~(c & 58389) & 58389 | ~(c & 58389) & c;
      const i = d ^ 32323;
      const a = (ar << (e & 255)) + (24 << (e >> 8 & 255)) + (0 << (e >> qe & 255)) + (16 << (e >> 24 & 255));
      const j = mt(f, g, i, a, f);
      const h = mt(g, i, a, f, g);
      return (0 << ((j ^ h) >> 16 & 255)) + (16 << ((j ^ h) >> 24 & 255)) + (24 << ((j ^ h) & 255)) + (8 << ((j ^ h) >> 8 & 255));
    }(j, a, k, ~(e & 31976) & 31976 | ~(e & 31976) & e);
    mt(h, l, j, a, k);
    return (g | 55350) & ~(g & 55350);
  }
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ᐃᐃΔⲆⲆⲆΔⵠⵠ;
  };
  const Mo = Lk;
  const Bo = Cn;
  (function (a) {
    var b = false;
    if (typeof ᐃⲆᐃⵠΔⲆⵠ === "function" && ᐃⲆᐃⵠΔⲆⵠ.ⲆⲆΔⵠᐃᐃᐃ) {
      ᐃⲆᐃⵠΔⲆⵠ(a);
      b = tk;
    }
    if (typeof ΔΔⲆⲆⵠⵠⲆ === "object") {
      ᐃⲆᐃΔΔᐃⲆᐃᐃ.exports = a();
      b = Mj;
    }
    if (!b) {
      var c = Vf.ᐃΔⲆΔ;
      var d = Vf.ᐃΔⲆΔ = a();
      d.ⲆΔΔⲆⵠⵠᐃΔᐃ = function () {
        Vf.ᐃΔⲆΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = gj, b = {}; arguments.length > a; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > bq) {
            j = b({
              path: "/"
            }, d.ⲆᐃΔΔΔⲆⲆ, j);
            if (typeof j.expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠΔⲆᐃΔΔᐃΔΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = gj; l < n.length; l++) {
            var p = n[l].split("=");
            var q = p.slice(hj).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[ho].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ⲆⵠⲆⵠΔⲆⵠᐃᐃ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ⲆᐃΔΔΔⲆⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -hj
        }));
      };
      d.ⲆⵠΔΔⲆⵠΔᐃⲆ = a;
      return d;
    }(function () { });
  });
  const Do = Tk;
  function Eo(a, b, c, d) {
    Ei(Ak, a, b, c, d);
    const e = xo(zk[gj], zk[Zk]);
    $c(zk[2], zk[3], zk[0], zk[bq]);
    return e ^ 57202;
  }
  const Io = Ik;
  function So(b, c, d, e, f) {
    zi(Ak, b, c, d, e, f);
    const g = yk(zk[0], zk[1], zk[dj], zk[3], zk[4], zk[gj]);
    const h = yk(zk[Zn], zk[2], zk[3], zk[4], zk[0], zk[1]);
    return (16 << ((g ^ h) >> 16 & 255)) + (0 << ((g ^ h) >> 8 & 255)) + (24 << ((g ^ h) & 255)) + (bn << ((g ^ h) >> 24 & 255));
  }
  const Qo = zn;
  const _o = k;
  const Fo = b;
  var Ro = document.getElementById("game_canvas");
  const jo = Ik;
  const Go = hk;
  var Lo = Ro.getContext("2d");
  const Wo = hn;
  var Oo = Ro.width;
  var cq = Ro.height;
  const dq = Ji;
  var Ho = Vf.Math.acos;
  Vf.Math.acos = Vf.Math.asin;
  Vf.Math.asin = Ho;
  var Uo = Vf.Math.cos;
  Vf.Math.cos = Vf.Math.sin;
  Vf.Math.sin = Uo;
  const Yo = O;
  var Ko = Ro.width / 2;
  var eq = Ro.height / 2;
  var fq = {
    x: Ko,
    y: eq
  };
  var gq = 1;
  var hq = 1;
  const iq = jn;
  var jq = -Zk;
  const kq = bn;
  const lq = Tk;
  var mq = "J" + ua;
  const nq = Xj;
  const oq = ij;
  const pq = Zi;
  var qq = "S" + _a;
  var rq = Vf;
  const sq = M;
  const tq = _i;
  const uq = hj;
  var vq;
  const wq = Oj;
  var xq = (Kq = "O") + "N";
  const yq = zj;
  const zq = Yo;
  const Aq = k;
  var Bq;
  var Cq;
  var Dq = Go;
  var Eq = rq;
  const Fq = Fk;
  const Gq = Rn;
  qq = "N";
  const Hq = Pi;
  const Iq = Dn;
  var Jq = "J";
  var Kq = "O" + ua;
  const Lq = Qk;
  const Mq = qn;
  var Nq = Eq;
  const Oq = bk;
  const Pq = bo;
  const Qq = Oj;
  const Rq = ie;
  const Sq = Jk;
  const Tq = Co;
  const Uq = rk;
  const Vq = fk;
  const Wq = v;
  var Xq;
  const Yq = ek;
  const Zq = E;
  const $q = y;
  const _q = Wk;
  const ar = I;
  const br = Xk;
  const cr = Mo;
  var gr;
  var hr = Nq;
  xq = "N" + undefined;
  var ir = hr;
  const jr = Cn;
  const kr = uq;
  const ea = Hn;
  const ia = p;
  var ta;
  const nr = Mi;
  const oa = en;
  var ra = ir;
  const aa = _;
  var sa;
  const or = Dj;
  const la = Rj;
  var ua;
  var pr = ra;
  const va = T;
  const da = ie;
  var ca;
  const qr = Aj;
  const pa = Bj;
  var Ca = pr;
  const sr = rk;
  const fa = tk;
  Jq = "O";
  const za = f;
  const ya = Ok;
  const wa = Vj;
  const Pa = oq;
  const Aa = da;
  const ka = Go;
  var xa;
  var ur = Ca = pr;
  const Ma = An;
  const Ba = Vn;
  var Da;
  var vr = ur;
  const Ia = Ui;
  const Sa = dj;
  const Qa = oo;
  var _a = "J" + (xa = "S");
  Ro.oncontextmenu = function () {
    return fk;
  };
  mq = "J";
  const Fa = b;
  function Ra(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠᐃᐃⵠΔⲆᐃ = 1;
    return b;
  }
  const wr = Lj;
  const Ga = l;
  const La = xk;
  const Wa = hn;
  Kq = xq;
  Cq = vq = Bq = _a + (Jq += mq = qq);
  const Oa = uk;
  const Na = pj;
  const qa = Qa;
  xq = ua;
  const Ha = Mk;
  if (Vf.ᐃⵠⲆΔΔⲆΔ) {
    var Ua = Vf.Math.acos;
    Vf.Math.acos = Vf.Math.asin;
    Vf.Math.asin = Ua;
    var Ya = Vf.Math.acos;
    Vf.Math.acos = Vf.Math.asin;
    Vf.Math.asin = Ya;
  }
  ua = _a;
  const Ka = nj;
  Kq = _a;
  const Va = Mq;
  Xq = gr = _a + Jq;
  const Xa = ka;
  qq = Jq + mq;
  ta = vq;
  Kq = _a + Jq;
  const Za = dk;
  const $a = Bo;
  const xr = po;
  const yr = wq;
  const Ar = vi;
  sa = Bq;
  const Br = ij;
  const Cr = yn;
  xq = _a + Jq;
  const Dr = _k;
  ca = Cq;
  Jq = ua = _a;
  xa = Bq;
  Da = vq;
  mq = Kq;
  var Er = Vf.devicePixelRatio || 1;
  var Fr = Lo.ⵠᐃⲆΔΔᐃⵠⲆⵠ || Lo.ⵠⲆⵠⲆⵠⲆⵠⲆᐃ || Lo.ᐃⲆⵠᐃⵠᐃⵠⵠΔ || Lo.ⵠᐃΔⲆⲆⵠΔⲆΔ || Lo.ᐃⲆᐃΔᐃᐃⲆⵠⵠ || bq;
  const Gr = Lq;
  function Hr() {
    if (Vf.innerWidth != Ro.width) {
      Ro.width = Vf.innerWidth;
      Oo = Ro.width;
      Ko = Ro.width / 2;
    }
    if (Ro.height != Vf.innerHeight) {
      Ro.height = Vf.innerHeight;
      cq = Ro.height;
      eq = Ro.height / uj;
    }
    fq = {
      x: Ko,
      y: eq
    };
    var a = Ro.width;
    var b = Ro.height;
    hq = jq === -1 ? Er / Fr : jq;
    Ro.width = hq * a;
    Ro.height = b * hq;
    Ro.style.width = a + "px";
    Ro.style.height = b + "px";
    Lo.scale(hq, hq);
    if (Sw) {
      Sw.ᐃΔΔⵠ.ⲆᐃΔᐃᐃⲆΔ = a;
      Sw.ᐃΔΔⵠ.ⲆᐃⲆΔⲆΔⵠ = b;
    }
    if (Xw.ⵠΔΔⲆⲆ) {
      Xw.ᐃᐃᐃ();
    } else if (hf.ⵠΔΔⲆⲆ) {
      hf.ᐃᐃᐃ();
    } else if (Uw.ⵠΔΔⲆⲆ) {
      Uw.ᐃᐃᐃ();
    } else if (Tw.ⵠΔΔⲆⲆ) {
      Tw.ᐃᐃᐃ();
    }
  }
  const Ir = nq;
  var Kr = document.getElementById("game_body");
  const Lr = Bo;
  Kr.ondragstart = function () {
    return ke;
  };
  Kr.ondrop = function () {
    return false;
  };
  function Nr(b, c, d, e, f, g) {
    const i = (8 << (b >> 16 & v)) + (0 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b & co));
    const a = (16 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (8 << (c & 255)) + (24 << (c >> 24 & 255));
    const j = (1013904223 + (63114 + d) * 1664525) % 4294967296;
    return (1 + (32726 + (function (b, c, d, e, f, i) {
      const j = ((63022 + b) * 1103515245 + 12345) % 2147483648;
      const a = (c | 47370) & ~(c & 47370);
      const k = (e | 22154) & ~(e & 22154);
      const h = ~(f & 26219) & f | ~(f & 26219) & 26219;
      const l = i ^ 52709;
      const g = ow(j, a, ~(d & 56031) & d | ~(d & 56031) & 56031);
      Iw(k, h, l, j, a);
      return ~(g & 56525) & 56525 | ~(g & 56525) & g;
    }(i, a, j, ~(e & 25711) & (e | 25711), ~(f & 26417) & f | ~(f & 26417) & 26417, (g + 38278) % 65476) ^ To(i, a, j))) * 22695477) % 4294967296;
  }
  Kr.onresize = Hr;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = Xa; a.length > c && !Vf.requestAnimationFrame; ++c) {
      Vf.requestAnimationFrame = Vf[a[c] + "RequestAnimationFrame"];
      Vf.cancelAnimationFrame = Vf[a[c] + "CancelAnimationFrame"] || Vf[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!Vf.requestAnimationFrame) {
      Vf.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var f = Math.max(0, 16 - (e - b));
        var g = Vf.setTimeout(function () {
          c(e + f);
        }, f);
        b = e + f;
        return g;
      };
    }
    Vf.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Or = function () {
    let e = hk;
    let f = 0;
    let j = Xa;
    const k = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([115, 116, 97, 99, 107]);
    const m = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([67, 97, 110, 118, 97, 115, 82, 101, 110, Aj, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const o = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const a = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([dk, 114, 97, 119, 73, 109, 97, 103, 101]);
    ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const p = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([105, 110, 100, 101, 120, 79, 102]);
    const l = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([77, 97, 116, 104]);
    const g = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([99, 101, 105, 108]);
    const q = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([102, 108, 111, 111, 114]);
    const b = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const r = ⵠⲆᐃⲆ.ⵠᐃΔᐃⲆ([115, 101, 110, 100]);
    function d(a) {
      try {
        a();
      } catch (a) {
        if (a[k][h](p) !== -y) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    return {
      ⵠΔᐃⵠᐃⲆⲆ: function () {
        j++;
        if (j > 1000) {
          j = 0;
          e = d(Vf[m][o][a]) || e;
          e = d(Vf[b][o][r]) || e;
        }
        if (e === bq) {
          f++;
          if (f > 10000) {
            f = gj;
            Vf[l][q] = Vf[l][g];
          }
        }
      }
    };
  }();
  const Pr = pa;
  var Qr = navigator.language || navigator.userLanguage;
  var Rr = -new Date().getTimezoneOffset() / 60;
  const Sr = bn;
  var Tr = "Europe";
  const Ur = Io;
  var Xr = "South America";
  const Yr = oo;
  const Zr = dq;
  const $r = Zk;
  const _r = Jn;
  const as = zq;
  var bs = Tr;
  const cs = Pj;
  const ds = ci;
  const es = dn;
  if (-dj <= Rr && Pn >= Rr) {
    bs = Tr;
  } else if (Ir < Rr && as >= Rr) {
    bs = "Russia";
  } else if (Rr > 5 && Rr <= Zi) {
    bs = "Asia";
  } else if (Rr > re) {
    bs = "Australia";
  } else if (Rr >= -5 && Rr < -2) {
    bs = Qr === "pt-BR" || Qr === "pt-br" || Qr === "pt" || Qr === "pt-pt" ? Xr : "North America";
  } else if (Rr < -wr) {
    bs = Qr === "pt-BR" || Qr === "pt-br" || Qr === "pt" || Qr === "pt-pt" ? Xr : "West America";
  }
  const fs = hk;
  var Gk = {
    ᐃᐃⲆⵠⲆᐃᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - uq));
      this.ⲆΔΔⵠΔ = function (a) {
        c = a || Math.floor(Math.random() * (b - bq));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const gs = J;
  const hs = da;
  const is = In;
  const ks = Xa;
  var ls = [[0, "DRAGON", b, 6, 66, 35, 0], [0, "WINTER", 91, 18, Xk, 40, 8], [0, "DESERT", 135, 180, 89, 124, Lj], [fs, "LAVA", 142, 6, 82, 99, pi], [Go, "FOREST", 6, 150, 90, 154, Sr], [0, "WINTER", 6, 6, 90, 150, fs], [1, "b", 0, 5, 175, 0], [kr, "t", nq, 5, 174, 0], [hj, "t", 5, 5, 173, ks], [Zk, "b", 3, as, 176, 0], [Zn, "t", Xa, Lj, 177, 0], [or, "t", 3, 5, 178, 0], [1, "t", 4, Vn, 179, ka], [Zn, "b", gj, Vn, 180, 0], [or, "t", Vn, Ba, 181, Go], [1, "b", Pn, 5, 182, 0], [$q, "b", Dj, Ba, 183, 0], [1, "b", pn, Yo, 184, hk], [uq, "t", 5, 5, 185, hk], [$q, "t", Ir, 5, 186, ka], [$r, "t", ho, 5, 187, ks], [1, "t", Yo, Xk, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", Ci, 5, 190, 0], [1, "t", 4, 5, 191, 0], [Zk, "b", Ia, Ba, 192, ks], [$q, "t", 5, 5, 193, fs], [1, "t", ks, 5, 194, Xa], [1, "t", 3, 5, 195, Go], [$r, "b", 0, 5, 196, 0], [1, "t", Vn, Vn, 197, 0], [1, "t", 2, O, 198, 0], [1, "b", Ci, wr, 199, fs], [or, "t", 4, 5, 200, Go], [$r, "t", 1, Vn, 201, ks], [Zk, "b", or, zq, 202, 0], [1, "t", Lj, 5, 203, ks], [1, "t", dj, 5, 204, 0], [hj, "t", Yr, Ba, 205, 0], [Zk, "b", 2, Yo, 206, fs], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [or, "t", Sa, 5, 209, fs], [1, "b", fs, 5, 210, Xa], [1, "t", 5, 5, 211, 0], [kr, "t", 1, wr, 212, 0], [$q, "t", 2, Gj, 213, hk], [y, "b", 3, zq, 214, 0], [1, "t", Lj, Yo, 215, fs], [1, "b", 0, as, 216, 0], [$r, "t", 4, Ba, 217, 0], [1, "t", Ci, br, 218, ho], [1, "t", bq, br, 219, 0], [uq, "t", 3, 5, 220, Xa], [1, "t", Ba, as, 221, 0], [1, "t", pn, 5, 222, Go], [$q, "t", oo, 5, 223, ho], [1, "b", 3, 5, 224, 0], [1, "t", bq, 5, 225, 0], [1, "t", R, Gj, 226, 0], [1, "b", 0, Ba, 227, Go], [Zk, "t", Qq, Vn, 228, 0], [Dj, "t", 5, Lj, 229, Go], [Dj, "t", pn, zq, 230, fs], [$r, "t", ka, 5, 231, Go], [1, "b", Ir, Vn, 232, 0], [or, "t", 1, Xk, 233, Go], [ck, "t", Ur, zq, 234, 0], [1, "b", $q, 5, 235, 0], [1, "t", 4, 5, 236, ka], [or, "t", Ci, 5, 237, ho], [bq, "t", hk, Gj, 238, 0], [$q, "t", 4, O, 239, 0], [Dj, "b", 2, zq, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, ka], [$r, "t", 4, Vn, 243, 0], [Zn, "t", 2, wr, 244, Go], [Zn, "t", 1, as, 245, 0], [1, "b", Zn, 5, 246, fs], [1, "t", Oj, Vn, 247, 0], [or, "b", 2, 5, 248, 0], [Zk, "t", zq, 5, 249, 0], [bq, "t", uj, Lj, 250, 0], [or, "t", 4, 5, 251, 0], [1, "b", y, Vn, 252, fs], [1, "t", 4, 5, 253, ka], [ck, "t", Zk, 5, 254, 0], [Zk, "t", 3, 5, $i, Xa], [uq, "t", 5, Xk, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [or, "b", 3, Ba, 259, ks], [1, "t", Yo, 5, 260, 0], [1, "b", ho, 5, 261, ho], [Dj, "t", yr, 5, 262, ho], [hj, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [Dj, "b", 1, Yo, 265, 0], [y, "b", 2, 5, 266, 0], [$q, "t", 3, Ba, 267, ho], [Dj, "t", qa, 5, 268, Xa], [ck, "t", ks, wr, 269, 0], [1, "t", 5, Yo, 270, 0], [1, "t", 3, O, 271, ka], [or, "t", 4, 5, 272, hk], [1, "t", 1, 5, 273, 0], [ck, "b", 2, 5, 274, fs], [or, "t", 1, 5, 275, gj], [1, "t", 4, 5, 276, 0], [1, "b", 1, O, 277, 0], [kr, "b", 2, Ba, 278, 0], [Zk, "t", 1, Gj, 279, 0], [uq, "t", 4, 5, 280, fs], [1, "t", 2, Vn, 281, 0], [1, "t", 5, Yo, 282, Go], [or, "b", 2, Yo, 283, 0], [kr, "t", 1, 5, 284, 0], [1, "b", 3, Gj, 285, 0], [1, "t", oo, as, 286, ks], [bq, "t", 0, zq, 287, gj], [ck, "t", br, 5, 288, 0], [1, "t", pn, Gj, 289, hk], [or, "b", 1, Yo, 290, gj], [1, "t", 4, Xk, 292, 0], [Zn, "t", 2, 5, 291, 0], [Zn, "b", 2, 5, 293, hk], [Dj, "t", y, 5, 294, Go], [1, "t", wn, wr, 295, 0], [1, "t", 5, 5, 296, 0], [Zk, "b", ho, 5, 297, 0], [1, "b", 3, 5, 298, 0], [hj, "t", wk, Xk, 299, fs], [1, "t", Xj, Yo, 300, 0], [kr, "t", 4, 5, 301, ho], [Zn, "b", ka, as, 302, Xa], [1, "b", pn, zq, 303, 0], [1, "t", 1, dn, 303, 0], [1, "t", 2, Do, 303, fs], [1, "t", Zn, 5, 304, 0], [Zn, "t", 3, f, 304, 0], [$q, "t", va, E, 304, 0], [uq, "t", as, Cr, 303, 0], [1, "b", 1, I, 304, ks], [1, "b", Ir, Ok, 304, ka], [Zk, "b", 3, Ai, 303, 0], [$q, "b", 3, 17, 304, ka], [or, "t", 1, Ok, 303, ho], [Dj, "t", 1, sr, 304, 0], [1, "t", $q, 13, 303, hk], [1, "t", wq, 10, 303, 0], [1, "t", 3, 14, 304, Xa], [ck, "t", qa, 10, 304, 0], [ck, "t", Ba, _k, 304, 0], [$r, "t", 5, Lq, 303, 0], [y, "t", Yo, Un, 304, 0], [1, "t", 5, sk, 304, ks], [bq, "t", Ir, 12, 304, ks], [1, "t", y, vk, 303, 0], [1, "b", 3, Uq, 303, 0], [Dj, "b", 0, 16, 303, fs], [y, "t", yr, ds, 303, ho], [Zn, "t", 4, 18, 303, ho], [1, "t", Xj, 19, 303, 0], [1, "t", uq, u, 303, Go], [1, "b", uq, 21, 303, 0], [Dj, "t", Pn, 22, 303, Go], [Dj, "t", qa, 23, 303, 0], [1, "b", yr, 24, 303, 0], [Dj, "t", as, 25, 303, 0], [$r, "t", 1, 26, 303, 0], [$q, "t", Ci, 27, 303, 0], [$r, "t", mi, 28, 303, fs], [1, "b", ho, Fa, 304, Xa], [Zk, "t", Ir, 19, 304, hk], [1, "t", as, 20, 304, 0], [1, "b", 2, 21, 304, hk], [1, "t", mi, 22, 304, 0], [Zk, "t", cn, 23, 304, fs], [1, "t", 1, 24, 304, ks], [Zn, "t", 3, 25, 304, gj], [bq, "t", gj, 27, 304, ks], [$q, "t", Gj, 26, 304, ks], [1, "b", 2, 28, 304, 0], [uq, "t", uq, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, gj], [y, "t", 4, 31, 303, ho], [hj, "t", 0, 32, 303, 0], [kr, "t", 5, 33, 303, Xa], [1, "t", 2, 34, 303, ho], [1, "t", Qa, 35, 303, fs], [hj, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [bq, "t", 2, 32, 304, gj], [1, "t", 4, 30, 304, Xa], [uq, "t", 1, 31, 304, 0], [hj, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, Xa], [or, "t", 5, 34, 304, hk], [1, "b", uj, 36, 304, Go], [1, "t", Vn, 37, 304, ka], [1, "t", y, 38, 304, hk], [$r, "b", bq, 40, 303, fs], [uq, "t", 3, 39, 303, 0], [or, "t", yr, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", wr, 39, 304, gj], [1, "t", 5, 41, 303, gj], [1, "t", 4, 41, 304, ks], [1, "t", Yr, 44, 303, 0], [1, "b", Sa, 40, 304, 0], [y, "b", 2, 43, 303, 0], [bq, "t", hj, 42, 303, 0], [1, "t", $q, 43, 304, 0], [uq, "t", Vn, 44, 304, 0], [ck, "b", 1, 45, 303, 0], [uq, "t", pn, 45, 304, fs], [Zk, "t", 2, 46, 303, ka], [bq, "t", 4, 47, 303, 0], [$q, "b", ho, 48, 303, ks], [$q, "t", 5, 49, 303, ho], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [y, "t", Qa, 52, 303, ka], [1, "t", wr, 46, 304, ka], [or, "t", Ir, 47, 304, 0], [1, "t", Vn, 48, 304, Go], [1, "t", kr, 49, 304, 0], [hj, "t", 2, 50, 304, fs], [or, "b", 1, 53, 303, 0], [1, "b", uj, 51, 304, hk], [hj, "t", 5, 52, 304, 0], [1, "t", Ui, 53, 304, Go], [y, "b", Pn, 54, 303, hk], [1, "t", Yo, 54, 304, Go], [Zn, "t", br, 55, 303, 0], [Zk, "t", Ui, 56, 303, 0], [y, "t", 4, 57, 303, ks], [1, "t", wr, 58, 303, 0], [$q, "b", ck, 55, 304, fs], [1, "t", 2, 56, 304, 0], [1, "t", Xa, 57, 304, gj], [Zk, "t", Ia, 58, 304, fs], [1, "t", 3, 63, 304, fs], [Dj, "t", Ia, 59, 303, ka], [ck, "t", mi, 59, 304, fs], [1, "t", 5, 60, 303, ho], [1, "t", 0, 60, 304, gj], [kr, "t", fs, 66, 303, Go], [1, "t", 0, 70, 304, gj], [$q, "t", wq, 61, 304, 0], [uq, "t", 3, 67, 303, Go], [1, "t", wn, 73, 304, ks], [bq, "t", 3, 76, 303, fs], [1, "t", 3, 78, 304, ks], [1, "t", ck, 61, 303, ka], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, fs], [1, "b", nq, 70, 303, 0], [1, "t", 5, 62, 303, Xa], [$q, "t", Ba, 68, 303, 0], [1, "t", wr, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", as, 75, 303, fs], [or, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [bq, "t", 5, 80, 303, fs], [1, "t", 1, 76, 304, 0], [hj, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, ho], [uq, "b", Xj, 65, 304, 0], [bq, "t", or, 64, 303, ho], [ck, "t", 1, 68, 304, hk], [1, "t", Ci, 69, 304, ka], [Dj, "t", jo, 69, 303, 0], [1, "t", Gj, 66, 304, 0], [bq, "t", gj, 67, 304, Xa], [y, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", T, 72, 303, 0], [hj, "t", 4, 74, 304, 0], [1, "t", pn, 74, 303, 0], [y, "t", 3, 75, 304, 0], [y, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, fs], [Dj, "t", 4, 79, 304, fs], [1, "t", Sa, 80, 304, ka], [1, "b", 1, 81, 304, fs], [uq, "t", pn, 81, 303, 0], [1, "t", Ba, 82, 303, 0], [1, "t", Zn, 83, 303, 0], [1, "b", 2, 83, 304, hk], [1, "t", ck, 84, 304, 0], [Zk, "t", 4, 84, 303, 0], [Dj, "t", 5, 85, 304, fs], [1, "t", 3, 85, 303, 0], [Dj, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, Xa], [Dj, "b", Ia, 87, 303, Xa], [1, "t", 4, 87, 304, Xa], [1, "t", Yr, 88, 303, hk], [1, "t", 0, 88, 304, ks], [1, "b", 1, 89, 303, 0], [Dj, "t", 3, 89, 304, gj], [uq, "t", Qq, 90, 303, 0], [1, "t", Io, 90, 304, Go], [1, "t", qa, 91, 303, hk], [bq, "t", 0, 91, 304, ho], [1, "b", Ir, 92, 303, 0], [1, "t", 4, 92, 304, hk], [1, "t", Ba, 93, 303, ho], [Dj, "t", hk, 93, 304, 0], [Dj, "b", R, 94, 303, ka], [1, "b", 0, 94, 304, Go], [1, "b", ks, 95, 303, Xa], [bq, "t", nq, 95, 304, hk], [1, "f", 1, O, 151, 1], [Dj, "f", Ir, 5, 153, hj], [1, "f", 0, 5, 152, Zk], [1, "f", fs, 5, 147, 1], [hj, "f", fs, Lj, 144, 1], [1, "f", Xa, O, 140, 1], [1, "f", 1, as, 149, y], [ck, "f", Dj, Ba, 146, 1], [1, "f", 1, 5, 143, 1], [y, "f", 1, Xk, 141, Dj], [1, "f", Ir, 5, 150, 1], [$q, "f", Ci, Gj, 148, or], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, Zn], [$q, "f", 2, 5, 139, $q], [Zk, "f", 2, Yo, 136, hj], [1, "f", Sa, 5, 133, 1], [uq, "f", cn, 5, 131, ck], [1, "f", 2, Vn, 127, y], [uq, "f", Xj, Yo, 125, 1], [$q, "f", y, O, 138, 1], [kr, "f", 1, Yo, 135, 1], [Zn, "f", $r, Gj, 132, $r], [1, "f", Dj, br, 130, ck], [1, "f", ck, 5, 128, or], [hj, "f", 1, O, 126, Zk], [1, "f", 1, Yo, 124, Zk], [uq, "f", ks, 5, 129, Zk], [kr, "f", Go, 5, 134, Zn], [ck, "f", ks, 5, 137, ck], [uq, "f", fs, br, 123, 1], [or, "f", Dj, wr, 122, $q], [1, "f", 1, O, 120, bq], [$q, "f", bq, 5, 117, hj], [1, "f", y, 5, 115, or], [hj, "f", $q, 5, 111, 1], [uq, "f", hj, 5, 108, 1], [1, "f", Ci, 5, 121, or], [1, "f", pn, Vn, 118, 1], [1, "f", Ci, Lj, 116, 1], [ck, "f", Ci, 5, 113, kr], [1, "f", 2, Gj, 110, 1], [bq, "f", 0, 5, 119, uq], [1, "f", ho, 5, 114, hj], [kr, "f", Go, Gj, 112, kr], [1, "f", 0, Ba, 109, 1], [Zk, "f", or, Lj, 106, 1], [1, "f", 1, br, 103, 1], [Dj, "f", 1, 5, Wa, Zn], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, Xk, 102, bq], [1, "f", pn, 5, 99, 1], [$r, "f", 2, Ba, 96, hj], [1, "f", cn, Yo, 94, 1], [1, "f", Go, zq, 104, 1], [kr, "f", gj, 5, 101, 1], [or, "f", ka, 5, 98, 1], [y, "f", 0, Yo, 93, hj], [1, "f", 1, as, 92, 1], [uq, "f", 1, Ba, 89, $r], [or, "f", uq, wr, 86, $q], [1, "f", kr, 5, 83, Zn], [uq, "f", 1, Lj, 80, 1], [1, "f", or, 5, 78, 1], [bq, "f", pn, 5, 90, bq], [Zk, "f", 2, br, 88, hj], [1, "f", 2, Ba, 85, 1], [$r, "f", nq, Lj, 82, $q], [hj, "f", dj, 5, 79, 1], [1, "f", 2, wr, 77, 1], [1, "f", nq, Ba, 75, hj], [1, "f", Xj, Gj, 72, uq], [$r, "f", hk, 5, 91, kr], [$q, "f", 0, wr, 87, 1], [1, "f", Xa, 5, 84, kr], [hj, "f", 0, 5, 81, 1], [1, "f", 0, as, 76, bq], [1, "f", 0, 5, 74, 1], [kr, "f", 1, 5, 73, Zn], [ck, "f", 1, Lj, 71, 1], [1, "f", 1, Yo, 68, 1], [1, "f", Zk, 5, 66, 1], [bq, "f", 1, 5, 62, 1], [uq, "f", 1, Ba, 59, 1], [1, "f", 1, 5, 56, 1], [uq, "f", bq, 5, 53, y], [y, "f", 1, 5, 50, 1], [$r, "f", 2, br, 70, or], [1, "f", Sa, 5, 67, uq], [hj, "f", nq, Gj, 65, 1], [$r, "f", cn, as, 63, Dj], [$r, "f", dj, 5, 60, Zk], [1, "f", 2, Lj, 57, 1], [1, "f", 2, Ba, 54, 1], [kr, "f", 2, Yo, 51, 1], [1, "f", 0, zq, 69, 1], [Zn, "f", Xa, Ba, 64, 1], [Zk, "f", ho, 5, 61, ck], [Zn, "f", 0, 5, 58, 1], [or, "f", 0, 5, 55, bq], [1, "f", ks, 5, 52, $r], [1, "f", hk, O, 49, $r], [1, "f", 0, 5, 45, Zn], [1, "f", fs, Lj, 42, y], [1, "f", ho, 5, 38, 1], [1, "f", fs, wr, 34, 1], [1, "f", Go, O, 31, 1], [ck, "f", Dj, Gj, 48, Zn], [Zk, "f", $q, 5, 44, 1], [or, "f", bq, as, 41, Zk], [1, "f", $r, Xk, 37, 1], [hj, "f", 1, Yo, 33, Dj], [1, "f", 1, 5, 29, 1], [$r, "f", 2, 5, 30, 1], [1, "f", Ir, 5, 32, 1], [1, "f", dj, O, 35, hj], [$q, "f", Pn, 5, 39, y], [$q, "f", Pn, Gj, 46, or], [hj, "f", 2, Ba, 43, 1], [bq, "f", uq, 5, 47, 1], [1, "f", 0, 5, 40, 1], [or, "f", 0, Yo, 36, $q], [ck, "f", fs, 5, 28, 1], [bq, "f", 1, 5, 25, or], [1, "f", bq, 5, 22, uq], [1, "f", 1, zq, ko, bq], [Zk, "f", 1, br, Oa, 1], [uq, "f", 1, Yo, cj, kr], [ck, "f", Zk, br, Ar, y], [ck, "f", Xj, as, 27, hj], [1, "f", 2, 5, 24, 1], [1, "f", Pn, 5, 21, 1], [1, "f", 2, Lj, Br, kr], [bq, "f", 2, Gj, sr, 1], [1, "f", Ci, Xk, mk, 1], [hj, "f", 2, Gj, 9, 1], [kr, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, $r], [1, "f", ka, 5, Qk, 1], [Zk, "f", ka, O, 11, 1], [1, "f", 0, 5, $a, 1], [1, "f", y, Lj, li, 1], [Zn, "f", uq, wr, Cr, 1], [bq, "f", Go, 5, 7, Dj], [1, "f", hj, 5, es, 1], [y, "f", Xa, 5, 5, y], [1, "f", 1, 6, Vn, 1], [$r, "f", 2, Zq, Yo, 1], [uq, "f", Go, 8, br, 1], [1, "f", $q, Q, wr, 1], [ck, "f", 1, Gq, Lj, 1], [ck, "f", 1, Ln, 5, 1], [or, "f", 1, 17, 5, $q], [hj, "f", hj, 22, Gj, 1], [hj, "f", 1, 26, 5, or], [ck, "f", 2, ek, 5, Dj], [$q, "f", 2, 13, Xk, 1], [1, "f", dj, Ao, O, 1], [1, "f", 2, vo, 5, $q], [1, "f", Xj, 21, 5, 1], [$q, "f", cn, 23, 5, 1], [kr, "f", 2, 25, Lj, Zn], [1, "f", Sa, 27, Vn, Zn], [bq, "f", 0, si, Vn, ck], [1, "f", Xa, D, 5, 1], [kr, "f", 0, Br, as, Dj], [1, "f", 0, 24, 5, bq], [Zn, "f", 0, 28, 5, 1], [kr, "f", Dj, 20, Lj, 1], [uq, "f", 1, 29, 5, 1], [y, "f", Dj, 32, 5, or], [y, "f", or, 35, 5, ck], [1, "f", $q, 38, 5, uq], [1, "f", 1, 41, 5, 1], [y, "f", 1, 45, 5, 1], [1, "f", 2, 30, Ba, 1], [1, "f", 2, 33, 5, Zn], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, Gj, 1], [1, "f", pn, 42, wr, 1], [or, "f", 2, 44, Vn, $r], [1, "f", uj, 46, Vn, 1], [1, "f", 0, 43, Vn, 1], [kr, "f", gj, 40, 5, Dj], [Zn, "f", gj, 37, 5, y], [1, "f", 0, 34, Lj, 1], [1, "f", ks, 31, 5, 1], [Zn, "f", 0, 47, 5, 1], [or, "f", 1, 48, 5, 1], [$r, "f", 1, 51, 5, Dj], [or, "f", 1, 53, 5, 1], [1, "f", Zn, 57, as, $q], [uq, "f", Dj, 60, zq, 1], [1, "f", 1, 63, Lj, Dj], [1, "f", 1, 65, O, 1], [hj, "f", 2, 64, Ba, $q], [1, "f", Ir, 62, Lj, Zk], [1, "f", nq, 59, 5, Dj], [kr, "f", nq, 56, 5, 1], [y, "f", Pn, 52, 5, 1], [hj, "f", Ci, 49, as, Dj], [1, "f", 2, 54, 5, 1], [ck, "f", ks, 50, 5, 1], [1, "f", 0, 55, 5, bq], [kr, "f", ka, 58, Vn, $r], [Zk, "f", 0, 61, 5, $r], [y, "f", hk, 66, as, 1], [y, "f", y, 67, zq, $r], [hj, "f", or, 70, wr, or], [1, "f", uq, 72, as, $r], [bq, "f", 1, 75, Lj, hj], [$r, "f", uq, 79, O, or], [1, "f", Pn, 68, 5, hj], [1, "f", 2, 71, Vn, Dj], [Zn, "f", 2, 74, 5, or], [uq, "f", pn, 76, Vn, 1], [bq, "f", Xj, 78, Yo, or], [y, "f", 0, 69, zq, 1], [1, "f", 0, 73, Ba, or], [1, "f", 0, 77, 5, $q], [1, "f", ka, 80, 5, Zk], [ck, "f", hj, 81, 5, Zn], [1, "f", 1, 84, 5, 1], [$q, "f", 1, 87, Vn, or], [uq, "f", hj, 89, O, Dj], [1, "f", 1, 92, as, Zn], [Dj, "f", 1, 94, Yo, y], [$r, "f", ks, 82, Ba, 1], [1, "f", nq, 83, 5, uq], [1, "f", Ci, 85, Xk, 1], [1, "f", cn, 88, 5, or], [hj, "f", 2, 90, wr, 1], [1, "f", Ir, 93, O, 1], [Zn, "f", 2, 95, Vn, $q], [1, "f", 0, 86, 5, $r], [1, "f", 0, 91, Xk, 1], [1, "f", 2, f, 153, 1], [1, "f", 1, iq, 152, 1], [$r, "t", ck, 93, 301, 0], [y, "t", Oj, 94, 302, ks], [1, "t", 5, 95, 302, Xa], [1, "t", wr, 93, 302, Xa], [kr, "b", Ia, 92, 302, 0], [1, "t", 1, 91, 302, gj], [1, "t", Ba, 90, 302, 0], [1, "b", cn, 92, 301, fs], [Zn, "t", kr, 91, 301, 0], [1, "t", Pn, 90, 301, 0], [1, "b", Ir, 89, 302, hk], [1, "t", 4, 89, 301, Xa], [1, "t", 1, 88, 302, 0], [Zn, "t", Ir, 88, 301, ho], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [$r, "t", Ik, 86, 302, Go], [1, "t", hj, 85, 302, ka], [ck, "t", as, 85, 301, Go], [$r, "b", 2, 84, 302, Go], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [Zn, "t", Ba, 81, 302, ho], [Zk, "t", 2, 80, 302, 0], [Dj, "t", 4, 79, 302, 0], [y, "t", Pn, 78, 302, ho], [1, "b", 1, 77, 302, Xa], [Zk, "b", Sa, 76, 302, ks], [Dj, "t", uj, 75, 302, 0], [Zn, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [ck, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", Ui, 70, 302, 0], [or, "t", Dj, 69, 302, hk], [kr, "t", Ir, 68, 302, 0], [1, "t", 5, 67, 302, 0], [or, "b", Zk, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, hk], [ck, "b", wq, 63, 302, ho], [1, "t", Gj, 62, 302, fs], [Zn, "b", $r, 61, 302, ho], [$r, "t", 3, 60, 302, ks], [1, "t", 4, 59, 302, ka], [1, "b", Pn, 58, 302, 0], [1, "t", 5, 57, 302, ho], [1, "t", kr, 56, 302, ka], [1, "t", wq, 55, 302, 0], [uq, "t", 4, 54, 302, hk], [uq, "t", 1, 53, 302, Xa], [1, "t", Vn, 52, 302, 0], [Dj, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, Go], [hj, "t", 2, 49, 302, hk], [1, "b", 1, 48, 302, fs], [uq, "t", Oj, 47, 302, gj], [1, "t", qa, 46, 302, 0], [hj, "t", Zk, 45, 302, 0], [1, "t", 2, 44, 302, 0], [kr, "t", Yo, 43, 302, 0], [1, "t", 2, 42, 302, ks], [uq, "t", 1, 41, 302, 0], [Zn, "t", va, 40, 302, Xa], [Dj, "b", 2, 39, 302, 0], [1, "t", Ba, 38, 302, hk], [Zk, "t", bq, 37, 302, Go], [1, "t", dj, 36, 302, 0], [y, "t", 5, 35, 302, 0], [1, "t", ka, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", jo, 32, 302, 0], [Zk, "b", $r, 31, 302, Xa], [1, "t", 2, 30, 302, 0], [$r, "t", mi, 29, 302, Xa], [1, "t", 2, 28, 302, 0], [1, "t", Gj, 27, 302, 0], [1, "b", 3, 26, 302, 0], [Zk, "t", Zn, 25, 302, gj], [kr, "t", 4, 24, 302, ka], [1, "t", Sa, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", O, 21, 302, 0], [kr, "t", 2, 20, 302, hk], [1, "t", mi, 19, 302, Xa], [kr, "b", 1, Fa, 302, gj], [kr, "t", Ba, Mo, 302, Xa], [uq, "t", 3, 16, 302, Go], [1, "t", 1, sr, 302, ks], [1, "t", 5, 14, 302, 0], [1, "t", Qq, gs, 302, 0], [kr, "t", 4, ea, 302, 0], [1, "t", 1, vk, 302, 0], [hj, "t", uj, ok, 302, 0], [1, "t", 4, 9, 302, 0], [ck, "b", Oj, Cr, 302, Go], [hj, "t", 5, 8, 302, hk], [uq, "t", as, Do, 302, 0], [Zk, "b", 2, za, 302, ka], [bq, "t", 1, 6, 301, 0], [ck, "t", oo, 6, 300, 0], [$r, "t", 2, 6, 299, Go], [$q, "b", gj, za, 298, ks], [Zk, "t", Vn, 6, 297, Xa], [ck, "t", 2, _n, 296, Go], [1, "t", ho, _n, 295, 0], [Zk, "b", Ci, pi, 294, Go], [1, "t", wr, 6, 293, gj], [$q, "t", 1, za, 292, fs], [Zk, "b", 0, iq, 291, 0], [Dj, "t", Xj, iq, 290, 0], [Zk, "t", as, es, 289, 0], [y, "t", 1, 6, 288, 0], [1, "t", 4, jn, 287, 0], [1, "t", Ir, jn, 286, Xa], [1, "t", Vn, _n, 285, gj], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, fs], [1, "t", 2, 6, 282, ks], [Zk, "t", 5, za, 281, hk], [or, "b", Ir, 6, 280, 0], [1, "t", 5, 6, 279, hk], [1, "t", 1, es, 278, hk], [1, "t", 4, f, 277, fs], [1, "t", yr, 6, 276, 0], [1, "t", Vn, f, 275, ka], [Zk, "b", gj, 6, 274, 0], [ck, "t", Gj, 6, 273, 0], [Zk, "t", Zn, 6, 272, fs], [y, "t", jo, 6, 271, 0], [1, "b", 3, za, 270, ks], [Zn, "t", as, 6, 269, hk], [1, "t", ck, dn, 268, 0], [y, "t", 4, 6, 267, 0], [1, "t", bq, 6, 266, 0], [1, "t", 3, dn, 265, gj], [1, "t", T, _n, 264, 0], [hj, "b", nq, za, 263, hk], [$q, "t", zq, 6, 262, 0], [1, "t", 3, jn, 261, ho], [ck, "t", Xa, dn, 260, ho], [Zk, "t", as, 6, 259, ks], [1, "t", Zn, es, 258, 0], [bq, "t", 3, f, 257, 0], [Zn, "t", T, iq, 255, gj], [1, "t", wq, 6, 254, fs], [$r, "t", wr, _n, 253, ho], [y, "b", 2, 6, 252, 0], [1, "t", wr, dn, 251, 0], [1, "t", $r, _n, 250, Xa], [y, "t", R, 6, 249, 0], [Dj, "t", jo, 6, 248, gj], [1, "b", yr, 6, 247, gj], [$r, "t", 5, f, 246, 0], [1, "t", Ia, jn, 245, 0], [1, "t", 5, 6, 244, ho], [Zn, "t", Xa, 6, 243, 0], [ck, "t", Ur, iq, 242, 0], [Zk, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", ks, 6, 239, hk], [Zn, "t", Ia, za, 238, ka], [Zk, "t", qa, 6, 237, fs], [$q, "t", $r, 6, 236, 0], [1, "t", Vn, 6, 235, ho], [ck, "b", 2, 6, 234, 0], [$r, "t", 2, pi, 233, 0], [1, "t", 4, pi, 232, 0], [$q, "b", Ui, za, 231, ks], [Dj, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [uq, "t", 2, 6, 228, 0], [uq, "t", zq, 6, 227, 0], [bq, "b", Pn, jn, 226, 0], [$r, "t", 4, za, 225, Go], [$q, "t", 0, 6, 224, 0], [1, "t", pn, f, 223, ho], [$q, "t", 0, 6, 222, 0], [kr, "b", 2, 6, 221, 0], [$q, "t", jo, f, 220, ka], [bq, "b", Ia, f, 219, Go], [1, "t", wr, 6, 218, 0], [Zn, "t", 0, _n, 217, 0], [1, "t", 3, _n, 216, hk], [uq, "b", ks, dn, 215, 0], [$r, "t", va, 6, 214, 0], [uq, "t", nq, es, 213, Xa], [Dj, "t", fs, jn, 212, 0], [$q, "t", uj, iq, 211, 0], [1, "b", Oj, iq, 210, ka], [1, "t", hk, 6, 209, 0], [1, "t", 5, 6, 207, 0], [kr, "t", 2, za, 208, 0], [1, "t", 0, dn, 206, 0], [y, "t", cn, 6, 205, ho], [1, "t", nq, f, 203, 0], [1, "b", hk, iq, 202, gj], [$q, "t", Oj, f, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, ks], [1, "t", 2, 6, 197, ka], [hj, "t", mi, _n, 196, ks], [1, "t", 1, pi, 195, gj], [uq, "t", Ui, 6, 194, 0], [uq, "t", Ur, 6, 192, 0], [kr, "t", 2, 6, 191, Go], [or, "b", 0, dn, 190, 0], [Zn, "t", yr, 6, 189, 0], [ck, "t", Ur, iq, 187, 0], [1, "b", 0, jn, 186, 0], [1, "t", 2, _n, 185, fs], [1, "t", 4, es, 184, fs], [Dj, "t", dj, 6, 183, 0], [1, "t", 0, f, 182, gj], [$r, "b", 2, es, 181, 0], [1, "t", 5, dn, 180, 0], [1, "t", 2, 6, 179, Go], [1, "t", 0, jn, 178, ho], [y, "t", 2, jn, 177, fs], [1, "t", 4, _n, 176, ka], [1, "b", 2, 6, 175, fs], [kr, "t", 1, 6, 174, 0], [1, "t", 5, iq, 173, Xa], [kr, "t", 2, 6, Iq, Go], [Dj, "t", Yr, za, 204, 0], [or, "t", 4, 6, 200, ho], [1, "t", 2, 6, 193, ks], [1, "t", 2, 6, 188, 0], [1, "f", ck, _n, 150, $r], [1, "f", 2, 6, 151, 1], [ck, "f", 2, 6, 149, hj], [uq, "f", bq, _n, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", Xj, 6, 145, $q], [uq, "f", Ci, jn, 143, 1], [1, "f", Zk, 6, 146, 1], [hj, "f", 1, 6, 144, 1], [1, "f", hj, pi, 142, 1], [1, "f", uj, pi, 141, 1], [$q, "f", 2, iq, 139, 1], [$r, "f", 2, 6, 137, Zk], [Zk, "f", cn, pi, 135, Dj], [1, "f", 2, es, 133, kr], [Zk, "f", 1, pi, 140, 1], [1, "f", Zn, jn, 138, y], [1, "f", 1, 6, 136, Dj], [y, "f", $r, 6, 134, Zn], [1, "f", Zk, 6, 132, Zk], [uq, "f", Pn, za, 131, ck], [or, "f", 2, 6, 129, $r], [1, "f", dj, 6, 127, Zk], [1, "f", 2, 6, 125, $q], [1, "f", 2, 6, 123, y], [or, "f", nq, 6, 121, 1], [Dj, "f", 1, pi, 130, uq], [1, "f", 1, 6, 128, 1], [kr, "f", 1, 6, 126, hj], [1, "f", hj, 6, 124, 1], [1, "f", 1, es, 122, 1], [1, "f", Zn, 6, 120, $r], [Dj, "f", nq, pi, 119, 1], [1, "f", 2, f, 117, $r], [Dj, "f", 2, pi, 115, 1], [hj, "f", 2, f, 113, 1], [$q, "f", 2, pi, 111, Zn], [1, "f", cn, _n, 109, Zk], [or, "f", $q, jn, 118, 1], [kr, "f", 1, 6, 116, 1], [bq, "f", 1, _n, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, Dj], [hj, "f", Dj, 6, 108, kr], [1, "f", 1, jn, 106, 1], [Zk, "f", kr, iq, 104, ck], [kr, "f", nq, 6, 107, y], [1, "f", Ci, 6, 105, 1], [ck, "f", 2, 6, 103, 1], [1, "f", 2, dn, 101, 1], [ck, "f", Pn, jn, 99, 1], [$r, "f", Pn, 6, 97, kr], [hj, "f", Ir, _n, 95, 1], [1, "f", Ci, 6, 93, 1], [1, "f", uj, 6, 91, y], [bq, "f", Zk, 6, 102, 1], [kr, "f", kr, 6, 100, 1], [$q, "f", Zk, 6, 98, or], [or, "f", 1, iq, 96, bq], [1, "f", ck, es, 94, 1], [y, "f", 1, 6, 92, 1], [bq, "f", 1, _n, 90, 1], [Dj, "f", $r, 6, 88, 1], [1, "f", Zn, 6, 86, ck], [1, "f", 2, 6, 89, uq], [kr, "f", 2, za, 87, 1], [Zk, "f", dj, pi, 85, Zk], [Zn, "f", 2, 6, 83, 1], [$r, "f", nq, iq, 81, ck], [1, "f", Ci, 6, 79, 1], [Dj, "f", 2, 6, 77, 1], [bq, "f", 1, _n, 84, 1], [Dj, "f", 1, 6, 82, 1], [1, "f", y, 6, 80, $q], [1, "f", bq, es, 78, 1], [Dj, "f", $q, iq, 76, 1], [1, "f", 2, 6, 75, $q], [1, "f", Pn, 6, 73, 1], [1, "f", 2, _n, 71, bq], [hj, "f", Xj, iq, 69, 1], [hj, "f", Ir, dn, 67, 1], [1, "f", pn, f, 65, 1], [1, "f", 1, za, 74, kr], [1, "f", 1, 6, 72, 1], [hj, "f", 1, pi, 70, y], [1, "f", 1, 6, 68, 1], [Zk, "f", 1, pi, 66, 1], [1, "f", 1, es, 64, 1], [Zn, "f", 2, za, 63, 1], [uq, "f", 2, 6, 61, Zk], [or, "f", 2, jn, 59, 1], [1, "f", cn, pi, 57, $q], [hj, "f", 2, 6, 55, 1], [1, "f", Ir, 6, 53, or], [Zn, "f", 2, 6, 51, 1], [$q, "f", 1, es, 62, kr], [1, "f", 1, _n, 60, 1], [$q, "f", 1, 6, 58, 1], [$r, "f", 1, 6, 56, hj], [1, "f", 1, 6, 54, 1], [$q, "f", hj, pi, 52, $q], [bq, "f", Zn, es, 50, 1], [$r, "f", 2, es, 49, 1], [1, "f", 2, f, 47, kr], [Zn, "f", 2, pi, 45, bq], [1, "f", Xj, 6, 43, ck], [or, "f", 2, 6, 41, Zn], [1, "f", 2, 6, 39, hj], [Zn, "f", 1, 6, 48, 1], [or, "f", $r, iq, 46, 1], [uq, "f", y, pi, 44, ck], [Zn, "f", 1, iq, 42, 1], [1, "f", ck, dn, 40, 1], [$r, "f", 1, jn, 38, 1], [Zn, "f", 2, za, 37, 1], [1, "f", 2, 6, 35, 1], [$r, "f", Ci, 6, 33, y], [1, "f", 2, dn, 31, 1], [bq, "f", 2, iq, 29, hj], [1, "f", Xj, 6, 27, 1], [Zn, "f", 1, pi, 36, hj], [1, "f", 1, 6, 34, Zk], [1, "f", Zk, dn, 32, 1], [Zk, "f", Dj, dn, 30, 1], [$q, "f", 1, iq, 28, 1], [1, "f", Zk, za, 26, 1], [1, "f", 2, iq, 25, 1], [$q, "f", 2, es, 23, bq], [$r, "f", pn, f, 21, uq], [$q, "f", Ci, 6, 19, ck], [kr, "f", 2, za, Mo, or], [uq, "f", 2, 6, 15, 1], [1, "f", $r, es, 24, 1], [1, "f", Dj, 6, 22, hj], [1, "f", 1, _n, ko, 1], [1, "f", y, 6, en, ck], [$r, "f", $q, za, 16, kr], [1, "f", Ir, jn, J, $q], [bq, "f", uj, es, q, 1], [or, "f", 2, 6, ya, bq], [1, "f", uj, jn, Zq, 1], [1, "f", 1, 6, 14, 1], [kr, "f", 1, 6, G, 1], [1, "f", 1, jn, ek, 1], [1, "f", 1, 6, Nk, 1], [$r, "f", 1, _n, iq, Zk], [1, "f", 1, ar, 6, Zn], [1, "f", 2, Tk, pi, 1], [Zk, "f", Ci, An, 6, Zk], [Zn, "f", 2, 11, dn, 1], [1, "f", uj, 13, es, bq], [Zn, "f", Pn, wo, 6, 1], [hj, "f", 1, Ar, 6, 1], [1, "f", Zn, Ai, 6, 1], [$r, "f", 1, 14, 6, Dj], [hj, "f", ck, la, 6, 1], [hj, "f", Zn, 18, 6, 1], [or, "f", 1, Fq, 6, 1], [or, "f", 1, 22, 6, Zk], [1, "f", Zk, 24, 6, Dj], [1, "f", $q, 26, 6, 1], [Zk, "f", 2, no, 6, 1], [or, "f", 2, 19, _n, 1], [y, "f", 2, 21, f, Zn], [Dj, "f", 2, 23, es, kr], [Dj, "f", cn, 25, 6, $q], [Zn, "f", Sa, 27, f, 1], [1, "f", 2, 29, 6, bq], [bq, "f", 2, 31, 6, 1], [Zk, "f", Xj, 33, _n, $q], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, hj], [1, "f", hj, 32, 6, ck], [1, "f", 1, 34, 6, kr], [1, "f", dj, 67, 6, 1], [hj, "f", 2, 69, _n, 1], [uq, "f", Sa, 71, 6, 1], [1, "f", Ir, 73, 6, 1], [1, "f", 2, 75, za, kr], [1, "f", 1, 68, 6, 1], [Dj, "f", ck, 70, es, or], [Dj, "f", y, 72, za, 1], [1, "f", y, 74, iq, Zn], [1, "f", uq, 76, 6, 1], [1, "f", nq, 77, 6, Zk], [Zn, "f", 2, 79, pi, ck], [Dj, "f", Pn, 81, 6, 1], [1, "f", Xj, 83, es, 1], [Zk, "f", 2, 85, 6, 1], [or, "f", 1, 78, 6, kr], [1, "f", 1, 80, _n, 1], [1, "f", Zn, 82, f, 1], [1, "f", hj, 84, 6, 1], [$q, "f", uq, 86, _n, 1], [or, "f", 2, 87, es, uq], [bq, "f", dj, 89, 6, 1], [kr, "f", 2, 91, 6, Dj], [y, "f", Xj, 93, 6, kr], [Zk, "f", ck, 88, 6, hj], [Zk, "f", hj, 90, f, 1], [ck, "f", uq, 92, _n, kr], [hj, "f", kr, 94, f, 1], [1, "f", 2, 95, pi, 1], [1, "f", Zk, 95, Zq, 1], [1, "f", $r, 83, Tk, 1], [Zk, "f", kr, 81, 7, 1], [1, "f", or, 79, Do, y], [1, "f", 1, 77, Ka, bq], [1, "f", 1, 75, lo, 1], [1, "f", $r, 73, 7, bq], [1, "f", 1, 71, 7, Dj], [$q, "f", 1, 69, Zq, 1], [kr, "f", 1, 33, 7, 1], [ck, "f", $q, 31, Zq, bq], [1, "f", 1, 29, 7, Zn], [1, "f", 1, 27, 7, Zk], [1, "f", kr, 25, 7, or], [1, "f", Dj, 23, lq, kr], [1, "f", 1, 21, 7, Zk], [Zn, "f", uq, Pi, 7, $r], [bq, "f", 1, 17, 7, uq], [uq, "f", kr, M, 7, hj], [1, "f", ck, Ek, 7, 1], [1, "f", 1, Co, 7, uq], [1, "f", 1, Ok, He, 1], [$r, "f", 1, Zq, 7, Zn], [$q, "s", 0, 7, 8, uq], [Dj, "t", Qa, lq, 174, 0], [1, "t", Lj, 7, 175, 0], [1, "t", Yr, Ka, 176, ks], [Zn, "b", Ci, Tk, 177, 0], [1, "t", Oj, 94, 301, 0], [Dj, "b", Oj, 95, 301, hk], [1, "t", 4, 96, 301, ka], [ck, "t", 1, 97, 301, 0], [bq, "t", Xj, 98, 301, 0], [Zk, "t", 4, 99, 301, 0], [$r, "t", Pn, Aj, 301, 0], [ck, "t", Io, 96, 304, 0], [ck, "t", dj, 96, 302, fs], [1, "t", Ir, 97, 304, 0], [kr, "t", 2, 96, 303, ho], [bq, "t", 5, 97, 303, 0], [kr, "t", 5, 98, 304, 0], [1, "b", Ir, 97, 302, 0], [1, "b", Ci, 99, 304, gj], [Zk, "t", uq, 98, 303, 0], [1, "t", T, 98, 302, ho], [1, "t", mi, 99, 303, 0], [uq, "t", jo, Wo, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [bq, "t", 0, Aj, 302, 0], [Zk, "t", gj, 101, 304, 0], [1, "t", Yr, 102, 304, 0], [1, "f", ka, 94, E, $q], [y, "f", 1, 93, 7, Zn], [ck, "f", 1, 92, Ka, or], [1, "f", fs, 91, 7, 1], [hj, "f", 1, 90, Do, 1], [1, "f", ck, 89, 7, 1], [Zn, "f", 0, 88, Zq, 1], [or, "f", 1, 87, 7, 1], [kr, "f", ck, 86, lo, kr], [1, "f", 1, 85, 7, or], [1, "f", 0, 84, He, uq], [1, "f", kr, 82, Zq, 1], [or, "f", gj, 80, 7, 1], [kr, "f", Zn, 78, Zq, 1], [1, "f", 0, 76, Do, $q], [Dj, "f", ck, 74, 7, 1], [$r, "f", ks, 72, Ka, 1], [1, "f", 0, 70, 7, y], [Zk, "f", 1, 68, 7, 1], [Zk, "f", uq, 32, 7, ck], [uq, "f", ks, 30, Ka, kr], [uq, "f", ck, 28, 7, 1], [1, "f", 0, 26, He, 1], [1, "f", 1, 24, nj, 1], [1, "f", gj, 22, 7, 1], [1, "f", kr, 20, 7, bq], [Dj, "f", 0, 18, 7, 1], [1, "f", hj, 16, 7, 1], [1, "f", 0, 14, 7, hj], [$r, "f", 1, Ge, He, kr], [Zn, "f", ka, Yq, 7, 1], [1, "f", kr, 8, 7, 1], [1, "s", y, 7, 9, uq], [hj, "f", 0, 95, 152, $q], [Dj, "f", Zk, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, mk, Zk], [Dj, "f", ck, 95, 14, 1], [1, "f", $r, 95, Hk, Zn], [1, "f", gj, 95, cs, 1], [1, "f", Go, 95, 20, ck], [1, "f", 1, 95, 21, or], [bq, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", kr, 95, 50, 1], [1, "f", Zk, 95, 52, ck], [hj, "f", 0, 95, 53, 1], [uq, "f", 1, 95, 54, $r], [1, "f", 1, 95, 62, 1], [1, "f", Xa, 95, 55, hj], [1, "f", or, 95, 64, Dj], [1, "f", 0, 95, 58, 1], [or, "f", 0, 95, 61, 1], [uq, "f", ka, 95, 68, 1], [$r, "f", Go, 95, 72, 1], [1, "f", 0, 95, 78, 1], [kr, "f", or, 95, 115, kr], [ck, "f", 1, 95, 117, kr], [1, "f", ck, 95, 128, Zn], [1, "f", Xa, 95, 85, $q], [bq, "f", gj, 95, 91, bq], [1, "f", Go, 95, 95, hj], [1, "f", hk, 95, 114, hj], [1, "f", Ci, 95, 113, uq], [1, "f", $r, 95, 119, 1], [1, "f", Go, 95, 120, Zk], [$r, "f", Zn, 95, 121, y], [$r, "f", 0, 95, 127, uq], [Zn, "f", 1, 95, 130, 1], [1, "f", ks, 95, 131, 1], [kr, "f", hj, 95, 132, 1], [1, "f", 1, 95, 136, 1], [bq, "f", ks, 95, 137, 1], [Zn, "f", 0, 95, 143, Dj], [$q, "f", 0, 95, 147, 1], [1, "f", Zk, 95, 138, 1], [1, "f", uq, 95, 144, 1], [1, "f", 1, 95, 10, ck], [1, "f", Xa, 95, 8, 1], [kr, "f", uq, 95, ya, 1], [Zk, "f", 0, 95, 13, 1], [1, "f", $q, 95, 16, 1], [1, "f", 1, 95, 17, or], [Dj, "f", Xa, 95, b, ck], [Zk, "f", 1, 95, 45, Zn], [$r, "f", 0, 95, 51, $q], [1, "f", ck, 95, 56, 1], [1, "f", hj, 95, 57, hj], [1, "f", 1, 95, 59, Dj], [or, "f", Dj, 95, 60, or], [1, "f", 1, 95, 63, 1], [1, "f", fs, 95, 65, Zk], [1, "f", hj, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, Zk], [1, "f", 1, 95, 70, hj], [1, "f", ka, 95, 71, 1], [1, "f", 1, 95, 73, 1], [or, "f", 1, 95, 74, kr], [1, "f", 0, 95, 75, 1], [1, "f", hj, 95, 76, or], [bq, "f", y, 95, 77, Zn], [1, "f", $r, 95, 79, uq], [1, "f", 1, 95, 80, hj], [y, "f", Go, 95, 81, hj], [hj, "f", 1, 95, 82, $r], [1, "f", gj, 95, 83, uq], [1, "f", Zk, 95, 84, or], [1, "f", Zk, 95, 86, $r], [1, "f", ck, 95, 88, 1], [1, "f", ka, 95, 87, hj], [hj, "f", 1, 95, 89, Zk], [1, "f", kr, 95, 90, 1], [1, "f", 1, 95, 92, hj], [kr, "f", 1, 95, 93, kr], [1, "f", $r, 95, 94, 1], [bq, "f", or, 95, 96, kr], [Dj, "f", $q, 95, 97, 1], [or, "f", fs, 95, 98, 1], [1, "f", 1, 95, 99, 1], [or, "f", 1, 95, Aj, Zn], [Zk, "f", ka, 95, 101, Zk], [Zk, "f", hj, 95, 102, $r], [uq, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, ck], [1, "f", 1, 95, 105, or], [1, "f", 0, 95, 106, 1], [hj, "f", 1, 95, 107, $q], [or, "f", 1, 95, 108, 1], [1, "f", kr, 95, 109, bq], [hj, "f", 0, 95, 110, bq], [1, "f", kr, 95, 111, Zk], [1, "f", 0, 95, 112, hj], [kr, "f", 1, 95, 116, 1], [1, "f", ka, 95, 118, Zn], [$r, "f", 0, 95, 122, y], [1, "f", 1, 95, 123, Zn], [1, "f", 1, 95, 124, Zn], [1, "f", Xa, 95, 125, 1], [or, "f", Dj, 95, 126, $q], [1, "f", hj, 95, 129, 1], [y, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [or, "f", ck, 95, 139, Zn], [1, "f", ho, 95, 140, 1], [$r, "f", Dj, 95, 141, hj], [1, "f", 1, 95, 142, 1], [Zn, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, kr], [1, "f", or, 95, 148, 1], [uq, "f", 1, 95, 149, or], [1, "f", 1, 95, 150, $q], [1, "f", 1, 95, 153, ck], [1, "cs", ks, 64, Zi, 1], [1, "cs", Zk, 64, vi, 1], [1, "cs", 2, 64, di, 1], [ck, "cs", dj, 64, Bi, bq], [$q, "cs", 0, 64, ie, 1], [kr, "cs", uq, 64, 21, or], [1, "cs", Pn, 64, 22, Zn], [ck, "cs", hk, 64, 23, 1], [1, "cs", nq, 64, 24, 1], [Zk, "cs", Dj, 64, 29, ck], [1, "cs", Sa, 64, 30, $r], [$r, "cs", Ui, 64, 31, 1], [1, "cs", 0, 64, 32, Dj], [ck, "cs", 1, 64, 33, ck], [hj, "cs", 2, 64, 34, $q], [1, "cs", 0, 64, 35, 1], [1, "cs", Sa, 64, Nk, y], [1, "cs", cn, 65, 8, 1], [1, "cs", 1, 65, Oq, 1], [$r, "cs", 2, 65, 10, $q], [1, "cs", 3, 65, 11, 1], [bq, "cs", hj, 65, 16, 1], [1, "cs", ka, 64, 17, 1], [1, "cs", Qq, 65, s, uq], [hj, "cs", Xj, 64, 18, kr], [1, "cs", dj, 65, Ha, 1], [1, "cs", 0, 65, ij, hj], [1, "cs", 1, 65, Xe, 1], [Dj, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, $q], [$r, "cs", Ia, 65, 23, uq], [$q, "cs", 0, 65, 24, bq], [1, "cs", Ci, 65, 29, 1], [1, "cs", 3, 65, 30, hj], [1, "cs", 0, 65, 31, 1], [Dj, "cs", 1, 65, 32, hj], [bq, "cs", Ci, 65, 33, kr], [Dj, "cs", R, 65, 34, hj], [hj, "cs", Xj, 63, 9, 1], [1, "cs", ho, 62, pq, bq], [$r, "cs", 2, 61, Ok, kr], [1, "cs", Xa, 60, re, 1], [1, "cs", pn, 59, pq, bq], [1, "cs", Xj, 58, 9, 1], [1, "cs", Go, 57, ln, 1], [1, "cs", Xj, 56, ya, uq], [bq, "cs", Pn, 55, nr, 1], [1, "cs", 2, 54, Q, Zn], [1, "cs", 0, 53, Zi, Dj], [1, "cs", fs, 51, 9, Dj], [uq, "cs", 2, 52, Oq, 1], [1, "cs", Xj, 50, 9, bq], [y, "cs", Ir, 48, Ok, $q], [ck, "cs", Pn, 49, 9, 1], [1, "cs", 0, 47, 9, y], [ck, "cs", fs, 45, Mi, 1], [ck, "cs", Go, 43, bk, ck], [1, "cs", Sa, 46, Q, 1], [1, "cs", 2, 44, 9, Zk], [1, "cs", cn, 42, An, uq], [ck, "cs", 2, 41, 9, 1], [$r, "cs", Go, 40, An, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", pn, 38, nr, 1], [1, "cs", 0, 37, Zi, 1], [hj, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", yr, 64, lq, 1], [1, "cs", 2, 62, 8, bq], [Zn, "cs", R, 61, 8, uq], [Zn, "cs", 1, 62, 7, Zn], [ck, "cs", Ci, 63, 7, hj], [or, "cs", 0, 64, 6, 1], [Zn, "cs", 3, 65, 6, kr], [$q, "cs", 2, 63, f, 1], [1, "cs", Ci, 62, pi, or], [1, "cs", 2, 61, 6, 1], [kr, "cs", 2, 60, _n, Zn], [bq, "cs", Ci, 59, 6, 1], [1, "cs", 2, 61, lq, 1], [1, "cs", fs, 60, 7, kr], [1, "cs", Ir, 60, 8, $r], [1, "cs", 2, 59, Tk, 1], [1, "cs", Xj, 59, 8, 1], [y, "cs", 1, 58, Nk, 1], [$q, "cs", 1, 57, za, 1], [hj, "cs", 1, 55, lo, Dj], [1, "cs", gj, 56, 6, 1], [1, "cs", uj, 58, dn, 1], [1, "cs", nq, 58, 7, uq], [1, "cs", 2, 57, nj, bq], [Dj, "cs", uj, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [uq, "cs", nq, 56, Nk, Zk], [hj, "cs", cn, 55, 8, 1], [1, "cs", 0, 54, ar, 1], [hj, "cs", 0, 50, 7, bq], [uq, "cs", 0, 53, 6, Dj], [1, "cs", cn, 54, jn, 1], [$q, "cs", uj, 54, 7, $r], [1, "cs", Xj, 53, E, 1], [1, "cs", 2, 52, E, Zk], [1, "cs", 2, 52, f, Dj], [$r, "cs", 1, 52, lj, 1], [1, "cs", dj, 53, ar, Zn], [1, "cs", 2, 51, 8, 1], [1, "cs", pn, 51, 7, 1], [1, "cs", 2, 51, iq, Dj], [ck, "cs", 2, 50, f, 1], [hj, "cs", 2, 50, 8, ck], [Zn, "cs", uj, 49, 8, $q], [uq, "cs", pn, 49, 7, 1], [1, "cs", 2, 49, 6, Dj], [hj, "cs", 0, 46, nj, 1], [1, "cs", 1, 48, 8, y], [ck, "cs", hj, 44, lo, bq], [1, "cs", 1, 41, bn, 1], [1, "cs", nq, 48, nj, Zn], [or, "cs", 2, 48, dn, 1], [1, "cs", 2, 47, dn, uq], [hj, "cs", pn, 47, 7, Dj], [bq, "cs", 2, 47, Zj, hj], [$r, "cs", 2, 46, te, $r], [Zn, "cs", 2, 45, _j, 1], [y, "cs", 2, 45, He, bq], [ck, "cs", cn, 45, 6, bq], [hj, "cs", 2, 46, za, y], [1, "cs", 2, 44, _n, or], [1, "cs", 2, 44, te, Zn], [1, "cs", Ci, 43, 8, 1], [kr, "cs", Xj, 43, 7, uq], [Zn, "cs", 2, 43, es, bq], [1, "cs", 2, 42, 6, y], [Zk, "cs", Pn, 42, 7, ck], [y, "cs", nq, 42, 8, ck], [1, "cs", 2, 41, Zq, Zn], [1, "cs", nq, 41, 6, 1], [1, "cs", Pn, 40, 6, bq], [1, "cs", pn, 40, Tk, y], [1, "cs", 2, 40, ar, uq], [1, "cs", Ir, 39, Nk, hj], [1, "cs", 0, 39, Ka, 1], [or, "cs", y, 38, Nk, 1], [1, "cs", cn, 39, f, uq], [1, "cs", nq, 38, es, ck], [uq, "cs", pn, 37, 6, 1], [1, "cs", 2, 38, lq, 1], [Dj, "cs", Xj, 37, E, 1], [1, "cs", 2, 37, Nk, 1], [ck, "cs", Pn, 37, 10, bq], [1, "cs", Xj, 38, 10, ck], [kr, "cs", Xa, 38, 11, $q], [or, "cs", Go, 38, jr, $r], [1, "cs", 1, 37, 18, 1], [1, "cs", fs, 38, 19, $q], [1, "cs", 2, 37, Dr, 1], [$r, "cs", 2, 37, 16, 1], [kr, "cs", 2, 37, 17, 1], [1, "cs", Ir, 38, en, or], [1, "cs", 2, 37, Pi, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", gj, 37, 21, Zn], [1, "cs", 0, 38, 22, 1], [$q, "cs", 0, 38, 24, y], [1, "cs", 2, 37, 20, 1], [1, "cs", dj, 38, ie, 1], [1, "cs", Pn, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, ck], [1, "cs", 3, 38, 23, or], [1, "cs", 2, 37, 24, uq], [1, "cs", 0, 38, 30, 1], [$q, "cs", fs, 38, 32, $r], [1, "cs", ka, 37, 31, 1], [ck, "cs", hj, 38, 34, 1], [$r, "cs", Zn, 37, 29, 1], [1, "cs", 2, 38, 29, ck], [1, "cs", 2, 37, 30, uq], [1, "cs", Pn, 38, 31, y], [bq, "cs", dj, 37, 32, 1], [kr, "cs", Ui, 38, 33, 1], [1, "cs", yr, 38, 35, $r], [uq, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, I, 1], [Zn, "cs", ks, 36, 11, $r], [1, "cs", 0, 35, 9, bq], [hj, "cs", 2, 36, 9, Zn], [or, "cs", pn, 36, Yq, uq], [Zn, "cs", nq, 35, Xn, uq], [Zn, "cs", hj, 33, 8, 1], [$q, "cs", 3, 34, 9, Zk], [1, "cs", yr, 35, Cr, y], [$r, "cs", Ir, 34, 8, Zn], [hj, "cs", fs, 36, 7, 1], [1, "cs", 1, 34, nj, 1], [1, "cs", 2, 35, 7, $r], [1, "cs", 2, 35, 6, 1], [Zk, "cs", 2, 36, jn, 1], [or, "cs", pn, 68, pq, 1], [$r, "cs", 2, 66, Yq, 1], [1, "cs", R, 66, Zi, Zn], [ck, "cs", 0, 67, 9, $r], [ck, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [Zk, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, dn, Dj], [1, "cs", Ci, 66, Tk, y], [y, "cs", 2, 67, Tk, 1], [1, "cs", 2, 69, I, Zk], [1, "cs", 2, 63, 32, Zn], [1, "cs", cn, 62, 34, 1], [Zn, "cs", 2, 60, 35, $r], [y, "cs", Qq, 59, 35, 1], [1, "cs", 0, 61, 35, ck], [1, "cs", 0, 63, 34, Zn], [1, "cs", 2, 63, 33, 1], [1, "cs", nq, 63, 35, 1], [1, "cs", uj, 62, 35, 1], [ck, "cs", cn, 58, 36, bq], [or, "cs", or, 59, 36, bq], [1, "cs", 1, 62, 36, y], [1, "cs", Pn, 60, 36, or], [$q, "cs", Sa, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [$r, "cs", 3, 63, 36, or], [1, "cs", 3, 61, 36, y], [y, "cs", 0, 42, 36, 1], [bq, "cs", 1, 39, 36, hj], [1, "cs", Xj, 41, 36, y], [$q, "cs", Ia, 39, 35, $r], [1, "cs", Ia, 40, 36, 1], [uq, "cs", Ia, 43, 36, $q], [1, "cs", Dj, 40, 35, kr], [1, "cs", nq, 41, 35, 1], [Dj, "cs", cn, 40, 34, kr], [1, "cs", 2, 39, 34, 1], [1, "cs", cn, 39, 33, Zk], [1, "cs", 2, 39, 32, bq], [1, "cs", fs, 40, 33, $q], [1, "cs", 2, 41, 34, 1], [1, "cs", uq, 44, 36, Zn], [1, "cs", Ia, 43, 35, uq], [1, "cs", cn, 42, 35, Dj], [1, "cs", 0, 37, 34, 1], [bq, "cs", R, 59, 30, 1], [1, "cs", fs, 60, 29, bq], [or, "cs", 2, 60, 28, bq], [1, "cs", wq, 60, 27, y], [1, "cs", 0, 60, 26, hj], [bq, "cs", 2, 54, 25, 1], [uq, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, $r], [1, "cs", 0, 55, 25, 1], [kr, "cs", uj, 59, 26, 1], [1, "cs", Xa, 43, 26, kr], [1, "cs", $r, 42, 27, 1], [Zk, "cs", 2, 42, 28, 1], [1, "cs", pn, 43, 30, $q], [1, "cs", 0, 42, 29, 1], [bq, "cs", 0, 54, 24, 1], [hj, "cs", gj, 48, 24, Zk], [Zk, "cs", nq, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [hj, "cs", dj, 63, 22, Zk], [bq, "cs", dj, 63, 21, hj], [1, "cs", nq, 39, 21, Zk], [kr, "cs", Oj, 57, tj, bq], [kr, "cs", Sa, 56, oa, kr], [1, "cs", R, 51, 21, 1], [1, "cs", ks, 51, Xe, 1], [Zn, "cs", Pn, 51, 19, 1], [or, "cs", wn, 51, 18, kr], [1, "cs", pn, 63, di, 1], [1, "cs", Ir, 63, 10, 1], [Zn, "cs", nq, 56, cj, 1], [1, "cs", wn, 57, cj, Zn], [1, "cs", 1, 45, 18, 1], [or, "cs", Xj, 47, 18, ck], [1, "cs", 2, 46, Ha, $r], [or, "cs", 0, 46, Ek, 1], [or, "cs", 2, 45, Jk, uq], [1, "cs", Ir, 39, 10, hj], [1, "cs", 2, 39, 16, 1], [hj, "cs", 2, 47, 17, 1], [1, "a", hk, 51, 15, 1], [$r, "a", y, 53, Pq, 1], [hj, "a", $r, 49, yo, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [$r, "de", 10, 58, 26, 0], [$r, "de", P, 59, 29, Go], [bq, "de", Tq, 55, 34, Xa], [1, "de", vi, 48, 33, 0], [1, "de", 9, 41, 32, ho], [1, "de", pq, 56, 24, ho], [uq, "de", pq, 62, 16, ho], [1, "de", 9, 45, Dr, ks], [hj, "de", 9, 44, 17, 0], [1, "de", 10, 44, l, Xa], [1, "de", Xn, 58, ao, hk], [1, "de", 10, 63, 31, ka], [kr, "de", 8, 60, 30, 0], [hj, "de", 8, 43, 26, Xa], [kr, "de", vi, 43, 29, 0], [1, "de", 10, 53, 29, 0], [uq, "de", Xn, 53, 24, 0], [Dj, "de", re, 53, 19, 0], [ck, "de", 11, 49, 19, Go], [kr, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, hk], [1, "de", 9, 62, Xn, fs], [1, "de", Zj, 40, 14, 0], [1, "de", 32, 55, 35, 0], [Dj, "de", 32, 60, 33, 0], [bq, "de", 32, 63, 28, Go], [$r, "de", 32, 63, 24, Xa], [Zk, "de", 32, 58, 22, 0], [1, "de", 32, 59, nk, 0], [1, "de", 32, 63, 13, Xa], [kr, "de", 32, 59, 10, hk], [1, "de", 32, 56, 12, 0], [Dj, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, fs], [Zk, "de", 32, 39, ea, 0], [1, "de", 32, 39, 18, 0], [uq, "de", 32, 41, 25, 0], [$r, "de", 32, 39, 30, 0], [Dj, "de", 32, 50, 29, gj], [1, "de", 32, 43, 34, gj], [bq, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [uq, "de", 31, 59, 24, 0], [Dj, "de", 31, 63, 19, Go], [1, "de", 31, 47, rk, 0], [1, "de", 31, 43, 17, ho], [1, "de", 31, 39, 27, hk], [1, "de", 31, 48, 27, Xa], [uq, "de", 31, 57, 27, Go], [1, "de", 32, 44, 27, 0], [1, "d", ho, 12, gs, 1], [ck, "d", 0, 89, ao, bq], [1, "d", 1, 91, 21, or], [1, "d", 1, vi, 22, y], [$r, "f", 2, 89, b, 1], [1, "f", 0, 88, 19, uq], [hj, "g", 1, 85, 22, 1], [1, "s", or, 90, 29, hj], [or, "s", ck, 92, 15, 1], [1, "s", ho, 91, 31, 1], [1, "s", 2, 90, 38, ck], [ck, "s", ka, 91, 42, Zk], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, $r], [uq, "f", Xj, 66, 44, Zk], [1, "f", uj, 55, 49, 1], [1, "f", or, 54, 50, or], [1, "f", pn, 43, 45, 1], [or, "f", Pn, 31, 48, 1], [or, "f", 1, 27, 39, y], [1, "f", 1, 80, 46, 1], [1, "f", hj, 69, 48, 1], [1, "g", hk, 80, 40, bq], [1, "g", Pn, 81, 40, y], [$q, "s", 2, 77, 39, uq], [1, "s", fs, 68, 43, 1], [y, "s", 2, 57, 41, 1], [1, "s", hj, 56, 42, 1], [hj, "s", or, 40, 41, 1], [1, "s", Pn, 48, 48, 1], [or, "f", Xj, 17, 12, hj], [Zn, "f", Xa, 13, 31, 1], [1, "f", ck, _i, 32, bq], [uq, "s", 0, Ln, 27, $r], [$r, "s", 0, l, 39, 1], [Zk, "f", Sa, bi, Lr, 1], [1, "f", 1, 12, b, kr], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", $q, 74, 48, or], [or, "s", or, Fq, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", Go, 46, 72, 1], [uq, "g", hk, 69, 79, $r], [Zn, "g", Go, 72, 74, 1], [1, "g", ks, 26, 88, Zn], [hj, "g", 0, 20, 74, 1], [1, "g", fs, 28, 67, or], [1, "g", ks, 49, 86, Zk], [kr, "g", 0, 77, 90, 1], [Dj, "g", Xa, 87, 72, 1], [1, "g", Xa, D, 85, ck], [1, "g", hj, 85, 97, kr], [or, "g", Dj, 68, 104, $r], [1, "g", 1, 63, 91, Dj], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, or], [Zn, "g", Sa, 77, 60, y], [1, "g", 2, 19, 56, Zk], [$q, "g", pn, 39, 60, 1], [uq, "g", pn, 87, 57, Dj], [bq, "f", Go, 9, 62, 1], [$q, "f", 0, 12, 81, $q], [1, "f", fs, 26, 59, or], [1, "f", 0, 35, 53, 1], [kr, "f", Go, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, hj], [$q, "f", Xa, 84, 85, 1], [uq, "f", 0, 79, 69, 1], [$r, "f", 0, 64, 71, or], [1, "f", ka, 62, 83, 1], [1, "f", ks, 34, 81, Zk], [1, "f", Xa, 39, 71, uq], [1, "f", ka, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", kr, 91, 72, 1], [$q, "f", Zn, 8, 91, 1], [hj, "f", 1, 14, 81, hj], [ck, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, kr], [1, "f", $q, 46, 97, 1], [kr, "f", kr, 43, 73, 1], [Zn, "f", y, 60, 69, 1], [$q, "f", 1, 70, 96, $r], [Zn, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", Zk, 85, 74, 1], [Zk, "s", ka, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [Zk, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, $r], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, Zn], [1, "s", fs, 62, 102, uq], [1, "s", fs, Fa, 95, Zn], [1, "s", 2, 64, 101, 1], [1, "s", cn, 78, 84, ck], [hj, "s", Pn, 49, 83, 1], [$q, "s", 2, 15, 76, or], [1, "s", 2, 21, 84, 1], [bq, "f", 1, 26, 94, or], [$r, "f", 2, 23, 96, kr], [or, "f", Ir, 25, 72, $r], [uq, "f", 2, 85, 77, 1], [y, "f", pn, 79, 95, Zn], [$r, "f", 2, 51, 65, kr], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, b, 68, 1], [1, "s", ks, 55, 76, bq], [1, "s", 0, 74, 59, Zn], [1, "f", 1, 46, 142, $q], [1, "f", $r, 19, 140, 1], [y, "f", bq, 77, 137, 1], [1, "f", Go, 75, 137, 1], [Dj, "f", 0, 55, 138, Zk], [hj, "f", ho, 33, 127, $r], [Zk, "f", 0, 76, 121, 1], [1, "f", ka, 55, 121, Zk], [or, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, $q], [y, "f", 0, 40, 137, bq], [Dj, "f", cn, 76, 142, 1], [$r, "f", uj, 57, 140, 1], [ck, "f", uj, 39, 138, Zn], [$q, "f", 2, 16, 143, or], [ck, "f", 2, 29, 131, 1], [hj, "f", 0, 70, 150, 1], [1, "f", ho, 28, 146, ck], [1, "f", Xa, 12, 132, 1], [or, "f", 0, 90, 129, 1], [1, "f", $q, 87, 131, ck], [$r, "f", hk, 91, 143, 1], [1, "f", uj, 87, 145, ck], [1, "f", $r, 89, 141, 1], [uq, "f", 1, 63, 130, y], [1, "f", Dj, 75, 122, 1], [$q, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", kr, 24, 122, 1], [hj, "f", 0, 83, 108, kr], [hj, "f", ho, 89, 118, kr], [Zk, "f", hk, 56, 107, 1], [bq, "f", 0, 38, 113, ck], [$r, "f", ks, Ao, 110, 1], [1, "f", 1, 80, 105, or], [bq, "f", or, 82, 109, 1], [1, "f", 1, 87, 118, 1], [$r, "f", Dj, 59, 110, 1], [bq, "f", $r, 29, 111, 1], [Zk, "f", cn, 28, 112, 1], [1, "f", cn, 70, 112, hj], [uq, "f", Ir, 42, 111, Zk], [1, "s", ka, 68, 157, 1], [1, "s", Go, 81, 158, 1], [1, "s", 0, 25, 172, ck], [Zn, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", hk, 66, 144, Zn], [uq, "s", ks, 87, 145, 1], [bq, "s", 0, 86, 145, 1], [Zk, "s", 0, 84, 135, 1], [Zn, "s", fs, 69, 133, bq], [$q, "s", 0, 84, 122, uq], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, hj], [$r, "s", ks, 26, 129, kr], [1, "s", 0, Ma, 127, 1], [$r, "s", 0, Dr, 144, 1], [1, "s", 0, 9, 109, 1], [Zn, "s", Go, 35, 101, Zn], [1, "s", 0, 47, 109, bq], [1, "s", 0, 58, 111, 1], [ck, "s", gj, 84, 110, 1], [$r, "s", 0, 28, 114, 1], [1, "s", $r, 30, 116, Zn], [1, "s", 1, 46, 112, 1], [ck, "s", 1, 81, 111, uq], [Zn, "s", 1, 70, 123, kr], [1, "s", Zk, 49, 127, or], [1, "s", hj, 66, 134, bq], [1, "s", ck, 67, 144, $r], [1, "s", uq, 38, 152, kr], [1, "s", 1, 21, 164, $q], [1, "s", 1, 12, 147, 1], [1, "s", kr, 24, 130, 1], [1, "s", 1, 12, 125, Dj], [Zn, "s", 1, 65, 158, 1], [Dj, "s", hj, 83, 167, hj], [1, "s", $r, 65, 167, 1], [$r, "s", 1, 47, 164, uq], [1, "s", 1, 56, 168, Dj], [1, "s", 2, 54, 169, bq], [Dj, "s", 2, 88, 170, 1], [bq, "s", 2, 91, 162, hj], [1, "s", 2, 79, 149, 1], [$r, "s", Xj, 75, 144, Dj], [Dj, "s", 2, 57, 150, 1], [1, "s", Ci, 47, 143, bq], [1, "s", Pn, 31, 145, 1], [$r, "s", uj, 36, 138, 1], [1, "s", 2, 10, 163, Zk], [1, "s", 2, 22, 142, kr], [1, "g", Xj, 78, 132, ck], [1, "g", 1, 48, 135, $r], [Dj, "g", 2, _q, 136, 1], [1, "g", 0, 62, 92, uq], [y, "g", Sa, 70, 80, Zn], [1, "g", 2, sr, 86, or], [1, "g", 2, 47, 75, 1], [y, "g", 2, 36, 89, ck], [1, "g", Xj, 80, 90, 1], [kr, "f", $r, 39, 118, 1], [Zn, "d", 2, 84, 54, 1], [Zk, "d", Ir, di, 54, 1], [1, "de", 7, cj, ee, ks], [1, "de", Vn, Rj, 28, ka], [1, "de", 5, ya, 25, 0], [1, "de", Xk, 34, 41, hk], [ck, "de", 4, 28, 40, Go], [uq, "de", 6, 31, 47, 0], [1, "de", 6, Na, 39, ka], [bq, "de", wk, 16, 47, gj], [Dj, "de", 4, 7, 46, 0], [1, "de", _n, 7, 33, gj], [$q, "de", 6, 40, 42, ka], [1, "de", E, Xe, 48, gj], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, sr, 54, 0], [1, "de", 5, 12, 66, fs], [Dj, "de", 5, 37, 53, fs], [$r, "de", 4, 10, 63, ks], [Dj, "de", 7, 49, 48, Xa], [Dj, "de", 7, 37, 63, Go], [1, "de", dn, 33, 68, hk], [1, "de", iq, 56, 52, fs], [y, "de", 5, 59, 58, 0], [$r, "de", 6, 48, 58, 0], [bq, "de", Ur, 53, 63, hk], [1, "de", 4, 67, 44, 0], [y, "de", 5, 70, 49, ka], [1, "de", 5, 82, 55, gj], [1, "de", 5, 79, 41, ka], [$r, "de", wr, 91, 29, Xa], [or, "de", 7, 91, 43, 0], [1, "de", _n, 85, 44, 0], [kr, "de", 6, 74, 60, 0], [$q, "de", f, 90, Cr, 0], [1, "de", Vn, 91, rk, 0], [uq, "de", Io, 87, 20, 0], [1, "de", 7, 93, si, Xa], [1, "de", 6, 91, 21, 0], [uq, "de", 6, 85, 35, fs], [Dj, "de", 5, 93, 58, hk], [1, "de", 5, 87, 63, 0], [$q, "de", 7, 77, 62, 0], [or, "de", 6, 68, 61, 0], [$q, "de", br, 90, 73, Xa], [1, "de", 4, 87, 71, ka], [or, "de", Zq, 80, 71, 0], [1, "de", 7, 83, 77, 0], [kr, "de", 7, 89, 83, Go], [1, "de", Ik, 71, 80, 0], [uq, "de", Qa, 71, 70, fs], [1, "de", 5, 63, 72, hk], [$q, "de", qa, 54, 75, ka], [1, "de", Yo, 44, 83, Xa], [1, "de", Vn, 42, 74, gj], [1, "de", 5, we, 81, 0], [or, "de", 4, 29, 80, gj], [Dj, "de", T, 37, 90, 0], [y, "de", 4, Ka, 75, Go], [$r, "de", 6, 22, 74, gj], [1, "de", es, 43, 95, Go], [1, "de", 6, 57, 85, ho], [1, "de", pi, 19, 94, 0], [1, "de", 6, Mi, 92, 0], [1, "de", 5, 26, 89, fs], [1, "de", wr, 31, 112, ks], [Dj, "de", Gj, 54, 108, 0], [Dj, "de", wr, 55, 95, gj], [Dj, "de", 5, 35, 104, 0], [1, "de", Yo, 13, 110, hk], [1, "de", 7, 27, 107, ks], [1, "de", 7, 47, 99, 0], [kr, "de", 7, 11, 104, 0], [1, "de", Zq, 9, 111, gj], [1, "de", 7, 40, 114, 0], [Dj, "de", Zq, 28, 117, gj], [1, "de", Do, 47, 113, 0], [1, "de", lo, 63, 104, ks], [1, "de", 4, 64, 92, 0], [bq, "de", es, 86, 97, 0], [or, "de", 5, 76, 91, ks], [kr, "de", Gj, 85, 86, gj], [1, "de", 6, 78, 83, Go], [Zn, "de", 6, 71, 97, 0], [1, "de", wk, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", mi, 86, 109, Go], [1, "de", oo, 86, 118, ka], [kr, "de", 5, 70, 113, hk], [Zk, "de", 6, 69, 121, ka], [1, "de", dn, 76, 122, 0], [1, "de", 7, 87, 130, 0], [Zk, "de", 4, 84, 123, 0], [1, "de", Io, 57, 121, 0], [1, "de", Yo, 53, 125, fs], [1, "de", 5, 62, 131, 0], [uq, "de", es, 67, 143, 0], [Dj, "de", O, 77, 143, Go], [1, "de", Xk, 85, 136, gj], [1, "de", za, 87, 147, fs], [Zk, "de", 6, 92, 140, ho], [bq, "de", 4, 93, 127, ho], [$r, "de", Gj, 93, 106, 0], [or, "de", 5, 45, 144, 0], [ck, "de", T, 41, 139, 0], [$q, "de", 4, 54, 138, Xa], [1, "de", 6, 29, 145, ks], [$r, "de", 6, 29, 132, fs], [bq, "de", 6, 35, 127, ka], [Zn, "de", pi, 64, 142, 0], [1, "de", Yo, 23, 131, 0], [kr, "de", as, 9, 134, 0], [1, "de", za, 11, 121, 0], [1, "de", Io, 26, 121, 0], [or, "de", 35, 58, 150, 0], [$q, "de", 33, 48, 156, Go], [1, "de", 33, 25, 158, Go], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, l, 148, 0], [uq, "de", 34, 21, 142, ks], [Zk, "de", 34, 38, 139, ks], [1, "de", 34, 47, 144, fs], [kr, "de", 34, 68, 142, 0], [kr, "de", 36, 70, 135, 0], [Zk, "de", 36, 64, 132, Go], [ck, "de", 36, 86, 134, 0], [uq, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, Go], [uq, "de", 36, 91, 125, Go], [y, "de", 36, 76, 123, 0], [y, "de", 33, 82, 122, 0], [$q, "de", 35, 56, 122, fs], [Zk, "de", 35, 40, 119, gj], [1, "de", 35, Mo, 112, gj], [hj, "de", 35, 37, 102, 0], [Zk, "de", 33, 18, 97, Xa], [$q, "de", 34, 10, 83, ka], [1, "de", 33, 19, 73, 0], [1, "de", 33, ok, 60, Xa], [1, "de", 35, 24, 60, 0], [y, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, I, 32, 0], [Zn, "de", 33, 9, 24, 0], [ck, "de", 35, 35, 27, Go], [$r, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, ks], [or, "de", 35, 53, 39, hk], [1, "de", 36, 57, 30, ks], [uq, "de", 33, 86, 108, 0], [y, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, gj], [1, "de", 33, 46, 95, ka], [1, "de", 33, 90, 76, gj], [$q, "de", 36, 76, 83, Go], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [Zk, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, ka], [$r, "de", 35, 91, 51, gj], [1, "de", 35, 93, 56, ks], [1, "de", 35, 61, 60, 0], [kr, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, ka], [$q, "de", 34, 92, Ma, gj], [1, "de", 35, 75, 39, Xa], [Dj, "de", 35, 67, 42, Xa], [or, "de", 35, 93, 37, 0], [Zn, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, ho], [1, "de", 33, 49, 50, fs], [1, "de", 33, 44, 75, 0], [or, "de", 33, 46, 85, 0], [Zn, "de", 33, 64, 84, 0], [bq, "de", 33, 56, 94, ho], [Zn, "de", 33, 25, 90, Xa], [1, "de", 33, 31, 69, hk], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [uq, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, ho], [1, "de", 35, 14, 52, 0], [1, "s", Ci, g, 171, hj], [1, "r", 20, 188, 0], [1, "r", 21, 188, Go], [$q, "r", 22, 188, ks], [1, "r", 23, 188, fs], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [uq, "r", 24, 189, ks], [Dj, "r", 23, 189, 0], [ck, "r", 22, 189, 0], [1, "r", 21, 189, ka], [1, "r", 20, 189, 0], [y, "r", Hq, 189, 0], [Dj, "r", 19, 190, 0], [1, "r", h, 191, 0], [1, "r", Rq, 191, 0], [1, "r", 21, 191, gj], [1, "r", 22, 191, ks], [uq, "r", 24, 191, 0], [bq, "r", 23, 191, 0], [1, "r", 25, 191, Xa], [ck, "r", 25, 190, 0], [1, "r", 24, 190, 0], [uq, "r", 23, 190, 0], [1, "r", 22, 190, 0], [Zk, "r", 21, 190, 0], [1, "r", 20, 190, fs], [1, "r", 26, 190, Xa], [1, "r", 26, 191, ka], [uq, "r", 24, 193, hk], [kr, "r", 23, 193, Xa], [1, "r", 22, 193, ks], [1, "r", Fk, 192, 0], [1, "r", 21, 192, fs], [uq, "r", 22, 192, ks], [1, "r", 23, 192, 0], [1, "r", 24, 192, Xa], [Dj, "r", 25, 192, ho], [1, "r", 53, 199, Xa], [1, "r", 52, 200, ho], [or, "r", 54, 199, 0], [1, "r", 55, 199, 0], [$q, "r", 55, 200, gj], [kr, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [Dj, "r", 56, 200, 0], [or, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, Xa], [$q, "r", 54, 203, fs], [$q, "r", 54, 204, 0], [1, "r", 54, 202, fs], [Zn, "r", 53, 202, 0], [1, "r", 52, 202, fs], [$r, "r", 53, 201, 0], [kr, "r", 52, 201, 0], [hj, "r", 51, 201, 0], [$r, "r", 51, 202, 0], [kr, "r", 50, 202, 0], [1, "r", 50, 201, ho], [1, "r", 56, 201, 0], [1, "r", 53, 203, fs], [y, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, hk], [1, "r", 52, 204, ka], [or, "r", 55, 204, 0], [Zn, "r", 56, 203, Go], [y, "r", 56, 244, Go], [or, "r", 54, 246, 0], [1, "r", 50, 248, fs], [ck, "r", 48, 248, 0], [1, "r", 43, 248, gj], [ck, "r", 45, 238, fs], [hj, "r", 44, 238, 0], [bq, "r", 43, 238, ks], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [$r, "r", 49, 238, Go], [1, "r", 50, 238, gj], [1, "r", 51, 238, hk], [1, "r", 52, 238, 0], [$r, "r", 53, 238, Go], [Dj, "r", 54, 239, ka], [1, "r", 53, 240, 0], [1, "r", 53, 239, ka], [1, "r", 52, 239, Go], [$r, "r", 51, 239, 0], [1, "r", 50, 239, Go], [1, "r", 49, 239, ks], [uq, "r", 48, 239, ho], [or, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, ka], [1, "r", 44, 239, 0], [1, "r", 43, 239, Go], [ck, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, ka], [1, "r", 43, 240, gj], [hj, "r", 44, 240, ks], [$q, "r", 45, 240, fs], [Zk, "r", 46, 240, Go], [y, "r", 47, 240, gj], [1, "r", 48, 240, ho], [1, "r", 49, 240, 0], [$q, "r", 50, 240, 0], [uq, "r", 51, 240, gj], [ck, "r", 52, 240, Go], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, hk], [ck, "r", 55, 241, 0], [or, "r", 54, 241, 0], [ck, "r", 53, 241, gj], [$q, "r", 52, 241, Go], [1, "r", 51, 241, 0], [1, "r", 49, 241, hk], [$r, "r", 50, 241, 0], [$r, "r", 48, 241, ka], [$r, "r", 47, 241, gj], [1, "r", 46, 241, ho], [1, "r", 45, 241, 0], [kr, "r", 44, 241, 0], [1, "r", 43, 241, ks], [1, "r", 42, 241, 0], [1, "r", 41, 241, Xa], [y, "r", 40, 242, hk], [$q, "r", 41, 242, ks], [1, "r", 42, 242, fs], [1, "r", 43, 242, Xa], [Dj, "r", 44, 242, ho], [1, "r", 45, 242, ks], [1, "r", 46, 242, 0], [ck, "r", 47, 242, 0], [1, "r", 48, 242, ho], [Dj, "r", 49, 242, hk], [Zn, "r", 50, 242, 0], [Zk, "r", 51, 242, 0], [uq, "r", 52, 242, 0], [1, "r", 53, 242, fs], [bq, "r", 54, 242, 0], [1, "r", 55, 242, 0], [bq, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [kr, "r", 53, 243, 0], [$r, "r", 52, 243, 0], [uq, "r", 51, 243, 0], [1, "r", 50, 243, fs], [1, "r", 49, 243, 0], [$q, "r", 48, 243, Xa], [Dj, "r", 47, 243, ho], [1, "r", 46, 243, 0], [1, "r", 45, 243, hk], [1, "r", 44, 243, gj], [or, "r", 43, 243, fs], [$r, "r", 42, 243, hk], [1, "r", 41, 243, fs], [1, "r", 40, 243, ka], [kr, "r", 40, 244, 0], [1, "r", 41, 244, ho], [kr, "r", 43, 244, gj], [bq, "r", 44, 244, 0], [1, "r", 45, 244, fs], [1, "r", 46, 244, 0], [1, "r", 47, 244, fs], [1, "r", 48, 244, 0], [y, "r", 49, 244, gj], [1, "r", 50, 244, fs], [bq, "r", 51, 244, Go], [$r, "r", 52, 244, hk], [1, "r", 53, 244, Go], [y, "r", 54, 244, ka], [1, "r", 55, 244, ks], [1, "r", 42, 244, hk], [ck, "r", 40, 245, hk], [1, "r", 41, 245, 0], [1, "r", 42, 245, gj], [1, "r", 43, 245, 0], [1, "r", 44, 245, ka], [Zn, "r", 45, 245, 0], [or, "r", 46, 245, 0], [1, "r", 47, 245, 0], [uq, "r", 48, 245, 0], [1, "r", 49, 245, fs], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [Dj, "r", 52, 246, 0], [1, "r", 52, 245, Go], [ck, "r", 53, 245, 0], [ck, "r", 54, 245, ho], [1, "r", 55, 245, 0], [1, "r", 53, 246, Go], [1, "r", 51, 246, hk], [1, "r", 50, 246, ka], [uq, "r", 49, 246, 0], [1, "r", 48, 246, hk], [or, "r", 47, 246, hk], [1, "r", 45, 246, 0], [1, "r", 46, 246, ka], [Zk, "r", 44, 246, 0], [$q, "r", 43, 246, 0], [$r, "r", 42, 246, Xa], [hj, "r", 41, 246, fs], [1, "r", 42, 247, fs], [Zk, "r", 43, 247, Go], [1, "r", 44, 247, 0], [1, "r", 45, 247, Go], [1, "r", 46, 247, ks], [1, "r", 47, 247, ks], [1, "r", 48, 247, ka], [1, "r", 50, 247, ho], [1, "r", 51, 247, fs], [Zn, "r", 52, 247, ho], [1, "r", 53, 247, Go], [1, "r", 54, 247, 0], [uq, "r", 49, 247, gj], [1, "r", 49, 248, gj], [uq, "r", 47, 248, gj], [hj, "r", 46, 248, fs], [$q, "r", 45, 248, gj], [1, "r", 51, 248, fs], [1, "r", 55, 246, 1], [y, "r", 55, 247, or], [1, "r", 56, 247, 1], [Zn, "r", 56, 248, y], [kr, "r", 95, 270, 1], [uq, "r", 93, 270, $r], [1, "r", 94, 270, $q], [1, "r", 95, 271, uq], [1, "r", 94, 271, Zn], [or, "r", 93, 271, hj], [1, "r", 94, 282, 1], [1, "r", 93, 282, ck], [bq, "r", 93, 281, Dj], [1, "r", 92, 281, Zn], [1, "r", 92, 280, hj], [1, "r", 91, 280, 1], [1, "r", 90, 279, Zk], [1, "r", 95, 275, Dj], [uq, "r", 95, 274, 1], [1, "r", 95, 273, ck], [1, "r", 95, 272, 1], [1, "r", 94, 274, Zk], [$r, "r", 94, 273, 1], [Dj, "r", 94, 272, or], [1, "r", 93, 272, kr], [1, "r", 93, 273, 1], [Zn, "r", 93, 274, $r], [1, "r", 92, 273, y], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [$q, "r", 92, 269, 1], [$r, "r", 90, 269, 1], [y, "r", 91, 269, 1], [1, "r", 91, 271, hj], [1, "r", 91, 270, Dj], [1, "r", 95, 278, 1], [bq, "r", 95, 277, hj], [$q, "r", 95, 276, 1], [1, "r", 94, 276, $r], [1, "r", 94, 275, 1], [1, "r", 93, 275, ck], [1, "r", 92, 274, 1], [1, "r", 92, 275, $q], [$r, "r", 91, 275, 1], [or, "r", 90, 275, 1], [$q, "r", 89, 274, Dj], [1, "r", 90, 274, $r], [$r, "r", 89, 275, 1], [1, "r", 88, 274, ck], [1, "r", 88, 273, Zn], [or, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, Zn], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [Zk, "r", 54, 248, ck], [1, "r", 56, 249, Dj], [ck, "r", 55, 249, $r], [1, "r", 55, 250, Zk], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, y], [1, "r", 59, 250, 1], [1, "r", 58, 250, y], [kr, "r", 60, 250, Zk], [1, "r", 61, 251, Dj], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [ck, "r", 62, 252, $r], [1, "r", 63, 252, 1], [hj, "r", 58, 251, hj], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [uq, "r", 58, 252, ck], [kr, "r", 57, 252, 1], [1, "r", 57, 253, uq], [Dj, "r", 58, 253, 1], [uq, "r", 58, 254, Dj], [1, "r", 59, Rk, Zn], [uq, "r", 58, on, $r], [or, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, Dj], [ck, "r", 60, xr, hj], [1, "r", 61, 255, Zk], [$r, "r", 61, d, 1], [1, "r", 60, 256, or], [1, "r", 62, 256, y], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, or], [1, "r", 64, 254, Zk], [uq, "r", 65, 254, uq], [1, "r", 61, 250, 1], [1, "r", 64, 252, $r], [1, "r", 65, 253, 1], [ck, "r", 66, 254, Dj], [Dj, "r", 65, Wq, 1], [1, "r", 64, po, y], [y, "r", 64, 256, 1], [hj, "r", 65, kk, 1], [y, "r", 65, 257, hj], [uq, "r", 64, 257, bq], [bq, "r", 63, 257, 1], [kr, "r", 62, 258, Dj], [1, "r", 63, 258, 1], [1, "r", 64, 258, or], [hj, "r", 66, Ne, ck], [1, "r", 66, 256, Zn], [1, "r", 66, 257, 1], [1, "r", 66, 258, $q], [$r, "r", 65, 258, 1], [1, "r", 67, 258, $r], [$q, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [$r, "r", 65, 259, 1], [1, "r", 56, 246, 1], [$q, "r", 56, 245, 1], [1, "r", 68, 258, Dj], [Zn, "r", 68, 259, bq], [ck, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, hj], [Dj, "r", 71, 261, 1], [$r, "r", 67, 260, 1], [bq, "r", 89, 269, uq], [1, "r", 89, 268, 1], [uq, "r", 90, 268, or], [$r, "r", 82, 267, 1], [or, "r", 83, 267, bq], [kr, "r", 80, 266, 1], [y, "r", 81, 266, hj], [uq, "r", 81, 267, 1], [hj, "r", 79, 266, $r], [1, "r", 78, 265, 1], [1, "r", 77, 265, Zk], [$r, "r", 76, 264, 1], [1, "r", 75, 264, kr], [ck, "r", 75, 263, Dj], [1, "r", 74, 263, 1], [or, "r", 74, 262, y], [1, "r", 72, 262, 1], [1, "r", 73, 262, hj], [1, "r", 71, 262, 1], [hj, "r", 85, 270, 1], [uq, "r", 84, 270, Zk], [1, "r", 84, 269, bq], [1, "r", 83, 269, hj], [1, "r", 82, 269, kr], [$q, "r", 81, 269, bq], [1, "r", 81, 268, or], [Zk, "r", 82, 268, y], [1, "r", 83, 268, ck], [hj, "r", 80, 268, 1], [1, "r", 80, 267, hj], [1, "r", 79, 267, 1], [uq, "r", 78, 266, 1], [or, "r", 76, 265, 1], [$q, "r", 75, 262, Zn], [hj, "r", 90, 280, $r], [kr, "r", 89, 280, Zk], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [$q, "r", 88, 278, 1], [1, "r", 87, 277, $q], [1, "r", 86, 276, bq], [1, "r", 86, 275, 1], [or, "r", 86, 274, or], [ck, "r", 86, 273, Dj], [ck, "r", 85, 273, 1], [1, "r", 85, 272, 1], [Dj, "r", 85, 274, 1], [Zk, "r", 86, 277, 1], [$r, "r", 87, 278, kr], [Zn, "r", 84, 271, 1], [uq, "r", 83, 270, $q], [$q, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, $q], [1, "r", 91, 281, 1], [hj, "r", 92, 282, 1], [kr, "r", 88, 280, 1], [kr, "r", 87, 279, 1], [hj, "r", 85, 275, 1], [Zk, "r", 84, 273, 1], [1, "r", 84, 272, y], [bq, "r", 83, 271, 1], [y, "r", 82, 270, 1], [1, "r", 84, 267, ks], [1, "r", 85, 267, Xa], [1, "r", 76, 262, 0], [1, "r", 77, 262, ka], [hj, "r", 88, 268, 0], [1, "r", 78, 262, 0], [uq, "r", 79, 262, hk], [1, "r", 80, 262, ka], [1, "r", 80, 263, Xa], [kr, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, fs], [1, "r", 88, 262, ho], [1, "r", 89, 262, 0], [1, "r", 90, 262, Go], [Zn, "r", 87, 262, 0], [1, "r", 86, 262, Xa], [1, "r", 86, 263, 0], [1, "r", 87, 263, Go], [1, "r", 91, 262, Xa], [$q, "r", 95, 262, fs], [y, "r", 94, 262, ks], [uq, "r", 86, 267, Xa], [1, "r", 87, 267, gj], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [or, "r", 74, 189, 0], [$q, "r", 75, 189, fs], [1, "r", 76, 189, 0], [1, "r", 77, 189, Xa], [1, "r", 78, 190, 0], [bq, "r", 77, 190, 0], [$r, "r", 75, 190, 0], [1, "r", 76, 190, ka], [hj, "r", 74, 190, ho], [1, "r", 73, 190, 0], [bq, "r", 78, 191, ka], [$q, "r", 76, 191, ks], [1, "r", 77, 191, ka], [or, "r", 75, 191, ka], [$q, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, ho], [Dj, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, Xa], [kr, "r", 73, 191, 0], [1, "f", $r, 96, 22, uq], [Zn, "s", $q, 97, 22, $r], [$r, "f", 1, 98, 22, 1], [1, "s", Go, 99, 22, ck], [1, "s", ck, 100, 21, Zn], [kr, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, ck], [Zk, "s", Xa, 99, 49, Zk], [1, "s", ho, 97, 49, 1], [$r, "f", 1, 98, 49, 1], [$r, "r", 70, 218, 0], [$r, "r", 71, 218, 0], [1, "r", 72, 218, hk], [bq, "r", 73, 218, hk], [or, "r", 74, 219, 0], [ck, "r", 73, 219, 0], [kr, "r", 72, 219, 0], [Zn, "r", 71, 219, ks], [bq, "r", 70, 219, Xa], [Dj, "r", 73, 220, ho], [Zk, "r", 72, 220, ka], [ck, "r", 71, 220, gj], [1, "r", 72, 221, fs], [y, "r", 71, 221, ka], [1, "r", 70, 221, ka], [1, "r", 69, 221, 0], [or, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, hk], [1, "r", 69, 219, Go], [y, "r", 68, 220, 0], [1, "r", 73, 221, hk], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [uq, "r", 72, 222, 0], [1, "r", 74, 221, 0], [$q, "r", 74, 220, 0], [1, "r", 75, 220, ks], [1, "r", 75, 221, 0], [Zn, "r", 70, 222, Xa], [1, "r", 69, 222, hk], [$q, "r", 29, 217, 0], [y, "r", 30, 217, gj], [y, "r", 31, 217, 0], [hj, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, ho], [1, "r", 29, 219, 0], [1, "r", 27, 219, gj], [kr, "r", 25, 219, gj], [1, "r", 26, 219, Xa], [1, "r", 28, 219, 0], [uq, "r", 26, 218, 0], [$q, "r", 27, 218, 0], [$r, "r", 28, 218, fs], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, gj], [Zn, "r", 26, 217, ka], [1, "r", 27, 217, 0], [$r, "r", 28, 216, hk], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [bq, "r", 32, 218, ks], [hj, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, ks], [ck, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, fs], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [hj, "r", 25, 218, 0], [bq, "r", 27, 221, hk], [1, "r", 28, 221, 0], [1, "r", 29, 221, hk], [1, "r", 30, 221, gj], [1, "r", 32, 220, gj], [ck, "r", 32, 219, 0], [Dj, "r", 33, 218, gj], [1, "r", 33, 219, 0], [Zn, "r", 75, 238, hk], [or, "r", 76, 238, 0], [ck, "r", 77, 239, ks], [1, "r", 76, 239, Go], [uq, "r", 75, 239, fs], [uq, "r", 74, 239, 0], [y, "r", 76, 240, 0], [Zk, "r", 77, 240, 0], [1, "r", 78, 240, 0], [Zn, "r", 77, 241, gj], [1, "r", 76, 241, ka], [or, "r", 75, 241, Go], [ck, "r", 75, 240, 0], [$q, "r", 74, 240, 0], [Zk, "r", 78, 239, 0], [uq, "r", 77, 238, gj], [$q, "r", tj, 253, Go], [kr, "r", 19, 252, Go], [$q, "r", u, 252, 0], [1, "r", 21, 253, Xa], [1, "r", 23, 254, 0], [Dj, "r", Xe, 254, gj], [1, "r", 19, 254, ka], [1, "r", 22, 254, 0], [1, "r", 18, 254, ka], [or, "r", Br, 253, hk], [1, "r", Rq, 253, 0], [ck, "r", 21, 254, ho], [1, "r", 22, 253, hk], [1, "r", 21, Ne, 0], [ck, "r", Fq, Ne, ka], [1, "r", 19, 255, Xa], [1, "r", Mk, on, ho], [ck, "r", 17, Ne, 0], [$r, "r", 17, 254, 0], [y, "r", 22, on, gj], [ck, "r", 19, 256, gj], [hj, "r", 20, 256, 0], [hj, "r", 21, 256, 0], [1, "r", 39, 270, Go], [Dj, "r", 40, 270, 0], [kr, "r", 41, 270, 0], [bq, "r", 43, 270, ks], [1, "r", 44, 270, 0], [1, "r", 46, 270, ks], [1, "r", 42, 270, Xa], [Dj, "r", 45, 270, 0], [Zn, "r", 44, 269, ka], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [hj, "r", 41, 269, hk], [ck, "r", 45, 271, 0], [Zn, "r", 44, 271, 0], [1, "r", 43, 271, 0], [y, "r", 42, 271, 0], [1, "r", 41, 271, Xa], [kr, "r", 40, 271, 0], [or, "r", 39, 271, 0], [kr, "r", 46, 271, ks], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, fs], [$r, "r", 42, 272, 0], [hj, "r", 19, 284, ka], [y, "r", 20, 284, 0], [1, "r", 21, 285, ho], [hj, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, ho], [Zn, "r", 20, 288, ks], [hj, "r", vo, 288, fs], [Zn, "r", 17, 287, Go], [kr, "r", Oa, 287, 0], [1, "r", la, 286, 0], [bq, "r", 17, 286, ks], [1, "r", 18, 286, ka], [$r, "r", 19, 286, 0], [1, "r", 20, 286, gj], [1, "r", 21, 286, fs], [ck, "r", 22, 286, 0], [kr, "r", aq, 285, ho], [1, "r", oq, 285, ka], [$q, "r", 18, 285, 0], [1, "r", 17, 285, gj], [1, "r", Br, 287, fs], [hj, "r", oa, 287, 0], [1, "r", u, 287, 0], [or, "r", 21, 287, ks], [or, "r", 22, 287, 0], [ck, "r", 23, 287, ho], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [$r, "r", Lk, 288, Xa], [kr, "r", 19, 289, hk], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [Zk, "r", 20, 289, gj], [or, "r", 23, 288, Xa], [1, "r", 24, 287, fs], [1, "r", 24, 286, 0], [$r, "r", 23, 285, 0], [1, "r", 66, 286, hk], [ck, "r", 64, 287, hk], [1, "r", 63, 287, ho], [ck, "r", 60, 287, 0], [Zk, "r", 59, 285, 0], [1, "r", 58, 284, hk], [uq, "r", 59, 283, hk], [1, "r", 65, 283, 0], [Dj, "r", 64, 283, ka], [Zk, "r", 63, 283, 0], [$r, "r", 62, 283, Go], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [ck, "r", 59, 284, Xa], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [Zn, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, Xa], [1, "r", 63, 286, 0], [or, "r", 64, 286, ks], [ck, "r", 65, 286, fs], [1, "r", 67, 285, ho], [1, "r", 66, 285, hk], [1, "r", 65, 285, 0], [1, "r", 64, 285, fs], [1, "r", 63, 285, 0], [y, "r", 62, 285, 0], [1, "r", 61, 285, 0], [uq, "r", 60, 285, ks], [hj, "r", 60, 284, 0], [Zk, "r", 61, 284, 0], [$r, "r", 62, 284, 0], [$q, "r", 63, 284, 0], [or, "r", 64, 284, ho], [hj, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [Dj, "r", 67, 286, gj], [1, "p", ka, 13, 189, y], [1, "p", 0, 32, 184, 1], [or, "p", Xa, 47, 191, $r], [uq, "p", 0, 64, 184, 1], [or, "p", hk, 84, 192, 1], [hj, "p", 0, 78, 207, 1], [1, "p", Xa, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, Zn], [y, "p", 0, 14, 230, ck], [Zn, "p", 0, 29, 237, $r], [Zn, "p", fs, 50, 230, bq], [or, "p", 0, 78, 241, ck], [y, "p", fs, 74, 256, or], [1, "p", 0, 68, 266, or], [uq, "p", hk, 48, 259, 1], [1, "p", ks, 31, 263, Dj], [1, "p", ho, 18, 274, 1], [1, "p", ho, 33, 283, 1], [$r, "p", ho, 66, 287, 1], [1, "p", 0, 82, 291, 1], [hj, "p", 0, Oa, 295, bq], [hj, "p", fs, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", gj, 79, 227, Zn], [1, "p", ka, 32, 200, ck], [$r, "p", 0, 64, 200, ck], [1, "s", 0, 21, 193, or], [Zk, "s", bq, 18, 189, 1], [1, "s", Pn, 26, 189, 1], [1, "b", 1, we, 181, 0], [1, "b", nq, Mk, 190, ka], [kr, "b", dj, 29, 193, ks], [1, "t", Ia, _q, 182, gj], [$r, "t", 3, ao, 195, 0], [Zk, "t", 4, di, 183, 0], [1, "t", Vn, ek, 184, Xa], [1, "t", 5, 23, 182, ka], [Zn, "t", qa, 30, 187, 0], [1, "t", y, 26, 192, Go], [hj, "b", $q, 25, 188, 0], [Zk, "s", uq, 24, 181, 1], [1, "t", 3, 33, 183, hk], [Zn, "b", 1, 36, 189, hk], [bq, "t", pn, 35, 190, 0], [Dj, "b", Oj, Hk, 200, 0], [y, "s", ks, 28, 194, 1], [1, "s", Zn, 32, 196, $r], [kr, "s", $r, 36, 183, Zn], [1, "s", Ir, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [uq, "s", Zk, 15, 199, $q], [$q, "b", 0, Rn, 202, Go], [1, "t", 2, 13, 203, 0], [Dj, "t", T, 20, 200, ho], [Zk, "t", 4, pj, 194, 0], [ck, "t", wr, 15, 205, 0], [y, "t", wr, 29, 200, ka], [1, "t", yr, 28, 201, ks], [1, "s", 2, 25, 199, hj], [uq, "s", 1, 22, 204, hj], [1, "g", 2, 25, 205, kr], [1, "b", hj, 27, 216, 0], [hj, "s", y, 25, 217, 1], [1, "s", bq, 33, 217, 1], [bq, "s", 2, 35, 215, 1], [1, "s", Go, 32, 221, ck], [1, "t", 2, 31, 222, 0], [1, "t", Ik, 26, 221, 0], [1, "b", Qq, 27, 222, ks], [hj, "b", 0, 17, 217, 0], [kr, "t", 3, 18, 216, 0], [y, "t", 4, gs, 215, 0], [$r, "t", as, 30, 213, Go], [hj, "t", br, 24, 208, fs], [or, "s", or, 12, 216, 1], [$r, "s", 2, _k, 210, 1], [1, "s", 2, 34, 223, or], [ck, "b", 2, 36, 218, hk], [1, "t", 4, 40, 206, 0], [y, "t", 5, 35, 203, 0], [1, "t", Oj, 39, 206, 0], [1, "b", 1, 34, 204, 0], [kr, "s", 1, 33, 206, Dj], [ck, "s", 1, 42, 203, 1], [Dj, "s", hk, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", mi, 39, 197, 0], [1, "t", 5, 44, 187, 0], [Zk, "b", Dj, 46, 181, 0], [1, "t", Pn, 47, 182, fs], [1, "b", 0, 57, 182, hk], [or, "b", Ui, 56, 183, 0], [hj, "t", T, 55, 184, 0], [1, "t", as, 62, 195, fs], [1, "s", 1, 51, 185, hj], [Zk, "s", Xj, 62, 180, 1], [ck, "s", cn, 61, 188, 1], [1, "s", uq, 61, 189, hj], [1, "s", cn, 48, 195, 1], [$q, "b", $q, 51, 199, 0], [1, "t", cn, 52, 199, 0], [Dj, "t", 3, 56, 204, Go], [Zn, "t", 4, 57, 204, 0], [$r, "t", 4, 51, 204, ho], [1, "s", bq, 52, 205, 1], [1, "s", Ci, 57, 200, 1], [kr, "s", 1, 56, 199, ck], [1, "b", 0, 55, 192, hk], [uq, "t", 3, 56, 193, 0], [1, "t", Ur, 50, 190, ka], [1, "b", 1, 76, 188, gj], [Zn, "t", dj, 75, 188, hk], [$q, "t", 2, 73, 192, fs], [1, "t", 4, 72, 191, 0], [Zk, "t", 5, 78, 193, ka], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, y], [$r, "s", bq, 74, 194, 1], [1, "s", $r, 72, 187, or], [1, "s", hk, 74, 183, Dj], [or, "s", $r, 75, 183, 1], [Dj, "t", Xj, 69, 181, Xa], [or, "t", 4, 70, 182, 0], [1, "t", Lj, 69, 180, ka], [1, "b", 1, 65, 189, ka], [kr, "b", cn, 66, 189, 0], [y, "t", 3, 64, 188, 0], [Zn, "t", Ik, 67, 192, 0], [1, "b", Ir, 85, 183, 0], [$q, "t", kr, 84, 184, Go], [1, "t", Io, 81, 180, 0], [1, "t", 5, 89, 180, Xa], [bq, "t", ka, 90, 188, gj], [1, "t", 3, 89, 190, 0], [kr, "s", hj, 87, 187, y], [1, "s", Ci, 87, 197, 1], [1, "b", ck, 84, 200, 0], [uq, "t", 2, 83, 201, 0], [uq, "t", mi, 87, 207, 0], [bq, "s", Sa, 79, 202, $q], [1, "s", 1, 80, 203, 1], [1, "t", fs, 71, 200, 0], [1, "b", 2, 72, 201, hk], [$q, "t", 2, 65, 205, hk], [1, "t", or, 66, 206, 0], [1, "t", Yr, 63, 209, hk], [ck, "t", 5, 73, 203, gj], [ck, "s", 0, 70, 207, 1], [1, "s", or, 71, 206, kr], [1, "s", uj, 68, 199, $q], [1, "s", uq, 64, 213, 1], [1, "t", ks, 85, 213, fs], [uq, "b", nq, 84, 212, ho], [1, "t", wq, 77, 209, 0], [1, "t", 4, 83, 216, fs], [1, "t", 4, 73, 209, ho], [1, "b", ho, 86, 222, 0], [Dj, "b", wq, 87, 221, ho], [Zk, "s", $q, 80, 214, or], [1, "s", 2, 87, 216, 1], [Zk, "s", 2, 84, 224, uq], [1, "s", 1, 77, 227, 1], [1, "t", Zk, 74, 222, 0], [1, "b", 1, 69, 218, hk], [1, "b", Xj, 75, 219, 0], [bq, "s", Ir, 74, 218, 1], [1, "s", 1, 69, 223, hj], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [uq, "t", 2, 84, 233, 0], [Zn, "t", 2, 78, 238, 0], [ck, "b", Zn, 77, 237, 0], [Zn, "t", O, 87, 236, 0], [or, "t", Vn, 76, 229, gj], [1, "b", 2, 74, 241, ho], [y, "s", ka, 73, 242, 1], [Zk, "s", ho, 81, 238, 1], [Zn, "s", 1, 82, 237, 1], [1, "s", uj, 72, 237, or], [1, "s", uj, 78, 242, hj], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [$q, "t", 4, 67, 231, 0], [1, "t", T, 62, 228, 0], [or, "t", Lj, 64, 233, Go], [1, "t", 2, 65, 234, 0], [hj, "t", uj, 51, 220, 0], [ck, "t", 1, 50, 218, 0], [Zk, "b", ck, 45, 223, fs], [1, "b", Ir, 46, 224, Xa], [$q, "t", Qa, 49, 218, gj], [1, "t", qa, 47, 225, fs], [1, "s", $q, 50, 215, ck], [1, "s", 2, 51, 213, ck], [ck, "s", uj, 42, 227, ck], [1, "s", Dj, 44, 227, y], [Zk, "s", ck, 60, 230, 1], [1, "s", Ci, 59, 231, Dj], [ck, "b", uq, 85, 252, ks], [bq, "t", pn, 84, 251, 0], [1, "t", Sa, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", Xa, 83, 246, 0], [uq, "t", 3, 82, 247, Xa], [1, "t", T, 81, 259, ka], [ck, "t", Qa, 69, 249, gj], [y, "t", Ba, 87, 246, 0], [Zn, "t", 5, 75, 252, ka], [1, "s", 1, 79, 257, 1], [1, "s", Pn, 78, 249, hj], [Zk, "s", uj, 80, 258, 1], [bq, "s", 1, 88, 254, 1], [y, "s", $r, 85, 264, 1], [1, "s", Pn, 89, 263, hj], [1, "s", cn, 87, 269, 1], [uq, "s", 0, 84, 268, 1], [1, "s", Pn, 76, 267, 1], [Zk, "s", $r, 66, 261, uq], [1, "s", 1, 87, 274, $r], [1, "s", 1, 76, 263, Zk], [bq, "s", 1, 59, 251, Dj], [bq, "s", ka, 59, 252, 1], [1, "t", 2, 86, 265, Go], [1, "t", 0, 78, 270, gj], [kr, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", Qq, 78, 261, 0], [hj, "b", Dj, 71, 264, 0], [1, "b", ck, 88, 269, Go], [1, "t", Vn, 84, 264, fs], [1, "t", 5, 79, 261, fs], [1, "t", 5, 72, 265, Go], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [or, "t", 2, 86, 260, 0], [1, "t", Ik, 84, Qn, 0], [Zn, "t", wk, 68, on, gj], [1, "t", y, 67, 254, 0], [1, "t", Sa, 65, 262, 0], [Zk, "t", 1, 57, 260, 0], [ck, "t", 2, 58, 259, ka], [1, "b", 1, 63, 256, 0], [$r, "b", uq, 52, 248, fs], [1, "t", pn, 53, 248, Xa], [1, "s", kr, 50, 253, hj], [Dj, "s", cn, 67, 263, 1], [y, "s", pn, 52, 252, 1], [hj, "s", pn, 71, 244, Zn], [$q, "b", ho, 57, 245, 0], [Dj, "t", Xj, 58, 244, 0], [$r, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [bq, "t", 2, 41, 238, 0], [1, "t", uq, 42, 237, Xa], [$q, "t", zq, 57, 235, hk], [Zn, "t", 5, 60, 246, gj], [1, "t", 5, 50, 252, gj], [kr, "t", 1, 42, 248, ho], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [y, "s", 0, 50, 236, Zk], [1, "s", 2, 39, 247, uq], [bq, "s", Pn, 51, 235, Dj], [Zn, "s", 2, 60, 243, uq], [Zk, "s", 2, 36, 240, kr], [kr, "s", Sa, 43, 254, uq], [1, "s", uq, 42, 254, kr], [Zn, "t", $q, 38, 233, Go], [1, "t", 2, 35, 235, 0], [1, "t", Yr, 33, 228, Go], [Dj, "t", 4, 33, 245, 0], [kr, "t", Ik, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, Aa, 227, gj], [bq, "b", 1, yo, 240, ho], [hj, "t", 3, 21, 227, hk], [1, "t", Oj, 27, 234, fs], [$q, "t", yr, Ln, 241, 0], [uq, "t", 3, Hn, 229, ka], [y, "t", Ur, 17, 224, ks], [1, "t", T, q, 231, 0], [1, "t", 4, 22, 238, Go], [ck, "t", T, Co, 239, ks], [or, "t", 1, 22, 243, 0], [1, "b", nq, 23, 242, 0], [bq, "s", hj, 23, 238, uq], [$r, "s", 1, 22, 228, 1], [y, "s", 2, 24, 228, Dj], [Zn, "s", cn, 21, 236, hj], [1, "s", Xa, cj, 228, 1], [1, "s", ks, Ao, 242, 1], [1, "s", 1, wo, 244, uq], [$q, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, Go], [1, "t", y, 22, d, gj], [bq, "t", 2, 23, co, 0], [1, "b", Dj, 17, 256, 0], [1, "b", Ci, 18, 256, 0], [y, "s", Go, 21, 252, y], [1, "s", 2, ie, 250, 1], [or, "s", 2, 23, 259, kr], [$r, "s", y, 13, 257, 1], [hj, "t", 1, 31, 254, gj], [1, "t", 2, 32, 254, ka], [1, "t", Ik, 28, 254, fs], [$r, "t", qa, 34, 258, gj], [1, "t", Go, 29, 260, ho], [1, "b", Ir, 30, 261, fs], [1, "t", 0, 43, 262, fs], [1, "t", Pn, 42, 263, 0], [$r, "t", qa, 46, 264, 0], [1, "b", 1, 39, 265, gj], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [$r, "t", 4, 62, 270, Go], [kr, "t", Yo, 52, 273, ho], [Dj, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", Ci, 42, 268, Xa], [or, "t", 0, 43, 268, Xa], [1, "b", 1, 46, 272, ho], [bq, "b", bq, 14, 265, 0], [kr, "t", 2, 15, 266, fs], [uq, "t", 4, Pi, 264, 0], [Zk, "t", mi, 29, 263, Xa], [1, "t", oo, si, 269, 0], [or, "t", ck, 29, 271, 0], [1, "b", Sa, 28, 272, hk], [1, "t", Pn, 24, 267, fs], [$r, "t", Xj, aq, 279, 0], [1, "t", 0, Pa, 278, 0], [1, "t", R, l, 278, gj], [1, "b", 0, 21, 284, Xa], [1, "b", fs, vo, 289, Xa], [Zk, "t", nq, u, 283, 0], [ck, "t", 2, Bi, 290, 0], [1, "t", 4, 19, 283, ho], [1, "t", Ik, Xe, 290, hk], [hj, "s", 1, 16, 285, hj], [$r, "s", hj, 24, 288, 1], [1, "s", 2, 26, 287, Zn], [$q, "s", Xj, 16, 278, 1], [1, "s", or, 21, 268, 1], [Zn, "s", 2, 19, 268, Zn], [bq, "t", ka, Gq, 294, ho], [1, "b", hj, sk, 295, 0], [Zk, "t", 3, 13, 291, 0], [Zk, "t", Ui, Yq, 299, 0], [y, "t", mi, P, 287, 0], [1, "t", Ur, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, fs], [1, "t", Oj, 33, 297, 0], [$q, "b", 1, 48, 278, gj], [$r, "b", 0, 46, 280, ks], [1, "b", Xj, 50, 280, 0], [$r, "t", 0, 44, 282, 0], [$q, "b", 1, 49, 283, Xa], [Zk, "b", 0, 51, 278, ks], [Zk, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, hk], [1, "b", Sa, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, Go], [or, "b", Pn, 46, 286, 0], [Zn, "b", bq, 42, 285, ka], [1, "b", 3, 41, 286, gj], [1, "t", br, 42, 287, ka], [1, "b", 1, 42, 278, 0], [1, "b", uj, 43, 279, 0], [1, "b", hk, 40, 280, 0], [Dj, "t", wk, 39, 283, ka], [1, "t", 4, 39, 279, fs], [Zn, "t", 5, 43, 277, hk], [$q, "t", wr, 47, 287, Xa], [1, "t", mi, 46, 277, Xa], [1, "t", mi, 45, 290, ka], [$r, "t", 4, 36, 285, 0], [1, "t", Ui, 35, 284, 0], [$q, "t", 3, 36, 272, 0], [y, "t", 4, 35, 271, 0], [1, "t", $r, 29, 279, fs], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [ck, "b", 2, 28, 280, fs], [1, "t", 4, 29, 286, 0], [bq, "t", Gj, 28, 275, ho], [Dj, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, gj], [uq, "b", 0, 34, 298, hk], [kr, "t", 4, 31, 292, hk], [1, "t", Ur, 46, 295, hk], [Zn, "t", va, 59, 287, Go], [1, "b", 1, 58, 286, 0], [or, "s", kr, 68, 284, uq], [1, "s", dj, 70, 286, bq], [hj, "s", 0, 67, 284, kr], [1, "t", 3, 66, 283, gj], [1, "t", Zk, 65, 282, 0], [ck, "b", $q, 64, 288, 0], [or, "t", 3, 60, 293, 0], [$q, "t", 1, 61, 294, 0], [$r, "b", 1, 76, 294, 0], [Zn, "t", Xk, 75, 295, Go], [bq, "t", Xk, 56, 293, 0], [1, "t", zq, 59, 281, 0], [1, "t", br, 67, 291, hk], [1, "b", ka, 88, 293, hk], [1, "t", Ci, 89, 292, 0], [1, "t", Pn, 85, 286, 0], [1, "t", 4, 88, 289, gj], [1, "t", va, 79, 287, 0], [kr, "b", 1, 84, 285, ka], [kr, "t", yr, 75, 284, hk], [1, "b", 0, 75, 278, 0], [Dj, "t", wn, 74, 277, ka], [1, "t", mi, 81, 276, fs], [Zn, "t", pn, 65, 276, 0], [1, "b", Zn, 66, 275, 0], [1, "g", Go, 45, 261, 1], [1, "g", 1, 39, 258, Dj], [1, "g", fs, 35, 250, 1], [1, "g", 2, 22, 247, 1], [uq, "g", cn, 27, 227, bq], [1, "g", 2, 63, 218, ck], [1, "g", 1, 56, 224, 1], [y, "g", 0, 46, 231, 1], [kr, "g", 1, 65, 240, Zk], [1, "g", Ir, 67, 238, ck], [1, "g", 2, 79, 232, hj], [kr, "g", nq, 72, 253, or], [y, "g", 2, 62, 264, or], [1, "g", 2, 28, 267, uq], [1, "g", 2, 58, 274, Dj], [1, "de", 2, 14, 182, 0], [1, "de", uj, 24, 182, 0], [kr, "de", 0, 11, 185, 0], [1, "de", 0, _i, 194, Xa], [Zn, "de", $r, 25, 196, 0], [$r, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, ks], [bq, "de", Ci, 45, 186, 0], [hj, "de", 1, 38, 191, 0], [1, "de", hk, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [or, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", Ir, 64, 191, Xa], [1, "de", 2, 72, 200, Xa], [1, "de", R, 64, 201, gj], [ck, "de", 2, 76, 209, fs], [y, "de", Oj, 71, 212, 0], [1, "de", or, 86, 214, Go], [1, "de", 0, 57, 208, ka], [$q, "de", 0, 41, 203, 0], [1, "de", bq, wo, 206, 0], [Zn, "de", 2, 25, 209, Xa], [1, "de", Qq, Ao, 218, Go], [1, "de", 3, P, 227, 0], [1, "de", Go, 22, 229, 0], [ck, "de", 1, 15, 239, fs], [Dj, "de", nq, 24, 238, 0], [1, "de", 3, 22, 246, 0], [Zk, "de", wn, vi, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", Dj, 28, 261, 0], [hj, "de", Dj, 14, 267, 0], [1, "de", gj, 24, 268, 0], [1, "de", Xa, 15, 278, hk], [ck, "de", 2, 21, 279, hk], [1, "de", nq, 30, 272, Xa], [1, "de", 2, 29, 281, 0], [1, "de", uj, sq, 284, ka], [y, "de", 3, Ai, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", Ia, 27, 293, 0], [$q, "de", ho, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, I, 286, hk], [1, "de", 2, 36, 299, 0], [uq, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, Go], [Zn, "de", y, 48, 287, fs], [Zk, "de", 1, 46, 277, 0], [1, "de", Zk, 53, 278, 0], [Dj, "de", wn, 48, 295, 0], [$r, "de", 0, 57, 294, ks], [Zk, "de", bq, 65, 290, fs], [1, "de", 1, 84, 292, 0], [Zn, "de", 2, 77, 295, 0], [Dj, "de", 2, 84, 287, ho], [1, "de", ka, 74, 279, ks], [uq, "de", Qq, 65, 274, ka], [$q, "de", Sa, 71, 267, 0], [$r, "de", 2, 65, 261, ka], [1, "de", Ci, 47, 264, fs], [$q, "de", wn, 47, 258, 0], [1, "de", 3, 53, 251, Go], [$q, "de", 2, 40, 253, ks], [Zn, "de", 0, 35, 244, 0], [1, "de", Xa, 37, 233, 0], [1, "de", Ia, 44, 226, Xa], [y, "de", 2, 37, 219, Go], [1, "de", Ci, 54, 234, gj], [or, "de", 1, 66, 234, ho], [1, "de", 2, 65, 241, 0], [Dj, "de", 0, 68, 249, Go], [uq, "de", 3, 78, 257, 0], [1, "de", pn, 86, 253, 0], [1, "de", Ci, 83, 245, hk], [uq, "de", hj, 82, 238, 0], [or, "de", 3, 76, 235, 0], [uq, "de", 2, 86, 232, hk], [1, "de", 0, 86, 224, 0], [y, "de", Ci, 76, 226, 0], [or, "de", 2, 61, 228, fs], [1, "de", 2, 58, 217, 0], [1, "de", hk, 49, 217, fs], [Dj, "de", 19, _k, 179, fs], [1, "de", ie, Lr, 180, 0], [1, "de", 22, vn, 181, ho], [or, "de", h, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, Xa], [$r, "de", Hq, 18, 192, Xa], [Zk, "de", 19, 44, 182, 0], [ck, "de", 19, 49, 182, 0], [$r, "de", 19, 54, 182, Xa], [y, "de", Bi, 59, 183, ks], [uq, "de", Pi, 56, 186, 0], [1, "de", 19, 46, 188, fs], [uq, "de", Pi, 58, 193, 0], [1, "de", Pi, 67, 187, 0], [ck, "de", 19, 65, 192, fs], [1, "de", 19, 71, 180, fs], [1, "de", 19, 78, 187, 0], [Zn, "de", 19, 80, 194, ks], [ck, "de", Nn, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", ij, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, ho], [y, "de", Nn, 85, 203, hk], [uq, "de", ij, 74, 200, gj], [1, "de", h, 70, 202, fs], [1, "de", Hq, 83, 199, Xa], [or, "de", Pa, 86, 208, 0], [Dj, "de", 19, 84, 214, ks], [hj, "de", Nn, 83, 211, ks], [$r, "de", oq, 84, 217, gj], [1, "de", Hq, 77, 210, gj], [Dj, "de", Hj, 71, 210, 0], [1, "de", Bi, 73, 213, 0], [bq, "de", ij, 66, 207, hk], [1, "de", Br, 66, 204, Go], [Zk, "de", ij, 62, 209, fs], [Dj, "de", 19, 63, 201, gj], [Zn, "de", Nn, 56, 205, ka], [1, "de", 19, 49, 199, 0], [uq, "de", 19, 50, 205, 0], [1, "de", h, 40, 197, 0], [1, "de", 19, 38, 198, hk], [1, "de", 19, 40, 208, 0], [Zk, "de", 19, 36, 204, ho], [ck, "de", Pa, 33, 204, 0], [1, "de", h, 29, 202, 0], [Dj, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, fs], [1, "de", Br, 20, 199, ho], [1, "de", 19, Nj, 196, 0], [or, "de", 19, 12, 204, Xa], [1, "de", Br, 11, 201, 0], [Dj, "de", Pi, 23, 208, hk], [1, "de", Pa, 31, 214, hk], [uq, "de", 19, 26, 215, 0], [hj, "de", Hk, 36, 217, 0], [Dj, "de", 19, 32, 223, 0], [kr, "de", Br, 26, 223, 0], [1, "de", 19, 18, 218, ks], [1, "de", 19, Ln, 215, 0], [1, "de", ij, no, 212, 0], [or, "de", Hq, Pj, 224, 0], [bq, "de", Hj, oq, 229, hk], [$q, "de", Bi, 10, 230, fs], [kr, "de", Hj, 22, 240, 0], [1, "de", Pa, 13, 238, ho], [Zn, "de", 19, Ga, 243, ks], [kr, "de", 19, 24, 244, ka], [1, "de", 19, 24, 250, ks], [or, "de", 19, 28, 253, Go], [Dj, "de", 19, 33, po, ks], [1, "de", Pi, 34, 260, 0], [1, "de", Bi, 31, 260, 0], [1, "de", Bi, 38, 267, fs], [1, "de", 19, 44, 264, 0], [$r, "de", 19, 43, 261, 0], [1, "de", Hj, B, 257, 0], [1, "de", Hj, 22, 258, gj], [uq, "de", h, 12, 253, gj], [y, "de", Hq, 8, 242, 0], [kr, "de", 19, 8, on, gj], [1, "de", Pi, Sj, 264, 0], [Dj, "de", 19, 20, 265, 0], [or, "de", Hk, Ai, 271, 0], [y, "de", Pa, bn, 272, ho], [1, "de", 19, 13, 277, fs], [1, "de", 19, 21, 277, gj], [1, "de", Bi, 21, 281, 0], [1, "de", Pa, 27, 282, gj], [Dj, "de", 19, 29, 278, gj], [1, "de", 19, 29, 273, 0], [y, "de", ij, 36, 271, hk], [hj, "de", 19, yn, 278, 0], [1, "de", 19, vk, 286, gj], [ck, "de", 19, 17, 291, 0], [1, "de", Hj, 14, 294, 0], [kr, "de", 19, ar, 292, 0], [uq, "de", 19, 12, 300, hk], [1, "de", 19, Fo, 298, fs], [or, "de", Pi, 16, 301, 0], [1, "de", Hk, 27, 296, 0], [Zk, "de", 19, 25, 292, ks], [1, "de", 19, 23, 301, ka], [1, "de", 19, 28, 301, 0], [1, "de", Bi, 35, 297, 0], [hj, "de", Pa, 37, 301, 0], [bq, "de", h, 43, 301, Go], [Zn, "de", Hk, 46, 294, 0], [1, "de", 19, 46, 288, 0], [uq, "de", 19, 40, 287, ho], [1, "de", 19, 50, 301, ho], [$r, "de", Hk, 58, 301, Xa], [1, "de", oq, 64, 301, gj], [$r, "de", 19, 71, 301, 0], [kr, "de", 19, 80, 301, fs], [ck, "de", Hj, 87, 301, ks], [y, "de", Hj, 86, 294, ho], [1, "de", Hj, 87, 290, ka], [kr, "de", Hq, 82, 286, ka], [1, "de", 19, 75, 285, 0], [1, "de", Hk, 66, 292, 0], [1, "de", h, 66, 288, gj], [1, "de", Pi, 58, 288, 0], [1, "de", 19, 67, 282, ka], [1, "de", Hk, 61, 281, Xa], [hj, "de", 19, 60, 295, ka], [1, "de", ij, 50, 282, 0], [1, "de", 19, 47, 283, fs], [$q, "de", Pa, 48, 281, 0], [$r, "de", Pi, 44, 277, hk], [ck, "de", 19, 41, 282, 0], [1, "de", Hj, 38, 281, ka], [Zn, "de", ij, 42, 288, ks], [1, "de", oq, 52, 281, ka], [uq, "de", 19, 50, 275, gj], [uq, "de", 19, 39, 277, gj], [1, "de", Hj, 38, 284, ka], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [Zn, "de", 19, 47, 272, 0], [ck, "de", 19, 44, 267, ho], [1, "de", 19, 76, 280, 0], [$r, "de", Hj, 78, 272, gj], [y, "de", 19, 68, 275, hk], [1, "de", Pa, 70, 265, 0], [Zn, "de", 19, 65, 263, 0], [$r, "de", 19, 64, 262, 0], [$q, "de", Hj, 60, 268, Go], [1, "de", 19, 56, 266, 0], [$q, "de", h, 55, 260, 0], [bq, "de", Nn, 59, 258, 0], [$q, "de", 19, 62, 255, hk], [kr, "de", 19, 67, 253, ks], [1, "de", 19, 69, Fj, 0], [1, "de", 19, 44, 253, Go], [1, "de", Pi, 44, 250, 0], [Dj, "de", 19, 36, 245, gj], [y, "de", ij, 39, 239, ks], [1, "de", oq, 42, 234, 0], [kr, "de", h, 37, 235, ho], [1, "de", 19, 45, 226, ho], [Zk, "de", 19, 46, 222, 0], [1, "de", Pi, 51, 218, 0], [bq, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [y, "de", Hj, 76, 218, 0], [hj, "de", Pa, 84, 221, ho], [$r, "de", Nn, 88, 223, 0], [bq, "de", 19, 76, 230, 0], [uq, "de", 19, 86, 234, 0], [uq, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [or, "de", Bi, 81, 245, fs], [1, "de", ij, 83, 247, ks], [$q, "de", 19, 88, 247, 0], [uq, "de", oq, 84, 254, ks], [hj, "de", 19, 86, 251, hk], [kr, "de", 19, 85, 260, ks], [uq, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, ks], [1, "de", 19, 72, 251, gj], [1, "de", Hk, 69, 251, Xa], [1, "de", 19, 87, 266, 0], [1, "de", Pi, 89, 270, 0], [$q, "de", ij, 87, 271, ks], [1, "de", 19, 82, 277, hk], [bq, "de", 19, 87, 284, 0], [Zn, "de", Hq, 87, 237, 0], [hj, "de", 19, 88, 179, 0], [1, "de", h, 50, 191, Go], [1, "de", 19, 52, 221, ks], [Dj, "de", Br, 34, 234, ks], [1, "de", oq, 27, 233, ka], [1, "de", 19, 37, 293, fs], [uq, "de", 29, 13, 181, gj], [bq, "de", 29, 8, 180, 0], [1, "de", 30, gs, 186, ho], [Zn, "de", 31, 24, 183, fs], [1, "de", 32, 33, 185, 0], [$r, "de", 32, 37, 182, Xa], [1, "de", 29, 45, 183, fs], [or, "de", 30, 48, 183, gj], [1, "de", 30, 58, 181, 0], [bq, "de", 30, 66, 188, fs], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, ks], [1, "de", 30, 79, 189, 0], [$r, "de", 30, 87, 182, 0], [Zn, "de", 30, 83, 185, ho], [Dj, "de", 29, 88, 189, 0], [or, "de", 29, 85, 202, fs], [uq, "de", 31, 82, 203, 0], [Dj, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, ho], [Zk, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, Xa], [Zk, "de", 30, 73, 199, Xa], [1, "de", 30, 65, 207, ka], [uq, "de", 29, 63, 210, hk], [1, "de", 29, 50, 204, 0], [hj, "de", 30, 41, 205, Go], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [$r, "de", 30, aq, 201, 0], [Zk, "de", 29, 10, 203, fs], [$q, "de", 29, 14, 196, Go], [Dj, "de", 29, 24, 187, ho], [ck, "de", 29, 28, 223, Xa], [bq, "de", 29, 32, 212, 0], [hj, "de", 30, 28, 214, ka], [kr, "de", 31, 24, 218, 0], [uq, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, gj], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [ck, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, Go], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, Xa], [or, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, hk], [kr, "de", 30, 64, 276, hk], [1, "de", 30, 82, 285, Xa], [1, "de", 30, 65, 293, ka], [Dj, "de", 30, 56, 288, 0], [ck, "de", 30, 45, 296, ho], [1, "de", 30, 40, 288, fs], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, fs], [$r, "de", 29, 28, 296, fs], [1, "de", 29, 18, 292, Xa], [hj, "de", 29, 24, 284, 0], [ck, "de", 30, vi, 295, ho], [Zn, "de", 30, 10, 286, 0], [1, "de", 30, sr, 279, ks], [or, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, hk], [Dj, "de", 30, 12, Po, ka], [Zn, "de", 30, 31, 245, ks], [$q, "de", 30, 12, 240, 0], [Zn, "de", 30, 28, 235, Xa], [1, "de", 30, Ek, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, fs], [Zk, "r", 97, 262, 0], [Zn, "r", 98, 262, ho], [1, "r", 97, 270, Go], [bq, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, Xa], [Zn, "r", 97, 274, Xa], [1, "r", 97, 275, gj], [1, "r", 97, 276, fs], [$q, "r", 97, 277, hk], [1, "r", 97, 278, fs], [hj, "r", 98, 270, hk], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [or, "r", 98, 273, gj], [Zn, "r", 98, 274, 0], [Dj, "r", 98, 275, ka], [Zk, "r", 98, 276, hk], [1, "r", 98, 277, 0], [1, "r", 98, 278, Xa], [uq, "r", 96, 283, Xa], [Dj, "r", 97, 283, Xa], [1, "r", 97, 284, Go], [1, "r", 97, 285, 0], [kr, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [Zn, "r", 96, 270, ka], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, Xa], [y, "r", 96, 275, ks], [1, "r", 96, 276, fs], [$r, "r", 96, 277, fs], [1, "r", 96, 278, Xa], [1, "r", 44, 248, 0], [1, "de", B, 94, 290, 0], [1, "de", qe, 94, 252, 0], [or, "de", _q, 94, 228, 0], [Zk, "de", cr, 94, 200, 0], [Zn, "r", 95, 282, y], [y, "r", 95, 281, 1], [$r, "r", 94, 281, 1], [y, "r", 90, 281, kr], [1, "r", 91, 282, 1], [1, "r", 89, 281, Zn], [1, "r", 85, 276, 1], [or, "r", 85, 277, bq], [1, "r", 86, 278, 1], [Dj, "p", 0, 85, 279, 1], [$r, "r", 86, 279, hj], [1, "r", 87, 280, 1], [1, "r", 96, 281, ho], [1, "r", 97, 281, hk], [1, "r", 98, 281, 0], [bq, "r", 98, 282, 0], [or, "r", 97, 282, ho], [1, "r", 96, 282, 0], [or, "r", 68, 261, ck], [Dj, "fo", ck, 94, 168, fs], [1, "fo", 2, 94, 151, Go], [1, "fo", hj, 94, 138, 0], [1, "fo", or, 93, 124, fs], [1, "fo", 1, 94, 129, ka], [$r, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, Go], [hj, "fo", bq, 94, 93, 0], [1, "fo", 1, 93, 90, ks], [1, "fo", 1, 94, 79, ks], [$q, "fo", 1, 94, 76, 0], [or, "fo", bq, 93, 70, 0], [or, "fo", uq, 93, 63, hk], [1, "fo", $q, 94, 53, gj], [1, "fo", $r, 93, Yq, 0], [1, "fo", 1, 85, yn, fs], [ck, "fo", 1, 94, 12, Xa], [1, "fo", $r, 66, 13, ka], [1, "fo", hj, 69, 9, Go], [1, "fo", pn, 68, Qk, fs], [hj, "fo", Xj, 66, 25, ka], [1, "fo", cn, 92, ln, 0], [1, "fo", dj, 94, _, ho], [or, "fo", Ci, 87, 9, 0], [1, "fo", 2, 71, 9, Go], [1, "fo", 2, 90, Ge, Xa], [1, "fo", 2, 91, sk, 0], [ck, "fo", Dj, 74, 12, fs], [$r, "fo", Ci, 72, Nj, 0], [$r, "fo", 2, 75, Ek, 0], [1, "fo", nq, 74, 15, fs], [1, "fo", 2, 84, Ge, ka], [1, "fo", Ci, 81, 14, ka], [bq, "fo", 1, 84, 13, 0], [or, "fo", hj, 84, ij, 0], [Zn, "fo", 1, 11, 9, 0], [bq, "fo", y, 7, bo, hk], [1, "fo", 1, 8, 22, 0], [ck, "fo", Dj, Ka, 34, 0], [uq, "fo", Zn, 12, 24, ho], [1, "fo", uj, Nk, 24, gj], [1, "fo", 2, 9, 21, ka], [$r, "fo", cn, 31, ek, ks], [hj, "fo", 2, 33, 27, 0], [1, "fo", Ci, Mi, 34, ho], [uq, "fo", 2, 8, 19, 0], [y, "fo", y, yo, 10, 0], [or, "fo", 2, cj, 9, Go], [1, "fo", 2, Ln, Dr, 0], [Zn, "fo", Sa, 9, Ok, Xa], [Zn, "fo", 2, 9, Xn, 0], [Zk, "fo", 2, Ma, 15, 0], [bq, "fo", 2, vi, 23, Xa], [uq, "fo", 2, 34, 29, 0], [1, "fo", dj, 27, tj, Xa], [1, "fo", 2, 25, 21, ks], [1, "fo", 2, 20, en, 0], [1, "fo", 2, Fa, 21, gj], [$r, "fo", Sa, 29, Q, Go], [uq, "fo", 2, Ga, aa, 0], [1, "fo", uj, 9, 38, ho], [Dj, "fo", 2, 21, 39, Go], [kr, "fo", dj, 84, 26, 0], [1, "fo", Sa, 77, 25, ka], [$r, "fo", dj, 86, 35, gj], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, fs], [1, "fo", uj, 89, 39, Xa], [1, "fo", Ir, 65, 40, hk], [kr, "fo", Ci, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [Dj, "de", 22, 25, 266, Xa], [uq, "de", 22, Mo, 206, gj], [1, "de", Hk, Sr, 184, Xa], [bq, "de", 19, 22, 183, Xa], [Dj, "de", h, 35, 188, Xa], [kr, "de", 19, 36, 192, 0], [1, "de", ij, 50, 277, 0], [Zn, "de", 19, 35, 279, 0], [kr, "t", mi, Do, 178, 0], [1, "t", 1, 7, 179, 0], [or, "t", 3, E, 180, 0], [bq, "t", 2, 7, 181, Go], [Dj, "t", 5, Zq, 182, 0], [y, "t", Qa, Ka, 183, Xa], [1, "t", Qq, 7, 184, gj], [1, "t", qa, 7, 185, hk], [1, "t", Ci, 7, 186, fs], [1, "t", kr, E, 187, fs], [uq, "t", Qa, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", Ba, He, 190, gj], [hj, "t", 1, 7, 191, Go], [1, "t", Oj, 7, 192, ka], [hj, "t", mi, 7, 193, ho], [1, "t", yr, Do, 194, Xa], [uq, "t", br, lo, 195, ks], [$q, "t", Pn, 7, 196, 0], [$r, "t", 4, 7, 197, 0], [1, "b", 2, Ka, 198, Xa], [Dj, "t", 4, Do, 199, Go], [Zk, "t", uj, Ka, 200, 0], [Zk, "t", br, 7, 201, Go], [1, "t", 2, 7, 202, gj], [or, "t", 4, 7, 203, Go], [or, "t", 2, 7, 204, Go], [1, "t", Gj, 7, 205, ks], [1, "t", nq, 7, 206, ho], [kr, "t", 1, 7, 207, 0], [ck, "t", 4, 7, 208, gj], [1, "t", 3, 7, 209, ho], [1, "t", 1, E, 210, 0], [uq, "b", ho, E, 211, gj], [hj, "t", 3, lo, 212, Xa], [1, "t", qa, 7, 213, ks], [bq, "t", yr, Zq, 214, 0], [1, "t", Vn, lo, 215, ho], [$q, "t", 5, 7, 216, Xa], [1, "t", 3, 7, 217, 0], [1, "t", bq, He, 218, ka], [hj, "t", 4, E, 219, fs], [1, "b", Ir, 7, 220, fs], [hj, "t", hj, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, Do, 223, Go], [1, "t", 3, 7, 224, Xa], [uq, "t", Zn, 7, 225, ks], [1, "t", 4, 7, 226, 0], [1, "t", nq, 7, 227, ka], [1, "t", 5, He, 228, 0], [hj, "t", 3, nj, 229, 0], [1, "t", kr, nj, 230, ka], [Zk, "t", 4, 7, 231, fs], [Dj, "b", 2, 7, 232, 0], [$r, "t", zq, nj, 233, 0], [y, "t", 1, He, 234, Go], [ck, "t", 3, 7, 235, 0], [1, "t", jo, 7, 236, gj], [1, "t", nq, Tk, 237, 0], [1, "t", 5, 7, 238, gj], [1, "b", 3, 7, 239, Go], [1, "t", 2, 7, 240, 0], [ck, "t", Zk, Tk, 241, 0], [uq, "t", 2, Do, 242, 0], [hj, "t", 4, He, 243, Go], [1, "t", wq, nj, 244, 0], [1, "t", 4, He, 245, ka], [1, "t", 1, 7, 246, ka], [1, "b", 0, 7, 247, 0], [1, "t", 3, lo, 248, Go], [1, "t", Lj, 7, 249, 0], [1, "t", Pn, Tk, 250, fs], [1, "t", kr, 7, 251, 0], [1, "t", 4, Tk, 252, hk], [uq, "t", wq, Tk, 253, fs], [1, "t", 5, He, 254, 0], [1, "t", 1, 7, 255, 0], [kr, "t", mi, Do, kk, Xa], [1, "t", Zn, nj, 257, 0], [1, "t", pn, E, 258, ks], [kr, "t", Yo, 7, 260, 0], [uq, "t", 3, 7, 259, 0], [1, "t", y, 7, 261, 0], [kr, "t", 3, 7, 262, ho], [1, "t", Io, Do, 263, ka], [1, "t", Zn, Tk, 264, ka], [1, "t", dj, 7, 265, Xa], [bq, "t", br, 7, 266, Xa], [1, "t", Ci, Ka, 267, Go], [kr, "t", 2, 7, 269, 0], [1, "b", nq, 7, 268, ka], [hj, "t", 4, 7, 270, Xa], [kr, "t", Dj, 7, 271, hk], [Zn, "t", 5, 7, 272, 0], [1, "b", 2, E, 273, 0], [Zn, "t", mi, 7, 274, 0], [Zn, "t", 2, E, 275, 0], [$q, "t", 5, E, 276, ks], [1, "t", 5, 7, 277, 0], [1, "t", Pn, 7, 278, 0], [1, "t", 1, E, 279, gj], [1, "t", 4, nj, 280, 0], [uq, "b", Dj, lq, 281, 0], [ck, "t", Oj, Do, 282, 0], [Dj, "t", 4, Ka, 283, 0], [1, "t", hj, He, 284, 0], [kr, "t", yr, 7, 285, fs], [1, "t", 5, 7, 286, hk], [1, "t", oo, 7, 288, 0], [1, "t", cn, 7, 287, 0], [1, "b", fs, 7, 289, gj], [1, "t", 4, E, 290, ka], [or, "t", 2, 7, 291, 0], [ck, "t", 5, 7, 292, 0], [or, "t", wq, 7, 293, ho], [1, "t", $q, 7, 294, 0], [1, "t", 4, He, 295, fs], [1, "t", 3, 7, 296, 0], [1, "t", 1, lo, 297, gj], [uq, "t", jo, E, 298, Xa], [1, "t", 2, 7, 299, ho], [y, "b", 0, 7, 300, 0], [or, "t", 2, Zq, 301, Go], [bq, "r", 196, 271, fs], [$q, "r", 199, 274, ka], [1, "r", 167, 238, 0], [Dj, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, gj], [Dj, "r", 197, 271, 0], [1, "r", 198, 272, gj], [or, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [hj, "r", 199, 272, hk], [1, "r", 199, 273, ks], [1, "r", 198, 273, Go], [1, "r", 197, 273, 0], [hj, "r", 196, 273, ho], [1, "r", 198, 274, hk], [$q, "r", 197, 274, Xa], [1, "r", 195, 273, Xa], [kr, "r", 196, 274, 0], [1, "r", 198, 275, ka], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, gj], [uq, "r", 199, 275, 0], [kr, "plm", Ir, 200, 272, ho], [ck, "plm", 1, 195, 271, 0], [or, "plm", 0, 199, 268, 0], [1, "plm", ka, 193, 277, Go], [kr, "plm", Zk, 199, 276, 0], [1, "s", 1, 200, 275, ck], [hj, "s", $r, 194, 272, 1], [1, "s", 2, 193, 270, or], [1, "g", 2, 193, 273, bq], [1, "g", pn, 201, 267, or], [1, "m", 2, 220, 298, 1], [bq, "m", uq, 219, 292, $q], [1, "m", $q, 214, 297, 1], [1, "r", 168, 238, hk], [Dj, "r", 169, 238, hk], [Zk, "r", 170, 238, 0], [1, "r", 171, 239, 0], [kr, "r", 170, 239, hk], [hj, "r", 169, 239, ho], [1, "r", 168, 239, gj], [$q, "r", 167, 239, ks], [hj, "r", 166, 239, 0], [1, "r", 166, 240, gj], [1, "r", 167, 240, Go], [1, "r", 168, 240, 0], [1, "r", 169, 240, ka], [$q, "r", 170, 240, 0], [$q, "r", 168, 241, ks], [or, "r", 169, 241, hk], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [kr, "plm", dj, 171, 238, Go], [bq, "plm", y, 166, 238, gj], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, hk], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, ks], [Zn, "plm", 0, 174, 241, fs], [y, "s", Zn, 165, 239, ck], [1, "s", Zk, 172, 241, ck], [1, "s", Go, 170, 237, 1], [$r, "s", 1, 171, 237, Zk], [kr, "s", 2, 174, 236, 1], [Zk, "s", 2, 162, 241, 1], [Dj, "s", Ci, 170, 246, 1], [1, "s", Pn, 167, 235, Zk], [1, "s", pn, 176, 243, 1], [$r, "r", 190, 207, 0], [1, "r", 191, 207, ks], [1, "r", 192, 208, ho], [Dj, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, ho], [1, "r", 188, 208, 0], [or, "r", 189, 209, Go], [Zn, "r", 190, 209, Xa], [1, "r", 191, 209, ho], [1, "r", 188, 209, ho], [y, "r", 190, 210, Xa], [1, "r", 191, 210, 0], [bq, "r", 192, 210, fs], [hj, "plm", 2, 189, 210, Go], [1, "plm", 2, 192, 205, Go], [Zk, "plm", 1, 192, 207, ks], [1, "plm", hk, 193, 210, fs], [uq, "plm", gj, 187, 208, hk], [1, "plm", 0, 197, 206, 0], [ck, "plm", fs, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [Dj, "s", y, 188, 207, kr], [1, "s", or, 190, 211, 1], [ck, "s", nq, 188, 213, bq], [kr, "s", cn, 187, 205, 1], [or, "s", Go, 194, 210, Zk], [Zk, "s", 0, 198, 207, hj], [or, "s", kr, 193, 204, kr], [1, "s", 1, 193, 213, 1], [Dj, "s", 2, 198, 212, bq], [1, "s", Ci, 182, 208, 1], [bq, "s", bq, 204, 271, y], [1, "s", hk, 203, 272, Dj], [1, "s", Xa, 189, 275, 1], [$r, "s", ho, 195, 265, 1], [1, "s", 2, 196, 264, or], [1, "s", Ci, 186, 274, 1], [y, "s", 2, 197, 280, Zn], [1, "s", Go, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", ck, 214, 274, 1], [ck, "s", ck, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", fs, 207, 292, y], [1, "s", 0, 197, 297, 1], [1, "s", Go, 184, 287, 1], [1, "s", cn, 213, 289, Zk], [Dj, "s", 2, 196, 294, Dj], [1, "s", 2, 187, 286, hj], [or, "s", 1, 192, 289, 1], [1, "s", kr, 189, 299, 1], [1, "s", ho, 213, 273, Zn], [1, "g", Ci, 212, 278, y], [1, "g", uq, 200, 288, kr], [1, "g", 2, 215, 265, 1], [1, "g", nq, 183, 281, 1], [1, "s", 0, 178, 295, 1], [$r, "s", ho, 167, 281, 1], [y, "s", 0, 175, 263, 1], [y, "s", 1, 176, 293, hj], [1, "s", Dj, 163, 285, 1], [y, "s", $r, 177, 266, 1], [ck, "s", 1, 161, 272, $r], [1, "s", Ir, 185, 261, 1], [or, "c", fs, 217, 270, 1], [1, "c", ho, 220, 278, Zn], [y, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, $q], [1, "c", gj, 210, 292, 1], [1, "c", fs, 205, 297, Zn], [1, "c", 0, 198, 293, 1], [kr, "c", 0, 208, 283, bq], [$q, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [$q, "c", ks, 183, 296, 1], [1, "c", 0, 189, 291, ck], [1, "c", 0, 178, 284, 1], [Zk, "c", Go, 208, 265, 1], [$r, "c", fs, 169, 292, ck], [1, "s", 1, 158, 294, 1], [$r, "s", ks, 151, 297, Zn], [Zn, "s", fs, 147, 288, 1], [kr, "c", ks, 150, 289, 1], [y, "c", Xa, 160, 282, 1], [1, "c", ho, 146, 274, 1], [bq, "c", Go, 167, 264, $r], [1, "c", fs, 165, 267, 1], [bq, "g", fs, 189, 257, $r], [bq, "g", 1, 197, 248, $r], [$q, "g", Pn, 170, co, 1], [1, "g", cn, 212, 234, 1], [1, "g", Sa, 189, 230, 1], [bq, "g", nq, 173, 221, 1], [1, "g", y, 210, 214, hj], [1, "s", Zk, 153, 257, Zn], [ck, "s", Xa, 158, 255, 1], [1, "s", ho, 184, 248, 1], [1, "s", 0, 212, 254, Dj], [Zn, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, Zn], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", ks, 181, 228, 1], [1, "s", or, 199, 227, 1], [1, "s", hj, 208, 238, bq], [Zn, "s", 1, 179, 222, uq], [1, "s", Dj, 213, 223, Dj], [kr, "s", pn, 182, 222, 1], [kr, "s", Xj, 211, 226, 1], [bq, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, y], [ck, "s", 2, 215, 192, 1], [$r, "s", Zn, 210, 198, $q], [Zk, "s", 1, 198, 196, or], [y, "s", Ci, 208, 199, 1], [1, "s", 2, 187, 192, bq], [Zn, "s", 1, 179, 198, 1], [1, "s", dj, 177, 197, Zn], [1, "s", 0, 164, 197, hj], [1, "s", bq, 159, 193, Zn], [1, "s", Dj, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", Ci, 161, 191, 1], [1, "s", 1, 162, 224, uq], [y, "s", 0, 150, 236, hj], [1, "s", 1, 149, 239, ck], [Zk, "s", 2, 153, 236, 1], [or, "s", Xj, 160, 223, kr], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, kr], [y, "s", Ir, 145, 265, uq], [Zn, "s", 2, 145, 285, 1], [Zk, "c", ks, 152, 266, Zk], [uq, "c", Xa, 185, 271, Dj], [bq, "c", fs, 210, 254, 1], [Zn, "c", 0, 209, 256, $q], [$q, "c", 0, 198, 254, uq], [1, "c", fs, 213, 246, Zk], [1, "c", 0, 216, 237, $q], [Zk, "c", 0, 204, 240, 1], [or, "c", ks, 196, 234, 1], [uq, "c", 0, 188, 238, 1], [y, "c", ho, 182, 245, uq], [1, "c", 0, 173, 252, 1], [y, "c", Xa, 153, 248, bq], [hj, "c", Xa, 158, 233, ck], [1, "c", 0, 147, 230, 1], [or, "c", Xa, 151, 224, 1], [or, "c", 0, 157, 214, ck], [hj, "c", 0, 167, 219, 1], [Dj, "c", ho, 171, 208, 1], [1, "c", 0, 179, 219, $q], [bq, "c", 0, 176, 229, 1], [uq, "c", 0, 195, 221, $q], [Zk, "c", fs, 207, 222, 1], [bq, "c", ka, 214, 207, Dj], [uq, "c", gj, 205, 210, 1], [hj, "c", 0, 204, 196, 1], [y, "c", hk, 214, 196, bq], [$q, "c", ho, 190, 199, Zn], [ck, "c", hk, 184, 194, 1], [1, "c", 0, 172, 199, Zn], [1, "c", 0, 161, 204, $q], [kr, "c", 0, 157, 196, hj], [$r, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [ck, "c", ks, 207, 274, 1], [Dj, "c", 0, 217, 258, 1], [1, "c", gj, 201, 260, Zk], [or, "c", ho, 178, 276, Dj], [1, "c", Xa, 187, 265, 1], [uq, "s", y, 204, 260, 1], [uq, "s", ck, 216, 260, Zn], [kr, "s", 1, 187, Rk, hj], [or, "s", 2, 189, 254, 1], [1, "s", Sa, 212, 257, Zk], [$r, "s", Ir, 182, 286, 1], [1, "s", 2, 169, 280, ck], [$q, "s", uj, 217, 273, 1], [1, "s", 2, 215, 282, 1], [Zn, "s", Sa, 172, 263, $q], [$r, "s", pn, 176, 267, y], [1, "s", pn, 215, 251, 1], [$r, "fod", 1, 221, 282, ka], [1, "fod", $r, 222, 284, ho], [Dj, "fod", ck, 221, 290, 0], [y, "fod", hj, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", bq, 223, 298, gj], [1, "fod", kr, 222, 300, ka], [1, "fod", bq, 218, 301, ka], [$r, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, fs], [uq, "fod", $q, 212, 300, ka], [1, "fod", 1, 206, 300, Xa], [1, "fod", 1, 209, 301, ks], [ck, "fod", 1, 204, 299, ka], [Zn, "fod", $q, 202, 301, hk], [$r, "fod", 1, 199, 301, 0], [y, "fod", Zk, 222, 282, Xa], [1, "fod", $q, 207, 301, gj], [1, "fod", ck, 197, 301, hk], [1, "fod", bq, 215, 291, 0], [or, "fod", ck, 216, 286, Xa], [1, "fod", 1, 214, 292, hk], [kr, "fod", 1, 210, 289, Go], [1, "fod", hj, 208, 294, Go], [1, "fod", 1, 210, 298, ks], [bq, "fod", Zn, 212, 281, fs], [1, "fod", $r, 219, 278, 0], [kr, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, hk], [bq, "fod", 1, 202, 293, 0], [bq, "fod", Zk, 198, 295, 0], [1, "fod", uj, 213, 282, 0], [hj, "fod", 2, 213, 291, ks], [y, "fod", uj, 216, 289, 0], [Zn, "fod", 2, 219, 289, 0], [hj, "fod", 2, 218, 285, ks], [or, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [Zn, "fod", 2, 215, 281, fs], [Zn, "fod", 2, 217, 279, ks], [1, "fod", 2, 208, 290, 0], [$q, "fod", 2, 211, 296, 0], [or, "fod", Xj, 215, 294, 0], [1, "fod", 2, 212, 298, gj], [1, "fod", Sa, 203, 294, 0], [1, "fod", uj, 204, 288, 0], [1, "fod", Xj, 200, 294, 0], [$r, "fod", nq, 198, 297, ks], [ck, "fod", 2, 202, 299, 0], [$r, "fod", Pn, 200, 299, 0], [or, "fod", Ir, 220, 300, gj], [1, "fod", cn, 220, 295, ho], [1, "fod", Ci, 220, 292, fs], [uq, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, ho], [1, "fod", 2, 213, 287, gj], [Dj, "fod", Ir, 211, 289, 0], [ck, "fod", 2, 212, 290, Go], [1, "fod", nq, 195, 296, 0], [ck, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [Zk, "fod", Ci, 195, 300, fs], [uq, "fod", 2, 213, 279, 0], [uq, "fod", 2, 211, 279, ho], [1, "fod", ks, 218, 290, 0], [y, "fod", 0, 212, 294, 0], [$r, "fod", 1, 213, 295, ks], [y, "fod", or, 217, 292, 0], [ck, "fod", 1, 218, 288, 0], [1, "fod", ck, 210, 295, ks], [1, "fod", 1, 213, 292, 0], [y, "fod", 1, 212, 289, ka], [1, "fod", 1, 205, 295, ho], [hj, "fod", 2, 206, 296, ks], [1, "fod", Sa, 208, 296, Go], [Dj, "fod", 2, 221, 288, ka], [ck, "fod", Ci, 209, 299, ka], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", $q, 204, 272, hk], [$q, "fod", dj, 205, 273, fs], [1, "fod", 2, 204, 276, 0], [1, "fod", Pn, 202, 276, ho], [or, "fod", Pn, 199, 277, 0], [$r, "fod", 2, 202, 273, Xa], [uq, "fod", Ci, 199, 270, 0], [Dj, "fod", 2, 194, 274, gj], [1, "fod", Pn, 194, 277, 0], [ck, "fod", 1, 192, 274, 0], [kr, "fod", 1, 194, 267, ks], [uq, "fod", cn, 194, 265, hk], [1, "fod", Ir, 190, 272, Go], [1, "fod", 2, 191, 275, Go], [1, "fod", cn, 195, 274, 0], [1, "fod", 2, 200, 271, ka], [1, "fod", hj, 168, 243, hk], [1, "fod", uq, 175, 240, 0], [1, "fod", ck, 169, 234, 0], [1, "fod", 1, 162, 235, ho], [1, "fod", Sa, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, Xa], [ck, "fod", 2, 173, 241, hk], [1, "fod", Ir, 174, 238, 0], [1, "fod", 2, 176, 240, ks], [1, "fod", pn, 169, 244, gj], [1, "fod", Pn, 166, 243, ks], [1, "fod", 2, 162, 236, 0], [$r, "fod", 2, 164, 235, 0], [$q, "fod", Ir, 162, 233, 0], [Zn, "fod", 2, 163, 236, ho], [1, "fod", cn, 174, 242, 0], [y, "fod", 2, 171, 243, 0], [1, "fod", Dj, 194, 206, 0], [$r, "fod", Zn, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", uj, 196, 208, fs], [ck, "fod", nq, 198, 206, Go], [Zn, "fod", 2, 198, 208, ka], [1, "fod", Ci, 194, 204, 0], [1, "fod", Xj, 187, 206, 0], [1, "fod", 2, 186, 204, hk], [uq, "fod", cn, 189, 214, ka], [y, "fod", cn, 189, 213, 0], [y, "fod", Sa, 193, 215, gj], [Dj, "fod", 2, 194, 214, 0], [bq, "fod", 2, 187, 215, 0], [uq, "fod", dj, 193, 209, Go], [1, "fod", 2, 189, 211, 0], [$r, "fod", 2, 187, 209, fs], [1, "fod", 2, 187, 207, gj], [uq, "fod", 2, 191, 205, 0], [Zk, "fod", Sa, 189, 203, ka], [Dj, "cs", Sa, 224, 176, 1], [1, "cs", gj, 224, 177, 1], [Zk, "cs", 3, 224, 178, bq], [1, "cs", 2, 224, 179, kr], [or, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, y], [1, "cs", Go, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [kr, "cs", ks, 224, 184, or], [Zk, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [kr, "cs", ks, 224, 187, 1], [1, "cs", Sa, 224, 188, Zk], [1, "cs", 0, 224, 189, 1], [1, "cs", $q, 224, 190, $r], [bq, "cs", dj, 224, 191, 1], [ck, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, Zk], [1, "cs", cn, 224, 194, 1], [Dj, "cs", uq, 224, 195, hj], [Zn, "cs", Pn, 224, 196, 1], [Dj, "cs", Go, 224, 197, 1], [or, "cs", 3, 224, 198, kr], [1, "cs", nq, 224, 199, Zn], [1, "cs", 1, 224, 200, hj], [1, "cs", pn, 224, 201, $r], [1, "cs", 3, 224, 202, ck], [hj, "cs", 0, 224, 203, Zk], [y, "cs", Dj, 224, 204, 1], [1, "cs", Ci, 224, 205, 1], [1, "cs", gj, 224, 206, $r], [Zn, "cs", bq, 224, 207, or], [1, "cs", Qq, 224, 208, 1], [Zk, "cs", nq, 224, 209, 1], [Dj, "cs", 2, 224, 210, 1], [1, "cs", hk, 223, 211, $q], [1, "cs", 1, 224, 211, $q], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", Zn, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [$r, "cs", 0, 224, 216, 1], [$r, "cs", Dj, 224, 217, ck], [uq, "cs", 2, 224, 218, kr], [kr, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, y], [1, "cs", 2, 223, 214, $r], [uq, "cs", Xj, 223, 212, or], [1, "cs", 2, 223, 216, Zn], [1, "cs", wq, 223, 217, kr], [Zk, "cs", 0, 223, 218, 1], [1, "cs", fs, 224, 220, 1], [uq, "cs", 0, 224, 222, $q], [1, "cs", 0, 223, 209, bq], [y, "cs", ks, 223, 205, $q], [y, "cs", cn, 224, 221, 1], [uq, "cs", Pn, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, Zn], [Zn, "cs", Pn, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", yr, 223, 179, or], [1, "cs", 3, 223, 181, 1], [1, "cs", Ui, 223, 182, Zn], [or, "cs", 1, 223, 185, Zn], [hj, "cs", 2, 223, 184, 1], [kr, "cs", Ir, 223, 186, or], [uq, "cs", hk, 223, 180, ck], [$q, "cs", hk, 223, 183, 1], [uq, "cs", cn, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [$q, "cs", 2, 223, 189, 1], [Zk, "cs", 2, 223, 190, $q], [bq, "cs", Oj, 223, 191, $q], [Zn, "cs", 1, 223, 192, 1], [uq, "cs", 2, 223, 193, uq], [$r, "cs", 2, 223, 194, Zk], [uq, "cs", Qq, 223, 195, Zn], [1, "cs", kr, 223, 196, $r], [1, "cs", Sa, 223, 197, Zn], [1, "cs", Pn, 223, 199, 1], [Dj, "cs", 2, 223, 198, 1], [$q, "cs", 0, 223, 200, kr], [1, "cs", dj, 223, 201, 1], [hj, "cs", ka, 223, 202, 1], [1, "cs", R, 223, 203, 1], [1, "cs", Qq, 223, 204, kr], [1, "cs", 3, 223, 206, 1], [$q, "cs", 3, 223, 207, Dj], [Zn, "cs", yr, 223, 208, ck], [1, "cs", 2, 223, 221, $r], [1, "cs", nq, 223, 222, ck], [Dj, "cs", ho, 223, 224, ck], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [y, "cs", Go, 223, 234, hj], [$r, "cs", pn, 223, 223, $r], [1, "cs", 2, 224, 223, Dj], [hj, "cs", pn, 224, 224, Zk], [$r, "cs", 2, 224, 225, Dj], [1, "cs", 1, 223, 226, 1], [or, "cs", or, 224, 231, 1], [$q, "cs", 1, 223, 232, $q], [1, "cs", 3, 223, 225, kr], [1, "cs", 3, 224, 226, hj], [y, "cs", Ia, 223, 227, Zn], [$r, "cs", 3, 224, 227, bq], [1, "cs", Qq, 223, 229, 1], [uq, "cs", 3, 223, 228, ck], [1, "cs", 3, 224, 229, or], [bq, "cs", 3, 223, 230, or], [or, "cs", 3, 223, 231, 1], [kr, "cs", 3, 224, 232, kr], [Dj, "cs", 3, 224, 233, ck], [ck, "cs", Qq, 223, 233, 1], [kr, "cs", wq, 224, 234, 1], [uq, "cs", 3, 224, 235, hj], [or, "cs", 3, 223, 235, bq], [Zk, "cs", or, 224, 236, ck], [1, "cs", Sa, 223, 236, 1], [1, "cs", Pn, 223, 237, 1], [1, "cs", yr, 224, 237, $q], [1, "cs", R, 224, 238, ck], [hj, "cs", fs, 224, 239, 1], [1, "cs", uq, 223, 241, Zn], [1, "cs", hk, 224, 243, 1], [Zk, "cs", 0, 223, 245, 1], [1, "cs", fs, 224, 247, 1], [bq, "cs", Sa, 223, 240, ck], [1, "cs", 2, 223, 239, kr], [1, "cs", 2, 224, 240, 1], [$r, "cs", Ir, 224, 241, 1], [Zn, "cs", 2, 224, 242, uq], [uq, "cs", 2, 223, 242, 1], [kr, "cs", 2, 223, 243, 1], [1, "cs", Ci, 223, 244, 1], [uq, "cs", cn, 224, 244, 1], [1, "cs", Ir, 224, 245, 1], [Dj, "cs", 2, 224, 246, y], [1, "cs", 3, 223, 238, 1], [1, "cs", Oj, 223, 246, 1], [Zn, "cs", 2, 223, 247, Zk], [1, "cs", bq, 223, 249, Dj], [$r, "cs", kr, 224, 253, 1], [1, "cs", 1, 223, kk, 1], [1, "cs", ks, 223, 254, kr], [1, "cs", 0, 224, 250, $q], [uq, "cs", 3, 223, 248, 1], [hj, "cs", 3, 223, 250, 1], [y, "cs", 3, 223, 252, $r], [1, "cs", 3, 223, xr, $r], [Zk, "cs", 3, 223, 257, 1], [1, "cs", nq, 224, 248, Zn], [$r, "cs", Ir, 224, 249, 1], [1, "cs", cn, 223, 251, 1], [1, "cs", Sa, 224, 251, 1], [ck, "cs", Ci, 224, 252, $q], [1, "cs", 2, 223, 253, uq], [hj, "cs", Ir, 224, 254, hj], [1, "cs", 2, 224, 255, kr], [1, "cs", 2, 224, Jn, 1], [$q, "cs", uj, 224, 257, 1], [Zk, "cs", Go, 224, 258, Zk], [bq, "cs", 0, 223, 261, bq], [uq, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [$q, "cs", 1, 223, 264, Dj], [Dj, "cs", bq, 223, 268, hj], [1, "cs", 1, 224, 274, Dj], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, hj], [1, "cs", 2, 223, 263, 1], [Zn, "cs", 2, 223, 265, $r], [or, "cs", 2, 223, 267, 1], [1, "cs", pn, 223, 271, bq], [1, "cs", nq, 223, 273, uq], [$r, "cs", Ia, 223, 262, or], [y, "cs", 3, 223, 266, $q], [y, "cs", 3, 223, 269, kr], [$q, "cs", 3, 223, 272, bq], [Zk, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [Zk, "cs", Ui, 224, 273, 1], [$q, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, uq], [ck, "cs", R, 224, 269, 1], [1, "cs", wq, 224, 268, $q], [or, "cs", wq, 224, 267, uq], [bq, "cs", Oj, 224, 265, 1], [1, "cs", 3, 224, 264, uq], [ck, "cs", R, 224, 262, bq], [bq, "cs", 3, 224, 261, Zk], [1, "cs", 3, 224, 260, $q], [hj, "cs", 3, 224, 259, $r], [or, "cs", uj, 223, 276, 1], [$r, "cs", 1, 224, 276, uq], [ck, "cs", uq, 224, 280, 1], [1, "cs", hj, 223, 281, 1], [Zn, "cs", or, 224, 286, 1], [1, "cs", gj, 223, 280, Dj], [$q, "cs", hk, 223, 284, 1], [uq, "cs", 0, 224, 288, or], [$q, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, uq], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [bq, "cs", Sa, 224, 281, $q], [Zk, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [ck, "cs", 2, 224, 284, 1], [Dj, "cs", dj, 224, 285, $r], [y, "cs", Xj, 224, 287, kr], [1, "cs", nq, 223, 287, bq], [1, "cs", 2, 223, 285, $q], [$r, "cs", Sa, 223, 283, 1], [uq, "cs", 2, 223, 279, or], [Dj, "cs", 3, 223, 278, 1], [Zk, "cs", 3, 223, 282, uq], [Dj, "cs", wq, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, kr], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [uq, "cs", $r, 223, 290, 1], [y, "cs", 0, 224, 292, Zk], [1, "cs", ho, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, or], [1, "cs", Xj, 223, 291, 1], [bq, "cs", 2, 224, 291, bq], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [Zn, "cs", uj, 224, 293, hj], [Zk, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, hj], [bq, "cs", 2, 223, 296, 1], [Zn, "cs", Ci, 224, 296, 1], [kr, "cs", 2, 223, 297, 1], [$q, "cs", pn, 223, 298, $r], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [hj, "cs", Sa, 223, 300, $q], [1, "cs", 1, 224, 300, $r], [1, "cs", Xa, 223, 301, 1], [Zk, "cs", 0, 224, 302, 1], [kr, "cs", ka, 224, 304, Dj], [1, "cs", 3, 224, 301, uq], [$r, "cs", wn, 224, 303, y], [1, "cs", Xa, 221, 303, 1], [y, "cs", 0, 219, 304, uq], [1, "cs", $r, 222, 304, or], [1, "cs", Dj, 222, 302, or], [uq, "cs", Ci, 223, 302, Zk], [1, "cs", cn, 223, 303, 1], [Zn, "cs", 2, 222, 303, 1], [1, "cs", pn, 223, 304, bq], [1, "cs", nq, 221, 304, 1], [1, "cs", 2, 220, 304, or], [1, "cs", 2, 220, 303, Zk], [1, "cs", 2, 220, 302, 1], [1, "cs", Pn, 221, 302, 1], [or, "cs", 2, 219, 303, 1], [1, "cs", hk, 217, 302, 1], [1, "cs", Go, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [Zn, "cs", 1, 218, 302, 1], [hj, "cs", 1, 217, 304, uq], [1, "cs", y, 215, 302, kr], [$q, "cs", 2, 219, 302, 1], [1, "cs", Ir, 218, 303, 1], [1, "cs", pn, 218, 304, y], [Zn, "cs", 2, 217, 303, $q], [hj, "cs", 2, 216, 304, y], [1, "cs", 2, 215, 303, hj], [1, "cs", Xj, 216, 303, 1], [1, "cs", dj, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [kr, "cs", 2, 214, 304, hj], [uq, "cs", Xa, 212, 302, Zn], [1, "cs", 0, 210, 303, kr], [1, "cs", 0, 212, 304, 1], [hj, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [y, "cs", 1, 208, 303, Zn], [$q, "cs", 2, 213, 302, ck], [$q, "cs", cn, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [bq, "cs", cn, 212, 303, Zn], [1, "cs", 2, 211, 304, uq], [Zn, "cs", 2, 211, 303, 1], [kr, "cs", cn, 211, 302, y], [Zn, "cs", Ir, 209, 302, bq], [1, "cs", 2, 209, 303, or], [1, "cs", dj, 209, 304, uq], [1, "cs", 2, 210, 304, hj], [1, "cs", 2, 208, 302, 1], [1, "cs", Go, 206, 303, 1], [$r, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, y], [kr, "cs", Xa, 195, 304, 1], [hj, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, Dj], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, ck], [1, "cs", 0, 197, 302, $r], [1, "cs", 0, 202, 302, 1], [$q, "cs", ks, 188, 302, bq], [or, "cs", ka, 194, 302, $q], [1, "cs", Zk, 197, 303, Dj], [1, "cs", 1, 201, 304, Zn], [bq, "cs", 1, 192, 302, bq], [1, "cs", hj, 189, 303, 1], [$q, "cs", 1, 205, 302, Zn], [1, "cs", 1, 188, 304, 1], [ck, "cs", dj, 207, 302, $r], [Zn, "cs", Sa, 207, 303, 1], [or, "cs", 2, 207, 304, y], [1, "cs", Ci, 206, 304, y], [uq, "cs", nq, 206, 302, uq], [Zn, "cs", nq, 205, 303, hj], [$q, "cs", 2, 204, 304, 1], [1, "cs", dj, 205, 304, 1], [y, "cs", 2, 204, 302, 1], [Dj, "cs", Ci, 203, 302, Zn], [kr, "cs", 2, 203, 303, 1], [Zk, "cs", Ir, 202, 303, $q], [y, "cs", 2, 201, 303, y], [Zn, "cs", cn, 201, 302, uq], [1, "cs", Xj, 200, 302, $r], [ck, "cs", Xj, 199, 302, 1], [y, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, bq], [1, "cs", nq, 199, 303, 1], [1, "cs", Pn, 200, 304, kr], [1, "cs", Xj, 202, 304, 1], [kr, "cs", 2, 197, 304, Zn], [hj, "cs", 2, 198, 304, kr], [y, "cs", uj, 196, 304, 1], [1, "cs", pn, 196, 303, 1], [Zk, "cs", 2, 196, 302, 1], [ck, "cs", Pn, 195, 302, 1], [Zk, "cs", Xj, 195, 303, bq], [or, "cs", Ci, 194, 303, 1], [y, "cs", 2, 194, 304, 1], [hj, "cs", uj, 193, 303, or], [$q, "cs", uj, 193, 302, ck], [ck, "cs", 2, 192, 303, Dj], [1, "cs", Xj, 192, 304, $r], [1, "cs", cn, 191, 304, or], [1, "cs", Xj, 190, 304, Zn], [uq, "cs", Sa, 190, 303, 1], [Dj, "cs", 2, 189, 302, kr], [1, "cs", uj, 190, 302, 1], [bq, "cs", nq, 191, 302, kr], [1, "cs", nq, 188, 303, 1], [1, "cs", Xa, 186, 303, 1], [1, "cs", gj, 183, 304, hj], [y, "cs", Xa, 184, 302, 1], [kr, "cs", 0, 181, 302, 1], [bq, "cs", ka, 176, 302, 1], [1, "cs", 0, 178, 303, $r], [1, "cs", Xa, 173, 304, bq], [ck, "cs", Xa, 170, 303, 1], [Zk, "cs", 0, 172, 302, 1], [1, "cs", uq, 182, 303, Zk], [uq, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [Dj, "cs", kr, 173, 302, hj], [1, "cs", or, 185, 304, Zk], [y, "cs", 1, 169, 304, Zn], [hj, "cs", wn, 187, 304, $q], [1, "cs", 3, 186, 304, or], [or, "cs", yr, 187, 303, 1], [kr, "cs", 3, 187, 302, 1], [1, "cs", R, 186, 302, 1], [$q, "cs", 3, 185, 302, 1], [1, "cs", wq, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, y], [1, "cs", Ui, 183, 302, Dj], [1, "cs", 3, 182, 302, 1], [1, "cs", yr, 184, 304, 1], [or, "cs", 3, 182, 304, uq], [$r, "cs", 3, 181, 304, uq], [bq, "cs", Oj, 179, 304, 1], [bq, "cs", 3, 180, 304, Dj], [1, "cs", 3, 181, 303, 1], [or, "cs", Ia, 180, 303, kr], [Zn, "cs", 3, 179, 303, 1], [1, "cs", Ia, 180, 302, 1], [1, "cs", Ui, 179, 302, y], [uq, "cs", 3, 178, 302, 1], [1, "cs", Qq, 177, 302, 1], [1, "cs", Qq, 177, 304, ck], [1, "cs", Qq, 177, 303, 1], [$q, "cs", R, 176, 303, or], [Zk, "cs", wq, 176, 304, $q], [Dj, "cs", 3, 174, 304, 1], [hj, "cs", R, 175, 303, bq], [1, "cs", 3, 174, 303, 1], [1, "cs", yr, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [ck, "cs", 3, 171, 303, Zk], [bq, "cs", Oj, 170, 304, y], [1, "cs", Qq, 171, 304, bq], [Dj, "cs", 3, 172, 304, Zn], [bq, "cs", 3, 174, 302, 1], [Zn, "cs", 3, 175, 302, uq], [1, "cs", Ia, 171, 302, 1], [ck, "cs", 3, 170, 302, Zn], [1, "cs", wn, 169, 302, $r], [1, "cs", Ui, 169, 303, Dj], [1, "cs", 0, 168, 302, 1], [Zn, "cs", ho, 166, 303, kr], [1, "cs", ks, 163, 304, $q], [bq, "cs", hk, 161, 302, kr], [$r, "cs", fs, 159, 303, 1], [ck, "cs", gj, 152, 304, $r], [1, "cs", ks, 155, 303, 1], [ck, "cs", Dj, 164, 303, 1], [uq, "cs", 1, 162, 303, hj], [1, "cs", 1, 158, 304, 1], [uq, "cs", Zn, 156, 302, $q], [1, "cs", 1, 153, 302, 1], [1, "cs", y, 154, 304, uq], [Zk, "cs", nq, 168, 304, 1], [1, "cs", 2, 168, 303, uq], [kr, "cs", dj, 167, 303, 1], [1, "cs", 2, 167, 304, $r], [Dj, "cs", 2, 166, 304, 1], [bq, "cs", Ir, 165, 304, Zk], [Zn, "cs", dj, 164, 304, 1], [1, "cs", 2, 165, 303, ck], [Zn, "cs", Ir, 167, 302, Zn], [kr, "cs", 2, 166, 302, 1], [uq, "cs", 2, 165, 302, uq], [1, "cs", Ci, 164, 302, 1], [1, "cs", Ci, 163, 302, 1], [y, "cs", 2, 162, 302, 1], [bq, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, or], [ck, "cs", nq, 160, 304, 1], [bq, "cs", 2, 159, 304, y], [1, "cs", 2, 161, 304, bq], [kr, "cs", 2, 161, 303, 1], [ck, "cs", Pn, 160, 303, kr], [1, "cs", 2, 160, 302, 1], [$r, "cs", pn, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", Ir, 157, 302, Zk], [Dj, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, kr], [ck, "cs", 2, 158, 303, Zn], [ck, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [y, "cs", Xj, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [$q, "cs", 2, 154, 303, ck], [Zn, "cs", 2, 154, 302, bq], [1, "cs", nq, 155, 302, 1], [Zk, "cs", nq, 152, 303, 1], [1, "cs", uj, 152, 302, 1], [uq, "cs", 0, 151, 302, ck], [bq, "cs", Go, 149, 303, 1], [kr, "cs", 0, 145, 304, bq], [1, "cs", fs, 147, 302, 1], [or, "cs", fs, 143, 303, 1], [1, "cs", gj, 141, 303, bq], [1, "cs", 1, 147, 304, uq], [Zn, "cs", kr, 145, 302, kr], [1, "cs", 1, 142, 302, 1], [kr, "cs", bq, 150, 304, 1], [1, "cs", pn, 151, 304, hj], [$r, "cs", dj, 151, 303, kr], [Zn, "cs", 2, 150, 303, 1], [1, "cs", Ir, 150, 302, 1], [1, "cs", Pn, 148, 302, Dj], [1, "cs", 2, 146, 302, 1], [bq, "cs", 2, 144, 302, 1], [Zk, "cs", 2, 141, 302, $q], [ck, "cs", cn, 141, 304, bq], [Zn, "cs", Pn, 142, 304, or], [1, "cs", 2, 142, 303, 1], [1, "cs", pn, 143, 304, kr], [1, "cs", 2, 144, 304, or], [bq, "cs", 2, 144, 303, or], [$r, "cs", 2, 148, 304, $q], [or, "cs", 2, 148, 303, hj], [1, "cs", dj, 146, 303, ck], [Zk, "cs", pn, 145, 303, kr], [1, "cs", 2, 147, 303, y], [1, "cs", 2, 146, 304, ck], [1, "cs", Pn, 149, 304, $r], [1, "cs", wq, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [y, "cs", 0, 139, 304, ck], [1, "cs", 0, 138, 302, hj], [or, "cs", uq, 139, 302, 1], [1, "cs", 2, 140, 302, $r], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, $q], [1, "cs", dj, 138, 303, y], [$q, "cs", 2, 138, 304, 1], [1, "cs", pn, 140, 304, 1], [1, "cs", 0, 137, 304, or], [Dj, "cs", 0, 135, 303, kr], [Zn, "cs", 0, 133, 304, 1], [1, "cs", ck, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [Zn, "cs", 2, 137, 302, kr], [1, "cs", pn, 136, 303, y], [$q, "cs", 2, 137, 303, 1], [or, "cs", 2, 136, 304, y], [hj, "cs", Xj, 134, 304, 1], [1, "cs", Ci, 134, 303, Zk], [1, "cs", 2, 133, 303, Zk], [or, "cs", 2, 132, 304, 1], [$q, "cs", Xa, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", ck, 132, 302, hj], [1, "cs", Xj, 135, 302, bq], [or, "cs", 2, 133, 302, 1], [1, "cs", Sa, 132, 303, 1], [$q, "cs", Ci, 131, 303, hj], [1, "cs", Pn, 130, 304, y], [1, "cs", 2, 131, 304, 1], [1, "cs", uj, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [kr, "cs", 2, 130, 302, 1], [hj, "cs", 3, 127, 304, Zn], [1, "cs", nq, 132, 301, 1], [bq, "cs", Sa, 133, 301, 1], [y, "cs", Ci, 134, 301, Dj], [1, "cs", 2, 135, 301, Zn], [1, "cs", R, 131, 301, 1], [1, "cs", 3, 136, 301, or], [Dj, "cs", wq, 136, 178, y], [1, "cs", 0, 136, 183, 1], [1, "cs", dj, 136, 182, 1], [Dj, "cs", $r, 136, 181, 1], [1, "cs", ka, 136, 179, 1], [y, "cs", 3, 136, 180, $r], [Zn, "cs", 2, 135, 183, 1], [1, "cs", Zn, 135, 182, 1], [$q, "cs", R, 135, 180, bq], [1, "cs", fs, 134, 183, Dj], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, kr], [1, "cs", uq, 132, 183, 1], [uq, "cs", Ui, 131, 183, 1], [1, "cs", Xj, 135, 181, 1], [1, "cs", Sa, 134, 182, uq], [1, "cs", 3, 134, 181, 1], [kr, "fod", ka, 213, 301, 0], [y, "fod", 0, 204, 301, 0], [1, "fod", Dj, 196, 288, 0], [uq, "fod", bq, 198, 283, Xa], [1, "fod", Dj, 190, 288, ks], [1, "fod", hj, 189, 296, hk], [1, "fod", uq, 193, 293, ks], [1, "fod", 1, 183, 292, 0], [ck, "fod", uq, 186, 287, fs], [1, "fod", 1, 190, 290, ka], [Zk, "fod", $q, 218, 271, ks], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, ks], [1, "fod", Zn, 205, 263, Xa], [kr, "fod", 1, 216, 258, hk], [kr, "fod", Sa, 201, 294, gj], [1, "fod", Sa, 190, 296, 0], [ck, "fod", Xj, 188, 299, 0], [$q, "fod", uj, 186, 297, 0], [1, "fod", Ir, 188, 296, 0], [1, "fod", Xj, 189, 291, ks], [bq, "fod", uj, 189, 286, 0], [$q, "fod", 2, 191, 286, Go], [hj, "fod", dj, 197, 286, ho], [1, "fod", Sa, 195, 290, ho], [1, "fod", 2, 186, 288, ks], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, gj], [1, "fod", 2, 198, 286, Xa], [Zk, "fod", nq, 196, 283, 0], [Dj, "fod", 2, 196, 281, ho], [uq, "fod", 2, 201, 280, hk], [1, "fod", cn, 205, 287, 0], [uq, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [y, "fod", 2, 209, 277, hk], [y, "fod", Ir, 217, 278, gj], [hj, "fod", 2, 219, 275, 0], [$r, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", Sa, 217, 265, hk], [ck, "fod", Sa, 213, 267, 0], [$q, "fod", 2, 208, 264, Xa], [bq, "fod", 2, 206, 261, ka], [1, "fod", 2, 203, 265, 0], [1, "fod", pn, 204, 270, 0], [Zk, "fod", 2, 196, 267, 0], [1, "fod", uj, 214, 261, 0], [Zn, "fod", dj, 211, 260, Go], [Dj, "fod", nq, 218, Dn, Xa], [kr, "fod", dj, 219, 262, ho], [1, "fod", Xj, 220, 253, hk], [1, "fod", 2, 211, 257, ka], [1, "la", 3, 198, 27, 1], [Zn, "la", Ui, 201, 30, $r], [1, "la", wq, 200, 32, 1], [1, "la", 3, 198, 33, 1], [y, "la", R, 196, 33, Zk], [$q, "la", wq, 194, 32, Zn], [kr, "la", 3, 194, 28, bq], [1, "la", ks, 200, 28, Zn], [1, "la", hk, 193, 30, 1], [1, "la", 3, 196, 27, 1], [y, "la", wn, 199, 30, Zn], [1, "la", wn, 197, 29, or], [1, "la", 3, 195, 30, 1], [hj, "la", Ia, 197, 31, Dj], [1, "la", Pn, 201, 33, $r], [1, "la", 4, 202, 34, 1], [uq, "la", qa, 202, 35, kr], [1, "la", oo, 203, 36, Zn], [1, "la", 4, 204, 37, ck], [1, "la", 2, 205, 38, Zn], [or, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", nq, 206, 41, 1], [or, "la", $r, 207, 42, Dj], [1, "la", Zk, 205, 41, 1], [1, "la", Qa, 208, 43, y], [1, "la", 4, 209, 43, 1], [ck, "la", 1, 210, 43, 1], [$q, "la", Sa, 211, 43, $r], [y, "la", Xk, 212, 43, Zk], [1, "la", Io, 213, 44, 1], [or, "la", R, 223, 54, 1], [bq, "la", wn, 221, 53, kr], [or, "la", 3, 219, 53, Zk], [kr, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, Zk], [bq, "la", 4, 216, 51, Zk], [1, "la", 1, 215, 50, 1], [1, "la", va, 212, 46, uq], [kr, "la", ck, 210, 44, 1], [hj, "la", wq, 206, 50, ck], [Zk, "re", gj, 217, 24, y], [1, "re", ka, 207, Un, 1], [1, "de", 44, 54, 14, 0], [$q, "de", 44, 53, 13, fs], [ck, "de", 44, 51, Un, Xa], [1, "de", 44, 49, l, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, Go], [1, "cs", 0, 221, yn, 1], [kr, "cs", 0, 224, An, 1], [1, "cs", 1, 223, 8, kr], [ck, "cs", Pn, 224, Cr, 1], [1, "cs", 2, 222, 8, Zk], [$r, "cs", Xa, 224, 6, 1], [$q, "cs", 0, 222, Xk, 1], [or, "cs", 0, 219, 7, 1], [bq, "cs", 1, 220, 5, 1], [Zk, "cs", 1, 217, 7, $q], [bq, "cs", Xj, 224, 5, Zn], [1, "cs", 2, 223, wr, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [Zn, "cs", 2, 223, 6, or], [1, "cs", 2, 222, 6, ck], [or, "cs", 2, 222, 7, hj], [1, "cs", 2, 221, 7, Dj], [uq, "cs", dj, 221, pi, Zk], [Dj, "cs", uj, 221, 5, 1], [kr, "cs", 2, 220, _n, y], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", pn, 219, 8, Zn], [1, "cs", cn, 219, 6, 1], [1, "cs", 2, 219, zq, Zn], [ck, "cs", ho, 218, Lj, 1], [1, "cs", 0, 216, yn, hj], [1, "cs", dj, 218, 8, 1], [Zk, "cs", pn, 217, te, 1], [1, "cs", Ir, 218, 7, uq], [1, "cs", Xj, 218, 6, 1], [Dj, "cs", 2, 217, jn, 1], [1, "cs", 2, 217, Vn, $r], [$q, "cs", 1, 215, 6, Zk], [1, "cs", or, 213, 5, y], [1, "cs", 0, 214, jn, 1], [or, "cs", 0, 216, 5, 1], [1, "cs", ho, 213, Cr, 1], [$q, "cs", fs, 211, 7, $q], [Zn, "cs", 0, 209, 5, 1], [Zk, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [hj, "cs", Ci, 216, 6, ck], [Dj, "cs", Ir, 216, Ka, y], [Dj, "cs", 2, 215, 7, bq], [$r, "cs", Pn, 215, bn, kr], [1, "cs", uj, 214, te, $q], [$r, "cs", dj, 214, 7, Zk], [hj, "cs", 2, 215, Xk, 1], [1, "cs", 2, 214, 5, $q], [1, "cs", 2, 213, 6, 1], [kr, "cs", 2, 213, 7, 1], [uq, "cs", 2, 212, 7, 1], [1, "cs", y, 211, 5, 1], [1, "cs", 1, 209, bn, y], [Zn, "cs", 2, 212, 8, 1], [uq, "cs", Sa, 211, kq, or], [hj, "cs", Sa, 210, 8, Dj], [Zn, "cs", uj, 209, He, Zk], [1, "cs", 2, 210, 7, 1], [kr, "cs", 2, 210, es, $r], [1, "cs", pn, 212, 6, 1], [1, "cs", nq, 212, O, 1], [1, "cs", dj, 211, 6, 1], [$r, "cs", 2, 210, 5, 1], [1, "cs", pn, 209, es, uq], [1, "cs", uj, 208, 6, 1], [Dj, "cs", 2, 208, 5, Dj], [1, "cs", 2, 207, E, bq], [or, "cs", 2, 207, 6, 1], [kr, "cs", 2, 207, 5, $r], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, I, 1], [1, "cs", 2, 206, za, uq], [1, "cs", 0, 204, _j, or], [kr, "cs", 0, 205, za, ck], [1, "cs", 0, 203, 5, 1], [Zk, "cs", gj, 202, lo, 1], [1, "cs", 0, 199, I, 1], [1, "cs", ho, 200, za, ck], [$r, "cs", 0, 197, 6, 1], [y, "cs", 0, 195, 8, uq], [or, "cs", ka, 194, es, 1], [ck, "cs", y, 202, 8, Dj], [1, "cs", Zn, 206, E, 1], [or, "cs", y, 201, zq, 1], [1, "cs", ck, 197, 8, 1], [bq, "cs", 1, 192, E, 1], [hj, "cs", 1, 195, 5, kr], [Zk, "cs", dj, 205, Tk, 1], [or, "cs", Ci, 205, kq, $q], [Zn, "cs", Sa, 206, 8, 1], [1, "cs", 2, 204, 7, kr], [1, "cs", Sa, 204, 6, $q], [$q, "cs", 2, 204, O, 1], [1, "cs", dj, 205, O, 1], [or, "cs", cn, 203, _n, $r], [1, "cs", Pn, 203, lq, $q], [$q, "cs", 2, 203, 8, $q], [1, "cs", 2, 201, 8, ck], [Zk, "cs", 2, 200, Cr, 1], [kr, "cs", 2, 200, 7, y], [kr, "cs", dj, 201, 7, bq], [1, "cs", nq, 201, 6, $q], [1, "cs", pn, 202, 5, 1], [1, "cs", 2, 202, _n, 1], [1, "cs", 2, 200, 5, $q], [ck, "cs", Xj, 199, zq, ck], [hj, "cs", Pn, 197, as, or], [kr, "cs", 2, 196, Lj, 1], [kr, "cs", 2, 198, 5, y], [kr, "cs", Xj, 198, f, or], [hj, "cs", Ci, 199, 6, $q], [1, "cs", 2, 199, 7, uq], [bq, "cs", 2, 198, Ka, kr], [1, "cs", 2, 198, 8, $q], [1, "cs", 2, 197, 7, or], [hj, "cs", 2, 196, lo, 1], [1, "cs", 2, 196, 8, 1], [$r, "cs", 2, 196, dn, 1], [1, "cs", 2, 195, _n, hj], [1, "cs", Xj, 195, 7, bq], [1, "cs", 2, 194, 7, 1], [Dj, "cs", Pn, 193, I, $q], [1, "cs", nq, 194, 8, 1], [or, "cs", cn, 193, Tk, $q], [1, "cs", Ci, 193, 6, 1], [1, "cs", 2, 193, zq, Zk], [hj, "cs", 2, 194, 5, bq], [1, "cs", 0, 192, Lj, or], [ck, "cs", Go, 191, _j, 1], [$q, "cs", Go, 190, 6, or], [$q, "cs", Go, 188, Tk, 1], [1, "cs", fs, 186, 8, 1], [hj, "cs", 0, 186, 5, uq], [bq, "cs", 0, 184, 7, Zn], [bq, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, $r], [$q, "cs", hj, 189, 8, bq], [ck, "cs", 1, 183, 8, kr], [1, "cs", 1, 188, 5, 1], [1, "cs", Dj, 185, 6, or], [y, "cs", 1, 180, Tk, Zn], [Dj, "cs", 1, 183, 5, Zk], [1, "cs", uq, 178, Sr, kr], [$q, "cs", bq, 177, f, 1], [hj, "cs", 1, 173, Do, Zk], [Dj, "cs", 1, 171, Zq, y], [1, "cs", ho, 177, Sr, 1], [Zn, "cs", fs, 175, lq, ck], [$q, "cs", Go, 179, as, Zn], [uq, "cs", 0, 174, Gj, $r], [1, "cs", 0, 176, br, 1], [hj, "cs", Go, 172, 8, kr], [1, "cs", ho, 170, kq, uq], [y, "cs", fs, 169, 6, hj], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, te, hj], [1, "cs", uj, 191, 7, y], [1, "cs", 2, 191, es, Zn], [bq, "cs", Ir, 191, 5, 1], [$r, "cs", 2, 190, 5, 1], [1, "cs", pn, 189, Vn, Zk], [1, "cs", 2, 189, 6, Zn], [Zn, "cs", 2, 189, Tk, 1], [1, "cs", 2, 190, Do, $r], [1, "cs", Xj, 190, Sr, 1], [bq, "cs", 2, 188, 8, kr], [1, "cs", 2, 187, 8, kr], [ck, "cs", Pn, 187, 7, kr], [1, "cs", pn, 187, _n, uq], [Zn, "cs", Ir, 188, 6, 1], [1, "cs", Pn, 187, 5, kr], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, E, 1], [1, "cs", 2, 185, Ka, Zn], [$r, "cs", Pn, 185, Nk, 1], [Zk, "cs", 2, 184, 8, 1], [Dj, "cs", 2, 183, 7, hj], [1, "cs", uj, 183, dn, $q], [kr, "cs", 2, 184, dn, Zn], [1, "cs", pn, 184, wr, ck], [Dj, "cs", 2, 185, Xk, Dj], [hj, "cs", 2, 182, _n, 1], [Dj, "cs", cn, 182, nj, y], [$q, "cs", Ci, 181, lo, Zn], [1, "cs", nq, 181, I, $q], [1, "cs", 2, 180, Nk, 1], [bq, "cs", nq, 179, ar, uq], [$r, "cs", uj, 182, 5, 1], [1, "cs", 2, 181, br, y], [1, "cs", pn, 180, 5, 1], [hj, "cs", 2, 180, 6, $r], [Zk, "cs", 2, 179, _n, y], [1, "cs", Xj, 179, Do, 1], [hj, "cs", Sa, 178, nj, $q], [hj, "cs", Sa, 178, jn, $q], [bq, "cs", cn, 178, 5, 1], [$r, "cs", 2, 177, Yo, 1], [1, "cs", Xj, 177, 7, 1], [1, "cs", nq, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [$r, "cs", cn, 175, Vn, 1], [kr, "cs", Xj, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", Ir, 175, kq, $r], [1, "cs", cn, 173, _j, 1], [bq, "cs", Pn, 174, lo, 1], [Zn, "cs", Pn, 173, 6, 1], [hj, "cs", 2, 174, jn, kr], [Zn, "cs", 2, 172, wr, kr], [1, "cs", dj, 173, Yo, 1], [uq, "cs", pn, 172, 6, 1], [1, "cs", 2, 172, lo, $r], [bq, "cs", 2, 171, Cr, 1], [1, "cs", pn, 170, 7, or], [y, "cs", 2, 170, 6, y], [1, "cs", Ci, 170, 5, hj], [ck, "cs", cn, 171, 5, 1], [1, "cs", 2, 171, za, $r], [1, "cs", Ir, 169, 5, $q], [1, "cs", 2, 169, 7, 1], [Dj, "cs", 2, 169, 8, 1], [kr, "cs", hj, 168, 7, 1], [ck, "cs", 1, 166, 5, ck], [1, "cs", Zn, 164, 7, bq], [$r, "cs", 1, 160, He, 1], [Zk, "cs", $q, 156, _j, Dj], [hj, "cs", Xa, 166, 8, 1], [uq, "cs", ks, 168, 5, 1], [$r, "cs", Xa, 164, 6, 1], [1, "cs", 0, 162, Do, 1], [$q, "cs", 0, 158, 8, $r], [1, "cs", 0, 157, za, 1], [or, "cs", ks, 161, 5, 1], [hj, "cs", hk, 159, 5, 1], [1, "cs", 0, 155, lo, Zn], [1, "cs", gj, 154, 5, 1], [uq, "cs", hk, 151, lq, Dj], [1, "cs", 1, 153, ar, hj], [1, "cs", uq, 151, wr, 1], [$r, "cs", 2, 168, f, kr], [$q, "cs", 2, 168, 8, 1], [bq, "cs", Pn, 167, lj, hj], [uq, "cs", Ir, 167, E, $q], [1, "cs", 2, 167, 6, 1], [ck, "cs", 2, 167, as, 1], [Dj, "cs", 2, 166, f, 1], [y, "cs", 2, 166, lo, Zn], [1, "cs", 2, 165, Do, 1], [Zk, "cs", Xj, 165, es, y], [bq, "cs", 2, 165, br, ck], [hj, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [uq, "cs", Ci, 162, 5, 1], [1, "cs", cn, 162, 6, Zk], [bq, "cs", uj, 163, 6, uq], [1, "cs", uj, 163, lq, hj], [1, "cs", nq, 163, kq, 1], [y, "cs", cn, 164, 8, 1], [or, "cs", cn, 165, 8, $q], [1, "cs", pn, 161, 8, uq], [1, "cs", Sa, 162, ar, $r], [uq, "cs", nq, 160, 8, 1], [1, "cs", Sa, 159, 8, 1], [1, "cs", 2, 159, Tk, $r], [1, "cs", 2, 159, f, ck], [1, "cs", Pn, 160, 5, or], [hj, "cs", Pn, 160, 6, 1], [uq, "cs", Ir, 161, es, 1], [kr, "cs", cn, 161, 7, 1], [Zk, "cs", Pn, 157, Do, bq], [1, "cs", 2, 158, 7, y], [ck, "cs", pn, 158, pi, 1], [uq, "cs", pn, 158, zq, 1], [or, "cs", 2, 155, 5, y], [1, "cs", cn, 155, za, 1], [1, "cs", dj, 156, _n, 1], [1, "cs", 2, 156, nj, 1], [1, "cs", 2, 157, lj, kr], [$q, "cs", 2, 155, yn, 1], [bq, "cs", uj, 154, 8, 1], [1, "cs", 2, 154, 7, ck], [ck, "cs", 2, 154, 6, 1], [$r, "cs", 2, 152, I, kr], [1, "cs", 2, 153, 7, Dj], [uq, "cs", 2, 153, 6, or], [1, "cs", 2, 153, Lj, ck], [1, "cs", 2, 152, Lj, ck], [1, "cs", uj, 152, 6, Zk], [uq, "cs", 2, 152, 7, bq], [Zk, "cs", Pn, 151, 6, ck], [y, "cs", Sa, 157, as, 1], [1, "cs", y, 156, 5, 1], [1, "cs", 0, 150, Xk, hj], [1, "cs", 0, 149, 7, 1], [Zn, "cs", ks, 147, 8, 1], [1, "cs", fs, 146, 5, 1], [Dj, "cs", 0, 144, 7, or], [Zn, "cs", ka, 142, 5, 1], [1, "cs", 1, 147, 6, bq], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, wr, 1], [Dj, "cs", 2, 148, Gj, 1], [ck, "cs", nq, 149, Vn, ck], [hj, "cs", 2, 150, pi, 1], [hj, "cs", 2, 150, Nk, kr], [bq, "cs", cn, 151, lj, 1], [Zn, "cs", 2, 150, lo, 1], [1, "cs", 2, 149, _j, 1], [1, "cs", pn, 148, 8, 1], [1, "cs", cn, 149, f, bq], [$r, "cs", Ci, 148, 6, ck], [1, "cs", cn, 148, 7, Zk], [1, "cs", nq, 147, lo, 1], [hj, "cs", 2, 147, 5, ck], [y, "cs", uj, 146, _n, 1], [$q, "cs", Ir, 146, Do, 1], [1, "cs", 2, 146, 8, bq], [1, "cs", pn, 145, 7, 1], [bq, "cs", 2, 145, f, uq], [1, "cs", Pn, 145, 5, 1], [ck, "cs", 2, 144, iq, 1], [1, "cs", Xj, 143, zq, 1], [1, "cs", Ci, 143, _n, uq], [kr, "cs", 2, 142, pi, 1], [1, "cs", 2, 141, 5, 1], [Zk, "cs", uj, 224, j, 1], [1, "cs", ks, 224, P, 1], [1, "cs", fs, 224, 13, hj], [1, "cs", ho, 224, Lr, hj], [1, "cs", 0, 224, Hk, $q], [1, "cs", Xa, 224, 22, 1], [ck, "cs", Go, 224, 24, 1], [1, "cs", Go, 224, 29, $r], [y, "cs", 0, 224, 33, y], [bq, "cs", ka, 224, 35, 1], [hj, "cs", 0, 224, 38, 1], [$q, "cs", 1, 224, tq, ck], [1, "cs", Zk, 224, 20, Zn], [bq, "cs", 1, 224, 27, 1], [Zk, "cs", 1, 224, 31, ck], [1, "cs", Zn, 224, 36, Zn], [Zn, "cs", Xj, 224, Gq, Dj], [bq, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, uk, 1], [1, "cs", uj, 224, 18, 1], [1, "cs", 2, 224, 21, Zk], [1, "cs", 2, 224, 23, 1], [Zn, "cs", 2, 224, 25, 1], [Zk, "cs", 2, 224, 26, 1], [1, "cs", Xj, 224, 28, 1], [1, "cs", 2, 224, 30, ck], [Zn, "cs", 2, 224, 32, hj], [1, "cs", 2, 224, 34, y], [1, "cs", 2, 224, 37, 1], [bq, "cs", 2, 224, 39, 1], [bq, "cs", 0, 224, 41, bq], [1, "cs", fs, 224, 44, or], [ck, "cs", 0, 224, 46, y], [$r, "cs", ka, 224, 52, ck], [1, "cs", Go, 224, 57, bq], [hj, "cs", 1, 224, 47, 1], [1, "cs", Ir, 224, 40, $q], [1, "cs", 2, 224, 42, $q], [1, "cs", 2, 224, 43, 1], [or, "cs", 2, 224, 45, y], [1, "cs", 2, 224, 49, ck], [1, "cs", 1, 224, 50, $q], [uq, "cs", Xj, 224, 51, y], [$q, "la", Ui, 224, 54, 1], [bq, "cs", uj, 224, 56, 1], [1, "cs", Ci, 224, 58, $q], [1, "cs", Xj, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [bq, "cs", 0, 224, 66, 1], [1, "cs", ka, 224, 70, 1], [bq, "cs", 0, 224, 74, hj], [or, "cs", ks, 224, 77, 1], [1, "cs", 1, 224, 62, y], [1, "cs", ck, 224, 68, bq], [1, "cs", 1, 224, 72, or], [1, "cs", 1, 224, 76, 1], [1, "cs", uq, 224, 80, 1], [1, "cs", $q, 224, 83, 1], [ck, "cs", $q, 224, 91, 1], [$q, "cs", hj, 224, 95, Zk], [1, "cs", 1, 224, 97, bq], [uq, "cs", fs, 224, 85, 1], [1, "cs", 0, 224, 88, y], [1, "cs", 0, 224, 93, 1], [1, "cs", ho, 224, 98, 1], [$q, "cs", 2, 224, 59, 1], [hj, "cs", 2, 224, 63, $q], [1, "cs", 2, 224, 65, Dj], [hj, "cs", 2, 224, 67, hj], [ck, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, hj], [1, "cs", dj, 224, 73, 1], [Zn, "cs", 2, 224, 75, y], [1, "cs", pn, 224, 78, 1], [y, "cs", 2, 224, 79, $q], [1, "cs", 2, 224, 81, 1], [1, "cs", dj, 224, 82, 1], [y, "cs", cn, 224, 84, $q], [y, "cs", dj, 224, 86, 1], [1, "cs", cn, 224, 87, 1], [$q, "cs", 2, 224, 89, $r], [$q, "cs", Ir, 224, 90, 1], [bq, "cs", nq, 224, 92, hj], [$r, "cs", Ir, 224, 94, Zn], [Zk, "cs", Ir, 224, 96, 1], [or, "cs", Pn, 224, 99, 1], [1, "cs", uj, 224, 100, uq], [Zn, "cs", fs, 224, 101, Zk], [y, "cs", uq, 224, 103, 1], [Zk, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, $r], [$r, "cs", 2, 223, 9, 1], [1, "cs", nq, 222, bk, Zk], [or, "cs", cn, 221, bk, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, Zk], [or, "cs", wq, 223, sk, 1], [1, "cs", 3, 222, 11, or], [hj, "cs", yr, 220, ln, 1], [$r, "cs", 3, 219, Mi, 1], [Dj, "cs", 3, 221, Ar, 1], [hj, "re", nq, 219, sk, $q], [1, "re", $r, 218, 18, $q], [1, "re", Zn, 214, cj, 1], [$r, "cs", 0, 221, 20, y], [1, "cs", 1, 223, en, 1], [1, "cs", 2, 222, 19, y], [1, "cs", dj, 223, 19, 1], [Dj, "cs", 2, 223, 20, uq], [hj, "cs", 2, 222, 20, ck], [1, "cs", uj, 220, 21, ck], [1, "cs", 0, 219, 21, 1], [Zn, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, or], [1, "cs", 3, 222, 21, $r], [Zk, "cs", Ui, 220, 22, uq], [$q, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [Dj, "cs", 0, 211, pq, 1], [1, "cs", 1, 211, Yq, $q], [1, "cs", hj, 210, 12, hj], [uq, "cs", 0, 211, Ga, 1], [or, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, j, 1], [1, "cs", cn, 210, 11, 1], [$q, "cs", Sa, 212, Zi, y], [1, "cs", 2, 210, cj, ck], [y, "cs", 2, 211, 12, 1], [$q, "cs", pn, 211, 11, Dj], [1, "cs", Pn, 211, Lq, 1], [uq, "cs", Pn, 212, 15, kr], [1, "cs", Ci, 210, 14, hj], [1, "cs", 3, 211, wo, 1], [1, "cs", R, 213, re, bq], [hj, "cs", 3, 212, Yq, uq], [1, "cs", 3, 223, 21, Zk], [uq, "cs", 3, 209, 9, hj], [1, "la", Oj, 223, 22, 1], [hj, "la", wn, 221, 23, Dj], [1, "la", R, 207, 9, y], [1, "la", Oj, 209, Xn, y], [1, "la", 0, 209, 12, hj], [Zn, "la", 4, 209, 14, 1], [1, "la", Ik, 219, 23, 1], [1, "la", yr, 210, cs, 1], [1, "la", 3, 217, 22, 1], [$q, "la", 4, 212, 16, 1], [Zk, "la", 2, 214, Bi, Dj], [1, "la", 4, 213, 20, kr], [1, "la", y, 212, 21, hj], [1, "la", jo, 215, li, kr], [or, "la", Ir, 216, 17, 1], [Zk, "la", 5, 216, 16, 1], [Zn, "la", 5, 216, we, $q], [hj, "la", 1, 217, 16, 1], [1, "la", Xj, 218, Oa, 1], [1, "la", 2, 216, 14, $q], [Dj, "la", 2, 219, 16, 1], [1, "la", Yo, 220, _q, 1], [1, "la", 5, 216, Ek, ck], [1, "la", 4, 217, 15, bq], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, hj], [$r, "cs", Sa, 213, 45, 1], [bq, "cs", Xa, 214, 46, Zk], [Zn, "cs", 2, 215, 46, 1], [Dj, "cs", 3, 213, 46, 1], [$r, "cs", 3, 214, 47, 1], [bq, "cs", R, 214, 48, 1], [Zn, "cs", yr, 216, 46, 1], [$r, "cs", fs, 208, ie, 1], [1, "cs", 0, 210, 21, Zk], [1, "cs", ka, 212, 23, kr], [Zk, "cs", gj, 213, 25, hj], [Zk, "cs", 2, 213, 24, 1], [kr, "cs", 2, 211, 22, 1], [hj, "cs", cn, 210, Rq, 1], [1, "cs", cn, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", pn, 211, 21, Dj], [Zn, "cs", uj, 212, 22, 1], [Zn, "cs", 2, 213, 23, hj], [kr, "cs", yr, 213, 26, y], [1, "cs", 3, 207, ie, $r], [1, "la", 4, 192, 33, bq], [1, "la", qa, 191, 34, $r], [hj, "la", 4, 190, 35, kr], [1, "la", 3, 189, 37, Dj], [hj, "la", 3, 188, 39, bq], [kr, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, bq], [kr, "la", uj, 183, 39, 1], [1, "la", 1, 182, 40, 1], [uq, "la", 2, 181, 41, uq], [1, "la", Gj, 180, 41, 1], [1, "la", 5, 179, 41, y], [1, "la", 4, 192, 28, $r], [hj, "la", Qa, 191, 28, ck], [Zn, "la", oo, 190, 27, y], [ck, "la", Qq, 188, 27, 1], [1, "la", va, 187, 26, bq], [1, "la", 4, 186, 25, 1], [bq, "la", T, 185, 25, $r], [Dj, "la", Qa, 184, 24, ck], [1, "la", Gj, 184, 23, $r], [or, "la", 2, 184, 22, ck], [or, "la", 5, 184, 21, 1], [1, "la", Dj, 183, 20, 1], [1, "la", 5, 182, da, or], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [$q, "la", Sa, 179, 20, 1], [1, "la", 4, 178, 19, 1], [or, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, Zk], [Zn, "cs", 0, 177, 15, $r], [1, "cs", 0, 175, Mo, $r], [1, "cs", ka, 180, 16, $r], [1, "cs", 0, 174, 19, 1], [Zn, "cs", ho, 172, 20, 1], [1, "cs", 1, 175, 15, Zn], [1, "cs", hj, 172, en, hj], [Dj, "cs", 1, 181, 15, 1], [1, "cs", Ci, 179, 15, 1], [1, "cs", 2, 177, uk, uq], [1, "cs", 2, 176, Un, 1], [1, "cs", Sa, 174, li, Zk], [1, "cs", dj, 173, Hj, 1], [bq, "cs", cn, 172, 19, 1], [kr, "cs", cn, 173, 18, or], [hj, "cs", cn, 173, Lr, Zn], [1, "cs", Pn, 174, Cn, $q], [1, "cs", 2, 174, 16, 1], [or, "cs", Ci, 175, 16, uq], [1, "cs", dj, 176, 15, bq], [1, "cs", 2, 178, 15, 1], [1, "cs", Sa, 178, 16, y], [1, "cs", Ir, 179, 16, 1], [ck, "cs", 2, 180, Pj, 1], [$q, "cs", uj, 181, 16, ck], [1, "cs", Qq, 182, 16, hj], [or, "cs", 3, 172, 21, 1], [kr, "la", hj, 175, 19, 1], [1, "la", dj, 174, 20, 1], [Zk, "la", 2, 173, ie, ck], [hj, "la", $q, 180, jr, 1], [$q, "la", Xj, 181, s, bq], [uq, "la", Ui, 191, ie, 1], [uq, "s", 0, 217, 30, 1], [1, "s", ks, 208, 35, Dj], [1, "s", 0, 204, 24, uq], [1, "s", 1, 218, 32, Dj], [1, "s", 1, 207, 34, y], [Zk, "s", $r, 202, 23, 1], [kr, "s", Dj, 195, Ao, 1], [1, "s", cn, 222, 28, 1], [or, "s", Sa, 212, 38, 1], [Zk, "s", Ci, 207, 23, Zk], [uq, "s", 2, 202, Hn, 1], [ck, "s", Xj, 195, 18, 1], [uq, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", Pn, 188, 16, 1], [Zn, "s", 1, 186, 14, 1], [kr, "s", or, 201, 16, 1], [hj, "g", ck, 216, 31, Dj], [1, "g", 0, 200, 15, 1], [kr, "g", 0, 202, 40, 1], [$r, "g", 0, 189, 32, bq], [uq, "g", gj, 204, 28, bq], [1, "g", 0, 196, 24, Zk], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, Zn], [1, "s", Xa, 201, 45, 1], [1, "a", Go, 210, 29, 1], [1, "a", 0, 200, hs, hj], [kr, "cs", hk, 200, 34, Dj], [bq, "cs", ka, 193, 27, $q], [or, "cs", 1, 203, 30, 1], [Zk, "cs", 1, 191, 31, 1], [Zn, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [Zk, "cs", Pn, 192, 27, bq], [kr, "cs", Sa, 192, 32, Dj], [y, "cs", pn, 203, 31, $q], [1, "cs", Pn, 202, 31, 1], [1, "cs", dj, 202, 30, 1], [kr, "cs", 3, 202, 29, 1], [$q, "cs", 3, 201, 32, hj], [Dj, "cs", Qq, 199, 35, y], [1, "cs", ka, 193, 34, 1], [1, "cs", 2, 194, 34, or], [or, "cs", cn, 198, 35, hj], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, $q], [$q, "cs", ks, 191, 30, uq], [1, "cs", 3, 190, 29, $q], [uq, "la", Oj, 180, 69, 1], [1, "la", 3, 182, 68, uq], [kr, "la", Ui, 184, 68, 1], [1, "la", 3, 186, 70, 1], [ck, "la", yr, 184, 72, 1], [$r, "la", Ia, 182, 72, or], [1, "la", wn, 180, 71, bq], [1, "cs", 0, 186, 68, kr], [or, "cs", 0, 187, 70, Zk], [1, "cs", Go, 183, 74, 1], [hj, "cs", fs, 178, 70, hj], [$q, "cs", Ir, 182, 66, 1], [1, "cs", 2, 182, 74, Dj], [y, "cs", pn, 181, 73, bq], [1, "cs", 2, 180, 74, hj], [1, "cs", Ir, 181, 74, 1], [1, "la", 0, 184, 70, bq], [Dj, "la", Oj, 182, 70, or], [1, "cs", Xj, 181, 67, ck], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [$r, "la", Ik, 187, 69, Zk], [y, "la", 1, 188, 68, $r], [hj, "la", jo, 189, 68, 1], [Dj, "la", Sa, 190, 68, 1], [1, "la", uq, 191, 68, bq], [$q, "la", Qa, 192, 68, Dj], [1, "la", Ci, 193, 68, 1], [y, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", O, 195, 71, 1], [hj, "la", Zk, 194, 71, hj], [y, "la", 2, 196, 72, bq], [1, "la", wk, 196, 71, 1], [or, "la", $r, 197, 73, 1], [1, "la", as, 196, 73, Dj], [1, "la", 5, 198, 73, 1], [$r, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [Dj, "la", Dj, 205, 72, 1], [1, "la", Ci, 206, 72, 1], [$r, "la", Ba, 207, 72, bq], [1, "la", 1, 208, 72, bq], [hj, "la", Zn, 209, 73, 1], [1, "la", 2, 209, 74, y], [1, "la", Ba, 211, 76, hj], [1, "la", 4, 210, 75, 1], [or, "la", Vn, 212, 76, Zn], [1, "la", qa, 202, 75, 1], [1, "la", Sa, 203, 76, Zn], [1, "la", 4, 204, 77, kr], [1, "la", dj, 204, 78, Zk], [Zk, "la", Sa, 204, 79, 1], [1, "la", Yo, 204, 80, 1], [$q, "cs", hk, 202, 74, 1], [Zn, "cs", hj, 203, 74, 1], [kr, "cs", 2, 204, 73, uq], [or, "cs", cn, 203, 75, 1], [kr, "cs", 3, 204, 76, uq], [1, "cs", 3, 205, 73, Dj], [y, "cs", 0, 205, 74, 1], [1, "cs", dj, 204, 74, hj], [Zk, "cs", 2, 204, 75, y], [Zk, "cs", uj, 206, 73, uq], [1, "cs", 3, 207, 73, 1], [1, "cs", Pn, 205, 76, 1], [1, "cs", Ia, 205, 77, 1], [Zk, "la", yr, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", qa, 184, 64, 1], [1, "la", 4, 185, 63, bq], [1, "la", 1, 185, 62, Zn], [$q, "la", pn, 185, 61, or], [hj, "la", Ci, 185, 60, ck], [$q, "la", T, 186, 59, kr], [y, "la", ck, 187, 58, y], [$r, "la", 2, 187, 57, bq], [1, "la", pn, 187, 56, $q], [1, "s", 0, 191, 60, Zk], [bq, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [y, "s", Xj, 202, 49, 1], [1, "g", 2, 197, 55, 1], [or, "g", Zn, 213, 55, 1], [1, "g", 0, 192, 45, 1], [y, "g", ka, 210, 61, y], [1, "g", fs, 182, 52, 1], [$q, "g", Go, 180, 35, uq], [kr, "g", gj, 175, 25, $r], [1, "g", ks, 168, 32, ck], [or, "g", 1, 179, 28, 1], [y, "g", 1, 161, Rj, $q], [1, "g", 2, 172, 12, 1], [bq, "g", Ci, 160, 25, 1], [1, "g", 2, 157, 39, ck], [$r, "g", dj, 170, 43, 1], [1, "g", pn, 202, 67, $q], [1, "g", Ci, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", nq, 193, 86, y], [or, "g", pn, 168, 60, 1], [1, "g", Sa, 165, 78, 1], [1, "g", pn, 173, 88, y], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [or, "s", hk, 165, 50, $r], [1, "s", 0, 160, 32, 1], [or, "s", ck, 162, 30, hj], [1, "s", or, 176, 28, bq], [ck, "s", 1, 154, 17, Zk], [1, "s", bq, 184, 49, y], [1, "s", bq, 192, 62, hj], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", hj, 217, 79, 1], [bq, "s", ck, 206, 86, 1], [Zn, "la", Ia, 211, 69, 1], [or, "la", qa, 215, 69, 1], [1, "la", Ba, 201, 81, 1], [ck, "la", 1, 207, 83, $q], [bq, "la", 3, 173, 32, $r], [1, "la", 2, 181, 45, or], [Zn, "la", bq, 178, 38, bq], [1, "la", 1, 213, 69, kr], [uq, "la", Gj, 214, 69, Dj], [$r, "la", 4, 216, 68, y], [1, "la", Xa, 191, 78, 1], [1, "la", yr, 191, 80, hj], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [ck, "g", Ci, 154, 67, 1], [$r, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, Dj], [1, "s", Sa, 204, 62, ck], [1, "s", 2, 218, 60, 1], [1, "s", Xj, 194, 62, 1], [$q, "s", ho, 216, 86, 1], [y, "s", 0, 211, 93, y], [1, "la", 0, 216, 92, ck], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, or], [1, "la", 4, 214, 88, 1], [1, "s", Go, 205, 99, 1], [1, "s", 1, 217, 88, 1], [bq, "s", uq, 213, 94, Zk], [or, "s", Zk, 202, 97, 1], [1, "s", Xa, 199, 85, Zk], [or, "s", hk, 190, 93, Zn], [ck, "s", uq, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [Zk, "la", hj, 199, 91, uq], [1, "la", 1, 220, 91, Zn], [1, "la", 0, 219, 77, 1], [1, "la", Go, 200, 59, 1], [1, "la", 3, 188, 87, 1], [y, "la", ka, 183, 94, 1], [Dj, "la", 1, 187, 83, 1], [1, "la", Zn, 175, 82, $r], [uq, "la", 1, 172, 94, Zk], [1, "la", dj, 179, 78, 1], [1, "la", fs, 166, 87, $r], [1, "la", Qq, 159, 80, 1], [$q, "la", 3, 167, 15, 1], [1, "la", kr, 164, nk, 1], [Dj, "la", Zk, 172, 28, 1], [bq, "la", Ia, 153, 24, kr], [1, "la", 4, 164, 91, 1], [Dj, "la", Ik, 156, 82, y], [1, "la", 4, 149, 90, ck], [Zn, "s", fs, 178, 85, hj], [1, "s", 1, 180, 85, $r], [bq, "s", 0, 163, 96, 1], [$r, "s", 0, 159, 86, 1], [uq, "s", 0, 185, 78, 1], [1, "s", ck, 194, 75, $r], [Dj, "s", dj, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, uq], [1, "s", Ir, 166, 97, $r], [$r, "s", Ir, 177, 97, 1], [uq, "s", Xa, 149, 85, Zn], [$q, "s", 1, 151, 83, 1], [1, "s", $q, 175, 74, bq], [hj, "s", Go, 174, 72, Zn], [1, "la", yr, 168, 71, 1], [1, "la", 3, 180, 60, $r], [uq, "s", 0, 156, 63, 1], [hj, "s", 0, 151, 47, hj], [1, "s", bq, 158, 64, 1], [1, "s", bq, 161, 75, $r], [Dj, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, Zn], [1, "s", 1, 152, 47, 1], [1, "s", y, 159, 33, bq], [1, "s", 1, 152, Ha, 1], [Dj, "s", 0, 151, Sq, 1], [ck, "s", fs, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", Xj, 172, 62, ck], [y, "s", 2, 155, 61, uq], [1, "s", 2, 167, 51, 1], [uq, "s", 2, 150, 52, $r], [ck, "la", 4, 178, 69, hj], [1, "la", oo, 177, 68, 1], [1, "la", wn, 176, 67, or], [hj, "la", 0, 174, 67, 1], [bq, "la", $q, 172, 67, 1], [or, "la", 4, 171, 67, $q], [hj, "la", mi, 170, 66, 1], [Zk, "la", mi, 169, 66, Dj], [1, "la", 1, 168, 66, uq], [Dj, "la", 4, 167, 67, hj], [1, "la", 1, 166, 67, kr], [1, "la", 4, 165, 68, 1], [bq, "la", Yo, 164, 68, kr], [kr, "la", Xj, 163, 68, 1], [Zn, "la", 5, 162, 68, Zn], [1, "la", 2, 161, 68, 1], [1, "la", Oj, 153, 72, 1], [1, "la", wn, 163, 60, 1], [$q, "la", Ia, 164, 42, $r], [$r, "la", 0, 155, 51, 1], [$q, "la", 1, 168, 42, 1], [y, "la", va, 158, 48, 1], [1, "la", Qa, 178, 57, 1], [1, "la", mi, 151, 69, 1], [1, "la", 2, 170, 74, Zk], [Zn, "la", Sa, 160, 84, uq], [1, "la", Pn, 174, 92, 1], [ck, "la", 2, 188, 90, $q], [1, "la", uj, 209, 84, $q], [Zk, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", Xk, 165, 57, ck], [1, "la", 5, 182, 58, 1], [y, "la", 5, 166, 44, 1], [Zk, "la", 1, 163, 39, 1], [Dj, "la", y, 152, 53, 1], [Dj, "la", Dj, 152, 37, 1], [y, "la", 2, 163, 13, $r], [1, "de", Ge, 219, 12, 0], [1, "de", tq, 203, Jk, 0], [1, "de", 15, 220, 19, ho], [Zk, "de", 12, 223, sq, fs], [ck, "de", 12, 213, 10, 0], [kr, "de", 37, 217, Hq, 0], [hj, "de", 38, 220, _i, 0], [1, "de", 38, 215, Ar, gj], [Zk, "de", 40, 214, aa, 0], [1, "de", 40, 222, Ao, ka], [$q, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, ho], [1, "de", 38, 215, 26, 0], [y, "de", 37, 222, 25, ks], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, hk], [1, "de", Sq, 213, 27, ka], [1, "de", 14, 215, 30, ka], [Zk, "de", rk, 219, 33, 0], [ck, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [y, "de", 39, 215, 32, 0], [bq, "de", 37, 211, 35, 0], [ck, "de", g, 223, 38, gj], [1, "de", 13, 213, 38, 0], [1, "de", _i, 222, 44, hk], [1, "de", 15, 208, 33, 0], [Dj, "de", M, 206, 23, 0], [1, "de", 13, 205, 28, hk], [$r, "de", 14, 211, 23, ks], [uq, "de", aa, 201, hs, hk], [1, "de", 15, 198, 9, 0], [1, "de", we, 199, la, 0], [y, "de", 12, 194, rk, Xa], [1, "de", 12, 197, 23, Go], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, gj], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, Fa, fs], [1, "de", 37, 192, 11, ks], [1, "de", 37, 199, 24, fs], [or, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, ka], [ck, "de", 39, 192, 24, ka], [$r, "de", 40, 187, 23, Go], [bq, "de", 38, 187, vo, ks], [1, "de", 39, 192, tj, 0], [ck, "de", 37, 185, 15, 0], [bq, "de", Hn, 188, 15, 0], [1, "de", ao, 185, l, 0], [or, "de", aa, 189, 9, ka], [1, "de", Sj, 187, 22, 0], [ck, "de", 15, 180, nr, 0], [hj, "de", 12, 177, yo, 0], [Dj, "de", 14, 173, 9, hk], [hj, "de", tq, 171, 15, ho], [Zk, "de", 40, 182, 9, 0], [Dj, "de", 39, 179, Ek, 0], [y, "de", 39, 175, 9, 0], [Zk, "de", 40, 173, Pq, 0], [1, "de", 37, 169, bi, ho], [Zk, "de", 37, 163, 10, 0], [$q, "de", 38, 164, sr, ks], [or, "de", 39, 170, hs, 0], [bq, "de", 40, 160, 17, ho], [1, "de", 40, 154, ek, fs], [Dj, "de", 40, 165, 23, 0], [1, "de", 40, 150, Hj, 0], [Zk, "de", 37, 155, Ao, 0], [1, "de", 39, 146, 10, 0], [Zn, "de", 12, 159, 12, fs], [1, "de", Jk, 151, Zi, Xa], [1, "de", 14, 150, 14, 0], [1, "de", Ln, 153, ij, 0], [Dj, "de", 13, 161, 25, 0], [Zk, "de", Qk, 169, 25, 0], [kr, "de", sr, 176, 25, 0], [1, "de", Na, 180, 29, Xa], [or, "de", 12, 188, 31, 0], [1, "de", yo, 181, 36, Xa], [1, "de", 37, 186, 33, ks], [$q, "de", 38, 183, 26, Xa], [1, "de", 39, 177, 21, 0], [hj, "de", 40, 175, 31, ho], [1, "de", 37, 176, 39, ks], [Dj, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [uq, "de", 38, 168, 45, 0], [or, "de", 38, 173, 45, gj], [kr, "de", 39, 160, 35, hk], [uq, "de", 40, 161, 42, ks], [Dj, "de", 40, 170, 39, 0], [Zk, "de", 40, 181, 43, 0], [$r, "de", 40, 156, 26, ks], [y, "de", 40, 150, 32, fs], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, fs], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, gj], [uq, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, hk], [or, "de", 38, 168, 50, ho], [or, "de", 12, 176, 45, fs], [bq, "de", 12, 167, 32, hk], [$r, "de", Ga, 158, 32, 0], [hj, "de", bo, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", Pq, 158, 39, 0], [1, "de", 12, 171, 43, ka], [$r, "de", Gq, 174, 36, ho], [or, "de", G, 151, 43, gj], [1, "de", 13, 152, 48, 0], [1, "de", D, 164, 49, gj], [Zn, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, Xa], [kr, "de", Ek, 183, 51, fs], [1, "de", _i, 186, 48, fs], [1, "de", 37, 182, 48, fs], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, ka], [$r, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [uq, "de", 38, 200, 49, hk], [1, "de", 37, 196, 54, 0], [1, "de", Hn, 194, 40, 0], [1, "de", Ga, 202, 45, Xa], [1, "de", Qk, 198, 47, 0], [1, "de", Sj, 198, 55, 0], [ck, "de", 15, 212, 54, 0], [Zn, "de", 15, 216, 63, Go], [1, "de", 14, 209, 62, 0], [$r, "de", Na, 219, 60, 0], [bq, "de", Ge, 206, 56, hk], [ck, "de", 12, 218, 72, 0], [1, "de", g, 223, 67, 0], [$r, "de", 12, 205, 64, Go], [y, "de", Nj, 193, 63, ks], [Zn, "de", 14, 216, 80, ho], [ck, "de", 14, 222, 87, ka], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, ks], [ck, "de", 37, 200, 63, hk], [1, "de", 37, 218, 62, 0], [kr, "de", 37, 222, 60, ks], [Dj, "de", 37, 207, 70, gj], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, fs], [1, "de", 38, 218, 55, 0], [ck, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [bq, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, Xa], [1, "de", 38, 214, 79, hk], [1, "de", 39, 213, 83, gj], [ck, "de", 39, 207, 76, hk], [Zn, "de", 39, 208, 86, ka], [$q, "de", 39, 218, 87, ka], [1, "de", 39, 222, 93, 0], [$r, "de", 39, 216, 96, 0], [Zn, "de", 39, 209, 94, Go], [Zk, "de", 39, 201, 87, ka], [1, "de", 39, 198, 82, 0], [bq, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, ho], [kr, "de", 37, 194, 97, fs], [1, "de", 39, 204, 88, fs], [1, "de", 39, 189, 90, hk], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, ks], [1, "de", 37, 183, 91, Go], [Dj, "de", 37, 186, 80, hk], [1, "de", 37, 191, 72, Xa], [ck, "de", 38, 184, 77, 0], [Dj, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [Dj, "de", 40, 174, 94, hk], [Dj, "de", 40, 192, 93, ka], [1, "de", 40, 165, 92, 0], [$q, "de", 37, 160, 89, 0], [kr, "de", 38, 161, 85, 0], [uq, "de", 38, 164, 98, ho], [1, "de", 38, 151, 99, 0], [ck, "de", 38, 151, 85, ho], [1, "de", 40, 148, 83, ho], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, hk], [1, "de", 37, 161, 64, fs], [1, "de", 37, 154, 61, 0], [or, "de", 39, 157, 55, 0], [or, "de", 39, 174, 64, fs], [kr, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [bq, "de", 13, 212, 95, Go], [1, "de", bo, 204, 85, Go], [Zk, "de", wo, 215, 85, Xa], [1, "de", 15, 197, 97, 0], [bq, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, ka], [1, "de", 15, 181, 84, Go], [hj, "de", _i, 184, 79, ks], [bq, "de", 14, 188, 93, Go], [ck, "de", cj, 180, 87, ka], [1, "de", 13, 178, 96, 0], [uq, "de", 13, 163, 95, Xa], [1, "de", Uq, 172, 88, ks], [ck, "de", wo, 176, 75, ka], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", cj, 164, 78, 0], [bq, "de", ee, 158, 87, ks], [bq, "de", 13, 149, 86, 0], [y, "de", sr, 154, 91, 0], [1, "de", 15, 160, 74, hk], [1, "de", Qk, 152, 76, 0], [1, "de", bo, 158, 63, gj], [ck, "de", bo, 150, 60, ks], [hj, "de", Gq, 169, 59, fs], [1, "de", 13, 173, 61, Go], [1, "cs", Dj, 143, 104, 1], [hj, "cs", 0, 141, 102, ck], [bq, "cs", 3, 138, 102, 1], [kr, "cs", 2, 139, 102, 1], [1, "cs", Ci, 140, 102, $r], [1, "cs", 3, 143, 107, kr], [1, "cs", 0, 143, 106, 1], [1, "cs", Sa, 143, 105, 1], [1, "cs", dj, 142, 103, or], [$r, "cs", 0, 142, 104, 1], [$q, "cs", Ci, 141, 103, Zn], [1, "cs", 3, 142, 105, kr], [1, "cs", 3, 140, 103, 1], [$q, "cs", Ia, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, Zn], [1, "la", $r, 149, 21, 1], [1, "la", 4, 148, 21, Dj], [1, "la", Ci, 147, Aa, $q], [1, "la", Qa, 147, 19, 1], [y, "la", Ba, 147, Fo, or], [ck, "la", 1, 147, 17, 1], [1, "la", 3, 144, Mi, bq], [1, "la", Vn, 147, uk, uq], [1, "la", 2, 147, sr, 1], [1, "la", 4, 147, yo, y], [ck, "la", T, 145, si, Zn], [uq, "la", 5, 145, 12, 1], [1, "la", 1, 146, l, or], [Zk, "la", 2, 145, 13, 1], [y, "la", yr, 155, 25, 1], [1, "la", 0, 155, 24, y], [hj, "la", 3, 153, 26, 1], [1, "cs", ka, 151, 24, 1], [bq, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, or], [Dj, "cs", uq, 157, 26, 1], [bq, "cs", 2, 157, 24, 1], [1, "cs", Ci, 156, 26, or], [1, "cs", dj, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [hj, "cs", 2, 152, 25, 1], [Zk, "cs", 2, 151, 25, y], [1, "cs", 2, 156, 27, Zn], [$q, "cs", Pn, 157, 23, hj], [kr, "cs", 2, 157, 22, uq], [1, "cs", wq, 150, 24, ck], [ck, "cs", 3, 150, 23, bq], [1, "de", 38, 155, 29, ks], [Zk, "de", g, 157, 27, ks], [kr, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, Xa], [1, "de", J, 156, 21, 0], [bq, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", ao, 147, 79, gj], [Zk, "de", Hn, 157, 99, 0], [1, "de", 12, 172, 99, ks], [1, "la", Oj, 143, 102, 1], [y, "la", Qa, 149, 96, y], [1, "la", qa, 145, 102, ck], [or, "la", uq, 148, 97, kr], [y, "la", as, 148, 98, 1], [1, "cs", Oj, 144, 104, 1], [y, "cs", 3, 144, 103, uq], [1, "cs", 3, 145, 103, hj], [bq, "cs", Oj, 145, 104, 1], [1, "cs", R, 142, 101, 1], [1, "cs", 3, 143, Za, ck], [bq, "cs", 3, 141, 101, ck], [$r, "cs", 3, 142, 100, 1], [Dj, "cs", ka, 141, 100, hj], [Zk, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [$q, "cs", R, 146, 103, ck], [y, "cs", Qq, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", ks, 150, 97, Zk], [bq, "cs", dj, 151, 98, 1], [$r, "cs", 0, 153, 97, 1], [$q, "cs", Ui, 153, 96, or], [1, "cs", Ci, 149, 95, 1], [1, "s", 0, 213, 127, kr], [1, "plm", $q, 214, 131, hk], [or, "plm", 1, 207, 128, ho], [Zk, "plm", ho, 208, 127, 0], [1, "s", or, 207, 132, Zn], [1, "s", pn, 208, 133, 1], [kr, "plm", 0, 217, 132, 0], [bq, "plm", 2, 186, 158, ks], [$q, "plm", ho, 184, 160, Go], [Zk, "s", uq, 183, 156, 1], [1, "s", 2, 186, 159, 1], [y, "p", ka, 182, 157, y], [hj, "p", 0, 114, 205, y], [Zk, "plm", Zk, 117, 204, 0], [Zn, "plm", 0, 117, 205, 0], [1, "plm", Ir, 112, 204, ka], [Dj, "s", Pn, 114, 207, 1], [1, "s", 2, 115, 204, $r], [Zk, "plm", nq, 122, 151, 0], [1, "plm", 1, 123, 150, ho], [bq, "plm", ck, 117, 151, Go], [1, "s", 0, 118, 150, $q], [$r, "s", y, 122, 152, hj], [1, "plm", Ir, 156, 130, ka], [1, "plm", 1, 154, 127, fs], [1, "s", 0, 153, 128, 1], [1, "s", Pn, 152, 130, kr], [Zn, "p", 0, 123, 65, bq], [y, "plm", Pn, 125, 62, 0], [1, "plm", 1, 124, 62, ka], [bq, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, bq], [Zn, "s", 1, 121, 64, or], [$r, "s", cn, 122, 62, $q], [uq, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", Pn, 144, 107, 1], [1, "cs", Ir, 141, 106, 1], [1, "cs", 2, 141, 105, bq], [Zk, "cs", 2, 140, 105, hj], [ck, "cs", 2, 140, 104, 1], [bq, "cs", $q, 138, 103, 1], [$r, "cs", 0, 139, 104, y], [1, "cs", Ir, 139, 103, 1], [Zn, "cs", 2, 139, 105, uq], [1, "cs", 2, 142, 106, 1], [$r, "cs", 2, 142, 107, 1], [1, "cs", Sa, 139, 101, 1], [1, "de", h, 27, 264, 0], [1, "la", 4, 147, 99, kr], [1, "la", $q, 146, 100, 1], [$r, "la", Yr, 145, 101, 1], [Zn, "cs", $r, 215, 47, kr], [1, "cs", dj, 216, 47, kr], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, ck], [1, "la", mi, 215, 45, 1], [Dj, "la", 0, 216, 46, $r], [1, "la", va, 216, 48, 1], [1, "la", wk, 216, 49, 1], [Zk, "la", jo, 217, 50, hj], [Zn, "la", Qq, 214, 49, 1], [uq, "la", 4, 211, 45, 1], [kr, "la", 3, 213, 47, $q], [1, "cs", Pn, 224, 48, 1], [1, "plm", uj, 111, 243, 0], [1, "plm", $q, 108, 246, 0], [bq, "s", Zn, 110, 243, 1], [$r, "s", ka, 108, 245, ck], [kr, "s", gj, 121, 276, Dj], [y, "plm", dj, 122, 277, 0], [1, "plm", 2, 117, 276, ks], [ck, "plm", 1, 118, 277, hk], [1, "s", 1, 118, 278, 1], [Dj, "cs", nq, 66, 16, 1], [ck, "cs", Oj, 67, 16, 1], [ck, "cs", 0, 67, 17, bq], [Zn, "cs", cn, 66, nk, 1], [1, "cs", 3, 66, Fa, Zk], [ck, "cs", 3, 68, 17, 1], [uq, "cs", Go, 36, 16, Dj], [1, "cs", Xj, 36, ci, 1], [uq, "cs", Ir, 36, b, Zk], [ck, "cs", Ui, 35, ci, Dj], [Zn, "cs", Qq, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [Dj, "cs", pn, 66, 30, 1], [uq, "cs", Pn, 66, 23, kr], [Dj, "cs", Qq, 66, 22, 1], [bq, "cs", Ia, 66, 31, Zk], [uq, "cs", Xj, 36, 30, 1], [hj, "cs", 2, 36, 23, 1], [kr, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [$r, "cs", Ia, 42, 13, $q], [$r, "cs", ka, 43, 13, $r], [1, "cs", cn, 44, cj, Dj], [1, "cs", Ui, 42, 16, y], [Dj, "cs", yr, 41, di, 1], [1, "cs", wq, 40, 16, 1], [kr, "cs", 0, 42, h, or], [Dj, "cs", 3, 43, Hk, 1], [hj, "cs", 3, 44, ij, Zk], [Zn, "cs", 3, 45, Bi, 1], [1, "cs", 2, 46, Hj, Zk], [1, "cs", fs, 43, 22, 1], [1, "cs", Sa, 42, 22, 1], [1, "cs", 1, 41, 22, uq], [kr, "cs", 0, 40, 22, y], [1, "cs", 3, 39, no, 1], [$q, "cs", 1, 44, 26, 1], [1, "cs", Ir, 45, 26, 1], [1, "cs", Ia, 46, 26, Zn], [1, "cs", fs, 47, 26, Dj], [1, "cs", 2, 48, 26, hj], [1, "cs", 3, 47, 25, 1], [$r, "cs", 3, 43, 27, 1], [kr, "cs", 1, 49, 32, ck], [1, "cs", 2, 50, 32, 1], [hj, "cs", 2, 51, 32, uq], [hj, "cs", Pn, 52, 32, 1], [Dj, "d", 0, 51, 29, y], [1, "d", 1, 53, 29, hj], [1, "d", 1, 49, 29, $r], [1, "cs", Ui, 55, 31, or], [1, "cs", Qq, 54, 32, 1], [ck, "cs", Oj, 47, 31, 1], [1, "cs", wn, 48, 32, 1], [1, "cs", Xa, 51, 33, bq], [1, "cs", 2, 52, 33, bq], [uq, "cs", cn, 50, 33, uq], [1, "cs", 3, 56, 30, y], [Zn, "cs", R, 56, 31, or], [$r, "cs", yr, 46, 30, $r], [Dj, "cs", R, 46, 31, 1], [Zk, "cs", 1, 53, 33, hj], [Dj, "cs", Pn, 49, 33, 1], [1, "cs", 2, 53, 32, Zk], [$r, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [ck, "d", 1, 54, 35, 1], [1, "fo", Ir, 35, wo, ks], [1, "fo", Xj, 36, Ai, fs], [uq, "fo", 2, 67, 15, ho], [1, "cs", wq, 60, J, 1], [Zn, "cs", uj, 59, Ek, bq], [1, "cs", 1, 58, Di, or], [Zk, "cs", R, 62, 16, 1], [Dj, "cs", 0, 61, 16, 1], [kr, "cs", yr, 60, 16, or], [1, "cs", R, 63, ci, 1], [1, "cs", pn, 60, h, ck], [1, "cs", 1, 59, h, Zn], [ck, "cs", Ia, 58, 19, y], [1, "cs", Pn, 57, ij, kr], [or, "cs", 2, 56, Br, or], [or, "cs", 0, 55, li, 1], [Zn, "cs", 2, 55, s, hj], [1, "cs", Sa, 63, 23, uq], [hj, "cs", 0, 62, 22, Dj], [$r, "cs", 2, 61, 22, 1], [kr, "cs", 1, 60, 22, Dj], [Dj, "cs", Go, 59, 22, or], [1, "cs", Xj, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", cn, 56, 26, 1], [1, "cs", Dj, 57, 26, y], [1, "cs", 2, 58, 26, Zn], [1, "cs", 2, 59, 27, $q], [1, "cs", 2, 68, 16, $q], [kr, "cs", 2, 68, 15, bq], [1, "cs", yr, 69, 15, Zk], [1, "cs", 3, 70, we, 1], [1, "cs", Ia, 70, 14, 1], [1, "cs", 1, 69, Gr, Dj], [uq, "cs", Dj, 69, la, 1], [$q, "cs", Pn, 71, 13, $q], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, cj, or], [Zk, "cs", Ia, 70, 8, 1], [1, "cs", R, 71, Cr, 1], [hj, "cs", dj, 72, Nk, or], [uq, "cs", ks, 73, _j, 1], [$q, "cs", 3, 74, 9, y], [y, "cs", yr, 74, 8, $q], [1, "cs", 0, 75, 8, 1], [bq, "cs", 3, 76, ar, 1], [1, "cs", 3, 75, pq, kr], [1, "cs", 3, 75, ok, bq], [1, "cs", Go, 76, Xn, 1], [1, "cs", Go, 76, _q, hj], [1, "cs", 3, 76, sr, y], [1, "cs", wq, 75, uk, 1], [1, "cs", 2, 77, Co, hj], [1, "cs", nq, 77, 14, uq], [1, "cs", 3, 77, 12, bq], [1, "cs", 3, 77, 13, uq], [hj, "cs", R, 77, cs, 1], [1, "cs", 0, 74, Fa, 1], [1, "cs", Zk, 75, ds, 1], [uq, "cs", 2, 74, ci, 1], [1, "cs", 3, 73, 19, or], [1, "cs", R, 67, 23, Zn], [hj, "cs", ho, 68, 23, uq], [1, "cs", ks, 72, 20, y], [1, "cs", 2, 73, Fk, ck], [1, "cs", Ir, 74, ij, hj], [or, "cs", pn, 74, 36, or], [or, "cs", 2, 77, 27, Zk], [$q, "cs", dj, 76, 26, kr], [bq, "cs", Sa, 75, 26, $q], [or, "cs", 0, 74, 26, 1], [Zk, "cs", cn, 75, 25, 1], [$q, "cs", 0, 76, 25, $r], [1, "cs", 1, 77, 23, 1], [bq, "cs", pn, 77, Wk, 1], [or, "cs", 2, 76, ds, 1], [1, "cs", Xj, 76, 24, 1], [1, "cs", pn, 77, 24, 1], [1, "cs", 2, 77, 25, Zk], [1, "cs", Sa, 77, 26, y], [1, "cs", 1, 75, 27, 1], [ck, "cs", R, 76, 27, Zn], [bq, "cs", uj, 67, 24, 1], [Zn, "cs", 2, 66, 24, 1], [Zk, "cs", nq, 73, 26, 1], [1, "cs", dj, 74, 27, 1], [$r, "cs", 2, 74, 25, 1], [ck, "cs", 2, 66, Hk, 1], [ck, "cs", 2, 66, 20, 1], [Dj, "cs", Ci, 66, 21, bq], [Dj, "cs", pn, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [bq, "cs", 0, 77, 36, 1], [hj, "cs", 0, 77, 32, 1], [uq, "cs", 1, 75, 35, 1], [1, "cs", cn, 75, 36, 1], [ck, "cs", Sa, 76, 36, 1], [y, "cs", 2, 77, 35, y], [$r, "cs", 2, 77, 34, $q], [Zn, "cs", 2, 76, 35, 1], [bq, "cs", Sa, 77, 33, 1], [1, "cs", dj, 77, 31, 1], [$q, "cs", hk, 77, 29, 1], [1, "cs", 0, 71, 32, $r], [1, "cs", ho, 76, 34, 1], [Zn, "cs", 2, 77, 30, kr], [hj, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, hj], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", nq, 76, 33, Dj], [ck, "cs", pn, 70, 32, 1], [kr, "cs", 2, 69, 31, Dj], [1, "cs", gj, 68, 31, ck], [Zn, "cs", Sa, 67, 31, 1], [y, "cs", Sa, 67, 30, $r], [$r, "cs", Ir, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [y, "cs", 2, 68, 32, uq], [1, "cs", nq, 66, 32, 1], [Zn, "cs", cn, 66, 33, Zk], [$q, "cs", dj, 67, 33, 1], [1, "cs", Sa, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [$r, "cs", Pn, 68, 33, ck], [1, "cs", Go, 68, 34, Zn], [1, "cs", 1, 66, 35, $r], [$r, "cs", cn, 67, 34, Dj], [1, "cs", Sa, 66, 34, uq], [1, "cs", 2, 65, 35, 1], [$q, "cs", 2, 64, 36, 1], [y, "cs", nq, 65, 36, Zn], [$r, "cs", 2, 67, 35, 1], [1, "cs", cn, 66, 36, 1], [kr, "cs", pn, 69, 34, $r], [or, "cs", uj, 68, 35, 1], [1, "cs", Ir, 76, ln, 1], [1, "cs", pn, 77, 9, kr], [1, "cs", nq, 77, 8, bq], [1, "cs", Sa, 77, j, $q], [1, "cs", 2, 78, Cr, 1], [Zk, "cs", pn, 78, 9, 1], [1, "cs", 2, 78, 10, y], [1, "cs", Sa, 78, 11, Zn], [1, "cs", Ci, 78, g, 1], [1, "cs", 2, 78, gs, ck], [1, "cs", Xa, 79, Ma, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, I, or], [1, "cs", 3, 79, Yq, 1], [1, "cs", 3, 79, 12, 1], [bq, "cs", 3, 80, 8, ck], [$q, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [Dj, "cs", 2, 80, xn, ck], [1, "cs", 2, 81, 8, ck], [hj, "cs", 2, 81, Ma, 1], [Dj, "cs", 2, 81, 10, 1], [bq, "cs", Ir, 78, bo, Dj], [uq, "cs", 2, 79, Ek, hj], [1, "cs", pn, 78, cs, 1], [1, "cs", 2, 80, Ai, hj], [$q, "cs", 0, 79, Lq, ck], [1, "cs", Go, 82, nr, 1], [1, "cs", 2, 82, kq, 1], [$q, "cs", nq, 82, Ar, Zk], [Zn, "cs", cn, 81, si, 1], [1, "cs", 3, 80, 13, $r], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [$q, "cs", 0, 78, 25, 1], [Dj, "cs", 0, 79, 29, Zk], [hj, "cs", fs, 79, 32, 1], [1, "cs", 0, 79, 35, hj], [ck, "cs", pn, 78, 35, $r], [Dj, "cs", pn, 78, 36, 1], [Zn, "cs", Ir, 79, 34, 1], [Dj, "cs", 2, 78, 33, y], [1, "cs", Pn, 79, 33, 1], [1, "cs", cn, 78, 32, $r], [Zk, "cs", 2, 78, 31, 1], [1, "cs", dj, 79, 31, 1], [hj, "cs", uj, 79, 30, 1], [1, "cs", dj, 78, 29, 1], [Zn, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, bq], [1, "cs", 2, 79, 27, uq], [1, "cs", Ir, 78, 26, 1], [Zk, "cs", 2, 79, 26, kr], [hj, "cs", uj, 78, 24, or], [y, "cs", 2, 80, 34, 1], [ck, "cs", 2, 80, 33, hj], [1, "cs", nq, 80, 31, 1], [1, "cs", 2, 80, 30, uq], [1, "cs", 2, 80, 32, Dj], [1, "cs", Ci, 80, 29, 1], [Zn, "cs", Xj, 80, 28, 1], [ck, "cs", 2, 80, 27, 1], [1, "cs", gj, 81, 30, 1], [1, "cs", Dj, 81, 32, 1], [kr, "cs", or, 81, 28, $q], [uq, "cs", Pn, 81, 29, Dj], [1, "cs", Ci, 81, 31, $r], [1, "cs", 2, 81, 33, Zn], [hj, "cs", Pn, 82, 30, $r], [uq, "cs", nq, 82, 31, 1], [hj, "cs", 2, 82, 32, 1], [Zn, "cs", 0, 37, 36, 1], [kr, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", pn, 36, 36, 1], [ck, "cs", Sa, 34, 35, 1], [y, "cs", pn, 35, 35, 1], [y, "cs", pn, 36, 35, 1], [1, "cs", 0, 33, 34, Zk], [Zn, "cs", 1, 35, 34, 1], [1, "cs", nq, 36, 34, 1], [Dj, "cs", 2, 34, 34, 1], [or, "cs", 2, 36, 33, or], [Zn, "cs", Ci, 35, 33, 1], [1, "cs", Sa, 34, 33, or], [1, "cs", 2, 33, 33, $q], [1, "cs", 2, 31, 32, $q], [$q, "cs", 1, 36, 32, kr], [1, "cs", y, 32, 32, 1], [Zk, "cs", 2, 35, 32, 1], [kr, "cs", cn, 33, 32, 1], [kr, "cs", nq, 32, 33, bq], [1, "cs", 2, 33, 31, 1], [ck, "cs", dj, 34, 31, 1], [1, "cs", 2, 35, 31, $r], [uq, "cs", hk, 34, 32, 1], [kr, "cs", 2, 35, 30, 1], [1, "cs", $r, 39, 23, 1], [uq, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [uq, "cs", 3, 35, 24, uq], [1, "cs", 2, 34, 23, 1], [bq, "cs", dj, 35, 23, Zn], [1, "cs", dj, 36, 20, 1], [bq, "cs", uj, 36, 21, ck], [hj, "cs", 2, 35, 22, 1], [$r, "cs", dj, 35, 16, 1], [or, "cs", 2, 34, Ao, kr], [1, "cs", 2, 33, 16, Zk], [1, "cs", hk, 34, 17, Dj], [1, "cs", fs, 32, Sj, kr], [1, "cs", 2, 31, bo, 1], [1, "cs", Oj, 30, gs, 1], [1, "cs", y, 33, rk, Zn], [ck, "cs", 1, 31, sk, 1], [ck, "cs", pn, 32, 14, Zk], [1, "cs", fs, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [$r, "cs", pn, 25, ee, 1], [bq, "cs", 0, 25, 12, 1], [bq, "cs", 2, 25, vk, ck], [y, "cs", wn, 25, 10, ck], [uq, "cs", Go, 25, Ok, 1], [1, "cs", 2, 25, lj, Zn], [$r, "cs", 2, 26, 8, 1], [uq, "cs", 2, 27, kq, 1], [y, "cs", Sa, 28, 8, $q], [kr, "cs", Pn, 29, Sr, 1], [1, "cs", 2, 30, bn, kr], [1, "cs", 2, 26, Zi, 1], [1, "cs", 2, 27, nr, 1], [ck, "cs", 2, 26, 10, 1], [y, "cs", ck, 27, Yq, 1], [1, "cs", wn, 28, Q, 1], [1, "cs", 3, 25, tq, 1], [1, "cs", 0, 25, Sj, 1], [Dj, "cs", 2, 26, Uq, kr], [bq, "cs", Oj, 27, B, or], [1, "cs", ks, 28, 17, Dj], [1, "cs", Dj, 29, 18, 1], [y, "cs", 2, 26, 16, or], [kr, "cs", uj, 25, B, bq], [1, "cs", 2, 27, $a, 1], [Zn, "cs", 2, 26, ds, 1], [1, "cs", Dj, 27, en, ck], [Zn, "cs", 2, 28, vo, bq], [1, "cs", Ci, 30, Nn, 1], [Zk, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [$q, "cs", 0, 23, 14, 1], [1, "cs", Sa, 24, 10, 1], [1, "cs", 2, 24, P, 1], [uq, "cs", Ci, 24, Ai, uq], [1, "cs", 2, 24, Di, 1], [or, "cs", 1, 23, ek, 1], [Dj, "cs", 0, 22, 8, Zk], [hj, "cs", ks, 22, Gq, 1], [1, "cs", 1, 23, Cr, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, ya, uq], [bq, "cs", 2, 23, 9, 1], [or, "cs", 2, 22, 9, 1], [uq, "cs", 2, 22, 10, Dj], [$q, "cs", 2, 22, 11, Dj], [1, "cs", 2, 23, 11, or], [1, "cs", Xj, 23, 12, 1], [1, "cs", 2, 23, 13, $r], [1, "cs", pn, 22, ee, or], [uq, "cs", 2, 21, An, hj], [Zk, "cs", nq, 21, lj, y], [1, "cs", Sa, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [Zn, "cs", 2, 26, 25, bq], [1, "cs", 2, 27, 25, Dj], [uq, "cs", 0, 28, 25, kr], [$r, "cs", 1, 25, 23, 1], [1, "cs", uj, 26, 24, ck], [1, "cs", 0, 24, 25, 1], [$r, "cs", Qq, 23, 24, 1], [1, "cs", 3, 24, 24, bq], [bq, "cs", 3, 25, 25, bq], [y, "cs", Ia, 23, 25, 1], [Dj, "cs", Zn, 22, 26, y], [1, "cs", 1, 26, 26, 1], [Zk, "cs", 1, 29, 26, $q], [ck, "cs", 2, 23, 26, 1], [hj, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [$q, "cs", cn, 27, 26, kr], [$r, "cs", uj, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [y, "cs", 2, 29, 27, or], [y, "cs", pn, 28, 28, 1], [ck, "cs", 1, 26, 29, $q], [kr, "cs", ka, 28, 27, y], [1, "cs", 2, 27, 28, or], [1, "cs", Sa, 27, 27, 1], [Dj, "cs", 2, 26, 28, 1], [ck, "cs", 2, 26, 27, bq], [uq, "cs", 2, 25, 28, 1], [Dj, "cs", dj, 25, 27, 1], [ck, "cs", nq, 23, 27, Dj], [1, "cs", 2, 22, 27, $r], [$r, "cs", 2, 24, 27, kr], [1, "cs", ho, 24, 28, 1], [1, "cs", ho, 25, 32, 1], [hj, "cs", kr, 24, 30, Zk], [1, "cs", Sa, 25, 31, 1], [1, "cs", pn, 25, 30, Zn], [hj, "cs", 2, 25, 29, 1], [1, "cs", Ir, 24, 29, 1], [uq, "cs", 2, 23, 29, 1], [$q, "cs", 2, 26, 33, 1], [ck, "cs", hk, 26, 34, or], [Zk, "cs", Sa, 27, 35, 1], [1, "cs", Pn, 22, 28, ck], [Zk, "cs", 2, 23, 28, $q], [$q, "cs", cn, 24, 31, $q], [1, "cs", 2, 24, 32, kr], [1, "cs", Pn, 25, 33, Zn], [1, "cs", uj, 26, 35, bq], [1, "cs", 2, 24, 33, 1], [1, "cs", dj, 25, 34, $q], [1, "cs", 1, 22, 29, 1], [Zk, "cs", 1, 24, 34, Zn], [1, "cs", 0, 23, 35, 1], [uq, "cs", Xj, 25, 35, bq], [bq, "cs", 2, 24, 35, Zn], [Zk, "cs", 2, 23, 34, $r], [1, "cs", 2, 23, 33, 1], [1, "cs", ka, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [or, "cs", 2, 22, 32, 1], [Zn, "cs", uj, 23, 31, 1], [Zk, "cs", cn, 23, 30, 1], [1, "cs", 2, 22, 30, ck], [1, "cs", 2, 22, 31, Zk], [1, "cs", 1, 21, 31, 1], [1, "cs", ks, 21, 29, 1], [ck, "cs", Pn, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, hj], [1, "cs", 2, 25, 36, 1], [Zk, "cs", 2, 27, 36, 1], [1, "cs", Sa, 28, 36, $r], [hj, "d", pn, 83, 65, 1], [1, "d", 2, la, 67, 1], [1, "g", 0, 15, Cn, ck], [1, "s", Go, li, gs, uq], [Zk, "s", Go, 85, bi, bq], [1, "f", Go, 41, 102, hj], [1, "f", Xa, 42, 124, 1], [Dj, "f", 0, 64, 116, or], [kr, "f", 0, 74, 104, $q], [hj, "f", 0, 70, 87, y], [1, "f", gj, 27, 96, or], [1, "f", 0, 22, 79, $q], [uq, "f", 0, Fq, 117, kr], [1, "f", 0, 30, 137, $q], [1, "f", Go, 59, 146, ck], [Zn, "f", 0, 52, 147, 1], [uq, "f", Go, Fk, 149, 1], [y, "f", 0, 36, 146, hj], [1, "f", ho, 62, 124, 1], [uq, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, $q], [1, "g", $r, 78, 116, Zk], [1, "g", Dj, 71, 129, 1], [ck, "s", fs, 53, hi, 1], [1, "s", 0, 73, 111, 1], [1, "s", Xa, 77, 126, ck], [y, "s", fs, 48, 90, $r], [1, "s", Go, 19, 102, 1], [$r, "s", hk, tj, 127, 1], [Dj, "s", Go, 35, 159, 1], [Dj, "s", ka, 65, 54, uq], [or, "s", ks, 44, 52, 1], [1, "s", 0, 26, 51, ck], [1, "f", 1, 56, 136, 1], [ck, "f", 1, 41, 133, 1], [$r, "f", 1, 80, 120, kr], [1, "f", 1, Wk, 117, 1], [$q, "f", 1, 13, 99, 1], [uq, "f", or, 17, 89, 1], [$r, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, Wk, 57, 1], [hj, "f", Zn, 77, 53, 1], [1, "d", 1, 48, 35, or], [1, "de", bn, 33, 13, Go], [1, "de", 8, 30, Q, 0], [1, "de", nr, 32, 30, 0], [Zn, "de", Ar, 30, 25, Xa], [1, "de", 10, 33, 21, 0], [bq, "de", 8, 31, 34, 0], [hj, "de", 8, 67, 29, Go], [Zk, "de", Mi, 70, 22, ka], [1, "de", Ar, 70, Rj, ka], [$r, "de", vi, 75, Co, ho], [ck, "de", 8, 68, j, 0], [1, "de", _j, 75, 30, Go], [1, "de", Tq, 71, 33, 0], [Dj, "de", 11, 72, 25, fs], [or, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [Zn, "de", 11, 31, 15, hk], [$q, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, ks], [bq, "de", 30, 30, 29, 0], [ck, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, ks], [Dj, "de", 28, 75, 15, ho], [kr, "de", 27, 67, Br, hk], [1, "de", 29, 72, Yq, gj], [1, "de", 29, 75, 32, ka], [hj, "de", 29, 32, 20, fs], [1, "fo", 1, 39, 12, 0], [ck, "fo", or, 34, Gr, Go], [bq, "fo", 1, 74, 28, fs], [1, "fo", 2, 74, 29, 0], [1, "fo", Xj, 69, 30, 0], [1, "fo", Sa, 77, 22, 0], [y, "fo", 2, 74, 21, ho], [hj, "fo", Xj, 76, Mk, 0], [1, "fo", ck, 78, ci, 0], [1, "fo", 1, 28, 19, ks], [1, "fo", 2, 27, 24, 0], [$q, "fo", Ir, 24, Cn, hk], [kr, "fo", 2, 29, 21, 0], [1, "fo", Dj, 27, 32, Go], [1, "fo", dj, 30, 33, 0], [1, "fo", 1, 29, 28, Xa], [$q, "fo", cn, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", nq, hs, 26, hk], [hj, "fo", cn, 23, Un, ho], [1, "fo", cn, 11, 25, 0], [1, "de", 33, 29, 22, gj], [1, "de", 34, 32, 25, Xa], [1, "de", 34, 30, Fo, 0], [1, "de", 33, 78, 18, Xa], [1, "de", 33, 73, 35, Go], [Zn, "de", 36, 72, 23, gj], [$r, "de", 35, 25, vn, hk], [1, "d", Zk, 83, 41, $q], [1, "d", $r, jr, 40, 1], [Zn, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, ck], [Zn, "cs", 3, 224, 106, ck], [1, "la", Oj, 216, 128, 1], [or, "la", Xa, 215, 126, hj], [1, "s", Xa, 216, 130, 1], [uq, "s", uq, 217, 129, hj], [1, "s", Xa, 218, 128, y], [1, "s", kr, 217, 127, Zn], [Zn, "s", ks, 217, 126, y], [1, "s", $q, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [or, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [ck, "s", ka, 213, 126, $q], [ck, "plm", 2, 217, 130, 0], [1, "plm", cn, 212, 125, 0], [1, "p", 0, 214, 134, uq], [Zk, "s", uq, 211, 126, 1], [or, "b", 1, 45, 277, 0], [1, "b", $q, 50, 286, ka], [1, "b", uj, 51, 284, ho], [1, "b", or, 47, 287, ks], [1, "b", Go, 39, 285, gj], [$r, "b", yr, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", Xa, 55, 281, $q], [1, "b", kr, wr, 172, ka], [$q, "b", 2, za, 172, ho], [uq, "t", 5, 6, 171, gj], [Dj, "t", hj, Lj, 170, ka], [Dj, "t", 1, zq, 164, 0], [Zn, "t", 3, f, 164, 0], [kr, "b", hk, 6, 165, ka], [1, "t", Qq, 5, 165, 0], [1, "b", 2, 6, 166, 0], [hj, "t", jo, Ba, 166, 0], [1, "t", 4, f, 167, 0], [1, "t", Ir, 6, 168, 0], [ck, "t", fs, 6, 169, 0], [1, "t", 4, _n, 170, ka], [bq, "t", ks, as, 167, ks], [y, "t", 2, 5, 169, Go], [uq, "b", ks, Lj, 168, 0], [Dj, "s", ck, 7, 153, y], [1, "s", 2, 7, 151, hj], [1, "de", Ba, 7, 152, Xa], [1, "t", 1, Yo, 154, ks], [Dj, "b", ka, 6, 154, 0], [$q, "t", 2, 6, 155, fs], [ck, "b", Xj, za, 156, 0], [1, "t", pn, Vn, 157, 0], [1, "t", 4, Xk, 155, 0], [1, "b", Go, iq, 157, 0], [Dj, "t", ck, 5, 156, hk], [uq, "t", 5, 6, 158, 0], [y, "b", Ir, dn, 159, gj], [ck, "b", 0, 6, 162, 0], [Zk, "t", 4, 6, 163, 0], [hj, "t", 4, 6, 161, ho], [Zn, "b", Zk, 6, 160, Go], [Zk, "b", pn, 5, 163, 0], [y, "b", Xj, 5, 158, 0], [1, "b", Sa, 5, 161, 0], [kr, "t", Zk, 5, 162, ho], [Zk, "t", ck, Yo, 160, gj], [hj, "b", kr, 85, 176, ka], [kr, "b", dj, 83, 178, gj], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, hk], [ck, "b", 3, 76, 174, 0], [1, "t", yr, 73, 174, Xa], [Zk, "t", 5, 72, 175, 0], [uq, "t", 5, 87, 173, fs], [uq, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [Dj, "de", Ia, 86, 177, 0], [or, "de", Pn, 71, 175, 0], [1, "s", or, 70, 174, bq], [ck, "r", 48, 174, 0], [y, "r", 49, 175, ks], [1, "r", 50, 175, 0], [1, "r", 51, 175, ks], [$q, "r", 51, 174, 0], [uq, "r", 50, 174, 0], [kr, "r", 49, 174, 0], [Zk, "r", 52, 175, Xa], [y, "r", 52, 176, Xa], [1, "r", 51, 176, fs], [ck, "r", 50, 176, Xa], [$r, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [hj, "r", 48, 176, 0], [1, "r", 69, 163, ka], [bq, "r", 70, 163, 0], [uq, "r", 71, 163, ks], [1, "r", 73, 163, ka], [1, "r", 72, 163, gj], [1, "r", 73, 164, Go], [1, "r", 72, 164, 0], [1, "r", 71, 164, fs], [ck, "r", 70, 164, gj], [1, "r", 69, 164, ks], [1, "r", 68, 164, 0], [bq, "r", 68, 165, 0], [1, "r", 69, 165, ka], [Dj, "r", 70, 165, gj], [$r, "r", 71, 165, 0], [1, "r", 72, 165, 0], [Zn, "r", 74, 164, ks], [hj, "r", 73, 165, ho], [ck, "r", 72, 166, 0], [Dj, "r", 71, 166, 0], [1, "r", 70, 166, ka], [1, "r", 74, 165, 0], [bq, "r", 24, 164, gj], [1, "r", 25, 164, ks], [Dj, "r", 27, 164, ks], [1, "r", 26, 164, 0], [Dj, "r", 28, 165, 0], [1, "r", 26, 165, ks], [1, "r", 27, 165, Xa], [kr, "r", 25, 165, gj], [1, "r", 24, 165, ho], [Dj, "r", 23, 165, 0], [$r, "r", 22, 165, ka], [1, "r", 21, 165, ks], [1, "r", 21, 166, 0], [ck, "r", 22, 166, Go], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [Dj, "r", 25, 166, ks], [Zk, "r", 26, 166, 0], [1, "r", 27, 166, fs], [y, "r", 28, 166, 0], [bq, "r", 28, 167, Go], [1, "r", 26, 167, 0], [1, "r", 25, 167, fs], [bq, "r", 24, 167, 0], [kr, "r", 23, 167, 0], [bq, "r", 22, 167, ka], [$r, "r", 27, 167, 0], [Zk, "r", 29, 166, 0], [or, "r", 29, 167, 0], [or, "r", 28, 168, hk], [or, "r", 27, 168, ho], [Zk, "r", 26, 168, gj], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [or, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, Go], [1, "r", 24, 169, ka], [1, "r", 23, 169, 0], [Zn, "r", 22, 168, 0], [$r, "r", 21, 167, ho], [1, "s", 1, 52, 174, 1], [Dj, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, ho], [1, "b", ho, 47, 174, 0], [uq, "b", 0, 69, 166, 0], [ck, "t", 2, 68, 166, ks], [y, "t", wr, 74, 163, ks], [Zn, "t", 1, 73, 162, gj], [1, "s", hk, 73, 166, 1], [1, "s", 2, 76, 165, or], [ck, "g", Ci, 59, 175, 1], [1, "p", 0, 78, 168, 1], [ck, "p", ka, 61, 162, ck], [hj, "p", Xa, 42, 170, 1], [Zn, "p", 0, da, 174, Zk], [1, "p", 0, la, 160, or], [1, "b", kr, 23, 164, gj], [$q, "b", y, 28, 169, 0], [Zn, "b", nq, 29, 168, 0], [ck, "b", 2, uk, 170, ka], [1, "t", 1, 15, 171, 0], [1, "t", Gj, 13, 175, 0], [1, "t", Ba, 19, 166, 0], [ck, "t", 5, 26, 163, ks], [ck, "s", Zn, 29, 165, 1], [kr, "t", Gj, 11, 167, 0], [hj, "t", ks, 29, 176, hk], [$r, "b", Sa, 30, 175, ks], [1, "t", uj, 24, 177, ks], [y, "b", $r, 37, 174, 0], [Zn, "b", 0, 35, 172, 0], [ck, "b", 3, 37, 170, 0], [1, "t", Ik, 38, 169, 0], [y, "t", 4, 34, 173, hk], [or, "t", Gj, 38, 175, 0], [1, "b", 2, 39, 173, 0], [Zn, "t", 3, 37, 176, ka], [1, "t", T, 30, 168, ks], [1, "s", Sa, 35, 176, 1], [or, "s", Zk, 41, 175, Zn], [1, "b", 2, 53, 176, Xa], [bq, "t", br, 55, 173, ka], [Zk, "t", Lj, 45, 170, fs], [1, "b", 1, 53, 162, ho], [$r, "b", Xa, 50, 164, hk], [1, "t", 2, 54, 163, 0], [hj, "t", yr, 49, 165, 0], [1, "t", 4, 48, 160, 0], [Zn, "t", wk, 57, 164, Go], [1, "t", Ik, 66, 162, 0], [1, "b", 1, 86, 161, fs], [uq, "b", 2, 81, 163, Xa], [1, "t", 3, 85, 162, 0], [uq, "t", Vn, 81, 162, 0], [uq, "t", 5, 88, 163, 0], [1, "t", Dj, 84, 166, fs], [1, "t", as, 72, 160, 0], [Zk, "t", 5, 70, 170, hk], [$r, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, ho], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [or, "t", 3, 60, 170, ho], [Zn, "t", 4, 63, 169, 0], [bq, "t", qa, 63, 174, Xa], [1, "t", or, 62, 175, hk], [1, "t", Yo, 40, 162, 0], [kr, "t", bq, 63, 180, 0], [1, "t", Pn, 64, 179, gj], [1, "t", 2, 35, 165, Xa], [ck, "s", Zn, 63, 173, 1], [1, "s", cn, 40, 165, 1], [hj, "b", Go, 46, 169, fs], [Zn, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [kr, "de", 22, 78, 175, ka], [bq, "de", 19, 72, 176, 0], [kr, "de", oq, 68, 168, 0], [kr, "de", 19, 65, 163, fs], [1, "de", Pi, 75, 162, 0], [Zn, "de", Pa, 80, 162, 0], [Zn, "de", Br, 88, 159, 0], [1, "de", 19, 87, 164, ks], [Dj, "de", Nn, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [uq, "de", 19, 53, 165, ka], [kr, "de", Br, 56, 163, ks], [1, "de", h, 51, 161, 0], [1, "de", Pa, 48, 167, gj], [1, "de", 19, 47, 170, 0], [y, "de", Hj, 41, 163, 0], [y, "de", 19, 37, 161, hk], [1, "de", 19, 36, 166, 0], [ck, "de", 19, 36, 171, hk], [Dj, "de", 19, 34, 174, ks], [Dj, "de", Br, 40, 172, 0], [Dj, "de", Hj, 38, 177, Xa], [Dj, "de", 19, 42, 176, 0], [Dj, "de", Hq, 53, 178, ka], [$r, "de", Pa, 53, 172, 0], [Zn, "de", Br, 64, 181, Xa], [1, "de", 19, 64, 175, Go], [y, "de", 19, 79, 172, 0], [Dj, "de", Nn, 30, 170, 0], [Zn, "de", Nn, 17, 168, fs], [Zn, "de", oq, Pq, 173, 0], [bq, "de", Hj, G, 162, 0], [kr, "de", ij, Zi, 167, ho], [1, "de", h, 20, 161, fs], [Dj, "de", Pi, 27, 162, 0], [1, "de", 19, 83, 195, ks], [Dj, "de", 2, 85, 163, 0], [1, "de", nq, 80, 164, ka], [y, "de", dj, 84, 169, 0], [$q, "de", Xj, 55, 165, Go], [uq, "de", wn, 46, 163, 0], [ck, "de", Ir, 66, 169, 0], [1, "de", 0, 63, 175, Go], [hj, "de", fs, 34, 164, ka], [bq, "de", 0, 18, 160, Xa], [$q, "de", Sa, 40, 160, gj], [$q, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [$r, "de", Pn, Hk, 175, ho], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, hk], [1, "de", 33, 59, 160, 0], [uq, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, ks], [1, "de", 33, 18, 129, gj], [Dj, "de", 33, 50, 134, ks], [y, "de", 33, 79, 127, 0], [hj, "de", 33, 89, 139, ka], [1, "b", Zk, 44, 156, 0], [ck, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, ho], [1, "t", wq, 76, 157, Xa], [1, "t", O, 62, 157, ho], [Zk, "t", Xk, 79, 156, fs], [1, "t", as, 41, 156, 0], [1, "b", 1, 28, 156, Go], [1, "t", Sa, 27, 157, Go], [1, "t", mi, 21, 156, 0], [Dj, "t", 4, 56, 159, 0], [Dj, "f", 1, 94, 153, ck], [1, "f", 2, 93, 153, 1], [1, "f", Ir, 99, 153, 1], [y, "f", $r, 98, 153, 1], [Dj, "f", Xa, 97, 153, ck], [1, "f", 1, 96, 153, 1], [Zn, "s", 1, He, 149, 1], [1, "de", 4, E, 150, ho], [y, "b", 3, 43, 281, fs], [Zk, "de", 50, 24, 39, 0], [Zk, "de", 50, 21, 39, 0], [ck, "de", 50, 22, 43, gj], [Dj, "de", 50, rk, 34, 0], [1, "de", 50, Fo, 26, Go], [y, "de", 50, 44, 42, gj], [Zn, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, ka], [1, "de", 50, 71, 41, 0], [$q, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [$q, "de", 50, Fk, 41, Go], [y, "de", 50, Ha, 21, ka], [1, "de", 50, Ln, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, ka], [uq, "de", 50, 18, Ar, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [Zn, "de", 50, 82, 39, Go], [$r, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, fs], [ck, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, Xa], [1, "de", 50, 86, 23, 0], [$q, "de", 50, 86, D, 0], [Dj, "de", 50, 29, 42, 0], [bq, "de", 9, 74, 37, 0], [1, "de", ya, 76, 22, 0], [1, "de", Yq, 79, 24, 0], [1, "de", P, 77, ds, fs], [or, "de", 36, 81, 25, hk], [1, "de", 36, 80, 36, 0], [Zn, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, ks], [uq, "de", 28, 69, 36, Go], [1, "de", 28, 80, Rq, Xa], [1, "de", 51, 24, 155, 0], [$q, "de", 51, Ka, 154, 0], [1, "de", 51, 11, 154, 0], [hj, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, fs], [kr, "de", 51, 20, 154, ks], [1, "de", 51, 23, 154, gj], [hj, "de", 51, 18, 157, 0], [or, "de", 51, 31, 154, ka], [1, "de", 51, 32, 157, 0], [ck, "de", 51, 86, 154, 0], [ck, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, hk], [1, "de", 51, 80, 154, ka], [ck, "de", 51, 77, 154, fs], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, ho], [or, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, Xa], [hj, "de", 51, 57, 154, ks], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, ks], [Zn, "de", 51, 59, 156, Go], [or, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, ho], [1, "de", 51, 54, 157, gj], [1, "de", 51, 49, 154, 0], [Zn, "de", 51, 46, 154, ks], [1, "de", 51, 44, 154, ho], [$r, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [kr, "de", 51, 38, 154, 0], [bq, "de", 51, 39, 156, ks], [or, "de", 51, 34, 154, 0], [1, "de", Vn, 19, 142, ka], [$q, "de", Vn, 37, 147, ka], [Zk, "de", 7, 53, 147, hk], [1, "de", za, 69, 150, gj], [1, "de", T, 94, 148, 0], [or, "de", Qa, 66, 147, ho], [y, "de", 4, 10, 145, 0], [1, "de", qa, 28, 137, 0], [1, "de", Ik, 15, 137, 0], [1, "de", Qa, 48, 134, 0], [1, "de", 5, 67, 135, ho], [bq, "de", 34, 84, 155, fs], [1, "de", 35, 70, 156, ho], [ck, "de", 35, 51, 156, 0], [$r, "de", 35, 56, 157, Xa], [1, "de", 35, 65, 159, hk], [1, "de", 35, 23, 156, ka], [1, "de", 35, 15, 155, 0], [1, "de", 35, I, 155, Xa], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, gj], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [Dj, "fo", 1, 80, 24, 0], [1, "fo", Pn, 67, 36, Go], [1, "fo", Ci, 45, 36, ho], [1, "fo", 2, 53, 34, fs], [kr, "fo", $r, 51, 35, ho], [or, "fo", 1, 58, 35, 0], [Zn, "fo", uq, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, Xa], [y, "fo", pn, 45, 32, Xa], [1, "fo", Sa, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [hj, "de", 52, 90, 208, 0], [1, "de", Mk, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", ks, 140, Yo, 1], [y, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", pn, 138, 6, 1], [$r, "cs", dj, 139, es, 1], [y, "cs", 2, 141, 6, 1], [1, "cs", uj, 140, 6, 1], [1, "la", Ia, 143, 7, $r], [1, "la", 3, 139, 7, 1], [1, "cs", Xa, 137, 7, uq], [1, "cs", 1, 138, Sr, Zk], [Dj, "cs", 2, 137, iq, or], [1, "cs", 2, 137, 8, hj], [1, "cs", uj, 136, 7, $q], [1, "cs", Pn, 138, Ma, Zk], [1, "cs", 3, 139, Ma, 1], [Zk, "cs", R, 136, ar, 1], [1, "cs", 3, 137, Zi, $q], [1, "de", 53, 92, 165, Xa], [1, "de", 53, 92, 180, Go], [ck, "de", 53, 92, 188, ka], [y, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, Xa], [Dj, "de", 54, 89, 153, gj], [1, "de", 54, 88, 153, ho], [Zn, "de", 54, 87, 153, 0], [hj, "de", 54, 86, 153, 0], [or, "de", 54, 85, 153, 0], [Dj, "de", 54, 84, 153, Go], [1, "de", 54, 83, 153, 0], [ck, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, ho], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [bq, "de", 54, 77, 153, 0], [$q, "de", 54, 76, 153, ho], [uq, "de", 54, 75, 153, hk], [1, "de", 54, 74, 153, 0], [hj, "de", 54, 73, 153, ks], [1, "de", 54, 72, 153, ho], [Dj, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, ks], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, ho], [kr, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, gj], [$q, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, ho], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, ka], [ck, "de", 54, 62, 153, 0], [hj, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, ks], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [or, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, hk], [1, "de", 54, 53, 153, 0], [ck, "de", 54, 52, 153, fs], [bq, "de", 54, 51, 153, gj], [Zn, "de", 54, 50, 153, Xa], [$r, "de", 54, 49, 153, 0], [uq, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, Xa], [ck, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, hk], [1, "de", 54, 42, 153, Xa], [bq, "de", 54, 41, 153, Xa], [1, "de", 54, 40, 153, Go], [y, "de", 54, 39, 153, Xa], [1, "de", 54, 37, 153, ka], [Zn, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [hj, "de", 54, 34, 153, ka], [1, "de", 54, 33, 153, 0], [hj, "de", 54, 32, 153, 0], [Zk, "de", 54, 31, 153, hk], [$q, "de", 54, 30, 153, Xa], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, ho], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, ka], [Zk, "de", 54, 25, 153, hk], [ck, "de", 54, 24, 153, ho], [1, "de", 54, 23, 153, hk], [uq, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, ka], [1, "de", 54, Fk, 153, fs], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, fs], [Dj, "de", 54, 17, 153, 0], [ck, "de", 54, 16, 153, ks], [1, "de", 54, 15, 153, ka], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [kr, "de", 54, Hn, 153, ka], [1, "de", 54, vk, 153, 0], [1, "de", 54, Ar, 153, ka], [1, "de", 54, 8, 153, 0], [uq, "de", 54, ln, 153, 0], [Dj, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, Tq, 0], [y, "de", 55, 83, 12, 0], [ck, "de", 55, 83, cj, hk], [1, "de", 55, 83, 14, 0], [ck, "de", 55, 83, 15, Go], [1, "de", 55, 83, B, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [Dj, "de", 55, 83, en, 0], [Zn, "de", 55, 83, 20, 0], [ck, "de", 55, 83, 21, gj], [hj, "de", 55, 83, 22, hk], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [Zk, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [or, "de", 55, 83, 27, ks], [1, "de", 55, 83, 28, ks], [1, "de", 55, 83, 29, ho], [Dj, "de", 55, 83, 30, hk], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, Go], [1, "de", 55, 83, 33, gj], [$r, "de", 55, 83, 34, ka], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [bq, "de", 55, 83, 38, Go], [1, "de", 55, 81, 38, 0], [hj, "de", 55, 82, 38, 0], [Dj, "de", 55, 80, 38, fs], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, ka], [Zn, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, ka], [ck, "de", 55, 75, 38, gj], [y, "de", 55, 73, 38, gj], [uq, "de", 55, 74, 38, hk], [uq, "de", 55, 72, 38, 0], [$r, "de", 55, 71, 38, 0], [Zn, "de", 55, 70, 38, Go], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [Zn, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, ka], [1, "de", 55, 65, 38, 0], [bq, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, ho], [$r, "de", 55, 62, 38, Xa], [$q, "de", 55, 60, 38, 0], [bq, "de", 55, 61, 38, ho], [1, "de", 55, 59, 38, hk], [1, "de", 55, 57, 38, 0], [Dj, "de", 55, 58, 38, ka], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, ka], [1, "de", 55, 53, 38, 0], [$q, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, fs], [$q, "de", 55, 49, 38, 0], [$q, "de", 55, 50, 38, 0], [hj, "de", 55, 48, 38, 0], [uq, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, ka], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, ka], [1, "de", 55, 41, 38, 0], [ck, "de", 55, 40, 38, hk], [1, "de", 55, 39, 38, ka], [uq, "de", 55, 38, 38, ka], [or, "de", 55, 37, 38, 0], [$r, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, fs], [1, "de", 55, 31, 38, hk], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [bq, "de", 55, 29, 38, gj], [$r, "de", 55, 28, 38, Xa], [Zn, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [ck, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [uq, "de", 55, 20, 38, 0], [kr, "de", 55, 19, 38, ho], [$r, "de", 55, 19, 37, ks], [1, "de", 55, 19, 36, Go], [or, "de", 55, Nn, 35, 0], [y, "de", 55, 19, 34, gj], [kr, "de", 55, 19, 33, 0], [kr, "de", 55, 19, 32, hk], [1, "de", 55, Pi, 31, 0], [ck, "de", 55, 19, 30, 0], [Zn, "de", 55, 19, 28, Xa], [1, "de", 55, Hk, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, ij, 26, 0], [$r, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, ho], [$q, "de", 55, 19, 23, 0], [1, "de", 55, h, 22, fs], [1, "de", 55, 19, 21, gj], [1, "de", 55, 19, 20, hk], [1, "de", 55, oq, Ha, ka], [or, "de", 55, 19, Hj, 0], [1, "de", 55, 19, 16, 0], [uq, "de", 55, Nn, ds, Xa], [$r, "de", 55, Pi, 15, ks], [$q, "de", 55, 19, 14, 0], [hj, "de", 55, h, 13, ho], [hj, "de", 55, Bi, 12, 0], [Zk, "de", 55, oq, bi, hk], [$q, "de", 55, 19, 10, Xa], [Dj, "de", 55, Pi, ya, Xa], [$r, "de", 55, Bi, 8, Xa], [kr, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, ks], [1, "de", 55, 84, 25, 0], [kr, "de", 50, 84, 24, 0], [ck, "de", 55, 84, 20, ks], [$q, "de", 55, 84, ci, 0], [1, "de", 55, 84, B, hk], [Dj, "de", 50, 84, 15, 0], [or, "de", 55, 84, 8, fs], [1, "de", 55, 84, Mi, Go], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, gj], [$r, "de", 50, 83, 40, Go], [$q, "de", 55, 72, 39, ka], [kr, "de", 55, 74, 39, 0], [$q, "de", 55, 66, 39, ka], [$q, "de", 55, 65, 39, ho], [Dj, "de", 50, 67, 41, gj], [1, "de", 55, 56, 39, fs], [or, "de", 55, 58, 39, hk], [or, "de", 55, 50, 39, gj], [Dj, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, ks], [1, "de", 50, 43, 39, 0], [Zk, "de", 50, 41, 39, Xa], [1, "de", 50, 37, 39, 0], [y, "de", 55, 36, 39, ho], [Zn, "de", 55, 32, 39, ks], [kr, "de", 50, 31, 39, 0], [Dj, "de", 55, 23, 39, 0], [Zk, "de", 55, Ha, 37, 0], [1, "de", 50, tj, 36, ho], [or, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, Ha, 31, 0], [1, "de", 50, 18, 30, gj], [uq, "de", 55, 18, 25, fs], [ck, "de", 50, oa, 24, 0], [hj, "de", 55, 18, aq, Go], [uq, "de", 55, oa, tq, 0], [kr, "de", 50, Fa, wo, fs], [bq, "de", 55, Mk, 8, fs], [ck, "de", 54, 90, 154, 0], [y, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, gj], [1, "de", 54, 76, 154, fs], [1, "de", 54, 70, 154, fs], [1, "de", 54, 66, 154, 0], [kr, "de", 54, 61, 154, 0], [$r, "de", 54, 56, 154, 0], [uq, "de", 54, 53, 154, 0], [Zn, "de", 54, 45, 154, hk], [$r, "de", 54, 42, 154, 0], [or, "de", 54, 37, 154, ka], [1, "de", 54, 30, 154, ka], [1, "de", 54, 25, 154, 0], [$q, "de", 54, 17, 154, hk], [bq, "de", 54, Xn, 154, hk], [1, "de", 54, 8, 154, 0], [1, "de", 55, aq, An, 0], [1, "de", 53, 93, 154, 0], [Dj, "de", 53, 93, 156, fs], [ck, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, hk], [bq, "de", 53, 93, 159, ho], [1, "de", 53, 93, 161, 0], [Zn, "de", 53, 93, 162, ka], [1, "de", 53, 93, 163, 0], [hj, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [uq, "de", 52, 91, 167, hk], [ck, "de", 53, 93, 169, 0], [$r, "de", 53, 93, 168, ho], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, Xa], [kr, "de", 53, 93, 173, 0], [y, "de", 53, 93, 176, gj], [1, "de", 53, 93, 175, Xa], [hj, "de", 53, 92, 169, ka], [hj, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, ka], [uq, "de", 53, 93, 180, ho], [or, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, Go], [1, "de", 53, 93, 184, 0], [Zn, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [y, "de", 53, 93, 187, Xa], [1, "de", 53, 93, 188, Go], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [kr, "de", 53, 93, 192, gj], [Zn, "de", 53, 93, 195, 0], [Zn, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [hj, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [Zk, "de", 53, 93, 202, Xa], [1, "de", 53, 93, 203, ks], [Dj, "de", 53, 93, 204, hk], [1, "de", 53, 93, 206, 0], [Dj, "de", 53, 93, 205, 0], [or, "de", 53, 93, 207, 0], [bq, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [ck, "de", 53, 93, 213, gj], [1, "de", 53, 93, 214, 0], [hj, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, fs], [Zn, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, ho], [1, "de", 53, 93, 220, gj], [1, "de", 52, 92, 213, 0], [$r, "de", 52, 92, 206, ho], [Zn, "de", 52, 92, 202, 0], [Dj, "de", 53, 92, 201, Go], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, hk], [1, "de", 53, 93, 221, hk], [Dj, "de", 53, 93, 222, hk], [y, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, ka], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, ks], [1, "de", 52, 92, 221, ka], [1, "de", 52, 92, 225, Xa], [kr, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [y, "de", 52, 93, 208, Xa], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, ka], [bq, "de", 52, 93, 199, hk], [1, "de", 52, 93, 189, Xa], [bq, "de", 52, 93, 191, 0], [hj, "de", 52, 93, 193, ka], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, ka], [Dj, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [Zk, "de", 52, 93, 177, ks], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, gj], [1, "de", 52, 93, 160, Go], [Zn, "de", 52, 92, 162, Go], [Zn, "de", 53, 93, 229, gj], [1, "de", 53, 93, 231, 0], [or, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, gj], [1, "de", 52, 93, 230, hk], [ck, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, fs], [1, "de", 53, 93, 236, ka], [bq, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [y, "de", 52, 93, 238, ka], [or, "de", 53, 93, 241, fs], [ck, "de", 52, 93, 242, hk], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, ks], [bq, "de", 53, 93, 246, 0], [Dj, "de", 53, 93, 245, ka], [hj, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, fs], [1, "de", 52, 92, 245, ks], [uq, "de", 52, 93, 249, 0], [hj, "de", 53, 93, 250, gj], [1, "de", 53, 93, 251, 0], [Zn, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [Zn, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, ho], [uq, "de", 52, 93, 258, fs], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, fs], [or, "de", 53, 93, 263, 0], [bq, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, ho], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, ks], [ck, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, hk], [1, "de", 52, 93, 278, fs], [or, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, fs], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, gj], [1, "de", 53, 93, 285, ho], [1, "de", 53, 93, 286, 0], [hj, "de", 52, 93, 287, ka], [1, "de", 53, 93, 288, 0], [hj, "de", 53, 93, 289, 0], [hj, "de", 52, 93, 290, 0], [ck, "de", 52, 93, 291, Xa], [1, "de", 53, 93, 292, Xa], [hj, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, ho], [$q, "de", 53, 93, 297, 0], [kr, "de", 53, 93, 298, Xa], [uq, "de", 52, 93, 299, ks], [1, "de", 53, 93, 300, hk], [ck, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, Go], [Zk, "r", 93, 262, ka], [1, "de", 52, 93, 261, 0], [$r, "cs", gj, 223, 104, Zk], [1, "cs", cn, 223, 105, 1], [y, "cs", Ci, 223, 102, or], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, $q], [$r, "cs", Sa, 140, Oq, $r], [1, "la", 4, 142, ln, 1], [or, "de", 4, 81, 149, 0], [1, "f", ks, 83, 148, bq], [y, "f", or, 82, 149, 1], [1, "de", 34, 81, 156, ks], [uq, "de", 51, x, An, 0], [1, "de", 54, Rj, Q, fs], [1, "de", 54, cs, pq, 0], [1, "cs", 3, 223, 106, uq], [1, "p", 0, 119, 279, 1], [1, "p", ho, 109, 242, 1], [Zk, "cs", 1, 29, ya, 1], [Zk, "cs", Ci, 30, re, 1], [$q, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [Dj, "cs", uj, 33, 9, y], [uq, "cs", pn, 69, 9, 1], [1, "cs", 2, 71, Ok, 1], [y, "cs", Ir, 70, 9, 1], [bq, "cs", 1, 72, bk, or], [1, "cs", 2, 73, pq, Zn], [Zn, "de", vi, 31, 10, 0], [$q, "de", ek, 29, Yq, 0], [1, "de", ek, 44, 10, 0], [bq, "de", 4, 87, vi, 0], [$q, "de", 4, 86, 10, 0], [1, "de", Ba, 87, Oq, 0], [Zk, "de", 5, gs, 10, ho], [1, "de", Yr, 14, 11, ks], [Zn, "de", 4, B, 10, 0], [1, "de", Ik, x, 10, ks], [1, "cs", uj, 146, re, 1], [ck, "cs", 2, 148, 9, bq], [bq, "cs", Sa, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, nr, 1], [uq, "cs", bq, 149, ln, bq], [Zn, "cs", 1, 154, Mi, hj], [1, "cs", 3, 147, nr, 1], [1, "cs", wn, 151, 9, Zn], [ck, "cs", 3, 152, 9, ck], [$r, "cs", 3, 156, re, bq], [1, "cs", 3, 157, Ok, 1], [y, "cs", 3, 158, 9, hj], [$r, "cs", wq, 159, An, $r], [hj, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [bq, "cs", 2, 162, Oq, 1], [1, "cs", Pn, 163, re, ck], [1, "cs", 1, 164, nr, 1], [1, "cs", 2, 165, Q, 1], [y, "cs", yr, 166, 9, $q], [1, "cs", 3, 168, 9, 1], [kr, "cs", 3, 170, ln, y], [1, "cs", or, 169, 9, hj], [1, "cs", 2, 167, 9, $r], [1, "cs", nq, 171, Zi, hj], [1, "cs", 2, 173, nr, 1], [1, "cs", pn, 172, 9, 1], [Dj, "cs", Xj, 174, 9, ck], [1, "cs", Zn, 175, pq, $q], [y, "cs", 3, 176, 9, or], [$r, "cs", 3, 178, 9, $q], [Dj, "cs", 3, 179, An, 1], [Zk, "cs", 0, 180, 9, 1], [$r, "cs", 2, 177, Oq, or], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, Zn], [1, "cs", Ci, 183, Zi, 1], [1, "cs", Pn, 184, Ok, bq], [1, "cs", 2, 185, 9, 1], [Zn, "cs", Xj, 186, 9, 1], [hj, "cs", uq, 187, 9, 1], [1, "cs", dj, 188, Ok, 1], [Dj, "cs", 3, 189, 9, Zk], [1, "cs", 3, 190, 9, 1], [ck, "cs", wq, 191, 9, 1], [1, "cs", pn, 192, 9, Zn], [1, "cs", 0, 193, An, $r], [1, "cs", Xj, 194, ya, 1], [y, "cs", Ir, 196, 9, 1], [1, "cs", 2, 198, 9, hj], [1, "cs", 2, 200, Q, 1], [ck, "cs", yr, 195, Q, 1], [hj, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, re, y], [Zn, "cs", 0, 201, 9, $r], [1, "cs", Xj, 202, 9, 1], [hj, "cs", Ir, 203, Ma, y], [Zn, "cs", Oj, 208, An, Zk], [Zk, "cs", 3, 207, Mi, y], [1, "cs", 3, 206, nr, 1], [ck, "cs", R, 205, nr, $r], [1, "cs", 3, 204, 9, kr], [1, "cs", 3, 214, ln, $q], [bq, "cs", yr, 215, ln, y], [1, "cs", 3, 216, 9, 1], [ck, "cs", wq, 217, Zi, 1], [1, "cs", 3, 218, 9, 1], [kr, "b", 0, O, 159, 0], [Zn, "b", 0, 5, 171, 0], [dj, "isl", 1, 122, 63, ho], [2, "isl", 2, 119, 277, 0], [2, "isl", uj, 109, 244, 0], [2, "isl", 2, 114, 205, Xa], [dj, "isl", Zn, 120, 150, Go], [Ir, "isl", 2, 154, 129, fs], [nq, "isl", Xa, 184, 158, gj], [Sa, "isl", 1, 208, 128, fs], [2, "isl", bq, 215, 132, ka], [2, "isl", $q, 214, 128, 0], [pn, "isl", y, 209, 132, Xa], [1, "la", 3, 217, ie, y], [1, "la", Zn, 215, 19, ck], [1, "la", gj, 212, 18, 1], [Dj, "la", 4, 214, 18, 1], [1, "la", 4, 216, Pi, 1], [1, "la", 4, 211, 20, 1], [hj, "la", Ia, 210, Br, 1], [1, "la", 3, 215, 21, bq], [1, "la", 1, 214, u, Zn], [hj, "la", 3, 214, 22, 1], [hj, "la", 3, 214, 24, 1], [$r, "la", 4, 214, 26, 1], [ck, "la", 4, 213, 27, Dj], [bq, "la", 1, 212, 28, Zk], [1, "la", 2, 212, 29, Zn], [hj, "la", 5, 212, 30, ck], [Dj, "la", Qa, 208, 19, 1], [1, "la", T, 207, h, $r], [ck, "la", or, 206, 19, 1], [or, "la", hj, 205, Pa, Zn], [y, "la", pn, 204, Hj, 1], [1, "la", Vn, 203, Pi, $r], [1, "la", yr, 210, s, 1]];
  const ms = Bo;
  var ns = ks;
  const os = bk;
  var rs = {
    ⲆᐃᐃᐃⲆ: ["#133A2B", "#042b30"],
    ΔⵠᐃᐃⵠⵠᐃⲆΔ: ["#EBF2F0", "#136167"],
    ⲆⲆⲆΔⵠΔⲆ: ["#4EB687", "#187484"],
    ΔᐃⵠⵠⲆⵠΔ: ["#664516", "#13474C"],
    ⲆⵠᐃᐃⲆⵠᐃ: ["#FCEFBB", "#0F4D48"],
    ᐃᐃⵠΔⲆⲆⵠ: ["#C1AA7E", "#0F423D"],
    ⲆᐃⲆᐃⵠⲆⲆ: ["#594837", "#163A3A"],
    ΔᐃⵠⵠⲆᐃΔ: ["#A5D6D6", "#539CA0"],
    ΔⲆᐃᐃᐃ: ["#0B6A84", "#09373F"],
    ᐃⲆⵠⵠⵠⵠΔ: ["#2A8B9B", "#0F464C"],
    ΔⵠⲆᐃⵠⵠᐃ: ["#A9D6D3", "#115E60"],
    ΔⲆᐃΔΔΔⵠ: ["#ECF7F9", "#539CA0"],
    ⲆᐃⵠⲆⵠⵠᐃ: ["#FFF", "#FFF"],
    ΔⲆⵠΔΔⵠⲆ: ["#FFF", "#FFF"],
    ᐃᐃⵠΔΔⲆΔ: ["#1C9BA4", "#00272F"],
    ⲆⲆⵠᐃΔ: ["#2D2017", "#031C1E"],
    ΔΔⲆ: fs,
    ⵠⲆᐃ: 1,
    ᐃΔΔΔⲆⵠⲆⵠΔ: 2300,
    ⵠᐃΔⵠⲆⲆᐃⵠᐃ: 2290,
    ⲆⵠⲆⵠⲆΔⵠ: 34,
    ⵠΔⲆᐃⲆᐃΔ: 5,
    ᐃⲆⲆᐃⵠΔⵠ: 68,
    ⵠⲆⲆᐃᐃᐃᐃ: 34,
    ᐃᐃⵠⵠᐃΔⵠ: 5,
    ⵠⵠⲆΔᐃⲆᐃ: $r,
    ⵠⵠⵠᐃⵠⵠΔ: 0.6,
    ⲆᐃⵠⲆⵠⵠⵠ: 0.25,
    ⵠⲆΔⲆᐃⲆⲆ: 50,
    ⲆΔⵠⲆⲆⲆᐃ: vi,
    ⵠⵠⵠⵠⵠⵠΔ: 75,
    ⵠΔᐃⵠⵠⵠⲆ: 20,
    ᐃⲆΔᐃⲆⲆΔ: 5,
    ⲆⲆΔᐃⵠ: ns++,
    ⵠᐃΔΔᐃ: ns++,
    ᐃⲆᐃⵠⵠ: ns++,
    ᐃⵠⵠΔΔ: ns++,
    ᐃᐃΔΔⵠ: ns++,
    ⲆᐃΔⵠⵠ: ns++,
    ΔᐃⵠΔⲆ: ns++,
    ⵠⵠᐃᐃᐃ: ns++,
    ⲆⵠΔⵠΔ: ns++,
    ᐃⲆΔⵠⵠ: ns++,
    ⵠⲆⲆΔⵠ: ns++,
    ΔΔⵠⵠⲆ: ns++,
    ⲆⲆᐃᐃⵠ: ns++,
    ⲆΔᐃⵠᐃ: ns++,
    ΔⲆⵠΔᐃ: ns++,
    ⲆΔΔΔᐃ: ns++,
    ᐃⵠⲆᐃⲆ: ns++,
    ΔⵠⲆΔᐃ: ns++,
    ⵠΔᐃⲆᐃ: ns++,
    ⲆΔⵠⵠⵠ: ns++,
    ⵠᐃⵠⲆⲆ: ns++,
    ΔΔᐃⲆᐃ: ns++,
    ⵠⲆⵠⵠⵠ: ns++,
    ⵠⲆⲆⵠⲆ: ns++,
    ΔⲆⲆⲆⲆ: ns++,
    ΔⵠΔᐃΔ: ns++,
    ⵠⲆⵠⵠᐃ: ns++,
    Ⲇᐃᐃᐃⵠ: ns++,
    ᐃᐃⵠⵠⲆ: ns++,
    ⵠⵠᐃΔ: ns++,
    ⵠΔⲆⵠⲆ: ns++,
    ΔᐃΔᐃΔ: ns++,
    ΔΔᐃⵠΔ: ns++,
    ΔⲆⲆΔⵠ: ns++,
    ᐃᐃⲆᐃⲆ: ns++,
    ᐃⵠⵠᐃⵠ: ns++,
    ⲆⵠΔΔⲆ: ns++,
    ⲆΔᐃⵠⵠ: ns++,
    ᐃᐃΔⵠΔ: ns++,
    ᐃΔᐃⲆᐃ: ns++,
    ⵠΔⲆᐃⲆ: ns++,
    ⵠΔΔΔᐃ: ns++,
    ⵠᐃΔΔⵠ: ns++,
    ᐃⵠⲆΔⵠ: ns++,
    ⲆΔⲆΔᐃ: ns++,
    ᐃᐃⵠⵠᐃ: ns++,
    ΔⲆᐃΔΔ: ns++,
    ᐃⵠⲆⲆⲆ: ns++,
    ᐃⲆⲆΔⲆ: ns++,
    ⵠⲆⲆⲆᐃ: ns++,
    ΔⵠⲆᐃⵠ: ns++,
    ΔⵠⲆⵠⵠ: ns++,
    ⲆΔⵠᐃⲆ: ns++,
    ⵠᐃⵠⲆΔ: ns++,
    ⲆⵠⵠᐃΔ: ns++,
    ᐃⲆΔⲆΔ: ns++,
    ⵠⲆΔᐃΔ: ns++,
    ⵠⵠⲆⲆⲆ: ns++,
    ⲆⲆᐃⲆΔ: ns++,
    ⵠⵠᐃᐃⲆ: ns++,
    ⲆᐃΔⵠⲆ: ns++,
    ⵠΔᐃΔⲆ: ns++,
    ᐃⵠⵠⲆᐃ: ns++,
    ΔⵠⲆⵠᐃ: ns++,
    ΔⵠΔᐃᐃ: ns++,
    ΔⲆⵠᐃⲆ: ns++,
    ⲆΔᐃⲆⵠ: ns++,
    ΔᐃⵠⵠΔ: ns++,
    ⲆᐃᐃⲆΔ: ns++,
    ΔⲆᐃⵠⲆ: ns++,
    ⲆⲆᐃᐃⲆ: ns++,
    ΔⵠᐃⲆⲆ: ns++,
    ⵠⲆᐃⲆⵠ: ns++,
    ΔᐃᐃΔᐃ: ns++,
    ΔⵠΔⵠⲆ: ns++,
    ᐃᐃⵠᐃΔ: ns++,
    ⵠᐃᐃᐃΔ: ns++,
    ⲆⲆΔⵠⲆ: ns++,
    ΔⲆⵠΔⲆ: ns++,
    ⵠⲆᐃⵠⵠ: ns++,
    ⵠᐃᐃΔⵠ: ns++,
    ΔΔᐃⲆⲆ: ns++,
    ΔΔΔᐃᐃ: ns++,
    Ⲇᐃⵠᐃᐃ: ns++,
    ΔΔⲆⵠⲆ: ns++,
    ⵠⲆᐃⵠⲆ: ns++,
    ⵠΔΔⵠⵠ: ns++,
    ΔⲆⵠⵠᐃ: ns++,
    ᐃⲆⵠⵠⲆ: ns++,
    ⲆᐃⵠΔⲆ: ns++,
    ΔΔⵠᐃᐃ: ns++,
    ΔᐃⲆⵠⵠ: ns++,
    ΔⲆᐃᐃⲆ: ns++,
    ᐃΔᐃⵠᐃ: ns++,
    ⵠΔⵠᐃΔ: ns++,
    ᐃΔᐃᐃⲆ: ns++,
    Δᐃⵠⵠᐃ: ns++,
    ᐃΔⵠΔⲆ: ns++,
    ΔⲆⵠᐃᐃ: ns++,
    ⵠᐃΔⲆⵠ: ns++,
    ⲆⵠΔⵠⵠⲆⵠᐃⲆ: ns++,
    ⵠⵠⲆⲆⵠ: ns++,
    ⲆΔΔᐃΔ: ns++,
    ⲆⲆⲆⵠΔ: ns++,
    ⲆᐃΔⲆᐃ: ns++,
    ⵠΔⵠΔⵠ: ns++,
    ⵠⵠⵠⲆⵠ: ns++,
    ⵠⲆⵠᐃᐃ: ns++,
    ⵠᐃⵠᐃⲆ: ns++,
    ⵠⲆΔⵠ: ns++,
    ⲆⲆⵠᐃᐃ: ns++,
    ΔᐃⲆⲆ: ns++,
    ᐃⲆΔⵠ: ns++,
    ΔᐃᐃⲆⵠΔⲆ: ns++,
    ΔᐃⵠΔᐃ: ns++,
    ΔⵠⵠΔⵠⵠΔ: ns++,
    ⲆΔⲆᐃᐃ: ns++,
    ⵠⵠⵠⵠᐃ: ns++,
    ΔΔᐃⵠⵠⲆⲆ: ns++,
    ⵠⲆᐃⵠΔⲆᐃ: ns++,
    ⵠᐃΔⵠⲆ: ns++,
    ⲆΔⲆᐃ: ns++,
    ⲆᐃΔΔΔ: ns++,
    ⲆᐃⲆᐃⲆ: ns++,
    ⲆᐃⵠⲆⲆᐃⲆ: ns++,
    ⲆⲆΔΔΔ: ns++,
    ΔΔⲆᐃⲆ: ns++,
    ⵠⵠⲆΔⲆ: ns++,
    ᐃᐃⵠΔⵠ: ns++,
    ⵠⵠⵠΔⵠ: ns++,
    ΔᐃΔⲆⵠ: ns++,
    ᐃⲆⵠⵠⵠ: ns++,
    ΔᐃΔⲆⲆ: ns++,
    ᐃⵠΔᐃΔ: ns++,
    ᐃΔΔⲆⵠ: ns++,
    ⵠᐃΔⵠΔ: ns++,
    ᐃⲆⲆⵠΔ: ns++,
    ⵠᐃⲆⲆⲆ: ns++,
    ᐃⵠⵠΔⵠ: ns++,
    ⲆⵠⲆⲆⵠ: ns++,
    ⲆⲆᐃⲆᐃⲆΔ: ns++,
    ⲆⵠΔᐃΔ: ns++,
    ⲆⲆⵠⵠⲆⲆⵠ: ns++,
    ⲆΔΔΔΔΔⲆ: ns++,
    ΔⵠᐃⲆΔⲆᐃ: ns++,
    ᐃⵠᐃΔⲆΔⵠ: ns++,
    ᐃⵠⲆᐃⵠ: ns++,
    ⵠΔⲆᐃⵠ: ns++,
    ΔΔⲆⵠΔ: ns++,
    ΔⵠᐃⵠΔ: ns++,
    ΔⵠⲆⲆⲆ: ns++,
    ⲆΔᐃⲆᐃ: ns++,
    ᐃΔⵠΔⵠ: ns++,
    ⲆᐃΔᐃⲆ: ns++,
    ⵠΔⲆⵠΔ: ns++,
    ⲆⲆⵠΔⵠ: ns++,
    ⵠⵠⵠⵠⲆ: ns++,
    ᐃᐃᐃΔᐃ: ns++,
    ⲆΔⲆⵠᐃ: ns++,
    ⲆⲆⲆⲆⲆ: ns++,
    ⲆΔΔᐃⲆ: ns++,
    ᐃⵠΔᐃⵠ: ns++,
    ⵠⵠⵠⵠⵠ: ns++,
    ΔᐃᐃⲆᐃ: ns++,
    ⵠΔᐃⵠᐃ: ns++,
    ᐃΔΔΔⲆ: ns++,
    ⵠⵠΔᐃᐃᐃⵠ: ns++,
    ⵠⲆⲆⲆΔ: ns++,
    ⵠᐃⲆᐃᐃ: ns++,
    ᐃΔⵠᐃᐃ: ns++,
    ⲆⵠⵠⵠΔ: ns++,
    ᐃᐃᐃᐃΔΔΔ: ns++,
    ᐃⵠⵠⵠⵠⵠⵠ: ns++,
    ΔⵠⲆⲆⲆΔⵠ: ns++,
    ⲆᐃⲆⵠⲆ: ns++,
    ΔⵠⲆᐃⲆⵠΔ: ns++,
    ᐃⵠΔⲆⲆΔΔ: ns++,
    ⵠⲆⵠᐃΔΔⵠ: ns++,
    ⲆᐃⵠⵠⵠⵠⲆ: ns++,
    ⵠⲆⲆⲆⵠⵠΔ: ns++,
    ⲆᐃⵠⲆᐃⵠᐃ: ns++,
    ⵠΔⵠᐃⵠⵠΔ: ns++,
    ᐃⵠΔⵠⲆᐃᐃ: ns++,
    ⲆⵠⲆΔⵠ: ns++,
    ⵠᐃⵠⵠⵠ: ns++,
    ΔΔⵠΔⵠ: ns++,
    ΔΔⵠⲆⲆ: ns++,
    Δⵠⵠⵠᐃ: ns++,
    ᐃᐃⵠⲆⲆⲆⵠ: ns++,
    ᐃⵠᐃΔΔ: ns++,
    ⵠΔᐃΔᐃ: ns++,
    ⵠⵠⵠⵠⲆΔΔ: ns++,
    ⵠⲆⲆᐃΔ: ns++,
    ⵠⲆᐃᐃⵠᐃΔ: ns++,
    ⲆᐃᐃⵠⲆ: ns++,
    ⵠⲆΔⲆⲆ: ns++,
    ΔᐃⲆⲆΔⵠΔ: ns++,
    ⵠⵠᐃΔⵠⵠⲆ: ns++,
    ⵠΔⵠⵠⲆ: ns++,
    ΔⲆᐃⵠΔ: ns++,
    ᐃᐃᐃᐃⲆⲆⵠ: ns++,
    ᐃᐃᐃⵠΔ: ns++,
    ⲆⲆⵠΔ: ns++,
    ᐃⵠΔⵠⵠ: ns++,
    ΔΔⵠⲆΔΔⲆ: ns++,
    ᐃⲆⵠⲆΔ: ns++,
    ⲆᐃΔΔΔⲆⵠ: ns++,
    ᐃΔⵠᐃⵠ: ns++,
    ΔᐃᐃΔᐃⵠᐃ: ns++,
    ⲆΔᐃΔᐃ: ns++,
    ᐃⵠΔᐃᐃᐃⲆ: ns++,
    ⵠΔⵠⵠᐃⵠⲆ: ns++,
    ᐃΔᐃᐃⵠ: ns++,
    ⲆΔᐃᐃΔ: ns++,
    ⲆΔᐃⲆⲆ: ns++,
    Δᐃⵠᐃᐃ: ns++,
    ᐃⲆΔᐃⵠ: ns++,
    ΔΔΔⲆⵠ: ns++,
    ΔᐃΔⵠⵠ: ns++,
    ΔᐃⵠⲆⲆ: ns++,
    ⲆᐃⵠⵠΔ: ns++,
    ᐃΔᐃᐃᐃ: ns++,
    ⵠⵠⵠⵠΔ: ns++,
    ΔⵠⲆⲆⵠ: ns++,
    ᐃΔⵠⵠⵠ: ns++,
    ΔⵠᐃⵠⵠⲆⵠ: ns++,
    ΔⲆⲆⲆᐃΔⲆ: ns++,
    ΔⵠᐃΔⵠ: ns++,
    ⵠᐃᐃⵠᐃΔΔ: ns++,
    ⵠΔᐃⵠⲆ: ns++,
    ᐃⲆⵠΔⵠ: ns++,
    ᐃⲆᐃⲆⲆ: ns++,
    ⲆⲆⲆᐃⲆ: ns++,
    ΔᐃⵠΔⵠ: ns++,
    ⲆⲆⲆⲆⲆⵠⲆ: ns++,
    ⵠⲆⵠΔⵠ: ns++,
    ᐃⲆΔⵠᐃ: ns++,
    ⲆᐃΔᐃΔ: ns++,
    ⵠᐃⲆⲆᐃ: ns++,
    ᐃΔⵠⵠᐃ: ns++,
    ⵠᐃΔᐃᐃ: ns++,
    ΔⵠΔᐃⵠ: ns++,
    ᐃⲆΔⵠΔ: ns++,
    ΔΔⵠΔⲆᐃⵠ: ns++,
    ⵠᐃᐃΔᐃ: ns++,
    ⵠᐃⵠΔΔ: ns++,
    ⲆⵠΔᐃⲆⵠᐃ: ns++,
    Δⵠⵠⵠⵠ: ns++,
    ᐃⲆᐃⵠᐃ: ns++,
    ᐃΔΔΔⵠΔᐃ: ns++,
    ⵠᐃⲆⵠⲆ: ns++,
    ⵠΔⵠⲆΔ: ns++,
    ᐃⲆⲆⵠᐃΔⲆ: ns++,
    ΔᐃᐃΔⵠⵠᐃ: ns++,
    ᐃΔΔᐃᐃΔΔ: ns++,
    ᐃⵠⵠᐃⵠᐃΔ: ns++,
    ⲆᐃⲆᐃᐃⵠᐃ: ns++,
    ⲆᐃᐃᐃᐃΔⵠ: ns++,
    ᐃⲆⵠⲆΔⲆⲆ: ns++,
    ᐃⵠΔΔᐃⲆⵠ: ns++,
    ᐃᐃᐃⲆΔ: ns++,
    ⲆᐃⲆᐃⲆᐃⵠ: ns++,
    ⵠⵠΔᐃⲆΔΔ: ns++,
    Ⲇⵠⵠᐃⵠᐃⵠ: ns++,
    ⲆᐃⲆⵠᐃ: ns++,
    ΔᐃᐃⵠᐃΔⲆ: ns++,
    ΔΔΔⵠᐃΔⵠ: ns++,
    Δⵠⵠᐃᐃⵠᐃ: ns++,
    ᐃⲆΔⵠΔΔⲆ: ns++,
    ⲆᐃᐃΔⵠΔⵠ: ns++,
    ⵠΔⵠⲆⲆᐃᐃ: ns++,
    ΔᐃⲆᐃⲆΔΔ: ns++,
    ΔᐃⲆᐃⲆⲆⵠ: ns++,
    ΔⲆⲆᐃⲆΔⵠ: ns++,
    ᐃΔⵠᐃΔⲆⲆ: ns++,
    ΔⵠΔⵠᐃⵠΔ: ns++,
    ᐃΔᐃⵠᐃⵠⵠ: ns++,
    ⵠⵠΔᐃⲆⵠⵠ: ns++,
    ⲆΔⵠᐃΔⵠⲆ: ns++,
    ΔⲆⵠⲆ: ns++,
    ⵠΔᐃⲆⲆ: ns++,
    ᐃᐃᐃΔᐃᐃΔ: ns++,
    ᐃⵠᐃΔᐃⲆᐃ: ns++,
    ΔⲆ: ns++,
    ᐃⲆⲆⵠⵠΔⲆ: ns++,
    ⲆⲆᐃΔᐃ: ns++,
    ⵠⵠⵠᐃΔ: ns++,
    ⵠᐃΔⵠⵠⲆⵠ: ns++,
    ᐃⲆΔⲆⵠ: ns++,
    ΔⲆⲆΔⵠᐃⲆ: ns++,
    ⵠⵠᐃⵠⲆΔᐃ: ns++,
    ⲆⵠᐃΔᐃᐃⵠ: ns++,
    ΔΔΔⲆⲆⵠⵠ: ns++,
    ΔⵠΔⲆᐃΔⲆ: ns++,
    ΔᐃⵠᐃⲆ: ns++,
    ⵠΔᐃΔΔᐃⲆ: ns++,
    ⵠⲆΔΔⲆⵠΔ: ns++,
    ᐃᐃⲆⲆΔⵠⵠ: ns++,
    ΔΔᐃⵠᐃΔᐃ: ns++,
    ⲆΔᐃⲆΔ: ns++,
    ΔⵠᐃᐃᐃΔⵠ: ns++,
    ΔⵠⵠⵠⵠⵠⲆ: ns++,
    ⵠⵠⵠᐃᐃᐃΔ: ns++,
    ⲆΔⲆⵠΔⵠⲆ: ns++,
    ΔΔⲆΔᐃᐃΔ: ns++,
    ᐃᐃᐃΔⲆΔΔ: ns++,
    ⲆⵠΔⲆᐃⵠⵠ: ns++,
    ΔᐃΔⲆΔ: ns++,
    ΔⵠⲆᐃᐃΔⲆ: ns++,
    ⲆⵠⲆᐃⵠⵠⵠ: ns++,
    ΔΔΔⵠⵠᐃⲆ: ns++,
    ΔⲆⵠᐃᐃⲆⵠ: ns++,
    ΔΔⵠᐃᐃᐃⵠ: ns++,
    ⲆΔⲆⵠⲆᐃⲆ: ns++,
    ⵠΔⵠⵠΔᐃΔ: ns++,
    ᐃⲆΔΔΔⵠⵠ: ns++,
    ⲆᐃᐃᐃⲆⵠᐃ: ns++,
    ᐃᐃⵠⵠⵠⵠⵠ: ns++,
    ⲆΔᐃᐃΔⵠΔ: ns++,
    ΔⵠⲆᐃᐃⵠⲆ: ns++,
    ⲆⲆΔΔΔᐃᐃ: ns++,
    ΔᐃΔΔΔ: ns++,
    ᐃⲆᐃᐃᐃⵠᐃ: ns++,
    ΔΔⵠⵠᐃⵠⲆ: ns++,
    ⲆΔΔⵠⲆⵠⵠ: ns++,
    ⵠΔⵠΔⲆΔⲆ: ns++,
    ⲆΔⵠⲆⲆⵠⲆ: ns++,
    ᐃⲆⲆΔᐃⲆⲆ: ns++,
    ⵠⵠⲆⲆΔⲆᐃ: ns++,
    ΔⲆᐃᐃᐃΔᐃ: ns++,
    ΔΔⲆᐃᐃΔΔ: ns++,
    ΔΔᐃᐃΔⲆⵠ: ns++,
    ⵠⲆΔΔⲆᐃⵠ: ns++,
    ΔᐃⲆⲆΔᐃⵠ: ns++,
    ⵠⲆΔⲆⵠΔⲆ: ns++,
    ᐃᐃⵠⲆⵠᐃⲆ: ns++,
    ᐃΔⵠⵠΔⲆΔ: ns++,
    ⲆⵠᐃᐃⵠⵠΔ: ns++,
    ᐃⲆⵠⵠᐃⵠⲆ: ns++,
    ᐃⲆᐃⲆᐃⲆⵠ: ns++,
    ΔΔΔΔΔΔⲆ: ns++,
    ⲆⵠⵠΔΔΔⵠ: ns++,
    ΔⵠΔᐃⲆᐃᐃ: ns++,
    ᐃᐃⲆᐃᐃΔⵠ: ns++,
    ⵠᐃⲆⲆⵠⲆⲆ: ns++,
    ᐃⲆΔⵠⵠⲆⵠ: ns++,
    ΔⲆΔⵠΔⲆᐃ: ns++,
    ⵠⲆᐃⲆᐃΔΔᐃⲆ: ns++,
    ⲆⲆΔⲆΔΔΔ: ns++,
    ΔⵠΔΔΔⵠΔ: ns++,
    ΔᐃⵠΔᐃⵠᐃ: ns++,
    ⵠΔⲆⲆⵠⵠᐃ: ns++,
    ⵠᐃᐃⲆⵠⲆΔ: ns++,
    ⲆⵠⲆⲆᐃΔⵠ: ns++,
    ᐃᐃⲆᐃⲆⵠⲆ: ns++,
    ΔΔΔᐃⵠⵠΔ: ns++,
    ⵠΔⵠⲆⵠⵠⲆ: ns++,
    ᐃⲆⵠⵠᐃᐃⵠ: ns++,
    ⵠᐃᐃΔⲆᐃᐃ: ns++,
    ᐃΔⲆᐃⲆⲆᐃ: ns++,
    ΔΔΔⲆⵠⲆⵠ: ns++,
    ⵠΔᐃΔⵠⵠⲆ: ns++,
    ⲆᐃΔⵠΔⲆᐃ: ns++,
    ⲆᐃᐃⵠΔΔⲆ: ns++,
    ᐃΔΔᐃⲆΔΔ: ns++,
    ⲆΔᐃⵠᐃⵠⲆ: ns++,
    ⵠᐃⲆⲆⵠⲆᐃ: ns++,
    ᐃΔᐃᐃⲆⵠᐃ: ns++,
    ᐃΔⵠᐃⵠⲆⲆ: ns++,
    ⵠΔⲆᐃⵠⵠᐃ: ns++,
    ⲆⵠⵠⲆⲆᐃᐃ: ns++,
    ⵠᐃⵠᐃⵠΔⵠ: ns++,
    ⲆⵠᐃⵠΔᐃⵠ: ns++,
    ⵠᐃⵠⲆᐃᐃⵠ: ns++,
    ⲆⵠΔᐃᐃᐃᐃ: ns++,
    ⲆⵠⲆⲆᐃⵠⵠ: ns++,
    ⲆⲆⲆΔⵠⵠⵠ: ns++,
    ΔⵠΔΔΔⵠᐃ: ns++,
    ᐃᐃⲆᐃΔΔΔ: ns++,
    ⵠᐃⵠᐃᐃⵠΔ: ns++,
    ⲆᐃⲆⲆΔΔᐃ: ns++,
    ⵠΔⵠⵠⲆⲆᐃ: ns++,
    ⵠᐃᐃΔⲆⲆⲆ: ns++,
    ᐃⲆΔⲆᐃᐃᐃ: ns++,
    ⵠΔΔⵠⵠⵠΔ: ns++,
    ⲆⲆⲆⵠⵠᐃΔ: ns++,
    ⵠᐃΔΔⲆⲆΔ: ns++,
    ΔΔⵠᐃⲆⲆⵠ: ns++,
    ⵠᐃΔⵠⲆⲆⵠ: ns++,
    ᐃᐃⵠΔⵠⲆⵠ: ns++,
    ᐃⵠⵠᐃΔᐃⵠ: ns++,
    ⲆΔᐃⵠΔⵠΔ: ns++,
    ΔΔᐃⲆⲆⲆᐃ: ns++,
    ᐃΔⵠΔⵠΔⲆ: ns++,
    ⵠΔⲆⲆᐃⲆⵠ: ns++,
    Ⲇⵠⵠⵠⵠᐃⵠ: ns++,
    ΔⵠⵠⲆⵠⵠⲆ: ns++,
    ⵠΔⲆΔⵠΔᐃ: ns++,
    ᐃΔⵠⵠⵠⵠᐃ: ns++,
    ⲆΔⲆΔⲆⵠΔ: ns++,
    ⲆⵠⲆΔⵠᐃⲆ: ns++,
    ᐃⵠᐃᐃⵠΔᐃ: ns++,
    ⲆᐃⵠⵠⵠⲆᐃ: ns++,
    ΔΔᐃΔⵠⵠⲆ: ns++,
    ΔᐃΔΔⵠᐃⵠ: ns++,
    ⲆᐃⲆᐃⲆΔᐃ: ns++,
    ⵠΔΔᐃΔⲆⵠ: ns++,
    ᐃⲆᐃⵠᐃⲆⵠ: ns++,
    ᐃⵠⲆⵠᐃⲆⵠ: ns++,
    ᐃᐃⲆⵠⵠⲆⵠ: ns++,
    ⲆⲆᐃᐃᐃⵠΔ: ns++,
    ⵠⵠⵠⲆⲆⵠᐃ: ns++,
    ⵠⲆⲆⲆᐃⲆⲆ: ns++,
    ΔⲆᐃΔᐃ: ns++,
    ᐃⵠⲆΔᐃᐃᐃⲆⲆ: ns++,
    ΔΔΔΔⵠ: ns++,
    ᐃⲆᐃⲆᐃ: ns++,
    ⲆⵠΔᐃⲆΔⵠᐃⲆ: ns++,
    ᐃⲆⲆⵠⲆᐃᐃ: ns++,
    ΔᐃⵠⲆⵠ: ns++,
    ΔⵠⲆΔΔⵠΔ: ns++,
    ⲆΔᐃΔⲆᐃⵠ: ns++,
    ⲆⵠⵠΔᐃΔᐃ: ns++,
    ⲆⵠⲆⲆᐃᐃᐃ: ns++,
    ⲆⵠᐃⵠΔᐃⲆ: ns++,
    ⵠⲆᐃΔᐃᐃᐃ: ns++,
    ᐃⲆΔⵠⲆᐃⵠ: ns++,
    ⲆΔᐃⵠⲆⲆᐃ: ns++,
    ⲆⲆΔΔⲆᐃⲆ: ns++,
    ⵠⲆⵠⲆⵠᐃⵠ: ns++,
    ᐃⲆΔΔΔⲆⵠ: ns++,
    ⵠΔΔⵠΔΔⵠ: ns++,
    ΔⲆΔᐃᐃⲆⲆ: ns++,
    ΔΔⵠⵠⲆⵠΔ: ns++,
    ⲆᐃᐃⵠⵠⵠΔ: ns++,
    ΔΔᐃΔΔⲆΔ: ns++,
    ⵠᐃⵠΔⵠⵠⲆ: ns++,
    ᐃⵠⲆΔΔΔⲆ: ns++,
    ᐃⲆⵠᐃⲆⵠⵠ: ns++,
    ⵠⵠΔⲆΔΔⲆ: ns++,
    ΔΔⵠⵠΔΔᐃ: ns++,
    ΔⲆΔΔⲆΔᐃ: ns++,
    ΔⲆᐃⵠⲆⵠⵠ: ns++,
    ⲆⲆⲆᐃΔⵠΔ: ns++,
    ΔⲆⵠᐃⵠⲆⲆⲆᐃ: ns++,
    ⵠⲆΔⵠᐃ: ns++,
    ⲆⲆΔᐃⵠᐃⲆ: ns++,
    ⲆⵠⵠⲆΔⲆⲆ: ns++,
    ⵠᐃⵠⲆΔⵠⵠⲆᐃ: ns++,
    ⲆⲆᐃⵠΔ: ns++,
    ⲆΔⵠΔⲆ: ns++,
    ΔΔΔΔᐃⲆⵠ: ns++,
    ⵠᐃⲆΔΔⲆΔ: ns++,
    ⵠΔΔᐃᐃⲆΔ: ns++,
    ΔᐃⵠⲆᐃⵠⲆ: ns++,
    ⵠⲆⵠΔⵠΔΔ: ns++,
    ΔΔⲆⵠⲆΔΔ: ns++,
    ⵠⵠᐃΔΔⵠⲆ: ns++,
    ⲆᐃᐃⲆᐃⲆⵠ: ns++,
    ΔΔⵠᐃⲆΔᐃ: ns++,
    ᐃⵠⲆΔⲆᐃⲆ: ns++,
    ᐃⲆⲆⲆⵠΔᐃ: ns++,
    ⵠⲆᐃⲆⲆᐃᐃ: ns++,
    ⵠΔⲆⲆⵠⵠⲆ: ns++,
    ⵠᐃⵠΔΔᐃΔ: ns++,
    ⲆᐃⲆΔᐃⵠⲆ: ns++,
    ⵠⵠⵠᐃᐃⵠⲆ: ns++,
    ⲆΔⵠⵠⲆΔⵠ: ns++,
    ΔⵠΔΔⲆΔᐃ: ns++,
    ⵠⵠⵠΔΔⲆⲆ: ns++,
    ΔⲆⲆⲆⵠᐃⵠ: ns++,
    ᐃⵠᐃⲆⲆⲆⲆ: ns++,
    ⵠΔⵠⲆⵠⵠᐃ: ns++,
    ΔΔⵠᐃᐃᐃΔ: ns++,
    ᐃⵠᐃⵠⲆᐃⲆ: ns++,
    ⲆᐃⲆⵠΔΔᐃ: ns++,
    ⵠᐃⲆⲆⵠⵠΔ: ns++,
    ᐃⲆᐃΔᐃᐃΔ: ns++,
    ΔⲆΔⲆᐃⵠⲆ: ns++,
    ⵠᐃᐃᐃΔΔⲆ: ns++,
    ⵠᐃᐃᐃΔⲆⲆ: ns++,
    ⲆΔᐃΔᐃᐃⲆ: ns++,
    ΔⲆⲆⲆⵠⵠⵠ: ns++,
    ᐃΔᐃⵠᐃΔᐃ: ns++,
    ΔΔΔᐃΔⵠⲆ: ns++,
    ⵠⵠΔᐃⵠᐃΔ: ns++,
    ΔⵠᐃⲆⲆᐃΔ: ns++,
    ⲆᐃⵠΔᐃⲆᐃ: ns++,
    ᐃΔΔΔᐃΔⵠ: ns++,
    ΔⵠⵠⲆⲆⲆⲆ: ns++,
    ᐃΔⵠᐃⲆⲆⵠ: ns++,
    ΔΔⲆᐃᐃΔᐃ: ns++,
    ⵠⲆᐃⲆᐃᐃⲆ: ns++,
    ᐃᐃⵠⵠⵠΔᐃ: ns++,
    ΔⲆᐃⲆⵠΔᐃ: ns++,
    ⲆᐃᐃᐃΔᐃΔ: ns++,
    ⲆᐃⵠⲆΔΔᐃ: ns++,
    ᐃΔΔΔΔⵠᐃ: ns++,
    ΔⲆⵠΔΔᐃⲆ: ns++,
    ⵠᐃᐃⵠΔΔⵠ: ns++,
    ΔⲆᐃᐃΔᐃⵠ: ns++,
    ᐃⲆⵠᐃᐃⲆⲆ: ns++,
    ⲆⲆⵠⵠⵠΔᐃ: ns++,
    ᐃⲆΔⲆᐃΔΔ: ns++,
    ᐃⲆⵠΔΔᐃⲆ: ns++,
    ⲆΔⲆⵠΔⲆᐃ: ns++,
    ΔᐃᐃΔⵠᐃᐃ: ns++,
    ⲆᐃⲆΔᐃⵠⲆ: ns++,
    ⵠⲆΔⵠΔⵠⲆ: ns++,
    ⲆᐃⲆⵠⵠⲆᐃ: ns++,
    ⲆⲆᐃⵠᐃΔⲆ: ns++,
    ⵠⲆΔᐃⵠᐃⵠ: ns++,
    ⲆⲆᐃᐃᐃΔⲆ: ns++,
    ΔⲆⲆⵠΔⵠⲆ: ns++,
    ⲆⵠⵠⲆⲆᐃΔ: ns++,
    ΔⲆᐃⵠⵠᐃᐃ: ns++,
    ⲆᐃᐃⵠΔⲆⲆ: ns++,
    ⵠᐃⵠⵠⵠⵠΔ: ns++,
    ⲆᐃΔⵠⲆΔΔ: ns++,
    ⲆᐃⵠᐃⲆᐃᐃ: ns++,
    ⲆⲆⲆᐃΔⲆΔ: ns++,
    ΔᐃⵠᐃⵠⲆᐃ: ns++,
    ⵠᐃᐃᐃᐃΔⵠ: ns++,
    ΔΔⵠⲆΔΔⵠ: ns++,
    ⲆⵠᐃⲆⵠⲆᐃ: ns++,
    ᐃΔⲆΔᐃᐃᐃ: ns++,
    ΔⵠⲆᐃᐃⵠᐃ: ns++,
    ⵠⲆᐃΔᐃⵠᐃ: ns++,
    ⲆΔᐃᐃⲆⲆⵠ: ns++,
    ᐃⵠᐃᐃᐃΔΔ: ns++,
    ⲆᐃᐃΔⲆΔᐃ: ns++,
    ᐃⲆⲆⵠΔⵠΔ: ns++,
    ΔⲆⲆⲆⵠΔⲆ: ns++,
    ΔΔᐃᐃᐃⵠⵠ: ns++,
    ᐃⵠⲆⵠΔΔⵠ: ns++,
    ᐃⲆⲆΔⵠⲆΔ: ns++,
    ⵠΔᐃⲆⲆⵠⲆ: ns++,
    ΔⵠᐃᐃΔᐃΔ: ns++,
    ⵠⵠⲆⲆΔᐃΔ: ns++,
    ΔⵠᐃⵠΔᐃⲆΔⵠ: ns++,
    ⵠΔⵠᐃΔΔΔ: ns++,
    ⲆⵠᐃⲆⵠΔᐃ: ns++,
    ⲆᐃⲆⲆᐃᐃⲆ: ns++,
    ᐃΔᐃᐃⵠⵠⵠ: ns++,
    ᐃⵠΔΔⵠᐃΔⲆᐃ: ns++,
    POINTS: ns++,
    ΔⵠⲆΔⵠⲆΔ: ns++,
    ΔⵠⲆΔⵠΔⵠ: ns++,
    ⲆΔⲆⵠΔΔⵠ: ns++,
    ᐃΔᐃᐃᐃΔⲆ: ns++,
    ΔⵠⵠⵠΔⵠⵠ: ns++,
    ⵠⲆⲆⲆᐃᐃⵠ: ns++,
    ᐃΔⲆⵠᐃⲆⵠ: ns++,
    ΔⵠΔⵠⵠᐃⲆ: ns++,
    ⲆΔᐃᐃⲆⲆⲆ: ns++,
    ⵠⵠⲆⲆᐃⲆⲆ: ns++,
    ΔΔᐃⵠᐃⵠⲆ: ns++,
    ⵠⲆⵠᐃΔⵠⲆ: ns++,
    ΔⵠΔᐃΔⲆⵠ: ns++,
    ⲆᐃΔᐃⲆⲆⲆ: ns++,
    ΔΔΔᐃⲆΔᐃ: ns++,
    ΔⲆΔᐃᐃᐃⵠ: ns++,
    ⵠⵠᐃⵠᐃᐃᐃ: ns++,
    ΔⵠⵠⲆΔΔⵠ: ns++,
    ⲆⵠᐃᐃⲆΔΔ: ns++,
    ⵠᐃⵠᐃᐃᐃⲆ: ns++,
    ⵠΔⵠⲆⲆᐃⲆ: ns++,
    ⵠΔᐃᐃᐃⵠᐃ: ns++,
    ΔⲆⵠⲆⲆΔΔ: ns++,
    ⵠᐃⵠⵠⲆⵠᐃ: ns++,
    ⲆⲆΔⵠⲆᐃᐃ: ns++,
    ᐃΔⲆΔᐃⲆᐃ: ns++,
    ⲆᐃⲆⵠΔⵠⲆ: ns++,
    ⲆᐃⲆⵠⵠᐃⵠ: ns++,
    ᐃΔⲆⲆᐃⵠⲆ: ns++,
    ⲆᐃᐃⵠⵠⲆΔ: ns++,
    ⲆᐃᐃᐃᐃᐃⲆ: ns++,
    ⵠⵠΔⲆᐃⲆⵠ: ns++,
    ᐃⵠⵠⵠᐃⲆⵠ: ns++,
    ΔⲆⵠΔΔΔⲆ: ns++,
    ⵠΔⵠΔΔⵠⲆ: ns++,
    ⵠⲆⵠΔΔⲆⵠ: ns++,
    ⵠⵠⵠⲆᐃⲆⵠ: ns++,
    ⵠᐃⲆᐃᐃⲆᐃ: ns++,
    Δⵠⵠⵠⵠⵠᐃ: ns++,
    ⵠᐃⲆⵠΔⵠⲆ: ns++,
    ᐃⵠΔⲆΔᐃΔ: ns++,
    ᐃᐃΔᐃΔᐃⲆ: ns++,
    ⲆΔⵠⲆᐃΔΔ: ns++,
    ⵠᐃⲆⵠⵠᐃⵠ: ns++,
    ᐃᐃⲆⵠᐃⲆᐃ: ns++,
    ᐃᐃⲆⵠΔⲆⵠ: ns++,
    ⲆΔⲆⲆⵠⲆⲆ: ns++,
    ⵠⲆᐃⵠⵠⲆᐃᐃⵠ: ns++,
    ᐃⲆⲆᐃⲆᐃⵠ: ns++,
    ᐃⲆⵠⵠΔᐃᐃⵠΔ: ns++,
    ⵠⲆⵠⵠΔΔΔ: ns++,
    ᐃⲆⲆⲆⲆΔⵠᐃⲆ: ns++,
    ⵠᐃΔⵠⲆⵠⲆⲆΔ: ns++,
    ᐃⵠⵠⵠⲆⲆⲆⲆⵠ: ns++,
    ⲆⵠⲆᐃᐃⲆⵠⲆⲆ: ns++,
    ᐃᐃⲆᐃᐃΔᐃⲆΔ: ns++,
    ⲆⲆΔΔⵠⵠΔ: ns++,
    ΔⲆⵠⵠⵠ: ns++,
    ⵠᐃᐃⵠⲆⵠⵠ: ns++,
    ΔᐃΔΔⲆⵠⵠ: ns++,
    ⲆⲆΔᐃᐃⲆⲆ: ns++,
    ᐃᐃΔΔΔⲆⵠᐃΔ: ns++,
    ΔⵠⵠᐃⲆᐃⲆ: ns++,
    ᐃⵠⲆᐃᐃⲆⵠ: ns++,
    ⵠⵠⲆⵠΔᐃⲆ: ns++,
    ΔⵠⵠⵠⵠᐃⲆ: ns++,
    ᐃⵠⲆⵠᐃᐃⲆ: ns++,
    ⵠΔᐃᐃⲆΔΔ: ns++,
    ΔⵠΔⵠΔΔⵠ: ns++,
    ⲆΔⵠΔⵠᐃΔ: ns++,
    ᐃⵠᐃΔᐃⲆΔ: ns++,
    ᐃⲆΔⲆΔⲆⲆ: ns++,
    ⲆᐃⲆⲆΔΔⵠ: ns++,
    ⲆΔΔⵠᐃ: ns++,
    ⲆΔΔΔⵠ: ns++,
    ⵠᐃⲆⵠΔ: ns++,
    ΔΔⵠⵠΔΔⵠⲆⵠ: ns++,
    ⵠΔⵠⲆᐃᐃⲆ: ns++,
    ⲆᐃⲆᐃⲆᐃᐃ: ns++,
    ᐃⲆⵠⲆⲆⵠΔ: ns++,
    ⲆⵠᐃⵠⵠΔᐃ: ns++,
    ⵠⵠⲆⲆⲆΔⲆ: ns++,
    ⲆⲆⵠⵠΔⲆᐃ: ns++,
    ⵠᐃⲆΔΔᐃᐃ: ns++,
    ⲆΔⵠᐃΔⲆΔ: ns++,
    ⵠᐃᐃⲆⲆΔⲆ: ns++,
    ⵠᐃΔᐃᐃΔᐃ: ns++,
    ᐃⲆᐃᐃΔⵠᐃ: ns++,
    ⵠⵠⲆⵠⵠᐃΔ: ns++,
    ⵠΔΔΔᐃΔᐃ: ns++,
    ᐃⵠΔᐃⲆᐃΔ: ns++,
    ⵠΔⲆΔⵠ: ns++,
    ⵠⵠᐃᐃᐃᐃΔ: ns++,
    ᐃΔΔⲆⵠΔΔ: ns++,
    ⲆΔⲆᐃⵠΔᐃ: ns++,
    ΔᐃⵠᐃⵠΔⲆ: ns++,
    ⲆⵠⵠⵠΔᐃΔ: ns++,
    ΔᐃⵠⲆⲆᐃᐃ: ns++,
    ΔⲆᐃΔΔΔᐃ: ns++,
    ᐃⵠⵠΔⲆⵠΔ: ns++,
    ᐃᐃᐃⵠⲆΔΔ: ns++,
    ⵠΔⲆΔΔΔⲆ: ns++,
    ⵠⲆΔⲆΔΔⵠ: ns++,
    ⲆᐃⵠⵠⲆⲆᐃ: ns++,
    ᐃᐃⲆⲆΔⲆⵠ: ns++,
    ΔⵠΔⲆⵠΔΔ: ns++,
    ΔⵠΔΔⵠⲆΔ: ns++,
    ⲆⲆΔⲆᐃⵠⵠ: ns++,
    ᐃΔᐃⵠⲆᐃⵠ: ns++,
    ΔᐃᐃᐃΔᐃⵠ: ns++,
    ⲆⲆΔΔⲆⲆⵠ: ns++,
    ⵠⵠⵠᐃⵠᐃⲆ: ns++,
    ᐃΔΔᐃᐃⲆⵠ: ns++,
    ΔᐃΔⲆⵠⵠΔ: ns++,
    ⵠⵠΔᐃⵠⲆⲆ: ns++,
    ⵠⵠΔΔⵠᐃⲆ: ns++,
    ⵠⲆᐃΔᐃΔⲆ: ns++,
    ⵠΔⵠⵠⵠⲆⲆ: ns++,
    ⲆᐃᐃΔᐃΔΔ: ns++,
    ΔⲆΔⲆΔⵠⵠ: ns++,
    ΔⵠⵠᐃᐃⲆΔ: ns++,
    ⵠᐃⲆⵠᐃⵠᐃ: ns++,
    ᐃⵠΔᐃⲆⵠΔ: ns++,
    ⵠᐃⵠⵠⲆⵠΔ: ns++,
    ᐃᐃᐃᐃᐃⵠΔ: ns++,
    ⲆᐃⵠⲆⵠᐃⲆ: ns++,
    ᐃΔΔⵠΔⲆⲆ: ns++,
    ΔΔΔⲆΔ: ns++,
    ⵠᐃⵠΔⲆⲆΔ: ns++,
    ᐃⲆᐃΔⵠⲆⵠ: ns++,
    ⵠΔΔⲆᐃ: ns++,
    ⲆΔΔⵠᐃᐃᐃⲆΔ: ns++,
    ⲆⲆΔᐃᐃᐃᐃ: ns++,
    ᐃᐃᐃΔΔ: ns++,
    ΔᐃΔⵠᐃⲆΔ: ns++,
    ᐃⲆⵠⵠⲆⲆⲆ: ns++,
    ⵠⵠΔⵠⲆⲆᐃ: ns++,
    ᐃⵠⵠⵠᐃᐃΔ: ns++,
    ᐃⲆⲆⵠᐃΔⵠ: ns++,
    ΔⵠⵠΔΔⲆⲆ: ns++,
    ⵠΔᐃΔⲆⵠΔ: ns++,
    ᐃⵠΔⵠⵠⲆⵠ: ns++,
    ⲆⲆᐃΔⲆⲆᐃ: ns++,
    ⵠᐃΔᐃᐃᐃΔ: ns++,
    ᐃⲆΔⲆᐃⲆΔ: ns++,
    ᐃⵠΔⵠⲆ: ns++,
    ΔⲆΔᐃΔ: ns++,
    ⵠⲆⵠᐃⵠ: ns++,
    ΔΔⵠᐃⲆ: ns++,
    ⲆᐃⲆᐃΔ: ns++,
    ΔᐃᐃⲆⵠⵠΔ: ns++,
    ⲆⵠΔⲆⲆⲆΔ: ns++,
    ⵠⵠᐃⲆⵠΔΔ: ns++,
    ᐃⲆⵠΔⲆᐃⲆ: ns++,
    ᐃⲆⲆⵠᐃᐃΔ: ns++,
    ⲆⵠᐃΔΔⲆⵠ: ns++,
    ⵠⲆⵠᐃΔⲆᐃ: ns++,
    ΔⲆⲆⵠⲆΔⲆ: ns++,
    ⵠⵠΔⲆⵠⵠΔ: ns++,
    ᐃⵠΔᐃⲆⲆⵠ: ns++,
    ᐃⲆΔⲆⵠᐃⲆ: ns++,
    ⲆΔⲆⵠⲆⲆⲆ: ns++,
    ΔᐃᐃᐃⲆᐃⲆ: ns++,
    ΔΔΔⲆⲆⲆⲆ: ns++,
    ⲆᐃⲆⲆΔᐃᐃ: ns++,
    ⵠⲆᐃⵠⲆⲆᐃ: ns++,
    ΔⲆΔⲆⵠΔΔ: ns++,
    ᐃΔΔᐃⵠⲆᐃ: ns++,
    ⵠᐃᐃΔΔΔΔ: ns++,
    ⲆⵠⲆⲆΔⲆᐃ: ns++,
    ⵠΔⵠᐃᐃⲆᐃ: ns++,
    ⲆⲆΔⵠᐃᐃⵠ: ns++,
    ᐃⵠⵠΔⵠᐃⲆ: ns++,
    ΔⵠΔⲆᐃᐃΔ: ns++,
    ΔΔⵠᐃⵠⵠΔ: ns++,
    ᐃⵠΔΔⵠΔⲆⵠΔ: ns++,
    ⵠⲆᐃΔⵠΔⲆ: ns++,
    ΔᐃᐃⵠᐃⲆⵠ: ns++,
    ⲆᐃⲆⲆᐃΔΔ: ns++,
    ᐃⲆᐃⵠⵠᐃᐃ: ns++,
    ⵠⲆⵠⲆⲆΔⵠ: ns++,
    ΔⵠⵠΔΔᐃΔ: ns++,
    ⲆⲆⲆⲆⲆΔⲆ: ns++,
    ⵠⲆⲆⲆⵠᐃⵠ: ns++,
    ⲆⲆⵠᐃΔᐃⲆ: ns++,
    ᐃⲆⵠⵠΔᐃΔ: ns++,
    ᐃⲆⵠΔⵠⲆᐃ: ns++,
    ⵠⵠᐃⲆΔⵠΔ: ns++,
    ᐃⲆᐃⲆⲆⲆⵠ: ns++,
    ⲆΔⲆᐃΔⵠΔ: ns++,
    ⵠⵠΔⲆΔⲆᐃ: ns++,
    ΔᐃⲆΔⵠΔⵠ: ns++,
    ⵠΔΔΔⲆⵠⵠ: ns++,
    ⲆⵠΔᐃⵠⲆΔ: ns++,
    ᐃᐃⲆⲆᐃᐃⲆ: ns++,
    ⵠⵠⲆᐃΔⵠΔ: ns++,
    ᐃΔΔⲆᐃᐃΔ: ns++,
    ᐃᐃⲆⵠΔⵠⲆ: ns++,
    ΔᐃΔⲆⵠᐃⵠ: ns++,
    ⲆᐃᐃⵠⵠᐃΔ: ns++,
    ΔΔᐃⵠⲆΔⲆ: ns++,
    ᐃⵠⲆⲆⵠᐃΔ: ns++,
    ᐃᐃⲆᐃⲆⲆΔ: ns++,
    ⵠⵠⵠΔⵠΔⲆ: ns++,
    ⲆⲆⲆΔⲆⵠⵠ: ns++,
    ᐃᐃⵠⲆⵠᐃΔ: ns++,
    ΔᐃΔⲆⲆΔⲆ: ns++,
    ᐃⵠᐃΔⲆΔⲆ: ns++,
    ⵠᐃⵠΔⵠᐃⲆ: ns++,
    ᐃⲆⵠⲆⵠᐃΔ: ns++,
    ⵠⲆΔⵠᐃⲆᐃ: ns++,
    ⵠⵠΔⲆᐃᐃΔ: ns++,
    ΔⲆⲆⵠⲆΔΔ: ns++,
    ᐃⵠΔⲆΔΔⲆ: ns++,
    ΔᐃⵠⵠⵠⵠⲆ: ns++,
    ΔΔᐃᐃᐃⵠⲆ: ns++,
    ⲆⲆⲆᐃⵠΔΔ: ns++,
    ⵠΔΔᐃᐃΔⲆ: ns++,
    ΔⲆᐃΔᐃᐃᐃ: ns++,
    ᐃⲆⲆⵠᐃⲆⲆ: ns++,
    ᐃⲆⲆᐃᐃΔᐃ: ns++,
    ⲆΔᐃΔᐃⲆⲆ: ns++,
    ᐃᐃᐃᐃΔΔⵠ: ns++,
    ⵠᐃⲆΔᐃΔΔ: ns++,
    ⵠᐃⵠⵠⵠΔⵠ: ns++,
    ΔⵠⵠΔⵠⲆΔ: ns++,
    ⲆΔᐃⵠΔΔᐃ: ns++,
    ᐃⵠΔΔⲆⲆⵠ: ns++,
    ΔⵠΔᐃⲆⲆⵠ: ns++,
    ΔⲆⲆⵠⲆⵠⲆ: ns++,
    ᐃⲆⲆᐃⵠⲆⲆ: ns++,
    ᐃⵠᐃⲆⵠᐃⲆ: ns++,
    ⲆⵠΔΔⵠΔΔ: ns++,
    ΔΔᐃⲆᐃᐃⵠ: ns++,
    ΔⵠᐃⵠⵠⲆⲆ: ns++,
    ⲆⲆΔⵠᐃⲆΔ: ns++,
    ⲆⵠΔΔⵠΔᐃ: ns++,
    ᐃⵠΔᐃⵠⵠΔ: ns++,
    ⵠⵠΔⵠᐃᐃᐃ: ns++,
    ᐃⵠᐃΔᐃΔⵠ: ns++,
    ⲆΔⵠⵠⵠⲆⲆ: ns++,
    ⵠΔⲆⲆΔⲆⵠ: ns++,
    ᐃⵠΔᐃΔᐃⲆ: ns++,
    ⵠᐃᐃⵠᐃᐃⵠ: ns++,
    ΔΔⵠⲆΔⲆⲆ: ns++,
    ⲆᐃⵠᐃΔⵠⲆ: ns++,
    ΔⵠⲆΔᐃᐃΔ: ns++,
    Ⲇⵠⵠⵠᐃ: ns++,
    ᐃⵠᐃᐃⲆⲆⵠ: ns++,
    ΔΔⲆΔᐃᐃⲆ: ns++,
    ᐃⲆⲆᐃᐃ: ns++,
    ΔⵠᐃⵠⵠⵠΔ: ns++,
    ᐃᐃᐃⵠⵠⵠⲆ: ns++,
    ᐃⲆⲆᐃᐃⲆⲆ: ns++,
    ⵠᐃᐃΔᐃⵠΔ: ns++,
    ⲆⲆΔᐃΔΔⵠ: ns++,
    ᐃᐃⵠΔⲆ: ns++,
    ⵠⲆᐃᐃΔᐃΔ: ns++,
    ⲆⲆᐃⵠᐃᐃⵠⵠΔ: ns++,
    ⲆⵠⵠⲆⵠᐃΔⵠⲆ: ns++,
    ⵠⲆⲆⲆⵠⲆⵠⲆⲆ: ns++,
    ᐃⵠⵠⲆᐃⵠⵠⵠᐃ: ns++,
    ⵠⲆᐃⵠΔΔⲆ: ns++,
    ⵠⲆᐃⵠⵠΔⵠ: ns++,
    ⲆⵠΔΔᐃΔⲆ: ns++,
    ⲆⲆⲆⲆᐃⲆΔ: ns++,
    ΔΔΔΔⲆᐃⲆ: ns++,
    ⲆΔⵠⲆⵠⲆⵠ: ns++,
    ΔΔⲆⵠᐃⵠΔ: ns++,
    ⵠᐃⲆᐃᐃⵠΔ: ns++,
    ⵠⲆᐃⲆΔⵠⲆ: ns++,
    ⲆⵠᐃⲆᐃΔⲆ: ns++,
    ⵠΔⲆⲆΔ: ns++,
    ⲆᐃⵠⲆⵠ: ns++,
    ᐃΔᐃΔⵠΔⲆ: ns++,
    ΔⵠⵠⵠⲆᐃᐃ: ns++,
    ΔᐃⵠⵠΔᐃⲆ: ns++,
    ⵠΔᐃᐃⲆⵠΔ: ns++,
    ⵠⲆⲆⵠⵠⲆΔ: ns++,
    ⵠⵠΔⲆⲆΔⵠ: ns++,
    ⲆᐃᐃᐃⵠΔⵠ: ns++,
    ⲆΔᐃΔΔⲆⵠ: ns++,
    ⲆᐃΔᐃⵠⲆⵠ: ns++,
    ᐃⲆⲆΔⵠᐃⵠ: ns++,
    ⲆΔⵠΔΔᐃΔ: ns++,
    ᐃⲆᐃΔΔΔᐃ: ns++,
    ΔΔᐃᐃᐃΔⵠΔⵠ: ns++,
    ΔΔⵠᐃΔⵠᐃΔᐃ: ns++,
    ᐃᐃΔᐃⲆΔⵠ: ns++,
    ᐃᐃⲆᐃⵠΔⵠ: ns++,
    ΔΔⵠᐃⲆᐃⲆ: ns++,
    ΔⵠᐃⵠⵠᐃⲆ: ns++,
    ᐃΔⲆᐃⲆⵠⲆ: ns++,
    ΔⵠⵠᐃΔᐃⲆ: ns++,
    ΔⵠΔⵠᐃΔΔ: ns++,
    ΔΔᐃΔⲆᐃᐃ: ns++,
    ⲆⵠⲆΔΔⲆᐃ: ns++,
    ⲆⵠⵠⲆΔⵠᐃ: ns++,
    ⲆΔⵠᐃᐃΔⵠ: ns++,
    ⲆⵠⲆΔᐃᐃᐃ: ns++,
    ⵠᐃΔᐃⲆⲆΔ: ns++,
    ᐃⲆⲆⵠΔⵠⵠ: ns++,
    ΔⲆΔⵠⲆⵠΔ: ns++,
    ΔΔⲆⲆᐃΔⵠ: ns++,
    ΔⲆⲆⲆᐃᐃⵠ: ns++,
    ⵠⵠᐃᐃΔⲆⲆ: ns++,
    ᐃΔᐃⵠⵠⵠᐃΔⲆ: ns++,
    ⵠᐃⲆⲆΔⵠⲆ: ns++,
    ⵠⵠΔⵠⲆ: ns++,
    ΔᐃΔΔⲆΔⲆΔⲆ: ns++,
    ᐃⲆⵠᐃⲆⲆⵠΔⵠ: ns++,
    ⲆᐃⲆⵠⲆΔΔᐃΔ: ns++,
    ⵠⲆΔⲆᐃⲆΔⲆⵠ: ns++,
    ⲆⵠΔⵠⵠᐃᐃ: ns++,
    ᐃΔᐃⲆⲆᐃⲆ: ns++,
    ΔⵠⲆⵠⵠᐃⲆ: ns++,
    ᐃⲆⲆⲆΔⵠⵠ: ns++,
    ⵠⵠⵠⲆᐃⵠⵠ: ns++,
    ΔⲆᐃᐃΔⵠⵠΔⲆ: ns++,
    ΔⲆⵠⵠᐃΔⲆ: ns++,
    ⲆΔⵠⵠΔⵠⲆ: ns++,
    ⲆᐃᐃᐃⲆⵠΔ: ns++,
    ⲆΔᐃⵠⵠΔᐃ: ns++,
    ⲆⲆⲆⲆⵠΔᐃ: ns++,
    ᐃⲆΔᐃΔΔⵠ: ns++,
    ⲆΔΔⲆⵠⵠⵠ: ns++,
    ⲆΔⲆⲆⲆ: ns++,
    ⲆΔΔΔⵠΔⲆᐃⲆ: ns++,
    ᐃΔⲆⲆᐃΔΔ: ns++,
    ᐃᐃⲆⵠⲆⵠΔ: ns++,
    ᐃⲆΔᐃⲆⵠⵠ: ns++,
    ⵠⲆⲆᐃⵠⲆⲆ: ns++,
    ⵠⵠⲆΔᐃⲆⵠ: ns++,
    ΔΔⵠⵠⵠᐃⲆ: ns++,
    ᐃⵠΔⵠⲆΔΔ: ns++,
    ΔⵠᐃᐃⲆⲆⲆ: ns++,
    ᐃⵠⲆΔⵠⲆΔ: ns++,
    ᐃⲆᐃᐃⵠⵠΔ: ns++,
    ᐃΔⵠⲆᐃⲆᐃ: ns++,
    ᐃΔᐃᐃΔᐃΔ: ns++,
    ᐃΔⲆⵠΔⲆⵠ: ns++,
    ᐃᐃⲆⲆᐃ: ns++,
    ⲆΔⲆⵠᐃᐃⵠ: ns++,
    ⲆⵠⲆⵠⲆⵠΔ: ns++,
    ΔⲆⵠΔⲆⵠⵠ: ns++,
    ⵠⵠⲆΔΔⵠⲆ: ns++,
    ΔⵠⲆᐃⲆⲆⲆ: ns++,
    ᐃⲆᐃⵠⵠⲆᐃ: ns++,
    ⵠΔⲆΔⵠⵠᐃ: ns++,
    ΔᐃⵠⲆⲆⵠⵠ: ns++,
    ᐃᐃⲆⵠΔΔᐃ: ns++,
    ⵠⲆⵠⲆᐃᐃⲆ: ns++,
    ᐃᐃⵠᐃⲆⲆⲆ: ns++,
    ⵠᐃⵠⲆᐃⲆⲆ: ns++,
    ⵠΔΔⲆⵠⵠᐃ: ns++,
    ΔΔΔⲆⵠΔΔ: ns++,
    ⵠΔΔⲆΔᐃⲆ: ns++,
    ⵠⵠⵠⵠⵠᐃΔ: ns++,
    ⵠⲆΔΔΔⵠΔ: ns++,
    ⵠΔΔΔⲆⲆΔ: ns++,
    ΔᐃΔΔΔⵠΔ: ns++,
    ⲆΔΔⵠⲆⵠⲆ: ns++,
    ⲆΔΔΔⵠΔⲆ: ns++,
    ⵠⲆᐃᐃⲆᐃⲆ: ns++,
    ΔⵠΔⲆⲆΔᐃ: ns++,
    ⲆⲆⲆⵠΔⲆⲆ: ns++,
    ΔΔⲆΔⲆⲆᐃ: ns++,
    ⲆΔⲆⵠⲆⵠᐃ: ns++,
    ⲆⵠΔⲆΔᐃⲆΔⵠ: ns++,
    ΔᐃⲆⲆᐃⵠⵠⲆᐃ: ns++,
    ⲆⵠΔⲆΔᐃᐃᐃⲆ: ns++,
    ΔⲆᐃⲆⵠΔΔΔΔ: ns++,
    ⵠΔᐃᐃⲆᐃᐃ: ns++,
    ⵠᐃⵠᐃᐃΔΔ: ns++,
    ⵠΔΔᐃΔ: ns++,
    ⵠᐃⵠⲆⵠᐃⲆ: ns++,
    ⵠΔᐃⲆⲆⲆⵠ: ns++,
    ⲆᐃⵠΔΔⲆΔ: ns++,
    ΔⲆⵠⵠⲆΔΔ: ns++,
    ⲆΔⵠᐃⵠⵠⵠ: ns++,
    ᐃΔΔΔΔΔΔ: ns++,
    ΔᐃⵠⵠⲆⵠⲆ: ns++,
    ⵠⲆⲆΔᐃΔⲆ: ns++,
    ΔⵠⲆⵠᐃⵠⵠ: ns++,
    ΔΔΔᐃⲆΔⵠ: ns++,
    ΔᐃⵠΔᐃⵠΔ: ns++,
    ΔⲆᐃᐃⲆⵠⵠ: ns++,
    ᐃⲆᐃⲆⵠⲆΔ: ns++,
    ΔⲆⲆᐃᐃΔⵠ: ns++,
    ΔⵠᐃⲆΔᐃⵠ: ns++,
    ΔᐃᐃΔᐃᐃⲆ: ns++,
    Δᐃⵠᐃⵠⵠᐃ: ns++,
    ᐃᐃⲆᐃⵠᐃⵠ: ns++,
    ⵠⲆⲆⵠⵠᐃⵠ: ns++,
    ᐃⵠⲆⲆⵠⲆⲆⵠᐃ: ns++,
    ΔᐃⲆⲆΔ: ns++,
    ⲆⲆⲆᐃΔᐃⵠ: ns++,
    ⵠᐃΔⲆᐃⲆᐃ: ns++,
    ⵠⵠⲆⲆᐃᐃᐃ: ns++,
    ⵠⲆΔⲆΔΔⲆ: ns++,
    ⲆⵠΔΔᐃΔΔ: ns++,
    ᐃⵠΔΔΔⲆΔ: ns++,
    ⵠⲆΔⵠᐃᐃⲆ: ns++,
    ΔᐃᐃⵠⲆΔⲆ: ns++,
    ΔΔⵠⵠⵠⲆᐃ: ns++,
    ⲆΔⵠΔⲆⵠΔ: ns++,
    ⵠᐃⵠⲆᐃΔⲆ: ns++,
    ΔⲆᐃⵠᐃⵠΔ: ns++,
    ᐃᐃᐃᐃΔᐃΔ: ns++,
    ⵠᐃⲆⲆⲆⵠⲆ: ns++,
    ΔΔΔΔⵠΔⲆ: ns++,
    ⲆΔΔΔⵠⲆⲆ: ns++,
    ΔⵠⲆΔⵠⵠΔ: ns++,
    ⲆⲆⲆⵠᐃΔⲆ: ns++,
    ⵠᐃⵠⲆⲆΔⵠ: ns++,
    ΔΔᐃΔⵠΔᐃ: ns++,
    ΔΔΔᐃΔⵠⵠ: ns++,
    ΔΔⲆⲆⲆⲆΔ: ns++,
    ΔⲆΔⵠⵠⲆⵠᐃⵠ: ns++,
    ΔⲆΔⵠⵠⵠᐃ: ns++,
    ΔⵠΔⵠΔᐃⵠ: ns++,
    ΔΔⲆΔⵠⵠⲆ: ns++,
    ⵠΔⵠⲆΔᐃᐃ: ns++,
    ⵠⵠΔΔΔⵠᐃ: ns++,
    ᐃΔⵠΔΔⲆⲆ: ns++,
    ᐃⲆⲆΔΔΔⵠ: ns++,
    ΔⵠⲆΔΔⲆΔ: ns++,
    ⲆΔᐃⵠΔΔΔ: ns++,
    ⲆⲆⲆΔᐃⲆΔ: ns++,
    ΔΔᐃᐃΔⵠΔ: ns++,
    ⵠᐃΔⵠᐃᐃⵠ: ns++,
    ⵠΔⲆΔⵠᐃᐃ: ns++,
    ⲆⲆⲆⲆΔΔⲆ: ns++,
    ⵠΔΔᐃⵠΔΔ: ns++,
    ΔᐃΔⲆΔⵠΔ: ns++,
    ΔᐃⲆⵠⲆᐃⵠ: ns++,
    ⵠΔΔᐃⵠⲆΔ: ns++,
    ⵠⲆⵠΔΔⲆⲆ: ns++,
    ⵠⵠⲆⵠᐃΔⲆ: ns++,
    ⲆⵠᐃᐃΔⲆⵠ: ns++,
    ⲆⵠⵠⵠΔⲆⲆ: ns++,
    ⲆΔΔⵠΔᐃⲆ: ns++,
    ⵠⵠⲆΔΔⵠᐃ: ns++,
    ⵠⵠᐃⵠⲆ: ns++,
    ⵠᐃⲆⵠᐃᐃΔ: ns++,
    ΔᐃⵠⵠΔΔᐃ: ns++,
    ᐃⵠΔΔⵠᐃΔ: ns++,
    ΔᐃⵠᐃΔⲆⵠ: ns++,
    ΔᐃᐃᐃΔⲆΔ: ns++,
    ⲆΔᐃᐃΔⵠⵠ: ns++,
    Δⵠⵠᐃⵠⵠᐃ: ns++,
    ΔᐃΔⵠΔᐃΔ: ns++,
    ⵠⲆᐃΔⵠΔⵠ: ns++,
    ΔΔᐃᐃΔⵠⲆ: ns++,
    ᐃᐃᐃⵠᐃΔⵠ: ns++,
    ⵠΔⵠΔⵠᐃⲆ: ns++,
    ⵠᐃᐃⲆΔᐃⵠ: ns++,
    ᐃΔΔⵠᐃᐃᐃ: ns++,
    ⲆⵠΔⵠⲆⲆᐃ: ns++,
    Ⲇᐃᐃᐃⵠᐃⵠ: ns++,
    ΔⲆⲆᐃᐃⲆⵠ: ns++,
    ΔⲆⵠΔᐃⲆΔ: ns++,
    ⲆᐃΔⲆᐃⵠⵠ: ns++,
    ⲆⵠⲆⲆⲆΔΔ: ns++,
    ⲆᐃᐃⲆⵠΔⲆ: ns++,
    ⵠⵠⵠⲆΔΔᐃ: ns++,
    ⵠⵠⲆⵠᐃⵠᐃ: ns++,
    ᐃⵠⵠᐃΔⲆⵠ: ns++,
    ⲆᐃᐃΔᐃⲆⲆ: ns++,
    ⵠΔⵠΔᐃᐃⵠ: ns++,
    ΔⲆᐃΔⵠΔⵠ: ns++,
    ᐃᐃΔⲆⲆⵠⲆ: ns++,
    ᐃⵠᐃᐃⲆⲆᐃ: ns++,
    ᐃⵠᐃⵠᐃⲆᐃ: ns++,
    ᐃⵠΔⵠΔⵠᐃ: ns++,
    ⵠⵠᐃⵠⲆᐃⲆ: ns++,
    ᐃⲆᐃⵠⲆᐃⲆ: ns++,
    ᐃΔᐃᐃΔⲆⲆ: ns++,
    ⵠΔᐃⲆ: ns++,
    ⵠⵠΔΔ: ns++,
    ⲆΔᐃΔΔΔⲆ: ns++,
    ΔΔⵠⵠΔⵠⵠ: ns++,
    ⲆᐃⲆΔΔᐃᐃ: ns++,
    ᐃⵠⵠᐃⵠᐃⲆ: ns++,
    ⵠⵠᐃᐃⲆΔⲆ: ns++,
    ᐃⲆⲆΔⲆᐃⵠ: ns++,
    ᐃΔΔⵠⲆΔᐃ: ns++,
    ⵠⲆⲆΔᐃ: ns++,
    ⵠΔΔⲆⵠᐃⲆ: ns++,
    ΔΔΔⲆⲆ: ns++,
    ᐃΔⵠᐃⲆⲆᐃ: ns++,
    ⲆᐃᐃΔⵠ: ns++,
    ⲆΔᐃΔΔⲆⲆ: ns++,
    ΔⲆⵠΔⵠ: ns++,
    ⵠΔᐃΔⵠᐃΔ: ns++,
    ⵠⲆᐃᐃⵠ: ns++,
    ΔⲆⵠᐃⵠ: ns++,
    ⲆᐃᐃⵠΔᐃⲆ: ns++,
    ᐃⵠⵠᐃⵠⵠᐃ: ns++,
    ⵠᐃⵠᐃΔⲆⲆ: ns++,
    ᐃⵠⵠⵠⵠⵠΔ: ns++,
    ᐃⵠᐃⵠΔⵠⵠ: ns++,
    ⲆⲆΔᐃⵠⲆⵠ: ns++,
    ⵠΔⵠΔⵠⵠⵠ: ns++,
    ⵠΔⵠⲆΔᐃΔ: ns++,
    ⵠᐃⲆⲆⵠⲆΔ: ns++,
    ΔᐃⵠⲆᐃ: ns++,
    ⲆᐃᐃⵠⲆΔⵠ: ns++,
    ᐃⲆᐃⲆⲆ: ns++,
    ⵠⲆⵠᐃᐃⵠⵠ: ns++,
    ⵠⵠᐃⵠᐃⲆᐃ: ns++,
    ⵠⵠΔᐃⵠᐃᐃ: ns++,
    ⵠⲆΔᐃΔⵠⵠ: ns++,
    ᐃⵠⲆΔⵠΔⲆ: ns++,
    ⵠⲆⲆΔΔᐃⲆ: ns++,
    ⲆⲆΔⲆΔᐃⵠᐃᐃ: ns++,
    ⲆΔⲆᐃΔΔⵠ: ns++,
    ΔᐃΔⵠⲆⵠⲆ: ns++,
    ⵠⵠⲆᐃⵠⲆⲆⵠⵠ: ns++,
    ΔΔΔⵠⵠᐃⵠ: ns++,
    ΔⵠⵠⵠᐃΔᐃ: ns++,
    ᐃⵠΔΔΔΔΔ: ns++,
    ⵠⲆΔᐃⲆⲆⵠ: ns++,
    ⲆⲆⲆᐃⲆ: ns++,
    ΔΔⲆⲆⲆⲆⵠ: ns++,
    ⲆᐃΔⵠᐃⲆⲆ: ns++,
    ⵠΔⵠⵠⲆⲆΔ: ns++,
    ᐃⲆⵠⲆΔⵠΔ: ns++,
    ᐃⲆΔΔⵠⵠⵠ: ns++,
    ⵠΔΔⲆᐃⲆⵠ: ns++,
    ΔΔᐃⲆⲆⲆΔ: ns++,
    ⵠⵠⵠⲆⵠⵠⵠ: ns++,
    Δⵠⵠᐃⵠᐃᐃ: ns++,
    ΔᐃⵠᐃΔᐃⵠ: ns++,
    ΔⵠᐃΔⲆⵠⵠ: ns++,
    ⲆⲆΔⲆⲆᐃⵠ: ns++,
    ΔⵠⵠⲆⵠΔⲆ: ns++,
    ᐃⲆⲆΔΔᐃᐃ: ns++,
    ΔᐃⵠΔⵠ: ns++,
    ⵠᐃΔⲆΔᐃⲆ: ns++,
    ᐃᐃΔⲆΔΔⵠ: ns++,
    ⲆᐃⲆⵠᐃⲆᐃ: ns++,
    ⵠⲆⲆⲆᐃⲆᐃ: ns++,
    ⲆᐃⲆⵠⵠⲆⲆ: ns++,
    ΔⵠᐃΔᐃⲆᐃ: ns++,
    ⵠⲆᐃᐃⵠⵠⲆ: ns++,
    ⵠⲆᐃⵠΔⵠⲆ: ns++,
    ΔᐃⲆⵠΔΔⵠ: ns++,
    ⵠΔᐃⲆⵠⵠᐃ: ns++,
    ⲆΔⲆΔⲆΔᐃ: ns++,
    ⵠⵠᐃᐃⲆΔⵠ: ns++,
    ⵠⵠⵠⵠⲆⵠⲆ: ns++,
    ⵠⲆᐃⲆⵠⲆΔ: ns++,
    ⵠⲆⵠΔⵠ: ns++,
    ᐃΔⲆⵠⵠᐃⲆ: ns++,
    ⵠⲆᐃΔΔⲆΔ: ns++,
    ΔⲆⵠᐃΔⵠΔ: ns++,
    ⵠᐃᐃΔⵠΔⵠ: ns++,
    ⲆᐃⵠΔⵠⵠᐃ: ns++,
    ΔⲆⲆΔΔⵠΔ: ns++,
    ΔᐃⲆⵠΔⲆΔ: ns++,
    ⲆⵠᐃΔⲆΔΔ: ns++,
    ᐃΔⲆⲆⲆⲆⵠ: ns++,
    ᐃᐃΔⵠᐃΔⲆ: ns++,
    ΔⵠⲆⵠⲆⵠΔ: ns++,
    ΔᐃΔᐃⵠΔⵠ: ns++,
    ⵠⵠⲆᐃΔᐃᐃ: ns++,
    ⲆⵠⵠΔᐃⲆⲆ: ns++,
    ᐃΔᐃᐃⵠᐃⵠ: ns++,
    ⵠⲆⲆᐃⵠⲆΔ: ns++,
    ⵠⵠᐃⲆⵠⲆⵠ: ns++,
    ⲆᐃⵠΔⲆⵠⵠ: ns++,
    ᐃⵠⲆⵠⲆⲆᐃ: ns++,
    ⲆΔΔⲆⵠⲆᐃ: ns++,
    ⵠᐃⲆⲆᐃ: ns++,
    ⵠⲆΔⲆⲆΔⵠ: ns++,
    ⵠΔⲆΔᐃⲆⵠ: ns++,
    ⲆᐃΔΔΔΔᐃ: ns++,
    ΔΔⲆⲆⲆⵠΔ: ns++,
    ⲆᐃΔᐃᐃⵠΔ: ns++,
    ⲆⲆΔᐃⵠⵠᐃ: ns++,
    ⵠΔᐃΔᐃᐃᐃ: ns++,
    ⵠΔⵠΔᐃΔⵠ: ns++,
    ⲆᐃⵠⵠᐃⲆΔ: ns++,
    ⲆΔⲆⲆᐃⲆΔ: ns++,
    ⲆⲆᐃΔⲆⵠⵠ: ns++,
    ᐃΔΔΔⲆᐃᐃ: ns++,
    ⵠᐃΔⵠⲆΔᐃ: ns++,
    ⲆⲆⵠΔΔᐃᐃ: ns++,
    ᐃⵠΔⲆⵠᐃⵠ: ns++,
    ⵠᐃΔᐃΔⲆΔ: ns++,
    ΔⵠⲆⵠΔᐃᐃ: ns++,
    ΔⵠᐃΔΔⲆⵠ: ns++,
    ᐃⲆⲆⵠⵠΔᐃ: ns++,
    ΔΔᐃⲆᐃᐃⲆ: ns++,
    ⵠⵠⲆⲆⲆⲆⵠ: ns++,
    ΔΔⲆⲆⲆΔⵠ: ns++,
    ΔⲆⵠΔᐃⵠⵠ: ns++,
    ⲆᐃΔⲆΔΔⵠ: ns++,
    ΔⲆΔᐃᐃⲆΔ: ns++,
    ΔⲆⵠⵠΔⲆⲆ: ns++,
    ΔⵠᐃᐃⵠᐃΔ: ns++,
    ᐃᐃΔⲆⵠⲆᐃ: ns++,
    ΔⵠᐃΔΔⵠⵠ: ["#E9CF96", "#144940"],
    ⵠⲆⲆⵠⲆΔΔ: ns++,
    ᐃᐃᐃΔⲆΔⵠ: ns++,
    ΔᐃΔⲆᐃⲆⵠ: ns++,
    ΔΔᐃΔⵠΔⵠ: ns++,
    ⲆⵠΔⲆᐃΔᐃ: ns++,
    ᐃᐃΔΔᐃΔⲆ: ns++,
    ΔⲆⲆᐃΔᐃⵠ: ns++,
    ΔⵠᐃΔⲆ: ns++,
    ΔᐃᐃⲆᐃΔᐃ: ns++,
    ⵠΔⲆᐃᐃⵠⲆ: ns++,
    ⵠᐃΔⵠⵠΔⵠ: ns++,
    ΔᐃⵠⲆⵠᐃΔ: ns++,
    ᐃⲆⵠⵠᐃⲆᐃ: ns++,
    ⲆΔⲆΔΔᐃΔ: ns++,
    ⲆⵠⵠⵠⲆⵠⵠ: ns++,
    ᐃᐃΔⲆⲆⲆᐃ: ns++,
    ᐃⵠⲆᐃᐃΔⲆ: ns++,
    ⵠΔΔⵠᐃⵠⲆ: ns++,
    ᐃΔⲆⲆᐃⲆΔ: ns++,
    ⵠΔⲆⲆΔΔⲆ: ns++,
    ⵠⲆⵠⲆⲆⲆⲆ: ns++,
    ⵠΔⵠΔⵠⲆⲆ: ns++,
    ⲆⲆⲆⵠⲆΔᐃ: ns++,
    ΔⲆΔⵠᐃᐃⲆ: ns++,
    ⵠⵠᐃΔⲆⲆΔ: ns++,
    ⲆᐃΔⲆⵠⵠᐃ: ns++,
    ᐃⵠᐃⲆΔᐃᐃ: ns++,
    ⲆΔⵠⵠⵠᐃⲆ: ns++,
    ⵠΔΔⲆⲆⵠᐃ: ns++,
    ΔᐃΔΔⵠⵠᐃ: ns++,
    ᐃᐃⲆⵠΔⵠᐃ: ns++,
    ᐃⵠΔⵠⲆᐃⲆ: ns++,
    ᐃΔΔⲆᐃΔΔ: ns++,
    ⲆᐃΔⵠⵠⵠⵠ: ns++,
    ⲆⲆΔᐃⵠΔᐃ: ns++,
    ᐃᐃⵠᐃΔᐃⵠ: ns++,
    ⵠΔᐃⵠⵠΔΔ: ns++,
    ⲆΔⲆΔⵠⵠᐃ: ns++,
    ⲆⵠⲆΔΔⲆΔ: ns++,
    ΔⵠⲆΔᐃΔⲆ: ns++,
    ⵠΔΔᐃⲆᐃΔ: ns++,
    ⲆⲆⵠⲆⵠⵠⲆ: ns++,
    ΔⵠⵠᐃⲆⵠⵠ: ns++,
    ⲆΔᐃΔΔⵠᐃ: ns++,
    ᐃⲆⲆᐃΔΔⲆ: ns++,
    ᐃΔᐃΔΔⲆⵠ: ns++,
    ᐃΔΔᐃᐃᐃᐃ: ns++,
    ΔΔⵠᐃΔΔⲆ: ns++,
    ⵠⲆⲆⵠΔᐃⵠ: ns++,
    ΔᐃⲆΔᐃⵠⵠ: ns++,
    ⵠΔΔⲆΔⲆΔ: ns++,
    ⵠⵠⵠΔⵠΔᐃ: ns++,
    ⵠⲆⲆΔΔΔᐃ: ns++,
    ᐃᐃⵠⲆΔΔΔ: ns++,
    ⲆⵠⲆⵠⵠⲆΔ: ns++,
    ⵠⵠΔⲆΔΔᐃ: ns++,
    ⵠᐃⲆᐃⲆⵠⲆ: ns++,
    ⵠΔⲆⲆΔⵠΔ: ns++,
    ᐃᐃⵠΔⲆᐃⲆ: ns++,
    ᐃⵠᐃⵠᐃΔΔ: ns++,
    ⵠΔᐃΔΔΔⵠ: ns++,
    ΔΔⲆⵠᐃΔΔ: ns++,
    ⲆΔᐃⲆⵠⲆΔ: ns++,
    ΔⲆⵠⲆⵠᐃΔ: ns++,
    ΔᐃᐃΔⲆⲆᐃ: ns++,
    ⲆⵠⵠΔⲆΔⵠ: ns++,
    ⵠΔΔᐃᐃⵠΔ: ns++,
    ᐃᐃΔⲆᐃΔⲆ: ns++,
    ⵠᐃⲆⲆⲆⲆⲆ: ns++,
    ΔⵠΔⲆᐃ: ns++,
    ⲆΔᐃᐃΔⲆΔ: ns++,
    ᐃⲆᐃⵠᐃ: ns++,
    ⲆΔⲆⲆⲆⲆⵠ: ns++,
    ⲆΔᐃᐃⵠⵠΔ: ns++,
    ⵠᐃⵠⵠⲆⲆᐃ: ns++,
    ᐃⵠᐃⲆΔⵠᐃ: ns++,
    ΔⲆᐃⵠᐃΔⵠ: ns++,
    ⲆⵠΔᐃⵠⲆⲆ: ns++,
    ᐃᐃᐃⵠᐃⵠⲆ: ns++,
    ᐃᐃⲆᐃⲆΔΔ: ns++,
    ⲆⵠΔⵠᐃⵠᐃ: ns++,
    ⲆⲆΔᐃⲆⲆΔ: ns++,
    ⵠⵠⵠΔⲆΔΔ: ns++,
    ⵠᐃᐃⲆᐃΔⲆ: ns++,
    ⲆⲆᐃⵠᐃⵠⲆ: ns++,
    ΔᐃⲆⲆΔᐃⲆ: ns++,
    ΔΔᐃⵠⵠⵠᐃ: ns++,
    ⲆᐃᐃΔⵠⲆΔ: ns++,
    ΔΔᐃᐃᐃⵠΔ: ns++,
    ΔᐃⵠᐃΔᐃΔ: ns++,
    ⵠⵠᐃᐃΔΔⲆ: ns++,
    ΔⵠΔⵠⵠⵠⲆ: ns++,
    ⲆᐃⵠⲆⵠⲆΔ: ns++,
    ⲆⲆⵠⵠᐃᐃⵠ: ns++,
    ⲆⵠᐃⵠᐃΔⲆ: ns++,
    ⵠⲆⲆΔⵠᐃΔ: ns++,
    ᐃⵠΔⵠΔᐃⵠ: ns++,
    ᐃⲆΔⵠⲆⲆᐃ: ns++,
    ᐃΔΔᐃᐃΔⲆ: ns++,
    ᐃⵠᐃⲆⲆⵠᐃ: ns++,
    ᐃⲆΔⲆⵠⲆΔ: ns++,
    ⵠᐃΔⵠΔΔⵠ: ns++,
    ᐃᐃⲆΔᐃΔᐃ: ns++,
    ᐃᐃⲆΔⵠΔⵠ: ns++,
    ⲆⲆⵠⲆᐃⲆⵠ: ns++,
    ⲆᐃⲆᐃᐃⲆΔ: ns++,
    ᐃⵠⵠⵠᐃΔⲆ: ns++,
    ⲆⵠⵠᐃⵠᐃⲆ: ns++,
    ΔΔᐃᐃⵠⲆⲆ: ns++,
    ᐃΔΔΔΔΔⲆ: ns++,
    ⲆⵠΔⲆΔΔⲆ: ns++,
    ᐃⵠΔΔΔΔᐃ: ns++,
    ⵠⵠᐃⲆΔΔⵠ: ns++,
    ᐃΔΔⵠᐃⲆᐃ: ns++,
    ΔⲆⵠⵠᐃⲆⲆ: ns++,
    ⵠᐃΔΔᐃΔⵠ: ns++,
    ΔᐃⲆΔⲆᐃΔ: ns++,
    ᐃᐃⲆΔᐃⵠⵠ: ns++,
    ⵠᐃⲆᐃⵠΔⲆ: ns++,
    ⲆΔⵠⲆΔΔⲆ: ns++,
    ᐃⵠΔⲆⲆᐃⲆ: ns++,
    ᐃΔΔΔⵠΔΔ: ns++,
    ⵠΔΔⵠⲆⲆⵠ: ns++,
    ⲆΔⵠΔᐃΔᐃ: ns++,
    ΔⵠΔᐃⵠⲆᐃ: ns++
  };
  ns = 0;
  var ss = {
    ᐃⲆΔⲆⵠ: ns++,
    ΔⲆΔⵠΔ: ns++,
    ⲆΔΔΔΔ: ns++,
    ΔᐃⵠΔᐃ: ns++,
    ⲆⵠΔⵠΔ: ns++,
    ⵠᐃΔΔᐃ: ns++,
    ᐃⵠⵠΔΔ: ns++,
    ᐃᐃΔΔⵠ: ns++,
    ΔᐃΔᐃΔ: ns++,
    ΔΔᐃⵠΔ: ns++,
    ᐃⵠⵠᐃⵠ: ns++,
    ⲆⵠΔΔⲆ: ns++,
    ⲆΔᐃⵠⵠ: ns++,
    ᐃᐃΔⵠΔ: ns++,
    ᐃΔᐃⲆᐃ: ns++,
    ᐃᐃⵠⵠᐃ: ns++,
    ΔⲆᐃΔΔ: ns++,
    ΔⵠⲆᐃⵠ: ns++,
    ΔⵠⲆⵠⵠ: ns++,
    ⲆΔⵠᐃⲆ: ns++,
    ΔᐃΔⲆⵠ: ns++,
    ⵠⲆⲆⲆᐃ: ns++,
    ⵠᐃⵠⲆΔ: ns++,
    ⲆⵠⵠᐃΔ: ns++,
    ᐃᐃⵠⵠⲆ: ns++,
    ⲆⲆᐃᐃⵠ: ns++,
    ⲆΔᐃⵠᐃ: ns++,
    ΔⲆⵠΔᐃ: ns++,
    ⲆΔΔΔᐃ: ns++,
    ΔⲆⲆΔⵠ: ns++,
    ᐃᐃⲆᐃⲆ: ns++,
    ᐃⵠⲆᐃⲆ: ns++,
    ΔⵠⲆΔᐃ: ns++,
    ⵠΔᐃⲆᐃ: ns++,
    ⵠⵠⲆⲆⲆ: ns++,
    ⲆⲆΔᐃⵠ: ns++,
    ⲆᐃΔⵠⵠ: ns++,
    ΔᐃⵠΔⲆ: ns++,
    ⵠΔⲆⵠⲆ: ns++,
    ⲆΔⵠⵠⵠ: ns++,
    ⵠΔⵠⲆΔ: ns++,
    ΔᐃΔⲆⲆ: ns++,
    ΔΔΔⵠΔ: ns++,
    ⵠⵠⲆΔⵠ: ns++,
    ΔΔΔᐃⲆ: ns++,
    ᐃΔⲆⵠⲆ: ns++,
    ᐃᐃᐃⲆⲆ: ns++,
    ⵠᐃⲆⵠⵠ: ns++,
    ⵠⵠᐃⲆᐃ: ns++,
    ⵠⵠⵠⵠᐃ: ns++,
    ᐃⵠⵠΔⵠ: ns++,
    ⲆⲆⲆⵠⲆ: ns++,
    ᐃⵠΔᐃΔ: ns++,
    ᐃⲆⲆⵠΔ: ns++,
    ⵠⲆΔⲆⲆ: ns++,
    ⵠⵠⵠⵠⵠ: ns++,
    ΔᐃᐃⲆᐃ: ns++,
    ⵠΔᐃⵠᐃ: ns++,
    ᐃΔΔΔⲆ: ns++,
    ⲆᐃΔΔΔ: ns++,
    ΔΔΔⲆⵠ: ns++,
    ᐃⲆⵠᐃⲆ: ns++,
    ᐃᐃᐃΔⵠ: ns++,
    ᐃⲆΔᐃᐃ: ns++,
    ΔΔΔⵠⵠ: ns++,
    ⵠⵠΔΔΔ: ns++,
    ΔᐃΔⵠⵠ: ns++,
    ⲆΔΔᐃⲆ: ns++,
    ⵠᐃⲆᐃᐃ: ns++,
    ᐃΔⵠᐃᐃ: ns++,
    ⲆⵠⵠⵠΔ: ns++,
    ⲆᐃⲆᐃⲆ: ns++,
    ΔᐃⵠⲆⲆ: ns++,
    ᐃΔᐃᐃⵠ: ns++,
    ⲆΔᐃᐃΔ: ns++,
    ⲆΔᐃⲆⲆ: ns++,
    Δᐃⵠᐃᐃ: ns++,
    ᐃⲆΔᐃⵠ: ns++,
    ⲆᐃⵠⵠΔ: ns++,
    ⵠⲆⲆⲆΔ: ns++,
    ⵠⲆⲆⵠⲆ: ns++,
    ΔⲆⲆⲆⲆ: ns++,
    ΔΔΔᐃᐃ: ns++,
    ⵠⲆⲆΔⵠ: ns++,
    ΔΔⵠⵠⲆ: ns++,
    ⵠΔⲆᐃⲆ: ns++,
    ᐃⲆⵠⵠⲆ: ns++,
    ⲆⲆᐃⲆΔ: ns++,
    ΔⵠΔᐃΔ: ns++,
    ⵠⲆⵠⵠᐃ: ns++,
    Ⲇᐃᐃᐃⵠ: ns++,
    ᐃⵠⲆΔⵠ: ns++,
    ⲆΔⲆΔᐃ: ns++,
    ᐃⲆⲆΔⲆ: ns++,
    ᐃⵠⲆⲆⲆ: ns++,
    ⵠᐃⵠⲆⲆ: ns++,
    ΔΔᐃⲆᐃ: ns++,
    ⵠⲆⵠⵠⵠ: ns++,
    ⵠᐃᐃΔⵠ: ns++,
    ΔΔᐃⲆⲆ: ns++,
    ⵠⵠᐃΔ: ns++,
    ⵠᐃΔⵠⲆ: ns++,
    ⵠΔⲆᐃⵠ: ns++,
    ΔΔⲆⵠΔ: ns++,
    ⲆΔⲆⵠᐃ: ns++,
    ⲆⲆⲆⲆⲆ: ns++,
    ⲆⲆΔΔΔ: ns++,
    ⵠΔᐃΔᐃ: ns++,
    ᐃΔᐃᐃᐃ: ns++,
    ⲆⵠΔᐃΔ: ns++,
    ᐃᐃⵠΔⵠ: ns++,
    ⵠⵠⲆΔⲆ: ns++,
    ᐃΔⵠⵠⵠⵠΔ: ns++,
    ⵠⵠⵠⵠΔⵠⲆ: ns++,
    ⵠᐃΔⵠΔ: ns++,
    ⲆΔᐃⲆᐃ: ns++,
    ᐃΔⵠΔⵠ: ns++,
    ⲆᐃΔᐃⲆ: ns++,
    ⵠΔⲆⵠΔ: ns++,
    ⲆⲆⵠΔⵠ: ns++,
    ⵠⵠⵠⵠⲆ: ns++,
    ᐃᐃᐃΔᐃ: ns++,
    ᐃⲆΔⲆΔ: ns++,
    ⵠⲆΔᐃΔ: ns++,
    ΔⵠⵠΔⵠ: ns++,
    Ⲇⵠᐃᐃⵠ: ns++,
    ⵠⵠᐃᐃⲆ: ns++,
    ⲆᐃΔⵠⲆ: ns++,
    ⵠΔᐃΔⲆ: ns++,
    ᐃⵠⵠⲆᐃ: ns++,
    ΔⵠⲆⵠᐃ: ns++,
    ΔⵠΔᐃᐃ: ns++,
    ⵠⵠⲆⲆⵠ: ns++,
    ΔⲆⵠᐃⲆ: ns++,
    ⲆΔΔᐃΔ: ns++,
    ⲆΔᐃⲆⵠ: ns++,
    ⲆⲆⲆⵠΔ: ns++,
    ΔᐃⵠⵠΔ: ns++,
    ⲆᐃΔⲆᐃ: ns++,
    ⲆᐃᐃⲆΔ: ns++,
    ⵠΔⵠΔⵠ: ns++,
    ΔⲆᐃⵠⲆ: ns++,
    ⵠⵠⵠⲆⵠ: ns++,
    ⲆⲆᐃᐃⲆ: ns++,
    ⵠⲆⵠᐃᐃ: ns++,
    ΔⵠᐃⲆⲆ: ns++,
    ⵠⲆᐃⲆⵠ: ns++,
    ΔᐃᐃΔᐃ: ns++,
    ΔⵠΔⵠⲆ: ns++,
    ᐃᐃⵠᐃΔ: ns++,
    ⵠᐃᐃᐃΔ: ns++,
    ⲆⲆΔⵠⲆ: ns++,
    ΔⲆⵠΔⲆ: ns++,
    ⵠⲆᐃⵠⵠ: ns++,
    Ⲇᐃⵠᐃᐃ: ns++,
    ΔΔⲆⵠⲆ: ns++,
    ⵠⲆᐃⵠⲆ: ns++,
    ⵠΔΔⵠⵠ: ns++,
    ⵠᐃⲆΔᐃ: ns++,
    ᐃᐃⵠΔᐃ: ns++,
    ⲆⵠⲆⵠᐃ: ns++,
    ⲆⵠⲆΔⵠ: ns++,
    ⵠΔⵠⵠⲆ: ns++,
    ΔⵠⲆⲆⵠ: ns++,
    ᐃΔⵠⵠⵠ: ns++,
    ⲆᐃⵠΔⲆ: ns++,
    ᐃⲆΔⵠᐃ: ns++,
    ⵠΔⵠᐃΔ: ns++,
    ᐃΔᐃᐃⲆ: ns++,
    Δᐃⵠⵠᐃ: ns++,
    ᐃΔⵠΔⲆ: ns++,
    ΔⲆⵠᐃᐃ: ns++,
    ⵠᐃΔⲆⵠ: ns++,
    ΔΔⵠᐃᐃ: ns++,
    ΔⲆᐃᐃⲆ: ns++,
    ᐃΔᐃⵠᐃ: ns++,
    ΔᐃⲆⵠⵠ: ns++
  };
  ns = 0;
  var ts = {
    ⲆⲆΔᐃⵠ: ns++,
    ⵠᐃΔΔᐃ: ns++,
    ᐃⲆᐃⵠⵠ: ns++,
    ᐃⵠⵠΔΔ: ns++,
    ᐃᐃΔΔⵠ: ns++,
    ⲆᐃΔⵠⵠ: ns++,
    ΔᐃⵠΔⲆ: ns++,
    ⵠⵠᐃᐃᐃ: ns++,
    ⲆⵠΔⵠΔ: ns++,
    ᐃⲆΔⵠⵠ: ns++,
    ⵠⲆⲆΔⵠ: ns++,
    ΔΔⵠⵠⲆ: ns++,
    ⲆⲆᐃᐃⵠ: ns++,
    ⲆΔᐃⵠᐃ: ns++,
    ΔⲆⵠΔᐃ: ns++,
    ⲆΔΔΔᐃ: ns++,
    ᐃⵠⲆᐃⲆ: ns++,
    ΔⵠⲆΔᐃ: ns++,
    ⵠΔᐃⲆᐃ: ns++,
    ⲆΔⵠⵠⵠ: ns++,
    ⵠᐃⵠⲆⲆ: ns++,
    ΔΔᐃⲆᐃ: ns++,
    ⵠⲆⵠⵠⵠ: ns++,
    ⵠⲆⲆⵠⲆ: ns++,
    ΔⲆⲆⲆⲆ: ns++,
    ΔⵠΔᐃΔ: ns++,
    ⵠⲆⵠⵠᐃ: ns++,
    Ⲇᐃᐃᐃⵠ: ns++,
    ᐃᐃⵠⵠⲆ: ns++,
    ⵠⵠᐃΔ: ns++,
    ⵠΔⲆⵠⲆ: ns++,
    ΔᐃΔᐃΔ: ns++,
    ΔΔᐃⵠΔ: ns++,
    ΔⲆⲆΔⵠ: ns++,
    ᐃᐃⲆᐃⲆ: ns++,
    ᐃⵠⵠᐃⵠ: ns++,
    ⲆⵠΔΔⲆ: ns++,
    ⲆΔᐃⵠⵠ: ns++,
    ᐃᐃΔⵠΔ: ns++,
    ᐃΔᐃⲆᐃ: ns++,
    ⵠΔⲆᐃⲆ: ns++,
    ⵠΔΔΔᐃ: ns++,
    ⵠᐃΔΔⵠ: ns++,
    ᐃⵠⲆΔⵠ: ns++,
    ⲆΔⲆΔᐃ: ns++,
    ᐃᐃⵠⵠᐃ: ns++,
    ΔⲆᐃΔΔ: ns++,
    ᐃⵠⲆⲆⲆ: ns++,
    ᐃⲆⲆΔⲆ: ns++,
    ⵠⲆⲆⲆᐃ: ns++,
    ΔⵠⲆᐃⵠ: ns++,
    ΔⵠⲆⵠⵠ: ns++,
    ⲆΔⵠᐃⲆ: ns++,
    ⵠᐃⵠⲆΔ: ns++,
    ⲆⵠⵠᐃΔ: ns++,
    ᐃⲆΔⲆΔ: ns++,
    ⵠⲆΔᐃΔ: ns++,
    ⵠⵠⲆⲆⲆ: ns++,
    ⲆⲆᐃⲆΔ: ns++,
    ⵠⵠᐃᐃⲆ: ns++,
    ⲆᐃΔⵠⲆ: ns++,
    ⵠΔᐃΔⲆ: ns++,
    ᐃⵠⵠⲆᐃ: ns++,
    ΔⵠⲆⵠᐃ: ns++,
    ΔⵠΔᐃᐃ: ns++,
    ΔⲆⵠᐃⲆ: ns++,
    ⲆΔᐃⲆⵠ: ns++,
    ΔᐃⵠⵠΔ: ns++,
    ⲆᐃᐃⲆΔ: ns++,
    ΔⲆᐃⵠⲆ: ns++,
    ⲆⲆᐃᐃⲆ: ns++,
    ΔⵠᐃⲆⲆ: ns++,
    ⵠⲆᐃⲆⵠ: ns++,
    ΔᐃᐃΔᐃ: ns++,
    ΔⵠΔⵠⲆ: ns++,
    ᐃᐃⵠᐃΔ: ns++,
    ⵠᐃᐃᐃΔ: ns++,
    ⲆⲆΔⵠⲆ: ns++,
    ΔⲆⵠΔⲆ: ns++,
    ⵠⲆᐃⵠⵠ: ns++,
    ⵠᐃᐃΔⵠ: ns++,
    ΔΔᐃⲆⲆ: ns++,
    ΔΔΔᐃᐃ: ns++,
    Ⲇᐃⵠᐃᐃ: ns++,
    ΔΔⲆⵠⲆ: ns++,
    ⵠⲆᐃⵠⲆ: ns++,
    ⵠΔΔⵠⵠ: ns++,
    ΔⲆⵠⵠᐃ: ns++,
    ᐃⲆⵠⵠⲆ: ns++,
    ⲆᐃⵠΔⲆ: ns++,
    ΔΔⵠᐃᐃ: ns++,
    ΔᐃⲆⵠⵠ: ns++,
    ΔⲆᐃᐃⲆ: ns++,
    ᐃΔᐃⵠᐃ: ns++,
    ⵠΔⵠᐃΔ: ns++,
    ᐃΔᐃᐃⲆ: ns++,
    Δᐃⵠⵠᐃ: ns++,
    ᐃΔⵠΔⲆ: ns++,
    ΔⲆⵠᐃᐃ: ns++,
    ⵠᐃΔⲆⵠ: ns++,
    ⵠᐃⵠΔΔ: ns++,
    ⵠⵠⲆⲆⵠ: ns++,
    ⲆΔΔᐃΔ: ns++,
    ⲆⲆⲆⵠΔ: ns++,
    ⲆᐃΔⲆᐃ: ns++,
    ⵠΔⵠΔⵠ: ns++,
    ⵠⵠⵠⲆⵠ: ns++,
    ⵠⲆⵠᐃᐃ: ns++,
    ⵠΔΔⲆ: ns++,
    ᐃⲆᐃΔ: ns++,
    ⲆⲆⵠᐃᐃ: ns++,
    ΔᐃⲆⲆ: ns++,
    ᐃⲆΔⵠ: ns++,
    ᐃⲆΔⲆⵠ: ns++,
    ΔᐃⵠΔᐃ: ns++,
    ⵠΔⵠⲆΔ: ns++,
    ⲆΔⲆᐃᐃ: ns++,
    ⵠⵠⵠⵠᐃ: ns++,
    ΔⲆΔⵠΔ: ns++,
    ⲆΔΔΔΔ: ns++,
    ⵠᐃΔⵠⲆ: ns++,
    ⲆΔⲆᐃ: ns++,
    ⲆᐃΔΔΔ: ns++,
    ⲆᐃⲆᐃⲆ: ns++,
    ⵠⵠΔΔΔ: ns++,
    ⲆⲆΔΔΔ: ns++,
    ΔΔⲆᐃⲆ: ns++,
    ⵠⵠⲆΔⲆ: ns++,
    ᐃᐃⵠΔⵠ: ns++,
    ⵠⵠⵠΔⵠ: ns++,
    ΔᐃΔⲆⵠ: ns++,
    ᐃⲆⵠⵠⵠ: ns++,
    ΔᐃΔⲆⲆ: ns++,
    ᐃⵠΔᐃΔ: ns++,
    ᐃΔΔⲆⵠ: ns++,
    ⵠᐃΔⵠΔ: ns++,
    ᐃⲆⲆⵠΔ: ns++,
    ⵠᐃⲆⲆⲆ: ns++,
    ᐃⵠⵠΔⵠ: ns++,
    ⲆⵠⲆⲆⵠ: ns++,
    ⲆᐃᐃᐃⲆ: ns++,
    ⲆⵠΔᐃΔ: ns++,
    ⲆⲆΔΔᐃ: ns++,
    ⲆⲆⲆⵠⲆ: ns++,
    ΔⵠⵠΔⵠ: ns++,
    Ⲇⵠᐃᐃⵠ: ns++,
    ᐃⵠⲆᐃⵠ: ns++,
    ⵠΔⲆᐃⵠ: ns++,
    ΔΔⲆⵠΔ: ns++,
    ΔⵠᐃⵠΔ: ns++,
    ΔⵠⲆⲆⲆ: ns++,
    ⲆΔᐃⲆᐃ: ns++,
    ᐃΔⵠΔⵠ: ns++,
    ⲆᐃΔᐃⲆ: ns++,
    ⵠΔⲆⵠΔ: ns++,
    ⲆⲆⵠΔⵠ: ns++,
    ⵠⵠⵠⵠⲆ: ns++,
    ᐃᐃᐃΔᐃ: ns++,
    ⲆΔⲆⵠᐃ: ns++,
    ⲆⲆⲆⲆⲆ: ns++,
    ⲆΔΔᐃⲆ: ns++,
    ᐃⵠΔᐃⵠ: ns++,
    ⵠⵠⵠⵠⵠ: ns++,
    ΔᐃᐃⲆᐃ: ns++,
    ⵠΔᐃⵠᐃ: ns++,
    ᐃΔΔΔⲆ: ns++,
    ᐃⲆⵠᐃⲆ: ns++,
    ⵠⲆⲆⲆΔ: ns++,
    ⵠᐃⲆᐃᐃ: ns++,
    ᐃΔⵠᐃᐃ: ns++,
    ⲆⵠⵠⵠΔ: ns++,
    ᐃᐃᐃΔⵠ: ns++,
    ᐃⲆΔᐃᐃ: ns++,
    ΔΔΔⵠⵠ: ns++,
    ⲆᐃⲆⵠⲆ: ns++,
    ΔⲆⵠⵠⲆ: ns++,
    ΔⵠⲆΔⵠ: ns++,
    ⲆⵠⲆᐃⲆ: ns++,
    ⲆⲆᐃⲆⲆ: ns++,
    ⵠᐃⲆⵠᐃ: ns++,
    ⵠᐃⲆΔᐃ: ns++,
    ᐃᐃⵠΔᐃ: ns++,
    ⲆⵠⲆⵠᐃ: ns++,
    ⲆⵠⲆΔⵠ: ns++,
    ⵠᐃⵠⵠⵠ: ns++,
    ΔΔⵠΔⵠ: ns++,
    ΔΔⵠⲆⲆ: ns++,
    Δⵠⵠⵠᐃ: ns++,
    ΔΔΔⵠΔ: ns++,
    ᐃⵠᐃΔΔ: ns++,
    ⵠΔᐃΔᐃ: ns++,
    ⵠⵠⲆΔⵠ: ns++,
    ⵠⲆⲆᐃΔ: ns++,
    ΔΔΔᐃⲆ: ns++,
    ⲆᐃᐃⵠⲆ: ns++,
    ⵠⲆΔⲆⲆ: ns++,
    ⵠΔᐃⵠⲆ: ns++,
    ᐃⲆⵠΔⵠ: ns++,
    ⵠΔⵠⵠⲆ: ns++,
    ΔⲆᐃⵠΔ: ns++,
    ᐃΔⲆⵠᐃ: ns++,
    ᐃᐃᐃⵠΔ: ns++,
    ⲆⲆⵠΔ: ns++,
    ΔⲆΔΔΔ: ns++,
    ᐃΔⲆⵠⲆ: ns++,
    ᐃⲆⵠⲆΔ: ns++,
    ᐃᐃᐃⲆⲆ: ns++,
    ᐃΔⵠᐃⵠ: ns++,
    ⵠᐃⲆⵠⵠ: ns++,
    ⲆΔᐃΔᐃ: ns++,
    ⵠⵠᐃⲆᐃ: ns++,
    ᐃΔⵠⵠᐃ: ns++,
    ᐃΔᐃᐃⵠ: ns++,
    ⲆΔᐃᐃΔ: ns++,
    ⲆΔᐃⲆⲆ: ns++,
    Δᐃⵠᐃᐃ: ns++,
    ᐃⲆΔᐃⵠ: ns++,
    ΔΔΔⲆⵠ: ns++,
    ΔᐃΔⵠⵠ: ns++,
    ΔᐃⵠⲆⲆ: ns++,
    ⲆᐃⵠⵠΔ: ns++,
    ᐃΔᐃᐃᐃ: ns++,
    ⵠⵠⵠⵠΔ: ns++,
    ΔⵠⲆⲆⵠ: ns++,
    ᐃΔⵠⵠⵠ: ns++,
    ΔⵠᐃΔⵠ: ns++,
    ᐃⲆᐃⲆⲆ: ns++,
    ⲆⲆⲆᐃⲆ: ns++,
    ΔᐃⵠΔⵠ: ns++,
    ⵠⲆⵠΔⵠ: ns++,
    ᐃⲆΔⵠᐃ: ns++,
    ⲆᐃΔᐃΔ: ns++,
    ⵠᐃΔᐃᐃ: ns++,
    ⵠⵠᐃⵠⲆ: ns++,
    ΔⵠΔᐃⵠ: ns++,
    ⵠⲆΔΔΔᐃΔ: ns++,
    ᐃᐃⵠⵠⵠⲆΔ: ns++,
    ᐃⲆΔⵠΔ: ns++,
    ΔΔᐃᐃᐃ: ns++,
    ᐃⲆᐃⵠᐃ: ns++,
    ⵠᐃⵠⲆᐃ: ns++
  };
  var us = {
    ⵠᐃΔⲆⲆ: 3,
    ᐃⲆⵠⲆⵠ: 4,
    ᐃᐃⲆⵠΔ: 5,
    ⲆᐃⲆⲆⲆ: 0,
    ᐃⵠᐃⵠΔ: y,
    ᐃᐃᐃᐃⵠ: dj
  };
  const vs = ke;
  const qs = is;
  var ws = [];
  ws[ts.ᐃⲆᐃΔ] = {
    name: "Wood",
    Δᐃ: rs.ⲆᐃᐃᐃⲆⵠᐃ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: 0
  };
  const xs = T;
  const ys = uj;
  const zs = Rn;
  ws[ts.ⵠΔΔⲆ] = {
    name: "Stone",
    Δᐃ: rs.ᐃⲆΔΔΔⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ks
  };
  const As = Qo;
  ws[ts.ΔᐃⲆⲆ] = {
    name: "Gold",
    Δᐃ: rs.ᐃᐃⲆⲆΔⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const Bs = hk;
  const Cs = Fo;
  const Ds = Ui;
  ws[ts.ᐃⲆΔⵠ] = {
    name: "Diamond",
    Δᐃ: rs.ΔΔᐃⵠᐃΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⲆΔⲆᐃ] = {
    name: "Amethyst",
    Δᐃ: rs.ᐃⲆⲆⵠⲆᐃᐃ,
    ΔΔΔⲆ: ks,
    ᐃⵠΔΔ: hk
  };
  ws[ts.ᐃⲆᐃⵠⵠ] = {
    name: "Rabbit fur",
    Δᐃ: rs.ᐃΔⵠᐃⵠⲆⲆ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: ho
  };
  const eh = _;
  ws[ts.ⲆᐃⲆⵠⲆ] = {
    name: "Wolf fur",
    Δᐃ: rs.ᐃΔⵠΔⵠΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Bs
  };
  ws[ts.ᐃⲆΔⵠΔ] = {
    name: "Boar fur",
    Δᐃ: rs.ⲆΔⲆΔΔᐃΔ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: Xa
  };
  ws[ts.ⵠᐃⵠΔΔ] = {
    name: "Firefly",
    Δᐃ: rs.ᐃᐃΔⲆⲆⲆᐃ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: Go
  };
  const ih = Un;
  const th = Ek;
  const nh = k;
  const oh = Pr;
  const rh = Fj;
  ws[ts.ⵠⵠⲆⲆⵠ] = {
    name: "Wood arrow",
    Δᐃ: rs.ⵠΔΔⵠᐃⵠⲆ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⲆΔΔᐃΔ] = {
    name: "Stone arrow",
    Δᐃ: rs.ⵠⲆⵠⲆⲆⲆⲆ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: uq
  };
  const ah = vk;
  const sh = Ar;
  ws[ts.ⲆⲆⲆⵠΔ] = {
    name: "Gold arrow",
    Δᐃ: rs.ΔⲆΔⵠᐃᐃⲆ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: 1
  };
  const hh = Aq;
  const lh = co;
  const gh = Pa;
  const uh = Kk;
  ws[ts.ⲆᐃΔⲆᐃ] = {
    name: "Diamond arrow",
    Δᐃ: rs.ᐃⵠᐃⲆΔᐃᐃ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: hj
  };
  const bh = Zk;
  const vh = He;
  ws[ts.ⵠΔⵠΔⵠ] = {
    name: "Amethyst arrow",
    Δᐃ: rs.ΔᐃΔΔⵠⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: y
  };
  const dh = gj;
  ws[ts.ⵠⵠⵠⲆⵠ] = {
    name: "Reidite arrow",
    Δᐃ: rs.ᐃΔΔⲆᐃΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: kr
  };
  ws[ts.ⵠⲆⵠᐃᐃ] = {
    name: "Dragon arrow",
    Δᐃ: rs.ᐃᐃⵠᐃΔᐃⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: gj
  };
  ws[ts.ᐃⵠⲆᐃⵠ] = {
    name: "Winter fur",
    Δᐃ: rs.ⲆΔⲆⵠΔⲆᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠᐃⵠⲆᐃ] = {
    name: "Fur mammoth",
    Δᐃ: rs.ⲆⲆᐃⵠᐃⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const ch = gs;
  ws[ts.ᐃⵠΔᐃⵠ] = {
    name: "Web",
    Δᐃ: rs.ᐃᐃᐃΔⲆΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⲆΔⲆᐃᐃ] = {
    name: "Meat",
    Δᐃ: rs.ΔⵠᐃᐃᐃΔⵠ,
    ΔΔΔⲆ: ks,
    ᐃⵠΔΔ: Xa
  };
  ws[ts.ⵠᐃⲆⲆⲆ] = {
    name: "Fish",
    Δᐃ: rs.ⵠⲆᐃΔᐃΔⲆ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠⵠⵠΔⵠ] = {
    name: "Kraken skin",
    Δᐃ: rs.ⲆᐃⲆᐃⲆᐃᐃ,
    ΔΔΔⲆ: dh,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⲆⵠⲆⲆⵠ] = {
    name: "Piranha scales",
    Δᐃ: rs.ⵠᐃⵠΔⲆⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: dh
  };
  ws[ts.ⲆⲆΔΔᐃ] = {
    name: "Ice",
    Δᐃ: rs.ⲆⲆⵠⵠⲆⲆⵠ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: 0
  };
  const mh = nk;
  const ph = Xe;
  const Ch = h;
  const Th = uq;
  const fh = Di;
  ws[ts.ΔΔⲆᐃⲆ] = {
    name: "Sand",
    Δᐃ: rs.ᐃⵠⲆᐃᐃⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: gj
  };
  ws[ts.ⲆᐃᐃᐃⲆ] = {
    name: "Dirt",
    Δᐃ: rs.ⲆⲆᐃⲆᐃⲆΔ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: ks
  };
  ws[ts.ⲆⲆⵠᐃᐃ] = {
    name: "Berrie",
    Δᐃ: rs.ⵠⵠΔᐃⲆⵠⵠ,
    ΔΔΔⲆ: dh,
    ᐃⵠΔΔ: hk
  };
  const zh = An;
  ws[ts.ᐃⲆⵠⵠⵠ] = {
    name: "Flour",
    Δᐃ: rs.ⵠᐃⲆΔΔᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: dh
  };
  ws[ts.ᐃΔΔⲆⵠ] = {
    name: "Flour",
    Δᐃ: rs.ᐃΔΔⲆⵠΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const yh = we;
  ws[ts.ⲆⲆᐃⲆⲆ] = {
    name: "Special fur peasant",
    Δᐃ: rs.ⲆᐃⵠⵠⵠⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Bs
  };
  ws[ts.ⵠᐃⲆⵠᐃ] = {
    name: "Special fur hood",
    Δᐃ: rs.ⵠⲆⲆⲆⵠⵠΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const wh = si;
  ws[ts.ᐃⵠᐃΔΔ] = {
    name: "Pumpkin",
    Δᐃ: rs.ΔΔⲆⵠᐃⵠΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠⲆⲆᐃΔ] = {
    name: "Garlic",
    Δᐃ: rs.ΔⵠΔⵠᐃΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⲆᐃᐃⵠⲆ] = {
    name: "Thornbush",
    Δᐃ: rs.ΔⲆⲆⲆᐃᐃⵠ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: fs
  };
  const Ph = Xe;
  const Ah = qa;
  const kh = za;
  const xh = yn;
  ws[ts.ᐃⲆⵠⲆΔ] = {
    name: "Carrot",
    Δᐃ: rs.ⵠᐃⲆⲆⲆⵠⲆ,
    ΔΔΔⲆ: gj,
    ᐃⵠΔΔ: ka
  };
  ws[ts.ᐃΔⵠᐃⵠ] = {
    name: "Tomato",
    Δᐃ: rs.ΔⲆΔⵠⵠⵠᐃ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: ks
  };
  const Jh = Ia;
  const Mh = Ma;
  const Bh = fk;
  ws[ts.ⲆΔᐃΔᐃ] = {
    name: "Watermelon",
    Δᐃ: rs.ΔⵠⲆΔΔⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ka
  };
  const Dh = Fq;
  const Eh = Kk;
  const Ih = Ma;
  ws[ts.ᐃΔⵠⵠᐃ] = {
    name: "Aloe Vera",
    Δᐃ: rs.ⲆΔΔⵠΔᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠⵠⵠⵠΔ] = {
    name: "Penguin Feather",
    Δᐃ: rs.ΔΔΔⲆⲆ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: ka
  };
  ws[ts.ⲆᐃΔᐃΔ] = {
    name: "Hawk Feather",
    Δᐃ: rs.ⲆᐃᐃΔⵠ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: 0
  };
  const Sh = Pj;
  const Qh = yr;
  const _h = Di;
  const Fh = Rn;
  ws[ts.ⵠᐃΔᐃᐃ] = {
    name: "Vulture Feather",
    Δᐃ: rs.ΔⲆⵠΔⵠ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: 0
  };
  const Rh = Lj;
  const jh = en;
  const Gh = tk;
  const Lh = Pr;
  ws[ts.ⵠⵠᐃⵠⲆ] = {
    name: "Cactus",
    Δᐃ: rs.ᐃᐃΔΔᐃΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ᐃᐃⵠⵠⵠⲆΔ] = {
    name: "Cactus",
    Δᐃ: rs.ΔᐃⵠⲆⵠᐃΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ho
  };
  const Wh = Sr;
  ws[ts.ⵠⲆΔΔΔᐃΔ] = {
    name: "Pitchfork Part",
    Δᐃ: rs.ⵠΔⲆᐃᐃⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: gj
  };
  ws[ts.ΔΔᐃᐃᐃ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ⲆⵠⲆΔΔⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Go
  };
  ws[ts.ΔⵠΔᐃⵠ] = {
    name: "Emerald",
    Δᐃ: rs.ΔⵠᐃΔⲆ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: ks
  };
  const Oh = oq;
  ws[ts.ⵠΔΔΔᐃ] = {
    name: "Christmas Hat",
    Δᐃ: rs.ᐃⵠΔⵠⲆΔΔ,
    ᐃⵠΔΔ: Bs
  };
  const Nh = Gr;
  const qh = E;
  const Hh = sh;
  ws[ts.ⵠᐃΔΔⵠ] = {
    name: "Elf Hat",
    Δᐃ: rs.ᐃⵠⲆΔⵠⲆΔ,
    ᐃⵠΔΔ: Xa
  };
  const Uh = oa;
  ws[ts.ᐃᐃᐃⵠΔ] = {
    name: "Garland",
    Δᐃ: rs.ᐃⲆΔᐃΔΔⵠ,
    ᐃⵠΔΔ: 0,
    ΔΔΔⲆ: 0
  };
  ws[ts.ᐃΔⲆⵠᐃ] = {
    name: "Candy",
    Δᐃ: rs.ᐃᐃᐃᐃⲆⲆⵠ,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ΔⲆᐃⵠΔ] = {
    name: "Sugar Cane",
    Δᐃ: rs.ΔⲆⵠⵠᐃΔⲆ,
    ᐃⵠΔΔ: ho
  };
  ws[ts.ᐃⲆΔⵠⵠ] = {
    name: "Pirate Sword",
    Δᐃ: rs.ᐃΔᐃⲆⲆᐃⲆ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: Xa
  };
  ws[ts.ⵠΔᐃⵠⲆ] = {
    name: "Crab Stick",
    Δᐃ: rs.ΔᐃⲆⲆΔⵠΔ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: Go
  };
  ws[ts.ⲆⲆⵠΔ] = {
    name: "Reidite",
    Δᐃ: rs.ᐃᐃⲆᐃⵠᐃⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Bs
  };
  ws[ts.ΔⲆΔΔΔ] = {
    name: "Flame",
    Δᐃ: rs.ΔᐃᐃΔᐃᐃⲆ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: 0
  };
  const Yh = Ih;
  const Kh = Aq;
  ws[ts.ᐃⲆΔⲆⵠ] = {
    name: "Campfire",
    Δᐃ: rs.ⵠⵠⵠᐃᐃᐃΔ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: uq
  };
  ws[ts.ⵠΔⵠⵠⲆ] = {
    name: "Bed",
    Δᐃ: rs.ⵠⲆᐃᐃⲆᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: or
  };
  ws[ts.ΔᐃⵠΔᐃ] = {
    name: "Workbench",
    Δᐃ: rs.ⵠⵠΔᐃⲆΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Vh = f;
  const Xh = lh;
  const Zh = rh;
  ws[ts.ⲆⲆΔᐃⵠ] = {
    name: "Stone sword",
    Δᐃ: rs.ᐃΔΔᐃᐃΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const $h = di;
  ws[ts.ⵠᐃΔΔᐃ] = {
    name: "Stone pick",
    Δᐃ: rs.ⲆᐃⲆᐃᐃⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: uq
  };
  const el = P;
  ws[ts.ⵠΔⵠⲆΔ] = {
    name: "Berries bush",
    Δᐃ: rs.ᐃⲆⲆⵠⵠΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const il = Xh;
  const tl = Fq;
  const nl = pn;
  ws[ts.ᐃⵠⵠΔΔ] = {
    name: "Gold pick",
    Δᐃ: rs.ⵠΔᐃΔΔᐃⲆ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃᐃΔΔⵠ] = {
    name: "Diamond pick",
    Δᐃ: rs.ⲆᐃᐃᐃᐃΔⵠ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 1
  };
  const ol = As;
  ws[ts.ⵠⵠⲆⲆⲆ] = {
    name: "Wood sword",
    Δᐃ: rs.ⲆΔⵠΔΔᐃΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const rl = Sj;
  ws[ts.ⲆᐃΔⵠⵠ] = {
    name: "Gold sword",
    Δᐃ: rs.ⵠⵠᐃⵠⲆΔᐃ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: 1
  };
  const al = Na;
  const sl = Lk;
  const hl = rl;
  ws[ts.ΔᐃⵠΔⲆ] = {
    name: "Diamond sword",
    Δᐃ: rs.ⲆⵠᐃΔᐃᐃⵠ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: Zn
  };
  const ll = qa;
  ws[ts.ⲆⵠΔⵠΔ] = {
    name: "Wood pick",
    Δᐃ: rs.ⵠΔⵠⵠΔᐃΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: bq
  };
  ws[ts.ⵠⵠⵠⵠⵠ] = {
    name: "Wood wall",
    Δᐃ: rs.ⲆΔᐃᐃΔⵠΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const gl = Lr;
  const ul = wr;
  ws[ts.ⲆΔΔᐃⲆ] = {
    name: "Wood spike",
    Δᐃ: rs.ⲆⲆΔΔΔᐃᐃ,
    ΔΔΔⲆ: dh,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠⵠⵠⵠᐃ] = {
    name: "Cooked meat",
    Δᐃ: rs.ⵠΔⵠΔⲆΔⲆ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 0
  };
  const bl = Aq;
  ws[ts.ΔⲆΔⵠΔ] = {
    name: "Big campfire",
    Δᐃ: rs.ᐃⲆⲆΔᐃⲆⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: $r
  };
  const vl = hk;
  const dl = wh;
  ws[ts.ⵠⲆΔⲆⲆ] = {
    name: "Bandage",
    Δᐃ: rs.ΔΔⲆΔᐃᐃΔ,
    ΔΔΔⲆ: vl,
    ᐃⵠΔΔ: 1
  };
  const cl = j;
  ws[ts.ΔᐃᐃⲆᐃ] = {
    name: "Stone wall",
    Δᐃ: rs.Ⲇⵠⵠᐃⵠᐃⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: hj
  };
  ws[ts.ⵠΔᐃⵠᐃ] = {
    name: "Gold wall",
    Δᐃ: rs.ΔᐃᐃⵠᐃΔⲆ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: bq
  };
  ws[ts.ᐃΔΔΔⲆ] = {
    name: "Diamond wall",
    Δᐃ: rs.ⵠⲆΔΔⲆᐃⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃⲆⵠᐃⲆ] = {
    name: "Wood door",
    Δᐃ: rs.ᐃⲆΔⵠΔΔⲆ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: kr
  };
  const ml = Bj;
  ws[ts.ⵠⲆⲆⲆΔ] = {
    name: "Chest",
    Δᐃ: rs.ᐃⲆⵠⵠᐃⵠⲆ,
    ΔΔΔⲆ: vl,
    ᐃⵠΔΔ: bq
  };
  const pl = pa;
  const Cl = Vq;
  ws[ts.ⵠᐃⲆᐃᐃ] = {
    name: "Stone spike",
    Δᐃ: rs.ΔΔΔⲆⵠⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃΔⵠᐃᐃ] = {
    name: "Gold spike",
    Δᐃ: rs.ⲆᐃᐃⵠΔΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Th
  };
  ws[ts.ⲆⵠⵠⵠΔ] = {
    name: "Diamond spike",
    Δᐃ: rs.ⲆΔᐃⵠᐃⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃᐃᐃΔⵠ] = {
    name: "Stone door",
    Δᐃ: rs.ⵠᐃⵠᐃⵠΔⵠ,
    ΔΔΔⲆ: dh,
    ᐃⵠΔΔ: bh
  };
  ws[ts.ᐃⲆΔᐃᐃ] = {
    name: "Gold door",
    Δᐃ: rs.ⲆⵠΔᐃᐃᐃᐃ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: Zk
  };
  ws[ts.ΔΔΔⵠⵠ] = {
    name: "Diamond door",
    Δᐃ: rs.ΔⵠΔΔΔⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: $r
  };
  ws[ts.ⵠⲆⲆΔⵠ] = {
    name: "Chapka",
    Δᐃ: rs.ⲆⵠⵠⲆⲆᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Zk
  };
  const Tl = lq;
  const fl = Gj;
  ws[ts.ΔΔⵠⵠⲆ] = {
    name: "Big Chapka",
    Δᐃ: rs.ⲆᐃⲆⲆΔΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ck
  };
  const zl = Gq;
  ws[ts.ⲆⲆᐃᐃⵠ] = {
    name: "Wood spear",
    Δᐃ: rs.ⲆᐃⵠⵠⵠⲆᐃ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: 1
  };
  const yl = Ci;
  ws[ts.ⲆΔᐃⵠᐃ] = {
    name: "Stone spear",
    Δᐃ: rs.ΔⵠⵠⲆⵠⵠⲆ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: Zn
  };
  const wl = Ji;
  ws[ts.ΔⲆⵠΔᐃ] = {
    name: "Gold spear",
    Δᐃ: rs.ⲆΔⲆΔⲆⵠΔ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: Th
  };
  const Pl = Mj;
  ws[ts.ⲆΔΔΔᐃ] = {
    name: "Diamond spear",
    Δᐃ: rs.ⲆᐃⲆᐃⲆΔᐃ,
    ΔΔΔⲆ: ks,
    ᐃⵠΔΔ: 1
  };
  const Al = Xe;
  const kl = Oj;
  const xl = vs;
  ws[ts.ᐃⵠⲆᐃⲆ] = {
    name: "Dragon spear",
    Δᐃ: rs.ᐃⲆΔᐃⲆⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ks
  };
  const Jl = pi;
  ws[ts.ΔⵠⲆΔᐃ] = {
    name: "Dragon spear",
    Δᐃ: rs.ΔΔⵠⵠⵠᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠΔᐃⲆᐃ] = {
    name: "Crab spear",
    Δᐃ: rs.ⵠΔΔⲆⵠⵠᐃ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: 1
  };
  const Ml = ah;
  const Bl = cj;
  ws[ts.ᐃⲆⵠΔⵠ] = {
    name: "Crab loot",
    Δᐃ: rs.ⵠⵠᐃΔⵠⵠⲆ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: 0
  };
  const Dl = Io;
  const El = hj;
  ws[ts.ⲆΔΔΔΔ] = {
    name: "Furnace",
    Δᐃ: rs.ᐃᐃⲆⵠⵠⲆⵠ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠⲆⲆⵠⲆ] = {
    name: "Explorer hat",
    Δᐃ: rs.ⲆΔᐃΔⲆᐃⵠ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: El
  };
  const Il = Mh;
  const Sl = Gr;
  const Ql = vn;
  ws[ts.ΔⲆⲆⲆⲆ] = {
    name: "Pirate hat",
    Δᐃ: rs.ⲆⵠᐃⵠΔᐃⲆ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 1
  };
  const _l = Qn;
  ws[ts.ΔⲆⵠⵠᐃ] = {
    name: "Flower hat",
    Δᐃ: rs.ᐃᐃⲆᐃⲆΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: y
  };
  ws[ts.ᐃⲆⵠⵠⲆ] = {
    name: "Fur hat",
    Δᐃ: rs.ⵠⵠⵠΔⲆΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Th
  };
  ws[ts.ⲆⲆᐃⲆΔ] = {
    name: "Wood helmet",
    Δᐃ: rs.ⲆΔᐃΔΔⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: kr
  };
  ws[ts.ΔⵠΔᐃΔ] = {
    name: "Stone helmet",
    Δᐃ: rs.ᐃⲆΔΔΔⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Fl = va;
  const Rl = Br;
  const jl = ek;
  ws[ts.ⵠⲆⵠⵠᐃ] = {
    name: "Gold helmet",
    Δᐃ: rs.ΔΔⵠⵠⲆⵠΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Gl = el;
  ws[ts.Ⲇᐃᐃᐃⵠ] = {
    name: "Diamond helmet",
    Δᐃ: rs.ⵠᐃⵠΔⵠⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃᐃⵠⵠⲆ] = {
    name: "Book",
    Δᐃ: rs.ⵠⵠΔⲆΔΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Ll = sr;
  const Wl = yq;
  ws[ts.ⵠᐃΔⵠⲆ] = {
    name: "Paper",
    Δᐃ: rs.ΔⲆᐃⵠⲆⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const Ol = xs;
  const Nl = _j;
  const ql = eh;
  ws[ts.ⵠⵠᐃΔ] = {
    name: "Bag",
    Δᐃ: rs.ᐃΔᐃᐃⲆⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Zn
  };
  const Hl = ul;
  const Ul = Wk;
  ws[ts.ⵠΔⲆⵠⲆ] = {
    name: "Amethyst sword",
    Δᐃ: rs.ΔΔⲆⵠⲆΔΔ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔᐃΔᐃΔ] = {
    name: "Amethyst pick",
    Δᐃ: rs.ᐃⵠⲆΔⲆᐃⲆ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: uq
  };
  const Yl = ho;
  ws[ts.ΔⲆⲆΔⵠ] = {
    name: "Amethyst spear",
    Δᐃ: rs.ΔΔⵠᐃᐃᐃΔ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃⵠⵠᐃⵠ] = {
    name: "Stone hammer",
    Δᐃ: rs.ΔⲆΔⲆᐃⵠⲆ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: Dj
  };
  ws[ts.ⲆⵠΔΔⲆ] = {
    name: "Gold hammer",
    Δᐃ: rs.ⲆΔᐃΔᐃᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Kl = wn;
  ws[ts.ⲆΔᐃⵠⵠ] = {
    name: "Diamond hammer",
    Δᐃ: rs.ΔΔΔᐃΔⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Zk
  };
  ws[ts.ᐃᐃΔⵠΔ] = {
    name: "Amethyst hammer",
    Δᐃ: rs.ⲆᐃⵠΔᐃⲆᐃ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃΔᐃⲆᐃ] = {
    name: "Reidite hammer",
    Δᐃ: rs.ᐃΔⵠᐃⲆⲆⵠ,
    ΔΔΔⲆ: ks,
    ᐃⵠΔΔ: kr
  };
  const Vl = Vq;
  ws[ts.ⲆᐃΔΔΔ] = {
    name: "Amethyst wall",
    Δᐃ: rs.ᐃᐃⵠⵠⵠΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Xl = bl;
  const Zl = ln;
  ws[ts.ⲆᐃⲆᐃⲆ] = {
    name: "Amethyst spike",
    Δᐃ: rs.ⲆᐃⵠⲆΔΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠⵠΔΔΔ] = {
    name: "Amethyst door",
    Δᐃ: rs.ΔⲆⵠΔΔᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ck
  };
  ws[ts.ⵠΔⲆᐃⲆ] = {
    name: "Cap & scarf",
    Δᐃ: rs.ᐃⲆΔⲆᐃΔΔ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 1
  };
  const $l = nk;
  ws[ts.ⵠΔⲆᐃⵠ] = {
    name: "Blue cord",
    Δᐃ: rs.ΔⲆᐃⵠⵠᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: dh
  };
  ws[ts.ΔΔⲆⵠΔ] = {
    name: "Lock",
    Δᐃ: rs.ⲆᐃⵠᐃⲆᐃᐃ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: Zn
  };
  ws[ts.ⲆΔᐃⲆᐃ] = {
    name: "Resurrection",
    Δᐃ: rs.ⲆᐃᐃΔⲆΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⲆΔⲆⵠᐃ] = {
    name: "Lockpick",
    Δᐃ: rs.ΔΔᐃᐃᐃⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const eg = Bj;
  ws[ts.ⲆⲆⲆⲆⲆ] = {
    name: "Totem",
    Δᐃ: rs.ⵠⵠⲆⲆᐃⲆⲆ,
    ΔΔΔⲆ: Yl,
    ᐃⵠΔΔ: Zn
  };
  ws[ts.ᐃⵠⲆΔⵠ] = {
    name: "Amethyst helmet",
    Δᐃ: rs.ⲆᐃⲆⲆᐃᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: kr
  };
  ws[ts.ᐃᐃⵠⵠᐃ] = {
    name: "Super hammer",
    Δᐃ: rs.ⵠⲆⲆⲆᐃᐃⵠ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: 1
  };
  const ig = dl;
  const tg = Fo;
  ws[ts.ⲆⲆΔΔΔ] = {
    name: "Bridge",
    Δᐃ: rs.ⵠᐃᐃⵠⲆⵠⵠ,
    ΔΔΔⲆ: 1,
    ᐃⵠΔΔ: 1
  };
  const ng = lh;
  const og = $r;
  ws[ts.ᐃΔᐃᐃᐃ] = {
    name: "Wood Tower",
    Δᐃ: rs.ΔΔᐃⵠⵠⵠᐃ,
    ΔΔΔⲆ: y,
    ᐃⵠΔΔ: Zk
  };
  ws[ts.ⵠⵠⲆΔⲆ] = {
    name: "Bottle full",
    Δᐃ: rs.ⲆⵠⲆⲆΔⲆᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ᐃᐃⵠΔⵠ] = {
    name: "Bottle empty",
    Δᐃ: rs.ΔⵠⵠⵠⵠᐃⲆ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: Xa
  };
  const rg = M;
  ws[ts.ΔⲆᐃΔΔ] = {
    name: "Stone shovel",
    Δᐃ: rs.ⲆᐃⲆⲆΔΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔᐃΔⲆⵠ] = {
    name: "Watering can",
    Δᐃ: rs.ⵠⵠⲆⲆⲆΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Go
  };
  ws[ts.ΔᐃΔⲆⲆ] = {
    name: "Wheat",
    Δᐃ: rs.ⵠᐃΔᐃᐃΔᐃ,
    ΔΔΔⲆ: Yl,
    ᐃⵠΔΔ: 0
  };
  const ag = de;
  ws[ts.ᐃⵠΔᐃΔ] = {
    name: "Cookie",
    Δᐃ: rs.ⵠΔΔΔᐃΔᐃ,
    ΔΔΔⲆ: Yl,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠᐃΔⵠΔ] = {
    name: "Windmill",
    Δᐃ: rs.ΔᐃⵠⲆⲆᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const sg = Tl;
  ws[ts.ᐃⵠⲆⲆⲆ] = {
    name: "Super diving suit",
    Δᐃ: rs.ⵠΔⲆΔΔΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: kr
  };
  ws[ts.ᐃⲆⲆΔⲆ] = {
    name: "Diving mask",
    Δᐃ: rs.ᐃᐃⲆⲆΔⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const hg = Xk;
  const lg = u;
  const gg = wl;
  const ug = el;
  ws[ts.ⵠⲆⲆⲆᐃ] = {
    name: "Watering can full",
    Δᐃ: rs.ᐃΔᐃⵠⲆᐃⵠ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: 0
  };
  const bg = Fh;
  ws[ts.ᐃⲆⲆⵠΔ] = {
    name: "Cake",
    Δᐃ: rs.ⵠⵠΔᐃⵠⲆⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ho
  };
  const vg = ck;
  const dg = Sq;
  ws[ts.ᐃⵠⵠΔⵠ] = {
    name: "Foodfish cooked",
    Δᐃ: rs.ΔⵠⵠᐃᐃⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: fs
  };
  ws[ts.ⲆⵠΔᐃΔ] = {
    name: "Plot",
    Δᐃ: rs.ᐃⲆⲆⵠᐃΔⵠ,
    ΔΔΔⲆ: y,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⲆⲆⲆⵠⲆ] = {
    name: "Bread",
    Δᐃ: rs.ᐃⲆΔⲆᐃⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const cg = gl;
  const mg = Co;
  ws[ts.ᐃΔⵠⵠⵠⵠΔ] = {
    name: "Bottle full (with ice)",
    Δᐃ: rs.ⵠⲆΔⵠⵠⵠⵠΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Zn
  };
  ws[ts.ⵠⵠⵠⵠΔⵠⲆ] = {
    name: "Bottle full (with well)",
    Δᐃ: rs.ⵠⲆⵠⵠⲆΔⵠΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔⵠⲆᐃⵠ] = {
    name: "Gold shovel",
    Δᐃ: rs.ᐃⲆⲆⵠᐃᐃΔ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔⵠⲆⵠⵠ] = {
    name: "Diamond shovel",
    Δᐃ: rs.ⵠⵠΔⲆⵠⵠΔ,
    ΔΔΔⲆ: gj,
    ᐃⵠΔΔ: Dj
  };
  const pg = _q;
  ws[ts.ⲆΔⵠᐃⲆ] = {
    name: "Amethyst shovel",
    Δᐃ: rs.ᐃⲆΔⲆⵠᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃⲆΔⲆΔ] = {
    name: "Spanner",
    Δᐃ: rs.ⵠⲆᐃⵠⲆⲆᐃ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: Zn
  };
  const Cg = Ar;
  ws[ts.ⵠⲆΔᐃΔ] = {
    name: "Machete",
    Δᐃ: rs.ⵠᐃᐃΔΔΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: y
  };
  const Tg = Hq;
  ws[ts.ΔⵠⵠΔⵠ] = {
    name: "Bread oven",
    Δᐃ: rs.ᐃⵠⵠΔⵠᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Zn
  };
  const fg = tj;
  ws[ts.Ⲇⵠᐃᐃⵠ] = {
    name: "Sandwich",
    Δᐃ: rs.ⲆⲆⵠᐃΔᐃⲆ,
    ΔΔΔⲆ: ks,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠⵠᐃᐃⲆ] = {
    name: "Dragon helmet",
    Δᐃ: rs.ᐃⲆᐃⲆⲆⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const zg = bo;
  const yg = I;
  const wg = k;
  ws[ts.ⲆᐃΔⵠⲆ] = {
    name: "Dragon helmet",
    Δᐃ: rs.ΔᐃⲆΔⵠΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: fs
  };
  const Pg = yh;
  const Ag = xl;
  const kg = Xj;
  const xg = pi;
  ws[ts.ΔΔⵠᐃᐃ] = {
    name: "Witch",
    Δᐃ: rs.ᐃᐃⲆⲆᐃᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ΔᐃⲆⵠⵠ] = {
    name: "Nimbus",
    Δᐃ: rs.ᐃᐃⲆⵠΔⵠⲆ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: ks
  };
  ws[ts.ΔⲆᐃᐃⲆ] = {
    name: "Wand1",
    Δᐃ: rs.ΔΔᐃⵠⲆΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: dh
  };
  ws[ts.ᐃΔᐃⵠᐃ] = {
    name: "Wand2",
    Δᐃ: rs.ⵠⵠⵠΔⵠΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: fs
  };
  ws[ts.ᐃⵠⵠⲆᐃ] = {
    name: "Dragon sword",
    Δᐃ: rs.ⲆⵠᐃᐃⲆΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ka
  };
  ws[ts.ΔⵠⲆⵠᐃ] = {
    name: "Dragon sword",
    Δᐃ: rs.ⵠΔᐃᐃᐃⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ka
  };
  ws[ts.ΔⵠᐃⲆⲆ] = {
    name: "Wood shield",
    Δᐃ: rs.ΔᐃⵠᐃΔᐃΔ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: vg
  };
  ws[ts.ⵠⲆᐃⲆⵠ] = {
    name: "Stone shield",
    Δᐃ: rs.ⲆᐃⵠⲆⵠⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Dj
  };
  const Jg = Fj;
  const Mg = zj;
  const Bg = $h;
  ws[ts.ΔᐃᐃΔᐃ] = {
    name: "Gold shield",
    Δᐃ: rs.ⵠⲆⲆΔⵠᐃΔ,
    ΔΔΔⲆ: vl,
    ᐃⵠΔΔ: Zn
  };
  const Dg = Gl;
  const Eg = jo;
  const Ig = Rk;
  const Sg = za;
  const Qg = vi;
  ws[ts.ΔⵠΔⵠⲆ] = {
    name: "Diamond shield",
    Δᐃ: rs.ᐃΔΔᐃᐃΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: y
  };
  const _g = Ui;
  ws[ts.ᐃᐃⵠᐃΔ] = {
    name: "Amethyst shield",
    Δᐃ: rs.ⵠᐃΔⵠΔΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Fg = wg;
  ws[ts.ⵠᐃᐃᐃΔ] = {
    name: "Reidite shield",
    Δᐃ: rs.ⲆⲆⵠⲆᐃⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠΔⵠᐃΔ] = {
    name: "Wood axe",
    Δᐃ: rs.ⲆⵠⵠᐃⵠᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Rg = Nn;
  ws[ts.ᐃΔᐃᐃⲆ] = {
    name: "Stone axe",
    Δᐃ: rs.ⲆⵠΔⲆΔΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.Δᐃⵠⵠᐃ] = {
    name: "Gold axe",
    Δᐃ: rs.ᐃΔΔⵠᐃⲆᐃ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: $r
  };
  const jg = vl;
  ws[ts.ᐃΔⵠΔⲆ] = {
    name: "Diamond axe",
    Δᐃ: rs.ΔᐃⲆΔⲆᐃΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔⲆⵠᐃᐃ] = {
    name: "Amethyst axe",
    Δᐃ: rs.ⲆΔⵠⲆΔΔⲆ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠᐃΔⲆⵠ] = {
    name: "Reidite axe",
    Δᐃ: rs.ⵠΔΔⵠⲆⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Gg = M;
  const Lg = lg;
  ws[ts.ΔⵠΔᐃᐃ] = {
    name: "Wood bow",
    Δᐃ: rs.ⲆⲆΔⵠⲆᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Wg = E;
  ws[ts.ΔⲆⵠᐃⲆ] = {
    name: "Stone bow",
    Δᐃ: rs.ⲆᐃⲆⵠⵠᐃⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: $r
  };
  ws[ts.ⲆΔᐃⲆⵠ] = {
    name: "Gold bow",
    Δᐃ: rs.ⲆᐃᐃᐃᐃᐃⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: $q
  };
  const Og = kg;
  const Ng = or;
  ws[ts.ΔᐃⵠⵠΔ] = {
    name: "Diamond bow",
    Δᐃ: rs.ΔⲆⵠΔΔΔⲆ,
    ΔΔΔⲆ: gj,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⲆᐃᐃⲆΔ] = {
    name: "Amethyst bow",
    Δᐃ: rs.ⵠⵠⵠⲆᐃⲆⵠ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: El
  };
  const qg = Nh;
  ws[ts.ΔⲆᐃⵠⲆ] = {
    name: "Reidite bow",
    Δᐃ: rs.ⵠᐃⲆⵠΔⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: hj
  };
  const Hg = sk;
  ws[ts.ⲆⲆᐃᐃⲆ] = {
    name: "Dragon bow",
    Δᐃ: rs.ⲆΔⵠⲆᐃΔΔ,
    ΔΔΔⲆ: Yl,
    ᐃⵠΔΔ: ka
  };
  ws[ts.ⲆⲆΔⵠⲆ] = {
    name: "Crown of life",
    Δᐃ: rs.ΔⲆⲆⵠⲆΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ho
  };
  ws[ts.ΔⲆⵠⵠⲆ] = {
    name: "Gem of life",
    Δᐃ: rs.ᐃⵠΔⲆⲆΔΔ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: 0
  };
  const Ug = Ek;
  const Yg = oq;
  const Kg = mi;
  const Vg = il;
  ws[ts.ΔΔⵠΔⵠ] = {
    name: "Orb of the dragon",
    Δᐃ: rs.ᐃⲆⲆⵠᐃΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Xa
  };
  ws[ts.Δⵠⵠⵠᐃ] = {
    name: "Orb of the dragon",
    Δᐃ: rs.ΔᐃᐃΔⵠⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠᐃⵠⵠⵠ] = {
    name: "Cube of the dragon",
    Δᐃ: rs.ᐃᐃⵠⲆⵠᐃΔ,
    ΔΔΔⲆ: jg,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ΔΔⵠⲆⲆ] = {
    name: "Cube of the dragon",
    Δᐃ: rs.ᐃⵠᐃΔⲆΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: jg
  };
  const Xg = Jh;
  ws[ts.ΔⲆⵠΔⲆ] = {
    name: "Crown of luck",
    Δᐃ: rs.ⲆⲆⲆᐃⵠΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ΔⵠⲆΔⵠ] = {
    name: "Gem of luck",
    Δᐃ: rs.ⵠⲆⵠᐃΔΔⵠ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠⲆᐃⵠⵠ] = {
    name: "Crown of the angel",
    Δᐃ: rs.ⵠᐃⵠⵠⵠΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: fs
  };
  const Zg = Qo;
  const $g = Fj;
  ws[ts.ⲆⵠⲆᐃⲆ] = {
    name: "Gem of the angel",
    Δᐃ: rs.ΔⵠⲆᐃⲆⵠΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Xa
  };
  ws[ts.ΔⵠᐃⵠΔ] = {
    name: "Dragon heart",
    Δᐃ: rs.ΔᐃⵠᐃⵠⲆᐃ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: gj
  };
  const Es = lj;
  const Fs = Un;
  ws[ts.ΔⵠⲆⲆⲆ] = {
    name: "Lava heart",
    Δᐃ: rs.ΔΔⵠⲆΔΔⵠ,
    ΔΔΔⲆ: vl,
    ᐃⵠΔΔ: 0
  };
  ws[ts.Ⲇᐃⵠᐃᐃ] = {
    name: "Hood",
    Δᐃ: rs.ᐃᐃᐃᐃΔΔⵠ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔΔⲆⵠⲆ] = {
    name: "Peasant",
    Δᐃ: rs.ⲆΔᐃⵠΔΔᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠΔΔⵠⵠ] = {
    name: "Winter peasant",
    Δᐃ: rs.ᐃⵠᐃⲆⵠᐃⲆ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: 0
  };
  const Gs = Gj;
  ws[ts.ⵠⲆᐃⵠⲆ] = {
    name: "Winter hood",
    Δᐃ: rs.ΔⵠᐃⵠⵠⲆⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Xa
  };
  const Hs = g;
  ws[ts.ⵠᐃⲆΔᐃ] = {
    name: "Bucket full",
    Δᐃ: rs.ⵠⵠΔⵠᐃᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Yl
  };
  ws[ts.ᐃᐃⵠΔᐃ] = {
    name: "Bucket empty",
    Δᐃ: rs.ᐃⵠᐃΔᐃΔⵠ,
    ΔΔΔⲆ: jg,
    ᐃⵠΔΔ: vg
  };
  ws[ts.ⲆⵠⲆⵠᐃ] = {
    name: "Well",
    Δᐃ: rs.ⲆᐃⵠᐃΔⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: og
  };
  const Is = wg;
  ws[ts.ⲆⵠⲆΔⵠ] = {
    name: "Sign",
    Δᐃ: rs.ᐃⲆⲆᐃᐃⲆⲆ,
    ΔΔΔⲆ: Yl,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔΔΔⵠΔ] = {
    name: "Pumpkin Seed",
    Δᐃ: rs.ⵠⲆᐃⵠⵠΔⵠ,
    ΔΔΔⲆ: ho,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠⵠⲆΔⵠ] = {
    name: "Garlic Seed",
    Δᐃ: rs.ᐃᐃⲆᐃⵠΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Bs
  };
  const Ks = j;
  const Ls = dj;
  ws[ts.ΔΔΔᐃⲆ] = {
    name: "Thorbushes Seed",
    Δᐃ: rs.ⵠᐃΔᐃⲆⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Go
  };
  ws[ts.ⵠΔᐃΔᐃ] = {
    name: "Roof",
    Δᐃ: rs.ⲆⵠⵠⲆΔⵠᐃ,
    ΔΔΔⲆ: Dj,
    ᐃⵠΔΔ: y
  };
  const Ms = yh;
  ws[ts.ⵠΔᐃΔⲆ] = {
    name: "Crab Crown",
    Δᐃ: rs.ΔΔⲆΔⲆⲆᐃ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: kr
  };
  ws[ts.ᐃΔⲆⵠⲆ] = {
    name: "Carrot Seed",
    Δᐃ: rs.ΔΔⵠⵠⵠⲆᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const Ns = hs;
  ws[ts.ᐃᐃᐃⲆⲆ] = {
    name: "Tomato Seed",
    Δᐃ: rs.ⵠᐃⵠⲆⲆΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const Os = Nk;
  ws[ts.ⵠᐃⲆⵠⵠ] = {
    name: "Watermelon Seed",
    Δᐃ: rs.ΔΔⲆΔⵠⵠⲆ,
    ΔΔΔⲆ: gj,
    ᐃⵠΔΔ: Yl
  };
  const Ps = vs;
  const Qs = oa;
  ws[ts.ⵠⵠᐃⲆᐃ] = {
    name: "Aloe Vera Seed",
    Δᐃ: rs.ⵠΔΔᐃⵠⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⵠᐃᐃΔⵠ] = {
    name: "Cap",
    Δᐃ: rs.ΔⵠᐃΔΔⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: ck
  };
  ws[ts.ΔΔᐃⲆⲆ] = {
    name: "Turban",
    Δᐃ: rs.ⵠⵠⲆⲆⲆⲆⵠ,
    ΔΔΔⲆ: gj,
    ᐃⵠΔΔ: bq
  };
  ws[ts.ΔΔΔᐃᐃ] = {
    name: "Pilot Helmet",
    Δᐃ: rs.ⲆΔᐃⵠⲆⲆᐃ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃΔⵠΔⵠ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ΔΔⵠᐃΔΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: dh
  };
  ws[ts.ⲆᐃΔᐃⲆ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ⵠⵠⵠΔⵠΔᐃ,
    ΔΔΔⲆ: hk,
    ᐃⵠΔΔ: bq
  };
  const Rs = wa;
  ws[ts.ⵠΔⲆⵠΔ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ⵠⵠΔⲆΔΔᐃ,
    ΔΔΔⲆ: ks,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⲆⲆⵠΔⵠ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ᐃⵠᐃⵠᐃΔΔ,
    ΔΔΔⲆ: Bs,
    ᐃⵠΔΔ: or
  };
  ws[ts.ⵠⵠⵠⵠⲆ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ΔⲆⵠⲆⵠᐃΔ,
    ΔΔΔⲆ: Go,
    ᐃⵠΔΔ: Ng
  };
  ws[ts.ᐃᐃᐃΔᐃ] = {
    name: "Emerald Machine",
    Δᐃ: rs.ᐃᐃΔⲆᐃΔⲆ,
    ΔΔΔⲆ: ka,
    ᐃⵠΔΔ: 1
  };
  const Ss = kl;
  ws[ts.ⵠᐃⵠⲆΔ] = {
    name: "Pitchfork",
    Δᐃ: rs.ⵠΔⲆΔⵠᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ᐃΔᐃᐃⵠ] = {
    name: "Wood Door Spike",
    Δᐃ: rs.ⵠᐃⲆⵠᐃᐃΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Dj
  };
  ws[ts.ⲆΔᐃᐃΔ] = {
    name: "Stone Door Spike",
    Δᐃ: rs.ΔᐃⵠᐃΔⲆⵠ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: ck
  };
  ws[ts.ⲆΔᐃⲆⲆ] = {
    name: "Gold Door Spike",
    Δᐃ: rs.Δⵠⵠᐃⵠⵠᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.Δᐃⵠᐃᐃ] = {
    name: "Diamond Door Spike",
    Δᐃ: rs.ΔΔᐃᐃΔⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: bh
  };
  const Ts = yl;
  ws[ts.ᐃⲆΔᐃⵠ] = {
    name: "Amethyst Door Spike",
    Δᐃ: rs.ⵠᐃᐃⲆΔᐃⵠ,
    ΔΔΔⲆ: Xa,
    ᐃⵠΔΔ: Ng
  };
  const Us = ko;
  ws[ts.ⵠᐃⵠⲆⲆ] = {
    name: "Diamond Fire Protection ",
    Δᐃ: rs.ⵠΔᐃⲆⲆⲆⵠ,
    ΔΔΔⲆ: dh,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔΔᐃⲆᐃ] = {
    name: "Amethyst Fire Protection ",
    Δᐃ: rs.ᐃΔΔΔΔΔΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ⵠⲆⵠⵠⵠ] = {
    name: "Amethyst Fire Protection ",
    Δᐃ: rs.ΔΔΔᐃⲆΔⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const Vs = dn;
  ws[ts.ⲆΔⵠⵠⵠ] = {
    name: "Reidite Sword",
    Δᐃ: rs.ᐃⲆᐃⲆⵠⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Th
  };
  ws[ts.ᐃᐃⲆᐃⲆ] = {
    name: "Reidite Spear",
    Δᐃ: rs.ⵠⵠⲆⲆᐃᐃᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Zk
  };
  const Ws = og;
  const Xs = Hs;
  const Ys = Yq;
  ws[ts.ⲆΔⲆΔᐃ] = {
    name: "Reidite Helmet",
    Δᐃ: rs.ᐃⵠΔΔΔⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: El
  };
  const Zs = Aq;
  const $s = _i;
  const _s = He;
  ws[ts.ⲆᐃⵠⵠΔ] = {
    name: "Reidite Door Spike",
    Δᐃ: rs.Ⲇᐃᐃᐃⵠᐃⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const at = E;
  const bt = kr;
  ws[ts.ΔᐃΔⵠⵠ] = {
    name: "Reidite Door",
    Δᐃ: rs.ⲆᐃΔⲆᐃⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 1
  };
  const ct = Nk;
  ws[ts.ΔᐃⵠⲆⲆ] = {
    name: "Reidite Spike",
    Δᐃ: rs.ⵠⵠⵠⲆΔΔᐃ,
    ΔΔΔⲆ: gj,
    ᐃⵠΔΔ: Th
  };
  ws[ts.ΔΔΔⲆⵠ] = {
    name: "Reidite Wall",
    Δᐃ: rs.ⲆᐃᐃΔᐃⲆⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: Dj
  };
  ws[ts.ΔΔᐃⵠΔ] = {
    name: "Reidite pick",
    Δᐃ: rs.ᐃⵠᐃⵠᐃⲆᐃ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: bh
  };
  ws[ts.ΔⵠⲆⲆⵠ] = {
    name: "Boat",
    Δᐃ: rs.ΔΔⵠⵠΔⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: bq
  };
  const dt = Yl;
  ws[ts.ᐃΔⵠⵠⵠ] = {
    name: "Sled",
    Δᐃ: rs.ⵠⵠᐃᐃⲆΔⲆ,
    ΔΔΔⲆ: jg,
    ᐃⵠΔΔ: Zn
  };
  ws[ts.ⲆᐃⵠΔⲆ] = {
    name: "Saddle",
    Δᐃ: rs.ⲆⲆΔᐃⵠⲆⵠ,
    ΔΔΔⲆ: fs,
    ᐃⵠΔΔ: 1
  };
  ws[ts.ΔⵠᐃΔⵠ] = {
    name: "Mount Boar",
    Δᐃ: rs.ⵠᐃⲆⲆⵠⲆΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ᐃⲆᐃⲆⲆ] = {
    name: "Mount King Crab",
    Δᐃ: rs.ΔⵠⵠᐃⲆⵠⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ⲆⲆⲆᐃⲆ] = {
    name: "Mount Baby Dragon",
    Δᐃ: rs.ΔⵠⵠⲆⵠΔⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ΔᐃⵠΔⵠ] = {
    name: "Mount Baby Lava",
    Δᐃ: rs.ⵠⵠⵠⵠⲆⵠⲆ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: fs
  };
  ws[ts.ⵠⲆⵠΔⵠ] = {
    name: "Mount Hawk",
    Δᐃ: rs.ⵠⵠⲆᐃΔᐃᐃ,
    ΔΔΔⲆ: dt,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ᐃⲆΔⵠᐃ] = {
    name: "Plane",
    Δᐃ: rs.ⵠⵠᐃⲆⵠⲆⵠ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  const et = pj;
  ws[ts.ⲆⵠⵠᐃΔ] = {
    name: "Pitchfork 2",
    Δᐃ: rs.ΔᐃΔⲆΔⵠΔ,
    ΔΔΔⲆ: 0,
    ᐃⵠΔΔ: 0
  };
  ws[ts.ᐃⲆᐃⵠᐃ] = {
    name: "Baby Mammoth",
    Δᐃ: rs.ⲆⵠΔᐃⵠⲆⲆ,
    ΔΔΔⲆ: dh,
    ᐃⵠΔΔ: 0
  };
  var ft = Sn;
  const gt = Rj;
  var ht = [{
    r: [[ts.ᐃⲆᐃΔ, 25], [ts.ⵠΔΔⲆ, 5]],
    w: 0,
    f: 0,
    ᐃⵠᐃ: vl,
    e: 0,
    id: ss.ᐃⲆΔⲆⵠ,
    ΔⲆΔΔ: ts.ᐃⲆΔⲆⵠ,
    time: 1 / O,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆΔⲆⵠ, 1], [ts.ᐃⲆᐃΔ, 35], [ts.ⵠΔΔⲆ, Ks]],
    w: 0,
    f: vl,
    ᐃⵠᐃ: 0,
    e: dh,
    id: ss.ΔⲆΔⵠΔ,
    ΔⲆΔΔ: ts.ΔⲆΔⵠΔ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 150], [ts.ⵠΔΔⲆ, 50], [ts.ΔᐃⲆⲆ, 15]],
    w: Th,
    f: vl,
    ᐃⵠᐃ: Xa,
    e: Bs,
    id: ss.ⲆΔΔΔΔ,
    ΔⲆΔΔ: ts.ⲆΔΔΔΔ,
    time: vg / Ns,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 20], [ts.ⵠΔΔⲆ, Ys]],
    w: 0,
    f: 0,
    ᐃⵠᐃ: fs,
    e: gj,
    id: ss.ΔᐃⵠΔᐃ,
    ΔⲆΔΔ: ts.ΔᐃⵠΔᐃ,
    time: hj / es,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, jl]],
    w: 0,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆⵠΔⵠΔ,
    ΔⲆΔΔ: ts.ⲆⵠΔⵠΔ,
    time: Dj / 3,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⲆⵠΔⵠΔ, 1], [ts.ᐃⲆᐃΔ, 50], [ts.ⵠΔΔⲆ, 15]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: Go,
    e: 0,
    id: ss.ⵠᐃΔΔᐃ,
    ΔⲆΔΔ: ts.ⵠᐃΔΔᐃ,
    time: Dj / Zj,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 40], [ts.ΔᐃⲆⲆ, 20], [ts.ⵠΔΔⲆ, 30], [ts.ⵠᐃΔΔᐃ, bq]],
    w: 1,
    f: gj,
    ᐃⵠᐃ: 0,
    e: ks,
    id: ss.ᐃⵠⵠΔΔ,
    ΔⲆΔΔ: ts.ᐃⵠⵠΔΔ,
    time: 1 / g,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 20], [ts.ΔᐃⲆⲆ, 50], [ts.ⵠΔΔⲆ, 80], [ts.ᐃⵠⵠΔΔ, or]],
    w: 1,
    f: ka,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃᐃΔΔⵠ,
    ΔⲆΔΔ: ts.ᐃᐃΔΔⵠ,
    time: $q / Al,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 40], [ts.ΔᐃⲆⲆ, 60], [ts.ⲆΔⲆᐃ, 30], [ts.ᐃᐃΔΔⵠ, 1]],
    w: 1,
    f: jg,
    ᐃⵠᐃ: dt,
    e: Bs,
    id: ss.ΔᐃΔᐃΔ,
    ΔⲆΔΔ: ts.ΔᐃΔᐃΔ,
    time: kr / 60,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 30], [ts.ᐃⲆΔⵠ, 40], [ts.ⲆⲆⵠΔ, 30], [ts.ΔᐃΔᐃΔ, 1]],
    w: 1,
    f: fs,
    ᐃⵠᐃ: fs,
    e: jg,
    id: ss.ΔΔᐃⵠΔ,
    ΔⲆΔΔ: ts.ΔΔᐃⵠΔ,
    time: y / 90,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 90], [ts.ⵠΔΔⲆ, 50]],
    w: Ws,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃⵠⵠᐃⵠ,
    ΔⲆΔΔ: ts.ᐃⵠⵠᐃⵠ,
    time: 1 / Hh,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 160], [ts.ⵠΔΔⲆ, 120], [ts.ΔᐃⲆⲆ, 80], [ts.ᐃⵠⵠᐃⵠ, 1]],
    w: $q,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆⵠΔΔⲆ,
    ΔⲆΔΔ: ts.ⲆⵠΔΔⲆ,
    time: Ws / 15,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 80], [ts.ⵠΔΔⲆ, 200], [ts.ΔᐃⲆⲆ, 150], [ts.ⲆⵠΔΔⲆ, $q]],
    w: 1,
    f: fs,
    ᐃⵠᐃ: 0,
    e: Yl,
    id: ss.ⲆΔᐃⵠⵠ,
    ΔⲆΔΔ: ts.ⲆΔᐃⵠⵠ,
    time: 1 / Xe,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 160], [ts.ⲆΔⲆᐃ, 60], [ts.ΔᐃⲆⲆ, 250], [ts.ⲆΔᐃⵠⵠ, 1]],
    w: 1,
    f: Yl,
    ᐃⵠᐃ: 0,
    e: Xa,
    id: ss.ᐃᐃΔⵠΔ,
    ΔⲆΔΔ: ts.ᐃᐃΔⵠΔ,
    time: 0.016666666666666666,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 160], [ts.ⲆⲆⵠΔ, 60], [ts.ᐃⲆΔⵠ, 250], [ts.ᐃᐃΔⵠΔ, 1]],
    w: 1,
    f: hk,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃΔᐃⲆᐃ,
    ΔⲆΔΔ: ts.ᐃΔᐃⲆᐃ,
    time: bh / 90,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃΔᐃⲆᐃ, hj], [ts.ⵠⵠⲆΔⲆ, Zn], [ts.ⵠⵠⵠΔⵠ, bh], [ts.ⲆⵠⲆⲆⵠ, Hh], [ts.ⲆΔⲆᐃ, 20]],
    w: og,
    f: Th,
    ᐃⵠᐃ: 0,
    e: Xa,
    id: ss.ᐃᐃⵠⵠᐃ,
    ΔⲆΔΔ: ts.ᐃᐃⵠⵠᐃ,
    time: vg / 120,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 30], [ts.ⵠΔΔⲆ, 15]],
    w: 1,
    f: vl,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ΔⲆᐃΔΔ,
    ΔⲆΔΔ: ts.ΔⲆᐃΔΔ,
    time: 0.2,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ΔⲆᐃΔΔ, 1], [ts.ΔᐃⲆⲆ, 20], [ts.ⵠΔΔⲆ, 30], [ts.ᐃⲆᐃΔ, 40]],
    w: Zk,
    f: 0,
    ᐃⵠᐃ: Xa,
    e: 0,
    id: ss.ΔⵠⲆᐃⵠ,
    ΔⲆΔΔ: ts.ΔⵠⲆᐃⵠ,
    time: Zn / 10,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ΔⵠⲆᐃⵠ, or], [ts.ᐃⲆΔⵠ, tl], [ts.ΔᐃⲆⲆ, 50], [ts.ⵠΔΔⲆ, 80]],
    w: 1,
    f: Xa,
    ᐃⵠᐃ: jg,
    e: 0,
    id: ss.ΔⵠⲆⵠⵠ,
    ΔⲆΔΔ: ts.ΔⵠⲆⵠⵠ,
    time: vg / 20,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ΔⵠⲆⵠⵠ, 1], [ts.ΔᐃⲆⲆ, 60], [ts.ⲆΔⲆᐃ, 30], [ts.ᐃⲆΔⵠ, 40]],
    w: bt,
    f: ks,
    ᐃⵠᐃ: jg,
    e: fs,
    id: ss.ⲆΔⵠᐃⲆ,
    ΔⲆΔΔ: ts.ⲆΔⵠᐃⲆ,
    time: 1 / 40,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 50]],
    w: ck,
    f: Xa,
    ᐃⵠᐃ: ho,
    e: Xa,
    id: ss.ΔᐃΔⲆⵠ,
    ΔⲆΔΔ: ts.ΔᐃΔⲆⵠ,
    time: kr / Ba,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ΔᐃΔⲆⵠ, 1]],
    w: 0,
    f: gj,
    ᐃⵠᐃ: uq,
    e: 0,
    id: ss.ⵠⲆⲆⲆᐃ,
    ΔⲆΔΔ: ts.ⵠⲆⲆⲆᐃ,
    time: 0.2,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, Fg], [ts.ⵠΔΔⲆ, 50]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: jg,
    e: 0,
    id: ss.ⵠᐃⵠⲆΔ,
    ΔⲆΔΔ: ts.ⵠᐃⵠⲆΔ,
    time: 1 / Qg,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⵠᐃⵠⲆΔ, 1], [ts.ⵠⲆΔΔΔᐃΔ, 1]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: vl,
    id: ss.ⲆⵠⵠᐃΔ,
    ΔⲆΔΔ: ts.ⲆⵠⵠᐃΔ,
    time: or / 60,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⵠᐃΔⵠⲆ, 4], [ts.ᐃⵠΔᐃⵠ, T], [ts.ⲆᐃⲆⵠⲆ, Dl]],
    w: 1,
    f: hk,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃᐃⵠⵠⲆ,
    ΔⲆΔΔ: ts.ᐃᐃⵠⵠⲆ,
    time: 1 / Sh,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 40]],
    w: ka,
    f: Yl,
    ᐃⵠᐃ: ks,
    e: fs,
    id: ss.ⲆⲆᐃᐃⵠ,
    ΔⲆΔΔ: ts.ⲆⲆᐃᐃⵠ,
    time: bq / Gj,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆⲆᐃᐃⵠ, Dj], [ts.ᐃⲆᐃΔ, 60], [ts.ⵠΔΔⲆ, 10]],
    w: y,
    f: 0,
    ᐃⵠᐃ: ka,
    e: 0,
    id: ss.ⲆΔᐃⵠᐃ,
    ΔⲆΔΔ: ts.ⲆΔᐃⵠᐃ,
    time: og / ek,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 80], [ts.ΔᐃⲆⲆ, 30], [ts.ⵠΔΔⲆ, 30], [ts.ⲆΔᐃⵠᐃ, 1]],
    w: Ng,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ΔⲆⵠΔᐃ,
    ΔⲆΔΔ: ts.ΔⲆⵠΔᐃ,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ,
    time: 0.05
  }, {
    r: [[ts.ᐃⲆᐃΔ, 200], [ts.ᐃⲆΔⵠ, 40], [ts.ΔᐃⲆⲆ, 60], [ts.ΔⲆⵠΔᐃ, Ng]],
    w: 1,
    f: hk,
    ᐃⵠᐃ: 0,
    e: jg,
    id: ss.ⲆΔΔΔᐃ,
    ΔⲆΔΔ: ts.ⲆΔΔΔᐃ,
    time: 1 / 30,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 40], [ts.ᐃⲆΔⵠ, 80], [ts.ΔᐃⲆⲆ, 90], [ts.ⲆΔΔΔᐃ, $r]],
    w: uq,
    f: dh,
    ᐃⵠᐃ: 0,
    e: hk,
    id: ss.ΔⲆⲆΔⵠ,
    ΔⲆΔΔ: ts.ΔⲆⲆΔⵠ,
    time: 0.016666666666666666,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆⲆⵠΔ, 40], [ts.ⲆΔⲆᐃ, 80], [ts.ᐃⲆΔⵠ, 90], [ts.ΔⲆⲆΔⵠ, 1]],
    w: 1,
    f: gj,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃᐃⲆᐃⲆ,
    ΔⲆΔΔ: ts.ᐃᐃⲆᐃⲆ,
    time: Ng / 90,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⵠΔⲆᐃⵠ, Ph], [ts.ΔΔⵠΔⵠ, 1], [ts.ⲆΔⲆᐃ, Fg], [ts.ΔⵠᐃⵠΔ, kl]],
    w: vg,
    f: 1,
    ᐃⵠᐃ: kr,
    e: Yl,
    id: ss.ᐃⵠⲆᐃⲆ,
    ΔⲆΔΔ: ts.ᐃⵠⲆᐃⲆ,
    time: 0.008333333333333333,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⵠⲆᐃⲆ, Th], [ts.Δⵠⵠⵠᐃ, 1], [ts.ⲆⲆⵠΔ, Xl], [ts.ΔⵠⲆⲆⲆ, nq]],
    w: 1,
    f: ck,
    ᐃⵠᐃ: 1,
    e: ka,
    id: ss.ΔⵠⲆΔᐃ,
    ΔⲆΔΔ: ts.ΔⵠⲆΔᐃ,
    time: 0.005,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆⲆᐃᐃⵠ, Ws], [ts.ᐃⲆⵠΔⵠ, 5], [ts.ᐃⵠΔᐃⵠ, 6]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠΔᐃⲆᐃ,
    ΔⲆΔΔ: ts.ⵠΔᐃⲆᐃ,
    time: 0.03333333333333333,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 30]],
    w: 0,
    f: 0,
    ᐃⵠᐃ: Bs,
    e: 0,
    id: ss.ⵠⵠⲆⲆⲆ,
    ΔⲆΔΔ: ts.ⵠⵠⲆⲆⲆ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 50], [ts.ⵠΔΔⲆ, 25], [ts.ⵠⵠⲆⲆⲆ, 1]],
    w: $q,
    f: 0,
    ᐃⵠᐃ: 0,
    e: jg,
    id: ss.ⲆⲆΔᐃⵠ,
    ΔⲆΔΔ: ts.ⲆⲆΔᐃⵠ,
    time: 1 / j,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 60], [ts.ΔᐃⲆⲆ, 40], [ts.ⵠΔΔⲆ, 50], [ts.ⲆⲆΔᐃⵠ, vg]],
    w: $r,
    f: 0,
    ᐃⵠᐃ: Bs,
    e: 0,
    id: ss.ⲆᐃΔⵠⵠ,
    ΔⲆΔΔ: ts.ⲆᐃΔⵠⵠ,
    time: 1 / ie,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 40], [ts.ΔᐃⲆⲆ, 60], [ts.ⵠΔΔⲆ, 80], [ts.ⲆᐃΔⵠⵠ, 1]],
    w: 1,
    f: ho,
    ᐃⵠᐃ: Yl,
    e: gj,
    id: ss.ΔᐃⵠΔⲆ,
    ΔⲆΔΔ: ts.ΔᐃⵠΔⲆ,
    time: 0.03333333333333333,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 60], [ts.ΔᐃⲆⲆ, qr], [ts.ⲆΔⲆᐃ, 40], [ts.ΔᐃⵠΔⲆ, 1]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: fs,
    id: ss.ⵠΔⲆⵠⲆ,
    ΔⲆΔΔ: ts.ⵠΔⲆⵠⲆ,
    time: ck / 60,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆΔⵠ, k], [ts.ⲆΔⲆᐃ, 80], [ts.ⲆⲆⵠΔ, 40], [ts.ⵠΔⲆⵠⲆ, Th]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: gj,
    e: 0,
    id: ss.ⲆΔⵠⵠⵠ,
    ΔⲆΔΔ: ts.ⲆΔⵠⵠⵠ,
    time: bt / 90,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆⲆⵠᐃᐃ, Jh]],
    w: 0,
    f: $r,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠΔⵠⲆΔ,
    ΔⲆΔΔ: ts.ⵠΔⵠⲆΔ,
    time: bq / Gs,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃΔΔⲆⵠ, 3]],
    w: 0,
    f: vg,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ΔᐃΔⲆⲆ,
    ΔⲆΔΔ: ts.ΔᐃΔⲆⲆ,
    time: 1 / O,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⵠᐃΔΔ, Nl]],
    w: Go,
    f: 1,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ΔΔΔⵠΔ,
    ΔⲆΔΔ: ts.ΔΔΔⵠΔ,
    time: Ws / Gj,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⵠⲆⲆᐃΔ, 8]],
    w: fs,
    f: 1,
    ᐃⵠᐃ: 0,
    e: Go,
    id: ss.ⵠⵠⲆΔⵠ,
    ΔⲆΔΔ: ts.ⵠⵠⲆΔⵠ,
    time: bh / wr,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⲆᐃᐃⵠⲆ, lj]],
    w: dt,
    f: 1,
    ᐃⵠᐃ: dt,
    e: 0,
    id: ss.ΔΔΔᐃⲆ,
    ΔⲆΔΔ: ts.ΔΔΔᐃⲆ,
    time: 0.2,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⲆⵠⲆΔ, Es]],
    w: 0,
    f: 1,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃΔⲆⵠⲆ,
    ΔⲆΔΔ: ts.ᐃΔⲆⵠⲆ,
    time: 1 / zq,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃΔⵠᐃⵠ, Wh]],
    w: 0,
    f: or,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃᐃᐃⲆⲆ,
    ΔⲆΔΔ: ts.ᐃᐃᐃⲆⲆ,
    time: 0.2,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⲆΔᐃΔᐃ, Wk]],
    w: Bs,
    f: 1,
    ᐃⵠᐃ: dt,
    e: 0,
    id: ss.ⵠᐃⲆⵠⵠ,
    ΔⲆΔΔ: ts.ⵠᐃⲆⵠⵠ,
    time: 1 / Gj,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃΔⵠⵠᐃ, gt]],
    w: 0,
    f: $r,
    ᐃⵠᐃ: Go,
    e: 0,
    id: ss.ⵠⵠᐃⲆᐃ,
    ΔⲆΔΔ: ts.ⵠⵠᐃⲆᐃ,
    time: 0.2,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⲆΔⲆᐃᐃ, uq]],
    w: dh,
    f: 1,
    ᐃⵠᐃ: ks,
    e: fs,
    id: ss.ⵠⵠⵠⵠᐃ,
    ΔⲆΔΔ: ts.ⵠⵠⵠⵠᐃ,
    time: 0.2,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⵠᐃⲆⲆⲆ, 1]],
    w: vl,
    f: 1,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃⵠⵠΔⵠ,
    ΔⲆΔΔ: ts.ᐃⵠⵠΔⵠ,
    time: 0.3333333333333333,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⲆⵠⵠⵠ, wn]],
    w: Xa,
    f: Zk,
    ᐃⵠᐃ: fs,
    e: 0,
    id: ss.ⲆⲆⲆⵠⲆ,
    ΔⲆΔΔ: ts.ⲆⲆⲆⵠⲆ,
    time: og / R,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⲆⵠⵠⵠ, Xg], [ts.ⲆⲆⵠᐃᐃ, 1]],
    w: 0,
    f: 1,
    ᐃⵠᐃ: Bs,
    e: ka,
    id: ss.ᐃⵠΔᐃΔ,
    ΔⲆΔΔ: ts.ᐃⵠΔᐃΔ,
    time: El / yr,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⲆⵠⵠⵠ, Lj], [ts.ⲆⲆⵠᐃᐃ, 2], [ts.ⲆⲆΔΔᐃ, Og]],
    w: 0,
    f: og,
    ᐃⵠᐃ: 0,
    e: ka,
    id: ss.ᐃⲆⲆⵠΔ,
    ΔⲆΔΔ: ts.ᐃⲆⲆⵠΔ,
    time: bt / hg,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⵠΔᐃⵠ, Ls]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ⵠⲆΔⲆⲆ,
    ΔⲆΔΔ: ts.ⵠⲆΔⲆⲆ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, Al]],
    w: 1,
    f: ka,
    ᐃⵠᐃ: 0,
    e: Bs,
    id: ss.ⵠⵠⵠⵠⵠ,
    ΔⲆΔΔ: ts.ⵠⵠⵠⵠⵠ,
    time: bt / 5,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⵠⵠⵠⵠⵠ, $q], [ts.ⵠΔΔⲆ, Bo]],
    w: 1,
    f: vl,
    ᐃⵠᐃ: Bs,
    e: jg,
    id: ss.ΔᐃᐃⲆᐃ,
    ΔⲆΔΔ: ts.ΔᐃᐃⲆᐃ,
    time: Ws / 5,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ΔᐃᐃⲆᐃ, Zk], [ts.ΔᐃⲆⲆ, Pq]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: vl,
    e: ks,
    id: ss.ⵠΔᐃⵠᐃ,
    ΔⲆΔΔ: ts.ⵠΔᐃⵠᐃ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⵠΔᐃⵠᐃ, 1], [ts.ᐃⲆΔⵠ, wh]],
    w: og,
    f: hk,
    ᐃⵠᐃ: ho,
    e: 0,
    id: ss.ᐃΔΔΔⲆ,
    ΔⲆΔΔ: ts.ᐃΔΔΔⲆ,
    time: bt / wr,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃΔΔΔⲆ, 1], [ts.ⲆΔⲆᐃ, 8]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆᐃΔΔΔ,
    ΔⲆΔΔ: ts.ⲆᐃΔΔΔ,
    time: Zk / Lj,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⲆᐃΔΔΔ, Zn], [ts.ⲆⲆⵠΔ, zq]],
    w: or,
    f: gj,
    ᐃⵠᐃ: jg,
    e: 0,
    id: ss.ΔΔΔⲆⵠ,
    ΔⲆΔΔ: ts.ΔΔΔⲆⵠ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 30]],
    w: Zn,
    f: jg,
    ᐃⵠᐃ: fs,
    e: vl,
    id: ss.ᐃⲆⵠᐃⲆ,
    ΔⲆΔΔ: ts.ᐃⲆⵠᐃⲆ,
    time: hj / 8,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃⲆⵠᐃⲆ, y], [ts.ⵠΔΔⲆ, 27]],
    w: bh,
    f: ka,
    ᐃⵠᐃ: dh,
    e: 0,
    id: ss.ᐃᐃᐃΔⵠ,
    ΔⲆΔΔ: ts.ᐃᐃᐃΔⵠ,
    time: 0.125,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃᐃᐃΔⵠ, Zn], [ts.ΔᐃⲆⲆ, 24]],
    w: Zn,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ᐃⲆΔᐃᐃ,
    ΔⲆΔΔ: ts.ᐃⲆΔᐃᐃ,
    time: 0.125,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃⲆΔᐃᐃ, Th], [ts.ᐃⲆΔⵠ, 21]],
    w: y,
    f: 0,
    ᐃⵠᐃ: ka,
    e: 0,
    id: ss.ΔΔΔⵠⵠ,
    ΔⲆΔΔ: ts.ΔΔΔⵠⵠ,
    time: 1 / 8,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ΔΔΔⵠⵠ, 1], [ts.ⲆΔⲆᐃ, 18]],
    w: Dj,
    f: Go,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠⵠΔΔΔ,
    ΔⲆΔΔ: ts.ⵠⵠΔΔΔ,
    time: Ng / ar,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⵠⵠΔΔΔ, hj], [ts.ⲆⲆⵠΔ, 15]],
    w: 1,
    f: Bs,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ΔᐃΔⵠⵠ,
    ΔⲆΔΔ: ts.ΔᐃΔⵠⵠ,
    time: 1 / 8,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⵠⵠⵠⵠⵠ, 1], [ts.ᐃⲆᐃΔ, 40], [ts.ⵠΔΔⲆ, 30]],
    w: 1,
    f: ka,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆΔΔᐃⲆ,
    ΔⲆΔΔ: ts.ⲆΔΔᐃⲆ,
    time: 1 / Xe,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ΔᐃᐃⲆᐃ, $q], [ts.ⵠΔΔⲆ, 70]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: dh,
    id: ss.ⵠᐃⲆᐃᐃ,
    ΔⲆΔΔ: ts.ⵠᐃⲆᐃᐃ,
    time: Zn / hs,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⵠΔᐃⵠᐃ, Th], [ts.ΔᐃⲆⲆ, 40], [ts.ⵠΔΔⲆ, 30]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃΔⵠᐃᐃ,
    ΔⲆΔΔ: ts.ᐃΔⵠᐃᐃ,
    time: or / da,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃΔΔΔⲆ, ck], [ts.ᐃⲆΔⵠ, 40], [ts.ⵠΔΔⲆ, 30]],
    w: 1,
    f: vl,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ⲆⵠⵠⵠΔ,
    ΔⲆΔΔ: ts.ⲆⵠⵠⵠΔ,
    time: Ng / 20,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⲆᐃΔΔΔ, hj], [ts.ⲆΔⲆᐃ, 40], [ts.ⵠΔΔⲆ, 30]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: dt,
    id: ss.ⲆᐃⲆᐃⲆ,
    ΔⲆΔΔ: ts.ⲆᐃⲆᐃⲆ,
    time: 1 / u,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ΔΔΔⲆⵠ, Zk], [ts.ⲆⲆⵠΔ, 40], [ts.ΔᐃⲆⲆ, 30]],
    w: og,
    f: 0,
    ᐃⵠᐃ: fs,
    e: 0,
    id: ss.ΔᐃⵠⲆⲆ,
    ΔⲆΔΔ: ts.ΔᐃⵠⲆⲆ,
    time: Ng / 20,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃⲆⵠᐃⲆ, 1], [ts.ᐃⲆᐃΔ, 80], [ts.ⵠΔΔⲆ, 60]],
    w: ck,
    f: fs,
    ᐃⵠᐃ: 0,
    e: hk,
    id: ss.ᐃΔᐃᐃⵠ,
    ΔⲆΔΔ: ts.ᐃΔᐃᐃⵠ,
    time: vg / 20,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃᐃᐃΔⵠ, 1], [ts.ⵠΔΔⲆ, 140]],
    w: bq,
    f: 0,
    ᐃⵠᐃ: vl,
    e: 0,
    id: ss.ⲆΔᐃᐃΔ,
    ΔⲆΔΔ: ts.ⲆΔᐃᐃΔ,
    time: 1 / Ph,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃⲆΔᐃᐃ, kr], [ts.ΔᐃⲆⲆ, 80], [ts.ⵠΔΔⲆ, 60]],
    w: Zn,
    f: 0,
    ᐃⵠᐃ: Xa,
    e: Xa,
    id: ss.ⲆΔᐃⲆⲆ,
    ΔⲆΔΔ: ts.ⲆΔᐃⲆⲆ,
    time: vg / ph,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ΔΔΔⵠⵠ, Zn], [ts.ᐃⲆΔⵠ, 80], [ts.ⵠΔΔⲆ, 60]],
    w: uq,
    f: ks,
    ᐃⵠᐃ: Bs,
    e: 0,
    id: ss.Δᐃⵠᐃᐃ,
    ΔⲆΔΔ: ts.Δᐃⵠᐃᐃ,
    time: $q / 20,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ⵠⵠΔΔΔ, 1], [ts.ⲆΔⲆᐃ, 80], [ts.ⵠΔΔⲆ, 60]],
    w: y,
    f: jg,
    ᐃⵠᐃ: hk,
    e: 0,
    id: ss.ᐃⲆΔᐃⵠ,
    ΔⲆΔΔ: ts.ᐃⲆΔᐃⵠ,
    time: Dj / Dh,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ΔᐃΔⵠⵠ, bt], [ts.ⲆⲆⵠΔ, 80], [ts.ΔᐃⲆⲆ, 60]],
    w: Th,
    f: hk,
    ᐃⵠᐃ: 0,
    e: dh,
    id: ss.ⲆᐃⵠⵠΔ,
    ΔⲆΔΔ: ts.ⲆᐃⵠⵠΔ,
    time: 1 / Aa,
    ⵠⲆⵠ: us.ᐃᐃⲆⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 25], [ts.ΔᐃⲆⲆ, 2]],
    w: El,
    f: ho,
    ᐃⵠᐃ: Xa,
    e: jg,
    id: ss.ⵠⲆⲆⲆΔ,
    ΔⲆΔΔ: ts.ⵠⲆⲆⲆΔ,
    time: or / Gj,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ⵠᐃΔⵠⲆ, og], [ts.ᐃⲆᐃⵠⵠ, 1], [ts.ᐃⵠΔᐃⵠ, 2]],
    w: 1,
    f: Go,
    ᐃⵠᐃ: Go,
    e: ks,
    id: ss.ⵠⲆⲆⵠⲆ,
    ΔⲆΔΔ: ts.ⵠⲆⲆⵠⲆ,
    time: bt / 5,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠᐃΔⵠⲆ, 5], [ts.ⵠⵠⵠⵠΔ, Fq], [ts.ⵠΔⲆᐃⵠ, Rh], [ts.ᐃⲆᐃⵠⵠ, 5]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: Bs,
    id: ss.ΔⲆⲆⲆⲆ,
    ΔⲆΔΔ: ts.ΔⲆⲆⲆⲆ,
    time: 0.03333333333333333,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃᐃⵠⵠⵠⲆΔ, Dj], [ts.ⲆᐃΔᐃΔ, xh], [ts.ⵠᐃΔᐃᐃ, 8], [ts.ⵠⵠⵠⵠΔ, ct], [ts.ᐃⵠΔᐃⵠ, 6]],
    w: bt,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ΔΔΔᐃᐃ,
    ΔⲆΔΔ: ts.ΔΔΔᐃᐃ,
    time: bh / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⲆᐃⵠⵠ, 1], [ts.ᐃⵠΔᐃⵠ, 2]],
    w: Ng,
    f: gj,
    ᐃⵠᐃ: fs,
    e: 0,
    id: ss.ⵠⲆⲆΔⵠ,
    ΔⲆΔΔ: ts.ⵠⲆⲆΔⵠ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠⲆⲆΔⵠ, Th], [ts.ⲆᐃⲆⵠⲆ, zq], [ts.ᐃⵠΔᐃⵠ, Ol]],
    w: 1,
    f: Yl,
    ᐃⵠᐃ: 0,
    e: ka,
    id: ss.ΔΔⵠⵠⲆ,
    ΔⲆΔΔ: ts.ΔΔⵠⵠⲆ,
    time: bt / 12,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ΔΔⵠⵠⲆ, 1], [ts.ᐃⵠⲆᐃⵠ, O], [ts.ⵠΔⲆᐃⵠ, 4]],
    w: Zn,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠΔⲆᐃⲆ,
    ΔⲆΔΔ: ts.ⵠΔⲆᐃⲆ,
    time: Zn / 30,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠΔⲆᐃⲆ, 1], [ts.ᐃⵠⲆᐃⵠ, Lj], [ts.ⵠᐃⵠⲆᐃ, Ks], [ts.ⵠΔⲆᐃⵠ, 4]],
    w: 1,
    f: ho,
    ᐃⵠᐃ: Bs,
    e: fs,
    id: ss.ᐃⲆⵠⵠⲆ,
    ΔⲆΔΔ: ts.ᐃⲆⵠⵠⲆ,
    time: 0.02,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 50]],
    w: 0,
    f: 0,
    ᐃⵠᐃ: Xa,
    e: ho,
    id: ss.ⲆⲆᐃⲆΔ,
    ΔⲆΔΔ: ts.ⲆⲆᐃⲆΔ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠΔΔⲆ, 75], [ts.ᐃⲆᐃΔ, 75], [ts.ⲆⲆᐃⲆΔ, 1]],
    w: 1,
    f: gj,
    ᐃⵠᐃ: Bs,
    e: Xa,
    id: ss.ΔⵠΔᐃΔ,
    ΔⲆΔΔ: ts.ΔⵠΔᐃΔ,
    time: hj / 10,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠΔΔⲆ, 90], [ts.ᐃⲆᐃΔ, 90], [ts.ΔᐃⲆⲆ, 90], [ts.ΔⵠΔᐃΔ, 1]],
    w: El,
    f: 0,
    ᐃⵠᐃ: ho,
    e: dt,
    id: ss.ⵠⲆⵠⵠᐃ,
    ΔⲆΔΔ: ts.ⵠⲆⵠⵠᐃ,
    time: $q / 20,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠΔΔⲆ, 100], [ts.ΔᐃⲆⲆ, wg], [ts.ᐃⲆΔⵠ, bl], [ts.ⵠⲆⵠⵠᐃ, 1]],
    w: 1,
    f: dt,
    ᐃⵠᐃ: hk,
    e: 0,
    id: ss.Ⲇᐃᐃᐃⵠ,
    ΔⲆΔΔ: ts.Ⲇᐃᐃᐃⵠ,
    time: vg / 30,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 80], [ts.ΔᐃⲆⲆ, 150], [ts.ᐃⲆΔⵠ, 120], [ts.Ⲇᐃᐃᐃⵠ, 1]],
    w: 1,
    f: jg,
    ᐃⵠᐃ: vl,
    e: 0,
    id: ss.ᐃⵠⲆΔⵠ,
    ΔⲆΔΔ: ts.ᐃⵠⲆΔⵠ,
    time: 0.016666666666666666,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⲆⲆⵠΔ, 80], [ts.ᐃⲆΔⵠ, 150], [ts.ⲆΔⲆᐃ, 120], [ts.ᐃⵠⲆΔⵠ, 1]],
    w: Ng,
    f: Th,
    ᐃⵠᐃ: dt,
    e: gj,
    id: ss.ⲆΔⲆΔᐃ,
    ΔⲆΔΔ: ts.ⲆΔⲆΔᐃ,
    time: Ws / 90,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⲆⵠⲆⲆⵠ, Ls], [ts.ᐃⲆΔⵠ, 40], [ts.ᐃⵠΔᐃⵠ, 4]],
    w: 1,
    f: dt,
    ᐃⵠᐃ: 0,
    e: Bs,
    id: ss.ᐃⲆⲆΔⲆ,
    ΔⲆΔΔ: ts.ᐃⲆⲆΔⲆ,
    time: 0.05,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⲆⲆΔⲆ, Ws], [ts.ΔᐃⲆⲆ, 80], [ts.ⵠⵠⵠΔⵠ, 1], [ts.ⲆΔⲆᐃ, 20]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃⵠⲆⲆⲆ,
    ΔⲆΔΔ: ts.ᐃⵠⲆⲆⲆ,
    time: Ws / 90,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ΔⲆΔΔΔ, wr], [ts.ᐃⲆΔⵠ, 50], [ts.ⵠΔⲆᐃⵠ, wr]],
    w: 1,
    f: bt,
    ᐃⵠᐃ: 0,
    e: fs,
    id: ss.ⵠᐃⵠⲆⲆ,
    ΔⲆΔΔ: ts.ⵠᐃⵠⲆⲆ,
    time: 1 / Us,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠᐃⵠⲆⲆ, bh], [ts.ΔⲆΔΔΔ, 10], [ts.ⲆΔⲆᐃ, 50]],
    w: $q,
    f: hj,
    ᐃⵠᐃ: 0,
    e: hk,
    id: ss.ΔΔᐃⲆᐃ,
    ΔⲆΔΔ: ts.ΔΔᐃⲆᐃ,
    time: Zn / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ΔΔᐃⲆᐃ, kr], [ts.ΔⲆΔΔΔ, Uq], [ts.ⲆΔⲆᐃ, 50], [ts.ⲆⲆⵠΔ, 50]],
    w: bq,
    f: Ng,
    ᐃⵠᐃ: gj,
    e: 0,
    id: ss.ⵠⲆⵠⵠⵠ,
    ΔⲆΔΔ: ts.ⵠⲆⵠⵠⵠ,
    time: vg / 90,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⵠΔᐃⵠ, 4], [ts.ᐃⲆΔⵠΔ, Ci]],
    w: 1,
    f: hk,
    ᐃⵠᐃ: hk,
    e: 0,
    id: ss.ⵠᐃᐃΔⵠ,
    ΔⲆΔΔ: ts.ⵠᐃᐃΔⵠ,
    time: El / Ln,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠᐃᐃΔⵠ, 1], [ts.ᐃⵠΔᐃⵠ, 6], [ts.ᐃⲆΔⵠΔ, Qa], [ts.ⵠᐃΔᐃᐃ, 12], [ts.ⵠⵠⵠⵠΔ, 4]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ΔΔᐃⲆⲆ,
    ΔⲆΔΔ: ts.ΔΔᐃⲆⲆ,
    time: 0.006666666666666667,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⵠΔᐃⵠ, Jl], [ts.ⲆᐃⲆⵠⲆ, zq]],
    w: 1,
    f: ks,
    ᐃⵠᐃ: Bs,
    e: 0,
    id: ss.ⵠⵠᐃΔ,
    ΔⲆΔΔ: ts.ⵠⵠᐃΔ,
    time: bq / 15,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 20]],
    w: 0,
    f: 1,
    ᐃⵠᐃ: 0,
    e: fs,
    id: ss.ⵠᐃΔⵠⲆ,
    ΔⲆΔΔ: ts.ⵠᐃΔⵠⲆ,
    time: 0.3333333333333333,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆΔⵠ, El], [ts.ᐃⵠΔᐃⵠ, bh]],
    w: El,
    f: 0,
    ᐃⵠᐃ: ho,
    e: Go,
    id: ss.ⵠΔⲆᐃⵠ,
    ΔⲆΔΔ: ts.ⵠΔⲆᐃⵠ,
    time: 1 / Oj,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ΔᐃⲆⲆ, ek]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: ka,
    e: 0,
    id: ss.ΔΔⲆⵠΔ,
    ΔⲆΔΔ: ts.ΔΔⲆⵠΔ,
    time: 1 / Rh,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ΔᐃⲆⲆ, 250]],
    w: bq,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆΔⲆⵠᐃ,
    ΔⲆΔΔ: ts.ⲆΔⲆⵠᐃ,
    time: bq / 60,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 50]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: jg,
    e: 0,
    id: ss.ⲆⲆⲆⲆⲆ,
    ΔⲆΔΔ: ts.ⲆⲆⲆⲆⲆ,
    time: 1 / Ks,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, we]],
    w: Ng,
    f: fs,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ⲆⲆΔΔΔ,
    ΔⲆΔΔ: ts.ⲆⲆΔΔΔ,
    time: $r / 5,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 30]],
    w: Zk,
    f: 0,
    ᐃⵠᐃ: dt,
    e: 0,
    id: ss.ⵠΔᐃΔᐃ,
    ΔⲆΔΔ: ts.ⵠΔᐃΔᐃ,
    time: y / 5,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 120]],
    w: $r,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃΔᐃᐃᐃ,
    ΔⲆΔΔ: ts.ᐃΔᐃᐃᐃ,
    time: 1 / Pj,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 20], [ts.ⲆᐃᐃᐃⲆ, 15]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: Go,
    e: ho,
    id: ss.ⲆⵠΔᐃΔ,
    ΔⲆΔΔ: ts.ⲆⵠΔᐃΔ,
    time: Zn / 5,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ΔΔⲆᐃⲆ, 25]],
    w: y,
    f: 1,
    ᐃⵠᐃ: ho,
    e: 0,
    id: ss.ᐃᐃⵠΔⵠ,
    ΔⲆΔΔ: ts.ᐃᐃⵠΔⵠ,
    time: 1 / br,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃᐃⵠΔⵠ, bt]],
    w: 0,
    f: 0,
    ᐃⵠᐃ: y,
    e: ka,
    id: ss.ⵠⵠⲆΔⲆ,
    ΔⲆΔΔ: ts.ⵠⵠⲆΔⲆ,
    time: 1 / zq,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⲆⲆΔΔᐃ, 20], [ts.ᐃᐃⵠΔⵠ, $r]],
    w: ka,
    f: Dj,
    ᐃⵠᐃ: 0,
    e: Go,
    id: ss.ᐃΔⵠⵠⵠⵠΔ,
    ΔⲆΔΔ: ts.ⵠⵠⲆΔⲆ,
    time: 1 / Hh,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃᐃⵠΔⵠ, 1]],
    w: vl,
    f: ho,
    ᐃⵠᐃ: 0,
    e: og,
    id: ss.ⵠⵠⵠⵠΔⵠⲆ,
    ΔⲆΔΔ: ts.ⵠⵠⲆΔⲆ,
    time: bq / Kl,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 60], [ts.ⵠΔΔⲆ, Ph], [ts.ᐃⵠΔᐃⵠ, 2]],
    w: $r,
    f: jg,
    ᐃⵠᐃ: 0,
    e: dt,
    id: ss.ⵠᐃΔⵠΔ,
    ΔⲆΔΔ: ts.ⵠᐃΔⵠΔ,
    time: 0.1,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 40], [ts.ⵠΔΔⲆ, 45]],
    w: Ws,
    f: 0,
    ᐃⵠᐃ: 0,
    e: ho,
    id: ss.ⲆΔᐃⲆᐃ,
    ΔⲆΔΔ: ts.ⲆΔᐃⲆᐃ,
    time: 1 / Ns,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ⲆΔᐃⲆᐃ, $q], [ts.ΔⵠΔᐃⵠ, 40], [ts.ΔΔᐃᐃᐃ, 1]],
    w: uq,
    f: 1,
    ᐃⵠᐃ: 1,
    e: Bs,
    id: ss.ᐃΔⵠΔⵠ,
    ΔⲆΔΔ: ts.ᐃΔⵠΔⵠ,
    time: El / 200,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 50], [ts.ⵠΔΔⲆ, 100]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: hk,
    id: ss.ⲆᐃΔᐃⲆ,
    ΔⲆΔΔ: ts.ⲆᐃΔᐃⲆ,
    time: 0.011111111111111112,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ⵠΔΔⲆ, 60], [ts.ΔᐃⲆⲆ, 120]],
    w: bq,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: ka,
    id: ss.ⵠΔⲆⵠΔ,
    ΔⲆΔΔ: ts.ⵠΔⲆⵠΔ,
    time: uq / 90,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ΔᐃⲆⲆ, 70], [ts.ᐃⲆΔⵠ, 140]],
    w: 1,
    f: Bs,
    ᐃⵠᐃ: 0,
    e: vl,
    id: ss.ⲆⲆⵠΔⵠ,
    ΔⲆΔΔ: ts.ⲆⲆⵠΔⵠ,
    time: ck / 90,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 80], [ts.ⲆΔⲆᐃ, 160]],
    w: 1,
    f: ks,
    ᐃⵠᐃ: 0,
    e: ks,
    id: ss.ⵠⵠⵠⵠⲆ,
    ΔⲆΔΔ: ts.ⵠⵠⵠⵠⲆ,
    time: 0.011111111111111112,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 90], [ts.ⲆⲆⵠΔ, 180]],
    w: uq,
    f: ks,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃᐃᐃΔᐃ,
    ΔⲆΔΔ: ts.ᐃᐃᐃΔᐃ,
    time: Zk / 90,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ⵠΔΔⲆ, 70]],
    w: $q,
    f: 0,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ᐃⲆΔⲆΔ,
    ΔⲆΔΔ: ts.ᐃⲆΔⲆΔ,
    time: 0.1,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⵠΔΔⲆ, 70], [ts.ᐃⲆᐃΔ, 50]],
    w: Ng,
    f: 0,
    ᐃⵠᐃ: jg,
    e: jg,
    id: ss.ⵠⲆΔᐃΔ,
    ΔⲆΔΔ: ts.ⵠⲆΔᐃΔ,
    time: uq / ek,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 40], [ts.ⵠΔΔⲆ, 40]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: dh,
    e: 0,
    id: ss.ΔⵠⵠΔⵠ,
    ΔⲆΔΔ: ts.ΔⵠⵠΔⵠ,
    time: $r / 10,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ⲆⲆⲆⵠⲆ, Zn], [ts.ⵠⵠⵠⵠᐃ, 1]],
    w: 0,
    f: ka,
    ᐃⵠᐃ: fs,
    e: 0,
    id: ss.Ⲇⵠᐃᐃⵠ,
    ΔⲆΔΔ: ts.Ⲇⵠᐃᐃⵠ,
    time: 1 / Qq,
    ⵠⲆⵠ: us.ⵠᐃΔⲆⲆ
  }, {
    r: [[ts.ⵠΔⲆᐃⵠ, 30], [ts.ⵠᐃⵠⵠⵠ, 1], [ts.ⲆΔⲆᐃ, 150], [ts.ΔⵠᐃⵠΔ, wq]],
    w: 1,
    f: uq,
    ᐃⵠᐃ: ck,
    e: 0,
    id: ss.ⵠⵠᐃᐃⲆ,
    ΔⲆΔΔ: ts.ⵠⵠᐃᐃⲆ,
    time: 0.008333333333333333,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠⵠᐃᐃⲆ, 1], [ts.ΔΔⵠⲆⲆ, vg], [ts.ⲆⲆⵠΔ, 150], [ts.ΔⵠⲆⲆⲆ, 2]],
    w: 1,
    f: ck,
    ᐃⵠᐃ: 1,
    e: 0,
    id: ss.ⲆᐃΔⵠⲆ,
    ΔⲆΔΔ: ts.ⲆᐃΔⵠⲆ,
    time: bq / 180,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠⲆⵠⵠᐃ, El], [ts.ᐃⲆⵠΔⵠ, Cg], [ts.ⵠΔᐃⵠⲆ, 10], [ts.ᐃⵠΔᐃⵠ, Hh]],
    w: 1,
    f: ho,
    ᐃⵠᐃ: 0,
    e: gj,
    id: ss.ⵠΔᐃΔⲆ,
    ΔⲆΔΔ: ts.ⵠΔᐃΔⲆ,
    time: El / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⵠΔⲆᐃⵠ, ph], [ts.ΔΔⵠΔⵠ, Th], [ts.ⲆΔⲆᐃ, 150], [ts.ΔⵠᐃⵠΔ, Ui]],
    w: 1,
    f: or,
    ᐃⵠᐃ: Zn,
    e: Bs,
    id: ss.ᐃⵠⵠⲆᐃ,
    ΔⲆΔΔ: ts.ᐃⵠⵠⲆᐃ,
    time: 1 / 120,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⵠⵠⲆᐃ, 1], [ts.Δⵠⵠⵠᐃ, kr], [ts.ⲆⲆⵠΔ, 150], [ts.ΔⵠⲆⲆⲆ, Xj]],
    w: og,
    f: El,
    ᐃⵠᐃ: 1,
    e: Yl,
    id: ss.ΔⵠⲆⵠᐃ,
    ΔⲆΔΔ: ts.ΔⵠⲆⵠᐃ,
    time: 0.005555555555555556,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 100], [ts.ᐃⵠΔᐃⵠ, 4]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ΔⵠΔᐃᐃ,
    ΔⲆΔΔ: ts.ΔⵠΔᐃᐃ,
    time: 1 / u,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 30]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠⵠⲆⲆⵠ,
    ΔⲆΔΔ: ts.ⵠⵠⲆⲆⵠ,
    time: 0.2,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⵠΔΔⲆ, 200], [ts.ᐃⵠΔᐃⵠ, 8], [ts.ⵠⵠⵠⵠΔ, Ol], [ts.ΔⵠΔᐃᐃ, 1]],
    w: Dj,
    f: Go,
    ᐃⵠᐃ: dh,
    e: Go,
    id: ss.ΔⲆⵠᐃⲆ,
    ΔⲆΔΔ: ts.ΔⲆⵠᐃⲆ,
    time: 0.04,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⵠΔΔⲆ, 20], [ts.ⲆᐃΔᐃΔ, Ng]],
    w: 1,
    f: ho,
    ᐃⵠᐃ: dh,
    e: ka,
    id: ss.ⲆΔΔᐃΔ,
    ΔⲆΔΔ: ts.ⲆΔΔᐃΔ,
    time: 1 / Ba,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔᐃⲆⲆ, 200], [ts.ᐃⵠΔᐃⵠ, et], [ts.ⲆᐃΔᐃΔ, Ur], [ts.ⵠⵠⵠⵠΔ, 4], [ts.ΔⲆⵠᐃⲆ, 1]],
    w: 1,
    f: ka,
    ᐃⵠᐃ: Go,
    e: 0,
    id: ss.ⲆΔᐃⲆⵠ,
    ΔⲆΔΔ: ts.ⲆΔᐃⲆⵠ,
    time: kr / 30,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔᐃⲆⲆ, 20], [ts.ⵠⵠⵠⵠΔ, 1]],
    w: 1,
    f: vl,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆⲆⲆⵠΔ,
    ΔⲆΔΔ: ts.ⲆⲆⲆⵠΔ,
    time: 1 / ok,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆΔⵠ, 200], [ts.ⵠΔⲆᐃⵠ, 10], [ts.ⲆᐃΔᐃΔ, 8], [ts.ⵠⵠⵠⵠΔ, yn], [ts.ⲆΔᐃⲆⵠ, 1]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: Xa,
    id: ss.ΔᐃⵠⵠΔ,
    ΔⲆΔΔ: ts.ΔᐃⵠⵠΔ,
    time: 0.02857142857142857,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆΔⵠ, Ks], [ts.ⵠⵠⵠⵠΔ, 1]],
    w: 1,
    f: dt,
    ᐃⵠᐃ: Xa,
    e: Yl,
    id: ss.ⲆᐃΔⲆᐃ,
    ΔⲆΔΔ: ts.ⲆᐃΔⲆᐃ,
    time: 0.1,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 200], [ts.ⵠΔⲆᐃⵠ, sh], [ts.ⵠⵠⵠⵠΔ, Sr], [ts.ⵠᐃΔᐃᐃ, 8], [ts.ΔᐃⵠⵠΔ, 1]],
    w: $r,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆᐃᐃⲆΔ,
    ΔⲆΔΔ: ts.ⲆᐃᐃⲆΔ,
    time: bh / 40,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆΔⲆᐃ, 10], [ts.ⵠᐃΔᐃᐃ, 1]],
    w: og,
    f: ho,
    ᐃⵠᐃ: vl,
    e: 0,
    id: ss.ⵠΔⵠΔⵠ,
    ΔⲆΔΔ: ts.ⵠΔⵠΔⵠ,
    time: Ng / we,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆⲆⵠΔ, 200], [ts.ⵠΔⲆᐃⵠ, Cg], [ts.ⵠⵠⵠΔⵠ, Th], [ts.ⲆᐃᐃⲆΔ, 1]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: Yl,
    id: ss.ΔⲆᐃⵠⲆ,
    ΔⲆΔΔ: ts.ΔⲆᐃⵠⲆ,
    time: 0.022222222222222223,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⲆⲆⵠΔ, Yq], [ts.ⵠᐃΔᐃᐃ, or], [ts.ΔⲆΔΔΔ, 1]],
    w: 1,
    f: vl,
    ᐃⵠᐃ: Yl,
    e: dt,
    id: ss.ⵠⵠⵠⲆⵠ,
    ΔⲆΔΔ: ts.ⵠⵠⵠⲆⵠ,
    time: 1 / Ll,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔⵠΔᐃⵠ, 200], [ts.ⵠΔⲆᐃⵠ, Xn], [ts.ΔΔⵠΔⵠ, 1], [ts.ΔⲆᐃⵠⲆ, 1]],
    w: or,
    f: 0,
    ᐃⵠᐃ: Go,
    e: gj,
    id: ss.ⲆⲆᐃᐃⲆ,
    ΔⲆΔΔ: ts.ⲆⲆᐃᐃⲆ,
    time: y / 50,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔⵠΔᐃⵠ, 10], [ts.ΔΔᐃᐃᐃ, 1]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠⲆⵠᐃᐃ,
    ΔⲆΔΔ: ts.ⵠⲆⵠᐃᐃ,
    time: $r / 20,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃⲆᐃΔ, Is]],
    w: $r,
    f: 0,
    ᐃⵠᐃ: gj,
    e: fs,
    id: ss.ΔⵠᐃⲆⲆ,
    ΔⲆΔΔ: ts.ΔⵠᐃⲆⲆ,
    time: 0.04,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔⵠᐃⲆⲆ, 1], [ts.ⵠΔΔⲆ, k], [ts.ᐃⲆᐃΔ, 50]],
    w: 1,
    f: gj,
    ᐃⵠᐃ: 0,
    e: gj,
    id: ss.ⵠⲆᐃⲆⵠ,
    ΔⲆΔΔ: ts.ⵠⲆᐃⲆⵠ,
    time: Zk / 40,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⵠⲆᐃⲆⵠ, ck], [ts.ΔᐃⲆⲆ, 50], [ts.ⵠΔΔⲆ, 50], [ts.ᐃⲆᐃΔ, 50]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: 0,
    e: vl,
    id: ss.ΔᐃᐃΔᐃ,
    ΔⲆΔΔ: ts.ΔᐃᐃΔᐃ,
    time: 0.02,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔᐃᐃΔᐃ, 1], [ts.ᐃⲆΔⵠ, 50], [ts.ΔᐃⲆⲆ, 50], [ts.ⵠΔΔⲆ, 50]],
    w: 1,
    f: dh,
    ᐃⵠᐃ: Yl,
    e: 0,
    id: ss.ΔⵠΔⵠⲆ,
    ΔⲆΔΔ: ts.ΔⵠΔⵠⲆ,
    time: 1 / 70,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔⵠΔⵠⲆ, 1], [ts.ⲆΔⲆᐃ, 50], [ts.ᐃⲆΔⵠ, 50], [ts.ΔᐃⲆⲆ, 50]],
    w: El,
    f: dh,
    ᐃⵠᐃ: 0,
    e: hk,
    id: ss.ᐃᐃⵠᐃΔ,
    ΔⲆΔΔ: ts.ᐃᐃⵠᐃΔ,
    time: 0.011111111111111112,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃᐃⵠᐃΔ, Dj], [ts.ⲆⲆⵠΔ, 50], [ts.ⲆΔⲆᐃ, 50], [ts.ᐃⲆΔⵠ, 50]],
    w: Zn,
    f: gj,
    ᐃⵠᐃ: 0,
    e: hk,
    id: ss.ⵠᐃᐃᐃΔ,
    ΔⲆΔΔ: ts.ⵠᐃᐃᐃΔ,
    time: 1 / 120,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔⲆⵠⵠⲆ, 1], [ts.ΔᐃⲆⲆ, 200]],
    w: Th,
    f: bh,
    ᐃⵠᐃ: El,
    e: 0,
    id: ss.ⲆⲆΔⵠⲆ,
    ΔⲆΔΔ: ts.ⲆⲆΔⵠⲆ,
    time: Ng / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ΔⵠⲆΔⵠ, or], [ts.ΔᐃⲆⲆ, 200]],
    w: y,
    f: ck,
    ᐃⵠᐃ: 1,
    e: 0,
    id: ss.ΔⲆⵠΔⲆ,
    ΔⲆΔΔ: ts.ΔⲆⵠΔⲆ,
    time: ck / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⲆⵠⲆᐃⲆ, 1], [ts.ΔᐃⲆⲆ, 200], [ts.ΔⵠᐃⵠΔ, Zn]],
    w: Dj,
    f: 1,
    ᐃⵠᐃ: uq,
    e: 0,
    id: ss.ⵠⲆᐃⵠⵠ,
    ΔⲆΔΔ: ts.ⵠⲆᐃⵠⵠ,
    time: og / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ⲆᐃⲆⵠⲆ, 10], [ts.ᐃⲆᐃⵠⵠ, Hl], [ts.ᐃⵠΔᐃⵠ, es]],
    w: kr,
    f: 0,
    ᐃⵠᐃ: 0,
    e: ka,
    id: ss.Ⲇᐃⵠᐃᐃ,
    ΔⲆΔΔ: ts.Ⲇᐃⵠᐃᐃ,
    time: 0.1,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃⲆᐃⵠⵠ, 3], [ts.ᐃⵠΔᐃⵠ, Og]],
    w: 1,
    f: dt,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ΔΔⲆⵠⲆ,
    ΔⲆΔΔ: ts.ΔΔⲆⵠⲆ,
    time: Th / 10,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.Ⲇᐃⵠᐃᐃ, bh], [ts.ⵠᐃⲆⵠᐃ, hj], [ts.ᐃⵠⲆᐃⵠ, 15], [ts.ⵠΔⲆᐃⵠ, 5], [ts.ⵠⵠⵠⵠΔ, I]],
    w: hj,
    f: Go,
    ᐃⵠᐃ: 0,
    e: dt,
    id: ss.ⵠⲆᐃⵠⲆ,
    ΔⲆΔΔ: ts.ⵠⲆᐃⵠⲆ,
    time: 0.016666666666666666,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ΔΔⲆⵠⲆ, 1], [ts.ⲆⲆᐃⲆⲆ, og], [ts.ᐃⵠⲆᐃⵠ, 10], [ts.ⵠΔⲆᐃⵠ, as], [ts.ⵠⵠⵠⵠΔ, 8]],
    w: 1,
    f: 0,
    ᐃⵠᐃ: Xa,
    e: ho,
    id: ss.ⵠΔΔⵠⵠ,
    ΔⲆΔΔ: ts.ⵠΔΔⵠⵠ,
    time: hj / 60,
    ⵠⲆⵠ: us.ᐃᐃᐃᐃⵠ
  }, {
    r: [[ts.ᐃᐃⵠΔᐃ, uq]],
    w: hk,
    f: 0,
    ᐃⵠᐃ: 1,
    e: 0,
    id: ss.ⵠᐃⲆΔᐃ,
    ΔⲆΔΔ: ts.ⵠᐃⲆΔᐃ,
    time: El / 5,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ᐃⲆᐃΔ, Xe], [ts.ᐃⵠΔᐃⵠ, 1]],
    w: vg,
    f: ka,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃᐃⵠΔᐃ,
    ΔⲆΔΔ: ts.ᐃᐃⵠΔᐃ,
    time: Dj / Rh,
    ⵠⲆⵠ: us.ⲆᐃⲆⲆⲆ
  }, {
    r: [[ts.ⵠΔΔⲆ, Zs], [ts.ⲆᐃᐃᐃⲆ, 30]],
    w: 1,
    f: kr,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⲆⵠⲆⵠᐃ,
    ΔⲆΔΔ: ts.ⲆⵠⲆⵠᐃ,
    time: 1 / cl,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 20]],
    w: 1,
    f: gj,
    ᐃⵠᐃ: Bs,
    e: ka,
    id: ss.ⲆⵠⲆΔⵠ,
    ΔⲆΔΔ: ts.ⲆⵠⲆΔⵠ,
    time: og / Rh,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, hh], [ts.ⵠΔΔⲆ, 50], [ts.ᐃⲆᐃⵠⵠ, fl], [ts.ⲆᐃⲆⵠⲆ, 5], [ts.ᐃⵠΔᐃⵠ, 6]],
    w: ck,
    f: hk,
    ᐃⵠᐃ: hk,
    e: 0,
    id: ss.ⵠΔⵠⵠⲆ,
    ΔⲆΔΔ: ts.ⵠΔⵠⵠⲆ,
    time: bh / ie,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 250], [ts.ⵠΔⲆᐃⵠ, Ks], [ts.ᐃⵠⲆᐃⵠ, 2], [ts.ⲆⵠⲆⲆⵠ, 2]],
    w: Ng,
    f: 0,
    ᐃⵠᐃ: 0,
    e: dh,
    id: ss.ΔⵠⲆⲆⵠ,
    ΔⲆΔΔ: ts.ΔⵠⲆⲆⵠ,
    time: El / 50,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 250], [ts.ᐃⵠΔᐃⵠ, 10], [ts.ᐃⵠⲆᐃⵠ, 2], [ts.ⵠⵠⵠⵠΔ, 8]],
    w: og,
    f: 0,
    ᐃⵠᐃ: 0,
    e: dh,
    id: ss.ᐃΔⵠⵠⵠ,
    ΔⲆΔΔ: ts.ᐃΔⵠⵠⵠ,
    time: 0.02,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⵠΔᐃⵠ, 10], [ts.ⲆᐃⲆⵠⲆ, 6], [ts.ᐃⲆᐃⵠⵠ, 4], [ts.ΔΔⲆᐃⲆ, 50]],
    w: 1,
    f: Go,
    ᐃⵠᐃ: vl,
    e: 0,
    id: ss.ⲆᐃⵠΔⲆ,
    ΔⲆΔΔ: ts.ⲆᐃⵠΔⲆ,
    time: 1 / ko,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 250], [ts.ᐃⵠΔᐃⵠ, vi], [ts.ⵠᐃΔⵠⲆ, 10], [ts.ⲆᐃΔᐃΔ, ar]],
    w: 1,
    f: ka,
    ᐃⵠᐃ: ka,
    e: vl,
    id: ss.ᐃⲆΔⵠᐃ,
    ΔⲆΔΔ: ts.ᐃⲆΔⵠᐃ,
    time: 0.02,
    ⵠⲆⵠ: us.ᐃⲆⵠⲆⵠ
  }, {
    r: [[ts.ᐃⲆᐃΔ, 40]],
    w: 1,
    f: Bs,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ⵠΔⵠᐃΔ,
    ΔⲆΔΔ: ts.ⵠΔⵠᐃΔ,
    time: 1 / Yo,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ⵠΔⵠᐃΔ, 1], [ts.ⵠΔΔⲆ, 40], [ts.ᐃⲆᐃΔ, 50]],
    w: 1,
    f: fs,
    ᐃⵠᐃ: 0,
    e: jg,
    id: ss.ᐃΔᐃᐃⲆ,
    ΔⲆΔΔ: ts.ᐃΔᐃᐃⲆ,
    time: Dj / 10,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃΔᐃᐃⲆ, Ng], [ts.ΔᐃⲆⲆ, 40], [ts.ⵠΔΔⲆ, 50], [ts.ᐃⲆᐃΔ, 60]],
    w: kr,
    f: gj,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.Δᐃⵠⵠᐃ,
    ΔⲆΔΔ: ts.Δᐃⵠⵠᐃ,
    time: El / 20,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.Δᐃⵠⵠᐃ, 1], [ts.ᐃⲆΔⵠ, 40], [ts.ΔᐃⲆⲆ, 70], [ts.ⵠΔΔⲆ, 80]],
    w: 1,
    f: jg,
    ᐃⵠᐃ: 0,
    e: 0,
    id: ss.ᐃΔⵠΔⲆ,
    ΔⲆΔΔ: ts.ᐃΔⵠΔⲆ,
    time: bt / 30,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ᐃΔⵠΔⲆ, 1], [ts.ⲆΔⲆᐃ, 40], [ts.ᐃⲆΔⵠ, 70], [ts.ΔᐃⲆⲆ, 110]],
    w: bt,
    f: ho,
    ᐃⵠᐃ: 0,
    e: dt,
    id: ss.ΔⲆⵠᐃᐃ,
    ΔⲆΔΔ: ts.ΔⲆⵠᐃᐃ,
    time: bq / 60,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }, {
    r: [[ts.ΔⲆⵠᐃᐃ, og], [ts.ⲆⲆⵠΔ, 50], [ts.ⲆΔⲆᐃ, 80], [ts.ᐃⲆΔⵠ, 110]],
    w: Ng,
    f: 0,
    ᐃⵠᐃ: ho,
    e: 0,
    id: ss.ⵠᐃΔⲆⵠ,
    ΔⲆΔΔ: ts.ⵠᐃΔⲆⵠ,
    time: 0.011111111111111112,
    ⵠⲆⵠ: us.ᐃⵠᐃⵠΔ
  }];
  const it = nl;
  ns = 300;
  ⲆⲆΔΔ = {
    ΔⲆΔⲆᐃᐃⵠ: ns++,
    ⵠⲆⵠⵠⲆᐃⲆ: ns++,
    ᐃΔΔⲆΔⵠⵠ: ns++,
    ΔᐃⲆΔᐃⲆⵠ: ns++,
    ⵠᐃⲆᐃⵠⵠⲆ: ns++,
    ⲆⲆⵠⵠᐃⲆⵠ: ns++,
    ⵠⵠⲆⵠⵠᐃⲆ: ns++,
    ⵠΔⲆⵠΔⲆΔ: ns++,
    ᐃΔΔΔΔᐃⵠ: ns++,
    ⲆᐃⵠΔᐃᐃⲆ: ns++,
    ⲆᐃⵠΔⲆᐃⵠ: ns++,
    ⵠⵠΔᐃⲆⵠᐃ: ns++,
    EMPTY: ns++,
    ΔⵠᐃᐃⲆⵠΔ: ns++,
    ⲆⲆΔⵠᐃΔᐃ: ns++,
    ΔΔᐃⵠΔⵠΔ: ns++,
    ⵠⵠΔⲆᐃⵠΔ: ns++,
    ΔᐃΔⲆⵠⲆᐃ: ns++,
    ⲆⲆⲆΔⲆΔΔ: ns++,
    ΔⲆᐃᐃⵠⵠΔ: ns++,
    ⵠΔⵠⲆΔΔⵠ: ns++,
    ⲆΔᐃΔΔΔⵠ: ns++,
    ᐃⲆⲆⵠⲆ: ns++,
    ⲆⲆΔⵠⲆⵠⵠ: ns++,
    ᐃⲆⲆΔᐃ: ns++,
    ᐃⵠⵠⲆⵠΔΔ: ns++,
    ᐃⲆΔⲆⲆⲆΔ: ns++,
    ΔⵠⵠⵠⵠⲆΔ: ns++,
    ΔⵠᐃᐃⵠⲆⲆ: ns++,
    ᐃΔⵠⵠⵠⵠⵠ: ns++,
    ΔⵠΔⵠⵠΔᐃ: ns++,
    ⲆⵠⲆᐃⵠΔΔ: ns++,
    POINTS: ns++,
    ⵠⵠⵠᐃΔᐃⵠ: ns++,
    ΔΔⵠΔᐃΔⲆ: ns++,
    ΔⲆⲆⲆⵠⲆΔ: ns++,
    ΔᐃⵠΔᐃⲆᐃ: ns++,
    ᐃⵠⲆᐃⲆⲆⵠ: ns++,
    ᐃⵠᐃⵠⵠᐃᐃ: ns++,
    ⵠΔⵠⲆᐃⵠⵠ: ns++,
    ⵠⲆΔᐃᐃⵠΔ: ns++,
    ΔⲆⵠΔⵠⲆⵠ: ns++,
    ᐃᐃᐃᐃⵠⲆᐃ: ns++,
    ⲆΔᐃᐃΔᐃⲆ: ns++
  };
  function jt() {
    xt[ts.ⵠᐃΔⲆⵠ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    xt[ts.ΔⲆⵠᐃᐃ] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    xt[ts.ᐃΔⵠΔⲆ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    xt[ts.Δᐃⵠⵠᐃ] = ["Gold Axe", "Chop 'til it drops!", fj[Zh], "Shield Penetration: 3"];
    xt[ts.ᐃΔᐃᐃⲆ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    xt[ts.ⵠΔⵠᐃΔ] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    xt[ts.ⲆᐃΔᐃⲆ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    xt[ts.ⵠΔⲆⵠΔ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    xt[ts.ⲆⲆⵠΔⵠ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    xt[ts.ⵠⵠⵠⵠⲆ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    xt[ts.ᐃᐃᐃΔᐃ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    xt[ts.ⵠᐃᐃᐃΔ] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    xt[ts.ᐃᐃⵠᐃΔ] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    xt[ts.ΔⵠΔⵠⲆ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    xt[ts.ΔᐃᐃΔᐃ] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    xt[ts.ⵠⲆᐃⲆⵠ] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    xt[ts.ΔⵠᐃⲆⲆ] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", fj[Vj], "Players Defense: 1"];
    xt[ts.ⵠⲆΔᐃΔ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    xt[ts.ᐃΔᐃᐃᐃ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    xt[ts.ⵠⲆⵠᐃᐃ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    xt[ts.ⲆⲆᐃᐃⲆ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    xt[ts.ⵠⵠⵠⲆⵠ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    xt[ts.ΔⲆᐃⵠⲆ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    xt[ts.ⵠΔⵠΔⵠ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    xt[ts.ⲆᐃᐃⲆΔ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    xt[ts.ⲆᐃΔⲆᐃ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    xt[ts.ΔᐃⵠⵠΔ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    xt[ts.ⲆⲆⲆⵠΔ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    xt[ts.ⲆΔᐃⲆⵠ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    xt[ts.ⲆΔΔᐃΔ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    xt[ts.ΔⲆⵠᐃⲆ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    xt[ts.ⵠⵠⲆⲆⵠ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    xt[ts.ΔⵠΔᐃᐃ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    xt[ts.ᐃΔⵠΔⵠ] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    xt[ts.ᐃⲆΔⵠΔ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    xt[ts.ⵠᐃⵠⲆᐃ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    xt[ts.ⵠᐃΔᐃᐃ] = ["Vulture Feather", "From a deadly vulture"];
    xt[ts.ΔⵠΔᐃⵠ] = ["Emerald", "How many golden breads can you get from it?"];
    xt[ts.ΔΔᐃᐃᐃ] = ["Sand Worm Juice", "I don't want to know how you got this."];
    xt[ts.ⵠᐃᐃΔⵠ] = ["Turban", "Useful to survive in the desert."];
    xt[ts.ΔΔᐃⲆⲆ] = ["Ninja outfit", "Essential to survive in the desert"];
    xt[ts.ΔΔΔᐃᐃ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    xt[ts.ᐃᐃⵠⵠⵠⲆΔ] = ["Pilot Glasses"];
    xt[ts.ΔⵠᐃΔⵠ] = ["Tamed Boar", "Fast on lands and slow on water."];
    xt[ts.ᐃⲆᐃⵠᐃ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    xt[ts.ᐃⲆᐃⲆⲆ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    xt[ts.ⲆⲆⲆᐃⲆ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    xt[ts.ΔᐃⵠΔⵠ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    xt[ts.ⵠⲆⵠΔⵠ] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    xt[ts.ⲆᐃⵠΔⲆ] = ["Saddle", "Hit a boar with it to tame it."];
    xt[ts.ΔΔⵠᐃᐃ] = ["Witch Hat", "You're a wizard Starvy!"];
    xt[ts.ΔᐃⲆⵠⵠ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    xt[ts.ΔⲆᐃᐃⲆ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    xt[ts.ᐃΔᐃⵠᐃ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    xt[ts.ⵠᐃⵠΔΔ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    xt[ts.ΔⲆⲆⲆⲆ] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    xt[ts.ᐃΔⵠⵠⵠ] = ["Sled", "You are faster with it in the snow"];
    xt[ts.ΔⵠⲆⲆⵠ] = ["Boat", "You are faster with it in the water"];
    xt[ts.ᐃⲆΔⵠᐃ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    xt[ts.ᐃΔᐃⲆᐃ] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    xt[ts.ⵠⵠⵠⵠΔ] = ["Penguin Feather", "From a deadly cute penguin."];
    xt[ts.ⲆᐃΔᐃΔ] = ["Hawk Feather", "From a deadly hawk."];
    xt[ts.ⵠⵠᐃⵠⲆ] = ["Cactus", "Food : 20", "Water : 10"];
    xt[ts.ᐃΔⵠⵠᐃ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    xt[ts.ⵠⵠᐃⲆᐃ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    xt[ts.ⲆΔᐃΔᐃ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    xt[ts.ⵠᐃⲆⵠⵠ] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    xt[ts.ΔᐃΔⵠⵠ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    xt[ts.ΔΔΔⲆⵠ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    xt[ts.ΔᐃⵠⲆⲆ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    xt[ts.ⲆᐃⵠⵠΔ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    xt[ts.ΔΔᐃⵠΔ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    xt[ts.ᐃΔᐃᐃⵠ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    xt[ts.ⲆΔᐃᐃΔ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    xt[ts.ⲆΔᐃⲆⲆ] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    xt[ts.Δᐃⵠᐃᐃ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    xt[ts.ᐃⲆΔᐃⵠ] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    xt[ts.ᐃⲆⵠⲆΔ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    xt[ts.ᐃΔⵠᐃⵠ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    xt[ts.ᐃΔⲆⵠⲆ] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    xt[ts.ᐃᐃᐃⲆⲆ] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    xt[ts.ⵠᐃⵠⲆΔ] = ["Pitchfork", "Perfect for gathering"];
    xt[ts.ⲆⵠⵠᐃΔ] = ["Golden Pitchfork", "Essential for a real farmer."];
    xt[ts.ⵠⲆΔΔΔᐃΔ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    xt[ts.ΔⲆΔⲆⲆΔⲆ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    xt[ts.ΔⵠΔᐃᐃⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    xt[ts.ⲆⲆΔΔΔᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    xt[ts.ΔᐃΔᐃΔⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    xt[ts.ⵠⵠΔᐃΔⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    xt[ts.ΔΔⵠⲆⲆ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    xt[ts.Δⵠⵠⵠᐃ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    xt[ts.ΔⵠⲆⵠᐃ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    xt[ts.ΔⵠⲆΔᐃ] = ["Lava Spear", "Doing good or doing evil", fj[$g], "Building Damage: 8"];
    xt[ts.ΔⵠⲆⲆⲆ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    xt[ts.ⲆᐃΔⵠⲆ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    xt[ts.ᐃᐃⲆᐃⲆ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    xt[ts.ⲆΔⵠⵠⵠ] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    xt[ts.ΔⲆΔΔΔ] = ["Flame", "It's hot!"];
    xt[ts.ⵠᐃⵠⲆⲆ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    xt[ts.ΔΔᐃⲆᐃ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    xt[ts.ⵠⲆⵠⵠⵠ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    xt[ts.ⲆⲆⵠΔ] = ["Reidite", "The ultimate ore"];
    xt[ts.ⵠᐃⵠⵠⵠ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Bt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Bt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Bt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Bt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Bt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Bt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Bt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Bt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Bt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Bt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Bt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Bt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Bt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Bt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Bt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Bt[38] = ["You died crushed by an angry baby mammoth."];
    Bt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Bt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    xt[ts.ⵠΔᐃⵠⲆ] = [fj[xs], "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⲆⵠΔⵠⲆⵠ] = "A sandstorm is approaching in a few seconds.";
    xt[ⲆⲆΔΔ.ⵠⲆΔᐃᐃⵠΔ] = "The sandstorm will soon stop.";
    xt[ⲆⲆΔΔ.ⲆΔᐃᐃΔᐃⲆ] = "A blizzard is approaching in a few seconds.";
    xt[ⲆⲆΔΔ.ᐃᐃᐃᐃⵠⲆᐃ] = "The blizzard will soon stop.";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " BACK TO THE GAME";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Share on Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Share on Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Kill";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Days survived";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Building method: Free. Press G to change";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Building method: Grid. Press G to change";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["Hand"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["Dirt", "Dirty!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["Sand", "I got it in my eyes!"];
    xt[ts.ᐃⲆᐃΔ] = ["Wood", "You can't get enough of it!"];
    xt[ts.ⵠΔΔⲆ] = ["Stone", "Also called a rock"];
    xt[ts.ΔᐃⲆⲆ] = ["Gold", "Be generous, give it to others"];
    xt[ts.ᐃⲆΔⵠ] = ["Diamond", "What will you make with it?"];
    xt[ts.ⲆΔⲆᐃ] = ["Amethyst", "It's Mauve like Lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["Flour", "Used in cooking"];
    xt[ts.ᐃⵠΔᐃΔ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["Candies", "Only for children!", "Food: 20"];
    xt[ts.ΔⲆᐃⵠΔ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["Garland", "Perfect decoration for roofs"];
    xt[ts.ⵠΔⵠⲆΔ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["Berry", "Berry tasty!", "Food: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    xt[ts.ᐃΔΔⲆⵠ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    xt[ts.ΔΔΔⵠΔ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    xt[ts.ᐃⵠᐃΔΔ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    xt[ts.ΔΔΔᐃⲆ] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["Thorn bush", "It stings!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["Ice", "Useful for making cakes and water"];
    xt[ts.ᐃⲆΔⲆΔ] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["Rabbit Fur", "That rabbit was so cute..."];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["Pure Fur", "You're a bread factory"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["Dark Fur", "You get ready to do something wrong"];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["Winter Fur", "These animals just wanted a hug..."];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["Scales", "It smells like fish!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["Kraken Skin", "Weren't you too scared?"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    xt[ts.ΔⲆΔⵠΔ] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    xt[ts.ΔᐃⵠΔᐃ] = ["Workbench", "Very useful to craft all kinds of objects"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["Cord", "Used in crafting Hats and Bag"];
    xt[ts.ⵠΔⲆᐃⵠ] = ["Diamond Cord", "Used in crafting Special Hats"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["Chest", "Allows you to store items", "Durability: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", fj[_r], "Building Damage: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    xt[ts.ⲆⵠΔⵠΔ] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    xt[ts.ⵠᐃΔΔᐃ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    xt[ts.ᐃᐃΔΔⵠ] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    xt[ts.ΔᐃΔᐃΔ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    xt[ts.ⲆΔⲆΔᐃ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    xt[ts.ⵠΔΔΔᐃ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    xt[ts.ⵠᐃΔΔⵠ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    xt[ts.ⵠⲆⲆΔⵠ] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    xt[ts.ΔΔⵠⵠⲆ] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    xt[ts.ᐃⲆⵠⵠⲆ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    xt[ts.ΔΔⲆⵠⲆ] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    xt[ts.ⵠΔΔⵠⵠ] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    xt[ts.ᐃⲆⲆΔⲆ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    xt[ts.ΔⵠᐃⵠΔ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    xt[ts.ΔⲆⵠⵠⲆ] = ["Green Gemstone", "You didn't cheat, promise?"];
    xt[ts.ΔⵠⲆΔⵠ] = ["Orange Gemstone", "Only a real pirate can find it!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["Blue Gemstone", "For too kind people"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["Empty Bottle", "You can fill this bottle near a water source"];
    xt[ts.ΔᐃΔⲆⵠ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["Bag", "More space for your items!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["Paper", "Used in book-crafting"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["Lock", "Allow you to lock your chest"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["Lock-pick", "Allows you to unlock one chest"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    xt[ts.ⲆⲆΔΔΔ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["Sign", "Leave a message to others", "Durability: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["Well", "Allows bottle filling", "Durability: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    xt[ts.ⲆΔΔᐃⲆ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    xt[ts.ⲆΔΔΔΔ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "You cannot join this server";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "Kicked: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "Your key is already used by someone else";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "Your key is wrong";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "You have an old version, you need to clear your cache";
    xt[ⲆⲆΔΔ.ᐃⵠᐃⵠⵠᐃᐃ] = "Your client version is too recent for this server. The server is being updated";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆᐃⵠⵠ] = "Wrong password! To enter a password: https://starve.io/?password=...";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "There are no more new resources";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "You survived 1 day";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "You survived ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " days";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "You are dead ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "Server cannot find spawn location! Spam the play button!";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "Server is full! Spam the play button!";
    xt[ⲆⲆΔΔ.EMPTY] = "Resource is empty";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "Inventory is full (right-click to empty items)";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " is dead";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "This is not the right tool";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "You joined a team";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "You are dead";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = " joined the team";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "Your team was destroyed";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = "You left the team";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " left the team";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "Someone stole your token :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "Choose a server";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "players";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "total players";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "players on this mode";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Bt[fs] = ["You were killed for no reason"];
    Bt[Ng] = ["You starved to death, as the name of the game implies"];
    Bt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Bt[yr] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Bt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Bt[Gs] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Bt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Bt[Wg] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Bt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Bt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Bt[j] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Bt[wh] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Bt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Bt[_h] = ["You died of thirst. Better drink your own piss."];
    Bt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Bt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Bt[ih] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Bt[17] = ["Your skin's falling apart, the sun killed you."];
    Bt[18] = ["Garlic stored in your pockets boiled your brain."];
    Bt[19] = ["As a vampire, don't stand near the garlic cloves."];
    Bt[Aa] = ["You ate garlic as a vampire, what did you expect?"];
    Bt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function kt(a, b) {
    Le(Ak, a, b);
    return ~(zk[ho] & 35256) & zk[0] | ~(zk[dt] & 35256) & 35256;
  }
  const lt = jg;
  function mt(b, c, d, e, f) {
    const g = b ^ 39736;
    const i = (16 << (e & 255)) + (24 << (e >> 24 & 255)) + (0 << (e >> 8 & 255)) + (8 << (e >> 16 & 255));
    const a = (~(g & 8435) & 8435 | ~(g & 8435) & g) ^ 39346;
    const j = (0 << ((a ^ i) & 255)) + (24 << ((a ^ i) >> 8 & 255)) + (16 << ((a ^ i) >> 16 & 255)) + (8 << ((a ^ i) >> 24 & lh));
    return ~(j & 26964) & 26964 | ~(j & 26964) & j;
  }
  const nt = Rh;
  function ot() {
    xt[ts.ⵠᐃⵠⵠⵠ] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    xt[ts.ⵠΔᐃⵠⲆ] = [fj[Fl], "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " BACK TO THE GAME";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Share on Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Share on Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Kill";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Days survived";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Building method: Free. Press G to change";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Building method: Grid. Press G to change";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = fj[Aq];
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < qh; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["Рука"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["Земля", "Грязно!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["Песок", "Он в моих глазах!"];
    xt[ts.ᐃⲆᐃΔ] = ["Дерево", "Постоянно нужно больше!"];
    xt[ts.ⵠΔΔⲆ] = ["Камень", "Твердый"];
    xt[ts.ΔᐃⲆⲆ] = ["Золото", "Будьте щедры, давайте его другим"];
    xt[ts.ᐃⲆΔⵠ] = ["Алмаз", "Что вы создадите с помощью него?"];
    xt[ts.ⲆΔⲆᐃ] = ["Аметист", "Он сиреневый, как Lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["Мука", "Используется в готовке"];
    xt[ts.ᐃⵠΔᐃΔ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["Конфеты", "Только для детей!", "Еда: 20"];
    xt[ts.ΔⲆᐃⵠΔ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["Гирлянда", "Прекрасная декорация для крыши"];
    xt[ts.ⵠΔⵠⲆΔ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    xt[ts.ᐃΔΔⲆⵠ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    xt[ts.ΔΔΔⵠΔ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    xt[ts.ᐃⵠᐃΔΔ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    xt[ts.ΔΔΔᐃⲆ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["Колючий Куст", "Это больно!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["Лёд", "Используется для изготовления тортов и воды"];
    xt[ts.ᐃⲆΔⲆΔ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["Чёрная Шкура", "Вы готовы делать зло."];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["Чешуя", "Она пахнет рыбой!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["Шкура Кракена", "Вы не испугались?"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    xt[ts.ΔⲆΔⵠΔ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    xt[ts.ΔᐃⵠΔᐃ] = ["Верстак", "Необходим для создания многих предметов"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    xt[ts.ⵠΔⲆᐃⵠ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    xt[ts.ⲆⵠΔⵠΔ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    xt[ts.ⵠᐃΔΔᐃ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    xt[ts.ᐃᐃΔΔⵠ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    xt[ts.ΔᐃΔᐃΔ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    xt[ts.ⵠΔΔΔᐃ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    xt[ts.ⵠᐃΔΔⵠ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    xt[ts.ⵠⲆⲆΔⵠ] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    xt[ts.ΔΔⵠⵠⲆ] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    xt[ts.ΔΔⲆⵠⲆ] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    xt[ts.ⵠΔΔⵠⵠ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    xt[ts.ᐃⲆⲆΔⲆ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["Шар Дракона", "Даётся за квест"];
    xt[ts.ΔⵠᐃⵠΔ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    xt[ts.ΔⲆⵠⵠⲆ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    xt[ts.ΔⵠⲆΔⵠ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    xt[ts.ΔᐃΔⲆⵠ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["Рюкзак", "Больше места для ваших предметов!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["Бумага", "Используется при создании книги"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    xt[ts.ⲆⲆΔΔΔ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["Крыша", "Немного скрывает вас и согревает!"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    xt[ts.ⲆΔΔᐃⲆ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    xt[ts.ⲆΔΔΔΔ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "Вы не можете зайти на этот сервер";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "Выгнаны: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "Ваш ключ уже используется кем-то";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "Ваш ключ неправильный";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "У вас старая версия, вам нужно очистить кеш";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "Ресурсов больше нет";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "Вы выжили 1 день";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "Вы выжили ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " дней";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "Вы умерли ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "Сервер заполнен! Спамьте кнопку играть!";
    xt[ⲆⲆΔΔ.EMPTY] = "Ресурсы закончились";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " умер";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "Это не тот инструмент";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "Вы вошли в команду";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "Вы умерли";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = " вошёл в команду";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "Ваша команда была разрушена";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = "Вы покинули команду";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " покинул команду";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "Кто-то использует ваш токен :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "Выберите сервер";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "игроков";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "игроков всего";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "игроков в этом режиме";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Bt[0] = ["Вы были убиты без причины"];
    Bt[y] = ["Вы умерли от голода, как название игры подразумевает это"];
    Bt[nl] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Bt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Bt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Bt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Bt[dn] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Bt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Bt[Os] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Bt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Bt[j] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Bt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Bt[mk] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Bt[cj] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Bt[yo] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Bt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Bt[Un] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Bt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Bt[Uh] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Bt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Bt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Bt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function pt(a, b, c, d) {
    Ze(Ak, a, b, c, d);
    return ((63 + ($c(zk[0], zk[bq], zk[2], zk[3]) ^ function (a, b, c) {
      Ti(Ak, a, b, c);
      const d = Eo(zk[fs], zk[or], zk[2], zk[0]);
      const e = function (a, b, c) {
        Kj(Ak, a, b, c);
        const d = cw(zk[Ob], zk[1], zk[uj], zk[0], zk[bt]);
        const e = function (b, c, d, e, f, g) {
          wj(Ak, b, c, d, e, f, g);
          const h = function (a, b, c, d) {
            Oi(Ak, a, b, c, d);
            const e = cw(zk[0], zk[Zk], zk[2], zk[Qq], zk[jg]);
            So(zk[Dj], zk[kg], zk[3], zk[dh], zk[El]);
            return ~(e & 46317) & (e | 46317);
          }(zk[jg], zk[Ws], zk[Xj], zk[3]);
          const a = cw(zk[4], zk[5], zk[Et], zk[1], zk[2]);
          return ((90 + (h ^ a)) * 8121 + 28411) % 134456;
        }(zk[cn], zk[ks], zk[1], zk[2], zk[0], zk[1]);
        return (fs << ((d ^ e) >> 16 & wa)) + (24 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) >> Cr & 255)) + (16 << ((d ^ e) & 255));
      }(zk[kr], zk[2], zk[0]);
      return ((172 + (d ^ e)) * 8121 + 28411) % 134456;
    }(zk[vl], zk[1], zk[2]))) * 48271 + 0) % 2147483647;
  }
  function qt() {
    xt[ts.ⵠᐃⵠⵠⵠ] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    xt[ts.ⵠΔᐃⵠⲆ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " BACK TO THE GAME";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Share on Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Share on Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Kill";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Days survived";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Building method: Free. Press G to change";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Building method: Grid. Press G to change";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = fj[qr];
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["mão"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["terra", "está sujo!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["areia", "entrou nos meus olhos!"];
    xt[ts.ᐃⲆᐃΔ] = ["madeira", "você não pode pegar o suficiente disso!"];
    xt[ts.ⵠΔΔⲆ] = ["pedra", "também chamado rocha"];
    xt[ts.ΔᐃⲆⲆ] = ["ouro", "seja generoso, dê para outros"];
    xt[ts.ᐃⲆΔⵠ] = ["diamante", "o que você irá fazer com isso?"];
    xt[ts.ⲆΔⲆᐃ] = ["ametista", "é mauve como lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["farinha", "usada na cozinha"];
    xt[ts.ᐃⵠΔᐃΔ] = ["biscoito", "biscoito da vovó", "comida: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["doces", "apenas para crianças!", "comida: 100"];
    xt[ts.ΔⲆᐃⵠΔ] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["pisca-pisca", "decoração perfeita de telhado"];
    xt[ts.ⵠΔⵠⲆΔ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["berry", "Berry saborosa!", "comida: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    xt[ts.ᐃΔΔⲆⵠ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    xt[ts.ΔΔΔⵠΔ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    xt[ts.ᐃⵠᐃΔΔ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    xt[ts.ΔΔΔᐃⲆ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["mato de espinhos", "pica!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["gelo", "útil para fazer bolo e água"];
    xt[ts.ᐃⲆΔⲆΔ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["pele de coelho", "o coelho era tão fofo..."];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["pele pura", "você é uma fábrica de pão"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["pele negra", "você está pronto para fazer algo errado"];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["pele de inverno", "ele só queria um abraço"];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["escala", "é pequeno como peixe!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["pele do kraken", "você não está com medo?"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    xt[ts.ΔⲆΔⵠΔ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    xt[ts.ΔᐃⵠΔᐃ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["linha", "usada para fazer chapéus e mochila"];
    xt[ts.ⵠΔⲆᐃⵠ] = ["linha de diamante", "usada para fazer chapéus especiais"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    xt[ts.ⲆⵠΔⵠΔ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    xt[ts.ⲆᐃⲆⵠⲆⵠⵠⲆΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", fj[Xs]];
    xt[ts.ᐃᐃΔΔⵠ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", fj[zs]];
    xt[ts.ΔᐃΔᐃΔ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    xt[ts.ⵠΔΔΔᐃ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    xt[ts.ⵠᐃΔΔⵠ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    xt[ts.ⵠⲆⲆΔⵠ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    xt[ts.ΔΔⵠⵠⲆ] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    xt[ts.ΔΔⲆⵠⲆ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    xt[ts.ⵠΔΔⵠⵠ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    xt[ts.ᐃⲆⲆΔⲆ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["esfera do dragão", "dado na questt"];
    xt[ts.ΔⵠᐃⵠΔ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    xt[ts.ΔⲆⵠⵠⲆ] = ["pedra verde", "você não vai trapacear, promete?"];
    xt[ts.ΔⵠⲆΔⵠ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["pedra azul", "para pessoas muito gentis"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    xt[ts.ΔᐃΔⲆⵠ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["regador", "permite regar as plantas", "dano: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["mochila", "mais espaço para seus itens!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["papel", "usado para fazer o livro"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["fechadura", "permite você trancar seu baú"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["chave", "permite destrancar um baú"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    xt[ts.ⲆⲆΔΔΔ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["telhado", "esconde você um pouco e te esquenta!"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    xt[ts.ⲆΔΔᐃⲆ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    xt[ts.ⲆΔΔΔΔ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "você não pode entrar no servidor";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "kickado: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "sua chave está em uso por outra pessoa";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "sua chave está errada";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "você tem uma versão velha, limpe seu cache";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "não tem mais recursos";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "você sobreviveu 1 dia";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "você sobreviveu ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " dias";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "você está morto ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "servidor está cheio! spam o botão de play!";
    xt[ⲆⲆΔΔ.EMPTY] = "não tem recursos";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "inventário está cheio (botão direito para deletar itens)";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " está morto";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "essa não é a ferramenta certa";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "você entrou no time";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "você está morto";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = "entrou no time";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "seu time foi destruido";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = "você saiu do time";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " saiu do time";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "alguém roubou sua ficha :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "escolha um servidor";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "jogadores";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "jogadores totais";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "jogadores nesse modo";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Bt[0] = ["você morreu sem motivo"];
    Bt[1] = ["você morreu de fome, como o jogo diz"];
    Bt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Bt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Bt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Bt[hg] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Bt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Bt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Bt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Bt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Bt[Ys] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Bt[Dg] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Bt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Bt[ao] = ["você morreu de sede. melhor beber sua própria urina."];
    Bt[Qk] = ["você sabia que você morre afogado? agora você sabe."];
    Bt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Bt[ih] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Bt[gl] = ["sua pele caindo aos pedaços, o sol te matou."];
    Bt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Bt[19] = ["como vampiro, não chegue perto do alho."];
    Bt[Fq] = ["você comeu alho como vampiro, o que você esperava?"];
    Bt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const rt = Vs;
  function st() {
    xt[ts.ⵠᐃⵠⵠⵠ] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    xt[ts.ⵠΔᐃⵠⲆ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " BACK TO THE GAME";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Share on Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Share on Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Kill";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Days survived";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Building method: Free. Press G to change";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Building method: Grid. Press G to change";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < He; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["Mano"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["Tierra", "¡Tan limpia como mis manos!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["Arena", "¡Tengo arena en mis ojos!"];
    xt[ts.ᐃⲆᐃΔ] = ["Madera", "¡Nunca hay suficiente!"];
    xt[ts.ⵠΔΔⲆ] = ["Piedra", "También llamada roca."];
    xt[ts.ΔᐃⲆⲆ] = ["Oro", "Sé generoso, compártelo con los otros"];
    xt[ts.ᐃⲆΔⵠ] = ["Diamante", "¿Que vas a hacer con él?"];
    xt[ts.ⲆΔⲆᐃ] = ["Amatista", "Es Mauve como Lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["Harina", "Usada para cocinar."];
    xt[ts.ᐃⵠΔᐃΔ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    xt[ts.ΔⲆᐃⵠΔ] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["Guirnalda", "Perfecta para decorar el techo"];
    xt[ts.ⵠΔⵠⲆΔ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["Baya", "No es venenosa.", "Comida: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    xt[ts.ᐃΔΔⲆⵠ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    xt[ts.ΔΔΔⵠΔ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    xt[ts.ᐃⵠᐃΔΔ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    xt[ts.ΔΔΔᐃⲆ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["Planta de Espinas", "¡Te daña!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["Hielo", "Bueno para hacer tartas y agua"];
    xt[ts.ᐃⲆΔⲆΔ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["Escamas", "¡Huele a pescado!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    xt[ts.ΔⲆΔⵠΔ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    xt[ts.ΔᐃⵠΔᐃ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["Hilo", "Usado para craftear ropa y mochila"];
    xt[ts.ⵠΔⲆᐃⵠ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    xt[ts.ⲆⵠΔⵠΔ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    xt[ts.ⵠᐃΔΔᐃ] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    xt[ts.ᐃᐃΔΔⵠ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    xt[ts.ΔᐃΔᐃΔ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    xt[ts.ⵠΔΔΔᐃ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    xt[ts.ⵠᐃΔΔⵠ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    xt[ts.ⵠⲆⲆΔⵠ] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    xt[ts.ΔΔⵠⵠⲆ] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    xt[ts.ΔΔⲆⵠⲆ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    xt[ts.ⵠΔΔⵠⵠ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    xt[ts.ᐃⲆⲆΔⲆ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["Esfera del Dragón", "Dada en la misión"];
    xt[ts.ΔⵠᐃⵠΔ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    xt[ts.ΔⲆⵠⵠⲆ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    xt[ts.ΔⵠⲆΔⵠ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["Gema Azul", "Para gente muy amable"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["Botella Vacia", "La puedes llenar de agua"];
    xt[ts.ΔᐃΔⲆⵠ] = ["Regadera Vacía", "La tienes que llenar de agua"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["Mochila", "¡Mas espacio para tus cosas!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["Hoja", "Usada para hacer un libro"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["Cerradura", "Te permite cerrar tu cofre"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["Llave", "Te permite abrir un cofre cerrado"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    xt[ts.ⲆⲆΔΔΔ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["Techo", "Te esconde un poco y te protege del frío"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    xt[ts.ⲆΔΔᐃⲆ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    xt[ts.ⲆΔΔΔΔ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "No puedes unirte a este servidor";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "Expulsado: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "Tu llave ya está usada";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "Tu llave está mal";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "Tienes una versión antigua, limpia tu cache";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "No hay mas recursos";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "Has sobrevivido 1 día";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "Has sobrevivido ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " días";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "Estás muerto ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    xt[ⲆⲆΔΔ.EMPTY] = "Recurso vacio";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " está muerto";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "Esta no es la herramienta correcta";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "Te has unido a un equipo";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "Estás muerto";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = " se unió al equipo";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "Tu equipo ha sido destruido";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = "Has dejado el equipo";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " dejo el equipo ";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "Alguien te robó tu token :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "Elige un servidor";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "jugadores";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "total de jugadores";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "Jugadores en este modo de juego";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Bt[lt] = ["Has muerto por ninguna razón"];
    Bt[Zn] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Bt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Bt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Bt[Kg] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Bt[ul] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Bt[iq] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Bt[at] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Bt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Bt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Bt[jl] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Bt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Bt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Bt[ao] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Bt[D] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Bt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Bt[gt] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Bt[Lk] = ["Tu piel se cayó, el sol te quemó."];
    Bt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Bt[Hj] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Bt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Bt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const tt = Rj;
  function ut() {
    xt[ts.ⵠᐃⵠⵠⵠ] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    xt[ts.ⵠΔᐃⵠⲆ] = [fj[qa], "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " BACK TO THE GAME";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Share on Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Share on Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Kill";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Days survived";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Building method: Free. Press G to change";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Building method: Grid. Press G to change";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["Hand"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["Boden", "Dreckig!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    xt[ts.ᐃⲆᐃΔ] = ["Holz", "Du kannst niemals zu viel haben!"];
    xt[ts.ⵠΔΔⲆ] = ["Stein", "Auch Fels gennant"];
    xt[ts.ΔᐃⲆⲆ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    xt[ts.ᐃⲆΔⵠ] = ["Diamant", "Was wirst du daraus machen?"];
    xt[ts.ⲆΔⲆᐃ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["Mehl", "wird fürs Backen gebraucht"];
    xt[ts.ᐃⵠΔᐃΔ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    xt[ts.ΔⲆᐃⵠΔ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["Girlande", "perfekter Schmuck für Dächer"];
    xt[ts.ⵠΔⵠⲆΔ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["Beere", "Beeren lecker!", "Essen: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    xt[ts.ᐃΔΔⲆⵠ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    xt[ts.ΔΔΔⵠΔ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    xt[ts.ᐃⵠᐃΔΔ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    xt[ts.ΔΔΔᐃⲆ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["Dornenbusch", "Es sticht!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    xt[ts.ᐃⲆΔⲆΔ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["Hasenfell", "Der Hase war so süß..."];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["Klares Fell", "Du bist eine Brotfabrik"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["Schuppen", "Es riecht wie Fisch!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    xt[ts.ΔⲆΔⵠΔ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    xt[ts.ΔᐃⵠΔᐃ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    xt[ts.ⵠΔⲆᐃⵠ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    xt[ts.ⲆⵠΔⵠΔ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    xt[ts.ⵠᐃΔΔᐃ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    xt[ts.ᐃᐃΔΔⵠ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    xt[ts.ΔᐃΔᐃΔ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ⵠΔΔΔᐃ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ⵠᐃΔΔⵠ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ⵠⲆⲆΔⵠ] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ΔΔⵠⵠⲆ] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    xt[ts.ΔΔⲆⵠⲆ] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ⵠΔΔⵠⵠ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    xt[ts.ᐃⲆⲆΔⲆ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    xt[ts.ΔⵠᐃⵠΔ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    xt[ts.ΔⲆⵠⵠⲆ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    xt[ts.ΔⵠⲆΔⵠ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["Blauer Edelstein", "Für sehr nette Leute"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    xt[ts.ΔᐃΔⲆⵠ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["Rucksack", "Mehr Platz im Inventar!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["Papier", "Wird fürs Büchermachen verwendet"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    xt[ts.ⲆⲆΔΔΔ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    xt[ts.ⲆΔΔᐃⲆ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    xt[ts.ⲆΔΔΔΔ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "Du kannst diesem Server nicht beitreten";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "Gekickt: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "Dein Schlüssel ist falsch";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "Deine Version ist veraltet, säubere dein Cache";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "Es gibt keine neuen Ressourcen";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "Du hast einen Tag überlebt";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "Du hast überlebt ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " Tage";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "Du bist gestorben ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "Server ist voll! Drücke immer wieder auf spielen!";
    xt[ⲆⲆΔΔ.EMPTY] = "Ressource ist leer";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " ist gestorben";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "Das ist nicht das richtige Werkzeug";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "Du bist einem Team beigetreten";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "Du bist gestorben";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = " ist dem Team beigetreten";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "Dein Team wurde zerstört";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = "Du hast das Team verlassen";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " hat das Team verlassen";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "Jemand hat dein Token gestohlen :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "Suche dir ein Server aus";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "Spieler";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "alle Spieler";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "Spieler in diesem Modus";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Bt[dt] = ["Du wurdest ohne Grund getötet"];
    Bt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Bt[cn] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Bt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Bt[xs] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Bt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Bt[rt] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Bt[Wg] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Bt[ct] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Bt[Yh] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Bt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Bt[Co] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Bt[Fh] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Bt[Bl] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Bt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Bt[M] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Bt[_q] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Bt[$a] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Bt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Bt[Tg] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Bt[tl] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Bt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function vt() {
    xt[ts.ⵠᐃⵠⵠⵠ] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    xt[ts.ⵠΔᐃⵠⲆ] = [fj[Fl], "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " BACK TO THE GAME";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Share on Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Share on Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Kill";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Days survived";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Building method: Free. Press G to change";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Building method: Grid. Press G to change";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = fj[Zs];
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = dt; a < sg; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["Ręka"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["Ziemia", "Brudna!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["Piasek", "Mam go w oczach!"];
    xt[ts.ᐃⲆᐃΔ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    xt[ts.ⵠΔΔⲆ] = ["Kamień", "Także nazywany skałą"];
    xt[ts.ΔᐃⲆⲆ] = ["Złoto", "Bądź hojny, daj trochę innym"];
    xt[ts.ᐃⲆΔⵠ] = ["Diament", "Co z nim zrobisz?"];
    xt[ts.ⲆΔⲆᐃ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["Mąka", "Używana w gotowaniu"];
    xt[ts.ᐃⵠΔᐃΔ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    xt[ts.ΔⲆᐃⵠΔ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["Girlanda", "Idealna do dekorowania dachów"];
    xt[ts.ⵠΔⵠⲆΔ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    xt[ts.ᐃΔΔⲆⵠ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    xt[ts.ΔΔΔⵠΔ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    xt[ts.ᐃⵠᐃΔΔ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    xt[ts.ΔΔΔᐃⲆ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["Kolczasty krzew", "Kłuje!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["Lód", "Użyteczny do robienia ciast i wody"];
    xt[ts.ᐃⲆΔⲆΔ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["Skóra", "Jesteś fabryką chleba"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["Łuski", "Pachnie jak ryba!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    xt[ts.ΔⲆΔⵠΔ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    xt[ts.ΔᐃⵠΔᐃ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    xt[ts.ⵠΔⲆᐃⵠ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    xt[ts.ⲆⵠΔⵠΔ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    xt[ts.ⵠᐃΔΔᐃ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    xt[ts.ᐃᐃΔΔⵠ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    xt[ts.ΔᐃΔᐃΔ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["Kamienny młot", fj[Nh], "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["Złoty młot", fj[zg], "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["Diamentowy młot", fj[Gr], "Obrażenia: 4", "Obrażenia do budowli: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    xt[ts.ⵠΔΔΔᐃ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    xt[ts.ⵠᐃΔΔⵠ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    xt[ts.ⵠⲆⲆΔⵠ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    xt[ts.ΔΔⵠⵠⲆ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    xt[ts.ΔΔⲆⵠⲆ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    xt[ts.ⵠΔΔⵠⵠ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    xt[ts.ᐃⲆⲆΔⲆ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["Smocza kula", "Zdobyta podczas zadania"];
    xt[ts.ΔⵠᐃⵠΔ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    xt[ts.ΔⲆⵠⵠⲆ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    xt[ts.ΔⵠⲆΔⵠ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    xt[ts.ΔᐃΔⲆⵠ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["Papier", "Używany w tworzeniu książki"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    xt[ts.ⲆⲆΔΔΔ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    xt[ts.ⲆΔΔᐃⲆ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    xt[ts.ⲆΔΔΔΔ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "Nie możesz dołączyć do tego serwera";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "Wyrzucony: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "Twój klucz jest aktualnie używany przez innego gracza";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "Twój klucz jest nieprawidłowy";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "Przeżyłeś 1 dzień";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "Przeżyłeś ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " dni";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "Jesteś martwy ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    xt[ⲆⲆΔΔ.EMPTY] = "Źródło jest puste";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " jest martwy";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "To nie jest właściwe narzędzie";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "Dołączyłeś do drużyny";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "Jesteś martwy";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = " dołączył do drużyny";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "Twoja drużyna została zniszczona";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = " Opuściłeś drużynę";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " opuścił drużynę";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "Ktoś ukradł twój żeton :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "Wybierz serwer";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "graczy";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "wszystkich graczy";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "graczy w tym trybie";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Bt[ho] = ["Zostałeś zabity bez powodu"];
    Bt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Bt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Bt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Bt[Ah] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Bt[hg] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Bt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Bt[at] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Bt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Bt[ya] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Bt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Bt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Bt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Bt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Bt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Bt[M] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Bt[ih] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Bt[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Bt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Bt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Bt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Bt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function wt() {
    xt[ts.ⵠᐃⵠⵠⵠ] = ["You feel a great power emanating from this orb"];
    Bt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    xt[ts.ⵠΔᐃⵠⲆ] = [fj[Eg], "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] = " RETOUR AU JEU";
    xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] = " Partage sur Twitter";
    xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] = " Partage sur Facebook";
    xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    xt[ⲆⲆΔΔ.POINTS] = "points";
    xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] = "Score";
    xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] = "Tués";
    xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] = "Jours survécus";
    xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ] = "Mode de construction: Libre. Appuie sur G pour changer";
    xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ] = "Mode de construction: Grille. Appuie sur G pour changer";
    xt[ts.ᐃⲆⵠΔⵠ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    xt[ts.ⵠΔᐃⲆᐃ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    xt[ts.ⵠΔᐃΔⲆ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    xt[ts.ⵠΔⵠⵠⲆ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < Do; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    xt[ts.ⵠⵠᐃᐃᐃ] = ["Main"];
    xt[ts.ⲆᐃᐃᐃⲆ] = ["Terre", "C'est sale!"];
    xt[ts.ΔΔⲆᐃⲆ] = ["Sable", "J'en ai dans les yeux"];
    xt[ts.ᐃⲆᐃΔ] = ["Bois", "Tu n'en auras jamais trop!"];
    xt[ts.ⵠΔΔⲆ] = ["Pierre", "Aussi appelée roche"];
    xt[ts.ΔᐃⲆⲆ] = ["Or", "Sois généreux, donne en aux autres"];
    xt[ts.ᐃⲆΔⵠ] = ["Diamant", "Comme tes yeux! wesh"];
    xt[ts.ⲆΔⲆᐃ] = ["Améthyste", "C'est Mauve comme Lapa"];
    xt[ts.ᐃⲆⵠⵠⵠ] = ["Farine", "Utile pour la cuisine"];
    xt[ts.ᐃⵠΔᐃΔ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    xt[ts.ᐃⲆⲆⵠΔ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    xt[ts.ⲆΔⲆᐃᐃ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    xt[ts.ⵠⵠⵠⵠᐃ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    xt[ts.ⵠᐃⲆⲆⲆ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    xt[ts.ᐃⵠⵠΔⵠ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    xt[ts.ⲆⲆⲆⵠⲆ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    xt[ts.Ⲇⵠᐃᐃⵠ] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    xt[ts.ᐃΔⲆⵠᐃ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    xt[ts.ΔⲆᐃⵠΔ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    xt[ts.ᐃᐃᐃⵠΔ] = ["Guirlandes", "Utilisable sur les toits"];
    xt[ts.ⵠΔⵠⲆΔ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    xt[ts.ⲆⲆⵠᐃᐃ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    xt[ts.ΔᐃΔⲆⲆ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    xt[ts.ᐃΔΔⲆⵠ] = ["Blé", "Peut être transformé en farine dans les moulins"];
    xt[ts.ΔΔΔⵠΔ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    xt[ts.ᐃⵠᐃΔΔ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    xt[ts.ⵠⵠⲆΔⵠ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    xt[ts.ⵠⲆⲆᐃΔ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    xt[ts.ΔΔΔᐃⲆ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    xt[ts.ⲆᐃᐃⵠⲆ] = ["Ronces", "Ça pique!"];
    xt[ts.ⲆⵠΔᐃΔ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    xt[ts.ⲆⲆΔΔᐃ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    xt[ts.ᐃⲆΔⲆΔ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    xt[ts.ⲆᐃⲆⵠⲆ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    xt[ts.ᐃⲆᐃⵠⵠ] = ["Peau de lapin", "Vous êtes un monstre"];
    xt[ts.ⲆⲆᐃⲆⲆ] = ["Fourrure blanche", "Tu es une usine à pain"];
    xt[ts.ⵠᐃⲆⵠᐃ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    xt[ts.ᐃⵠⲆᐃⵠ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    xt[ts.ⲆⵠⲆⲆⵠ] = ["Écailles", "Ça sent le poisson!"];
    xt[ts.ⵠⵠⵠΔⵠ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    xt[ts.ᐃⲆΔⲆⵠ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    xt[ts.ΔⲆΔⵠΔ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    xt[ts.ΔᐃⵠΔᐃ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    xt[ts.ᐃⵠΔᐃⵠ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    xt[ts.ⵠΔⲆᐃⵠ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    xt[ts.ⵠⲆⲆⲆΔ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    xt[ts.ⵠⵠⲆⲆⲆ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    xt[ts.ⲆⲆΔᐃⵠ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    xt[ts.ⲆᐃΔⵠⵠ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    xt[ts.ΔᐃⵠΔⲆ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    xt[ts.ᐃⲆΔⵠⵠ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    xt[ts.ⵠΔⲆⵠⲆ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    xt[ts.ᐃⵠⵠⲆᐃ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    xt[ts.ᐃⵠⲆᐃⲆ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    xt[ts.ⲆⵠΔⵠΔ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    xt[ts.ⵠᐃΔΔᐃ] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    xt[ts.ᐃⵠⵠΔΔ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    xt[ts.ᐃᐃΔΔⵠ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    xt[ts.ΔᐃΔᐃΔ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    xt[ts.ᐃⵠⵠᐃⵠ] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    xt[ts.ⲆⵠΔΔⲆ] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    xt[ts.ⲆΔᐃⵠⵠ] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    xt[ts.ᐃᐃΔⵠΔ] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    xt[ts.ᐃᐃⵠⵠᐃ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    xt[ts.ⲆⲆᐃᐃⵠ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    xt[ts.ⲆΔᐃⵠᐃ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    xt[ts.ΔⲆⵠΔᐃ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    xt[ts.ⲆΔΔΔᐃ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    xt[ts.ΔⲆⲆΔⵠ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    xt[ts.ΔⲆᐃΔΔ] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    xt[ts.ΔⵠⲆᐃⵠ] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    xt[ts.ΔⵠⲆⵠⵠ] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    xt[ts.ⲆΔⵠᐃⲆ] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    xt[ts.ⲆⲆᐃⲆΔ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    xt[ts.ΔⵠΔᐃΔ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    xt[ts.ⵠⲆⵠⵠᐃ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    xt[ts.Ⲇᐃᐃᐃⵠ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    xt[ts.ᐃⵠⲆΔⵠ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    xt[ts.ⵠⵠᐃᐃⲆ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    xt[ts.ⵠⲆⲆⵠⲆ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ⵠΔΔΔᐃ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ⵠᐃΔΔⵠ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.Ⲇᐃⵠᐃᐃ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ⵠⲆⲆΔⵠ] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ΔΔⵠⵠⲆ] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ⵠΔⲆᐃⲆ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    xt[ts.ΔΔⲆⵠⲆ] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ⵠⲆᐃⵠⲆ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ⵠΔΔⵠⵠ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    xt[ts.ᐃⲆⲆΔⲆ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    xt[ts.ᐃⵠⲆⲆⲆ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    xt[ts.ΔΔⵠΔⵠ] = ["Orbe du Dragon", "Donné en Quête"];
    xt[ts.ΔⵠᐃⵠΔ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    xt[ts.ΔⲆⵠⵠⲆ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    xt[ts.ΔⵠⲆΔⵠ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    xt[ts.ⲆⵠⲆᐃⲆ] = ["Gemme bleue", "Pour les gens trop gentils"];
    xt[ts.ⲆⲆΔⵠⲆ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    xt[ts.ΔⲆⵠΔⲆ] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    xt[ts.ⵠⲆᐃⵠⵠ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    xt[ts.ⵠᐃⲆΔᐃ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    xt[ts.ᐃᐃⵠΔᐃ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    xt[ts.ⵠⵠⲆΔⲆ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    xt[ts.ᐃᐃⵠΔⵠ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    xt[ts.ΔᐃΔⲆⵠ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    xt[ts.ⵠⲆⲆⲆᐃ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    xt[ts.ⵠⵠᐃΔ] = ["Sac", "Plus de place dans ton inventaire!"];
    xt[ts.ⵠᐃΔⵠⲆ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    xt[ts.ᐃᐃⵠⵠⲆ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    xt[ts.ⵠⲆΔⲆⲆ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    xt[ts.ΔΔⲆⵠΔ] = ["Cadenas", "Pour verrouiller un coffre"];
    xt[ts.ⲆΔⲆⵠᐃ] = ["Clé", "Pour déverrouiller un coffre"];
    xt[ts.ⲆⲆⲆⲆⲆ] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    xt[ts.ⲆⲆΔΔΔ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    xt[ts.ⲆⵠⲆΔⵠ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    xt[ts.ⵠΔᐃΔᐃ] = ["Toit", "Te cache un peu et te réchauffe"];
    xt[ts.ⲆⵠⲆⵠᐃ] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    xt[ts.ⵠⵠⵠⵠⵠ] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    xt[ts.ΔᐃᐃⲆᐃ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    xt[ts.ⵠΔᐃⵠᐃ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    xt[ts.ᐃΔΔΔⲆ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    xt[ts.ⲆᐃΔΔΔ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    xt[ts.ⲆΔΔᐃⲆ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    xt[ts.ⵠᐃⲆᐃᐃ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    xt[ts.ᐃΔⵠᐃᐃ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    xt[ts.ⲆⵠⵠⵠΔ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    xt[ts.ⲆᐃⲆᐃⲆ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    xt[ts.ᐃⲆⵠᐃⲆ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    xt[ts.ᐃᐃᐃΔⵠ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    xt[ts.ᐃⲆΔᐃᐃ] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    xt[ts.ΔΔΔⵠⵠ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    xt[ts.ⵠⵠΔΔΔ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    xt[ts.ⲆΔΔΔΔ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    xt[ts.ⵠᐃΔⵠΔ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    xt[ts.ΔⵠⵠΔⵠ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    xt[ts.ⲆΔᐃⲆᐃ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ] = "Tu ne peux pas rejoindre le serveur";
    xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] = "Expulsé: ";
    xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    xt[ⲆⲆΔΔ.ΔᐃⲆΔᐃⲆⵠ] = "Ta clé est fausse";
    xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ] = "Tu as une vieille version, rafraichis tes caches";
    xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ] = "Il n'y a plus de nouvelles ressources";
    xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] = "Tu as survécu 1 jour";
    xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] = "Tu as survécu ";
    xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ] = " jours";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ] = "Tu es mort ;-;";
    xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ] = "Le serveur est complet! Spam le bouton jouer";
    xt[ⲆⲆΔΔ.EMPTY] = "Cette ressource est vide";
    xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ] = " est mort";
    xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ] = "Ce n'est pas le bon outil";
    xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ] = "Tu as rejoins une équipe";
    xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ] = "Tu es mort";
    xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ] = " a rejoint l'équipe";
    xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ] = "Ton équipe a été détruite";
    xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ] = "Tu as quitté l'équipe";
    xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ] = " a quitté l'équipe";
    xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ] = "Quelqu'un a volé ton token :>";
    xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] = "Choisis un serveur";
    xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] = "joueurs";
    xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] = "joueurs";
    xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] = "joueurs dans ce mode";
    xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Bt[vl] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Bt[Ws] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Bt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Bt[yr] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Bt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Bt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Bt[dn] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Bt[lq] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Bt[Os] = ["Cet ours voulait juste un câlin."];
    Bt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Bt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Bt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Bt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Bt[Ga] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Bt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Bt[Sj] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Bt[Oa] = ["Un kraken a 'kraké' tes os."];
    Bt[Mo] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Bt[Fo] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Bt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Bt[Al] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Bt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ᐃᐃᐃᐃΔ = "Uuunnnggg";
    ᐃⲆⲆⵠⵠⲆΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  var xt = [];
  const yt = vo;
  for (var zt = 0; zt < 344; zt++) {
    xt[zt] = "";
  }
  var Bt = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const Ct = Fa;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      jt();
    } else if (a === "Français") {
      wt();
    } else if (a === "Deutsch") {
      ut();
    } else if (a === "Español") {
      st();
    } else if (a === "Português") {
      qt();
    } else if (a === "Русский") {
      ot();
    } else if (a === "Polski") {
      vt();
    }
    ⵠⵠⵠᐃᐃ = [];
    Sw.ⵠⲆⲆΔ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const Et = ho;
  Qr = "EN";
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Qr = "RU";
      break;
    case "en":
      Qr = "EN";
      break;
    case "es":
      Qr = "SP";
      break;
    case "fr":
      Qr = "FR";
      break;
    case "pl":
      Qr = "PL";
      break;
    case "de":
      Qr = "DE";
      break;
    case "pt":
      Qr = "PT";
  }
  var Ft;
  const Gt = Qh;
  function eb(b, c, d, e) {
    const f = b ^ 37957;
    const g = (0 << (c >> 24 & 255)) + (24 << (c >> 8 & 255)) + (B << (c >> 16 & 255)) + (8 << (c & 255));
    const i = ((36755 + d) * 214013 + 2531011) % 4294967296;
    const a = (18648 + e) % 65368;
    const j = rf(f, g, i, a);
    mw(f, g, i, a);
    return (j | 31496) & ~(j & 31496);
  }
  if (Qr === "FR") {
    $(".md-languages label button").text("Français");
    Ft = wt;
  } else if (Qr === "PL") {
    $(".md-languages label button").text("Polski");
    Ft = vt;
  } else if (Qr === "PT") {
    $(".md-languages label button").text("Português");
    Ft = qt;
  } else if (Qr === "SP") {
    $(".md-languages label button").text("Español");
    Ft = st;
  } else if (Qr === "RU") {
    $(".md-languages label button").text("Русский");
    Ft = ot;
  } else if (Qr === "DE") {
    $(".md-languages label button").text("Deutsch");
    Ft = ut;
  } else {
    $(".md-languages label button").text("English");
    Ft = jt;
  }
  Ⲇᐃ = {
    ⲆΔᐃⵠΔΔⵠⲆᐃ: "img/logo.png",
    ᐃᐃΔΔⵠᐃⲆ: "img/mapday.png",
    ⵠⵠⲆⲆⲆΔᐃ: "img/mapnight.png",
    ⲆⵠΔⵠΔⲆⲆⵠᐃ: "img/bigzday.png",
    ᐃΔⲆⵠⲆᐃΔΔΔ: "img/bigznight.png",
    ΔΔΔⵠⵠΔⲆ: "img/bigday-river1.png",
    ⲆΔⵠΔΔⵠᐃⵠΔ: "img/bigday-lake.png",
    ⵠⵠⲆΔᐃⵠᐃ: "img/bigday-berry.png",
    ΔᐃΔⵠⲆⵠΔ: "img/bigday-stone1.png",
    ΔᐃⲆⲆᐃᐃᐃ: "img/bigday-stone2.png",
    ⵠᐃⲆᐃΔΔΔ: "img/bigday-gold1.png",
    ⵠⲆⵠᐃⲆᐃΔ: "img/bigday-gold2.png",
    ⵠⵠⵠΔⵠΔΔ: "img/bigday-emerald1.png",
    ΔΔⲆΔᐃⵠⲆ: "img/bigday-emerald2.png",
    ⲆⵠⵠⲆΔⵠⵠ: "img/bigday-amethyst.png",
    ⵠΔⲆᐃⲆΔΔ: "img/bigday-bear.png",
    ⲆΔΔᐃᐃⵠΔ: "img/bigday-cave.png",
    ΔⲆⲆᐃΔⵠΔ: "img/bigday-diamond.png",
    ᐃΔⲆΔᐃⵠⵠ: "img/bigday-island.png",
    ᐃᐃⵠΔᐃᐃⵠ: "img/bigday-reidite.png",
    ΔⵠⵠⲆⲆⲆⵠ: "img/bigday-spider.png",
    ΔⲆⲆⲆΔⲆΔ: "img/bigday-wolf.png",
    ⲆᐃⵠΔΔΔΔ: "img/bigday-fir-tree.png",
    ⵠⲆΔⲆΔⲆⲆ: "img/bigday-fox.png",
    ᐃᐃᐃᐃⲆⲆΔ: "img/bigday-kraken.png",
    ⵠΔⵠⲆⲆᐃΔ: "img/bigday-piranha.png",
    ΔⵠΔᐃⲆΔΔ: "img/bigday-cactus.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/bigday-magma.png",
    ⲆⵠᐃⵠⲆΔⲆ: "img/bigday-river1.png",
    ⵠⲆⵠᐃΔⵠΔⲆΔ: "img/bignight-lake.png",
    ⵠᐃⵠⲆᐃⵠⵠⵠᐃ: "img/bignight-berry.png",
    ᐃⵠΔᐃⲆΔΔ: "img/bignight-stone1.png",
    ⵠΔᐃⵠᐃᐃΔ: "img/bignight-stone2.png",
    ᐃΔᐃⲆⲆΔⵠ: "img/bignight-gold1.png",
    ⵠΔⲆᐃΔᐃᐃ: "img/bignight-gold2.png",
    ⵠⲆⵠⵠΔΔⵠ: "img/bignight-emerald1.png",
    ᐃᐃⲆᐃⵠᐃⲆ: "img/bignight-emerald2.png",
    ⵠⵠⲆᐃⵠⲆⲆ: "img/bignight-amethyst.png",
    ⵠᐃⲆⲆᐃᐃⵠ: "img/bignight-bear.png",
    ΔΔⲆᐃΔΔⲆ: "img/bignight-cave.png",
    ᐃΔⲆᐃⵠᐃᐃ: "img/bignight-diamond.png",
    ΔᐃΔᐃⲆΔΔ: "img/bignight-island.png",
    ⲆᐃΔΔᐃⲆⲆ: "img/bignight-reidite.png",
    ⵠΔΔΔΔⲆⵠ: "img/bignight-spider.png",
    ᐃΔᐃⵠⲆⵠⲆ: "img/bignight-wolf.png",
    ⵠΔᐃⵠⵠⵠᐃ: "img/bignight-fir-tree.png",
    ⵠⲆΔⲆⵠᐃᐃ: "img/bignight-fox.png",
    ⲆΔⵠΔᐃⵠⵠ: "img/bignight-kraken.png",
    ⲆᐃᐃᐃⵠⵠⲆ: "img/bignight-piranha.png",
    ᐃⲆΔᐃⲆᐃⵠ: "img/bignight-cactus.png",
    ⵠⲆⵠⵠᐃΔⵠ: "img/bignight-magma.png",
    ⵠⲆⵠⵠΔⵠⵠ: "img/bigday-desert.png",
    ᐃΔΔᐃⵠΔΔ: "img/bigday-winter.png",
    ΔᐃⵠⲆΔᐃⲆ: "img/bigday-lava.png",
    ⲆⲆⲆΔᐃⲆᐃ: "img/bigday-forest.png",
    ΔⵠⵠᐃᐃΔⲆ: "img/bignight-desert.png",
    ⲆᐃⵠΔⲆΔΔ: "img/bignight-winter.png",
    ⵠΔᐃⲆⲆᐃΔ: "img/bignight-lava.png",
    ΔⲆᐃᐃⵠΔⲆ: "img/bignight-forest.png",
    ⲆⲆⵠΔΔⲆΔ: "img/day-river-wave.png",
    ⲆⵠⵠΔΔⵠᐃ: "img/night-river-wave.png",
    ΔΔΔΔⵠⲆⲆ: "img/day-fog0.png",
    ⵠⲆⵠⲆΔΔⲆ: "img/day-fog1.png",
    ΔᐃΔΔⲆΔⵠ: "img/day-fog2.png",
    ᐃΔᐃΔⵠⵠⲆ: "img/night-fog0.png",
    ⵠⵠᐃⵠΔᐃⲆ: "img/night-fog1.png",
    ΔⲆⲆΔⲆⲆⵠ: "img/night-fog2.png",
    ⲆᐃΔᐃᐃⵠⲆ: "img/day-fogdesert0.png",
    ΔΔⲆⵠⵠⵠᐃ: "img/day-fogdesert1.png",
    ⲆⵠΔᐃΔⲆⲆ: "img/day-fogdesert2.png",
    ⲆΔᐃⲆⵠⵠᐃ: "img/night-fogdesert0.png",
    ⵠⲆΔⵠⲆⲆΔ: "img/night-fogdesert1.png",
    ⵠΔΔΔⵠⵠⵠ: "img/night-fogdesert2.png",
    ᐃⲆⵠⲆⵠⵠΔ: "img/day-cross-server.png",
    ᐃᐃᐃΔΔᐃⵠ: "img/day-here-server.png",
    ⵠΔⵠΔΔᐃⲆ: "img/day-finish-server.png",
    ΔⲆⲆⵠΔⲆⲆ: "img/day-item-server.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/day-skull-server.png",
    ΔⵠᐃΔᐃⲆⲆ: "img/night-cross-server.png",
    ΔⲆᐃᐃⲆⵠΔ: "img/night-here-server.png",
    ᐃΔⵠⵠⵠᐃⵠ: "img/night-finish-server.png",
    ᐃⵠⲆᐃᐃⵠⵠ: "img/night-item-server.png",
    ᐃᐃΔΔᐃᐃⵠ: "img/night-skull-server.png",
    ΔᐃⵠΔᐃᐃᐃ: "img/day-reidite0.png",
    ⵠⵠᐃΔⵠⲆⲆ: "img/night-reidite0.png",
    ⲆᐃΔΔⲆΔΔ: "img/day-reidite1.png",
    ⵠΔⲆⵠΔΔⵠ: "img/night-reidite1.png",
    ΔⵠⲆⲆᐃⵠⵠ: "img/day-reidite2.png",
    ᐃⲆⲆⵠⵠᐃⲆ: "img/night-reidite2.png",
    ΔⲆⵠᐃⵠΔⲆ: "img/day-lava1.png",
    ⲆⲆⵠΔⵠΔᐃ: "img/night-lava1.png",
    ⲆᐃΔⲆᐃⲆⲆ: "img/day-lava2.png",
    ⵠⵠⲆΔΔᐃᐃ: "img/night-lava2.png",
    ᐃⵠⵠΔΔᐃⵠ: "img/day-lava3.png",
    ΔᐃΔⵠΔⲆⵠ: "img/night-lava3.png",
    ΔⲆⲆⵠⵠᐃΔ: "img/day-lava4.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/night-lava4.png",
    ΔⵠΔΔⵠⵠⲆ: "img/day-lava5.png",
    ΔᐃᐃⲆᐃⵠᐃ: "img/night-lava5.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/day-lava6.png",
    ΔΔᐃΔᐃᐃⵠ: "img/night-lava6.png",
    Δⵠⵠᐃᐃⵠⵠ: "img/day-lava-ground1.png",
    ᐃΔᐃⲆⲆΔΔ: "img/night-lava-ground1.png",
    ΔⵠⲆᐃᐃⲆᐃ: "img/day-lava-ground2.png",
    ⲆᐃⵠΔⵠΔⵠ: "img/night-lava-ground2.png",
    ΔᐃⵠΔⵠᐃΔ: "img/day-lava-ground3.png",
    ⲆᐃⲆΔⵠΔⵠ: "img/night-lava-ground3.png",
    ⵠΔⵠⵠΔⵠᐃ: "img/day-lava-ground4.png",
    ⵠⵠⲆΔⲆΔⲆ: "img/night-lava-ground4.png",
    ΔΔΔⲆᐃᐃᐃ: "img/day-lava-ground5.png",
    ΔΔᐃⲆΔᐃⲆ: "img/night-lava-ground5.png",
    ⲆⲆΔΔᐃⲆⵠ: "img/day-lava-ground6.png",
    ⲆΔΔΔⵠΔΔ: "img/night-lava-ground6.png",
    ⵠⲆⵠⲆΔΔⵠ: "img/day-fire-mob.png",
    ΔⲆⵠΔⲆⲆᐃ: "img/night-fire-mob.png",
    ᐃⲆΔⵠⵠΔΔ: "img/hurt-fire-mob.png",
    ⲆⲆⲆᐃᐃⲆⵠ: "img/day-diamond-protection.png",
    ⵠᐃⵠᐃᐃΔᐃ: "img/night-diamond-protection.png",
    ᐃⵠΔⵠᐃⲆᐃ: "img/day-hand-diamond-protection.png",
    ᐃᐃⵠⲆⵠΔⵠ: "img/night-hand-diamond-protection.png",
    ⵠᐃⵠⲆⵠΔΔ: "img/inv-diamond-protection-out.png",
    ⵠᐃᐃᐃⵠᐃⲆ: "img/inv-diamond-protection-in.png",
    ᐃᐃⲆΔⲆⲆⲆ: "img/inv-diamond-protection-click.png",
    ᐃΔⵠΔⵠΔΔ: "img/day-amethyst-protection.png",
    ᐃΔΔΔⲆⲆⵠ: "img/night-amethyst-protection.png",
    ᐃᐃᐃⵠⵠⲆⲆΔᐃ: "img/day-hand-amethyst-protection.png",
    ΔⵠᐃΔⲆΔᐃⵠᐃ: "img/night-hand-amethyst-protection.png",
    ⲆⲆⵠΔᐃⵠᐃ: "img/inv-amethyst-protection-out.png",
    ΔΔⲆΔⲆⲆΔ: "img/inv-amethyst-protection-in.png",
    ⵠⵠᐃᐃⲆᐃᐃ: "img/inv-amethyst-protection-click.png",
    ⲆⲆᐃΔΔⲆⲆ: "img/day-reidite-sword.png",
    ᐃⵠΔⵠΔⲆᐃ: "img/night-reidite-sword.png",
    ⵠΔⵠᐃᐃΔⵠ: "img/inv-reidite-sword-out.png",
    ᐃⵠᐃⲆΔⲆⵠ: "img/inv-reidite-sword-in.png",
    ΔᐃⲆⵠᐃᐃⵠ: "img/inv-reidite-sword-click.png",
    ᐃΔΔⲆⵠⵠᐃ: "img/inv-reidite-out.png",
    ΔⲆΔⵠᐃΔⵠ: "img/inv-reidite-in.png",
    ⲆΔΔⲆⲆⵠⵠ: "img/inv-reidite-click.png",
    ⵠᐃⲆΔᐃΔⲆ: "img/inv-flame-out.png",
    ⵠⲆᐃⵠⲆᐃⵠ: "img/inv-flame-in.png",
    ⵠᐃⵠⵠΔᐃⲆ: "img/inv-flame-click.png",
    ΔΔΔⲆⲆᐃⲆ: "img/day-magma-buble0.png",
    ⵠᐃΔᐃⲆᐃⲆ: "img/night-magma-buble0.png",
    ⵠⲆⵠⲆⲆΔᐃ: "img/day-magma-buble1.png",
    ΔᐃⲆⵠⲆΔΔ: "img/night-magma-buble1.png",
    ΔⵠᐃⲆᐃⲆᐃ: "img/day-magma-buble2.png",
    ⵠⲆⲆΔⵠⵠⲆ: "img/night-magma-buble2.png",
    ⲆⲆᐃⵠⵠΔᐃ: "img/day-lava-dragon.png",
    ΔᐃᐃⵠⵠᐃⲆ: "img/night-lava-dragon.png",
    ⵠΔⵠᐃⵠⵠΔᐃⲆ: "img/day-fire-dragon.png",
    ΔⵠΔΔⲆᐃᐃΔⲆ: "img/night-fire-dragon.png",
    ⵠᐃⵠΔΔᐃΔ: "img/hurt-lava-dragon.png",
    ⵠⲆᐃⲆᐃⲆⲆ: "img/day-lava-wing-left.png",
    ᐃΔⲆⵠⲆΔᐃ: "img/night-lava-wing-left.png",
    ΔΔⵠⵠᐃΔΔ: "img/day-lava-wing-right.png",
    ΔΔⵠΔⲆΔⵠ: "img/night-lava-wing-right.png",
    ΔⵠΔΔⲆΔᐃ: "img/hurt-lava-wing-left.png",
    ⵠⵠⵠΔΔⲆⲆ: "img/hurt-lava-wing-right.png",
    ⵠⵠⵠⵠⲆⲆⲆ: "img/day-reidite-spear.png",
    ⲆⲆᐃΔΔⲆΔ: "img/night-reidite-spear.png",
    ΔᐃⵠⲆⲆΔΔ: "img/inv-reidite-spear-out.png",
    ⲆΔⲆⲆⲆᐃᐃ: "img/inv-reidite-spear-in.png",
    ᐃᐃⲆⵠΔΔⵠ: "img/inv-reidite-spear-click.png",
    ΔⵠⵠⲆⲆⵠΔ: "img/day-reidite-helmet.png",
    ΔᐃⲆⵠⵠⲆΔ: "img/night-reidite-helmet.png",
    ⵠᐃΔⲆᐃⵠⵠ: "img/inv-reidite-helmet-out.png",
    ⵠⵠΔⲆᐃΔⲆ: "img/inv-reidite-helmet-in.png",
    ᐃⵠΔⵠΔⲆⲆ: "img/inv-reidite-helmet-click.png",
    ⵠΔⵠⲆⲆⵠΔ: "img/day-hand-reidite-protection.png",
    ⲆⵠⵠΔⲆⵠᐃ: "img/night-hand-reidite-protection.png",
    ᐃΔⲆᐃΔΔᐃ: "img/day-reidite-protection.png",
    ᐃⲆΔⵠΔⵠᐃ: "img/night-reidite-protection.png",
    ᐃⲆᐃⵠⵠᐃΔ: "img/inv-reidite-protection-out.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/inv-reidite-protection-in.png",
    ⲆᐃΔⵠⲆⵠⲆ: "img/inv-reidite-protection-click.png",
    ⵠΔⲆᐃᐃΔⵠ: "img/day-lava-dragon-sword.png",
    ΔᐃΔΔⵠᐃᐃ: "img/night-lava-dragon-sword.png",
    ⵠⲆⲆⵠⲆᐃⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃⲆΔΔⲆΔᐃ: "img/inv-lava-dragon-sword-in.png",
    ⲆᐃⵠᐃᐃΔⲆ: "img/inv-lava-dragon-sword-click.png",
    ΔⵠᐃⲆⲆᐃⲆ: "img/day-lava-spear.png",
    ⵠᐃⲆⲆⲆΔⵠ: "img/night-lava-spear.png",
    ΔΔⲆⲆⵠⲆΔ: "img/inv-lava-spear-out.png",
    ⵠᐃⵠΔⲆΔⵠ: "img/inv-lava-spear-in.png",
    ⵠᐃΔΔⵠⵠⲆ: "img/inv-lava-spear-click.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/day-lava-helmet.png",
    ᐃⲆⵠᐃᐃⵠᐃ: "img/night-lava-helmet.png",
    ⵠΔᐃⲆⲆⵠᐃ: "img/inv-lava-helmet-out.png",
    ΔⵠⲆᐃⵠⵠⲆ: "img/inv-lava-helmet-in.png",
    ᐃⵠⲆᐃᐃΔΔ: "img/inv-lava-helmet-click.png",
    ⵠⲆΔⲆᐃⵠΔ: "img/day-witch-hat.png",
    ᐃⲆΔᐃᐃᐃⲆ: "img/night-witch-hat.png",
    ⵠⵠⵠΔᐃᐃΔ: "img/inv-witch-hat-out.png",
    ᐃΔᐃⵠⲆⵠΔ: "img/inv-witch-hat-in.png",
    ⲆⲆᐃⲆⲆΔᐃ: "img/inv-witch-hat-click.png",
    ΔᐃΔΔΔⲆⵠ: "img/day-nimbus2000.png",
    ⵠᐃⵠⵠⵠⲆᐃ: "img/night-nimbus2000.png",
    ⲆᐃⵠΔⵠᐃᐃ: "img/inv-nimbus2000-out.png",
    ⲆⲆᐃΔΔⵠΔ: "img/inv-nimbus2000-in.png",
    ᐃᐃⲆΔᐃΔⲆ: "img/inv-nimbus2000-click.png",
    ΔⲆΔᐃⵠΔⲆ: "img/day-accessory1-pacques.png",
    ᐃⵠΔᐃᐃⲆΔ: "img/night-accessory1-pacques.png",
    ᐃᐃᐃⲆᐃᐃΔ: "img/day-accessory2-pacques.png",
    ΔⲆⲆᐃⵠΔᐃ: "img/night-accessory2-pacques.png",
    ΔᐃⵠᐃⵠⲆⲆ: "img/day-accessory3-pacques.png",
    Δᐃᐃⵠⵠⵠⵠ: "img/night-accessory3-pacques.png",
    ΔᐃΔΔΔᐃⵠ: "img/day-accessory5-pacques.png",
    ⲆΔⵠᐃⲆᐃⵠ: "img/night-accessory5-pacques.png",
    ⵠΔΔᐃⲆΔⲆ: "img/day-accessory6-pacques.png",
    ΔᐃⵠᐃΔᐃⲆ: "img/night-accessory6-pacques.png",
    ⲆⲆⲆᐃΔΔⵠ: "img/day-accessory7-pacques.png",
    ⲆᐃⲆᐃΔⲆⲆ: "img/night-accessory7-pacques.png",
    ⵠⲆⵠᐃⲆᐃᐃ: "img/day-accessory8-pacques.png",
    ᐃᐃΔⵠⵠΔⲆ: "img/night-accessory8-pacques.png",
    ᐃⵠⲆᐃⵠⵠΔ: "img/day-bag-pacques.png",
    ᐃⵠⲆᐃΔⵠΔ: "img/night-bag-pacques.png",
    ⲆΔⲆΔⲆⵠⲆ: "img/day-carrot.png",
    ΔΔΔⲆⲆΔΔ: "img/night-carrot.png",
    ᐃᐃΔⵠΔⵠΔ: "img/day-carrot-dried.png",
    ⲆᐃⵠⵠⵠᐃΔ: "img/night-carrot-dried.png",
    ΔⵠᐃΔΔΔⲆ: "img/day-tomato-herb.png",
    ΔΔⲆⵠΔⵠⵠ: "img/night-tomato-herb.png",
    ΔⵠᐃΔΔΔⵠ: "img/day-tomato-herb-dried.png",
    ⲆΔⲆⲆⵠΔᐃ: "img/night-tomato-herb-dried.png",
    ΔᐃⵠⲆⲆᐃΔ: "img/day-tomato.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/night-tomato.png",
    ΔⲆΔⲆⲆΔΔ: "img/inv-carrot-out.png",
    ⲆⲆΔᐃΔΔⲆ: "img/inv-carrot-in.png",
    ⲆΔⵠⵠⲆΔⲆ: "img/inv-carrot-click.png",
    ᐃⵠΔⵠᐃᐃᐃ: "img/inv-tomato-out.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/inv-tomato-in.png",
    ⲆᐃⵠᐃΔᐃΔ: "img/inv-tomato-click.png",
    ⲆΔⵠᐃⵠΔᐃ: "img/day-player0.png",
    ᐃΔⲆⵠΔⲆᐃ: "img/night-player0.png",
    ΔⲆΔᐃᐃⵠΔ: "img/day-player1.png",
    ΔⲆⵠⵠⲆⲆᐃ: "img/night-player1.png",
    ⲆΔⲆⵠⲆᐃⵠ: "img/day-player2.png",
    ᐃⵠΔⵠⵠᐃΔ: "img/night-player22.png",
    ΔⵠΔⵠⵠⲆᐃ: "img/day-player3.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/night-player33.png",
    ΔΔⲆⵠΔᐃΔ: "img/day-player4.png",
    ⲆⵠⵠᐃⵠΔΔ: "img/night-player4.png",
    ᐃⲆᐃΔΔⲆⲆ: "img/day-player5.png",
    ᐃΔⲆⵠΔⲆΔ: "img/night-player5.png",
    ⵠΔᐃᐃⲆᐃⵠ: "img/day-player6.png",
    ⵠⲆΔⲆⲆᐃᐃ: "img/night-player6.png",
    ᐃⵠⲆⲆᐃΔⵠ: "img/day-player7.png",
    ⵠⵠⲆⵠⵠᐃᐃ: "img/night-player7.png",
    ΔⵠΔⵠⲆᐃᐃ: "img/day-player8.png",
    ⲆⵠⲆΔⲆⲆᐃ: "img/night-player8.png",
    ᐃΔΔΔᐃᐃΔ: "img/day-player9.png",
    ⲆᐃⲆΔΔⵠΔ: "img/night-player9.png",
    ᐃᐃⵠⵠⲆΔᐃ: "img/day-player10.png",
    ΔⲆᐃΔΔⵠΔ: "img/night-player10.png",
    ⵠᐃⵠΔⵠⵠΔ: "img/day-player11.png",
    ΔᐃᐃⵠΔᐃᐃ: "img/night-player11.png",
    ⲆΔᐃᐃⲆᐃΔ: "img/day-player12.png",
    ΔⲆⵠⵠⲆⲆⲆ: "img/night-player12.png",
    ᐃⵠᐃⲆⲆΔⵠ: "img/day-player13.png",
    ᐃΔΔⲆⲆᐃⵠ: "img/night-player13.png",
    ⵠΔᐃΔΔⵠⵠ: "img/day-player14.png",
    ΔᐃⲆΔΔᐃᐃ: "img/night-player14.png",
    ΔᐃⵠΔⲆᐃΔ: "img/day-player15.png",
    ⲆⵠΔΔⲆⲆⵠ: "img/night-player15.png",
    ᐃΔⲆᐃⵠΔᐃ: "img/day-player16.png",
    ΔᐃⲆⲆⲆⵠⵠ: "img/night-player16.png",
    ᐃⲆⲆΔⵠΔⵠ: "img/day-player17.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/night-player17.png",
    ᐃⲆⵠΔⲆᐃᐃ: "img/day-player18.png",
    ⲆⲆΔᐃΔⵠΔ: "img/night-player18.png",
    ᐃΔᐃᐃᐃⵠᐃ: "img/day-player19.png",
    ⲆᐃΔⵠᐃⵠⲆ: "img/night-player19.png",
    ΔⵠⵠΔΔⵠⵠ: "img/day-hand-player0.png",
    ΔᐃᐃᐃⵠᐃΔ: "img/night-hand-player0.png",
    ᐃᐃΔⵠⲆᐃᐃ: "img/day-hand-player1.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/night-hand-player1.png",
    ⵠⲆΔΔⲆᐃΔ: "img/day-hand-player2.png",
    ⲆⵠΔΔⲆⵠᐃ: "img/night-hand-player22.png",
    ΔΔᐃⵠⲆᐃᐃ: "img/day-hand-player3.png",
    ⵠⲆⲆᐃᐃⲆⵠ: "img/night-hand-player33.png",
    ΔᐃΔⲆΔᐃⲆ: "img/day-hand-player4.png",
    ⵠⵠⲆΔⲆⵠⲆ: "img/night-hand-player4.png",
    ⵠⵠⵠΔⲆⵠᐃ: "img/day-hand-player5.png",
    ΔⲆΔΔⵠᐃⵠ: "img/night-hand-player5.png",
    ΔⵠⲆᐃΔⲆⲆ: "img/day-hand-player6.png",
    ⵠⲆⵠᐃⲆⲆⲆ: "img/night-hand-player6.png",
    ⲆΔᐃⲆΔⵠⲆ: "img/day-hand-player7.png",
    ΔⵠΔⵠᐃⲆΔ: "img/night-hand-player7.png",
    ᐃᐃⲆⵠᐃⵠⵠ: "img/day-hand-player8.png",
    ⵠⵠᐃⲆᐃⲆᐃ: "img/night-hand-player8.png",
    ⲆᐃΔᐃΔⵠⲆ: "img/day-hand-player9.png",
    ⵠᐃΔΔⵠⲆᐃ: "img/night-hand-player9.png",
    ⵠΔⲆᐃᐃⵠΔ: "img/day-hand-player10.png",
    ⵠΔⲆⵠᐃᐃⲆ: "img/night-hand-player10.png",
    ᐃΔⲆⵠⲆΔΔ: "img/day-hand-player11.png",
    ᐃᐃⲆΔΔⲆᐃ: "img/night-hand-player11.png",
    ⵠⲆⲆΔᐃᐃⵠ: "img/day-hand-player12.png",
    ΔΔⲆᐃⲆΔᐃ: "img/night-hand-player12.png",
    ⲆΔⲆΔⲆᐃⲆ: "img/day-hand-player13.png",
    ⵠΔᐃⲆⵠΔΔ: "img/night-hand-player13.png",
    ⵠⲆΔⲆΔⲆΔ: "img/day-hand-player14.png",
    ΔΔᐃⲆⲆΔⲆ: "img/night-hand-player14.png",
    ᐃΔⲆⵠᐃⵠᐃ: "img/day-hand-player15.png",
    ⵠⵠᐃⲆⲆⲆᐃ: "img/night-hand-player15.png",
    ⵠⲆⲆᐃⲆⵠᐃ: "img/day-hand-player16.png",
    ΔᐃᐃⲆΔⲆⵠ: "img/night-hand-player16.png",
    ⵠⵠⲆⲆΔⵠΔ: "img/day-hand-player17.png",
    ⲆⵠᐃᐃΔᐃⵠ: "img/night-hand-player17.png",
    ⵠΔⲆᐃΔⲆⲆ: "img/day-hand-player18.png",
    ΔᐃΔⵠⲆᐃⲆ: "img/night-hand-player18.png",
    ⵠΔᐃΔᐃⵠⵠ: "img/day-hand-player19.png",
    ᐃⲆⲆᐃΔΔᐃ: "img/night-hand-player19.png",
    ᐃᐃⲆΔᐃᐃΔ: "img/day-accessory4.png",
    ⵠᐃᐃⲆⲆᐃᐃ: "img/night-accessory4.png",
    ⲆⵠΔⲆᐃᐃᐃ: "img/day-accessory9.png",
    ᐃⲆᐃᐃᐃΔᐃ: "img/night-accessory9.png",
    ⵠⲆⵠⲆᐃᐃᐃ: "img/day-accessory10.png",
    ΔΔⲆΔⵠᐃⵠ: "img/night-accessory10.png",
    ⲆⲆⲆⲆᐃΔⲆ: "img/day-accessory11.png",
    ΔⵠΔᐃΔΔΔ: "img/night-accessory11.png",
    ΔᐃᐃᐃⲆᐃᐃ: "img/day-accessory12.png",
    ⵠᐃᐃᐃⲆᐃⵠ: "img/night-accessory12.png",
    ΔⲆᐃᐃᐃⲆΔ: "img/day-bag.png",
    ΔⵠΔⲆⲆΔⵠ: "img/night-bag.png",
    ᐃⲆΔΔᐃΔⵠ: "img/inv-bag-out.png",
    ᐃⵠᐃⵠⵠⲆΔ: "img/inv-bag-in.png",
    ΔⲆΔΔⲆᐃᐃ: "img/inv-bag-click.png",
    ⵠⲆΔⲆΔⵠΔ: "img/day-pitchfork.png",
    ⲆⲆᐃΔⵠⵠⵠ: "img/night-pitchfork.png",
    ᐃⵠΔΔΔᐃⵠ: "img/inv-pitchfork-out.png",
    ᐃⲆⲆⲆⵠⲆΔ: "img/inv-pitchfork-in.png",
    ⲆⲆΔᐃᐃⵠΔ: "img/inv-pitchfork-click.png",
    ⵠᐃⵠΔⲆΔᐃ: "img/inv-wood-spike-door-out.png",
    ΔᐃΔΔᐃⵠⲆ: "img/inv-wood-spike-door-in.png",
    ⲆⵠⵠⲆⵠΔᐃ: "img/inv-wood-spike-door-click.png",
    ᐃⲆΔⵠⲆΔⵠ: "img/inv-stone-spike-door-out.png",
    ᐃᐃᐃⵠΔⲆΔ: "img/inv-stone-spike-door-in.png",
    ⵠⵠⲆᐃᐃⲆⲆ: "img/inv-stone-spike-door-click.png",
    ΔⵠΔᐃᐃⵠᐃ: "img/inv-gold-spike-door-out.png",
    ΔΔΔⲆⲆΔⲆ: "img/inv-gold-spike-door-in.png",
    ⲆⵠᐃᐃΔⲆⲆ: "img/inv-gold-spike-door-click.png",
    ⵠΔⲆⵠᐃΔΔ: "img/inv-diamond-spike-door-out.png",
    ΔⲆⲆⲆΔⲆⲆ: "img/inv-diamond-spike-door-in.png",
    ⲆⲆⵠᐃⲆᐃⵠ: "img/inv-diamond-spike-door-click.png",
    ᐃᐃⲆⵠⲆⵠⵠ: "img/inv-amethyst-spike-door-out.png",
    ⲆᐃⲆⵠᐃⲆⵠ: "img/inv-amethyst-spike-door-in.png",
    ᐃⵠⵠᐃΔΔᐃ: "img/inv-amethyst-spike-door-click.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/day-wood-spike-door.png",
    Ⲇᐃⵠⵠⵠᐃⵠ: "img/night-wood-spike-door.png",
    ⲆⵠⵠⲆⲆⵠᐃ: "img/day-stone-spike-door.png",
    ⵠⵠᐃΔΔⲆⲆ: "img/night-stone-spike-door.png",
    ΔⵠᐃΔⵠⲆⵠ: "img/day-gold-spike-door.png",
    ⵠᐃⵠᐃⵠΔⲆ: "img/night-gold-spike-door.png",
    ΔᐃΔⲆΔΔⵠ: "img/day-diamond-spike-door.png",
    ⲆⲆΔΔᐃⲆⲆ: "img/night-diamond-spike-door.png",
    ⵠⲆΔⲆΔΔΔ: "img/day-amethyst-spike-door.png",
    ΔΔⵠᐃⵠᐃᐃ: "img/night-amethyst-spike-door.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/inv-reidite-spike-door-out.png",
    ᐃΔΔΔᐃⵠΔ: "img/inv-reidite-spike-door-in.png",
    ⲆⲆΔᐃⲆᐃΔ: "img/inv-reidite-spike-door-click.png",
    ᐃⵠΔΔᐃⲆΔ: "img/inv-reidite-door-out.png",
    ⲆΔΔⵠᐃⲆⲆ: "img/inv-reidite-door-in.png",
    ᐃⲆᐃⵠⵠⲆⲆ: "img/inv-reidite-door-click.png",
    ΔᐃⵠᐃᐃΔΔ: "img/inv-reidite-spike-out.png",
    ⲆᐃⵠΔΔΔⲆ: "img/inv-reidite-spike-in.png",
    ᐃⵠⲆΔᐃΔΔ: "img/inv-reidite-spike-click.png",
    ⵠⲆⵠⵠᐃΔΔ: "img/inv-reidite-wall-out.png",
    ΔⵠᐃⲆᐃᐃΔ: "img/inv-reidite-wall-in.png",
    ⲆᐃΔⵠⵠΔⲆ: "img/inv-reidite-wall-click.png",
    ΔⲆᐃⲆⲆⵠⲆ: "img/day-reidite-wall.png",
    ΔᐃⲆⲆⲆΔᐃ: "img/night-reidite-wall.png",
    ᐃΔΔⵠⲆΔⵠ: "img/day-reidite-door.png",
    ⲆⵠΔⲆΔⵠⲆ: "img/night-reidite-door.png",
    ΔⵠΔΔᐃⲆᐃ: "img/day-reidite-spike.png",
    ᐃⲆᐃⵠⲆⲆⵠ: "img/night-reidite-spike.png",
    ⵠⵠⵠᐃᐃⲆᐃ: "img/day-reidite-spike-door.png",
    ⵠⵠⵠᐃᐃⲆΔ: "img/night-reidite-spike-door.png",
    ᐃⲆⵠⲆᐃΔΔ: "img/inv-reidite-pickaxe-out.png",
    ⵠⵠⲆᐃⲆΔᐃ: "img/inv-reidite-pickaxe-in.png",
    ⲆⵠⲆⲆⵠⵠⵠ: "img/inv-reidite-pickaxe-click.png",
    ⵠᐃᐃΔⲆⵠⵠ: "img/day-reidite-pickaxe.png",
    ᐃᐃⵠᐃⵠΔΔ: "img/night-reidite-pickaxe.png",
    ΔⵠΔⵠⲆᐃⲆ: "img/inv-reidite-hammer-out.png",
    ⵠⲆⲆᐃΔⲆⲆ: "img/inv-reidite-hammer-in.png",
    ⵠΔΔⵠⵠᐃΔ: "img/inv-reidite-hammer-click.png",
    ⲆΔⲆⵠΔΔⲆ: "img/day-reidite-hammer.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/night-reidite-hammer.png",
    ⲆⲆⵠⵠᐃᐃⲆ: "img/day-watermelon1.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/night-watermelon1.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/day-watermelon-dried1.png",
    ᐃⵠⵠⵠⲆⲆⵠ: "img/night-watermelon-dried1.png",
    ΔΔⲆΔⲆΔΔ: "img/inv-watermelon-out.png",
    ⲆΔΔᐃⲆᐃⲆ: "img/inv-watermelon-in.png",
    ΔΔᐃᐃᐃΔⵠ: "img/inv-watermelon-click.png",
    ⵠⵠⲆΔΔΔⲆ: "img/day-boat.png",
    ⲆᐃⲆᐃΔⲆᐃ: "img/night-boat.png",
    ⲆΔⵠⵠᐃⲆⲆ: "img/day-boat-wave.png",
    ΔⲆⲆΔⲆⲆΔ: "img/night-boat-wave.png",
    ⵠⵠΔⵠΔᐃΔ: "img/inv-boat-out.png",
    ΔⵠⲆᐃΔⲆⵠ: "img/inv-boat-in.png",
    ΔᐃⵠⲆⲆⲆΔ: "img/inv-boat-click.png",
    ⵠⵠᐃΔⵠΔⲆ: "img/day-plane.png",
    ⵠⲆᐃΔᐃⲆΔ: "img/night-plane.png",
    ⲆΔⵠⵠⵠᐃΔ: "img/inv-plane-out.png",
    ΔⵠΔⲆⵠΔⲆ: "img/inv-plane-in.png",
    ⲆⵠΔⵠΔΔΔ: "img/inv-plane-click.png",
    ᐃⵠᐃⵠⵠⲆᐃ: "img/day-sled.png",
    ΔⵠΔΔΔΔⵠ: "img/night-sled.png",
    ⲆⲆᐃᐃⲆⵠⵠ: "img/day-sled-wave.png",
    ⲆᐃΔⲆΔⵠΔ: "img/night-sled-wave.png",
    ᐃΔⲆⲆΔᐃΔ: "img/inv-sled-out.png",
    ᐃᐃᐃᐃⵠⵠⵠ: "img/inv-sled-in.png",
    ⲆΔᐃⵠⵠᐃⲆ: "img/inv-sled-click.png",
    ⲆⲆᐃᐃΔⵠⵠ: "img/day-pirate-hat.png",
    ⵠᐃⵠⵠᐃⵠᐃ: "img/night-pirate-hat.png",
    ΔΔⲆⲆⵠΔⵠ: "img/inv-pirate-hat-out.png",
    ΔⲆᐃΔⵠᐃⵠ: "img/inv-pirate-hat-in.png",
    ᐃᐃⲆⲆⵠⲆⲆ: "img/inv-pirate-hat-click.png",
    ΔᐃᐃᐃⲆⵠⵠ: "img/day-penguin.png",
    ⵠᐃᐃⵠⲆΔΔ: "img/night-penguin.png",
    ⵠΔΔⲆⵠᐃⲆ: "img/hurt-penguin.png",
    ΔΔΔⲆⲆ: "img/inv-penguin-feather-click.png",
    ⲆᐃᐃΔⵠ: "img/inv-hawk-feather-click.png",
    ΔΔⲆΔᐃΔΔ: "img/day-boar1.png",
    ⵠᐃⲆⲆⵠᐃⵠ: "img/day-boar1-tamed.png",
    ᐃⲆⵠⵠᐃⵠΔ: "img/day-boar1-angry.png",
    ⲆᐃᐃⵠᐃⲆⵠ: "img/night-boar1.png",
    ΔⵠᐃΔᐃᐃΔ: "img/night-boar1-tamed.png",
    ΔⲆⵠⵠⲆⵠⵠ: "img/night-boar1-angry.png",
    ᐃⲆᐃΔᐃᐃᐃ: "img/inv-mount-boar-out.png",
    ⵠΔΔᐃᐃⵠⲆ: "img/inv-mount-boar-in.png",
    ⵠⲆΔᐃⵠⵠⲆ: "img/inv-mount-boar-click.png",
    ⵠᐃⵠᐃΔⲆⲆ: "img/day-hurt-boar1.png",
    ⵠᐃᐃⵠᐃΔΔ: "img/boar1-step.png",
    ⵠⵠⵠΔⵠᐃⵠ: "img/day-saddle1.png",
    ΔᐃΔΔⲆⵠΔ: "img/night-saddle1.png",
    ⵠᐃⵠΔⵠᐃΔ: "img/inv-saddle-out.png",
    ᐃΔⲆΔⲆᐃᐃ: "img/inv-saddle-in.png",
    ⵠΔⲆᐃΔⵠⵠ: "img/inv-saddle-click.png",
    ΔⲆⵠᐃΔΔⲆ: "img/day-magic-wand0.png",
    ⵠⵠᐃⵠΔΔⵠ: "img/night-magic-wand0.png",
    ΔⵠΔⲆΔⵠⵠ: "img/day-light-wand1.png",
    ⲆⵠⲆⲆᐃᐃΔ: "img/night-light-wand1.png",
    ⲆᐃⲆΔⲆⵠΔ: "img/inv-magic-wand0-out.png",
    ⵠⵠᐃⵠⲆΔⵠ: "img/inv-magic-wand0-in.png",
    ΔⲆⲆⲆⵠⵠᐃ: "img/inv-magic-wand0-click.png",
    ᐃΔᐃⲆⲆⵠⵠ: "img/day-magic-wand1.png",
    ΔⵠⲆᐃΔᐃΔ: "img/night-magic-wand1.png",
    ⲆⵠⲆΔᐃᐃⵠ: "img/day-light-wand0.png",
    ᐃᐃΔᐃⲆΔᐃ: "img/night-light-wand0.png",
    ᐃⲆⵠⵠᐃⵠᐃ: "img/inv-magic-wand1-out.png",
    ⲆⵠⲆᐃᐃᐃⵠ: "img/inv-magic-wand1-in.png",
    ᐃⵠΔᐃⵠⲆᐃ: "img/inv-magic-wand1-click.png",
    ᐃⵠⵠΔⲆⲆⵠ: "img/day-firefly.png",
    ΔⵠⲆΔⲆᐃΔ: "img/night-firefly.png",
    ⲆⵠΔᐃⲆⵠᐃ: "img/hurt-firefly.png",
    ⵠⵠΔⵠᐃⲆᐃ: "img/inv-firefly-out.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/inv-firefly-in.png",
    ⵠⵠΔⵠⲆⵠⵠ: "img/inv-firefly-click.png",
    ΔᐃΔᐃᐃᐃᐃ: "img/day-baby-dragon.png",
    ΔⲆᐃⲆᐃᐃΔ: "img/night-baby-dragon.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/day-baby-dragon-angry.png",
    ⲆⲆⵠⲆΔΔⵠ: "img/night-baby-dragon-angry.png",
    ⵠΔⲆⲆᐃⵠⲆ: "img/day-baby-dragon-tamed.png",
    ⲆΔⲆᐃⲆᐃⲆ: "img/night-baby-dragon-tamed.png",
    ⵠⵠᐃⵠⵠⲆᐃ: "img/day-wing-dragon-left-angry.png",
    ⲆΔⲆᐃᐃⲆⵠ: "img/night-dragon-wing-left-angry.png",
    ⵠⵠⵠⵠⵠⵠᐃ: "img/day-wing-dragon-right-angry.png",
    ⲆᐃᐃⲆⲆᐃⲆ: "img/night-dragon-wing-right-angry.png",
    ⲆⵠⵠⲆⵠⵠΔ: "img/day-wing-dragon-left-tamed.png",
    ΔᐃΔᐃΔᐃᐃ: "img/night-dragon-wing-left-tamed.png",
    ΔᐃᐃⲆᐃⵠⵠ: "img/day-wing-dragon-right-tamed.png",
    ΔⲆⵠⲆᐃΔᐃ: "img/night-wing-dragon-right-tamed.png",
    ᐃⲆⲆⲆⵠᐃⵠ: "img/day-wing-dragon-left.png",
    ᐃΔΔⲆⲆⲆⵠ: "img/night-dragon-wing-left.png",
    ΔⲆΔΔΔΔⲆ: "img/day-wing-dragon-right.png",
    ᐃᐃⵠⵠⵠⲆⵠ: "img/night-wing-dragon-right.png",
    ⵠⵠⵠⲆⵠⵠⵠ: "img/hurt-baby-dragon.png",
    Δⵠⵠᐃⵠᐃᐃ: "img/hurt-baby-dragon-wing-left.png",
    ΔᐃⵠᐃΔᐃⵠ: "img/hurt-baby-dragon-wing-right.png",
    ΔⲆΔⲆΔᐃⵠ: "img/inv-baby-dragon-out.png",
    ΔⲆΔΔⲆⲆᐃ: "img/inv-baby-dragon-in.png",
    ᐃⵠⵠⲆⵠⵠⲆ: "img/inv-baby-dragon-click.png",
    ᐃᐃᐃᐃⲆᐃⲆ: "img/day-baby-lava.png",
    ΔᐃⲆⲆᐃⲆᐃ: "img/night-baby-lava.png",
    ΔΔⲆⲆⵠΔⲆ: "img/day-baby-lava-angry.png",
    ΔⵠΔⲆΔΔᐃ: "img/night-baby-lava-angry.png",
    ⲆⲆΔΔΔⲆⵠ: "img/day-baby-lava-tamed.png",
    ᐃⵠⵠⵠⵠⲆⲆ: "img/night-baby-lava-tamed.png",
    ⵠⲆⲆⲆⲆⵠΔ: "img/day-wing-lava-left-angry.png",
    ᐃΔⵠΔⲆⵠΔ: "img/night-wing-lava-left-angry.png",
    ΔⵠᐃⲆⵠᐃΔ: "img/day-wing-lava-right-angry.png",
    ⲆⵠⵠᐃⲆΔⲆ: "img/night-wing-lava-right-angry.png",
    ᐃΔⵠⵠⲆᐃᐃ: "img/day-wing-lava-left-tamed.png",
    ⲆⲆⲆⵠⲆⵠⲆ: "img/night-wing-lava-left-tamed.png",
    ᐃⵠᐃⲆⲆᐃᐃ: "img/day-wing-lava-right-tamed.png",
    ΔᐃⲆᐃΔⵠΔ: "img/night-wing-lava-right-tamed.png",
    ᐃⵠⲆⵠⵠΔΔ: "img/day-wing-lava-left.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/night-wing-lava-left.png",
    ⲆΔᐃΔⲆⵠⲆ: "img/day-wing-lava-right.png",
    ⵠΔⲆⲆΔᐃⵠ: "img/night-wing-lava-right.png",
    ⵠⲆᐃⵠΔⵠⲆ: "img/hurt-baby-lava.png",
    ΔᐃⲆⵠΔΔⵠ: "img/hurt-baby-lava-wing-left.png",
    ⵠΔᐃⲆⵠⵠᐃ: "img/hurt-baby-lava-wing-right.png",
    ΔⲆΔⲆⲆⲆⲆ: "img/inv-baby-lava-out.png",
    ⲆᐃⲆΔⵠⲆⲆ: "img/inv-baby-lava-in.png",
    ⲆⵠΔΔⵠⲆⵠ: "img/inv-baby-lava-click.png",
    ᐃⲆᐃⵠᐃⲆᐃ: "img/day-falcon.png",
    ⲆⲆⲆⲆⵠⲆᐃ: "img/night-falcon.png",
    ᐃⲆΔᐃⲆᐃⲆ: "img/day-falcon-angry.png",
    ⲆᐃΔⲆⲆΔᐃ: "img/night-falcon-angry.png",
    ΔⵠΔⲆᐃⵠΔ: "img/day-falcon-ground.png",
    ΔΔⵠⵠᐃⵠΔ: "img/night-falcon-ground.png",
    ⵠᐃⲆⲆⲆⲆΔ: "img/day-falcon-ground-angry.png",
    ⵠⵠᐃΔⲆⵠΔ: "img/night-falcon-ground-angry.png",
    ⲆⲆΔⵠⲆⵠⲆ: "img/day-falcon-wings-left.png",
    ΔⲆᐃⲆⵠΔⲆ: "img/night-falcon-wings-left.png",
    ᐃᐃΔⲆᐃⲆΔ: "img/day-falcon-wings-right.png",
    ᐃᐃⲆΔⵠⲆᐃ: "img/night-falcon-wings-right.png",
    ᐃⵠᐃⵠⲆΔᐃ: "img/day-falcon-angry-wings-left.png",
    ΔΔⲆᐃⲆΔⲆ: "img/night-falcon-angry-wings-left.png",
    ᐃᐃᐃⲆⲆⲆᐃ: "img/day-falcon-angry-wings-right.png",
    ΔⲆΔᐃⵠⲆⵠ: "img/night-falcon-angry-wings-right.png",
    ⵠΔΔⵠᐃᐃᐃ: "img/day-falcon-wings-left-tamed.png",
    ⲆⵠΔᐃΔⵠⲆ: "img/night-falcon-wings-left-tamed.png",
    ᐃⲆᐃⵠΔΔⵠ: "img/day-falcon-wings-right-tamed.png",
    ⲆⵠⲆⲆΔⲆⲆ: "img/night-falcon-wings-right-tamed.png",
    ΔᐃⲆᐃΔᐃΔ: "img/day-falcon-tamed.png",
    ΔⲆⲆⲆΔΔᐃ: "img/night-falcon-tamed.png",
    ⵠⲆⲆᐃⵠⲆΔ: "img/hurt-falcon-ground.png",
    ⲆⵠᐃΔⲆΔΔ: "img/hurt-falcon.png",
    ᐃΔⲆⲆⲆⲆⵠ: "img/hurt-falcon-wings-left.png",
    ᐃᐃΔⵠᐃΔⲆ: "img/hurt-falcon-wings-right.png",
    ᐃⲆⵠΔⲆΔᐃ: "img/inv-falcon-out.png",
    ⲆΔᐃᐃⵠⵠᐃ: "img/inv-falcon-in.png",
    ⲆⲆⲆᐃᐃⲆᐃ: "img/inv-falcon-click.png",
    ᐃⵠΔΔⵠⲆⵠ: "img/day-crab-boss.png",
    ⵠⲆᐃⵠⵠⲆΔ: "img/night-crab-boss.png",
    ΔⵠΔΔΔᐃΔ: "img/day-crab-boss-angry.png",
    ⲆⲆΔⲆⵠⲆᐃ: "img/night-crab-boss-angry.png",
    ⲆΔⵠⵠᐃΔᐃ: "img/day-crab-boss-tamed.png",
    ⲆΔⲆⲆᐃⵠΔ: "img/night-crab-boss-tamed.png",
    ΔᐃⵠΔⲆⲆⲆ: "img/day-crab-boss-claw-left-attack.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/night-crab-boss-claw-left-attack.png",
    ᐃΔΔΔᐃᐃⵠ: "img/day-crab-boss-claw-right-attack.png",
    ⵠᐃΔⵠΔΔΔ: "img/night-crab-boss-claw-right-attack.png",
    ⲆᐃᐃᐃᐃⲆᐃΔΔ: "img/day-crab-boss-claw-left-tamed.png",
    ᐃᐃⵠΔΔⵠΔΔⲆ: "img/night-crab-boss-claw-left-tamed.png",
    ΔᐃᐃᐃⵠⵠⵠⵠⲆ: "img/day-crab-boss-claw-right-tamed.png",
    ᐃⵠⵠⵠᐃⵠᐃⲆⲆ: "img/night-crab-boss-claw-right-tamed.png",
    ᐃᐃⵠⲆᐃⲆⵠ: "img/day-crab-boss-claw-left.png",
    ΔⵠᐃΔⵠⵠⲆ: "img/night-crab-boss-claw-left.png",
    ᐃΔⵠΔᐃⲆΔ: "img/day-crab-boss-claw-right.png",
    ⵠⲆΔΔΔⵠⲆ: "img/night-crab-boss-claw-right.png",
    ⵠⵠᐃⵠᐃⲆᐃ: "img/hurt-crab-boss.png",
    ⵠⵠΔᐃⵠᐃᐃ: "img/hurt-crab-boss-claw-left.png",
    ⵠⲆΔᐃΔⵠⵠ: "img/hurt-crab-boss-claw-right.png",
    ΔΔΔⵠⵠᐃⵠ: "img/heal-crab-boss.png",
    ΔⵠⵠⵠᐃΔᐃ: "img/heal-crab-boss-claw-left.png",
    ᐃⵠΔΔΔΔΔ: "img/heal-crab-boss-claw-right.png",
    ⲆⲆⲆⲆⲆⵠⲆ: "img/crab-step.png",
    ⵠᐃᐃᐃᐃⲆⲆ: "img/inv-crab-boss-out.png",
    ⲆᐃᐃⵠᐃΔᐃ: "img/inv-crab-boss-in.png",
    ᐃᐃᐃΔΔⲆΔ: "img/inv-crab-boss-click.png",
    ᐃⲆⲆΔⵠΔⲆ: "img/day-cactus10.png",
    ⲆⵠⵠⲆⲆΔΔ: "img/night-cactus10.png",
    ⲆΔᐃΔⵠⵠⵠ: "img/inv-cactus-out.png",
    ⲆⵠᐃΔⲆⲆⵠ: "img/inv-cactus-in.png",
    ⵠᐃⲆᐃⲆΔⵠ: "img/inv-cactus-click.png",
    ⵠᐃᐃΔⲆΔΔ: "img/day-scorpion.png",
    ΔⵠᐃΔⵠᐃⲆ: "img/night-scorpion.png",
    ⲆⲆΔⵠΔᐃⲆ: "img/day-scorpion-hand-left.png",
    ΔⲆᐃΔᐃΔΔ: "img/night-scorpion-hand-left.png",
    ⲆⵠⵠΔΔΔⲆ: "img/day-scorpion-hand-right.png",
    ᐃΔᐃᐃⵠᐃᐃ: "img/night-scorpion-hand-right.png",
    ⲆᐃΔⲆΔΔⵠ: "img/hurt-scorpion.png",
    ΔⵠᐃᐃⵠᐃΔ: "img/hurt-scorpion-hand-left.png",
    ᐃᐃΔⲆⵠⲆᐃ: "img/hurt-scorpion-hand-right.png",
    ᐃⵠⵠⵠⵠᐃᐃ: "img/day-vulture.png",
    ⲆΔᐃᐃᐃΔᐃ: "img/night-vulture.png",
    ΔⲆⲆΔⲆᐃⲆ: "img/day-vulture-angry.png",
    ΔᐃΔⵠᐃΔΔ: "img/night-vulture-angry.png",
    ΔᐃᐃΔΔᐃⵠ: "img/day-vulture-ground.png",
    ⲆⵠⵠⲆⵠᐃⵠ: "img/night-vulture-ground.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/day-vulture-ground-angry.png",
    ⵠⲆΔΔⵠⵠΔ: "img/night-vulture-ground-angry.png",
    ⲆΔΔΔᐃΔⵠ: "img/day-vulture-wings-left.png",
    ⲆⵠᐃⲆⲆᐃⵠ: "img/night-vulture-wings-left.png",
    ΔΔΔΔᐃⲆⲆ: "img/day-vulture-wings-right.png",
    ⵠⵠⵠⲆΔⲆⲆ: "img/night-vulture-wings-right.png",
    ⵠⵠᐃⵠⵠΔⵠ: "img/day-vulture-angry-wings-left.png",
    ⵠⵠⲆΔΔⲆΔ: "img/night-vulture-angry-wings-left.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/day-vulture-angry-wings-right.png",
    ⲆⵠΔⲆⵠⵠΔ: "img/night-vulture-angry-wings-right.png",
    ⵠᐃΔⵠⲆΔⲆ: "img/day-vulture-wings-left-tamed.png",
    ΔΔⲆΔⵠⵠⵠ: "img/night-vulture-wings-left-tamed.png",
    ⵠΔⲆⲆⵠᐃᐃ: "img/day-vulture-wings-right-tamed.png",
    ⵠΔᐃΔΔⵠᐃ: "img/night-vulture-wings-right-tamed.png",
    ᐃΔᐃᐃΔΔᐃ: "img/day-vulture-tamed.png",
    ᐃⵠΔᐃⲆⲆᐃ: "img/night-vulture-tamed.png",
    ⵠᐃΔᐃΔⲆΔ: "img/hurt-vulture-ground.png",
    ⵠΔⵠΔᐃΔⵠ: "img/hurt-vulture.png",
    ⲆᐃⵠⵠᐃⲆΔ: "img/hurt-vulture-wings-left.png",
    ⲆΔⲆⲆᐃⲆΔ: "img/hurt-vulture-wings-right.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/day-aloe-vera.png",
    ⵠΔᐃⵠⵠΔⵠ: "img/night-aloe-vera.png",
    ΔⲆΔΔⵠⲆΔ: "img/inv-aloe-vera-out.png",
    ᐃⲆᐃΔⲆΔⵠ: "img/inv-aloe-vera-in.png",
    ᐃᐃⵠⵠᐃⵠⲆ: "img/inv-aloe-vera-click.png",
    ⵠⲆΔⲆⲆⵠΔ: "img/day-aloe-vera-grown.png",
    ΔⵠΔⲆᐃⵠⲆ: "img/night-aloe-vera-grown.png",
    ⵠⵠⲆᐃᐃⲆᐃ: "img/day-aloe-vera-dried.png",
    ⲆⲆᐃΔᐃⲆⵠ: "img/night-aloe-vera-dried.png",
    ΔΔⵠⵠᐃΔⵠ: "img/day-turban1.png",
    ⲆΔᐃΔⲆⵠΔ: "img/night-turban1.png",
    ⵠⵠⲆᐃΔΔⲆ: "img/day-turban2.png",
    ΔⲆᐃⵠⲆⵠΔ: "img/night-turban2.png",
    ⲆΔⵠⲆΔⵠΔ: "img/inv-turban2-out.png",
    ⲆΔⵠΔᐃᐃⲆ: "img/inv-turban2-in.png",
    ⲆⲆⲆⵠⵠΔⵠ: "img/inv-turban2-click.png",
    ⲆⵠᐃⲆΔⲆΔ: "img/inv-turban1-out.png",
    ⵠᐃᐃⵠᐃᐃⲆ: "img/inv-turban1-in.png",
    ⲆᐃⵠⲆΔᐃⲆ: "img/inv-turban1-click.png",
    ⵠᐃⵠᐃᐃⵠⲆ: "img/day-pitchfork2.png",
    ⵠᐃΔⵠᐃⲆⲆ: "img/night-pitchfork2.png",
    ⵠⲆⲆⵠᐃΔΔ: "img/inv-pitchfork2-out.png",
    ᐃⲆΔᐃΔⵠⲆ: "img/inv-pitchfork2-in.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/inv-pitchfork2-click.png",
    ᐃⲆᐃΔΔⲆΔ: "img/inv-gold-fork-click.png",
    ᐃᐃⵠⵠᐃΔΔ: "img/inv-pilot-glasses-click.png",
    ⵠΔᐃⵠⵠᐃᐃ: "img/day-pilot-helmet.png",
    ⵠⲆⵠⵠΔⵠᐃ: "img/night-pilot-helmet.png",
    ⵠΔⵠᐃᐃⵠⵠ: "img/inv-pilot-helmet-out.png",
    ⲆⵠⵠΔⵠⲆⲆ: "img/inv-pilot-helmet-in.png",
    ⵠⲆⲆⵠᐃⲆⵠ: "img/inv-pilot-helmet-click.png",
    ᐃΔΔᐃᐃᐃⲆⲆΔ: "img/day-sandworm0.png",
    ⵠΔᐃΔⲆᐃᐃ: "img/day-sandworm1.png",
    ⲆᐃⲆⵠΔⵠᐃ: "img/day-sandworm2.png",
    ⵠᐃⲆⲆᐃⵠⲆᐃⵠ: "img/night-sandworm0.png",
    ΔᐃⲆⵠᐃⲆⲆ: "img/night-sandworm1.png",
    ⲆΔⵠⵠᐃΔⵠ: "img/night-sandworm2.png",
    ⵠⲆⲆⵠⲆΔΔ: "img/hurt-sandworm0.png",
    ΔᐃΔⲆᐃⲆⵠ: "img/hurt-sandworm1.png",
    ⲆⵠΔⲆᐃΔᐃ: "img/hurt-sandworm2.png",
    ΔⲆⵠΔⵠ: "img/inv-vulture-feather-click.png",
    ⲆⲆⲆⵠΔΔΔ: "img/day-emerald0.png",
    ⵠᐃΔⵠᐃⵠⵠ: "img/night-emerald0.png",
    ⲆⵠⵠⵠⲆΔΔ: "img/day-emerald1.png",
    ⲆⲆᐃᐃⲆⲆⵠ: "img/night-emerald1.png",
    Δᐃᐃⵠᐃᐃᐃ: "img/day-emerald2.png",
    ΔⲆΔΔⲆᐃⵠ: "img/night-emerald2.png",
    ΔⵠᐃΔⲆ: "img/inv-emerald-click.png",
    ⲆⵠⲆᐃᐃΔⵠ: "img/inv-sworm-juice-out.png",
    ⲆᐃⵠΔΔⵠΔ: "img/inv-sworm-juice-in.png",
    ⵠⵠⲆⲆⵠᐃⵠ: "img/inv-sworm-juice-click.png",
    ⲆⲆΔⵠΔᐃᐃ: "img/day-point-machine.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/night-point-machine.png",
    ᐃᐃΔⵠᐃᐃⲆ: "img/day-point-machine-hole.png",
    ⵠΔᐃⲆΔΔΔ: "img/night-point-machine-hole.png",
    ΔΔⵠΔⵠᐃᐃ: "img/day-point-machine-ground.png",
    ᐃΔⲆᐃΔⵠⲆ: "img/night-point-machine-ground.png",
    ⲆⵠⵠⵠΔΔⵠ: "img/day-point-machine-rotate.png",
    ΔᐃᐃⲆⵠΔⵠ: "img/night-point-machine-rotate.png",
    ⵠⵠⵠᐃⲆⵠΔ: "img/inv-point-machine-out.png",
    ⵠⵠⲆᐃΔΔᐃ: "img/inv-point-machine-in.png",
    ΔΔΔⵠΔⵠᐃ: "img/inv-point-machine-click.png",
    ΔᐃⵠⵠⵠᐃⲆ: "img/day-extractor-machine0-stone.png",
    ᐃᐃⲆᐃⵠⵠΔ: "img/night-extractor-machine0-stone.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-extractor-machine-stone.png",
    ⲆΔⵠᐃⵠⵠᐃ: "img/night-extractor-machine-stone.png",
    ⵠᐃᐃᐃᐃⵠⵠ: "img/inv-extractor-machine-stone-out.png",
    ᐃⵠⵠᐃᐃΔⵠ: "img/inv-extractor-machine-stone-in.png",
    ⲆⲆΔᐃᐃΔⵠ: "img/inv-extractor-machine-stone-click.png",
    ⵠᐃᐃΔᐃⵠᐃ: "img/day-extractor-machine0-gold.png",
    ΔΔᐃᐃⵠΔⵠ: "img/night-extractor-machine0-gold.png",
    ΔⵠᐃΔⵠᐃΔ: "img/day-extractor-machine-gold.png",
    ⲆⵠⲆⵠⵠⵠᐃ: "img/night-extractor-machine-gold.png",
    ΔⵠᐃΔⵠⲆΔ: "img/inv-extractor-machine-gold-out.png",
    ⵠᐃᐃⲆⲆⵠΔ: "img/inv-extractor-machine-gold-in.png",
    ΔⵠΔΔᐃΔᐃ: "img/inv-extractor-machine-gold-click.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/day-extractor-machine0-diamond.png",
    ⲆⵠᐃᐃⵠⲆⵠ: "img/night-extractor-machine0-diamond.png",
    ΔⲆᐃΔΔᐃⲆ: "img/day-extractor-machine-diamond.png",
    ⵠⲆⲆⲆⵠᐃΔ: "img/night-extractor-machine-diamond.png",
    ΔΔⲆΔᐃΔⵠ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⵠⵠΔⲆⲆΔ: "img/inv-extractor-machine-diamond-in.png",
    ⲆⵠⵠⲆΔΔΔ: "img/inv-extractor-machine-diamond-click.png",
    ᐃⵠᐃⵠⲆⲆⵠ: "img/day-extractor-machine0-amethyst.png",
    ΔᐃΔⵠⲆΔⵠ: "img/night-extractor-machine0-amethyst.png",
    ΔᐃᐃⵠⵠΔᐃ: "img/day-extractor-machine-amethyst.png",
    ⵠⵠⵠΔⵠⲆᐃ: "img/night-extractor-machine-amethyst.png",
    ⵠᐃΔᐃᐃⲆⲆ: "img/inv-extractor-machine-amethyst-out.png",
    ᐃⵠⵠᐃᐃⵠⵠ: "img/inv-extractor-machine-amethyst-in.png",
    ᐃᐃΔⵠⲆᐃⵠ: "img/inv-extractor-machine-amethyst-click.png",
    ΔΔᐃΔᐃⵠΔ: "img/day-extractor-machine0-reidite.png",
    ᐃⲆⵠⵠᐃΔᐃ: "img/night-extractor-machine0-reidite.png",
    ⲆⲆⵠᐃᐃⵠⲆ: "img/day-extractor-machine-reidite.png",
    ⲆΔⵠΔΔⵠⵠ: "img/night-extractor-machine-reidite.png",
    ⲆⲆΔⵠⲆΔⲆ: "img/inv-extractor-machine-reidite-out.png",
    ᐃΔⵠᐃΔⲆⵠ: "img/inv-extractor-machine-reidite-in.png",
    ⲆⲆᐃⵠΔⵠΔ: "img/inv-extractor-machine-reidite-click.png",
    ⲆⲆΔΔⲆⲆⵠ: "img/extractor-cases.png",
    ⲆⵠᐃⲆΔᐃⲆ: "img/day-golden-hen.png",
    ΔΔⲆΔΔΔⲆ: "img/night-golden-hen.png",
    ᐃⵠᐃᐃᐃΔᐃ: "img/day-golden-chicken.png",
    ⲆⲆⲆⲆΔᐃΔ: "img/night-golden-chicken.png",
    ᐃⲆᐃⵠⲆᐃⲆ: "img/hurt-golden-hen.png",
    ᐃΔᐃᐃΔⲆⲆ: "img/hurt-golden-chicken.png",
    ⲆⲆΔⵠⵠΔΔ: "img/logo-interface.png",
    ᐃΔⲆⲆⲆΔⵠ: "img/forest-mode-hover.png",
    ⵠᐃⵠᐃΔΔⵠ: "img/normal-mode-hover.png",
    ⲆⲆᐃⲆⵠⲆⲆ: "img/vampire-mode-hover.png",
    ᐃΔᐃⵠΔⲆΔ: "img/zombie-mode-hover.png",
    ⲆⲆᐃⵠⲆⵠⲆ: "img/community-mode-hover2.png",
    ΔᐃᐃᐃᐃΔᐃ: "img/experimental-mode-hover.png",
    ΔᐃΔⵠᐃⵠⵠ: "img/zombie-mode-out.png",
    ΔⵠΔⵠⲆΔᐃ: "img/zombie-mode-in.png",
    ᐃⲆΔᐃᐃΔΔ: "img/zombie-mode-click.png",
    ⵠΔᐃⵠⲆⲆΔ: "img/vampire-mode-out.png",
    ⵠⲆΔᐃᐃΔⵠ: "img/vampire-mode-in.png",
    ᐃⲆⵠⵠᐃⵠⵠ: "img/vampire-mode-click.png",
    ΔⲆΔΔΔᐃᐃ: "img/normal-mode-out.png",
    ΔⵠⵠⲆΔⲆⵠ: "img/normal-mode-in.png",
    ᐃⲆⲆⲆⵠΔⵠ: "img/normal-mode-click.png",
    ⲆΔⲆΔⲆᐃⵠ: "img/forest-mode-out.png",
    ΔⲆᐃⵠⵠΔⲆ: "img/forest-mode-in.png",
    ᐃⲆΔⵠⵠⲆⲆ: "img/forest-mode-click.png",
    ᐃⲆΔᐃΔⵠⵠ: "img/community-mode-out.png",
    ⵠⵠᐃⵠᐃΔΔ: "img/community-mode-in.png",
    ⵠⵠⵠⵠᐃⲆᐃ: "img/community-mode-click.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/experimental-modes-out.png",
    ᐃⲆⲆΔⵠᐃᐃ: "img/experimental-modes-in.png",
    ΔⵠⲆⲆⵠⲆⲆ: "img/experimental-modes-click.png",
    ⵠⵠΔⵠΔΔⵠ: "img/youtube-button-out.png",
    ΔᐃⵠⲆΔᐃᐃ: "img/youtube-button-in.png",
    ΔⲆΔΔⲆᐃΔ: "img/youtube-button-click.png",
    ⵠΔⲆⵠΔⵠΔ: "img/wiki-button-out.png",
    ΔⲆΔⲆᐃⵠΔ: "img/wiki-button-in.png",
    ⵠⲆᐃⵠᐃⵠᐃ: "img/wiki-button-click.png",
    ⵠᐃᐃⲆⵠᐃΔ: "img/twitter-button-out.png",
    ⲆᐃⵠⵠⲆΔΔ: "img/twitter-button-in.png",
    ⲆⲆᐃᐃⵠⲆⵠ: "img/twitter-button-click.png",
    ⵠᐃΔⵠᐃᐃⲆ: "img/facebook-button-out.png",
    ⵠΔⵠᐃᐃⵠΔ: "img/facebook-button-in.png",
    ⲆⵠⲆⲆᐃⵠΔ: "img/facebook-button-click.png",
    ⵠⵠⵠⵠΔΔⲆ: "img/reddit-button-out.png",
    ᐃⵠⲆᐃⲆΔⲆ: "img/reddit-button-in.png",
    ᐃΔᐃᐃΔⵠᐃ: "img/reddit-button-click.png",
    ΔⵠΔⵠⲆⲆᐃ: "img/discord-button-out.png",
    ΔΔᐃⵠⵠᐃⲆ: "img/discord-button-in.png",
    ⵠⵠⵠⲆⲆⲆΔ: "img/discord-button-click.png",
    ΔᐃᐃⵠΔⵠᐃ: "img/merch-button-out.png",
    ⵠⲆΔⵠⲆⲆⵠ: "img/merch-button-in.png",
    ⵠᐃΔΔΔᐃᐃ: "img/merch-button-click.png",
    ⲆⵠΔⵠⲆΔᐃⵠᐃ: "img/terminal-button-out.png",
    ⵠΔᐃΔⵠⲆⵠᐃⵠ: "img/terminal-button-in.png",
    ᐃΔⵠΔΔΔⵠᐃⲆ: "img/terminal-button-click.png",
    ⲆΔⵠᐃⲆⵠⲆ: "img/restart-out.png",
    ⲆΔΔΔⲆⵠⲆ: "img/restart-in.png",
    ⵠⵠᐃᐃⵠΔⲆ: "img/restart-click.png",
    ⵠⵠⲆΔⵠⲆΔ: "img/guide-out.png",
    ⲆΔᐃⲆᐃΔⲆ: "img/guide-in.png",
    ⲆⲆΔⲆᐃΔᐃ: "img/guide-click.png",
    ΔᐃΔΔᐃⲆⲆ: "img/copy-paste-out.png",
    ΔⲆⲆⵠⵠⲆᐃ: "img/copy-paste-in.png",
    ⵠⲆΔΔⲆⲆΔ: "img/copy-paste-click.png",
    ⵠⵠⲆⵠⲆΔᐃ: "img/link-buttons-bg.png",
    ⲆΔΔⵠΔΔᐃ: "img/changelog-box2.png",
    ⵠᐃΔⲆᐃΔΔ: "img/changelog_30.png",
    ᐃᐃⲆⲆⲆΔⲆ: "img/banner-taming.png",
    ΔΔⲆΔⵠᐃΔ: "img/profile-button-out.png",
    ᐃᐃⵠⵠΔᐃⵠ: "img/profile-button-in.png",
    ⲆᐃⵠⲆΔⲆΔ: "img/profile-button-click.png",
    ΔⵠⲆⵠⲆⵠⲆ: "img/login-button-out.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/login-button-in.png",
    ᐃⵠⲆΔᐃⲆΔ: "img/login-button-click.png",
    ΔⲆⲆᐃΔⲆΔ: "img/login-google-out.png",
    ⵠᐃᐃⵠΔᐃⲆ: "img/login-google-in.png",
    ΔⲆᐃⵠᐃⲆⵠ: "img/login-google-click.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/login-facebook-out.png",
    ⲆΔΔᐃᐃⲆⲆ: "img/login-facebook-in.png",
    ⵠᐃΔⵠᐃΔΔ: "img/login-facebook-click.png",
    ⲆᐃⵠᐃⲆᐃⲆ: "img/account-box.png",
    ᐃΔΔⲆⲆⲆⲆᐃⵠ: "img/account-under-maintenance.png",
    ΔⲆᐃⵠΔⲆᐃ: "img/close-button-account-out.png",
    ΔⵠᐃⲆΔⵠᐃ: "img/close-button-account-in.png",
    ⲆⵠᐃⲆⲆᐃⲆ: "img/close-button-account-click.png",
    ᐃⲆᐃΔᐃⲆⲆ: "img/play-button-out.png",
    ⲆΔⲆⵠⲆΔΔ: "img/play-button-in.png",
    ⲆⲆΔⵠⵠⵠⲆ: "img/play-button-click.png",
    ᐃⵠⵠⲆⲆΔⲆᐃΔ: "img/app-store-badge.png",
    ΔⵠᐃⲆⵠⵠⵠΔⲆ: "img/play-store-badge.png",
    ΔⵠⲆⲆⵠⵠⵠΔⲆ: "img/mobile-boxad.png",
    ΔᐃⵠⲆΔΔΔ: "img/modify-name-out.png",
    ΔΔΔⲆΔᐃᐃ: "img/modify-name-in.png",
    ΔΔΔⵠᐃᐃΔ: "img/modify-name-click.png",
    ⵠΔΔⲆᐃⵠⲆ: "img/yes-button-out.png",
    ⲆΔⲆⵠᐃⵠⲆ: "img/yes-button-in.png",
    ᐃᐃⵠᐃⲆⵠⲆ: "img/yes-button-click.png",
    ⲆⵠⲆᐃΔⵠᐃ: "img/yes-300-button-out.png",
    ⲆⲆᐃΔΔⲆᐃ: "img/yes-300-button-in.png",
    ΔᐃΔⲆⵠᐃΔ: "img/yes-300-button-click.png",
    ⵠΔⲆⵠⵠⵠⵠ: "img/no-button-out.png",
    ΔᐃᐃⲆⵠⵠᐃ: "img/no-button-in.png",
    ᐃΔⵠᐃΔᐃΔ: "img/no-button-click.png",
    ⲆΔⲆᐃᐃᐃᐃ: "img/no-thanks-button-out.png",
    ᐃⵠΔᐃᐃᐃⵠ: "img/no-thanks-button-in.png",
    ⵠᐃⲆΔΔⲆᐃ: "img/no-thanks-button-click.png",
    ⵠⲆⲆᐃᐃⵠΔ: "img/shop-button-out.png",
    ⲆΔⵠⵠᐃᐃⲆ: "img/shop-button-in.png",
    ΔΔⵠⵠⲆⲆᐃ: "img/shop-button-click.png",
    ᐃⲆⵠⲆⲆᐃⵠ: "img/logout-out.png",
    ⵠⲆⲆⵠΔⲆⲆ: "img/logout-in.png",
    ⲆⲆⲆⲆᐃΔΔ: "img/logout-click.png",
    ⵠᐃΔᐃΔⲆⲆ: "img/terms-button-out.png",
    ΔⲆᐃⲆᐃⲆΔ: "img/terms-button-in.png",
    ᐃⲆⵠⲆⲆⲆⵠ: "img/terms-button-click.png",
    ⲆᐃⲆᐃΔᐃⲆ: "img/tutorial-icon.png",
    ΔⵠΔᐃᐃΔΔ: "img/skins-icon.png",
    ⵠⲆᐃᐃᐃⲆᐃ: "img/shop-icon.png",
    ᐃᐃⲆⲆⵠⲆᐃⵠᐃ: "img/paint-icon.png",
    ᐃⵠⵠΔᐃⵠⵠ: "img/leaderboard-icon.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/start-icon.png",
    ΔⲆⲆΔΔᐃΔ: "img/profile-icon.png",
    ΔⲆⲆΔⵠⲆᐃ: "img/server-access-icon2.png",
    ᐃⲆⲆⲆⲆᐃΔ: "img/button-homepage-bg-out.png",
    ⵠⵠᐃⲆⵠⵠⲆ: "img/button-homepage-bg-in.png",
    ΔᐃΔᐃⵠⲆⲆ: "img/button-homepage-bg-click.png",
    ⲆⵠⵠⵠⲆⵠΔ: "img/button-bottom-homepage-bg-out.png",
    ΔⵠⲆⲆⲆⵠᐃ: "img/button-bottom-homepage-bg-in.png",
    ᐃᐃⵠᐃⲆΔΔ: "img/button-bottom-homepage-bg-click.png",
    ΔⲆᐃᐃⵠᐃⵠ: "img/lvl-player.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/avatar-player.png",
    ᐃΔⲆⵠᐃᐃᐃ: "img/avatar-player1.png",
    ΔⲆᐃⲆⲆᐃⲆ: "img/avatar-player2.png",
    ᐃΔΔᐃΔⲆⲆ: "img/avatar-player3.png",
    ⵠΔᐃΔᐃΔᐃ: "img/avatar-player4.png",
    ⲆⲆᐃΔΔᐃⲆ: "img/avatar-player5.png",
    ᐃⲆⲆΔΔᐃⵠ: "img/avatar-player6.png",
    ᐃᐃΔᐃⲆᐃⵠ: "img/avatar-player7.png",
    ⲆΔⵠⲆⲆⲆΔ: "img/avatar-player8.png",
    ⵠⲆᐃᐃⵠΔⵠ: "img/avatar-player9.png",
    ⵠᐃΔᐃⵠⲆΔ: "img/avatar-player10.png",
    ⲆΔΔᐃⲆΔⵠ: "img/avatar-player11.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/avatar-player12.png",
    ⲆⲆⵠᐃⲆΔᐃ: "img/avatar-player13.png",
    ⵠⲆⲆΔᐃⲆᐃ: "img/avatar-player14.png",
    ⲆⵠᐃⵠⲆᐃᐃ: "img/avatar-player14.png",
    ΔⲆΔΔⲆⵠᐃ: "img/avatar-player14.png",
    ⲆᐃΔΔΔᐃᐃ: "img/avatar-player14.png",
    ᐃⵠΔⲆΔⵠΔᐃΔ: "img/golden-bread.png",
    ⵠⲆΔᐃⵠΔⵠ: "img/buy-bread-out.png",
    ⵠⵠᐃⵠⲆᐃΔ: "img/buy-bread-in.png",
    ⲆⵠΔΔᐃⲆΔ: "img/buy-bread-click.png",
    ⲆⲆⲆΔΔΔΔ: "img/gauge.png",
    ⵠⵠⵠⲆⵠⵠᐃᐃΔ: "img/season-4-out.png",
    ᐃⲆᐃᐃⵠΔⵠΔΔ: "img/season-4-in.png",
    ᐃΔΔⲆⵠΔⲆᐃⵠ: "img/season-4-click.png",
    ⵠΔᐃΔⵠⲆΔΔⲆ: "img/season4-box.png",
    ᐃⵠΔⵠᐃⵠΔΔⵠ: "img/season-5-out.png",
    ΔᐃⵠⵠᐃⵠⲆⵠⵠ: "img/season-5-in.png",
    ᐃΔⲆⵠᐃⵠΔΔⲆ: "img/season-5-click.png",
    ⲆΔᐃΔΔⵠΔⲆⵠ: "img/season5-box.png",
    ⵠΔⵠⵠΔΔᐃ: "img/season-6-out.png",
    ᐃⲆΔⵠᐃᐃⵠ: "img/season-6-in.png",
    ⵠⲆⲆΔᐃⲆⲆ: "img/season-6-click.png",
    ΔⲆⵠᐃⵠᐃΔ: "img/season6-box.png",
    ΔⲆᐃΔⲆΔᐃ: "img/profile3-box.png",
    ΔᐃⲆⵠⵠⵠⵠ: "img/skins-box.png",
    ⲆᐃᐃⵠⵠⲆⲆ: "img/shop-box.png",
    ⲆΔΔⲆᐃᐃⲆΔΔ: "img/private-server-box.png",
    ΔⲆΔᐃΔⲆΔ: "img/location-box.png",
    ΔⲆᐃΔΔⲆᐃ: "img/server-duration-box.png",
    ΔⵠⵠⵠⲆΔⲆ: "img/tutorial-box.png",
    ΔᐃᐃᐃⲆᐃΔ: "img/leaderboard2-box.png",
    ᐃΔΔⲆΔⲆΔ: "img/buy-breads-box.png",
    ⲆⵠᐃⲆᐃΔΔ: "img/bag-box.png",
    ⲆΔⵠᐃᐃᐃΔ: "img/deadbox-box.png",
    ΔⲆⲆⲆᐃΔΔ: "img/book-box.png",
    ᐃᐃΔᐃΔⵠᐃ: "img/accessories-box.png",
    ⲆⲆⲆⲆΔⵠΔ: "img/customskin-box.png",
    ⵠᐃⲆⲆᐃᐃΔ: "img/bag-lasts.png",
    ⵠΔⲆⲆᐃᐃᐃ: "img/server-lasts.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/server-access-box2.png",
    ⵠᐃⵠΔⲆᐃⲆ: "img/lootbox-box.png",
    ᐃⵠⵠⵠⲆΔΔ: "img/change-nickname0.png",
    ᐃᐃⵠᐃΔΔⵠ: "img/change-nickname1.png",
    ⲆⲆᐃᐃΔᐃⲆ: "img/cheating-box.png",
    ⵠᐃⵠⲆⵠᐃᐃΔⲆ: "img/daily-quest-box.png",
    ⵠⵠΔᐃᐃⵠᐃⲆⲆ: "img/daily-5-bread.png",
    ᐃⲆⵠⲆΔᐃᐃⵠᐃ: "img/daily-10-bread.png",
    ΔᐃⲆᐃⲆᐃⵠᐃⵠ: "img/daily-valid.png",
    ᐃΔᐃⵠᐃᐃΔ: "img/normal-profile-out.png",
    ΔᐃΔⲆⲆⵠΔ: "img/normal-profile-in.png",
    ᐃⵠⵠⲆⲆᐃⲆ: "img/normal-profile-click.png",
    ⵠᐃΔΔΔΔⲆ: "img/forest-profile-out.png",
    ᐃΔⵠΔᐃⵠⵠ: "img/forest-profile-in.png",
    ⲆΔⵠⲆΔⵠᐃ: "img/forest-profile-click.png",
    ⲆΔᐃΔΔⲆᐃ: "img/zombie-profile-out.png",
    ΔΔⵠⵠᐃᐃᐃ: "img/zombie-profile-in.png",
    ᐃΔⲆᐃΔΔΔ: "img/zombie-profile-click.png",
    ⲆⲆΔⲆΔⲆⲆ: "img/vampire-profile-out.png",
    ᐃⵠⵠΔΔⲆᐃ: "img/vampire-profile-in.png",
    ᐃⵠΔⲆᐃᐃⵠ: "img/vampire-profile-click.png",
    ᐃⵠⵠΔⵠΔΔ: "img/total-profile-out.png",
    ⲆⲆⲆΔΔⵠⵠ: "img/total-profile-in.png",
    ⲆⲆⵠᐃⲆⲆⲆ: "img/total-profile-click.png",
    ΔⲆⵠⲆⲆⵠᐃ: "img/season1-out.png",
    ᐃⲆᐃΔⲆⲆⵠ: "img/season1-in.png",
    ΔᐃⲆΔᐃᐃⲆ: "img/season1-click.png",
    ΔᐃⲆᐃⲆⲆᐃ: "img/season2-out.png",
    ᐃⲆⵠⲆⵠⲆΔ: "img/season2-in.png",
    ᐃⲆⲆⲆᐃⵠΔ: "img/season2-click.png",
    ᐃΔⲆᐃⲆⲆⲆ: "img/season3-out.png",
    ⲆᐃᐃⲆᐃᐃΔ: "img/season3-in.png",
    ᐃᐃⲆⵠᐃⵠΔ: "img/season3-click.png",
    ᐃⲆᐃΔⵠΔⲆ: "img/season4-out.png",
    ⵠⲆⵠΔⵠⵠᐃ: "img/season4-in.png",
    ⲆΔΔΔΔΔᐃ: "img/season4-click.png",
    ΔⵠⲆᐃΔΔΔ: "img/season5-out.png",
    ᐃᐃΔΔΔⵠᐃ: "img/season5-in.png",
    ᐃΔⵠΔΔⵠΔ: "img/season5-click.png",
    ⵠⵠᐃⲆΔᐃⵠ: "img/season6-out.png",
    ᐃⵠᐃᐃⲆΔΔ: "img/season6-in.png",
    ᐃⲆᐃᐃⵠᐃⲆ: "img/season6-click.png",
    ⵠᐃΔⲆΔⵠⲆ: "img/locked-skin-alert.png",
    ⲆⵠⵠⲆⵠⲆⲆ: "img/locked-custom-alert.png",
    ΔᐃⵠⵠⲆΔⵠ: "img/bg-red-locked.png",
    ⵠⲆⲆⵠⵠⵠᐃ: "img/skin-button-out.png",
    ᐃᐃᐃΔⲆᐃΔ: "img/skin-button-in.png",
    ⲆΔᐃΔⵠⲆⵠ: "img/skin-button-click.png",
    ⲆⲆᐃᐃⲆⲆᐃ: "img/accessory-button-out.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/accessory-button-in.png",
    ⲆΔⵠΔⲆⵠⲆ: "img/accessory-button-click.png",
    ᐃᐃΔΔⲆᐃΔ: "img/bag-button-out.png",
    ᐃᐃᐃⲆⵠⵠⲆ: "img/bag-button-in.png",
    ΔⵠΔᐃⵠΔΔ: "img/bag-button-click.png",
    ᐃᐃᐃᐃⲆᐃΔ: "img/book-button-out.png",
    ΔΔΔⲆᐃⲆⲆ: "img/book-button-in.png",
    ⲆᐃᐃⵠⵠⲆᐃ: "img/book-button-click.png",
    ⲆⲆⵠⲆΔⲆⵠ: "img/deadbox-button-out.png",
    ΔⵠⲆⵠᐃΔⲆ: "img/deadbox-button-in.png",
    ΔⲆΔΔΔΔΔ: "img/deadbox-button-click.png",
    ΔᐃⵠⵠⵠⲆⵠ: "img/loot-button-out.png",
    ⵠᐃⵠΔᐃⵠᐃ: "img/loot-button-in.png",
    ⵠΔⵠΔᐃᐃᐃ: "img/loot-button-click.png",
    ᐃⵠⵠᐃⵠⵠΔ: "img/free-item-out.png",
    ⲆⵠᐃᐃΔᐃᐃ: "img/free-item-in.png",
    ⵠΔᐃᐃΔⲆⵠ: "img/free-item-click.png",
    ⲆⲆⲆᐃ: "img/wood-item-out.png",
    ᐃΔΔᐃ: "img/wood-item-in.png",
    ⵠΔⵠⵠ: "img/wood-item-click.png",
    ⲆᐃⵠΔᐃⲆⲆ: "img/stone-item.png",
    ⲆⵠⲆⲆⲆⲆⲆ: "img/stone-item-in.png",
    ᐃᐃΔᐃⲆΔΔ: "img/stone-item-click.png",
    ᐃⵠⲆⲆⲆΔⵠ: "img/gold-item.png",
    ⲆΔΔⵠⲆᐃΔ: "img/gold-item-in.png",
    ⲆⵠⲆⵠΔᐃⲆ: "img/gold-item-click.png",
    ⵠⵠΔⲆⲆⲆᐃ: "img/diamond-item.png",
    ΔⲆⵠᐃΔⲆⲆ: "img/diamond-item-in.png",
    ⲆⲆⲆⲆᐃⲆⲆ: "img/diamond-item-click.png",
    ⵠΔⵠΔᐃⵠⲆ: "img/amethyst-item.png",
    ΔⲆΔⵠᐃⵠᐃ: "img/amethyst-item-in.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/amethyst-item-click.png",
    ᐃΔⲆⲆⲆᐃᐃ: "img/reidite-item.png",
    ⲆⲆᐃⵠⵠⵠᐃ: "img/reidite-item-in.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/reidite-item-click.png",
    ΔᐃᐃΔᐃΔⵠ: "img/special-item-out.png",
    ⲆΔΔΔᐃⵠⵠ: "img/special-item-in.png",
    ⲆΔᐃⵠⲆΔⲆ: "img/special-item-click.png",
    ΔΔⵠⵠᐃΔᐃ: "img/level-item-out.png",
    ΔⵠⲆⲆⲆⲆΔ: "img/level-item-in.png",
    ᐃΔᐃΔΔⵠⲆ: "img/level-item-click.png",
    ΔⲆⵠΔᐃΔⲆ: "img/skin-previous-out.png",
    ⵠᐃⵠⵠⵠⵠⲆ: "img/skin-previous-in.png",
    ⵠΔⵠⲆᐃⵠᐃ: "img/skin-previous-click.png",
    ⲆⵠⵠⵠⵠⵠⲆ: "img/skin-next-out.png",
    ⲆⵠᐃΔᐃΔᐃ: "img/skin-next-in.png",
    ΔΔⵠⲆᐃⲆΔ: "img/skin-next-click.png",
    ᐃⲆΔΔⵠ: "img/back-button-out.png",
    ᐃⵠᐃⵠⵠ: "img/back-button-in.png",
    ᐃⲆᐃⵠΔ: "img/back-button-click.png",
    ⲆⵠΔⲆⲆⵠᐃ: "img/get-more-button-out.png",
    ⲆⲆⲆᐃⲆΔᐃ: "img/get-more-button-in.png",
    ᐃΔⲆⵠⵠⲆⵠ: "img/get-more-button-click.png",
    ⵠΔᐃⵠΔᐃᐃ: "img/currency1-out.png",
    ΔΔΔᐃΔⲆⲆ: "img/currency1-in.png",
    ⵠΔᐃⵠⲆᐃⵠ: "img/currency1-click.png",
    ΔᐃⲆᐃᐃⵠΔ: "img/currency2-out.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/currency2-in.png",
    ᐃⲆΔΔⲆⲆΔ: "img/currency2-click.png",
    Δⵠⵠⵠᐃⵠⵠ: "img/currency3-out.png",
    ⵠᐃᐃⵠⵠⵠΔ: "img/currency3-in.png",
    ᐃΔᐃⲆⵠⵠⵠ: "img/currency3-click.png",
    ⵠᐃⵠⵠⵠⲆⲆ: "img/currency4-out.png",
    ⵠⵠΔⵠᐃᐃⲆ: "img/currency4-in.png",
    ⵠΔΔΔⵠᐃΔ: "img/currency4-click.png",
    ᐃⵠⵠⲆⲆᐃᐃ: "img/currency5-out.png",
    ⵠᐃⵠⲆᐃᐃᐃ: "img/currency5-in.png",
    ⲆΔⵠⵠⵠΔⵠ: "img/currency5-click.png",
    ⲆΔⵠⵠΔⵠⵠ: "img/price1-out.png",
    Δᐃᐃᐃⵠᐃⵠ: "img/price1-in.png",
    ᐃⲆᐃⲆΔᐃⵠ: "img/price1-click.png",
    ⲆΔΔΔᐃΔΔ: "img/price2-out.png",
    ΔᐃΔΔΔᐃΔ: "img/price2-in.png",
    ΔⲆΔⲆΔⵠᐃ: "img/price2-click.png",
    ᐃΔᐃⲆᐃⲆΔ: "img/price3-out.png",
    ⲆΔᐃⲆΔᐃⵠ: "img/price3-in.png",
    ⵠΔΔΔᐃⲆΔ: "img/price3-click.png",
    ⲆⵠⵠΔⵠⵠⵠ: "img/price4-out.png",
    ⲆᐃⵠΔΔⵠᐃ: "img/price4-in.png",
    ΔⵠⲆⵠⵠⲆⲆ: "img/price4-click.png",
    ᐃⵠⵠⲆΔⲆⵠ: "img/price5-out.png",
    ᐃΔⵠⵠⵠᐃΔ: "img/price5-in.png",
    ΔΔΔᐃⵠᐃⲆ: "img/price5-click.png",
    ᐃⵠⵠᐃⲆΔΔᐃⵠ: "img/buy-private-server-out.png",
    ΔᐃⵠⲆΔⵠⲆⵠⵠ: "img/buy-private-server-in.png",
    ⵠⵠΔⲆⲆⲆΔⲆΔ: "img/buy-private-server-click.png",
    ⲆΔΔⵠⵠⵠΔ: "img/atlanta-out.png",
    ᐃᐃΔⵠⵠΔΔ: "img/atlanta-in.png",
    ⵠⵠⲆΔᐃΔⲆ: "img/atlanta-click.png",
    ⵠⵠᐃᐃⲆⵠⲆ: "img/dallas-out.png",
    ⵠᐃⵠΔᐃⵠⵠ: "img/dallas-in.png",
    ⵠⵠΔΔΔⲆⵠ: "img/dallas-click.png",
    ⲆᐃⵠΔⵠⲆⲆ: "img/fremont-out.png",
    ⲆᐃⲆΔⲆⵠⵠ: "img/fremont-in.png",
    ᐃⲆᐃⵠΔᐃᐃ: "img/fremont-click.png",
    ⵠⲆⵠΔⲆᐃⲆ: "img/newark-out.png",
    ΔⲆⲆᐃⲆⲆⵠ: "img/newark-in.png",
    ΔΔⵠⵠⵠΔⵠ: "img/newark-click.png",
    ΔᐃⲆΔΔᐃⵠ: "img/toronto-out.png",
    ⲆᐃΔⵠᐃΔⵠ: "img/toronto-in.png",
    ⲆᐃᐃᐃᐃⵠⲆ: "img/toronto-click.png",
    ⲆᐃΔΔⲆⲆⵠ: "img/singapore-out.png",
    ΔⲆᐃΔⲆⵠⵠ: "img/singapore-in.png",
    ᐃⵠⲆⲆᐃⵠΔ: "img/singapore-click.png",
    ᐃΔⵠⲆⲆᐃⵠ: "img/frankfurt-out.png",
    ᐃⲆΔΔᐃⲆⵠ: "img/frankfurt-in.png",
    ⵠΔᐃΔΔⲆᐃ: "img/frankfurt-click.png",
    ⵠⵠΔᐃⵠⵠΔ: "img/london-out.png",
    ΔⵠΔⲆⵠⲆⲆ: "img/london-in.png",
    ⲆⵠⵠⵠⲆⵠⲆ: "img/london-click.png",
    ᐃΔⲆᐃΔⲆⵠ: "img/mumbai-out.png",
    ΔⲆⲆΔΔᐃᐃ: "img/mumbai-in.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/mumbai-click.png",
    ᐃΔⵠⵠⵠⲆⵠ: "img/tokyo-out.png",
    ⲆΔⵠᐃⲆⲆⵠ: "img/tokyo-in.png",
    ⵠⲆᐃⲆⲆΔᐃ: "img/tokyo-click.png",
    ⲆΔⲆⵠⵠⲆᐃⵠᐃ: "img/yes-location-out.png",
    ⲆΔⵠⲆⵠᐃⵠⲆΔ: "img/yes-location-in.png",
    ΔⵠᐃⲆⲆⵠΔΔΔ: "img/yes-location-click.png",
    ⲆⲆᐃΔᐃⲆΔ: "img/3days-out.png",
    ⵠⲆΔΔⵠᐃⲆ: "img/3days-in.png",
    ⲆⲆΔⲆᐃᐃᐃ: "img/3days-click.png",
    ᐃⲆⲆᐃⲆⵠᐃ: "img/7days-out.png",
    ᐃΔⵠⲆⲆΔΔ: "img/7days-in.png",
    ⵠⲆⲆⲆΔⲆᐃ: "img/7days-click.png",
    ΔᐃⲆⵠᐃⵠⲆ: "img/30days-out.png",
    ⲆᐃΔΔⲆΔⵠ: "img/30days-in.png",
    ΔΔⲆⵠⵠᐃⲆ: "img/30days-click.png",
    ⲆΔᐃⲆⵠΔⲆ: "img/90days-out.png",
    ΔᐃΔⲆⲆⲆⵠ: "img/90days-in.png",
    ᐃⲆⲆⵠΔⵠⲆ: "img/90days-click.png",
    ⲆⵠⵠⲆᐃΔⵠ: "img/spin1.png",
    ᐃⵠΔⵠⵠᐃⵠ: "img/spin2.png",
    ᐃᐃΔᐃⵠΔΔ: "img/spin3.png",
    ⲆΔΔᐃᐃⲆⵠ: "img/spin4.png",
    ΔⲆⵠΔⵠᐃΔ: "img/spin5.png",
    ᐃⵠΔⲆⲆⵠΔ: "img/spin6.png",
    ⵠⲆΔΔᐃⵠⲆ: "img/arrow-spin.png",
    ΔΔΔΔᐃⵠⲆ: "img/spin-button-1-out.png",
    ᐃⲆⲆⲆⲆⲆΔ: "img/spin-button-1-in.png",
    ᐃⲆΔⲆᐃᐃⵠ: "img/spin-button-1-click.png",
    ⵠⵠᐃΔⲆᐃⵠ: "img/spin-button-2-out.png",
    ΔⵠⵠΔⵠᐃⲆ: "img/spin-button-2-in.png",
    ⵠⵠⵠΔᐃΔᐃ: "img/spin-button-2-click.png",
    ⲆⵠᐃᐃⲆᐃΔ: "img/spin-button-3-out.png",
    ᐃⵠᐃΔⵠⲆⲆ: "img/spin-button-3-in.png",
    ΔᐃΔⵠⲆⲆΔ: "img/spin-button-3-click.png",
    ⵠⵠᐃΔΔᐃΔ: "img/spin-button-4-out.png",
    ᐃⲆΔᐃΔᐃΔ: "img/spin-button-4-in.png",
    ΔΔⲆᐃⲆΔΔ: "img/spin-button-4-click.png",
    ⵠᐃᐃΔᐃΔΔ: "img/spin-button-5-out.png",
    ⵠⵠᐃᐃΔΔᐃ: "img/spin-button-5-in.png",
    ΔᐃᐃⵠⲆΔΔ: "img/spin-button-5-click.png",
    Δⵠⵠⵠᐃᐃⵠ: "img/spin-light.png",
    ⵠⲆⲆⲆΔᐃⵠ: "img/tuto-wiki-out.png",
    ᐃⵠΔⵠⵠΔΔ: "img/tuto-wiki-in.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/tuto-wiki-click.png",
    ⵠᐃΔⵠΔⵠΔ: "img/tuto-previous-out.png",
    ⲆⲆⲆᐃΔᐃⲆ: "img/tuto-previous-in.png",
    ᐃΔΔΔΔⵠⲆ: "img/tuto-previous-click.png",
    ΔᐃΔᐃⲆᐃΔ: "img/tuto-next-out.png",
    ΔᐃΔⲆΔᐃΔ: "img/tuto-next-in.png",
    ΔⵠⵠᐃⲆᐃΔ: "img/tuto-next-click.png",
    ⲆⲆᐃⲆᐃⲆⲆ: "img/time-leaderboard-out.png",
    ⵠⵠΔⵠⲆᐃⲆ: "img/time-leaderboard-in.png",
    ⲆᐃⵠⲆⲆΔⲆ: "img/time-leaderboard-click.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/score-leaderboard-out.png",
    ΔΔⵠⵠΔᐃΔ: "img/score-leaderboard-in.png",
    ⵠᐃᐃᐃⵠⵠⵠ: "img/score-leaderboard-click.png",
    ΔᐃⲆᐃⵠΔⲆ: "img/lvl-leaderboard-out.png",
    ΔⵠᐃⲆΔⵠⲆ: "img/lvl-leaderboard-in.png",
    ΔΔⵠⲆⵠᐃⲆ: "img/lvl-leaderboard-click.png",
    ⲆΔⲆΔⵠΔⵠ: "img/kill-leaderboard-out.png",
    ᐃᐃᐃⵠΔⲆᐃ: "img/kill-leaderboard-in.png",
    ⲆⵠⵠⲆᐃΔΔ: "img/kill-leaderboard-click.png",
    ΔᐃⲆΔΔⵠᐃ: "img/all-leaderboard-out.png",
    ᐃᐃⲆⵠΔⲆⲆ: "img/all-leaderboard-in.png",
    ΔΔΔⲆΔⵠⵠ: "img/all-leaderboard-click.png",
    ⵠⵠⲆⲆⵠⲆΔ: "img/today-leaderboard-out.png",
    ⲆΔᐃⲆᐃΔΔ: "img/today-leaderboard-in.png",
    ᐃⵠᐃⵠⲆⵠΔ: "img/today-leaderboard-click.png",
    ΔΔΔΔⲆⵠⵠ: "img/week-leaderboard-out.png",
    ΔᐃⵠⲆⵠⵠᐃ: "img/week-leaderboard-in.png",
    ⲆΔⵠⵠⲆⵠΔ: "img/week-leaderboard-click.png",
    ⵠⲆⵠΔᐃᐃᐃ: "img/season1-out.png",
    ⲆⵠᐃⵠⵠΔⲆ: "img/season1-in.png",
    ⲆᐃⵠΔⲆⲆΔ: "img/season1-click.png",
    ⲆᐃⵠⲆᐃⵠΔ: "img/season2-out.png",
    ⲆⵠΔⵠᐃⵠⵠ: "img/season2-in.png",
    ⲆⵠⵠΔΔΔΔ: "img/season2-click.png",
    ΔⲆⲆᐃⵠⵠⵠ: "img/season3-out.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/season3-in.png",
    ⲆⲆΔᐃᐃΔᐃ: "img/season3-click.png",
    ΔⲆΔΔⵠΔΔ: "img/season4-out.png",
    ΔⲆⵠΔⵠΔᐃ: "img/season4-in.png",
    ΔⵠⲆΔΔⲆⵠ: "img/season4-click.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/season5-out.png",
    ΔⵠΔΔΔⵠⲆ: "img/season5-in.png",
    ΔΔⵠⲆᐃⲆⵠ: "img/season5-click.png",
    ⵠᐃᐃⲆΔⲆᐃ: "img/season6-out.png",
    ⲆΔⵠᐃᐃΔΔ: "img/season6-in.png",
    ᐃⲆⵠⵠⲆΔᐃ: "img/season6-click.png",
    ᐃⲆΔᐃⲆΔᐃ: "img/total-lead-out.png",
    ⲆΔⵠⵠⲆⲆⵠ: "img/total-lead-in.png",
    ⵠᐃⵠⵠΔⲆᐃ: "img/total-lead-click.png",
    ⲆⵠⵠⲆⵠΔΔ: "img/normal-lead-out.png",
    ⵠⲆⵠΔⲆΔᐃ: "img/normal-lead-in.png",
    ΔᐃⵠᐃΔΔⵠ: "img/normal-lead-click.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/forest-lead-out.png",
    ΔΔⲆΔΔⲆᐃ: "img/forest-lead-in.png",
    ⲆᐃⵠⵠΔΔⵠ: "img/forest-lead-click.png",
    ⵠⲆΔⲆᐃᐃΔ: "img/vampire-lead-out.png",
    ⲆⵠΔⲆⵠΔΔ: "img/vampire-lead-in.png",
    ⲆⲆᐃⲆᐃⵠⲆ: "img/vampire-lead-click.png",
    ΔⵠⲆΔΔᐃΔ: "img/zombie-lead-out.png",
    ⵠΔⵠᐃⵠΔΔ: "img/zombie-lead-in.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/zombie-lead-click.png",
    ᐃΔᐃⵠⲆΔᐃ: "img/day-level5.png",
    ⵠⵠⵠΔΔⵠⵠ: "img/night-level5.png",
    ⲆⲆΔⵠⵠⲆⲆ: "img/day-level10.png",
    ΔⲆᐃⵠⲆⲆⲆ: "img/night-level10.png",
    ΔΔⲆⵠΔⲆΔ: "img/day-level15.png",
    ᐃⲆᐃⲆⲆⲆΔ: "img/night-level15.png",
    ⵠⵠΔⲆᐃᐃⵠ: "img/day-level20.png",
    ⵠΔⵠᐃⲆΔᐃ: "img/night-level20.png",
    ⵠᐃⲆⲆΔᐃᐃ: "img/day-level25.png",
    ΔⵠᐃᐃⲆᐃᐃ: "img/night-level25.png",
    ᐃΔⲆⵠΔᐃⵠ: "img/day-level30.png",
    ᐃⵠᐃⵠⲆΔⲆ: "img/night-level30.png",
    ᐃᐃⵠⵠᐃᐃⲆ: "img/day-level35.png",
    ⵠⵠⵠⲆⵠⲆᐃ: "img/night-level35.png",
    ᐃΔΔⲆᐃⵠⲆ: "img/day-level40.png",
    ⵠΔⲆⵠᐃᐃᐃ: "img/night-level40.png",
    ⲆⲆⲆΔⵠⵠᐃ: "img/day-level45.png",
    ᐃᐃΔⵠⵠⲆⵠ: "img/night-level45.png",
    ⵠΔⲆⲆΔⲆᐃ: "img/day-level50.png",
    ᐃⵠᐃⵠΔΔⲆ: "img/night-level50.png",
    ⵠᐃⲆᐃΔΔᐃ: "img/day-level55.png",
    ΔⵠⵠΔᐃⲆⲆ: "img/night-level55.png",
    ᐃΔⲆΔΔᐃΔ: "img/day-level60.png",
    ΔⲆᐃⲆᐃΔΔ: "img/night-level60.png",
    ⲆⵠΔⲆⵠⲆⵠ: "img/day-skin-devast0.png",
    ⵠᐃΔⲆⲆΔΔ: "img/night-skin-devast0.png",
    ᐃΔⵠΔⲆΔᐃ: "img/day-hand-devaster.png",
    ⲆΔⵠᐃⲆΔⵠ: "img/night-hand-devaster.png",
    ⲆⵠⵠΔᐃΔⲆ: "img/day-skin-star0.png",
    ΔⵠⲆⵠᐃⲆⵠ: "img/night-skin-star0.png",
    ⵠⲆΔⵠΔⲆⵠ: "img/day-hand-star0.png",
    ᐃⵠⲆⵠⵠⵠΔ: "img/night-hand-star0.png",
    ΔⵠΔⲆⲆⵠⲆ: "img/day-vampire.png",
    ΔⵠᐃⲆⲆⵠⵠ: "img/night-vampire.png",
    ΔΔΔⲆΔⲆⲆ: "img/day-hand-vampire.png",
    ΔⵠⲆΔⵠⵠᐃ: "img/night-hand-vampire.png",
    ΔⲆⲆᐃⵠᐃⲆ: "img/day-zombie.png",
    ΔΔΔᐃᐃⵠⲆ: "img/night-zombie.png",
    ΔⵠᐃⲆᐃΔⵠ: "img/day-hand-zombie.png",
    ⵠΔⲆⲆⵠᐃΔ: "img/night-hand-zombie.png",
    ⵠⵠᐃᐃⵠᐃⲆ: "img/day-skin113.png",
    ΔⵠⵠΔⵠΔⵠ: "img/night-skin113.png",
    ΔⵠⵠᐃⲆⲆΔ: "img/day-hand-skin113.png",
    ⲆⵠⵠᐃᐃⵠΔ: "img/night-hand-skin113.png",
    ⵠⲆⵠⲆⲆⵠᐃ: "img/day-skin0.png",
    ᐃΔⵠⲆⲆⲆᐃ: "img/night-skin0.png",
    ᐃⲆΔⵠᐃΔⵠ: "img/day-skin1.png",
    ⲆΔⲆᐃΔⵠᐃ: "img/night-skin1.png",
    ΔΔΔⵠⲆⵠⲆ: "img/day-skin2.png",
    ⵠΔⲆⲆΔΔⵠ: "img/night-skin2.png",
    ⲆⲆⵠᐃⲆⵠⲆ: "img/day-skin3.png",
    ⵠᐃΔΔᐃⲆΔ: "img/night-skin3.png",
    ⵠΔⵠΔΔΔᐃ: "img/day-skin4.png",
    ᐃⵠⵠⲆⲆⵠᐃ: "img/night-skin4.png",
    ⵠᐃⵠᐃⲆⲆⲆ: "img/day-skin5.png",
    ⲆⵠⵠᐃᐃⲆⵠ: "img/night-skin5.png",
    ᐃΔⵠᐃᐃⵠⲆ: "img/day-skin6.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/night-skin6.png",
    ΔⵠⲆⵠⲆⵠᐃ: "img/day-skin7.png",
    ᐃΔᐃⵠⵠΔⲆ: "img/night-skin7.png",
    ⲆᐃⲆΔⵠΔⲆ: "img/day-skin8.png",
    ⵠⵠⲆΔⲆᐃᐃ: "img/night-skin8.png",
    ᐃⲆⲆᐃᐃᐃⵠ: "img/day-skin9.png",
    ᐃΔⵠΔΔΔⵠ: "img/night-skin9.png",
    ᐃᐃⵠⲆᐃᐃᐃ: "img/day-skin10.png",
    ⵠΔᐃΔⵠΔᐃ: "img/night-skin10.png",
    ⲆⵠᐃⵠⲆΔᐃ: "img/day-skin11.png",
    ⲆⲆⲆΔᐃⵠⲆ: "img/night-skin11.png",
    ᐃᐃⵠⲆΔⲆᐃ: "img/day-skin12.png",
    ΔⲆΔΔᐃᐃⲆ: "img/night-skin12.png",
    ⵠⲆⲆⵠᐃᐃⲆ: "img/day-skin13.png",
    ΔⵠᐃⵠⲆΔᐃ: "img/night-skin13.png",
    ᐃΔⲆᐃⵠⵠⲆ: "img/day-skin14.png",
    ⵠⵠⲆⵠΔⵠᐃ: "img/night-skin14.png",
    ⵠⵠⵠΔᐃⲆⵠ: "img/day-skin15.png",
    ⲆⲆⵠᐃΔΔᐃ: "img/night-skin15.png",
    ⵠᐃᐃΔΔⲆᐃ: "img/day-skin16.png",
    ᐃΔⵠⲆⵠΔⵠ: "img/night-skin16.png",
    ⵠⵠⲆⲆᐃⵠⲆ: "img/day-skin17.png",
    ⲆΔⲆⲆᐃᐃΔ: "img/night-skin17.png",
    ⲆⵠⵠᐃⵠⲆᐃ: "img/day-skin18.png",
    ⲆΔΔⵠⵠΔᐃ: "img/night-skin18.png",
    ⲆⵠᐃΔⵠᐃᐃ: "img/day-skin19.png",
    ⵠΔⲆᐃᐃᐃᐃ: "img/night-skin19.png",
    ᐃΔᐃⵠᐃᐃⵠ: "img/day-skin20.png",
    ᐃᐃⵠΔΔⵠΔ: "img/night-skin20.png",
    ᐃΔΔΔⵠⵠΔ: "img/day-skin21.png",
    ⲆⲆⵠΔΔⵠΔ: "img/night-skin21.png",
    ⵠΔᐃΔᐃᐃⲆ: "img/day-skin22.png",
    ⲆⵠⵠΔᐃⲆΔ: "img/night-skin22.png",
    ⵠΔⵠΔⵠᐃⵠ: "img/day-skin23.png",
    ⲆΔᐃⲆΔⵠΔ: "img/night-skin23.png",
    ⵠΔΔᐃᐃᐃⲆ: "img/day-skin24.png",
    ᐃᐃᐃΔⵠⵠΔ: "img/night-skin24.png",
    ⲆⵠⵠΔᐃⲆᐃ: "img/day-skin25.png",
    ΔΔᐃᐃⵠⲆᐃ: "img/night-skin25.png",
    ⲆᐃΔᐃⲆᐃⵠ: "img/day-skin26.png",
    ᐃⵠΔᐃⵠΔⲆ: "img/night-skin26.png",
    ᐃⲆⲆΔΔΔⲆ: "img/day-skin27.png",
    ⲆⲆⵠᐃΔⵠⲆ: "img/night-skin27.png",
    ΔΔΔⵠᐃΔᐃ: "img/day-skin28.png",
    ⵠⵠⲆΔⵠⵠⵠ: "img/night-skin28.png",
    ⵠⲆᐃΔᐃⲆᐃ: "img/day-skin29.png",
    ⲆᐃⲆᐃΔⵠᐃ: "img/night-skin29.png",
    ⲆᐃΔⵠⵠΔΔ: "img/day-skin30.png",
    ᐃⵠⲆᐃᐃⵠⲆ: "img/night-skin30.png",
    ΔᐃⲆⲆⵠᐃⵠ: "img/day-skin31.png",
    ΔⵠᐃⲆΔΔⵠ: "img/night-skin31.png",
    ᐃΔᐃᐃⵠΔᐃ: "img/day-skin32.png",
    ⲆⵠⲆⵠΔⵠⲆ: "img/night-skin32.png",
    ⵠᐃⵠΔⵠΔⵠ: "img/day-skin33.png",
    ᐃⵠⵠⲆⵠⲆⵠ: "img/night-skin33.png",
    ΔᐃⲆⲆⲆⵠᐃ: "img/day-skin34.png",
    ⲆⲆⵠⵠⵠⵠΔ: "img/night-skin34.png",
    ΔⲆⵠⲆⲆⵠⵠ: "img/day-skin35.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/night-skin35.png",
    ΔᐃᐃⲆⲆΔⵠ: "img/day-skin36.png",
    ⲆⵠⵠⵠΔⲆΔ: "img/night-skin36.png",
    ⵠᐃⲆⲆᐃⲆⲆ: "img/day-skin37.png",
    ΔᐃᐃⲆΔⵠⵠ: "img/night-skin37.png",
    ⵠᐃⵠⵠΔΔⵠ: "img/day-skin38.png",
    ⲆᐃᐃᐃⲆᐃΔ: "img/night-skin38.png",
    ⵠᐃᐃᐃΔⵠΔ: "img/day-skin39.png",
    ⲆⵠᐃⲆⵠⲆΔ: "img/night-skin39.png",
    ΔⲆᐃΔⵠᐃᐃ: "img/day-skin40.png",
    ⵠⵠⵠⵠⲆⵠᐃ: "img/night-skin40.png",
    ⲆᐃⲆⵠΔⲆⲆ: "img/day-skin41.png",
    ᐃΔⵠᐃᐃᐃΔ: "img/night-skin41.png",
    ᐃⲆᐃⵠⵠΔΔ: "img/day-skin42.png",
    ⵠⵠΔΔᐃᐃⵠ: "img/night-skin42.png",
    ᐃΔⲆᐃⲆΔΔ: "img/day-skin43.png",
    ᐃⵠᐃⵠⵠⲆⲆ: "img/night-skin43.png",
    ⵠⲆⲆⵠⵠⵠⲆ: "img/day-skin44.png",
    ⵠⵠⲆΔⲆⵠᐃ: "img/night-skin44.png",
    ᐃΔΔᐃⲆⵠⵠ: "img/day-skin45.png",
    ⲆΔⵠⵠΔⵠΔ: "img/night-skin45.png",
    ΔⲆᐃⲆΔᐃⲆ: "img/day-skin46.png",
    ᐃᐃᐃΔⵠᐃΔ: "img/night-skin46.png",
    ⲆⵠΔⲆΔⵠᐃ: "img/day-skin47.png",
    ᐃⵠΔⲆⲆⲆΔ: "img/night-skin47.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/day-skin48.png",
    ᐃⲆⲆⲆΔⵠΔ: "img/night-skin48.png",
    ᐃᐃᐃᐃᐃⵠᐃ: "img/day-skin49.png",
    ᐃΔΔⲆΔᐃᐃ: "img/night-skin49.png",
    ⲆᐃᐃⲆⵠⲆⲆ: "img/day-skin50.png",
    ᐃⲆⲆⵠⵠᐃⵠ: "img/night-skin50.png",
    ⵠⵠᐃΔᐃⵠᐃ: "img/day-skin51.png",
    ΔⲆᐃᐃⲆⲆⲆ: "img/night-skin51.png",
    ᐃᐃᐃΔΔΔⲆ: "img/day-skin52.png",
    ⲆᐃⵠⵠᐃⲆᐃ: "img/night-skin52.png",
    ᐃᐃⲆΔⵠⲆΔ: "img/day-skin53.png",
    ΔⲆᐃⵠⵠⵠⵠ: "img/night-skin53.png",
    ⵠⵠᐃΔᐃᐃᐃ: "img/day-skin54.png",
    ᐃΔⲆΔᐃᐃⲆ: "img/night-skin54.png",
    ⵠⵠⲆΔⵠⲆᐃ: "img/day-skin55.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/night-skin55.png",
    ᐃᐃᐃΔᐃΔΔ: "img/day-skin56.png",
    ⲆⲆⵠᐃⵠΔⵠ: "img/night-skin56.png",
    ΔⵠⲆᐃᐃᐃⲆ: "img/day-skin57.png",
    ⲆⲆΔⲆⲆᐃΔ: "img/night-skin57.png",
    ΔᐃΔᐃⵠⵠⲆ: "img/day-skin58.png",
    ᐃⵠⵠᐃⲆⵠⲆ: "img/night-skin58.png",
    ⵠΔⵠⵠᐃⲆⵠ: "img/day-skin59.png",
    ⵠΔΔⲆᐃᐃⲆ: "img/night-skin59.png",
    ᐃⵠΔᐃᐃΔᐃ: "img/day-skin60.png",
    ΔⵠⲆⵠⲆΔⵠ: "img/night-skin60.png",
    ᐃⵠⲆⲆⵠⵠΔ: "img/day-skin61.png",
    ᐃⵠΔⵠⲆⲆⲆ: "img/night-skin61.png",
    ΔᐃⲆΔΔⲆΔ: "img/day-skin62.png",
    ΔⵠⲆΔᐃᐃⵠ: "img/night-skin62.png",
    ᐃΔⵠⲆᐃΔⲆ: "img/day-skin63.png",
    ᐃΔᐃΔΔᐃᐃ: "img/night-skin63.png",
    ᐃΔⲆⲆⵠⲆᐃ: "img/day-skin64.png",
    ΔⵠⲆΔⵠᐃⲆ: "img/night-skin64.png",
    ⵠⵠΔᐃᐃᐃⲆ: "img/day-skin65.png",
    ᐃⲆᐃΔⵠⵠⵠ: "img/night-skin65.png",
    ⲆᐃⵠⲆᐃⵠⲆ: "img/day-skin66.png",
    ⲆᐃⲆⵠⵠⵠⲆ: "img/night-skin66.png",
    ΔⲆⵠⵠᐃΔⵠ: "img/day-skin67.png",
    ΔⲆᐃⲆᐃΔᐃ: "img/night-skin67.png",
    ⵠⲆᐃᐃᐃᐃΔ: "img/day-skin68.png",
    ᐃⵠⵠΔΔΔⵠ: "img/night-skin68.png",
    ⵠⵠᐃΔᐃⲆⲆ: "img/day-skin69.png",
    ⵠΔⵠΔⲆΔΔ: "img/night-skin69.png",
    ΔⲆᐃᐃⵠᐃᐃ: "img/day-skin70.png",
    ⲆΔΔΔⵠᐃⵠ: "img/night-skin70.png",
    ⵠΔⵠᐃᐃⲆⵠ: "img/day-skin71.png",
    ⵠᐃΔΔⵠΔⵠ: "img/night-skin71.png",
    ⲆΔⵠⵠⲆᐃΔ: "img/day-skin72.png",
    ⲆⵠΔᐃᐃⵠΔ: "img/night-skin72.png",
    ΔΔᐃⲆⲆⲆⵠ: "img/day-skin73.png",
    ⲆⲆᐃᐃΔΔᐃ: "img/night-skin73.png",
    ΔⵠⲆᐃᐃⲆⵠ: "img/day-skin74.png",
    ⲆΔⵠⵠⵠⲆΔ: "img/night-skin74.png",
    ᐃᐃΔⵠΔⲆΔ: "img/day-skin75.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/night-skin75.png",
    ⵠᐃΔᐃⵠᐃᐃ: "img/day-skin76.png",
    ΔⵠⵠⵠⲆⲆⲆ: "img/night-skin76.png",
    ⲆⲆᐃΔᐃᐃⵠ: "img/day-skin77.png",
    ΔⵠⲆⲆᐃⲆⵠ: "img/night-skin77.png",
    ⵠⲆⲆⲆΔⲆⲆ: "img/day-skin78.png",
    ⵠⲆΔΔᐃΔΔ: "img/night-skin78.png",
    ᐃⲆΔⲆⲆⲆⵠ: "img/day-skin79.png",
    ᐃΔⵠΔᐃⲆⲆ: "img/night-skin79.png",
    ⲆΔⲆᐃΔⲆᐃ: "img/day-skin80.png",
    ⲆⵠᐃⲆᐃⲆⵠ: "img/night-skin80.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/day-skin81.png",
    ⵠⵠⵠΔᐃⲆⲆ: "img/night-skin81.png",
    ⵠᐃᐃⵠⵠᐃᐃ: "img/day-skin82.png",
    ΔⲆᐃⲆΔⲆᐃ: "img/night-skin82.png",
    ᐃΔΔⲆΔᐃΔ: "img/day-skin83.png",
    ⵠⲆᐃΔᐃⵠΔ: "img/night-skin83.png",
    ΔⵠΔΔⲆⲆΔ: "img/day-skin84.png",
    ⲆⲆⵠⲆᐃΔⲆ: "img/night-skin84.png",
    ⵠⲆⲆΔⵠΔⵠ: "img/day-skin85.png",
    ᐃⲆⲆⲆⲆⵠᐃ: "img/night-skin85.png",
    ΔⵠΔⲆⵠΔⵠ: "img/day-skin86.png",
    ⵠⵠΔⵠᐃΔⵠ: "img/night-skin86.png",
    ⵠⵠᐃΔᐃΔⵠ: "img/day-skin87.png",
    ⵠⲆΔⲆΔᐃⵠ: "img/night-skin87.png",
    ΔⵠⲆᐃⵠᐃⲆ: "img/day-skin88.png",
    ᐃᐃΔΔΔⲆⵠ: "img/night-skin88.png",
    ΔⲆΔⵠᐃΔⲆ: "img/day-skin89.png",
    ⵠⲆⲆⲆⵠΔⲆ: "img/night-skin89.png",
    ⵠᐃⵠⵠⲆΔΔ: "img/day-skin90.png",
    ⵠⵠⲆΔᐃᐃⲆ: "img/night-skin90.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/day-skin91.png",
    ⵠⵠᐃⲆΔⵠᐃ: "img/night-skin91.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/day-skin92.png",
    ⲆΔⵠΔΔΔⲆ: "img/night-skin92.png",
    ⵠⲆΔⵠΔΔᐃ: "img/day-skin93.png",
    ⲆΔⵠᐃⲆᐃⲆ: "img/night-skin93.png",
    ⵠΔⵠᐃΔΔⵠ: "img/day-skin94.png",
    ΔΔⵠΔⵠⵠᐃ: "img/night-skin94.png",
    ΔⲆⲆⲆᐃⲆⲆ: "img/day-skin95.png",
    ⵠⲆᐃⵠⵠⵠᐃ: "img/night-skin95.png",
    ΔⲆΔᐃⲆᐃⲆ: "img/day-skin96.png",
    ⵠΔⲆⵠⲆⲆΔ: "img/night-skin96.png",
    ΔⲆᐃᐃⵠⲆⵠ: "img/day-skin97.png",
    ΔᐃⲆᐃⲆⲆⲆ: "img/night-skin97.png",
    ΔΔᐃΔᐃⲆΔ: "img/day-skin98.png",
    ΔΔⵠᐃⲆⵠⵠ: "img/night-skin98.png",
    ᐃᐃⵠⵠᐃⲆᐃ: "img/day-skin99.png",
    ⵠⵠᐃⲆⲆⲆⵠ: "img/night-skin99.png",
    ⵠᐃⲆⲆⵠΔⵠ: "img/day-skin100.png",
    ⵠⲆΔᐃⲆⵠⲆ: "img/night-skin100.png",
    ⵠᐃΔⲆⵠᐃⵠ: "img/day-skin101.png",
    ⲆⲆᐃⵠⵠΔⵠ: "img/night-skin101.png",
    ⲆⵠⵠᐃΔΔⲆ: "img/day-skin102.png",
    ᐃⵠΔⵠΔᐃⲆ: "img/night-skin102.png",
    ⵠⲆⵠⵠⵠⲆⲆ: "img/day-skin103.png",
    ᐃΔⵠᐃΔⵠⲆ: "img/night-skin103.png",
    ΔΔᐃᐃΔΔⲆ: "img/day-skin104.png",
    ΔᐃΔΔᐃΔⵠ: "img/night-skin104.png",
    ⲆΔᐃⲆⲆᐃᐃ: "img/day-skin105.png",
    ⲆᐃⵠⵠᐃΔⲆ: "img/night-skin105.png",
    ΔᐃⵠᐃᐃΔᐃ: "img/day-skin106.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/night-skin106.png",
    ⲆⵠΔᐃᐃⲆᐃ: "img/day-skin107.png",
    ⵠⲆⵠΔᐃᐃⲆ: "img/night-skin107.png",
    ᐃΔΔⵠΔⵠⵠ: "img/day-skin108.png",
    ⵠᐃΔⲆΔᐃᐃ: "img/night-skin108.png",
    ᐃⵠΔⲆΔⵠⵠ: "img/day-skin109.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/night-skin109.png",
    ⵠᐃⲆⵠΔᐃΔ: "img/day-skin110.png",
    ΔΔⲆᐃⵠΔΔ: "img/night-skin110.png",
    ⵠΔᐃΔⵠᐃᐃ: "img/day-skin111.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/night-skin111.png",
    ⵠⵠⵠⵠΔΔⵠ: "img/day-skin112.png",
    ⵠⵠΔΔⲆΔΔ: "img/night-skin112.png",
    ᐃᐃᐃⲆᐃⲆⵠⵠᐃ: "img/day-skin113.png",
    ⲆⲆᐃᐃⲆⲆΔⲆⲆ: "img/night-skin113.png",
    ⵠᐃⵠᐃⲆᐃⵠ: "img/day-skin114.png",
    ᐃⵠⲆⵠΔⵠⵠ: "img/night-skin114.png",
    ΔⲆᐃΔⵠⲆⵠ: "img/day-skin115.png",
    ⵠⵠΔΔΔΔⵠ: "img/night-skin115.png",
    ΔᐃⵠⲆⵠⲆΔ: "img/day-skin116.png",
    ⵠΔᐃⲆⵠⲆⲆ: "img/night-skin116.png",
    ⵠⵠⲆⲆⵠΔᐃ: "img/day-skin117.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/night-skin117.png",
    ᐃⲆᐃⵠᐃⵠᐃ: "img/day-skin118.png",
    ΔⵠⲆᐃⲆⵠⵠ: "img/night-skin118.png",
    ⵠᐃⵠⲆⲆΔⲆ: "img/day-skin119.png",
    ᐃΔᐃΔᐃᐃᐃ: "img/night-skin119.png",
    ᐃⵠⵠᐃΔⵠⵠ: "img/day-skin120.png",
    ⵠᐃⵠΔΔⵠⲆ: "img/night-skin120.png",
    ΔΔΔⲆᐃⲆΔ: "img/day-skin121.png",
    ΔⵠⵠⲆⲆⵠᐃ: "img/night-skin121.png",
    ⲆΔⲆⵠΔᐃⲆ: "img/day-skin122.png",
    ⵠᐃΔⲆⵠⵠᐃ: "img/night-skin122.png",
    ᐃⲆⲆΔᐃᐃᐃ: "img/day-skin123.png",
    ⲆⵠΔᐃⵠΔΔ: "img/night-skin123.png",
    ᐃΔᐃⵠΔⵠⲆ: "img/day-skin124.png",
    ⵠᐃᐃᐃⲆⲆᐃ: "img/night-skin124.png",
    ⲆᐃΔⲆⲆΔⵠ: "img/day-skin125.png",
    ⵠⵠⵠⵠᐃⲆⵠ: "img/night-skin125.png",
    ᐃⵠⲆⵠⵠΔⵠ: "img/day-skin126.png",
    ᐃᐃΔΔΔᐃⲆ: "img/night-skin126.png",
    ⵠᐃⵠⵠᐃⵠΔ: "img/day-skin127.png",
    ᐃⲆΔⲆⵠᐃᐃ: "img/night-skin127.png",
    ⵠⲆΔΔⵠΔⵠ: "img/day-skin128.png",
    ᐃⵠΔΔⲆΔⵠ: "img/night-skin128.png",
    ⵠⲆΔᐃⵠⵠΔ: "img/day-skin129.png",
    ⲆᐃΔᐃΔᐃΔ: "img/night-skin129.png",
    ΔᐃⲆΔᐃⲆⲆ: "img/day-skin130-1.png",
    ΔⵠⵠᐃⲆΔⲆ: "img/night-skin130-1.png",
    ᐃⵠⵠΔⲆΔⵠ: "img/day-skin131.png",
    ΔΔᐃᐃⲆⲆⲆ: "img/night-skin131.png",
    ⲆⵠΔΔᐃᐃⵠ: "img/day-skin132.png",
    ΔⲆⵠⵠΔΔⲆ: "img/night-skin132.png",
    ⲆΔⲆⲆΔⲆΔ: "img/day-skin133.png",
    ᐃⵠⵠⲆⵠⵠⵠ: "img/night-skin133.png",
    ⵠΔⲆⵠΔΔᐃ: "img/day-skin134.png",
    ᐃⵠⲆᐃⲆⲆΔ: "img/night-skin134.png",
    ΔΔⲆΔΔᐃᐃ: "img/day-skin135.png",
    ⵠᐃⵠᐃΔᐃΔ: "img/night-skin135.png",
    ⲆⲆⲆᐃᐃⵠΔ: "img/day-skin136.png",
    ᐃΔⲆΔΔⵠⵠ: "img/night-skin136.png",
    ⲆᐃᐃⲆᐃᐃᐃ: "img/day-skin137.png",
    ⵠⵠⵠⵠΔⲆⵠ: "img/night-skin137.png",
    ΔⲆⲆⲆⲆⵠⵠ: "img/day-skin138.png",
    ⵠⵠⵠΔⲆⲆⵠ: "img/night-skin138.png",
    ΔⲆᐃⲆΔⲆΔ: "img/day-skin139.png",
    ⲆᐃⵠΔᐃΔΔ: "img/night-skin139.png",
    ⵠⵠⲆΔⵠᐃⲆ: "img/day-skin140.png",
    ⵠᐃⲆΔΔᐃⵠ: "img/night-skin140.png",
    ⵠⵠΔⲆΔⵠⲆ: "img/day-skin141.png",
    ⲆⵠⵠᐃⵠⲆⵠ: "img/night-skin141.png",
    ᐃⵠⵠⲆΔⵠᐃ: "img/day-skin142.png",
    ᐃΔⲆⲆΔᐃⲆ: "img/night-skin142.png",
    ΔⲆᐃⵠΔⲆⵠ: "img/day-skin143.png",
    ⲆΔᐃⲆⵠᐃⲆ: "img/night-skin143.png",
    ΔⵠⲆⵠᐃⵠΔ: "img/day-skin144.png",
    ⲆⵠᐃⲆⵠΔⵠ: "img/night-skin144.png",
    ⲆⲆⲆⲆⲆᐃᐃ: "img/day-skin145.png",
    ⵠⲆⵠⵠⵠⵠⲆ: "img/night-skin145.png",
    ᐃⵠᐃΔⵠΔⲆ: "img/day-skin146.png",
    ᐃΔᐃⲆᐃⲆⲆ: "img/night-skin146.png",
    ⵠⵠⲆⲆⲆⵠⵠ: "img/day-skin147.png",
    ᐃⵠⵠⵠᐃⲆⲆ: "img/night-skin147.png",
    ᐃⲆⵠⵠΔⲆⲆ: "img/day-skin148.png",
    ⵠΔᐃⵠᐃΔⲆ: "img/night-skin148.png",
    ⲆᐃⲆⵠᐃᐃΔ: "img/day-skin149.png",
    ΔΔΔΔᐃᐃⲆ: "img/night-skin149.png",
    ⲆΔⲆᐃⲆᐃΔ: "img/day-skin150.png",
    ⲆᐃΔⲆΔⵠⵠ: "img/night-skin150.png",
    ᐃⵠⵠⵠⲆΔᐃ: "img/day-hand-skin0.png",
    ΔΔΔᐃᐃⵠⵠ: "img/night-hand-skin0.png",
    ΔᐃΔΔᐃΔΔ: "img/day-hand-skin1.png",
    ΔⵠΔΔⲆⵠΔ: "img/night-hand-skin1.png",
    ᐃⲆᐃΔᐃΔᐃ: "img/day-hand-skin2.png",
    ⲆⵠⵠΔⵠᐃᐃ: "img/night-hand-skin2.png",
    ΔᐃΔⵠᐃⵠᐃ: "img/day-hand-skin3.png",
    ΔᐃᐃᐃⵠⲆᐃ: "img/night-hand-skin3.png",
    ⲆⵠⲆᐃᐃᐃⲆ: "img/day-hand-skin4.png",
    ⲆᐃΔᐃΔΔᐃ: "img/night-hand-skin4.png",
    ΔⲆᐃⲆⲆⲆⵠ: "img/day-hand-skin5.png",
    ⵠⲆᐃⵠⲆⲆΔ: "img/night-hand-skin5.png",
    ⲆⲆⵠⲆⲆⲆΔ: "img/day-hand-skin6.png",
    ⲆᐃΔΔᐃΔⲆΔΔ: "img/night-hand-skin6.png",
    ⵠⵠᐃⵠᐃᐃΔ: "img/day-hand-skin6.png",
    ᐃⵠⲆⵠᐃⵠⵠ: "img/night-hand-skin6.png",
    ⵠⵠᐃⲆⵠᐃΔ: "img/day-hand-skin8.png",
    ΔᐃᐃⵠⲆᐃⲆ: "img/night-hand-skin8.png",
    ⲆᐃⲆᐃⲆᐃΔ: "img/day-hand-skin9.png",
    ⵠΔⲆᐃⲆⵠΔ: "img/night-hand-skin9.png",
    ΔⲆⵠⵠᐃⵠᐃ: "img/day-hand-skin10.png",
    ΔΔⲆᐃΔⲆⵠ: "img/night-hand-skin10.png",
    ⵠⵠⵠⵠᐃΔⲆ: "img/day-hand-skin11.png",
    ΔⲆⲆⵠᐃΔᐃ: "img/night-hand-skin11.png",
    ⵠᐃⵠⵠΔⵠᐃ: "img/day-hand-skin12.png",
    ⵠΔⲆⵠⲆⲆⵠ: "img/night-hand-skin12.png",
    ᐃΔⲆⲆⲆⲆᐃ: "img/day-hand-skin13.png",
    ᐃΔᐃⵠᐃᐃᐃ: "img/night-hand-skin13.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/day-hand-skin14.png",
    ⲆΔⵠΔⵠΔᐃ: "img/night-hand-skin14.png",
    ΔⵠΔΔⲆⵠⵠ: "img/day-hand-skin15.png",
    ⲆⵠΔΔⵠⵠⲆ: "img/night-hand-skin15.png",
    ⲆⲆᐃᐃᐃᐃΔ: "img/day-hand-skin16.png",
    ⵠⵠᐃⲆΔᐃΔ: "img/night-hand-skin16.png",
    ΔⲆⲆᐃᐃᐃΔ: "img/day-hand-skin17.png",
    ΔᐃⲆⲆⲆⲆᐃ: "img/night-hand-skin17.png",
    ΔⵠⲆᐃᐃᐃΔ: "img/day-hand-skin18.png",
    ⵠΔΔⵠΔΔᐃ: "img/night-hand-skin18.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/day-hand-skin19.png",
    ⵠⵠᐃⵠΔΔΔ: "img/night-hand-skin19.png",
    ᐃⲆΔⲆⲆᐃⵠ: "img/day-hand-skin20.png",
    ᐃΔⵠᐃⵠΔᐃ: "img/night-hand-skin20.png",
    ⵠΔΔᐃⲆⲆⵠ: "img/day-hand-skin21.png",
    ΔⵠⵠΔᐃΔᐃ: "img/night-hand-skin21.png",
    ᐃⲆⲆᐃⲆⲆⵠ: "img/day-hand-skin22.png",
    ⵠΔⵠᐃⵠⲆⲆ: "img/night-hand-skin22.png",
    ⵠᐃΔᐃᐃⵠⲆ: "img/day-hand-skin23.png",
    ᐃⵠⵠⵠΔΔΔ: "img/night-hand-skin23.png",
    ⵠⲆⵠⲆⵠΔⲆ: "img/day-hand-skin24.png",
    ΔⵠΔⵠⲆΔⵠ: "img/night-hand-skin24.png",
    ΔᐃᐃⵠΔⲆⵠ: "img/day-hand-skin25.png",
    ΔⲆⲆⲆᐃΔᐃ: "img/night-hand-skin25.png",
    ⵠΔΔⲆⵠᐃΔ: "img/day-hand-skin26.png",
    ᐃⵠΔⵠⵠⲆᐃ: "img/night-hand-skin26.png",
    ΔᐃⲆΔⲆⵠⲆ: "img/day-hand-skin27.png",
    ΔⵠⵠᐃΔΔΔ: "img/night-hand-skin27.png",
    ⵠᐃⲆⲆΔΔⲆ: "img/day-hand-skin28.png",
    ⲆΔⵠᐃᐃⲆⲆ: "img/night-hand-skin28.png",
    ᐃⵠᐃᐃⵠⲆΔ: "img/day-hand-skin29.png",
    ⲆⲆⲆⲆⲆᐃΔ: "img/night-hand-skin29.png",
    ᐃⲆⲆΔᐃΔΔ: "img/day-hand-skin30.png",
    ⵠΔᐃⵠⲆⵠⵠ: "img/night-hand-skin30.png",
    ⲆΔᐃᐃⲆⵠΔ: "img/day-hand-skin31.png",
    ᐃⲆΔΔⲆⵠᐃ: "img/night-hand-skin31.png",
    ΔᐃⲆⵠᐃᐃᐃ: "img/day-hand-skin32.png",
    ΔⵠⵠΔⵠⵠᐃ: "img/night-hand-skin32.png",
    ⵠᐃⲆⵠⲆΔᐃ: "img/day-hand-skin33.png",
    ⲆⵠⵠⵠⲆᐃⵠ: "img/night-hand-skin33.png",
    ⲆⵠⵠⲆΔᐃⵠ: "img/day-hand-skin34.png",
    ΔⵠⵠⲆᐃⵠⲆ: "img/night-hand-skin34.png",
    ⲆΔⵠⵠᐃⲆᐃ: "img/day-hand-skin35.png",
    ⵠᐃᐃᐃΔᐃΔ: "img/night-hand-skin35.png",
    ⵠΔⵠΔᐃⲆⵠ: "img/day-hand-skin36.png",
    ⵠⵠⵠⲆΔᐃᐃ: "img/night-hand-skin36.png",
    ΔⵠΔΔᐃⵠⵠ: "img/day-hand-skin37.png",
    ⲆⵠᐃΔΔⵠⵠ: "img/night-hand-skin37.png",
    ᐃⲆΔⲆⵠΔᐃ: "img/day-hand-skin38.png",
    ᐃᐃΔᐃⵠⵠΔ: "img/night-hand-skin38.png",
    ΔᐃᐃᐃΔΔⲆ: "img/day-hand-skin39.png",
    ⲆΔⲆᐃᐃᐃΔ: "img/night-hand-skin39.png",
    ⵠⲆⵠⲆΔᐃΔ: "img/day-hand-skin40.png",
    ΔΔᐃΔΔᐃⵠ: "img/night-hand-skin40.png",
    ΔΔᐃⵠΔᐃᐃ: "img/day-hand-skin41.png",
    ᐃⲆⵠΔⲆⵠⲆ: "img/night-hand-skin41.png",
    ΔΔⲆΔⵠᐃⲆ: "img/day-hand-skin42.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/night-hand-skin42.png",
    ⵠⲆᐃⲆΔⲆᐃ: "img/day-hand-skin43.png",
    ⵠΔⲆⵠⲆⵠᐃ: "img/night-hand-skin43.png",
    ᐃΔⲆⲆᐃΔᐃ: "img/day-hand-skin16.png",
    ΔⵠᐃⲆΔΔⲆ: "img/night-hand-skin16.png",
    ᐃΔᐃⲆᐃᐃᐃ: "img/day-hand-skin45.png",
    ᐃᐃΔⵠⵠⵠΔ: "img/night-hand-skin45.png",
    ΔⵠᐃⲆᐃΔᐃ: "img/day-hand-skin46.png",
    ⵠΔᐃΔⲆΔᐃ: "img/night-hand-skin46.png",
    ⵠᐃΔⵠΔᐃΔ: "img/day-hand-skin47.png",
    ΔⵠⲆΔΔΔᐃ: "img/night-hand-skin47.png",
    ⲆΔΔⲆᐃⵠⲆ: "img/day-hand-skin48.png",
    ΔΔⲆᐃΔᐃⲆ: "img/night-hand-skin48.png",
    ΔΔⵠᐃᐃⲆⲆ: "img/day-hand-skin49.png",
    ᐃⵠᐃⲆΔΔⲆ: "img/night-hand-skin49.png",
    ⵠⲆⵠΔⲆⲆⲆ: "img/day-hand-skin49.png",
    ⵠⵠⵠⵠⲆΔⵠ: "img/night-hand-skin49.png",
    ᐃⲆⲆᐃⵠᐃΔ: "img/day-hand-skin51.png",
    ⲆᐃᐃᐃΔΔᐃ: "img/night-hand-skin51.png",
    ⵠΔⵠⲆⵠᐃᐃ: "img/day-hand-skin52.png",
    ΔᐃᐃᐃⲆⲆΔ: "img/night-hand-skin52.png",
    ⵠᐃⲆᐃⲆᐃᐃ: "img/day-hand-skin53.png",
    ΔⵠⲆΔΔⲆⲆ: "img/night-hand-skin53.png",
    ⲆΔᐃⵠᐃΔΔ: "img/day-hand-skin53.png",
    ᐃⵠⵠΔΔΔΔ: "img/night-hand-skin53.png",
    ΔᐃⵠᐃᐃⵠΔ: "img/day-hand-skin55.png",
    ⵠⲆΔᐃⵠⲆⲆ: "img/night-hand-skin55.png",
    ⵠⵠᐃΔⵠΔᐃ: "img/day-hand-skin56.png",
    ⲆⲆΔᐃⲆⲆⲆ: "img/night-hand-skin56.png",
    ⲆⵠⲆᐃⲆᐃΔ: "img/day-hand-skin57.png",
    ⲆⵠΔⲆⲆΔⵠ: "img/night-hand-skin57.png",
    ᐃᐃⵠᐃΔⵠΔ: "img/day-hand-skin58.png",
    ⵠᐃⲆᐃᐃΔΔ: "img/night-hand-skin58.png",
    ΔΔΔⲆᐃⲆᐃ: "img/day-hand-skin59.png",
    ⵠᐃΔⲆΔⵠΔ: "img/night-hand-skin59.png",
    ⵠⲆⵠΔᐃⲆⵠ: "img/day-hand-skin61.png",
    ⲆΔⲆⲆⲆᐃΔ: "img/night-hand-skin61.png",
    ᐃⲆΔᐃⵠᐃᐃ: "img/day-hand-skin61.png",
    ᐃⵠΔΔⲆΔᐃ: "img/night-hand-skin61.png",
    ⵠⲆⵠⲆⵠᐃᐃ: "img/day-hand-skin62.png",
    ΔᐃΔⵠᐃᐃᐃ: "img/night-hand-skin62.png",
    ⲆΔⲆⲆⵠⵠⲆ: "img/day-hand-skin63.png",
    ΔᐃⲆⲆᐃⵠⵠ: "img/night-hand-skin63.png",
    ⲆⲆⲆⵠᐃⵠᐃ: "img/day-hand-skin64.png",
    ⲆΔⵠΔⵠⲆᐃ: "img/night-hand-skin64.png",
    ᐃΔⲆⵠⲆⲆᐃ: "img/day-hand-skin65.png",
    ⵠⲆⲆᐃⲆΔᐃ: "img/night-hand-skin65.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/day-hand-skin66.png",
    ᐃΔᐃⲆⲆᐃⵠ: "img/night-hand-skin66.png",
    ᐃΔᐃΔⲆΔΔ: "img/day-hand-skin67.png",
    ΔᐃΔⲆᐃⲆⲆ: "img/night-hand-skin67.png",
    ᐃⲆΔᐃⵠΔⲆ: "img/day-hand-skin68.png",
    ΔⵠᐃΔᐃΔⲆ: "img/night-hand-skin68.png",
    ⵠⲆΔᐃΔⵠⲆ: "img/day-hand-skin69.png",
    ΔⲆᐃⵠΔⵠΔ: "img/night-hand-skin69.png",
    ⵠⲆⵠᐃⲆⵠΔ: "img/day-hand-skin70.png",
    ᐃΔΔΔΔΔᐃ: "img/night-hand-skin70.png",
    ⲆⲆΔⲆⵠᐃⵠ: "img/day-hand-skin71.png",
    ⲆⵠⲆᐃⲆᐃⵠ: "img/night-hand-skin71.png",
    ⲆΔⵠᐃⵠⲆⲆ: "img/day-hand-skin72.png",
    ⵠⲆⲆΔᐃⵠΔ: "img/night-hand-skin72.png",
    ⲆᐃΔΔⵠⲆⲆ: "img/day-hand-skin73.png",
    ᐃᐃⲆⲆΔΔᐃ: "img/night-hand-skin73.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/day-hand-skin74.png",
    ΔⲆⲆⲆⲆⵠⲆ: "img/night-hand-skin74.png",
    ᐃΔΔᐃⲆⵠᐃ: "img/day-hand-skin75.png",
    ⲆⵠᐃⲆΔⲆᐃ: "img/night-hand-skin75.png",
    ΔⵠⵠᐃⵠⵠⲆ: "img/day-hand-skin76.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/night-hand-skin76.png",
    ⲆⵠⵠΔᐃⲆⵠ: "img/day-hand-skin77.png",
    ᐃᐃΔΔⵠⲆΔ: "img/night-hand-skin77.png",
    ⲆⲆⵠΔΔΔⲆ: "img/day-hand-skin78.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/night-hand-skin78.png",
    ⲆΔⵠΔᐃΔⲆ: "img/day-hand-skin79.png",
    ΔᐃΔᐃⵠⵠⵠ: "img/night-hand-skin79.png",
    ⵠΔⵠⲆΔⵠⵠ: "img/day-hand-skin80.png",
    ⵠⵠⲆⲆΔⵠⲆ: "img/night-hand-skin80.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/day-hand-skin81.png",
    ΔⵠΔΔⵠᐃᐃ: "img/night-hand-skin81.png",
    ⲆΔⵠⲆΔᐃⲆ: "img/day-hand-skin82.png",
    ᐃⵠᐃⵠΔᐃⵠ: "img/night-hand-skin82.png",
    ⵠⲆΔⵠᐃΔᐃ: "img/day-hand-skin83.png",
    ᐃΔΔⲆᐃⲆΔ: "img/night-hand-skin83.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/day-hand-skin84.png",
    ⵠΔΔΔⲆⵠᐃ: "img/night-hand-skin84.png",
    ⵠᐃⵠᐃⲆⲆΔ: "img/day-hand-skin85.png",
    ΔᐃᐃⵠΔᐃⵠ: "img/night-hand-skin85.png",
    ⲆⵠⲆⵠⲆⵠⵠ: "img/day-hand-skin86.png",
    ᐃΔⵠⲆⵠΔΔ: "img/night-hand-skin86.png",
    ⵠΔⵠⲆᐃⲆⵠ: "img/day-hand-skin87.png",
    ΔΔᐃⲆᐃΔⲆ: "img/night-hand-skin87.png",
    ⲆⲆᐃⵠⲆⲆᐃ: "img/day-hand-skin88.png",
    ᐃⲆⵠᐃᐃⵠΔ: "img/night-hand-skin88.png",
    ΔⵠⵠᐃⵠᐃΔ: "img/day-hand-skin89.png",
    ΔⵠⲆⵠΔⵠⵠ: "img/night-hand-skin89.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/day-hand-skin90.png",
    ⵠᐃᐃⵠΔⵠⲆ: "img/night-hand-skin90.png",
    ΔⵠΔⵠⵠᐃΔ: "img/day-hand-skin91.png",
    ΔⵠᐃⲆᐃⵠⲆ: "img/night-hand-skin91.png",
    ⵠΔᐃᐃᐃᐃᐃ: "img/day-hand-skin92.png",
    ΔⲆΔⲆᐃᐃᐃ: "img/night-hand-skin92.png",
    ᐃᐃⲆΔⵠΔᐃ: "img/day-hand-skin93.png",
    ᐃⲆⲆᐃΔⲆΔ: "img/night-hand-skin93.png",
    ⵠᐃᐃⲆΔΔᐃ: "img/day-hand-skin94.png",
    ᐃⲆⵠⵠⲆⵠᐃ: "img/night-hand-skin94.png",
    ⲆⲆᐃⲆⲆᐃΔ: "img/day-hand-skin95.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/night-hand-skin95.png",
    ⵠⵠⵠⵠⵠᐃᐃ: "img/day-hand-skin96.png",
    ⵠΔᐃⵠⵠΔᐃ: "img/night-hand-skin96.png",
    ᐃΔⲆΔᐃᐃΔ: "img/day-hand-skin97.png",
    ΔⲆΔᐃᐃΔⵠ: "img/night-hand-skin97.png",
    ΔⵠⵠⵠΔⲆⵠ: "img/day-hand-skin98.png",
    ⵠΔΔᐃΔᐃΔ: "img/night-hand-skin98.png",
    ᐃᐃΔⲆΔⵠΔ: "img/day-hand-skin99.png",
    ⲆᐃⵠᐃⲆΔⲆ: "img/night-hand-skin99.png",
    ᐃⲆⲆᐃᐃΔⵠ: "img/day-hand-skin100.png",
    ⲆⲆⲆᐃⵠᐃᐃ: "img/night-hand-skin100.png",
    ᐃⵠⲆⵠΔΔΔ: "img/day-hand-skin101.png",
    ᐃΔᐃⲆΔᐃᐃ: "img/night-hand-skin101.png",
    ⲆᐃⲆⲆⲆᐃᐃ: "img/day-hand-skin102.png",
    ᐃⵠⵠᐃᐃΔΔ: "img/night-hand-skin102.png",
    ᐃⲆΔⲆΔᐃΔ: "img/day-hand-skin103.png",
    ⵠⲆᐃΔⵠᐃⲆ: "img/night-hand-skin103.png",
    ᐃⲆᐃΔⲆΔⲆ: "img/day-hand-skin104.png",
    ⵠⲆᐃⵠᐃᐃⵠ: "img/night-hand-skin104.png",
    ⲆᐃᐃⲆⲆⵠⵠ: "img/day-hand-skin105.png",
    ᐃⵠⵠⲆⵠᐃᐃ: "img/night-hand-skin105.png",
    ⵠⵠᐃⲆⲆⵠⵠ: "img/day-hand-skin106.png",
    ⵠᐃⲆΔΔⲆⲆ: "img/night-hand-skin106.png",
    ⲆⵠⲆΔᐃⵠΔ: "img/day-hand-skin107.png",
    ⵠᐃΔⵠΔⲆΔ: "img/night-hand-skin107.png",
    ⲆΔⵠᐃⲆΔᐃ: "img/day-hand-skin108.png",
    ⵠⵠⵠⲆΔⲆΔ: "img/night-hand-skin108.png",
    ⲆⵠⲆΔⲆᐃΔ: "img/day-hand-skin109.png",
    ᐃΔΔᐃᐃᐃΔ: "img/night-hand-skin109.png",
    ΔΔΔⲆⵠⵠⵠ: "img/day-hand-skin110.png",
    ΔᐃⲆᐃⵠᐃΔ: "img/night-hand-skin110.png",
    ⵠⵠⲆⲆⵠΔΔ: "img/day-hand-skin111.png",
    ᐃⵠⲆᐃΔΔᐃ: "img/night-hand-skin111.png",
    ΔⲆⲆⵠΔΔᐃ: "img/day-hand-skin112.png",
    ᐃⲆᐃⲆᐃΔⵠ: "img/night-hand-skin112.png",
    ᐃⲆᐃⲆⲆⲆᐃΔΔ: "img/day-hand-skin113.png",
    ⵠⲆΔⲆⲆᐃⲆⵠΔ: "img/night-hand-skin113.png",
    ΔⲆⲆⵠⵠⵠⲆ: "img/day-hand-skin114.png",
    ⵠⲆᐃΔΔΔⲆ: "img/night-hand-skin114.png",
    ᐃⵠⲆΔⵠⵠⵠ: "img/day-hand-skin115.png",
    ΔΔᐃΔΔΔᐃ: "img/night-hand-skin115.png",
    ΔⲆΔΔⲆΔⲆ: "img/day-hand-skin116.png",
    ⲆⲆᐃⵠⵠⵠⵠ: "img/night-hand-skin116.png",
    ΔⵠΔᐃⲆⲆΔ: "img/day-hand-skin117.png",
    ⲆΔᐃⵠⲆⵠⲆ: "img/night-hand-skin117.png",
    ⲆᐃΔⲆΔⵠⲆ: "img/day-hand-skin118.png",
    ⵠⲆᐃΔᐃⵠⲆ: "img/night-hand-skin118.png",
    ᐃⲆⵠΔᐃΔᐃ: "img/day-hand-skin119.png",
    ⵠⲆⲆⵠⵠᐃΔ: "img/night-hand-skin119.png",
    ᐃⲆΔΔᐃᐃΔ: "img/day-hand-skin120.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/night-hand-skin120.png",
    ᐃⲆⲆΔⵠΔΔ: "img/day-hand-skin122.png",
    ⲆΔΔΔⲆⲆΔ: "img/night-hand-skin122.png",
    ⲆⵠⲆΔΔΔᐃ: "img/day-hand-skin122.png",
    ᐃΔᐃⲆⲆⵠⲆ: "img/night-hand-skin122.png",
    ⵠᐃΔⲆⲆᐃⲆ: "img/day-hand-skin122.png",
    ΔΔᐃᐃⲆᐃⲆ: "img/night-hand-skin122.png",
    ⵠⵠⵠΔᐃΔⲆ: "img/day-hand-skin124.png",
    ᐃⲆⲆⲆᐃⵠⲆ: "img/night-hand-skin124.png",
    ΔΔⵠΔΔⲆΔ: "img/day-hand-skin125.png",
    ΔⲆⲆᐃⵠⵠΔ: "img/night-hand-skin125.png",
    ΔⵠᐃⵠᐃΔᐃ: "img/day-hand-skin126.png",
    ⲆⲆⵠᐃᐃᐃⵠ: "img/night-hand-skin126.png",
    ΔΔⵠΔⲆⲆⲆ: "img/day-hand-skin127.png",
    ⲆΔᐃⲆⲆᐃⲆ: "img/night-hand-skin127.png",
    ΔⵠᐃⵠᐃΔⲆ: "img/day-hand-skin128.png",
    ⲆⲆΔΔⲆⵠᐃ: "img/night-hand-skin128.png",
    ΔⵠΔⲆⵠⲆⵠ: "img/day-hand-skin129.png",
    ᐃΔⵠⵠⲆⲆⲆ: "img/night-hand-skin129.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/day-hand-skin130.png",
    ΔⵠⵠⲆⲆΔⲆ: "img/night-hand-skin130.png",
    ⲆΔΔⲆΔⵠⵠ: "img/day-hand-skin131.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/night-hand-skin131.png",
    ⵠⲆⲆΔᐃⵠᐃ: "img/day-hand-skin130.png",
    ΔⲆΔᐃⵠⵠᐃ: "img/night-hand-skin130.png",
    ᐃΔΔⵠⵠⲆΔ: "img/day-hand-skin133.png",
    ΔᐃΔΔⲆⲆᐃ: "img/night-hand-skin133.png",
    ⵠⲆⵠⵠⲆⵠᐃ: "img/day-hand-skin134.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/night-hand-skin134.png",
    ᐃΔⵠΔᐃⵠᐃ: "img/day-hand-skin135.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-hand-skin135.png",
    ⵠΔΔᐃⲆⵠΔ: "img/day-hand-skin136.png",
    ᐃⵠⲆᐃⵠⲆΔ: "img/night-hand-skin136.png",
    ⲆᐃΔⲆⲆⲆᐃ: "img/day-hand-skin137.png",
    ⲆⵠⵠΔⵠⲆΔ: "img/night-hand-skin137.png",
    ⲆⵠⵠⵠΔⵠⲆ: "img/day-hand-skin138.png",
    ⲆᐃⵠⲆⵠᐃᐃ: "img/night-hand-skin138.png",
    ⲆᐃⲆⲆᐃΔⵠ: "img/day-hand-skin139.png",
    ᐃⲆΔⲆⵠᐃΔ: "img/night-hand-skin139.png",
    ⲆΔⵠⲆⲆⵠᐃ: "img/day-hand-skin140.png",
    ᐃΔᐃΔᐃΔⵠ: "img/night-hand-skin140.png",
    ⲆᐃᐃΔΔΔᐃ: "img/day-hand-skin141.png",
    ⲆΔΔΔⲆⵠⵠ: "img/night-hand-skin141.png",
    ᐃᐃⵠⲆⵠⵠⲆ: "img/day-hand-skin142.png",
    ᐃⵠᐃⵠⲆⵠⲆ: "img/night-hand-skin142.png",
    ⲆⵠΔⲆΔᐃᐃ: "img/day-hand-skin143.png",
    ⲆᐃΔΔⲆᐃᐃ: "img/night-hand-skin143.png",
    ΔⵠΔΔᐃⲆⲆ: "img/day-hand-skin144.png",
    ᐃΔⲆⵠᐃΔⲆ: "img/night-hand-skin144.png",
    ᐃᐃΔⲆᐃⲆⲆ: "img/day-hand-skin145.png",
    ⵠⲆⲆᐃⲆⲆⵠ: "img/night-hand-skin145.png",
    ⵠⵠⲆⵠⲆⲆᐃ: "img/day-hand-skin146.png",
    ΔⵠⲆⲆᐃᐃⲆ: "img/night-hand-skin146.png",
    ΔᐃᐃΔΔΔΔ: "img/day-hand-skin147.png",
    ⲆᐃⵠⲆⵠᐃΔ: "img/night-hand-skin147.png",
    ᐃⵠⵠΔΔⲆΔ: "img/day-hand-skin148.png",
    ⲆⲆⲆΔⵠⲆⵠ: "img/night-hand-skin148.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/day-hand-skin149.png",
    ⲆⵠΔΔⲆⵠΔ: "img/night-hand-skin149.png",
    ᐃᐃⲆⲆᐃΔⲆ: "img/day-hand-skin150.png",
    ᐃᐃΔⲆⵠΔⲆ: "img/night-hand-skin150.png",
    ⲆΔΔᐃΔⲆⲆ: "img/day-bag-star0.png",
    ⵠΔΔΔᐃⲆⲆ: "img/night-bag-star0.png",
    ⲆΔΔⲆⵠΔΔ: "img/day-bag0.png",
    ⲆᐃᐃᐃⵠᐃⲆ: "img/night-bag0.png",
    ᐃⲆᐃⲆᐃᐃⵠ: "img/day-bag1.png",
    ⵠΔⵠⵠⲆΔΔ: "img/night-bag1.png",
    ᐃΔⲆᐃⵠⲆⲆ: "img/day-bag2.png",
    ΔⲆⲆⲆⲆⲆᐃ: "img/night-bag2.png",
    ⲆΔᐃΔⵠⲆΔ: "img/day-bag3.png",
    ΔΔΔⵠᐃᐃⲆ: "img/night-bag3.png",
    ΔⲆⵠᐃᐃⵠⵠ: "img/day-bag4.png",
    ᐃⵠⲆΔⵠΔΔ: "img/night-bag4.png",
    ⵠⵠᐃⲆⲆΔⵠ: "img/day-bag5.png",
    ⵠⲆᐃΔⵠⵠⵠ: "img/night-bag5.png",
    Ⲇⵠᐃⵠⵠᐃᐃ: "img/day-bag6.png",
    ᐃⲆⵠᐃᐃᐃᐃ: "img/night-bag6.png",
    ΔⵠⵠⲆⵠᐃᐃ: "img/day-bag7.png",
    ᐃΔⲆⵠⲆⵠᐃ: "img/night-bag7.png",
    ⲆΔⵠⵠⲆⵠᐃ: "img/day-bag8.png",
    ⲆᐃΔⵠⵠᐃᐃ: "img/night-bag8.png",
    ⲆⲆⵠΔΔᐃΔ: "img/day-bag9.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/night-bag9.png",
    ⲆⲆᐃⵠᐃⵠΔ: "img/day-bag10.png",
    ΔᐃΔᐃᐃⲆΔ: "img/night-bag10.png",
    ᐃⲆⵠᐃⵠΔΔ: "img/day-bag11.png",
    ⲆⲆⲆᐃⲆⵠⵠ: "img/night-bag11.png",
    ⵠⲆⵠᐃⵠᐃᐃ: "img/day-bag13.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/night-bag13.png",
    ⲆⵠᐃᐃΔⵠⵠ: "img/day-bag14.png",
    ⵠⵠⵠⲆᐃᐃⲆ: "img/night-bag14.png",
    ⲆᐃᐃⲆⵠᐃᐃ: "img/day-bag16.png",
    ΔΔΔᐃΔᐃᐃ: "img/night-bag16.png",
    ⲆΔⵠᐃⵠⵠΔ: "img/day-bag17.png",
    ⲆΔᐃΔᐃΔⵠ: "img/night-bag17.png",
    ΔⲆᐃΔⲆᐃⲆ: "img/day-bag18.png",
    ᐃⲆΔⲆⲆⲆᐃ: "img/night-bag18.png",
    ⲆⵠⲆΔⲆⵠⲆ: "img/day-bag19.png",
    ⵠΔⲆΔⲆᐃⲆ: "img/night-bag19.png",
    ⲆⲆΔΔᐃⵠΔ: "img/day-bag20.png",
    ⵠᐃⵠΔΔΔⵠ: "img/night-bag20.png",
    ⵠΔⲆⲆΔⵠⵠ: "img/day-bag21.png",
    ⲆⵠⵠᐃᐃⲆⲆ: "img/night-bag21.png",
    ΔΔᐃⲆΔⵠⵠ: "img/day-bag22.png",
    ⲆΔⲆΔΔΔⵠ: "img/night-bag22.png",
    ᐃᐃⵠⲆⵠⵠⵠ: "img/day-bag23.png",
    ΔΔΔᐃⵠⲆⲆ: "img/night-bag23.png",
    ᐃⲆΔⲆΔΔⵠ: "img/day-bag24.png",
    ΔΔⵠΔⵠⲆⲆ: "img/night-bag24.png",
    ⲆⲆΔᐃⵠⵠΔ: "img/day-bag25.png",
    ⲆⲆΔⲆⵠΔⲆ: "img/night-bag25.png",
    ΔⲆΔᐃⵠᐃᐃ: "img/day-bag26.png",
    ⲆⲆⵠⵠΔᐃΔ: "img/night-bag26.png",
    ᐃⵠᐃᐃⲆⵠΔ: "img/day-bag27.png",
    ᐃⲆⲆᐃᐃᐃΔ: "img/night-bag27.png",
    ⲆᐃⲆⲆΔⵠᐃ: "img/day-bag28.png",
    ΔⲆᐃⵠΔⲆⲆ: "img/night-bag28.png",
    ⵠⵠⲆΔⵠᐃⵠ: "img/day-bag29.png",
    ⲆΔⲆⲆΔᐃΔ: "img/night-bag29.png",
    ⲆΔΔΔᐃᐃⵠ: "img/day-bag30.png",
    ⵠΔᐃⲆⲆΔⵠ: "img/night-bag30.png",
    ⲆⲆᐃΔⵠⲆᐃ: "img/day-bag31.png",
    ΔⵠⵠⲆⲆΔᐃ: "img/night-bag31.png",
    ΔⵠᐃΔΔᐃⲆ: "img/day-bag32.png",
    ΔⵠⵠⵠΔⲆᐃ: "img/night-bag32.png",
    ⵠⵠⵠⲆⵠᐃⲆ: "img/day-bag33.png",
    ᐃᐃᐃᐃⵠᐃᐃ: "img/night-bag33.png",
    ⲆᐃⵠΔᐃⵠⲆ: "img/day-bag34.png",
    ΔⲆⲆⲆᐃⲆΔ: "img/night-bag34.png",
    ᐃΔΔΔΔⵠΔ: "img/day-bag35.png",
    ᐃΔᐃᐃⲆᐃⵠ: "img/night-bag35.png",
    ΔⲆᐃⵠᐃΔᐃ: "img/day-bag36.png",
    ΔᐃᐃⵠⲆᐃⵠ: "img/night-bag36.png",
    ⲆⵠⲆᐃⵠᐃⵠ: "img/day-bag37.png",
    ⵠΔᐃⵠᐃᐃⵠ: "img/night-bag37.png",
    ΔΔⲆΔΔΔᐃ: "img/day-bag38.png",
    ΔᐃⵠⵠⵠΔⵠ: "img/night-bag38.png",
    ⲆᐃⵠΔᐃᐃΔ: "img/day-bag39.png",
    ⵠΔΔᐃΔⲆΔ: "img/night-bag39.png",
    ᐃⲆᐃᐃΔⵠΔ: "img/day-bag40.png",
    ⵠⲆᐃⵠⲆΔᐃ: "img/night-bag40.png",
    ᐃᐃᐃⲆΔΔΔ: "img/day-bag41.png",
    ⵠΔⲆⲆⵠⲆⲆ: "img/night-bag41.png",
    ⲆᐃⲆΔᐃΔⲆ: "img/day-bag42.png",
    ⵠᐃⲆᐃⵠᐃⵠ: "img/night-bag42.png",
    ⵠⵠᐃᐃᐃⵠΔ: "img/day-bag43.png",
    ⵠⵠᐃⲆⵠΔᐃ: "img/night-bag43.png",
    ΔⵠⲆᐃⲆΔᐃ: "img/day-bag44.png",
    ⲆΔᐃⵠⲆΔΔ: "img/night-bag44.png",
    ⵠᐃΔⲆⵠᐃΔ: "img/day-bag45.png",
    ⲆⲆᐃⵠⲆⵠΔ: "img/night-bag45.png",
    ΔⲆⲆⲆΔⲆⵠ: "img/day-bag46.png",
    ΔⲆᐃᐃⵠⵠⲆ: "img/night-bag46.png",
    ᐃΔΔⵠΔΔΔ: "img/day-bag47.png",
    ᐃΔⵠᐃⲆⲆΔ: "img/night-bag47.png",
    ⲆᐃΔΔⲆⵠⲆ: "img/day-bag48.png",
    ⲆΔΔⵠⲆΔⲆ: "img/night-bag48.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/day-bag49.png",
    ⲆⵠⲆᐃⵠᐃᐃ: "img/night-bag49.png",
    ᐃΔᐃΔΔⵠΔ: "img/day-bag50.png",
    ΔᐃⵠΔΔⲆⲆ: "img/night-bag50.png",
    ⵠⵠᐃⲆΔⲆᐃ: "img/day-bag51.png",
    ⵠΔⵠⵠᐃΔΔ: "img/night-bag51.png",
    ᐃⵠⲆⲆᐃⵠⲆ: "img/day-bag52.png",
    ᐃᐃΔᐃᐃⵠⵠ: "img/night-bag52.png",
    ᐃⲆⲆΔᐃⲆⵠ: "img/day-bag53.png",
    ᐃⵠⵠⵠⲆΔⵠ: "img/night-bag53.png",
    ⲆⵠⵠᐃΔΔⵠ: "img/day-bag54.png",
    ⲆΔⵠΔΔⲆⵠ: "img/night-bag54.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/day-bag55.png",
    ΔΔΔΔⵠᐃⲆ: "img/night-bag55.png",
    ⵠΔⲆⲆⲆⲆΔ: "img/day-bag56.png",
    ΔⵠᐃⲆⲆᐃⵠ: "img/night-bag56.png",
    ΔⵠΔⲆⲆⵠΔ: "img/day-bag57.png",
    ⲆⲆᐃΔⵠⲆⲆ: "img/night-bag57.png",
    ᐃⲆⲆⲆⵠⲆⲆ: "img/day-bag58.png",
    ⵠᐃΔⲆΔᐃΔ: "img/night-bag58.png",
    ⲆⲆΔⲆΔⵠᐃ: "img/day-bag59.png",
    ᐃⲆᐃΔᐃⲆΔ: "img/night-bag59.png",
    ΔⲆΔⲆΔΔⵠ: "img/day-bag60.png",
    ⲆΔΔⵠᐃᐃᐃ: "img/night-bag60.png",
    ᐃⲆⵠΔΔᐃΔ: "img/day-bag61.png",
    ᐃᐃΔᐃⲆⲆᐃ: "img/night-bag61.png",
    ⲆⵠⵠᐃⲆⲆᐃ: "img/day-bag62.png",
    ᐃⵠᐃᐃⲆᐃⵠ: "img/night-bag62.png",
    Ⲇᐃᐃⵠⵠᐃⵠ: "img/day-bag63.png",
    ΔⲆⲆⲆᐃⵠⲆ: "img/night-bag63.png",
    Ⲇⵠⵠᐃⵠⵠⵠ: "img/day-bag64.png",
    ΔⵠⵠΔⲆᐃΔ: "img/night-bag64.png",
    ⵠᐃΔⵠⲆⲆⲆ: "img/day-bag65.png",
    ⲆᐃΔⲆⲆⵠᐃ: "img/night-bag65.png",
    ΔⲆΔⲆⵠⵠᐃ: "img/day-bag66.png",
    ⲆⵠΔⲆⲆᐃⵠ: "img/night-bag66.png",
    ΔΔⲆⵠΔΔΔ: "img/day-bag67.png",
    ΔⲆΔⲆᐃⵠᐃ: "img/night-bag67.png",
    ⲆⲆᐃⵠΔΔᐃ: "img/day-bag68.png",
    ᐃⲆᐃⲆⲆᐃⲆ: "img/night-bag68.png",
    ⲆⲆⵠᐃⲆᐃⲆ: "img/day-accessory0.png",
    ΔⲆᐃᐃⲆΔⵠ: "img/day-accessory0-pacques.png",
    ΔΔⵠⲆⲆⲆᐃ: "img/night-accessory0-pacques.png",
    ΔⵠΔᐃᐃᐃⵠ: "img/day-accessory13.png",
    ⵠΔⵠⲆⵠⲆⵠ: "img/night-accessory13.png",
    ⵠᐃᐃΔⲆᐃⲆ: "img/day-accessory14.png",
    ᐃⵠᐃᐃΔⲆⵠ: "img/night-accessory14.png",
    ᐃΔⲆⲆⵠⲆΔ: "img/day-accessory15.png",
    ⲆΔⲆⲆⵠᐃⵠ: "img/night-accessory15.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/day-accessory16.png",
    ⲆⵠⵠᐃΔⵠᐃ: "img/night-accessory16.png",
    ᐃⲆΔⵠⵠⲆΔ: "img/day-accessory17.png",
    ΔΔΔᐃⲆⲆⵠ: "img/day-accessory17.png",
    ⲆΔⵠᐃᐃΔᐃ: "img/day-accessory19.png",
    ⵠΔⲆᐃΔⵠⲆ: "img/night-accessory19.png",
    ⲆΔⲆⲆΔᐃⲆ: "img/day-accessory20.png",
    ⵠΔᐃⲆΔᐃⲆ: "img/night-accessory20.png",
    ΔⵠᐃΔⲆΔⵠ: "img/day-accessory21.png",
    ᐃⲆΔⲆⲆΔⲆ: "img/night-accessory21.png",
    ⲆᐃⲆᐃᐃΔΔ: "img/day-accessory22.png",
    ⲆⲆⲆⲆⲆΔⵠ: "img/night-accessory22.png",
    ᐃΔᐃΔⲆⵠᐃ: "img/day-accessory23.png",
    ⲆᐃⵠᐃⵠΔⵠ: "img/night-accessory23.png",
    ⲆⲆⵠⲆΔⵠⲆ: "img/day-accessory24.png",
    ⲆⲆᐃⲆΔᐃⵠ: "img/night-accessory24.png",
    ΔⵠⲆΔΔⵠⵠ: "img/day-accessory25.png",
    ⲆⵠⲆᐃⵠΔᐃ: "img/night-accessory25.png",
    ⲆᐃᐃΔΔⲆⲆ: "img/day-accessory26.png",
    ⲆΔⲆΔΔⲆⵠ: "img/night-accessory26.png",
    ΔⲆⵠⲆⵠⲆᐃ: "img/day-accessory27.png",
    ΔⲆⲆⵠᐃᐃΔ: "img/night-accessory27.png",
    ⲆⵠⲆⲆᐃΔⲆ: "img/day-accessory18.png",
    ⵠⲆΔⲆⲆΔᐃ: "img/night-accessory18.png",
    ⲆⵠⲆΔᐃⵠᐃ: "img/day-accessory29.png",
    ⵠⵠΔⵠᐃⲆΔ: "img/night-accessory29.png",
    ΔΔᐃⵠᐃΔΔ: "img/day-accessory30.png",
    ᐃΔᐃⲆᐃⵠⵠ: "img/night-accessory30.png",
    ⵠΔⲆΔⲆΔⵠ: "img/day-accessory31.png",
    ⵠᐃⲆⵠΔᐃᐃ: "img/night-accessory31.png",
    ⵠⵠΔᐃⵠᐃⲆ: "img/day-accessory32.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/night-accessory32.png",
    ⵠΔΔⵠⲆᐃⵠ: "img/day-accessory33.png",
    ᐃⵠⵠᐃⵠⲆΔ: "img/night-accessory33.png",
    ΔⲆⵠⲆⲆᐃⵠ: "img/day-accessory34.png",
    ⵠⲆΔᐃⲆᐃⲆ: "img/night-accessory34.png",
    ⲆⵠⲆⲆΔⵠΔ: "img/day-accessory35.png",
    ⵠⵠᐃᐃᐃΔⵠ: "img/night-accessory35.png",
    ⵠⵠΔⲆⲆᐃΔ: "img/day-accessory28.png",
    ΔⲆΔⲆⲆΔⵠ: "img/night-accessory28.png",
    ⵠⲆⵠⵠⵠⵠΔ: "img/day-accessory36.png",
    ⲆⲆᐃᐃⲆΔᐃ: "img/night-accessory36.png",
    ⵠⵠⵠⵠΔⵠⵠ: "img/day-accessory37.png",
    ᐃⲆⵠⵠΔⵠᐃ: "img/night-accessory37.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/day-accessory39.png",
    ΔΔᐃⲆⵠᐃΔ: "img/night-accessory39.png",
    ΔⲆⲆᐃⵠⲆᐃ: "img/day-accessory40.png",
    ᐃⲆⲆᐃⵠΔΔ: "img/night-accessory40.png",
    ΔⵠⵠⵠᐃⲆᐃ: "img/day-accessory41.png",
    ΔΔᐃᐃΔΔΔ: "img/night-accessory41.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/day-accessory42.png",
    ΔΔⲆᐃⲆⲆⲆ: "img/night-accessory42.png",
    ⵠⲆⵠΔⵠΔⵠ: "img/day-accessory43.png",
    ᐃᐃΔⵠΔⲆⵠ: "img/night-accessory43.png",
    ΔᐃᐃΔᐃΔΔ: "img/day-accessory44.png",
    ᐃⲆⵠΔᐃⵠΔ: "img/night-accessory44.png",
    ⵠᐃᐃⲆⲆⲆΔ: "img/day-accessory38.png",
    ⲆⲆᐃΔⵠΔⵠ: "img/night-accessory38.png",
    ΔⲆⵠⲆΔᐃᐃ: "img/day-accessory46.png",
    ⵠᐃΔΔⲆⲆⵠ: "img/night-accessory46.png",
    ᐃⲆΔΔΔᐃⲆ: "img/day-accessory47.png",
    ΔⵠΔⵠΔΔⲆ: "img/night-accessory47.png",
    ⲆⲆⲆⵠΔΔⲆ: "img/day-accessory48.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/night-accessory48.png",
    ⲆⲆΔⲆⵠⲆⵠ: "img/day-accessory49.png",
    ⵠⵠΔⲆΔΔⵠ: "img/night-accessory49.png",
    ⲆⵠⲆΔⵠΔᐃ: "img/day-accessory45.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/night-accessory45.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/day-accessory50.png",
    ᐃᐃΔⵠⲆⲆᐃ: "img/night-accessory50.png",
    ⲆⵠᐃᐃⵠⲆᐃ: "img/day-accessory51.png",
    ΔᐃΔⵠΔᐃⵠ: "img/night-accessory51.png",
    ⵠᐃᐃΔⲆᐃⵠ: "img/day-accessory52.png",
    ⵠⲆΔΔΔⵠⵠ: "img/night-accessory52.png",
    ΔᐃΔⵠΔΔᐃ: "img/day-accessory53.png",
    ⲆⵠⲆΔᐃΔᐃ: "img/night-accessory53.png",
    ΔᐃᐃΔⲆΔⵠ: "img/day-accessory54.png",
    Δᐃⵠⵠⵠᐃᐃ: "img/night-accessory54.png",
    ΔⲆⲆⵠΔᐃⵠ: "img/day-accessory55.png",
    ΔᐃⵠᐃⲆΔΔ: "img/night-accessory55.png",
    ⲆΔⵠᐃᐃⵠΔ: "img/day-accessory56.png",
    ᐃⵠᐃᐃΔⲆᐃ: "img/night-accessory56.png",
    ΔᐃΔᐃⵠⵠΔ: "img/day-accessory57.png",
    ᐃΔᐃΔᐃⲆᐃ: "img/night-accessory57.png",
    ⲆᐃΔⵠⲆⵠⵠ: "img/day-accessory58.png",
    ⲆᐃΔⲆᐃⵠΔ: "img/night-accessory58.png",
    ΔⵠᐃⲆⲆΔᐃ: "img/day-accessory59.png",
    ΔᐃΔΔⲆⵠⲆ: "img/night-accessory59.png",
    ΔⲆΔⲆⵠⵠΔ: "img/day-accessory60.png",
    ⵠⵠΔᐃΔΔΔ: "img/night-accessory60.png",
    ΔΔᐃᐃⲆᐃᐃ: "img/day-accessory61.png",
    ΔᐃᐃⵠⲆⲆⵠ: "img/night-accessory61.png",
    ᐃⵠΔΔΔᐃΔ: "img/day-accessory62.png",
    ⵠⲆΔΔᐃᐃᐃ: "img/night-accessory62.png",
    ΔᐃᐃⲆΔⲆΔ: "img/day-accessory63.png",
    ⵠΔΔᐃⲆᐃⲆ: "img/night-accessory63.png",
    ᐃᐃΔᐃΔΔⵠ: "img/day-accessory64.png",
    ᐃⵠᐃⵠᐃᐃᐃ: "img/night-accessory64.png",
    ΔΔΔⲆᐃⵠⲆ: "img/day-accessory65.png",
    ᐃΔⲆⵠⲆⵠⲆ: "img/night-accessory65.png",
    ᐃΔᐃΔᐃⵠⵠ: "img/day-accessory66.png",
    ΔⲆᐃΔⵠⵠᐃ: "img/night-accessory66.png",
    ΔᐃⲆᐃⵠⵠᐃ: "img/day-accessory67.png",
    ΔᐃΔⲆΔⵠⵠ: "img/night-accessory67.png",
    ΔᐃⵠⵠⲆΔᐃ: "img/day-accessory68.png",
    ⲆΔΔⲆⵠⵠᐃ: "img/night-accessory68.png",
    ΔᐃΔΔΔΔⲆ: "img/day-accessory69.png",
    ⲆⵠᐃⲆⵠⵠⲆ: "img/night-accessory69.png",
    ΔⵠⲆΔᐃⲆᐃ: "img/day-accessory70.png",
    ⲆⲆⵠⵠⲆΔΔ: "img/night-accessory70.png",
    ⵠᐃᐃΔⵠⵠᐃ: "img/day-accessory71.png",
    ᐃᐃᐃⲆⲆⵠᐃ: "img/night-accessory71.png",
    ⲆⵠᐃᐃᐃΔⲆ: "img/day-accessory72.png",
    ⲆᐃΔΔⲆⵠᐃ: "img/night-accessory72.png",
    ⵠᐃΔΔⲆⵠᐃ: "img/day-accessory73.png",
    ΔⲆΔⲆⵠΔᐃ: "img/night-accessory73.png",
    ⲆΔⵠⲆⵠΔⵠ: "img/day-accessory74.png",
    ΔᐃⲆΔᐃΔⵠ: "img/night-accessory74.png",
    ⵠⲆᐃΔⵠΔΔ: "img/day-accessory75.png",
    ⲆⲆⲆⵠᐃⲆⲆ: "img/night-accessory75.png",
    ᐃᐃⲆΔᐃⲆΔ: "img/day-accessory76.png",
    ᐃᐃΔⲆⲆⵠⵠ: "img/night-accessory76.png",
    ΔΔⲆⲆΔᐃΔ: "img/day-accessory77.png",
    ⵠΔⲆⵠΔⲆⵠ: "img/night-accessory77.png",
    ᐃⵠΔΔᐃⲆᐃ: "img/day-accessory78.png",
    ΔᐃᐃᐃΔΔΔ: "img/night-accessory78.png",
    ⵠΔⲆΔΔⵠΔ: "img/day-accessory79.png",
    ᐃⵠᐃⵠⵠΔⲆ: "img/night-accessory79.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/day-accessory80.png",
    ΔΔⲆᐃⵠᐃΔ: "img/night-accessory80.png",
    ᐃⲆΔᐃⵠⵠΔ: "img/day-accessory81.png",
    ᐃᐃΔⵠⵠⲆᐃ: "img/night-accessory81.png",
    ᐃΔⵠⲆⲆΔⲆ: "img/day-book0.png",
    ⵠⵠⵠⵠⵠᐃⲆ: "img/night-book0.png",
    ᐃⲆᐃᐃᐃⵠΔ: "img/day-book1.png",
    ⲆⵠΔⵠᐃᐃᐃ: "img/night-book1.png",
    ΔᐃⲆⲆⲆⵠΔ: "img/day-book2.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/night-book2.png",
    ΔᐃⲆᐃⵠⵠⲆ: "img/day-book3.png",
    ᐃΔΔΔⵠᐃⲆ: "img/night-book3.png",
    ΔΔΔᐃΔⵠᐃ: "img/day-book4.png",
    ᐃⵠⵠⲆⲆⲆⵠ: "img/night-book4.png",
    ᐃⲆⲆᐃΔᐃⲆ: "img/day-book5.png",
    ⵠⵠⲆΔⲆΔΔ: "img/night-book5.png",
    ᐃⵠΔⲆΔⲆⲆ: "img/day-book6.png",
    ᐃᐃΔΔᐃⵠᐃ: "img/night-book6.png",
    ᐃⵠⲆⵠⵠᐃⵠ: "img/day-book7.png",
    ⲆᐃᐃⵠⲆΔΔ: "img/night-book7.png",
    ᐃⲆⵠΔᐃⲆⲆ: "img/day-book8.png",
    ΔⲆᐃΔΔΔΔ: "img/night-book8.png",
    ⵠΔΔᐃᐃᐃᐃ: "img/day-book9.png",
    ⲆⲆΔΔⲆΔⲆ: "img/night-book9.png",
    ΔⲆⲆⵠΔⲆΔ: "img/day-book10.png",
    ᐃⵠᐃⲆⵠΔΔ: "img/night-book10.png",
    ⵠᐃᐃⲆⲆᐃⵠ: "img/day-book11.png",
    ⲆⵠΔⵠⵠⲆⲆ: "img/night-book11.png",
    ⵠᐃⲆⲆᐃΔᐃ: "img/day-book12.png",
    ⲆΔᐃⵠⲆⵠΔ: "img/night-book12.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/day-book13.png",
    ᐃⵠⵠⵠᐃᐃⲆ: "img/night-book13.png",
    ᐃΔⵠⵠⵠΔᐃ: "img/day-book14.png",
    ᐃᐃⵠᐃⲆᐃⲆ: "img/night-book14.png",
    ⲆᐃⲆⲆⲆⲆᐃ: "img/day-book15.png",
    ᐃᐃΔⵠΔΔᐃ: "img/night-book15.png",
    ᐃⵠⲆΔⲆᐃⵠ: "img/day-book16.png",
    ᐃᐃⵠⲆΔΔⵠ: "img/night-book16.png",
    ⵠⵠΔᐃᐃΔΔ: "img/day-book17.png",
    ⵠⲆᐃᐃⲆΔᐃ: "img/night-book17.png",
    ⵠΔΔΔⵠΔⲆ: "img/day-book18.png",
    ⲆⵠⵠᐃⲆⲆΔ: "img/night-book18.png",
    ⲆΔⵠⲆⲆᐃᐃ: "img/day-book19.png",
    ⵠⲆᐃⲆⲆᐃⵠ: "img/night-book19.png",
    ᐃΔΔⲆⵠᐃΔ: "img/day-book20.png",
    ΔⲆΔⲆⲆᐃΔ: "img/night-book20.png",
    ⲆᐃΔⵠⵠⵠⲆ: "img/day-book21.png",
    ᐃⵠᐃⵠᐃⵠᐃ: "img/night-book21.png",
    ⲆᐃᐃᐃⲆΔⲆ: "img/day-book22.png",
    ΔᐃΔᐃΔΔⵠ: "img/night-book22.png",
    ᐃⲆᐃⲆᐃⲆᐃ: "img/day-book23.png",
    ΔΔΔΔᐃⲆΔ: "img/night-book23.png",
    ΔᐃᐃΔⵠⲆⲆ: "img/day-book24.png",
    ⵠⵠΔΔΔΔⲆ: "img/night-book24.png",
    Δᐃᐃⵠᐃⵠⵠ: "img/day-book25.png",
    ⵠⲆⲆⵠᐃⵠⲆ: "img/night-book25.png",
    ⵠⵠΔⵠⲆⵠⲆ: "img/day-book26.png",
    ⲆⵠⵠᐃΔΔᐃ: "img/night-book26.png",
    ⵠΔΔΔᐃⵠΔ: "img/day-book27.png",
    ⵠᐃᐃⵠⲆⲆⵠ: "img/night-book27.png",
    ⲆⵠΔⲆⵠᐃⵠ: "img/day-book28.png",
    ⲆⵠᐃΔΔⵠᐃ: "img/night-book28.png",
    ⲆⵠⵠΔᐃΔⵠ: "img/day-book29.png",
    ᐃⲆⲆᐃᐃᐃⲆ: "img/night-book29.png",
    ⵠΔΔΔⲆᐃᐃ: "img/day-book30.png",
    ᐃⲆᐃⲆΔΔⲆ: "img/night-book30.png",
    ΔⲆⵠΔⵠⲆᐃ: "img/day-book31.png",
    ᐃⵠⲆⲆⲆΔΔ: "img/night-book31.png",
    ᐃᐃᐃⵠⲆⵠⵠ: "img/day-book32.png",
    ᐃⵠⵠΔΔⵠⵠ: "img/night-book32.png",
    ⲆΔΔⲆⲆΔⵠ: "img/day-book33.png",
    ⲆⵠⵠᐃΔᐃΔ: "img/night-book33.png",
    ᐃᐃⲆΔΔⵠⲆ: "img/day-book34.png",
    ΔⵠΔⵠΔⵠⵠ: "img/night-book34.png",
    ⲆⵠⵠᐃΔΔΔ: "img/day-book35.png",
    ᐃΔᐃᐃⵠᐃⲆ: "img/night-book35.png",
    ᐃⲆⵠᐃⵠⲆΔ: "img/day-book36.png",
    ⵠⲆⲆΔⵠⲆⲆ: "img/night-book36.png",
    ⵠᐃⲆⲆᐃⵠΔΔᐃ: "img/day-book37.png",
    ⲆⲆᐃⲆⵠⵠΔⵠΔ: "img/night-book37.png",
    ⵠΔⲆΔᐃⵠᐃ: "img/day-book38.png",
    ⵠⵠΔᐃΔᐃⲆ: "img/night-book38.png",
    ᐃⵠⲆⵠᐃⲆΔ: "img/day-book39.png",
    ⵠΔⵠᐃⵠᐃᐃ: "img/night-book39.png",
    ⵠΔᐃⲆⵠⲆΔ: "img/day-book40.png",
    ⲆⲆΔΔⵠΔᐃ: "img/night-book40.png",
    ⵠΔᐃⵠⵠⵠⵠ: "img/day-book41.png",
    ΔᐃⵠΔⵠΔᐃ: "img/night-book41.png",
    ΔΔⲆⵠⲆⵠᐃ: "img/day-book42.png",
    ΔΔⲆⲆⵠᐃⲆ: "img/night-book42.png",
    ΔⵠΔΔᐃᐃⵠ: "img/day-book43.png",
    ᐃᐃᐃΔⲆΔᐃ: "img/night-book43.png",
    ⵠΔᐃΔΔⵠΔ: "img/day-book44.png",
    ᐃΔⵠᐃⲆⲆⲆ: "img/night-book44.png",
    ᐃⵠⲆⵠⵠΔᐃ: "img/day-book45.png",
    ⲆΔⵠⵠⵠⲆⵠ: "img/night-book45.png",
    ⵠᐃᐃᐃⲆΔΔ: "img/day-crate1.png",
    ⲆⲆⵠⵠᐃⵠⲆ: "img/night-crate1.png",
    ΔⵠΔᐃⲆᐃΔ: "img/day-crate2.png",
    ⵠⲆᐃᐃᐃⵠⵠ: "img/night-crate2.png",
    ᐃⲆΔⵠⲆΔΔ: "img/day-crate3.png",
    ΔⵠⲆⲆΔᐃΔ: "img/night-crate3.png",
    ⵠⵠⲆΔⵠⵠⲆ: "img/day-crate4.png",
    ⲆΔⵠᐃⵠΔⵠ: "img/night-crate4.png",
    ⵠᐃᐃΔΔⲆⵠ: "img/day-crate5.png",
    ΔⲆⵠΔⲆΔⵠ: "img/night-crate5.png",
    ⵠⲆⵠΔⲆⵠⲆ: "img/day-crate6.png",
    ⵠᐃΔΔΔⲆⵠ: "img/night-crate6.png",
    ⲆᐃᐃᐃⲆⲆᐃ: "img/day-crate7.png",
    ΔΔΔΔΔⵠΔ: "img/night-crate7.png",
    ⵠᐃᐃΔΔⵠΔ: "img/day-crate8.png",
    ΔⲆⲆΔΔⲆⲆ: "img/night-crate8.png",
    ᐃⵠⲆⵠᐃⵠᐃ: "img/day-crate9.png",
    ⲆᐃᐃⲆᐃⵠⲆ: "img/night-crate9.png",
    ᐃΔΔⵠⵠⲆⵠ: "img/day-crate10.png",
    ΔⵠⵠΔΔⲆᐃ: "img/night-crate10.png",
    ⲆⵠΔⲆⲆᐃᐃ: "img/day-crate11.png",
    ΔΔΔⵠⵠᐃᐃ: "img/night-crate11.png",
    ΔΔⲆΔᐃⵠⵠ: "img/day-crate12.png",
    ΔⵠⵠᐃᐃⵠⲆ: "img/night-crate12.png",
    ⲆⲆⲆᐃⲆⲆᐃ: "img/day-crate13.png",
    ⲆΔⲆᐃᐃⵠᐃ: "img/night-crate13.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/day-crate14.png",
    ΔᐃⲆⲆⵠⲆⵠ: "img/night-crate14.png",
    ⲆⵠⲆⵠⵠᐃΔ: "img/day-crate15.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/night-crate15.png",
    ΔⵠΔⵠⵠⵠΔ: "img/day-crate16.png",
    ⵠⵠΔⵠⵠΔΔ: "img/night-crate16.png",
    ⲆᐃΔⵠⵠⲆⵠ: "img/day-crate17.png",
    ᐃⲆΔⲆᐃᐃⲆ: "img/night-crate17.png",
    ΔΔⵠⵠΔⲆᐃ: "img/day-crate18.png",
    ⲆᐃⲆⵠⲆᐃⲆ: "img/night-crate18.png",
    ⲆΔⵠΔⵠΔⵠ: "img/day-crate19.png",
    ΔⲆⵠⵠᐃΔᐃ: "img/night-crate19.png",
    ⵠⵠᐃⲆⲆⵠΔ: "img/day-crate20.png",
    ΔΔΔΔⵠΔΔ: "img/night-crate20.png",
    ⵠΔⵠᐃⵠΔᐃ: "img/day-crate21.png",
    ⲆⲆᐃᐃⵠΔᐃ: "img/night-crate21.png",
    ⵠⵠᐃᐃΔⵠΔ: "img/day-crate22.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/night-crate22.png",
    ΔⲆᐃᐃᐃᐃΔ: "img/day-crate23.png",
    ⵠΔⵠᐃⵠⵠⵠ: "img/night-crate23.png",
    ⲆⲆᐃᐃᐃⲆᐃ: "img/day-crate24.png",
    ⲆΔⲆΔᐃⵠⵠ: "img/night-crate24.png",
    ⵠⵠⲆⲆᐃᐃΔ: "img/day-crate25.png",
    ⵠΔᐃⵠᐃⲆᐃ: "img/night-crate25.png",
    ᐃᐃⲆᐃⲆΔᐃ: "img/day-crate26.png",
    ΔⲆᐃᐃΔΔⲆ: "img/night-crate26.png",
    ΔΔⵠᐃⲆⵠⲆ: "img/day-crate27.png",
    ᐃⵠⵠⲆⵠᐃⵠ: "img/night-crate27.png",
    ᐃⵠⲆⲆⲆᐃΔ: "img/day-crate28.png",
    ⲆΔᐃⲆⲆΔΔ: "img/night-crate28.png",
    ⵠᐃⵠⵠΔΔᐃ: "img/day-crate29.png",
    ⲆΔᐃⲆⲆᐃⵠ: "img/night-crate29.png",
    ᐃΔⲆΔⵠΔⲆ: "img/day-crate30.png",
    ⲆΔᐃᐃᐃᐃᐃ: "img/night-crate30.png",
    ΔΔΔΔⲆᐃᐃ: "img/day-crate31.png",
    ⲆⲆΔΔᐃⵠⵠ: "img/night-crate31.png",
    ᐃᐃΔᐃΔⲆⵠ: "img/day-crate32.png",
    ᐃᐃⵠⲆⵠΔΔ: "img/night-crate32.png",
    ⵠᐃΔⲆΔᐃⵠ: "img/day-crate33.png",
    ⲆⲆᐃⲆⵠᐃᐃ: "img/night-crate33.png",
    ᐃΔᐃⲆⵠⲆⵠ: "img/day-crate34.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/night-crate34.png",
    ᐃΔⵠᐃᐃᐃⵠ: "img/day-crate35.png",
    ⵠⲆⲆⵠᐃΔⲆ: "img/night-crate35.png",
    ᐃΔΔⲆⲆⵠᐃ: "img/day-crate36.png",
    ⲆⵠᐃⵠⲆⲆⲆ: "img/night-crate36.png",
    ᐃΔⲆⲆᐃⲆᐃ: "img/day-crate37.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/night-crate37.png",
    ᐃⲆΔΔΔⵠΔ: "img/day-crate38.png",
    ⲆⵠΔΔᐃⵠᐃ: "img/night-crate38.png",
    ⲆⵠⵠⲆᐃΔᐃ: "img/day-crate39.png",
    ᐃΔⲆᐃΔᐃΔ: "img/night-crate39.png",
    ᐃⵠΔⲆΔⲆᐃ: "img/day-crate40.png",
    ᐃᐃᐃⵠⵠⵠΔ: "img/night-crate40.png",
    ᐃΔⵠⵠⵠΔⲆ: "img/day-crate41.png",
    ᐃⵠΔⵠⵠᐃᐃ: "img/night-crate41.png",
    ⵠΔⲆⵠⲆΔᐃ: "img/day-crate42.png",
    ΔΔᐃᐃΔⵠᐃ: "img/night-crate42.png",
    ⵠᐃⵠⵠᐃᐃΔ: "img/day-crate43.png",
    ΔᐃᐃΔΔⲆᐃ: "img/night-crate43.png",
    ⵠⵠΔΔⲆᐃΔ: "img/day-crate44.png",
    ⲆⲆⲆⲆΔⲆⵠ: "img/night-crate44.png",
    ⵠⲆΔΔᐃᐃⵠ: "img/day-crate45.png",
    ⲆⲆᐃᐃⵠᐃΔ: "img/night-crate45.png",
    ᐃΔⲆⲆΔⵠᐃ: "img/day-crate46.png",
    ΔΔᐃΔⵠⵠᐃ: "img/night-crate46.png",
    ⵠⲆⵠΔⵠⲆⵠ: "img/day-crate47.png",
    ⵠᐃᐃⵠⲆΔᐃ: "img/night-crate47.png",
    ΔΔᐃⵠⵠΔⵠ: "img/day-crate48.png",
    ⵠᐃᐃΔⵠⵠΔ: "img/night-crate48.png",
    ⲆⲆⲆᐃⲆⵠᐃ: "img/day-crate49.png",
    ΔⲆΔᐃⵠΔΔ: "img/night-crate49.png",
    ᐃⵠⵠⲆᐃΔΔ: "img/day-crate50.png",
    ᐃⲆᐃⲆⲆⲆⲆ: "img/night-crate50.png",
    ᐃⵠⲆᐃⵠⵠᐃ: "img/day-crate51.png",
    ⲆⲆΔⵠᐃⵠⵠ: "img/night-crate51.png",
    ΔⲆᐃⲆᐃⲆⵠ: "img/day-crate52.png",
    ᐃΔᐃᐃΔⲆΔ: "img/night-crate52.png",
    ΔⵠⵠⵠΔΔⲆ: "img/day-crate53.png",
    ᐃᐃᐃΔⲆⵠᐃ: "img/night-crate53.png",
    ⲆΔⲆᐃΔΔᐃ: "img/day-crate54.png",
    ᐃᐃⲆⲆⵠⵠΔ: "img/night-crate54.png",
    ⵠᐃᐃᐃᐃⲆΔ: "img/day-crate55.png",
    ⵠΔΔⵠᐃΔᐃ: "img/night-crate55.png",
    ⵠΔΔΔΔⲆΔ: "img/day-crate56.png",
    ᐃⲆᐃⵠΔⵠⲆ: "img/night-crate56.png",
    ΔⲆⵠⲆⵠⵠΔ: "img/day-crate57.png",
    ⵠᐃⲆⲆⲆΔᐃ: "img/night-crate57.png",
    ΔⲆⵠⵠΔᐃᐃ: "img/day-crate58.png",
    ⲆᐃᐃⲆⲆⲆⵠ: "img/night-crate58.png",
    ⲆⲆΔⲆΔⲆⵠ: "img/day-crate59.png",
    ⲆᐃⵠᐃⲆⲆᐃ: "img/night-crate59.png",
    ⲆΔⵠⲆⲆᐃΔ: "img/day-crate60.png",
    ΔⵠΔⲆᐃᐃⲆ: "img/night-crate60.png",
    ΔᐃΔⲆⵠⵠᐃ: "img/day-crate61.png",
    ⲆᐃᐃⲆⲆⵠᐃ: "img/night-crate61.png",
    ᐃᐃΔᐃᐃⲆΔ: "img/day-crate62.png",
    ΔᐃⲆⵠⵠⲆᐃ: "img/night-crate62.png",
    ⵠⵠΔⲆⲆⵠΔ: "img/day-crate63.png",
    ⲆᐃᐃⵠᐃⲆⲆ: "img/night-crate63.png",
    ⵠⲆⵠⲆᐃⲆⵠ: "img/day-crate64.png",
    ⲆΔΔᐃᐃᐃΔ: "img/night-crate64.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/day-crate65.png",
    ᐃΔΔⵠⵠᐃⵠ: "img/night-crate65.png",
    ᐃⵠᐃⲆᐃΔᐃ: "img/day-crate66.png",
    ⵠΔΔΔᐃⵠⵠ: "img/night-crate66.png",
    ΔΔⵠΔⲆⵠⲆ: "img/day-crate67.png",
    ᐃΔΔᐃⵠΔⲆ: "img/night-crate67.png",
    ᐃΔⵠⲆⵠΔⲆ: "img/day-crate68.png",
    ⲆᐃⲆᐃⵠⵠᐃ: "img/night-crate68.png",
    ᐃⵠⵠⵠᐃⵠΔ: "img/day-crate69.png",
    ΔⲆΔΔΔⲆΔ: "img/night-crate69.png",
    ⵠΔΔⵠᐃⵠⵠ: "img/day-crate70.png",
    ⲆΔⵠⲆⵠᐃΔ: "img/night-crate70.png",
    ⲆⵠⲆⵠⵠᐃⵠ: "img/day-crate71.png",
    ΔᐃΔᐃⲆⵠⵠ: "img/night-crate71.png",
    ⲆⵠΔᐃΔⵠⵠ: "img/day-crate72.png",
    ⵠΔⲆΔᐃᐃⲆ: "img/night-crate72.png",
    ⲆΔⵠᐃⲆΔⲆ: "img/day-herb0.png",
    ⵠΔⲆⲆᐃΔᐃ: "img/day-herb1.png",
    ⲆΔᐃΔᐃⵠⵠ: "img/day-herb2.png",
    ⵠⵠⲆᐃⵠᐃᐃ: "img/day-herb3.png",
    ⵠᐃⲆΔΔΔⲆ: "img/day-herb4.png",
    ᐃᐃⵠΔΔⵠᐃ: "img/day-herb5.png",
    ⵠⲆᐃⲆᐃⵠⵠ: "img/day-herb6.png",
    ⵠΔⵠΔᐃⲆⲆ: "img/day-herb7.png",
    ⵠⲆΔⵠⲆⵠΔ: "img/day-herb8.png",
    ΔᐃΔⵠⵠⲆΔ: "img/day-herb9.png",
    ᐃⲆⵠⵠΔΔⲆ: "img/day-herb10.png",
    ⲆΔᐃΔⲆΔⵠ: "img/day-herb11.png",
    ⵠⵠⵠⵠΔᐃΔ: "img/day-herb12.png",
    ⲆΔᐃⲆΔΔⵠ: "img/day-herb13.png",
    ⵠⵠᐃᐃⲆᐃⵠ: "img/day-herb14.png",
    ⵠⵠⲆᐃⵠⵠᐃ: "img/day-herb15.png",
    ΔΔΔΔΔⲆΔ: "img/day-shell0.png",
    ᐃΔᐃⲆΔⲆⵠ: "img/day-shell1.png",
    ΔΔᐃⲆᐃⲆᐃ: "img/day-shell2.png",
    ᐃΔⲆⵠΔΔᐃ: "img/day-leaf1.png",
    ⵠⵠⲆⵠᐃᐃΔ: "img/day-leaf2.png",
    ⲆΔᐃⲆⲆⲆΔ: "img/day-leaf3.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/day-leaf4.png",
    ⲆᐃⲆⵠⵠΔⲆ: "img/day-leaf5.png",
    ᐃⵠᐃᐃⵠᐃᐃ: "img/day-leaf6.png",
    ΔⵠΔΔΔΔᐃ: "img/day-leaf7.png",
    ᐃᐃΔⲆⵠⵠΔ: "img/day-leaf8.png",
    ᐃᐃᐃΔⲆⲆⲆ: "img/day-rock0.png",
    ⵠⲆᐃᐃⵠΔⲆ: "img/day-rock1.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/day-rock2.png",
    ᐃⵠⲆᐃⵠᐃⲆ: "img/day-rock3.png",
    ⲆΔΔΔⲆᐃⵠ: "img/day-rock4.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/day-rock5.png",
    ΔⵠⵠΔⲆⲆΔ: "img/day-rock6.png",
    ⲆΔⲆⲆⵠⵠΔ: "img/day-rock7.png",
    ⲆⵠᐃΔⵠⵠⵠ: "img/day-rock8.png",
    ᐃⲆⵠΔⲆΔⵠ: "img/day-rock9.png",
    ΔⲆΔⲆⵠᐃΔ: "img/day-rock10.png",
    Δⵠᐃⵠᐃᐃⵠ: "img/day-rock11.png",
    ⲆᐃⲆᐃⲆⵠᐃ: "img/day-rock12.png",
    ⲆⵠΔⲆΔⲆⵠ: "img/day-rock13.png",
    ⵠᐃⵠΔⵠᐃᐃ: "img/day-flower1.png",
    ⲆΔⲆΔⵠⲆⵠ: "img/day-flower2.png",
    ⵠᐃⲆᐃΔᐃⲆ: "img/day-flower3.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/day-flower4.png",
    ⲆᐃⲆΔᐃⲆⵠ: "img/day-flower5.png",
    ΔⵠΔΔᐃᐃᐃ: "img/day-flower6.png",
    ᐃⲆᐃΔΔᐃᐃ: "img/day-flower7.png",
    ⲆᐃΔᐃⲆⲆΔ: "img/day-flower8.png",
    ΔᐃᐃⵠΔΔⲆ: "img/day-flower9.png",
    ΔΔⲆⲆΔᐃⲆ: "img/day-herb16.png",
    ⲆⲆⵠⲆⵠⲆᐃ: "img/day-herb17.png",
    ΔⲆΔᐃΔⵠΔ: "img/day-herb18.png",
    ᐃᐃⵠΔΔᐃΔ: "img/day-herb19.png",
    ΔⵠⲆⲆᐃᐃΔ: "img/day-herb20.png",
    ᐃΔⲆⵠⲆᐃᐃ: "img/day-herb21.png",
    ᐃⲆⵠⲆᐃᐃⵠ: "img/night-herb0.png",
    ⲆᐃᐃΔΔᐃᐃ: "img/night-herb1.png",
    ΔⲆᐃⵠᐃⲆⲆ: "img/night-herb2.png",
    ⵠⲆᐃⲆᐃᐃΔ: "img/night-herb3.png",
    ᐃᐃΔⲆⵠⲆⲆ: "img/night-herb4.png",
    ⲆⲆΔⵠⲆⲆⵠ: "img/night-herb5.png",
    ⲆⵠᐃⵠⵠΔΔ: "img/night-herb6.png",
    ᐃᐃⵠⲆᐃΔⲆ: "img/night-herb7.png",
    ⵠⲆᐃⵠΔᐃⵠ: "img/night-herb8.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/night-herb9.png",
    ΔΔⲆⲆᐃΔᐃ: "img/night-herb10.png",
    ⲆΔᐃⵠⲆⵠⵠ: "img/night-herb11.png",
    ⵠⵠⵠⵠΔΔΔ: "img/night-herb12.png",
    ⲆΔⵠΔΔΔⵠ: "img/night-herb13.png",
    ΔΔⵠΔΔᐃⲆ: "img/night-herb14.png",
    ΔᐃⲆⵠΔⲆᐃ: "img/night-herb15.png",
    ΔⲆⲆⵠᐃⵠᐃ: "img/night-shell0.png",
    ΔΔⲆΔⲆᐃⲆ: "img/night-shell1.png",
    ᐃⲆᐃᐃΔⲆᐃ: "img/night-shell2.png",
    ΔΔⲆᐃⵠᐃᐃ: "img/night-leaf1.png",
    ᐃΔⵠⲆⵠᐃⵠ: "img/night-leaf2.png",
    ᐃⲆΔⵠᐃⲆᐃ: "img/night-leaf3.png",
    ⲆᐃⵠᐃⵠⲆᐃ: "img/night-leaf4.png",
    ᐃΔⲆΔⵠⵠᐃ: "img/night-leaf5.png",
    ⲆⵠᐃⵠᐃⵠⲆ: "img/night-leaf6.png",
    ᐃΔⲆⵠⵠⵠⵠ: "img/night-leaf7.png",
    ᐃⲆΔⲆⵠⲆⵠ: "img/night-leaf8.png",
    ⵠⵠΔⵠⵠⲆⵠ: "img/night-rock0.png",
    ᐃⲆᐃᐃΔᐃⵠ: "img/night-rock1.png",
    ΔⲆⵠⲆΔⲆⵠ: "img/night-rock2.png",
    ⵠᐃⲆᐃⵠⲆⵠ: "img/night-rock3.png",
    ΔΔΔⵠⲆⲆⵠ: "img/night-rock4.png",
    ⵠΔⵠⵠΔⵠⵠ: "img/night-rock5.png",
    ᐃᐃⵠΔΔⵠⲆ: "img/night-rock6.png",
    ᐃᐃΔⲆⵠᐃΔ: "img/night-rock7.png",
    ΔᐃΔⲆΔⲆⲆ: "img/night-rock8.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/night-rock9.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/night-rock10.png",
    ⵠᐃΔⲆⲆⵠΔ: "img/night-rock11.png",
    ΔᐃΔⲆΔΔΔ: "img/night-rock12.png",
    ΔⵠⲆᐃⲆⲆᐃ: "img/night-rock13.png",
    ⵠΔΔᐃΔⲆᐃ: "img/night-flower1.png",
    ΔᐃⲆΔⵠⲆⲆ: "img/night-flower2.png",
    ΔⲆⵠᐃⲆᐃΔ: "img/night-flower3.png",
    ᐃⵠᐃᐃΔⵠᐃ: "img/night-flower4.png",
    ΔᐃᐃΔⵠⲆⵠ: "img/night-flower5.png",
    ᐃⲆⵠΔⲆᐃΔ: "img/night-flower6.png",
    Δⵠⵠᐃⵠᐃⵠ: "img/night-flower7.png",
    ᐃⲆΔᐃΔΔⲆ: "img/night-flower8.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/night-flower9.png",
    ⵠᐃⲆᐃⵠᐃᐃ: "img/night-herb16.png",
    ΔⲆⲆᐃᐃΔΔ: "img/night-herb17.png",
    ᐃᐃⲆΔⵠᐃⵠ: "img/night-herb18.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/night-herb19.png",
    ⵠΔΔⵠᐃΔⲆ: "img/night-herb20.png",
    ΔᐃᐃⲆᐃᐃΔ: "img/night-herb21.png",
    ᐃⲆΔᐃΔᐃⵠ: "img/day-river000-010-000.png",
    ⲆⵠⲆⲆΔⵠⲆ: "img/day-river000-010-010.png",
    ⲆⲆⵠΔⵠⵠⲆ: "img/day-river000-011-000.png",
    ΔΔΔᐃΔΔᐃ: "img/day-river000-011-010.png",
    ΔⲆΔⵠᐃⵠΔ: "img/day-river000-011-011.png",
    ⲆⲆᐃⵠᐃΔᐃ: "img/day-river000-110-000.png",
    ᐃⲆⵠΔΔΔⲆ: "img/day-river000-110-010.png",
    ΔⵠΔᐃⲆⵠᐃ: "img/day-river000-110-110.png",
    Ⲇⵠⵠⵠᐃⵠᐃ: "img/day-river000-111-000.png",
    ᐃᐃⵠⲆΔᐃⵠ: "img/day-river000-111-010.png",
    ΔᐃⲆΔⵠⵠⵠ: "img/day-river000-111-011.png",
    ΔⲆⵠΔⵠΔⲆ: "img/day-river000-111-110.png",
    ΔⵠᐃⵠᐃⲆⲆ: "img/day-river000-111-111.png",
    ΔⵠᐃⲆᐃⵠᐃ: "img/day-river010-010-000.png",
    ΔΔⵠⲆᐃⵠΔ: "img/day-river010-010-010.png",
    ⲆⵠᐃⵠΔⲆⵠ: "img/day-river010-011-000.png",
    ⲆᐃΔᐃΔⵠΔ: "img/day-river010-011-010.png",
    ΔⲆΔⲆᐃᐃΔ: "img/day-river010-011-011.png",
    ΔⲆΔᐃⲆⵠⲆ: "img/day-river010-110-000.png",
    ⵠᐃᐃⵠᐃᐃΔ: "img/day-river010-110-010.png",
    ⵠⵠⵠⵠᐃᐃΔ: "img/day-river010-110-110.png",
    ΔⲆΔΔⵠⲆᐃ: "img/day-river010-111-000.png",
    ⵠᐃⲆᐃΔᐃⵠ: "img/day-river010-111-010.png",
    ⵠⲆⵠᐃⲆᐃⵠ: "img/day-river010-111-011.png",
    ⵠⵠⲆⵠⵠⵠⲆ: "img/day-river010-111-110.png",
    ⵠΔⵠⵠᐃΔᐃ: "img/day-river010-111-111.png",
    ᐃᐃᐃᐃⲆᐃⵠ: "img/day-river011-011-000.png",
    ΔᐃⲆᐃᐃᐃΔ: "img/day-river011-011-010.png",
    ΔᐃΔⲆᐃⵠⲆ: "img/day-river011-011-011.png",
    ᐃΔΔᐃⵠⲆⲆ: "img/day-river011-111-000.png",
    ΔⲆΔⲆᐃⲆⲆ: "img/day-river011-111-010.png",
    ⵠⵠᐃⵠⲆⲆⵠ: "img/day-river011-111-011.png",
    ᐃΔΔΔᐃⵠⵠ: "img/day-river011-111-110.png",
    ⵠⵠⵠⲆⲆᐃⵠ: "img/day-river011-111-111.png",
    ⵠⵠΔᐃⲆⵠΔ: "img/day-river110-110-000.png",
    ⵠΔⵠⵠⲆⲆⵠ: "img/day-river110-110-010.png",
    ᐃⵠΔΔᐃΔᐃ: "img/day-river110-110-110.png",
    ⲆᐃⲆᐃᐃⲆᐃ: "img/day-river110-111-000.png",
    ΔΔᐃΔⲆⲆᐃ: "img/day-river110-111-010.png",
    ⲆᐃᐃᐃⲆⲆⲆ: "img/day-river110-111-011.png",
    ⲆΔⵠΔⲆᐃΔ: "img/day-river110-111-110.png",
    ᐃᐃⵠᐃⵠᐃΔ: "img/day-river110-111-111.png",
    ⵠⲆᐃⵠⲆᐃΔ: "img/day-river111-111-011.png",
    ΔᐃⲆⲆⲆⲆⵠ: "img/day-river111-111-110.png",
    ⵠⲆᐃⵠⲆᐃΔ: "img/day-river111-111-011.png",
    ΔᐃᐃⵠⲆΔⵠ: "img/day-river111-111-000.png",
    ᐃⵠΔⲆⵠΔⲆ: "img/day-river111-111-111.png",
    ⵠᐃⲆᐃⲆᐃⲆ: "img/day-river111-111-010.png",
    ⲆⵠⲆⲆΔᐃᐃ: "img/night-river000-010-000.png",
    ⲆΔⲆΔΔΔΔ: "img/night-river000-010-010.png",
    ΔᐃⵠⲆⵠᐃⵠ: "img/night-river000-011-000.png",
    ⲆⲆⲆΔⲆⲆᐃ: "img/night-river000-011-010.png",
    ΔΔΔΔᐃⵠᐃ: "img/night-river000-011-011.png",
    ᐃⵠⲆⲆⲆΔⲆ: "img/night-river000-110-000.png",
    Δⵠⵠⵠⵠⵠⵠ: "img/night-river000-110-010.png",
    ⲆΔᐃΔⵠᐃⵠ: "img/night-river000-110-110.png",
    ΔⲆᐃΔΔⵠⲆ: "img/night-river000-111-000.png",
    ⲆΔⵠⲆᐃⵠⵠ: "img/night-river000-111-010.png",
    ΔⵠᐃⵠⵠΔⵠ: "img/night-river000-111-011.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/night-river000-111-110.png",
    ⲆⵠΔΔᐃᐃᐃ: "img/night-river000-111-111.png",
    ⵠⵠⵠᐃⲆᐃᐃ: "img/night-river010-010-000.png",
    ⵠᐃⲆΔⵠΔΔ: "img/night-river010-010-010.png",
    ᐃⲆΔⵠΔΔⵠ: "img/night-river010-011-000.png",
    ⲆᐃⵠⲆⲆᐃᐃ: "img/night-river010-011-010.png",
    ⲆᐃⵠⲆΔⵠⵠ: "img/night-river010-011-011.png",
    ᐃᐃⵠⲆⵠⲆᐃ: "img/night-river010-110-000.png",
    ᐃᐃⲆⲆⵠΔΔ: "img/night-river010-110-010.png",
    ᐃⵠⲆⵠᐃⵠⲆ: "img/night-river010-110-110.png",
    ⲆⵠΔⲆⲆΔⲆ: "img/night-river010-111-000.png",
    ⲆⲆᐃⲆΔⲆⲆ: "img/night-river010-111-010.png",
    ⵠΔⲆΔᐃᐃⵠ: "img/night-river010-111-011.png",
    ᐃⲆΔΔⵠΔⲆ: "img/night-river010-111-110.png",
    ⲆⵠΔᐃᐃⵠᐃ: "img/night-river010-111-111.png",
    ⲆᐃᐃᐃΔⲆⵠ: "img/night-river011-011-000.png",
    ⵠⵠⵠΔΔΔⲆ: "img/night-river011-011-010.png",
    ⲆⲆΔⲆΔⲆᐃ: "img/night-river011-011-011.png",
    ᐃⵠⲆⲆΔⲆᐃ: "img/night-river011-111-000.png",
    ᐃᐃᐃΔⲆᐃⵠ: "img/night-river011-111-010.png",
    ⲆⵠΔΔⲆΔΔ: "img/night-river011-111-011.png",
    ΔⲆΔⲆⵠᐃᐃ: "img/night-river011-111-110.png",
    ⲆᐃᐃᐃⲆᐃⲆ: "img/night-river011-111-111.png",
    ᐃᐃΔⵠⵠᐃᐃ: "img/night-river110-110-000.png",
    ᐃΔᐃⵠΔⵠᐃ: "img/night-river110-110-010.png",
    ⲆᐃΔᐃΔⲆΔ: "img/night-river110-110-110.png",
    ᐃⲆΔΔⲆΔⲆ: "img/night-river110-111-000.png",
    ⲆᐃΔᐃⲆⵠᐃ: "img/night-river110-111-010.png",
    ⵠᐃΔΔᐃᐃΔ: "img/night-river110-111-011.png",
    ᐃⵠⵠᐃⵠΔⵠ: "img/night-river110-111-110.png",
    ᐃⵠΔᐃⲆᐃⵠ: "img/night-river110-111-111.png",
    ᐃᐃⲆⲆⵠᐃⲆ: "img/night-river111-111-011.png",
    ᐃⵠᐃΔⵠⲆᐃ: "img/night-river111-111-110.png",
    ᐃᐃⲆⲆⵠᐃⲆ: "img/night-river111-111-011.png",
    ᐃⲆᐃⲆΔⲆᐃ: "img/night-river111-111-000.png",
    ⲆᐃᐃΔⵠⲆⲆ: "img/night-river111-111-111.png",
    ⵠᐃⵠⵠΔᐃᐃ: "img/night-river111-111-010.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/day-pebblecompo1.png",
    ⲆΔⲆⲆΔ: "img/day-pebblecompo2.png",
    ᐃΔᐃⲆⲆ: "img/day-pebblecompo3.png",
    ⲆⲆⵠᐃⵠⲆᐃ: "img/day-pebblecompo4.png",
    ⲆⵠΔⲆⲆ: "img/day-pebblecompo5.png",
    ⵠᐃᐃΔⲆ: "img/day-pebblecompo6.png",
    ⲆⲆᐃΔⵠ: "img/day-pebblecompo7.png",
    ᐃⲆᐃⵠⲆⵠⲆ: "img/day-pebblecompo8.png",
    ΔⲆⵠᐃⵠΔΔ: "img/day-pebblecompo9.png",
    ⲆⵠⵠΔⵠⵠⲆ: "img/day-pebblecompo10.png",
    ᐃⵠⵠⵠΔ: "img/day-pebblecompo11.png",
    ᐃⵠᐃΔⲆⵠⵠ: "img/day-pebblecompo12.png",
    ᐃᐃᐃⵠΔΔⲆ: "img/day-pebblecompo13.png",
    ⵠⲆⵠᐃΔᐃⵠ: "img/day-pebblecompo14.png",
    ᐃΔⵠΔⲆⲆᐃ: "img/day-pebblecompo15.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/day-pebblecompo16.png",
    ΔΔΔⵠᐃ: "img/day-pebblecompo17.png",
    ⲆⲆⵠⵠⲆᐃΔ: "img/day-pebblecompo18.png",
    ⲆᐃⲆⲆⲆΔᐃ: "img/day-pebblecompo19.png",
    ⲆΔⵠⲆⵠ: "img/day-pebblecompo20.png",
    ΔΔΔΔⲆ: "img/day-pebblecompo21.png",
    ΔⵠΔᐃⲆᐃⵠ: "img/day-pebblecompo22.png",
    ⲆⲆⲆⵠΔᐃⲆ: "img/day-pebblecompo23.png",
    ⵠⵠᐃᐃⵠⵠᐃ: "img/day-pebblecompo24.png",
    ⲆΔᐃΔⲆ: "img/day-pebblecompo25.png",
    ᐃΔⲆⵠΔ: "img/day-pebblecompo26.png",
    ⲆΔⵠⲆᐃⲆᐃ: "img/day-pebblecompo27.png",
    ᐃⲆΔⲆⲆ: "img/day-pebblecompo28.png",
    ⲆⵠᐃⲆᐃᐃΔ: "img/night-pebblecompo1.png",
    ⲆⲆⵠⲆΔ: "img/night-pebblecompo2.png",
    ΔⲆⲆⲆᐃ: "img/night-pebblecompo3.png",
    ⵠᐃⲆⵠΔΔΔ: "img/night-pebblecompo4.png",
    ⲆΔⵠΔΔ: "img/night-pebblecompo5.png",
    Ⲇᐃⵠᐃⵠ: "img/night-pebblecompo6.png",
    ΔΔᐃⵠⵠ: "img/night-pebblecompo7.png",
    ⲆΔᐃΔΔᐃⵠ: "img/night-pebblecompo8.png",
    ΔΔΔⵠΔⵠΔ: "img/night-pebblecompo9.png",
    ᐃⲆⲆⲆⵠΔΔ: "img/night-pebblecompo10.png",
    ΔᐃΔΔⵠ: "img/night-pebblecompo11.png",
    ΔⲆⵠᐃΔᐃⲆ: "img/night-pebblecompo12.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/night-pebblecompo13.png",
    ᐃΔᐃⵠΔΔⲆ: "img/night-pebblecompo14.png",
    ΔᐃⵠΔᐃΔⲆ: "img/night-pebblecompo15.png",
    ᐃⵠΔⵠⲆΔⵠ: "img/night-pebblecompo16.png",
    ⵠⵠᐃⵠΔ: "img/night-pebblecompo17.png",
    ⵠⲆΔⲆᐃⵠⲆ: "img/night-pebblecompo18.png",
    ⵠⵠⲆᐃⲆⲆΔ: "img/night-pebblecompo19.png",
    ⵠΔⵠΔⲆ: "img/night-pebblecompo20.png",
    ⲆⵠⲆⵠⵠ: "img/night-pebblecompo21.png",
    ΔᐃⲆΔᐃΔⲆ: "img/night-pebblecompo22.png",
    ΔΔᐃΔΔⵠΔ: "img/night-pebblecompo23.png",
    ⲆⵠⲆⵠⵠΔΔ: "img/night-pebblecompo24.png",
    ΔⵠⵠΔΔ: "img/night-pebblecompo25.png",
    ᐃⲆⵠⲆᐃ: "img/night-pebblecompo26.png",
    ΔⲆΔᐃᐃⵠⵠ: "img/night-pebblecompo27.png",
    ⲆⲆΔⵠᐃ: "img/night-pebblecompo28.png",
    ΔⲆΔᐃᐃΔΔ: "img/day-baby-mammoth.png",
    ΔᐃⵠⵠΔⵠΔ: "img/day-baby-mammoth-tamed.png",
    ᐃΔⲆΔᐃⲆⵠ: "img/day-baby-mammoth-angry.png",
    ΔΔⵠⵠᐃⵠⵠ: "img/night-baby-mammoth.png",
    ⲆᐃⲆⵠᐃΔᐃ: "img/night-baby-mammoth-tamed.png",
    ᐃᐃᐃᐃⲆΔᐃ: "img/night-baby-mammoth-angry.png",
    ᐃΔᐃΔⵠⵠΔ: "img/inv-mammoth-out.png",
    ⵠⲆΔⵠⵠⲆΔ: "img/inv-mammoth-in.png",
    ⲆⵠᐃΔᐃΔΔ: "img/inv-mammoth-click.png",
    ⵠᐃⵠⵠⲆⲆᐃ: "img/hurt-baby-mammoth.png",
    ᐃΔΔΔⵠΔᐃ: "img/baby-mammoth-step.png",
    ⵠⲆⲆΔⵠⲆΔ: "img/day-flower-hat.png",
    ⲆⲆⲆᐃⵠⲆΔ: "img/night-flower-hat.png",
    ⲆⵠΔⲆΔⵠⵠ: "img/inv-flower-hat-out.png",
    ΔΔⲆΔΔⲆΔ: "img/inv-flower-hat-in.png",
    ⵠⲆΔⲆⵠⲆΔ: "img/inv-flower-hat-click.png",
    ⵠⲆΔⵠΔᐃⲆ: "img/day-fur-hat.png",
    ᐃΔⲆⲆᐃᐃⵠ: "img/night-fur-hat.png",
    ᐃᐃⵠⵠΔᐃΔ: "img/inv-fur-hat-out.png",
    ⵠⵠΔⵠΔᐃⵠ: "img/inv-fur-hat-in.png",
    ΔⵠΔΔⲆⵠⲆ: "img/inv-fur-hat-click.png",
    ⲆⵠⲆΔᐃᐃΔ: "img/day-mammoth.png",
    Δᐃᐃᐃᐃᐃᐃ: "img/night-mammoth.png",
    ⲆΔᐃᐃΔⲆΔ: "img/hurt-mammoth.png",
    ⵠᐃΔΔⲆⵠⵠ: "img/inv-mammoth-fur-out.png",
    ⲆᐃⲆΔᐃⵠⵠ: "img/inv-mammoth-fur-in.png",
    Δᐃⵠᐃᐃᐃⵠ: "img/inv-mammoth-fur-click.png",
    ⲆⵠΔᐃᐃᐃⲆ: "img/inv-wood-bow-out.png",
    ᐃⲆΔΔⵠⵠᐃ: "img/inv-wood-bow-in.png",
    ⲆᐃᐃⲆᐃⲆΔ: "img/inv-wood-bow-click.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/inv-wood-arrow-out.png",
    ᐃⵠⵠⲆⲆΔᐃ: "img/inv-wood-arrow-in.png",
    ΔΔᐃⵠⵠⲆᐃ: "img/inv-wood-arrow-click.png",
    ⵠⵠᐃΔⲆⲆⵠ: "img/day-wood-bow2.png",
    ⵠᐃΔⵠⵠᐃᐃ: "img/night-wood-bow2.png",
    ΔᐃⵠᐃⲆⵠⲆ: "img/day-wood-arrow.png",
    ΔⲆⵠᐃⲆΔⵠ: "img/night-wood-arrow.png",
    ΔᐃⵠⲆⲆⲆⵠ: "img/inv-stone-bow-out.png",
    ⲆᐃⲆⵠᐃΔⲆ: "img/inv-stone-bow-in.png",
    ΔᐃΔⲆⲆⲆΔ: "img/inv-stone-bow-click.png",
    ᐃᐃⲆΔΔΔⲆ: "img/inv-stone-arrow-out.png",
    ΔⲆᐃⲆᐃⲆᐃ: "img/inv-stone-arrow-in.png",
    ⲆᐃⲆⵠⲆⲆΔ: "img/inv-stone-arrow-click.png",
    ΔΔⲆΔᐃⵠᐃ: "img/day-stone-bow.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/night-stone-bow.png",
    ⲆᐃⲆᐃΔⲆΔ: "img/day-stone-arrow.png",
    ΔΔΔΔⲆΔⵠ: "img/night-stone-arrow.png",
    ΔᐃΔⵠⲆⲆⵠ: "img/inv-gold-bow-out.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/inv-gold-bow-in.png",
    ᐃⲆⵠⲆΔΔΔ: "img/inv-gold-bow-click.png",
    ΔⲆᐃⲆᐃⲆⲆ: "img/inv-gold-arrow-out.png",
    ΔⲆΔⲆⲆᐃᐃ: "img/inv-gold-arrow-in.png",
    ⲆⲆΔΔᐃⵠⲆ: "img/inv-gold-arrow-click.png",
    ⲆⲆⲆΔᐃⵠⵠ: "img/day-gold-bow.png",
    ΔΔΔⲆⲆΔⵠ: "img/night-gold-bow.png",
    ᐃΔⲆᐃΔᐃᐃ: "img/day-gold-arrow.png",
    ⲆΔⵠᐃΔᐃᐃ: "img/night-gold-arrow.png",
    ᐃΔⵠᐃΔⵠⵠ: "img/inv-diamond-bow-out.png",
    ⵠⲆᐃⲆⵠΔⵠ: "img/inv-diamond-bow-in.png",
    ΔⲆᐃᐃᐃΔⵠ: "img/inv-diamond-bow-click.png",
    ⲆⵠⲆᐃⵠᐃⲆ: "img/inv-diamond-arrow-out.png",
    ΔⲆⵠⵠⵠⲆᐃ: "img/inv-diamond-arrow-in.png",
    ⲆⲆⲆⲆᐃⵠⵠ: "img/inv-diamond-arrow-click.png",
    ᐃⲆᐃⲆᐃⵠⲆ: "img/day-diamond-bow.png",
    ⵠΔΔⲆⵠΔᐃ: "img/night-diamond-bow.png",
    ΔⵠΔⵠⵠΔⵠ: "img/day-diamond-arrow.png",
    ᐃⵠⲆᐃΔⵠᐃ: "img/night-diamond-arrow.png",
    ⵠᐃⵠΔⲆⵠⵠ: "img/inv-amethyst-bow-out.png",
    ⵠΔΔⵠⵠΔⵠ: "img/inv-amethyst-bow-in.png",
    ᐃᐃΔᐃⲆⲆⲆ: "img/inv-amethyst-bow-click.png",
    ΔᐃΔᐃᐃΔⵠ: "img/inv-amethyst-arrow-out.png",
    ᐃⲆᐃⲆⵠΔⲆ: "img/inv-amethyst-arrow-in.png",
    ΔΔⵠᐃΔⵠΔ: "img/inv-amethyst-arrow-click.png",
    ⵠᐃⲆⵠᐃᐃᐃ: "img/day-amethyst-bow.png",
    ⲆᐃⵠⵠᐃΔᐃ: "img/night-amethyst-bow.png",
    ⲆⲆⲆΔᐃΔⵠ: "img/day-amethyst-arrow.png",
    ⲆΔⲆⵠⵠᐃᐃ: "img/night-amethyst-arrow.png",
    ᐃⲆⲆΔΔΔᐃ: "img/inv-dragon-bow-out.png",
    ⲆⲆᐃⲆᐃⵠⵠ: "img/inv-dragon-bow-in.png",
    ΔᐃᐃᐃⵠΔⲆ: "img/inv-dragon-bow-click.png",
    ⵠⵠⲆΔΔⵠⵠ: "img/inv-dragon-arrow-out.png",
    ⵠⲆⲆᐃᐃⲆΔ: "img/inv-dragon-arrow-in.png",
    ⵠⵠΔⲆⵠⲆⵠ: "img/inv-dragon-arrow-click.png",
    ΔᐃᐃᐃⵠᐃⲆ: "img/day-dragon-bow.png",
    ΔᐃᐃΔⵠⲆΔ: "img/night-dragon-bow.png",
    ⲆⲆΔⲆΔⵠΔ: "img/day-dragon-arrow.png",
    ΔⵠⵠⲆΔΔᐃ: "img/night-dragon-arrow.png",
    ⵠΔⵠΔΔΔΔ: "img/inv-reidite-bow-out.png",
    ᐃⵠᐃⲆⵠΔⲆ: "img/inv-reidite-bow-in.png",
    ᐃᐃᐃⲆⲆΔⲆ: "img/inv-reidite-bow-click.png",
    ΔᐃⵠΔⲆⲆⵠ: "img/inv-reidite-arrow-out.png",
    ⲆⵠⵠⵠⵠⲆᐃ: "img/inv-reidite-arrow-in.png",
    ΔᐃⵠᐃⲆΔⵠ: "img/inv-reidite-arrow-click.png",
    ⲆᐃⵠᐃΔᐃⲆ: "img/day-reidite-bow.png",
    ⲆⲆⵠᐃᐃⲆⲆ: "img/night-reidite-bow.png",
    ᐃⵠⵠⵠΔⵠⵠ: "img/day-reidite-arrow.png",
    ⲆᐃΔΔᐃⵠⲆ: "img/night-reidite-arrow.png",
    Δᐃᐃⵠⵠⵠᐃ: "img/inv-wooden-axe-out.png",
    ⵠᐃⵠΔΔΔΔ: "img/inv-wooden-axe-in.png",
    ⵠΔΔⲆᐃΔᐃ: "img/inv-wooden-axe-click.png",
    ΔΔᐃΔⵠⵠΔ: "img/day-wooden-axe.png",
    ΔⲆⵠᐃΔⵠᐃ: "img/night-wooden-axe.png",
    ᐃⵠⵠΔⲆᐃΔ: "img/inv-stone-axe-out.png",
    ⵠᐃⵠⲆⲆⵠⵠ: "img/inv-stone-axe-in.png",
    ΔΔⵠⲆΔᐃⲆ: "img/inv-stone-axe-click.png",
    ⲆΔΔΔΔⵠⵠ: "img/day-stone-axe.png",
    ᐃΔΔᐃⲆⲆΔ: "img/night-stone-axe.png",
    ᐃⲆᐃⵠΔΔⲆ: "img/inv-golden-axe-out.png",
    ΔᐃᐃᐃΔⲆⵠ: "img/inv-golden-axe-in.png",
    ᐃⵠΔᐃⲆⵠⲆ: "img/inv-golden-axe-click.png",
    ΔⲆΔⵠᐃⲆΔ: "img/day-golden-axe.png",
    ⲆⵠⲆᐃΔᐃⲆ: "img/night-golden-axe.png",
    ⵠᐃⲆⵠΔᐃⲆ: "img/inv-diamond-axe-out.png",
    ⵠⵠⲆᐃΔΔⵠ: "img/inv-diamond-axe-in.png",
    ⲆⲆΔⲆⲆΔⵠ: "img/inv-diamond-axe-click.png",
    ⲆΔΔⵠⲆⲆΔ: "img/day-diamond-axe.png",
    ᐃⲆⲆᐃⵠⵠΔ: "img/night-diamond-axe.png",
    ⲆⲆⲆᐃΔᐃᐃ: "img/inv-amethyst-axe-out.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/inv-amethyst-axe-in.png",
    ΔⵠᐃⵠⲆᐃᐃ: "img/inv-amethyst-axe-click.png",
    ⲆᐃΔⲆⲆΔⲆ: "img/day-amethyst-axe.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/night-amethyst-axe.png",
    ᐃᐃΔΔⵠΔⲆ: "img/inv-reidite-axe-out.png",
    ⲆΔΔⵠⵠΔⲆ: "img/inv-reidite-axe-in.png",
    ⵠΔⲆⲆᐃⲆᐃ: "img/inv-reidite-axe-click.png",
    ⵠΔᐃⵠΔⵠⲆ: "img/day-reidite-axe.png",
    Δⵠᐃᐃⵠᐃᐃ: "img/night-reidite-axe.png",
    ΔⵠⲆΔⵠΔⵠ: "img/bandage-activated.png",
    ΔⵠⲆΔⵠⲆΔ: "img/auto-feed.png",
    ᐃΔᐃᐃᐃΔⲆ: "img/stop-regeneration.png",
    ⲆΔⲆⵠΔΔⵠ: "img/stop-regeneration2.png",
    ⲆⲆΔᐃᐃⵠᐃ: "img/day-wood-platform.png",
    ᐃⲆⲆⲆΔⲆΔ: "img/night-wood-platform.png",
    ΔΔⲆᐃⲆⵠᐃ: "img/inv-wood-platform-in.png",
    ⵠⲆⲆᐃⲆΔⲆ: "img/inv-wood-platform-out.png",
    ⲆⵠⲆΔΔΔΔ: "img/inv-wood-platform-click.png",
    ΔⲆⲆⲆΔᐃⵠ: "img/day-wood-shield.png",
    ΔⲆΔⵠⵠⲆⵠ: "img/night-wood-shield.png",
    ⵠⵠⲆⵠΔΔᐃ: "img/day-stone-shield.png",
    ᐃᐃΔⲆΔΔᐃ: "img/night-stone-shield.png",
    ⲆⵠⵠⵠᐃⲆⵠ: "img/day-gold-shield.png",
    ⲆⲆᐃⲆⵠⲆⵠ: "img/night-gold-shield.png",
    ΔΔⲆᐃΔⵠⵠ: "img/day-diamond-shield.png",
    ᐃᐃⲆⵠⵠᐃⲆ: "img/night-diamond-shield.png",
    ΔΔᐃᐃΔⲆΔ: "img/day-amethyst-shield.png",
    ᐃⲆⲆⲆⲆᐃⵠ: "img/night-amethyst-shield.png",
    ⲆᐃᐃᐃⲆⲆΔ: "img/day-reidite-shield.png",
    ᐃⵠΔⲆⵠᐃᐃ: "img/night-reidite-shield.png",
    ⲆⲆΔⵠΔⵠⲆ: "img/inv-wood-shield-in.png",
    ⵠᐃΔⵠΔΔⲆ: "img/inv-wood-shield-out.png",
    ⵠΔΔΔⵠⲆⵠ: "img/inv-wood-shield-click.png",
    ⲆΔⲆⵠΔᐃΔ: "img/inv-stone-shield-in.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/inv-stone-shield-out.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/inv-stone-shield-click.png",
    ᐃᐃⲆΔⲆΔᐃ: "img/inv-gold-shield-in.png",
    ᐃⲆΔᐃᐃⲆᐃ: "img/inv-gold-shield-out.png",
    ΔΔⵠᐃᐃⵠᐃ: "img/inv-gold-shield-click.png",
    ⵠⵠⵠⲆΔⲆⵠ: "img/inv-diamond-shield-in.png",
    ⵠⵠⲆΔΔⲆⵠ: "img/inv-diamond-shield-out.png",
    ΔⵠⵠΔⵠᐃΔ: "img/inv-diamond-shield-click.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/inv-amethyst-shield-in.png",
    ⲆΔᐃᐃⲆⵠⵠ: "img/inv-amethyst-shield-out.png",
    ⲆΔΔⲆⵠᐃⵠ: "img/inv-amethyst-shield-click.png",
    ⵠΔΔΔᐃⲆⵠ: "img/inv-reidite-shield-in.png",
    ⵠⵠᐃΔⲆΔΔΔⲆ: "img/inv-reidite-shield-out.png",
    ΔⵠⵠᐃⵠⲆⵠⲆⵠ: "img/inv-reidite-shield-click.png",
    ᐃᐃⲆΔⲆΔᐃⵠᐃ: "img/day-machete.png",
    ΔᐃⵠᐃΔⵠᐃⲆⵠ: "img/night-machete.png",
    ᐃΔΔⵠⲆⲆⵠΔⵠ: "img/inv-machete-in.png",
    ⵠⲆⲆᐃᐃⲆᐃΔΔ: "img/inv-machete-out.png",
    ᐃⵠⲆΔΔⵠᐃΔᐃ: "img/inv-machete-click.png"
  };
  ⲆⵠΔⵠⲆⵠⲆ = [{}];
  const ib = Yq;
  ⲆⵠΔⵠⲆⵠⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = Xa; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ⵠᐃⲆᐃΔⵠΔ = {};
  ⲆᐃⲆⲆΔⲆΔΔⵠ = {};
  for (var zt in Ⲇᐃ) {
    ⵠᐃⲆᐃΔⵠΔ[zt] = Ⲇᐃ[zt];
  }
  function tb(a, b) {
    const c = (1 + (15516 + a) * 22695477) % 4294967296;
    const d = (b | 60253) & ~(b & 60253);
    const e = mw(c, d, c, d);
    Uk(c, d);
    return ~(e & 32242) & 32242 | ~(e & 32242) & e;
  }
  ⵠᐃ = [];
  ΔΔΔ = {};
  ΔΔΔ.ⵠᐃⲆᐃΔ = Go;
  ΔΔΔ.ᐃⲆᐃΔ = 1;
  ΔΔΔ.ⵠΔΔⲆ = 2;
  ΔΔΔ.ΔᐃⲆⲆ = 3;
  ΔΔΔ.ᐃⲆΔⵠ = Yr;
  const nb = Zj;
  ΔΔΔ.ⲆΔⲆᐃ = 5;
  ΔΔΔ.ⲆⲆⵠΔ = 6;
  const ob = $s;
  const rb = uj;
  ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ = sg;
  ΔΔΔ.ΔᐃⲆⵠᐃ = ct;
  const ab = ys;
  ⵠᐃⵠᐃ = {};
  ᐃΔᐃᐃ = [];
  const sb = vh;
  ᐃΔᐃⵠΔᐃᐃ = function (a, b) {
    for (var c = 0; a.length > c; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -El;
  };
  const hb = qg;
  var lb = [];
  function Ht(a, b) {
    for (var c = dh; c < lb.length; c += b) {
      var d = lb[c];
      if (d[gj] === a) {
        vb(d[dt], d[1], d[Og], d[3]);
      }
    }
  }
  const ub = Vh;
  const bb = Hl;
  function vb(b, c, d, e) {
    var f = ᐃΔᐃᐃ[b];
    if (ml !== f) {
      for (var i = hk; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / uf.ⲆⵠᐃΔⵠ;
        var m = d * 193 / uf.ΔΔΔΔᐃ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ⵠᐃ[rs.ⵠΔⲆⲆΔ][i].drawImage(j, k - n / 2, m - o / ys, n, o);
        k = e * 600 / uf.ⲆⵠᐃΔⵠ;
        m = d * 600 / uf.ΔΔΔΔᐃ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][i].drawImage(j, k - n / Ci, m - o / 2, n, o);
      }
    }
  }
  function db(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var k = i / rb;
    var a = j / Og;
    var m = c * Rq;
    var h = c * 112;
    var l = c * 82;
    var g = h / uj;
    var n = l / 2;
    var b = Dl * c;
    e.width = i;
    e.height = j;
    f.globalAlpha = 1;
    f.translate(k, a);
    wb(f, -g, -n, h, l, m);
    yb(f, d, d, b);
    return e;
  }
  function cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    Tb(e, a * 26, a * 26, a * 9);
    yb(e, c[0]);
    Tb(e, a * 56, a * 36, a * 9);
    yb(e, c[og]);
    Tb(e, a * 40, a * 50, ya * a);
    yb(e, c[2]);
    e.globalAlpha = 1;
    Tb(e, a * 26, a * 26, a * fl);
    yb(e, c[0]);
    Tb(e, a * 56, a * 36, a * 5);
    yb(e, c[Ng]);
    Tb(e, a * 40, a * 50, a * 5);
    yb(e, c[2]);
    return d;
  }
  function mb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / Ir, -b.height / it);
    return c;
  }
  function pb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    Tb(e, a * 11, a * ug, a * 10);
    yb(e, c[Bs]);
    e.globalAlpha = 0.7;
    Tb(e, a * 11, a * 11, Wg * a);
    yb(e, c[0]);
    e.globalAlpha = 1;
    Tb(e, a * 11, a * 11, a * Kg);
    yb(e, c[Bs]);
    return d;
  }
  function Cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(vl, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * ch, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * Co, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    yb(e, c[ka]);
    e.translate(gj, -Ks * a);
    e.globalAlpha = vg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * J, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(xn * a, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    yb(e, c[1], c[2], Zj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    yb(e, c[it]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    yb(e, c[3], c[Yr], a * 4);
    return d;
  }
  function Tb(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, jg, Math.PI * dj);
  }
  function fb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, Et, Math.PI * Ls * e);
  }
  function zb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var h = b * bn;
    var a = e.measureText(c).width + h * 2;
    d.width = a;
    d.height = f;
    wb(e, 0, 0, a, f, b * Cg);
    e.globalAlpha = 0.5;
    yb(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = fj[gh];
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, h, f / 2);
    return d;
  }
  function yb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function wb(a, b, c, d, e, f) {
    if (d < f * Og) {
      f = d / 2;
    }
    if (ab * f > e) {
      f = e / 2;
    }
    if (lt > f) {
      f = jg;
    }
    a.beginPath();
    a.moveTo(b + f, c);
    a.arcTo(b + d, c, b + d, c + e, f);
    a.arcTo(b + d, c + e, b, c + e, f);
    a.arcTo(b, c + e, b, c, f);
    a.arcTo(b, c, b + d, c, f);
    a.closePath();
  }
  function Pb(b, c, d, e) {
    var f = ys * Math.PI / c;
    b.beginPath();
    var g = [{
      x: d,
      y: ks
    }];
    var i = [];
    for (var a = 1; a < c; a++) {
      g.push({
        x: Math.sin(a * f) * d,
        y: Math.cos(a * f) * d
      });
      var j = g.length;
      i.push(ⵠⲆᐃⲆ.ⵠⵠΔⲆⵠᐃΔ(g[j - 2], g[j - $r]));
    }
    i.push(ⵠⲆᐃⲆ.ⵠⵠΔⲆⵠᐃΔ(g[g.length - 1], g[Bs]));
    var k = i[i.length - $q];
    b.moveTo(k.x, k.y);
    for (a = 0; a < c; a++) {
      b.arcTo(g[a].x, g[a].y, i[a].x, i[a].y, e);
    }
    b.closePath();
  }
  ΔᐃⲆⵠⲆΔᐃΔΔ = function () {
    for (var b = hk; b < 2; b++) {
      ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].clearRect(0, 0, 193, 193);
      ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].drawImage(ᐃΔᐃᐃ.MAP[b], Xa, lt, 193, 193);
      ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].clearRect(fs, 0, 600, 600);
      ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].drawImage(ᐃΔᐃᐃ.MAP[b], Yl, 0, 600, 600);
      for (var c = uf.ⵠⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
        var d = uf.ⵠⵠⵠⲆⲆ[c];
        var f = d.x1 * 193 / (uf.ⲆⵠᐃΔⵠ * 100);
        var j = d.y1 * 193 / (uf.ΔΔΔΔᐃ * 100);
        var k = d.w * 193 / (Zs * uf.ⲆⵠᐃΔⵠ);
        var m = d.ᐃᐃⲆ * 193 / (uf.ΔΔΔΔᐃ * Zs);
        var p = d.x1 * 600 / (uf.ⲆⵠᐃΔⵠ * Is);
        var q = d.y1 * 600 / (uf.ΔΔΔΔᐃ * 100);
        var u = d.w * 600 / (uf.ⲆⵠᐃΔⵠ * 100);
        var v = d.ᐃᐃⲆ * 600 / (uf.ΔΔΔΔᐃ * 100);
        if (uf.ᐃᐃΔⲆⵠ === d.ⵠⲆⵠ) {
          ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].drawImage(ᐃΔᐃᐃ.FOREST[b], f, j, k, m);
          ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].drawImage(ᐃΔᐃᐃ.FOREST[b], p, q, u, v);
        }
        if (uf.ⲆⲆⵠᐃΔⲆⵠ === d.ⵠⲆⵠ) {
          ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].drawImage(ᐃΔᐃᐃ.WINTER[b], f, j, k, m);
          ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].drawImage(ᐃΔᐃᐃ.WINTER[b], p, q, u, v);
        }
        if (uf.ΔΔᐃⲆΔⲆᐃ === d.ⵠⲆⵠ) {
          ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].drawImage(ᐃΔᐃᐃ.LAVA[b], f, j, k, m);
          ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].drawImage(ᐃΔᐃᐃ.LAVA[b], p, q, u, v);
        }
        if (uf.ⵠⲆᐃⲆΔᐃⵠ === d.ⵠⲆⵠ) {
          ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].drawImage(ᐃΔᐃᐃ.CAVE[b], f, j, k, m);
          ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].drawImage(ᐃΔᐃᐃ.CAVE[b], p, q, u, v);
        }
        if (uf.ᐃⲆᐃⵠΔᐃⲆ === d.ⵠⲆⵠ) {
          ⵠᐃ[rs.ⵠΔⲆⲆΔ][b].drawImage(ᐃΔᐃᐃ.DESERT[b], f, j, k, m);
          ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b].drawImage(ᐃΔᐃᐃ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ᐃⲆⲆⲆⲆⵠᐃᐃⲆ = function () {
    ⵠᐃⵠᐃ = {
      ᐃΔⵠⲆⲆ: [{
        id: 0,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠᐃⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆⵠΔⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⵠΔΔⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃᐃᐃⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔⵠⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⲆⵠⲆΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔᐃⵠⲆᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⲆᐃᐃⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: it,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆⵠⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔⵠⵠᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆΔΔⲆᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠΔΔⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[E],
        name: "Sad"
      }, {
        id: Il,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔΔᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆΔΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃΔᐃΔⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃΔΔⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔᐃᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⵠⵠⲆⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃΔⵠⲆᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⵠᐃⲆᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆⵠΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃⵠΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃΔⲆΔᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠⲆΔⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[lq],
        name: "Suspicious"
      }, {
        id: 5,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃΔΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆⵠΔⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⵠΔⲆⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆΔΔⵠᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: Vs,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃᐃⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔⲆⲆᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⲆᐃΔⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⵠᐃⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[_s],
        name: "In Trouble"
      }, {
        id: Tk,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⲆᐃΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆⵠⵠᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔᐃⲆΔⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠΔⵠᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: bn,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔⵠⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⲆΔⲆⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃⲆⵠᐃⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠᐃⲆᐃⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠⵠⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃΔΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔⲆᐃᐃⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⲆⵠᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[E],
        name: "Happy 2"
      }, {
        id: 11,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠΔⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃᐃⵠΔᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⲆⵠⲆΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃⲆΔΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔᐃᐃⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⵠⵠⲆⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⲆΔᐃᐃⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔⲆᐃⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[vh],
        name: "Happy 3"
      }, {
        id: _h,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠᐃⲆⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔΔⲆⲆᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⲆΔⲆᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔᐃⲆⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: hb,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃΔΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⲆΔΔᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆΔⲆΔⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔᐃⲆⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⵠΔⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔΔⲆⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⲆⵠᐃⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠᐃⲆⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[Ka],
        name: "Bored 2"
      }, {
        id: 16,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆᐃⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⲆⲆⲆⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⲆᐃⲆⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃᐃⲆΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[vh],
        name: "Happy 4"
      }, {
        id: Cn,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆΔⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⲆᐃΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⲆⲆΔⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠᐃᐃΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[lq],
        name: "Scar 2"
      }, {
        id: Fa,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⵠΔⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔᐃΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔⲆᐃΔⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃΔⵠⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃᐃᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⵠᐃⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔᐃΔᐃⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆⲆᐃΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[at],
        name: "Somnambule"
      }, {
        id: 24,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆⵠⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃⵠⵠΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠᐃⵠᐃᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⲆⵠᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠⲆⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠⲆⲆⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠⵠⵠⲆΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔΔᐃᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⲆⲆΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔΔᐃΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆⵠΔΔΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆΔΔⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆᐃΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠᐃⲆᐃⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔⵠⲆΔⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠⲆⲆΔⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔΔᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠΔᐃⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃᐃᐃⵠᐃⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠΔΔⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔⲆⲆⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠΔᐃⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⵠΔᐃΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃΔᐃⵠⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: ph,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔⲆⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠᐃⲆⲆⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔΔⲆΔⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⲆΔⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[Ka],
        name: "Vampire"
      }, {
        id: 21,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆᐃⵠᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔᐃᐃⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠᐃⲆᐃΔⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⲆⲆⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[lq],
        name: "Zombie"
      }, {
        id: 22,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔⲆⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔⲆⲆΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⵠΔⲆΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔⵠᐃⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃⵠⵠΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠᐃⲆΔⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠΔⵠⵠᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠᐃⲆᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠᐃΔⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆᐃᐃᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠΔᐃⵠᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠᐃⵠΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃⵠᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃⵠΔΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆΔⲆⲆᐃⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔⵠᐃⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔᐃᐃᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃΔⵠⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠⲆⵠΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠΔⵠⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆⲆⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠⵠⵠⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⵠⲆΔᐃⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⵠⲆᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[Ka],
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠΔⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⲆⵠⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃⲆⵠⲆΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠⵠⵠⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[Wg],
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃΔᐃⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠΔⲆΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆΔᐃΔⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆᐃⵠΔⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔΔⲆⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠⲆᐃΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃⵠⲆᐃᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔΔΔⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔⵠᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⲆⲆⵠΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⵠᐃⵠᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⲆⵠΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆⲆᐃⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃⵠⵠⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆᐃⲆⲆᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔᐃⲆᐃᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔⲆΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆΔᐃΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⲆΔⲆᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔΔᐃᐃᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⲆⵠΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⲆᐃⵠΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔΔⲆⵠⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃⲆᐃⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃΔⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃᐃᐃΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⲆⲆⵠΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⲆᐃΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[sb],
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⵠⵠΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔΔⲆΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⲆⲆⵠΔΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆᐃⲆᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[vh],
        name: "Frankenstein"
      }, {
        id: 138,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠᐃⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⲆⵠΔⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⲆⲆⵠⵠⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆᐃΔΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃΔⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔΔΔΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠⲆΔⵠⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔᐃΔΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⵠⲆⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃⲆⵠⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⲆΔΔⲆΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆᐃⵠⵠⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆⲆⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆᐃⲆΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠΔᐃⲆⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔᐃⵠⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃⵠᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆᐃⲆⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃΔⲆΔⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆᐃΔᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[lo],
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃⵠΔⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃᐃⲆⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⵠΔᐃΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆⲆⲆᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔⲆⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠⵠᐃⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔⵠΔΔⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆⲆᐃⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⵠⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔΔΔᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠᐃⵠᐃΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆⵠᐃᐃᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[lo],
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠⵠᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆΔⲆⵠᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔⵠΔⲆⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔᐃⲆⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆΔΔⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔΔⲆΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠᐃⵠᐃΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆΔΔⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[at],
        name: "Old Mr Present"
      }, {
        id: 153,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆΔᐃⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔᐃΔᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠΔⲆⵠⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔⵠⵠⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆΔᐃⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠᐃⲆΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃⲆⲆⵠΔⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⵠⲆⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[_s],
        name: "Mr Angel"
      }, {
        id: 155,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⵠΔⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔᐃᐃⲆⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔΔⲆΔⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃⲆᐃⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔΔᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⵠⵠΔΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⲆΔᐃⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆΔᐃⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆΔΔᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⵠᐃΔᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⵠΔᐃⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃΔΔᐃⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃⵠΔⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⲆⵠᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠΔⲆΔᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆᐃΔΔⲆᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠᐃΔⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃⲆᐃⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⲆⵠⲆⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⲆⲆᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆⲆⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⵠᐃⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃᐃΔΔΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆᐃⵠⲆⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆⵠᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔΔᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠᐃᐃᐃⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠΔΔⲆⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔΔⵠⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆⲆΔΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆᐃΔᐃΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠⵠΔⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⵠᐃⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔΔᐃⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃΔⵠᐃⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃᐃᐃⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[Tl],
        name: "Lollipop 2"
      }, {
        id: 31,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⵠΔΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⲆⲆⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⲆᐃᐃᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆᐃΔᐃΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[Zq],
        name: "Lollipop 3"
      }, {
        id: 32,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠᐃⲆⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃᐃⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⲆᐃⲆⲆⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆᐃⵠⲆⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[E],
        name: "Lollipop 4"
      }, {
        id: 33,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆΔⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆΔⲆᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠᐃⲆⵠᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃᐃⵠⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆᐃᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠΔΔΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃⲆᐃⲆᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⲆᐃⲆⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠⲆᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃΔⵠΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⲆⵠⵠᐃⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔⲆᐃΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆⲆᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆⲆᐃᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⲆⲆᐃᐃᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃⲆⲆⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆΔΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠᐃΔⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃⲆΔⲆⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⵠᐃΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔΔⵠᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆΔⵠⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃⲆⲆΔΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔⵠᐃᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[qh],
        name: "Mr. Bread"
      }, {
        id: 74,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃᐃᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔΔⲆΔᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔⵠᐃᐃⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠᐃⲆΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃᐃⲆⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⲆⵠⵠᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠΔⲆⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠⵠⵠⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⲆⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃⲆⲆⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⵠⵠᐃⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃᐃᐃΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[Ka],
        name: "Red Berry"
      }, {
        id: 61,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃᐃⲆⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠⵠΔⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔⵠΔᐃⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠⵠⲆΔᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔᐃⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠⵠΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔᐃⲆᐃᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃΔⵠⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃⲆΔᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃΔⵠᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠᐃⲆᐃΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔᐃΔⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃΔΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⵠⵠᐃⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔⵠⲆⵠᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃᐃᐃⲆⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆΔΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆΔᐃᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠⲆⵠᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃΔⵠᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⲆΔⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃⵠⵠⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃⲆᐃⲆᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⲆΔΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃΔᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆΔᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔᐃⵠᐃΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⵠΔΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⵠᐃᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔΔⵠΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆΔⲆⵠᐃⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠⲆᐃⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆᐃΔᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆⲆᐃⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⵠΔᐃⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃΔΔⵠⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃⵠⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃⲆΔⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⵠⲆΔᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠᐃⵠΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔᐃᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⵠΔᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⲆΔᐃⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃΔⵠΔⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔⲆⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔⵠᐃΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⲆⵠⲆⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔⵠⲆⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆᐃⵠᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔΔΔⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆᐃⵠⲆⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆⵠᐃᐃⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⲆᐃⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠΔΔΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔᐃᐃᐃᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆΔⲆᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆΔⵠΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠᐃⲆᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃⲆΔⵠΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆⲆᐃΔⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⵠᐃΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⵠΔⵠⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃᐃⲆΔΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆⵠⵠⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃᐃⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⲆᐃⲆⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⲆΔᐃᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆΔᐃᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠᐃΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔⵠΔᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃⲆⲆⲆᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⵠᐃᐃΔΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆᐃᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆΔΔⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔΔᐃⲆⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⲆᐃⵠⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[sb],
        name: "Bottle Protection"
      }, {
        id: 162,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆⲆⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠΔⲆⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⵠⵠΔⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆᐃⵠⲆⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⵠⲆΔⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆⲆΔᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃⵠⲆⵠⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠᐃⵠⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆⲆⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⵠⵠⵠⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃΔⲆᐃⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⲆᐃⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⵠⵠΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃⵠᐃΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠⵠΔΔⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆⲆΔⵠⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠᐃᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⵠᐃⲆⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆⵠⲆⲆⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔΔᐃᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠΔᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆⵠᐃⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆΔⵠΔⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⲆⵠⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠᐃⵠⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⲆΔᐃⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⵠⵠᐃΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆⲆⵠᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠⲆᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃΔΔᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⲆⲆⵠⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃⲆⲆᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔᐃⲆᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆⵠⲆⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠⵠⵠⵠᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔᐃⵠⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃΔᐃᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠΔᐃⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆⲆᐃⲆⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⵠᐃⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⵠΔⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⲆΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃΔᐃᐃⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⵠⵠΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃΔΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠⲆⵠΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆᐃᐃᐃᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠᐃⲆΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⲆⵠⵠⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆΔⲆⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⲆⲆᐃΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠᐃⲆΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔᐃⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔᐃⵠΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔΔⲆⵠᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠΔⵠⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⵠΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔⲆΔᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⵠᐃⲆΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⵠⵠⲆΔⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔⵠⵠΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⲆᐃᐃⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆⲆΔᐃΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔᐃⵠⲆⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆᐃⲆΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⵠⵠⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆᐃⲆΔⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⲆⵠⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⲆⲆᐃⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃᐃⲆΔⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠΔΔᐃⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠᐃΔΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[Tl],
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆⲆⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠᐃⲆΔΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔᐃᐃⲆⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆΔΔⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔⲆΔⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔⲆⲆⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃΔⵠΔᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⲆΔΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔᐃⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⲆⲆΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔΔⲆᐃⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔⲆᐃΔᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆᐃᐃᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠΔΔΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆΔᐃⵠΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠᐃΔᐃΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆᐃᐃᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔⲆⲆᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⲆᐃⲆᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠΔⲆⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[lq],
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃΔᐃⵠⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠᐃⲆⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃⵠᐃΔⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃⲆᐃᐃΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[lq],
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⵠⵠᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔΔⲆᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔΔⲆᐃⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃΔⲆΔⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔᐃᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆⵠⲆΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠΔᐃⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔⲆⲆⲆᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[qh],
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⲆⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔⵠⲆⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆΔᐃⵠᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠΔΔⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[sg],
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠⵠⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔᐃᐃⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⵠᐃⵠⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⲆΔᐃⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃⲆⲆⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃᐃΔΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃΔΔⵠⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃⲆⲆΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃΔⲆⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃⵠⵠΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠⲆⵠΔΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔᐃⲆΔᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔΔⲆᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠⲆⲆⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆⲆΔⵠΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔΔΔⲆⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[lo],
        name: "I saw you"
      }, {
        id: 146,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆⵠΔᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔⲆⵠⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⵠⲆΔΔΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔᐃⲆⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆΔᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔᐃⵠΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃΔⲆⲆᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔᐃᐃⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆⵠΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⲆᐃⲆⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠⵠⲆⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⵠⲆΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃⲆΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⵠΔᐃΔΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃⲆⲆᐃΔⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆΔⲆⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆΔⵠᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⲆΔΔᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⵠⲆⲆⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔᐃΔᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃᐃⲆᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠⵠΔⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃΔⲆⲆⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠⵠΔⵠⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆⵠᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠΔΔᐃⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔⲆⵠᐃΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆᐃⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⲆΔⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃⲆⲆᐃΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃΔⲆⵠΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆᐃⵠⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆⵠΔⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃⲆⵠⲆΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔⵠΔⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⵠⲆᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆⵠⵠⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆΔⲆΔⲆⲆⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔᐃⲆⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⵠΔᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠᐃΔΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠΔΔⲆⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠΔΔⵠⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[Do],
        name: "Be a Tree"
      }, {
        id: 38,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠᐃⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔΔⵠⵠΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⲆᐃᐃᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔΔⵠΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠΔᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔᐃᐃⵠⲆᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃᐃⵠΔⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆⲆⲆᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆᐃΔᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆᐃΔⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠᐃᐃⵠⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆⲆⲆⲆᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[qh],
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃᐃⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⲆⵠΔⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃⲆⵠᐃᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⵠΔⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[vh],
        name: "Golden Fish"
      }, {
        id: 64,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃᐃΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃᐃᐃΔΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔⲆᐃᐃᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃΔⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠⵠⲆⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠⲆΔᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔᐃΔΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⵠᐃΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃⲆᐃΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔᐃΔⲆΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃΔⲆᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[at],
        name: "Mr. Burger"
      }, {
        id: 66,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆⵠΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠᐃᐃᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔᐃⵠΔᐃᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⲆⵠΔⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆΔⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔᐃᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃⵠᐃᐃⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆΔᐃⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃΔᐃΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠᐃⵠΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠᐃΔⵠΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆΔᐃⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆᐃᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠⵠⵠⲆΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠΔᐃⲆⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⲆⲆⲆⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃΔⵠΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⲆⲆⲆⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔΔᐃⲆⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠᐃⲆΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠⵠⲆΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆΔᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⵠΔⲆΔᐃⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃᐃⵠΔⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃΔᐃⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠⵠⲆⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⵠᐃⵠⵠⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠᐃⲆⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⵠᐃᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⲆᐃⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⵠᐃⲆⲆⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠᐃⲆΔΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠⲆⲆΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃΔᐃᐃᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆⵠΔᐃΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⲆⵠⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⵠᐃΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⵠΔΔⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆΔΔᐃᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⲆⲆⲆᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[qh],
        name: "Momo"
      }, {
        id: 95,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃᐃⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔΔΔⵠᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆⵠᐃⲆⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔΔΔΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃΔᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃᐃⲆⲆⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆⲆᐃⵠᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆᐃᐃᐃΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔⵠᐃΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆᐃΔⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔᐃΔΔᐃΔΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠΔΔⲆⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔᐃᐃᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃΔⵠⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⲆⵠⲆⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⲆᐃⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠⵠᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠᐃⲆⲆⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃᐃΔⲆΔⵠΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆᐃⵠᐃⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠⲆΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔΔᐃᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃⵠⵠΔⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔⲆⵠⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⲆⵠᐃᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠᐃⵠⲆΔᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔⲆⲆⲆⲆᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔᐃⵠᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⲆΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃΔᐃⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠⲆΔⵠᐃΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃΔΔⲆᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃΔᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⵠᐃⲆⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⵠⵠΔⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠΔΔᐃΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠⵠⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠᐃΔⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆΔⲆΔᐃΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆᐃΔⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⲆⲆⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔᐃⲆⵠⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆⲆᐃᐃΔⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⲆⲆᐃⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔΔⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠΔΔⵠΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔΔᐃⲆⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔⵠⵠΔᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃᐃΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔΔᐃΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆᐃΔⲆΔⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆᐃⵠᐃᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠⵠΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃᐃⲆᐃΔ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃⲆΔⲆⵠΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃᐃΔᐃⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[qh],
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃⵠⵠΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔΔᐃᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔΔⲆΔⵠᐃⲆ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⵠⲆⵠⵠⵠΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔᐃⲆⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⵠⵠᐃΔⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃᐃⲆⲆⵠⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ᐃⵠⵠⲆⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆⲆⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆΔⵠᐃⲆ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆⲆⲆⵠᐃⵠᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔⵠΔⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃΔᐃΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔⲆΔᐃⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠΔⵠⲆᐃⲆⵠ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔΔᐃⲆᐃΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃᐃⵠᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠΔⵠΔⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ΔⵠⵠᐃⲆⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆⵠⵠᐃᐃⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⲆΔⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⲆⲆⲆⵠᐃ,
        ᐃΔᐃΔ: Ⲇᐃ.ⵠᐃⵠᐃⲆⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃᐃⵠΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆⲆΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⲆⵠⵠⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ᐃΔΔⵠⵠⲆΔ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ΔᐃΔΔⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔⲆΔⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃⵠⲆⵠ,
        ᐃΔᐃΔ: Ⲇᐃ.ⲆᐃᐃΔΔΔᐃ,
        ⲆⵠⵠⲆ: Ⲇᐃ.ⲆΔΔΔⲆⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ,
        ⲆᐃⲆ: "OmarJr13",
        name: "Blob Skin"
      }],
      ⵠⵠᐃΔ: [{
        id: hk,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃᐃᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠΔⲆⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[qh],
        name: "Bag 1"
      }, {
        id: 1,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔΔⲆⵠΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃᐃⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: Ls,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠᐃᐃⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⲆΔⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[E],
        name: "Bag 2"
      }, {
        id: 3,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃⲆⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃΔⵠⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[Ka],
        name: "Bag 3"
      }, {
        id: ll,
        ⲆⲆⲆ: Ⲇᐃ.Ⲇⵠᐃⵠⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⵠᐃᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: Yo,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⵠⲆⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆⵠⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: si,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠⲆⵠⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔᐃⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: Pa,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃᐃⲆⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔᐃΔᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃⵠᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃᐃⵠⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆΔΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⵠⵠⵠΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃᐃᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠᐃⲆⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: E,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠᐃᐃΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠⲆᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆᐃⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⲆᐃΔⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[at],
        name: "Easter Bag"
      }, {
        id: ya,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔΔᐃΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔΔΔᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: j,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⵠΔΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⲆᐃΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠᐃⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃΔᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔⲆΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⵠΔⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠᐃⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃᐃᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆᐃⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃⵠᐃᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆΔᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⵠⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆⲆⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔⲆΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⵠΔΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔᐃⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 13,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆᐃⵠᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔᐃᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃΔⲆᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆΔⲆⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔᐃⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔⲆⵠΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆᐃΔⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠⲆⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃᐃΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃⵠⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆⲆΔⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃᐃⵠⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃΔΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⵠΔΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⲆᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔᐃᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔⲆⲆⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃΔⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔⲆΔⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔΔⵠᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔⲆΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃΔᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⲆⲆⲆ: Ⲇᐃ.Ⲇᐃᐃⵠⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⲆⲆᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆᐃⵠΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃⲆⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: Nh,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃⲆᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠⵠⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: yh,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆᐃⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⲆⲆⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔᐃΔⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔⵠᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[Tk],
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠⵠⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⵠⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆΔⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆΔⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: zl,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃⲆΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆΔΔΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔᐃⵠᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠⵠΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⵠΔᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔΔᐃΔⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆᐃⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⵠⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃΔⲆⵠᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃⵠⲆⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃⲆΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠⵠᐃΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⲆⲆⲆ: Ⲇᐃ.Ⲇⵠⵠᐃⵠⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠΔⲆᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔⲆⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔⲆⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⵠΔΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠᐃⲆⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔΔᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⵠΔΔΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠᐃᐃⲆⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⲆᐃᐃᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔΔΔᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃⲆⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[nj],
        name: "Your Baby"
      }, {
        id: 33,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠᐃΔΔᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠⵠΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆΔᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⲆᐃⵠᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⵠΔᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⲆⲆᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠᐃᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⲆᐃⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔᐃⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔΔⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆⲆⲆⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠᐃⲆⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃΔⵠⲆⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⲆⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆⵠΔΔΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔⲆᐃⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆⲆΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⵠᐃⵠΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⲆᐃⲆⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔΔⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔΔⵠⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔΔΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃᐃⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠᐃΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠΔΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆⲆΔⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃⵠΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆΔⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆⲆΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⵠⲆⵠᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃᐃⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃⲆΔΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆⲆⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠᐃⲆⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃᐃⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ⵠᐃⲆⵠⲆ: [{
        id: hk,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃᐃᐃⲆⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔΔΔⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: $r,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠΔⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔΔΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃᐃⲆΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠⵠᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: wq,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔᐃⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃᐃᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: Ur,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔⵠⲆΔΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⲆⲆΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: as,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆΔⵠⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠᐃⵠΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: Vh,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃΔΔⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⵠΔⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃΔΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⲆΔΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: Nk,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⵠᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃⲆᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⵠⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠΔΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: jl,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔⲆⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔⵠⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: Dr,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆΔᐃⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠᐃᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠⲆᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆᐃΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: bg,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆᐃⲆⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆᐃᐃⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: $s,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠΔⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⵠⵠᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃⲆⲆⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔΔⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠⵠΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⲆⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠΔⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃⵠⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: Rl,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⵠᐃⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃᐃⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠᐃⵠᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⲆⲆⵠⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃᐃΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆᐃΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⲆᐃⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃᐃΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆΔⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃᐃᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠᐃᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⲆⵠᐃΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⲆⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠᐃⵠⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: 16,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆⵠⵠᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃⵠⵠⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⵠⵠΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆⵠⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[Zq],
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⵠᐃⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⲆⵠᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃΔᐃΔⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃⵠⲆⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃΔⲆΔᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃⲆⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃⲆⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⲆΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆⲆᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⲆⲆᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⵠⵠᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃᐃΔΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃᐃᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠᐃⵠⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔⵠⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔⵠⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⲆⲆᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃⵠᐃⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⲆⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⲆⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠⵠⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔⵠⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆⵠⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔᐃᐃΔⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔⲆΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃⵠⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔΔⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⲆⲆΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃⵠⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃΔⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆᐃⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔᐃⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆⲆΔⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔᐃΔⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆΔΔᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃᐃⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: lg,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔⵠⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆΔⲆᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆᐃᐃᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆΔᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔΔΔⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔΔᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔΔΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔΔᐃⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⵠⲆᐃΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃⲆⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Do],
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆᐃⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔⵠᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃⲆᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃᐃΔⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⵠⵠΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃΔⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆᐃΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃⲆⲆⵠⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[He],
        name: "Box of the Bear"
      }, {
        id: 54,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃᐃᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔΔⵠᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[qh],
        name: "Box of the Fox"
      }, {
        id: 55,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔΔΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃⵠΔⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[lo],
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⲆⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⲆⲆⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[lo],
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⵠΔᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃⲆⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Zq],
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔⲆΔⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⵠᐃⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[vh],
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠⲆⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠΔⲆᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃΔⲆⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃⲆⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Tl],
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃΔᐃᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⲆⵠⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Zq],
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔⲆⲆⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃⵠᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠⲆᐃⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔΔᐃᐃᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆⲆⲆⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔΔⵠⵠᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠᐃⲆᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔΔΔᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[vh],
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⵠΔⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔΔᐃⵠΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[sg],
        name: "Box of the Boar"
      }, {
        id: 67,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠⲆⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆᐃⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Do],
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⵠⵠᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔΔΔⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔⵠᐃⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠⲆⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Tl],
        name: "Box of the King Crab"
      }, {
        id: 70,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆⵠⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔᐃⲆⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔᐃΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆΔᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Dragon Box"
      }],
      ᐃᐃⵠⵠⲆ: [{
        id: 0,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠⲆⲆΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠⵠⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆᐃⵠⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔΔΔⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔΔᐃΔⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⲆⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Book 3"
      }, {
        id: _g,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆᐃΔᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⲆΔⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Book 4"
      }, {
        id: wk,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔⲆΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔΔᐃⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: fg,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔΔⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃⲆⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: Hl,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃᐃᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔⵠᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: Vh,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆⲆⲆⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⵠᐃᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: qh,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⵠⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃⵠⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⲆⵠᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔⲆⲆᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃᐃΔⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔΔΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 10,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃΔΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠⵠᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔᐃᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔΔⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: Ms,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆⲆⲆⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⵠΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: no,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔᐃᐃΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃᐃⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⲆⲆⲆ: Ⲇᐃ.Δᐃᐃⵠᐃⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⲆⵠᐃⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃⵠⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠΔΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⵠᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠᐃⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆΔᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔᐃΔᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃⲆⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆΔΔⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆⵠΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⲆⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: Zi,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⵠΔᐃⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃΔΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: Rj,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆΔⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃⵠⲆΔΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃᐃᐃⲆΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔᐃΔΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆᐃⲆᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔΔᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔΔⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃⲆΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠΔⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⲆⲆⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 13,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃⲆⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠΔⵠⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔⲆⵠᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠᐃΔΔⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠΔᐃΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⲆᐃᐃᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔΔᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃⵠⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⵠᐃΔΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃᐃⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⵠᐃⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆⲆΔⵠⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃⵠⵠⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⵠΔⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆⵠⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⲆⲆⵠᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔΔⲆⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃΔᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⲆΔΔⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠΔⵠΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⲆⲆᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔᐃⵠⲆⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⵠⵠⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃⵠᐃⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔⵠⲆⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃΔΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: Pa,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠⲆⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆᐃⲆⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔⵠⵠⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⵠᐃⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔΔᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃΔⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔᐃΔΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⵠᐃⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠⲆⵠⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠⵠⵠⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "aloner",
        name: "Mystery Book"
      }],
      ᐃⲆⲆᐃᐃ: [{
        id: 0,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⵠᐃⲆᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠᐃⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⲆΔᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃⲆⲆᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[Tl],
        name: "Pink Cheeks"
      }, {
        id: Oj,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃΔΔΔᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⵠᐃⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[lq],
        name: "Heart"
      }, {
        id: hj,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⵠᐃⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.Δᐃᐃⵠⵠⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[He],
        name: "Bandage 1"
      }, {
        id: wk,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔᐃⲆΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⵠᐃΔᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[E],
        name: "Flower 1"
      }, {
        id: zq,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠᐃⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⵠⵠΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[E],
        name: "Bow 1"
      }, {
        id: f,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠΔⲆᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃᐃᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: at,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆⲆⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆⲆⵠᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: fj[Do],
        name: "Flower 2"
      }, {
        id: Nl,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠⲆᐃᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⲆΔⵠᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔⲆⲆᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔⲆⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔΔΔᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠΔⵠΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃᐃΔⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.Δᐃⵠⵠⵠᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆⵠΔᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⵠᐃⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠᐃᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃᐃΔⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆᐃΔ,
        ⲆᐃⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: Lk,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆᐃᐃⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⵠⲆⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: cl,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆᐃΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⲆᐃΔⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠΔᐃᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠⲆⵠⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: bg,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆⲆᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠΔᐃΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃᐃΔᐃΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⵠΔᐃⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃΔⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃⵠᐃⵠΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[at],
        name: "Clown nose"
      }, {
        id: B,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃᐃⲆᐃᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⲆᐃⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[lo],
        name: "Eye Patch"
      }, {
        id: 30,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃⵠᐃΔΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃⲆᐃⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠⵠⵠΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⵠⵠΔⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔᐃᐃⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃᐃⵠⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[Wg],
        name: "Red Cloth"
      }, {
        id: 75,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔΔΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔΔᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[qh],
        name: "Blue Cloth"
      }, {
        id: 79,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃΔᐃⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃΔⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: fj[vh],
        name: "Transparent Mask"
      }, {
        id: 89,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⲆΔᐃⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⲆⲆⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆⲆΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆⵠΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⵠΔΔⲆ,
        ⲆᐃⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: rg,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⲆᐃᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⵠᐃΔⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: fj[qh],
        name: "Star Glasses"
      }, {
        id: 21,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠᐃΔⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆΔⲆⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⵠⲆΔⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃⲆΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃⲆᐃᐃΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⲆⲆⲆΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃΔⲆᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃᐃΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆΔᐃⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔⵠᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆΔⲆΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⲆⵠΔᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⲆᐃⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆⲆᐃⵠΔΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆΔⵠΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃᐃΔⲆᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⲆΔᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃΔΔⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆΔΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⵠⵠΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠⲆⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⲆᐃⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔᐃⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⵠⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⲆ,
        ⲆᐃⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: ya,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔᐃⵠΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠΔᐃᐃⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[_s],
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆΔΔⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⲆᐃⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: Qk,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃᐃᐃⲆᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃᐃᐃⲆᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: Nn,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠᐃᐃΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆᐃΔⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[Tk],
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆⲆᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔⲆⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠⵠⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃᐃⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠᐃⵠᐃⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔᐃⲆⵠᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆⵠΔⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⵠΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔⲆⵠⲆⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔⲆΔΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔⲆⲆⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⵠⲆⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃΔⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔΔΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃΔⵠΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠⲆΔᐃΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃΔᐃⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔᐃΔᐃⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[Tk],
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃΔⵠⲆⵠⵠ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔⲆᐃⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[at],
        name: "Spring Mask"
      }, {
        id: 72,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠᐃⲆⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔΔⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[He],
        name: "Pink Mask"
      }, {
        id: 73,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆΔⲆⵠⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠΔᐃΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃᐃⲆΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔΔᐃⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[_s],
        name: "Military Mask"
      }, {
        id: 77,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃΔᐃΔΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⵠᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔΔⲆᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ᐃΔⲆⵠⲆⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[sb],
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⲆᐃⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔⲆΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[He],
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃⵠⵠⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔΔⲆⵠⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[Do],
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⲆⲆⲆ: Ⲇᐃ.ΔᐃΔΔΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆⵠᐃⲆⵠⵠⲆ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[sb],
        name: "Make-up Mask"
      }, {
        id: 83,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⲆΔᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⵠⵠⲆΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: fj[sg],
        name: "Sad Mask"
      }, {
        id: 84,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃΔⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃᐃⲆⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⵠΔΔᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃᐃᐃΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ᐃⲆΔⵠ,
        ⲆᐃⲆ: "aloner",
        name: "Blood"
      }, {
        id: 27,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⲆⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆⲆⵠᐃᐃΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[lo],
        name: "Clown Face"
      }, {
        id: 20,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⲆⲆΔᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔᐃⲆΔᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔᐃⵠᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠᐃⵠⲆⲆⵠΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔΔⵠⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠⵠᐃⵠⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⲆⲆⲆ: Ⲇᐃ.ΔⲆⵠⲆⲆᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠⲆΔᐃⲆᐃⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[at],
        name: "Mauve's butt"
      }, {
        id: 41,
        ⲆⲆⲆ: Ⲇᐃ.ΔⵠⵠⵠᐃⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔΔᐃᐃΔΔΔ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆⲆᐃΔᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔΔⲆᐃⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠᐃᐃᐃΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆᐃΔΔⲆⵠᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆΔⲆᐃ,
        ⲆᐃⲆ: fj[sb],
        name: "Mask and Glasses"
      }, {
        id: 60,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆⵠΔΔⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⵠⲆᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Do],
        name: "Jason"
      }, {
        id: 26,
        ⲆⲆⲆ: Ⲇᐃ.ⲆᐃᐃΔΔⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ⲆΔⲆΔΔⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: tg,
        ⲆⲆⲆ: Ⲇᐃ.ᐃⲆΔⵠⵠⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ΔΔΔᐃⲆⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Ka],
        name: "Big Boss"
      }, {
        id: 35,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠⲆⲆΔⵠΔ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠᐃᐃᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[He],
        name: "Baby Kraken"
      }, {
        id: 63,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⵠᐃᐃⵠⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃΔⵠΔᐃⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃᐃⲆⲆⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆᐃΔⵠΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃΔΔⲆⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆΔⲆⵠΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: fj[Tk],
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⲆⲆⲆ: Ⲇᐃ.ⲆΔⵠⲆⵠΔⵠ,
        ⵠΔΔ: Ⲇᐃ.ΔᐃⲆΔᐃΔⵠ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⲆᐃΔⵠΔΔ,
        ⵠΔΔ: Ⲇᐃ.ⲆⲆⲆⵠᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ⲆⲆⵠΔ,
        ⲆᐃⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔᐃⵠⲆΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠΔΔⵠⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[Wg],
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆΔⵠⵠⲆⲆ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃⵠⲆⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[sg],
        name: "More than Level 10",
        level: Ks
      }, {
        id: 47,
        ⲆⲆⲆ: Ⲇᐃ.ΔΔⲆⵠΔⲆΔ,
        ⵠΔΔ: Ⲇᐃ.ᐃⲆᐃⲆⲆⲆΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[at],
        name: "More than Level 15",
        level: hl
      }, {
        id: 48,
        ⲆⲆⲆ: Ⲇᐃ.ⵠⵠΔⲆᐃᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⵠᐃⲆΔᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "More than Level 20",
        level: Us
      }, {
        id: 49,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⲆⲆΔᐃᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠᐃᐃⲆᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[Wg],
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆⵠΔᐃⵠ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⵠⲆΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[Do],
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⲆⲆⲆ: Ⲇᐃ.ᐃᐃⵠⵠᐃᐃⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠⵠⵠⲆⵠⲆᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔΔⲆᐃⵠⲆ,
        ⵠΔΔ: Ⲇᐃ.ⵠΔⲆⵠᐃᐃᐃ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⲆⲆⲆ: Ⲇᐃ.ⲆⲆⲆΔⵠⵠᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃᐃΔⵠⵠⲆⵠ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⲆⲆⲆ: Ⲇᐃ.ⵠΔⲆⲆΔⲆᐃ,
        ⵠΔΔ: Ⲇᐃ.ᐃⵠᐃⵠΔΔⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[He],
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⲆⲆⲆ: Ⲇᐃ.ⵠᐃⲆᐃΔΔᐃ,
        ⵠΔΔ: Ⲇᐃ.ΔⵠⵠΔᐃⲆⲆ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[vh],
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⲆⲆⲆ: Ⲇᐃ.ᐃΔⲆΔΔᐃΔ,
        ⵠΔΔ: Ⲇᐃ.ΔⲆᐃⲆᐃΔΔ,
        ΔᐃⲆ: ΔΔΔ.ΔᐃⲆⵠᐃ,
        ⲆᐃⲆ: fj[vh],
        name: "More than Level 60",
        level: 60
      }]
    };
    fw.ᐃᐃΔᐃᐃⲆⵠ = ᐃΔᐃⵠΔᐃᐃ(ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ, 21);
    fw.ⵠᐃⵠⵠⲆΔⲆ = ᐃΔᐃⵠΔᐃᐃ(ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ, Ns);
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ] = [];
    ⵠᐃ[rs.ⵠⵠᐃᐃᐃ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⵠⲆ] = [];
    ⵠᐃ[rs.ᐃᐃⵠⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⵠᐃΔ] = [];
    ⵠᐃ[rs.ᐃⲆⲆᐃᐃ] = [];
    for (var a = jg; a < ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ.length; a++) {
      ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][a] = [ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[a].ⲆⲆⲆ, ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[a].ⵠΔΔ];
      ⵠᐃ[rs.ⵠⵠᐃᐃᐃ][a] = [ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[a].ᐃΔᐃΔ, ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[a].ⲆⵠⵠⲆ];
    }
    for (a = ho; a < ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ.length; a++) {
      ⵠᐃ[rs.ᐃᐃⵠⵠⲆ][a] = [ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ[a].ⲆⲆⲆ, ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ[a].ⵠΔΔ];
    }
    for (a = ka; ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ.length > a; a++) {
      ⵠᐃ[rs.ⵠᐃⲆⵠⲆ][a] = [ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ[a].ⲆⲆⲆ, ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ[a].ⵠΔΔ];
    }
    for (a = gj; ⵠᐃⵠᐃ.ⵠⵠᐃΔ.length > a; a++) {
      ⵠᐃ[rs.ⵠⵠᐃΔ][a] = [ⵠᐃⵠᐃ.ⵠⵠᐃΔ[a].ⲆⲆⲆ, ⵠᐃⵠᐃ.ⵠⵠᐃΔ[a].ⵠΔΔ];
    }
    for (a = Et; ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ.length > a; a++) {
      ⵠᐃ[rs.ᐃⲆⲆᐃᐃ][a] = [ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ[a].ⲆⲆⲆ, ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ[a].ⵠΔΔ];
    }
  };
  const Ab = wq;
  const kb = sb;
  function xb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    wb(e, a * -8.5, a * -63, a * 17, a * 127, a * uq);
    e.restore();
    yb(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    wb(e, a * -8, a * -63, a * Wk, a * 126, a * Zk);
    e.restore();
    yb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    wb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    yb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    wb(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    yb(e, c[Qh], c[Ng], a * xg);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    wb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    yb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    yb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    yb(e, c[or]);
    return d;
  }
  const Jb = wr;
  function Mb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    wb(e, -ct * a, a * -70.5, a * 16, a * 141, El * a);
    e.restore();
    yb(e, c[hk]);
    e.save();
    e.translate(a * 69.5, a * 110);
    wb(e, a * -8.5, a * -71, a * ds, a * 143, a * 1);
    e.restore();
    yb(e, c[dh]);
    e.save();
    e.translate(a * 123.5, a * 181);
    wb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    yb(e, c[2], c[vg], a * pi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * hh, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    yb(e, c[dj], c[$r], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * Za);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    yb(e, c[Oj], c[1], a * 6);
    return d;
  }
  function Bb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    wb(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    yb(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    wb(e, a * -8.5, a * -70.5, a * 17, a * 141, ck * a);
    e.restore();
    yb(e, c[gj]);
    e.save();
    e.translate(a * 123.5, a * 68);
    wb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    yb(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    wb(e, a * -83, a * -24.5, a * 166, a * 49, a * Yr);
    e.restore();
    yb(e, c[2], c[$r], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    wb(e, a * -82.5, a * -24.5, a * 165, a * 49, Io * a);
    e.restore();
    yb(e, c[Qh], c[1], Vs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    yb(e, c[Zk]);
    return d;
  }
  const Db = uk;
  function Eb(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 191;
    e.height = a * 153;
    f.globalAlpha = 0.5;
    f.translate(0, vi * a);
    f.save();
    f.translate(a * 96.49996948242188, a * 66.79510498046875);
    f.rotate(0);
    wb(f, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    f.restore();
    yb(f, d[lt], d[Xa], a * 4);
    f.globalAlpha = vg;
    f.translate(Go, a * -Yq);
    f.save();
    f.translate(a * 96.49996948242188, a * 66.79510498046875);
    f.rotate(0);
    wb(f, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    f.restore();
    yb(f, d[1], d[2], a * Ol);
    f.translate(a * kg, hk);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 119, a * 28);
    f.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    f.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    f.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    f.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    f.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    f.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    f.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    f.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    f.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    f.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, ph * a, a * 108);
    f.bezierCurveTo(cg * a, a * 103, a * 20, a * 86, a * 23, a * 72);
    f.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    f.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, tt * a, a * 42);
    f.bezierCurveTo(a * 14, a * 39, a * ob, a * 39, a * Nj, a * 36);
    f.bezierCurveTo(pg * a, a * 33, a * 16, a * 33, a * 19, a * 30);
    f.bezierCurveTo(a * 18, a * 27, a * b, a * 27, a * 17, a * 25);
    f.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, h * a);
    f.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    f.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * di);
    f.bezierCurveTo(a * 74, a * Ul, a * 74, a * 16, a * 106, $h * a);
    f.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    f.closePath();
    yb(f, d[Oj], d[jo], a * 4);
    return e;
  }
  function Ib(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(Yl, ib * a);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    wb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    yb(e, c[dh], c[0], a * 4);
    e.globalAlpha = El;
    e.translate(Go, -sh * a);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    wb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    yb(e, c[1], c[2], a * Ol);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    yb(e, c[dj], c[Qq], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    yb(e, c[kl], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    yb(e, c[Ba], c[xg], a * Qa);
    Tb(e, a * 68, a * 111.29513549804688, a * 15);
    yb(e, c[Tk], c[bn], a * 4);
    Tb(e, a * 123, a * 111.29510498046875, yh * a);
    yb(e, c[7], c[8], a * 4);
    Tb(e, a * 63, a * 106, a * 5);
    yb(e, c[9]);
    Tb(e, a * 118, a * 106, zq * a);
    yb(e, c[9]);
    return d;
  }
  const Sb = jl;
  function Qb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    wb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    yb(d, b[0], b[gj], a * 4);
    d.translate(Og * a, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * tl, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(Ge * a, a * 65, a * 12, a * 54, Wk * a, a * 42);
    d.bezierCurveTo(a * Nh, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * Fs, a * 33, a * 16, a * 33, a * Oh, a * 30);
    d.bezierCurveTo(a * Ha, a * 27, a * Ha, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * Bg);
    d.bezierCurveTo(a * 74, a * Rj, a * 74, a * 16, a * 106, Oa * a);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    yb(d, b[hk], b[dt], a * mi);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    wb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    yb(d, b[ks], b[Xa], Qa * a);
    return c;
  }
  function _b(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 185;
    e.height = a * 240;
    f.globalAlpha = 0.5;
    f.translate(0, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    yb(f, c[Xa]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    yb(f, c[Yl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    yb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    yb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    yb(f, c[0]);
    f.globalAlpha = 1;
    f.translate(dh, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    yb(f, c[Ng], c[2], a * Ur);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, gh * a, a * 150, dl * a, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    yb(f, c[$q], c[ab], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    yb(f, c[1], c[2], a * Io);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    yb(f, c[1], c[2], a * Ol);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    yb(f, c[1], c[2], a * va);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 99);
    f.bezierCurveTo(a * 71, a * 68, a * 81, a * 68, a * 94, a * 67);
    f.bezierCurveTo(a * 105, a * 66, a * 119, a * 75, a * 123, a * 96);
    f.bezierCurveTo(a * 104, a * 91, a * 101, a * 94, a * 94, a * 97);
    f.bezierCurveTo(a * 76, a * 92, a * 73, a * 93, a * 60, a * 99);
    f.closePath();
    yb(f, c[3], c[cn], qa * a);
    if (d === 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 47, a * 149);
      f.bezierCurveTo(a * 43, a * 140, a * 48, a * 130, a * 59, a * 127);
      f.bezierCurveTo(a * 77, a * 126, a * 90, a * 131, a * 131, a * 127);
      f.bezierCurveTo(a * 143, a * 130, a * 144, a * 143, a * 132, a * 154);
      f.bezierCurveTo(a * 90, a * 152, a * 90, a * 152, a * 48, a * 150);
      f.closePath();
      yb(f, c[1]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 40, a * 139);
      f.bezierCurveTo(a * 48, a * 113, a * 76, a * 119, a * 91, a * 126);
      f.bezierCurveTo(a * 117, a * 113, a * 135, a * 117, a * 144, a * 134);
      f.bezierCurveTo(a * 144, a * 138, a * 144, a * 138, a * 144, a * 142);
      f.bezierCurveTo(a * 128, a * 124, a * 108, a * 124, a * 91, a * 136);
      f.bezierCurveTo(a * 59, a * 124, a * 50, a * 137, a * 42, a * 148);
      f.closePath();
      yb(f, c[Qq], c[Ls], a * 4);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 41, a * 139);
      f.bezierCurveTo(a * 53, a * 117, a * 69, a * 118, a * 92, a * 127);
      f.bezierCurveTo(a * 124, a * 111, a * 136, a * 121, a * 143, a * 136);
      f.bezierCurveTo(a * 142, a * 144, a * 142, a * 144, a * 141, a * 152);
      f.bezierCurveTo(a * 128, a * 131, a * 113, a * 138, a * 92, a * 145);
      f.bezierCurveTo(a * 57, a * 133, a * 57, a * 147, a * 44, a * 154);
      f.closePath();
      yb(f, c[_g], c[ys], a * 4);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 95);
    f.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    f.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, no * a);
    f.bezierCurveTo(a * 92, Jb * a, a * 83, a * 16, a * 78, a * 29);
    f.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    f.closePath();
    yb(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 86);
    f.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    f.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, la * a);
    f.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    f.closePath();
    yb(f, c[1], c[wq], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 117);
    f.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    f.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    f.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    f.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    f.closePath();
    yb(f, c[1], c[Oj], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 175);
    f.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    f.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    f.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    f.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    f.closePath();
    yb(f, c[og], c[Qq], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 169);
    f.bezierCurveTo(a * 42, a * 187, a * 50, a * 193, a * 59, a * 198);
    f.closePath();
    yb(f, Kk, c[Ts], Jb * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 136, a * 171);
    f.bezierCurveTo(a * 139, a * 186, a * 138, a * 191, a * 124, a * 199);
    f.closePath();
    yb(f, undefined, c[cn], a * 4);
    Tb(f, a * 63, a * 180, a * 15.231546211727817);
    yb(f, c[4]);
    Tb(f, a * 121, a * 181, a * 15.652475842498529);
    yb(f, c[Kg]);
    Tb(f, a * 58, a * 175, a * 5.656854249492381);
    yb(f, c[2]);
    Tb(f, a * 116, a * 175, a * 5.656854249492381);
    yb(f, c[2]);
    return e;
  }
  function Fb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var i = b * 40;
    e.width = g;
    e.height = i;
    var a = b * g / it;
    var j = i * b / 2;
    var k = b * rk;
    f.save();
    f.translate(a, j);
    f.globalAlpha = 1;
    Tb(f, dh, 0, k);
    yb(f, d[0]);
    k = b * Xk;
    a = rb * b;
    j = b * 1;
    f.translate(a, j);
    f.globalAlpha = 1;
    Tb(f, dh, 0, k);
    yb(f, d[El]);
    f.restore();
    return e;
  }
  const Rb = es;
  function jb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * dk;
    var j = c * 100;
    var k = i / 2;
    var a = j / Ir;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var l = m / Pn;
    var g = h / Ts;
    f.translate(k, a);
    for (var n = ka; n < 4; n++) {
      wb(f, -l, -g, m, h, c * uj);
      f.rotate(Math.PI / Yr);
      yb(f, d);
    }
    f.arc(0, ks, Qg * c, Et, Math.PI * Ir);
    yb(f, d);
    f.globalCompositeOperation = "destination-out";
    Tb(f, Bs, 0, Dl * c);
    f.fill();
    return e;
  }
  function Gb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    yb(d, b[Go]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    yb(d, b[Go]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    yb(d, b[fs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    yb(d, b[Go]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, Lr * a);
    d.bezierCurveTo(a * 92, a * Jb, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    yb(d, b[Bs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    yb(d, b[Go]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, hh * a, a * 92, a * 117);
    d.closePath();
    yb(d, b[dt]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    yb(d, b[0]);
    return c;
  }
  function Lb(a) {
    var b = document.createElement("canvas");
    var c = b.getContext("2d");
    var d = a * 200;
    var e = a * 200;
    b.width = d;
    b.height = e;
    var f = Gu(0.35, As, ["#0e3022", "#0b8052", "#077b49"]);
    c.drawImage(f, ok, 10);
    f = Hu(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 21, 20);
    f = Hu(0.9, ro, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 38, 28);
    f = Hu(0.9, Qo, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 15, 37);
    f = Hu(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 32, 45);
    return b;
  }
  function Wb(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var k = c * 32;
    var a = j / 2;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var h = Yo * c;
    var l = c * 28;
    var g = h / Sa;
    var n = l / 2;
    i.translate(c * 0, c * 0);
    i.translate(a, m);
    if (e == 1) {
      Tb(i, Bs, 0, c * Ys);
      yb(i, d[2], d[Og], wq * c);
      for (var b = gj; b < 4; b++) {
        wb(i, -g, -n, h, l, c * 2);
        i.rotate(Math.PI / 4);
        yb(i, d[pn], d[2], c * 4);
      }
    }
    Tb(i, 0, 0, c * 10);
    yb(i, d[0], d[1], c * 1.5);
    for (b = ka; b < Qa; b++) {
      wb(i, -g, -n, h, l, c * 2);
      i.rotate(Math.PI / jo);
      yb(i, d[0], d[$q], c * 1.5);
    }
    Tb(i, hk, dt, c * 10);
    yb(i, d[dt]);
    Tb(i, 0, Xa, Ol * c);
    yb(i, d[2], d[1], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    Tb(i, 0, 0, c * Fl);
    yb(i, d[vl], d[$q], c * 2);
    i.globalCompositeOperation = "source-over";
    Tb(i, ka, lt, c * 4);
    yb(i, undefined, d[Dj], c * 2);
    return f;
  }
  const Ob = lt;
  function Nb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var k = xg * c;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + k);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    yb(f, d[0]);
    f.translate(dt, -k);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    yb(f, d[Zk], d[2], 4);
    var a = c * 155;
    var m = c * 133;
    var h = c * ib;
    var l = c * 3;
    var g = a + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(a, m);
    f.globalAlpha = bq;
    Tb(f, 0, 0, h);
    yb(f, d[3]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = ck;
    Tb(f, 0, vl, l);
    yb(f, d[4]);
    f.restore();
    f.save();
    f.translate(a + c * 27, m);
    f.globalAlpha = 1;
    Tb(f, Et, lt, h);
    yb(f, d[Ab]);
    f.restore();
    f.save();
    f.translate(c * 27 + g, n);
    f.globalAlpha = 1;
    Tb(f, hk, Go, l);
    yb(f, d[4]);
    return e;
  }
  function qb(f, e, i) {
    var k = document.createElement("canvas");
    var n = k.getContext("2d");
    var o = (t = f * 125) / 2;
    var p = (u = f * 95) / Xj;
    var a = f * j;
    var q = f * bn;
    var h = f * 112;
    var l = f * 82;
    var g = h / 2;
    var r = l / 2;
    var b = f * 4;
    k.width = t;
    k.height = u;
    n.translate(o - f * 4, p + f * 4);
    n.globalAlpha = e ? 0.5 : 1;
    wb(n, -g, -r, h, l, a);
    yb(n, i[Go]);
    n.globalAlpha = 1;
    n.translate(0, -q);
    wb(n, -g, -r, h, l, a);
    yb(n, i[or], i[2], b);
    var t = f * 55;
    var u = f * 45;
    a = 5;
    n.translate(f * -40, f * -30);
    wb(n, hk, 0, t, u, a);
    yb(n, i[Ia]);
    var v = jb(f * 0.7, i[3]);
    n.drawImage(v, f * 45, f * -25);
    v = jb(f * 0.7, i[Ds]);
    n.drawImage(v, f * 45, Ln * f);
    v = jb(f * 1.2, i[Gt]);
    n.drawImage(v, f * 28, f * -30);
    t = Sj * f;
    u = f * 70;
    a = f * hg;
    n.translate(f * 78, f * -5);
    wb(n, Xa, 0, t, u, a);
    yb(n, i[oo]);
    t = f * 9;
    u = f * 50;
    a = f * 3;
    n.translate(-lg * f, f * Dh);
    n.rotate(Math.PI / fl);
    n.globalAlpha = 0.6;
    wb(n, Xa, 0, t, u, a);
    yb(n, i[5]);
    n.translate(f * -20, f * 29);
    n.rotate(Math.PI / O);
    n.globalAlpha = 0.6;
    n.beginPath();
    n.lineJoin = "round";
    n.moveTo(Ob, lt);
    n.lineTo(Ob, f * 30);
    n.lineTo(f * 30, f * 30);
    n.closePath();
    yb(n, null, i[5], f * Nl);
    return k;
  }
  const Hb = gj;
  function Ub(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, Yo * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    yb(d, b[0], b[0], a * va);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    yb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    yb(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    yb(d, b[ho], b[Ob], a * 2);
    d.globalAlpha = ck;
    d.translate(Go, a * -Gs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    yb(d, b[1], b[2], Qq * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    yb(d, b[Ss]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    yb(d, undefined, b[dj], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    yb(d, b[bh], b[nq], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    yb(d, b[bh], b[2], Qq * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    yb(d, b[wn]);
    Tb(d, a * 77, a * 107, a * jn);
    yb(d, b[2]);
    Tb(d, a * 110, a * 107, a * Jl);
    yb(d, b[pn]);
    Tb(d, a * 75, a * 105, a * 3);
    yb(d, b[4]);
    Tb(d, a * 108, a * 105, a * 3);
    yb(d, b[Dl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    yb(d, b[1]);
    return c;
  }
  function Yb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var h = b * 55;
    var a = b * kq;
    e.width = g;
    e.height = h;
    f.translate(b * -65, b * -55 + a);
    f.globalAlpha = bt;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    yb(f, d[0], d[Ng], Jh);
    f.globalAlpha = bq;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, Xl * b, b * 73);
    f.bezierCurveTo(b * Kh, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    yb(f, d[2], d[wn], 3);
    return e;
  }
  const Kb = yr;
  function Vb(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var m = c * 190;
    var a = k / Pn;
    var n = m / Pn;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / Og;
    var b = g / 2;
    var p = c * va;
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = bt;
    wb(j, -o, -b, l, g, h);
    yb(j, f[Bs], f[Th], p);
    j.translate(Hb, Yl);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    wb(j, -o, -b, l, g, h);
    yb(j, f[0], f[1], p);
    return i;
  }
  function Xb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Hl * a, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    yb(e, undefined, c[Yl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = ck;
    e.translate(a * -5, a * -Vn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    yb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    yb(e, pa, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(hg * a, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    yb(e, Eh, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    yb(e, c[gj]);
    e.globalAlpha = 1;
    e.translate(a * -wr, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    yb(e, c[at]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    yb(e, wl, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * Jb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    yb(e, Kk, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -Gj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    yb(e, c[Tl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    yb(e, undefined, c[6], a * Ur);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    yb(e, undefined, c[dh], Ik * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = El;
    e.translate(a * -5, -Xk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    yb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    yb(e, Eh, c[xg], jo * a);
    return d;
  }
  function Zb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var i = b * 205;
    var a = g / Pn;
    var j = i / kg;
    e.width = g;
    e.height = i;
    var h = b * 100;
    f.translate(a, j);
    f.globalAlpha = bh;
    Tb(f, gj, 0, h);
    yb(f, d[Bs]);
    return e;
  }
  function $b(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * Rh, a * 5);
    e.globalAlpha = b ? 0.5 : $r;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Pb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Vn * a, -Jb * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    Pb(e, lq, a * 42.15447781671598, ek * a);
    e.restore();
    yb(e, c[vg], c[nq], a * 4);
    e.globalAlpha = b ? 0.5 : kr;
    e.translate(a * ul, a * Rh);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Pb(e, 7, a * 30.463092423455635, a * ib);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -bb);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    Pb(e, 7, a * 30.463092423455635, Qg * a);
    e.restore();
    yb(e, c[Qq], c[Io], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Vn, Gj * a);
    Tb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    yb(e, c[0]);
    e.globalAlpha = Zk;
    e.translate(a * -5, a * -O);
    Tb(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    yb(e, c[5], c[pi], a * Ik);
    return d;
  }
  function It(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, wa * a);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    yb(e, c[0], c[Dj], a * hb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    yb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    yb(e, undefined, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    yb(e, c[Qq], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    yb(e, c[Go], c[kr], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, Dn * a, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    yb(e, c[2], c[kr], a * _i);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    yb(e, undefined, c[uq], a * D);
    Tb(e, a * 161, a * 201, fh * a);
    yb(e, c[Ba]);
    Tb(e, a * 216, a * 205, a * 8.06225774829855);
    yb(e, c[zq]);
    Tb(e, a * 216, a * 175, a * 6.708203932499369);
    yb(e, c[5]);
    Tb(e, a * 271, a * 191, a * 5.0990195135927845);
    yb(e, c[5]);
    Tb(e, a * 206, a * 180, a * 11.180339887498949);
    yb(e, c[5]);
    return d;
  }
  function Jt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var h = b * 55;
    e.width = g;
    e.height = h;
    f.translate(b * -30, b * -40);
    f.globalAlpha = Ws;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    yb(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    yb(f, d[og]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    yb(f, Zg, d[Dj], Ts);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    yb(f, d[2]);
    return e;
  }
  function Kt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    wb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * fs);
    e.restore();
    yb(e, b[0], b[1], pj * a);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    wb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    yb(e, b[2], b[$r], a * bg);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    wb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * Et);
    e.restore();
    yb(e, b[_g], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    wb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    yb(e, b[hk], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    wb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    yb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    wb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    yb(e, b[3], b[y], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    wb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    yb(e, b[3], b[uq], a * g);
    e.save();
    e.translate(a * 298.5, a * 210);
    wb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    yb(e, b[3], b[Zk], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    wb(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    yb(e, b[3], b[1], Fh * a);
    e.save();
    e.translate(a * 204, a * 121.5);
    wb(e, a * -92, a * -9.5, a * 184, a * 19, Sb * a);
    e.restore();
    yb(e, b[yr], b[3], cl * a);
    e.save();
    e.translate(a * 197, a * 299);
    wb(e, a * 85, a * -Oq, a * -170, a * 18, ib * a);
    e.restore();
    yb(e, b[3], b[3], a * sh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    yb(e, undefined, b[y], a * Xs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    yb(e, undefined, b[og], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    yb(e, undefined, b[El], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    yb(e, Ji, b[Ws], a * Hn);
    if (c == 0) {
      e.scale(Xj, Ts);
      e.translate(a * -at, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      yb(e, b[jo], b[4], a * fl);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      yb(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      yb(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      yb(e, b[4], b[4], hs * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      yb(e, undefined, b[jg], fh * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      yb(e, Sn, b[0], a * 20);
      Tb(e, a * 142, a * 221, a * 16.1245154965971);
      yb(e, b[lt]);
    }
    return d;
  }
  function Lt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var m = c * 190;
    var a = k / Ci;
    var n = m / 2;
    i.width = k;
    i.height = m;
    var h = Sb * c;
    var l = c * 35;
    var g = c * 150;
    var o = l / Sa;
    var b = g / Ir;
    var p = c * 4;
    j.translate(a - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    wb(j, -o, -b, l, g, h);
    yb(j, f[ho], f[1], p);
    j.translate(gj, 0);
    j.rotate(Math.PI / wq);
    j.globalAlpha = vg;
    wb(j, -o, -b, l, g, h);
    yb(j, f[0], f[or], p);
    j.translate(Yl, 5);
    wb(j, -o / 2, -b / kg, l / Xj, g / Kl, h - 2);
    yb(j, f[1]);
    return i;
  }
  function Mt(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + hg * a);
    d.globalAlpha = 0.3;
    Tb(d, a * 213.5, a * 256.75, a * 75);
    yb(d, b[5]);
    Tb(d, a * 213.5, a * 175.75, a * 25);
    yb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = cr * a;
    d.strokeStyle = b[Yo];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * gl;
    d.strokeStyle = b[Xk];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Yo];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = x * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = Lk * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(hk, -5);
    d.globalAlpha = 1;
    Tb(d, a * 213.5, a * 256.75, a * 75);
    yb(d, b[Gt]);
    Tb(d, a * 213.5, a * 175.75, a * 25);
    yb(d, b[Qh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[Qq];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[ka];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * ms;
    d.strokeStyle = b[Qh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Qh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = mh * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = $l * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Ui];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = Cn * a;
    d.strokeStyle = b[Qq];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = I * a;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = nb * a;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = Es * a;
    d.strokeStyle = b[ho];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * Sr;
    d.strokeStyle = b[ks];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * yg;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[ka];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * Zj;
    d.strokeStyle = b[fs];
    d.stroke();
    Tb(d, a * 213.5, a * 256.75, a * 70);
    yb(d, b[dh]);
    Tb(d, a * 213.5, a * 175.75, Dh * a);
    yb(d, b[dt]);
    Tb(d, a * 222, a * 166, a * fl);
    d.fillStyle = b[ab];
    d.fill();
    Tb(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    Tb(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[Ah];
    d.fill();
    Tb(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    wb(d, a * -22, a * -21, a * 44, a * 42, a * kh);
    d.restore();
    d.fillStyle = b[El];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    wb(d, -Ln * a, a * -14.5, a * 30, a * 29, za * a);
    d.restore();
    d.fillStyle = b[hj];
    d.fill();
    return c;
  }
  function Nt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : $r;
    e.translate(a * 5, as * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Pb(e, at, a * 9.848857801796104, br * a);
    e.restore();
    yb(e, c[jg]);
    e.globalAlpha = 1;
    e.translate(-nt * a, -Yo * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    Pb(e, He, a * 9.848857801796104, ul * a);
    e.restore();
    yb(e, c[8], c[9], a * Io);
    return d;
  }
  function Qt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var m = c * 198;
    var a = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = m;
    var h = c * Sb;
    var l = c * 25;
    var g = c * 180;
    var o = l / Ls;
    var b = g / 2;
    var p = c * Fl;
    j.translate(c * -25, c * 1);
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    wb(j, -o, -b, l, g, h);
    yb(j, f[ks], f[bq], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    wb(j, -o, -b, l, g, h);
    yb(j, f[Et], f[1], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    wb(j, -o, -b, l, g, h);
    yb(j, f[0], f[1], p);
    return i;
  }
  function Rt(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var o = n.getContext("2d");
    var a = f * 70;
    var p = f * 70;
    var h = f * 10;
    var l = f * 5;
    n.width = a;
    n.height = p + l;
    for (var g = 0; e.length > g; g++) {
      var q = e[g];
      o.globalAlpha = q.a;
      var r = q.f(i, Va, q.c);
      o.save();
      o.translate(a / it + f * q.x, p / 2 + f * q.y);
      o.rotate(q.r);
      o.drawImage(r, -r.width / nq, -r.height / 2);
      o.restore();
    }
    var s = [];
    for (g = 0; j.length > g; g++) {
      var d = document.createElement("canvas");
      var t = d.getContext("2d");
      d.width = a;
      d.height = p + l;
      t.globalAlpha = k / rb;
      if (g == 2) {
        wb(t, ks, l, a, p, h);
      } else {
        wb(t, 0, 0, a, p + l, h);
      }
      yb(t, "#081a19");
      t.globalAlpha = k;
      if (pn == g) {
        wb(t, 0, l, a, p, h);
      } else {
        wb(t, dt, dh, a, p, h);
      }
      yb(t, j[g]);
      t.globalAlpha = $r;
      if (g == 2) {
        t.drawImage(n, 0, l);
      } else {
        t.drawImage(n, 0, 0);
      }
      s.push(Ra(d));
    }
    return s;
  }
  function St(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    yb(e, Kk, c[bt], ab * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    yb(e, Zr, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    yb(e, c[0], c[kr], rb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    yb(e, c[gj], c[El], a * ys);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    yb(e, c[dt], c[1], pn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    yb(e, c[lt], c[bh], Og * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    yb(e, undefined, c[1], a * nl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    yb(e, undefined, c[Zk], ab * a);
    return d;
  }
  function Tt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    Pb(e, f, a * 54.585977194239184, a * 1);
    e.restore();
    yb(e, c[1], c[ys], a * G);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    yb(e, c[1], c[nl], Ai * a);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    yb(e, c[1], c[2], Fh * a);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    Pb(e, Vs, a * 52.53573932334064, uq * a);
    e.restore();
    yb(e, c[1], c[nl], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    yb(e, c[or], c[Sa], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    yb(e, c[og], c[ys], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    yb(e, c[og], c[2], al * a);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 53.16013544000805, hj * a);
    e.restore();
    yb(e, c[Zn], c[ab], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Pb(e, 6, a * 50, a * 1);
    e.restore();
    yb(e, c[1], c[pn], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    Pb(e, f, a * 54, a * 1);
    e.restore();
    yb(e, c[1], c[dj], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    Pb(e, f, a * 55.08175741568164, a * bh);
    e.restore();
    yb(e, c[1], c[cn], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    Pb(e, Rb, a * 54.589376255824725, bq * a);
    e.restore();
    yb(e, c[Ws], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    Pb(e, ub, a * 49.49747468305833, ck * a);
    e.restore();
    yb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    yb(e, undefined, c[Ts], Fh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    yb(e, C, c[pn], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Pb(e, Vh, a * 30, a * wo);
    e.restore();
    yb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    Pb(e, rt, a * 30, a * 15);
    e.restore();
    yb(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    Pb(e, 6, a * 30, sr * a);
    e.restore();
    yb(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    Pb(e, Jl, a * 30, a * Ln);
    e.restore();
    yb(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    Pb(e, 6, a * 30, a * 15);
    e.restore();
    yb(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    Pb(e, Rb, a * 30, a * 15);
    e.restore();
    yb(e, c[Xg]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    Pb(e, 6, a * 30, a * 15);
    e.restore();
    yb(e, c[kl]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    Pb(e, 6, a * 30, a * 15);
    e.restore();
    yb(e, c[3]);
    return d;
  }
  function Ut(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var i = b * 145;
    var a = g / Pn;
    var j = i / Xj;
    e.width = g;
    e.height = i;
    var h = b * 70;
    f.translate(a, j);
    f.globalAlpha = 0.4;
    Tb(f, 0, 0, h);
    yb(f, d[0]);
    h = b * 50;
    f.translate(Ob, 0);
    f.globalAlpha = 0.8;
    Tb(f, Xa, 0, h);
    yb(f, d[Hb]);
    h = b * 35;
    f.translate(lt, vl);
    f.globalAlpha = 0.8;
    Tb(f, dt, Et, h);
    yb(f, d[1]);
    h = tl * b;
    f.translate(dh, Yl);
    f.globalAlpha = 0.8;
    Tb(f, dt, 0, h);
    yb(f, d[Ir]);
    return e;
  }
  const Vt = Tk;
  function Wt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : bh;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    wb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    yb(e, c[hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    yb(e, c[0]);
    Tb(e, a * 204, a * 693, a * 36.013886210738214);
    yb(e, c[Yl]);
    Tb(e, a * 105, a * 518, a * 30);
    yb(e, c[gj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    yb(e, c[vl]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = Dj;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    wb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    yb(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    yb(e, c[3], c[T], a * pg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    yb(e, c[Ba]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    yb(e, c[Sg], c[Qa], a * Fs);
    Tb(e, a * 204, a * 693, a * 36.013886210738214);
    yb(e, c[6], c[Ah], $h * a);
    Tb(e, a * 105, a * 518, a * 30);
    yb(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    yb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    yb(e, c[6]);
    Tb(e, a * 204, a * 693, a * 17.029386365926403);
    yb(e, c[Wg]);
    Tb(e, a * 106, a * 518, zs * a);
    yb(e, c[qh]);
    return d;
  }
  function Xt(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 121;
    e.height = a * 130;
    f.translate(ho, a * 20);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 6, a * 23);
      f.bezierCurveTo(a * 6, a * 46, a * 6, a * 46, a * 6, a * 69);
      f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
      f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
      f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, a * yr);
      f.bezierCurveTo(a * 47, a * 14, a * 47, a * Qk, a * 38, a * 25);
      f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * 6, a * 23);
      f.closePath();
      yb(f, Kk, b[Qh], a * fh);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(_n * a, a * 23);
    f.bezierCurveTo(a * 6, a * 46, ub * a, a * 46, a * 6, a * 69);
    f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
    f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
    f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, a * 3);
    f.bezierCurveTo(a * 47, a * 14, a * 47, a * 14, a * 38, a * 25);
    f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * 6, a * 23);
    f.closePath();
    yb(f, b[ck], b[Ir], a * 4);
    if (uq == d) {
      f.translate(0, Yo * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      yb(f, undefined, b[lt], a * ek);
      f.translate(Qq, a * fs);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * no);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      yb(f, undefined, b[jg], a * 10);
      f.translate(wn, a * vl);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * 8);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      yb(f, undefined, b[lt], a * 10);
      if (c == 1) {
        f.translate(a * -kh, a * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 67, a * 30);
        f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
        yb(f, undefined, b[3], a * 18);
        f.translate(yr, a * 0);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 70, a * Lk);
        f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
        yb(f, uh, b[Jh], a * Fo);
        f.translate(3, a * 0);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 76, Os * a);
        f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
        yb(f, fn, b[Ss], a * Cs);
        f.translate(-6, a * Hb);
      } else {
        f.translate(a * -6, a * -5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      yb(f, undefined, b[2], a * 10);
      f.translate(Qh, Ob * a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * jr);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      yb(f, wl, b[2], a * 10);
      f.translate(3, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * _j);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      yb(f, Kk, b[2], a * ib);
    } else {
      if (c == El) {
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        yb(f, oh, b[Xg], a * 18);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        yb(f, oh, b[Gt], a * 18);
      } else {
        f.translate(Yl, a * -Hl);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        yb(f, undefined, b[fs], at * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        yb(f, pl, b[ho], a * Ka);
        f.translate(0, a * 5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 27);
      f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
      f.closePath();
      yb(f, undefined, b[2], a * 7);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 79, a * 30);
      f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
      f.closePath();
      yb(f, undefined, b[2], a * 7);
    }
    return e;
  }
  function Yt(c, d, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 210;
    var a = c * 205;
    var m = c * 30;
    var h = c * 20;
    var l = c * 200;
    var g = c * 180;
    var n = l / kg;
    var b = g / 2;
    i.width = k;
    i.height = a;
    i.width = c * 419;
    i.height = c * 412;
    if (f == ck) {
      j.save();
      j.translate(c * 10, c * 0);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      j.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      yb(j, undefined, d[wk], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      j.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      yb(j, uh, d[4], Oj * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      j.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      yb(j, undefined, d[Kg], c * Ab);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      j.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      yb(j, undefined, d[Ik], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      j.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      yb(j, Bj, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      j.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      j.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      j.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      j.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      j.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      j.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      yb(j, undefined, d[Ur], Oj * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      j.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      j.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      yb(j, Eh, d[Dl], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      j.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      j.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      j.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      j.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      j.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      j.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      yb(j, undefined, d[Ah], Kb * c);
      j.restore();
    } else if (f == 2) {
      j.save();
      j.translate(c * 130, c * 35);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      j.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      yb(j, fn, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      j.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      yb(j, Lh, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      j.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      yb(j, Ji, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      yb(j, oh, d[4], c * _g);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      yb(j, Kk, d[4], Ia * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      j.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      j.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      j.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      yb(j, pl, d[Dl], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      j.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      j.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      j.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      j.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      yb(j, Kk, d[Io], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      j.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      j.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      j.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      j.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      yb(j, pl, d[4], c * 3);
      j.restore();
    }
    j.translate(i.width / nl, i.height / 2);
    if (!f) {
      j.globalAlpha = 0.5;
      wb(j, -n, -b, l, g + h, m);
      yb(j, d[0]);
      if (e) {
        j.rotate(Math.PI);
      }
      j.globalAlpha = og;
      wb(j, -n, -b, l, g, m);
      yb(j, d[Zn], d[2], 4);
      j.globalAlpha = 1;
      wb(j, c * 35 - n, c * Ph - b, l - c * 50, g - c * 50, m - c * 10);
      yb(j, d[3]);
    }
    if (R == f) {
      j.translate(-i.width / 2, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      yb(j, d[Fl]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      yb(j, d[Gj]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      yb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      yb(j, d[5]);
      j.translate(c * -5, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      yb(j, d[5]);
      j.translate(c * br, c * -55);
      j.translate(c * -5, Pj * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      yb(j, d[Yo]);
    } else if (Ol == f) {
      j.translate(-i.width / 2, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 30, c * 167);
      j.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      j.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, hi * c, c * 179);
      j.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      j.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      j.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      j.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      j.closePath();
      yb(j, d[wk]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 26, c * 145);
      j.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      j.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      j.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      j.closePath();
      yb(j, d[va]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(ee * c, c * 193);
      j.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      j.bezierCurveTo(c * 13, c * 208, Wg * c, c * 202, c * 13, c * 193);
      j.closePath();
      yb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      yb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 335, c * 196);
      j.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      j.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      j.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      j.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      j.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      j.closePath();
      yb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 349, c * 212);
      j.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      j.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      j.closePath();
      yb(j, d[Ol]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 46, c * 165);
      j.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      j.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      j.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      j.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      j.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      j.closePath();
      yb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      yb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      yb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      yb(j, d[Rh]);
      j.translate(c * -Xk, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      yb(j, d[5]);
      j.translate(Jb * c, c * -55);
      j.translate(-ul * c, c * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      yb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 367, c * 164);
      j.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      j.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      j.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      j.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      j.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      j.closePath();
      yb(j, d[4]);
    }
    return i;
  }
  function Zt(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = (o = c * 450) / Ir;
    var m = (p = c * 145) / 2;
    var a = c * 10;
    var n = c * 300;
    var h = c * 30;
    var l = n / it;
    var g = h / yl;
    if (e) {
      var o = c * 145;
      var p = c * 450;
      f.width = o;
      f.height = p;
      i.rotate(Math.PI / 2);
      i.save();
      i.globalAlpha = 0.5;
      wb(i, c * hi, c * -110, n, h, a);
      yb(i, d[0]);
      i.translate(c * 178, c * -98);
      wb(i, -l, -g - c * 6, c * Xl, dk * c, a);
      yb(i, d[dt]);
      i.translate(c * -50, bb * c);
      wb(i, c * 220, c * -15, c * 90, c * 90, a);
      yb(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 250, c * -63);
      wb(i, -l - c * 20, -g, n, h, a);
      yb(i, d[1], d[2], 4);
      i.translate(c * -70, c * -40);
      wb(i, -l - c * Aa, -g, c * 100, c * Is, a);
      yb(i, d[_g], d[4], 4);
      i.translate(c * -70, c * cs);
      wb(i, c * 220, c * -22, c * 90, c * 90, a);
      yb(i, d[3], d[jo], 4);
      wb(i, c * 230, c * -12, c * 55, c * 55, a);
      yb(i, d[5]);
      i.translate(c * -70, 0);
      wb(i, -we * c, c * -yl, c * 60, c * 60, a);
      yb(i, d[5]);
      i.restore();
    } else {
      f.width = o;
      f.height = p;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(j, m + c * 10);
      wb(i, -l, -g, n, h, a);
      yb(i, d[0]);
      i.translate(c * -65, c * -25);
      wb(i, -l, -g - c * 6, Xl * c, wg * c, c * 15);
      yb(i, d[dh]);
      i.translate(c * -35, -O * c);
      wb(i, c * 220, -M * c, c * 90, c * 90, Ms * c);
      yb(i, d[Et]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 240, c * 70);
      wb(i, -l, -g, n, h, a);
      yb(i, d[Th], d[Og], 4);
      i.translate(c * -60, c * -40);
      wb(i, -l - c * aq, -g, c * k, Aq * c, c * Uq);
      yb(i, d[Ui], d[xs], 4);
      i.translate(c * -55, c * 10);
      wb(i, c * 220, c * -22, c * 90, c * 90, c * Sh);
      yb(i, d[3], d[va], 4);
      wb(i, c * 240, c * -12, c * 55, c * 55, c * 12);
      yb(i, d[ul]);
      i.translate(c * 45, hk * c);
      wb(i, c * -145, c * -2, c * 60, c * 60, c * 12);
      yb(i, d[5]);
      i.restore();
    }
    return f;
  }
  function $t(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var h = b * Db;
    var a = b * Ah;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    Tb(e, 0, ks, h);
    yb(e, c[dt], c[1], a);
    return d;
  }
  function _t(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * ih;
    d.width = f;
    d.height = g;
    e.translate(f / Xj, g / ys);
    e.globalAlpha = 0.5;
    Tb(e, 0, 0, h);
    yb(e, c[hk]);
    e.globalAlpha = og;
    return d;
  }
  function au(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    yb(d, Ji, b[lt], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    yb(d, Lh, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    yb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    yb(d, Zr, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    yb(d, ml, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    yb(d, Ji, b[jg], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    yb(d, b[jg]);
    return c;
  }
  function bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, u * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, zq * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    yb(e, c[ho]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, sg * a, a * 333);
    e.bezierCurveTo(Wh * a, a * 323, a * 8, a * 323, a * Ih, a * 313);
    e.closePath();
    yb(e, c[lt]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    wb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, -ph * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, Qk * a);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, Vn * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    yb(e, c[bh], c[yl], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    yb(e, c[Ab]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * $s);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, Yo * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    yb(e, dq, c[2], Vt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    yb(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    yb(e, c[Ol], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    wb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * Ks);
    e.restore();
    yb(e, c[Ol], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    yb(e, c[6]);
    return d;
  }
  function cu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.max(b.width, a.width);
    var f = Math.max(b.height, a.height);
    c.width = e;
    c.height = f;
    d.drawImage(a, (e - a.width) / 2, (f - a.height) / Ci);
    d.drawImage(b, (e - b.width) / Xj, (f - b.height) / 2);
    return c;
  }
  function du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    yb(e, c[dt]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    wb(e, a * -14, a * -56.5, a * 28, a * 113, bn * a);
    e.restore();
    yb(e, c[ho]);
    Tb(e, a * 122, a * 480, a * 18.439088914585774);
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    yb(e, c[Hb]);
    e.globalAlpha = 1;
    e.translate(a * -hs, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    yb(e, c[bh], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    wb(e, a * -14, a * -56.5, a * 28, a * 113, bn * a);
    e.restore();
    yb(e, c[4], c[5], a * 12.5);
    Tb(e, a * 122, a * 480, a * 18.439088914585774);
    yb(e, c[4], c[nt], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    yb(e, c[Yr], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    yb(e, c[3]);
    return d;
  }
  function eu(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 283;
    e.height = a * 224;
    f.translate(0, rg * a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    yb(f, c[ka]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    f.closePath();
    yb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    yb(f, c[gj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    yb(f, c[vl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    yb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    yb(f, c[vl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    yb(f, c[0]);
    f.translate(0, a * -Sj);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * Zs, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    yb(f, Ji, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    yb(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    yb(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    yb(f, undefined, c[Ts], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    yb(f, undefined, c[Pn], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    yb(f, ml, c[nl], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    yb(f, c[Dj], c[2], a * sh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Fg * a, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    yb(f, undefined, c[bt], ie * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    yb(f, undefined, c[El], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    yb(f, pa, c[1], lg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    yb(f, undefined, c[1], tl * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    yb(f, undefined, c[1], Xe * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    yb(f, ml, c[$r], a * Ns);
    Tb(f, a * 101, a * 155, a * 20.591260281974);
    yb(f, c[3]);
    Tb(f, a * 180, a * 155, a * 20.591260281974);
    yb(f, c[3]);
    Tb(f, a * 95, a * 148, a * 7.211102550927978);
    yb(f, c[Fl]);
    Tb(f, a * 173, a * 148, a * 7.211102550927978);
    yb(f, c[qa]);
    if (d === 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 191, a * 107);
      f.bezierCurveTo(a * 180, a * 104, a * 175, a * 101, a * 180, a * 95);
      f.bezierCurveTo(a * 180, a * 95, a * 181, a * 99, a * 188, a * 103);
      f.bezierCurveTo(a * 191, a * 101, a * 191, a * 95, a * 190, a * 91);
      f.bezierCurveTo(a * 190, a * 91, a * 196, a * 89, a * 195, a * 99);
      f.closePath();
      yb(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 206, a * 98);
      f.bezierCurveTo(a * 203, a * 95, a * 200, a * 93, a * 198, a * 101);
      f.bezierCurveTo(a * 194, a * 109, a * 193, a * 109, a * 196, a * 110);
      f.bezierCurveTo(a * 206, a * 115, a * 209, a * 114, a * 211, a * 111);
      f.bezierCurveTo(a * 211, a * 106, a * 208, a * 108, a * 203, a * 108);
      f.bezierCurveTo(a * 193, a * 107, a * 204, a * 101, a * 206, a * 99);
      f.closePath();
      yb(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 172, a * 111);
      f.bezierCurveTo(a * 172, a * 106, a * 174, a * 105, a * 185, a * 109);
      f.bezierCurveTo(a * 190, a * 109, a * 189, a * 114, a * 185, a * 120);
      f.bezierCurveTo(a * 181, a * 125, a * 180, a * 126, a * 176, a * 122);
      f.bezierCurveTo(a * 182, a * 119, a * 187, a * 110, a * 182, a * 112);
      f.closePath();
      yb(f, c[it]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 202, a * 125);
      f.bezierCurveTo(a * 197, a * 117, a * 193, a * 116, a * 193, a * 120);
      f.bezierCurveTo(a * 192.5, a * 124.5, a * 192.5, a * 124.5, a * 192, a * 129);
      f.bezierCurveTo(a * 188, a * 129, a * 187, a * 124, a * 189, a * 120);
      f.bezierCurveTo(a * 191, a * 110, a * 192, a * 110, a * 200, a * 116);
      f.bezierCurveTo(a * 208, a * 120, a * 207, a * 123, a * 202, a * 125);
      f.closePath();
      yb(f, c[2]);
    }
    return e;
  }
  function fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = Aq * a;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : $q;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    yb(e, c[lt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    yb(e, c[Xa]);
    Tb(e, a * 160.5, a * 243.03125, a * lo);
    yb(e, c[hk]);
    Tb(e, a * 227.5, a * 242.03125, Ka * a);
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    yb(e, c[jg], c[0], a * 5);
    Tb(e, a * 194, a * 298, a * 9);
    yb(e, c[Hb], c[ka], a * 5);
    e.globalAlpha = Th;
    e.translate(a * -Cg, a * Xn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    yb(e, c[3], c[oo], a * Gj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    yb(e, c[bh], c[2], a * as);
    Tb(e, a * 160.5, a * 243.03125, a * 7);
    yb(e, c[Ng], c[nl], a * fl);
    Tb(e, a * 227.5, a * 242.03125, a * 7);
    yb(e, c[vg], c[pn], a * Vn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    yb(e, c[$r], c[it], a * vh);
    Tb(e, a * 194, a * 298, a * 9);
    yb(e, c[1], c[uj], a * nj);
    return d;
  }
  function gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(Xa, a * 8);
    e.translate(a * -7, a * -u);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * Ch, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    yb(e, c[Go]);
    e.globalAlpha = 1;
    e.translate(0, a * -yn);
    e.translate(a * 7, a * u);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, da * a, a * 120, a * uk);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * Yl, a * 73, a * 3);
    e.bezierCurveTo(a * 51, Ba * a, a * 36, ko * a, a * 25, a * 28);
    e.closePath();
    yb(e, c[og], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, Bg * a);
    e.bezierCurveTo(a * 107, bi * a, a * 96, a * xg, a * 85, a * Xj);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * $a);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    yb(e, c[Oj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * da, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * ks, a * 73, a * Kl);
    e.bezierCurveTo(a * 51, a * Vn, a * 36, Us * a, a * 25, a * 28);
    e.closePath();
    yb(e, fn, c[2], a * 4);
    Tb(e, a * 18, a * 38, a * 14.866068747318506);
    yb(e, c[4], c[zq], a * jo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    yb(e, c[1], c[2], Kg * a);
    e.translate(a * -7, a * -Al);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(h * a, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    yb(e, c[Eg], c[5], Eg * a);
    return d;
  }
  function hu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var k = c * 125;
    var a = c * Ah;
    var m = c * 10;
    var h = c * Vn;
    var l = c * 10;
    var g = c * 110;
    var n = l / it;
    var b = g / cn;
    f.width = j;
    f.height = k;
    i.save();
    i.globalAlpha = d ? 0.5 : or;
    i.translate(j / cn + c * te, k / 2 + h);
    wb(i, -n, -b, l, g, m);
    yb(i, d ? e[0] : e[vg]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    yb(i, e[2]);
    i.restore();
    i.translate(j / 2 + I, k / nq);
    i.globalAlpha = Zn;
    wb(i, -n, -b, l, g, m);
    yb(i, e[Ss], e[4], a);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    yb(i, e[nt], e[6], a);
    return f;
  }
  function iu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 32;
    var a = Yr * b;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    Tb(e, 0, 0, h);
    yb(e, c[0], c[Et]);
    e.translate(Hb, b * -8);
    e.globalAlpha = 1;
    Tb(e, dt, fs, h);
    yb(e, c[1], c[Ls], a);
    return d;
  }
  function ju(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var i = b * 370;
    var a = g / Og;
    var j = i / rb;
    e.width = g;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    Tb(f, a, j, h);
    yb(f, d[0]);
    return e;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -lq, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    yb(e, c[Et]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, gt * a);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * Yl, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    yb(e, c[kr], c[Pn], a * wk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, al * a, a * 120, a * Un);
    e.bezierCurveTo(a * 107, a * 11, a * 96, xg * a, a * 85, a * pn);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * Bo);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * Nj, a * 89, lt * a, a * 73, a * 3);
    e.bezierCurveTo(a * 51, O * a, a * 36, a * hs, a * 25, a * 28);
    e.closePath();
    yb(e, pa, c[2], a * 4);
    Tb(e, a * 18, a * 38, a * 14.866068747318506);
    yb(e, c[jo], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    yb(e, c[1], c[cn], T * a);
    e.translate(a * -sb, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    yb(e, c[xg], c[7], a * 6);
    return d;
  }
  const lu = Jl;
  function mu(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 131;
    e.height = a * 121;
    f.translate(0, ie * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 59);
    f.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    f.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    f.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    f.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    f.bezierCurveTo(a * 66, a * 15, a * 83, vo * a, a * 96, a * 29);
    f.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    f.closePath();
    yb(f, d[Yl]);
    f.globalAlpha = 1;
    f.translate(0, a * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 110, a * 59);
    f.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    f.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    f.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    f.bezierCurveTo(ms * a, a * 61, a * 25, a * 30, a * 51, a * 21);
    f.bezierCurveTo(a * 66, a * 15, a * 83, b * a, a * 96, a * 29);
    f.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    f.closePath();
    yb(f, d[1], d[2], a * 10);
    return e;
  }
  const nu = Do;
  const ou = Yl;
  const pu = Jl;
  function qu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(Aj * a, a * 30);
    e.translate(a * Yo, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(sq * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = ck;
    e.translate(a * -zq, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    yb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    yb(e, undefined, c[wk], a * 4);
    e.translate(-hh * a, a * -30);
    e.translate(a * Ys, a * 70);
    e.translate(a * Lj, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(rg * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    yb(e, c[Et]);
    e.globalAlpha = Ng;
    e.translate(a * -5, -Hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    yb(e, c[1], c[nl], a * sh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    yb(e, c[yr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    yb(e, c[pn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    yb(e, undefined, c[4], Kg * a);
    e.translate(a * Fq, a * -80);
    e.translate(Jb * a, a * 10);
    e.globalAlpha = b ? 0.5 : bq;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    yb(e, c[lt]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -ib);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    yb(e, c[bh], c[ys], a * ek);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    yb(e, c[Ia]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    yb(e, c[Sa]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    yb(e, Ji, c[4], a * 4);
    return d;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    yb(e, c[Hb]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    wb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    yb(e, c[Et]);
    Tb(e, a * 121, a * 480, a * 20.396078054371138);
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * dk, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    yb(e, c[ho]);
    e.globalAlpha = 1;
    e.translate(-ko * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    yb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    wb(e, a * -15.5, a * -63, a * 31, a * 126, Ar * a);
    e.restore();
    yb(e, c[Ik], c[Ba], a * 12.5);
    Tb(e, a * 121, a * 480, a * 20.396078054371138);
    yb(e, c[mi], c[Hl], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * k, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    yb(e, c[$q], c[cn], a * 12.5);
    return d;
  }
  function su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * wo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo($h * a, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, Ml * a, a * 42, tt * a, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, Db * a, a * 39, Ul * a, a * 44);
    e.closePath();
    yb(e, c[gj]);
    e.globalAlpha = kr;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, xn * a, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * uk, a * 39, a * 16, a * 44);
    e.closePath();
    yb(e, c[1], c[Xj], a * nb);
    return d;
  }
  const tu = jl;
  function uu(f, e, i, j, k, m, n, a, o, h, l) {
    if (C === l) {
      l = jg;
    }
    var p = document.createElement("canvas");
    var q = p.getContext("2d");
    m = m ? f * m : 0;
    var b = Math.floor(i * f);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    a *= f;
    var t = n ? a * 2 : 0;
    if (o) {
      var d = Math.min(q.measureText(e).width + Pn * f + t, o);
    } else {
      d = q.measureText(e).width + f * 2 + t + f * l * Ls;
    }
    b = (b + m + l) * f + t;
    p.width = d;
    p.height = b;
    if (n) {
      q.fillStyle = n;
      wb(q, 0, Hb, d, b, a * 2);
      q.fill();
      q.translate(a, a);
    }
    q.textBaseline = fj[Pa];
    q.font = i + "px Baloo Paaji";
    q.lineJoin = "round";
    if (k) {
      q.beginPath();
      q.fillStyle = k;
      q.fillText(e, fs, b / Sa + m - t / 2, d);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = l;
      q.strokeText(e, l, (b - t) / 2, d);
    }
    q.fillStyle = j;
    q.fillText(e, l, (b - t) / nl, d);
    return p;
  }
  function vu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var i = b * 230;
    var a = Wa * b;
    var j = a / xs;
    var h = b * 20;
    e.width = g;
    e.height = i;
    f.translate(g / kg, i / uj + h);
    f.globalAlpha = 0.5;
    Pb(f, Ka, a, j);
    yb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    Pb(f, 7, a, j);
    yb(f, d[1]);
    Pb(f, 6, a * 0.65, j * 0.65);
    yb(f, d[nq]);
    return e;
  }
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    yb(e, c[0], c[1], _j * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    yb(e, c[0], c[bq], a * Sr);
    Tb(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    yb(e, c[2]);
    Tb(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    yb(e, c[2]);
    Tb(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    yb(e, c[Sa]);
    Tb(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    yb(e, c[2]);
    Tb(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    yb(e, c[2]);
    Tb(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    yb(e, c[Xg], c[jo], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    yb(e, c[Ui], c[4], a * Kg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    yb(e, c[Ab], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    yb(e, c[3], c[Io], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    yb(e, c[3], c[4], Ik * a);
    return d;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    yb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    wb(e, a * -ql, a * -53, a * 28, a * 106, a * cl);
    e.restore();
    yb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Pb(e, va, a * 26.476404589747453, a * 10);
    e.restore();
    yb(e, c[dh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    yb(e, c[jg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = kr;
    e.translate(-u * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    yb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    wb(e, a * -bo, a * -53, a * 28, a * 106, ok * a);
    e.restore();
    yb(e, c[ll], c[O], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    Pb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    yb(e, c[1], c[pn], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    yb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    yb(e, c[Jh]);
    return d;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : uq;
    e.translate(0, Hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(Di * a, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * Bo, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = Ng;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * jr, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    yb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * Us, a * 76, a * 23, a * 62);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    yb(e, c[Xg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    yb(e, c[Ab]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    yb(e, c[_g]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    yb(e, c[Ui]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * dk, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    yb(e, c[Qh]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(hh * a, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, Aq * a, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    yb(e, c[4], c[bb], va * a);
    Tb(e, a * 107, a * 152, a * 9);
    yb(e, c[6]);
    Tb(e, a * 105, a * 173, a * 9);
    yb(e, c[6]);
    Tb(e, a * 87, a * 161, a * 9);
    yb(e, c[6]);
    Tb(e, a * 106, a * 147, a * xs);
    yb(e, c[7]);
    Tb(e, a * 104, a * 167, a * 4);
    yb(e, c[7]);
    Tb(e, a * 86, a * 154, a * T);
    yb(e, c[vh]);
    return d;
  }
  function zu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var i = b * 90;
    var a = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    yb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    yb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, Zs * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    yb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    yb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    yb(f, d[Xa], d[Zn], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    yb(f, d[0], d[1], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * Xl, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    yb(f, d[vl], d[hj], a);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = Zn;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * dk, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    yb(f, d[Go], d[1], a);
    f.restore();
    return e;
  }
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    yb(e, c[1], c[2], Yr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    yb(e, c[1], c[Ci], Kg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * Hj);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    yb(e, c[Ol], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    yb(e, c[Ol], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    yb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    yb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    yb(e, c[Tl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    yb(e, c[Tl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    yb(e, c[4], c[zq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    yb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    yb(e, c[9], c[jl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    yb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    yb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    yb(e, c[Ma], c[cl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    yb(e, c[11], c[Gl], Ah * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    yb(e, c[11], c[Dr], jo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    yb(e, c[ln], c[sh], a * Kg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    yb(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    yb(e, c[9], c[bk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    yb(e, c[11], c[el], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    yb(e, c[Tq], c[11], Eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    yb(e, c[xh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    yb(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    yb(e, Kk, c[Qq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    yb(e, undefined, c[iq], a * Ik);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    yb(e, undefined, c[pi], a * Io);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    yb(e, undefined, c[wn], qa * a);
    return d;
  }
  function Bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(Xa, a * Qg);
    Tb(e, a * 42, a * 43, a * 24.758836806279895);
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    yb(e, c[fs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * nh, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    yb(e, c[fs]);
    e.translate(0, a * -vi);
    Tb(e, a * 42, a * 43, a * 24.758836806279895);
    yb(e, c[1], c[ys], a * Gs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    yb(e, c[vg], c[Og], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * hn, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    yb(e, c[El], c[Ts], a * ul);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, tt * a);
    e.bezierCurveTo(a * 55, a * Hk, a * 54, a * Fq, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, pg * a, a * 52, a * uk);
    e.closePath();
    yb(e, c[3], c[Fl], a * nt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    yb(e, c[3], c[Ol], a * hg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    yb(e, c[3], c[4], zq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * fg, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * Ge, a * 39, a * wo, a * 38, a * vo, a * 37);
    e.closePath();
    yb(e, c[Xg], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    yb(e, c[Jh], c[ll], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    yb(e, c[Qq], c[4], O * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    yb(e, c[3], c[Dl], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    yb(e, c[wn], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    yb(e, c[_g], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Ns * a, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, Dh * a, a * 53);
    e.closePath();
    yb(e, c[3], c[4], a * Gj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    yb(e, c[3], c[Dl], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    yb(e, c[3], c[oo], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    yb(e, c[3], c[jo], Vn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    yb(e, c[3], c[Dl], fl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    yb(e, c[R], c[4], a * Ba);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    yb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    yb(e, c[Xg], c[qa], a * Hl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    yb(e, c[Gj], c[rt], a * Yo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    yb(e, c[sb], c[8], a * 5);
    return d;
  }
  function Cu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Al, a * 20);
    e.translate(a * -20, a * -Aa);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    wb(e, a * -qg, a * -61, a * 28, a * 122, a * Sb);
    e.restore();
    yb(e, c[vl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    yb(e, c[fs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    yb(e, c[ks]);
    e.globalAlpha = bq;
    e.translate(a * -20, a * -aq);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    wb(e, a * -tq, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    yb(e, c[Fl], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Aj * a, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    yb(e, c[Ng], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    yb(e, c[1], c[pn], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    yb(e, c[Kb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    yb(e, c[Ng], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    yb(e, c[3]);
    return d;
  }
  const Eu = jg;
  function Fu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, wq * a, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * h, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    yb(d, b[0], b[0], Ur * a);
    return c;
  }
  function Fu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(Qg, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(ij * a, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * bi, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, qg * a, a * 50, a * 9, a * 48, a * xg);
    d.closePath();
    yb(d, b[fs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Lr * a, a * 70);
    d.bezierCurveTo(Ha * a, a * 77, Qg * a, a * 83, a * qa, a * 87);
    yb(d, Lh, b[vl], a * cl);
    d.translate(Eu, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, Hs * a, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * nr, a * 48, a * Sg);
    d.closePath();
    yb(d, b[Th], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * en, a * 77, tu * a, a * 83, T * a, a * 87);
    yb(d, oh, b[2], Nk * a);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * $l, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * Wg);
    yb(d, undefined, b[2], lj * a);
    return c;
  }
  function Gu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var i = b * 150;
    var a = b * jl;
    var j = b * 4;
    e.width = g;
    e.height = i;
    f.translate(b * -50, b * -38 + a);
    f.globalAlpha = c ? 0.5 : Dj;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    yb(f, d[ka]);
    f.translate(0, 0 - a);
    f.globalAlpha = $r;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    yb(f, d[Ws], d[Og], j);
    return e;
  }
  function Hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 18;
    var i = en * b;
    e.width = g;
    e.height = i;
    var a = b * 9;
    var j = b * 9;
    var k = b * 8;
    f.save();
    f.translate(a, j);
    f.globalAlpha = 1;
    Tb(f, ka, 0, k);
    yb(f, d[Ob]);
    k = b * 3;
    a = gj;
    j = b * -3;
    f.translate(a, j);
    f.globalAlpha = og;
    Tb(f, Yl, dh, k);
    yb(f, d[1]);
    f.restore();
    return e;
  }
  function Iu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var h = b * 180;
    var i = b * 210;
    var a = (l = b * 60) / 4;
    var k = Al * b;
    e.width = h;
    e.height = i;
    f.save();
    f.translate(h / 2 - b * Et, i / uj - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    Pb(f, 5, l, a);
    yb(f, d[Ob]);
    f.restore();
    f.save();
    f.translate(h / 2 + b * 10, i / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -Rq);
    Pb(f, Gs, l, a);
    yb(f, d[0]);
    f.restore();
    f.save();
    f.translate(h / 2 - b * 50, i / pn + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, -u * b);
    Pb(f, 5, l, a);
    yb(f, d[0]);
    f.restore();
    f.save();
    f.translate(h / 2 - b * 0, i / Sa - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = vg;
    f.translate(b * Go, b * -Us);
    Pb(f, 5, l, a);
    yb(f, d[1]);
    f.restore();
    f.save();
    f.translate(h / ab + b * 10, i / cn + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = Ws;
    f.translate(0, b * -Rq);
    Pb(f, Jb, l, a);
    yb(f, d[kr]);
    f.restore();
    f.save();
    f.translate(h / yl - b * 50, i / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(Eu, -Us * b);
    Pb(f, zq, l, a);
    yb(f, d[1]);
    f.restore();
    var l;
    a = (l = b * 30) / Yr;
    f.save();
    f.translate(h / 2 + b * 5, i / it - Rq * b);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(Et, -ie * b);
    Pb(f, Rh, l, a);
    yb(f, d[dj]);
    f.restore();
    f.save();
    f.translate(h / 2 + b * 0, i / dj + b * j);
    f.rotate(Math.PI / Xj);
    f.globalAlpha = 1;
    f.translate(Yl, b * -20);
    Pb(f, hg, l, a);
    yb(f, d[2]);
    f.restore();
    f.save();
    f.translate(h / Ci - b * 45, i / kg + b * 35);
    f.rotate(Math.PI / wn);
    f.globalAlpha = 1;
    f.translate(dt, b * -tl);
    Pb(f, 5, l, a);
    yb(f, d[2]);
    f.restore();
    Tb(f, h / 2 - vh * b, i / 2 + b * Tl, fl);
    yb(f, d[Og]);
    return e;
  }
  function Ju(a, b, c) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 220;
    e.height = a * 180;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(a * -90, a * -150);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 237.8000030517578);
    f.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    f.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    f.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    f.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    f.closePath();
    yb(f, c[5], c[Lj], cn * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 211.20000457763672);
    f.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    f.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    f.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    f.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    f.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    f.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    f.closePath();
    yb(f, c[Xk], c[5], uj * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 120, a * 207);
    f.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    f.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    f.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    f.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    f.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    f.closePath();
    yb(f, c[Kg], c[4], it * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 284, a * 238);
    f.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    f.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    f.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    f.closePath();
    yb(f, c[4], c[4], Ts * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 283, a * 211);
    f.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    f.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    f.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    f.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    f.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    f.closePath();
    yb(f, c[4], c[4], cn * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 280, a * 206);
    f.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    f.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    f.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    f.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    f.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    f.closePath();
    yb(f, c[4], c[xs], ab * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 138, a * 298.40000915527344);
    f.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    f.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    f.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    f.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    f.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    f.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    f.closePath();
    yb(f, c[xs], c[Ol], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 177.5999984741211);
    f.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    f.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    f.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    f.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    f.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    f.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    f.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    f.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    f.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    f.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    f.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    f.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    f.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    f.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    f.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    f.bezierCurveTo(a * po, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    f.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    f.closePath();
    yb(f, c[wk], c[wk], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 175.5999984741211);
    f.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    f.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    f.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    f.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    f.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    f.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    f.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    f.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, Vj * a, a * 175.8000030517578);
    f.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    f.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    f.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    f.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    f.closePath();
    yb(f, undefined, c[Kg], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 198, a * 161.4000015258789);
    f.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    f.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    f.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    f.closePath();
    yb(f, c[Kg], c[Eg], pn * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 194);
    f.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    f.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    f.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    f.closePath();
    yb(f, c[xs], c[qa], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    f.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    f.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    f.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    f.closePath();
    yb(f, c[4], c[Qa], a * ab);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 156, a * 188);
    f.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    f.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    f.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    f.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    f.closePath();
    yb(f, undefined, c[4], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 189);
    f.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    f.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    f.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    f.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    f.closePath();
    yb(f, eg, c[Ik], a * lu);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 262);
    f.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    f.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    f.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    f.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    f.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    f.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    f.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    f.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    f.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    f.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    f.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    f.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    f.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    f.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    f.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    f.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    f.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    f.closePath();
    yb(f, c[Dl], c[Kg], a * Pn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 264);
    f.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    f.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    f.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    f.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    f.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    f.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    f.closePath();
    yb(f, undefined, c[4], iq * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 140, a * 265.33333587646484);
    f.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    f.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    f.bezierCurveTo(d * a, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    f.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    f.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    f.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    f.closePath();
    yb(f, pa, c[oo], a * ub);
    f.globalAlpha = 0.5;
    f.scale(1, 1);
    f.translate(a * 105, a * 155);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    f.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    f.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    f.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    f.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    f.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    f.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    f.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    f.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    f.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    f.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    f.closePath();
    yb(f, c[nt], c[wr], a * 4);
    f.globalAlpha = y;
    f.translate(a * -110, a * -155);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 104, a * 237.8000030517578);
    f.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    f.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    f.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    f.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    f.closePath();
    yb(f, c[Bs], c[og], Sa * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 115, a * 211.20000457763672);
    f.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    f.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    f.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    f.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    f.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    f.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    f.closePath();
    yb(f, c[Go], c[ck], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 120, a * 207);
    f.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    f.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    f.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    f.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    f.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    f.closePath();
    yb(f, c[0], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 284, a * 238);
    f.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    f.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    f.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    f.closePath();
    yb(f, c[0], c[vg], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 283, a * 211);
    f.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    f.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    f.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    f.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    f.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    f.closePath();
    yb(f, c[0], c[uq], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 280, a * 206);
    f.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    f.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    f.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    f.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    f.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    f.closePath();
    yb(f, c[ks], c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 138, a * 298.40000915527344);
    f.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    f.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    f.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    f.bezierCurveTo(a * Vj, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    f.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    f.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    f.closePath();
    yb(f, c[0], c[$q], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 177.5999984741211);
    f.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    f.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    f.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    f.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    f.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    f.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    f.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    f.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    f.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    f.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    f.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    f.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    f.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    f.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    f.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    f.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    f.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    f.closePath();
    yb(f, c[Ci], c[2], va * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 175.5999984741211);
    f.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    f.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    f.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    f.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    f.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    f.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    f.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    f.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, Ig * a, a * 175.8000030517578);
    f.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    f.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    f.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    f.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    f.closePath();
    yb(f, Bj, c[3], a * jn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 198, a * 161.4000015258789);
    f.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    f.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    f.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    f.closePath();
    yb(f, c[Bs], c[Ws], a * pn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 161, a * 194);
    f.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    f.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    f.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    f.closePath();
    yb(f, c[0], c[$q], dj * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    f.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    f.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    f.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    f.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    f.closePath();
    yb(f, c[Bs], c[El], it * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 156, a * 188);
    f.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    f.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    f.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    f.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    f.closePath();
    yb(f, C, c[1], kg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 162, a * 189);
    f.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    f.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    f.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    f.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    f.closePath();
    yb(f, pa, c[1], a * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 131, a * 262);
    f.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    f.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    f.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    f.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    f.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    f.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    f.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    f.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    f.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    f.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    f.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    f.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    f.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    f.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    f.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    f.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    f.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    f.closePath();
    yb(f, c[0], c[gj], nl * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 264);
    f.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    f.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    f.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    f.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    f.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    f.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    f.closePath();
    yb(f, undefined, c[1], a * rb);
    return e;
  }
  function Lu(b, c, d, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    if (e == 0) {
      var a = b * 270;
      var k = b * 250;
      i.width = a;
      i.height = k;
      j.beginPath();
      j.moveTo(b * 140, R * b);
      j.translate(b * -25, b * -20);
      j.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      j.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      j.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      j.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      j.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      j.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      j.closePath();
      yb(j, d[jg]);
    } else if (e == bh) {
      a = b * 430;
      k = b * 350;
      i.width = a;
      i.height = k;
      j.beginPath();
      j.moveTo(b * 180, b * 5);
      j.translate(b * -30, b * -60);
      j.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      j.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      j.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * wa, b * 386);
      j.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      j.bezierCurveTo(b * g, b * 192, b * 107, b * 75, b * 178, b * 69);
      j.closePath();
      yb(j, d[Hb]);
    } else if (e == 2) {
      a = b * 400;
      k = b * 300;
      i.width = a;
      i.height = k;
      j.beginPath();
      j.moveTo(b * 80, b * 52);
      j.translate(b * -40, b * -30);
      j.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      j.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      j.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      j.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      j.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      j.closePath();
      yb(j, d[Hb]);
    }
    return i;
  }
  function ed(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var h = nl * (b * c);
    var a = g / Xj;
    var i = h / dj;
    e.width = g;
    e.height = h;
    f.translate(a, i);
    Tb(f, ka, 0, c * b);
    yb(f, d);
    return e;
  }
  function id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : vg;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    wb(e, a * -40, a * -28.5, a * 80, a * 57, cl * a);
    e.restore();
    yb(e, c[1], c[Ls], va * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    yb(e, c[0], c[0], a * kh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    yb(e, c[ks], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    wb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    yb(e, c[dt], c[0], a * Vs);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    wb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    yb(e, c[ks], c[Hb], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    wb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    yb(e, c[ks], c[hk], xg * a);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    wb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    yb(e, c[0], c[vl], Jl * a);
    Tb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    yb(e, c[dt], c[Yl], f * a);
    e.globalAlpha = 1;
    e.translate(a * -5, -O * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    yb(e, c[Ab], c[mi], Rb * a);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    wb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    yb(e, c[og], c[2], ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    yb(e, c[uq], c[Og], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    wb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    yb(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    wb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    yb(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    wb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    yb(e, c[dn], c[Ah], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    wb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    yb(e, c[He], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    wb(e, a * -qr, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    yb(e, c[Ka], c[xh], a * 6);
    e.globalAlpha = vg;
    e.save();
    Tb(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    yb(e, c[Gt], c[Ah], a * 6);
    e.restore();
    return d;
  }
  function td(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 220;
    var j = b * Aj;
    var h = j / 4;
    f.width = i;
    f.height = a;
    g.translate(i / 2, a / 2);
    g.globalAlpha = c ? 0.5 : Dj;
    if (!c) {
      g.translate(b * Hb, -Wh * b);
    }
    Pb(g, _s, j, h);
    yb(g, c ? d[ho] : d[Th]);
    g.globalAlpha = 1;
    if (e == dh) {
      Pb(g, 6, j * 0.65, h * 0.65);
      yb(g, d[2]);
    } else if (e == 1) {
      g.translate(Ph * b, Rq * b);
      Pb(g, es, j * 0.45, h * 0.4);
      yb(g, d[2]);
    }
    return f;
  }
  function nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    yb(e, c[0], c[0], a * ea);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    yb(e, c[lt], c[0], Hs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    yb(e, c[0], c[jg], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    yb(e, c[0], c[0], et * a);
    e.globalAlpha = og;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    yb(e, c[1], c[2], a * Fh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    yb(e, c[4]);
    Tb(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    yb(e, c[nt]);
    Tb(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    yb(e, c[pu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    yb(e, c[lq], c[8], a * zl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    yb(e, c[_s], c[8], a * et);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    yb(e, c[vh], c[xh], a * Nj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    yb(e, undefined, c[Mi], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    yb(e, Ji, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    yb(e, undefined, c[Zl], _n * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    yb(e, pl, c[Il], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    yb(e, undefined, c[pq], a * 3);
    return d;
  }
  function od(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var i = b * 150;
    var a = b * 60;
    var j = a / 4;
    var h = b * 15;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / Og + ho * b, i / it + b * jg + h);
    f.rotate(Math.PI / yr);
    f.globalAlpha = 0.5;
    Pb(f, bn, a, j);
    yb(f, d[ks]);
    f.restore();
    f.save();
    f.translate(g / Sa - b * vk, i / Xj + Ge * b);
    f.globalAlpha = 1;
    f.rotate(Math.PI / kl);
    f.translate(Ob, -h);
    Pb(f, bn, a, j);
    yb(f, d[bt]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 9, i / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    Pb(f, 5, a * 0.5, j * 0.4);
    yb(f, d[yl]);
    f.restore();
    f.save();
    f.translate(g / Ir + b * 19, i / 2 + b * 5);
    f.rotate(Math.PI / 1);
    Pb(f, 5, a * 0.5, j * 0.4);
    yb(f, d[Sa]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 8, i / 2 + lg * b);
    f.rotate(Math.PI / 2.25);
    Pb(f, 5, a * 0.5, j * 0.4);
    yb(f, d[2]);
    f.restore();
    return e;
  }
  function rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : El;
    e.translate(a * 10, a * nt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    yb(e, c[jg], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    yb(e, c[vl], c[hk], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    yb(e, c[ka], c[Hb], jl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    yb(e, c[0], c[0], a * 10);
    e.globalAlpha = ck;
    e.translate(-cl * a, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    yb(e, c[$r], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    yb(e, c[1], c[Ts], a * sh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    yb(e, c[1], c[2], ek * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    yb(e, c[1], c[ab], tu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    yb(e, c[1], c[ab], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    yb(e, c[1], c[cn], Tl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    yb(e, c[1], c[Xj], Tk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    yb(e, c[vg], c[Xj], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    yb(e, c[1], c[2], a * 7);
    return d;
  }
  function ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    yb(e, c[og], c[2], a * g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    yb(e, undefined, c[2], zs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    yb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    yb(e, c[wn], c[mi], Nj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    yb(e, c[Vn], c[pu], a * 12);
    Tb(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    yb(e, c[Wg]);
    Tb(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    yb(e, c[8]);
    return d;
  }
  const sd = Ab;
  function hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    Pb(e, lo, a * 60, a * ek);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = Ng;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    Pb(e, 7, a * 60, ib * a);
    yb(e, c[$r], c[uj], 4);
    e.rotate(0.64);
    Pb(e, Tk, a * 40, a * 10);
    yb(e, c[R], c[4], Yr);
    e.rotate(0.12);
    Pb(e, Tl, a * 23, a * 5);
    e.restore();
    yb(e, c[ul]);
    return d;
  }
  function ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(yh * a, a * we);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    yb(d, b[ho]);
    d.globalAlpha = vg;
    d.translate(a * -15, a * -Pj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    yb(d, b[uq], b[2], a * Eg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    yb(d, b[3], b[Gt], a * ys);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    yb(d, b[3], b[Oj], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    yb(d, b[Gt], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    yb(d, b[Ia], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    yb(d, b[sd], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    yb(d, b[Ab], b[3], Og * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    yb(d, Eh, b[Og], a * Ik);
    return c;
  }
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : y;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    Pb(e, bk, a * 60, a * 10);
    e.restore();
    yb(e, c[Hb]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    Pb(e, 9, a * 60, a * 10);
    yb(e, c[Ws], c[2], oo);
    e.rotate(-0.32);
    Pb(e, bk, a * 38, cl * a);
    yb(e, c[3], c[4], 4);
    e.rotate(0.68);
    Pb(e, 9, a * 20, a * Wh);
    yb(e, c[5], c[Rb], jn);
    e.restore();
    return d;
  }
  function ud(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var i = b * 142;
    var a = g / it;
    var j = i / rb;
    e.width = g;
    e.height = i;
    f.translate(a, j + Vt * b);
    f.globalAlpha = c ? 0.5 : 1;
    Tb(f, 0, fs, b * 60);
    yb(f, d[gj]);
    f.translate(gj, b * -7);
    f.globalAlpha = 1;
    Tb(f, 0, Ob, b * 60);
    yb(f, d[1], d[Ci], b * 4);
    Tb(f, 0, 0, b * 40);
    yb(f, d[wn]);
    Tb(f, 0, Go, b * 25);
    yb(f, d[Qa], d[5], b * ct);
    return e;
  }
  function bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * lq);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * Gs);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, lj * a);
    e.closePath();
    yb(e, c[0], c[bt], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    yb(e, c[2], c[Kb], or * a);
    return d;
  }
  const vd = iq;
  function dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Pb(e, dn, a * 146, a * 30);
    e.restore();
    yb(e, c[Xa]);
    e.globalAlpha = $q;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Pb(e, 6, a * 146, a * 30);
    e.restore();
    yb(e, c[1], c[kg], nb * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Pb(e, 6, a * 105, a * 30);
    e.restore();
    yb(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Pb(e, 6, a * 66, a * 30);
    e.restore();
    yb(e, c[Ik], c[uj], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    Pb(e, 7, a * 17, a * _j);
    e.restore();
    yb(e, c[Vh]);
    e.save();
    e.translate(a * 163, a * 168);
    Pb(e, nj, a * 25, a * 8);
    e.restore();
    yb(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    Pb(e, 7, a * 11, a * 8);
    e.restore();
    yb(e, c[xg]);
    e.save();
    e.translate(a * 167, a * 122);
    Pb(e, Wg, a * 12, a * xh);
    e.restore();
    yb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    yb(e, pl, c[pn], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, hi * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    yb(e, Eh, c[nq], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, hn * a);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    yb(e, C, c[2], a * ct);
    return d;
  }
  function cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (zt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      Tb(e, a * 44, a * 55, a * 41);
      yb(e, c[hk]);
    }
    e.globalAlpha = vg;
    Tb(e, a * 44, a * 45, a * 41);
    yb(e, c[$q], c[nl], a * xs);
    Tb(e, a * 44, a * 45, a * 31);
    yb(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    wb(e, a * -9, a * -25.5, a * tj, a * 51, a * 30);
    e.restore();
    yb(e, c[Io], c[qa], a * cn);
    e.save();
    e.translate(a * 45, a * 45);
    wb(e, a * -26, a * -Mh, a * 52, a * 18, a * 30);
    e.restore();
    yb(e, c[4], c[oo], a * 2);
    Tb(e, a * 45, a * 29, a * 7);
    yb(e, c[Gs]);
    Tb(e, a * 45, a * 61, a * 7);
    yb(e, c[ul]);
    Tb(e, a * 28, a * 45, at * a);
    yb(e, c[5]);
    Tb(e, a * 62, a * 45, a * 7);
    yb(e, c[bb]);
    return d;
  }
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    yb(e, c[Hb], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    yb(e, c[Xa], c[1], a * Zq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    yb(e, c[0], c[ck], a * Zq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * Hl, a * 93.5, a * Pq, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    yb(e, c[Og], c[3], a * _s);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Cn, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    yb(e, c[8], c[Zl], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    yb(e, c[ya]);
    e.globalAlpha = 0.5;
    e.translate(Bs, _g * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * yh, a * 122, Fa * a, a * 129);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = bt;
    e.translate(0, -Qh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * qg, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, we * a, a * 103);
    e.bezierCurveTo(Un * a, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, Ao * a, a * 127);
    e.closePath();
    yb(e, c[Yr], c[5], nt * a);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    wb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    yb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    wb(e, a * -13.5, a * -ql, a * 27, a * 28, a * 4);
    e.restore();
    yb(e, c[uq], c[2], a * 5);
    return d;
  }
  function Cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * Cg, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * zs, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * wk, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    yb(e, c[Bs]);
    e.translate(a * -Sb, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, Jg * a, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    yb(e, c[Ng], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * Aa, a * 239, et * a, a * 159);
    e.bezierCurveTo(br * a, a * 76, a * 75, Ol * a, a * 165, a * 13);
    e.bezierCurveTo(a * 233, cs * a, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    yb(e, c[3], c[Ik], a * Pj);
    return d;
  }
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : $r;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    Pb(e, xg, a * 146, a * 30);
    e.restore();
    yb(e, c[gj]);
    e.globalAlpha = bq;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    Pb(e, Sg, a * 146, a * 30);
    e.restore();
    yb(e, c[Dj], c[kg], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(dt);
    Pb(e, pi, a * 105, a * 30);
    e.restore();
    yb(e, c[wn], c[Ia], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Eu);
    Pb(e, 6, a * 66, a * 30);
    e.restore();
    yb(e, c[va], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    Pb(e, 6, a * 31, a * 30);
    e.restore();
    yb(e, c[wr], c[f], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    yb(e, gg, c[2], nb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, Fg * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    yb(e, fn, c[Ir], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, qr * a);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    yb(e, Bj, c[2], a * 8);
    return d;
  }
  function fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : Dj;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    Pb(e, 8, a * 60, a * 10);
    yb(e, c[jg]);
    e.restore();
    e.globalAlpha = y;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(uq);
    Pb(e, kq, a * 60, a * 10);
    yb(e, c[bq], c[2], jo);
    e.rotate(0.56);
    Pb(e, 8, a * 40, a * ok);
    yb(e, c[Ds], c[qa], jo);
    e.rotate(0.28);
    Pb(e, 8, a * 28, ct * a);
    yb(e, c[Gs]);
    e.restore();
    return d;
  }
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * lu);
    e.globalAlpha = b ? 0.5 : bh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Ob, a * -za);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Aq, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, ko * a, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    yb(e, c[bq], c[nl], a * vi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    yb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    yb(e, c[3], c[Sa], vi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    yb(e, c[4], c[2], Xn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    yb(e, c[Ik], c[2], jl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    yb(e, c[Dl], c[nl], cl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    yb(e, c[3], c[2], a * Cg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    yb(e, c[Ia], c[2], a * 10);
    return d;
  }
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(ho, a * 4);
    if (zt === gj) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      Pb(e, ar, a * 41, a * 10);
      yb(e, c[lt]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    Pb(e, 8, a * 41, a * 10);
    yb(e, c[El], c[2], a * Ah);
    e.rotate(0.56);
    Pb(e, Nl, a * 33, Hh * a);
    yb(e, c[Xg], c[xs], Ah * a);
    e.rotate(0.28);
    Pb(e, 8, a * 24, a * 8);
    yb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    wb(e, a * -re, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    yb(e, c[Fl], c[Io], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(ho);
    wb(e, a * -26, a * -Oq, a * 52, a * yt, a * 30);
    e.restore();
    yb(e, c[4], c[Eg], a * 2);
    Tb(e, a * 45, a * 29, vh * a);
    yb(e, c[5]);
    Tb(e, a * 45, a * 61, a * 7);
    yb(e, c[5]);
    Tb(e, a * 28, a * 45, Do * a);
    yb(e, c[O]);
    Tb(e, a * 62, a * 45, a * vh);
    yb(e, c[wr]);
    return d;
  }
  function wd(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 175;
    e.height = a * 169;
    f.globalAlpha = 0.5;
    f.translate(dh, a * Xg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * ij, a * 139);
    f.bezierCurveTo(a * Fo, a * 163, a * 22, a * 156, a * 53, a * 157);
    f.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    f.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    f.closePath();
    yb(f, d[ho]);
    f.globalAlpha = kr;
    f.translate(ks, a * -Jh);
    f.save();
    f.translate(a * 86.5, a * 81.5);
    wb(f, a * -66.5, a * -65.5, a * 133, a * 131, Qg * a);
    f.restore();
    yb(f, d[hj], d[Pn], Gs * a);
    f.save();
    f.translate(a * 84.5, a * 79);
    wb(f, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    f.restore();
    yb(f, d[3], d[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 42, a * 54);
    f.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    f.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    f.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    f.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    f.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    f.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    f.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    f.closePath();
    yb(f, d[Qa], d[wr], a * 5);
    f.save();
    f.translate(a * 28, a * 24);
    f.rotate(0);
    wb(f, a * -14, a * -14, a * 28, a * 28, a * 4);
    f.restore();
    yb(f, d[kr], d[Pn], a * 5);
    f.save();
    f.translate(a * 143, a * 23);
    f.rotate(dt);
    wb(f, a * -14, a * -14, a * 28, a * 28, Yr * a);
    f.restore();
    yb(f, d[y], d[2], a * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 55, a * 80);
    f.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    f.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    f.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    f.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    f.closePath();
    yb(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 17, a * 112);
    f.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    f.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    f.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    f.closePath();
    yb(f, d[8], d[9], bb * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 127, a * 111);
    f.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    f.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    f.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    f.closePath();
    yb(f, d[9]);
    f.globalAlpha = 0.5;
    f.translate(0, a * Ds);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Ms * a, a * 117);
    f.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    f.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    f.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    f.bezierCurveTo(a * 127, a * 118, a * Pg, a * 122, b * a, a * 129);
    f.closePath();
    yb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(hk, a * -3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 14, a * 127);
    f.bezierCurveTo(a * l, a * 117, a * 12, a * 109, a * Sh, a * 103);
    f.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    f.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    f.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    f.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    f.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    f.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, la * a, a * 127);
    f.closePath();
    yb(f, d[jo], d[nt], br * a);
    f.save();
    f.translate(a * 27.5, a * 138.5);
    wb(f, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    f.restore();
    yb(f, d[or], d[cn], a * 5);
    f.save();
    f.translate(a * 143.5, a * 137);
    wb(f, a * -13.5, -D * a, a * 27, a * 28, a * 4);
    f.restore();
    yb(f, d[$r], d[2], a * Jb);
    return e;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    wb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    yb(e, c[jg]);
    e.save();
    e.translate(a * 170, Fg * a);
    wb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    yb(e, c[0]);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : Th;
    e.save();
    e.translate(a * 45, a * 384.5);
    wb(e, -Sh * a, a * -216.5, a * 30, a * 433, sh * a);
    e.restore();
    yb(e, c[hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * Lq, a * 615, a * Pa, a * 607, a * 27, a * 573);
    e.closePath();
    yb(e, c[Et]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * en, a * 96);
    e.closePath();
    yb(e, c[ho]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    yb(e, c[dh]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = Zk;
    e.save();
    e.translate(a * 45, a * 384.5);
    wb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    yb(e, c[$q], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, Tg * a, a * 607, a * 27, a * 573);
    e.closePath();
    yb(e, c[Jh], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    yb(e, c[fl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(tj * a, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    yb(e, c[3], c[Ik], a * ct);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    yb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    yb(e, c[pi], c[Vt], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    yb(e, c[8]);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(aq * a, a * aq);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    wb(e, a * -11.5, a * -226, a * 23, a * 452, a * ok);
    e.restore();
    yb(e, c[gj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    yb(e, c[Et]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    yb(e, c[Ob]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    yb(e, c[hk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    yb(e, c[0]);
    e.translate(a * -ko, a * -Ph);
    e.globalAlpha = Ng;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    wb(e, a * -11.5, a * -226, a * 23, a * 452, Hh * a);
    e.restore();
    yb(e, c[1], c[2], a * _j);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    yb(e, c[3], c[ll], lj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    yb(e, c[_g], c[T], Nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    yb(e, c[nt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    yb(e, c[6], c[nu], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    yb(e, c[8]);
    return d;
  }
  function xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ou, vi * a);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    wb(e, -Ah * a, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    yb(e, c[lt]);
    e.translate(ka, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Xe * a, Cg * a);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * _q, a * 38.5, a * xn, a * 41);
    e.closePath();
    yb(e, c[Bs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    yb(e, c[Ob]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Gr, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * Lq, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * Ln, a * 172);
    e.bezierCurveTo(a * cs, a * 160.5, a * 15, a * 160.5, hl * a, a * 149);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * Vs);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    yb(e, c[hk]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(Et, a * 10);
    e.translate(a * -Hl, a * -Ba);
    e.save();
    e.translate(a * 21, a * 102.5);
    wb(e, a * -4, a * -76.5, a * 8, a * 163, ok * a);
    e.restore();
    yb(e, c[bq], c[2], a * 4);
    e.translate(0, a * vi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, sh * a);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(tt * a, a * 38.5, a * 16, a * 38.5, xn * a, a * 41);
    e.closePath();
    yb(e, c[Ui], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, $r * a);
    e.bezierCurveTo(a * 28, a * 18, a * 28, Ct * a, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    yb(e, c[5], c[6], a * wk);
    e.translate(Hb, jg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, qg * a, a * 172);
    e.bezierCurveTo(a * Qk, a * 171.5, a * 14, a * 171.5, Lq * a, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * rg, a * 172);
    e.bezierCurveTo(a * rl, a * 160.5, a * 15, a * 160.5, wo * a, a * 149);
    e.closePath();
    yb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    yb(e, c[Wh]);
    return d;
  }
  function Jd(a, c, d) {
    var e = document.createElement("canvas");
    var g = e.getContext("2d");
    e.width = a * 115;
    e.height = a * 585;
    g.scale(-1, El);
    g.translate(a * -110, hk);
    g.translate(Yq * a, a * ok);
    g.globalAlpha = c ? 0.5 : Ws;
    g.save();
    g.translate(a * 51.5, a * 342);
    wb(g, a * -14.5, a * -225, a * 29, a * 450, a * Fk);
    g.restore();
    yb(g, d[fs]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 54, a * 83);
    g.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    g.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    g.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    g.closePath();
    yb(g, d[Yl]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 95, a * 97);
    g.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * ub);
    g.bezierCurveTo(a * 34, a * cl, a * 6, a * 43, Yo * a, a * 76);
    g.bezierCurveTo(a * 4, a * 98, sq * a, a * 130, a * 64, a * 130);
    g.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    g.closePath();
    yb(g, d[lt]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 55, a * 176);
    g.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    g.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    g.closePath();
    yb(g, d[Xa]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 50, a * 176);
    g.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    g.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    g.closePath();
    yb(g, d[vl]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 35, a * 403);
    g.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    g.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    g.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    g.closePath();
    yb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 59, a * 67);
    g.bezierCurveTo(a * 47, a * 97, a * b, a * 117, a * si, a * 110);
    g.bezierCurveTo(a * 11, a * 115, M * a, a * 122, a * 23, a * 124);
    g.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    g.closePath();
    yb(g, d[ou]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 30, a * 125);
    g.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    g.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    g.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    g.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    g.closePath();
    yb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 35, a * 171);
    g.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    g.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    g.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    g.closePath();
    yb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 60, a * 68);
    g.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    g.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    g.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    g.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    g.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    g.closePath();
    yb(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 71, a * 172);
    g.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    g.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    g.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    g.closePath();
    yb(g, d[Et]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 35, a * 151);
    g.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    g.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    g.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    g.closePath();
    yb(g, d[Xa]);
    g.translate(a * -tu, -ok * a);
    g.globalAlpha = Zn;
    g.save();
    g.translate(a * 51.5, a * 342);
    wb(g, a * -14.5, a * -225, a * 29, a * 450, a * Ns);
    g.restore();
    yb(g, d[vg], d[nl], a * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 54, a * 83);
    g.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    g.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    g.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    g.closePath();
    yb(g, d[Xg], d[4], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 95, a * 97);
    g.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, za * a);
    g.bezierCurveTo(a * 34, jl * a, za * a, a * 43, a * 5, a * 76);
    g.bezierCurveTo(a * 4, a * 98, yh * a, a * 130, a * 64, a * 130);
    g.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    g.closePath();
    yb(g, d[5], d[f], a * lu);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 35, a * 403);
    g.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    g.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    g.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    g.closePath();
    yb(g, d[7], d[8], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 37, a * 427);
    g.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    yb(g, undefined, d[8], a * Vs);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 36, a * 448);
    g.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    yb(g, undefined, d[_j], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 55, a * 176);
    g.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    g.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    g.closePath();
    yb(g, d[3], d[Eg], a * jn);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 50, a * 176);
    g.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    g.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    g.closePath();
    yb(g, d[Ia], d[qa], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 59, a * 67);
    g.bezierCurveTo(a * 47, a * 97, tj * a, a * 117, ah * a, a * 110);
    g.bezierCurveTo(Ml * a, a * 115, a * 15, a * 122, a * 23, a * 124);
    g.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    g.closePath();
    yb(g, d[Vt], d[8], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 30, a * 125);
    g.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    g.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    g.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    g.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    g.closePath();
    yb(g, d[7], d[Os], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 35, a * 171);
    g.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    g.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    g.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    g.closePath();
    yb(g, d[7], d[kq], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 60, a * 68);
    g.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    g.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    g.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    g.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    g.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    g.closePath();
    yb(g, d[Tk], d[lj], a * _n);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 71, a * 172);
    g.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    g.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    g.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    g.closePath();
    yb(g, d[7], d[kq], a * Vh);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 35, a * 151);
    g.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    g.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    g.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    g.closePath();
    yb(g, d[7], d[8], a * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(a * 53, a * 113);
    g.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    g.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    g.closePath();
    yb(g, d[Qh], d[4], a * 6);
    return e;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(da * a, tl * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    wb(e, a * -Pg, a * -228.5, a * 30, a * 457, a * Xn);
    e.restore();
    yb(e, c[dt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    yb(e, c[fs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    yb(e, c[Bs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    yb(e, c[Bs]);
    e.translate(a * -20, -ko * a);
    e.globalAlpha = bq;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    wb(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    yb(e, c[uq], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    yb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    yb(e, c[3], c[Io], a * te);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    yb(e, c[Yo]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    yb(e, c[_n], c[7], a * I);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    yb(e, c[Sr]);
    return d;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(Et, Ur * a);
    if (zt === 0) {
      e.globalAlpha = b ? 0.5 : y;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      Pb(e, 7, a * 41, Ys * a);
      e.restore();
      yb(e, c[ka]);
    }
    e.globalAlpha = uq;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    Pb(e, lo, a * 41, a * 10);
    yb(e, c[1], c[2], a * 4);
    Pb(e, 7, a * 35, a * 10);
    yb(e, c[sd], c[4], a * qa);
    Pb(e, Tk, a * 23, a * Yo);
    e.restore();
    yb(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    wb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    yb(e, c[4], c[Io], Ir * a);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(ks);
    wb(e, a * -26, a * -9, a * 52, vn * a, a * 30);
    e.restore();
    yb(e, c[4], c[Dl], nq * a);
    Tb(e, a * 45, a * 29, Do * a);
    yb(e, c[Xk]);
    Tb(e, a * 45, a * 61, sb * a);
    yb(e, c[5]);
    Tb(e, a * 28, a * 45, a * 7);
    yb(e, c[br]);
    Tb(e, a * 62, a * 45, a * 7);
    yb(e, c[Xk]);
    return d;
  }
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = Aj * a;
    d.height = a * 648;
    e.translate(a * Ns, a * da);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    wb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    yb(e, c[lt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, Rq * a, a * 98);
    e.closePath();
    yb(e, c[dh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    yb(e, c[0]);
    e.translate(a * -20, -Ns * a);
    e.globalAlpha = og;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    wb(e, a * -13.5, a * -249.5, a * 27, a * 499, Cg * a);
    e.restore();
    yb(e, c[1], c[Ts], a * Wh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    yb(e, c[Gt], c[Ol], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    yb(e, undefined, c[4], a * yg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    yb(e, c[zq], c[rt], a * Os);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    yb(e, c[sb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    yb(e, c[5], c[Jl], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(kg, Ts);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    yb(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    yb(e, c[bn], c[Zl], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, -Lg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    yb(e, c[10]);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * hs, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * cs);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    yb(e, c[0]);
    e.translate(-Lg * a, a * -20);
    e.globalAlpha = Ws;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    yb(e, c[1], c[2], Cr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    yb(e, c[Qq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    yb(e, undefined, c[yl], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    yb(e, c[T], c[Jb], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    yb(e, Eh, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    yb(e, eg, c[5], I * a);
    return d;
  }
  function Id(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 90;
    e.height = a * 98;
    f.translate(0, Qa * a);
    if (zt === ou) {
      f.globalAlpha = c ? 0.5 : 1;
      f.save();
      f.translate(a * 44, a * 50);
      f.rotate(0.2);
      Pb(f, bk, a * 41, a * Hh);
      f.restore();
      yb(f, d[dt]);
    }
    f.globalAlpha = 1;
    f.save();
    f.translate(a * 44, a * 44);
    f.rotate(0.2);
    Pb(f, 9, a * 41, jl * a);
    yb(f, d[El], d[it], Yr * a);
    f.rotate(-0.32);
    Pb(f, 9, a * 32, a * 10);
    yb(f, d[3], d[4], a * 4);
    f.rotate(0.68);
    Pb(f, Yh, a * 23, a * 8);
    yb(f, d[5], d[Jl], a * _n);
    f.restore();
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(Go);
    wb(f, a * -9, a * -25.5, a * b, a * 51, a * 30);
    f.restore();
    yb(f, d[mi], d[Kg], a * 2);
    f.save();
    f.translate(a * 45, a * 45);
    f.rotate(0);
    wb(f, a * -26, -Il * a, a * 52, Uh * a, a * 30);
    f.restore();
    yb(f, d[T], d[4], a * Sa);
    Tb(f, a * 45, a * 29, a * 7);
    yb(f, d[5]);
    Tb(f, a * 45, a * 61, a * Vt);
    yb(f, d[zq]);
    Tb(f, a * 28, a * 45, a * sb);
    yb(f, d[O]);
    Tb(f, a * 62, a * 45, a * 7);
    yb(f, d[O]);
    return e;
  }
  const Sd = jl;
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : og;
    e.save();
    e.translate(a * 30, a * 84);
    wb(e, a * -rt, a * -66.5, a * ct, nh * a, Qg * a);
    e.restore();
    yb(e, c[Bs]);
    e.save();
    e.translate(a * 30, a * 45);
    wb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * Ar);
    e.restore();
    yb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    wb(e, a * -7.5, a * -5.5, Fh * a, a * 11, a * 10);
    e.restore();
    yb(e, c[fs]);
    e.save();
    e.translate(a * 30, a * 31);
    wb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    yb(e, c[ks]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    wb(e, -Vh * a, a * -66.5, Nl * a, dk * a, a * 10);
    e.restore();
    yb(e, c[y], c[Pn], kl * a);
    e.save();
    e.translate(a * 35, a * 40.140625);
    wb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * Ar);
    e.restore();
    yb(e, c[3], c[xs], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    wb(e, a * -7.5, a * -5.5, Hn * a, P * a, a * Qg);
    e.restore();
    yb(e, c[sd], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    wb(e, a * -26, a * -14.5, a * 52, a * 29, Jb * a);
    e.restore();
    yb(e, c[Ds], c[4], Qq * a);
    return d;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : Ng;
    e.translate(0, a * 5);
    e.save();
    e.translate(a * 85, a * 88);
    e.rotate(1.4);
    Pb(e, Wg, a * 60, a * 10);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = El;
    e.translate(a * 85, a * 80);
    for (var f = 0; f < 10; f++) {
      e.rotate(Math.PI / nt);
      e.save();
      e.translate(a * 65, 0);
      Pb(e, 3, a * 21, wk * a);
      yb(e, c[1], c[pn], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * 0, a * lt);
    e.rotate(1.4);
    Pb(e, Tl, a * 60, Hh * a);
    yb(e, c[3], c[4], a * Io);
    e.rotate(0.64);
    Pb(e, at, a * 40, a * sh);
    yb(e, c[5], c[6], a * Ol);
    e.rotate(0.12);
    Pb(e, 7, a * 23, a * Jb);
    e.restore();
    yb(e, c[7]);
    return d;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * sh);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * ko);
    wb(e, Xa, fs, a * 400, a * 220, a * 30);
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -da, -Ph * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * hg);
    e.bezierCurveTo(a * 381, a * ys, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * yh, a * 57);
    e.bezierCurveTo(a * cn, a * 55, va * a, a * 52, a * 4, a * 43);
    e.bezierCurveTo(mi * a, a * 30.5, a * 4, a * 30.5, a * Dl, a * 18);
    e.bezierCurveTo(a * Oa, a * 18.5, a * qe, a * 18.5, a * 28, Hq * a);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, G * a, a * 9, a * ul);
    e.closePath();
    yb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(as * a, a * 58, hg * a, a * 55, mh * a, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, rk * a, a * 108);
    e.bezierCurveTo(a * 1, a * 106, as * a, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    yb(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(ij * a, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * Yr, a * 156, a * hg, a * 118);
    e.bezierCurveTo(Ah * a, a * 110, a * pu, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    yb(e, c[ab], c[bt], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, Yr * a, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, fg * a, a * 213);
    e.bezierCurveTo(Ab * a, a * 213, a * Og, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    yb(e, c[R], c[y], a * 12);
    Tb(e, a * 41, a * 30, a * 14.7648230602334);
    yb(e, c[Ds], c[hj], Gq * a);
    Tb(e, a * 369, a * 30, a * 15.556349186104045);
    yb(e, c[3], c[1], a * et);
    Tb(e, a * 364, a * 190, a * 15.620499351813308);
    yb(e, c[3], c[1], a * 12);
    Tb(e, a * 41, a * 186, a * 15.556349186104045);
    yb(e, c[Oj], c[1], a * 12);
    return d;
  }
  function Rd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    yb(d, b[0]);
    return c;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.translate(hk, a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    Pb(e, vh, a * 60, a * 10);
    e.restore();
    yb(e, c[ka]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = 0; f < 10; f++) {
      e.rotate(Math.PI / Xk);
      e.save();
      e.translate(a * 65, gj);
      Pb(e, Kl, a * 21, Io * a);
      yb(e, c[bq], c[yl], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * 0, Eu * a);
    e.rotate(0.2);
    Pb(e, 9, a * 60, a * tu);
    yb(e, c[3], c[xs], a * 4);
    e.rotate(-0.32);
    Pb(e, Oq, a * 38, a * 10);
    yb(e, c[5], c[kh], a * 4);
    e.rotate(0.68);
    Pb(e, Ma, Fq * a, a * yn);
    yb(e, c[kb], c[Sr], iq * a);
    e.restore();
    return d;
  }
  function Gd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    yb(d, b[Hb]);
    return c;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * kh, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * dn, a * 28, a * 6, a * 37, a * za);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, _h * a);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    yb(e, c[ou]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    yb(e, c[jg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * bn, a * 103);
    e.bezierCurveTo(Rg * a, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    yb(e, c[Xa]);
    e.translate(ka, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * rt, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, Gt * a, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    yb(e, c[uq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * wg, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    yb(e, c[kr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * Gs, a * 99, a * 5, a * 101, a * xh, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    yb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * nu);
    e.bezierCurveTo(a * 48, oo * a, a * 57, a * 4, a * 64, Cg * a);
    e.closePath();
    yb(e, c[Xj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(kq * a, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    yb(e, c[pn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    yb(e, c[uj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    yb(e, c[Ts]);
    return d;
  }
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * ok, a * ek);
    if (c == bh) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, nt * a);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * Io);
      e.bezierCurveTo(a * 397, a * jo, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * Ir, a * 55, wk * a, a * 52, xs * a, a * 43);
      e.bezierCurveTo(jo * a, a * 30.5, T * a, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, Ul * a, a * 18.5, a * 28, Nn * a);
      e.bezierCurveTo(a * 18.5, a * mk, a * 18.5, a * 12, Il * a, a * 5);
      e.closePath();
      yb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(ul * a, a * 70);
      e.bezierCurveTo(Ba * a, a * 58, a * 5, a * 55, a * gl, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * sq, a * 108);
      e.bezierCurveTo(a * Th, a * 106, a * 5, a * 106, a * nt, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, _n * a, a * 71);
      e.closePath();
      yb(e, b[_g], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * Pn, a * 159, a * 4, a * 156, O * a, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      yb(e, b[3], b[Ab], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * vg, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, Mk * a, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * Ir, a * 213, qa * a, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      yb(e, b[Oj], b[Ia], a * 32);
      Tb(e, a * 41, a * 30, a * 14.7648230602334);
      yb(e, b[3], b[sd], a * 32);
      Tb(e, a * 369, a * 30, a * 15.556349186104045);
      yb(e, b[wq], b[yr], a * 32);
      Tb(e, a * 364, a * 190, a * 15.620499351813308);
      yb(e, b[Ds], b[wn], a * 32);
      Tb(e, a * 41, a * 186, a * 15.556349186104045);
      yb(e, b[sd], b[3], a * 32);
    } else if (rb == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * Gs);
      e.bezierCurveTo(a * 381, a * it, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * Ik, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * va, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * va, a * 30.5, a * mi, a * 30.5, wk * a, a * tg);
      e.bezierCurveTo(a * Rj, a * 18.5, a * Rj, a * 18.5, a * 28, Hj * a);
      e.bezierCurveTo(a * 18.5, a * Fh, a * 18.5, a * 12, Mi * a, a * nt);
      e.closePath();
      yb(e, b[3], b[wn], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * nt, a * 55, ds * a, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * wr, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      yb(e, b[wq], b[Ds], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(uj * a, a * 159, a * 4, a * 156, a * fl, a * 118);
      e.bezierCurveTo(Qa * a, a * 110, za * a, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      yb(e, b[Qh], b[Ui], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(Io * a, a * 183);
      e.bezierCurveTo(a * kr, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(Qq * a, a * 213, uj * a, a * 213, qa * a, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      yb(e, b[3], b[3], a * 32);
      Tb(e, a * 41, a * 30, a * 14.7648230602334);
      yb(e, b[Qh], b[3], a * 32);
      Tb(e, a * 369, a * 30, a * 15.556349186104045);
      yb(e, b[3], b[3], a * 32);
      Tb(e, a * 364, a * 190, a * 15.620499351813308);
      yb(e, b[3], b[Jh], a * 32);
      Tb(e, a * 41, a * 186, a * 15.556349186104045);
      yb(e, b[Jh], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, Dl * a, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * Ls, a * 55, a * 4, a * 52, a * xs, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, Qa * a, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * di, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * Fh, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    yb(e, b[bq], b[Et], G * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * nt, a * 70);
    e.bezierCurveTo(nt * a, a * 58, a * 5, a * 55, gl * a, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(Zn * a, a * 106, Gs * a, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * vd, a * 71);
    e.closePath();
    yb(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Oh, a * 158);
    e.bezierCurveTo(a * cn, a * 159, a * Ah, a * 156, a * 5, a * 118);
    e.bezierCurveTo(Fl * a, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    yb(e, b[El], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, Ls * a, a * 213, xs * a, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    yb(e, b[2], b[0], a * 12);
    Tb(e, a * 41, a * 30, a * 14.7648230602334);
    yb(e, b[kg], b[Bs], al * a);
    Tb(e, a * 369, a * 30, a * 15.556349186104045);
    yb(e, b[ys], b[0], a * 12);
    Tb(e, a * 364, a * 190, a * 15.620499351813308);
    yb(e, b[Sa], b[0], a * 12);
    Tb(e, a * 41, a * 186, a * 15.556349186104045);
    yb(e, b[2], b[0], a * 12);
    return d;
  }
  function Od(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    wb(d, 0, 0, Aa, 35, 7);
    yb(d, b[0]);
    return c;
  }
  function Nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    wb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    yb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    wb(e, a * -78, a * -54.5, a * 156, a * 109, Lg * a);
    e.restore();
    yb(e, c[1], c[nl], oo);
    e.save();
    e.translate(a * 81, a * 58);
    wb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    yb(e, c[Jh], c[4], va);
    e.save();
    e.translate(a * 79, a * 54);
    wb(e, a * -34, a * -40, a * 68, a * 88, Hg * a);
    e.restore();
    yb(e, undefined, c[br], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, Ga * a);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    yb(e, Zr, c[6], wk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, Bl * a);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    yb(e, undefined, c[6], Ur);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, _n * a);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    yb(e, Sn, c[7], jo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * jn);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    yb(e, Sn, c[Zq], 4);
    e.save();
    e.translate(a * 79, a * 113);
    wb(e, -Fo * a, a * -2, a * 36, a * mi, a * 20);
    e.restore();
    yb(e, Pr, c[lj], 4);
    e.save();
    e.translate(a * 75, a * 118);
    wb(e, -lu * a, a * -2.5, da * a, a * 5, a * 20);
    e.restore();
    yb(e, c[xh]);
    return d;
  }
  function qd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    yb(d, b[0]);
    return c;
  }
  function Hd(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (vl == c) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      yb(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      yb(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      yb(d, b[0]);
    }
    return e;
  }
  function Ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * pn, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(bh * a, a * 77, a * jo, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * _k, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * Fo, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    yb(e, c[Go], c[Dj], 4);
    return d;
  }
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * Ha, a * 129, a * 18, a * 114, J * a);
    e.bezierCurveTo(a * 51, Eu * a, a * 36, a * tt, a * 34, a * 16);
    e.bezierCurveTo(Nl * a, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    yb(e, c[nl], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    yb(e, c[0], c[vg], Ik);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * aq, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * Br, a * 49, Rg * a, a * 49, sq * a, a * 54);
    e.bezierCurveTo(va * a, a * 43, a * 10, a * 35, Dh * a, a * 32);
    e.closePath();
    yb(e, c[ho], c[1], oo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * Qs, a * 54);
    e.closePath();
    yb(e, c[0], c[vg], Eg);
    return d;
  }
  function Kd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    yb(d, b[Yl]);
    return c;
  }
  function Vd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    yb(d, b[0]);
    return c;
  }
  function Xd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * Wo;
    d.globalAlpha = 0.5;
    d.fillStyle = b[Et];
    d.fillRect(0, Et, c.width, c.height);
    return c;
  }
  function Zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    yb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    yb(e, c[sd], c[4], a * xh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    yb(e, c[3], c[4], kq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    yb(e, c[5], c[6], a * bn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    yb(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    yb(e, c[1], c[Og], a * ct);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    yb(e, c[7], c[Os], Nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    yb(e, c[sg], c[Cr], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    yb(e, gg, c[8], a * te);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    yb(e, uh, c[Zj], kq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    yb(e, c[7], c[ar], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    yb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    yb(e, c[wn], c[Io], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    yb(e, c[3], c[jo], a * 8);
    return d;
  }
  function $d(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var h = Fd(vg * b, true, d);
    g.drawImage(h, b * 0, ho * b);
    if (e == vg) {
      g.translate(hi * b, b * 0);
      Tb(g, b * 113, b * 120, b * 66);
      yb(g, Kk, d[4], b * ch);
      h = fu(b * 0.65, Mg, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(h, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      yb(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(Za * b, b * 0);
      Tb(g, b * 113, b * 120, b * 66);
      yb(g, undefined, d[xs], b * fh);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      wb(g, b * -40.5, b * -29.5, b * 81, b * 59, hl * b);
      g.restore();
      yb(g, "#dff2f7", "#187484", b * 7);
      Tb(g, b * 22, b * 82, pj * b);
      yb(g, "#dff2f7", "#187484", b * 7);
      Tb(g, b * 145, b * 82, ea * b);
      yb(g, "#dff2f7", "#187484", sg * b);
      h = Gu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 10, b * 85);
      h = Gu(b * 0.5, true, ["#80500b", fj[ao]]);
      g.drawImage(h, b * 50, b * 85);
      h = Gu(b * 0.5, zj, ["#80500b", fj[Sq]]);
      g.drawImage(h, b * 90, b * 85);
      h = Hu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Hu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Hu(b * Zn, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 125);
      h = Hu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 50, b * 115);
      h = Hu(kr * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, Aj * b);
      h = Hu(Th * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 80, b * 120);
      h = Hu(og * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 110, b * 125);
      h = Hu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * Fg, b * lt);
      Tb(g, b * 113, b * 120, b * 66);
      yb(g, undefined, d[va], b * Ga);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      wb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      yb(g, undefined, d[Gj], b * ll);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      yb(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      yb(g, Eh, d[4], Ug * b);
    } else if (e == jo) {
      g.scale(y, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, vd * b);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      yb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, ib * b);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      yb(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(_s * b, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      yb(g, undefined, d[fl], b * 14);
      g.translate(b * 10, Hb * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      yb(g, undefined, d[hg], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      yb(g, dq, d[5], b * ql);
      g.translate(b * 10, b * Sd);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      yb(g, pl, d[5], b * Pq);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, hb * b);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      yb(g, undefined, d[5], b * 14);
    }
    return f;
  }
  function ec(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var i = b * 172;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + _s * b);
    f.globalAlpha = c ? 0.5 : Yl;
    Tb(f, Eu, 0, b * 60);
    yb(f, d[0]);
    f.globalAlpha = og;
    f.translate(Hb, -lo * b);
    f.save();
    for (var h = 0; h < Cg; h++) {
      f.rotate(Math.PI / Gj);
      f.save();
      f.translate(b * 65, 0);
      Pb(f, Qh, b * 20, b * Qa);
      yb(f, d[bt], d[kg], b * mi);
      f.restore();
    }
    f.restore();
    Tb(f, Xa, Ob, b * 60);
    yb(f, d[Gt], d[4], b * Ur);
    Tb(f, 0, 0, b * 40);
    yb(f, d[5]);
    Tb(f, Ob, fs, b * 25);
    yb(f, d[6], d[7], b * 8);
    return e;
  }
  function ic(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    Tb(d, a * 126.5, a * 134, a * 119);
    yb(d, b[Et]);
    d.globalAlpha = 1;
    Tb(d, a * 126.5, a * 124, a * 119);
    yb(d, b[og], b[2], xs * a);
    Tb(d, a * 126.5, a * 127, a * 100);
    yb(d, b[3]);
    d.globalAlpha = 0.5;
    Tb(d, a * 126.5, a * 135, a * 81);
    yb(d, b[0]);
    d.globalAlpha = 1;
    Tb(d, a * 126.5, a * 125, a * 84);
    yb(d, b[Ur], b[Yo], a * 4);
    Tb(d, a * 126.5, a * 125, a * 61);
    yb(d, b[Rb], b[Ka], Qa * a);
    d.globalAlpha = 0.5;
    Tb(d, a * 126.5, a * 134, a * 40);
    yb(d, b[8]);
    d.globalAlpha = 1;
    Tb(d, a * 126.5, a * 125, a * 40);
    yb(d, b[9]);
    return c;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : uq;
    e.translate(dt, Qh * a);
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    Pb(e, 7, a * 60, tu * a);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = 0; f < 10; f++) {
      e.rotate(Math.PI / br);
      e.save();
      e.translate(a * 65, 0);
      Pb(e, _g, a * 21, Ol * a);
      yb(e, c[1], c[2], oo * a);
      e.restore();
    }
    e.save();
    e.translate(a * 0, a * 0);
    e.rotate(Zk);
    Pb(e, _j, a * 60, ib * a);
    yb(e, c[kl], c[4], a * 4);
    e.rotate(0.56);
    Pb(e, _j, a * 40, a * 10);
    yb(e, c[5], c[6], Eg * a);
    e.rotate(0.28);
    Pb(e, 8, a * 28, a * 8);
    yb(e, c[qh]);
    e.restore();
    return d;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : Ws;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, lq * a, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, yh * a, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    yb(e, c[lt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * Go, a * 105.640625, a * 8, a * 83.640625, Hh * a, a * 84.640625);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = kr;
    e.translate(0, a * -O);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(Wg * a, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * Cr, a * 73.640625);
    e.closePath();
    yb(e, c[Zn], c[2], xs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    yb(e, c[sd], c[rb], a * Qa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    yb(e, undefined, c[2], Ik * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    yb(e, ml, c[uj], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(Ga * a, a * 84.640625, a * 9, a * 86.640625, lo * a, a * 78.640625);
    e.bezierCurveTo(a * ub, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    yb(e, c[Xg], c[4], Kg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, nb * a, a * 83.640625, Ks * a, a * 84.640625);
    e.closePath();
    yb(e, c[Jh], c[Kg], a * 4);
    return d;
  }
  function oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    yb(d, b[0]);
    return c;
  }
  function rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    Tb(d, a * 86.5, a * 98, a * 80);
    yb(d, b[Go]);
    d.globalAlpha = 1;
    Tb(d, a * 86.5, a * 89, a * 81);
    yb(d, b[kr], b[2], a * 4);
    Tb(d, a * 86.5, a * 86, a * 59);
    yb(d, b[3], b[4], ll * a);
    d.globalAlpha = 0.5;
    Tb(d, a * 86.5, a * 95, a * 34);
    yb(d, b[0]);
    d.globalAlpha = 1;
    Tb(d, a * 86.5, a * 89, a * 34);
    yb(d, b[Ba]);
    return c;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    yb(d, b[gj]);
    return c;
  }
  function sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    Tb(d, a * 74.5, a * 85, a * 66);
    yb(d, b[Hb]);
    d.globalAlpha = 1;
    Tb(d, a * 75.5, a * 72.5, a * 67);
    yb(d, b[$q], b[2], Ah * a);
    Tb(d, a * 75.5, a * 73.5, a * 54);
    yb(d, b[Oj]);
    d.globalAlpha = 0.5;
    Tb(d, a * 74.5, a * 80.5, a * 39);
    yb(d, b[qa]);
    d.globalAlpha = Th;
    Tb(d, a * 74.5, a * 74.5, a * 37);
    yb(d, b[Gs]);
    return c;
  }
  const hc = Ar;
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, Pj * a);
    e.globalAlpha = b ? 0.5 : y;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    yb(e, undefined, c[hk], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = og;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    yb(e, c[3], c[cn], a * 12);
    e.translate(jg, a * 25);
    e.globalAlpha = Ng;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    yb(e, c[Xk]);
    e.translate(gj, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    yb(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    yb(e, undefined, c[2], al * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    yb(e, Ji, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    yb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    yb(e, c[Ol], c[Og], vk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    yb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * Vg, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    yb(e, Kk, c[2], a * 11);
    return d;
  }
  function gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, Ph * a, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * cj, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    yb(e, c[Hb]);
    e.translate(dt, a * -10);
    e.globalAlpha = vg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    yb(e, c[Gs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    yb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(Di * a, a * 174, a * Al, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    yb(e, c[1], c[rb], Rh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    yb(e, c[Ui]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, hs * a, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    yb(e, undefined, c[2], a * Yo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    yb(e, c[4], c[Gj], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * al);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    yb(e, c[4], c[5], fl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    yb(e, c[4], c[5], a * nt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    yb(e, c[Kg], c[Rh], Jb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    yb(e, c[4], c[O], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    yb(e, c[4], c[Lj], Lj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    yb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    yb(e, c[4], c[as], Hl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    yb(e, c[Dl], c[5], a * nt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    yb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    yb(e, c[qa], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    yb(e, c[4], c[5], Jb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    yb(e, c[Yr], c[Yo], a * Jb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    yb(e, c[oo], c[wr], bb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, Rl * a, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    yb(e, c[4], c[ul], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    yb(e, c[4], c[5], a * Gs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    yb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, Oh * a, a * 96, a * Ul, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    yb(e, c[Dl], c[5], Gs * a);
    return d;
  }
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(-Hh * a, Sb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = og;
    e.translate(a * Qg, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    yb(e, c[1], c[Ci], a * 10);
    return d;
  }
  function bc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 170;
    e.height = a * 200;
    f.translate(a * 5, a * 15);
    if (bt == d) {
      f.translate(0, a * -Xk);
      Tb(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
      yb(f, c[1], c[5], Lg * a);
      Tb(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
      yb(f, c[Ws], c[5], a * 20);
      f.save();
      f.translate(a * 77.00003051757812, a * 31.267044067382812);
      wb(f, a * -6, a * -12.5, a * G, a * 25, a * ek);
      f.restore();
      yb(f, c[1], c[5], a * 20);
      f.save();
      f.translate(a * 77.00003051757812, a * 13.267044067382812);
      wb(f, a * -15, a * -10.5, a * 30, a * 21, Cg * a);
      f.restore();
      yb(f, c[1], c[O], a * Al);
    }
    Tb(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
    yb(f, c[ck], c[2], a * Vt);
    Tb(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
    yb(f, c[1], c[2], a * sg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18.000030517578125, a * 105.85795593261719);
    f.bezierCurveTo(a * 134.00003051757812, a * 104.85795593261719, a * 77.00003051757812, a * 104.85795593261719, a * 136.00003051757812, a * 103.85795593261719);
    f.closePath();
    yb(f, c[Ng], c[rb], a * 8);
    Tb(f, a * 77.00003051757812, a * 104.6761474609375, a * 32.55764119219941);
    yb(f, c[1], c[2], a * kq);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 112.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 62.03977966308594);
    f.closePath();
    yb(f, c[Ab], c[2], nb * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 48.03977966308594);
    f.bezierCurveTo(a * 82.00003051757812, a * 55.53977966308594, a * 82.00003051757812, a * 55.53977966308594, a * 86.00003051757812, a * 63.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 63.03977966308594, a * 78.00003051757812, a * 63.03977966308594, a * 70.00003051757812, a * 63.03977966308594);
    f.closePath();
    yb(f, c[Gt], c[Ts], a * Ol);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.00003051757812, a * 111.6761474609375);
    f.bezierCurveTo(a * 95.00003051757812, a * 97.1761474609375, a * 95.00003051757812, a * 97.1761474609375, a * 110.00003051757812, a * 82.6761474609375);
    f.closePath();
    yb(f, c[yr], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 76.6761474609375);
    f.bezierCurveTo(a * 111.50003051757812, a * 82.6761474609375, a * 111.50003051757812, a * 82.6761474609375, a * 116.00003051757812, a * 88.6761474609375);
    f.bezierCurveTo(a * 118.50003051757812, a * 81.6761474609375, a * 118.50003051757812, a * 81.6761474609375, a * 121.00003051757812, a * 74.6761474609375);
    f.closePath();
    yb(f, c[Ui], c[rb], Fl * a);
    Tb(f, a * 77.00003051757812, a * 105.03977966308594, a * 15.556349186104045);
    yb(f, c[3], c[2], a * Ah);
    f.save();
    f.translate(a * 77.00003051757812, a * 31.267044067382812);
    f.rotate(jg);
    wb(f, -pi * a, a * -12.5, Fh * a, a * 25, a * 10);
    f.restore();
    yb(f, c[bt], c[Pn], a * 7);
    f.save();
    f.translate(a * 77.00003051757812, a * 13.267044067382812);
    f.rotate(Hb);
    wb(f, -Ms * a, a * -10.5, a * 30, a * 21, a * Sb);
    f.restore();
    yb(f, c[Zk], c[ys], a * 7);
    return e;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    yb(e, oh, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    yb(e, undefined, c[1], a * Al);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    yb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    yb(e, c[1], c[ab], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    yb(e, c[Ng], c[Ts], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    yb(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    yb(e, c[or], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    yb(e, c[Gt]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    yb(e, gg, c[wn], a * 4);
    return d;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Yl, I * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = $r;
    e.translate(gj, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * _o, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    yb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    yb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * hh, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    yb(e, undefined, c[yl], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    yb(e, c[10], c[10], a * Ik);
    e.translate(hk, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    yb(e, c[Ds]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    yb(e, c[wq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    yb(e, c[kh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, Ha * a);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    yb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    yb(e, undefined, c[4], Qa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * nu, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    yb(e, Zr, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(dt);
    wb(e, -Cr * a, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    yb(e, c[Zq], c[2], a * Qa);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(gj);
    wb(e, a * -8, a * -23, a * 16, a * 46, a * ek);
    e.restore();
    yb(e, c[bn], c[cn], a * 4);
    Tb(e, a * 87, a * 39, a * 4.123105625617661);
    yb(e, c[Mi], c[2], a * Kg);
    Tb(e, a * 87, a * 60, a * 4.242640687119285);
    yb(e, c[Mi], c[Pn], a * oo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    yb(e, c[Wh], c[Xj], Ik * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * Ug, a * 77, gt * a, a * 74, a * 27, a * 80);
    e.closePath();
    yb(e, c[Ma], c[pn], a * wk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    yb(e, c[9], c[Ci], a * 4);
    Tb(e, a * 50, a * 80, a * 5);
    yb(e, c[9], c[Og], a * Fl);
    Tb(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    yb(e, c[Mh], c[Xj], a * 4);
    Tb(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    yb(e, c[9], c[Ci], a * 4);
    return d;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : Ng;
    e.translate(Qq, 3);
    wb(e, a * 24, a * 26, a * 70, Zi * a, a * 10);
    yb(e, c[0]);
    wb(e, a * 26, a * 70, a * 70, Zl * a, a * 10);
    yb(e, c[Ob]);
    wb(e, a * zq, a * wq, a * 22, a * 94, a * Gs);
    yb(e, c[0]);
    wb(e, a * 40, a * 3, a * 22, a * 94, wr * a);
    yb(e, c[vl]);
    wb(e, a * 75, a * Kb, a * 22, a * 94, a * 5);
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    wb(e, a * 24, a * 26, a * 70, a * zh, a * 10);
    yb(e, c[Ng]);
    wb(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    yb(e, c[1]);
    wb(e, a * 5, a * 3, a * 22, a * 94, a * br);
    yb(e, c[2], c[3], a * Yr);
    wb(e, a * 40, Kb * a, a * 22, a * 94, a * zq);
    yb(e, c[2], c[Oj], a * 4);
    wb(e, a * 75, a * Kb, a * 22, a * 94, a * 5);
    yb(e, c[pn], c[Qq], a * 4);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    yb(e, c[0], c[1], Aa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    yb(e, c[ab]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    yb(e, undefined, c[Zk], Db * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    yb(e, c[0], c[1], a * Sq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    yb(e, c[lt], c[y], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    yb(e, c[2], c[Ng], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    yb(e, c[ou], c[og], da * a);
    return d;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Lj, a * br);
    e.save();
    wb(e, a * 33, a * 53, a * 10, a * 98, a * Sd);
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    yb(e, c[dh]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -Jb, a * -Jb);
    e.save();
    wb(e, a * 33, a * 53, a * 10, a * 98, jl * a);
    yb(e, c[kr], c[2], a * Io);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    yb(e, c[Ui], c[mi], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    yb(e, c[5]);
    e.restore();
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : Dj;
    e.translate(-fl * a, a * jg);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    wb(e, a * -4.5, a * -39, a * nr, a * 78, a * 5);
    e.restore();
    yb(e, c[0], c[ou], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    wb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    yb(e, c[Bs], c[ho], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    wb(e, a * -26.5, -sq * a, a * 53, a * 30, a * 5);
    e.restore();
    yb(e, c[Eu], c[0], a * Kg);
    e.translate(nt * a, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    wb(e, a * -4.5, a * -39, a * 9, a * 78, a * Gj);
    e.restore();
    yb(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    wb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    yb(e, c[3], c[4], a * Eg);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    wb(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    yb(e, c[5], c[6], a * wk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    yb(e, c[_s], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    yb(e, c[qh], c[6], a * Ab);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    yb(e, c[9], c[8], Kl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    yb(e, c[ig], c[j], a * 3);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    yb(e, c[0], c[Ng], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    yb(e, c[0], c[$r], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    yb(e, Bj, c[$q], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    yb(e, undefined, c[$r], a * oo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    yb(e, Lh, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    yb(e, c[rb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    yb(e, c[kg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * wg, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    yb(e, c[2]);
    return d;
  }
  function fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : bt;
    e.translate(a * Jb, a * 5);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    yb(e, c[Yl], c[0], a * kh);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    yb(e, c[1], c[Ci], a * es);
    Tb(e, a * 220, a * 201, a * 130);
    yb(e, c[ig], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    yb(e, c[ul], c[jn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    yb(e, c[hg], c[6], Kg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    yb(e, c[br], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    yb(e, c[5], c[6], a * va);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    yb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, $g * a, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    yb(e, c[Xk], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    yb(e, c[10], c[vi], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    yb(e, c[sh], c[10], a * Dl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    yb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    yb(e, c[10], c[cl], Yr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    yb(e, oh, c[es], a * Sg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    yb(e, undefined, c[vd], pi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    yb(e, undefined, c[6], a * lu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    yb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    yb(e, undefined, c[6], a * rt);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    yb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    yb(e, Hi, c[Sg], a * pi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    yb(e, Lh, c[rt], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    yb(e, undefined, c[xg], a * _n);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, _r * a, a * 216, a * 307);
    e.closePath();
    yb(e, Eh, c[6], a * iq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    yb(e, oh, c[jn], Rb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    yb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * Jn, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    yb(e, Eh, c[Vh], a * xg);
    Tb(e, a * 222, a * 199, a * 120.74767078498864);
    yb(e, undefined, c[Kb], a * 40);
    Tb(e, a * 220, a * 200, a * 95.44108130150245);
    yb(e, undefined, c[2], a * Pg);
    Tb(e, a * 220, a * 201, a * 85);
    yb(e, Zr, c[qa], a * 10);
    e.globalAlpha = 0.5;
    Tb(e, a * 220, a * 201, a * 82);
    yb(e, c[Ok]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    yb(e, c[Go], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, -br * a);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    yb(e, c[8], c[2], a * 4);
    Tb(e, a * 63, a * 137, a * 25.632011235952593);
    yb(e, c[7], c[Sa], a * ll);
    return d;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    wb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    yb(e, c[gj]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    wb(e, a * -57.5, a * -54.5, a * 115, a * 109, sq * a);
    e.restore();
    yb(e, undefined, c[1], Tl * a);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    wb(e, a * -56, a * -55, a * 115, a * 109, Sh * a);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = bt;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    wb(e, a * -56, a * -55, a * 115, a * 109, a * Ln);
    e.restore();
    yb(e, undefined, c[Th], a * sg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    yb(e, undefined, c[bh], ib * a);
    return d;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    yb(e, c[0], c[0], Sb * a);
    e.translate(a * 0, a * -10);
    e.globalAlpha = Zk;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    yb(e, c[Og], c[sd], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    yb(e, c[it], c[kl], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    yb(e, c[2], c[Oj], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    yb(e, c[Xj], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    yb(e, c[or], c[1], Yq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    yb(e, c[1], c[$q], Hh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    yb(e, c[2], c[3], a * ib);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    yb(e, c[bq], c[1], Xn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    yb(e, c[2], c[Kb], a * cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    yb(e, c[2], c[yr], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    yb(e, c[2], c[Kb], hc * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    yb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    yb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    yb(e, c[Pn], c[3], a * cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    yb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    yb(e, c[1], c[og], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    yb(e, c[Ui]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    yb(e, c[pn], c[wn], a * 10);
    Tb(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    yb(e, c[4], c[hg], a * 1);
    Tb(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    yb(e, c[ll], c[5], bq * a);
    Tb(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    yb(e, c[Ah], c[bb], a * 1);
    Tb(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    yb(e, c[4], c[5], Ws * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    yb(e, c[oo], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    yb(e, c[6]);
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = Aq * a;
    e.globalAlpha = b ? 0.5 : or;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    wb(e, a * -19.5, a * -8.5, a * 39, a * gl, a * 10);
    e.restore();
    yb(e, c[dh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    yb(e, c[ho]);
    Tb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    yb(e, c[Hb]);
    e.globalAlpha = 1;
    e.translate(-Hh * a, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    wb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    yb(e, Kk, c[3], a * pu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    yb(e, undefined, c[Qq], a * kh);
    Tb(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    yb(e, pa, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    wb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    yb(e, c[El]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    yb(e, c[1]);
    Tb(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    yb(e, c[2], c[uq], a * xs);
    Tb(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    yb(e, c[sd], c[1], a * 4);
    Tb(e, a * 78, a * 44, da * a);
    yb(e, c[T]);
    return d;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, Aj * a, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    yb(e, c[Ik], c[Vn], a * qa);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * Is, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, Aq * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    yb(e, c[4], c[fl], a * 4);
    e.scale(1.1, 1.1);
    e.translate(-re * a, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(dh);
    wb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    yb(e, c[1], c[nq], a * Kg);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(gj);
    wb(e, a * -60.5, a * -18, a * 121, a * 30, a * hs);
    e.restore();
    yb(e, c[3], c[it], wk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, Wa * a, a * 160, Is * a);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, hh * a, a * 44, a * bl, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * Aj, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    yb(e, c[Kg], c[Ba], a * 4);
    e.translate(0, Yl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    yb(e, c[3], c[2], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    yb(e, c[3], c[Pn], a * Ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    yb(e, c[3], c[ys], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * Za, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    yb(e, c[6], c[2], a * 4);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Pb(e, 6, a * 40, a * 10);
    e.restore();
    yb(e, c[vl], c[1], a * Vn);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    Pb(e, 6, a * 25.11521001172521, a * Qg);
    e.restore();
    yb(e, c[ab], c[3], Hl * a);
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == $r) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, Uq * a, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * Di, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      yb(e, b[jo], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    yb(e, b[fs], b[og], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    yb(e, b[Pn], b[3], zl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * te, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, Qn * a, a * 188, a * 308);
    e.closePath();
    yb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    yb(e, b[3], b[R], a * Rn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    yb(e, b[Pn], b[3], a * zl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    yb(e, b[3], b[3], pj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    yb(e, b[2], b[Gt], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    yb(e, b[2], b[3], a * g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    yb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    yb(e, b[2], b[3], a * Fh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    yb(e, b[2], b[Kl], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    yb(e, b[Ci], b[wn], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    yb(e, b[3], b[3], Hs * a);
    return d;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, Eu);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, lt);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    yb(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(Bs);
    wb(e, a * -7, a * -Dl, qg * a, a * 8, a * 10);
    e.restore();
    yb(e, c[0]);
    e.translate(a * dh, lt);
    e.globalAlpha = 1;
    e.translate(a * 10, vl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    yb(e, c[R], c[4], Kb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-vg * a, jg);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    yb(e, c[Dj], c[2], wq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(Dj * a, Et);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    yb(e, c[Dj], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(Hb);
    wb(e, a * -7, a * -Qa, a * 14, a * 8, Ks * a);
    e.restore();
    yb(e, c[1], c[dj], a * 3);
    return d;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * Vn);
    e.globalAlpha = b ? dt : 0;
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    yb(e, undefined, c[Hb], a * 65);
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    yb(e, undefined, c[Bs], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    wb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    yb(e, c[ka]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    wb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    yb(e, c[Xa]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    wb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    yb(e, c[ou]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * Jb);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    yb(e, c[0]);
    e.translate(Ab, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    yb(e, c[hk]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    yb(e, c[0], c[0], a * lq);
    e.restore();
    e.globalAlpha = 1;
    e.translate(Ll * a, a * 35);
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    yb(e, undefined, c[nl], a * 95);
    Tb(e, a * 178.5, a * 172.828125, a * 150);
    yb(e, undefined, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    wb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    yb(e, c[1], c[Ir], a * u);
    e.save();
    e.translate(a * 136, a * 581.828125);
    wb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    yb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    wb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    yb(e, c[Ng], c[Ci], ie * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    yb(e, c[y]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * Gs);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    yb(e, c[bt]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    yb(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    yb(e, c[1], c[uq], a * kb);
    e.restore();
    return d;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    Tb(e, a * 69, a * 64, a * 48.16637831516918);
    yb(e, c[1]);
    e.globalAlpha = 0.7;
    Tb(e, a * 69, a * 64, a * 38.23105625617661);
    yb(e, c[2]);
    e.globalAlpha = 0.7;
    Tb(e, a * 69, a * 64, a * 32.01562118716424);
    yb(e, c[nl], c[yr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    yb(e, c[3]);
    return d;
  }
  function Bc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, nb);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Oq * a, a * 93);
    d.bezierCurveTo(a * no, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, bi * a, a * 75, a * oa, a * 75);
    d.bezierCurveTo(cj * a, a * 67, a * 13, a * 67, a * nu, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * D, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * sb, a * 75, a * bi, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * hi, a * 16, a * 105, zg * a);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, cj * a, a * 99, a * Os, a * 93);
    d.closePath();
    yb(d, b[dt]);
    d.globalAlpha = kr;
    d.translate(0, -_j);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(ya * a, a * 93);
    d.bezierCurveTo(a * ci, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(Zi * a, a * 83, a * 17, a * 93, a * Ah, a * 76);
    d.bezierCurveTo(P * a, a * 75, ah * a, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, Jk * a, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * tq, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * B);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, xn * a, a * 76, a * f);
    d.bezierCurveTo(a * 81, a * 12, a * 84, fg * a, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * hh, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    yb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    yb(d, b[yr]);
    Tb(d, a * 103, a * 110, a * 11);
    yb(d, b[4]);
    Tb(d, a * 55, a * 111, a * 11);
    yb(d, b[Kg]);
    Tb(d, a * 99, a * 107, a * 5);
    yb(d, b[1]);
    Tb(d, a * 51, a * 108, Xk * a);
    yb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    yb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-dj, ks);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    yb(d, b[3]);
    d.translate(Og, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * Bi, a * 95, a * 21, a * 95);
    d.bezierCurveTo(ya * a, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, el * a, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, ao * a, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * pg);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, Co * a, a * 76, a * Vs);
    d.bezierCurveTo(a * 81, a * 12, a * 84, Cs * a, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, Fg * a, a * 16, a * 105, $s * a);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * gs, a * 99, a * Wh, a * 93);
    d.closePath();
    yb(d, fn, b[yl], a * ll);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, x * a, a * 51, Lk * a, a * 33);
    d.bezierCurveTo(ij * a, a * 12, a * 21, Hn * a, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    yb(d, b[El], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, Rq * a);
    d.bezierCurveTo(a * 137, a * zs, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    yb(d, b[Zn], b[yl], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    yb(d, b[3]);
    return c;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    Pb(e, f, a * 43, a * ib);
    e.restore();
    yb(e, c[0], c[Ng], a * 3);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    yb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * cr, a * 15.3671875, Rj * a, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    yb(e, c[yr], c[T], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    wb(e, a * -49.5, a * -21.5, a * 99, a * 43, rl * a);
    e.restore();
    yb(e, c[Bs], c[1], Qa * a);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(dt);
    wb(e, a * -49, a * -12.5, a * 98, a * 25, a * Pj);
    e.restore();
    yb(e, c[yl], c[kr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    yb(e, c[Pn], c[Dj], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    yb(e, c[ab], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    yb(e, c[Ui], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    yb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ql, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * mi, a * 14.3671875, Wg * a, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    yb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    wb(e, a * -20.5, a * -20.5, a * 41, a * 41, Sd * a);
    e.restore();
    yb(e, undefined, c[5], a * mi);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    wb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    yb(e, c[3], c[Yr], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    wb(e, a * -10, a * -10, a * 20, a * Us, a * 5);
    e.restore();
    yb(e, c[6], c[lo], a * 4);
    return d;
  }
  function Ic() {
    new Date().getTime();
    function a(a) {
      var b = 0;
      for (var c = 0, d = 0; c < a.length; c++) {
        var e = a.charAt(c);
        if (e !== "_" && c !== 5) {
          if (e === "1") {
            b += Math.pow(2, d);
          }
          d++;
        }
      }
      return b;
    }
    ᐃⲆⲆⲆⲆⵠᐃᐃⲆ();
    ⵠᐃ[rs.ⲆΔᐃΔΔΔⲆ] = [Ⲇᐃ.ⲆⲆⵠΔΔⲆΔ, Ⲇᐃ.ⲆⵠⵠΔΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ] = [];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_010_000")] = [Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ⲆΔⵠⲆⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_010_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_010_000")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_011_000")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_010_000")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_011_010")] = [Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_011_011")] = [Ⲇᐃ.ⲆⲆⵠᐃⵠⲆᐃ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆΔᐃΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_110_000")] = [Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ⲆΔⵠⲆⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_110_010")] = [Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ⲆΔⵠⲆᐃⲆᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_110_110")] = [Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ᐃⲆᐃⵠⲆⵠⲆ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ⲆΔⵠⲆᐃⲆᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_111_000")] = [Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_111_111")] = [Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⲆⲆⵠᐃⵠⲆᐃ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_010_000")] = [Ⲇᐃ.ⲆΔⵠⲆⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_010_010")] = [Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_011_000")] = [Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_000")] = [Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")] = [Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_011_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_011_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_111_000")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_111_110")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_111_111")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_111_110")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("000_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_011_000")] = [Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_011_010")] = [Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_011_011")] = [Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⲆⲆⵠᐃⵠⲆᐃ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_000")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_011_010")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_010")] = [Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_010")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_110")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_010")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("011_111_111")] = [Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆⲆⵠᐃⵠⲆᐃ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_110_000")] = [Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃⵠᐃΔⲆⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_110_010")] = [Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_110_110")] = [Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_000")] = [Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃⵠᐃΔⲆⵠⵠ, Ⲇᐃ.ⵠⲆⵠᐃΔᐃⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_110")] = [Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ, Ⲇᐃ.ⵠⲆⵠᐃΔᐃⵠ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_111")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("110_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_110")] = [Ⲇᐃ.ᐃⲆΔⲆⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ, Ⲇᐃ.ⵠⲆⵠᐃΔᐃⵠ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_000")] = [Ⲇᐃ.ᐃⵠᐃΔⲆⵠⵠ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ⵠⲆⵠᐃΔᐃⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_111")] = [Ⲇᐃ.Ⲇⵠⵠⵠⵠⵠᐃ, Ⲇᐃ.ⲆΔⲆⲆΔ, Ⲇᐃ.ᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆⲆⵠᐃⵠⲆᐃ, Ⲇᐃ.ⲆⵠΔⲆⲆ, Ⲇᐃ.ⵠᐃᐃΔⲆ, Ⲇᐃ.ⲆⲆᐃΔⵠ, Ⲇᐃ.ΔⲆⵠᐃⵠΔΔ, Ⲇᐃ.ⲆⵠⵠΔⵠⵠⲆ, Ⲇᐃ.ᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃᐃᐃⵠΔΔⲆ, Ⲇᐃ.ᐃΔⵠΔⲆⲆᐃ, Ⲇᐃ.ⲆᐃⲆⲆᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠⲆᐃΔ, Ⲇᐃ.ⲆᐃⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⲆⵠ, Ⲇᐃ.ΔΔΔΔⲆ, Ⲇᐃ.ΔⵠΔᐃⲆᐃⵠ, Ⲇᐃ.ⲆⲆⲆⵠΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠⵠᐃ, Ⲇᐃ.ⲆΔᐃΔⲆ, Ⲇᐃ.ᐃΔⲆⵠΔ, Ⲇᐃ.ᐃⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ΔΔⲆ][a("111_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_010_000")] = [Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ⵠΔⵠΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_010_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_010_000")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_011_000")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_010_000")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_011_010")] = [Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_011_011")] = [Ⲇᐃ.ⵠᐃⲆⵠΔΔΔ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔⵠⵠΔΔ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_110_000")] = [Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⵠΔⵠΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_110_010")] = [Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ΔⲆΔᐃᐃⵠⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_110_110")] = [Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ⲆΔᐃΔΔᐃⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ΔⲆΔᐃᐃⵠⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_111_000")] = [Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_111_111")] = [Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.ⵠᐃⲆⵠΔΔΔ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_010_000")] = [Ⲇᐃ.ⵠΔⵠΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_010_010")] = [Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_011_000")] = [Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ᐃⲆⵠⲆᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_000")] = [Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")] = [Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_011_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_011_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_111_000")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_111_110")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_111_111")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_111_110")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("000_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("010_110_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_011_000")] = [Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ᐃⲆⵠⲆᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_011_010")] = [Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_011_011")] = [Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.ⵠᐃⲆⵠΔΔΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_000")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_011_010")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_010")] = [Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_010")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_110")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_010")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("011_111_111")] = [Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⵠᐃⲆⵠΔΔΔ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_110_000")] = [Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ΔⲆⵠᐃΔᐃⲆ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_110_010")] = [Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_110_110")] = [Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_000")] = [Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ΔⲆⵠᐃΔᐃⲆ, Ⲇᐃ.ᐃΔᐃⵠΔΔⲆ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_110")] = [Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ, Ⲇᐃ.ᐃΔᐃⵠΔΔⲆ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_111")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("110_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_110")] = [Ⲇᐃ.ⲆⲆΔⵠᐃ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ, Ⲇᐃ.ᐃΔᐃⵠΔΔⲆ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_011")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_110")];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_000")] = [Ⲇᐃ.ΔⲆⵠᐃΔᐃⲆ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ᐃΔᐃⵠΔΔⲆ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_111")] = [Ⲇᐃ.ⲆⵠᐃⲆᐃᐃΔ, Ⲇᐃ.ⲆⲆⵠⲆΔ, Ⲇᐃ.ΔⲆⲆⲆᐃ, Ⲇᐃ.ⵠᐃⲆⵠΔΔΔ, Ⲇᐃ.ⲆΔⵠΔΔ, Ⲇᐃ.Ⲇᐃⵠᐃⵠ, Ⲇᐃ.ΔΔᐃⵠⵠ, Ⲇᐃ.ΔΔΔⵠΔⵠΔ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔΔ, Ⲇᐃ.ΔᐃΔΔⵠ, Ⲇᐃ.ⲆⲆΔⵠⵠᐃⵠ, Ⲇᐃ.ΔᐃⵠΔᐃΔⲆ, Ⲇᐃ.ᐃⵠΔⵠⲆΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠΔ, Ⲇᐃ.ⵠⲆΔⲆᐃⵠⲆ, Ⲇᐃ.ⵠⵠⲆᐃⲆⲆΔ, Ⲇᐃ.ⵠΔⵠΔⲆ, Ⲇᐃ.ⲆⵠⲆⵠⵠ, Ⲇᐃ.ΔᐃⲆΔᐃΔⲆ, Ⲇᐃ.ΔΔᐃΔΔⵠΔ, Ⲇᐃ.ⲆⵠⲆⵠⵠΔΔ, Ⲇᐃ.ΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⵠⲆᐃ, Ⲇᐃ.ⲆⲆΔⵠᐃ];
    ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_010")] = ⵠᐃ[rs.ⵠⵠΔΔ][rs.ⵠⲆᐃ][a("111_111_110")];
    ⵠᐃ[rs.ⵠΔᐃⲆ] = [];
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_010_000")] = Ⲇᐃ.ᐃⲆΔᐃΔᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_010_010")] = Ⲇᐃ.ⲆⵠⲆⲆΔⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_011_000")] = Ⲇᐃ.ⲆⲆⵠΔⵠⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_011_010")] = Ⲇᐃ.ΔΔΔᐃΔΔᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_011_011")] = Ⲇᐃ.ΔⲆΔⵠᐃⵠΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_110_000")] = Ⲇᐃ.ⲆⲆᐃⵠᐃΔᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_110_010")] = Ⲇᐃ.ᐃⲆⵠΔΔΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_110_110")] = Ⲇᐃ.ΔⵠΔᐃⲆⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_111_000")] = Ⲇᐃ.Ⲇⵠⵠⵠᐃⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_111_010")] = Ⲇᐃ.ᐃᐃⵠⲆΔᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_111_011")] = Ⲇᐃ.ΔᐃⲆΔⵠⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_111_110")] = Ⲇᐃ.ΔⲆⵠΔⵠΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("000_111_111")] = Ⲇᐃ.ΔⵠᐃⵠᐃⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_010_000")] = Ⲇᐃ.ΔⵠᐃⲆᐃⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_010_010")] = Ⲇᐃ.ΔΔⵠⲆᐃⵠΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_011_000")] = Ⲇᐃ.ⲆⵠᐃⵠΔⲆⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_011_010")] = Ⲇᐃ.ⲆᐃΔᐃΔⵠΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_011_011")] = Ⲇᐃ.ΔⲆΔⲆᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_110_000")] = Ⲇᐃ.ΔⲆΔᐃⲆⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_110_010")] = Ⲇᐃ.ⵠᐃᐃⵠᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_110_110")] = Ⲇᐃ.ⵠⵠⵠⵠᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_111_000")] = Ⲇᐃ.ΔⲆΔΔⵠⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_111_010")] = Ⲇᐃ.ⵠᐃⲆᐃΔᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_111_011")] = Ⲇᐃ.ⵠⲆⵠᐃⲆᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_111_110")] = Ⲇᐃ.ⵠⵠⲆⵠⵠⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("010_111_111")] = Ⲇᐃ.ⵠΔⵠⵠᐃΔᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_011_000")] = Ⲇᐃ.ᐃᐃᐃᐃⲆᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_011_010")] = Ⲇᐃ.ΔᐃⲆᐃᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_011_011")] = Ⲇᐃ.ΔᐃΔⲆᐃⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_111_000")] = Ⲇᐃ.ᐃΔΔᐃⵠⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_111_010")] = Ⲇᐃ.ΔⲆΔⲆᐃⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_111_011")] = Ⲇᐃ.ⵠⵠᐃⵠⲆⲆⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_111_110")] = Ⲇᐃ.ᐃΔΔΔᐃⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("011_111_111")] = Ⲇᐃ.ⵠⵠⵠⲆⲆᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_110_000")] = Ⲇᐃ.ⵠⵠΔᐃⲆⵠΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_110_010")] = Ⲇᐃ.ⵠΔⵠⵠⲆⲆⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_110_110")] = Ⲇᐃ.ᐃⵠΔΔᐃΔᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_111_000")] = Ⲇᐃ.ⲆᐃⲆᐃᐃⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_111_010")] = Ⲇᐃ.ΔΔᐃΔⲆⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_111_011")] = Ⲇᐃ.ⲆᐃᐃᐃⲆⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_111_110")] = Ⲇᐃ.ⲆΔⵠΔⲆᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("110_111_111")] = Ⲇᐃ.ᐃᐃⵠᐃⵠᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("111_111_011")] = Ⲇᐃ.ⵠⲆᐃⵠⲆᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("111_111_110")] = Ⲇᐃ.ΔᐃⲆⲆⲆⲆⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("111_111_011")] = Ⲇᐃ.ⵠⲆᐃⵠⲆᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("111_111_000")] = Ⲇᐃ.ΔᐃᐃⵠⲆΔⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("111_111_111")] = Ⲇᐃ.ᐃⵠΔⲆⵠΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ΔΔⲆ][a("111_111_010")] = Ⲇᐃ.ⵠᐃⲆᐃⲆᐃⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_010_000")] = Ⲇᐃ.ⲆⵠⲆⲆΔᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_010_010")] = Ⲇᐃ.ⲆΔⲆΔΔΔΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_011_000")] = Ⲇᐃ.ΔᐃⵠⲆⵠᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_011_010")] = Ⲇᐃ.ⲆⲆⲆΔⲆⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_011_011")] = Ⲇᐃ.ΔΔΔΔᐃⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_110_000")] = Ⲇᐃ.ᐃⵠⲆⲆⲆΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_110_010")] = Ⲇᐃ.Δⵠⵠⵠⵠⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_110_110")] = Ⲇᐃ.ⲆΔᐃΔⵠᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_111_000")] = Ⲇᐃ.ΔⲆᐃΔΔⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_111_010")] = Ⲇᐃ.ⲆΔⵠⲆᐃⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_111_011")] = Ⲇᐃ.ΔⵠᐃⵠⵠΔⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_111_110")] = Ⲇᐃ.ⲆⵠⲆΔⲆⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("000_111_111")] = Ⲇᐃ.ⲆⵠΔΔᐃᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_010_000")] = Ⲇᐃ.ⵠⵠⵠᐃⲆᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_010_010")] = Ⲇᐃ.ⵠᐃⲆΔⵠΔΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_011_000")] = Ⲇᐃ.ᐃⲆΔⵠΔΔⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_011_010")] = Ⲇᐃ.ⲆᐃⵠⲆⲆᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_011_011")] = Ⲇᐃ.ⲆᐃⵠⲆΔⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_110_000")] = Ⲇᐃ.ᐃᐃⵠⲆⵠⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_110_010")] = Ⲇᐃ.ᐃᐃⲆⲆⵠΔΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_110_110")] = Ⲇᐃ.ᐃⵠⲆⵠᐃⵠⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_111_000")] = Ⲇᐃ.ⲆⵠΔⲆⲆΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_111_010")] = Ⲇᐃ.ⲆⲆᐃⲆΔⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_111_011")] = Ⲇᐃ.ⵠΔⲆΔᐃᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_111_110")] = Ⲇᐃ.ᐃⲆΔΔⵠΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("010_111_111")] = Ⲇᐃ.ⲆⵠΔᐃᐃⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_011_000")] = Ⲇᐃ.ⲆᐃᐃᐃΔⲆⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_011_010")] = Ⲇᐃ.ⵠⵠⵠΔΔΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_011_011")] = Ⲇᐃ.ⲆⲆΔⲆΔⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_111_000")] = Ⲇᐃ.ᐃⵠⲆⲆΔⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_111_010")] = Ⲇᐃ.ᐃᐃᐃΔⲆᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_111_011")] = Ⲇᐃ.ⲆⵠΔΔⲆΔΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_111_110")] = Ⲇᐃ.ΔⲆΔⲆⵠᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("011_111_111")] = Ⲇᐃ.ⲆᐃᐃᐃⲆᐃⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_110_000")] = Ⲇᐃ.ᐃᐃΔⵠⵠᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_110_010")] = Ⲇᐃ.ᐃΔᐃⵠΔⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_110_110")] = Ⲇᐃ.ⲆᐃΔᐃΔⲆΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_111_000")] = Ⲇᐃ.ᐃⲆΔΔⲆΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_111_010")] = Ⲇᐃ.ⲆᐃΔᐃⲆⵠᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_111_011")] = Ⲇᐃ.ⵠᐃΔΔᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_111_110")] = Ⲇᐃ.ᐃⵠⵠᐃⵠΔⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("110_111_111")] = Ⲇᐃ.ᐃⵠΔᐃⲆᐃⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("111_111_011")] = Ⲇᐃ.ᐃᐃⲆⲆⵠᐃⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("111_111_110")] = Ⲇᐃ.ᐃⵠᐃΔⵠⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("111_111_011")] = Ⲇᐃ.ᐃᐃⲆⲆⵠᐃⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("111_111_000")] = Ⲇᐃ.ᐃⲆᐃⲆΔⲆᐃ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("111_111_111")] = Ⲇᐃ.ⲆᐃᐃΔⵠⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆ][rs.ⵠⲆᐃ][a("111_111_010")] = Ⲇᐃ.ⵠᐃⵠⵠΔᐃᐃ;
    ⵠᐃ[rs.ΔΔᐃⵠΔ] = [];
    ⵠᐃ[rs.ΔΔᐃⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃᐃΔⲆⵠⵠ;
    ⵠᐃ[rs.ΔΔᐃⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⵠᐃⵠΔΔ;
    ⵠᐃ[rs.ᐃⲆⵠⲆΔ] = [];
    ⵠᐃ[rs.ᐃⲆⵠⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔⲆΔⲆⵠⲆ;
    ⵠᐃ[rs.ᐃⲆⵠⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔΔⲆⲆΔΔ;
    ⵠᐃ[rs.ⲆΔΔΔⵠⲆⲆ] = [];
    ⵠᐃ[rs.ⲆΔΔΔⵠⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃΔΔΔⲆ;
    ⵠᐃ[rs.ⲆΔΔΔⵠⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⲆⵠΔⵠⵠ;
    ⵠᐃ[rs.ᐃΔⵠᐃⵠ] = [];
    ⵠᐃ[rs.ᐃΔⵠᐃⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⵠⲆⲆᐃΔ;
    ⵠᐃ[rs.ᐃΔⵠᐃⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⲆⵠⵠΔᐃ;
    ⵠᐃ[rs.ᐃᐃᐃᐃΔᐃΔ] = [];
    ⵠᐃ[rs.ᐃᐃᐃᐃΔᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃΔⵠΔⵠΔ;
    ⵠᐃ[rs.ᐃᐃᐃᐃΔᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃⵠⵠⵠᐃΔ;
    ⵠᐃ[rs.ΔⵠⲆΔⵠⵠΔ] = [];
    ⵠᐃ[rs.ΔⵠⲆΔⵠⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃΔΔΔⵠ;
    ⵠᐃ[rs.ΔⵠⲆΔⵠⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⲆⲆⵠΔᐃ;
    ⵠᐃ[rs.ⲆΔᐃΔᐃ] = [];
    ⵠᐃ[rs.ⲆΔᐃΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆⵠⵠᐃᐃⲆ;
    ⵠᐃ[rs.ⲆΔᐃΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔᐃΔⵠᐃⲆ;
    ⵠᐃ[rs.ᐃⲆⲆΔΔΔⵠ] = [];
    ⵠᐃ[rs.ᐃⲆⲆΔΔΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⲆⵠΔⵠⲆ;
    ⵠᐃ[rs.ᐃⲆⲆΔΔΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠⵠⵠⲆⲆⵠ;
    ⵠᐃ[rs.ⵠΔⵠⵠᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⵠΔⵠⵠᐃⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆΔⲆⲆⵠΔ;
    ⵠᐃ[rs.ⵠΔⵠⵠᐃⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠΔⲆᐃⵠⲆ;
    ⵠᐃ[rs.ⲆⵠⵠⵠΔⲆⲆ] = [];
    ⵠᐃ[rs.ⲆⵠⵠⵠΔⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⲆᐃᐃⲆᐃ;
    ⵠᐃ[rs.ⲆⵠⵠⵠΔⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆᐃΔᐃⲆⵠ;
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆ][rs.ΔΔⲆ] = [Ⲇᐃ.ᐃⲆⲆΔⵠΔⲆ];
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆ][rs.ⵠⲆᐃ] = [Ⲇᐃ.ⲆⵠⵠⲆⲆΔΔ];
    ⵠᐃ[rs.ΔΔΔⲆⵠ] = [];
    ⵠᐃ[rs.ΔΔΔⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆᐃⲆⲆⵠⲆ;
    ⵠᐃ[rs.ΔΔΔⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃⲆⲆⲆΔᐃ;
    ⵠᐃ[rs.ΔᐃⵠⲆⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠΔΔᐃⲆᐃ;
    ⵠᐃ[rs.ΔᐃⵠⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆᐃⵠⲆⲆⵠ;
    ⵠᐃ[rs.ΔᐃΔⵠⵠ] = [];
    ⵠᐃ[rs.ΔᐃΔⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔΔⵠⲆΔⵠ;
    ⵠᐃ[rs.ΔᐃΔⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠΔⲆΔⵠⲆ;
    ⵠᐃ[rs.ᐃΔᐃᐃⵠ] = [];
    ⵠᐃ[rs.ᐃΔᐃᐃⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆᐃᐃΔᐃⵠ;
    ⵠᐃ[rs.ᐃΔᐃᐃⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.Ⲇᐃⵠⵠⵠᐃⵠ;
    ⵠᐃ[rs.ⲆΔᐃᐃΔ] = [];
    ⵠᐃ[rs.ⲆΔᐃᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠⵠⲆⲆⵠᐃ;
    ⵠᐃ[rs.ⲆΔᐃᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠᐃΔΔⲆⲆ;
    ⵠᐃ[rs.ⲆΔᐃⲆⲆ] = [];
    ⵠᐃ[rs.ⲆΔᐃⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃΔⵠⲆⵠ;
    ⵠᐃ[rs.ⲆΔᐃⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃⵠᐃⵠΔⲆ;
    ⵠᐃ[rs.Δᐃⵠᐃᐃ] = [];
    ⵠᐃ[rs.Δᐃⵠᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃΔⲆΔΔⵠ;
    ⵠᐃ[rs.Δᐃⵠᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆΔΔᐃⲆⲆ;
    ⵠᐃ[rs.ᐃⲆΔᐃⵠ] = [];
    ⵠᐃ[rs.ᐃⲆΔᐃⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆΔⲆΔΔΔ;
    ⵠᐃ[rs.ᐃⲆΔᐃⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⵠᐃⵠᐃᐃ;
    ⵠᐃ[rs.ⲆᐃⵠⵠΔ] = [];
    ⵠᐃ[rs.ⲆᐃⵠⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⵠᐃᐃⲆᐃ;
    ⵠᐃ[rs.ⲆᐃⵠⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠⵠᐃᐃⲆΔ;
    ⵠᐃ[rs.ᐃⵠΔⵠΔⵠᐃ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠΔⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠᐃⲆΔᐃⲆ;
    ⵠᐃ[rs.ᐃⵠΔⵠΔⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⲆΔΔΔⲆ;
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆᐃⲆ] = [];
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠᐃᐃᐃΔᐃ;
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⲆⲆΔᐃΔ;
    ⵠᐃ[rs.ᐃΔᐃⲆᐃ] = [];
    ⵠᐃ[rs.ᐃΔᐃⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔⲆⵠΔΔⲆ;
    ⵠᐃ[rs.ᐃΔᐃⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠⲆⲆᐃᐃⲆ;
    ⵠᐃ[rs.ᐃⲆᐃⵠⲆᐃⲆ] = Ⲇᐃ.ᐃⲆᐃⵠⲆᐃⲆ;
    ⵠᐃ[rs.ᐃΔᐃᐃΔⲆⲆ] = Ⲇᐃ.ᐃΔᐃᐃΔⲆⲆ;
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ] = [];
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔΔΔΔⵠⲆⲆ);
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ⵠⲆⵠⲆΔΔⲆ);
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔᐃΔΔⲆΔⵠ);
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃΔᐃΔⵠⵠⲆ);
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⵠᐃⵠΔᐃⲆ);
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔⲆⲆΔⲆⲆⵠ);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ] = [];
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆᐃΔᐃᐃⵠⲆ);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔΔⲆⵠⵠⵠᐃ);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆⵠΔᐃΔⲆⲆ);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆΔᐃⲆⵠⵠᐃ);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⲆΔⵠⲆⲆΔ);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠΔΔΔⵠⵠⵠ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃⲆⵠⲆⵠⵠΔ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃᐃᐃΔΔᐃⵠ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ⵠΔⵠΔΔᐃⲆ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⲆⲆⵠΔⲆⲆ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃᐃΔᐃⵠⵠⲆ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔⵠᐃΔᐃⲆⲆ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔⲆᐃᐃⲆⵠΔ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃΔⵠⵠⵠᐃⵠ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃⵠⲆᐃᐃⵠⵠ);
    ⵠᐃ[rs.ΔᐃⵠⲆᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃᐃΔΔᐃᐃⵠ);
    ⵠᐃ[rs.ⲆΔⵠΔⲆ] = [];
    ⵠᐃ[rs.ⲆΔⵠΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆᐃⵠⵠΔᐃ;
    ⵠᐃ[rs.ⲆΔⵠΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃᐃⵠⵠᐃⲆ;
    ⵠᐃ[rs.ⵠΔΔᐃᐃⲆΔ] = [];
    ⵠᐃ[rs.ⵠΔΔᐃᐃⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆᐃⲆᐃⲆⲆ;
    ⵠᐃ[rs.ⵠΔΔᐃᐃⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔⲆⵠⲆΔᐃ;
    ⵠᐃ[rs.ΔᐃⵠⲆᐃⵠⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆᐃⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⵠⵠᐃΔΔ;
    ⵠᐃ[rs.ΔᐃⵠⲆᐃⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⵠΔⲆΔⵠ;
    ⵠᐃ[rs.ⵠᐃⵠΔΔᐃΔ] = Ⲇᐃ.ⵠᐃⵠΔΔᐃΔ;
    ⵠᐃ[rs.ΔⵠΔΔⲆΔᐃ] = Ⲇᐃ.ΔⵠΔΔⲆΔᐃ;
    ⵠᐃ[rs.ⵠⵠⵠΔΔⲆⲆ] = Ⲇᐃ.ⵠⵠⵠΔΔⲆⲆ;
    ⵠᐃ[rs.ⵠᐃⵠⲆⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⵠⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆⲆᐃᐃⲆⵠ;
    ⵠᐃ[rs.ⵠᐃⵠⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃⵠᐃᐃΔᐃ;
    ⵠᐃ[rs.ⵠΔΔᐃΔ] = [];
    ⵠᐃ[rs.ⵠΔΔᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠΔⵠᐃⲆᐃ;
    ⵠᐃ[rs.ⵠΔΔᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⵠⲆⵠΔⵠ;
    ⵠᐃ[rs.ΔΔᐃⲆᐃ] = [];
    ⵠᐃ[rs.ΔΔᐃⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔⵠΔⵠΔΔ;
    ⵠᐃ[rs.ΔΔᐃⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔΔΔⲆⲆⵠ;
    ⵠᐃ[rs.ΔⲆⵠⵠⲆΔΔ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠⲆΔΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠΔⵠᐃⲆᐃ;
    ⵠᐃ[rs.ΔⲆⵠⵠⲆΔΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⵠⲆⵠΔⵠ;
    ⵠᐃ[rs.ⲆΔⲆΔᐃ] = [];
    ⵠᐃ[rs.ⲆΔⲆΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠⵠⲆⲆⵠΔ;
    ⵠᐃ[rs.ⲆΔⲆΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃⲆⵠⵠⲆΔ;
    ⵠᐃ[rs.ⲆΔⵠⵠⵠ] = [];
    ⵠᐃ[rs.ⲆΔⵠⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆᐃΔΔⲆⲆ;
    ⵠᐃ[rs.ⲆΔⵠⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠΔⵠΔⲆᐃ;
    ⵠᐃ[rs.ᐃᐃⲆᐃⲆ] = [];
    ⵠᐃ[rs.ᐃᐃⲆᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⵠⵠⲆⲆⲆ;
    ⵠᐃ[rs.ᐃᐃⲆᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆᐃΔΔⲆΔ;
    ⵠᐃ[rs.ΔⵠⲆΔᐃ] = [];
    ⵠᐃ[rs.ΔⵠⲆΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃⲆⲆᐃⲆ;
    ⵠᐃ[rs.ΔⵠⲆΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃⲆⲆⲆΔⵠ;
    ⵠᐃ[rs.ΔⵠⲆⵠᐃ] = [];
    ⵠᐃ[rs.ΔⵠⲆⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔⲆᐃᐃΔⵠ;
    ⵠᐃ[rs.ΔⵠⲆⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃΔΔⵠᐃᐃ;
    ⵠᐃ[rs.ⲆᐃΔⵠⲆ] = [];
    ⵠᐃ[rs.ⲆᐃΔⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃⵠⲆⵠᐃ;
    ⵠᐃ[rs.ⲆᐃΔⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆⵠᐃᐃⵠᐃ;
    ⵠᐃ[rs.ⵠΔⵠᐃΔ] = [];
    ⵠᐃ[rs.ⵠΔⵠᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔᐃΔⵠⵠΔ;
    ⵠᐃ[rs.ⵠΔⵠᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⵠᐃΔⵠᐃ;
    ⵠᐃ[rs.ᐃΔᐃᐃⲆ] = [];
    ⵠᐃ[rs.ᐃΔᐃᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔΔΔΔⵠⵠ;
    ⵠᐃ[rs.ᐃΔᐃᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔΔᐃⲆⲆΔ;
    ⵠᐃ[rs.Δᐃⵠⵠᐃ] = [];
    ⵠᐃ[rs.Δᐃⵠⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆΔⵠᐃⲆΔ;
    ⵠᐃ[rs.Δᐃⵠⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⲆᐃΔᐃⲆ;
    ⵠᐃ[rs.ᐃΔⵠΔⲆ] = [];
    ⵠᐃ[rs.ᐃΔⵠΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔΔⵠⲆⲆΔ;
    ⵠᐃ[rs.ᐃΔⵠΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆⲆᐃⵠⵠΔ;
    ⵠᐃ[rs.ΔⲆⵠᐃᐃ] = [];
    ⵠᐃ[rs.ΔⲆⵠᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆᐃΔⲆⲆΔⲆ;
    ⵠᐃ[rs.ΔⲆⵠᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆⲆΔⲆⲆΔ;
    ⵠᐃ[rs.ⵠᐃΔⲆⵠ] = [];
    ⵠᐃ[rs.ⵠᐃΔⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔᐃⵠΔⵠⲆ;
    ⵠᐃ[rs.ⵠᐃΔⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.Δⵠᐃᐃⵠᐃᐃ;
    ⵠᐃ[rs.ΔΔⵠᐃᐃ] = [];
    ⵠᐃ[rs.ΔΔⵠᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆΔⲆᐃⵠΔ;
    ⵠᐃ[rs.ΔΔⵠᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆΔᐃᐃᐃⲆ;
    ⵠᐃ[rs.ΔᐃⲆⵠⵠ] = [];
    ⵠᐃ[rs.ΔᐃⲆⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃΔΔΔⲆⵠ;
    ⵠᐃ[rs.ΔᐃⲆⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃⵠⵠⵠⲆᐃ;
    ⵠᐃ[rs.ΔⵠᐃⲆⲆ] = [];
    ⵠᐃ[rs.ΔⵠᐃⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆⲆⲆΔᐃⵠ;
    ⵠᐃ[rs.ΔⵠᐃⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆΔⵠⵠⲆⵠ;
    ⵠᐃ[rs.ⵠⲆᐃⲆⵠ] = [];
    ⵠᐃ[rs.ⵠⲆᐃⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⲆⵠΔΔᐃ;
    ⵠᐃ[rs.ⵠⲆᐃⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃΔⲆΔΔᐃ;
    ⵠᐃ[rs.ΔᐃᐃΔᐃ] = [];
    ⵠᐃ[rs.ΔᐃᐃΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠⵠⵠᐃⲆⵠ;
    ⵠᐃ[rs.ΔᐃᐃΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆᐃⲆⵠⲆⵠ;
    ⵠᐃ[rs.ΔⵠΔⵠⲆ] = [];
    ⵠᐃ[rs.ΔⵠΔⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⲆᐃΔⵠⵠ;
    ⵠᐃ[rs.ΔⵠΔⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⲆⵠⵠᐃⲆ;
    ⵠᐃ[rs.ᐃᐃⵠᐃΔ] = [];
    ⵠᐃ[rs.ᐃᐃⵠᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔᐃᐃΔⲆΔ;
    ⵠᐃ[rs.ᐃᐃⵠᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆⲆⲆⲆᐃⵠ;
    ⵠᐃ[rs.ⵠᐃᐃᐃΔ] = [];
    ⵠᐃ[rs.ⵠᐃᐃᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆᐃᐃᐃⲆⲆΔ;
    ⵠᐃ[rs.ⵠᐃᐃᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠΔⲆⵠᐃᐃ;
    ⵠᐃ[rs.ⵠⵠⲆⲆⵠ] = [];
    ⵠᐃ[rs.ⵠⵠⲆⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⵠᐃⲆⵠⲆ;
    ⵠᐃ[rs.ⵠⵠⲆⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⵠᐃⲆΔⵠ;
    ⵠᐃ[rs.ΔⵠΔᐃᐃ] = [];
    ⵠᐃ[rs.ΔⵠΔᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠᐃΔⲆⲆⵠ;
    ⵠᐃ[rs.ΔⵠΔᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃΔⵠⵠᐃᐃ;
    ⵠᐃ[rs.ⲆΔΔᐃΔ] = [];
    ⵠᐃ[rs.ⲆΔΔᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆᐃⲆᐃΔⲆΔ;
    ⵠᐃ[rs.ⲆΔΔᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔΔΔⲆΔⵠ;
    ⵠᐃ[rs.ΔⲆⵠᐃⲆ] = [];
    ⵠᐃ[rs.ΔⲆⵠᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⲆΔᐃⵠᐃ;
    ⵠᐃ[rs.ΔⲆⵠᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠᐃⵠⵠᐃⵠ;
    ⵠᐃ[rs.ⲆⲆⲆⵠΔ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔⲆᐃΔᐃᐃ;
    ⵠᐃ[rs.ⲆⲆⲆⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⵠᐃΔᐃᐃ;
    ⵠᐃ[rs.ⲆΔᐃⲆⵠ] = [];
    ⵠᐃ[rs.ⲆΔᐃⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆⲆΔᐃⵠⵠ;
    ⵠᐃ[rs.ⲆΔᐃⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔΔⲆⲆΔⵠ;
    ⵠᐃ[rs.ⲆᐃΔⲆᐃ] = [];
    ⵠᐃ[rs.ⲆᐃΔⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠΔⵠⵠΔⵠ;
    ⵠᐃ[rs.ⲆᐃΔⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠⲆᐃΔⵠᐃ;
    ⵠᐃ[rs.ΔᐃⵠⵠΔ] = [];
    ⵠᐃ[rs.ΔᐃⵠⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆᐃⲆᐃⵠⲆ;
    ⵠᐃ[rs.ΔᐃⵠⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠΔΔⲆⵠΔᐃ;
    ⵠᐃ[rs.ⵠΔⵠΔⵠ] = [];
    ⵠᐃ[rs.ⵠΔⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆⲆΔᐃΔⵠ;
    ⵠᐃ[rs.ⵠΔⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⲆⵠⵠᐃᐃ;
    ⵠᐃ[rs.ⲆᐃᐃⲆΔ] = [];
    ⵠᐃ[rs.ⲆᐃᐃⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃⲆⵠᐃᐃᐃ;
    ⵠᐃ[rs.ⲆᐃᐃⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃⵠⵠᐃΔᐃ;
    ⵠᐃ[rs.ⵠⵠⵠⲆⵠ] = [];
    ⵠᐃ[rs.ⵠⵠⵠⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠⵠⵠΔⵠⵠ;
    ⵠᐃ[rs.ⵠⵠⵠⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃΔΔᐃⵠⲆ;
    ⵠᐃ[rs.ΔⲆᐃⵠⲆ] = [];
    ⵠᐃ[rs.ΔⲆᐃⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆᐃⵠᐃΔᐃⲆ;
    ⵠᐃ[rs.ΔⲆᐃⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⵠᐃᐃⲆⲆ;
    ⵠᐃ[rs.ⵠⲆⵠᐃᐃ] = [];
    ⵠᐃ[rs.ⵠⲆⵠᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆΔⲆΔⵠΔ;
    ⵠᐃ[rs.ⵠⲆⵠᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠⵠⲆΔΔᐃ;
    ⵠᐃ[rs.ⲆⲆᐃᐃⲆ] = [];
    ⵠᐃ[rs.ⲆⲆᐃᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃᐃᐃⵠᐃⲆ;
    ⵠᐃ[rs.ⲆⲆᐃᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃᐃΔⵠⲆΔ;
    ⵠᐃ[rs.ⵠᐃᐃΔⵠ] = [];
    ⵠᐃ[rs.ⵠᐃᐃΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⵠⵠᐃΔⵠ;
    ⵠᐃ[rs.ⵠᐃᐃΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔᐃΔⲆⵠΔ;
    ⵠᐃ[rs.ΔΔᐃⲆⲆ] = [];
    ⵠᐃ[rs.ΔΔᐃⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⲆᐃΔΔⲆ;
    ⵠᐃ[rs.ΔΔᐃⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆᐃⵠⲆⵠΔ;
    ⵠᐃ[rs.ⵠⲆⵠⵠⵠ] = [];
    ⵠᐃ[rs.ⵠⲆⵠⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔⲆᐃΔΔᐃ;
    ⵠᐃ[rs.ⵠⲆⵠⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆΔⵠΔⵠᐃ;
    ⵠᐃ[rs.ⵠⲆⲆΔᐃΔⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⲆΔᐃΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔⵠⲆⲆⵠΔ;
    ⵠᐃ[rs.ⵠⲆⲆΔᐃΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⵠΔⲆⵠᐃ;
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ] = [];
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃᐃⵠⲆⲆΔⵠΔⵠ);
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃⲆⲆⵠⲆΔΔΔΔ);
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃⲆⲆⵠⲆΔΔΔΔ);
    ⵠᐃ[rs.ΔⵠᐃⲆΔᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆᐃᐃⵠᐃⲆΔⵠΔ);
    ⵠᐃ[rs.ΔᐃⲆⲆΔ] = [];
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔΔΔⲆⲆᐃⲆ);
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ⵠⲆⵠⲆⲆΔᐃ);
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⵠᐃⲆᐃⲆᐃ);
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠᐃΔᐃⲆᐃⲆ);
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔᐃⲆⵠⲆΔΔ);
    ⵠᐃ[rs.ΔᐃⲆⲆΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⲆⲆΔⵠⵠⲆ);
    ⵠᐃ[rs.ⵠᐃⵠⲆΔ] = [];
    ⵠᐃ[rs.ⵠᐃⵠⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆΔⲆΔⵠΔ;
    ⵠᐃ[rs.ⵠᐃⵠⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆᐃΔⵠⵠⵠ;
    ⵠᐃ[rs.ⲆⵠⵠᐃΔ] = [];
    ⵠᐃ[rs.ⲆⵠⵠᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃⵠᐃᐃⵠⲆ;
    ⵠᐃ[rs.ⲆⵠⵠᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃΔⵠᐃⲆⲆ;
    ⵠᐃ[rs.ΔⵠΔᐃⵠ] = [];
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆⲆⲆⵠΔΔΔ);
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆⵠⵠⵠⲆΔΔ);
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.Δᐃᐃⵠᐃᐃᐃ);
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠᐃΔⵠᐃⵠⵠ);
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆⲆᐃᐃⲆⲆⵠ);
    ⵠᐃ[rs.ΔⵠΔᐃⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔⲆΔΔⲆᐃⵠ);
    ⵠᐃ[rs.ⲆⲆⵠΔ] = [];
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔᐃⵠΔᐃᐃᐃ);
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆᐃΔΔⲆΔΔ);
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⵠⲆⲆᐃⵠⵠ);
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⵠᐃΔⵠⲆⲆ);
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠΔⲆⵠΔΔⵠ);
    ⵠᐃ[rs.ⲆⲆⵠΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃⲆⲆⵠⵠᐃⲆ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⲆⵠᐃⵠΔⲆ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆᐃΔⲆᐃⲆⲆ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃⵠⵠΔΔᐃⵠ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⲆⲆⵠⵠᐃΔ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⵠΔΔⵠⵠⲆ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃⲆⲆⵠⲆⵠΔ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆⲆⵠΔⵠΔᐃ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⵠⲆΔΔᐃᐃ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔᐃΔⵠΔⲆⵠ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃᐃⵠΔⵠⲆᐃ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔᐃᐃⲆᐃⵠᐃ);
    ⵠᐃ[rs.ᐃⵠΔⵠⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔΔᐃΔᐃᐃⵠ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ] = [];
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ].push(Ⲇᐃ.Δⵠⵠᐃᐃⵠⵠ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔⵠⲆᐃᐃⲆᐃ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔᐃⵠΔⵠᐃΔ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ⵠΔⵠⵠΔⵠᐃ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔΔΔⲆᐃᐃᐃ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆⲆΔΔᐃⲆⵠ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃΔᐃⲆⲆΔΔ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆᐃⵠΔⵠΔⵠ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆᐃⲆΔⵠΔⵠ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⵠⲆΔⲆΔⲆ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔΔᐃⲆΔᐃⲆ);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆΔΔΔⵠΔΔ);
    ⵠᐃ[rs.ⵠΔᐃᐃⲆᐃᐃ] = [];
    ⵠᐃ[rs.ⵠΔᐃᐃⲆᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆⵠⲆΔΔⵠ;
    ⵠᐃ[rs.ⵠΔᐃᐃⲆᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⵠΔⲆⲆᐃ;
    ⵠᐃ[rs.ⵠᐃⵠᐃᐃΔΔ] = Ⲇᐃ.ᐃⲆΔⵠⵠΔΔ;
    ⵠᐃ[rs.ⵠⲆΔᐃΔ] = [];
    ⵠᐃ[rs.ⵠⲆΔᐃΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃⲆΔⲆΔᐃⵠᐃ;
    ⵠᐃ[rs.ⵠⲆΔᐃΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃⵠᐃΔⵠᐃⲆⵠ;
    ⵠᐃ[rs.ΔⵠⲆⲆⵠ] = [];
    ⵠᐃ[rs.ΔⵠⲆⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⲆΔΔΔⲆ;
    ⵠᐃ[rs.ΔⵠⲆⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃⲆᐃΔⲆᐃ;
    ⵠᐃ[rs.ᐃΔⵠⵠⵠ] = [];
    ⵠᐃ[rs.ᐃΔⵠⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠᐃⵠⵠⲆᐃ;
    ⵠᐃ[rs.ᐃΔⵠⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠΔΔΔΔⵠ;
    ⵠᐃ[rs.ᐃⲆΔⵠᐃ] = [];
    ⵠᐃ[rs.ᐃⲆΔⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠᐃΔⵠΔⲆ;
    ⵠᐃ[rs.ᐃⲆΔⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆᐃΔᐃⲆΔ;
    ⵠᐃ[rs.ⵠⲆⲆΔᐃ] = [];
    ⵠᐃ[rs.ⵠⲆⲆΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃᐃᐃⲆⵠⵠ;
    ⵠᐃ[rs.ⵠⲆⲆΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃᐃⵠⲆΔΔ;
    ⵠᐃ[rs.ⵠΔΔⲆⵠᐃⲆ] = Ⲇᐃ.ⵠΔΔⲆⵠᐃⲆ;
    ⵠᐃ[rs.ᐃᐃᐃΔⲆΔⵠ] = [];
    ⵠᐃ[rs.ᐃᐃᐃΔⲆΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔᐃΔⲆᐃᐃ;
    ⵠᐃ[rs.ᐃᐃᐃΔⲆΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃⲆⵠᐃⲆⲆ;
    ⵠᐃ[rs.ΔΔᐃΔⵠΔⵠ] = [];
    ⵠᐃ[rs.ΔΔᐃΔⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆᐃⲆⵠΔⵠᐃ;
    ⵠᐃ[rs.ΔΔᐃΔⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⵠⵠᐃΔⵠ;
    ⵠᐃ[rs.ⵠⲆⲆⵠⲆΔΔ] = Ⲇᐃ.ⵠⲆⲆⵠⲆΔΔ;
    ⵠᐃ[rs.ΔᐃΔⲆᐃⲆⵠ] = Ⲇᐃ.ΔᐃΔⲆᐃⲆⵠ;
    ⵠᐃ[rs.ⲆⵠΔⲆᐃΔᐃ] = Ⲇᐃ.ⲆⵠΔⲆᐃΔᐃ;
    ⵠᐃ[rs.ΔⲆⵠΔᐃⵠⵠ] = [];
    ⵠᐃ[rs.ΔⲆⵠΔᐃⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃᐃΔⲆΔΔ;
    ⵠᐃ[rs.ΔⲆⵠΔᐃⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠᐃΔⵠᐃⲆ;
    ⵠᐃ[rs.ΔⲆΔᐃᐃⲆΔ] = [];
    ⵠᐃ[rs.ΔⲆΔᐃᐃⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆΔⵠΔᐃⲆ;
    ⵠᐃ[rs.ΔⲆΔᐃᐃⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆᐃΔᐃΔΔ;
    ⵠᐃ[rs.ΔⲆⵠⵠΔⲆⲆ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠΔⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠⵠΔΔΔⲆ;
    ⵠᐃ[rs.ΔⲆⵠⵠΔⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔᐃᐃⵠᐃᐃ;
    ⵠᐃ[rs.ⲆᐃΔⲆΔΔⵠ] = Ⲇᐃ.ⲆᐃΔⲆΔΔⵠ;
    ⵠᐃ[rs.ᐃᐃΔⲆⵠⲆᐃ] = Ⲇᐃ.ᐃᐃΔⲆⵠⲆᐃ;
    ⵠᐃ[rs.ΔⵠᐃᐃⵠᐃΔ] = Ⲇᐃ.ΔⵠᐃᐃⵠᐃΔ;
    ⵠᐃ[rs.ⲆᐃᐃⵠⲆΔⵠ] = [];
    ⵠᐃ[rs.ⲆᐃᐃⵠⲆΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠΔΔΔᐃΔ;
    ⵠᐃ[rs.ⲆᐃᐃⵠⲆΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆΔⲆⵠⲆᐃ;
    ⵠᐃ[rs.ⵠⲆⵠᐃᐃⵠⵠ] = [];
    ⵠᐃ[rs.ⵠⲆⵠᐃᐃⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔⵠⵠᐃΔᐃ;
    ⵠᐃ[rs.ⵠⲆⵠᐃᐃⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⲆⲆᐃⵠΔ;
    ⵠᐃ[rs.ᐃⲆᐃⲆⲆ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠΔΔⵠⲆⵠ;
    ⵠᐃ[rs.ᐃⲆᐃⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆᐃⵠⵠⲆΔ;
    ⵠᐃ[rs.ⵠⲆⲆΔΔᐃⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⲆΔΔᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃⵠⲆᐃⲆⵠ;
    ⵠᐃ[rs.ⵠⲆⲆΔΔᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠᐃΔⵠⵠⲆ;
    ⵠᐃ[rs.ΔᐃΔⵠⲆⵠⲆ] = [];
    ⵠᐃ[rs.ΔᐃΔⵠⲆⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔⵠΔᐃⲆΔ;
    ⵠᐃ[rs.ΔᐃΔⵠⲆⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆΔΔΔⵠⲆ;
    ⵠᐃ[rs.ᐃⵠⲆΔⵠΔⲆ] = [];
    ⵠᐃ[rs.ᐃⵠⲆΔⵠΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⵠΔⲆⲆⲆ;
    ⵠᐃ[rs.ᐃⵠⲆΔⵠΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠΔⲆΔⵠⲆⵠ;
    ⵠᐃ[rs.ⲆΔⲆᐃΔΔⵠ] = [];
    ⵠᐃ[rs.ⲆΔⲆᐃΔΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔΔΔᐃᐃⵠ;
    ⵠᐃ[rs.ⲆΔⲆᐃΔΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃΔⵠΔΔΔ;
    ⵠᐃ[rs.ⵠⵠᐃⵠᐃⲆᐃ] = Ⲇᐃ.ⵠⵠᐃⵠᐃⲆᐃ;
    ⵠᐃ[rs.ⵠⵠΔᐃⵠᐃᐃ] = Ⲇᐃ.ⵠⵠΔᐃⵠᐃᐃ;
    ⵠᐃ[rs.ⵠⲆΔᐃΔⵠⵠ] = Ⲇᐃ.ⵠⲆΔᐃΔⵠⵠ;
    ⵠᐃ[rs.ΔΔΔⵠⵠᐃⵠ] = Ⲇᐃ.ΔΔΔⵠⵠᐃⵠ;
    ⵠᐃ[rs.ΔⵠⵠⵠᐃΔᐃ] = Ⲇᐃ.ΔⵠⵠⵠᐃΔᐃ;
    ⵠᐃ[rs.ᐃⵠΔΔΔΔΔ] = Ⲇᐃ.ᐃⵠΔΔΔΔΔ;
    ⵠᐃ[rs.ⲆΔᐃᐃⵠⵠΔ] = [];
    ⵠᐃ[rs.ⲆΔᐃᐃⵠⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔⲆΔᐃⲆⵠ;
    ⵠᐃ[rs.ⲆΔᐃᐃⵠⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃᐃᐃⲆΔᐃ;
    ⵠᐃ[rs.ᐃⲆᐃⵠᐃ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆΔᐃᐃΔΔ;
    ⵠᐃ[rs.ᐃⲆᐃⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⵠⵠᐃⵠⵠ;
    ⵠᐃ[rs.ΔⵠΔⲆᐃ] = [];
    ⵠᐃ[rs.ΔⵠΔⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠⲆΔᐃᐃΔ;
    ⵠᐃ[rs.ΔⵠΔⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.Δᐃᐃᐃᐃᐃᐃ;
    ⵠᐃ[rs.ⲆΔⲆⲆⲆⲆⵠ] = [];
    ⵠᐃ[rs.ⲆΔⲆⲆⲆⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⵠⵠΔⵠΔ;
    ⵠᐃ[rs.ⲆΔⲆⲆⲆⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃⲆⵠᐃΔᐃ;
    ⵠᐃ[rs.ⵠᐃⵠⵠⲆⲆᐃ] = Ⲇᐃ.ⵠᐃⵠⵠⲆⲆᐃ;
    ⵠᐃ[rs.ⲆΔᐃᐃΔⲆΔ] = Ⲇᐃ.ⲆΔᐃᐃΔⲆΔ;
    ⵠᐃ[rs.ⵠⲆΔᐃⲆⲆⵠ] = [];
    ⵠᐃ[rs.ⵠⲆΔᐃⲆⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃⲆᐃΔᐃⵠ;
    ⵠᐃ[rs.ⵠⲆΔᐃⲆⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⵠⲆΔΔⵠ;
    ⵠᐃ[rs.ⲆⲆⲆᐃⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⲆᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃΔᐃᐃᐃᐃ;
    ⵠᐃ[rs.ⲆⲆⲆᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆᐃⲆᐃᐃΔ;
    ⵠᐃ[rs.ΔΔⲆⲆⲆⲆⵠ] = [];
    ⵠᐃ[rs.ΔΔⲆⲆⲆⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔⲆⲆᐃⵠⲆ;
    ⵠᐃ[rs.ΔΔⲆⲆⲆⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⲆᐃⲆᐃⲆ;
    ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆΔ] = [];
    ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆⲆⲆⵠᐃⵠ;
    ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔΔⲆⲆⲆⵠ;
    ⵠᐃ[rs.ⵠΔΔⲆᐃⲆⵠ] = [];
    ⵠᐃ[rs.ⵠΔΔⲆᐃⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆΔΔΔΔⲆ;
    ⵠᐃ[rs.ⵠΔΔⲆᐃⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⵠⵠⵠⲆⵠ;
    ⵠᐃ[rs.ⲆᐃΔⵠᐃⲆⲆ] = [];
    ⵠᐃ[rs.ⲆᐃΔⵠᐃⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠᐃⵠⵠⲆᐃ;
    ⵠᐃ[rs.ⲆᐃΔⵠᐃⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⲆᐃᐃⲆⵠ;
    ⵠᐃ[rs.ᐃⲆΔΔⵠⵠⵠ] = [];
    ⵠᐃ[rs.ᐃⲆΔΔⵠⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⵠⵠⵠⵠᐃ;
    ⵠᐃ[rs.ᐃⲆΔΔⵠⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃᐃⲆⲆᐃⲆ;
    ⵠᐃ[rs.ᐃⲆⵠⲆΔⵠΔ] = [];
    ⵠᐃ[rs.ᐃⲆⵠⲆΔⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠⵠⲆⵠⵠΔ;
    ⵠᐃ[rs.ᐃⲆⵠⲆΔⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃΔᐃΔᐃᐃ;
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆΔ] = [];
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃᐃⲆᐃⵠⵠ;
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⵠⲆᐃΔᐃ;
    ⵠᐃ[rs.ⵠⵠⵠⲆⵠⵠⵠ] = Ⲇᐃ.ⵠⵠⵠⲆⵠⵠⵠ;
    ⵠᐃ[rs.Δⵠⵠᐃⵠᐃᐃ] = Ⲇᐃ.Δⵠⵠᐃⵠᐃᐃ;
    ⵠᐃ[rs.ΔᐃⵠᐃΔᐃⵠ] = Ⲇᐃ.ΔᐃⵠᐃΔᐃⵠ;
    ⵠᐃ[rs.ᐃⲆⲆΔΔᐃᐃ] = [];
    ⵠᐃ[rs.ᐃⲆⲆΔΔᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⲆⲆⵠΔⲆ;
    ⵠᐃ[rs.ᐃⲆⲆΔΔᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠΔⲆΔΔᐃ;
    ⵠᐃ[rs.ΔᐃⵠΔⵠ] = [];
    ⵠᐃ[rs.ΔᐃⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃᐃᐃⲆᐃⲆ;
    ⵠᐃ[rs.ΔᐃⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃⲆⲆᐃⲆᐃ;
    ⵠᐃ[rs.ⵠᐃΔⲆΔᐃⲆ] = [];
    ⵠᐃ[rs.ⵠᐃΔⲆΔᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆΔΔΔⲆⵠ;
    ⵠᐃ[rs.ⵠᐃΔⲆΔᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠⵠⵠⵠⲆⲆ;
    ⵠᐃ[rs.ⲆᐃⲆⵠᐃⲆᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⲆⵠᐃⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠⲆⵠⵠΔΔ;
    ⵠᐃ[rs.ⲆᐃⲆⵠᐃⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆⲆᐃᐃⵠᐃ;
    ⵠᐃ[rs.ΔⵠᐃΔᐃⲆᐃ] = [];
    ⵠᐃ[rs.ΔⵠᐃΔᐃⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔᐃΔⲆⵠⲆ;
    ⵠᐃ[rs.ΔⵠᐃΔᐃⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠΔⲆⲆΔᐃⵠ;
    ⵠᐃ[rs.ᐃᐃΔⲆΔΔⵠ] = [];
    ⵠᐃ[rs.ᐃᐃΔⲆΔΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆⲆⲆⲆⵠΔ;
    ⵠᐃ[rs.ᐃᐃΔⲆΔΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔⵠΔⲆⵠΔ;
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃⲆⵠᐃΔ;
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⵠᐃⲆΔⲆ;
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔⵠⵠⲆᐃᐃ;
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⲆⵠⲆⵠⲆ;
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠᐃⲆⲆᐃᐃ;
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃⲆᐃΔⵠΔ;
    ⵠᐃ[rs.ⵠⲆᐃⵠΔⵠⲆ] = Ⲇᐃ.ⵠⲆᐃⵠΔⵠⲆ;
    ⵠᐃ[rs.ΔᐃⲆⵠΔΔⵠ] = Ⲇᐃ.ΔᐃⲆⵠΔΔⵠ;
    ⵠᐃ[rs.ⵠΔᐃⲆⵠⵠᐃ] = Ⲇᐃ.ⵠΔᐃⲆⵠⵠᐃ;
    ⵠᐃ[rs.ⵠⲆᐃⲆⵠⲆΔ] = [];
    ⵠᐃ[rs.ⵠⲆᐃⲆⵠⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆΔᐃⲆᐃⲆ;
    ⵠᐃ[rs.ⵠⲆᐃⲆⵠⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃΔⲆⲆΔᐃ;
    ⵠᐃ[rs.ⵠⲆⵠΔⵠ] = [];
    ⵠᐃ[rs.ⵠⲆⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆᐃⵠᐃⲆᐃ;
    ⵠᐃ[rs.ⵠⲆⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⲆⲆⵠⲆᐃ;
    ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆΔ] = Ⲇᐃ.ⵠⲆⲆᐃⵠⲆΔ;
    ⵠᐃ[rs.ⲆⵠⵠΔᐃⲆⲆ] = [];
    ⵠᐃ[rs.ⲆⵠⵠΔᐃⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠΔⲆᐃⵠΔ;
    ⵠᐃ[rs.ⲆⵠⵠΔᐃⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⵠⵠᐃⵠΔ;
    ⵠᐃ[rs.ᐃΔᐃᐃⵠᐃⵠ] = [];
    ⵠᐃ[rs.ᐃΔᐃᐃⵠᐃⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃⲆⲆⲆⲆΔ;
    ⵠᐃ[rs.ᐃΔᐃᐃⵠᐃⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠᐃΔⲆⵠΔ;
    ⵠᐃ[rs.ᐃΔⲆⵠⵠᐃⲆ] = [];
    ⵠᐃ[rs.ᐃΔⲆⵠⵠᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⲆᐃΔᐃΔ;
    ⵠᐃ[rs.ᐃΔⲆⵠⵠᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⲆⲆΔΔᐃ;
    ⵠᐃ[rs.ΔⲆⵠᐃΔⵠΔ] = [];
    ⵠᐃ[rs.ΔⲆⵠᐃΔⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆΔⵠⲆⵠⲆ;
    ⵠᐃ[rs.ΔⲆⵠᐃΔⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆᐃⲆⵠΔⲆ;
    ⵠᐃ[rs.ΔⲆⲆΔΔⵠΔ] = [];
    ⵠᐃ[rs.ΔⲆⲆΔΔⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃΔⲆᐃⲆΔ;
    ⵠᐃ[rs.ΔⲆⲆΔΔⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⲆΔⵠⲆᐃ;
    ⵠᐃ[rs.ⵠⲆᐃΔΔⲆΔ] = [];
    ⵠᐃ[rs.ⵠⲆᐃΔΔⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠᐃⵠⲆΔᐃ;
    ⵠᐃ[rs.ⵠⲆᐃΔΔⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⲆᐃⲆΔⲆ;
    ⵠᐃ[rs.ⲆᐃⵠΔⵠⵠᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⵠΔⵠⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃᐃⲆⲆⲆᐃ;
    ⵠᐃ[rs.ⲆᐃⵠΔⵠⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆΔᐃⵠⲆⵠ;
    ⵠᐃ[rs.ⵠᐃᐃΔⵠΔⵠ] = [];
    ⵠᐃ[rs.ⵠᐃᐃΔⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔΔⵠᐃᐃᐃ;
    ⵠᐃ[rs.ⵠᐃᐃΔⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠΔᐃΔⵠⲆ;
    ⵠᐃ[rs.ΔᐃⲆⵠΔⲆΔ] = [];
    ⵠᐃ[rs.ΔᐃⲆⵠΔⲆΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆᐃⵠΔΔⵠ;
    ⵠᐃ[rs.ΔᐃⲆⵠΔⲆΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⲆⲆΔⲆⲆ;
    ⵠᐃ[rs.ⲆⵠᐃΔⲆΔΔ] = Ⲇᐃ.ⲆⵠᐃΔⲆΔΔ;
    ⵠᐃ[rs.ᐃΔⲆⲆⲆⲆⵠ] = Ⲇᐃ.ᐃΔⲆⲆⲆⲆⵠ;
    ⵠᐃ[rs.ᐃᐃΔⵠᐃΔⲆ] = Ⲇᐃ.ᐃᐃΔⵠᐃΔⲆ;
    ⵠᐃ[rs.ⲆΔΔⲆⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆΔΔⲆⵠⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆⲆΔⲆᐃⲆ;
    ⵠᐃ[rs.ⲆΔΔⲆⵠⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃΔⵠᐃΔΔ;
    ⵠᐃ[rs.ⵠᐃⲆⲆᐃ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⲆᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠⵠⵠⵠᐃᐃ;
    ⵠᐃ[rs.ⵠᐃⲆⲆᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔᐃᐃᐃΔᐃ;
    ⵠᐃ[rs.ⵠᐃΔᐃΔⲆΔ] = Ⲇᐃ.ⵠᐃΔᐃΔⲆΔ;
    ⵠᐃ[rs.ⲆⲆⵠΔΔᐃᐃ] = [];
    ⵠᐃ[rs.ⲆⲆⵠΔΔᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃᐃΔΔᐃⵠ;
    ⵠᐃ[rs.ⲆⲆⵠΔΔᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⵠⲆⵠᐃⵠ;
    ⵠᐃ[rs.ᐃⵠΔⲆⵠᐃⵠ] = [];
    ⵠᐃ[rs.ᐃⵠΔⲆⵠᐃⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃΔᐃᐃⲆᐃ;
    ⵠᐃ[rs.ᐃⵠΔⲆⵠᐃⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆΔΔⵠⵠΔ;
    ⵠᐃ[rs.ⵠⲆΔⲆⲆΔⵠ] = [];
    ⵠᐃ[rs.ⵠⲆΔⲆⲆΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔᐃᐃΔΔᐃ;
    ⵠᐃ[rs.ⵠⲆΔⲆⲆΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⵠΔᐃⲆⲆᐃ;
    ⵠᐃ[rs.ⲆᐃΔΔΔΔᐃ] = [];
    ⵠᐃ[rs.ⲆᐃΔΔΔΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔΔΔᐃΔⵠ;
    ⵠᐃ[rs.ⲆᐃΔΔΔΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠᐃⲆⲆᐃⵠ;
    ⵠᐃ[rs.ⲆⲆΔᐃⵠⵠᐃ] = [];
    ⵠᐃ[rs.ⲆⲆΔᐃⵠⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔΔΔᐃⲆⲆ;
    ⵠᐃ[rs.ⲆⲆΔᐃⵠⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠⵠⲆΔⲆⲆ;
    ⵠᐃ[rs.ⵠΔⲆΔᐃⲆⵠ] = [];
    ⵠᐃ[rs.ⵠΔⲆΔᐃⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠᐃⵠⵠΔⵠ;
    ⵠᐃ[rs.ⵠΔⲆΔᐃⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠⲆΔΔⲆΔ;
    ⵠᐃ[rs.ⲆᐃΔᐃᐃⵠΔ] = [];
    ⵠᐃ[rs.ⲆᐃΔᐃᐃⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆⵠⲆⲆΔᐃ;
    ⵠᐃ[rs.ⲆᐃΔᐃᐃⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠΔⲆⵠⵠΔ;
    ⵠᐃ[rs.ΔΔⲆⲆⲆⵠΔ] = [];
    ⵠᐃ[rs.ΔΔⲆⲆⲆⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃΔⵠⲆΔⲆ;
    ⵠᐃ[rs.ΔΔⲆⲆⲆⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔⲆΔⵠⵠⵠ;
    ⵠᐃ[rs.ⵠΔᐃΔᐃᐃᐃ] = [];
    ⵠᐃ[rs.ⵠΔᐃΔᐃᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔⲆⲆⵠᐃᐃ;
    ⵠᐃ[rs.ⵠΔᐃΔᐃᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠΔᐃΔΔⵠᐃ;
    ⵠᐃ[rs.ⵠΔⵠΔᐃΔⵠ] = Ⲇᐃ.ⵠΔⵠΔᐃΔⵠ;
    ⵠᐃ[rs.ⲆᐃⵠⵠᐃⲆΔ] = Ⲇᐃ.ⲆᐃⵠⵠᐃⲆΔ;
    ⵠᐃ[rs.ⲆΔⲆⲆᐃⲆΔ] = Ⲇᐃ.ⲆΔⲆⲆᐃⲆΔ;
    ⵠᐃ[rs.ΔⲆⵠᐃⵠ] = [];
    ⵠᐃ[rs.ΔⲆⵠᐃⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⲆΔᐃΔΔ;
    ⵠᐃ[rs.ΔⲆⵠᐃⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃᐃⵠᐃⲆⵠ;
    ⵠᐃ[rs.ⲆᐃᐃⵠΔᐃⲆ] = [];
    ⵠᐃ[rs.ⲆᐃᐃⵠΔᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃⲆⲆⵠᐃⵠ;
    ⵠᐃ[rs.ⲆᐃᐃⵠΔᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠᐃΔᐃᐃΔ;
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠⵠᐃ] = [];
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⲆⵠⵠᐃⵠΔ;
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⵠⵠⲆⵠⵠ;
    ⵠᐃ[rs.ⵠᐃᐃⵠᐃΔΔ] = [];
    ⵠᐃ[rs.ⵠᐃᐃⵠᐃΔΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃᐃⵠᐃΔΔ;
    ⵠᐃ[rs.ⵠᐃᐃⵠᐃΔΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃᐃⵠᐃΔΔ;
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆⵠⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆⲆⲆⲆⵠⲆ;
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⲆⲆⲆⵠⲆ;
    ⵠᐃ[rs.ᐃΔΔΔⵠΔᐃ] = [];
    ⵠᐃ[rs.ᐃΔΔΔⵠΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔΔΔⵠΔᐃ;
    ⵠᐃ[rs.ᐃΔΔΔⵠΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔΔΔⵠΔᐃ;
    ⵠᐃ[rs.ⵠᐃⵠᐃΔⲆⲆ] = Ⲇᐃ.ⵠᐃⵠᐃΔⲆⲆ;
    ⵠᐃ[rs.ⲆᐃⵠΔⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⵠΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⵠⵠΔⵠᐃⵠ;
    ⵠᐃ[rs.ⲆᐃⵠΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃΔΔⲆⵠΔ;
    ⵠᐃ[rs.ΔⲆᐃᐃⲆ] = [];
    ⵠᐃ[rs.ΔⲆᐃᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆⵠᐃΔΔⲆ;
    ⵠᐃ[rs.ΔⲆᐃᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠᐃⵠΔΔⵠ;
    ⵠᐃ[rs.Δⵠⵠⵠⵠ] = [];
    ⵠᐃ[rs.Δⵠⵠⵠⵠ][rs.ΔΔⲆ] = [Ⲇᐃ.ⲆⵠⲆΔᐃᐃⵠ, Ⲇᐃ.ΔⵠΔⲆΔⵠⵠ, Ⲇᐃ.ΔᐃⵠᐃⲆⵠⲆ, Ⲇᐃ.ⲆᐃⲆᐃΔⲆΔ, Ⲇᐃ.ᐃΔⲆᐃΔᐃᐃ, Ⲇᐃ.ΔⵠΔⵠⵠΔⵠ, Ⲇᐃ.ⲆⲆⲆΔᐃΔⵠ, Ⲇᐃ.ᐃⵠⵠⵠΔⵠⵠ, Ⲇᐃ.ⲆⲆΔⲆΔⵠΔ];
    ⵠᐃ[rs.Δⵠⵠⵠⵠ][rs.ⵠⲆᐃ] = [Ⲇᐃ.ᐃᐃΔᐃⲆΔᐃ, Ⲇᐃ.ⲆⵠⲆⲆᐃᐃΔ, Ⲇᐃ.ΔⲆⵠᐃⲆΔⵠ, Ⲇᐃ.ΔΔΔΔⲆΔⵠ, Ⲇᐃ.ⲆΔⵠᐃΔᐃᐃ, Ⲇᐃ.ᐃⵠⲆᐃΔⵠᐃ, Ⲇᐃ.ⲆΔⲆⵠⵠᐃᐃ, Ⲇᐃ.ᐃⵠⵠⵠΔⵠⵠ, Ⲇᐃ.ΔⵠⵠⲆΔΔᐃ];
    ⵠᐃ[rs.ᐃΔᐃⵠᐃ] = [];
    ⵠᐃ[rs.ᐃΔᐃⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔᐃⲆⲆⵠⵠ;
    ⵠᐃ[rs.ᐃΔᐃⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠⲆᐃΔᐃΔ;
    ⵠᐃ[rs.ΔⵠᐃⵠⵠⲆⵠ] = [];
    ⵠᐃ[rs.ΔⵠᐃⵠⵠⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆΔⵠⵠᐃⲆⲆ;
    ⵠᐃ[rs.ΔⵠᐃⵠⵠⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⲆⲆΔⲆⲆΔ;
    ⵠᐃ[rs.ΔⲆⲆⲆᐃΔⲆ] = [];
    ⵠᐃ[rs.ΔⲆⲆⲆᐃΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆᐃᐃⲆⵠⵠ;
    ⵠᐃ[rs.ΔⲆⲆⲆᐃΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆᐃΔⲆΔⵠΔ;
    ⵠᐃ[rs.ΔⲆⲆⲆⲆ] = [];
    ⵠᐃ[rs.ΔⲆⲆⲆⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆᐃᐃΔⵠⵠ;
    ⵠᐃ[rs.ΔⲆⲆⲆⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠᐃⵠⵠᐃⵠᐃ;
    ⵠᐃ[rs.ᐃⲆⵠⵠⲆ] = [];
    ⵠᐃ[rs.ᐃⲆⵠⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆΔⵠΔᐃⲆ;
    ⵠᐃ[rs.ᐃⲆⵠⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔⲆⲆᐃᐃⵠ;
    ⵠᐃ[rs.ΔⲆⵠⵠᐃ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠⲆⲆΔⵠⲆΔ;
    ⵠᐃ[rs.ΔⲆⵠⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆⲆᐃⵠⲆΔ;
    ⵠᐃ[rs.ΔΔΔᐃᐃ] = [];
    ⵠᐃ[rs.ΔΔΔᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠΔᐃⵠⵠᐃᐃ;
    ⵠᐃ[rs.ΔΔΔᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆⵠⵠΔⵠᐃ;
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ⵠΔΔⲆⲆⲆⲆᐃⵠ);
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆᐃΔᐃᐃⲆⵠⲆΔ);
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃΔᐃⵠⵠⵠⲆΔⵠ);
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠΔⵠᐃΔⲆⵠᐃΔ);
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠᐃΔᐃᐃΔᐃΔᐃ);
    ⵠᐃ[rs.ⵠᐃⲆⵠΔ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃΔᐃᐃⵠΔⵠᐃᐃ);
    ⵠᐃ[rs.ⲆΔΔⵠᐃ] = [];
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔᐃⵠᐃⵠⲆⲆᐃΔ);
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ᐃΔⵠᐃΔⵠᐃⲆΔ);
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔᐃᐃᐃⲆⲆΔᐃᐃ);
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ΔᐃᐃⵠⵠΔⵠⵠⲆ);
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆⵠᐃⲆⲆⲆᐃⲆⲆ);
    ⵠᐃ[rs.ⲆΔΔⵠᐃ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠⲆᐃᐃⲆⵠⲆⵠⵠ);
    ⵠᐃ[rs.ⲆΔΔΔⵠ] = [];
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ⲆⵠΔᐃⵠΔⲆⵠΔ);
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔΔᐃΔⲆΔΔΔⲆ);
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ΔΔⲆ].push(Ⲇᐃ.ΔΔⵠⲆᐃΔⲆΔΔ);
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⲆⵠᐃΔᐃⵠⵠᐃⵠ);
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ᐃᐃᐃⲆⲆⵠΔⲆⵠ);
    ⵠᐃ[rs.ⲆΔΔΔⵠ][rs.ⵠⲆᐃ].push(Ⲇᐃ.ⵠΔⵠᐃᐃᐃⲆⲆΔ);
    ᐃΔᐃᐃ.g = [];
    ᐃΔᐃᐃ.g[0] = [Ⲇᐃ.ⵠᐃⲆᐃΔΔΔ, Ⲇᐃ.ᐃΔᐃⲆⲆΔⵠ];
    ᐃΔᐃᐃ.g[1] = ᐃΔᐃᐃ.g[0];
    ᐃΔᐃᐃ.g[2] = [Ⲇᐃ.ⵠⲆⵠᐃⲆᐃΔ, Ⲇᐃ.ⵠΔⲆᐃΔᐃᐃ];
    ᐃΔᐃᐃ.m = [];
    ᐃΔᐃᐃ.m[0] = [Ⲇᐃ.ⵠⵠⵠΔⵠΔΔ, Ⲇᐃ.ⵠⲆⵠⵠΔΔⵠ];
    ᐃΔᐃᐃ.m[1] = ᐃΔᐃᐃ.m[Xa];
    ᐃΔᐃᐃ.m[2] = [Ⲇᐃ.ΔΔⲆΔᐃⵠⲆ, Ⲇᐃ.ᐃᐃⲆᐃⵠᐃⲆ];
    ᐃΔᐃᐃ.la = [];
    ᐃΔᐃᐃ.la[0] = [Ⲇᐃ.ⲆᐃᐃⲆΔᐃⲆ, Ⲇᐃ.ⵠⲆⵠⵠᐃΔⵠ];
    ᐃΔᐃᐃ.la[Ws] = ᐃΔᐃᐃ.la[Yl];
    ᐃΔᐃᐃ.la[2] = ᐃΔᐃᐃ.la[fs];
    ᐃΔᐃᐃ.la[Kl] = ᐃΔᐃᐃ.la[hk];
    ᐃΔᐃᐃ.la[va] = ᐃΔᐃᐃ.la[0];
    ᐃΔᐃᐃ.la[Rh] = ᐃΔᐃᐃ.la[vl];
    ᐃΔᐃᐃ.s = [];
    ᐃΔᐃᐃ.s[ou] = [Ⲇᐃ.ΔᐃΔⵠⲆⵠΔ, Ⲇᐃ.ᐃⵠΔᐃⲆΔΔ];
    ᐃΔᐃᐃ.s[1] = ᐃΔᐃᐃ.s[Eu];
    ᐃΔᐃᐃ.s[2] = [Ⲇᐃ.ΔᐃⲆⲆᐃᐃᐃ, Ⲇᐃ.ⵠΔᐃⵠᐃᐃΔ];
    ᐃΔᐃᐃ.p = [];
    ᐃΔᐃᐃ.p[Go] = [Ⲇᐃ.ⵠⵠⲆΔᐃⵠᐃ, Ⲇᐃ.ⵠⵠⲆΔᐃⵠᐃ];
    ᐃΔᐃᐃ.a = [];
    ᐃΔᐃᐃ.a[0] = [Ⲇᐃ.ⲆⵠⵠⲆΔⵠⵠ, Ⲇᐃ.ⵠⵠⲆᐃⵠⲆⲆ];
    ᐃΔᐃᐃ.a[bh] = ᐃΔᐃᐃ.a[0];
    ᐃΔᐃᐃ.a[2] = ᐃΔᐃᐃ.a[0];
    ᐃΔᐃᐃ.d = [];
    ᐃΔᐃᐃ.d[Eu] = [Ⲇᐃ.ΔⲆⲆᐃΔⵠΔ, Ⲇᐃ.ᐃΔⲆᐃⵠᐃᐃ];
    ᐃΔᐃᐃ.d[bt] = ᐃΔᐃᐃ.d[hk];
    ᐃΔᐃᐃ.d[2] = ᐃΔᐃᐃ.d[jg];
    ᐃΔᐃᐃ.re = [];
    ᐃΔᐃᐃ.re[Yl] = [Ⲇᐃ.ᐃᐃⵠΔᐃᐃⵠ, Ⲇᐃ.ⲆᐃΔΔᐃⲆⲆ];
    ᐃΔᐃᐃ.re[1] = ᐃΔᐃᐃ.re[0];
    ᐃΔᐃᐃ.re[Pn] = ᐃΔᐃᐃ.re[ou];
    ᐃΔᐃᐃ.f = [];
    ᐃΔᐃᐃ.f[ou] = [Ⲇᐃ.ⲆᐃⵠΔΔΔΔ, Ⲇᐃ.ⵠΔᐃⵠⵠⵠᐃ];
    ᐃΔᐃᐃ.f[y] = ᐃΔᐃᐃ.f[Eu];
    ᐃΔᐃᐃ.f[Og] = ᐃΔᐃᐃ.f[0];
    ᐃΔᐃᐃ.isl = [];
    ᐃΔᐃᐃ.isl[jg] = [Ⲇᐃ.ᐃΔⲆΔᐃⵠⵠ, Ⲇᐃ.ΔᐃΔᐃⲆΔΔ];
    ᐃΔᐃᐃ.isl[y] = ᐃΔᐃᐃ.isl[jg];
    ᐃΔᐃᐃ.isl[2] = ᐃΔᐃᐃ.isl[ou];
    ᐃΔᐃᐃ.c = [];
    ᐃΔᐃᐃ.c[dh] = [Ⲇᐃ.ΔⵠΔᐃⲆΔΔ, Ⲇᐃ.ᐃⲆΔᐃⲆᐃⵠ];
    ᐃΔᐃᐃ.c[1] = ᐃΔᐃᐃ.c[0];
    ᐃΔᐃᐃ.c[pn] = ᐃΔᐃᐃ.c[Bs];
    ᐃΔᐃᐃ.wtb = [];
    ᐃΔᐃᐃ.wtb[lt] = [Ⲇᐃ.ΔΔΔⵠⵠΔⲆ, Ⲇᐃ.ⲆⵠᐃⵠⲆΔⲆ];
    ᐃΔᐃᐃ.PIRANHA = [Ⲇᐃ.ⵠΔⵠⲆⲆᐃΔ, Ⲇᐃ.ⲆᐃᐃᐃⵠⵠⲆ];
    ᐃΔᐃᐃ.KRAKEN = [Ⲇᐃ.ᐃᐃᐃᐃⲆⲆΔ, Ⲇᐃ.ⲆΔⵠΔᐃⵠⵠ];
    ᐃΔᐃᐃ.FOX = [Ⲇᐃ.ⵠⲆΔⲆΔⲆⲆ, Ⲇᐃ.ⵠⲆΔⲆⵠᐃᐃ];
    ᐃΔᐃᐃ.WOLF = [Ⲇᐃ.ΔⲆⲆⲆΔⲆΔ, Ⲇᐃ.ᐃΔᐃⵠⲆⵠⲆ];
    ᐃΔᐃᐃ.SPIDER = [Ⲇᐃ.ΔⵠⵠⲆⲆⲆⵠ, Ⲇᐃ.ⵠΔΔΔΔⲆⵠ];
    ᐃΔᐃᐃ.BEAR = [Ⲇᐃ.ⵠΔⲆᐃⲆΔΔ, Ⲇᐃ.ⵠᐃⲆⲆᐃᐃⵠ];
    ᐃΔᐃᐃ.CAVE = [Ⲇᐃ.ⲆΔΔᐃᐃⵠΔ, Ⲇᐃ.ΔΔⲆᐃΔΔⲆ];
    ᐃΔᐃᐃ.MAP = [Ⲇᐃ.ᐃᐃΔΔⵠᐃⲆ, Ⲇᐃ.ⵠⵠⲆⲆⲆΔᐃ];
    ᐃΔᐃᐃ.FOREST = [Ⲇᐃ.ⲆⲆⲆΔᐃⲆᐃ, Ⲇᐃ.ΔⲆᐃᐃⵠΔⲆ];
    ᐃΔᐃᐃ.WINTER = [Ⲇᐃ.ᐃΔΔᐃⵠΔΔ, Ⲇᐃ.ⲆᐃⵠΔⲆΔΔ];
    ᐃΔᐃᐃ.DESERT = [Ⲇᐃ.ⵠⲆⵠⵠΔⵠⵠ, Ⲇᐃ.ΔⵠⵠᐃᐃΔⲆ];
    ᐃΔᐃᐃ.LAVA = [Ⲇᐃ.ΔᐃⵠⲆΔᐃⲆ, Ⲇᐃ.ⵠΔᐃⲆⲆᐃΔ];
    for (var b in ᐃΔᐃᐃ) {
      for (var c = ᐃΔᐃᐃ[b], d = Bs; d < c.length; d++) {
        var e = c[d];
        if (e.ⲆᐃⵠⵠⵠᐃⲆ !== Eh) {
          e.ⲆᐃⵠⵠⵠᐃⲆ();
        } else if (e.length > 0) {
          for (var f = vl; f < e.length; f++) {
            if (e[f].ⲆᐃⵠⵠⵠᐃⲆ !== undefined) {
              e[f].ⲆᐃⵠⵠⵠᐃⲆ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function Sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    Tb(d, a * 55, a * 55, a * 55);
    yb(d, b[0]);
    return c;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(Ph * a, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * Ao, a * 54, Dl * a);
    e.bezierCurveTo(a * 33.5, a * vi, a * 33.5, a * tu, th * a, Ul * a);
    e.closePath();
    yb(e, c[ho]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, cg * a, a * 37.5, a * 17, a * 54, E * a);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    yb(e, c[bq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    yb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Zn * a, a * 89);
    e.bezierCurveTo(Ha * a, a * qr, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    yb(e, c[Ab]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(yn * a, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    yb(e, pa, c[jo], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    yb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(zq * a, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    yb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    yb(e, undefined, c[Io], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    yb(e, pa, c[va], Vh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    yb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * Ll, a * 20);
    e.closePath();
    yb(e, Sn, c[qa], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * $a, a * 53, a * nk, a * 55, a * vd);
    e.closePath();
    yb(e, undefined, c[Ik], a * rt);
    return d;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 120;
    d.height = a * 100;
    wb(e, Sb * a, a * cl, a * 95, a * 80, a * 10);
    yb(e, b[2]);
    wb(e, a * ek, a * 5, a * 95, a * 80, a * 10);
    yb(e, b[3], b[va], Ur * a);
    if (Ob == c) {
      var f = Fc(a * 0.75, b, Yl);
      e.drawImage(f, a * 22, a * 18);
    } else if (c == 1) {
      f = Fc(a * 0.75, b, 1);
      e.drawImage(f, a * 22, Fa * a);
    }
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * Ka, a * rk);
      e.scale(0.9, 0.9);
      e.save();
      wb(e, a * 0, a * zq, a * 90, a * 60, hc);
      yb(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      Tb(e, a * 25, a * 40, hc * a);
      e.fill();
      Tb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      wb(e, Yl, 0, a * 90, a * 60, a * cl);
      yb(e, b[kr]);
      e.globalCompositeOperation = "destination-out";
      Tb(e, a * 25, a * 40, a * 10);
      e.fill();
      Tb(e, a * 65, a * 40, sh * a);
      e.fill();
      e.restore();
    } else if (hj == c) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      yb(e, b[ck]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      yb(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      yb(e, b[Zk]);
      e.restore();
      e.save();
      wb(e, 0, a * 15, a * 90, a * 50, a * 10);
      yb(e, b[lt]);
      wb(e, ka, a * 10, a * 90, a * 50, a * sh);
      yb(e, b[bh]);
      e.globalCompositeOperation = "destination-out";
      Tb(e, a * 25, a * 40, a * Cg);
      e.fill();
      Tb(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * ar, a * 50);
    d.bezierCurveTo(a * 15, pg * a, a * 49, jn * a, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * kl, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * Es, a * 50);
    d.closePath();
    yb(d, b[0]);
    d.translate(0, a * -ar);
    d.globalAlpha = $r;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, ih * a, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, wq * a, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * ys, a * 127, a * sd, a * 87, ct * a, a * 50);
    d.closePath();
    yb(d, b[1], b[cn], a * Ik);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, Gs * a, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    yb(d, b[1], b[nq], Yr * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, ci * a, a * 146, a * 52, a * 133, a * 58);
    yb(d, b[Ws], b[yl], a * Kg);
    Tb(d, a * 51, a * 91, Ok * a);
    yb(d, b[3]);
    Tb(d, a * 95, a * 91, a * bk);
    yb(d, b[3]);
    Tb(d, a * 91, a * 89, a * 4);
    yb(d, b[4]);
    Tb(d, a * 47, a * 89, a * qa);
    yb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    yb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    yb(d, b[xg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    yb(d, undefined, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Rg, a * 58);
    d.bezierCurveTo(a * 10, a * 38, Ql * a, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    yb(d, b[lu]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    yb(d, b[Vh]);
    return c;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(hk, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    yb(e, c[0], c[$q], pj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    yb(e, pl, c[Go], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    yb(e, c[2], c[Gt], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    yb(e, c[2], c[kl], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    yb(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    yb(e, c[2], c[Gt], a * 12);
    return d;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    yb(e, c[bn], c[8], a * Ar);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    yb(e, c[8], c[bn], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    yb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    yb(e, c[Zj], c[Sr], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    yb(e, c[ct], c[8], tu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    yb(e, c[8], c[8], Sd * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    yb(e, c[8], c[Os], a * Zj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    yb(e, c[8], c[_j], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    yb(e, c[8], c[Wh], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    yb(e, c[Zk], c[Pn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    yb(e, c[El], c[2], xs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    yb(e, c[1], c[Pn], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    yb(e, c[$r], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    yb(e, c[3], c[Og], Io * a);
    Tb(e, a * 108.5, a * 148.421875, os * a);
    yb(e, c[5]);
    Tb(e, a * 106.5, a * 144.421875, a * 3);
    yb(e, c[6]);
    Tb(e, a * 46.5, a * 148.421875, a * 9);
    yb(e, c[Yo]);
    Tb(e, a * 44.5, a * 144.421875, a * Kl);
    yb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    yb(e, c[3], c[2], a * Fl);
    e.beginPath();
    e.translate(0, -uj * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    yb(e, c[Xg], c[Ls], Io * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    yb(e, c[Fl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    yb(e, c[3], c[rb], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    yb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    yb(e, c[Rb], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    yb(e, c[rt], c[vh], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    yb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    yb(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    yb(e, c[Qh], c[2], oo * a);
    return d;
  }
  function Lc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var h = b * jo;
    c.width = e;
    c.height = f;
    wb(d, b * 5, b * O, e - vi * b, f - b * 10, g);
    yb(d, null, "#BBE8EF", h);
    return c;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    wb(e, a * -58.5, a * -27.5, a * 117, a * 55, Lg * a);
    e.restore();
    yb(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    wb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    yb(e, c[yl], c[$q], ll * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    yb(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * wh, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, Zi * a, a * 99.375, a * vi, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(qe * a, a * 68.375, gl * a, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    yb(e, c[2], c[ck], a * Kg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * Tk, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * pu, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    yb(e, c[Sa], c[El], Kg * a);
    Tb(e, a * 71, a * 44.375, a * 16.55294535724685);
    yb(e, c[kg], c[y], a * 4);
    Tb(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    yb(e, c[2], c[$q], a * 4);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    wb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    yb(e, c[0], c[El], a * te);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    yb(e, c[2], c[Ds], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    wb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    yb(e, c[Yr], c[1], Nl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    yb(e, Eh, c[Ws], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    yb(e, c[oo], c[og], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    yb(e, c[4], c[El], a * Os);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    yb(e, c[mi], c[1], Zj * a);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    wb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    yb(e, c[wr]);
    return d;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(Ts * a, a * 1);
    e.globalAlpha = 0.3;
    Tb(e, a * 98, a * 99, a * 100);
    yb(e, c[0]);
    e.globalAlpha = 0.5;
    Tb(e, a * 98, a * 99, a * 90);
    yb(e, c[1]);
    return d;
  }
  function qc(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 81;
    e.height = a * 77;
    f.translate(vl, a * 10);
    f.scale(0.2, 0.2);
    f.translate(0, a * -30);
    if (d == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 36.5, a * 278.0625);
      f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      f.closePath();
      yb(f, c[0], c[3], a * 50);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    yb(f, c[Bs], c[or], a * ij);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 214.5, a * 124.0625);
    f.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    f.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    f.closePath();
    yb(f, c[dt], c[1], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 145.0625);
    f.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    f.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    f.closePath();
    yb(f, c[0], c[$q], Pa * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103.5, a * 169.0625);
    f.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    f.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    f.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    f.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    f.closePath();
    yb(f, c[ab], c[vg], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 313.0625);
    f.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    f.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    f.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    f.closePath();
    yb(f, c[bt]);
    f.scale(wn, _g);
    f.translate(rk, a * 10);
    if (d == y) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * va, a * 32);
      f.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      f.bezierCurveTo(a * 59.5, Fq * a, a * 59.5, tl * a, a * 70, bi * a);
      yb(f, C, c[Qq], a * 28);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 56, a * 6);
      f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * pn);
      f.closePath();
      yb(f, c[Qq], c[3], a * 28);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * mi, a * 32);
    f.bezierCurveTo(a * gh, a * 25, a * 19, a * 25, a * 34, a * 18);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, hs * a, a * 59.5, a * aq, a * 70, a * 11);
    yb(f, undefined, c[Ng], a * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * pi);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, uj * a);
    f.closePath();
    yb(f, c[1], c[1], a * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * wk, a * 32);
    f.bezierCurveTo(a * 19, a * 25, Bi * a, a * 25, a * 34, a * b);
    f.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    f.bezierCurveTo(a * 59.5, tl * a, a * 59.5, a * lg, a * 70, a * ah);
    yb(f, undefined, c[2], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 6);
    f.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    f.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, nq * a);
    f.closePath();
    yb(f, c[pn], c[2], a * 10);
    return e;
  }
  function Hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(fs, a * tu);
    e.save();
    e.translate(a * 80.5, a * 78);
    wb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    yb(e, c[dt]);
    e.globalAlpha = 1;
    e.translate(jg, a * -Xn);
    e.save();
    e.translate(a * 80.5, a * 78);
    wb(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    yb(e, c[1], c[nl], a * dn);
    e.save();
    e.translate(a * 80, a * 78.5);
    wb(e, a * -17, a * -72.5, a * 34, a * 145, cl * a);
    e.restore();
    yb(e, c[3], c[Eg], a * lu);
    e.globalAlpha = b ? 0.5 : Zn;
    e.translate(lt, Hh * a);
    e.save();
    e.translate(a * 80, a * 79.5);
    wb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    wb(e, a * -73, a * -16.5, a * 145, a * 34, Qg * a);
    e.restore();
    yb(e, c[3], c[Io], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(dt, a * Cg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    yb(e, c[Eu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    yb(e, c[ka]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    yb(e, c[dt]);
    e.globalAlpha = 1;
    e.translate(Hb, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    yb(e, c[3], c[Fl], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    yb(e, c[Qq], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    yb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    yb(e, c[3], c[oo], a * 6);
    e.globalAlpha = b ? 0.5 : hj;
    e.translate(0, a * ok);
    e.save();
    e.translate(a * 78.5, a * 78);
    wb(e, a * -13.5, a * -_i, a * 27, a * 27, a * iq);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = Zk;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    wb(e, a * -13.5, a * -14, a * 27, a * 27, a * za);
    e.restore();
    yb(e, c[Oj], c[4], a * f);
    return d;
  }
  function Uc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * Yo, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    yb(d, b[0]);
    d.globalAlpha = $q;
    d.translate(a * -Ur, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    yb(d, undefined, b[1], al * a);
    d.translate(a * -1, a * fs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    yb(d, b[jo], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    yb(d, b[Ol], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    yb(d, b[4], b[Jb], Kg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    yb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    yb(d, b[Pn], b[3], Rh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    yb(d, b[Gt]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    yb(d, b[Oj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    yb(d, b[sd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    yb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    yb(d, b[yr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    yb(d, b[6], b[7], a * Eg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    yb(d, b[xg], b[7], Eg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    yb(d, b[6], b[at], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    yb(d, b[kh], b[7], jo * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    yb(d, b[es], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    yb(d, b[kh], b[7], Eg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    yb(d, b[lu], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    yb(d, b[f], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    yb(d, b[pu], b[Zq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    yb(d, b[6], b[7], xs * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    yb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    yb(d, b[es], b[He], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    yb(d, b[ct], b[9], a * wn);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    yb(d, b[Sd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    yb(d, b[mg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    yb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    yb(d, b[wh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    yb(d, b[q]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    yb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    yb(d, b[xn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    yb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    yb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    yb(d, b[Dg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    yb(d, b[dl]);
    Tb(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    yb(d, b[zl]);
    Tb(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    yb(d, b[13]);
    Tb(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    yb(d, b[12]);
    Tb(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    yb(d, b[Ug]);
    return c;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : kr;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(Bs, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * Kl, a * 60, a * vk, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, Wa * a, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    yb(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(lt, -Ss);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(yr * a, a * 60, ug * a, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    yb(e, c[Bs], c[vg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    yb(e, c[lt], c[bt], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    yb(e, c[uj], c[Ab], a * mi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * _o, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    yb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    yb(e, Hi, c[og], a * 4);
    Tb(e, a * 58, a * 50, a * 5);
    yb(e, c[4]);
    Tb(e, a * 43, a * 65, a * 5);
    yb(e, c[Qa]);
    Tb(e, a * 58, a * 73, a * 5);
    yb(e, c[4]);
    Tb(e, a * 58, a * 50, a * nq);
    yb(e, c[wr]);
    Tb(e, a * 43, a * 65, a * Og);
    yb(e, c[Hl]);
    Tb(e, a * 58, a * 73, a * 2);
    yb(e, c[5]);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(dt);
    wb(e, a * -21.5, a * -34, a * 43, a * 68, a * Os);
    e.restore();
    yb(e, c[1], c[rb], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    yb(e, undefined, c[Vn], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    yb(e, ml, c[lu], sr * a);
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(Xa);
    wb(e, a * -21.5, a * -34, a * 43, a * 68, Es * a);
    e.restore();
    yb(e, c[bq], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    yb(e, c[Xg], c[qa], M * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    yb(e, Ji, c[Rh], wo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    yb(e, oh, c[iq], a * 15);
    return d;
  }
  function Xc(b, c, d, e) {
    const f = ~(b & 32924) & (b | 32924);
    const g = c ^ 25669;
    const i = (8 << (d >> Ob & 255)) + (0 << (d >> 8 & Ig)) + (16 << (d >> 16 & 255)) + (24 << (d >> 24 & Rs));
    const a = ~(e & 52849) & (e | 52849);
    const j = function (b, c, d, e) {
      const f = (12345 + (36970 + b) * 1103515245) % 2147483648;
      const g = (2531011 + (c + 45004) * 214013) % 4294967296;
      const i = d ^ 49735;
      const a = ~(e & 63410) & e | ~(e & 63410) & 63410;
      const j = zo(f, g, i, a, f);
      const h = function (b, c, d, e, f, i) {
        const j = ~(b & 46933) & b | ~(b & 46933) & 46933;
        const a = ((d + 22745) * 2147483629 + 2147483587) % 2147483647;
        const k = ((e + 58347) * 214013 + 2531011) % 4294967296;
        const h = ~(f & 52727) & f | ~(f & 52727) & 52727;
        const l = ~(i & 20032) & (i | 20032);
        const g = Uk(j, (8 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)));
        Yk(a, k, h, l, j);
        return ~(g & 25886) & (g | 25886);
      }(g, i, a, f, g, i);
      return (24 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) >> 16 & 255)) + (8 << ((j ^ h) >> 24 & 255)) + (16 << ((j ^ h) >> Eu & 255));
    }(f, g, i, a);
    const h = eb(f, g, i, a);
    return (0 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) & 255));
  }
  function Zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    yb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    yb(d, b[Ls], b[Ia], jo * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    yb(d, b[2]);
    return c;
  }
  function $c(a, b, c, d) {
    Fi(Ak, a, b, c, d);
    return (6215 + (kt(zk[Et], zk[1]) ^ kt(zk[ys], zk[kl]))) % 65302;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * Sh);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    yb(e, c[jg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    yb(e, undefined, c[ou], a * 11);
    e.translate(Xa, a * -5);
    e.globalAlpha = Dj;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    yb(e, c[Ui], c[Xj], a * al);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    yb(e, c[$q], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    yb(e, undefined, c[Pn], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    yb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    yb(e, c[$r], c[2], a * ah);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    yb(e, c[4], c[uj], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    yb(e, c[wk], c[2], bi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * v, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    yb(e, undefined, c[2], a * ah);
    return d;
  }
  function im(b, c, d, e, f) {
    const g = b ^ 2322;
    const i = (Oa << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)) + (24 << (c & 255));
    const a = (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (I << (d & 255)) + (0 << (d >> 24 & Rs));
    const j = (8 << (e >> 16 & 255)) + (0 << (e & 255)) + (B << (e >> 8 & 255)) + (24 << (e >> 24 & 255));
    const h = Jo(g, i, a, j, (2147483587 + (17402 + f) * 2147483629) % 2147483647, g);
    To(i, a, j);
    return h ^ 53978;
  }
  function tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : or;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    yb(e, c[lt]);
    e.translate(Xa, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    yb(e, c[og], c[2], Os * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    yb(e, c[Qa], c[5], a * ub);
    return d;
  }
  function nm(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 198;
    e.height = a * 147;
    f.globalAlpha = b ? 0.5 : kr;
    f.translate(Bs, a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 76);
    f.bezierCurveTo(a * 50, a * 82, a * 50, a * 82, a * 56, a * 88);
    f.bezierCurveTo(a * 59, a * 82, a * 59, a * 82, a * 62, a * 76);
    f.bezierCurveTo(a * 59, a * 71, a * 59, a * 71, a * 56, a * 66);
    f.bezierCurveTo(a * 59, a * 69, a * 59, a * 69, a * 62, a * 72);
    f.bezierCurveTo(a * 80, a * 48, a * 102, a * 50, a * 120, a * 62);
    f.bezierCurveTo(a * 127, a * 58, a * 127, a * 58, a * 134, a * 54);
    f.bezierCurveTo(a * 129, a * 60, a * 129, a * 60, a * 124, a * 66);
    f.bezierCurveTo(a * 129, a * 73, a * 129, a * 73, a * 134, a * 80);
    f.bezierCurveTo(a * 140, a * 74, a * 140, a * 74, a * 146, a * 68);
    f.bezierCurveTo(a * 142, a * 76, a * 142, a * 76, a * 138, a * 84);
    f.bezierCurveTo(a * 144, a * 90, a * 142, a * 90, a * 144, a * 90);
    f.bezierCurveTo(a * 136, a * 97, a * 136, a * 97, a * 128, a * 104);
    f.bezierCurveTo(a * 154, a * 110, a * 164, a * 90, a * 160, a * 80);
    f.bezierCurveTo(a * 138, a * 22, a * 148, a * 51, a * 136, a * 22);
    f.bezierCurveTo(a * 97, a * 24, a * 97, a * 24, a * 58, a * 26);
    f.bezierCurveTo(a * 47, a * 54, a * 36, a * 80, a * 36, a * 82);
    f.bezierCurveTo(a * 40, a * 108, a * 54, a * 104, a * 62, a * 104);
    f.bezierCurveTo(a * 46, a * 92, a * 54, a * 97, a * 46, a * 90);
    f.closePath();
    yb(f, c[Et]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * hh);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, wg * a, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * 100);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    yb(f, c[Xa]);
    f.globalAlpha = 1;
    f.translate(0, a * -Vs);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * 100);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * qr, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * 100);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    yb(f, c[og], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 98);
    f.bezierCurveTo(a * 96.5, a * 98, a * 96.5, a * 98, a * 144, a * 98);
    f.bezierCurveTo(a * 136.5, a * 102, a * 136.5, a * 102, a * 129, a * 106);
    f.bezierCurveTo(a * 103, a * 105.5, a * 103, a * 105.5, a * 77, a * 105);
    f.bezierCurveTo(a * 65, a * 105, a * 65, a * 105, a * 53, a * 105);
    f.closePath();
    yb(f, c[y]);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 98);
    f.bezierCurveTo(a * 97, a * 98, a * 97, a * 98, a * 140, a * 98);
    f.bezierCurveTo(a * 134, a * 101, a * 134, a * 101, a * 128, a * 104);
    f.bezierCurveTo(a * 92, a * 104, a * 92, a * 104, a * 56, a * 104);
    f.closePath();
    yb(f, c[hk]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 47);
    f.bezierCurveTo(a * 124.5, a * 43.5, a * 124.5, a * 43.5, a * 131, a * 40);
    f.bezierCurveTo(a * 128, a * 46, a * 128, a * 46, a * 125, a * 52);
    f.bezierCurveTo(a * 131, a * 57, a * 135, a * 64, a * 139, a * 73);
    f.bezierCurveTo(a * 142.5, a * 69.5, a * 142.5, a * 69.5, a * 146, a * 66);
    f.bezierCurveTo(a * 143.5, a * 72.5, a * 143.5, a * 72.5, a * 141, a * 79);
    f.bezierCurveTo(a * 142, a * 91, a * 141, a * 94, a * 132, a * 98);
    f.bezierCurveTo(a * 117, a * 102, a * 126, a * 108, a * 142, a * 102);
    f.bezierCurveTo(a * 159, a * 98, a * 164, a * 80, a * 162, a * 47);
    f.bezierCurveTo(a * 160, a * 19, a * 150, a * lu, a * 117, a * 4);
    f.bezierCurveTo(a * 44, a * 0, a * 35, a * ph, a * 33, a * 37);
    f.bezierCurveTo(a * 29, a * 69, a * 33, a * 88, a * 44, a * 96);
    f.bezierCurveTo(a * 64, a * 107, a * 70, a * 102, a * 54, a * 93);
    f.bezierCurveTo(a * 49, a * 88, a * 50, a * 82, a * 53, a * 77);
    f.bezierCurveTo(a * 51.5, a * 71, a * 51.5, a * 71, a * 50, a * 65);
    f.bezierCurveTo(a * 53, a * 68.5, a * 53, a * 68.5, a * 56, a * 72);
    f.bezierCurveTo(a * 59, a * 67.5, a * 59, a * 67.5, a * 62, a * 63);
    f.bezierCurveTo(a * 60.5, a * 59.5, a * 60.5, a * 59.5, a * 59, a * 56);
    f.bezierCurveTo(a * 62, a * 57, a * 62, a * 57, a * 65, a * 58);
    f.bezierCurveTo(a * 78, a * 35, a * 103, a * 36, a * 117, a * 47);
    f.closePath();
    yb(f, c[1], c[2], pu * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 21);
    f.bezierCurveTo(a * 63, a * 34, a * 64, a * 37, a * 66, a * 40);
    f.bezierCurveTo(a * 54, a * 49, a * 53, a * 51, a * 48, a * 58);
    f.bezierCurveTo(a * 44, a * 51, a * 42, a * 43, a * 40, a * 36);
    f.bezierCurveTo(a * 47, a * 28, a * 52, a * 25, a * 61, a * 21);
    f.closePath();
    yb(f, c[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 29);
    f.bezierCurveTo(a * 62, a * 25, a * 65, a * 24, a * 70, a * 23);
    yb(f, Kk, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61, a * 37);
    f.bezierCurveTo(a * 63, a * 32, a * 66, a * 32, a * 71, a * 32);
    yb(f, ml, c[3], a * T);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 26, a * 50, a * 25, a * 51, a * 23);
    yb(f, undefined, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 35);
    f.bezierCurveTo(a * 44, a * 31, a * 43, a * 29, a * 45, a * 26);
    yb(f, Eh, c[3], a * mi);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 44);
    f.bezierCurveTo(a * 57, a * 48, a * 57, a * 50, a * 60, a * 52);
    yb(f, undefined, c[Jh], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 48);
    f.bezierCurveTo(a * 52, a * 52, a * 52, a * 54, a * 55, a * 57);
    yb(f, undefined, c[wn], ll * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 41);
    f.bezierCurveTo(a * 41, a * 42, a * 39, a * 45, a * 38, a * 48);
    yb(f, undefined, c[wn], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 48);
    f.bezierCurveTo(a * 42, a * 51, a * 42, a * 53, a * 40, a * 55);
    yb(f, Zr, c[wn], a * 4);
    if (d == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 99, a * 101);
      f.bezierCurveTo(a * 118.6666259765625, a * 104.33331298828125, a * 124.6666259765625, a * 116.33331298828125, a * 112.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 104.6666259765625, a * 112.33331298828125, a * 100.6666259765625, a * 105.33331298828125, a * 99.6666259765625, a * 101.33331298828125);
      yb(f, ml, c[hg], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 97.6666259765625, a * 101.33331298828125);
      f.bezierCurveTo(a * 81.6666259765625, a * 106.33331298828125, a * 79.6666259765625, a * 114.33331298828125, a * 89.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 95.6666259765625, a * 111.33331298828125, a * 95.6666259765625, a * 109.33331298828125, a * 98.6666259765625, a * 102.33331298828125);
      yb(f, undefined, c[5], a * jn);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 120, a * 106.39999389648438, a * 118, a * 107.39999389648438, a * 120, a * 111.39999389648438);
      yb(f, undefined, c[5], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 90, a * 103.39999389648438, a * 89, a * 106.39999389648438, a * 87, a * 112.39999389648438);
      yb(f, undefined, c[fl], a * Jl);
      Tb(f, a * 86, a * 114.39999389648438, a * 4.5);
      yb(f, c[1], c[Gj], a * 6);
      Tb(f, a * 121, a * 114.39999389648438, a * 4.5);
      yb(f, c[1], c[bb], a * 6);
    }
    return e;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = $r;
    e.translate(a * 20, a * hs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    yb(e, c[fs]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    yb(e, c[1], c[2], a * ij);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    yb(e, wl, c[2], Bi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    yb(e, undefined, c[rb], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    yb(e, c[yr], c[2], a * 19);
    Tb(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    yb(e, c[4]);
    Tb(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    yb(e, c[wk]);
    Tb(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    yb(e, c[Kg]);
    Tb(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    yb(e, c[4]);
    Tb(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    yb(e, c[4]);
    Tb(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    yb(e, c[4]);
    Tb(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    yb(e, c[Qa]);
    Tb(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    yb(e, c[4]);
    Tb(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    yb(e, c[T]);
    Tb(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    yb(e, c[Ur]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    yb(e, c[5]);
    return d;
  }
  function rm() {
    ⵠᐃ[rs.ΔΔⲆⵠᐃⵠΔ] = Rt(Zk, [{
      f: tm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", fj[ub], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃⲆᐃᐃⵠΔ] = ⵠᐃ[rs.ΔΔⲆⵠᐃⵠΔ];
    ⵠᐃ[rs.ⵠᐃⲆⲆⲆⵠⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⲆⲆⵠⲆ][0] = Ⲇᐃ.ΔⲆΔⲆⲆΔΔ;
    ⵠᐃ[rs.ⵠᐃⲆⲆⲆⵠⲆ][ck] = Ⲇᐃ.ⲆⲆΔᐃΔΔⲆ;
    ⵠᐃ[rs.ⵠᐃⲆⲆⲆⵠⲆ][2] = Ⲇᐃ.ⲆΔⵠⵠⲆΔⲆ;
    ⵠᐃ[rs.ΔΔΔΔⵠΔⲆ] = ⵠᐃ[rs.ⵠᐃⲆⲆⲆⵠⲆ];
    ⵠᐃ[rs.ΔⵠⲆΔΔⲆΔ] = [];
    ⵠᐃ[rs.ΔⵠⲆΔΔⲆΔ][gj] = Ⲇᐃ.ΔΔⲆΔⲆΔΔ;
    ⵠᐃ[rs.ΔⵠⲆΔΔⲆΔ][1] = Ⲇᐃ.ⲆΔΔᐃⲆᐃⲆ;
    ⵠᐃ[rs.ΔⵠⲆΔΔⲆΔ][Sa] = Ⲇᐃ.ΔΔᐃᐃᐃΔⵠ;
    ⵠᐃ[rs.ⲆΔᐃⵠΔΔΔ] = ⵠᐃ[rs.ΔⵠⲆΔΔⲆΔ];
    ⵠᐃ[rs.ⲆΔΔⵠΔᐃⲆ] = [];
    ⵠᐃ[rs.ⲆΔΔⵠΔᐃⲆ][0] = Ⲇᐃ.ΔⲆΔΔⵠⲆΔ;
    ⵠᐃ[rs.ⲆΔΔⵠΔᐃⲆ][1] = Ⲇᐃ.ᐃⲆᐃΔⲆΔⵠ;
    ⵠᐃ[rs.ⲆΔΔⵠΔᐃⲆ][nl] = Ⲇᐃ.ᐃᐃⵠⵠᐃⵠⲆ;
    ⵠᐃ[rs.ⵠⵠⲆΔΔⵠᐃ] = ⵠᐃ[rs.ⲆΔΔⵠΔᐃⲆ];
    ⵠᐃ[rs.ᐃᐃΔΔᐃΔⲆ] = [];
    ⵠᐃ[rs.ᐃᐃΔΔᐃΔⲆ][fs] = Ⲇᐃ.ⲆΔᐃΔⵠⵠⵠ;
    ⵠᐃ[rs.ᐃᐃΔΔᐃΔⲆ][og] = Ⲇᐃ.ⲆⵠᐃΔⲆⲆⵠ;
    ⵠᐃ[rs.ᐃᐃΔΔᐃΔⲆ][Sa] = Ⲇᐃ.ⵠᐃⲆᐃⲆΔⵠ;
    ⵠᐃ[rs.ΔⲆⲆᐃΔᐃⵠ] = ⵠᐃ[rs.ᐃᐃΔΔᐃΔⲆ];
    ⵠᐃ[rs.ΔⲆΔⵠⵠⵠᐃ] = [];
    ⵠᐃ[rs.ΔⲆΔⵠⵠⵠᐃ][0] = Ⲇᐃ.ᐃⵠΔⵠᐃᐃᐃ;
    ⵠᐃ[rs.ΔⲆΔⵠⵠⵠᐃ][uq] = Ⲇᐃ.ᐃⵠΔⵠᐃΔⲆ;
    ⵠᐃ[rs.ΔⲆΔⵠⵠⵠᐃ][ys] = Ⲇᐃ.ⲆᐃⵠᐃΔᐃΔ;
    ⵠᐃ[rs.ⲆⲆⲆΔᐃⲆΔ] = ⵠᐃ[rs.ΔⲆΔⵠⵠⵠᐃ];
    ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ][0] = Ⲇᐃ.ⵠⵠΔⵠΔᐃΔ;
    ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ][1] = Ⲇᐃ.ΔⵠⲆᐃΔⲆⵠ;
    ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ][Og] = Ⲇᐃ.ΔᐃⵠⲆⲆⲆΔ;
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃⲆ] = ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ];
    ⵠᐃ[rs.ΔΔⵠⵠΔⵠⵠ] = ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ];
    ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ] = [];
    ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ][0] = Ⲇᐃ.ⵠⲆⲆᐃᐃⲆᐃΔΔ;
    ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ][1] = Ⲇᐃ.ᐃΔΔⵠⲆⲆⵠΔⵠ;
    ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ][2] = Ⲇᐃ.ᐃⵠⲆΔΔⵠᐃΔᐃ;
    ⵠᐃ[rs.ᐃΔΔᐃⵠⲆᐃ] = ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ];
    ⵠᐃ[rs.ⵠᐃᐃΔΔΔΔ] = ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ];
    ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ] = [];
    ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ][0] = Ⲇᐃ.ᐃΔⲆⲆΔᐃΔ;
    ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ][hj] = Ⲇᐃ.ᐃᐃᐃᐃⵠⵠⵠ;
    ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ][2] = Ⲇᐃ.ⲆΔᐃⵠⵠᐃⲆ;
    ⵠᐃ[rs.ᐃΔΔⵠⲆΔᐃ] = ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ];
    ⵠᐃ[rs.ⵠⵠᐃᐃⲆΔⲆ] = ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ];
    ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ] = [];
    ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ][0] = Ⲇᐃ.ΔΔⲆⲆⵠΔⵠ;
    ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ][hj] = Ⲇᐃ.ΔⲆᐃΔⵠᐃⵠ;
    ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ][Ls] = Ⲇᐃ.ᐃᐃⲆⲆⵠⲆⲆ;
    ⵠᐃ[rs.ⵠⲆᐃΔᐃᐃᐃ] = ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ];
    ⵠᐃ[rs.ⲆⵠᐃⵠΔᐃⲆ] = ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ];
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃⵠⲆ][0] = Ⲇᐃ.ⵠᐃΔΔⲆⵠⵠ;
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃⵠⲆ][uq] = Ⲇᐃ.ⲆᐃⲆΔᐃⵠⵠ;
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃⵠⲆ][ys] = Ⲇᐃ.Δᐃⵠᐃᐃᐃⵠ;
    ⵠᐃ[rs.ΔᐃⲆⲆΔᐃⲆ] = ⵠᐃ[rs.ⲆⲆᐃⵠᐃⵠⲆ];
    ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ] = [];
    ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ][ou] = Ⲇᐃ.ᐃᐃⵠⵠΔᐃΔ;
    ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ][bh] = Ⲇᐃ.ⵠⵠΔⵠΔᐃⵠ;
    ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ][2] = Ⲇᐃ.ΔⵠΔΔⲆⵠⲆ;
    ⵠᐃ[rs.ⵠᐃᐃⲆᐃΔⲆ] = ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ];
    ⵠᐃ[rs.ⵠⵠⵠΔⲆΔΔ] = ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ];
    ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ] = [];
    ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ][0] = Ⲇᐃ.ⲆⵠΔᐃᐃᐃⲆ;
    ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ][1] = Ⲇᐃ.ᐃⲆΔΔⵠⵠᐃ;
    ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ][Ts] = Ⲇᐃ.ⲆᐃᐃⲆᐃⲆΔ;
    ⵠᐃ[rs.ᐃΔⲆΔᐃⲆᐃ] = ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ];
    ⵠᐃ[rs.ⲆⲆΔⵠⲆᐃᐃ] = ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ];
    ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ][0] = Ⲇᐃ.ⵠⵠⲆΔᐃΔᐃ;
    ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ][Th] = Ⲇᐃ.ᐃⵠⵠⲆⲆΔᐃ;
    ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ][Sa] = Ⲇᐃ.ΔΔᐃⵠⵠⲆᐃ;
    ⵠᐃ[rs.ᐃΔⲆⲆᐃⲆΔ] = ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ];
    ⵠᐃ[rs.ⵠΔⲆⲆΔΔⲆ] = ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ];
    ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ][Yl] = Ⲇᐃ.ΔᐃⵠⲆⲆⲆⵠ;
    ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ][1] = Ⲇᐃ.ⲆᐃⲆⵠᐃΔⲆ;
    ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ][2] = Ⲇᐃ.ΔᐃΔⲆⲆⲆΔ;
    ⵠᐃ[rs.ᐃΔⲆⲆᐃⵠⲆ] = ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ];
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠᐃⵠ] = ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ];
    ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ][dt] = Ⲇᐃ.ᐃᐃⲆΔΔΔⲆ;
    ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ][1] = Ⲇᐃ.ΔⲆᐃⲆᐃⲆᐃ;
    ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ][Sa] = Ⲇᐃ.ⲆᐃⲆⵠⲆⲆΔ;
    ⵠᐃ[rs.ⵠΔⵠΔⵠⲆⲆ] = ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ];
    ⵠᐃ[rs.ⲆⲆⲆⵠⲆΔᐃ] = ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ];
    ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ] = [];
    ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ][0] = Ⲇᐃ.ΔᐃΔⵠⲆⲆⵠ;
    ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ][Dj] = Ⲇᐃ.ⲆΔᐃΔⲆᐃᐃ;
    ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ][Ls] = Ⲇᐃ.ᐃⲆⵠⲆΔΔΔ;
    ⵠᐃ[rs.ⵠⵠΔⲆᐃⲆⵠ] = ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ];
    ⵠᐃ[rs.ⲆᐃᐃᐃᐃᐃⲆ] = ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ];
    ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ] = [];
    ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ][0] = Ⲇᐃ.ΔⲆᐃⲆᐃⲆⲆ;
    ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ][1] = Ⲇᐃ.ΔⲆΔⲆⲆᐃᐃ;
    ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ][2] = Ⲇᐃ.ⲆⲆΔΔᐃⵠⲆ;
    ⵠᐃ[rs.ⵠⵠᐃΔⲆⲆΔ] = ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ];
    ⵠᐃ[rs.ⲆᐃΔⲆⵠⵠᐃ] = ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ];
    ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ] = [];
    ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ][0] = Ⲇᐃ.ᐃΔⵠᐃΔⵠⵠ;
    ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ][1] = Ⲇᐃ.ⵠⲆᐃⲆⵠΔⵠ;
    ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ][Ts] = Ⲇᐃ.ΔⲆᐃᐃᐃΔⵠ;
    ⵠᐃ[rs.ⵠΔⵠΔΔⵠⲆ] = ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ];
    ⵠᐃ[rs.ΔⲆⵠΔΔΔⲆ] = ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ];
    ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ] = [];
    ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ][fs] = Ⲇᐃ.ⲆⵠⲆᐃⵠᐃⲆ;
    ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ][bt] = Ⲇᐃ.ΔⲆⵠⵠⵠⲆᐃ;
    ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ][pn] = Ⲇᐃ.ⲆⲆⲆⲆᐃⵠⵠ;
    ⵠᐃ[rs.ⲆΔⵠⵠⵠᐃⲆ] = ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ];
    ⵠᐃ[rs.ⵠΔΔⲆⲆⵠᐃ] = ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ];
    ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ] = [];
    ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ][0] = Ⲇᐃ.ⵠᐃⵠΔⲆⵠⵠ;
    ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ][1] = Ⲇᐃ.ⵠΔΔⵠⵠΔⵠ;
    ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ][Ir] = Ⲇᐃ.ᐃᐃΔᐃⲆⲆⲆ;
    ⵠᐃ[rs.ⵠᐃⲆᐃᐃⲆᐃ] = ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ];
    ⵠᐃ[rs.ⵠⵠⵠⲆᐃⲆⵠ] = ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ];
    ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ] = [];
    ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ][lt] = Ⲇᐃ.ΔᐃΔᐃᐃΔⵠ;
    ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ][1] = Ⲇᐃ.ᐃⲆᐃⲆⵠΔⲆ;
    ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ][2] = Ⲇᐃ.ΔΔⵠᐃΔⵠΔ;
    ⵠᐃ[rs.ᐃᐃⲆⵠΔⵠᐃ] = ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ];
    ⵠᐃ[rs.ᐃⵠΔⵠⲆᐃⲆ] = ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ];
    ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ] = [];
    ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ][vl] = Ⲇᐃ.ⵠΔⵠΔΔΔΔ;
    ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ][1] = Ⲇᐃ.ᐃⵠᐃⲆⵠΔⲆ;
    ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ][Ls] = Ⲇᐃ.ᐃᐃᐃⲆⲆΔⲆ;
    ⵠᐃ[rs.ᐃⵠΔⲆΔᐃΔ] = ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ];
    ⵠᐃ[rs.ⵠᐃⲆⵠΔⵠⲆ] = ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ];
    ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ] = [];
    ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ][vl] = Ⲇᐃ.ΔᐃⵠΔⲆⲆⵠ;
    ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ][1] = Ⲇᐃ.ⲆⵠⵠⵠⵠⲆᐃ;
    ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ][2] = Ⲇᐃ.ΔᐃⵠᐃⲆΔⵠ;
    ⵠᐃ[rs.ⲆᐃΔⵠⵠⵠⵠ] = ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ];
    ⵠᐃ[rs.ⲆⲆΔᐃⵠΔᐃ] = ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ];
    ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ] = [];
    ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ][Bs] = Ⲇᐃ.ᐃⲆⲆΔΔΔᐃ;
    ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ][El] = Ⲇᐃ.ⲆⲆᐃⲆᐃⵠⵠ;
    ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ][2] = Ⲇᐃ.ΔᐃᐃᐃⵠΔⲆ;
    ⵠᐃ[rs.ⵠᐃⲆⵠⵠᐃⵠ] = ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ];
    ⵠᐃ[rs.ⲆΔⵠⲆᐃΔΔ] = ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ];
    ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ] = [];
    ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ][Go] = Ⲇᐃ.ⵠⵠⲆΔΔⵠⵠ;
    ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ][1] = Ⲇᐃ.ⵠⲆⲆᐃᐃⲆΔ;
    ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ][2] = Ⲇᐃ.ⵠⵠΔⲆⵠⲆⵠ;
    ⵠᐃ[rs.ⵠΔᐃⵠⵠΔΔ] = ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ];
    ⵠᐃ[rs.ⲆΔⲆΔⵠⵠᐃ] = ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ];
    ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ] = [];
    ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ][gj] = Ⲇᐃ.Δᐃᐃⵠⵠⵠᐃ;
    ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ][hj] = Ⲇᐃ.ⵠᐃⵠΔΔΔΔ;
    ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ][Sa] = Ⲇᐃ.ⵠΔΔⲆᐃΔᐃ;
    ⵠᐃ[rs.ᐃΔΔΔΔΔⲆ] = ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ];
    ⵠᐃ[rs.ⲆⵠⵠᐃⵠᐃⲆ] = ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ];
    ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ] = [];
    ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ][Hb] = Ⲇᐃ.ᐃⵠⵠΔⲆᐃΔ;
    ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ][bt] = Ⲇᐃ.ⵠᐃⵠⲆⲆⵠⵠ;
    ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ][2] = Ⲇᐃ.ΔΔⵠⲆΔᐃⲆ;
    ⵠᐃ[rs.ⵠⵠᐃⲆΔΔⵠ] = ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ];
    ⵠᐃ[rs.ⲆⵠΔⲆΔΔⲆ] = ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ];
    ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ][hk] = Ⲇᐃ.ᐃⲆᐃⵠΔΔⲆ;
    ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ][$q] = Ⲇᐃ.ΔᐃᐃᐃΔⲆⵠ;
    ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ][2] = Ⲇᐃ.ᐃⵠΔᐃⲆⵠⲆ;
    ⵠᐃ[rs.ⵠᐃΔΔᐃΔⵠ] = ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ];
    ⵠᐃ[rs.ᐃΔΔⵠᐃⲆᐃ] = ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ];
    ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ] = [];
    ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ][0] = Ⲇᐃ.ⵠᐃⲆⵠΔᐃⲆ;
    ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ][1] = Ⲇᐃ.ⵠⵠⲆᐃΔΔⵠ;
    ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ][dj] = Ⲇᐃ.ⲆⲆΔⲆⲆΔⵠ;
    ⵠᐃ[rs.ⵠᐃⲆᐃⵠΔⲆ] = ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ];
    ⵠᐃ[rs.ΔᐃⲆΔⲆᐃΔ] = ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ];
    ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ] = [];
    ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ][Go] = Ⲇᐃ.ⲆⲆⲆᐃΔᐃᐃ;
    ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ][$r] = Ⲇᐃ.ᐃΔᐃⵠⵠⲆᐃ;
    ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ][2] = Ⲇᐃ.ΔⵠᐃⵠⲆᐃᐃ;
    ⵠᐃ[rs.ᐃΔΔΔⵠΔΔ] = ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ];
    ⵠᐃ[rs.ⲆΔⵠⲆΔΔⲆ] = ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ];
    ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ] = [];
    ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ][0] = Ⲇᐃ.ᐃᐃΔΔⵠΔⲆ;
    ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ][uq] = Ⲇᐃ.ⲆΔΔⵠⵠΔⲆ;
    ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ][Sa] = Ⲇᐃ.ⵠΔⲆⲆᐃⲆᐃ;
    ⵠᐃ[rs.ΔⵠΔᐃⵠⲆᐃ] = ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ];
    ⵠᐃ[rs.ⵠΔΔⵠⲆⲆⵠ] = ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ];
    ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ][0] = Ⲇᐃ.ⵠᐃΔⵠΔΔⲆ;
    ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ][Th] = Ⲇᐃ.ⲆⲆΔⵠΔⵠⲆ;
    ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ][2] = Ⲇᐃ.ⵠΔΔΔⵠⲆⵠ;
    ⵠᐃ[rs.ΔⵠΔⵠⵠⵠⲆ] = ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ];
    ⵠᐃ[rs.ΔᐃⵠᐃΔᐃΔ] = ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ];
    ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ] = [];
    ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ][Hb] = Ⲇᐃ.ΔΔⵠⵠⵠⲆⵠ;
    ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ][bt] = Ⲇᐃ.ⲆΔⲆⵠΔᐃΔ;
    ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ][2] = Ⲇᐃ.ⲆᐃᐃⵠᐃᐃΔ;
    ⵠᐃ[rs.ⲆⵠᐃⵠᐃΔⲆ] = ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ];
    ⵠᐃ[rs.ⲆᐃⵠⲆⵠⲆΔ] = ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ];
    ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ][0] = Ⲇᐃ.ᐃⲆΔᐃᐃⲆᐃ;
    ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ][1] = Ⲇᐃ.ᐃᐃⲆΔⲆΔᐃ;
    ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ][2] = Ⲇᐃ.ΔΔⵠᐃᐃⵠᐃ;
    ⵠᐃ[rs.ᐃⲆΔⵠⲆⲆᐃ] = ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ];
    ⵠᐃ[rs.ⵠⲆⲆΔⵠᐃΔ] = ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ];
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ] = [];
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ][0] = Ⲇᐃ.ⵠⵠⲆΔΔⲆⵠ;
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ][uq] = Ⲇᐃ.ⵠⵠⵠⲆΔⲆⵠ;
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ][2] = Ⲇᐃ.ΔⵠⵠΔⵠᐃΔ;
    ⵠᐃ[rs.ᐃⲆΔⲆⵠⲆΔ] = ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ];
    ⵠᐃ[rs.ᐃΔΔᐃᐃΔⲆ] = ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ];
    ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ] = [];
    ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ][fs] = Ⲇᐃ.ⲆΔᐃᐃⲆⵠⵠ;
    ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ][1] = Ⲇᐃ.ᐃᐃᐃᐃΔᐃⵠ;
    ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ][2] = Ⲇᐃ.ⲆΔΔⲆⵠᐃⵠ;
    ⵠᐃ[rs.ᐃᐃⲆΔⵠΔⵠ] = ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ];
    ⵠᐃ[rs.ⵠᐃΔⵠΔΔⵠ] = ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ];
    ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ] = [];
    ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ][0] = Ⲇᐃ.ⵠⵠᐃΔⲆΔΔΔⲆ;
    ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ][vg] = Ⲇᐃ.ⵠΔΔΔᐃⲆⵠ;
    ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ][2] = Ⲇᐃ.ΔⵠⵠᐃⵠⲆⵠⲆⵠ;
    ⵠᐃ[rs.ᐃⵠⵠⵠᐃΔⲆ] = ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ];
    ⵠᐃ[rs.ⲆⲆⵠⲆᐃⲆⵠ] = ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ];
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ] = [];
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ][0] = Ⲇᐃ.ⲆⵠΔⲆΔⵠⵠ;
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ][1] = Ⲇᐃ.ΔΔⲆΔΔⲆΔ;
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ][it] = Ⲇᐃ.ⵠⲆΔⲆⵠⲆΔ;
    ⵠᐃ[rs.ⲆⵠΔⵠᐃⵠᐃ] = ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ];
    ⵠᐃ[rs.ᐃᐃⲆᐃⲆΔΔ] = ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ];
    ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ] = [];
    ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ][jg] = Ⲇᐃ.ⲆⵠⲆᐃᐃΔⵠ;
    ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ][or] = Ⲇᐃ.ⲆᐃⵠΔΔⵠΔ;
    ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ][Sa] = Ⲇᐃ.ⵠⵠⲆⲆⵠᐃⵠ;
    ⵠᐃ[rs.ΔⵠⲆΔᐃΔⲆ] = ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ];
    ⵠᐃ[rs.ⵠᐃⵠΔᐃⵠᐃΔΔ] = ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ];
    ⵠᐃ[rs.ΔⵠΔⵠᐃΔΔ] = Rt(og, [{
      f: Cb,
      x: Hb,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔᐃΔⲆᐃᐃ] = ⵠᐃ[rs.ΔⵠΔⵠᐃΔΔ];
    ⵠᐃ[rs.ΔⲆⲆⲆᐃᐃⵠ] = Rt(El, [{
      f: gc,
      x: hk,
      y: 0,
      a: uq,
      r: hk,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⵠᐃᐃΔⲆⲆ] = ⵠᐃ[rs.ΔⲆⲆⲆᐃᐃⵠ];
    ⵠᐃ[rs.ΔⲆᐃΔΔΔᐃ] = Rt(vg, [{
      f: $b,
      x: -ck,
      y: 0,
      a: ck,
      r: ka,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Xb,
      x: -kr,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Nt,
      x: -1,
      y: Go,
      a: 1,
      r: dt,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔᐃⵠⲆⲆᐃᐃ] = ⵠᐃ[rs.ΔⲆᐃΔΔΔᐃ];
    ⵠᐃ[rs.ᐃΔΔⲆⵠΔΔ] = Rt(1, [{
      f: St,
      x: 0,
      y: 0,
      a: bq,
      r: ks,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃᐃΔᐃⵠΔ] = Rt(1, [{
      f: Fd,
      x: 0,
      y: ka,
      a: og,
      r: dt,
      c: ["#0d1b1c", "#44301b", fj[Xg], "#523e26"]
    }], 0.14, ["#3ba578", fj[Vh], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆᐃᐃⲆⲆ] = ⵠᐃ[rs.ⵠᐃᐃΔᐃⵠΔ];
    ⵠᐃ[rs.ⵠᐃᐃⲆⲆΔⲆ] = Rt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: hj,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", fj[Sg], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃΔᐃᐃΔᐃ] = ⵠᐃ[rs.ⵠᐃᐃⲆⲆΔⲆ];
    ⵠᐃ[rs.ΔⲆⵠᐃᐃⲆⵠ] = Rt(1, [{
      f: zu,
      x: Eu,
      y: ou,
      a: og,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", fj[Vs], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆⵠⵠΔⲆ] = ⵠᐃ[rs.ΔⲆⵠᐃᐃⲆⵠ];
    ⵠᐃ[rs.ⵠⲆᐃⵠΔΔⲆ] = Rt(y, [{
      f: zu,
      x: 0,
      y: Eu,
      a: 1,
      r: Go,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⲆᐃⵠⵠΔⵠ] = ⵠᐃ[rs.ⵠⲆᐃⵠΔΔⲆ];
    ⵠᐃ[rs.ᐃᐃΔᐃⲆΔⵠ] = Rt(1, [{
      f: zu,
      x: 0,
      y: ka,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", fj[Rb], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃᐃⲆᐃⵠΔⵠ] = ⵠᐃ[rs.ᐃᐃΔᐃⲆΔⵠ];
    ⵠᐃ[rs.ⲆⵠⲆΔᐃᐃᐃ] = Rt(ck, [{
      f: zu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃΔᐃⲆⲆΔ] = ⵠᐃ[rs.ⲆⵠⲆΔᐃᐃᐃ];
    ⵠᐃ[rs.ΔᐃᐃⵠⲆΔⲆ] = Rt(1, [{
      f: zu,
      x: 0,
      y: gj,
      a: 1,
      r: Bs,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", fj[lu], "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔⵠⵠⵠⲆᐃ] = ⵠᐃ[rs.ΔᐃᐃⵠⲆΔⲆ];
    ⵠᐃ[rs.ⲆΔⵠΔⲆⵠΔ] = ⵠᐃ[rs.ΔᐃᐃⵠⲆΔⲆ];
    ⵠᐃ[rs.ΔⵠΔⵠΔᐃⵠ] = Rt(1, [{
      f: zu,
      x: dt,
      y: 0,
      a: bh,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔⲆΔⵠⵠⲆ] = ⵠᐃ[rs.ΔⵠΔⵠΔᐃⵠ];
    ⵠᐃ[rs.ⵠΔⵠⲆΔᐃᐃ] = ⵠᐃ[rs.ΔⵠΔⵠΔᐃⵠ];
    ⵠᐃ[rs.ΔᐃⲆⵠⲆᐃⵠ] = Rt(1, [{
      f: zu,
      x: 0,
      y: 0,
      a: Th,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", fj[xg], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠΔΔᐃⵠⲆΔ] = ⵠᐃ[rs.ΔᐃⲆⵠⲆᐃⵠ];
    ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⲆ] = ⵠᐃ[rs.ΔᐃⲆⵠⲆᐃⵠ];
    ⵠᐃ[rs.ⲆⲆⲆⵠᐃΔⲆ] = Rt(uq, [{
      f: zu,
      x: Xa,
      y: 0,
      a: or,
      r: Yl,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃⵠⲆⲆΔⵠ] = ⵠᐃ[rs.ⲆⲆⲆⵠᐃΔⲆ];
    ⵠᐃ[rs.ΔΔᐃΔⵠΔᐃ] = ⵠᐃ[rs.ⲆⲆⲆⵠᐃΔⲆ];
    ⵠᐃ[rs.ⲆⵠⲆᐃⵠⵠⵠ] = Rt($r, [{
      f: Vb,
      x: -2,
      y: -nq,
      a: bh,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: Ut,
      x: -Xj,
      y: -2,
      a: or,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", fj[rt], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⵠⵠᐃᐃᐃΔ] = ⵠᐃ[rs.ⲆⵠⲆᐃⵠⵠⵠ];
    ⵠᐃ[rs.ⵠⵠⲆⲆΔⲆᐃ] = Rt(1, [{
      f: Qt,
      x: -2,
      y: -bh,
      a: 1,
      r: -Math.PI / nu,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: Ut,
      x: -nq,
      y: -1,
      a: $r,
      r: -Math.PI / sb,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", fj[_n], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆΔᐃⲆⲆ] = ⵠᐃ[rs.ⵠⵠⲆⲆΔⲆᐃ];
    ⵠᐃ[rs.ᐃΔᐃⲆⲆᐃⲆ] = Rt(1, [{
      f: Wt,
      x: 2,
      y: Go,
      a: uq,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⲆⵠⵠᐃΔⲆ] = Rt(1, [{
      f: yu,
      x: nq,
      y: ks,
      a: bh,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", fj[Zk], "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆΔⵠᐃⵠ] = Rt(1, [{
      f: bu,
      x: it,
      y: 0,
      a: bt,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃⵠ] = Rt(Ng, [{
      f: du,
      x: rb,
      y: 0,
      a: Th,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔΔΔⲆⲆⵠⵠ] = Rt(1, [{
      f: ru,
      x: 2,
      y: Xa,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⵠΔⲆᐃΔⲆ] = Rt(Th, [{
      f: xu,
      x: 2,
      y: 0,
      a: El,
      r: Math.PI / br,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠⲆⵠΔⵠΔΔ] = Rt(1, [{
      f: Cu,
      x: uj,
      y: Xa,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆΔⲆⵠⲆᐃⲆ] = Rt(1, [{
      f: hu,
      x: -2,
      y: 5,
      a: Ws,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔΔⵠᐃᐃᐃⵠ] = Rt(Ng, [{
      f: hu,
      x: -2,
      y: 5,
      a: y,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆⵠⲆΔⲆⲆ] = Rt(1, [{
      f: hu,
      x: -2,
      y: br,
      a: Zk,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠⲆΔΔⲆⵠΔ] = Rt(Zn, [{
      f: hu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / br,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃᐃⲆᐃⲆⵠ] = Rt(or, [{
      f: hu,
      x: -Og,
      y: 5,
      a: 1,
      r: -Math.PI / Yo,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ] = [];
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ][0] = Ⲇᐃ.ᐃⲆⵠⲆᐃΔΔ;
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ][1] = Ⲇᐃ.ⵠⵠⲆᐃⲆΔᐃ;
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ][2] = Ⲇᐃ.ⲆⵠⲆⲆⵠⵠⵠ;
    ⵠᐃ[rs.ᐃⵠᐃⵠᐃⲆᐃ] = ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ];
    ⵠᐃ[rs.ᐃⵠᐃᐃⲆⲆᐃ] = ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ];
    ⵠᐃ[rs.ᐃⲆΔΔΔⵠⵠ] = Rt(El, [{
      f: vu,
      x: -as,
      y: -5,
      a: Dj,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃᐃⲆⲆΔⵠⵠ] = Rt(El, [{
      f: od,
      x: -5,
      y: -as,
      a: kr,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔΔᐃⵠᐃΔᐃ] = Rt(1, [{
      f: Iu,
      x: -5,
      y: -Yo,
      a: 1,
      r: Hb,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆᐃᐃᐃⲆⵠᐃ] = Rt(1, [{
      f: Vb,
      x: Xa,
      y: -5,
      a: $r,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆΔⵠΔΔᐃΔ] = ⵠᐃ[rs.ᐃⲆⲆΔⵠᐃⵠ];
    ⵠᐃ[rs.ᐃΔΔᐃᐃΔΔ] = ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃⵠ];
    ⵠᐃ[rs.ⵠⵠᐃⵠⲆΔᐃ] = ⵠᐃ[rs.ΔΔΔⲆⲆⵠⵠ];
    ⵠᐃ[rs.ⲆⵠᐃΔᐃᐃⵠ] = ⵠᐃ[rs.ΔⵠΔⲆᐃΔⲆ];
    ⵠᐃ[rs.ΔΔⲆⵠⲆΔΔ] = ⵠᐃ[rs.ⵠⲆⵠΔⵠΔΔ];
    ⵠᐃ[rs.ⵠΔⵠⵠΔᐃΔ] = ⵠᐃ[rs.ⲆΔⲆⵠⲆᐃⲆ];
    ⵠᐃ[rs.ⲆᐃⲆᐃᐃⵠᐃ] = ⵠᐃ[rs.ΔΔⵠᐃᐃᐃⵠ];
    ⵠᐃ[rs.ⵠΔᐃΔΔᐃⲆ] = ⵠᐃ[rs.ᐃⲆⵠⲆΔⲆⲆ];
    ⵠᐃ[rs.ⲆᐃᐃᐃᐃΔⵠ] = ⵠᐃ[rs.ⵠⲆΔΔⲆⵠΔ];
    ⵠᐃ[rs.ᐃⵠⲆΔⲆᐃⲆ] = ⵠᐃ[rs.ⲆᐃᐃⲆᐃⲆⵠ];
    ⵠᐃ[rs.ⵠⵠΔᐃⲆⵠⵠ] = Rt(y, [{
      f: Lb,
      x: 0,
      y: Eu,
      a: $q,
      r: fs
    }], 0.4, ["#3ba578", fj[lu], "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔΔⵠⵠᐃⲆ] = Rt(uq, [{
      f: qb,
      x: 0,
      y: 0,
      a: 1,
      r: Xa,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", fj[es], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⵠΔᐃⲆΔΔ] = ⵠᐃ[rs.ΔΔΔⵠⵠᐃⲆ];
    ⵠᐃ[rs.ΔⲆᐃᐃᐃΔᐃ] = Rt(1, [{
      f: hd,
      x: -nq,
      y: -2,
      a: 1,
      r: ho,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.Ⲇⵠⵠᐃⵠᐃⵠ] = ⵠᐃ[rs.ΔⲆᐃᐃᐃΔᐃ];
    ⵠᐃ[rs.ΔΔᐃᐃΔⲆⵠ] = Rt(ck, [{
      f: gd,
      x: 0,
      y: 0,
      a: 1,
      r: ka,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⲆΔΔⲆᐃⵠ] = ⵠᐃ[rs.ΔΔᐃᐃΔⲆⵠ];
    ⵠᐃ[rs.ⵠⲆᐃⲆᐃᐃⲆ] = Rt(hj, [{
      f: hd,
      x: 0,
      y: lt,
      a: hj,
      r: Eu,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃᐃⵠⵠⵠΔᐃ] = ⵠᐃ[rs.ⵠⲆᐃⲆᐃᐃⲆ];
    ⵠᐃ[rs.ΔΔⲆᐃᐃΔΔ] = Rt(1, [{
      f: fd,
      x: Eu,
      y: lt,
      a: ck,
      r: jg,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", fj[Vh], "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔᐃᐃⵠᐃΔⲆ] = ⵠᐃ[rs.ΔΔⲆᐃᐃΔΔ];
    ⵠᐃ[rs.ᐃᐃⵠⵠⵠⵠⵠ] = Rt(1, [{
      f: ud,
      x: Yl,
      y: Go,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", fj[Oa], "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆΔᐃᐃΔⵠΔ] = ⵠᐃ[rs.ᐃᐃⵠⵠⵠⵠⵠ];
    ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠⲆ] = Rt(bt, [{
      f: ec,
      x: 0,
      y: Et,
      a: 1,
      r: dt,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", fj[qe], "#564021", fj[tt], "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆⲆΔΔΔᐃᐃ] = ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠⲆ];
    ⵠᐃ[rs.ⲆᐃΔⵠΔⲆᐃ] = Rt(bt, [{
      f: tc,
      x: Ob,
      y: ho,
      a: bq,
      r: fs,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", fj[xg], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆᐃᐃⵠΔΔⲆ] = ⵠᐃ[rs.ⲆᐃΔⵠΔⲆᐃ];
    ⵠᐃ[rs.ᐃΔΔᐃⲆΔΔ] = Rt(Ws, [{
      f: tc,
      x: Go,
      y: ou,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆΔᐃⵠᐃⵠⲆ] = ⵠᐃ[rs.ᐃΔΔᐃⲆΔΔ];
    ⵠᐃ[rs.ⵠΔᐃΔⵠⵠⲆ] = Rt(1, [{
      f: _d,
      x: 0,
      y: 0,
      a: or,
      r: hk,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", fj[f], "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔΔⲆⵠⲆⵠ] = ⵠᐃ[rs.ⵠΔᐃΔⵠⵠⲆ];
    ⵠᐃ[rs.ⲆᐃᐃᐃΔᐃΔ] = Rt(1, [{
      f: _d,
      x: 0,
      y: 0,
      a: $r,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", fj[oa], "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠⲆΔΔᐃ] = ⵠᐃ[rs.ⲆᐃᐃᐃΔᐃΔ];
    ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃⲆ] = Rt(1, [{
      f: cd,
      x: Go,
      y: Xa,
      a: Ws,
      r: vl,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆΔⵠΔΔⲆ] = ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃⲆ];
    ⵠᐃ[rs.ⲆⵠᐃⵠΔᐃⵠ] = Rt(1, [{
      f: Bd,
      x: 0,
      y: lt,
      a: og,
      r: ou,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃⵠᐃⵠΔⵠ] = ⵠᐃ[rs.ⲆⵠᐃⵠΔᐃⵠ];
    ⵠᐃ[rs.ⵠᐃᐃⵠΔΔⵠ] = Rt(Ng, [{
      f: Bd,
      x: 0,
      y: 0,
      a: Zn,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", fj[Al], "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔⲆⵠΔΔᐃⲆ] = ⵠᐃ[rs.ⵠᐃᐃⵠΔΔⵠ];
    ⵠᐃ[rs.ⲆⵠⲆⲆᐃⵠⵠ] = Rt(1, [{
      f: yd,
      x: hk,
      y: 0,
      a: bt,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆⵠΔᐃᐃᐃᐃ] = ⵠᐃ[rs.ⲆⵠⲆⲆᐃⵠⵠ];
    ⵠᐃ[rs.ᐃᐃⲆᐃΔΔΔ] = Rt(hj, [{
      f: Id,
      x: Hb,
      y: hk,
      a: 1,
      r: lt,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔⵠΔΔΔⵠᐃ] = ⵠᐃ[rs.ᐃᐃⲆᐃΔΔΔ];
    ⵠᐃ[rs.ⲆⵠᐃᐃⵠⵠΔ] = Rt(1, [{
      f: Nd,
      x: 0,
      y: nq,
      a: kr,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆⵠⵠᐃⵠⲆ] = ⵠᐃ[rs.ⲆⵠᐃᐃⵠⵠΔ];
    ⵠᐃ[rs.ΔⵠᐃᐃᐃΔⵠ] = Rt(uq, [{
      f: Yb,
      x: Eu,
      y: -3,
      a: Dj,
      r: Ob,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔⵠⵠᐃⵠⲆ] = Rt(1, [{
      f: Yb,
      x: Eu,
      y: -3,
      a: Zk,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", fj[Vh], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠΔⵠΔⲆΔⲆ] = ⵠᐃ[rs.ΔΔⵠⵠᐃⵠⲆ];
    ⵠᐃ[rs.ᐃᐃᐃΔⲆΔΔ] = Rt(Zn, [{
      f: Jt,
      x: -3,
      y: -Ss,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔⲆⲆⵠΔⵠⲆ] = Rt(ck, [{
      f: Jt,
      x: -R,
      y: -Ia,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔⲆᐃⵠⵠᐃᐃ] = ⵠᐃ[rs.ΔⲆⲆⵠΔⵠⲆ];
    ⵠᐃ[rs.ᐃΔⵠᐃⵠⲆⲆ] = Rt(El, [{
      f: Ud,
      x: -3,
      y: -3,
      a: Zk,
      r: Yl,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆΔⲆΔΔᐃΔ] = Rt(1, [{
      f: Ud,
      x: -Ds,
      y: -3,
      a: El,
      r: Hb,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠⵠⵠⵠⲆ] = Rt(y, [{
      f: bd,
      x: 0,
      y: 0,
      a: Dj,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⵠⲆⲆⲆⵠⵠΔ] = Rt(1, [{
      f: bd,
      x: 0,
      y: vl,
      a: 1,
      r: Go,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃᐃ] = Rt(or, [{
      f: Ud,
      x: Eu,
      y: 0,
      a: hj,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃΔⵠΔⵠΔⲆ] = Rt(1, [{
      f: Ud,
      x: -kl,
      y: -R,
      a: Ws,
      r: Go,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆΔⲆⵠΔⲆᐃ] = Rt(Zn, [{
      f: Ud,
      x: -wq,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⵠΔⲆᐃⵠⵠᐃ] = Rt(El, [{
      f: Yd,
      x: Eu,
      y: Et,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆⵠⵠⲆⲆᐃᐃ] = ⵠᐃ[rs.ⵠΔⲆᐃⵠⵠᐃ];
    ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆᐃ] = Rt(bq, [{
      f: md,
      x: 0,
      y: ou,
      a: vg,
      r: dt,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⲆⲆΔΔᐃ] = ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆᐃ];
    ⵠᐃ[rs.ⲆⲆⵠⵠⵠΔᐃ] = Rt(Dj, [{
      f: nc,
      x: 0,
      y: 0,
      a: $r,
      r: Go,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆΔⲆᐃΔΔ] = ⵠᐃ[rs.ⲆⲆⵠⵠⵠΔᐃ];
    ⵠᐃ[rs.ᐃⵠΔⵠⲆΔΔ] = Rt(1, [{
      f: gu,
      x: hk,
      y: nt,
      a: 1,
      r: Xa,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⵠᐃᐃⲆⲆⲆ] = ⵠᐃ[rs.ᐃⵠΔⵠⲆΔΔ];
    ⵠᐃ[rs.ᐃⵠⲆΔⵠⲆΔ] = Rt(Dj, [{
      f: ku,
      x: Hb,
      y: 5,
      a: kr,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆᐃᐃⵠⵠΔ] = ⵠᐃ[rs.ᐃⵠⲆΔⵠⲆΔ];
    ⵠᐃ[rs.ⲆΔⲆⵠΔⵠⲆ] = Rt(or, [{
      f: Lt,
      x: -rb,
      y: -nl,
      a: Ng,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔΔⲆΔᐃᐃΔ] = ⵠᐃ[rs.ⲆΔⲆⵠΔⵠⲆ];
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ] = [];
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ][0] = Ⲇᐃ.ᐃⲆΔΔᐃΔⵠ;
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ][Ng] = Ⲇᐃ.ᐃⵠᐃⵠⵠⲆΔ;
    ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ][kg] = Ⲇᐃ.ΔⲆΔΔⲆᐃᐃ;
    ⵠᐃ[rs.ᐃΔᐃᐃⲆⵠᐃ] = ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ];
    ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ] = [];
    ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ][0] = Ⲇᐃ.ᐃⵠΔΔΔᐃⵠ;
    ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ][1] = Ⲇᐃ.ᐃⲆⲆⲆⵠⲆΔ;
    ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ][2] = Ⲇᐃ.ⲆⲆΔᐃᐃⵠΔ;
    ⵠᐃ[rs.ⵠΔⲆΔⵠᐃᐃ] = ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ];
    ⵠᐃ[rs.ⵠᐃΔⵠᐃᐃⵠ] = ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ];
    ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ][0] = Ⲇᐃ.ⵠⲆⲆⵠᐃΔΔ;
    ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ][Th] = Ⲇᐃ.ᐃⲆΔᐃΔⵠⲆ;
    ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ][2] = Ⲇᐃ.ΔᐃⲆⵠⲆⵠⲆ;
    ⵠᐃ[rs.ΔᐃΔⲆΔⵠΔ] = ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ];
    ⵠᐃ[rs.ⵠΔΔᐃⵠΔΔ] = ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ];
    ⵠᐃ[rs.ⵠΔⲆᐃᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⵠΔⲆᐃᐃⵠⲆ][0] = Ⲇᐃ.ᐃⲆᐃΔΔⲆΔ;
    ⵠᐃ[rs.ⵠΔⲆᐃᐃⵠⲆ][1] = Ⲇᐃ.ᐃⲆᐃΔΔⲆΔ;
    ⵠᐃ[rs.ⵠΔⲆᐃᐃⵠⲆ][2] = Ⲇᐃ.ᐃⲆᐃΔΔⲆΔ;
    ⵠᐃ[rs.ⵠᐃΔⵠⵠΔⵠ] = ⵠᐃ[rs.ⵠΔⲆᐃᐃⵠⲆ];
    ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ] = [];
    ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ][Et] = Ⲇᐃ.ⵠΔⵠᐃᐃⵠⵠ;
    ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ][1] = Ⲇᐃ.ⲆⵠⵠΔⵠⲆⲆ;
    ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ][Pn] = Ⲇᐃ.ⵠⲆⲆⵠᐃⲆⵠ;
    ⵠᐃ[rs.ⲆΔᐃⵠⲆⲆᐃ] = ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ];
    ⵠᐃ[rs.ⲆⲆΔΔⲆᐃⲆ] = ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ];
    ⵠᐃ[rs.ΔᐃⵠⲆⵠᐃΔ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆⵠᐃΔ][dh] = Ⲇᐃ.ᐃᐃⵠⵠᐃΔΔ;
    ⵠᐃ[rs.ΔᐃⵠⲆⵠᐃΔ][$r] = Ⲇᐃ.ᐃᐃⵠⵠᐃΔΔ;
    ⵠᐃ[rs.ΔᐃⵠⲆⵠᐃΔ][2] = Ⲇᐃ.ᐃᐃⵠⵠᐃΔΔ;
    ⵠᐃ[rs.ᐃⲆⵠⵠᐃⲆᐃ] = ⵠᐃ[rs.ΔᐃⵠⲆⵠᐃΔ];
    ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ] = [];
    ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ][0] = Ⲇᐃ.ⵠⲆⲆᐃⲆΔⲆ;
    ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ][1] = Ⲇᐃ.ΔΔⲆᐃⲆⵠᐃ;
    ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ][2] = Ⲇᐃ.ⲆⵠⲆΔΔΔΔ;
    ⵠᐃ[rs.ΔΔᐃⵠⵠⵠᐃ] = ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ];
    ⵠᐃ[rs.ΔΔᐃᐃᐃⵠΔ] = ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ];
    ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ] = [];
    ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ][hk] = Ⲇᐃ.ⵠᐃⵠΔⲆΔᐃ;
    ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ][og] = Ⲇᐃ.ΔᐃΔΔᐃⵠⲆ;
    ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ][Ts] = Ⲇᐃ.ⲆⵠⵠⲆⵠΔᐃ;
    ⵠᐃ[rs.ⵠᐃⲆⵠᐃᐃΔ] = ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ];
    ⵠᐃ[rs.ᐃⵠΔΔⵠᐃΔ] = ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ];
    ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ] = [];
    ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ][Xa] = Ⲇᐃ.ᐃⲆΔⵠⲆΔⵠ;
    ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ][uq] = Ⲇᐃ.ᐃᐃᐃⵠΔⲆΔ;
    ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ][2] = Ⲇᐃ.ⵠⵠⲆᐃᐃⲆⲆ;
    ⵠᐃ[rs.ΔᐃⵠᐃΔⲆⵠ] = ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ];
    ⵠᐃ[rs.ⲆΔᐃᐃΔⵠⵠ] = ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ];
    ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ] = [];
    ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ][Go] = Ⲇᐃ.ΔⵠΔᐃᐃⵠᐃ;
    ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ][or] = Ⲇᐃ.ΔΔΔⲆⲆΔⲆ;
    ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ][cn] = Ⲇᐃ.ⲆⵠᐃᐃΔⲆⲆ;
    ⵠᐃ[rs.Δⵠⵠᐃⵠⵠᐃ] = ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ];
    ⵠᐃ[rs.ⵠⲆᐃΔⵠΔⵠ] = ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ];
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ] = [];
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ][0] = Ⲇᐃ.ⵠΔⲆⵠᐃΔΔ;
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ][1] = Ⲇᐃ.ΔⲆⲆⲆΔⲆⲆ;
    ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ][rb] = Ⲇᐃ.ⲆⲆⵠᐃⲆᐃⵠ;
    ⵠᐃ[rs.ΔΔᐃᐃΔⵠⲆ] = ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ];
    ⵠᐃ[rs.ⵠΔⵠΔⵠᐃⲆ] = ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ];
    ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ] = [];
    ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ][0] = Ⲇᐃ.ᐃᐃⲆⵠⲆⵠⵠ;
    ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ][Th] = Ⲇᐃ.ⲆᐃⲆⵠᐃⲆⵠ;
    ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ][2] = Ⲇᐃ.ᐃⵠⵠᐃΔΔᐃ;
    ⵠᐃ[rs.ⵠᐃᐃⲆΔᐃⵠ] = ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ];
    ⵠᐃ[rs.ⲆⵠΔⵠⲆⲆᐃ] = ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ];
    ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ] = [];
    ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ][0] = Ⲇᐃ.ⲆᐃᐃⲆᐃⲆⲆ;
    ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ][$r] = Ⲇᐃ.ᐃΔΔΔᐃⵠΔ;
    ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ][Pn] = Ⲇᐃ.ⲆⲆΔᐃⲆᐃΔ;
    ⵠᐃ[rs.Ⲇᐃᐃᐃⵠᐃⵠ] = ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ];
    ⵠᐃ[rs.ΔⲆⵠΔᐃⲆΔ] = ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ];
    ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ] = [];
    ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ][0] = Ⲇᐃ.ᐃⵠΔΔᐃⲆΔ;
    ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ][1] = Ⲇᐃ.ⲆΔΔⵠᐃⲆⲆ;
    ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ][2] = Ⲇᐃ.ᐃⲆᐃⵠⵠⲆⲆ;
    ⵠᐃ[rs.ⲆᐃΔⲆᐃⵠⵠ] = ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ];
    ⵠᐃ[rs.ⲆᐃᐃⲆⵠΔⲆ] = ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ];
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ] = [];
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ][0] = Ⲇᐃ.ΔᐃⵠᐃᐃΔΔ;
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ][1] = Ⲇᐃ.ⲆᐃⵠΔΔΔⲆ;
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ][nq] = Ⲇᐃ.ᐃⵠⲆΔᐃΔΔ;
    ⵠᐃ[rs.ⵠⵠⵠⲆΔΔᐃ] = ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ];
    ⵠᐃ[rs.ᐃⵠⵠᐃΔⲆⵠ] = ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ];
    ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ] = [];
    ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ][Ob] = Ⲇᐃ.ⵠⲆⵠⵠᐃΔΔ;
    ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ][Dj] = Ⲇᐃ.ΔⵠᐃⲆᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ][2] = Ⲇᐃ.ⲆᐃΔⵠⵠΔⲆ;
    ⵠᐃ[rs.ⲆᐃᐃΔᐃⲆⲆ] = ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ];
    ⵠᐃ[rs.ΔⲆᐃΔⵠΔⵠ] = ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ];
    ⵠᐃ[rs.ΔΔΔⲆⲆ] = [];
    ⵠᐃ[rs.ΔΔΔⲆⲆ][0] = Ⲇᐃ.ΔΔΔⲆⲆ;
    ⵠᐃ[rs.ΔΔΔⲆⲆ][Th] = Ⲇᐃ.ΔΔΔⲆⲆ;
    ⵠᐃ[rs.ΔΔΔⲆⲆ][2] = Ⲇᐃ.ΔΔΔⲆⲆ;
    ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⲆᐃⲆ] = ⵠᐃ[rs.ΔΔΔⲆⲆ];
    ⵠᐃ[rs.ᐃΔⵠᐃⲆⲆᐃ] = ⵠᐃ[rs.ΔΔΔⲆⲆ];
    ⵠᐃ[rs.ⲆᐃᐃΔⵠ] = [];
    ⵠᐃ[rs.ⲆᐃᐃΔⵠ][gj] = Ⲇᐃ.ⲆᐃᐃΔⵠ;
    ⵠᐃ[rs.ⲆᐃᐃΔⵠ][Ws] = Ⲇᐃ.ⲆᐃᐃΔⵠ;
    ⵠᐃ[rs.ⲆᐃᐃΔⵠ][2] = Ⲇᐃ.ⲆᐃᐃΔⵠ;
    ⵠᐃ[rs.ⲆΔᐃⵠΔⵠΔⵠᐃ] = ⵠᐃ[rs.ⲆᐃᐃΔⵠ];
    ⵠᐃ[rs.ⲆΔᐃΔΔⲆⲆ] = ⵠᐃ[rs.ⲆᐃᐃΔⵠ];
    ⵠᐃ[rs.ΔⲆⵠΔⵠ] = [];
    ⵠᐃ[rs.ΔⲆⵠΔⵠ][0] = Ⲇᐃ.ΔⲆⵠΔⵠ;
    ⵠᐃ[rs.ΔⲆⵠΔⵠ][$q] = Ⲇᐃ.ΔⲆⵠΔⵠ;
    ⵠᐃ[rs.ΔⲆⵠΔⵠ][2] = Ⲇᐃ.ΔⲆⵠΔⵠ;
    ⵠᐃ[rs.ΔΔᐃᐃⵠⲆᐃᐃᐃ] = ⵠᐃ[rs.ΔⲆⵠΔⵠ];
    ⵠᐃ[rs.ⵠΔᐃΔⵠᐃΔ] = ⵠᐃ[rs.ΔⲆⵠΔⵠ];
    ⵠᐃ[rs.ΔⵠᐃΔⲆ] = [];
    ⵠᐃ[rs.ΔⵠᐃΔⲆ][Ob] = Ⲇᐃ.ΔⵠᐃΔⲆ;
    ⵠᐃ[rs.ΔⵠᐃΔⲆ][1] = Ⲇᐃ.ΔⵠᐃΔⲆ;
    ⵠᐃ[rs.ΔⵠᐃΔⲆ][2] = Ⲇᐃ.ΔⵠᐃΔⲆ;
    ⵠᐃ[rs.ΔᐃᐃⲆᐃΔᐃ] = ⵠᐃ[rs.ΔⵠᐃΔⲆ];
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ] = [];
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ][0] = Ⲇᐃ.ⵠᐃⵠΔⵠᐃΔ;
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ][vg] = Ⲇᐃ.ᐃΔⲆΔⲆᐃᐃ;
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ][2] = Ⲇᐃ.ⵠΔⲆᐃΔⵠⵠ;
    ⵠᐃ[rs.ⲆⲆΔᐃⵠⲆⵠ] = ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ];
    ⵠᐃ[rs.ᐃⵠᐃⵠΔⵠⵠ] = ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ];
    ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ] = [];
    ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ][0] = Ⲇᐃ.ⲆᐃⲆΔⲆⵠΔ;
    ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ][$q] = Ⲇᐃ.ⵠⵠᐃⵠⲆΔⵠ;
    ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ][2] = Ⲇᐃ.ΔⲆⲆⲆⵠⵠᐃ;
    ⵠᐃ[rs.ΔΔᐃⵠⲆΔⲆ] = ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ];
    ⵠᐃ[rs.ⲆᐃᐃⵠⵠᐃΔ] = ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ];
    ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ] = [];
    ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ][hk] = Ⲇᐃ.ᐃⲆⵠⵠᐃⵠᐃ;
    ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ][og] = Ⲇᐃ.ⲆⵠⲆᐃᐃᐃⵠ;
    ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ][kg] = Ⲇᐃ.ᐃⵠΔᐃⵠⲆᐃ;
    ⵠᐃ[rs.ⵠⵠⵠΔⵠΔⲆ] = ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ];
    ⵠᐃ[rs.ᐃᐃⲆᐃⲆⲆΔ] = ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ];
    ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ] = [];
    ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ][fs] = Ⲇᐃ.ᐃⲆᐃΔᐃᐃᐃ;
    ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ][1] = Ⲇᐃ.ⵠΔΔᐃᐃⵠⲆ;
    ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ][yl] = Ⲇᐃ.ⵠⲆΔᐃⵠⵠⲆ;
    ⵠᐃ[rs.ⵠᐃⲆⲆⵠⲆΔ] = ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ];
    ⵠᐃ[rs.ⵠΔⵠⲆΔᐃΔ] = ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ];
    ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ] = [];
    ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ][0] = Ⲇᐃ.ⵠᐃᐃᐃᐃⲆⲆ;
    ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ][$q] = Ⲇᐃ.ⲆᐃᐃⵠᐃΔᐃ;
    ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ][2] = Ⲇᐃ.ᐃᐃᐃΔΔⲆΔ;
    ⵠᐃ[rs.ΔⵠⵠᐃⲆⵠⵠ] = ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ];
    ⵠᐃ[rs.ⲆⲆⵠⲆⵠⵠⲆ] = ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ];
    ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ] = [];
    ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ][dh] = Ⲇᐃ.ᐃⲆⵠΔⲆΔᐃ;
    ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ][y] = Ⲇᐃ.ⲆΔᐃᐃⵠⵠᐃ;
    ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ][Xj] = Ⲇᐃ.ⲆⲆⲆᐃᐃⲆᐃ;
    ⵠᐃ[rs.ⵠⵠⲆᐃΔᐃᐃ] = ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ];
    ⵠᐃ[rs.ΔᐃΔᐃⵠΔⵠ] = ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ];
    ⵠᐃ[rs.ⲆⲆᐃΔⲆⵠⵠ] = [];
    ⵠᐃ[rs.ⲆⲆᐃΔⲆⵠⵠ][hk] = Ⲇᐃ.ᐃⲆⵠⲆᐃⵠⲆᐃⲆ;
    ⵠᐃ[rs.ⲆⲆᐃΔⲆⵠⵠ][1] = Ⲇᐃ.ⲆᐃⲆᐃⵠᐃᐃΔᐃ;
    ⵠᐃ[rs.ⲆⲆᐃΔⲆⵠⵠ][ab] = Ⲇᐃ.ⵠⵠΔᐃᐃΔⲆᐃΔ;
    ⵠᐃ[rs.ⵠᐃΔⵠⲆΔᐃ] = ⵠᐃ[rs.ⲆⲆᐃΔⲆⵠⵠ];
    ⵠᐃ[rs.ᐃΔΔΔⲆᐃᐃ] = ⵠᐃ[rs.ⲆⲆᐃΔⲆⵠⵠ];
    ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ] = [];
    ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ][Ob] = Ⲇᐃ.ⲆⵠᐃⲆΔⲆΔ;
    ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ][Dj] = Ⲇᐃ.ⵠᐃᐃⵠᐃᐃⲆ;
    ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ][2] = Ⲇᐃ.ⲆᐃⵠⲆΔᐃⲆ;
    ⵠᐃ[rs.ΔⵠᐃΔΔⲆⵠ] = ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ];
    ⵠᐃ[rs.ᐃⲆⲆⵠⵠΔᐃ] = ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ];
    ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ] = [];
    ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ][0] = Ⲇᐃ.ⲆΔⵠⲆΔⵠΔ;
    ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ][1] = Ⲇᐃ.ⲆΔⵠΔᐃᐃⲆ;
    ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ][ys] = Ⲇᐃ.ⲆⲆⲆⵠⵠΔⵠ;
    ⵠᐃ[rs.ⵠⵠⲆⲆⲆⲆⵠ] = ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ];
    ⵠᐃ[rs.ΔΔⲆⲆⲆΔⵠ] = ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ];
    ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ] = [];
    ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ][hk] = Ⲇᐃ.ⲆΔⵠⵠⵠᐃΔ;
    ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ][1] = Ⲇᐃ.ΔⵠΔⲆⵠΔⲆ;
    ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ][2] = Ⲇᐃ.ⲆⵠΔⵠΔΔΔ;
    ⵠᐃ[rs.ⵠⵠᐃⲆⵠⲆⵠ] = ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ];
    ⵠᐃ[rs.ᐃⵠⲆⵠⲆⲆᐃ] = ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ];
    ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ] = [];
    ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ][0] = Ⲇᐃ.ΔⲆΔⲆΔᐃⵠ;
    ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ][1] = Ⲇᐃ.ΔⲆΔΔⲆⲆᐃ;
    ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ][Xj] = Ⲇᐃ.ᐃⵠⵠⲆⵠⵠⲆ;
    ⵠᐃ[rs.ΔⵠⵠⲆⵠΔⲆ] = ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ];
    ⵠᐃ[rs.ⲆⲆΔⲆⲆᐃⵠ] = ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ];
    ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ] = [];
    ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ][ho] = Ⲇᐃ.ᐃΔᐃΔⵠⵠΔ;
    ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ][El] = Ⲇᐃ.ⵠⲆΔⵠⵠⲆΔ;
    ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ][Ts] = Ⲇᐃ.ⲆⵠᐃΔᐃΔΔ;
    ⵠᐃ[rs.ⲆⵠΔᐃⵠⲆⲆ] = ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ];
    ⵠᐃ[rs.ΔⲆᐃⵠᐃΔⵠ] = ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ];
    ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ] = [];
    ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ][0] = Ⲇᐃ.ΔⲆΔⲆⲆⲆⲆ;
    ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ][og] = Ⲇᐃ.ⲆᐃⲆΔⵠⲆⲆ;
    ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ][2] = Ⲇᐃ.ⲆⵠΔΔⵠⲆⵠ;
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆⵠⲆ] = ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ];
    ⵠᐃ[rs.ⵠⵠᐃᐃⲆΔⵠ] = ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ];
    ⵠᐃ[rs.ⲆⲆΔⵠᐃᐃⵠ] = Rt(1, [{
      f: fc,
      x: vl,
      y: 0,
      a: bq,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: Sc,
      x: jg,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⵠⵠΔⵠᐃⲆ] = ⵠᐃ[rs.ⲆⲆΔⵠᐃᐃⵠ];
    ⵠᐃ[rs.ᐃⵠⲆⵠᐃⲆⵠ] = Rt(1, [{
      f: Td,
      x: ka,
      y: hk,
      a: Ws,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃᐃⲆⵠⵠⲆⵠ] = ⵠᐃ[rs.ᐃⵠⲆⵠᐃⲆⵠ];
    ⵠᐃ[rs.ⲆΔΔⵠⲆⵠⲆ] = Rt(uq, [{
      f: wd,
      x: Bs,
      y: Ob,
      a: y,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", fj[dn], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⲆᐃᐃⲆᐃⲆ] = ⵠᐃ[rs.ⲆΔΔⵠⲆⵠⲆ];
    ⵠᐃ[rs.ⲆΔΔΔⵠΔⲆ] = ⵠᐃ[rs.ⲆΔΔⵠⲆⵠⲆ];
    ⵠᐃ[rs.ⵠⵠᐃΔⵠⵠⲆ] = Rt(bh, [{
      f: Cd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", fj[Jl], "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔᐃΔΔΔⵠΔ] = ⵠᐃ[rs.ⵠⵠᐃΔⵠⵠⲆ];
    ⵠᐃ[rs.ΔΔΔⲆⵠΔΔ] = Rt(uq, [{
      f: Jd,
      x: 2,
      y: dh,
      a: uq,
      r: Math.PI / bb,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠΔΔⲆⵠⵠᐃ] = ⵠᐃ[rs.ΔΔΔⲆⵠΔΔ];
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃⲆⲆ] = ⵠᐃ[rs.ΔΔΔⲆⵠΔΔ];
    ⵠᐃ[rs.ᐃⵠᐃᐃⵠΔᐃ] = Rt(1, [{
      f: Ed,
      x: Xj,
      y: Yl,
      a: 1,
      r: Math.PI / Xk,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠⵠⵠⲆᐃ] = ⵠᐃ[rs.ᐃⵠᐃᐃⵠΔᐃ];
    ⵠᐃ[rs.Ⲇⵠⵠⵠⵠᐃⵠ] = Rt(1, [{
      f: Dd,
      x: 2,
      y: 0,
      a: Th,
      r: Math.PI / ul,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⵠⵠⲆⵠⵠⲆ] = ⵠᐃ[rs.Ⲇⵠⵠⵠⵠᐃⵠ];
    ⵠᐃ[rs.ᐃΔⵠⵠⵠⵠᐃ] = Rt(1, [{
      f: Ad,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / Jb,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆΔⲆΔⲆⵠΔ] = ⵠᐃ[rs.ᐃΔⵠⵠⵠⵠᐃ];
    ⵠᐃ[rs.ΔᐃΔΔⵠᐃⵠ] = Rt(bh, [{
      f: kd,
      x: uj,
      y: 0,
      a: uq,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⲆᐃⲆΔᐃ] = ⵠᐃ[rs.ΔᐃΔΔⵠᐃⵠ];
    ⵠᐃ[rs.ⵠΔⵠⲆⵠⵠᐃ] = Rt(1, [{
      f: Md,
      x: 2,
      y: 0,
      a: Zk,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔΔⵠᐃᐃᐃΔ] = ⵠᐃ[rs.ⵠΔⵠⲆⵠⵠᐃ];
    ⵠᐃ[rs.ᐃΔⲆⲆᐃΔΔ] = Rt(Zn, [{
      f: xd,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / Lj,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆΔᐃⲆⵠⵠ] = ⵠᐃ[rs.ᐃΔⲆⲆᐃΔΔ];
    ⵠᐃ[rs.ᐃᐃⲆⵠⲆⵠΔ] = ⵠᐃ[rs.ᐃΔⲆⲆᐃΔΔ];
    ⵠᐃ[rs.ᐃⲆᐃΔᐃᐃΔ] = Rt(Ws, [{
      f: Qd,
      x: 2,
      y: jg,
      a: bh,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⲆΔⲆᐃⵠⲆ] = ⵠᐃ[rs.ᐃⲆᐃΔᐃᐃΔ];
    ⵠᐃ[rs.ΔΔΔⲆⲆⲆⲆ] = Rt(Ng, [{
      f: Tm,
      x: fs,
      y: 0,
      a: bq,
      r: Math.PI / br,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠⲆᐃⵠⲆⲆᐃ] = ⵠᐃ[rs.ΔΔΔⲆⲆⲆⲆ];
    ⵠᐃ[rs.ΔⵠⵠⵠΔⵠⵠ] = Rt(1, [{
      f: Cc,
      x: nq,
      y: ho,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃᐃⵠ] = ⵠᐃ[rs.ΔⵠⵠⵠΔⵠⵠ];
    ⵠᐃ[rs.ⵠᐃᐃᐃΔⲆⲆ] = Rt(Ng, [{
      f: Qd,
      x: Ci,
      y: hk,
      a: or,
      r: Math.PI / Gs,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆΔᐃΔᐃᐃⲆ] = ⵠᐃ[rs.ⵠᐃᐃᐃΔⲆⲆ];
    ⵠᐃ[rs.ᐃΔᐃⵠᐃΔᐃ] = Rt(1, [{
      f: Qd,
      x: cn,
      y: 0,
      a: 1,
      r: Math.PI / br,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔΔΔᐃΔⵠⲆ] = ⵠᐃ[rs.ᐃΔᐃⵠᐃΔᐃ];
    ⵠᐃ[rs.ΔⵠᐃⲆⲆᐃΔ] = Rt(1, [{
      f: Qd,
      x: 2,
      y: Bs,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠΔᐃⲆᐃ] = ⵠᐃ[rs.ΔⵠᐃⲆⲆᐃΔ];
    ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ] = [];
    ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ][lt] = Ⲇᐃ.ΔⵠΔⵠⲆᐃⲆ;
    ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ][Dj] = Ⲇᐃ.ⵠⲆⲆᐃΔⲆⲆ;
    ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ][it] = Ⲇᐃ.ⵠΔΔⵠⵠᐃΔ;
    ⵠᐃ[rs.ΔΔⲆᐃᐃΔᐃ] = ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ];
    ⵠᐃ[rs.ᐃΔⵠᐃⲆⲆⵠ] = ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ];
    ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ] = [];
    ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ][Hb] = Ⲇᐃ.ⵠⵠⵠᐃⲆⵠΔ;
    ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ][1] = Ⲇᐃ.ⵠⵠⲆᐃΔΔᐃ;
    ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ][2] = Ⲇᐃ.ΔΔΔⵠΔⵠᐃ;
    ⵠᐃ[rs.ⵠⲆⲆⵠΔᐃⵠ] = ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ];
    ⵠᐃ[rs.ΔΔⵠᐃΔΔⲆ] = ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ];
    ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ] = [];
    ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ][ks] = Ⲇᐃ.ⵠᐃᐃᐃᐃⵠⵠ;
    ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ][bh] = Ⲇᐃ.ᐃⵠⵠᐃᐃΔⵠ;
    ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ][Ci] = Ⲇᐃ.ⲆⲆΔᐃᐃΔⵠ;
    ⵠᐃ[rs.ⵠⲆⲆΔΔΔᐃ] = ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ];
    ⵠᐃ[rs.ⵠⵠⵠΔⵠΔᐃ] = ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ];
    ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ] = [];
    ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ][Ob] = Ⲇᐃ.ΔⵠᐃΔⵠⲆΔ;
    ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ][y] = Ⲇᐃ.ⵠᐃᐃⲆⲆⵠΔ;
    ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ][dj] = Ⲇᐃ.ΔⵠΔΔᐃΔᐃ;
    ⵠᐃ[rs.ⵠᐃⲆᐃⲆⵠⲆ] = ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ];
    ⵠᐃ[rs.ⵠⵠΔⲆΔΔᐃ] = ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ];
    ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ] = [];
    ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ][0] = Ⲇᐃ.ΔΔⲆΔᐃΔⵠ;
    ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ][bt] = Ⲇᐃ.ⲆⵠⵠΔⲆⲆΔ;
    ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ][2] = Ⲇᐃ.ⲆⵠⵠⲆΔΔΔ;
    ⵠᐃ[rs.ⵠΔᐃΔΔΔⵠ] = ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ];
    ⵠᐃ[rs.ᐃⵠᐃⵠᐃΔΔ] = ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ];
    ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ] = [];
    ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ][gj] = Ⲇᐃ.ⵠᐃΔᐃᐃⲆⲆ;
    ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ][1] = Ⲇᐃ.ᐃⵠⵠᐃᐃⵠⵠ;
    ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ][Og] = Ⲇᐃ.ᐃᐃΔⵠⲆᐃⵠ;
    ⵠᐃ[rs.ΔᐃᐃΔⲆⲆᐃ] = ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ];
    ⵠᐃ[rs.ΔⲆⵠⲆⵠᐃΔ] = ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ];
    ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ] = [];
    ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ][0] = Ⲇᐃ.ⲆⲆΔⵠⲆΔⲆ;
    ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ][hj] = Ⲇᐃ.ᐃΔⵠᐃΔⲆⵠ;
    ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ][Ls] = Ⲇᐃ.ⲆⲆᐃⵠΔⵠΔ;
    ⵠᐃ[rs.ⵠᐃⲆⲆⲆⲆⲆ] = ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ];
    ⵠᐃ[rs.ᐃᐃΔⲆᐃΔⲆ] = ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ];
    ⵠᐃ[rs.ⲆᐃΔⵠⲆΔΔ] = Rt(1, [{
      f: pm,
      x: -nq,
      y: -2,
      a: or,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠᐃⲆᐃᐃ] = ⵠᐃ[rs.ⲆᐃΔⵠⲆΔΔ];
    ⵠᐃ[rs.ΔⲆⲆⲆⵠΔⲆ] = Rt(bh, [{
      f: Jc,
      x: -nq,
      y: -Ci,
      a: y,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔΔᐃᐃᐃⵠⵠ] = ⵠᐃ[rs.ΔⲆⲆⲆⵠΔⲆ];
    ⵠᐃ[rs.ΔᐃⵠᐃⵠⲆᐃ] = Rt(1, [{
      f: mm,
      x: -uj,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ⵠᐃ[rs.ΔΔⵠⲆΔΔⵠ] = Rt(1, [{
      f: mm,
      x: -uj,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ⵠᐃ[rs.ᐃⵠᐃᐃᐃΔΔ] = Rt(hj, [{
      f: Nc,
      x: Ob,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: cm,
      x: hk,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: Dc,
      x: dt,
      y: 0,
      a: 1,
      r: hk,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: Ac,
      x: Xa,
      y: Bs,
      a: 1,
      r: Bs,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", fj[iq], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆᐃᐃΔⲆΔᐃ] = ⵠᐃ[rs.ᐃⵠᐃᐃᐃΔΔ];
    ⵠᐃ[rs.ΔⵠΔⵠⵠᐃⲆ] = Rt(1, [{
      f: Cm,
      x: 45,
      y: 70,
      a: Ws,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", fj[Jl], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⵠⲆⲆᐃⲆⲆ] = ⵠᐃ[rs.ΔⵠΔⵠⵠᐃⲆ];
    ⵠᐃ[rs.ⲆⵠᐃⲆⵠΔᐃ] = Rt(bt, [{
      f: Pc,
      x: jg,
      y: Et,
      a: $q,
      r: Bs,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⲆⲆᐃᐃⲆ] = ⵠᐃ[rs.ⲆⵠᐃⲆⵠΔᐃ];
    ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⵠ] = Rt(Ng, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: ka,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⵠᐃⵠⵠⲆⲆ] = ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⵠ];
    ⵠᐃ[rs.ⲆΔᐃΔᐃⲆⲆ] = Rt(El, [{
      f: Tc,
      x: 0,
      y: ou,
      a: El,
      r: fs,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃᐃᐃᐃΔΔⵠ] = ⵠᐃ[rs.ⲆΔᐃΔᐃⲆⲆ];
    ⵠᐃ[rs.ᐃⲆⲆᐃⵠⲆⲆ] = Rt(Ng, [{
      f: nm,
      x: 0,
      y: 3,
      a: kr,
      r: lt,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⵠᐃⲆⵠᐃⲆ] = ⵠᐃ[rs.ᐃⲆⲆᐃⵠⲆⲆ];
    ⵠᐃ[rs.ΔⵠⵠΔⵠⲆΔ] = Rt(1, [{
      f: nm,
      x: Yl,
      y: 3,
      a: 1,
      r: Xa,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆΔᐃⵠΔΔᐃ] = ⵠᐃ[rs.ΔⵠⵠΔⵠⲆΔ];
    ⵠᐃ[rs.ⵠⲆΔⵠᐃⲆᐃ] = Rt(1, [{
      f: yc,
      x: jg,
      y: Xn,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔⲆⲆⵠⲆΔΔ] = ⵠᐃ[rs.ⵠⲆΔⵠᐃⲆᐃ];
    ⵠᐃ[rs.ΔᐃⵠⵠⵠⵠⲆ] = Rt(1, [{
      f: yc,
      x: ks,
      y: 10,
      a: og,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆⲆⲆᐃⵠΔΔ] = ⵠᐃ[rs.ΔᐃⵠⵠⵠⵠⲆ];
    ⵠᐃ[rs.ΔⲆᐃΔᐃᐃᐃ] = Rt(Dj, [{
      f: yc,
      x: fs,
      y: Ys,
      a: Th,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠᐃⵠⵠⵠΔⵠ] = ⵠᐃ[rs.ΔⲆᐃΔᐃᐃᐃ];
    ⵠᐃ[rs.ΔⵠΔⲆⲆΔᐃ] = Rt(1, [{
      f: zd,
      x: -El,
      y: ks,
      a: Zk,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔΔⲆΔⲆⲆᐃ] = ⵠᐃ[rs.ΔⵠΔⲆⲆΔᐃ];
    ⵠᐃ[rs.ⲆⲆⲆⵠΔⲆⲆ] = ⵠᐃ[rs.ΔⵠΔⲆⲆΔᐃ];
    ⵠᐃ[rs.ᐃⲆⵠΔⵠⲆᐃ] = Rt(1, [{
      f: Zd,
      x: ka,
      y: jg,
      a: bq,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆᐃⲆⲆⲆⵠ] = ⵠᐃ[rs.ᐃⲆⵠΔⵠⲆᐃ];
    ⵠᐃ[rs.ΔⵠⵠⲆΔΔⵠ] = Rt(1, [{
      f: xc,
      x: Et,
      y: 0,
      a: bh,
      r: Math.PI / Ba,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆⵠᐃᐃⲆΔΔ] = ⵠᐃ[rs.ΔⵠⵠⲆΔΔⵠ];
    ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃΔ] = Rt(Zn, [{
      f: vc,
      x: 0,
      y: vl,
      a: 1,
      r: gj,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆⵠᐃΔⲆ] = Rt(vg, [{
      f: Mc,
      x: 0,
      y: 0,
      a: 1,
      r: jg,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⲆ] = Rt(bh, [{
      f: vc,
      x: fs,
      y: 0,
      a: 1,
      r: ho,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔᐃᐃΔⵠⵠᐃ] = Rt(1, [{
      f: Mc,
      x: dh,
      y: Bs,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃⵠΔⲆⲆΔΔ] = Rt(1, [{
      f: Qc,
      x: 0,
      y: fs,
      a: 1,
      r: jg,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⵠⲆⵠᐃΔΔⵠ] = Rt(hj, [{
      f: Qc,
      x: 0,
      y: Hb,
      a: $r,
      r: ou,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔⵠⲆᐃⲆⵠΔ] = Rt(1, [{
      f: Qc,
      x: Go,
      y: 0,
      a: Th,
      r: Hb,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆΔ] = Rt(El, [{
      f: pc,
      x: lt,
      y: 0,
      a: Ng,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆᐃⲆⲆΔΔⵠ] = ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆΔ];
    ⵠᐃ[rs.ᐃⲆⵠΔⲆᐃⲆ] = Rt(1, [{
      f: pc,
      x: Hb,
      y: 0,
      a: 1,
      r: Math.PI / br,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆⵠᐃᐃΔ] = ⵠᐃ[rs.ᐃⲆⵠΔⲆᐃⲆ];
    ⵠᐃ[rs.ⵠⲆⵠᐃΔⲆᐃ] = Rt(ck, [{
      f: pc,
      x: 0,
      y: Xa,
      a: $r,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠⵠΔⲆⵠⵠΔ] = ⵠᐃ[rs.ⵠⲆⵠᐃΔⲆᐃ];
    ⵠᐃ[rs.ᐃⵠΔᐃⲆⲆⵠ] = Rt(1, [{
      f: pc,
      x: vl,
      y: 0,
      a: ck,
      r: Math.PI / zq,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆΔⲆⵠᐃⲆ] = ⵠᐃ[rs.ᐃⵠΔᐃⲆⲆⵠ];
    ⵠᐃ[rs.ΔⵠⲆΔΔⵠΔ] = Rt(1, [{
      f: Yc,
      x: dt,
      y: ou,
      a: bh,
      r: fs,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆΔᐃΔⲆᐃⵠ] = ⵠᐃ[rs.ΔⵠⲆΔΔⵠΔ];
    ⵠᐃ[rs.ⲆᐃᐃᐃⵠΔⵠ] = Rt(1, [{
      f: am,
      x: 0,
      y: Ob,
      a: Ws,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆΔᐃΔΔⲆⵠ] = ⵠᐃ[rs.ⲆᐃᐃᐃⵠΔⵠ];
    ⵠᐃ[rs.ⵠⲆⵠⲆⵠᐃⵠ] = Rt(1, [{
      f: dc,
      x: ks,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃⲆΔΔΔⲆⵠ] = ⵠᐃ[rs.ⵠⲆⵠⲆⵠᐃⵠ];
    ⵠᐃ[rs.ΔⲆΔᐃᐃⲆⲆ] = Rt(Ng, [{
      f: Wc,
      x: dt,
      y: 0,
      a: Ng,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ΔΔⵠⵠⲆⵠΔ] = ⵠᐃ[rs.ΔⲆΔᐃᐃⲆⲆ];
    ⵠᐃ[rs.ΔΔᐃΔΔⲆΔ] = Rt(Ws, [{
      f: Ec,
      x: Go,
      y: ou,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠᐃⵠΔⵠⵠⲆ] = ⵠᐃ[rs.ΔΔᐃΔΔⲆΔ];
    ⵠᐃ[rs.ᐃⲆⵠᐃⲆⵠⵠ] = Rt(bt, [{
      f: Oc,
      x: ks,
      y: Xa,
      a: 1,
      r: jg,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠⵠΔⲆΔΔⲆ] = ⵠᐃ[rs.ᐃⲆⵠᐃⲆⵠⵠ];
    ⵠᐃ[rs.ΔⲆΔΔⲆΔᐃ] = Rt(Dj, [{
      f: uc,
      x: lt,
      y: dh,
      a: 1,
      r: hk,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔⲆᐃⵠⲆⵠⵠ] = ⵠᐃ[rs.ΔⲆΔΔⲆΔᐃ];
    ⵠᐃ[rs.ᐃⲆⲆⵠⲆᐃᐃ] = Rt(Dj, [{
      f: Ld,
      x: -5,
      y: -as,
      a: 1,
      r: ho,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃⵠⲆᐃᐃⲆⵠ] = Rt(ck, [{
      f: bm,
      x: dt,
      y: 0,
      a: bt,
      r: Bs,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆⲆⵠⵠⲆⲆⵠ] = Rt(og, [{
      f: zc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⲆⲆᐃⲆᐃⲆΔ] = Rt(Th, [{
      f: bm,
      x: 0,
      y: 0,
      a: Zn,
      r: dh,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠⲆᐃⵠᐃ] = Rt(hj, [{
      f: lc,
      x: 3,
      y: dj,
      a: og,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⵠΔⵠᐃⵠⵠΔ] = Rt(1, [{
      f: em,
      x: 3,
      y: kg,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⵠⵠΔⵠᐃᐃᐃ] = ⵠᐃ[rs.ⲆᐃⵠⲆᐃⵠᐃ];
    ⵠᐃ[rs.ᐃⵠᐃΔᐃΔⵠ] = ⵠᐃ[rs.ⵠΔⵠᐃⵠⵠΔ];
    ⵠᐃ[rs.ⵠᐃᐃⵠᐃᐃⵠ] = Rt(Zk, [{
      f: vm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆᐃⵠᐃΔⵠⲆ] = ⵠᐃ[rs.ⵠᐃᐃⵠᐃᐃⵠ];
    ⵠᐃ[rs.ⵠΔᐃᐃⲆΔΔ] = Rt(1, [{
      f: Vc,
      x: 0,
      y: Ob,
      a: y,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", fj[_n], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⵠⲆⵠᐃᐃⲆ] = Rt(uq, [{
      f: Kc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⲆⵠⲆⲆΔⲆᐃ] = ⵠᐃ[rs.ⵠΔᐃᐃⲆΔΔ];
    ⵠᐃ[rs.ΔⵠⵠⵠⵠᐃⲆ] = ⵠᐃ[rs.ᐃⵠⲆⵠᐃᐃⲆ];
    ⵠᐃ[rs.ⵠⵠⲆⵠⵠᐃΔ] = Rt(bh, [{
      f: wu,
      x: vl,
      y: ks,
      a: 1,
      r: ka,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠΔΔΔᐃΔᐃ] = ⵠᐃ[rs.ⵠⵠⲆⵠⵠᐃΔ];
    ⵠᐃ[rs.ᐃᐃᐃᐃⲆⲆⵠ] = Rt(El, [{
      f: Au,
      x: jg,
      y: Yl,
      a: 1,
      r: ka,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", fj[f], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆΔⵠⵠΔⵠⲆ] = Rt(1, [{
      f: Bu,
      x: Bs,
      y: jg,
      a: 1,
      r: Ob,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", fj[lu], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆΔΔΔΔΔⲆ] = Rt($q, [{
      f: om,
      x: 0,
      y: -Ls,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", fj[iq], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆΔⲆᐃⲆΔ] = ⵠᐃ[rs.ⲆΔΔΔΔΔⲆ];
    ⵠᐃ[rs.ⵠⲆᐃΔᐃΔⲆ] = Rt(1, [{
      f: nd,
      x: -3,
      y: -5,
      a: 1,
      r: lt,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆᐃᐃΔᐃΔΔ] = Rt(1, [{
      f: rd,
      x: 0,
      y: 0,
      a: Ng,
      r: jg,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", fj[f], "#3da34d"], 0.5);
    ⵠᐃ[rs.ΔⵠⵠᐃᐃⲆΔ] = ⵠᐃ[rs.ⲆᐃᐃΔᐃΔΔ];
    ⵠᐃ[rs.ⲆᐃⵠⵠⲆⲆᐃ] = Rt(ck, [{
      f: id,
      x: -yr,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ᐃᐃⲆⲆΔⲆⵠ] = ⵠᐃ[rs.ⲆᐃⵠⵠⲆⲆᐃ];
    ⵠᐃ[rs.ⵠᐃⵠΔⲆⲆΔ] = Rt(bt, [{
      f: Tt,
      x: Et,
      y: Hb,
      a: bh,
      r: hk,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ᐃᐃᐃⵠⲆΔΔ] = Rt(hj, [{
      f: Ju,
      x: Eu,
      y: 0,
      a: 1,
      r: Xa,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ⵠᐃ[rs.ⵠΔⲆΔΔΔⲆ] = ⵠᐃ[rs.ᐃᐃᐃⵠⲆΔΔ];
    ⵠᐃ[rs.ΔⵠⵠΔΔⲆⲆ] = Rt(bq, [{
      f: gm,
      x: Go,
      y: Xa,
      a: or,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃⲆⲆⵠᐃΔⵠ] = ⵠᐃ[rs.ΔⵠⵠΔΔⲆⲆ];
    ⵠᐃ[rs.ᐃⲆΔᐃΔΔⵠ] = Rt(Th, [{
      f: cb,
      x: -5,
      y: -5,
      a: 1,
      r: Hb,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆΔΔⲆⵠⵠⵠ] = ⵠᐃ[rs.ᐃⲆΔᐃΔΔⵠ];
    ⵠᐃ[rs.ΔᐃΔΔⲆⵠⵠ] = Rt(1, [{
      f: cc,
      x: 0,
      y: Xa,
      a: Ng,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠᐃᐃⵠⲆⵠⵠ] = ⵠᐃ[rs.ΔᐃΔΔⲆⵠⵠ];
    ⵠᐃ[rs.ⲆⵠⲆΔΔⲆᐃ] = Rt(1, [{
      f: xb,
      x: Et,
      y: 0,
      a: Th,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆⵠⵠⲆΔⵠᐃ] = ⵠᐃ[rs.ⲆⵠⲆΔΔⲆᐃ];
    ⵠᐃ[rs.ΔⵠΔΔⵠⲆΔ] = Rt(og, [{
      f: wc,
      x: -$r,
      y: Xa,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    ⵠᐃ[rs.ᐃΔᐃⵠⲆᐃⵠ] = ⵠᐃ[rs.ΔⵠΔΔⵠⲆΔ];
    ⵠᐃ[rs.ⲆⵠᐃⵠⵠΔᐃ] = Rt($q, [{
      f: wc,
      x: -kr,
      y: vl,
      a: 1,
      r: -Math.PI / hg,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ⵠⵠⲆⲆⲆΔⲆ] = ⵠᐃ[rs.ⲆⵠᐃⵠⵠΔᐃ];
    ⵠᐃ[rs.ⵠᐃⲆΔΔᐃᐃ] = Rt(bt, [{
      f: jc,
      x: lt,
      y: 0,
      a: 1,
      r: vl,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔᐃⲆⲆΔⵠΔ] = Rt(Dj, [{
      f: qu,
      x: Et,
      y: 0,
      a: 1,
      r: Xa,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", fj[Rb], "#3da34d"], 0.5);
    ⵠᐃ[rs.ᐃᐃⵠᐃⲆⲆⲆ] = ⵠᐃ[rs.ΔᐃⲆⲆΔⵠΔ];
    ⵠᐃ[rs.ΔᐃΔⲆⵠⵠΔ] = Rt(1, [{
      f: ad,
      x: 0,
      y: Yl,
      a: Ws,
      r: Xa,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ⵠᐃ[rs.ⵠⵠΔᐃⵠⲆⲆ] = ⵠᐃ[rs.ΔᐃΔⲆⵠⵠΔ];
    ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⵠ] = Rt(1, [{
      f: It,
      x: -2,
      y: -8,
      a: y,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", fj[Vs], "#3da34d"], 0.5);
    ⵠᐃ[rs.ⲆⲆⵠᐃΔᐃⲆ] = ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⵠ];
    ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ] = [];
    ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ][lt] = Ⲇᐃ.ⵠⲆⲆⵠⲆᐃⵠ;
    ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ][1] = Ⲇᐃ.ᐃⲆΔΔⲆΔᐃ;
    ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ][nq] = Ⲇᐃ.ⲆᐃⵠᐃᐃΔⲆ;
    ⵠᐃ[rs.ⵠΔᐃᐃᐃⵠᐃ] = ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ];
    ⵠᐃ[rs.ΔⲆⵠⲆⲆΔΔ] = ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ];
    ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ][0] = Ⲇᐃ.ΔΔⲆⲆⵠⲆΔ;
    ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ][1] = Ⲇᐃ.ⵠᐃⵠΔⲆΔⵠ;
    ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ][it] = Ⲇᐃ.ⵠᐃΔΔⵠⵠⲆ;
    ⵠᐃ[rs.ΔΔⵠⵠⵠᐃⲆ] = ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ];
    ⵠᐃ[rs.ⵠⵠⲆΔᐃⲆⵠ] = ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ];
    ⵠᐃ[rs.ᐃⲆᐃⲆⵠⲆΔ] = ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ];
    ⵠᐃ[rs.ΔⲆⲆᐃᐃΔⵠ] = ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ];
    ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ] = [];
    ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ][Bs] = Ⲇᐃ.ⵠΔⵠᐃᐃΔⵠ;
    ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ][1] = Ⲇᐃ.ᐃⵠᐃⲆΔⲆⵠ;
    ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ][2] = Ⲇᐃ.ΔᐃⲆⵠᐃᐃⵠ;
    ⵠᐃ[rs.ᐃⲆᐃⲆⵠⲆΔ] = ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ];
    ⵠᐃ[rs.ΔⲆⲆᐃᐃΔⵠ] = ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ];
    ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ] = [];
    ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ][Hb] = Ⲇᐃ.ΔᐃⵠⲆⲆΔΔ;
    ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ][1] = Ⲇᐃ.ⲆΔⲆⲆⲆᐃᐃ;
    ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ][nl] = Ⲇᐃ.ᐃᐃⲆⵠΔΔⵠ;
    ⵠᐃ[rs.ⵠⵠⲆⲆᐃᐃᐃ] = ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ];
    ⵠᐃ[rs.ⵠⲆΔⲆΔΔⲆ] = ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ];
    ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ][hk] = Ⲇᐃ.ⵠᐃⵠⲆⵠΔΔ;
    ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ][Zn] = Ⲇᐃ.ⵠᐃᐃᐃⵠᐃⲆ;
    ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ][2] = Ⲇᐃ.ᐃᐃⲆΔⲆⲆⲆ;
    ⵠᐃ[rs.ⵠΔᐃⲆⲆⲆⵠ] = ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ];
    ⵠᐃ[rs.ⲆᐃⵠΔΔⲆΔ] = ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ];
    ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ] = [];
    ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ][ka] = Ⲇᐃ.ⲆⲆⵠΔᐃⵠᐃ;
    ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ][1] = Ⲇᐃ.ΔΔⲆΔⲆⲆΔ;
    ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ][2] = Ⲇᐃ.ⵠⵠᐃᐃⲆᐃᐃ;
    ⵠᐃ[rs.ᐃΔΔΔΔΔΔ] = ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ];
    ⵠᐃ[rs.ΔᐃⵠⵠⲆⵠⲆ] = ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ];
    ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ] = [];
    ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ][0] = Ⲇᐃ.ᐃⲆᐃⵠⵠᐃΔ;
    ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ][1] = Ⲇᐃ.ᐃΔⲆⲆⲆⲆΔ;
    ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ][it] = Ⲇᐃ.ⲆᐃΔⵠⲆⵠⲆ;
    ⵠᐃ[rs.ΔΔΔᐃⲆΔⵠ] = ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ];
    ⵠᐃ[rs.ΔᐃⵠΔᐃⵠΔ] = ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ];
    ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ] = [];
    ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ][dt] = Ⲇᐃ.ⵠᐃΔⲆᐃⵠⵠ;
    ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ][bt] = Ⲇᐃ.ⵠⵠΔⲆᐃΔⲆ;
    ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ][2] = Ⲇᐃ.ᐃⵠΔⵠΔⲆⲆ;
    ⵠᐃ[rs.ᐃⵠΔΔΔⲆΔ] = ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ];
    ⵠᐃ[rs.ⵠⲆΔⵠᐃᐃⲆ] = ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ];
    ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ] = [];
    ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ][0] = Ⲇᐃ.ⵠΔᐃⲆⲆⵠᐃ;
    ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ][1] = Ⲇᐃ.ΔⵠⲆᐃⵠⵠⲆ;
    ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ][2] = Ⲇᐃ.ᐃⵠⲆᐃᐃΔΔ;
    ⵠᐃ[rs.ΔᐃⲆΔⵠΔⵠ] = ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ];
    ⵠᐃ[rs.ⵠⵠΔⲆΔⲆᐃ] = ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ];
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ] = [];
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ][0] = Ⲇᐃ.ⵠⵠΔⵠᐃⲆᐃ;
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ][1] = Ⲇᐃ.ⵠᐃⲆⲆⵠⲆⵠ;
    ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ][Pn] = Ⲇᐃ.ⵠⵠΔⵠⲆⵠⵠ;
    ⵠᐃ[rs.ᐃⵠᐃΔᐃⵠΔⲆⵠ] = ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ];
    ⵠᐃ[rs.ᐃⵠⲆᐃᐃΔⲆ] = ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ];
    ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ] = [];
    ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ][0] = Ⲇᐃ.ⵠⵠⵠΔᐃᐃΔ;
    ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ][1] = Ⲇᐃ.ᐃΔᐃⵠⲆⵠΔ;
    ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ][2] = Ⲇᐃ.ⲆⲆᐃⲆⲆΔᐃ;
    ⵠᐃ[rs.ᐃᐃⲆⲆᐃᐃⲆ] = ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ];
    ⵠᐃ[rs.ⲆⵠΔᐃⵠⲆΔ] = ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ];
    ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ] = [];
    ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ][jg] = Ⲇᐃ.ⲆᐃⵠΔⵠᐃᐃ;
    ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ][1] = Ⲇᐃ.ⲆⲆᐃΔΔⵠΔ;
    ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ][ys] = Ⲇᐃ.ᐃᐃⲆΔᐃΔⲆ;
    ⵠᐃ[rs.ᐃᐃⲆⵠΔⵠⲆ] = ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ];
    ⵠᐃ[rs.ᐃΔΔⲆᐃᐃΔ] = ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ];
    ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ] = [];
    ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ][0] = Ⲇᐃ.ᐃΔΔⲆⵠⵠᐃ;
    ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ][og] = Ⲇᐃ.ΔⲆΔⵠᐃΔⵠ;
    ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ][ys] = Ⲇᐃ.ⲆΔΔⲆⲆⵠⵠ;
    ⵠᐃ[rs.ⵠⲆⲆⵠⵠᐃⵠ] = ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ];
    ⵠᐃ[rs.ΔᐃᐃΔᐃᐃⲆ] = [];
    ⵠᐃ[rs.ΔᐃᐃΔᐃᐃⲆ][lt] = Ⲇᐃ.ⵠᐃⲆΔᐃΔⲆ;
    ⵠᐃ[rs.ΔᐃᐃΔᐃᐃⲆ][Dj] = Ⲇᐃ.ⵠⲆᐃⵠⲆᐃⵠ;
    ⵠᐃ[rs.ΔᐃᐃΔᐃᐃⲆ][2] = Ⲇᐃ.ⵠᐃⵠⵠΔᐃⲆ;
    ⵠᐃ[rs.Δᐃⵠᐃⵠⵠᐃ] = ⵠᐃ[rs.ΔᐃᐃΔᐃᐃⲆ];
    ⵠᐃ[rs.ᐃⲆΔⲆΔⲆⲆ] = ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆΔ];
    ⵠᐃ[rs.ⲆⵠᐃΔΔⲆⵠ] = ⵠᐃ[rs.ᐃⲆⵠΔⲆᐃⲆ];
    ⵠᐃ[rs.ΔⲆⲆⵠⲆΔⲆ] = ⵠᐃ[rs.ⵠⲆⵠᐃΔⲆᐃ];
    ⵠᐃ[rs.ⲆΔⲆⵠⲆⲆⲆ] = ⵠᐃ[rs.ᐃⵠΔᐃⲆⲆⵠ];
    ⵠᐃ[rs.ⲆⲆΔⲆΔΔΔ] = ⵠᐃ[rs.ΔⲆⵠᐃᐃⲆⵠ];
    ⵠᐃ[rs.ᐃⲆᐃᐃΔⵠᐃ] = ⵠᐃ[rs.ⵠᐃᐃⲆⲆΔⲆ];
    ⵠᐃ[rs.ᐃⵠⵠΔⲆⵠΔ] = ⵠᐃ[rs.ΔⲆᐃΔΔΔᐃ];
    ⵠᐃ[rs.ⲆΔⲆᐃⵠΔᐃ] = ⵠᐃ[rs.ᐃΔΔⲆⵠΔΔ];
    ⵠᐃ[rs.ΔⲆⲆᐃⲆΔⵠ] = ⵠᐃ[rs.ⲆⵠⲆᐃⵠⵠⵠ];
    ⵠᐃ[rs.ᐃᐃⲆⵠᐃⲆᐃ] = ⵠᐃ[rs.ᐃⲆⲆⵠᐃΔⲆ];
    ⵠᐃ[rs.ΔᐃΔⲆⲆΔⲆ] = ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃΔ];
    ⵠᐃ[rs.ᐃᐃⲆⵠΔⲆⵠ] = ⵠᐃ[rs.ΔᐃᐃΔⵠⵠᐃ];
    ⵠᐃ[rs.ⵠᐃⵠΔⵠᐃⲆ] = ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⲆ];
    ⵠᐃ[rs.ᐃΔᐃⵠᐃⵠⵠ] = ⵠᐃ[rs.ⵠⵠⲆⲆΔⲆᐃ];
    ⵠᐃ[rs.ⵠⵠⵠⲆᐃⵠⵠ] = ⵠᐃ[rs.ΔⲆⵠⵠᐃΔⲆ];
    ⵠᐃ[rs.ᐃⲆⲆⲆΔⵠⵠ] = ⵠᐃ[rs.ᐃΔᐃⲆⲆᐃⲆ];
    ⵠᐃ[rs.ᐃⲆᐃΔΔΔᐃ] = ⵠᐃ[rs.ᐃⲆⲆΔⵠᐃⵠ];
    ⵠᐃ[rs.ΔΔΔΔΔΔⲆ] = ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃⵠ];
    ⵠᐃ[rs.ⵠⲆⵠⵠΔΔΔ] = ⵠᐃ[rs.ᐃⲆⲆᐃⲆᐃⵠ];
    ⵠᐃ[rs.ᐃⲆΔⵠⵠⲆⵠ] = ⵠᐃ[rs.ΔΔΔⲆⲆⵠⵠ];
    ⵠᐃ[rs.ΔⲆΔⵠΔⲆᐃ] = ⵠᐃ[rs.ΔⵠΔⲆᐃΔⲆ];
    ⵠᐃ[rs.ⵠⵠᐃΔΔⵠⲆ] = ⵠᐃ[rs.ⵠⲆⵠΔⵠΔΔ];
    ⵠᐃ[rs.ᐃΔⵠᐃΔⲆⲆ] = ⵠᐃ[rs.ⲆΔⲆⵠⲆᐃⲆ];
    ⵠᐃ[rs.ⲆⵠⵠΔΔΔⵠ] = ⵠᐃ[rs.ΔΔⵠᐃᐃᐃⵠ];
    ⵠᐃ[rs.ΔᐃⲆᐃⲆⲆⵠ] = ⵠᐃ[rs.ᐃⲆⵠⲆΔⲆⲆ];
    ⵠᐃ[rs.ⵠᐃⲆⲆⵠⲆⲆ] = ⵠᐃ[rs.ⵠⲆΔΔⲆⵠΔ];
    ⵠᐃ[rs.ΔΔⵠᐃⲆΔᐃ] = ⵠᐃ[rs.ⲆᐃᐃⲆᐃⲆⵠ];
    ⵠᐃ[rs.ΔⵠΔᐃⲆᐃᐃ] = ⵠᐃ[rs.ᐃⲆΔΔΔⵠⵠ];
    ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃᐃ] = ⵠᐃ[rs.ᐃᐃⲆⲆΔⵠⵠ];
    ⵠᐃ[rs.ΔᐃⲆᐃⲆΔΔ] = ⵠᐃ[rs.ΔΔᐃⵠᐃΔᐃ];
    ⵠᐃ[rs.ᐃᐃⲆᐃᐃΔⵠ] = ⵠᐃ[rs.ⲆᐃᐃᐃⲆⵠᐃ];
    ⵠᐃ[rs.ⲆᐃᐃΔⵠΔⵠ] = ⵠᐃ[rs.ⵠⵠΔᐃⲆⵠⵠ];
    ⵠᐃ[rs.ⵠᐃᐃΔⲆᐃᐃ] = ⵠᐃ[rs.ΔΔΔⵠⵠᐃⲆ];
    ⵠᐃ[rs.ᐃᐃⲆᐃⲆⵠⲆ] = ⵠᐃ[rs.ΔⲆᐃᐃᐃΔᐃ];
    ⵠᐃ[rs.ⵠΔⵠⲆⵠⵠⲆ] = ⵠᐃ[rs.ΔΔᐃᐃΔⲆⵠ];
    ⵠᐃ[rs.ΔΔΔᐃⵠⵠΔ] = ⵠᐃ[rs.ΔΔⲆᐃᐃΔΔ];
    ⵠᐃ[rs.ΔⲆᐃⲆⵠΔᐃ] = ⵠᐃ[rs.ⵠⲆᐃⲆᐃᐃⲆ];
    ⵠᐃ[rs.ΔⵠΔΔΔⵠΔ] = ⵠᐃ[rs.ᐃᐃⵠⵠⵠⵠⵠ];
    ⵠᐃ[rs.ΔᐃⵠΔᐃⵠᐃ] = ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠⲆ];
    ⵠᐃ[rs.ΔⵠΔⵠᐃⵠΔ] = ⵠᐃ[rs.ΔⵠᐃᐃᐃΔⵠ];
    ⵠᐃ[rs.ⵠΔⲆⲆⵠⵠᐃ] = ⵠᐃ[rs.ΔΔⵠⵠᐃⵠⲆ];
    ⵠᐃ[rs.ⲆⵠⲆⲆᐃΔⵠ] = ⵠᐃ[rs.ᐃᐃᐃΔⲆΔΔ];
    ⵠᐃ[rs.ⲆⵠⵠⲆⲆᐃΔ] = ⵠᐃ[rs.ΔⲆⲆⵠΔⵠⲆ];
    ⵠᐃ[rs.ⵠᐃᐃⲆⵠⲆΔ] = ⵠᐃ[rs.ⲆΔⲆⵠΔⵠⲆ];
    ⵠᐃ[rs.ⲆⲆⲆᐃΔⲆΔ] = ⵠᐃ[rs.ⲆᐃΔⵠⲆΔΔ];
    ⵠᐃ[rs.ᐃⵠⲆⵠΔΔⵠ] = ⵠᐃ[rs.ΔⲆⲆⲆⵠΔⲆ];
    ⵠᐃ[rs.ᐃⲆⲆⵠΔⵠΔ] = ⵠᐃ[rs.ᐃⵠᐃᐃᐃΔΔ];
    ⵠᐃ[rs.ⵠᐃᐃᐃᐃΔⵠ] = ⵠᐃ[rs.ΔᐃⵠᐃⵠⲆᐃ];
    ⵠᐃ[rs.ⲆⵠᐃⲆⵠⲆᐃ] = ⵠᐃ[rs.ΔΔⵠⲆΔΔⵠ];
    ⵠᐃ[rs.ⵠᐃⵠᐃᐃᐃⲆ] = ⵠᐃ[rs.ΔⵠⵠⲆΔΔⵠ];
    ⵠᐃ[rs.ⲆΔᐃᐃⲆⲆⲆ] = ⵠᐃ[rs.ΔⵠΔⵠⵠᐃⲆ];
    ⵠᐃ[rs.ᐃⲆⵠⵠᐃᐃⵠ] = ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃⲆ];
    ⵠᐃ[rs.ᐃΔⲆᐃⲆⲆᐃ] = ⵠᐃ[rs.ⲆⵠᐃᐃⵠⵠΔ];
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃⲆⵠ] = Ra(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      wb(e, a * -86.5, a * -86, a * 110, a * 110, a * hl);
      e.restore();
      yb(e, c[ka], c[1], qa);
      e.save();
      wb(e, a * 30, a * 115, a * 60, a * 5, a * Ms);
      e.restore();
      yb(e, c[Ls], c[3], wk);
      e.save();
      wb(e, a * 50, a * 117, a * u, a * 10, a * hl);
      e.restore();
      yb(e, c[it]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆⵠⲆᐃ] = Rt(0.5, [{
      f: Pd,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    ⵠᐃ[rs.ⵠᐃᐃΔⲆⲆⲆ] = ⵠᐃ[rs.ⵠΔᐃΔⵠⵠⲆ];
    ⵠᐃ[rs.ᐃⲆΔⲆᐃᐃᐃ] = ⵠᐃ[rs.ⲆᐃΔⵠΔⲆᐃ];
    ⵠᐃ[rs.ⵠΔΔⵠⵠⵠΔ] = ⵠᐃ[rs.ᐃΔΔᐃⲆΔΔ];
    ⵠᐃ[rs.ᐃΔΔΔΔⵠᐃ] = ⵠᐃ[rs.ⲆᐃᐃᐃΔᐃΔ];
    ⵠᐃ[rs.ⲆⲆⲆⵠⵠᐃΔ] = ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ];
    ⵠᐃ[rs.ΔⵠΔᐃⲆⲆⵠ] = ⵠᐃ[rs.ⲆᐃⵠⵠⵠⵠⲆ];
    ⵠᐃ[rs.ΔⲆⲆⵠⲆⵠⲆ] = ⵠᐃ[rs.ⵠⲆⲆⲆⵠⵠΔ];
    ⵠᐃ[rs.ⵠᐃΔΔⲆⲆΔ] = ⵠᐃ[rs.ᐃΔⵠᐃⵠⲆⲆ];
    ⵠᐃ[rs.ᐃⲆⵠⲆⲆⵠΔ] = ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃᐃ];
    ⵠᐃ[rs.ⵠΔⲆⲆᐃⲆⵠ] = ⵠᐃ[rs.ᐃΔⵠΔⵠΔⲆ];
    ⵠᐃ[rs.ⲆⵠⵠⵠⲆⵠⵠ] = ⵠᐃ[rs.ⲆΔⲆΔΔᐃΔ];
    ⵠᐃ[rs.ΔᐃᐃΔⵠᐃᐃ] = ⵠᐃ[rs.ⲆΔⲆⵠΔⲆᐃ];
    ⵠᐃ[rs.ΔΔⵠᐃⲆⲆⵠ] = ⵠᐃ[rs.ⵠΔⲆᐃⵠⵠᐃ];
    ⵠᐃ[rs.ᐃⲆⵠΔΔᐃⲆ] = ⵠᐃ[rs.ⲆⲆⵠⵠⵠΔᐃ];
    ⵠᐃ[rs.ⵠᐃΔⵠⲆⲆⵠ] = ⵠᐃ[rs.ⲆⵠᐃⵠΔᐃⵠ];
    ⵠᐃ[rs.ᐃᐃⵠΔⵠⲆⵠ] = ⵠᐃ[rs.ⲆⵠⲆⲆᐃⵠⵠ];
    ⵠᐃ[rs.ᐃⵠⵠᐃΔᐃⵠ] = ⵠᐃ[rs.ᐃᐃⲆᐃΔΔΔ];
    ⵠᐃ[rs.ᐃⲆⵠᐃᐃⲆⲆ] = ⵠᐃ[rs.ⵠᐃᐃⵠΔΔⵠ];
    ⵠᐃ[rs.ⲆΔᐃⵠΔⵠΔ] = ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆᐃ];
    ⵠᐃ[rs.ΔΔᐃΔⵠⵠⲆ] = ⵠᐃ[rs.ᐃⵠᐃᐃⵠΔᐃ];
    ⵠᐃ[rs.ⵠΔⲆΔⵠΔᐃ] = ⵠᐃ[rs.Ⲇⵠⵠⵠⵠᐃⵠ];
    ⵠᐃ[rs.ⲆⵠⲆΔⵠᐃⲆ] = ⵠᐃ[rs.ᐃΔⵠⵠⵠⵠᐃ];
    ⵠᐃ[rs.ⵠΔΔᐃΔⲆⵠ] = ⵠᐃ[rs.ΔᐃΔΔⵠᐃⵠ];
    ⵠᐃ[rs.ᐃⵠᐃⵠⲆᐃⲆ] = ⵠᐃ[rs.ⵠΔⵠⲆⵠⵠᐃ];
    ⵠᐃ[rs.ᐃᐃⲆⵠⲆⵠΔ] = ⵠᐃ[rs.ᐃΔⲆⲆᐃΔΔ];
    ⵠᐃ[rs.ᐃΔⲆⵠᐃⲆⵠ] = ⵠᐃ[rs.ΔⵠⵠⵠΔⵠⵠ];
    ⵠᐃ[rs.ⲆᐃⲆⲆΔᐃᐃ] = ⵠᐃ[rs.ΔΔΔⲆⲆⲆⲆ];
    ⵠᐃ[rs.ⵠᐃᐃᐃΔΔⲆ] = ⵠᐃ[rs.ᐃⲆᐃΔᐃᐃΔ];
    ⵠᐃ[rs.ΔⲆⲆⲆⵠⵠⵠ] = ⵠᐃ[rs.ⵠᐃᐃᐃΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠΔᐃⵠᐃΔ] = ⵠᐃ[rs.ᐃΔᐃⵠᐃΔᐃ];
    ⵠᐃ[rs.ᐃΔΔΔᐃΔⵠ] = ⵠᐃ[rs.ΔⵠᐃⲆⲆᐃΔ];
    ⵠᐃ[rs.ⲆⲆᐃᐃᐃⵠΔ] = ⵠᐃ[rs.ᐃⵠⲆⵠᐃⲆⵠ];
    ⵠᐃ[rs.ΔⵠΔⲆᐃᐃΔ] = ⵠᐃ[rs.ⲆⲆΔⵠᐃᐃⵠ];
    ⵠᐃ[rs.ⲆⵠⵠΔᐃΔᐃ] = ⵠᐃ[rs.ΔⵠⲆΔΔⵠΔ];
    ⵠᐃ[rs.ⵠΔΔⵠΔΔⵠ] = ⵠᐃ[rs.ⵠⲆⵠⲆⵠᐃⵠ];
    ⵠᐃ[rs.ⲆᐃᐃⵠⵠⵠΔ] = ⵠᐃ[rs.ΔⲆΔᐃᐃⲆⲆ];
    ⵠᐃ[rs.ᐃⵠⲆΔΔΔⲆ] = ⵠᐃ[rs.ΔΔᐃΔΔⲆΔ];
    ⵠᐃ[rs.ᐃΔᐃᐃⵠⵠⵠ] = ⵠᐃ[rs.ⲆⵠᐃⲆⵠΔᐃ];
    ⵠᐃ[rs.ⵠⵠᐃⲆΔⵠΔ] = ⵠᐃ[rs.ᐃⲆⵠΔⵠⲆᐃ];
    ⵠᐃ[rs.ΔΔⵠⵠΔΔᐃ] = ⵠᐃ[rs.ᐃⲆⵠᐃⲆⵠⵠ];
    ⵠᐃ[rs.ⲆⲆⲆᐃΔⵠΔ] = ⵠᐃ[rs.ΔⲆΔΔⲆΔᐃ];
    ⵠᐃ[rs.ⲆⲆΔᐃⵠᐃⲆ] = ⵠᐃ[rs.ᐃⲆⲆⵠⲆᐃᐃ];
    ⵠᐃ[rs.ⲆⲆΔᐃᐃⲆⲆ] = ⵠᐃ[rs.ΔᐃΔΔⲆⵠⵠ];
    ⵠᐃ[rs.ⲆΔⵠᐃᐃΔⵠ] = ⵠᐃ[rs.ⲆⵠⲆΔΔⲆᐃ];
    ⵠᐃ[rs.ᐃⵠⵠⵠᐃᐃΔ] = ⵠᐃ[rs.ΔⵠⵠΔΔⲆⲆ];
    ⵠᐃ[rs.ⵠⵠⲆⵠΔᐃⲆ] = ⵠᐃ[rs.ᐃⵠⲆᐃᐃⲆⵠ];
    ⵠᐃ[rs.ⵠᐃΔᐃᐃᐃΔ] = ⵠᐃ[rs.ⲆΔΔΔΔΔⲆ];
    ⵠᐃ[rs.ⵠΔᐃΔⲆⵠΔ] = ⵠᐃ[rs.ⲆⲆⵠⵠⲆⲆⵠ];
    ⵠᐃ[rs.ⵠⵠΔⵠⲆⲆᐃ] = ⵠᐃ[rs.ⲆⲆᐃⲆᐃⲆΔ];
    ⵠᐃ[rs.ⲆΔⵠΔⵠᐃΔ] = ⵠᐃ[rs.ⵠΔᐃᐃⲆΔΔ];
    ⵠᐃ[rs.ΔⵠΔⵠΔΔⵠ] = ⵠᐃ[rs.ᐃⵠⲆⵠᐃᐃⲆ];
    ⵠᐃ[rs.ⲆⲆⵠⵠΔⲆᐃ] = ⵠᐃ[rs.ⲆⵠᐃⵠⵠΔᐃ];
    ⵠᐃ[rs.ⲆΔⵠᐃΔⲆΔ] = ⵠᐃ[rs.ⵠᐃⲆΔΔᐃᐃ];
    ⵠᐃ[rs.ᐃⵠΔᐃⲆᐃΔ] = ⵠᐃ[rs.ⵠⵠⲆⵠⵠᐃΔ];
    ⵠᐃ[rs.ⲆΔᐃⵠⵠΔᐃ] = ⵠᐃ[rs.ᐃᐃᐃᐃⲆⲆⵠ];
    ⵠᐃ[rs.ⲆᐃᐃᐃⲆⵠΔ] = ⵠᐃ[rs.ⲆΔⵠⵠΔⵠⲆ];
    ⵠᐃ[rs.ⵠⲆΔⲆΔΔⵠ] = ⵠᐃ[rs.ᐃᐃᐃⵠⲆΔΔ];
    ⵠᐃ[rs.ΔⵠΔⲆⵠΔΔ] = ⵠᐃ[rs.ⲆᐃⵠⵠⲆⲆᐃ];
    ⵠᐃ[rs.ⲆⲆΔⲆᐃⵠⵠ] = ⵠᐃ[rs.ΔⵠΔΔⵠⲆΔ];
    ⵠᐃ[rs.ⵠⵠΔΔⵠᐃⲆ] = ⵠᐃ[rs.ΔᐃΔⲆⵠⵠΔ];
    ⵠᐃ[rs.ᐃᐃⵠᐃⲆⲆⲆ] = ⵠᐃ[rs.ΔᐃⲆⲆΔⵠΔ];
    ⵠᐃ[rs.ⵠΔⵠⵠⵠⲆⲆ] = ⵠᐃ[rs.ⵠⲆᐃΔᐃΔⲆ];
    ⵠᐃ[rs.ΔⲆΔⲆΔⵠⵠ] = ⵠᐃ[rs.ⲆᐃᐃΔᐃΔΔ];
    ⵠᐃ[rs.ᐃⲆᐃΔⵠⲆⵠ] = ⵠᐃ[rs.ⵠᐃⵠΔⲆⲆΔ];
    ⵠᐃ[rs.ᐃⲆⵠⵠΔᐃΔ] = ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⵠ];
    ⵠᐃ[rs.ⵠⵠΔⲆᐃᐃΔ] = ⵠᐃ[rs.ⵠⲆΔⵠᐃⲆᐃ];
    ⵠᐃ[rs.ᐃⵠΔⲆΔΔⲆ] = ⵠᐃ[rs.ᐃⵠΔⲆⲆΔΔ];
    ⵠᐃ[rs.ΔΔᐃᐃᐃⵠⲆ] = ⵠᐃ[rs.ΔᐃⵠⵠⵠⵠⲆ];
    ⵠᐃ[rs.ⵠΔΔᐃᐃΔⲆ] = ⵠᐃ[rs.ⵠⲆⵠᐃΔΔⵠ];
    ⵠᐃ[rs.ᐃⲆⲆⵠᐃⲆⲆ] = ⵠᐃ[rs.ΔⲆᐃΔᐃᐃᐃ];
    ⵠᐃ[rs.ᐃⲆⲆᐃᐃΔᐃ] = ⵠᐃ[rs.ΔⵠⲆᐃⲆⵠΔ];
    ⵠᐃ[rs.ⵠᐃⲆΔᐃΔΔ] = ⵠᐃ[rs.ⲆΔᐃΔᐃⲆⲆ];
    ⵠᐃ[rs.ᐃⵠΔΔⲆⲆⵠ] = ⵠᐃ[rs.ΔⵠⵠΔⵠⲆΔ];
    ⵠᐃ[rs.ⲆⵠΔΔⵠΔΔ] = ⵠᐃ[rs.ᐃⲆⲆᐃⵠⲆⲆ];
    ⵠᐃ[rs.ⲆⲆΔⵠᐃⲆΔ] = ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⵠ];
    ⵠᐃ[rs.ⵠΔⲆⲆΔⲆⵠ] = ⵠᐃ[rs.ⵠΔⵠᐃⵠⵠΔ];
    ⵠᐃ[rs.ⲆΔⵠⵠⵠⲆⲆ] = ⵠᐃ[rs.ⲆᐃⵠⲆᐃⵠᐃ];
    ⵠᐃ[rs.ΔΔⵠⲆΔⲆⲆ] = ⵠᐃ[rs.ⵠᐃᐃⵠᐃᐃⵠ];
    ⵠᐃ[rs.ⲆⲆΔᐃΔΔⵠ] = ⵠᐃ[rs.ⵠᐃᐃΔᐃⵠΔ];
    ⵠᐃ[rs.ⲆⵠΔΔᐃΔⲆ] = ⵠᐃ[rs.ⵠⲆᐃⵠΔΔⲆ];
    ⵠᐃ[rs.ΔΔⵠᐃⲆᐃⲆ] = ⵠᐃ[rs.ᐃᐃΔᐃⲆΔⵠ];
    ⵠᐃ[rs.ᐃⲆⲆⵠΔⵠⵠ] = ⵠᐃ[rs.ⲆⵠⲆΔᐃᐃᐃ];
    ⵠᐃ[rs.ⲆᐃΔᐃⵠⲆⵠ] = ⵠᐃ[rs.ⲆᐃᐃᐃⵠΔⵠ];
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : $q;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    wb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    yb(e, c[fs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    yb(e, c[ho]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    wb(e, a * -73, a * -20.5, a * 146, a * 41, a * as);
    e.restore();
    yb(e, c[ho]);
    e.globalAlpha = $q;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    wb(e, a * -67, a * -16.5, a * 134, a * 33, a * Xk);
    e.restore();
    yb(e, c[1], c[2], a * mi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    yb(e, c[1], c[it], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    yb(e, c[1], c[2], a * Qa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    yb(e, c[y], c[2], a * qa);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    wb(e, a * -73, a * -20.5, a * 146, a * 41, O * a);
    e.restore();
    yb(e, c[hj], c[cn], a * T);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    yb(e, c[Kb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    yb(e, c[wn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    yb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    yb(e, c[wn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    yb(e, c[kg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    yb(e, c[ab]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    yb(e, c[Ts]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    yb(e, c[2]);
    return d;
  }
  function sm() {
    var b = Rw.time;
    if (ⵠᐃ[rs.ⲆⲆᐃΔᐃ]) {
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆᐃΔᐃ][b][1], Ko + 480, eq + 190);
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆᐃΔᐃ][b][2], Ko + 180, eq - 430);
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆᐃΔᐃ][b][1], Ko - 855, eq + nh);
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆᐃΔᐃ][b][0], Ko - 550, eq - 300);
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆᐃΔᐃ][b][0], Ko - 1020, eq - 520);
    }
    if (ⵠᐃ[rs.ⵠᐃⵠᐃⲆ]) {
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][bt], Ko - 80, eq - 640);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][1], Ko + 80, eq + 490);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][2], Ko - 180, eq - 700);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][Bs], Ko + 550, eq + 100);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][1], Ko + 450, eq + 300);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][y], Ko + 780, eq + 300);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][Og], Ko + 980, eq + 200);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][2], Ko + 680, eq + 600);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][2], Ko - 380, eq + bl);
      Lo.drawImage(ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][b][2], Ko + 280, eq + 250);
    }
    if (ⵠᐃ[rs.ⲆⲆⵠᐃᐃ]) {
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆⵠᐃᐃ][b][0], Ko - 590, eq);
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆⵠᐃᐃ][b][0], Ko + 120, eq - 390);
      Lo.drawImage(ⵠᐃ[rs.ⲆⲆⵠᐃᐃ][b][0], Ko - 270, eq + 340);
    }
    if (ⵠᐃ[rs.ⵠⲆΔⵠ]) {
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][4], Ko - 700, eq - 600);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][2], Ko - 970, eq - 250);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][5], Ko - 720, eq - 200);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][2], Ko - 1020, eq + 340);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][Yl], Ko - 1120, eq - 0);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][bh], Ko - 650, eq - 330);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][mi], Ko - 495, eq - 90);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][3], Ko - 520, eq + 340);
      Lo.drawImage(ⵠᐃ[rs.ⵠⲆΔⵠ][b][it], Ko + 830, eq - 520);
    }
    ⵠᐃ[rs.ΔⲆᐃΔᐃ];
    if (Sw && uf) {
      var c = Sw.ᐃΔΔⵠ.x;
      var d = Sw.ᐃΔΔⵠ.y;
      Sw.ᐃΔΔⵠ.x = Ko;
      Sw.ᐃΔΔⵠ.y = eq;
      var e = uf.time;
      uf.time = Rw.time;
      var f;
      var g = Rw.items;
      g[Og].x = 400;
      g[2].y = 100;
      g[rb].ᐃⵠΔⲆ(rs.ΔᐃⵠΔᐃ);
      (f = g[$q]).x = -500;
      f.y = 100;
      f.ⵠΔⲆΔ[0].x = f.x - 20.5;
      f.ⵠΔⲆΔ[0].y = f.y - 22.5;
      f.ⵠΔⲆΔ[1].x = f.x - 35.5;
      f.ⵠΔⲆΔ[El].y = f.y + 7.5;
      f.ⵠΔⲆΔ[ab].x = f.x + 7.5;
      f.ⵠΔⲆΔ[kg].y = f.y - 30;
      f.ⵠΔⲆΔ[Ui].x = f.x + 22.5;
      f.ⵠΔⲆΔ[3].y = f.y;
      f.ⵠΔⲆΔ[xs].x = f.x - 7.5;
      f.ⵠΔⲆΔ[4].y = f.y + 14.5;
      for (var h = 0; h < f.info; h++) {
        f.ⵠΔⲆΔ[h].ᐃⵠΔⲆ(rs.ΔᐃⵠᐃⲆ);
      }
      (f = g[Ss]).x = 210;
      f.y = -290;
      f.ⵠΔⲆΔ[0].x = f.x - 20.5;
      f.ⵠΔⲆΔ[Go].y = f.y - 22.5;
      f.ⵠΔⲆΔ[Th].x = f.x - 35.5;
      f.ⵠΔⲆΔ[Ng].y = f.y + 7.5;
      f.ⵠΔⲆΔ[kg].x = f.x + 7.5;
      f.ⵠΔⲆΔ[2].y = f.y - 30;
      f.ⵠΔⲆΔ[3].x = f.x + 22.5;
      f.ⵠΔⲆΔ[3].y = f.y;
      f.ⵠΔⲆΔ[4].x = f.x - 7.5;
      f.ⵠΔⲆΔ[Qa].y = f.y + 14.5;
      for (h = 0; f.info > h; h++) {
        f.ⵠΔⲆΔ[h].ᐃⵠΔⲆ(rs.ΔᐃⵠᐃⲆ);
      }
      g[0].x = 450;
      g[0].y = -Aq;
      g[dh].ᐃᐃΔᐃᐃᐃΔ(rs.ΔᐃᐃⲆⵠΔⲆ);
      g[0].ᐃΔᐃᐃΔ();
      Sw.ᐃΔΔⵠ.x = c;
      Sw.ᐃΔΔⵠ.y = d;
      uf.time = e;
    }
  }
  function hm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(lt, Hh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * Zs, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    yb(d, b[jg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    yb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    yb(d, b[hk]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    yb(d, b[vl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    yb(d, b[Et]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    yb(d, b[0]);
    d.globalAlpha = El;
    d.translate(ks, -Hh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    yb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    yb(d, b[3], b[sd], Zj * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    yb(d, b[R], b[Ui], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * Wo, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    yb(d, b[Oj], b[Ab], a * yg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    yb(d, b[Ds], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    yb(d, b[3], b[Jh], a * I);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    yb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    yb(d, b[3], b[sd], a * _j);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    yb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    yb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    yb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    yb(d, b[El]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    yb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    yb(d, b[Ci]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    yb(d, b[1]);
    Tb(d, a * 102, a * 269, a * 11);
    yb(d, b[_g]);
    Tb(d, a * 98, a * 266, Yo * a);
    yb(d, b[pi]);
    Tb(d, a * 168, a * 269, mg * a);
    yb(d, b[3]);
    Tb(d, a * 164, a * 266, a * 5);
    yb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    yb(d, b[kg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    yb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    yb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    yb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    yb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    yb(d, b[Sr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    yb(d, b[Es]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    yb(d, b[Sr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    yb(d, b[Nl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    yb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    yb(d, b[Os]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    yb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    yb(d, b[ct]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    yb(d, b[nb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    yb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    yb(d, b[Tl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    yb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    yb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    yb(d, b[qh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    yb(d, b[7]);
    return c;
  }
  function lm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    yb(d, b[kr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    yb(d, b[rb], b[3], va * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    yb(d, b[2]);
    return c;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(dh);
    wb(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    yb(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Yo, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    wb(e, a * -64, a * -4.5, a * 129, a * os, a * nt);
    e.restore();
    yb(e, c[Ob]);
    e.globalAlpha = 1;
    e.translate(a * -5, -Jb * a);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    wb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    yb(e, c[2], c[3], a * Gt);
    e.globalAlpha = b ? 0.5 : Th;
    e.translate(a * 5, wr * a);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    wb(e, a * -4.5, a * -61, Q * a, a * 129, a * 5);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = Zk;
    e.translate(a * -5, a * -bb);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    wb(e, a * -4.5, a * -61, Mh * a, a * 129, O * a);
    e.restore();
    yb(e, c[uj], c[3], a * Xg);
    e.globalAlpha = b ? 0.5 : vg;
    e.translate(a * 5, a * as);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    wb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    yb(e, c[ks]);
    e.globalAlpha = $r;
    e.translate(-nt * a, -Gj * a);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    wb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    yb(e, c[2], c[kl], a * R);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ba, ul * a);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    wb(e, a * -65.5, a * -4, a * 129, a * 9, a * as);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = uq;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    wb(e, a * -65.5, -Kg * a, a * 129, a * 9, a * 5);
    e.restore();
    yb(e, c[2], c[Kb], Ds * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * zq);
    e.save();
    e.translate(a * $a, a * 18.1015625);
    wb(e, a * -11, a * -11.5, a * 22, a * 22, a * ul);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = Dj;
    e.translate(a * -5, -bb * a);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    wb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    yb(e, c[2], c[3], a * wn);
    e.globalAlpha = b ? 0.5 : uq;
    e.translate(a * 5, Jb * a);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    wb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    yb(e, c[Hb]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -Lj);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    wb(e, a * -10.5, a * -11.5, a * 21, a * 22, Gs * a);
    e.restore();
    yb(e, c[rb], c[yr], Jh * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ba, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    wb(e, a * -10.5, a * -11, a * 22, a * 22, a * as);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = Th;
    e.translate(-bb * a, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    wb(e, a * -10.5, a * -11, a * 22, a * 22, fl * a);
    e.restore();
    yb(e, c[2], c[Ss], Qq * a);
    e.globalAlpha = b ? 0.5 : hj;
    e.translate(a * Jb, a * Xk);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    wb(e, a * -11.5, a * -12, a * 22, a * 22, Gj * a);
    e.restore();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    wb(e, a * -11.5, a * -g, a * 22, a * 22, zq * a);
    e.restore();
    yb(e, c[2], c[Ab], a * Qq);
    return d;
  }
  function um() {
    var a = uq;
    new Date().getTime();
    Ic();
    rm();
    ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ] = [];
    ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ][rs.ⵠⲆᐃ] = [];
    for (var b = 0; rs.ᐃⲆΔᐃⲆⲆΔ > b; b++) {
      ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ][rs.ΔΔⲆ].push(Ra(ed(a, Ol + b, "#59B8CE")));
      ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ][rs.ⵠⲆᐃ].push(Ra(ed(a, Fl + b, "#90DDD9")));
    }
    ⵠᐃ[rs.ΔⲆⲆⲆⵠᐃⵠ] = [];
    ⵠᐃ[rs.ΔⲆⲆⲆⵠᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔⲆⲆⲆⵠᐃⵠ][rs.ⵠⲆᐃ] = [];
    for (b = hk; b < rs.ⵠΔⲆᐃⲆᐃΔ; b++) {
      ⵠᐃ[rs.ΔⲆⲆⲆⵠᐃⵠ][rs.ΔΔⲆ].push(Ra(ed(a, qa + b, "#fff")));
      ⵠᐃ[rs.ΔⲆⲆⲆⵠᐃⵠ][rs.ⵠⲆᐃ].push(Ra(ed(a, qa + b, "#fff")));
    }
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⲆⲆ] = [];
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⲆⲆ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃⵠᐃⲆⲆⲆⲆ][rs.ⵠⲆᐃ] = [];
    for (b = 0; b < rs.ⵠΔⲆᐃⲆᐃΔ; b++) {
      ⵠᐃ[rs.ᐃⵠᐃⲆⲆⲆⲆ][rs.ΔΔⲆ].push(Ra(ed(a, 6 + b, "#DDCD8A")));
      ⵠᐃ[rs.ᐃⵠᐃⲆⲆⲆⲆ][rs.ⵠⲆᐃ].push(Ra(ed(a, kh + b, "#155E57")));
    }
    ⵠᐃ[rs.ⲆⲆⲆᐃΔᐃⵠ] = [];
    ⵠᐃ[rs.ⲆⲆⲆᐃΔᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⲆᐃΔᐃⵠ][rs.ⵠⲆᐃ] = [];
    for (b = vl; rs.ᐃᐃⵠⵠᐃΔⵠ > b; b++) {
      ⵠᐃ[rs.ⲆⲆⲆᐃΔᐃⵠ][rs.ΔΔⲆ].push(Ra(ed(a, 4 + b, "#353326")));
      ⵠᐃ[rs.ⲆⲆⲆᐃΔᐃⵠ][rs.ⵠⲆᐃ].push(Ra(ed(a, 4 + b, "#1D2526")));
    }
    ⵠᐃ[rs.ᐃᐃᐃⵠΔ] = [];
    ⵠᐃ[rs.ᐃᐃᐃⵠΔ][rs.ΔΔⲆ] = Ra(pb(a * 1.5, 0, ["#ee71a9"]));
    ⵠᐃ[rs.ᐃᐃᐃⵠΔ][rs.ⵠⲆᐃ] = Ra(pb(a * 1.5, 0, ["#ee71a9"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ] = [ⵠᐃ[rs.ᐃᐃᐃⵠΔ]];
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][1] = [];
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][nl] = [];
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][_g] = [];
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][4] = [];
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][ck][rs.ΔΔⲆ] = Ra(pb(a * 1.5, 0, ["#e2d63b"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][Th][rs.ⵠⲆᐃ] = Ra(pb(a * 1.5, 0, ["#e2d63b"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][ys][rs.ΔΔⲆ] = Ra(pb(a * 1.5, 0, ["#309cbd"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][2][rs.ⵠⲆᐃ] = Ra(pb(a * 1.5, 0, ["#309cbd"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][wn][rs.ΔΔⲆ] = Ra(pb(a * 1.5, 0, ["#cd232d"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][3][rs.ⵠⲆᐃ] = Ra(pb(a * 1.5, 0, ["#cd232d"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][4][rs.ΔΔⲆ] = Ra(pb(a * 1.5, 0, ["#42b672"]));
    ⵠᐃ[rs.ⲆΔⲆⲆⲆ][4][rs.ⵠⲆᐃ] = Ra(pb(a * 1.5, 0, ["#42b672"]));
    if (ⵠⲆᐃⲆ.ⵠᐃΔⲆᐃⵠⲆ("cti", Vf.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Ra = function (a) {
        a.loaded = bt;
        return a;
      };
    }
    ⵠᐃ[rs.ΔⵠᐃⵠⵠⵠΔ] = Ra(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(vl, ka, a.width, a.height);
      b.lineWidth = Io;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = ko; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ΔΔⲆ].push(Ra(vu(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ΔΔⲆ].push(Ra(vu(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ΔΔⲆ].push(Ra(vu(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ⵠⲆᐃ].push(Ra(vu(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ⵠⲆᐃ].push(Ra(vu(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠᐃ[rs.ⵠᐃⵠᐃⲆ][rs.ⵠⲆᐃ].push(Ra(vu(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ⵠᐃ[rs.ΔᐃⲆⲆ] = [];
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ΔΔⲆ].push(Ra(od(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ΔΔⲆ].push(Ra(od(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ΔΔⲆ].push(Ra(od(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ⵠⲆᐃ].push(Ra(od(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ⵠⲆᐃ].push(Ra(od(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠᐃ[rs.ΔᐃⲆⲆ][rs.ⵠⲆᐃ].push(Ra(od(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ⵠᐃ[rs.ᐃⲆΔⵠ] = [];
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ΔΔⲆ].push(Ra(Iu(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ΔΔⲆ].push(Ra(Iu(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ΔΔⲆ].push(Ra(Iu(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ⵠⲆᐃ].push(Ra(Iu(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ⵠⲆᐃ].push(Ra(Iu(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠᐃ[rs.ᐃⲆΔⵠ][rs.ⵠⲆᐃ].push(Ra(Iu(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ⵠᐃ[rs.ᐃΔⵠⵠᐃ] = [];
    ⵠᐃ[rs.ᐃΔⵠⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠⵠΔᐃⵠᐃ;
    ⵠᐃ[rs.ᐃΔⵠⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠΔᐃⵠⵠΔⵠ;
    ⵠᐃ[rs.ⵠⵠⵠᐃΔ] = [];
    ⵠᐃ[rs.ⵠⵠⵠᐃΔ][rs.ΔΔⲆ] = Ra(_t(a * 0.6, ["#0d1b1c"]));
    ⵠᐃ[rs.ⵠⵠⵠᐃΔ][rs.ⵠⲆᐃ] = Ra(_t(a * 0.6, ["#030d14"]));
    ⵠᐃ[rs.Ⲇⵠⵠⵠᐃ] = [];
    ⵠᐃ[rs.Ⲇⵠⵠⵠᐃ][rs.ΔΔⲆ] = Ra($t(a * 0.6, ["#2a2938", "#242330"]));
    ⵠᐃ[rs.Ⲇⵠⵠⵠᐃ][rs.ⵠⲆᐃ] = Ra($t(a * 0.6, ["#1b1e30", "#161921"]));
    ⵠᐃ[rs.ᐃΔᐃΔⵠΔⲆ] = [];
    ⵠᐃ[rs.ᐃΔᐃΔⵠΔⲆ][rs.ΔΔⲆ] = Ra(Eb(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ⵠᐃ[rs.ᐃΔᐃΔⵠΔⲆ][rs.ⵠⲆᐃ] = Ra(Eb(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ⵠᐃ[rs.ΔⵠⵠⵠⲆᐃᐃ] = [];
    ⵠᐃ[rs.ΔⵠⵠⵠⲆᐃᐃ][rs.ΔΔⲆ] = Ra(Ib(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ⵠᐃ[rs.ΔⵠⵠⵠⲆᐃᐃ][rs.ⵠⲆᐃ] = Ra(Ib(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ⵠᐃ[rs.ΔᐃⵠⵠΔᐃⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠⵠΔᐃⲆ][rs.ΔΔⲆ] = Ra(iu(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ⵠᐃ[rs.ΔᐃⵠⵠΔᐃⲆ][rs.ⵠⲆᐃ] = Ra(iu(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
    ⵠᐃ[rs.ⵠΔᐃᐃⲆⵠΔ] = Ra(Qb(a * 0.6, ["#BB0000"]));
    ⵠᐃ[rs.ⵠⲆⲆⵠⵠⲆΔ] = Ra(Qb(a * 0.6, ["#DBE71C"]));
    ⵠᐃ[rs.ⵠⵠΔⲆⲆΔⵠ] = Ra(Qb(a * 0.6, ["#00BB00"]));
    ⵠᐃ[rs.ⵠⲆΔⵠ] = [];
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ].push(Yt(a * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, hk));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ].push(Yt(a * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, 0));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ].push(Yt(a * 0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, Eu));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ].push(Yt(a * 0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], gn, dh));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ].push(Yt(a * 0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], ke, 0));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ].push(Yt(a * 0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], gn, ho));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ].push(Yt(a * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], ol, 0));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ].push(Yt(a * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", fj[yl]], true, 0));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ].push(Yt(a * 0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, Bs));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ].push(Yt(a * 0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 0));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ].push(Yt(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", fj[cn]], false, Bs));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ].push(Yt(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], tk, 0));
    ⵠᐃ[rs.ΔᐃΔⲆΔ] = [];
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ΔΔⲆ].push(Ra(cu(Zt(a * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][0])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ΔΔⲆ].push(Ra(cu(Zt(a * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], true), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][1])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ⵠⲆᐃ].push(Ra(cu(Zt(a * 1.1, ["#030d14", "#031619", fj[q], "#0e3b31", "#0b2e28", "#10443a"], Cl), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][0])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ⵠⲆᐃ].push(Ra(cu(Zt(a * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], Gh), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][y])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ΔΔⲆ].push(Ra(cu(Zt(a * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], Mq), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][2])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ΔΔⲆ].push(Ra(cu(Zt(a * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], true), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][2])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ⵠⲆᐃ].push(Ra(cu(Zt(a * 0.9, ["#030d14", "#031619", fj[Ml], "#0d2522", "#0c2821", "#0d2a28"], Vl), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][cn])));
    ⵠᐃ[rs.ΔᐃΔⲆΔ][rs.ⵠⲆᐃ].push(Ra(cu(Zt(a * 0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], gn), ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][Xg])));
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][5] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][5]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][4] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][mi]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][Jh] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][3]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][2] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][ab]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][1] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][El]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][Et] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ΔΔⲆ][Et]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][Rh] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][5]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][Kg] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][4]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][wn] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][3]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][2] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][Sa]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][1] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][kr]);
    ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][0] = Ra(ⵠᐃ[rs.ⵠⲆΔⵠ][rs.ⵠⲆᐃ][0]);
    ⵠᐃ[rs.ⲆⵠΔⵠΔ] = [];
    ⵠᐃ[rs.ⲆⵠΔⵠΔ][rs.ΔΔⲆ] = Ra(mb(4, hu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ⵠᐃ[rs.ⲆⵠΔⵠΔ][rs.ⵠⲆᐃ] = Ra(mb(4, hu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ⵠᐃ[rs.ⵠᐃΔΔᐃ] = [];
    ⵠᐃ[rs.ⵠᐃΔΔᐃ][rs.ΔΔⲆ] = Ra(mb(4, hu(a * 0.75, fa, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⵠᐃ[rs.ⵠᐃΔΔᐃ][rs.ⵠⲆᐃ] = Ra(mb(4, hu(a * 0.75, gn, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ⵠᐃ[rs.ᐃⵠⵠΔΔ] = [];
    ⵠᐃ[rs.ᐃⵠⵠΔΔ][rs.ΔΔⲆ] = Ra(mb(Ik, hu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⵠᐃ[rs.ᐃⵠⵠΔΔ][rs.ⵠⲆᐃ] = Ra(mb(wk, hu(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ⵠᐃ[rs.ᐃᐃΔΔⵠ] = [];
    ⵠᐃ[rs.ᐃᐃΔΔⵠ][rs.ΔΔⲆ] = Ra(mb(4, hu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⵠᐃ[rs.ᐃᐃΔΔⵠ][rs.ⵠⲆᐃ] = Ra(mb(4, hu(a * 0.75, p, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⵠᐃ[rs.ΔᐃΔᐃΔ] = [];
    ⵠᐃ[rs.ΔᐃΔᐃΔ][rs.ΔΔⲆ] = Ra(mb(Ur, hu(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⵠᐃ[rs.ΔᐃΔᐃΔ][rs.ⵠⲆᐃ] = Ra(mb(4, hu(a * 0.75, Mj, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⵠᐃ[rs.ᐃⲆΔⵠⵠ] = [];
    ⵠᐃ[rs.ᐃⲆΔⵠⵠ][rs.ΔΔⲆ] = Ra(mb(3, Wt(a * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ⵠᐃ[rs.ᐃⲆΔⵠⵠ][rs.ⵠⲆᐃ] = Ra(mb(3, Wt(a * 0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ⵠᐃ[rs.ΔⲆᐃⵠΔ] = [];
    ⵠᐃ[rs.ΔⲆᐃⵠΔ][rs.ΔΔⲆ] = Ra(mb(yr, yu(a * 0.32, Mg, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", fj[Zk], "#e6636a"])));
    ⵠᐃ[rs.ΔⲆᐃⵠΔ][rs.ⵠⲆᐃ] = Ra(mb(3, yu(a * 0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ⵠᐃ[rs.ⵠⵠⲆⲆⲆ] = [];
    ⵠᐃ[rs.ⵠⵠⲆⲆⲆ][rs.ΔΔⲆ] = Ra(mb(wq, bu(a * 0.4, de, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ⵠᐃ[rs.ⵠⵠⲆⲆⲆ][rs.ⵠⲆᐃ] = Ra(mb(3, bu(a * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ⵠᐃ[rs.ⲆⲆΔᐃⵠ] = [];
    ⵠᐃ[rs.ⲆⲆΔᐃⵠ][rs.ΔΔⲆ] = Ra(mb(3, du(a * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ⵠᐃ[rs.ⲆⲆΔᐃⵠ][rs.ⵠⲆᐃ] = Ra(mb(3, du(a * 0.4, ia, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ⵠᐃ[rs.ⲆᐃΔⵠⵠ] = [];
    ⵠᐃ[rs.ⲆᐃΔⵠⵠ][rs.ΔΔⲆ] = Ra(mb(Ui, ru(a * 0.4, fa, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ⵠᐃ[rs.ⲆᐃΔⵠⵠ][rs.ⵠⲆᐃ] = Ra(mb(Ss, ru(a * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ⵠᐃ[rs.ΔᐃⵠΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠΔⲆ][rs.ΔΔⲆ] = Ra(mb(3, xu(a * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ⵠᐃ[rs.ΔᐃⵠΔⲆ][rs.ⵠⲆᐃ] = Ra(mb(Xg, xu(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ⵠᐃ[rs.ⵠΔⲆⵠⲆ] = [];
    ⵠᐃ[rs.ⵠΔⲆⵠⲆ][rs.ΔΔⲆ] = Ra(mb(Xg, Cu(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ⵠᐃ[rs.ⵠΔⲆⵠⲆ][rs.ⵠⲆᐃ] = Ra(mb(3, Cu(a * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ] = [];
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(Lu(a * 0.9, 0, ["#0d4f35"], 0)));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(Lu(a * 0.9, 0, ["#0d4f35"], 1)));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(Lu(a * 0.9, 0, ["#0d4f35"], 2)));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(Lu(a * 0.9, 0, ["#053339"], Et)));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(Lu(a * 0.9, 0, ["#053339"], 1)));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(Lu(a * 0.9, 0, ["#053339"], Sa)));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(Fu(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(Fu(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(Fu(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
    ⵠᐃ[rs.ⲆⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(Fu(a * 0.8, ["#052918", "#08491c", "#063417"])));
    ⵠᐃ[rs.ⲆⵠⲆΔⵠ] = [];
    ⵠᐃ[rs.ⲆⵠⲆΔⵠ][rs.ΔΔⲆ] = Ra(mb(Math.PI / kg, Fd(a * 0.25, Mj, ["#0d1b1c", "#44301b", fj[Ds], "#523e26"])));
    ⵠᐃ[rs.ⲆⵠⲆΔⵠ][rs.ⵠⲆᐃ] = Ra(mb(Math.PI / 2, Fd(a * 0.25, tk, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ⵠᐃ[rs.ⵠⲆᐃᐃΔᐃΔ] = [];
    ⵠᐃ[rs.ⵠⲆᐃᐃΔᐃΔ].push(Ra(Wd(a * 0.25, ["#44301b", fj[Kb], "#523e26"], 0)));
    ⵠᐃ[rs.ⵠⲆᐃᐃΔᐃΔ].push(Ra(Wd(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ⵠᐃ[rs.ⵠⲆᐃᐃΔᐃΔ].push(Ra(Wd(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], Xj)));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ] = [];
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ΔΔⲆ].push(Ra(mb(Math.PI / Og, $d(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ⵠⲆᐃ].push(Ra(mb(Math.PI / 2, $d(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], og))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ΔΔⲆ].push(Ra(mb(Math.PI / pn, $d(a * 0.25, 0, ["#0d1b1c", "#44301b", fj[Ia], "#523e26", "#4f9246"], 2))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ⵠⲆᐃ].push(Ra(mb(Math.PI / Ci, $d(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ΔΔⲆ].push(Ra(mb(Math.PI / pn, $d(a * 0.25, 0, ["#0d1b1c", "#44301b", fj[kl], "#523e26", "#9b2b25", "#ffffff"], Gt))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ⵠⲆᐃ].push(Ra(mb(Math.PI / 2, $d(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ΔΔⲆ].push(Ra(mb(Math.PI / 2, $d(a * 0.25, 0, ["#0d1b1c", "#44301b", fj[sd], "#523e26", "#9b2b25", "#362513"], 4))));
    ⵠᐃ[rs.ᐃᐃⵠΔⲆ][rs.ⵠⲆᐃ].push(Ra(mb(Math.PI / Pn, $d(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], Ah))));
    ⵠᐃ[rs.ⲆⲆⵠᐃᐃ] = [];
    ⵠᐃ[rs.ⲆⲆⵠᐃᐃ][rs.ΔΔⲆ] = [Ra(Gu(a * 1.2, La, ["#352b10", "#80500b", "#7c4908"]))];
    ⵠᐃ[rs.ⲆⲆⵠᐃᐃ][rs.ⵠⲆᐃ] = [Ra(Gu(a * 1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ⵠᐃ[rs.ⵠΔⵠⲆᐃᐃⲆ] = [];
    ⵠᐃ[rs.ⵠΔⵠⲆᐃᐃⲆ][rs.ΔΔⲆ] = Ra(Gu(a * 0.8, In, ["#0e3022", "#68622D", "#665329"]));
    ⵠᐃ[rs.ⵠΔⵠⲆᐃᐃⲆ][rs.ⵠⲆᐃ] = Ra(Gu(a * 0.8, La, ["#030d14", "#0F3A24", "#083326"]));
    ⵠᐃ[rs.ᐃⵠᐃΔΔ] = [];
    ⵠᐃ[rs.ᐃⵠᐃΔΔ][rs.ΔΔⲆ] = Ra(tm(a * 0.5, Gh, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ⵠᐃ[rs.ᐃⵠᐃΔΔ][rs.ⵠⲆᐃ] = Ra(tm(a * 0.5, In, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ⵠᐃ[rs.ⵠⲆⲆᐃΔ] = [];
    ⵠᐃ[rs.ⵠⲆⲆᐃΔ][rs.ΔΔⲆ] = Ra(Cb(a * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ⵠᐃ[rs.ⵠⲆⲆᐃΔ][rs.ⵠⲆᐃ] = Ra(Cb(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ⵠᐃ[rs.ⲆᐃᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⲆᐃᐃⵠⲆ][rs.ΔΔⲆ] = Ra(gc(a * 0.5, Gh, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ⵠᐃ[rs.ⲆᐃᐃⵠⲆ][rs.ⵠⲆᐃ] = Ra(gc(a * 0.5, zj, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ⵠᐃ[rs.ⵠᐃΔⵠⵠⲆⵠ] = [];
    ⵠᐃ[rs.ⵠᐃΔⵠⵠⲆⵠ][rs.ΔΔⲆ] = Ra(Gu(a * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ⵠᐃ[rs.ⵠᐃΔⵠⵠⲆⵠ][rs.ⵠⲆᐃ] = Ra(Gu(a * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
    ⵠᐃ[rs.ⲆΔⵠⲆⵠⲆⵠ] = [];
    ⵠᐃ[rs.ⲆΔⵠⲆⵠⲆⵠ][rs.ΔΔⲆ] = Ra(tm(a * 0.5, p, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ⵠᐃ[rs.ⲆΔⵠⲆⵠⲆⵠ][rs.ⵠⲆᐃ] = Ra(tm(a * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ⵠᐃ[rs.ΔⵠⵠᐃΔᐃⲆ] = [];
    ⵠᐃ[rs.ΔⵠⵠᐃΔᐃⲆ][rs.ΔΔⲆ] = Ra(Cb(a * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ⵠᐃ[rs.ΔⵠⵠᐃΔᐃⲆ][rs.ⵠⲆᐃ] = Ra(Cb(a * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ⵠᐃ[rs.ⲆⲆⲆⲆⵠΔᐃ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⲆⵠΔᐃ][rs.ΔΔⲆ] = Ra(gc(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ⵠᐃ[rs.ⲆⲆⲆⲆⵠΔᐃ][rs.ⵠⲆᐃ] = Ra(gc(a * 0.5, qs, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ⵠᐃ[rs.ⵠⵠΔⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⵠΔⵠⲆ][rs.ΔΔⲆ] = Ra(Hc(a * 0.45, true, ["#0e3022", fj[kr], "#98171e", "#22a84f", "#1f924a"]));
    ⵠᐃ[rs.ⵠⵠΔⵠⲆ][rs.ⵠⲆᐃ] = Ra(Hc(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ⵠᐃ[rs.ⲆⵠΔⵠⵠᐃᐃ] = Ra(Hc(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ⵠᐃ[rs.ΔᐃⵠᐃⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠᐃⲆ][rs.ΔΔⲆ] = Ra(Hu(a * 1.4, 0, ["#3d2a6e", "#8255b5"]));
    ⵠᐃ[rs.ΔᐃⵠᐃⲆ][rs.ⵠⲆᐃ] = Ra(Hu(a * 1.4, 0, ["#26124f", "#524082"]));
    ⵠᐃ[rs.ᐃⲆΔⲆⵠ] = [];
    ⵠᐃ[rs.ᐃⲆΔⲆⵠ][rs.ΔΔⲆ] = Ra(Ut(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ⵠᐃ[rs.ᐃⲆΔⲆⵠ][rs.ⵠⲆᐃ] = Ra(Ut(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ⵠᐃ[rs.ΔΔᐃⵠⵠⲆⲆ] = [];
    ⵠᐃ[rs.ΔΔᐃⵠⵠⲆⲆ][rs.ΔΔⲆ] = Ra(Qt(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ⵠᐃ[rs.ΔΔᐃⵠⵠⲆⲆ][rs.ⵠⲆᐃ] = Ra(Qt(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ⵠᐃ[rs.ΔᐃᐃⲆⵠΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃᐃⲆⵠΔⲆ][rs.ΔΔⲆ] = Ra(Vb(a * 0.9, 0, ["#4d2d14", "#432516"]));
    ⵠᐃ[rs.ΔᐃᐃⲆⵠΔⲆ][rs.ⵠⲆᐃ] = Ra(Vb(a * 0.9, 0, ["#282404", "#0a0a01"]));
    ⵠᐃ[rs.ΔⲆⲆΔⵠᐃⲆ] = [];
    ⵠᐃ[rs.ΔⲆⲆΔⵠᐃⲆ][rs.ΔΔⲆ] = Ra(ju(a * 0.9, 0, ["#efd435"]));
    ⵠᐃ[rs.ΔⲆⲆΔⵠᐃⲆ][rs.ⵠⲆᐃ] = Ra(ju(a * 0.9, 0, ["#fffabb"]));
    ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆᐃ] = [];
    ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆᐃ][rs.ΔΔⲆ] = Ra(Zb(a * 0.9, 0, ["#efd435"]));
    ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆᐃ][rs.ⵠⲆᐃ] = Ra(Zb(a * 0.9, 0, ["#fffabb"]));
    ⵠᐃ[rs.ⵠⲆᐃⲆΔⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⲆᐃⲆΔⵠⲆ][rs.ΔΔⲆ] = Ra(ju(a * 0.9, 0, ["#efd435"]));
    ⵠᐃ[rs.ⵠⲆᐃⲆΔⵠⲆ][rs.ⵠⲆᐃ] = Ra(ju(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ⵠᐃ[rs.ⲆⵠᐃⲆᐃΔⲆ] = [];
    ⵠᐃ[rs.ⲆⵠᐃⲆᐃΔⲆ][rs.ΔΔⲆ] = Ra(Zb(a * 0.9, 0, ["#efd435"]));
    ⵠᐃ[rs.ⲆⵠᐃⲆᐃΔⲆ][rs.ⵠⲆᐃ] = Ra(Zb(a * 0.9, 0, ["#ff5704"]));
    ⵠᐃ[rs.ⲆΔΔⵠⲆⵠⵠ] = Ra(jb(a, "#ffffff"));
    ⵠᐃ[rs.ΔⵠⵠⵠⵠⵠⲆ] = Ra(jb(a * 1.5, "#ffffff"));
    ⵠᐃ[rs.ⲆⵠΔⲆᐃⵠⵠ] = Ra(uu(a, "Your score:", Sj * a, "#FFF"));
    ⵠᐃ[rs.ΔᐃᐃᐃΔᐃⵠ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      Tb(d, a * 119.5, a * 140.125, a * 19);
      yb(d, Bj, b[El], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      yb(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      yb(d, Lh, b[Xj], a * Qg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      yb(d, Bj, b[3], cl * a);
      Tb(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      yb(d, b[Kg], b[5], Ol * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      yb(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      yb(d, undefined, b[8], a * Vn);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      wb(d, a * -39, a * -40, a * 78, a * 78, a * Yq);
      d.restore();
      yb(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      wb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      yb(d, b[zh]);
      return c;
    }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ⵠᐃ[rs.ⲆⲆΔΔⲆⲆⵠ] = Ⲇᐃ.ⲆⲆΔΔⲆⲆⵠ;
    ⵠᐃ[rs.ⵠᐃΔⵠΔ] = [];
    ⵠᐃ[rs.ⵠᐃΔⵠΔ][rs.ΔΔⲆ] = Ra($b(a * 1.5, Wl, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠᐃ[rs.ⵠᐃΔⵠΔ][rs.ⵠⲆᐃ] = Ra($b(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠᐃ[rs.ΔᐃⵠᐃⵠΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃⵠᐃⵠΔⲆ][rs.ΔΔⲆ] = Ra(Xb(a * 2, yq, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠᐃ[rs.ΔᐃⵠᐃⵠΔⲆ][rs.ⵠⲆᐃ] = Ra(Xb(Xj * a, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠᐃ[rs.ⲆⵠⵠⵠΔᐃΔ] = [];
    ⵠᐃ[rs.ⲆⵠⵠⵠΔᐃΔ][rs.ΔΔⲆ] = Ra(Nt(a * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ⵠᐃ[rs.ⲆⵠⵠⵠΔᐃΔ][rs.ⵠⲆᐃ] = Ra(Nt(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ⵠᐃ[rs.ᐃΔΔⲆⵠ] = [];
    ⵠᐃ[rs.ᐃΔΔⲆⵠ][rs.ΔΔⲆ] = Ra(St(a * 2.2, 0, ["#A89F67", "#9E8456"]));
    ⵠᐃ[rs.ᐃΔΔⲆⵠ][rs.ⵠⲆᐃ] = Ra(St(a * 2.2, 0, ["#0B4049", "#08383D"]));
    ⵠᐃ[rs.ⵠⵠᐃᐃᐃᐃΔ] = [];
    ⵠᐃ[rs.ⵠⵠᐃᐃᐃᐃΔ][rs.ΔΔⲆ] = Ra(St(a * 2.2, 0, ["#68622D", "#665329"]));
    ⵠᐃ[rs.ⵠⵠᐃᐃᐃᐃΔ][rs.ⵠⲆᐃ] = Ra(St(a * 2.2, 0, ["#0F3A24", "#083326"]));
    ⵠᐃ[rs.ΔᐃΔΔΔ] = [];
    ⵠᐃ[rs.ΔᐃΔΔΔ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#A89F67", "#9E8456"]));
    ⵠᐃ[rs.ΔᐃΔΔΔ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
    ⵠᐃ[rs.ⲆⲆⲆⲆᐃⲆΔ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⲆᐃⲆΔ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#c67933", "#b17238"]));
    ⵠᐃ[rs.ⲆⲆⲆⲆᐃⲆΔ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃΔⲆ] = [];
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃΔⲆ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
    ⵠᐃ[rs.ⵠⵠⲆⵠᐃΔⲆ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#032d29", "#044640"]));
    ⵠᐃ[rs.ΔⵠᐃⵠⵠᐃⲆ] = [];
    ⵠᐃ[rs.ΔⵠᐃⵠⵠᐃⲆ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ⵠᐃ[rs.ΔⵠᐃⵠⵠᐃⲆ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#1c6161", "#07413f"]));
    ⵠᐃ[rs.ΔⲆΔⵠⲆⵠΔ] = [];
    ⵠᐃ[rs.ΔⲆΔⵠⲆⵠΔ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#328a56", "#449573"]));
    ⵠᐃ[rs.ΔⲆΔⵠⲆⵠΔ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃΔⲆ] = [];
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃΔⲆ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃΔⲆ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⵠᐃ[rs.ΔΔΔᐃΔⵠⵠ] = [];
    ⵠᐃ[rs.ΔΔΔᐃΔⵠⵠ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#b22419", "#99110e"]));
    ⵠᐃ[rs.ΔΔΔᐃΔⵠⵠ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#04323c", "#03222b"]));
    ⵠᐃ[rs.ⵠⵠΔΔΔⵠᐃ] = [];
    ⵠᐃ[rs.ⵠⵠΔΔΔⵠᐃ][rs.ΔΔⲆ] = Ra(zu(a * 0.8, 0, ["#13a56d", "#098a58"]));
    ⵠᐃ[rs.ⵠⵠΔΔΔⵠᐃ][rs.ⵠⲆᐃ] = Ra(zu(a * 0.8, 0, ["#043c37", "#032b23"]));
    ⵠᐃ[rs.ⵠⵠⵠᐃⵠᐃⲆ] = Rt(Ng, [{
      f: St,
      x: 0,
      y: 0,
      a: Ws,
      r: ka,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠᐃ[rs.ΔᐃᐃⵠᐃⲆⵠ] = Rt(1, [{
      f: Vb,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / Rh,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠᐃ[rs.ⲆᐃⲆⲆᐃΔΔ] = Rt(1, [{
      f: om,
      x: 0,
      y: -Xk,
      a: Zn,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠᐃ[rs.ⵠⲆΔⲆⵠΔⲆ] = Rt(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ⵠᐃ[rs.ΔⵠⵠΔⵠⵠΔ] = [];
    ⵠᐃ[rs.ΔⵠⵠΔⵠⵠΔ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
    ⵠᐃ[rs.ΔⵠⵠΔⵠⵠΔ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#084442", "#125e5a"]));
    ⵠᐃ[rs.ΔᐃΔⲆⲆ] = [];
    ⵠᐃ[rs.ΔᐃΔⲆⲆ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#9E8456", "#A89F67"]));
    ⵠᐃ[rs.ΔᐃΔⲆⲆ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ⵠᐃ[rs.ᐃⵠΔᐃⲆⵠΔ] = [];
    ⵠᐃ[rs.ᐃⵠΔᐃⲆⵠΔ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#665329", "#68622D"]));
    ⵠᐃ[rs.ᐃⵠΔᐃⲆⵠΔ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#083326", "#0F3A24"]));
    ⵠᐃ[rs.ᐃᐃⵠⲆⲆⲆⵠ] = [];
    ⵠᐃ[rs.ᐃᐃⵠⲆⲆⲆⵠ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#c67933", "#ec952d"]));
    ⵠᐃ[rs.ᐃᐃⵠⲆⲆⲆⵠ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#0e6553", "#094437"]));
    ⵠᐃ[rs.ᐃⵠΔᐃᐃᐃⲆ] = [];
    ⵠᐃ[rs.ᐃⵠΔᐃᐃᐃⲆ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#375809", "#4b770e"]));
    ⵠᐃ[rs.ᐃⵠΔᐃᐃᐃⲆ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
    ⵠᐃ[rs.ⲆⵠᐃᐃΔⲆⵠ] = [];
    ⵠᐃ[rs.ⲆⵠᐃᐃΔⲆⵠ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#585809", "#72770e"]));
    ⵠᐃ[rs.ⲆⵠᐃᐃΔⲆⵠ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#295209", "#305d0d"]));
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆΔΔ] = [];
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆΔΔ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆΔΔ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#126366", "#0d484b"]));
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠᐃΔ] = [];
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠᐃΔ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#3f8662", "#30915d"]));
    ⵠᐃ[rs.ⵠⲆᐃᐃⵠᐃΔ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#0e6553", "#094437"]));
    ⵠᐃ[rs.ΔΔΔΔⲆᐃⲆ] = [];
    ⵠᐃ[rs.ΔΔΔΔⲆᐃⲆ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#c79153", "#dfa868"]));
    ⵠᐃ[rs.ΔΔΔΔⲆᐃⲆ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#073927", "#075040"]));
    ⵠᐃ[rs.ᐃΔⲆᐃⲆⵠⲆ] = [];
    ⵠᐃ[rs.ᐃΔⲆᐃⲆⵠⲆ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#768b5b", "#819984"]));
    ⵠᐃ[rs.ᐃΔⲆᐃⲆⵠⲆ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#0c4540", "#0e5153"]));
    ⵠᐃ[rs.ΔΔⲆⲆᐃΔⵠ] = [];
    ⵠᐃ[rs.ΔΔⲆⲆᐃΔⵠ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#567465", "#627c6e"]));
    ⵠᐃ[rs.ΔΔⲆⲆᐃΔⵠ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#073927", "#075040"]));
    ⵠᐃ[rs.ΔΔⵠⲆΔΔⲆ] = [];
    ⵠᐃ[rs.ΔΔⵠⲆΔΔⲆ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#996b3a", "#bf956b"]));
    ⵠᐃ[rs.ΔΔⵠⲆΔΔⲆ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#0e6553", "#094437"]));
    ⵠᐃ[rs.ΔⲆᐃⵠᐃⵠΔ] = [];
    ⵠᐃ[rs.ΔⲆᐃⵠᐃⵠΔ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#7a634a", "#a68f77"]));
    ⵠᐃ[rs.ΔⲆᐃⵠᐃⵠΔ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#1e4d43", "#113c32"]));
    ⵠᐃ[rs.ⲆᐃΔΔΔⲆⵠ] = [];
    ⵠᐃ[rs.ⲆᐃΔΔΔⲆⵠ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#99403c", "#bc796c"]));
    ⵠᐃ[rs.ⲆᐃΔΔΔⲆⵠ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#1e434d", "#11303c"]));
    ⵠᐃ[rs.ΔΔⲆⲆⲆⲆΔ] = [];
    ⵠᐃ[rs.ΔΔⲆⲆⲆⲆΔ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#88504e", "#b3857c"]));
    ⵠᐃ[rs.ΔΔⲆⲆⲆⲆΔ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#253b41", "#162930"]));
    ⵠᐃ[rs.ΔᐃᐃΔᐃⵠᐃ] = [];
    ⵠᐃ[rs.ΔᐃᐃΔᐃⵠᐃ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#0f8870", "#23af93"]));
    ⵠᐃ[rs.ΔᐃᐃΔᐃⵠᐃ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#032829", "#083233"]));
    ⵠᐃ[rs.ᐃΔⵠΔΔⲆⲆ] = [];
    ⵠᐃ[rs.ᐃΔⵠΔΔⲆⲆ][rs.ΔΔⲆ] = Ra(Fb(a * 0.9, 0, ["#618a20", "#84a74e"]));
    ⵠᐃ[rs.ᐃΔⵠΔΔⲆⲆ][rs.ⵠⲆᐃ] = Ra(Fb(a * 0.9, 0, ["#1f4632", "#335d47"]));
    ⵠᐃ[rs.ΔᐃⵠΔᐃ] = [];
    ⵠᐃ[rs.ΔᐃⵠΔᐃ][rs.ΔΔⲆ] = Ra(qb(a * 1.2, Mg, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ⵠᐃ[rs.ΔᐃⵠΔᐃ][rs.ⵠⲆᐃ] = Ra(qb(a * 1.2, La, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ⵠᐃ[rs.ⵠⵠⵠⵠⵠ] = [];
    ⵠᐃ[rs.ⵠⵠⵠⵠⵠ][rs.ΔΔⲆ] = Ra(ud(a * 1, true, ["#0d1b1c", "#4c3a15", fj[B], "#564021", "#634828", "#4c3a15"]));
    ⵠᐃ[rs.ⵠⵠⵠⵠⵠ][rs.ⵠⲆᐃ] = Ra(ud(bh * a, yq, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠᐃ[rs.ᐃΔΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃΔΔΔⲆ][rs.ΔΔⲆ] = Ra(gd(a * hj, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠᐃ[rs.ᐃΔΔΔⲆ][rs.ⵠⲆᐃ] = Ra(gd(a * Dj, La, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠᐃ[rs.ⲆᐃΔΔΔ] = [];
    ⵠᐃ[rs.ⲆᐃΔΔΔ][rs.ΔΔⲆ] = Ra(hd(a * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", fj[u], "#d588f1"]));
    ⵠᐃ[rs.ⲆᐃΔΔΔ][rs.ⵠⲆᐃ] = Ra(hd(or * a, xk, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠᐃ[rs.ΔᐃᐃⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃᐃⲆᐃ][rs.ΔΔⲆ] = Ra(hd(a * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⵠᐃ[rs.ΔᐃᐃⲆᐃ][rs.ⵠⲆᐃ] = Ra(hd(Th * a, qs, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ⵠᐃ[rs.ⵠΔᐃⵠᐃ] = [];
    ⵠᐃ[rs.ⵠΔᐃⵠᐃ][rs.ΔΔⲆ] = Ra(fd(a * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⵠᐃ[rs.ⵠΔᐃⵠᐃ][rs.ⵠⲆᐃ] = Ra(fd(a * $q, Pl, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⵠᐃ[rs.ⲆΔΔᐃⲆ] = [];
    ⵠᐃ[rs.ⲆΔΔᐃⲆ][rs.ΔΔⲆ] = Ra(ec(a * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", fj[Oa], "#4c3a15"]));
    ⵠᐃ[rs.ⲆΔΔᐃⲆ][rs.ⵠⲆᐃ] = Ra(ec(a * 0.8, fa, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠᐃ[rs.ᐃΔⵠᐃᐃ] = [];
    ⵠᐃ[rs.ᐃΔⵠᐃᐃ][rs.ΔΔⲆ] = Ra(tc(a * 0.8, p, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ⵠᐃ[rs.ᐃΔⵠᐃᐃ][rs.ⵠⲆᐃ] = Ra(tc(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", fj[rl], "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ⵠᐃ[rs.ⲆⵠⵠⵠΔ] = [];
    ⵠᐃ[rs.ⲆⵠⵠⵠΔ][rs.ΔΔⲆ] = Ra(jd(a * 0.8, Pl, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠᐃ[rs.ⲆⵠⵠⵠΔ][rs.ⵠⲆᐃ] = Ra(jd(a * 0.8, Gh, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠᐃ[rs.ⵠᐃⲆᐃᐃ] = [];
    ⵠᐃ[rs.ⵠᐃⲆᐃᐃ][rs.ΔΔⲆ] = Ra(_d(a * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ⵠᐃ[rs.ⵠᐃⲆᐃᐃ][rs.ⵠⲆᐃ] = Ra(_d(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", fj[Pg], "#295957", "#1f5955"]));
    ⵠᐃ[rs.ⲆᐃⲆᐃⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⲆᐃⲆ][rs.ΔΔⲆ] = Ra(_d(a * 0.8, yq, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", fj[Ql], fj[Rq], "#d588f1"]));
    ⵠᐃ[rs.ⲆᐃⲆᐃⲆ][rs.ⵠⲆᐃ] = Ra(_d(a * 0.8, eo, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠᐃ[rs.ⵠⵠΔᐃᐃᐃⵠ] = [];
    ⵠᐃ[rs.ⵠⵠΔᐃᐃᐃⵠ][rs.ΔΔⲆ] = Ra(cd(a * 1.5, p, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ⵠᐃ[rs.ⵠⵠΔᐃᐃᐃⵠ][rs.ⵠⲆᐃ] = Ra(cd(a * 1.5, yq, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ⵠᐃ[rs.ᐃΔⵠⵠΔⲆΔ] = [];
    ⵠᐃ[rs.ᐃΔⵠⵠΔⲆΔ][rs.ΔΔⲆ] = Ra(cd(a * Ws, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠᐃ[rs.ᐃΔⵠⵠΔⲆΔ][rs.ⵠⲆᐃ] = Ra(cd(a * og, Va, [fj[Yh], "#042b30", "#0b342b", "#0b342b", fj[Il], "#0b342b"]));
    ⵠᐃ[rs.ᐃᐃᐃᐃΔΔΔ] = [];
    ⵠᐃ[rs.ᐃᐃᐃᐃΔΔΔ][rs.ΔΔⲆ] = Ra(Bd(a * 1.5, In, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ⵠᐃ[rs.ᐃᐃᐃᐃΔΔΔ][rs.ⵠⲆᐃ] = Ra(Bd(a * 1.5, true, ["#030d14", "#163a3a", "#214c4b", fj[Pg], "#164542", "#295957"]));
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃᐃⵠ] = [];
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃᐃⵠ][rs.ΔΔⲆ] = Ra(Bd(a * 1, xl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠᐃ[rs.ⵠᐃⵠⲆᐃᐃⵠ][rs.ⵠⲆᐃ] = Ra(Bd(a * Ng, false, [fj[j], fj[Cg], "#07393d", "#07393d", fj[j], "#07393d"]));
    ⵠᐃ[rs.ⲆᐃⵠⲆⲆᐃⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⵠⲆⲆᐃⲆ][rs.ΔΔⲆ] = Ra(Bd(a * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", fj[Cs], "#af59cd", "#d588f1"]));
    ⵠᐃ[rs.ⲆᐃⵠⲆⲆᐃⲆ][rs.ⵠⲆᐃ] = Ra(Bd(a * 1.5, is, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ⵠᐃ[rs.ΔⲆᐃᐃΔᐃⵠ] = [];
    ⵠᐃ[rs.ΔⲆᐃᐃΔᐃⵠ][rs.ΔΔⲆ] = Ra(Bd(a * Dj, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠᐃ[rs.ΔⲆᐃᐃΔᐃⵠ][rs.ⵠⲆᐃ] = Ra(Bd(a * 1, Vq, [fj[jl], "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠⵠ] = [];
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠⵠ][rs.ΔΔⲆ] = Ra(yd(a * 1.5, is, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠⵠ][rs.ⵠⲆᐃ] = Ra(yd(a * 1.5, eo, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ⵠᐃ[rs.ⲆⲆⲆΔⵠⵠⵠ] = [];
    ⵠᐃ[rs.ⲆⲆⲆΔⵠⵠⵠ][rs.ΔΔⲆ] = Ra(yd(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠᐃ[rs.ⲆⲆⲆΔⵠⵠⵠ][rs.ⵠⲆᐃ] = Ra(yd(a * 1, zn, ["#032428", fj[j], "#07393d", "#07393d", "#032428", "#07393d"]));
    ⵠᐃ[rs.ΔⵠⲆⲆⲆΔⵠ] = [];
    ⵠᐃ[rs.ΔⵠⲆⲆⲆΔⵠ][rs.ΔΔⲆ] = Ra(Id(a * 1.5, Mj, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ⵠᐃ[rs.ΔⵠⲆⲆⲆΔⵠ][rs.ⵠⲆᐃ] = Ra(Id(a * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ⵠᐃ[rs.ⵠᐃⵠᐃᐃⵠΔ] = [];
    ⵠᐃ[rs.ⵠᐃⵠᐃᐃⵠΔ][rs.ΔΔⲆ] = Ra(Id(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ⵠᐃ[rs.ⵠᐃⵠᐃᐃⵠΔ][rs.ⵠⲆᐃ] = Ra(Id(a * bh, Va, ["#032428", "#032428", "#07393d", "#07393d", fj[Ys], "#07393d"]));
    ⵠᐃ[rs.ⵠⲆⲆⲆΔ] = [];
    ⵠᐃ[rs.ⵠⲆⲆⲆΔ][rs.ΔΔⲆ] = Ra(Nd(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ⵠᐃ[rs.ⵠⲆⲆⲆΔ][rs.ⵠⲆᐃ] = Ra(Nd(a * 0.5, 0, [fj[jl], "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", fj[Cn], "#2b6664", fj[s]]));
    ⵠᐃ[rs.ᐃⵠΔⵠⲆ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠⲆ][rs.ΔΔⲆ] = Ra(zm(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ⵠᐃ[rs.ᐃⵠΔⵠⲆ][rs.ⵠⲆᐃ] = Ra(zm(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ⵠᐃ[rs.ⲆᐃⲆⵠᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⲆⵠᐃ][rs.ΔΔⲆ] = Ra(Nb(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ⵠᐃ[rs.ⲆᐃⲆⵠᐃ][rs.ⵠⲆᐃ] = Ra(Nb(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ⵠᐃ[rs.ᐃᐃᐃⲆΔ] = [];
    ⵠᐃ[rs.ᐃᐃᐃⲆΔ][rs.ΔΔⲆ] = Ra(mb(Math.PI, Mt(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ⵠᐃ[rs.ᐃᐃᐃⲆΔ][rs.ⵠⲆᐃ] = Ra(mb(Math.PI, Mt(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ⵠᐃ[rs.ΔΔΔⵠᐃΔⵠ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      yb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      yb(d, oh, b[0], va);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      yb(d, Eh, b[hk], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      yb(d, gg, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      yb(d, Zr, b[Hb], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      yb(d, undefined, b[jg], qa);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      yb(d, undefined, b[dt], Yr);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      yb(d, undefined, b[Bs], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      yb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      yb(d, pa, b[0], 4);
      return c;
    }(a * 0.6, ["#FFFFFF"]));
    ⵠᐃ[rs.ⲆΔᐃⲆΔ] = [];
    ⵠᐃ[rs.ⲆΔᐃⲆΔ][rs.ΔΔⲆ] = Ra(Ub(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ⵠᐃ[rs.ⲆΔᐃⲆΔ][rs.ⵠⲆᐃ] = Ra(Ub(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ⵠᐃ[rs.ⵠⲆⲆΔⵠ] = [];
    ⵠᐃ[rs.ⵠⲆⲆΔⵠ][rs.ΔΔⲆ] = Ra(Yd(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ⵠᐃ[rs.ⵠⲆⲆΔⵠ][rs.ⵠⲆᐃ] = Ra(Yd(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ⵠᐃ[rs.ΔΔⵠⵠⲆ] = [];
    ⵠᐃ[rs.ΔΔⵠⵠⲆ][rs.ΔΔⲆ] = Ra(md(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ⵠᐃ[rs.ΔΔⵠⵠⲆ][rs.ⵠⲆᐃ] = Ra(md(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ⵠᐃ[rs.ⵠΔⲆᐃⲆ] = [];
    ⵠᐃ[rs.ⵠΔⲆᐃⲆ][rs.ΔΔⲆ] = Ra(nc(a * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ⵠᐃ[rs.ⵠΔⲆᐃⲆ][rs.ⵠⲆᐃ] = Ra(nc(a * 0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ⵠᐃ[rs.ⵠΔΔΔᐃ] = [];
    ⵠᐃ[rs.ⵠΔΔΔᐃ][rs.ΔΔⲆ] = Ra(gu(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ⵠᐃ[rs.ⵠΔΔΔᐃ][rs.ⵠⲆᐃ] = Ra(gu(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ⵠᐃ[rs.ⵠᐃΔΔⵠ] = [];
    ⵠᐃ[rs.ⵠᐃΔΔⵠ][rs.ΔΔⲆ] = Ra(ku(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ⵠᐃ[rs.ⵠᐃΔΔⵠ][rs.ⵠⲆᐃ] = Ra(ku(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ⵠᐃ[rs.ⵠΔⵠᐃᐃⲆᐃ] = [];
    ⵠᐃ[rs.ⵠΔⵠᐃᐃⲆᐃ][rs.ΔΔⲆ] = Ra(fc(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ⵠᐃ[rs.ⵠΔⵠᐃᐃⲆᐃ][rs.ⵠⲆᐃ] = Ra(fc(a * 0.42, Gh, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ⵠᐃ[rs.ΔΔⵠᐃⵠⵠΔ] = [];
    ⵠᐃ[rs.ΔΔⵠᐃⵠⵠΔ][rs.ΔΔⲆ] = Ra(Sc(a * 0.9, ["#e4c027"]));
    ⵠᐃ[rs.ΔΔⵠᐃⵠⵠΔ][rs.ⵠⲆᐃ] = Ra(Sc(a * 0.9, ["#D8E57F"]));
    ⵠᐃ[rs.ΔⵠᐃⲆΔⲆᐃ] = [];
    ⵠᐃ[rs.ΔⵠᐃⲆΔⲆᐃ][rs.ΔΔⲆ] = Ra(ym(a * 0.42, fa, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ⵠᐃ[rs.ΔⵠᐃⲆΔⲆᐃ][rs.ⵠⲆᐃ] = Ra(ym(a * 0.42, zj, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ⵠᐃ[rs.ⵠⲆᐃΔⵠΔⲆ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      wb(d, a * -57.5, a * -161.5, k * a, a * 323, a * 10);
      d.restore();
      yb(d, b[0], b[1], mi * a);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      wb(d, a * -57.5, a * 50.5, a * Is, a * 105, a * Qg);
      d.restore();
      yb(d, b[6], b[1], Yr * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      yb(d, b[2], b[2], Sb * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      yb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      yb(d, b[nl], b[nq], a * Hh);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      yb(d, b[3], b[3], Yq * a);
      d.save();
      d.translate(a * 72, a * 68.5);
      wb(d, a * -41.5, a * -36.5, a * 73, a * 73, Jk * a);
      d.restore();
      yb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      wb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      yb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      wb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      yb(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Un * a, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      yb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Db * a, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      yb(d, b[Gt], b[3], a * 10);
      return c;
    }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ⵠᐃ[rs.ᐃⲆᐃⵠᐃⲆⵠ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⵠᐃⲆⵠ][rs.ΔΔⲆ] = Ra(Td(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ⵠᐃ[rs.ᐃⲆᐃⵠᐃⲆⵠ][rs.ⵠⲆᐃ] = Ra(Td(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ⵠᐃ[rs.ⵠⲆᐃⵠΔⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⲆᐃⵠΔⲆᐃ][rs.ΔΔⲆ] = Ra(dd(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ⵠᐃ[rs.ⵠⲆᐃⵠΔⲆᐃ][rs.ⵠⲆᐃ] = Ra(dd(a * 0.5, Wl, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ⵠᐃ[rs.ⵠⵠⵠⲆⲆⵠᐃ] = Ra(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      wb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      yb(e, c[Hb], c[Ws], T);
      return d;
    }(a * 0.8, 0, ["#5f6061", "#939393"]));
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃⲆⲆ] = Rt(1, [{
      f: Vb,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], $r);
    ⵠᐃ[rs.ⵠΔⵠⵠⲆ] = [];
    ⵠᐃ[rs.ⵠΔⵠⵠⲆ][rs.ΔΔⲆ] = Ra(wd(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⵠᐃ[rs.ⵠΔⵠⵠⲆ][rs.ⵠⲆᐃ] = Ra(wd(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⵠᐃ[rs.ⲆΔⲆⵠⲆⵠᐃ] = [];
    ⵠᐃ[rs.ⲆΔⲆⵠⲆⵠᐃ][rs.ΔΔⲆ] = Ra(pd(a * bh, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ⵠᐃ[rs.ⲆΔⲆⵠⲆⵠᐃ][rs.ⵠⲆᐃ] = Ra(pd(Zn * a, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ⵠᐃ[rs.ⵠΔᐃⲆᐃ] = [];
    ⵠᐃ[rs.ⵠΔᐃⲆᐃ][rs.ΔΔⲆ] = Ra(mb(Gt, Jd(a * 0.7, eo, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ⵠᐃ[rs.ⵠΔᐃⲆᐃ][rs.ⵠⲆᐃ] = Ra(mb(3, Jd(a * 0.7, In, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ⵠᐃ[rs.ⲆⲆᐃᐃⵠ] = [];
    ⵠᐃ[rs.ⲆⲆᐃᐃⵠ][rs.ΔΔⲆ] = Ra(mb(yr, Ed(a * 0.7, In, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ⵠᐃ[rs.ⲆⲆᐃᐃⵠ][rs.ⵠⲆᐃ] = Ra(mb(Qh, Ed(a * 0.7, zj, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ⵠᐃ[rs.ⲆΔᐃⵠᐃ] = [];
    ⵠᐃ[rs.ⲆΔᐃⵠᐃ][rs.ΔΔⲆ] = Ra(mb(wn, Dd(a * 0.65, tk, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ⵠᐃ[rs.ⲆΔᐃⵠᐃ][rs.ⵠⲆᐃ] = Ra(mb(3, Dd(a * 0.65, zj, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ⵠᐃ[rs.ΔⲆⵠΔᐃ] = [];
    ⵠᐃ[rs.ΔⲆⵠΔᐃ][rs.ΔΔⲆ] = Ra(mb(3, Ad(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ⵠᐃ[rs.ΔⲆⵠΔᐃ][rs.ⵠⲆᐃ] = Ra(mb(3, Ad(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ⵠᐃ[rs.ⲆΔΔΔᐃ] = [];
    ⵠᐃ[rs.ⲆΔΔΔᐃ][rs.ΔΔⲆ] = Ra(mb(3, kd(a * 0.67, yq, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ⵠᐃ[rs.ⲆΔΔΔᐃ][rs.ⵠⲆᐃ] = Ra(mb(3, kd(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ⵠᐃ[rs.ΔⲆⲆΔⵠ] = [];
    ⵠᐃ[rs.ΔⲆⲆΔⵠ][rs.ΔΔⲆ] = Ra(mb(Ab, Md(a * 0.67, Pl, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ⵠᐃ[rs.ΔⲆⲆΔⵠ][rs.ⵠⲆᐃ] = Ra(mb(Ui, Md(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ⵠᐃ[rs.ᐃⵠⲆᐃⲆ] = [];
    ⵠᐃ[rs.ᐃⵠⲆᐃⲆ][rs.ΔΔⲆ] = Ra(mb(3, xd(a * kr, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ⵠᐃ[rs.ᐃⵠⲆᐃⲆ][rs.ⵠⲆᐃ] = Ra(mb(3, xd(a * ck, Pl, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠ] = [];
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠ][rs.ΔΔⲆ] = Ra(mb(3, Qd(a * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ⵠᐃ[rs.ᐃⵠⵠᐃⵠ][rs.ⵠⲆᐃ] = Ra(mb(3, Qd(a * 1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ⵠᐃ[rs.ᐃⲆΔⲆΔ] = [];
    ⵠᐃ[rs.ᐃⲆΔⲆΔ][rs.ΔΔⲆ] = Ra(mb(Xg, Tm(a * 0.5, eo, ["#0d1b1c", "#939393", "#5f6061"])));
    ⵠᐃ[rs.ᐃⲆΔⲆΔ][rs.ⵠⲆᐃ] = Ra(mb(wq, Tm(a * 0.5, fa, ["#030d14", "#485e66", "#1f343f"])));
    ⵠᐃ[rs.ᐃᐃⵠⵠᐃ] = [];
    ⵠᐃ[rs.ᐃᐃⵠⵠᐃ][rs.ΔΔⲆ] = Ra(mb(3, Cc(a * 1, eo, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ⵠᐃ[rs.ᐃᐃⵠⵠᐃ][rs.ⵠⲆᐃ] = Ra(mb(3, Cc(a * 1, tk, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ⵠᐃ[rs.ⲆⵠΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⵠΔΔⲆ][rs.ΔΔⲆ] = Ra(mb(Oj, Qd(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ⵠᐃ[rs.ⲆⵠΔΔⲆ][rs.ⵠⲆᐃ] = Ra(mb(Qh, Qd(a * Th, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ⵠᐃ[rs.ⲆΔᐃⵠⵠ] = [];
    ⵠᐃ[rs.ⲆΔᐃⵠⵠ][rs.ΔΔⲆ] = Ra(mb(sd, Qd(a * 1, gn, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ⵠᐃ[rs.ⲆΔᐃⵠⵠ][rs.ⵠⲆᐃ] = Ra(mb(3, Qd(a * Zk, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ⵠᐃ[rs.ᐃᐃΔⵠΔ] = [];
    ⵠᐃ[rs.ᐃᐃΔⵠΔ][rs.ΔΔⲆ] = Ra(mb(R, Qd(vg * a, La, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ⵠᐃ[rs.ᐃᐃΔⵠΔ][rs.ⵠⲆᐃ] = Ra(mb(Xg, Qd(a * Th, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ⵠᐃ[rs.ΔΔⲆⵠΔ] = [];
    ⵠᐃ[rs.ΔΔⲆⵠΔ][rs.ΔΔⲆ] = Ra(pm(a * 0.55, Vl, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ⵠᐃ[rs.ΔΔⲆⵠΔ][rs.ⵠⲆᐃ] = Ra(pm(a * 0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ] = [];
    ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ].push(Ra(pm(a * 0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ].push(Ra(pm(a * 0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ].push(Ra(pm(a * 0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ⵠᐃ[rs.ⵠⵠⲆⲆΔᐃΔ] = [];
    ⵠᐃ[rs.ⵠⵠⲆⲆΔᐃΔ].push(ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ][ho]);
    ⵠᐃ[rs.ⵠⵠⲆⲆΔᐃΔ].push(ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ][0]);
    ⵠᐃ[rs.ⵠⵠⲆⲆΔᐃΔ].push(ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ][Go]);
    ⵠᐃ[rs.ⲆΔⲆⵠᐃ] = [];
    ⵠᐃ[rs.ⲆΔⲆⵠᐃ][rs.ΔΔⲆ] = Ra(Jc(a * 0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ⵠᐃ[rs.ⲆΔⲆⵠᐃ][rs.ⵠⲆᐃ] = Ra(Jc(a * 0.06, Ag, ["#030d14", "#2b6664", "#133d3c"]));
    ⵠᐃ[rs.ᐃⲆⲆΔⵠⲆΔ] = [];
    ⵠᐃ[rs.ᐃⲆⲆΔⵠⲆΔ].push(Ra(Jc(a * 0.08, Ps, ["#141414", "#c4a23a", "#816511"])));
    ⵠᐃ[rs.ᐃⲆⲆΔⵠⲆΔ].push(Ra(Jc(a * 0.08, Qo, ["#141414", "#e2bd4e", "#a38018"])));
    ⵠᐃ[rs.ᐃⲆⲆΔⵠⲆΔ].push(Ra(Jc(a * 0.08, false, ["#141414", "#b0902e", "#634d09"])));
    ⵠᐃ[rs.ΔⵠᐃⵠΔ] = Rt(1.5, [{
      f: mm,
      x: 0,
      y: 0,
      a: 1,
      r: fs,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠᐃ] = [];
    ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠᐃ][rs.ΔΔⲆ] = Ra(Nc(a * 0.8, 0, ["#347f93", "#54a4ba"]));
    ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠᐃ][rs.ⵠⲆᐃ] = Ra(Nc(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
    ⵠᐃ[rs.ⵠⲆᐃΔᐃⵠᐃ] = [];
    ⵠᐃ[rs.ⵠⲆᐃΔᐃⵠᐃ][rs.ΔΔⲆ] = Ra(Ac(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ⵠᐃ[rs.ⵠⲆᐃΔᐃⵠᐃ][rs.ⵠⲆᐃ] = Ra(Ac(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ⵠᐃ[rs.ⲆΔᐃᐃⲆⲆⵠ] = [];
    ⵠᐃ[rs.ⲆΔᐃᐃⲆⲆⵠ][rs.ΔΔⲆ] = Ra(Dc(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ⵠᐃ[rs.ⲆΔᐃᐃⲆⲆⵠ][rs.ⵠⲆᐃ] = Ra(Dc(a * 0.8, 0, ["#83ddd4", "#485e66"]));
    ⵠᐃ[rs.ⲆΔᐃⲆᐃ] = [];
    ⵠᐃ[rs.ⲆΔᐃⲆᐃ][rs.ΔΔⲆ] = Ra(cm(a * 0.8, Mj, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ⵠᐃ[rs.ⲆΔᐃⲆᐃ][rs.ⵠⲆᐃ] = Ra(cm(a * 0.8, p, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ⵠᐃ[rs.ⲆΔᐃΔΔⵠᐃ] = [];
    ⵠᐃ[rs.ⲆΔᐃΔΔⵠᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⵠΔⵠᐃᐃ;
    ⵠᐃ[rs.ⲆΔᐃΔΔⵠᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃΔⲆᐃΔⵠⲆ;
    ⵠᐃ[rs.ᐃⲆⲆᐃΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃⲆⲆᐃΔΔⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃᐃΔⵠᐃᐃⲆ;
    ⵠᐃ[rs.ᐃⲆⲆᐃΔΔⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠΔᐃⲆΔΔΔ;
    ⵠᐃ[rs.ᐃΔᐃΔΔⲆⵠ] = [];
    ⵠᐃ[rs.ᐃΔᐃΔΔⲆⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⵠⵠⵠΔΔⵠ;
    ⵠᐃ[rs.ᐃΔᐃΔΔⲆⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃᐃⲆⵠΔⵠ;
    ⵠᐃ[rs.ᐃΔⵠΔⵠ] = [];
    ⵠᐃ[rs.ᐃΔⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆΔⵠΔᐃᐃ;
    ⵠᐃ[rs.ᐃΔⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⲆΔⲆⲆΔᐃ;
    ⵠᐃ[rs.ΔᐃⲆΔᐃⵠⵠ] = [];
    ⵠᐃ[rs.ΔᐃⲆΔᐃⵠⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃⵠⵠⵠᐃⲆ;
    ⵠᐃ[rs.ΔᐃⲆΔᐃⵠⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃᐃⲆᐃⵠⵠΔ;
    ⵠᐃ[rs.ⲆᐃΔᐃⲆ] = [];
    ⵠᐃ[rs.ⲆᐃΔᐃⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔⵠᐃᐃΔⵠ;
    ⵠᐃ[rs.ⲆᐃΔᐃⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⵠᐃⵠⵠᐃ;
    ⵠᐃ[rs.ᐃᐃⵠⲆΔΔΔ] = [];
    ⵠᐃ[rs.ᐃᐃⵠⲆΔΔΔ][rs.ΔΔⲆ] = Ⲇᐃ.ⵠᐃᐃΔᐃⵠᐃ;
    ⵠᐃ[rs.ᐃᐃⵠⲆΔΔΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔΔᐃᐃⵠΔⵠ;
    ⵠᐃ[rs.ⵠΔⲆⵠΔ] = [];
    ⵠᐃ[rs.ⵠΔⲆⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⵠᐃΔⵠᐃΔ;
    ⵠᐃ[rs.ⵠΔⲆⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠⲆⵠⵠⵠᐃ;
    ⵠᐃ[rs.ⵠΔⲆⲆΔⵠΔ] = [];
    ⵠᐃ[rs.ⵠΔⲆⲆΔⵠΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃΔᐃⲆⵠⲆᐃ;
    ⵠᐃ[rs.ⵠΔⲆⲆΔⵠΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆⵠᐃᐃⵠⲆⵠ;
    ⵠᐃ[rs.ⲆⲆⵠΔⵠ] = [];
    ⵠᐃ[rs.ⲆⲆⵠΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔⲆᐃΔΔᐃⲆ;
    ⵠᐃ[rs.ⲆⲆⵠΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⲆⲆⲆⵠᐃΔ;
    ⵠᐃ[rs.ΔΔⲆⵠᐃΔΔ] = [];
    ⵠᐃ[rs.ΔΔⲆⵠᐃΔΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠᐃⵠⲆⲆⵠ;
    ⵠᐃ[rs.ΔΔⲆⵠᐃΔΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔᐃΔⵠⲆΔⵠ;
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆ][rs.ΔΔⲆ] = Ⲇᐃ.ΔᐃᐃⵠⵠΔᐃ;
    ⵠᐃ[rs.ⵠⵠⵠⵠⲆ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⵠⵠⵠΔⵠⲆᐃ;
    ⵠᐃ[rs.ⲆⵠⵠΔⲆΔⵠ] = [];
    ⵠᐃ[rs.ⲆⵠⵠΔⲆΔⵠ][rs.ΔΔⲆ] = Ⲇᐃ.ΔΔᐃΔᐃⵠΔ;
    ⵠᐃ[rs.ⲆⵠⵠΔⲆΔⵠ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆⵠⵠᐃΔᐃ;
    ⵠᐃ[rs.ᐃᐃᐃΔᐃ] = [];
    ⵠᐃ[rs.ᐃᐃᐃΔᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆⵠᐃᐃⵠⲆ;
    ⵠᐃ[rs.ᐃᐃᐃΔᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ⲆΔⵠΔΔⵠⵠ;
    ⵠᐃ[rs.ⵠᐃⵠΔΔ] = [];
    ⵠᐃ[rs.ⵠᐃⵠΔΔ][rs.ΔΔⲆ] = Ⲇᐃ.ᐃⵠⵠΔⲆⲆⵠ;
    ⵠᐃ[rs.ⵠᐃⵠΔΔ][rs.ⵠⲆᐃ] = Ⲇᐃ.ΔⵠⲆΔⲆᐃΔ;
    ⵠᐃ[rs.ⲆⵠΔᐃⲆⵠᐃ] = Ⲇᐃ.ⲆⵠΔᐃⲆⵠᐃ;
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆ][rs.ΔΔⲆ] = Ra(dm(a * 0.75, yq, ["#0d1b1c", "#4c3a15", fj[uk], "#564021"]));
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆ][rs.ⵠⲆᐃ] = Ra(dm(a * 0.75, yq, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ⵠᐃ[rs.ΔⵠΔᐃΔⲆⵠ] = Ra(Fc(a * 0.3, ["#092813", "#1f773d"], Eu));
    ⵠᐃ[rs.ⲆᐃΔᐃⲆⲆⲆ] = Ra(Fc(a * 0.3, ["#092813", "#1f773d"], 1));
    ⵠᐃ[rs.ᐃΔᐃᐃΔᐃΔ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * nt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      yb(d, b[0]);
      d.translate(0, -Vn * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      yb(d, b[bq]);
      return c;
    }(a * 0.6, ["#092813", "#1f773d"]));
    ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ] = [];
    ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ].push(Ra(_c(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ].push(Ra(_c(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ].push(Ra(_c(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ⵠᐃ[rs.ΔΔΔᐃⲆΔᐃ] = [];
    var c = Ra(_c(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ⵠᐃ[rs.ΔΔΔᐃⲆΔᐃ].push(c);
    ⵠᐃ[rs.ΔΔΔᐃⲆΔᐃ].push(c);
    ⵠᐃ[rs.ΔΔΔᐃⲆΔᐃ].push(c);
    ⵠᐃ[rs.ⵠⲆⵠᐃΔⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⵠᐃΔⵠⲆ].push(Ra(_c(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], kr)));
    ⵠᐃ[rs.ⵠⲆⵠᐃΔⵠⲆ].push(Ra(_c(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ⵠᐃ[rs.ⵠⲆⵠᐃΔⵠⲆ].push(Ra(_c(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], bq)));
    ⵠᐃ[rs.ᐃⲆⵠⵠⲆⲆⲆ] = Ra(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var i = f / 2;
      var a = g / uj;
      d.width = f;
      d.height = g;
      e.translate(i, a);
      e.save();
      for (var j = jg; j < 10; j++) {
        e.rotate(Math.PI / Rh);
        e.save();
        e.translate(b * 65, vl);
        Pb(e, 3, b * 18, va * b);
        yb(e, c[0]);
        e.restore();
      }
      e.restore();
      Tb(e, Yl, jg, b * 40);
      yb(e, wl, c[Hb], b * 6);
      Tb(e, dh, Hb, Aa * b);
      yb(e, c[0]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ⵠᐃ[rs.ᐃⵠᐃᐃⲆⲆⵠ] = Ra(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var h = f / cn;
      var a = g / 2;
      d.width = f;
      d.height = g;
      Tb(e, h, a, b * 40);
      yb(e, undefined, c[0], b * 7);
      Tb(e, h, a, b * 30);
      yb(e, Sn, c[0], b * 7);
      Tb(e, h, a, b * 20);
      yb(e, c[Hb]);
      return d;
    }(a * 0.3, ["#FFFFFF"]));
    ⵠᐃ[rs.ⵠⵠᐃⵠᐃᐃᐃ] = Ra(Fc(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ⵠᐃ[rs.ⵠᐃⲆⵠᐃⵠᐃ] = Ra(mb(Math.PI / wr, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      wb(d, a * -21.5, a * -34, a * 43, a * 68, a * bn);
      d.restore();
      yb(d, b[vl], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      yb(d, b[Et], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      yb(d, b[0], b[Bs], Ll * a);
      return c;
    }(a * 0.2, ["#FFFFFF"])));
    ⵠᐃ[rs.ᐃⵠⲆΔⵠ] = [];
    ⵠᐃ[rs.ᐃⵠⲆΔⵠ][rs.ΔΔⲆ] = Ra(Pc(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ⵠᐃ[rs.ᐃⵠⲆΔⵠ][rs.ⵠⲆᐃ] = Ra(Pc(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ⵠᐃ[rs.ΔⲆΔᐃᐃᐃⵠ] = [];
    ⵠᐃ[rs.ΔⲆΔᐃᐃᐃⵠ].push(Ra(_c(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ⵠᐃ[rs.ΔⲆΔᐃᐃᐃⵠ].push(Ra(_c(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ⵠᐃ[rs.ΔⲆΔᐃᐃᐃⵠ].push(Ra(_c(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ⵠᐃ[rs.Ⲇᐃⵠᐃᐃ] = [];
    ⵠᐃ[rs.Ⲇᐃⵠᐃᐃ][rs.ΔΔⲆ] = Ra(Tc(a * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ⵠᐃ[rs.Ⲇᐃⵠᐃᐃ][rs.ⵠⲆᐃ] = Ra(Tc(a * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ⵠᐃ[rs.ⵠⲆᐃⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⲆᐃⵠⲆ][rs.ΔΔⲆ] = Ra(mc(a * 0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ⵠᐃ[rs.ⵠⲆᐃⵠⲆ][rs.ⵠⲆᐃ] = Ra(mc(a * 0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ⵠᐃ[rs.ⵠΔΔⵠⵠ] = [];
    ⵠᐃ[rs.ⵠΔΔⵠⵠ][rs.ΔΔⲆ] = Ra(nm(a * 0.55, ag, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ⵠᐃ[rs.ⵠΔΔⵠⵠ][rs.ⵠⲆᐃ] = Ra(nm(a * 0.55, xk, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ⵠᐃ[rs.ΔΔⲆⵠⲆ] = [];
    ⵠᐃ[rs.ΔΔⲆⵠⲆ][rs.ΔΔⲆ] = Ra(nm(a * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], Hb));
    ⵠᐃ[rs.ΔΔⲆⵠⲆ][rs.ⵠⲆᐃ] = Ra(nm(a * 0.55, Gh, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], Bs));
    ⵠᐃ[rs.ⲆⲆΔⵠⲆ] = [];
    ⵠᐃ[rs.ⲆⲆΔⵠⲆ][rs.ΔΔⲆ] = Ra(yc(a * 0.2, xk, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ⵠᐃ[rs.ⲆⲆΔⵠⲆ][rs.ⵠⲆᐃ] = Ra(yc(a * 0.2, xk, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ⵠᐃ[rs.ΔⲆⵠΔⲆ] = [];
    ⵠᐃ[rs.ΔⲆⵠΔⲆ][rs.ΔΔⲆ] = Ra(yc(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ⵠᐃ[rs.ΔⲆⵠΔⲆ][rs.ⵠⲆᐃ] = Ra(yc(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ⵠᐃ[rs.ⵠⲆᐃⵠⵠ] = [];
    ⵠᐃ[rs.ⵠⲆᐃⵠⵠ][rs.ΔΔⲆ] = Ra(yc(a * 0.2, Gh, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ⵠᐃ[rs.ⵠⲆᐃⵠⵠ][rs.ⵠⲆᐃ] = Ra(yc(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ⵠᐃ[rs.ⵠΔᐃΔⲆ] = [];
    ⵠᐃ[rs.ⵠΔᐃΔⲆ][rs.ΔΔⲆ] = Ra(zd(a * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ⵠᐃ[rs.ⵠΔᐃΔⲆ][rs.ⵠⲆᐃ] = Ra(zd(a * 0.24, Mj, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ⵠᐃ[rs.ⵠⵠᐃᐃⲆ] = [];
    ⵠᐃ[rs.ⵠⵠᐃᐃⲆ][rs.ΔΔⲆ] = Ra(Zd(a * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ⵠᐃ[rs.ⵠⵠᐃᐃⲆ][rs.ⵠⲆᐃ] = Ra(Zd(a * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ⵠᐃ[rs.ᐃⵠⵠⲆᐃ] = [];
    ⵠᐃ[rs.ᐃⵠⵠⲆᐃ][rs.ΔΔⲆ] = Ra(mb(3, xc(a * 0.9, Pl, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ⵠᐃ[rs.ᐃⵠⵠⲆᐃ][rs.ⵠⲆᐃ] = Ra(mb(3, xc(a * 0.9, xk, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ⵠᐃ[rs.ⲆⲆⲆΔⲆⵠⵠ] = [];
    ⵠᐃ[rs.ⲆⲆⲆΔⲆⵠⵠ][rs.ΔΔⲆ] = Ra(mb(3, xc(a * 1, true, [undefined, Hi, C, "#c8efef", "#c8efef"])));
    ⵠᐃ[rs.ⲆⲆⲆΔⲆⵠⵠ][rs.ⵠⲆᐃ] = Ra(mb(Kb, xc(a * $r, true, [undefined, Pr, dq, "#87d2e6", "#87d2e6"])));
    ⵠᐃ[rs.ᐃⲆⵠⲆⵠᐃΔ] = [];
    ⵠᐃ[rs.ᐃⲆⵠⲆⵠᐃΔ].push(Ra(bc(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ⵠᐃ[rs.ᐃⲆⵠⲆⵠᐃΔ].push(Ra(bc(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], hj)));
    ⵠᐃ[rs.ᐃⲆⵠⲆⵠᐃΔ].push(Ra(bc(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], Zn)));
    ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ] = [];
    ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ].push(Ra(qc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], ka)));
    ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ].push(Ra(qc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], $q)));
    ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ].push(Ra(qc(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], Dj)));
    ⵠᐃ[rs.ⲆⵠΔΔⵠΔᐃ] = [];
    ⵠᐃ[rs.ⲆⵠΔΔⵠΔᐃ].push(Ra(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], dh, og)));
    ⵠᐃ[rs.ⲆⵠΔΔⵠΔᐃ].push(Ra(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Ws, $q)));
    ⵠᐃ[rs.ⲆⵠΔΔⵠΔᐃ].push(Ra(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], bt, 1)));
    ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ] = [];
    ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ].push(Ra(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Et, Xa)));
    ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ].push(Ra(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], El, fs)));
    ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ].push(Ra(Xt(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ⵠᐃ[rs.ΔⲆᐃΔΔ] = [];
    ⵠᐃ[rs.ΔⲆᐃΔΔ][rs.ΔΔⲆ] = Ra(mb(3, pc(a * 0.7, Mj, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ⵠᐃ[rs.ΔⲆᐃΔΔ][rs.ⵠⲆᐃ] = Ra(mb(Oj, pc(a * 0.7, is, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ⵠᐃ[rs.ΔⵠⲆᐃⵠ] = [];
    ⵠᐃ[rs.ΔⵠⲆᐃⵠ][rs.ΔΔⲆ] = Ra(mb(Oj, pc(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ⵠᐃ[rs.ΔⵠⲆᐃⵠ][rs.ⵠⲆᐃ] = Ra(mb(Qq, pc(a * 0.7, zj, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ⵠᐃ[rs.ΔⵠⲆⵠⵠ] = [];
    ⵠᐃ[rs.ΔⵠⲆⵠⵠ][rs.ΔΔⲆ] = Ra(mb(3, pc(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ⵠᐃ[rs.ΔⵠⲆⵠⵠ][rs.ⵠⲆᐃ] = Ra(mb(Kl, pc(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ⵠᐃ[rs.ⲆΔⵠᐃⲆ] = [];
    ⵠᐃ[rs.ⲆΔⵠᐃⲆ][rs.ΔΔⲆ] = Ra(mb(wn, pc(a * 0.7, de, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ⵠᐃ[rs.ⲆΔⵠᐃⲆ][rs.ⵠⲆᐃ] = Ra(mb(3, pc(a * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ⵠᐃ[rs.ⲆΔⲆⲆⵠⲆⲆ] = [];
    ⵠᐃ[rs.ⲆΔⲆⲆⵠⲆⲆ].push(Ra(fm(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ⵠᐃ[rs.ⲆΔⲆⲆⵠⲆⲆ].push(Ra(fm(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ⵠᐃ[rs.ⲆΔⲆⲆⵠⲆⲆ].push(Ra(fm(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ⵠᐃ[rs.ⲆΔⵠⲆⲆⵠⲆ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      yb(d, b[0], b[Go], Eg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      yb(d, b[0], b[Ob], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      yb(d, b[0], b[0], a * 2);
      return c;
    }(a * 1.1, ["#BB0000"]));
    ⵠᐃ[rs.ΔᐃⲆⲆΔᐃⵠ] = Ra(mb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      Tb(d, a * 213.5, a * 256.75, a * 75);
      yb(d, b);
      Tb(d, a * 213.5, a * 175.75, a * 25);
      yb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = ds * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * x;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * ci;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = cr * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = $a * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = Mo * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * sl;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = ok * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(a * 0.9, "#BB0000")));
    ⵠᐃ[rs.ⵠⲆⲆⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⲆⵠⲆ][rs.ΔΔⲆ] = Ra(Yc(a * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ⵠᐃ[rs.ⵠⲆⲆⵠⲆ][rs.ⵠⲆᐃ] = Ra(Yc(a * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", fj[Mo], "#070d16"]));
    ⵠᐃ[rs.ⲆⲆᐃⲆΔ] = [];
    ⵠᐃ[rs.ⲆⲆᐃⲆΔ][rs.ΔΔⲆ] = Ra(am(a * 0.55, Pl, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ⵠᐃ[rs.ⲆⲆᐃⲆΔ][rs.ⵠⲆᐃ] = Ra(am(a * 0.55, Mg, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ⵠᐃ[rs.ΔⵠΔᐃΔ] = [];
    ⵠᐃ[rs.ΔⵠΔᐃΔ][rs.ΔΔⲆ] = Ra(dc(a * 0.6, fa, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ⵠᐃ[rs.ΔⵠΔᐃΔ][rs.ⵠⲆᐃ] = Ra(dc(a * 0.6, Pl, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ⵠᐃ[rs.ⵠⲆⵠⵠᐃ] = [];
    ⵠᐃ[rs.ⵠⲆⵠⵠᐃ][rs.ΔΔⲆ] = Ra(Wc(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ⵠᐃ[rs.ⵠⲆⵠⵠᐃ][rs.ⵠⲆᐃ] = Ra(Wc(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ⵠᐃ[rs.Ⲇᐃᐃᐃⵠ] = [];
    ⵠᐃ[rs.Ⲇᐃᐃᐃⵠ][rs.ΔΔⲆ] = Ra(Ec(a * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ⵠᐃ[rs.Ⲇᐃᐃᐃⵠ][rs.ⵠⲆᐃ] = Ra(Ec(a * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ⵠᐃ[rs.ΔⲆᐃΔᐃ] = [];
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(ic(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(rc(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ΔΔⲆ].push(Ra(sc(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(ic(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(rc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ⵠᐃ[rs.ΔⲆᐃΔᐃ][rs.ⵠⲆᐃ].push(Ra(sc(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ⵠᐃ[rs.ⲆⲆᐃⵠΔ] = [];
    ⵠᐃ[rs.ⲆⲆᐃⵠΔ][rs.ΔΔⲆ] = Ra(hm(a * Ws, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ⵠᐃ[rs.ⲆⲆᐃⵠΔ][rs.ⵠⲆᐃ] = Ra(hm(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ⵠᐃ[rs.ΔΔΔΔᐃⲆⵠ] = [];
    ⵠᐃ[rs.ΔΔΔΔᐃⲆⵠ][rs.ΔΔⲆ] = Ra(Zc(vg * a, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⵠᐃ[rs.ΔΔΔΔᐃⲆⵠ][rs.ⵠⲆᐃ] = Ra(Zc(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ⵠᐃ[rs.ⵠᐃⲆΔΔⲆΔ] = [];
    ⵠᐃ[rs.ⵠᐃⲆΔΔⲆΔ][rs.ΔΔⲆ] = Ra(lm(a * uq, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ⵠᐃ[rs.ⵠᐃⲆΔΔⲆΔ][rs.ⵠⲆᐃ] = Ra(lm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ⵠᐃ[rs.ΔΔⵠΔⲆᐃⵠ] = [];
    ⵠᐃ[rs.ΔΔⵠΔⲆᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔΔⵠΔⲆᐃⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔΔⵠΔⲆᐃⵠ][rs.ΔΔⲆ] = [Ⲇᐃ.ⲆΔⵠᐃⲆΔⲆ, Ⲇᐃ.ⵠΔⲆⲆᐃΔᐃ, Ⲇᐃ.ⲆΔᐃΔᐃⵠⵠ, Ⲇᐃ.ⵠⵠⲆᐃⵠᐃᐃ, Ⲇᐃ.ⵠᐃⲆΔΔΔⲆ, Ⲇᐃ.ᐃᐃⵠΔΔⵠᐃ, Ⲇᐃ.ⵠⲆᐃⲆᐃⵠⵠ, Ⲇᐃ.ⵠΔⵠΔᐃⲆⲆ, Ⲇᐃ.ⵠⲆΔⵠⲆⵠΔ, Ⲇᐃ.ΔᐃΔⵠⵠⲆΔ, Ⲇᐃ.ᐃⲆⵠⵠΔΔⲆ, Ⲇᐃ.ⲆΔᐃΔⲆΔⵠ, Ⲇᐃ.ⵠⵠⵠⵠΔᐃΔ, Ⲇᐃ.ⲆΔᐃⲆΔΔⵠ, Ⲇᐃ.ⵠⵠᐃᐃⲆᐃⵠ, Ⲇᐃ.ⵠⵠⲆᐃⵠⵠᐃ, Ⲇᐃ.ΔΔΔΔΔⲆΔ, Ⲇᐃ.ᐃΔᐃⲆΔⲆⵠ, Ⲇᐃ.ΔΔᐃⲆᐃⲆᐃ, Ⲇᐃ.ᐃΔⲆⵠΔΔᐃ, Ⲇᐃ.ⵠⵠⲆⵠᐃᐃΔ, Ⲇᐃ.ⲆΔᐃⲆⲆⲆΔ, Ⲇᐃ.ΔⵠⲆⲆⲆΔᐃ, Ⲇᐃ.ⲆᐃⲆⵠⵠΔⲆ, Ⲇᐃ.ᐃⵠᐃᐃⵠᐃᐃ, Ⲇᐃ.ΔⵠΔΔΔΔᐃ, Ⲇᐃ.ᐃᐃΔⲆⵠⵠΔ, Ⲇᐃ.ᐃᐃᐃΔⲆⲆⲆ, Ⲇᐃ.ⵠⲆᐃᐃⵠΔⲆ, Ⲇᐃ.ⵠΔⲆⵠᐃⵠᐃ, Ⲇᐃ.ᐃⵠⲆᐃⵠᐃⲆ, Ⲇᐃ.ⲆΔΔΔⲆᐃⵠ, Ⲇᐃ.ⵠⵠΔⵠⵠⵠⵠ, Ⲇᐃ.ΔⵠⵠΔⲆⲆΔ, Ⲇᐃ.ⲆΔⲆⲆⵠⵠΔ, Ⲇᐃ.ⲆⵠᐃΔⵠⵠⵠ, Ⲇᐃ.ᐃⲆⵠΔⲆΔⵠ, Ⲇᐃ.ΔⲆΔⲆⵠᐃΔ, Ⲇᐃ.Δⵠᐃⵠᐃᐃⵠ, Ⲇᐃ.ⲆᐃⲆᐃⲆⵠᐃ, Ⲇᐃ.ⲆⵠΔⲆΔⲆⵠ, Ⲇᐃ.ⵠᐃⵠΔⵠᐃᐃ, Ⲇᐃ.ⲆΔⲆΔⵠⲆⵠ, Ⲇᐃ.ⵠᐃⲆᐃΔᐃⲆ, Ⲇᐃ.ⵠⵠΔⵠΔⲆⲆ, Ⲇᐃ.ⲆᐃⲆΔᐃⲆⵠ, Ⲇᐃ.ΔⵠΔΔᐃᐃᐃ, Ⲇᐃ.ᐃⲆᐃΔΔᐃᐃ, Ⲇᐃ.ⲆᐃΔᐃⲆⲆΔ, Ⲇᐃ.ΔᐃᐃⵠΔΔⲆ, Ⲇᐃ.ΔΔⲆⲆΔᐃⲆ, Ⲇᐃ.ⲆⲆⵠⲆⵠⲆᐃ, Ⲇᐃ.ΔⲆΔᐃΔⵠΔ, Ⲇᐃ.ᐃᐃⵠΔΔᐃΔ, Ⲇᐃ.ΔⵠⲆⲆᐃᐃΔ, Ⲇᐃ.ᐃΔⲆⵠⲆᐃᐃ];
    ⵠᐃ[rs.ΔΔⵠΔⲆᐃⵠ][rs.ⵠⲆᐃ] = [Ⲇᐃ.ᐃⲆⵠⲆᐃᐃⵠ, Ⲇᐃ.ⲆᐃᐃΔΔᐃᐃ, Ⲇᐃ.ΔⲆᐃⵠᐃⲆⲆ, Ⲇᐃ.ⵠⲆᐃⲆᐃᐃΔ, Ⲇᐃ.ᐃᐃΔⲆⵠⲆⲆ, Ⲇᐃ.ⲆⲆΔⵠⲆⲆⵠ, Ⲇᐃ.ⲆⵠᐃⵠⵠΔΔ, Ⲇᐃ.ᐃᐃⵠⲆᐃΔⲆ, Ⲇᐃ.ⵠⲆᐃⵠΔᐃⵠ, Ⲇᐃ.ᐃⲆᐃⵠᐃΔΔ, Ⲇᐃ.ΔΔⲆⲆᐃΔᐃ, Ⲇᐃ.ⲆΔᐃⵠⲆⵠⵠ, Ⲇᐃ.ⵠⵠⵠⵠΔΔΔ, Ⲇᐃ.ⲆΔⵠΔΔΔⵠ, Ⲇᐃ.ΔΔⵠΔΔᐃⲆ, Ⲇᐃ.ΔᐃⲆⵠΔⲆᐃ, Ⲇᐃ.ΔⲆⲆⵠᐃⵠᐃ, Ⲇᐃ.ΔΔⲆΔⲆᐃⲆ, Ⲇᐃ.ᐃⲆᐃᐃΔⲆᐃ, Ⲇᐃ.ΔΔⲆᐃⵠᐃᐃ, Ⲇᐃ.ᐃΔⵠⲆⵠᐃⵠ, Ⲇᐃ.ᐃⲆΔⵠᐃⲆᐃ, Ⲇᐃ.ⲆᐃⵠᐃⵠⲆᐃ, Ⲇᐃ.ᐃΔⲆΔⵠⵠᐃ, Ⲇᐃ.ⲆⵠᐃⵠᐃⵠⲆ, Ⲇᐃ.ᐃΔⲆⵠⵠⵠⵠ, Ⲇᐃ.ᐃⲆΔⲆⵠⲆⵠ, Ⲇᐃ.ⵠⵠΔⵠⵠⲆⵠ, Ⲇᐃ.ᐃⲆᐃᐃΔᐃⵠ, Ⲇᐃ.ΔⲆⵠⲆΔⲆⵠ, Ⲇᐃ.ⵠᐃⲆᐃⵠⲆⵠ, Ⲇᐃ.ΔΔΔⵠⲆⲆⵠ, Ⲇᐃ.ⵠΔⵠⵠΔⵠⵠ, Ⲇᐃ.ᐃᐃⵠΔΔⵠⲆ, Ⲇᐃ.ᐃᐃΔⲆⵠᐃΔ, Ⲇᐃ.ΔᐃΔⲆΔⲆⲆ, Ⲇᐃ.ΔⵠΔⲆᐃⵠⵠ, Ⲇᐃ.ᐃⲆⵠⵠᐃⲆⵠ, Ⲇᐃ.ⵠᐃΔⲆⲆⵠΔ, Ⲇᐃ.ΔᐃΔⲆΔΔΔ, Ⲇᐃ.ΔⵠⲆᐃⲆⲆᐃ, Ⲇᐃ.ⵠΔΔᐃΔⲆᐃ, Ⲇᐃ.ΔᐃⲆΔⵠⲆⲆ, Ⲇᐃ.ΔⲆⵠᐃⲆᐃΔ, Ⲇᐃ.ᐃⵠᐃᐃΔⵠᐃ, Ⲇᐃ.ΔᐃᐃΔⵠⲆⵠ, Ⲇᐃ.ᐃⲆⵠΔⲆᐃΔ, Ⲇᐃ.Δⵠⵠᐃⵠᐃⵠ, Ⲇᐃ.ᐃⲆΔᐃΔΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠᐃⵠⵠ, Ⲇᐃ.ⵠᐃⲆᐃⵠᐃᐃ, Ⲇᐃ.ΔⲆⲆᐃᐃΔΔ, Ⲇᐃ.ᐃᐃⲆΔⵠᐃⵠ, Ⲇᐃ.ΔᐃⲆᐃⲆᐃⵠ, Ⲇᐃ.ⵠΔΔⵠᐃΔⲆ, Ⲇᐃ.ΔᐃᐃⲆᐃᐃΔ];
    ⵠᐃ[rs.ⵠΔΔⲆᐃ] = [];
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ΔΔⲆ].push(Ra(td(a * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ΔΔⲆ].push(Ra(td(a * 0.9, Zg, ["#252B28", "#747471", "#83827e"], kr)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ΔΔⲆ].push(Ra(td(a * 1, ro, ["#252B28", "#747471", "#83827e"], ys)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ΔΔⲆ].push(Ra(td(a * 0.9, false, ["#252B28", "#747471", "#83827e"], ys)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(td(a * 1.1, false, ["#030d14", "#123335", "#183f3f"], vl)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(td(a * 0.9, Ag, ["#030d14", "#123335", "#183f3f"], 1)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(td(a * 1, fk, ["#030d14", "#123335", "#183f3f"], 2)));
    ⵠᐃ[rs.ⵠΔΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(td(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], Ir)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ] = [];
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ΔΔⲆ].push(Ra(td(a * 1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ΔΔⲆ].push(Ra(td(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ΔΔⲆ].push(Ra(td(a * 1, tk, ["#252B28", "#58645F", "#75827D"], Og)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ΔΔⲆ].push(Ra(td(a * 0.9, ia, ["#252B28", "#58645F", "#75827D"], 2)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ⵠⲆᐃ].push(Ra(td(a * 1.1, true, ["#030d14", "#123335", "#183f3f"], Og)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ⵠⲆᐃ].push(Ra(td(a * 0.9, Gh, ["#030d14", "#123335", "#183f3f"], yl)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ⵠⲆᐃ].push(Ra(td(a * og, true, ["#030d14", "#123335", "#183f3f"], Ci)));
    ⵠᐃ[rs.ᐃᐃᐃΔΔ][rs.ⵠⲆᐃ].push(Ra(td(a * 0.9, xk, ["#030d14", "#123335", "#183f3f"], ab)));
    ⵠᐃ[rs.ΔΔΔΔⵠ] = [];
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ΔΔⲆ].push(Ra(od(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ΔΔⲆ].push(Ra(od(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ΔΔⲆ].push(Ra(od(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ⵠⲆᐃ].push(Ra(od(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ⵠⲆᐃ].push(Ra(od(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠᐃ[rs.ΔΔΔΔⵠ][rs.ⵠⲆᐃ].push(Ra(od(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ΔΔⲆ].push(Ra(Iu(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ΔΔⲆ].push(Ra(Iu(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ΔΔⲆ].push(Ra(Iu(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ⵠⲆᐃ].push(Ra(Iu(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ⵠⲆᐃ].push(Ra(Iu(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠᐃ[rs.ᐃⲆᐃⲆᐃ][rs.ⵠⲆᐃ].push(Ra(Iu(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ⵠᐃ[rs.ⲆΔⲆᐃ] = [];
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ΔΔⲆ].push(Ra(Ld(a * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ΔΔⲆ].push(Ra(Ld(a * 1.5, Gh, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ΔΔⲆ].push(Ra(Ld(a * 1.3, Gh, ["#1d051e", "#c27add", "#cd98e5"])));
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(Ld(a * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(Ld(a * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠᐃ[rs.ⲆΔⲆᐃ][rs.ⵠⲆᐃ].push(Ra(Ld(a * 1.3, zj, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ⵠᐃ[rs.ⲆⲆΔᐃᐃᐃᐃ] = [];
    ⵠᐃ[rs.ⲆⲆΔᐃᐃᐃᐃ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆΔᐃᐃᐃᐃ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆⲆΔᐃᐃᐃᐃ][rs.ΔΔⲆ].push(Ra(Xd(a, ["#2d53c4"])));
    ⵠᐃ[rs.ⲆⲆΔᐃᐃᐃᐃ][rs.ⵠⲆᐃ].push(Ra(Xd(a, ["#2d53c4"])));
    ⵠᐃ[rs.ΔᐃᐃⲆⵠⵠΔ] = [];
    ⵠᐃ[rs.ΔᐃᐃⲆⵠⵠΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔᐃᐃⲆⵠⵠΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔᐃᐃⲆⵠⵠΔ][rs.ΔΔⲆ].push(Ra(Xd(a, ["#c4912d"])));
    ⵠᐃ[rs.ΔᐃᐃⲆⵠⵠΔ][rs.ⵠⲆᐃ].push(Ra(Xd(a, ["#c4912d"])));
    ⵠᐃ[rs.ΔᐃΔⵠᐃⲆΔ] = [];
    ⵠᐃ[rs.ΔᐃΔⵠᐃⲆΔ][rs.ΔΔⲆ] = Ra(Od(a, ["#414040"]));
    ⵠᐃ[rs.ΔᐃΔⵠᐃⲆΔ][rs.ⵠⲆᐃ] = Ra(Od(a, ["#153635"]));
    ⵠᐃ[rs.ⵠⲆΔⵠΔⵠⲆ] = [];
    ⵠᐃ[rs.ⵠⲆΔⵠΔⵠⲆ][rs.ΔΔⲆ] = Ra(cd(bq * a, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠᐃ[rs.ⵠⲆΔⵠΔⵠⲆ][rs.ⵠⲆᐃ] = Ra(cd(a * Dj, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆᐃ][rs.ΔΔⲆ] = Ra(Bd(a * bh, Zg, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆᐃ][rs.ⵠⲆᐃ] = Ra(Bd(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠᐃ[rs.ⲆⲆᐃᐃᐃΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆᐃᐃᐃΔⲆ][rs.ΔΔⲆ] = Ra(Bd(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠᐃ[rs.ⲆⲆᐃᐃᐃΔⲆ][rs.ⵠⲆᐃ] = Ra(Bd(ck * a, Ps, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠᐃ[rs.ⵠⲆΔᐃⵠᐃⵠ] = [];
    ⵠᐃ[rs.ⵠⲆΔᐃⵠᐃⵠ][rs.ΔΔⲆ] = Ra(Id(uq * a, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠᐃ[rs.ⵠⲆΔᐃⵠᐃⵠ][rs.ⵠⲆᐃ] = Ra(Id(a * 1, Ag, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃΔⲆ][rs.ΔΔⲆ] = Ra(yd(Ws * a, Vl, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ⵠᐃ[rs.ⲆⲆᐃⵠᐃΔⲆ][rs.ⵠⲆᐃ] = Ra(yd(a * 1, ke, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ⵠᐃ[rs.ΔᐃⵠⲆⵠ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆⵠ][rs.ΔΔⲆ] = Ra(Bc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ⵠᐃ[rs.ΔᐃⵠⲆⵠ][rs.ⵠⲆᐃ] = Ra(Bc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ⵠᐃ[rs.ⵠⲆΔⵠᐃ] = [];
    ⵠᐃ[rs.ⵠⲆΔⵠᐃ][rs.ΔΔⲆ] = Ra(Rc(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ⵠᐃ[rs.ⵠⲆΔⵠᐃ][rs.ⵠⲆᐃ] = Ra(Rc(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ⵠᐃ[rs.ᐃⵠΔΔᐃⲆⵠ] = [];
    ⵠᐃ[rs.ⵠΔⲆⲆΔ] = [];
    ⵠᐃ[rs.ⲆᐃᐃⵠΔⲆⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⵠⲆⵠ] = [];
    for (b = dt; b < 2; b++) {
      ⵠᐃ[rs.ᐃⵠΔΔᐃⲆⵠ][b] = document.createElement("canvas");
      ⵠᐃ[rs.ᐃⵠΔΔᐃⲆⵠ][b].width = 193;
      ⵠᐃ[rs.ᐃⵠΔΔᐃⲆⵠ][b].height = 193;
      ⵠᐃ[rs.ⵠΔⲆⲆΔ][b] = ⵠᐃ[rs.ᐃⵠΔΔᐃⲆⵠ][b].getContext("2d");
      ⵠᐃ[rs.ⲆᐃᐃⵠΔⲆⲆ][b] = document.createElement("canvas");
      ⵠᐃ[rs.ⲆᐃᐃⵠΔⲆⲆ][b].width = 600;
      ⵠᐃ[rs.ⲆᐃᐃⵠΔⲆⲆ][b].height = 600;
      ⵠᐃ[rs.ⲆᐃⵠⲆⵠ][b] = ⵠᐃ[rs.ⲆᐃᐃⵠΔⲆⲆ][b].getContext("2d");
    }
    ⵠᐃ[rs.ⲆᐃⲆⵠΔΔᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⲆⵠΔΔᐃ][rs.ΔΔⲆ] = Ra(Od(a, ["#c8e0de"]));
    ⵠᐃ[rs.ⲆᐃⲆⵠΔΔᐃ][rs.ⵠⲆᐃ] = Ra(Od(a, ["#147071"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆⵠⵠΔ] = [];
    ⵠᐃ[rs.ⵠᐃⲆⲆⵠⵠΔ][rs.ΔΔⲆ] = Ra(Od(a, ["#231912"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆⵠⵠΔ][rs.ⵠⲆᐃ] = Ra(Od(a, ["#021719"]));
    ⵠᐃ[rs.ⲆⵠΔⲆⲆⲆΔ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      wb(d, a * -7, -Al * a, a * 14, a * 37, Xe * a);
      d.restore();
      yb(d, b[vl]);
      d.save();
      d.translate(a * 131, a * 94);
      wb(d, a * -84, a * -67, a * 168, a * 134, a * Ns);
      d.restore();
      yb(d, b[dt], b[0], Di * a);
      d.save();
      d.translate(a * 223, a * 94.5);
      wb(d, -Yo * a, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      yb(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      wb(d, a * -22.5, a * -6.5, a * 45, a * Hg, a * Lg);
      d.restore();
      yb(d, b[0]);
      return c;
    }(a * 0.5, ["#BB0000"]));
    ⵠᐃ[rs.ᐃⲆⲆⲆⵠΔᐃ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(s * a, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, s * a, a * 93, Kg * a, a * 76);
      d.bezierCurveTo(Gl * a, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, Ug * a, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * Ul);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, sg * a, a * 75, a * 11, a * 76, a * kh);
      d.bezierCurveTo(a * 81, a * Gq, a * 84, jh * a, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * dk, Db * a, a * 105, a * Sl);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, ao * a, a * 99, a * Sr, a * 93);
      d.closePath();
      yb(d, b, b, Ol * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * jr, a * 51, no * a, a * 33);
      d.bezierCurveTo(a * 19, a * Ge, a * 21, a * et, a * 32, a * jr);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      yb(d, b, b, a * va);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      yb(d, b, b, a * 4);
      return c;
    }(a * 0.9, "#BB0000"));
    ⵠᐃ[rs.ⵠⲆᐃⲆⲆᐃᐃ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(yn * a, a * 50);
      d.bezierCurveTo(a * 15, a * $h, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * Xj, a * 127, _g * a, a * 87, a * 8, a * 50);
      d.closePath();
      yb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Qk * a, a * 57);
      d.bezierCurveTo(a * Xj, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      yb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, ds * a, a * 146, a * 52, a * 133, a * 58);
      yb(d, b, b, a * xs);
      return c;
    }(a * 0.9, "#BB0000"));
    ⵠᐃ[rs.ⵠΔⲆⲆⵠⵠⲆ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      yb(d, b[jg]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      yb(d, b[Go]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, $g * a);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      yb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      yb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      yb(d, b[Hb]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      yb(d, b[vl]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      yb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      yb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      yb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      yb(d, b[lt]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      yb(d, b[0]);
      return c;
    }(a * 1, ["#BB0000"]));
    ⵠᐃ[rs.ⵠⵠⵠᐃᐃⵠⲆ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      yb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      yb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      yb(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ⵠᐃ[rs.ⲆΔⵠⵠⲆΔⵠ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      yb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      yb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      yb(d, b);
      return c;
    }(a * 0.8, "#BB0000"));
    ⵠᐃ[rs.ᐃⲆᐃᐃᐃⵠᐃ] = Ra(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var h = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = Ng;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      yb(e, c, c, h);
      return d;
    }(a * 0.9, "#BB0000"));
    ⵠᐃ[rs.ΔⲆⵠⲆ] = Ra(db(a * 0.6, "#BB0000"));
    ⵠᐃ[rs.ⵠΔᐃⲆⲆ] = Ra(db(a * 0.6, "#1CE7E0"));
    ⵠᐃ[rs.ᐃᐃᐃΔᐃᐃΔ] = Ra(db(a * 0.6, "#DBE71C"));
    ⵠᐃ[rs.ΔⵠⲆᐃᐃΔⲆ] = Ra(db(a * 0.6, "#00BB00"));
    ⵠᐃ[rs.ⲆⲆΔΔⵠⵠΔ] = [];
    ⵠᐃ[rs.ⲆⲆΔΔⵠⵠΔ][rs.ΔΔⲆ] = Ra(Od(a, ["#dac291"]));
    ⵠᐃ[rs.ⲆⲆΔΔⵠⵠΔ][rs.ⵠⲆᐃ] = Ra(Od(a, ["#0D423D"]));
    ⵠᐃ[rs.ⵠⵠᐃⲆⵠΔΔ] = [];
    ⵠᐃ[rs.ⵠⵠᐃⲆⵠΔΔ][rs.ΔΔⲆ] = Ra(Od(a, ["#dac291"]));
    ⵠᐃ[rs.ⵠⵠᐃⲆⵠΔΔ][rs.ⵠⲆᐃ] = Ra(Od(a, ["#0D423D"]));
    ⵠᐃ[rs.ᐃⵠΔᐃΔᐃⲆ] = [];
    ⵠᐃ[rs.ᐃⵠΔᐃΔᐃⲆ][rs.ΔΔⲆ] = Ra(vm(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ⵠᐃ[rs.ᐃⵠΔᐃΔᐃⲆ][rs.ⵠⲆᐃ] = Ra(vm(a * 0.3, qs, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ⵠᐃ[rs.ᐃⵠΔⵠⲆᐃᐃ] = [];
    ⵠᐃ[rs.ᐃⵠΔⵠⲆᐃᐃ][rs.ΔΔⲆ] = Ra(vm(a * 0.3, eo, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ⵠᐃ[rs.ᐃⵠΔⵠⲆᐃᐃ][rs.ⵠⲆᐃ] = Ra(vm(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ⵠᐃ[rs.ⵠⵠⲆΔⲆ] = [Ra(Vc(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⵠᐃ[rs.ᐃᐃⵠΔⵠ] = [Ra(Vc(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(oc(a * 1, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(Gd(a * Ws, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(Vd($r * a, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(ac(a * 1, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(qd(a * 1, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(Kd(Th * a, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ΔΔⲆ].push(Ra(Rd(a * 1, ["#0B6A84"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(oc(a * 1, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(Gd(a * ck, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(Vd(a * 1, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(ac(a * uq, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(qd(a * y, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(Kd(a * 1, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆⵠⵠⵠ][rs.ⵠⲆᐃ].push(Ra(Rd(a * 1, ["#09373F"])));
    ⵠᐃ[rs.ΔⲆΔᐃΔ] = [];
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.7, ["#FBEFBC"], fs)));
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.9, ["#FBEFBC"], Zk)));
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.7, ["#FBEFBC"], rb)));
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.7, ["#0F4C48"], 0)));
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.9, ["#0F4C48"], 1)));
    ⵠᐃ[rs.ΔⲆΔᐃΔ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.7, ["#0F4C48"], 2)));
    ⵠᐃ[rs.ΔΔⵠᐃⲆ] = [];
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.8, ["#A9D6D3"], Hb)));
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ΔΔⲆ].push(Ra(Hd(a * rb, ["#A9D6D3"], Ng)));
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.8, ["#A9D6D3"], Ir)));
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.8, ["#115E60"], Bs)));
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ⵠⲆᐃ].push(Ra(Hd(Xj * a, ["#115E60"], 1)));
    ⵠᐃ[rs.ΔΔⵠᐃⲆ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.8, ["#115E60"], 2)));
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ] = [];
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.9, ["#2A8B9B"], 0)));
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ΔΔⲆ].push(Ra(Hd(a * 2.1, ["#2A8B9B"], bq)));
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ΔΔⲆ].push(Ra(Hd(a * 1.9, ["#2A8B9B"], 2)));
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.9, ["#0F464C"], hk)));
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 2.1, ["#0F464C"], Ng)));
    ⵠᐃ[rs.ⲆᐃⲆᐃΔ][rs.ⵠⲆᐃ].push(Ra(Hd(a * 1.9, ["#0F464C"], 2)));
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ] = [];
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ΔΔⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ⵠⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ΔΔⲆ].push(Ra(ld(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ΔΔⲆ].push(Ra(ld(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ΔΔⲆ].push(Ra(ld(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ⵠⲆᐃ].push(Ra(ld(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ⵠⲆᐃ].push(Ra(ld(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠᐃ[rs.ⵠⲆⵠᐃⵠ][rs.ⵠⲆᐃ].push(Ra(ld(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ⵠᐃ[rs.ⵠΔⲆΔⵠ] = [];
    ⵠᐃ[rs.ⵠΔⲆΔⵠ][rs.ΔΔⲆ] = Ra(Uc(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ⵠᐃ[rs.ⵠΔⲆΔⵠ][rs.ⵠⲆᐃ] = Ra(Uc(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ⵠᐃ[rs.ᐃⵠΔⵠⵠⲆⵠ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      yb(d, b[dt], b[Xa], a * al);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ⵠᐃ[rs.ΔΔΔⲆΔ] = [];
    ⵠᐃ[rs.ΔΔΔⲆΔ][rs.ΔΔⲆ] = Ra(Gc(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ⵠᐃ[rs.ΔΔΔⲆΔ][rs.ⵠⲆᐃ] = Ra(Gc(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ⵠᐃ[rs.ⲆⲆᐃΔⲆⲆᐃ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      yb(d, b[0], b[Xa], a * tu);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      yb(d, b[0], b[Eu], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      yb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      yb(d, b[Xa], b[Go], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      yb(d, b[Ob], b[Go], a * Qg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      yb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      yb(d, b[Yl], b[0], Qg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      yb(d, b[ks], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      yb(d, b[vl], b[hk], a * Yq);
      return c;
    }(a * 0.8, ["#B6222A"]));
    ⵠᐃ[rs.ⵠΔΔⲆΔᐃⲆ] = [];
    ⵠᐃ[rs.ⵠΔΔⲆΔᐃⲆ][rs.ΔΔⲆ] = Ra(_b(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ⵠᐃ[rs.ⵠΔΔⲆΔᐃⲆ][rs.ⵠⲆᐃ] = Ra(_b(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], lt));
    ⵠᐃ[rs.ⵠⵠⵠⵠⵠᐃΔ] = [];
    ⵠᐃ[rs.ⵠⵠⵠⵠⵠᐃΔ][rs.ΔΔⲆ] = Ra(_b(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], Th));
    ⵠᐃ[rs.ⵠⵠⵠⵠⵠᐃΔ][rs.ⵠⲆᐃ] = Ra(_b(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ⵠᐃ[rs.ⵠΔⵠⵠΔⲆⲆ] = [];
    ⵠᐃ[rs.ⵠΔⵠⵠΔⲆⲆ][rs.ΔΔⲆ] = Ra(_b(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ⵠᐃ[rs.ⵠΔⵠⵠΔⲆⲆ][rs.ⵠⲆᐃ] = Ra(_b(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], ho));
    ⵠᐃ[rs.ⵠⲆΔΔΔⵠΔ] = Ra(Gb(a * 0.4, ["#B6222A"]));
    ⵠᐃ[rs.ⵠΔΔΔⲆⲆΔ] = Ra(Gb(a * 0.4, ["#B6222A"]));
    ⵠᐃ[rs.ᐃΔᐃⵠᐃⵠᐃⲆΔ] = Ra(Gb(a * 0.4, ["#B6222A"]));
    ⵠᐃ[rs.ᐃⲆⵠΔⵠ] = Ra(Cd(a * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ⵠᐃ[rs.ⵠΔᐃⵠⲆ] = Ra(qu(a * 0.35, eo, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ⵠᐃ[rs.ᐃΔⲆⵠΔⲆⵠ] = [];
    ⵠᐃ[rs.ᐃΔⲆⵠΔⲆⵠ][rs.ΔΔⲆ] = Ra(eu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ⵠᐃ[rs.ᐃΔⲆⵠΔⲆⵠ][rs.ⵠⲆᐃ] = Ra(eu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], bh));
    ⵠᐃ[rs.ᐃᐃⲆⲆᐃ] = [];
    ⵠᐃ[rs.ᐃᐃⲆⲆᐃ][rs.ΔΔⲆ] = Ra(eu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ⵠᐃ[rs.ᐃᐃⲆⲆᐃ][rs.ⵠⲆᐃ] = Ra(eu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ⵠᐃ[rs.ⵠΔⲆΔⵠⵠᐃ] = [];
    ⵠᐃ[rs.ⵠΔⲆΔⵠⵠᐃ][rs.ΔΔⲆ] = Ra(mu(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⵠᐃ[rs.ⵠΔⲆΔⵠⵠᐃ][rs.ⵠⲆᐃ] = Ra(mu(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⵠᐃ[rs.ΔᐃⵠⲆⲆⵠⵠ] = [];
    ⵠᐃ[rs.ΔᐃⵠⲆⲆⵠⵠ][rs.ΔΔⲆ] = Ra(su(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ⵠᐃ[rs.ΔᐃⵠⲆⲆⵠⵠ][rs.ⵠⲆᐃ] = Ra(su(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ⵠᐃ[rs.ᐃᐃⲆⵠΔΔᐃ] = [];
    ⵠᐃ[rs.ᐃᐃⲆⵠΔΔᐃ][rs.ΔΔⲆ] = Ra(mu(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⵠᐃ[rs.ᐃᐃⲆⵠΔΔᐃ][rs.ⵠⲆᐃ] = Ra(mu(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⵠᐃ[rs.ⵠⲆⵠⲆᐃᐃⲆ] = [];
    ⵠᐃ[rs.ⵠⲆⵠⲆᐃᐃⲆ][rs.ΔΔⲆ] = Ra(su(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ⵠᐃ[rs.ⵠⲆⵠⲆᐃᐃⲆ][rs.ⵠⲆᐃ] = Ra(su(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ⵠᐃ[rs.ⲆΔⲆⵠᐃᐃⵠ] = Ra(au(a * 0.35, ["#B6222A"]));
    ⵠᐃ[rs.ⲆⵠⲆⵠⲆⵠΔ] = Ra(mu(a * 0.35, 0, [undefined, "#B6222A"]));
    ⵠᐃ[rs.ΔⲆⵠΔⲆⵠⵠ] = Ra(su(a * 0.35, 0, [Hi, "#B6222A"]));
    ⵠᐃ[rs.ⵠⵠⲆΔΔⵠⲆ] = Ra(au(a * 0.35, ["#22E066"]));
    ⵠᐃ[rs.ΔⵠⲆᐃⲆⲆⲆ] = Ra(mu(a * 0.35, 0, [pa, "#22E066"]));
    ⵠᐃ[rs.ᐃⲆᐃⵠⵠⲆᐃ] = Ra(su(a * 0.35, 0, [fn, "#22E066"]));
    ⵠᐃ[rs.ᐃⲆⲆΔⲆ] = [];
    ⵠᐃ[rs.ᐃⲆⲆΔⲆ][rs.ΔΔⲆ] = Ra(id(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ⵠᐃ[rs.ᐃⲆⲆΔⲆ][rs.ⵠⲆᐃ] = Ra(id(a * 0.3, is, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ⵠᐃ[rs.ᐃⵠⲆⲆⲆ] = [];
    ⵠᐃ[rs.ᐃⵠⲆⲆⲆ][rs.ΔΔⲆ] = Ra(Ju(a * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ⵠᐃ[rs.ᐃⵠⲆⲆⲆ][rs.ⵠⲆᐃ] = Ra(Ju(a * 0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ⵠᐃ[rs.ⲆⵠΔᐃΔ] = [];
    ⵠᐃ[rs.ⲆⵠΔᐃΔ][rs.ΔΔⲆ] = Ra(gm(a * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ⵠᐃ[rs.ⲆⵠΔᐃΔ][rs.ⵠⲆᐃ] = Ra(gm(a * 0.63, de, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⵠᐃ[rs.ⲆⲆΔΔΔ] = [];
    ⵠᐃ[rs.ⲆⲆΔΔΔ][rs.ΔΔⲆ] = Ra(cc(a, xk, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ⵠᐃ[rs.ⲆⲆΔΔΔ][rs.ⵠⲆᐃ] = Ra(cc(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ⵠᐃ[rs.ᐃΔᐃᐃᐃ] = [];
    ⵠᐃ[rs.ᐃΔᐃᐃᐃ][rs.ΔΔⲆ] = Ⲇᐃ.ⲆⲆΔᐃᐃⵠᐃ;
    ⵠᐃ[rs.ᐃΔᐃᐃᐃ][rs.ⵠⲆᐃ] = Ⲇᐃ.ᐃⲆⲆⲆΔⲆΔ;
    ⵠᐃ[rs.ⵠΔᐃΔᐃ] = [];
    ⵠᐃ[rs.ⵠΔᐃΔᐃ][rs.ΔΔⲆ] = Ra(xb(a * 0.59, 0, ["#0d1b1c", "#44301b", fj[wq], "#523e26"]));
    ⵠᐃ[rs.ⵠΔᐃΔᐃ][rs.ⵠⲆᐃ] = Ra(xb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ] = [ⵠᐃ[rs.ⵠΔᐃΔᐃ]];
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][bh] = [];
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][2] = [];
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][$q][rs.ΔΔⲆ] = Ra(Bb(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][ck][rs.ⵠⲆᐃ] = Ra(Bb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][2][rs.ΔΔⲆ] = Ra(Mb(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][2][rs.ⵠⲆᐃ] = Ra(Mb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃ] = [];
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃ][rs.ΔΔⲆ] = Ra(mb(3 - Math.PI / 2, wc(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ⵠᐃ[rs.ⵠⲆⲆⲆᐃ][rs.ⵠⲆᐃ] = Ra(mb(yr - Math.PI / dj, wc(a * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆΔⲆ] = [];
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆΔⲆ][rs.ΔΔⲆ] = Ra(Kt(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ⵠᐃ[rs.ⲆⲆⲆⲆⲆΔⲆ][rs.ⵠⲆᐃ] = Ra(Kt(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ⵠᐃ[rs.ᐃᐃᐃⵠⵠⵠⲆ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      wb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * dt);
      d.restore();
      yb(d, b[Qa], b[1], mk * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      wb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * Ar);
      d.restore();
      yb(d, b[3], b[Th], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      wb(d, a * -115.5, a * -20, a * 231, a * 40, jl * a);
      d.restore();
      yb(d, b[wq], b[1], a * pj);
      d.save();
      d.translate(a * 298.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      yb(d, b[R], b[1], zl * a);
      d.save();
      d.translate(a * 108.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      yb(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      wb(d, a * -92, a * -9.5, a * 184, a * 19, a * ek);
      d.restore();
      yb(d, b[3], b[Jh], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      wb(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      yb(d, b[Ui], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      yb(d, Lh, b[1], zl * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      yb(d, oh, b[og], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      yb(d, pa, b[$q], Hs * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      yb(d, Bj, b[vg], a * 12);
      return c;
    }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ⵠᐃ[rs.ⵠⲆⲆⲆⵠᐃⵠ] = Ra(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      wb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      yb(d, b[0], b[Hb], a * mk);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      wb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * Bs);
      d.restore();
      yb(d, b[lt], b[gj], a * Hs);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      wb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      yb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      wb(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      yb(d, b[Xa], b[0], mk * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      wb(d, a * -115.5, a * -20.5, a * 231, a * 41, Xn * a);
      d.restore();
      yb(d, b[Yl], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      wb(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      yb(d, b[0], b[0], pj * a);
      d.save();
      d.translate(a * 298.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, ek * a);
      d.restore();
      yb(d, b[0], b[ka], Na * a);
      d.save();
      d.translate(a * 108.5, a * 210);
      wb(d, a * -20.5, a * -109, a * 41, a * 218, Qg * a);
      d.restore();
      yb(d, b[0], b[dh], a * 12);
      return c;
    }(a * 0.3, ["#BB0000"]));
    ⵠᐃ[rs.ᐃΔΔᐃᐃⲆⵠ] = Rt(1, [{
      f: jc,
      x: lt,
      y: ka,
      a: 1,
      r: dt,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ⵠᐃ[rs.ΔⵠⲆⲆⲆ] = Rt(1.5, [{
      f: mm,
      x: 0,
      y: 0,
      a: uq,
      r: ka,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠΔ] = wm(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
    ⵠᐃ[rs.ᐃᐃᐃᐃᐃⵠΔ] = wm(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], or);
    ⵠᐃ[rs.ⲆᐃⵠⲆⵠᐃⲆ] = wm(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ⵠᐃ[rs.ᐃΔΔⵠΔⲆⲆ] = wm(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], sd);
    if (ᐃⵠⵠⵠⲆⲆⲆ) {
      ⵠᐃ[rs.ⲆΔⵠᐃΔⵠⲆ] = Ra(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = te * b;
        c.width = e;
        c.height = f;
        d.beginPath();
        wb(d, dh, Hb, e, f - g, g);
        d.globalAlpha = 0.8;
        yb(d, "#1D6055");
        d.globalAlpha = 1;
        var h = uu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / uj, b * 5);
        return c;
      }(a));
    } else {
      ⵠᐃ[rs.ⲆΔⵠᐃΔⵠⲆ] = Ra(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + Aa;
        d.beginPath();
        wb(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        yb(d, "#1D6055");
        d.globalAlpha = 1;
        var h = uu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / uj, b * Lj);
        return c;
      }(a));
    }
    if (ᐃⵠⵠⵠⲆⲆⲆ) {
      ⵠᐃ[rs.Δⵠⵠᐃᐃⵠᐃ] = Ra(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var j = Ph * b;
        var a = b * 35;
        var k = b * 65;
        var h = b * 2;
        var l = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        wb(d, k, 0, f, j, h);
        yb(d, null, "#69A148", l);
        d.translate(0, a);
        wb(d, k, ka, f, j, h);
        yb(d, null, "#AF352A", l);
        d.translate(0, a);
        wb(d, k, 0, f, j, h);
        yb(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ⵠᐃ[rs.Δⵠⵠᐃᐃⵠᐃ] = Ra(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var k = c * Ns;
        var a = c * 240;
        var m = c * 35;
        var h = c * 1;
        var l = c * 4;
        var g = Yr * c;
        d.width = f;
        d.height = j;
        e.translate(dh, c * cs);
        wb(e, m, h, i, k, l);
        yb(e, null, "#69A148", g);
        var n = ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠΔ];
        e.drawImage(n, 17, -8);
        e.translate(a, 0);
        wb(e, m, h, i, k, l);
        yb(e, null, "#AF352A", g);
        n = ⵠᐃ[rs.ⲆᐃⵠⲆⵠᐃⲆ];
        e.drawImage(n, Cn, -Zl);
        e.translate(a, ou);
        wb(e, m, h, i, k, l);
        yb(e, null, "#669BB1", g);
        n = ⵠᐃ[rs.ᐃᐃᐃᐃᐃⵠΔ];
        e.drawImage(n, Mo, -xh);
        e.translate(a, 0);
        wb(e, m, h, i, k, l);
        yb(e, null, "#074A87", g);
        n = ⵠᐃ[rs.ᐃΔΔⵠΔⲆⲆ];
        e.drawImage(n, 17, -8);
        return d;
      }(a));
    }
    if (ᐃⵠⵠⵠⲆⲆⲆ) {
      ⵠᐃ[rs.ΔⵠⵠᐃⲆᐃⲆ] = Ra(Lc(0.75));
    } else {
      ⵠᐃ[rs.ΔⵠⵠᐃⲆᐃⲆ] = Ra(Lc(a));
    }
    ⵠᐃ[rs.ΔⵠⲆΔᐃᐃΔ] = Ra(dc(a * 0.16, Pl, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ⵠᐃ[rs.ΔⵠᐃᐃΔᐃΔ] = Ra(mb(5.8, fu(a * 0.15, fa, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ⵠᐃ[rs.ΔⲆ] = [];
    ⵠᐃ[rs.ⲆᐃⲆΔᐃⵠⲆ] = [];
    for (b = Ob; fw.ⵠΔΔᐃⲆⲆΔ + Ci > b; b++) {
      ⵠᐃ[rs.ⲆᐃⲆΔᐃⵠⲆ][b] = uu(a, "" + (b + 1), 12, "#FFF");
    }
    ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ] = [];
    ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ].push(Ra(kc(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ].push(Ra(kc(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], vg)));
    ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ].push(Ra(kc(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], og)));
    ⵠᐃ[rs.ᐃⲆᐃⵠⵠᐃᐃ] = [];
    ⵠᐃ[rs.ᐃⲆᐃⵠⵠᐃᐃ].push(Ra(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, Yo * a);
      c.translate(0, Ns * a);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      yb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      yb(c, "#392C16", "#5E3E1A", Ys * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      yb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      yb(c, "#3A2A0D");
      Tb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      yb(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      yb(c, Hi, "#5E3E1A", a * Rn);
      c.translate(Hb, Nk * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      yb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      yb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      yb(c, undefined, "#c7a726", a * Xs);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      yb(c, uh, "#c7a726", a * Gq);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      yb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      yb(c, oh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      yb(c, uh, "#c7a726", zl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      yb(c, eg, "#c7a726", a * et);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      yb(c, gg, "#c7a726", pj * a);
      c.translate(0, -kq * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      yb(c, Lh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      yb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      yb(c, gg, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      yb(c, Bj, "#EDCE4F", a * Gq);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      yb(c, Kk, "#EDCE4F", a * ea);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      yb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      yb(c, undefined, "#EDCE4F", zs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      yb(c, Lh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      yb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      yb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      yb(c, "#ECBE35", "#EDCE4F", Cr * a);
      Tb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      yb(c, "#392C16", "#5E3E1A", a * Hh);
      return b;
    }(a * 0.22)));
    ⵠᐃ[rs.ᐃⲆᐃⵠⵠᐃᐃ].push(Ra(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * Yo);
      c.translate(0, a * 20);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      yb(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      Tb(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      yb(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      yb(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      yb(c, "#071A1B");
      Tb(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      yb(c, undefined, "#5E3E1A", a * Ks);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      yb(c, undefined, "#5E3E1A", a * 12);
      c.translate(Yl, ar * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      yb(c, eg, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      yb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      yb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      yb(c, undefined, "#281C08", zl * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      yb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      yb(c, Eh, "#281C08", bg * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      yb(c, Eh, "#281C08", a * Xs);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      yb(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      yb(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      yb(c, Hi, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      yb(c, dq, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      yb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      yb(c, undefined, "#5E3C10", Hs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      yb(c, undefined, "#5E3C10", pj * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      yb(c, undefined, "#5E3C10", Na * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      yb(c, Sn, "#5E3C10", ea * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      yb(c, Pr, "#5E3C10", a * Hn);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      yb(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      yb(c, "#704618", "#5D3D1A", te * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      yb(c, "#E1DDD5", "#EAE7E4", nb * a);
      Tb(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      yb(c, "#392C16", "#5E3E1A", cl * a);
      return b;
    }(a * 0.22)));
    ⵠᐃ[rs.ⵠⲆⵠⲆⲆΔⵠ] = Ra(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      Tb(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      yb(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      yb(c, "#C09D6F", "#A37943", Hh * a);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      wb(c, a * -5.5, a * -37.5, a * el, a * 75, a * 10);
      c.restore();
      yb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      wb(c, a * -ek, a * -5.5, a * Lg, a * dl, a * El);
      c.restore();
      yb(c, "#C09D6F");
      Tb(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      yb(c, "#C09D6F");
      return b;
    }(a * 0.22));
    ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ] = [];
    ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ].push(Ra(Wb(a * 1.5, ["#795026", "#654320", "#eda80d"], fs)));
    ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ].push(Ra(Wb(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], bq)));
    ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ].push(Ra(Wb(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ⵠᐃ[rs.ΔⵠⲆΔⵠⲆΔ] = Ⲇᐃ.ΔⵠⲆΔⵠⲆΔ;
    ⵠᐃ[rs.ΔⵠⲆΔⵠΔⵠ] = Ⲇᐃ.ΔⵠⲆΔⵠΔⵠ;
    ⵠᐃ[rs.ⲆΔⲆⵠΔΔⵠ] = Ⲇᐃ.ⲆΔⲆⵠΔΔⵠ;
    ⵠᐃ[rs.ᐃΔᐃᐃᐃΔⲆ] = Ⲇᐃ.ᐃΔᐃᐃᐃΔⲆ;
    ⵠᐃ[rs.ⵠᐃⵠⵠⵠⵠΔ] = uu(a, "Show spectators", 25, "#FFF", gg, undefined, "#000", wr, 220);
    ⵠᐃ[rs.ᐃΔⲆΔᐃᐃᐃ] = uu(a, "Reconnecting...", 30, "#FFF");
    console.log(eg, gg);
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, u * a, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    yb(e, c[dh], c[Ng], ok * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    yb(e, c[1]);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 496;
    d.height = a * 520;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(hk, ek * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.000030517578125, a * 256.67613983154297);
    e.bezierCurveTo(a * 1.000030517578125, a * 332.67613983154297, a * 23.000030517578125, a * 404.67613983154297, a * 95.00003051757812, a * 463.67613983154297);
    e.bezierCurveTo(a * 128.00003051757812, a * 491.67613983154297, a * 165.00003051757812, a * 507.67613983154297, a * 194.00003051757812, a * 512.676139831543);
    e.bezierCurveTo(a * 280.0000305175781, a * 517.676139831543, a * 291.0000305175781, a * 516.676139831543, a * 342.0000305175781, a * 497.67613983154297);
    e.bezierCurveTo(a * 425.0000305175781, a * 454.67613983154297, a * 469.0000305175781, a * 392.67613983154297, a * 468.0000305175781, a * 300.67613983154297);
    e.bezierCurveTo(a * 408.5000305175781, a * 365.17613983154297, a * 408.5000305175781, a * 365.17613983154297, a * 349.0000305175781, a * 429.67613983154297);
    e.bezierCurveTo(a * 256.0000305175781, a * 473.67613983154297, a * 167.00003051757812, a * 459.67613983154297, a * 78.00003051757812, a * 384.67613983154297);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -ok);
    Tb(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    yb(e, c[Hl], Zr, a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.00003051757812, a * 263.4034118652344);
    e.bezierCurveTo(a * 109.00003051757812, a * 160.40341186523438, a * 185.00003051757812, a * 128.40341186523438, a * 222.00003051757812, a * 124.40341186523438);
    e.bezierCurveTo(a * 277.0000305175781, a * 116.40341186523438, a * 339.0000305175781, a * 134.40341186523438, a * 379.0000305175781, a * 195.40341186523438);
    e.bezierCurveTo(a * 409.0000305175781, a * 242.40341186523438, a * 416.0000305175781, a * 256.4034118652344, a * 428.0000305175781, a * 304.4034118652344);
    e.bezierCurveTo(a * 457.0000305175781, a * 203.40341186523438, a * 449.0000305175781, a * 183.40341186523438, a * 438.0000305175781, a * 162.40341186523438);
    e.bezierCurveTo(a * 381.0000305175781, a * 73.40341186523438, a * 360.0000305175781, a * 66.40341186523438, a * 257.0000305175781, a * 46.403411865234375);
    e.bezierCurveTo(a * 191.00003051757812, a * 45.403411865234375, a * 142.00003051757812, a * 65.40341186523438, a * 101.00003051757812, a * 115.40341186523438);
    e.closePath();
    yb(e, c[ka]);
    e.globalAlpha = Dj;
    var f = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(Eu, a * -Ks);
      Tb(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      yb(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      Tb(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      yb(d, b[ou], b[0], eh * a);
      d.globalCompositeOperation = "source-over";
      return c;
    }(a, c);
    e.drawImage(f, 0, 0);
    e.translate(0, a * -10);
    Tb(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    yb(e, undefined, c[2], zl * a);
    e.globalAlpha = b ? 0.5 : $q;
    e.translate(Yl, fl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    yb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(Go, a * -bb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    yb(e, c[Xg], c[2], a * mk);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    yb(e, c[vl], c[0], a * 12);
    e.globalAlpha = El;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    yb(e, c[mi], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    yb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(dt, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    yb(e, c[Ur], c[ab], a * 12);
    e.globalAlpha = b ? 0.5 : uq;
    e.translate(0, a * ul);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    yb(e, c[ho], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(0, -Gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    yb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : Dj;
    e.translate(ka, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    yb(e, c[0], c[0], a * pj);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    yb(e, c[4], c[uj], Hn * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ou, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    yb(e, c[ks], c[Bs], a * Na);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    yb(e, c[3], c[cn], a * al);
    e.globalAlpha = b ? 0.5 : Th;
    e.translate(0, as * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    yb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -O);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    yb(e, c[Dl], c[2], Rn * a);
    e.globalAlpha = b ? 0.5 : bq;
    e.translate(ka, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    yb(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    yb(e, c[Ah], c[pn], a * Nj);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(dh, a * nt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    yb(e, c[0], c[0], a * Hs);
    e.globalAlpha = 1;
    e.translate(lt, -Yo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    yb(e, c[Fl], c[uj], a * Fh);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(hk, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    yb(e, c[Et], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(ou, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    yb(e, c[Io], c[ys], a * 12);
    e.globalAlpha = b ? 0.5 : or;
    e.translate(dt, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    yb(e, c[Xa], c[dt], g * a);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    yb(e, c[Ss], c[2], a * mk);
    e.globalAlpha = b ? 0.5 : Dj;
    e.translate(0, hg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    yb(e, c[0], c[hk], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    yb(e, c[4], c[Ls], a * 12);
    e.globalAlpha = b ? 0.5 : og;
    e.translate(Ob, Ba * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    yb(e, c[jg], c[Hb], a * 12);
    e.globalAlpha = 1;
    e.translate(0, -wr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    yb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : ck;
    e.translate(fs, a * bb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    yb(e, c[Et], c[0], a * zs);
    e.globalAlpha = 1;
    e.translate(0, -nt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    yb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * O);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    yb(e, c[0], c[Hb], Na * a);
    e.globalAlpha = ck;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    yb(e, c[Kl], c[2], a * Xs);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(fs, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    yb(e, c[0], c[0], a * mk);
    e.globalAlpha = 1;
    e.translate(vl, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    yb(e, c[Qa], c[pn], a * 12);
    return d;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 185;
    d.height = a * 164;
    e.translate(0, 0);
    var f = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(ou, a * Ba);
      e.globalAlpha = b ? 0.5 : 1;
      Tb(e, a * 100.5, a * 82, a * 74.92746655359852);
      yb(e, c[0], c[Bs], a * qa);
      Tb(e, a * 100.5, a * 82, a * 65.9417374971317);
      yb(e, c[Go], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = Ws;
      Tb(e, a * 100.5, a * 82, a * 74.92746655359852);
      yb(e, c[El], c[3], a * 4);
      Tb(e, a * 100.5, a * 82, a * 65.9417374971317);
      yb(e, c[bh], c[Sa], a * 4);
      Tb(e, a * 100.5, a * 82, a * 35.9417374971317);
      yb(e, c[og], c[Ci], a * 20);
      Tb(e, a * 100.5, a * 82, a * 15.9417374971317);
      yb(e, c[1], c[rb], jn * a);
      return d;
    }(a, b, c);
    e.drawImage(f, -Ys * a, Eu * a);
    f = Cm(a, b, c, 0);
    e.drawImage(f, a * -83, a * -40);
    f = Cm(a, b, c, Math.PI / 1.4);
    e.drawImage(f, a * -15, a * -88);
    f = Cm(a, b, c, Math.PI / -1.4);
    e.drawImage(f, a * 15, a * -8);
    return d;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * $r);
    e.globalAlpha = b ? 0.5 : uq;
    e.translate(Et, Cg * a);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    wb(e, a * -Rj, a * -16.5, a * 32, a * 33, a * at);
    e.restore();
    yb(e, c[nl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    yb(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    wb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    yb(e, c[nq]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    wb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    yb(e, c[rb]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    wb(e, -Ct * a, -Ql * a, a * 36, a * 36, a * Tl);
    e.restore();
    yb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    yb(e, c[uj]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    wb(e, a * -18, -gh * a, a * 36, a * 38, a * 7);
    e.restore();
    yb(e, c[yl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    yb(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    wb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    yb(e, c[Xj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    yb(e, c[cn]);
    e.globalAlpha = Th;
    e.translate(vl, a * -jl);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    wb(e, -Fs * a, a * -16.5, a * 32, a * 33, a * He);
    e.restore();
    yb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    yb(e, undefined, c[jo], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    wb(e, a * -15.5, a * -16, a * 31, a * 32, Do * a);
    e.restore();
    yb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    yb(e, wl, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    wb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * Zq);
    e.restore();
    yb(e, c[Ui], c[Kg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    yb(e, ml, c[wk], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    wb(e, a * -18, a * -18, a * 36, a * 36, a * Vt);
    e.restore();
    yb(e, c[Qq], c[oo], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    yb(e, undefined, c[4], a * Xk);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    wb(e, a * -Qs, a * -Hj, a * 36, a * 38, a * Ka);
    e.restore();
    yb(e, c[wn], c[oo], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    yb(e, undefined, c[4], a * wr);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    wb(e, -Ns * a, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    yb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    yb(e, pl, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ou, a * vi);
    e.save();
    e.translate(a * 98, a * 99);
    Pb(e, kh, a * 70.28669492273468, a * 10);
    e.restore();
    yb(e, c[nl]);
    e.save();
    e.translate(a * 98, a * 99);
    Pb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    yb(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    Pb(e, 6, a * 70.28669492273468, ok * a);
    e.restore();
    yb(e, c[5], c[iq], a * zq);
    e.save();
    e.translate(a * 98, a * 99);
    Pb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    yb(e, c[7], c[yg], a * qh);
    return d;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = Ng;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    yb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    yb(e, c[0]);
    e.translate(Et, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    yb(e, c[1], c[Ts], a * xh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    yb(e, c[1], c[2], a * te);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    yb(e, ml, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    yb(e, pa, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    yb(e, undefined, c[2], a * Ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    yb(e, c[1], c[nl], a * Dl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    yb(e, c[yr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    yb(e, c[Ds]);
    return d;
  }
  function pm(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    Tb(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    yb(d, Lh, c[2], a * ll);
    Tb(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    yb(d, undefined, c[1], Kg * a);
    Tb(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    yb(d, undefined, c[$r], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    wb(d, a * -21.5, a * -19, a * 43, a * 38, ok * a);
    d.restore();
    yb(d, c[Ts], c[$q], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    Pb(d, wq, a * 8.06225774829855, ou * a);
    d.restore();
    yb(d, c[Jh]);
    Tb(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    yb(d, c[sd]);
    return e;
  }
  function Cm(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 501;
    e.height = a * 564;
    f.scale(0.5, 0.5);
    f.translate(a * 240, a * Vg);
    f.rotate(d);
    f.globalAlpha = b ? 0.5 : 0.2;
    Tb(f, a * 174, a * 87.984375, a * 20.8806130178211);
    yb(f, c[0], c[0], a * 8);
    Tb(f, a * 174, a * 87.984375, a * 12.165525060596439);
    yb(f, c[Go], c[0], Wh * a);
    Tb(f, a * 174, a * 87.484375, a * 6);
    yb(f, c[ks]);
    Tb(f, a * 30, a * 87.984375, a * 20.8806130178211);
    yb(f, c[0], c[0], a * 4);
    Tb(f, a * 30, a * 87.984375, a * 12.165525060596439);
    yb(f, c[0], c[Eu], wk * a);
    Tb(f, a * 30, a * 87.484375, a * 6);
    yb(f, c[Hb]);
    Tb(f, a * 100, a * 30, a * 20.8806130178211);
    yb(f, c[gj], c[Eu], a * xs);
    Tb(f, a * 100, a * 30, a * 12.165525060596439);
    yb(f, c[dt], c[ka], ll * a);
    Tb(f, a * k, a * 30, a * Sg);
    yb(f, c[dh]);
    Tb(f, a * Aj, a * 130, a * 20.8806130178211);
    yb(f, c[0], c[ka], a * 4);
    Tb(f, a * 100, a * 130, a * 12.165525060596439);
    yb(f, c[0], c[Go], a * Ah);
    Tb(f, a * Za, a * 130, a * 6);
    yb(f, c[0]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    f.rotate(0);
    wb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    yb(f, c[dt], c[ka], a * 4);
    f.save();
    f.translate(a * 101, a * 64.984375);
    f.rotate(Et);
    wb(f, a * -33, a * -sh, a * 66, a * Aa, a * 15);
    f.restore();
    yb(f, c[0], c[Ob], a * Dl);
    f.save();
    f.translate(a * 102, a * 63.484375);
    f.rotate(ka);
    wb(f, a * -9, a * -27.5, a * 18, a * 55, a * 15);
    f.restore();
    f.translate(5, -Vn);
    f.globalAlpha = 1;
    Tb(f, a * 174, a * 87.984375, a * 20.8806130178211);
    yb(f, c[1], c[Kl], nb * a);
    Tb(f, a * 174, a * 87.984375, a * 12.165525060596439);
    yb(f, c[1], c[wq], a * 8);
    Tb(f, a * 174, a * 87.484375, a * 6);
    yb(f, c[2]);
    Tb(f, a * 30, a * 87.984375, a * 20.8806130178211);
    yb(f, c[1], c[Ds], a * 8);
    Tb(f, a * 30, a * 87.984375, a * 12.165525060596439);
    yb(f, c[1], c[R], a * kq);
    Tb(f, a * 30, a * 87.484375, Vs * a);
    yb(f, c[2]);
    Tb(f, a * 102, a * 30, a * 20.8806130178211);
    yb(f, c[1], c[sd], a * Es);
    Tb(f, a * 102, a * 30, a * 12.165525060596439);
    yb(f, c[vg], c[R], a * I);
    Tb(f, a * 102, a * 30, a * vd);
    yb(f, c[kr]);
    Tb(f, a * 102, a * 130, a * 20.8806130178211);
    yb(f, c[1], c[wq], a * 8);
    Tb(f, a * 102, a * 130, a * 12.165525060596439);
    yb(f, c[Ng], c[Ss], kq * a);
    Tb(f, a * 102, a * 130, a * 6);
    yb(f, c[1]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    wb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    yb(f, c[1], c[3], a * 8);
    f.save();
    f.translate(a * 101, a * 64.984375);
    wb(f, a * -33, a * -Ys, a * 66, a * Ns, Ln * a);
    f.restore();
    yb(f, c[2], c[1], a * xh);
    f.save();
    f.translate(a * 102, a * 63.484375);
    wb(f, a * -9, a * -27.5, tg * a, a * 55, a * cs);
    f.restore();
    yb(f, c[2], c[bq], Es * a);
    Tb(f, a * 135, a * 107.36605834960938, a * 21.095023109728988);
    yb(f, c[1], c[3], yn * a);
    Tb(f, a * 135, a * 107.36605834960938, a * fh);
    yb(f, c[1], c[Ab], Os * a);
    Tb(f, a * 135, a * 107.36605834960938, a * 6.082762530298219);
    yb(f, c[2]);
    Tb(f, a * 70, a * 107.36605834960938, a * 21.095023109728988);
    yb(f, c[1], c[Kl], a * 8);
    Tb(f, a * 70, a * 107.36605834960938, a * l);
    yb(f, c[bq], c[Xg], a * 8);
    Tb(f, a * 70, a * 107.36605834960938, a * 6.082762530298219);
    yb(f, c[2]);
    return e;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Lj * a, Yo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * tl, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    yb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -Ba, a * -Gj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * dk, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * Nh, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, ph * a, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    yb(e, c[Dj], c[2], za * a);
    return d;
  }
  function fm(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    wb(e, b * Ys, b * ea, b * 110, b * 90, b * jl);
    yb(e, c[0]);
    wb(e, b * 10, b * Gj, b * 110, b * 90, b * ek);
    yb(e, c[El], c[pn], b * 4);
    var h = mb(-Math.PI / 5, hu(b * 0.5, Mg, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 12, b * Fa);
    h = mb(Math.PI / oo, Qd(b * 0.55, is, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 36, b * 16);
    return d;
  }
  function zm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    wb(d, a * -7, a * -tl, yo * a, a * 39, a * 20);
    d.restore();
    yb(d, b[0]);
    d.globalAlpha = uq;
    d.save();
    d.translate(a * 37, a * 94);
    wb(d, -kb * a, a * -20, a * 14, a * 37, Fq * a);
    d.restore();
    yb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    wb(d, a * -84, a * -67, a * 168, a * 134, Lg * a);
    d.restore();
    yb(d, b[Xa], b[0], a * sk);
    d.globalAlpha = El;
    d.save();
    d.translate(a * 131, a * 94);
    wb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    yb(d, b[pn], b[2], ee * a);
    d.save();
    d.translate(a * 131, a * 94);
    wb(d, a * -76, a * -61, a * 152, a * 122, a * Rq);
    d.restore();
    yb(d, b[Qh], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    wb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    yb(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    wb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    yb(d, b[3], b[ll], a * Vs);
    d.save();
    d.translate(a * 130.5, a * 94);
    wb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    yb(d, b[Gt], b[ys], a * kq);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    wb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    yb(d, b[Bs]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    wb(d, a * -83, a * -Nj, a * 160, a * 24, a * 0);
    d.restore();
    yb(d, b[rb]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    wb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    yb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    wb(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    yb(d, b[Ts]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    wb(d, a * -22.5, a * -6.5, a * 45, dg * a, a * hs);
    d.restore();
    yb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    wb(d, a * -22.5, a * -6.5, a * 45, ao * a, a * 20);
    d.restore();
    yb(d, b[ab]);
    return c;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Hl, a * Xk);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    yb(e, c[Yl], c[0], a * pi);
    e.globalAlpha = Zn;
    e.translate(a * -5, -Jb * a);
    Tb(e, a * 220, a * 201, a * 170.41713528867922);
    yb(e, c[uq], c[2], iq * a);
    Tb(e, a * 220, a * 201, a * 130);
    yb(e, c[11], c[ab], a * Jl);
    Tb(e, a * 222, a * 199, a * 120.74767078498864);
    yb(e, undefined, c[3], a * 40);
    Tb(e, a * 220, a * 200, a * 95.44108130150245);
    yb(e, undefined, c[2], a * Pj);
    e.globalAlpha = b ? 0.5 : El;
    e.translate(a * 5, a * 5);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    yb(e, c[0], c[0], Kg * a);
    e.globalAlpha = 1;
    e.translate(a * -Ba, -Gs * a);
    Tb(e, a * 63, a * 136, a * 49.193495504995376);
    yb(e, c[I], c[nq], a * 4);
    Tb(e, a * 63, a * 137, a * 25.632011235952593);
    yb(e, c[Ka], c[2], a * 4);
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    Tb(e, a * 54.5, a * 55, a * 48.038209575038294);
    yb(e, b[Hb], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      yb(e, b[2]);
    } else if (c == El) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      wb(e, a * -11.5, a * -36, a * 23, a * 72, a * ib);
      e.restore();
      yb(e, b[2], b[3], a * mi);
      Tb(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      yb(e, b[4], b[yr], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      wb(e, a * -9, -$h * a, a * 18, a * 32, Hh * a);
      e.restore();
      yb(e, b[Ah]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      yb(e, Kk, b[Yo], xs * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      yb(e, pa, b[Xk], qa * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      yb(e, undefined, b[wr], a * Eg);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      yb(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      yb(e, b[kl], b[Ur], a * Jl);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      yb(e, b[3], b[wk], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      yb(e, b[Ts]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(xg * a, fs);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      yb(e, b[2], b[wn], Vs * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      yb(e, b[sd]);
    }
    return d;
  }
  function Pm(a, b, c) {
    var d = ⵠᐃ[rs.ⲆᐃⲆΔᐃⵠⲆ][a];
    var e = b.info.translate.x + gq * 5;
    var f = b.info.translate.y + gq * hg;
    if (Qv == b.info.state || c) {
      f += gq * 5;
    }
    Rm(Lo, d, e, f);
  }
  function Am() {
    if (!Sw.ⲆⲆⵠⲆ.open && !Sw.ⲆⲆⲆⵠⵠ.open) {
      Sw.ⲆⲆΔᐃ.open = false;
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var c = fw.ΔⲆⵠⲆᐃⲆᐃ;
      if (b) {
        for (var d = 0; jw.length > d; d++) {
          for (var e = jw[d][jg], f = jw[d][1], j = 0; uf.ΔⵠⲆ[e].length > j; j++) {
            var k = uf.ΔⵠⲆ[e][j];
            var m = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(k, b);
            if (c > m) {
              c = m;
              Sw.ⲆⲆΔᐃ.ⲆᐃΔⵠΔⵠᐃ = f;
              Sw.ⲆⲆΔᐃ.type = e;
              Sw.ⲆⲆΔᐃ.open = ag;
              Sw.ⲆⲆΔᐃ.ⲆΔⵠⲆᐃᐃᐃ = k.info & 255;
              Sw.ⲆⲆΔᐃ.ᐃⵠⲆΔⲆΔⵠ = (k.info & 65280) >> Cr;
              Sw.ⲆⲆΔᐃ.ⵠⵠⲆΔ = k.ⵠⵠⲆΔ;
              Sw.ⲆⲆΔᐃ.ⲆΔⵠᐃΔ = k.id;
            }
          }
        }
        if (fw.ΔⲆⵠⲆᐃⲆᐃ > c) {
          var p;
          var q = ⵠᐃ[rs.ⲆⲆΔΔⲆⲆⵠ];
          var l = (g = Uw.ⵠⲆᐃΔⵠΔᐃ).info.translate.x - 33;
          Rm(Lo, q, l, 0);
          if (dh < Sw.ⲆⲆΔᐃ.ⲆΔⵠⲆᐃᐃᐃ) {
            g.ᐃⵠΔⲆ(Lo);
            if ((p = Sw.ⲆⲆΔᐃ.ⲆΔⵠⲆᐃᐃᐃ) > 1) {
              xm(p, g);
            }
          }
          switch (Sw.ⲆⲆΔᐃ.ⲆᐃΔⵠΔⵠᐃ) {
            case ts.ⵠΔΔⲆ:
              var g = Uw.ᐃΔⲆⵠⵠⲆΔ;
              break;
            case ts.ΔᐃⲆⲆ:
              g = Uw.ⵠⵠᐃⲆᐃⲆΔ;
              break;
            case ts.ᐃⲆΔⵠ:
              g = Uw.ᐃⵠⵠΔᐃⵠⲆ;
              break;
            case ts.ⲆΔⲆᐃ:
              g = Uw.ᐃⵠⵠΔᐃΔΔ;
              break;
            case ts.ⲆⲆⵠΔ:
              g = Uw.ᐃⵠᐃΔⲆⵠΔ;
          }
          if (Sw.ⲆⲆΔᐃ.ᐃⵠⲆΔⲆΔⵠ > 0) {
            g.ᐃⵠΔⲆ(Lo);
            if ((p = Sw.ⲆⲆΔᐃ.ᐃⵠⲆΔⲆΔⵠ) > bt) {
              xm(p, g);
            }
          }
        }
      }
    }
  }
  function km() {
    if (!Sw.ⲆⲆⵠⲆ.open && !Sw.ⲆⲆⲆⵠⵠ.open && !Sw.ⵠᐃⵠΔ.open && !Sw.ⲆⲆΔᐃ.open) {
      Sw.ᐃⵠᐃΔ.open = Cl;
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var c = fw.ΔⵠⵠᐃⵠΔΔ;
      if (b) {
        for (var d = 0; uf.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ].length > d; d++) {
          var e = uf.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ][d];
          var f = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(e, b);
          if (f < c) {
            c = f;
            Sw.ᐃⵠᐃΔ.open = is;
            Sw.ᐃⵠᐃΔ.ⲆΔⵠⲆᐃᐃᐃ = e.info & 31;
            Sw.ᐃⵠᐃΔ.ⲆⵠⵠΔⵠⵠᐃ = (e.info & 992) >> Gs;
            Sw.ᐃⵠᐃΔ.ⵠᐃΔⵠⲆⵠΔ = (e.info & 31744) >> Ks;
            Sw.ᐃⵠᐃΔ.ⵠⵠⲆΔ = e.ⵠⵠⲆΔ;
            Sw.ᐃⵠᐃΔ.ⲆΔⵠᐃΔ = e.id;
          }
        }
        if (c < fw.ΔⵠⵠᐃⵠΔΔ) {
          var g = ⵠᐃ[rs.ⵠⲆᐃΔⵠΔⲆ];
          var j = (a = Uw.ⲆΔᐃᐃΔΔΔ).info.translate.x - 32;
          Rm(Lo, g, j, jg);
          if (Go < Sw.ᐃⵠᐃΔ.ⲆΔⵠⲆᐃᐃᐃ) {
            a.ᐃⵠΔⲆ(Lo);
            if ((k = Sw.ᐃⵠᐃΔ.ⲆΔⵠⲆᐃᐃᐃ) > 1) {
              xm(k, a);
            }
          }
          var a = Uw.ⲆⵠⵠΔⵠᐃⲆ;
          if (ks < Sw.ᐃⵠᐃΔ.ⵠᐃΔⵠⲆⵠΔ) {
            a.ᐃⵠΔⲆ(Lo);
            var k = Sw.ᐃⵠᐃΔ.ⵠᐃΔⵠⲆⵠΔ;
            if (Ng < k) {
              xm(k, a);
            }
          }
          a = Uw.ΔⲆᐃΔⵠⲆⲆ;
          if (Sw.ᐃⵠᐃΔ.ⲆⵠⵠΔⵠⵠᐃ > 0) {
            a.ᐃⵠΔⲆ(Lo);
            if ((k = Sw.ᐃⵠᐃΔ.ⲆⵠⵠΔⵠⵠᐃ) > 1) {
              xm(k, a);
            }
          }
        }
      }
    }
  }
  function xm(a, b) {
    if (!ⵠᐃ[rs.ΔⲆ][a]) {
      ⵠᐃ[rs.ΔⲆ][a] = uu(gq, "x" + a, sl, "#FFF");
    }
    var c = ⵠᐃ[rs.ΔⲆ][a];
    var d = b.info.translate.x + b.info.Δᐃ[ks].width - c.width - gq * Gr;
    var e = b.info.translate.y + b.info.Δᐃ[0].height - c.height - gq * 19;
    if (Qv == b.info.state) {
      e += Gj * gq;
    }
    Rm(Lo, c, d, e);
  }
  function Jm() {
    if (!Sw.ⲆⲆⵠⲆ.open && !Sw.ⲆⲆⲆⵠⵠ.open) {
      Sw.ⵠᐃⵠΔ.open = false;
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var c = fw.ⵠᐃΔᐃΔᐃⲆ;
      if (b) {
        for (var d = 0; d < uf.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ].length; d++) {
          var e = uf.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ][d];
          var f = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(e, b);
          if (f < c) {
            c = f;
            Sw.ⵠᐃⵠΔ.open = fa;
            Sw.ⵠᐃⵠΔ.ΔⲆΔᐃⵠⵠⵠ = e.info & 255;
            Sw.ⵠᐃⵠΔ.ⲆⵠⵠΔⵠⵠᐃ = (e.info & 65280) >> 8;
            Sw.ⵠᐃⵠΔ.ⵠⵠⲆΔ = e.ⵠⵠⲆΔ;
            Sw.ⵠᐃⵠΔ.ⲆΔⵠᐃΔ = e.id;
          }
        }
        if (c < fw.ⵠᐃΔᐃΔᐃⲆ) {
          var g = ⵠᐃ[rs.ΔᐃᐃᐃΔᐃⵠ];
          var j = (k = Uw.ⲆⲆΔⵠΔᐃⵠ).info.translate.x - 33;
          Rm(Lo, g, j, 0);
          if (Sw.ⵠᐃⵠΔ.ΔⲆΔᐃⵠⵠⵠ > 0) {
            k.ᐃⵠΔⲆ(Lo);
            var a = Sw.ⵠᐃⵠΔ.ΔⲆΔᐃⵠⵠⵠ;
            if ($r < a) {
              xm(a, k);
            }
          }
          var k = Uw.ⲆΔᐃⲆΔⵠᐃ;
          if (Sw.ⵠᐃⵠΔ.ⲆⵠⵠΔⵠⵠᐃ > 0) {
            k.ᐃⵠΔⲆ(Lo);
            a = Sw.ⵠᐃⵠΔ.ⲆⵠⵠΔⵠⵠᐃ;
            if (Zn < a) {
              xm(a, k);
            }
          }
        }
      }
    }
  }
  function Mm() {
    Sw.ⲆⲆⵠⲆ.id = -1;
    Sw.ⲆⲆⵠⲆ.lock = false;
    Sw.ⲆⲆⵠⲆ.locked = vs;
    Sw.ⲆⲆⵠⲆ.ⵠⲆᐃᐃΔΔⵠ = Cl;
    Sw.ⲆⲆⵠⲆ.ᐃⵠᐃΔΔᐃΔ = ro;
    Sw.ⲆⲆⵠⲆ.open = false;
    var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
    var c = fw.ᐃⵠⲆΔᐃⵠⵠ;
    if (b) {
      for (var d = gj; d < uf.ΔⵠⲆ[iw.ⵠⲆⲆⲆΔ].length; d++) {
        var e = uf.ΔⵠⲆ[iw.ⵠⲆⲆⲆΔ][d];
        var f = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(e, b);
        if (c > f) {
          c = f;
          Sw.ⲆⲆⵠⲆ.open = Mg;
          Sw.ⲆⲆⵠⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / ys);
          Sw.ⲆⲆⵠⲆ.ᐃⵠⵠᐃ = e.info;
          Sw.ⲆⲆⵠⲆ.ⵠⵠⲆΔ = e.ⵠⵠⲆΔ;
          Sw.ⲆⲆⵠⲆ.ⲆΔⵠᐃΔ = e.id;
          Sw.ⲆⲆⵠⲆ.locked = e.lock;
          Sw.ⲆⲆⵠⲆ.lock = !!e.lock && e.ⵠⵠⲆΔ != Sw.id && !Sw.ⲆⵠⲆΔⵠⵠΔ(e.ⵠⵠⲆΔ);
          Sw.ⲆⲆⵠⲆ.ᐃⵠᐃΔΔᐃΔ = e.ⵠⵠⲆΔ !== Sw.id || Sw.ⲆⲆⵠⲆ.locked || -Zn == Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ΔΔⲆⵠΔ) ? Bh : gn;
          if (Sw.ⲆⲆⵠⲆ.locked && Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⲆΔⲆⵠᐃ) != -Dj) {
            Sw.ⲆⲆⵠⲆ.ⵠⲆᐃᐃΔΔⵠ = true;
          }
        }
      }
      if (fw.ᐃⵠⲆΔᐃⵠⵠ > c) {
        var g = ⵠᐃ[rs.ᐃⲆᐃⲆᐃⲆⵠ];
        var j = Uw.ΔⲆᐃ[0];
        var k = Math.floor(j.info.translate.x + (j.info.Δᐃ[0].width - g.width) / 2);
        var m = Math.floor(j.info.translate.y + (j.info.Δᐃ[jg].height - g.height) / yl) + Ia;
        Rm(Lo, g, k, m);
        if ((!Sw.ⲆⲆⵠⲆ.lock || Sw.id === Sw.ⲆⲆⵠⲆ.ⵠⵠⲆΔ) && Go <= Sw.ⲆⲆⵠⲆ.id) {
          (j = Uw.ΔⲆᐃ[Sw.ⲆⲆⵠⲆ.id]).ᐃⵠΔⲆ(Lo);
          var h = Sw.ⲆⲆⵠⲆ.ᐃⵠⵠᐃ;
          if (Dj < h) {
            xm(h, j);
          }
        }
        if (Sw.ⲆⲆⵠⲆ.lock) {
          Uw.ⲆΔⲆⲆᐃⲆⲆ.ᐃⵠΔⲆ(Lo);
        } else if (Sw.ⲆⲆⵠⲆ.ᐃⵠᐃΔΔᐃΔ) {
          Uw.ⲆⲆᐃⵠᐃΔΔ.ᐃⵠΔⲆ(Lo);
        }
        if (Sw.ⲆⲆⵠⲆ.ⵠⲆᐃᐃΔΔⵠ) {
          Uw.ΔⵠΔΔᐃⲆΔ.ᐃⵠΔⲆ(Lo);
        }
      }
    }
  }
  function Bm() {
    if (!Sw.ⲆⲆⵠⲆ.open) {
      Sw.ⲆⲆⲆⵠⵠ.ᐃⵠⵠᐃ = Xa;
      Sw.ⲆⲆⲆⵠⵠ.open = qn;
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var c = fw.ⵠⲆⵠⵠΔⲆⵠ;
      if (b) {
        for (var d = fs; d < uf.ΔⵠⲆ[iw.ⲆΔΔΔΔ].length; d++) {
          var e = uf.ΔⵠⲆ[iw.ⲆΔΔΔΔ][d];
          var f = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(e, b);
          if (f < c) {
            c = f;
            Sw.ⲆⲆⲆⵠⵠ.open = p;
            Sw.ⲆⲆⲆⵠⵠ.ᐃⵠⵠᐃ = e.info;
            Sw.ⲆⲆⲆⵠⵠ.ⵠⵠⲆΔ = e.ⵠⵠⲆΔ;
            Sw.ⲆⲆⲆⵠⵠ.ⲆΔⵠᐃΔ = e.id;
          }
        }
        if (c < fw.ⵠⲆⵠⵠΔⲆⵠ) {
          var g = ⵠᐃ[rs.ⵠⵠⵠⲆⲆⵠᐃ];
          var j = Uw.ⵠᐃᐃⲆⵠⲆⲆ;
          var a = Math.floor(j.info.translate.x + (j.info.Δᐃ[0].width - g.width) / 2);
          var k = Math.floor(j.info.translate.y + (j.info.Δᐃ[Yl].height - g.height) / 2) + Ui;
          Rm(Lo, g, a, k);
          if (Xa < Sw.ⲆⲆⲆⵠⵠ.ᐃⵠⵠᐃ) {
            j.ᐃⵠΔⲆ(Lo);
            var h = Sw.ⲆⲆⲆⵠⵠ.ᐃⵠⵠᐃ;
            if (h > 1) {
              xm(h, j);
            }
          }
        }
      }
    }
  }
  function Dm() {
    if (Sw.reconnect.enabled) {
      Lo.globalAlpha = 0.9;
      Lo.fillStyle = "#000";
      wb(Lo, Ko - 150, eq - 90, 300, 180, 15);
      Lo.fill();
      Lo.globalAlpha = 1;
      var a = ⵠᐃ[rs.ΔⵠⵠⵠⵠⵠⲆ];
      Lo.save();
      Sw.reconnect.rotate = (Sw.reconnect.rotate + ab * Cf) % (nl * Math.PI);
      Lo.translate(Oo / Sa, cq / yl - 25);
      Lo.rotate(Sw.reconnect.rotate);
      Rm(Lo, a, -a.width / 2, -a.height / 2);
      Lo.restore();
      a = ⵠᐃ[rs.ᐃΔⲆΔᐃᐃᐃ];
      Rm(Lo, a, (Oo - a.width) / Xj, (cq - a.height) / Sa + 25);
    }
  }
  function Em() {
    if (Sw.ᐃⲆᐃⲆΔⵠⲆ) {
      Lo.globalAlpha = 0.5;
      Lo.fillStyle = "#000";
      Lo.fillRect(0, Bs, Oo, cq);
      Lo.globalAlpha = 0.8;
      var b = ⵠᐃ[rs.ⲆᐃᐃⵠΔⲆⲆ][uf.time];
      var c = Ko - b.width / rb;
      var d = eq - b.height / ab;
      Rm(Lo, b, c, d);
      Lo.globalAlpha = El;
      if (Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.x > -1) {
        Lo.fillStyle = "#660000";
        Tb(Lo, c + gq * (Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.x * Oj), d + gq * (Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.y * 3), gq * 14);
        Lo.fill();
      }
      for (var e = Uw.ⲆⲆⵠΔⲆ.ⲆᐃΔΔ, f = 0; e.length > f; f++) {
        var g = e[f];
        uf.time;
        Lo.fillStyle = "#ff0000";
        Tb(Lo, c + gq * (g.x / (uf.ⲆⵠᐃΔⵠ * 100) * 600), d + gq * (g.y / (hn * uf.ΔΔΔΔᐃ) * 600), gq * kh);
        Lo.fill();
      }
      var h = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      if (h) {
        Lo.fillStyle = uf.time ? "#fff" : "#e39716";
        Tb(Lo, c + h.x / (Wa * uf.ⲆⵠᐃΔⵠ) * 600 * gq, d + gq * (h.y / (nh * uf.ΔΔΔΔᐃ) * 600), Gq * gq);
        Lo.fill();
      }
    }
  }
  function Im() {
    Sw.ⲆⲆⲆᐃΔ.id = -1;
    Sw.ⲆⲆⲆᐃΔ.ⵠⵠⲆΔ = -1;
    if (!Sw.ᐃᐃⵠΔⵠⲆΔ && !Sw.ⲆⲆⲆᐃΔ.wait && !Sw.ⵠⲆΔᐃⲆ) {
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var c = fw.ΔⵠⲆΔⲆⵠᐃⲆⲆ;
      if (b) {
        for (var d = jg; uf.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆ].length > d; d++) {
          var e = uf.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆ][d];
          var f = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(e, b);
          if (c > f) {
            c = f;
            Sw.ⲆⲆⲆᐃΔ.id = e.id;
            Sw.ⲆⲆⲆᐃΔ.ⵠⵠⲆΔ = e.ⵠⵠⲆΔ;
            Sw.ⲆⲆⲆᐃΔ.info = e.info;
            Sw.ⲆⲆⲆᐃΔ.lock = (e.info & 16) >> Kg;
          }
        }
      }
      var g = Uw.ΔⲆⲆΔᐃ;
      Uw.ΔⲆⲆΔᐃ = -bh;
      if (Sw.ⲆⲆⲆᐃΔ.ⵠⵠⲆΔ == -Th || Sw.ᐃᐃⵠᐃᐃ.length != dt && Sw.ⲆⲆⲆᐃΔ.ⵠⵠⲆΔ != Sw.id) {
        if (Sw.ᐃᐃⵠᐃᐃ.length != 0 && Sw.ᐃᐃⵠᐃᐃ[gj] != Sw.id) {
          Uw.ΔⲆⲆΔᐃ = bw.ᐃⲆᐃⵠᐃΔᐃ;
        } else if (Xa != Sw.ᐃᐃⵠᐃᐃ.length && Sw.ᐃᐃⵠᐃᐃ[Eu] == Sw.id) {
          Uw.ΔⲆⲆΔᐃ = bw.ᐃⵠΔⵠΔᐃΔ;
        } else if (Sw.ᐃᐃⵠᐃᐃ.length != 0) {
          Uw.ΔⲆⲆΔᐃ = bw.ⲆᐃΔΔᐃⵠΔ;
        }
      } else if (Sw.ᐃᐃⵠᐃᐃ.length == 0 && Es <= Sw.ⲆⲆⲆᐃΔ.info) {
        Uw.ΔⲆⲆΔᐃ = bw.ᐃⲆᐃΔΔΔΔ;
      } else if (Sw.ᐃᐃⵠᐃᐃ.length == 0) {
        Uw.ΔⲆⲆΔᐃ = bw.ⲆᐃΔΔᐃⵠΔ;
      } else {
        Uw.ΔⲆⲆΔᐃ = bw.ⲆΔᐃΔⲆΔᐃ;
      }
      if (Uw.ΔⲆⲆΔᐃ != -1) {
        Uw.ᐃΔⵠΔᐃ[Uw.ΔⲆⲆΔᐃ].button.ᐃⵠΔⲆ(Lo);
      }
      var h = document.getElementById("team_box").style;
      if (-bh != Uw.ΔⲆⲆΔᐃ && g != Uw.ΔⲆⲆΔᐃ && h.display == "inline-block") {
        Uw.ᐃΔⵠΔᐃ[Uw.ΔⲆⲆΔᐃ].action();
      }
    }
  }
  function Sm() {
    Sw.ᐃⲆᐃΔⲆ.open = Vl;
    var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
    var b = fw.ΔⲆᐃⲆᐃⵠⲆ;
    if (a) {
      for (var c = Xa; uf.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ].length > c; c++) {
        var d = uf.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ][c];
        var e = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(d, a);
        if (b > e) {
          b = e;
          Sw.ᐃⲆᐃΔⲆ.open = La;
          Sw.ᐃⲆᐃΔⲆ.ⵠⵠⲆΔ = d.ⵠⵠⲆΔ;
          Sw.ᐃⲆᐃΔⲆ.ⲆΔⵠᐃΔ = d.id;
        }
      }
      if (fw.ΔⲆᐃⲆᐃⵠⲆ > b) {
        Uw.ᐃⲆᐃΔⲆ.ᐃⵠΔⲆ(Lo);
      }
    }
  }
  function Qm() {
    if (!Sw.ⲆⲆⵠⲆ.open && !Sw.ⲆⲆⲆⵠⵠ.open && !Sw.ⵠᐃⵠΔ.open && !Sw.ᐃⵠᐃΔ.open && !Sw.ⲆⲆΔᐃ.open) {
      Sw.sign.open = false;
      var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var b = fw.ⲆⵠⵠⵠΔΔΔ;
      if (a) {
        for (var c = dh; uf.ΔⵠⲆ[iw.ⲆⵠⲆΔⵠ].length > c; c++) {
          var d = uf.ΔⵠⲆ[iw.ⲆⵠⲆΔⵠ][c];
          var e = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(d, a);
          if (e < b && d.info === hk && d.ⵠⵠⲆΔ === Sw.id) {
            Sw.sign.open = true;
            b = e;
            Sw.sign.ⲆΔⵠᐃΔ = d.id;
          }
        }
        if (b < fw.ⲆⵠⵠⵠΔΔΔ) {
          Uw.sign.button.ᐃⵠΔⲆ(Lo);
        }
      }
    }
  }
  function _m() {
    if (Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length > gj) {
      var b = {
        x: Uw.ⲆⲆⵠΔⲆ.translate.x,
        y: Uw.ⲆⲆⵠΔⲆ.translate.y - gq * 120
      };
    } else {
      b = {
        x: Uw.ⲆⲆⵠΔⲆ.translate.x,
        y: Uw.ⲆⲆⵠΔⲆ.translate.y - gq * 50
      };
    }
    Lo.globalAlpha = 0.8;
    var c = ⵠᐃ[rs.ᐃⵠΔΔᐃⲆⵠ][uf.time];
    Rm(Lo, c, b.x, b.y);
    Lo.globalAlpha = 1;
    if (Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.x > -1) {
      Lo.fillStyle = "#660000";
      Tb(Lo, b.x + gq * Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.x, b.y + gq * Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.y, gq * 5);
      Lo.fill();
    }
    var d = gq;
    for (var f = Uw.ⲆⲆⵠΔⲆ.ⲆᐃΔΔ, g = 0; g < f.length; g++) {
      var h = f[g];
      uf.time;
      Lo.fillStyle = "#ff0000";
      Tb(Lo, b.x + h.x / (hh * uf.ⲆⵠᐃΔⵠ) * 193 * gq, b.y + h.y / (uf.ΔΔΔΔᐃ * 100) * 193 * gq, gq * ys);
      Lo.fill();
    }
    var i = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
    if (i) {
      Lo.fillStyle = uf.time ? "#fff" : "#e39716";
      Tb(Lo, b.x + i.x / (uf.ⲆⵠᐃΔⵠ * 100) * 193 * gq, b.y + i.y / (uf.ΔΔΔΔᐃ * 100) * 193 * gq, gq * 4);
      Lo.fill();
    }
    gq = d;
  }
  function Fm() {
    var a = Uw.ᐃΔΔᐃⵠ;
    var b = a.id;
    if (Ng === a.ⲆⲆᐃⲆⵠ && a.display === 1) {
      if (ⵠⵠⵠᐃᐃ[b] === undefined) {
        ⵠⵠⵠᐃᐃ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = xt[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(ho, d.measureText(e[vl]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          zt = Pn;
          for (; e.length > zt; zt++) {
            f = Math.max(f, d.measureText(e[zt]).width);
          }
          var g = f + 35;
          var h = ho;
          h = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = h;
          wb(d, Ob, 0, g, h, cl);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = Dj;
            d.fillStyle = "#e2c340";
            d.fillText(e[ho], we, 28);
          }
          if (e.length >= nl) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], Sh, 55);
            h = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            zt = 2;
            for (; zt < e.length; zt++) {
              d.fillText(e[zt], Ln, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⵠⲆⲆΔ === og) {
        Rm(Lo, ⵠⵠⵠᐃᐃ[b], a.x, a.y);
      } else if (a.x - 80 + ⵠⵠⵠᐃᐃ[b].width > Oo) {
        Rm(Lo, ⵠⵠⵠᐃᐃ[b], Oo - ⵠⵠⵠᐃᐃ[b].width - Yq, a.y - ⵠⵠⵠᐃᐃ[b].height - Xn);
      } else {
        Rm(Lo, ⵠⵠⵠᐃᐃ[b], a.x - 80, a.y - ⵠⵠⵠᐃᐃ[b].height - 10);
      }
    }
  }
  function Rm(b, c, d, e, f, g, i, a, j, h) {
    if (c.ⲆᐃⵠⵠⵠᐃⲆ === undefined || c.ⲆᐃⵠⵠⵠᐃⲆ() === 1) {
      if (h !== Pr) {
        b.drawImage(c, d, e, Math.max(Dj, f), Math.max(Th, g), i, a, j, h);
      } else if (Kk !== g) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  ⵠⵠⵠᐃᐃ = [];
  ⵠⲆᐃᐃΔᐃᐃ = [];
  var jm = [];
  function Gm(b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == Cl) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Va;
      }
      var c = Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var d = c * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var e = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * c;
    } else {
      d = ou;
      e = 0;
    }
    var f = ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ].length;
    Δᐃ = ⵠᐃ[rs.ⵠᐃⲆⲆΔⵠⲆ][(this.ᐃⲆΔᐃ + this.ⲆΔ % Ls) % f][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    var g = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
    if (g && (Sw.id === this.ⵠⵠⲆΔ || Sw.ⲆⵠⲆΔⵠⵠΔ(this.ⵠⵠⲆΔ))) {
      if (ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - Cf, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Cf, Ws);
      }
    } else if (g && ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ]) < 150) {
      this.opacity = Math.max(this.opacity - Cf, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Cf, Th);
    }
    var h = Lo.globalAlpha;
    Lo.globalAlpha *= this.opacity;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Xj + d, -ᐃᐃⲆ / 2 + e, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.globalAlpha = h;
    Lo.restore();
  }
  function Lm() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ΔᐃΔΔΔ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Sa, -ᐃᐃⲆ / Ts, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Wm() {
    var a = uf.ⲆⲆΔᐃᐃ;
    var b = ⵠᐃ[rs.ᐃⲆᐃⵠⵠᐃᐃ][uf.time];
    Rm(Lo, b, a.translate.x, a.translate.y);
    Lo.save();
    Lo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    uf.ⲆⲆΔᐃᐃ.now = (new Date().getTime() - a.ⲆΔΔⵠΔ + a.ΔᐃⲆΔΔ) % fw.ΔΔⲆ;
    var c = uf.ⲆⲆΔᐃᐃ.now * (Math.PI * 2) / fw.ΔΔⲆ - Math.PI / rb;
    Lo.rotate(c);
    Rm(Lo, ⵠᐃ[rs.ⵠⲆⵠⲆⲆΔⵠ], -b.width / 2, -b.height / kg);
    Lo.restore();
  }
  function Om() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ΔⵠᐃⵠⵠᐃⲆ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Ls, -ᐃᐃⲆ / kg, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Nm() {
    var a = -Sr;
    if (Sw.ΔⲆⵠⵠΔ.enabled) {
      var b = ⵠᐃ[rs.ΔⵠⲆΔⵠⲆΔ];
      Rm(Lo, b, Sw.ΔⲆⵠⵠΔ.translate.x, Sw.ΔⲆⵠⵠΔ.translate.y + a);
      a += 70;
    }
    if (El === Sw.ⵠΔᐃᐃⲆⵠᐃ) {
      b = ⵠᐃ[rs.ᐃΔᐃᐃᐃΔⲆ];
      Rm(Lo, b, Sw.ΔⲆⵠⵠΔ.translate.x, Sw.ΔⲆⵠⵠΔ.translate.y + a);
      a += 70;
    } else if (Sw.ⵠᐃⲆᐃ.ⲆᐃᐃΔᐃ.x < 0.25 || Sw.ⵠᐃⲆᐃ.ΔᐃᐃᐃⲆⲆⲆ.x < 0.25 || Sw.ⵠᐃⲆᐃ.ΔⵠⵠⲆᐃᐃⵠ.x < 0.25 || Sw.ⵠᐃⲆᐃ.ΔᐃᐃΔⵠᐃⵠ.x < 0.25 || Sw.ⵠᐃⲆᐃ.ᐃᐃΔⲆᐃⵠᐃ.x < 0.25) {
      b = ⵠᐃ[rs.ⲆΔⲆⵠΔΔⵠ];
      Rm(Lo, b, Sw.ΔⲆⵠⵠΔ.translate.x, Sw.ΔⲆⵠⵠΔ.translate.y + a);
      a += 70;
    }
    if (Sw.ⵠⵠΔⲆΔ > 0) {
      b = ⵠᐃ[rs.ΔⵠⲆΔⵠΔⵠ];
      Rm(Lo, b, Sw.ΔⲆⵠⵠΔ.translate.x, Sw.ΔⲆⵠⵠΔ.translate.y + a);
      var c = jm[Sw.ⵠⵠΔⲆΔ];
      if (Pr === c) {
        c = uu(gq, Sw.ⵠⵠΔⲆΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        jm[Sw.ⵠⵠΔⲆΔ] = c;
      }
      if (Sw.ⵠⵠΔⲆΔ < Ma) {
        Rm(Lo, c, Sw.ΔⲆⵠⵠΔ.translate.x - 39, Sw.ΔⲆⵠⵠΔ.translate.y + a + Us);
      } else {
        Rm(Lo, c, Sw.ΔⲆⵠⵠΔ.translate.x - 46, Sw.ΔⲆⵠⵠΔ.translate.y + a + 20);
      }
    }
  }
  function qm() {
    var a = Sw.ᐃΔΔⵠⲆ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃᐃ();
      Lo.save();
      var c = ⵠᐃ[rs.ΔⵠⲆΔᐃᐃΔ];
      Lo.translate(c.width - Og * gq, Uw.ⵠᐃⲆᐃ.translate.y - gq * 125);
      var d = -c.width / ys + 10;
      var e = -c.height / Og - wk;
      Rm(Lo, c, d, e);
      Lo.beginPath();
      Lo.lineWidth = gq * O;
      Lo.strokeStyle = rs.ΔⲆⵠΔΔⵠⲆ[uf.time];
      Lo.lineCap = "round";
      Lo.arc(re, e + c.height / 2, gq * 25, ou, a.timeout.ⲆⵠⲆ * (rb * Math.PI));
      Lo.stroke();
      Lo.restore();
      if (b) {
        a.wait = Cl;
        a.timeout.ⲆⵠⲆ = ho;
        a.timeout.ᐃⵠᐃ = Mq;
      }
    }
  }
  function Hm(a) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = zn;
      }
      var b = Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⲆᐃΔᐃᐃ.ᐃᐃᐃ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    Δᐃ = ⵠᐃ[rs.ⲆΔⲆⲆⲆ][Math.floor(this.id + this.color) % 5][uf.time];
    ⲆⲆⵠ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.width;
    ᐃᐃⲆ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2 + c, -ᐃᐃⲆ / 2 + d, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Um() {
    var a = Sw.ΔⲆⵠⲆΔ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃᐃ();
      Lo.save();
      var c = ⵠᐃ[rs.ᐃⵠᐃᐃⲆⲆⵠ];
      Lo.translate(c.width - gq * 12, Uw.ⵠᐃⲆᐃ.translate.y - gq * 190);
      var d = -c.width / nl + 9;
      var e = -c.height / 2 - va;
      Rm(Lo, c, d, e);
      Lo.beginPath();
      Lo.lineWidth = gq * ul;
      Lo.strokeStyle = rs.ΔⲆⵠΔΔⵠⲆ[uf.time];
      Lo.lineCap = "round";
      Lo.arc(9, e + c.height / 2, gq * 25, 0, Math.PI * 2 * a.timeout.ⲆⵠⲆ);
      Lo.stroke();
      Lo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆⵠⲆ = 0;
        a.timeout.ᐃⵠᐃ = false;
      }
    }
  }
  function Ym() {
    var b = Sw.ΔⲆⲆⵠᐃ;
    var c = Uw.ᐃⵠΔᐃⲆ;
    if (b.ᐃᐃᐃ) {
      b.ᐃᐃᐃ = As;
      var d = b.ⵠⵠⲆᐃᐃ;
      var e = c.ⵠⵠ.width;
      var f = c.ⵠⵠ.height;
      var g = c.Δ;
      var i = uf.ⲆᐃΔΔ;
      var a = false;
      g.clearRect(dt, 0, e, f);
      g.drawImage(c.Δᐃ, 0, 0);
      for (var j = 0; j < d.length; j++) {
        var k = i[d[j]];
        if ((fw.ᐃΔΔⵠᐃⵠⲆ !== uf.mode || k.ᐃᐃⵠⲆΔ !== "spectator") && (uf.mode !== fw.ⵠⵠᐃΔⲆ || fw.ᐃᐃΔᐃᐃⲆⵠ !== k.ᐃᐃᐃⵠ)) {
          if (d[j] == Sw.id) {
            a = ag;
            if (uf.mode === fw.ⵠⵠᐃᐃΔ && k.ᐃᐃᐃⵠ === fw.ⵠᐃⵠⵠⲆΔⲆ) {
              Ⲇⵠ = "#FF0000";
            } else {
              Ⲇⵠ = "#FFF";
            }
          } else if (fw.ⵠⵠᐃᐃΔ === uf.mode && k.ᐃᐃᐃⵠ === fw.ⵠᐃⵠⵠⲆΔⲆ) {
            Ⲇⵠ = "#990000";
          } else {
            Ⲇⵠ = "#A1BDCD";
          }
          g.drawImage(uu(gq, "" + (j + or), gq * 15, Ⲇⵠ), gq * 20, (40 + j * 22) * gq);
          if (!k.ⵠⲆⲆⲆΔᐃΔ) {
            k.ⵠⲆⲆⲆΔᐃΔ = uu(gq, k.ᐃᐃⵠⲆΔ, gq * 15, Ⲇⵠ, undefined, undefined, undefined, gg, gq * 110);
          }
          g.drawImage(k.ⵠⲆⲆⲆΔᐃΔ, gq * 39, (40 + j * 22) * gq);
          g.drawImage(uu(gq, ⵠⲆᐃⲆ.ⵠΔⵠⵠⲆⵠⵠ(k.ΔΔⲆΔᐃ), gq * 15, Ⲇⵠ), gq * 156, (40 + j * 22) * gq);
        }
      }
      if (!a) {
        if (fw.ⲆⲆΔⵠⵠ === uf.mode || uf.mode === fw.ⵠⵠᐃᐃΔ || fw.ⵠᐃⵠᐃᐃ === uf.mode || fw.ΔⵠⲆᐃΔⵠΔ === uf.mode || fw.ⵠΔΔΔΔ === uf.mode || uf.mode === fw.ᐃΔΔⵠᐃⵠⲆ && !Sw.ᐃᐃⵠΔⵠⲆΔ || fw.ⵠⵠᐃΔⲆ === uf.mode && !Sw.ⵠⲆΔᐃⲆ) {
          g.drawImage(ⵠᐃ[rs.ⲆⵠΔⲆᐃⵠⵠ], gq * 15, gq * (46 + j * 22));
          g.drawImage(uu(gq, ⵠⲆᐃⲆ.ⵠΔⵠⵠⲆⵠⵠ(uf.ⲆᐃΔΔ[Sw.id].ΔΔⲆΔᐃ), gq * 15, "#FFF"), gq * Xl, (46 + j * 22) * gq);
        }
      }
    }
    Rm(Lo, c.ⵠⵠ, c.translate.x, c.translate.y);
  }
  function Km(a) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var b = gq * ((1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      c = ho;
      d = 0;
    }
    var e = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = -e.width;
    ᐃᐃⲆ = -e.height;
    Rm(Lo, e, -ⲆⲆⵠ / 2 + c, -ᐃᐃⲆ / ys + d, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Vm() {
    var a = Sw.ⲆᐃΔⲆⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃᐃ();
      Lo.save();
      var c = ⵠᐃ[rs.ΔⵠᐃᐃΔᐃΔ];
      Lo.translate(c.width - ab * gq, Uw.ⵠᐃⲆᐃ.translate.y - gq * 60);
      var d = -c.width / 2 - pn;
      var e = -c.height / 2 - 4;
      Rm(Lo, c, d, e);
      Lo.beginPath();
      Lo.lineWidth = gq * 5;
      Lo.strokeStyle = rs.ⲆᐃⵠⲆⵠⵠᐃ[uf.time];
      Lo.lineCap = "round";
      Lo.arc(Xa, e + c.height / dj, gq * 25, 0, Math.PI * Ci * a.timeout.ⲆⵠⲆ);
      Lo.stroke();
      Lo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆⵠⲆ = dh;
        a.timeout.ᐃⵠᐃ = false;
      }
    }
  }
  function Xm() {
    var b = Sw.ⵠⲆⲆΔ;
    if (!b.ⵠΔᐃΔⵠ && b.ΔΔΔΔ > 0) {
      var c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      if (!c) {
        return;
      }
      Lo.save();
      if (ws[b.ΔΔΔΔ].ΔΔΔⲆ === 0 && ks === b.mode) {
        Lo.translate(Sw.ᐃΔΔⵠ.x + c.x, Sw.ᐃΔΔⵠ.y + c.y);
        Lo.rotate(c.angle);
        Lo.translate(120, lt);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Sw.ᐃΔΔⵠ.x + (d - d % Fg + 50);
        e = Sw.ᐃΔΔⵠ.y + (e - e % 100 + 50);
        Lo.translate(d, e);
      }
      var f = ⵠᐃ[b.ΔΔΔΔ][uf.time];
      Lo.globalAlpha = 0.5;
      Rm(Lo, f, -f.width / Sa, -f.height / rb);
      Lo.globalAlpha = bh;
      Lo.restore();
      if (gj === ws[b.ΔΔΔΔ].ΔΔΔⲆ) {
        if (!b.label[b.mode]) {
          if (b.mode === ks) {
            b.label[0] = uu(gq, xt[ⲆⲆΔΔ.ΔᐃⵠΔᐃⲆᐃ], Xe, "#e2c340");
          } else {
            b.label[El] = uu(gq, xt[ⲆⲆΔΔ.ᐃⵠⲆᐃⲆⲆⵠ], Dh, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Rm(Lo, f, Ko + -f.width / kg, Uw.ⵠᐃⲆᐃ.y - 26);
      }
    }
    if (b.ⵠΔᐃΔⵠ) {
      var g = b.timeout.ᐃᐃᐃ();
      for (var i = Eu; i < b.ⵠᐃᐃⵠⲆ.length; i++) {
        var j = b.ⵠᐃᐃⵠⲆ[i];
        if (b.id == j.id) {
          var k = gq * 42;
          var m = gq * 17;
          wb(Lo, j.info.translate.x, j.info.translate.y + k * (Zk - b.timeout.ⲆⵠⲆ), j.info.width, b.timeout.ⲆⵠⲆ * k + m, Xn * gq);
          Lo.fillStyle = "#55B973";
          Lo.fill();
          Lo.globalAlpha = 0.8;
          j.ᐃⵠΔⲆ(Lo);
        } else {
          Lo.globalAlpha = 0.5;
          j.ᐃⵠΔⲆ(Lo);
        }
        Lo.globalAlpha = hj;
      }
      if (g) {
        b.ⵠΔᐃΔⵠ = Ps;
        b.timeout.ⲆⵠⲆ = ka;
        b.timeout.ᐃⵠᐃ = false;
      }
      return true;
    }
    for (i = 0; i < b.ⵠᐃᐃⵠⲆ.length; i++) {
      b.ⵠᐃᐃⵠⲆ[i].ᐃⵠΔⲆ(Lo);
    }
    return false;
  }
  function Zm(a) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == Zg) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var b = Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var c = b * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var d = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
    } else {
      c = Yl;
      d = 0;
    }
    Δᐃ = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2 + c, -ᐃᐃⲆ / 2 + d, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function $m(a) {
    if ((a = a / 100) <= 0.95) {
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.angle);
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
        if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
          this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
        }
        var b = gq * (Cf * (bh - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
        var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
        var d = b * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
      } else {
        c = Go;
        d = Xa;
      }
      Lo.globalAlpha = 0.5;
      fb(Lo, c, d, gq * 28, a);
      yb(Lo, null, "#000000", gq * 18);
      Lo.globalAlpha = 1;
      fb(Lo, c, d, gq * 28, a);
      yb(Lo, null, rs.ⲆⲆⲆΔⵠΔⲆ[uf.time], gq * 6);
      Lo.restore();
    }
  }
  function ep(b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = vs;
      }
      var c = gq * ((Zn - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var d = c * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var e = c * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      d = fs;
      e = vl;
    }
    if (b === rs.ⲆΔⲆⵠⲆⵠᐃ && !uf.transition) {
      var f = 0;
      for (var g = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ], h = 0; h < g.length; h++) {
        var i = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(g[h], this);
        if (i < 140 && i > 35) {
          f = 0;
          break;
        }
        if (i <= 35) {
          f = 1;
        }
      }
      this.opacity = dh === f ? Math.max(0.5, this.opacity - Cf / 1.5) : Math.min(vg, this.opacity + Cf / 1.5);
      Lo.globalAlpha = this.opacity;
    }
    Δᐃ = ⵠᐃ[b][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / uj + d, -ᐃᐃⲆ / ys + e, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.globalAlpha = El;
    Lo.restore();
  }
  function ip() {
    var a = Sw.ⵠⲆⲆΔ;
    if (a.ⵠΔᐃΔⵠ) {
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + b.x, Sw.ᐃΔΔⵠ.y + b.y);
      var c = ⵠᐃ[rs.ⲆΔΔⵠⲆⵠⵠ];
      var d = -c.width / kg;
      var e = -c.height / 2 - gq * 125;
      Rm(Lo, c, d, e);
      Lo.beginPath();
      Lo.lineWidth = gq * 5;
      Lo.strokeStyle = rs.ⲆⲆⲆΔⵠΔⲆ[uf.time];
      Lo.lineCap = "round";
      Lo.arc(0, e + c.height / Ci, gq * 25, 0, ys * Math.PI * a.timeout.ⲆⵠⲆ);
      Lo.stroke();
      Lo.restore();
    }
  }
  function tp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ᐃΔⵠⵠᐃ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function np() {
    for (var b = Sw.Δᐃⵠᐃ, c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ], d = ks; d < b.ⲆⵠⵠΔΔ.length; d++) {
      var e = b.ⲆⵠⵠΔΔ[d];
      var f = false;
      if ((c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ]) && (e.id == c.right || c.ⲆⲆⲆⲆⵠ == e.id && c.ⲆⲆⲆⲆⵠ > 0)) {
        f = xk;
        Rm(Lo, e.info.Δᐃ[it], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ᐃⵠΔⲆ(Lo);
      }
      var g = Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[e.id];
      if (g > 1) {
        xm(g, e);
      }
      if (g > 0) {
        Pm(d, e, f);
      }
      var h = Sw.ⲆⲆⵠⲆ;
      if (h.open && (h.id < Yl || h.id == e.id) && (!h.lock || Sw.id == h.ⵠⵠⲆΔ)) {
        Uw.ᐃⲆΔⲆᐃ[e.id].ᐃⵠΔⲆ(Lo);
      }
      if (Sw.ⲆⲆⲆⵠⵠ.open && ts.ᐃⲆᐃΔ == e.id) {
        Uw.ᐃⲆΔⲆᐃ[e.id].ᐃⵠΔⲆ(Lo);
      }
      if (Sw.Δᐃᐃᐃᐃ.open && ts.ⵠᐃⲆΔᐃ == e.id) {
        Uw.ᐃⲆΔⲆᐃ[e.id].ᐃⵠΔⲆ(Lo);
      }
      if (Sw.ⵠᐃⵠΔ.open && ts.ᐃΔΔⲆⵠ == e.id) {
        Uw.ᐃⲆΔⲆᐃ[e.id].ᐃⵠΔⲆ(Lo);
      }
      if (Sw.ⲆⲆΔᐃ.open && ts.ᐃⲆᐃΔ == e.id) {
        Uw.ᐃⲆΔⲆᐃ[e.id].ᐃⵠΔⲆ(Lo);
      }
      if (Sw.ᐃⵠᐃΔ.open && (ts.ᐃⲆᐃΔ == e.id || ts.ᐃⲆⵠⵠⵠ == e.id)) {
        Uw.ᐃⲆΔⲆᐃ[e.id].ᐃⵠΔⲆ(Lo);
      }
    }
    if (e && d < b.max) {
      var j = ⵠᐃ[rs.ⵠⲆΔⲆⵠΔⲆ][dj];
      ΔΔ = e.info.translate.x;
      ⲆΔᐃ = e.info.translate.y;
      ᐃⲆΔᐃ = $r;
      for (; b.max > d; d++, ᐃⲆΔᐃ++) {
        Rm(Lo, j, ΔΔ + (j.width + Xk) * ᐃⲆΔᐃ, ⲆΔᐃ);
      }
    }
  }
  function op() {
    var a = Sw.ⲆⲆⲆᐃΔ;
    if (a.wait) {
      var b = a.timeout.ᐃᐃᐃ();
      Lo.save();
      var c = ⵠᐃ[rs.ⵠⵠᐃⵠᐃᐃᐃ];
      var d = ⵠᐃ[rs.ΔⵠᐃᐃΔᐃΔ].height + gq * 25;
      Lo.translate(c.width, Uw.ⵠᐃⲆᐃ.translate.y - gq * 188 - d);
      var e = -c.width / 2 - 2;
      var f = -c.height / 2 - 4;
      Rm(Lo, c, e + it, f);
      Lo.beginPath();
      Lo.lineWidth = gq * hg;
      Lo.strokeStyle = rs.ⲆᐃⵠⲆⵠⵠᐃ[uf.time];
      Lo.lineCap = "round";
      Lo.arc(Yl, f + c.height / 2, gq * 25, 0, a.timeout.ⲆⵠⲆ * (Math.PI * nl));
      Lo.stroke();
      Lo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆⵠⲆ = ho;
        a.timeout.ᐃⵠᐃ = ro;
      }
    }
  }
  function rp(a) {
    if ((a = a / nh) <= 0.8) {
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.angle);
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
        if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
          this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
        }
        var b = (uq - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600 * gq;
        var c = b * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
        var d = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      Lo.globalAlpha = 0.5;
      fb(Lo, c, d, gq * 18, a);
      yb(Lo, null, "#000000", gq * 18);
      Lo.globalAlpha = 1;
      fb(Lo, c, d, Mk * gq, a);
      yb(Lo, null, rs.ΔᐃⵠⵠⲆⵠΔ[uf.time], gq * 6);
      Lo.restore();
    }
  }
  function ap() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ΔⲆΔⵠⲆⵠΔ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / Xj, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function sp() {
    Lo.save();
    var a = gq;
    if (Sw.ⵠᐃⲆᐃ.ᐃⲆⵠΔᐃ.x < 0.25) {
      Lo.globalAlpha = Sw.ⵠᐃⲆᐃ.ⲆⵠᐃⵠⵠΔⵠ.ⲆⵠⲆ;
    }
    var b = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length > 0 ? -70 : ka;
    if (Sw.ⲆⲆⵠⲆ.open || Sw.ⲆⲆⲆⵠⵠ.open && Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆᐃΔ) != -Zk || Sw.ⵠᐃⵠΔ.open && -og != Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃΔΔⲆⵠ) || Sw.ⲆⲆΔᐃ.open && Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆᐃΔ) != -1 || Sw.Δᐃᐃᐃᐃ.open && Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⵠᐃⲆΔᐃ) != -$q || Sw.ᐃⵠᐃΔ.open && (-ck != Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆᐃΔ) || Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆⵠⵠⵠ) != -1)) {
      b -= gq * 50;
    }
    Lo.translate((Oo - gq * 950) / cn, b);
    Lo.fillStyle = "#69A148";
    Lo.fillRect(this.translate.x + gq * 37, this.translate.y + gq * Lr, Sw.ⵠᐃⲆᐃ.ᐃⲆⵠΔᐃ.x * 178 * gq, gq * 18);
    Lo.globalAlpha = 1;
    if (Sw.ⵠᐃⲆᐃ.ΔᐃᐃᐃⲆⲆⲆ.x < 0.35) {
      Lo.fillStyle = "#8F050A";
      Lo.globalAlpha = Sw.ⵠᐃⲆᐃ.ᐃⵠΔⵠΔᐃᐃ.ⲆⵠⲆ;
      Lo.fillRect(this.translate.x + gq * 277, this.translate.y + gq * 17, gq * 178, vo * gq);
      Lo.globalAlpha = vg;
    }
    Lo.fillStyle = "#AF352A";
    Lo.fillRect(this.translate.x + gq * 277, this.translate.y + gq * Cn, Sw.ⵠᐃⲆᐃ.ΔᐃᐃᐃⲆⲆⲆ.x * 178 * gq, Ct * gq);
    if (Sw.ⵠᐃⲆᐃ.ⲆᐃᐃΔᐃ.x < 0.35) {
      Lo.fillStyle = "#366B91";
      Lo.globalAlpha = Sw.ⵠᐃⲆᐃ.ⵠⲆᐃⲆⵠⵠⲆ.ⲆⵠⲆ;
      Lo.fillRect(this.translate.x + gq * 517, this.translate.y + nk * gq, gq * 178, Fa * gq);
      Lo.globalAlpha = 1;
    }
    Lo.fillStyle = "#669BB1";
    Lo.fillRect(this.translate.x + gq * 517, this.translate.y + sl * gq, Sw.ⵠᐃⲆᐃ.ⲆᐃᐃΔᐃ.x * 178 * gq, tj * gq);
    if (Sw.ⵠᐃⲆᐃ.ⲆᐃᐃΔᐃ.x > 0.99) {
      if (Sw.ⵠᐃⲆᐃ.ᐃᐃΔⲆᐃⵠᐃ.x < 0.35) {
        Lo.fillStyle = "#6C4036";
        Lo.globalAlpha = Sw.ⵠᐃⲆᐃ.ΔΔⲆⲆᐃΔΔ.ⲆⵠⲆ;
        Lo.fillRect(this.translate.x + gq * 517, this.translate.y + gq * 17, gq * 178, gq * 18);
        Lo.globalAlpha = 1;
      }
      Lo.fillStyle = "#9C4036";
      Lo.fillRect(this.translate.x + gq * 517, this.translate.y + gq * ci, gq * ((bh - Sw.ⵠᐃⲆᐃ.ᐃᐃΔⲆᐃⵠᐃ.x) * 178), Qs * gq);
    }
    if (Sw.ⵠᐃⲆᐃ.ΔⵠⵠⲆᐃᐃⵠ.x < 0.35) {
      Lo.fillStyle = "#001A57";
      Lo.globalAlpha = Sw.ⵠᐃⲆᐃ.ᐃᐃᐃᐃⵠΔⵠ.ⲆⵠⲆ;
      Lo.fillRect(this.translate.x + gq * 757, this.translate.y + gq * 17, gq * 178, tj * gq);
      Lo.globalAlpha = 1;
    }
    Lo.fillStyle = "#074A87";
    Lo.fillRect(this.translate.x + gq * 757, this.translate.y + gq * 17, Sw.ⵠᐃⲆᐃ.ΔⵠⵠⲆᐃᐃⵠ.x * 178 * gq, vo * gq);
    gq = a;
    Rm(Lo, this.Δᐃ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    Lo.restore();
    if (Sw.ⵠᐃⲆᐃ.ΔᐃᐃΔⵠᐃⵠ.x < 0.99) {
      var c = Math.floor(Ko - ⵠᐃ[rs.ΔⵠⵠᐃⲆᐃⲆ].width / it);
      b += this.translate.y - ⵠᐃ[rs.ΔⵠⵠᐃⲆᐃⲆ].height - gq * 5;
      Lo.fillStyle = "#BBE8EF";
      Lo.fillRect(c + Hl, b + as * gq, Sw.ⵠᐃⲆᐃ.ΔᐃᐃΔⵠᐃⵠ.x * (gq * 588), gq * 10);
      if (Sw.ⵠᐃⲆᐃ.ΔᐃᐃΔⵠᐃⵠ.x < 0.35) {
        Lo.fillStyle = "#9BA8AF";
        Lo.globalAlpha = Sw.ⵠᐃⲆᐃ.ⲆⲆⵠᐃΔⵠᐃ.ⲆⵠⲆ;
        Lo.fillRect(c + 5, b + Lj, gq * 588, gq * 10);
        Lo.globalAlpha = y;
      }
      Rm(Lo, ⵠᐃ[rs.ΔⵠⵠᐃⲆᐃⲆ], c, b);
      this.y = b;
    }
  }
  function hp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⲆⲆⲆⲆᐃⲆΔ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / nq, -ᐃᐃⲆ / Ls, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function lp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Va;
      }
      var a = gq * ((hj - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = ka;
      c = 0;
    }
    Δᐃ = ⵠᐃ[rs.ⵠⲆⲆⲆΔ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / uj + b, -ᐃᐃⲆ / Og + c, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.lock) {
      Δᐃ = ⵠᐃ[rs.ΔΔⲆⵠΔ][uf.time];
      ⲆⲆⵠ = -Δᐃ.width;
      ᐃᐃⲆ = -Δᐃ.height;
      Rm(Lo, Δᐃ, -ⲆⲆⵠ / rb + b - $q * gq, -ᐃᐃⲆ / 2 + c, ⲆⲆⵠ, ᐃᐃⲆ);
    }
    Lo.restore();
  }
  var gp = 0;
  function Nu() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && Cl == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Cl;
      }
      var b = gq * ((1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var c = b * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var d = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === Sd || fs === e) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ᐃΔⲆᐃⲆⵠⲆ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⵠⵠⵠⵠⲆΔΔ][uf.time];
      }
      var g = -f.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var h = -f.height * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      Rm(Lo, f, -g / nq + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ⵠᐃ[rs.ΔⵠⵠᐃΔᐃⲆ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⵠⲆⲆᐃΔ][uf.time];
      }
      Lo.translate(Eu, f.height / Sa);
      Rm(Lo, f, c - f.width / yl, -f.height + d);
    }
    Lo.restore();
  }
  function bp() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      var a = (Dj - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600 * gq;
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = Go;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Cf * 0.5) % (Math.PI * 2);
    }
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.save();
    Lo.rotate(this.rotate);
    Δᐃ = ⵠᐃ[rs.ΔᐃⵠᐃⵠΔⲆ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / kg, -Δᐃ.height / Ir);
    Lo.restore();
    Lo.save();
    Lo.rotate(this.ⲆᐃΔⲆΔᐃΔΔⲆ);
    Δᐃ = ⵠᐃ[rs.ⲆⵠⵠⵠΔᐃΔ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / 2);
    Lo.restore();
    Lo.restore();
  }
  function vp() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && ol == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Qo;
      }
      var a = Cf * (bh - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = Yl;
      c = ho;
    }
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⵠᐃΔⵠΔ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / 2);
    Lo.restore();
  }
  function dp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆᐃΔᐃᐃ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[rs.ⲆΔᐃΔΔⵠᐃ][uf.time];
    ⲆⲆⵠ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height * this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Ls, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function cp(a, b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (rs.ⵠⵠΔⵠⲆ === a) {
      a = rs.ⵠᐃⲆⵠⲆ;
      this.info = 36;
    }
    Δᐃ = ⵠᐃ[a][this.info][uf.time];
    ⲆⲆⵠ = -Δᐃ.width / 2;
    ᐃᐃⲆ = -Δᐃ.height / rb;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / it, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var c = bv(this.info, Δᐃ, ᐃᐃᐃΔⵠΔᐃΔⵠ);
      Rm(Lo, c, -ⲆⲆⵠ / Ts, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = bt;
    }
    Lo.restore();
  }
  function mp() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var a = gq * ((1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    Lo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * ab - og;
      c += Math.random() * 2 - El;
    }
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ᐃᐃᐃΔᐃ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Qh * Cf) % (Math.PI * 2);
    }
    Lo.rotate(this.rotate);
    Δᐃ = ⵠᐃ[rs.ⲆⵠⵠΔⲆΔⵠ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / Sa);
    Lo.restore();
  }
  function pp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ᐃⵠⲆᐃΔᐃⵠ = Math.min(bh, this.ᐃⵠⲆᐃΔᐃⵠ + Cf * 2);
    Lo.globalAlpha = this.ᐃⵠⲆᐃΔᐃⵠ * Math.min(bq, Math.max(dt, ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r) / 80));
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[rs.Δⵠⵠⵠⵠ][uf.time][this.ⵠⲆᐃΔΔⵠᐃ];
    if (this.ⵠⲆᐃΔΔⵠᐃ < 2) {
      ⲆⲆⵠ = -Δᐃ.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
      ᐃᐃⲆ = -Δᐃ.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    } else if (this.ⵠΔⲆⵠⵠΔᐃ === 0) {
      ⲆⲆⵠ = -Δᐃ.width;
      ᐃᐃⲆ = -Δᐃ.height;
    } else {
      ⲆⲆⵠ = -Δᐃ.width * 1.35;
      ᐃᐃⲆ = -Δᐃ.height * 1.35;
    }
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Xj, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.globalAlpha = Dj;
    Lo.restore();
  }
  function Cp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    var a = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Cf / 2, 1.8) : Math.max(this.scale - Cf, $r);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    this.ⲆᐃⵠΔ = a < 350 ? Math.max(0, this.ⲆᐃⵠΔ - Cf * 2.2) : Math.min(Th, this.ⲆᐃⵠΔ + Cf * 2.2);
    b = ⵠᐃ[rs.ᐃⵠΔⲆⵠᐃⵠ][uf.time];
    ⲆⲆⵠ = -b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height * this.scale;
    Lo.globalAlpha = Dj - this.ⲆᐃⵠΔ;
    Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / qa, ⲆⲆⵠ / Ci, ᐃᐃⲆ / 2);
    b = ⵠᐃ[rs.ⲆΔΔⲆⵠⲆᐃ][uf.time];
    ⲆⲆⵠ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.width);
    ᐃᐃⲆ = this.scale * (-b.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    Lo.globalAlpha = this.ⲆᐃⵠΔ;
    Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * (bt - this.ⲆᐃⵠΔ);
      var b = ⵠᐃ[rs.ⵠᐃΔᐃΔⲆΔ];
      ⲆⲆⵠ = -b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
      ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height);
      Rm(Lo, b, -ⲆⲆⵠ / va, -ᐃᐃⲆ / Fl, ⲆⲆⵠ / uj, ᐃᐃⲆ / pn);
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * this.ⲆᐃⵠΔ;
      b = ⵠᐃ[rs.ⵠΔⵠΔᐃΔⵠ];
      ⲆⲆⵠ = -b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
      ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height);
      Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / cn);
      Lo.globalAlpha = 1;
    }
    b = ⵠᐃ[rs.ⵠΔⲆΔᐃⲆⵠ][uf.time];
    ⲆⲆⵠ = -b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height * this.scale;
    Lo.save();
    Lo.translate(gq * -40, gq * 80);
    Lo.rotate(this.rotate.ⲆⵠⲆ);
    Lo.globalAlpha = this.ⲆᐃⵠΔ;
    Rm(Lo, b, gq * -ⲆⲆⵠ / oo, gq * -ᐃᐃⲆ / qa, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * this.ⲆᐃⵠΔ;
      b = ⵠᐃ[rs.ⲆᐃⵠⵠᐃⲆΔ];
      Rm(Lo, b, gq * -ⲆⲆⵠ / Kg, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    b = ⵠᐃ[rs.ⲆᐃΔᐃᐃⵠΔ][uf.time];
    Lo.save();
    Lo.translate(gq * 40, gq * 80);
    Lo.rotate(-this.rotate.ⲆⵠⲆ);
    Lo.globalAlpha = this.ⲆᐃⵠΔ;
    Rm(Lo, b, gq * -ⲆⲆⵠ / Kg, -ᐃᐃⲆ * gq / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * this.ⲆᐃⵠΔ;
      b = ⵠᐃ[rs.ⲆΔⲆⲆᐃⲆΔ];
      Rm(Lo, b, gq * -ⲆⲆⵠ / Io, -ᐃᐃⲆ * gq / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / nq);
      Lo.globalAlpha = ck;
    }
    Lo.globalAlpha = 1;
    Lo.restore();
    Lo.restore();
  }
  function Tp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⵠΔⲆⲆ.ᐃᐃᐃ();
    Lo.globalAlpha = 0.3;
    var a = ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆᐃ][uf.time];
    var b = -a.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
    var c = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -a.height;
    Rm(Lo, a, -b / 2, -c / Ls, b, c);
    Lo.globalAlpha = Ng;
    Lo.restore();
  }
  function fp() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var a = Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ⲆⲆΔᐃᐃⲆᐃ = (this.ⲆⲆΔᐃᐃⲆᐃ + Cf * 3) % (cn * Math.PI);
    this.ᐃΔᐃᐃⲆⵠⲆ = (this.ᐃΔᐃᐃⲆⵠⲆ - Cf * 3) % (pn * Math.PI);
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.save();
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⲆΔᐃⲆᐃ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / Og, -Δᐃ.height / dj);
    Lo.restore();
    Lo.save();
    Lo.rotate(this.ⲆⲆΔᐃᐃⲆᐃ);
    Δᐃ = ⵠᐃ[rs.ⲆΔᐃᐃⲆⲆⵠ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / 2);
    Lo.restore();
    Lo.save();
    Lo.rotate(this.ᐃΔᐃᐃⲆⵠⲆ);
    Δᐃ = ⵠᐃ[rs.ⵠⲆᐃΔᐃⵠᐃ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / dj);
    Lo.restore();
    Lo.restore();
  }
  function zp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Cf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Cf, 1);
    }
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    a = this.info === 0 ? ⵠᐃ[rs.ΔᐃⵠΔⵠ][uf.time] : ⵠᐃ[rs.ᐃⲆⲆΔΔᐃᐃ][uf.time];
    ⲆⲆⵠ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.width);
    ᐃᐃⲆ = -a.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
    Rm(Lo, a, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / wk, ⲆⲆⵠ / yl, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == qn) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var a = ⵠᐃ[rs.ⵠⲆᐃⵠΔⵠⲆ];
      Rm(Lo, a, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / Ls, ᐃᐃⲆ / 2);
      Lo.globalAlpha = Ws;
    }
    a = Hb === this.info ? ⵠᐃ[rs.ⲆᐃⲆⵠᐃⲆᐃ][uf.time] : ⵠᐃ[rs.ᐃᐃΔⲆΔΔⵠ][uf.time];
    ⲆⲆⵠ = this.scale * (-a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    ᐃᐃⲆ = -a.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
    Lo.save();
    Lo.translate(gq * -40, gq * 10);
    Lo.rotate(this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, gq * -ⲆⲆⵠ / 4, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / Xj);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ΔᐃⲆⵠΔΔⵠ];
      Rm(Lo, a, -ⲆⲆⵠ * gq / 4, -ᐃᐃⲆ * gq / oo, ⲆⲆⵠ / cn, ᐃᐃⲆ / Ci);
      Lo.globalAlpha = vg;
    }
    Lo.restore();
    a = this.info === 0 ? ⵠᐃ[rs.ΔⵠᐃΔᐃⲆᐃ][uf.time] : ⵠᐃ[rs.ⲆᐃⲆⵠⵠⲆⲆ][uf.time];
    Lo.save();
    Lo.translate(gq * 40, cl * gq);
    Lo.rotate(-this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, -ⲆⲆⵠ * gq / Ah, gq * -ᐃᐃⲆ / va, ⲆⲆⵠ / yl, ᐃᐃⲆ / it);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ⵠΔᐃⲆⵠⵠᐃ];
      Rm(Lo, a, -ⲆⲆⵠ * gq / 4, gq * -ᐃᐃⲆ / mi, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      Lo.globalAlpha = Th;
    }
    Lo.restore();
    Lo.restore();
  }
  function yp() {
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    a = this.info === Et ? ⵠᐃ[rs.ᐃⲆᐃⵠᐃ][uf.time] : ⵠᐃ[rs.ⲆΔᐃᐃⵠⵠΔ][uf.time];
    ⲆⲆⵠ = -a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -a.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    Rm(Lo, a, -ⲆⲆⵠ / Ir, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == Cl) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var a = ⵠᐃ[rs.ⵠᐃⵠⵠⲆⲆᐃ];
      Rm(Lo, a, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = $r;
    }
    Lo.restore();
  }
  function wp(b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⵠΔⲆⲆ.ᐃᐃᐃ();
    Lo.globalAlpha = 0.3;
    var c = ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆᐃ][uf.time];
    var d = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -c.width;
    var e = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -c.height;
    Rm(Lo, c, -d / it, -e / 2, d, e);
    Lo.globalAlpha = 1;
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == zn) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Qo;
      }
      var f = gq * (Cf * (og - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
      var g = f * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var h = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * f;
    } else {
      g = 0;
      h = jg;
    }
    c = ⵠᐃ[b][uf.time];
    Rm(Lo, c, -c.width / cn + g, -c.height / 2 + h);
    Lo.restore();
  }
  function Pp(a, b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    c = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = -c.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -c.height;
    Rm(Lo, c, -ⲆⲆⵠ / ab, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && As == this.Ⲇⵠᐃⵠ.ᐃⵠᐃ) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var c = ⵠᐃ[b];
      Rm(Lo, c, -ⲆⲆⵠ / cn, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
  }
  function Ap() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Vq;
      }
      var a = gq * ((1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = a * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      b = ks;
      c = dh;
    }
    Lo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += cn * Math.random() - 1;
    }
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⵠΔⲆⵠΔ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / ys, -Δᐃ.height / Og);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Cf * Kl) % (Math.PI * 2);
    }
    Lo.rotate(this.rotate);
    Δᐃ = ⵠᐃ[rs.ᐃᐃⵠⲆΔΔΔ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / 2);
    Lo.restore();
  }
  function kp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == ke) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Bh;
      }
      var a = gq * (Cf * (vg - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
      var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = fs;
      c = Hb;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      d = ⵠᐃ[rs.ⵠΔⵠᐃᐃⲆᐃ][uf.time];
      Rm(Lo, d, -d.width / 2 + b, -d.height / Sa + c);
      this.up.ᐃᐃᐃ();
      var d = ⵠᐃ[rs.ΔΔⵠᐃⵠⵠΔ][uf.time];
      var e = this.up.ⲆⵠⲆ * -d.width;
      var f = -d.height * this.up.ⲆⵠⲆ;
      Rm(Lo, d, -e / 2 + gq * 1, -f / nq + gq * 3, e, f);
    } else {
      d = ⵠᐃ[rs.ΔⵠᐃⲆΔⲆᐃ][uf.time];
      Rm(Lo, d, -d.width / 2 + b, -d.height / Og + c);
    }
    Lo.restore();
  }
  function xp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var b = Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || ho === e) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ᐃⵠΔᐃⲆⵠΔ][uf.time];
      } else {
        f = ⵠᐃ[rs.ΔᐃΔⲆⲆ][uf.time];
      }
      var g = -f.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var h = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -f.height;
      Rm(Lo, f, -g / 2 + c, -h / it + d, g, h);
    } else {
      this.ΔⲆΔⵠⵠΔⵠ.ᐃᐃᐃ();
      if (this.info & 16) {
        f = ⵠᐃ[rs.ⵠⵠᐃᐃᐃᐃΔ][uf.time];
      } else {
        f = ⵠᐃ[rs.ᐃΔΔⲆⵠ][uf.time];
      }
      Lo.translate(0, f.height / 2);
      Lo.rotate(this.ΔⲆΔⵠⵠΔⵠ.ⲆⵠⲆ);
      Rm(Lo, f, c - f.width / ys, -f.height + d);
    }
    Lo.restore();
  }
  function Jp(a, b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    c = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = -c.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -c.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    Rm(Lo, c, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / Io, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == Bh) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var c = ⵠᐃ[b];
      Rm(Lo, c, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / uj, ᐃᐃⲆ / 2);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
  }
  function Mp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Cf / uj, 1.8);
    } else {
      this.scale = Math.max(this.scale - Cf, 1);
    }
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    a = ⵠᐃ[rs.ⲆΔⵠΔⲆ][uf.time];
    ⲆⲆⵠ = this.scale * (-a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height);
    Rm(Lo, a, -ⲆⲆⵠ / Eg, -ᐃᐃⲆ / qa, ⲆⲆⵠ / dj, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == vs) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var a = ⵠᐃ[rs.ⵠᐃⵠΔΔᐃΔ];
      Rm(Lo, a, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / Og, ᐃᐃⲆ / Ir);
      Lo.globalAlpha = 1;
    }
    a = ⵠᐃ[rs.ⵠΔΔᐃᐃⲆΔ][uf.time];
    ⲆⲆⵠ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.width * this.scale;
    ᐃᐃⲆ = this.scale * (-a.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    Lo.save();
    Lo.translate(gq * -60, gq * 20);
    Lo.rotate(this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, gq * -ⲆⲆⵠ / 4, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / Ts, ᐃᐃⲆ / Ls);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ΔⵠΔΔⲆΔᐃ];
      Rm(Lo, a, -ⲆⲆⵠ * gq / 4, -ᐃᐃⲆ * gq / ll, ⲆⲆⵠ / kg, ᐃᐃⲆ / it);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    a = ⵠᐃ[rs.ΔᐃⵠⲆᐃⵠⲆ][uf.time];
    Lo.save();
    Lo.translate(gq * 60, gq * 20);
    Lo.rotate(-this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, gq * -ⲆⲆⵠ / 4, -ᐃᐃⲆ * gq / wk, ⲆⲆⵠ / 2, ᐃᐃⲆ / Ls);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ⵠⵠⵠΔΔⲆⲆ];
      Rm(Lo, a, gq * -ⲆⲆⵠ / qa, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / dj);
      Lo.globalAlpha = Ng;
    }
    Lo.restore();
    Lo.restore();
  }
  function Bp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    var a = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Cf / 2, 1.8) : Math.max(this.scale - Cf, 1);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    this.ⲆᐃⵠΔ = a < 350 ? Math.max(Xa, this.ⲆᐃⵠΔ - Cf * 2.2) : Math.min(1, this.ⲆᐃⵠΔ + Cf * 2.2);
    b = hk === (this.info & Th) ? ⵠᐃ[rs.ⲆⵠⵠΔᐃⲆⲆ][uf.time] : ⵠᐃ[rs.ᐃΔᐃᐃⵠᐃⵠ][uf.time];
    ⲆⲆⵠ = this.scale * (-b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    ᐃᐃⲆ = -b.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
    Lo.globalAlpha = bh - this.ⲆᐃⵠΔ;
    Rm(Lo, b, -ⲆⲆⵠ / Kg, -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    b = this.info & 1 ? ⵠᐃ[rs.ⵠⲆᐃⲆⵠⲆΔ][uf.time] : ⵠᐃ[rs.ⵠⲆⵠΔⵠ][uf.time];
    ⲆⲆⵠ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.width);
    ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height);
    Lo.globalAlpha = this.ⲆᐃⵠΔ;
    Rm(Lo, b, -ⲆⲆⵠ / Qa, -ᐃᐃⲆ / 4, ⲆⲆⵠ / Og, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == As) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = (1 - this.ⲆᐃⵠΔ) * (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ);
      var b = ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆΔ];
      ⲆⲆⵠ = -b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
      ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height);
      Rm(Lo, b, -ⲆⲆⵠ / jo, -ᐃᐃⲆ / Qa, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * this.ⲆᐃⵠΔ;
      b = ⵠᐃ[rs.ⲆⵠᐃΔⲆΔΔ];
      ⲆⲆⵠ = -b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
      ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.height);
      Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / rb, ᐃᐃⲆ / 2);
      Lo.globalAlpha = ck;
    }
    b = (this.info & 1) === Ob ? ⵠᐃ[rs.ΔⲆⵠᐃΔⵠΔ][uf.time] : ⵠᐃ[rs.ⵠⲆᐃΔΔⲆΔ][uf.time];
    ⲆⲆⵠ = this.scale * (-b.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    ᐃᐃⲆ = -b.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ * this.scale;
    Lo.save();
    Lo.translate(-Rq * gq, gq * 0);
    Lo.rotate(this.rotate.ⲆⵠⲆ);
    Lo.globalAlpha = this.ⲆᐃⵠΔ;
    Rm(Lo, b, -ⲆⲆⵠ * gq / 4, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * this.ⲆᐃⵠΔ;
      b = ⵠᐃ[rs.ᐃΔⲆⲆⲆⲆⵠ];
      Rm(Lo, b, -ⲆⲆⵠ * gq / wk, -ᐃᐃⲆ * gq / va, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    b = this.info & bt ? ⵠᐃ[rs.ⲆᐃⵠΔⵠⵠᐃ][uf.time] : ⵠᐃ[rs.ΔⲆⲆΔΔⵠΔ][uf.time];
    Lo.save();
    Lo.translate(gq * Ns, gq * 0);
    Lo.rotate(-this.rotate.ⲆⵠⲆ);
    Lo.globalAlpha = this.ⲆᐃⵠΔ;
    Rm(Lo, b, gq * -ⲆⲆⵠ / Ol, gq * -ᐃᐃⲆ / Kg, ⲆⲆⵠ / Ci, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = this.ⲆᐃⵠΔ * (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ);
      b = ⵠᐃ[rs.ᐃᐃΔⵠᐃΔⲆ];
      Rm(Lo, b, -ⲆⲆⵠ * gq / T, gq * -ᐃᐃⲆ / Dl, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      Lo.globalAlpha = 1;
    }
    Lo.globalAlpha = 1;
    Lo.restore();
    Lo.restore();
  }
  function Dp() {
    var a = Math.PI / uj;
    var b = Math.PI / 4;
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.ΔᐃⵠᐃⲆΔⲆ.ᐃᐃᐃ();
    this.ⲆᐃΔΔⵠⲆⵠ.ᐃᐃᐃ();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    c = this.info === hk ? ⵠᐃ[rs.ᐃⲆᐃⲆⲆ][uf.time] : ⵠᐃ[rs.ⲆᐃᐃⵠⲆΔⵠ][uf.time];
    ⲆⲆⵠ = -c.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -c.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && vs == this.Ⲇⵠᐃⵠ.ᐃⵠᐃ) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var c = ⵠᐃ[rs.ⵠⵠᐃⵠᐃⲆᐃ];
      Rm(Lo, c, -ⲆⲆⵠ / yl, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = $q;
    }
    if (this.action & _v.ⵠΔᐃⲆⲆ) {
      if (this.ⲆΔᐃⵠⲆ.ᐃᐃᐃ() && this.ⲆΔᐃⵠⲆ.ᐃⵠᐃ == 0) {
        this.action -= _v.ⵠΔᐃⲆⲆ;
      }
      Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ΔΔΔⵠⵠᐃⵠ];
      Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / uj, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle + b);
    Lo.translate(bl, Hb);
    Lo.rotate(a);
    c = this.info === 0 ? ⵠᐃ[rs.ⵠⲆⲆΔΔᐃⲆ][uf.time] : ⵠᐃ[rs.ᐃⵠⲆΔⵠΔⲆ][uf.time];
    ⲆⲆⵠ = -c.width * this.ΔᐃⵠᐃⲆΔⲆ.ⲆⵠⲆ;
    ᐃᐃⲆ = this.ΔᐃⵠᐃⲆΔⲆ.ⲆⵠⲆ * -c.height;
    Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / Ts, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ⵠⵠΔᐃⵠᐃᐃ];
      Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    if (this.action & _v.ⵠΔᐃⲆⲆ) {
      Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ΔⵠⵠⵠᐃΔᐃ];
      Rm(Lo, c, -ⲆⲆⵠ / Og, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle + a + b);
    Lo.translate(100, Ob);
    Lo.rotate(a);
    c = this.info === 0 ? ⵠᐃ[rs.ΔᐃΔⵠⲆⵠⲆ][uf.time] : ⵠᐃ[rs.ⲆΔⲆᐃΔΔⵠ][uf.time];
    ⲆⲆⵠ = -c.width * this.ⲆᐃΔΔⵠⲆⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -c.height * this.ⲆᐃΔΔⵠⲆⵠ.ⲆⵠⲆ;
    Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / cn, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ⵠⲆΔᐃΔⵠⵠ];
      Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / ys, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    if (this.action & _v.ⵠΔᐃⲆⲆ) {
      Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ᐃⵠΔΔΔΔΔ];
      Rm(Lo, c, -ⲆⲆⵠ / rb, -ᐃᐃⲆ / Pn, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
  }
  function Ep() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && Cl == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = xl;
      }
      var b = gq * ((Ws - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      c = 0;
      d = dt;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === jg) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ⲆⵠᐃᐃΔⲆⵠ][uf.time];
      } else {
        f = ⵠᐃ[rs.ᐃⵠΔᐃᐃᐃⲆ][uf.time];
      }
      var g = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -f.width;
      var h = -f.height * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      Rm(Lo, f, -g / yl + c, -h / yl + d, g, h);
    } else {
      if (this.info & 16) {
        f = ⵠᐃ[rs.ⲆⵠⵠⵠΔⲆⲆ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⵠΔⵠⵠᐃⵠⲆ][uf.time];
      }
      Lo.translate(Xa, f.height / Og);
      Rm(Lo, f, c - f.width / 2, -f.height + d);
    }
    Lo.restore();
  }
  function Ip(a, b, c) {
    if (Yl <= a) {
      Δᐃ = ⵠᐃ[a][uf.time];
      switch (a) {
        case rs.ΔⵠᐃⲆⲆ:
        case rs.ⵠⲆᐃⲆⵠ:
        case rs.ΔᐃᐃΔᐃ:
          zv(a, Δᐃ, -Δᐃ.width / T - (ka + b) * gq, -Δᐃ.height / 4 + (c + 35) * gq);
          break;
        case rs.ΔⵠΔⵠⲆ:
          zv(a, Δᐃ, -Δᐃ.width / va - (1 + b) * gq, -Δᐃ.height / 4 + gq * (c + 45));
          break;
        case rs.ᐃᐃⵠᐃΔ:
        case rs.ⵠᐃᐃᐃΔ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - gq * (bq + b), -Δᐃ.height / 4 + (c + 40) * gq);
      }
    }
  }
  function Sp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Cf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Cf, kr);
    }
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    a = ⵠᐃ[rs.ⲆⲆᐃⵠΔ][uf.time];
    ⲆⲆⵠ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.width * this.scale;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height * this.scale;
    Rm(Lo, a, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == xl) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var a = ⵠᐃ[rs.ⵠΔⲆⲆⵠⵠⲆ];
      Rm(Lo, a, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / ys, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    a = ⵠᐃ[rs.ΔΔΔΔᐃⲆⵠ][uf.time];
    ⲆⲆⵠ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.width * this.scale;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height * this.scale;
    Lo.save();
    Lo.translate(gq * -30, gq * 70);
    Lo.rotate(this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, gq * -10, gq * -40, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ⵠⵠⵠᐃᐃⵠⲆ];
      Rm(Lo, a, -j * gq, gq * -40, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    a = ⵠᐃ[rs.ⵠᐃⲆΔΔⲆΔ][uf.time];
    Lo.save();
    Lo.translate(gq * 30, gq * 70);
    Lo.rotate(-this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, gq * 10 - ⲆⲆⵠ, gq * -40, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ⲆΔⵠⵠⲆΔⵠ];
      Rm(Lo, a, gq * 10 - ⲆⲆⵠ, gq * -40, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    Lo.restore();
  }
  function Qp() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var a = (y - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600 * gq;
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = ks;
      c = Go;
    }
    Lo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * kg - og;
    }
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⲆᐃΔᐃⲆ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / kg);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Ab * Cf) % (Math.PI * rb);
    }
    Lo.rotate(this.rotate);
    Δᐃ = ⵠᐃ[rs.ΔᐃⲆΔᐃⵠⵠ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / dj);
    Lo.restore();
  }
  function _p() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var b = gq * ((uq - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var c = b * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var d = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
    } else {
      c = ou;
      d = ka;
    }
    var e = this.info & 15;
    if (this.info === 10 || dh === e) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ᐃΔⵠΔΔⲆⲆ][uf.time];
      } else {
        f = ⵠᐃ[rs.ΔᐃᐃΔᐃⵠᐃ][uf.time];
      }
      var g = -f.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var h = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -f.height;
      Rm(Lo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ⵠᐃ[rs.ᐃⲆⲆΔΔΔⵠ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⲆΔᐃΔᐃ][uf.time];
      }
      Lo.translate(0, f.height / ab);
      Rm(Lo, f, c - f.width / 2, -f.height + d);
    }
    Lo.restore();
  }
  function Fp() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.ΔᐃⵠᐃⲆΔⲆ.ᐃᐃᐃ();
    this.ⲆᐃΔΔⵠⲆⵠ.ᐃᐃᐃ();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    c = this.info === lt ? ⵠᐃ[rs.ᐃᐃⲆⲆᐃ][uf.time] : ⵠᐃ[rs.ᐃΔⲆⵠΔⲆⵠ][uf.time];
    ⲆⲆⵠ = -c.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -c.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    Rm(Lo, c, -ⲆⲆⵠ / yl, -ᐃᐃⲆ / it, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && fk == this.Ⲇⵠᐃⵠ.ᐃⵠᐃ) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var c = ⵠᐃ[rs.ⲆΔⲆⵠᐃᐃⵠ];
      Rm(Lo, c, -ⲆⲆⵠ / Xj, -ᐃᐃⲆ / dj, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = kr;
    }
    if (this.action & _v.ⵠΔᐃⲆⲆ) {
      if (this.ⲆΔᐃⵠⲆ.ᐃᐃᐃ() && this.ⲆΔᐃⵠⲆ.ᐃⵠᐃ == 0) {
        this.action -= _v.ⵠΔᐃⲆⲆ;
      }
      Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ⵠⵠⲆΔΔⵠⲆ];
      Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / kg, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = uq;
    }
    Lo.restore();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle + b);
    Lo.translate(55, 0);
    Lo.rotate(a);
    c = this.info === Eu ? ⵠᐃ[rs.ⵠΔⲆΔⵠⵠᐃ][uf.time] : ⵠᐃ[rs.ᐃᐃⲆⵠΔΔᐃ][uf.time];
    ⲆⲆⵠ = this.ΔᐃⵠᐃⲆΔⲆ.ⲆⵠⲆ * -c.width;
    ᐃᐃⲆ = -c.height * this.ΔᐃⵠᐃⲆΔⲆ.ⲆⵠⲆ;
    Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ⲆⵠⲆⵠⲆⵠΔ];
      Rm(Lo, c, -ⲆⲆⵠ / rb, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = vg;
    }
    if (this.action & _v.ⵠΔᐃⲆⲆ) {
      Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ΔⵠⲆᐃⲆⲆⲆ];
      Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / uj, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = Th;
    }
    Lo.restore();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle + a + b);
    Lo.translate(55, Ob);
    Lo.rotate(a);
    c = fs === this.info ? ⵠᐃ[rs.ΔᐃⵠⲆⲆⵠⵠ][uf.time] : ⵠᐃ[rs.ⵠⲆⵠⲆᐃᐃⲆ][uf.time];
    ⲆⲆⵠ = -c.width * this.ⲆᐃΔΔⵠⲆⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -c.height * this.ⲆᐃΔΔⵠⲆⵠ.ⲆⵠⲆ;
    Rm(Lo, c, -ⲆⲆⵠ / Xj, -ᐃᐃⲆ / kg, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ΔⲆⵠΔⲆⵠⵠ];
      Rm(Lo, c, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / Og, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    if (this.action & _v.ⵠΔᐃⲆⲆ) {
      Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
      c = ⵠᐃ[rs.ᐃⲆᐃⵠⵠⲆᐃ];
      Rm(Lo, c, -ⲆⲆⵠ / Sa, -ᐃᐃⲆ / Sa, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = og;
    }
    Lo.restore();
  }
  function Rp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && Vl == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Va;
      }
      var a = gq * (Cf * (ck - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
      var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = Eu;
      c = 0;
    }
    if (this.info === 0) {
      Δᐃ = ⵠᐃ[rs.ⲆⵠⲆΔⵠ][uf.time];
    } else {
      Δᐃ = ⵠᐃ[rs.ᐃᐃⵠΔⲆ][uf.time][this.info - bq];
    }
    Rm(Lo, Δᐃ, -Δᐃ.width / 2 + b, -Δᐃ.height / nq + c);
    Lo.restore();
  }
  function jp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆᐃΔᐃᐃ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[rs.ΔⲆⲆΔⵠᐃⲆ][uf.time];
    ⲆⲆⵠ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.width;
    ᐃᐃⲆ = -Δᐃ.height * this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Ts, -ᐃᐃⲆ / cn, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Gp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⵠⲆᐃΔⵠ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[rs.ᐃⲆΔⲆⵠ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width * this.ⵠⲆᐃΔⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = -Δᐃ.height * this.ⵠⲆᐃΔⵠ.ⲆⵠⲆ;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / kg, -ᐃᐃⲆ / rb, ⲆⲆⵠ, ᐃᐃⲆ);
    this.ⲆᐃΔᐃᐃ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[rs.ΔⲆⲆΔⵠᐃⲆ][uf.time];
    ⲆⲆⵠ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.width;
    ᐃᐃⲆ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / Ci, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Lp(a, b, c) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + b, Sw.ᐃΔΔⵠ.y + c);
    Lo.rotate(this.angle);
    Lo.translate(this.x - b, this.y - c);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -Δᐃ.width;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / nl, -ᐃᐃⲆ / kg, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Wp(f, e, i, j, k, n, o, a = undefined, p) {
    if (a === undefined) a = gj;
    for (var h = f; h <= e; h++) {
      for (var q = i; q <= j; q++) {
        var r = Qw.ᐃⲆⵠⲆ[h][q];
        if (r !== undefined && r[n] !== pa) {
          var t = r[n];
          var w = ⵠᐃ[k][uf.time][t.ᐃⵠΔⲆⵠᐃΔ];
          Rm(Lo, w, Sw.ᐃΔΔⵠ.x + t.x - w.width / (ⲆΔᐃᐃⵠ * 4), Sw.ᐃΔΔⵠ.y + t.y - w.height / (ⲆΔᐃᐃⵠ * Ik), w.width / (ⲆΔᐃᐃⵠ * 2), w.height / (ⲆΔᐃᐃⵠ * Pn));
          if (hf.ⵠⵠᐃΔΔ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(ⵠᐃ[rs.ⵠⵠΔΔ][uf.time][t.ᐃⵠΔⲆⵠᐃΔ].length * (y * 5));
              w = ⵠᐃ[rs.ⵠⵠΔΔ][uf.time][t.ᐃⵠΔⲆⵠᐃΔ][y];
              Rm(Lo, w, Sw.ᐃΔΔⵠ.x + t.x - w.width / (ⲆΔᐃᐃⵠ * Fl), Sw.ᐃΔΔⵠ.y + t.y - w.height / (ⲆΔᐃᐃⵠ * 4), w.width / (ⲆΔᐃᐃⵠ * 2), w.height / (ⲆΔᐃᐃⵠ * 2));
            } else if (t.ⵠΔⲆⲆᐃⵠᐃ !== 0) {
              w = ⵠᐃ[rs.ⲆΔᐃΔΔΔⲆ][uf.time];
              var z = (gp + h % 2 * 30) % 60;
              Lo.globalAlpha = z < 30 ? z / 30 : vg - (z - 30) / 30;
              Rm(Lo, w, Sw.ᐃΔΔⵠ.x + t.x - w.width / (ⲆΔᐃᐃⵠ * wk), Sw.ᐃΔΔⵠ.y + t.y - w.height / (ⲆΔᐃᐃⵠ * 4) - 30 + z, w.width / (ⲆΔᐃᐃⵠ * 2), w.height / (ⲆΔᐃᐃⵠ * pn));
              Lo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Op() {
    if (Ys <= this.info) {
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.angle);
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
        if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && Vq == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
          this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
        }
        var a = gq * (Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
        var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
        var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      } else {
        b = gj;
        c = 0;
      }
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      var d = ⵠᐃ[rs.ΔⵠⵠΔⵠⵠΔ][uf.time];
      var e = -d.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var f = -d.height * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      Rm(Lo, d, -e / it + b, -f / 2 + c, e, f);
      Lo.restore();
    }
  }
  function Np(a, b, c) {
    if (a >= vl) {
      Δᐃ = ⵠᐃ[a][uf.time];
      switch (a) {
        case rs.ⵠᐃΔΔᐃ:
        case rs.ᐃⵠⵠΔΔ:
        case rs.ᐃᐃΔΔⵠ:
        case rs.ⲆⵠΔⵠΔ:
        case rs.ΔᐃΔᐃΔ:
        case rs.ΔΔᐃⵠΔ:
          uv(a, Δᐃ, -Δᐃ.width / Ls - (45 + b) * gq, -Δᐃ.height / 2 + gq * (c + 22));
          break;
        case rs.ⵠΔⵠᐃΔ:
        case rs.ᐃΔᐃᐃⲆ:
        case rs.Δᐃⵠⵠᐃ:
        case rs.ᐃΔⵠΔⲆ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - gq * (52 + b), -Δᐃ.height / 4 + gq * (c + 20));
          break;
        case rs.ΔⲆⵠᐃᐃ:
        case rs.ⵠᐃΔⲆⵠ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - (57 + b) * gq, -Δᐃ.height / 4 + gq * (c + 20));
          break;
        case rs.ⵠⵠⲆⲆⲆ:
        case rs.ⲆⲆΔᐃⵠ:
        case rs.ⲆᐃΔⵠⵠ:
        case rs.ΔᐃⵠΔⲆ:
          zv(a, Δᐃ, -Δᐃ.width / Qa - gq * (47 + b), -Δᐃ.height / xs + gq * (c + 45));
          break;
        case rs.ⵠΔⲆⵠⲆ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - (52 + b) * gq, -Δᐃ.height / 4 + gq * (c + 45));
          break;
        case rs.ⲆΔⵠⵠⵠ:
          zv(a, Δᐃ, -Δᐃ.width / mi - gq * (47 + b), -Δᐃ.height / 4 + gq * (c + 44));
          break;
        case rs.ᐃⲆΔⵠⵠ:
          uv(a, Δᐃ, -Δᐃ.width / 2 - gq * (47 + b), -Δᐃ.height / Og + gq * (c + 44));
          break;
        case rs.ᐃⵠⵠⲆᐃ:
          uv(a, Δᐃ, -Δᐃ.width / 2 - gq * (40 + b), -Δᐃ.height / nq + gq * (c + 65));
          break;
        case rs.ⲆⲆᐃᐃⵠ:
        case rs.ᐃᐃⲆᐃⲆ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - (37 + b) * gq, -Δᐃ.height / 4 + gq * (c + 85));
          break;
        case rs.ⲆⵠⵠᐃΔ:
        case rs.ⵠᐃⵠⲆΔ:
          zv(a, Δᐃ, -Δᐃ.width / qa - gq * (26 + b), -Δᐃ.height / Io + gq * (c + 77));
          break;
        case rs.ΔⵠⲆΔᐃ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - gq * (37 + b), -Δᐃ.height / 4 + (c + 85) * gq);
          break;
        case rs.ΔⵠⲆⵠᐃ:
          zv(a, Δᐃ, -Δᐃ.width / 4 - (47 + b) * gq, -Δᐃ.height / T + (c + 44) * gq);
          break;
        case rs.ΔⵠΔᐃᐃ:
        case rs.ΔⲆⵠᐃⲆ:
        case rs.ⲆΔᐃⲆⵠ:
        case rs.ΔᐃⵠⵠΔ:
        case rs.ⲆᐃᐃⲆΔ:
        case rs.ΔⲆᐃⵠⲆ:
        case rs.ⲆⲆᐃᐃⲆ:
          zv(a, Δᐃ, -Δᐃ.width / Ah - (37 + b) * gq, -Δᐃ.height / 4 + gq * (c + 30));
          break;
        case rs.ⵠⲆΔᐃΔ:
          zv(a, Δᐃ, -Δᐃ.width / Qa - (47 + b) * gq, -Δᐃ.height / 4 + gq * (c + 35));
          break;
        case rs.ΔⲆᐃᐃⲆ:
        case rs.ᐃΔᐃⵠᐃ:
          zv(a, Δᐃ, -Δᐃ.width / ll - gq * (47 + b), -Δᐃ.height / 4 + (c + 40) * gq);
          break;
        case rs.ⲆᐃⵠΔⲆ:
          zv(a, Δᐃ, -Δᐃ.width / Ol - gq * (47 + b), -Δᐃ.height / 4 + (c + 34) * gq);
          break;
        case rs.ⲆΔᐃⵠᐃ:
        case rs.ΔⲆⵠΔᐃ:
        case rs.ⲆΔΔΔᐃ:
        case rs.ΔⲆⲆΔⵠ:
          zv(a, Δᐃ, -Δᐃ.width / ll - gq * (37 + b), -Δᐃ.height / Eg + (c + 90) * gq);
          break;
        case rs.ⵠΔᐃⲆᐃ:
          zv(a, Δᐃ, -Δᐃ.width / Yr - gq * (40 + b), -Δᐃ.height / va + gq * (c + 85));
          break;
        case rs.ᐃⵠⲆᐃⲆ:
          uv(a, Δᐃ, -Δᐃ.width / kg - (39 + b) * gq, -Δᐃ.height / 2 + (c + 90) * gq);
          break;
        case rs.ᐃⵠⵠᐃⵠ:
        case rs.ⲆⵠΔΔⲆ:
        case rs.ⲆΔᐃⵠⵠ:
        case rs.ᐃᐃΔⵠΔ:
        case rs.ᐃΔᐃⲆᐃ:
        case rs.ᐃᐃⵠⵠᐃ:
          uv(a, Δᐃ, -Δᐃ.width / Xj - gq * (46 + b), -Δᐃ.height / Og + gq * (c + 35));
          break;
        case rs.ⵠⲆⲆⲆᐃ:
          uv(a, Δᐃ, -Δᐃ.width / pn - gq * (47 + b), -Δᐃ.height / Og + (c + 54) * gq);
          break;
        case rs.ΔⲆᐃΔΔ:
        case rs.ΔⵠⲆᐃⵠ:
        case rs.ΔⵠⲆⵠⵠ:
        case rs.ⲆΔⵠᐃⲆ:
          uv(a, Δᐃ, -Δᐃ.width / 2 - (46 + b) * gq, -Δᐃ.height / 2 + (c + 35) * gq);
          break;
        case rs.ᐃⲆΔⲆΔ:
          uv(a, Δᐃ, -Δᐃ.width / 2 - gq * (47 + b), -Δᐃ.height / 2 + (c + Lg) * gq);
      }
    }
  }
  function qp() {
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    a = this.info === 0 ? ⵠᐃ[rs.ΔⲆⵠᐃⵠ][uf.time] : ⵠᐃ[rs.ᐃⵠⵠᐃⵠⵠᐃ][uf.time];
    ⲆⲆⵠ = -a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height;
    Rm(Lo, a, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / ys, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var a = ⵠᐃ[rs.ⵠᐃⵠᐃΔⲆⲆ];
      Rm(Lo, a, -ⲆⲆⵠ / Xj, -ᐃᐃⲆ / Ci, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = Th;
    }
    Lo.restore();
  }
  function Hp(a, b) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    c = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = -c.width;
    ᐃᐃⲆ = -c.height;
    Rm(Lo, c, -ⲆⲆⵠ / Ls, -ᐃᐃⲆ / Og, ⲆⲆⵠ, ᐃᐃⲆ);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var c = ⵠᐃ[b];
      Rm(Lo, c, -ⲆⲆⵠ / rb, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
  }
  function Up() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃⵠΔⲆⵠ.length == 0 || this.ᐃⵠΔⲆⵠ[this.ᐃⵠΔⲆⵠ.length - 1] <= rs.ⵠⵠⵠᐃⵠⵠΔ)) {
      this.ᐃⵠΔⲆⵠ.push(rs.ⵠⵠⲆΔᐃⲆᐃ);
    }
    for (var a = 0; a < this.ᐃⵠΔⲆⵠ.length; a++) {
      this.ᐃⵠΔⲆⵠ[a] = Math.max(dt, this.ᐃⵠΔⲆⵠ[a] - Cf * rs.ⲆᐃⵠⲆⵠⵠⵠ);
      Lo.globalAlpha = this.ᐃⵠΔⲆⵠ[a] / 1.3;
      var b = (Zn - this.ᐃⵠΔⲆⵠ[a]) * 40;
      var c = (Zk - this.ᐃⵠΔⲆⵠ[a]) * 35 + ok;
      Tb(Lo, gq * -68 + Math.sin(-this.angle - Math.PI / 2) * b, gq * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
      yb(Lo, "#333333");
    }
    Lo.globalAlpha = or;
    if (ou < this.ᐃⵠΔⲆⵠ.length && this.ᐃⵠΔⲆⵠ[0] === 0) {
      this.ᐃⵠΔⲆⵠ.shift();
    }
    Lo.restore();
  }
  function Yp() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = As;
      }
      var b = gq * ((1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      c = dh;
      d = dt;
    }
    var e = this.info & 15;
    if (this.info === Qg || e === 0) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ΔΔⲆⲆᐃΔⵠ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⵠⲆᐃᐃⵠᐃΔ][uf.time];
      }
      var g = -f.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var h = -f.height * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      Rm(Lo, f, -g / it + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ⵠᐃ[rs.ⲆⲆⲆⲆⵠΔᐃ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⲆᐃᐃⵠⲆ][uf.time];
      }
      Lo.translate(dh, f.height / 2);
      Rm(Lo, f, c - f.width / yl, -f.height + d);
    }
    Lo.restore();
  }
  function Kp() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == As) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var a = gq * (Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
      var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = 0;
      c = ho;
    }
    Lo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * Xj - 1;
      c += Math.random() * 2 - Dj;
    }
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⲆⲆⵠΔⵠ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / dj);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Cf * 3) % (Math.PI * 2);
    }
    Lo.rotate(this.rotate);
    Δᐃ = ⵠᐃ[rs.ⵠΔⲆⲆΔⵠΔ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / yl);
    Lo.restore();
  }
  function Vp(a) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[a][uf.time];
    ⲆⲆⵠ = -Δᐃ.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
    ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / Ci, -ᐃᐃⲆ / Ir, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Xp() {
    if (this.info !== Yq) {
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.angle);
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
        if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && Cl == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
          this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Ag;
        }
        var a = Cf * (bt - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
        var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
        var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      } else {
        b = vl;
        c = dt;
      }
      if (this.info & 16) {
        var d = ⵠᐃ[rs.ⵠΔⵠⲆᐃᐃⲆ][uf.time];
      } else {
        d = ⵠᐃ[rs.ⵠᐃΔⵠⵠⲆⵠ][uf.time];
      }
      Rm(Lo, d, -d.width / 2 + b, -d.width / Ci + c);
      Lo.restore();
      for (var e = this.info & 15, f = 0; f < e; f++) {
        this.ⵠΔⲆΔ[f].ᐃⵠΔⲆ(rs.ΔᐃⵠᐃⲆ);
      }
    }
  }
  function Zp() {
    var a = undefined;
    var b = Sn;
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    if (this.Ⲇᐃⵠⵠᐃ >= 0.1 && this.Ⲇᐃⵠⵠᐃ <= 1.1) {
      if ((c = Math.max(ou, Math.min(1, this.Ⲇᐃⵠⵠᐃ - 0.1))) < 0.2) {
        c *= Jb;
      } else {
        c = c > 0.8 ? (Zk - c) * 5 : 1;
      }
      a = ⵠᐃ[rs.ᐃᐃᐃΔⲆΔⵠ][uf.time];
      ⲆⲆⵠ = -a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
      ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height;
      Lo.globalAlpha = c;
      Rm(Lo, a, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / ll, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      b = ⵠᐃ[rs.ΔᐃΔⲆᐃⲆⵠ];
    }
    if (this.Ⲇᐃⵠⵠᐃ >= 0.9) {
      var c;
      if ((c = Math.max(Bs, Math.min(1, this.Ⲇᐃⵠⵠᐃ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ⵠᐃ[rs.ΔΔᐃΔⵠΔⵠ][uf.time];
      ⲆⲆⵠ = -a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
      ᐃᐃⲆ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height;
      Lo.globalAlpha = c;
      Rm(Lo, a, -ⲆⲆⵠ / Eg, -ᐃᐃⲆ / Qa, ⲆⲆⵠ / Ir, ᐃᐃⲆ / Pn);
      b = ⵠᐃ[rs.ⲆⵠΔⲆᐃΔᐃ];
    }
    if (this.action & _v.ΔⲆⵠⲆ && b !== dq) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = (0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * c;
      ⲆⲆⵠ = this.ⲆΔᐃⵠ.ⲆⵠⲆ * -b.width;
      ᐃᐃⲆ = -b.height * this.ⲆΔᐃⵠ.ⲆⵠⲆ;
      Rm(Lo, b, -ⲆⲆⵠ / Kg, -ᐃᐃⲆ / 4, ⲆⲆⵠ / Pn, ᐃᐃⲆ / 2);
    }
    Lo.globalAlpha = bt;
    Lo.restore();
  }
  function $p() {
    if (~this.info & 1) {
      this.Ⲇᐃⵠⵠᐃ = Math.max(this.Ⲇᐃⵠⵠᐃ - Cf, 0);
      this.ⲆΔⲆⲆᐃⲆᐃ += Cf;
      if (this.ⲆΔⲆⲆᐃⲆᐃ > 0.1) {
        this.ⲆΔⲆⲆᐃⲆᐃ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: ho,
          r: Math.random() * 30 + 30
        };
        this.ⵠΔⲆⲆ.push(a);
      }
    } else {
      this.Ⲇᐃⵠⵠᐃ = Math.min(this.Ⲇᐃⵠⵠᐃ + Cf, 2.2);
    }
    for (var b = vl; this.ⵠΔⲆⲆ.length > b; b++) {
      a = this.ⵠΔⲆⲆ[b];
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + a.x, Sw.ᐃΔΔⵠ.y + a.y);
      a.a = Math.min(y, a.a + Cf / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= ul;
      } else {
        c = c > 0.8 ? (El - c) * Yo : bq;
      }
      Lo.globalAlpha = c * 0.8;
      Tb(Lo, 0, vl, a.r);
      yb(Lo, rs.ΔⵠᐃΔΔⵠⵠ[uf.time]);
      Lo.restore();
      if (a.a === 1) {
        this.ⵠΔⲆⲆ.splice(b, og);
        b--;
      }
    }
  }
  function Ou() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    this.ⲆᐃΔᐃᐃ.ᐃᐃᐃ();
    Δᐃ = ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠᐃ][uf.time];
    ⲆⲆⵠ = -Δᐃ.width * this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ;
    ᐃᐃⲆ = this.ⲆᐃΔᐃᐃ.ⲆⵠⲆ * -Δᐃ.height;
    Rm(Lo, Δᐃ, -ⲆⲆⵠ / 2, -ᐃᐃⲆ / 2, ⲆⲆⵠ, ᐃᐃⲆ);
    Lo.restore();
  }
  function Pu() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Cf / Ts, 1.8);
    } else {
      this.scale = Math.max(this.scale - Cf, Zn);
    }
    this.ⲆΔᐃⵠ.ᐃᐃᐃ();
    this.rotate.ᐃᐃᐃ();
    a = this.info === 0 ? ⵠᐃ[rs.ⲆⲆⲆᐃⲆ][uf.time] : ⵠᐃ[rs.ⵠⲆΔᐃⲆⲆⵠ][uf.time];
    ⲆⲆⵠ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.width);
    ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height);
    Rm(Lo, a, -ⲆⲆⵠ / Ah, -ᐃᐃⲆ / 4, ⲆⲆⵠ / Xj, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == Qo) {
        this.action -= _v.ΔⲆⵠⲆ;
      }
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      var a = ⵠᐃ[rs.ⵠⵠⵠⲆⵠⵠⵠ];
      Rm(Lo, a, -ⲆⲆⵠ / wk, -ᐃᐃⲆ / Eg, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
      Lo.globalAlpha = Zn;
    }
    a = this.info === 0 ? ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆΔ][uf.time] : ⵠᐃ[rs.ⲆᐃΔⵠᐃⲆⲆ][uf.time];
    ⲆⲆⵠ = this.scale * (-a.width * this.ⲆΔᐃⵠ.ⲆⵠⲆ);
    ᐃᐃⲆ = this.scale * (this.ⲆΔᐃⵠ.ⲆⵠⲆ * -a.height);
    Lo.save();
    Lo.translate(gq * -40, gq * 10);
    Lo.rotate(this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, -ⲆⲆⵠ * gq / 4, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.Δⵠⵠᐃⵠᐃᐃ];
      Rm(Lo, a, -ⲆⲆⵠ * gq / 4, gq * -ᐃᐃⲆ / 4, ⲆⲆⵠ / Sa, ᐃᐃⲆ / nq);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    a = Go === this.info ? ⵠᐃ[rs.ⵠΔΔⲆᐃⲆⵠ][uf.time] : ⵠᐃ[rs.ᐃⲆΔΔⵠⵠⵠ][uf.time];
    Lo.save();
    Lo.translate(gq * 40, gq * 10);
    Lo.rotate(-this.rotate.ⲆⵠⲆ);
    Rm(Lo, a, -ⲆⲆⵠ * gq / oo, -ᐃᐃⲆ * gq / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
    if (this.action & _v.ΔⲆⵠⲆ) {
      Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
      a = ⵠᐃ[rs.ΔᐃⵠᐃΔᐃⵠ];
      Rm(Lo, a, gq * -ⲆⲆⵠ / 4, gq * -ᐃᐃⲆ / jo, ⲆⲆⵠ / ab, ᐃᐃⲆ / pn);
      Lo.globalAlpha = 1;
    }
    Lo.restore();
    Lo.restore();
  }
  function Qu() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    Lo.rotate(this.angle);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = ke;
      }
      var a = gq * ((vg - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
    } else {
      b = Bs;
      c = Bs;
    }
    if (dj == this.action) {
      Δᐃ = ⵠᐃ[rs.ᐃⲆᐃⵠᐃⲆⵠ][uf.time];
    } else {
      Δᐃ = ⵠᐃ[rs.ⵠⲆᐃⵠΔⲆᐃ][uf.time];
    }
    Rm(Lo, Δᐃ, -Δᐃ.width / 2 + b, -Δᐃ.height / 2 + c);
    Lo.restore();
  }
  function Ru() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == ke) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = ro;
      }
      var b = Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = b * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      c = 0;
      d = fs;
    }
    var e = this.info & 15;
    if (ek === this.info || e === 0) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ΔⲆᐃⵠᐃⵠΔ][uf.time];
      } else {
        f = ⵠᐃ[rs.ΔΔⵠⲆΔΔⲆ][uf.time];
      }
      var g = -f.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var h = this.ⵠΔⲆⲆ.ⲆⵠⲆ * -f.height;
      Rm(Lo, f, -g / Ls + c, -h / nl + d, g, h);
    } else {
      if (this.info & 16) {
        f = ⵠᐃ[rs.ᐃᐃᐃᐃΔᐃΔ][uf.time];
      } else {
        f = ⵠᐃ[rs.ᐃⲆⵠⲆΔ][uf.time];
      }
      Lo.translate(ho, f.height / 2);
      Rm(Lo, f, c - f.width / 2, -f.height + d);
    }
    Lo.restore();
  }
  function Su() {
    if (this.info !== 10) {
      for (var a = this.info & 15, b = 0; a > b; b++) {
        this.ⵠΔⲆΔ[b].ᐃⵠΔⲆ(rs.ᐃΔⵠᐃⵠ, this.x, this.y);
      }
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.angle);
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
        if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && zn == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
          this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Ps;
        }
        var c = gq * (($r - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
        var d = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * c;
        var e = c * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
      } else {
        d = ou;
        e = Hb;
      }
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ΔⵠⲆΔⵠⵠΔ][uf.time];
      } else {
        f = ⵠᐃ[rs.ⲆΔΔΔⵠⲆⲆ][uf.time];
      }
      Rm(Lo, f, -f.width / uj + d, -f.width / yl + e);
      Lo.restore();
    }
  }
  function Tu() {
    if (this.info >= 10) {
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.angle);
      if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
        if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == 0) {
          this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
        }
        var a = gq * ((Ng - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600);
        var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
        var c = a * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
      } else {
        b = Go;
        c = lt;
      }
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      var d = ⵠᐃ[rs.ⲆᐃΔΔΔⲆⵠ][uf.time];
      var e = -d.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var f = -d.height * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      Rm(Lo, d, -e / dj + b, -f / 2 + c, e, f);
      Lo.restore();
    }
  }
  function Uu() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ == ro) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = false;
      }
      var a = gq * (Cf * (1 - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600);
      var b = a * Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle);
      var c = a * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      b = 0;
      c = ka;
    }
    Lo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - y;
      c += Math.random() * 2 - bq;
    }
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ⵠⵠⵠⵠⲆ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / rb);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Cf * 3) % (Math.PI * 2);
    }
    Lo.rotate(this.rotate);
    Δᐃ = ⵠᐃ[rs.ΔΔⲆⵠᐃΔΔ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / Og, -Δᐃ.height / Og);
    Lo.restore();
  }
  function Vu() {
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && Vl == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = ej;
      }
      var a = ($q - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * Cf * 600 * gq;
      var b = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * a;
      var c = a * Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle);
    } else {
      b = 0;
      c = dh;
    }
    this.ⲆⲆΔᐃᐃⲆᐃ = (this.ⲆⲆΔᐃᐃⲆᐃ + Qq * Cf) % (Math.PI * yl);
    this.ᐃΔᐃᐃⲆⵠⲆ = (this.ᐃΔᐃᐃⲆⵠⲆ - Jh * Cf) % (Math.PI * 2);
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x + b, Sw.ᐃΔΔⵠ.y + this.y + c);
    Lo.save();
    Lo.rotate(this.angle);
    Δᐃ = ⵠᐃ[rs.ᐃΔⵠΔⵠ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / Xj);
    Lo.restore();
    Lo.save();
    Lo.rotate(this.ⲆⲆΔᐃᐃⲆᐃ);
    Δᐃ = ⵠᐃ[rs.ᐃΔᐃΔΔⲆⵠ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / rb, -Δᐃ.height / cn);
    Lo.restore();
    Lo.save();
    Lo.rotate(this.ᐃΔᐃᐃⲆⵠⲆ);
    Δᐃ = ⵠᐃ[rs.ᐃⲆⲆᐃΔΔⲆ][uf.time];
    Rm(Lo, Δᐃ, -Δᐃ.width / 2, -Δᐃ.height / ys);
    Lo.restore();
    Lo.restore();
  }
  function Wu() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ) {
      if (this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃᐃᐃ() && ej == this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ᐃⵠᐃ) {
        this.Ⲇⵠᐃⵠ.ᐃᐃᐃ = Zg;
      }
      var b = Cf * ($r - this.Ⲇⵠᐃⵠ.ᐃⲆΔⲆ.ⲆⵠⲆ) * 600 * gq;
      var c = Math.sin(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
      var d = Math.cos(this.Ⲇⵠᐃⵠ.angle - this.angle) * b;
    } else {
      c = hk;
      d = Bs;
    }
    var e = this.info & 15;
    if (this.info === vi || e === Yl) {
      Lo.rotate(this.angle);
      this.ⵠΔⲆⲆ.ᐃᐃᐃ();
      if (this.info & 16) {
        var f = ⵠᐃ[rs.ΔΔΔΔⲆᐃⲆ][uf.time];
      } else {
        f = ⵠᐃ[rs.ᐃᐃⵠⲆⲆⲆⵠ][uf.time];
      }
      var g = -f.width * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      var h = -f.height * this.ⵠΔⲆⲆ.ⲆⵠⲆ;
      Rm(Lo, f, -g / 2 + c, -h / ab + d, g, h);
    } else {
      if (this.info & 16) {
        f = ⵠᐃ[rs.ⲆΔⵠⲆⵠⲆⵠ][uf.time];
      } else {
        f = ⵠᐃ[rs.ᐃⵠᐃΔΔ][uf.time];
      }
      Lo.translate(Bs, f.height / 2);
      Rm(Lo, f, c - f.width / ys, -f.height + d);
    }
    Lo.restore();
  }
  function Xu(a) {
    if (a > 0) {
      var b = ⵠᐃ[a][uf.time];
      switch (a) {
        case rs.ⲆⲆᐃⲆΔ:
          uv(a, b, -b.width / 2 + gq * ys, -b.height / 2 - Hl * gq);
          break;
        case rs.ⵠⲆⲆΔⵠ:
          uv(a, b, -b.width / 2, -b.height / 2 - gq * 18);
          break;
        case rs.ΔΔⵠⵠⲆ:
          uv(a, b, -b.width / Xj, -b.height / nq - gq * 10);
          break;
        case rs.ⵠⲆⲆⵠⲆ:
          uv(a, b, -b.width / dj, -b.height / 2 - h * gq);
          break;
        case rs.ΔⲆⲆⲆⲆ:
          zv(a, b, -b.width / 4, -b.height / Ur - gq * Fk);
          break;
        case rs.ΔⵠΔᐃΔ:
          uv(a, b, -b.width / 2 - or * gq, -b.height / Sa - gq * 23);
          break;
        case rs.ⵠⲆⵠⵠᐃ:
          uv(a, b, -b.width / kg, -b.height / nq - gq * 5);
          break;
        case rs.Ⲇᐃᐃᐃⵠ:
          uv(a, b, -b.width / 2, -b.height / 2 - gq * ys);
          break;
        case rs.ᐃⵠⲆΔⵠ:
          uv(a, b, -b.width / dj + gq * 1.5, -b.height / Ir - gq * Zk);
          break;
        case rs.ⲆΔⲆΔᐃ:
        case rs.ⵠᐃⵠⲆⲆ:
        case rs.ΔΔᐃⲆᐃ:
        case rs.ⵠⲆⵠⵠⵠ:
        case rs.ⵠᐃᐃΔⵠ:
        case rs.ΔΔᐃⲆⲆ:
        case rs.ΔΔΔᐃᐃ:
        case rs.ⲆᐃΔⵠⲆ:
        case rs.ΔΔⵠᐃᐃ:
        case rs.ᐃⲆⵠⵠⲆ:
        case rs.ΔⲆⵠⵠᐃ:
          zv(a, b, -b.width / xs, -b.height / Ol + gq * Ci);
          break;
        case rs.ⵠΔΔΔᐃ:
        case rs.ⵠᐃΔΔⵠ:
          uv(a, b, -b.width / 2 - Gs * gq, -b.height / 2 - gq * 2);
          break;
        case rs.ⵠΔⲆᐃⲆ:
          uv(a, b, -b.width / nl, -b.height / 2 - gq * pn);
          break;
        case rs.ⵠⲆᐃⵠⲆ:
          uv(a, b, -b.width / Ir, -b.height / dj - gq * 2);
          break;
        case rs.ᐃⲆⲆΔⲆ:
          uv(a, b, -b.width / 2, -b.height / yl - Xj * gq);
          break;
        case rs.ᐃⵠⲆⲆⲆ:
          uv(a, b, -b.width / 2 + gq * 2, -b.height / 2);
          break;
        case rs.ⵠⵠᐃᐃⲆ:
          uv(a, b, -b.width / 2, -b.height / 2 - Gs * gq);
          break;
        case rs.ⲆⲆΔⵠⲆ:
        case rs.ΔⲆⵠΔⲆ:
        case rs.ⵠⲆᐃⵠⵠ:
          uv(a, b, -b.width / 2 - gq * or, -b.height / 2);
          break;
        case rs.Ⲇᐃⵠᐃᐃ:
          uv(a, b, -b.width / 2, -b.height / cn + Ts * gq);
          break;
        case rs.ΔΔⲆⵠⲆ:
        case rs.ⵠΔΔⵠⵠ:
          uv(a, b, -b.width / 2, -b.height / Pn + _j * gq);
          break;
        case rs.ⵠΔᐃΔⲆ:
          uv(a, b, -b.width / 2, -b.height / Og - gq * 4);
      }
    }
  }
  function Yu() {
    if (!this.ΔᐃΔᐃᐃ && this.ⲆΔⵠⵠΔ !== 0) {
      if (this.x != this.r.x || this.r.y != this.y) {
        var a = (ⵠⲆᐃⲆ.ᐃᐃⵠⵠⵠⵠΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / Ts) % (Math.PI * uj);
        this.ᐃⲆᐃᐃΔ = ⵠⲆᐃⲆ.ΔΔΔⵠⲆᐃⵠ(a, this.ᐃⲆᐃᐃΔ);
        this.ᐃⲆᐃᐃΔ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(this.ᐃⲆᐃᐃΔ, a, 0.018);
      }
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      Lo.rotate(this.ᐃⲆᐃᐃΔ);
      if (ts.ΔⵠⲆⲆⵠ === this.ⲆΔⵠⵠΔ) {
        if (this.ΔΔⲆⲆⵠ > 50 || this.ⲆⲆΔᐃΔ > 0) {
          if (this.ΔΔⲆⲆⵠ > 50) {
            this.ⲆⲆΔᐃΔ = Math.min(Zk, this.ⲆⲆΔᐃΔ + Cf);
          } else {
            this.ⲆⲆΔᐃΔ = Math.max(0, this.ⲆⲆΔᐃΔ - Cf);
          }
          Lo.globalAlpha = this.ⲆⲆΔᐃΔ;
          var b = ⵠᐃ[rs.ΔⵠᐃⵠⵠⲆⵠ][uf.time];
          zv(rs.ΔⵠᐃⵠⵠⲆⵠ, b, -b.width / 4, -b.height / xs);
          Lo.globalAlpha = El;
        }
        b = ⵠᐃ[rs.ΔⵠⲆⲆⵠ][uf.time];
        zv(rs.ΔⵠⲆⲆⵠ, b, -b.width / 4, -b.height / 4);
      } else if (ts.ⵠⲆⵠΔⵠ === this.ⲆΔⵠⵠΔ) {
        this.ᐃⵠⵠⵠⵠ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(this.ᐃⵠⵠⵠⵠ, this.ΔΔⲆⲆⵠ, 0.018);
        this.ΔᐃΔⲆⵠⵠⵠ.ᐃᐃᐃ();
        if (this.ΔΔⲆⲆⵠ > 85) {
          this.ⲆⲆΔᐃΔ = Math.min(1, this.ⲆⲆΔᐃΔ + Cf / 4);
        } else {
          this.ⲆⲆΔᐃΔ = Math.max(0.1, this.ⲆⲆΔᐃΔ - Cf);
        }
        b = ⵠᐃ[rs.ᐃΔⲆⵠⵠᐃⲆ][uf.time];
        zv(rs.ᐃΔⲆⵠⵠᐃⲆ, b, -b.width / Yr, -b.height / Ik);
        b = ⵠᐃ[rs.ⵠᐃᐃΔⵠΔⵠ][uf.time];
        ⲆⲆⵠ = -b.width;
        ᐃᐃⲆ = -b.height;
        Lo.save();
        Lo.translate(gq * -da, gq * -20);
        Lo.rotate(this.ΔᐃΔⲆⵠⵠⵠ.ⲆⵠⲆ * this.ⲆⲆΔᐃΔ);
        Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / nl, ᐃᐃⲆ / 2);
        Lo.restore();
        b = ⵠᐃ[rs.ΔᐃⲆⵠΔⲆΔ][uf.time];
        Lo.save();
        Lo.translate(gq * 20, gq * -20);
        Lo.rotate(-this.ΔᐃΔⲆⵠⵠⵠ.ⲆⵠⲆ * this.ⲆⲆΔᐃΔ);
        Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / pn, ᐃᐃⲆ / 2);
        Lo.restore();
      } else if (ts.ΔᐃⵠΔⵠ === this.ⲆΔⵠⵠΔ) {
        this.ᐃⵠⵠⵠⵠ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(this.ᐃⵠⵠⵠⵠ, this.ΔΔⲆⲆⵠ, 0.018);
        this.ΔᐃΔⲆⵠⵠⵠ.ᐃᐃᐃ();
        if (this.ΔΔⲆⲆⵠ > 85) {
          this.ⲆⲆΔᐃΔ = Math.min(1, this.ⲆⲆΔᐃΔ + Cf / Eg);
        } else {
          this.ⲆⲆΔᐃΔ = Math.max(0.1, this.ⲆⲆΔᐃΔ - Cf);
        }
        b = ⵠᐃ[rs.ⵠᐃΔⲆΔᐃⲆ][uf.time];
        zv(rs.ⵠᐃΔⲆΔᐃⲆ, b, -b.width / 4, -b.height / T);
        b = ⵠᐃ[rs.ⵠⲆⲆⲆᐃⲆᐃ][uf.time];
        ⲆⲆⵠ = -b.width;
        ᐃᐃⲆ = -b.height;
        Lo.save();
        Lo.translate(gq * -40, gq * -45);
        Lo.rotate(this.ΔᐃΔⲆⵠⵠⵠ.ⲆⵠⲆ * this.ⲆⲆΔᐃΔ);
        Rm(Lo, b, -ⲆⲆⵠ / jo, -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / 2);
        Lo.restore();
        b = ⵠᐃ[rs.ⵠⲆᐃᐃⵠⵠⲆ][uf.time];
        Lo.save();
        Lo.translate(gq * 40, gq * -45);
        Lo.rotate(this.ⲆⲆΔᐃΔ * -this.ΔᐃΔⲆⵠⵠⵠ.ⲆⵠⲆ);
        Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / Ur, ⲆⲆⵠ / yl, ᐃᐃⲆ / Xj);
        Lo.restore();
      } else if (ts.ⲆⲆⲆᐃⲆ === this.ⲆΔⵠⵠΔ) {
        this.ᐃⵠⵠⵠⵠ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(this.ᐃⵠⵠⵠⵠ, this.ΔΔⲆⲆⵠ, 0.018);
        this.ΔᐃΔⲆⵠⵠⵠ.ᐃᐃᐃ();
        if (this.ΔΔⲆⲆⵠ > 85) {
          this.ⲆⲆΔᐃΔ = Math.min(y, this.ⲆⲆΔᐃΔ + Cf / 4);
        } else {
          this.ⲆⲆΔᐃΔ = Math.max(0.1, this.ⲆⲆΔᐃΔ - Cf);
        }
        b = ⵠᐃ[rs.ΔΔⲆⲆⲆⲆⵠ][uf.time];
        zv(rs.ΔΔⲆⲆⲆⲆⵠ, b, -b.width / Kg, -b.height / Io);
        b = ⵠᐃ[rs.ᐃⲆⵠⲆΔⵠΔ][uf.time];
        ⲆⲆⵠ = -b.width;
        ᐃᐃⲆ = -b.height;
        Lo.save();
        Lo.translate(gq * -40, gq * -45);
        Lo.rotate(this.ⲆⲆΔᐃΔ * this.ΔᐃΔⲆⵠⵠⵠ.ⲆⵠⲆ);
        Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / 2, ᐃᐃⲆ / Ci);
        Lo.restore();
        b = ⵠᐃ[rs.ΔΔᐃⲆⲆⲆΔ][uf.time];
        Lo.save();
        Lo.translate(gq * 40, gq * -45);
        Lo.rotate(this.ⲆⲆΔᐃΔ * -this.ΔᐃΔⲆⵠⵠⵠ.ⲆⵠⲆ);
        Rm(Lo, b, -ⲆⲆⵠ / 4, -ᐃᐃⲆ / 4, ⲆⲆⵠ / uj, ᐃᐃⲆ / 2);
        Lo.restore();
      } else if (this.ⲆΔⵠⵠΔ === ts.ΔᐃⲆⵠⵠ) {
        this.ᐃⵠⵠⵠⵠ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(this.ᐃⵠⵠⵠⵠ, this.ΔΔⲆⲆⵠ, 0.018);
        b = ⵠᐃ[rs.ΔᐃⲆⵠⵠ][uf.time];
        zv(rs.ΔᐃⲆⵠⵠ, b, -b.width / 4, -b.height / xs);
      } else if (ts.ᐃⲆΔⵠᐃ === this.ⲆΔⵠⵠΔ) {
        this.ᐃⵠⵠⵠⵠ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(this.ᐃⵠⵠⵠⵠ, this.ΔΔⲆⲆⵠ, 0.018);
        b = ⵠᐃ[rs.ᐃⲆΔⵠᐃ][uf.time];
        zv(rs.ᐃⲆΔⵠᐃ, b, -b.width / 4, -b.height / T);
      } else if (this.ⲆΔⵠⵠΔ === ts.ᐃΔⵠⵠⵠ) {
        b = ⵠᐃ[rs.ᐃΔⵠⵠⵠ][uf.time];
        zv(rs.ᐃΔⵠⵠⵠ, b, -b.width / Ik, -b.height / Ol);
      } else if (this.ⲆΔⵠⵠΔ === ts.ᐃⲆᐃⵠᐃ) {
        b = ⵠᐃ[rs.ⲆΔⲆⲆⲆⲆⵠ][uf.time];
        if (this.ΔΔⲆⲆⵠ > 85) {
          this.ⲆⲆΔᐃΔ = Math.min(1, this.ⲆⲆΔᐃΔ + Cf / 4);
        } else {
          this.ⲆⲆΔᐃΔ = Math.max(0, this.ⲆⲆΔᐃΔ - Cf);
        }
        this.ⵠⵠⵠΔΔ += Cf * 60;
        if (this.ⵠⵠⵠΔΔ > 60) {
          this.ⵠⵠⵠΔΔ -= 60;
        }
        var c = (-f + (this.ⵠⵠⵠΔΔ < 30 ? this.ⵠⵠⵠΔΔ / 30 : kr - (this.ⵠⵠⵠΔΔ - 30) / 30) * zl) * this.ⲆⲆΔᐃΔ;
        zv(rs.ⲆΔⲆⲆⲆⲆⵠ, b, -b.width / ll, -b.height / 4 + c);
      } else if (this.ⲆΔⵠⵠΔ === ts.ΔⵠᐃΔⵠ) {
        b = ⵠᐃ[rs.ⲆᐃᐃⵠΔᐃⲆ][uf.time];
        if (this.ΔΔⲆⲆⵠ > 85) {
          this.ⲆⲆΔᐃΔ = Math.min(Th, this.ⲆⲆΔᐃΔ + Cf / 4);
        } else {
          this.ⲆⲆΔᐃΔ = Math.max(0, this.ⲆⲆΔᐃΔ - Cf);
        }
        this.ⵠⵠⵠΔΔ += Cf * 60;
        if (this.ⵠⵠⵠΔΔ > 60) {
          this.ⵠⵠⵠΔΔ -= 60;
        }
        c = this.ⲆⲆΔᐃΔ * ((this.ⵠⵠⵠΔΔ < 30 ? this.ⵠⵠⵠΔΔ / 30 : 1 - (this.ⵠⵠⵠΔΔ - 30) / 30) * 12 - 6);
        zv(rs.ⲆᐃᐃⵠΔᐃⲆ, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆΔⵠⵠΔ === ts.ᐃⲆᐃⲆⲆ) {
        var d = Math.PI / nq;
        var e = Math.PI / 4;
        b = ⵠᐃ[rs.ⵠⲆⵠᐃᐃⵠⵠ][uf.time];
        if (this.ΔΔⲆⲆⵠ > 85) {
          this.ⲆⲆΔᐃΔ = Math.min(El, this.ⲆⲆΔᐃΔ + Cf / va);
        } else {
          this.ⲆⲆΔᐃΔ = Math.max(Et, this.ⲆⲆΔᐃΔ - Cf);
        }
        this.ⵠⵠⵠΔΔ += Cf * 60;
        if (this.ⵠⵠⵠΔΔ > 60) {
          this.ⵠⵠⵠΔΔ -= 60;
        }
        c = this.ⲆⲆΔᐃΔ * ((this.ⵠⵠⵠΔΔ < 30 ? this.ⵠⵠⵠΔΔ / 30 : uq - (this.ⵠⵠⵠΔΔ - 30) / 30) * 12 - 6);
        zv(rs.ⵠⲆⵠᐃᐃⵠⵠ, b, -b.width / 4 + c, -b.height / Ol);
        Lo.restore();
        Lo.save();
        Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
        Lo.rotate(Math.PI + this.ᐃⲆᐃᐃΔ + e);
        Lo.translate(120, c);
        Lo.rotate(d);
        b = ⵠᐃ[rs.ⵠⲆⲆΔΔᐃⲆ][uf.time];
        ⲆⲆⵠ = -b.width;
        ᐃᐃⲆ = -b.height;
        Rm(Lo, b, -ⲆⲆⵠ / Ls, -ᐃᐃⲆ / cn, ⲆⲆⵠ, ᐃᐃⲆ);
        Lo.restore();
        Lo.save();
        Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
        Lo.rotate(Math.PI + this.ᐃⲆᐃᐃΔ + d + e);
        Lo.translate(120, c);
        Lo.rotate(d);
        b = ⵠᐃ[rs.ΔᐃΔⵠⲆⵠⲆ][uf.time];
        ⲆⲆⵠ = -b.width;
        ᐃᐃⲆ = -b.height;
        Rm(Lo, b, -ⲆⲆⵠ / Ir, -ᐃᐃⲆ / kg, ⲆⲆⵠ, ᐃᐃⲆ);
      }
      Lo.restore();
    }
  }
  function Zu() {
    if (this.message !== Kk) {
      var a = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length > 0 ? -95 : 0;
      Rm(Lo, this.message, 0, cq - this.message.height + a);
    }
  }
  function _u() {
    if (this.enabled && this.ΔⵠΔΔⵠ >= 0) {
      var a = new Date().getTime() - this.ΔⵠΔΔⵠ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (fw.ᐃΔⲆᐃᐃⵠⵠ > a) {
        a = fw.ᐃΔⲆᐃᐃⵠⵠ - a;
        this.label ||= uu(gq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", Yq);
        if (a != this.now || !this.ᐃΔΔΔⵠⵠⵠ) {
          this.now = a;
          this.ᐃΔΔΔⵠⵠⵠ = uu(gq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Rm(Lo, this.label, (Oo - this.label.width) / nq, nh * gq);
        Lo.globalAlpha = b;
        Rm(Lo, this.ᐃΔΔΔⵠⵠⵠ, (Oo - this.label.width) / pn - this.ᐃΔΔΔⵠⵠⵠ.width + gq * 15, gq * dk);
        Lo.globalAlpha = El;
      }
    }
  }
  function av(a, b) {
    if (this.text) {
      if (this.timeout.ᐃⵠᐃ) {
        Lo.globalAlpha = Dj - this.timeout.ⲆⵠⲆ;
      } else {
        Lo.globalAlpha = vg;
      }
      if (!this.label) {
        this.label = uu(gq, this.text, 40, a, null, null, null, null, null, b, j);
      }
      Rm(Lo, this.label, (Oo - this.label.width) / 2, gq * 50);
      Lo.globalAlpha = bq;
      if (this.timeout.ᐃᐃᐃ() && this.timeout.ᐃⵠᐃ == 0) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function bv(b, c, d) {
    if (ck !== c.ⲆᐃⵠⵠⵠᐃⲆ()) {
      return c;
    }
    var e = ⲆⲆΔᐃⲆΔⵠ[d][b];
    if (e === undefined) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var h = c.height;
      e.width = g;
      e.height = h;
      f.drawImage(c, 0, Et);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ᐃⵠⲆᐃΔⲆΔⲆⲆ[d];
      f.fillRect(0, 0, g, h);
      ⲆⲆΔᐃⲆΔⵠ[d][b] = e;
    }
    return e;
  }
  function cv() {
    var c = 0;
    switch (this.right) {
      case rs.ΔⵠᐃⲆⲆ:
      case rs.ⵠⲆᐃⲆⵠ:
      case rs.ΔᐃᐃΔᐃ:
      case rs.ΔⵠΔⵠⲆ:
      case rs.ᐃᐃⵠᐃΔ:
      case rs.ⵠᐃᐃᐃΔ:
        c = 1;
    }
    if (this.ΔᐃΔᐃᐃ) {
      for (var f = 0; this.bubbles.length > f; f++) {
        var h = this.bubbles[f];
        if (h.ᐃⲆⵠΔᐃ > 0.5) {
          var j = 1 - (h.ᐃⲆⵠΔᐃ - 0.5) * 2;
        } else {
          j = Ts * h.ᐃⲆⵠΔᐃ;
        }
        Lo.globalAlpha = j;
        var k = ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ][uf.time][h.id];
        Rm(Lo, k, Sw.ᐃΔΔⵠ.x + h.x - k.width / 2, Sw.ᐃΔΔⵠ.y + h.y - k.height / 2);
        Lo.globalAlpha = 1;
      }
    } else {
      Lo.save();
      Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
      uf.ⵠᐃᐃᐃᐃᐃΔⵠⲆ(this);
      if (this.action & _v.ⵠΔᐃᐃΔⵠᐃ) {
        (function (a) {
          if (a.right >= Yl) {
            switch (a.right) {
              case rs.ⵠⲆⲆⲆᐃ:
                Lo.save();
                var b = a.attack.ⲆⵠⲆ * -_g / Math.PI;
                if (a.attack.ᐃⵠᐃ) {
                  var c = -Math.PI / Ss - (Math.PI / 3 + a.attack.ⲆⵠⲆ) / 3;
                } else {
                  c = a.attack.ⲆⵠⲆ;
                }
                Lo.rotate(a.angle - Math.PI / Ts + c);
                Lo.globalAlpha = b / 1.2;
                Tb(Lo, gq * -40, gq * 90, gq * Yo);
                yb(Lo, "#0B6A84");
                Lo.globalAlpha = b / 1.2;
                Tb(Lo, gq * -52, gq * 100, gq * _j);
                yb(Lo, "#0B6A84");
                Lo.globalAlpha = b / 1.2;
                Tb(Lo, gq * -30, gq * 95, qa * gq);
                yb(Lo, "#0B6A84");
                Lo.globalAlpha = 1;
                Lo.restore();
                break;
              case rs.ΔⲆᐃΔΔ:
              case rs.ΔⵠⲆᐃⵠ:
              case rs.ΔⵠⲆⵠⵠ:
              case rs.ⲆΔⵠᐃⲆ:
                if (a.ⵠΔⲆⵠⵠΔᐃ === 1) {
                  break;
                }
                if (fs < a.ᐃⵠⲆᐃᐃ) {
                  var d = rs.ΔᐃⵠⵠⲆᐃΔ[uf.time];
                } else {
                  d = a.ⲆᐃⲆΔⲆⲆⵠ > 0 || a.ⲆᐃⲆΔᐃ > lt ? rs.ᐃᐃⵠΔⲆⲆⵠ[uf.time] : rs.ⲆᐃⲆᐃⵠⲆⲆ[uf.time];
                }
                b = a.attack.ⲆⵠⲆ * -3 / Math.PI;
                if ((c = a.attack.ᐃⵠᐃ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, fs)) === dh) {
                  a.ⵠᐃᐃⵠⲆᐃᐃ = a.angle;
                }
                Lo.save();
                Lo.rotate(a.ⵠᐃᐃⵠⲆᐃᐃ - Math.PI / uj);
                Lo.globalAlpha = b;
                var e = gq * 25 + c * 25;
                Tb(Lo, e, gq * 80, rl * gq);
                yb(Lo, d);
                Tb(Lo, -e, gq * 80, gq * 15);
                yb(Lo, d);
                Lo.globalAlpha = Zn;
                Lo.restore();
            }
          }
        })(this);
      }
      Lo.save();
      Lo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & _v.ⵠΔᐃᐃΔⵠᐃ)) {
        if (this.action & _v.IDLE || this.ⲆΔⵠⵠΔ !== 0) {
          this.ΔΔⵠᐃⵠⵠᐃ.ᐃᐃᐃ();
        } else if (this.action & _v.ΔⵠΔⲆᐃᐃⵠ) {
          this.ⲆⲆⵠⲆᐃⵠⲆ.ᐃᐃᐃ();
        }
      }
      var m;
      var p = this.ΔΔⵠᐃⵠⵠᐃ.ⲆⵠⲆ;
      var q = this.ⲆⲆⵠⲆᐃⵠⲆ.ⲆⵠⲆ;
      if (rs.ⵠⲆᐃⵠⲆ === this.ⲆⲆⲆⲆⵠ) {
        k = ⵠᐃ[rs.Ⲇⵠⵠⵠᐃ][uf.time];
        m = rs.Ⲇⵠⵠⵠᐃ;
      } else if (rs.ⵠᐃⵠⲆⲆ === this.ⲆⲆⲆⲆⵠ) {
        k = ⵠᐃ[rs.ⵠΔΔᐃΔ][uf.time];
        m = rs.ⵠΔΔᐃΔ;
      } else if (this.ⲆⲆⲆⲆⵠ === rs.ΔΔᐃⲆᐃ) {
        k = ⵠᐃ[rs.ΔⲆⵠⵠⲆΔΔ][uf.time];
        m = rs.ΔⲆⵠⵠⲆΔΔ;
      } else if (this.ⲆⲆⲆⲆⵠ === rs.ⵠⲆⵠⵠⵠ) {
        k = ⵠᐃ[rs.ⵠⲆⲆΔᐃΔⲆ][uf.time];
        m = rs.ⵠⲆⲆΔᐃΔⲆ;
      } else if (this.ⵠⲆᐃΔΔᐃᐃ) {
        k = ⵠᐃ[rs.ΔᐃⵠⵠΔᐃⲆ][uf.time];
        m = rs.ΔᐃⵠⵠΔᐃⲆ;
      } else {
        k = ⵠᐃ[rs.ⵠⵠᐃᐃᐃ][this.ᐃᐃᐃⵠ][uf.time];
        m = rs.ⵠⵠᐃᐃᐃ;
      }
      ΔΔⲆⲆ = ⵠᐃ[rs.ⵠⵠⵠᐃΔ][uf.time];
      var w = k;
      var l = m;
      if (this.action & _v.ⵠΔᐃᐃΔⵠᐃ) {
        if (this.attack.ᐃᐃᐃ() && this.attack.ᐃⵠᐃ == Zg) {
          this.ΔⲆⲆⲆΔ = !this.ΔⲆⲆⲆΔ;
          this.action -= _v.ⵠΔᐃᐃΔⵠᐃ;
          if (Sw.ᐃᐃⲆΔ == this.ᐃᐃⲆΔ) {
            Sw.control.ΔᐃΔⵠ = Bs;
          }
        }
        if (this.right >= 0) {
          this.ΔⲆⲆⲆΔ = de;
        }
        var g = this.ΔⲆⲆⲆΔ ? this.attack.ⲆⵠⲆ : -this.attack.ⲆⵠⲆ / 3;
        var x = this.ΔⲆⲆⲆΔ ? this.attack.ⲆⵠⲆ / 3 : -this.attack.ⲆⵠⲆ;
        if (this.ⵠⲆᐃΔΔᐃᐃ) {
          Lo.save();
          Lo.rotate(g);
          uv(m, k, -k.width / 2 - (66 + p) * gq, -k.height / Pn + gq * (5 + q));
          Lo.restore();
          Lo.save();
          Lo.rotate(x);
          uv(m, k, -k.width / 2 + (66 + p) * gq, -k.height / 2 + (5 + q) * gq);
          Lo.restore();
        } else if (c === ka) {
          if (this.right === rs.ΔⵠΔᐃᐃ) {
            g = -ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ(-g);
          }
          Lo.save();
          Lo.rotate(g);
          uv(rs.ⵠⵠⵠᐃΔ, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 - gq * (49 + p), -ΔΔⲆⲆ.height / 2 + (15 + q) * gq);
          if (rs.ᐃᐃⵠⵠⲆ === this.right) {
            var b = ⵠᐃ[this.right][this.ᐃⲆⲆΔΔ][uf.time];
            Iv(this.right, this.ᐃⲆⲆΔΔ, b, -b.width / Ik - gq * (62 + p), -b.height / jo + gq * (q + 18));
          } else {
            Np(this.right, p, q);
          }
          if (m >= rs.ⵠΔΔᐃΔ) {
            zv(m, k, -k.width / xs - gq * (49 + p), -k.height / Eg + gq * (P + q));
          } else if (m !== rs.Ⲇⵠⵠⵠᐃ) {
            Iv(m, this.ᐃᐃᐃⵠ, k, -k.width / Ah - (49 + p) * gq, -k.height / mi + gq * (11 + q));
          } else {
            uv(m, k, -k.width / 2 - gq * (49 + p), -k.height / 2 + (ig + q) * gq);
          }
          Lo.restore();
          Lo.save();
          Lo.rotate(x);
          uv(rs.ⵠⵠⵠᐃΔ, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / cn + (49 + p) * gq, -ΔΔⲆⲆ.height / 2 + gq * (15 + q));
          if (rs.ⵠΔΔᐃΔ <= m) {
            zv(m, k, -k.width / Ol + (49 + p) * gq, -k.height / Yr + (dl + q) * gq);
          } else if (m !== rs.Ⲇⵠⵠⵠᐃ) {
            Iv(m, this.ᐃᐃᐃⵠ, k, -k.width / 4 + gq * (49 + p), -k.height / Qa + (11 + q) * gq);
          } else {
            uv(m, k, -k.width / Pn + gq * (49 + p), -k.height / it + gq * (11 + q));
          }
          Lo.restore();
        }
      } else if (this.ⵠⲆᐃΔΔᐃᐃ) {
        uv(m, k, -k.width / 2 - gq * (66 + p), -k.height / 2 + gq * (5 + q));
        uv(m, k, -k.width / Ts + (66 + p) * gq, -k.height / 2 + (5 + q) * gq);
      } else if (Ob === c) {
        uv(rs.ⵠⵠⵠᐃΔ, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 - gq * (49 + p), -ΔΔⲆⲆ.height / 2 + (Uq + q) * gq);
        if (this.right === rs.ᐃᐃⵠⵠⲆ) {
          b = ⵠᐃ[this.right][this.ᐃⲆⲆΔΔ][uf.time];
          Iv(this.right, this.ᐃⲆⲆΔΔ, b, -b.width / 4 - (62 + p) * gq, -b.height / 4 + gq * (q + Fa));
        } else {
          Np(this.right, p, q);
        }
        if (m >= rs.ⵠΔΔᐃΔ) {
          zv(m, k, -k.width / qa - gq * (49 + p), -k.height / T + gq * (11 + q));
        } else if (m !== rs.Ⲇⵠⵠⵠᐃ) {
          Iv(m, this.ᐃᐃᐃⵠ, k, -k.width / ll - (49 + p) * gq, -k.height / T + (11 + q) * gq);
        } else {
          uv(m, k, -k.width / nl - gq * (49 + p), -k.height / 2 + gq * (11 + q));
        }
        uv(rs.ⵠⵠⵠᐃΔ, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 + (49 + p) * gq, -ΔΔⲆⲆ.height / 2 + (15 + q) * gq);
        if (m >= rs.ⵠΔΔᐃΔ) {
          zv(m, k, -k.width / Ah + gq * (49 + p), -k.height / ll + gq * (11 + q));
        } else if (m !== rs.Ⲇⵠⵠⵠᐃ) {
          Iv(m, this.ᐃᐃᐃⵠ, k, -k.width / 4 + gq * (49 + p), -k.height / 4 + gq * (11 + q));
        } else {
          uv(m, k, -k.width / ab + gq * (49 + p), -k.height / nq + gq * (11 + q));
        }
      }
      if (this.ⲆⵠⲆⲆᐃ && this.ⲆⲆⲆⲆⵠ < 1) {
        k = ⵠᐃ[rs.ⵠⵠᐃΔ][this.ᐃᐃᐃᐃⵠᐃⲆ][uf.time];
        Iv(rs.ⵠⵠᐃΔ, this.ᐃᐃᐃᐃⵠᐃⲆ, k, -k.width / Qa, -k.height / 4 - gq * 39);
      }
      if (this.ⵠⲆᐃΔΔᐃᐃ) {
        k = ⵠᐃ[rs.ᐃΔᐃΔⵠΔⲆ][uf.time];
        uv(rs.ᐃΔᐃΔⵠΔⲆ, k, -k.width / 2, -k.height / Pn);
        this.ΔⵠΔΔⵠᐃΔ.ᐃᐃᐃ();
        k = ⵠᐃ[rs.ΔⵠⵠⵠⲆᐃᐃ][uf.time];
        uv(rs.ΔⵠⵠⵠⲆᐃᐃ, k, -k.width / kg, -k.height / 2 + this.ΔⵠΔΔⵠᐃΔ.ⲆⵠⲆ);
      } else {
        k = ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][this.ᐃᐃᐃⵠ][uf.time];
        if (this.ⲆⲆⲆⲆⵠ !== rs.ⵠⲆᐃⵠⲆ && (Iv(rs.ᐃⵠⵠᐃⵠᐃΔ, this.ᐃᐃᐃⵠ, k, -k.width / 4, -k.height / 4), this.ⲆⲆⵠⲆⲆ > 0)) {
          k = ⵠᐃ[rs.ᐃⲆⲆᐃᐃ][this.ⲆⲆⵠⲆⲆ][uf.time];
          Iv(rs.ᐃⲆⲆᐃᐃ, this.ⲆⲆⵠⲆⲆ, k, -k.width / Ol, -k.height / xs);
        }
      }
      if (this.action & _v.ΔⵠⲆᐃᐃΔⲆ) {
        if (this.ⲆΔᐃⵠⲆ.ᐃᐃᐃ() && this.ⲆΔᐃⵠⲆ.ᐃⵠᐃ == As) {
          this.action -= _v.ΔⵠⲆᐃᐃΔⲆ;
        }
        Lo.globalAlpha = 0.6 - this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ;
        if (this.ⵠⲆᐃΔΔᐃᐃ) {
          k = ⵠᐃ[rs.ⵠⵠΔⲆⲆΔⵠ];
          Rm(Lo, k, -k.width / cn, -k.height / Xj);
        } else {
          k = bv(this.ᐃᐃᐃⵠ, ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][this.ᐃᐃᐃⵠ][Eu], ⵠⲆⲆⵠⲆΔᐃⵠΔ);
          Rm(Lo, k, k.width / oo, k.height / Ol, -k.width / 2, -k.height / Pn);
        }
        Lo.globalAlpha = 1;
      }
      if (this.action & _v.ΔΔΔⵠᐃΔⵠ) {
        if (this.ⵠⵠΔⵠΔΔΔ.ᐃᐃᐃ() && Va == this.ⵠⵠΔⵠΔΔΔ.ᐃⵠᐃ) {
          this.action -= _v.ΔΔΔⵠᐃΔⵠ;
        }
        Lo.globalAlpha = 0.6 - this.ⵠⵠΔⵠΔΔΔ.ⲆⵠⲆ;
        k = ⵠᐃ[rs.ΔΔΔⵠᐃΔⵠ];
        Rm(Lo, k, -k.width / 2, -k.height / 2);
        Lo.globalAlpha = Dj;
      }
      if (this.action & _v.ΔⲆⵠⲆ) {
        if (this.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && this.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
          this.action -= _v.ΔⲆⵠⲆ;
        }
        Lo.globalAlpha = 0.6 - this.Ⲇⵠᐃⵠ.ⲆⵠⲆ;
        if (this.ⵠⲆᐃΔΔᐃᐃ) {
          k = ⵠᐃ[rs.ⵠΔᐃᐃⲆⵠΔ];
          Rm(Lo, k, -k.width / Xj, -k.height / ys);
        } else {
          k = bv(this.ᐃᐃᐃⵠ, ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][this.ᐃᐃᐃⵠ][dh], ⲆⲆΔⲆⵠⵠΔΔΔ);
          Rm(Lo, k, k.width / 4, k.height / ll, -k.width / pn, -k.height / 2);
        }
        Lo.globalAlpha = 1;
      }
      if (this.action & _v.ⵠΔᐃⲆⲆ) {
        if (this.freeze.ᐃᐃᐃ() && this.freeze.ᐃⵠᐃ == Vq) {
          this.action -= _v.ⵠΔᐃⲆⲆ;
        }
        Lo.globalAlpha = 0.6 - this.freeze.ⲆⵠⲆ;
        k = bv(this.ᐃᐃᐃⵠ, ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][this.ᐃᐃᐃⵠ][0], ⵠᐃΔᐃⵠⵠΔⵠⵠ);
        Rm(Lo, k, k.width / Eg, k.height / qa, -k.width / Ts, -k.height / 2);
        Lo.globalAlpha = 1;
      }
      if (this.action & _v.ᐃᐃᐃΔᐃᐃΔ) {
        if (this.ⵠⵠⲆᐃⵠᐃⵠ.ᐃᐃᐃ() && this.ⵠⵠⲆᐃⵠᐃⵠ.ᐃⵠᐃ == Vq) {
          this.action -= _v.ᐃᐃᐃΔᐃᐃΔ;
        }
        Lo.globalAlpha = 0.6 - this.ⵠⵠⲆᐃⵠᐃⵠ.ⲆⵠⲆ;
        if (this.ⵠⲆᐃΔΔᐃᐃ) {
          k = ⵠᐃ[rs.ⵠⲆⲆⵠⵠⲆΔ];
          Rm(Lo, k, -k.width / 2, -k.height / 2);
        } else {
          k = bv(this.ᐃᐃᐃⵠ, ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][this.ᐃᐃᐃⵠ][0], ⲆⲆΔΔⲆⲆⲆᐃΔ);
          Rm(Lo, k, k.width / Ur, k.height / 4, -k.width / Og, -k.height / 2);
        }
        Lo.globalAlpha = y;
      }
      Xu(this.ⲆⲆⲆⲆⵠ);
      if (Ws === c) {
        if (this.action & _v.ⵠΔᐃᐃΔⵠᐃ) {
          p += this.attack.ⲆⵠⲆ * we;
        }
        uv(rs.ⵠⵠⵠᐃΔ, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / 2 - gq * 26, -ΔΔⲆⲆ.height / 2 + gq * (31 + q + p));
        if (l >= rs.ⵠΔΔᐃΔ) {
          zv(l, w, -w.width / jo - gq * 26, -w.height / qa + (27 + q + p) * gq);
        } else if (rs.Ⲇⵠⵠⵠᐃ !== l) {
          Iv(l, this.ᐃᐃᐃⵠ, w, -w.width / 4 - gq * 26, -w.height / 4 + gq * (27 + q + p));
        } else {
          uv(l, w, -w.width / Pn - gq * 26, -w.height / 2 + gq * (27 + q + p));
        }
        uv(rs.ⵠⵠⵠᐃΔ, ΔΔⲆⲆ, -ΔΔⲆⲆ.width / Pn + gq * 26, -ΔΔⲆⲆ.height / pn + (31 + q + p) * gq);
        if (rs.ⵠΔΔᐃΔ <= l) {
          zv(l, w, -w.width / Ol + gq * 26, -w.height / 4 + (27 + q + p) * gq);
        } else if (rs.Ⲇⵠⵠⵠᐃ !== l) {
          Iv(l, this.ᐃᐃᐃⵠ, w, -w.width / T + gq * 26, -w.height / 4 + (27 + q + p) * gq);
        } else {
          uv(l, w, -w.width / it + gq * 26, -w.height / Xj + gq * (27 + q + p));
        }
        Ip(this.right, 0, q + p);
      }
      Lo.restore();
      if (rs.Ⲇᐃⵠᐃᐃ !== this.ⲆⲆⲆⲆⵠ && rs.ⵠⲆᐃⵠⲆ !== this.ⲆⲆⲆⲆⵠ) {
        if (this.ᐃⵠⲆᐃᐃ > 0) {
          if (!this.ᐃᐃΔⲆ.ΔⲆⵠⲆΔⵠⲆ) {
            this.ᐃᐃΔⲆ.ΔⲆⵠⲆΔⵠⲆ = uu(gq, this.ᐃᐃΔⲆ.ᐃᐃⵠⲆΔ, 20, "#187484", "#000", Ts, null, null, gq * 300);
          }
          k = this.ᐃᐃΔⲆ.ΔⲆⵠⲆΔⵠⲆ;
        } else {
          if (!this.ᐃᐃΔⲆ.label) {
            this.ᐃᐃΔⲆ.label = uu(gq, this.ᐃᐃΔⲆ.ᐃᐃⵠⲆΔ, 20, "#FFF", "#000", ys, null, null, gq * 300);
          }
          k = this.ᐃᐃΔⲆ.label;
        }
        if (rs.ⵠⲆᐃ == uf.ⲆⲆⲆ) {
          Lo.globalAlpha = 0.5;
        }
        p = Math.floor(-k.width / 2);
        q = Math.floor(-k.height / pn - gq * 70);
        Rm(Lo, k, p, q);
        if (this.ᐃᐃΔⲆ.level > 0) {
          var z = p + k.width + br;
          k = ⵠᐃ[rs.ᐃΔᐃᐃΔᐃΔ];
          if (ⵠⲆᐃᐃΔᐃᐃ[this.ᐃᐃΔⲆ.level] === Zr) {
            ⵠⲆᐃᐃΔᐃᐃ[this.ᐃᐃΔⲆ.level] = uu(gq, "[" + this.ᐃᐃΔⲆ.level + "]", Rq, "#F9E8A2", "#000", dj, null, null, gq * 50);
          }
          Rm(Lo, ⵠⲆᐃᐃΔᐃᐃ[this.ᐃᐃΔⲆ.level], z, q);
        }
        Lo.globalAlpha = bh;
      } else {
        q = Math.floor(gq * -70);
        p = Math.floor(ⵠᐃ[rs.ΔⵠΔᐃΔⲆⵠ].width / 1.5);
      }
      if (Sw.ⲆⵠⲆΔⵠⵠΔ(this.ⵠⵠⲆΔ)) {
        if (Sw.ᐃᐃⵠᐃᐃ[0] == this.ⵠⵠⲆΔ) {
          k = ⵠᐃ[rs.ⲆᐃΔᐃⲆⲆⲆ];
        } else {
          k = ⵠᐃ[rs.ΔⵠΔᐃΔⲆⵠ];
        }
        Rm(Lo, k, p - k.width - Gs, q - 6);
      }
      Lo.restore();
    }
  }
  function dv() {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + this.x, Sw.ᐃΔΔⵠ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = zb(gq, this.text[a]);
          this.ΔΔⲆⵠⵠⲆⲆ[a] = dt;
          this.ⲆΔⵠⲆΔⵠⲆ[a] = vl;
        }
        if (a === 1) {
          this.ⲆΔⵠⲆΔⵠⲆ[0] = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(this.ᐃⲆⵠⵠⲆᐃΔ) * 30;
        }
      }
      this.ΔΔⲆⵠⵠⲆⲆ[0] += Cf;
      if (this.text.length > vg) {
        this.ᐃⲆⵠⵠⲆᐃΔ = Math.min(this.ᐃⲆⵠⵠⲆᐃΔ + Cf, ck);
        if (this.ΔΔⲆⵠⵠⲆⲆ[vl] > 1 && this.ᐃⲆⵠⵠⲆᐃΔ > 0.5) {
          this.ΔΔⲆⵠⵠⲆⲆ[$q] += Cf;
        }
      }
      for (a = Hb; a < this.text.length && a < 2; a++) {
        var b = this.ΔΔⲆⵠⵠⲆⲆ[a];
        if (b > gj) {
          Lo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((Ol - b) * 4, 0) : 1;
          Rm(Lo, this.label[a], -this.label[a].width / Sa, -this.ⲆΔⵠⲆΔⵠⲆ[a] + -this.label[a].height / 2 - gq * 110);
        }
      }
      if (this.ΔΔⲆⵠⵠⲆⲆ[Yl] > 4) {
        this.ΔΔⲆⵠⵠⲆⲆ.shift();
        this.text.shift();
        this.ⲆΔⵠⲆΔⵠⲆ.shift();
        this.label.shift();
        this.ᐃⲆⵠⵠⲆᐃΔ = 0;
      }
    }
    Lo.restore();
  }
  ⲆⲆΔⲆⵠⵠΔΔΔ = hk;
  ⵠⲆⲆⵠⲆΔᐃⵠΔ = Ng;
  ⵠᐃΔᐃⵠⵠΔⵠⵠ = 2;
  ⲆⲆΔΔⲆⲆⲆᐃΔ = Kb;
  ᐃᐃᐃΔⵠΔᐃΔⵠ = qa;
  ⲆⲆΔᐃⲆΔⵠ = [[], [], [], [], []];
  ᐃⵠⲆᐃΔⲆΔⲆⲆ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var ev = 0;
  function fv(j, e, i, k, n, o, q, a = 0) {
    uf.ⲆΔᐃⵠ[n].ᐃᐃᐃ();
    for (var r = q; r >= a; r--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = Qw.ᐃⲆⵠⲆ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (dq !== x) {
              for (var y = 0; y < x.length; y++) {
                var z = x[y];
                if (z.ᐃᐃᐃ) {
                  if (z.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && z.Ⲇⵠᐃⵠ.ᐃⵠᐃ == Ag) {
                    z.ᐃᐃᐃ = false;
                  }
                  var A = (ck - z.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * Cf * 600 * gq;
                  var B = A * Math.sin(z.angle);
                  var D = A * Math.cos(z.angle);
                } else {
                  B = Eu;
                  D = 0;
                }
                var E = ⵠᐃ[n][uf.time][r];
                var F = uf.ⲆΔᐃⵠ[n].ⲆⵠⲆ * -E.width;
                var G = uf.ⲆΔᐃⵠ[n].ⲆⵠⲆ * -E.height;
                Rm(Lo, E, Sw.ᐃΔΔⵠ.x + z.x - F / 2 + B, Sw.ᐃΔΔⵠ.y + z.y - G / 2 + D, F, G);
              }
            }
          }
        }
      }
    }
  }
  function gv(j, e, i, k, n, o, q, a = 0) {
    for (var r = q; a <= r; r--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; t <= k; t++) {
          var w = Qw.ᐃⲆⵠⲆ[s][t];
          if (w && w[o]) {
            var x = w[o][r];
            if (x !== undefined) {
              for (var y = ks; x.length > y; y++) {
                var z = x[y];
                var A = ⵠᐃ[n][uf.time][r];
                var B = (ev + (s + t) * 3) % 60;
                var D = B < 30 ? B / 30 : bq - (B - 30) / 30;
                var E = -A.width * (1 + D * 0.9 / 30);
                var F = -A.height * (1 + D * 0.9 / 30);
                D = (B = (ev + (s + t) * 7) % 60) < 30 ? B / 30 : Ng - (B - 30) / 30;
                var G = Lo.globalAlpha;
                Lo.globalAlpha = G * (0.9 + D * 0.1);
                Rm(Lo, A, Sw.ᐃΔΔⵠ.x + z.x - E / 2, Sw.ᐃΔΔⵠ.y + z.y - F / 2, E, F);
                Lo.globalAlpha = G;
              }
            }
          }
        }
      }
    }
  }
  var hv = [];
  for (zt = 0; zt < Wo; zt++) {
    var iv = Zk;
    if (Math.random() < 0.25) {
      iv = 0;
    }
    hv.push(iv);
  }
  function jv(c, e, f, i, j, k, m, a, n) {
    if (pl === a) {
      a = Bs;
    }
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = Qw.ᐃⲆⵠⲆ[h][o];
        if (p !== undefined && p[k] !== undefined) {
          var q = p[k];
          if (ml !== q) {
            if (q.scale === 1) {
              var r = ⵠᐃ[j][uf.time][q.ΔⲆΔⵠ];
              Lo.save();
              Lo.translate(Sw.ᐃΔΔⵠ.x + q.x, Sw.ᐃΔΔⵠ.y + q.y);
              Lo.rotate(q.angle);
              Rm(Lo, r, -r.width / 4, -r.height / 4, r.width / cn, r.height / 2);
              Lo.restore();
            } else if (q.scale === yr) {
              for (var t = 0; q.Δᐃᐃ.length > t; t++) {
                Lo.save();
                Lo.translate(Sw.ᐃΔΔⵠ.x + q.x, Sw.ᐃΔΔⵠ.y + q.y);
                Lo.rotate(q.Δᐃᐃ[t].angle);
                r = ⵠᐃ[j][uf.time][q.Δᐃᐃ[t].ΔⲆΔⵠ];
                Rm(Lo, r, -r.width / yr + q.Δᐃᐃ[t].x, -r.height / 3 + q.Δᐃᐃ[t].y, r.width / 1.5, r.height / 1.5);
                Lo.restore();
              }
            } else {
              r = ⵠᐃ[j][uf.time][q.ΔⲆΔⵠ];
              Lo.save();
              Lo.translate(Sw.ᐃΔΔⵠ.x + q.x, Sw.ᐃΔΔⵠ.y + q.y);
              Lo.rotate(q.angle);
              Rm(Lo, r, -r.width / ys, -r.height / 2, r.width, r.height);
              Lo.restore();
            }
          }
        }
      }
    }
  }
  function kv(j, e, i, k, n, o, q, a = undefined, r) {
    if (a === undefined) a = Eu;
    for (var h = q; h >= a; h--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; w <= k; w++) {
          var x = Qw.ᐃⲆⵠⲆ[t][w];
          if (x !== undefined && x[o] !== undefined) {
            var A = x[o][h];
            if (A !== undefined) {
              for (var B = 0; A.length > B; B++) {
                var D = A[B];
                if (D.ᐃᐃᐃ) {
                  if (D.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && D.Ⲇⵠᐃⵠ.ᐃⵠᐃ == 0) {
                    D.ᐃᐃᐃ = As;
                  }
                  var E = gq * (Cf * (1 - D.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * 600);
                  var F = Math.sin(D.angle) * E;
                  var G = E * Math.cos(D.angle);
                } else {
                  F = Et;
                  G = 0;
                }
                for (var H = Ob; ⲆⲆⲆⵠΔⵠᐃ[h].ᐃⵠⵠᐃ > H; H++) {
                  if (Ww !== uf.ⵠΔⵠⵠⵠ[H].ⲆᐃⲆΔⲆΔᐃ) {
                    uf.ⵠΔⵠⵠⵠ[H].ᐃᐃᐃ();
                    uf.ⵠΔⵠⵠⵠ[H].ⲆᐃⲆΔⲆΔᐃ = Ww;
                  }
                  var I = ⵠᐃ[rs.ΔᐃⲆⲆΔ][uf.time][ⲆⲆⲆⵠΔⵠᐃ[h].ⵠΔᐃΔ[H].ⵠⲆⵠ];
                  var J = uf.ⵠΔⵠⵠⵠ[H].ⲆⵠⲆ * -I.width;
                  var K = uf.ⵠΔⵠⵠⵠ[H].ⲆⵠⲆ * -I.height;
                  Rm(Lo, I, Sw.ᐃΔΔⵠ.x + D.x - J / 4 + F + ⲆⲆⲆⵠΔⵠᐃ[h].ⵠΔᐃΔ[H].x, Sw.ᐃΔΔⵠ.y + D.y - K / 4 + G + ⲆⲆⲆⵠΔⵠᐃ[h].ⵠΔᐃΔ[H].y, J / 2, K / Ls);
                }
              }
            }
          }
        }
      }
    }
  }
  function lv(f, e, i, j, k, n, o, a, q) {
    if (ml === a) {
      a = 0;
    }
    for (var h = o; h >= a; h--) {
      for (var r = f; e >= r; r++) {
        for (var t = i; j >= t; t++) {
          if (ks >= q || hv[(r + t * q) % hv.length] !== $q) {
            var w = Qw.ᐃⲆⵠⲆ[r][t];
            if (w !== gg && w[n] !== undefined) {
              var x = w[n][h];
              if (x !== undefined) {
                for (var y = Yl; y < x.length; y++) {
                  var z = x[y];
                  if (z.ᐃᐃᐃ) {
                    if (z.Ⲇⵠᐃⵠ.ᐃᐃᐃ() && z.Ⲇⵠᐃⵠ.ᐃⵠᐃ == Qo) {
                      z.ᐃᐃᐃ = false;
                    }
                    var A = gq * (Cf * (1 - z.Ⲇⵠᐃⵠ.ⲆⵠⲆ) * 600);
                    var B = Math.sin(z.angle) * A;
                    var D = A * Math.cos(z.angle);
                  } else {
                    B = ks;
                    D = 0;
                  }
                  var E = ⵠᐃ[k][uf.time][h];
                  Rm(Lo, E, Sw.ᐃΔΔⵠ.x + z.x - E.width / (ⲆΔᐃᐃⵠ * 2) + B, Sw.ᐃΔΔⵠ.y + z.y - E.height / (ⲆΔᐃᐃⵠ * 2) + D, E.width / ⲆΔᐃᐃⵠ, E.height / ⲆΔᐃᐃⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  ⲆΔᐃᐃⵠ = og;
  ⲆⲆⲆⵠΔⵠᐃ = [{
    ⵠΔᐃΔ: [{
      y: -20,
      x: -128,
      ⵠⲆⵠ: lt
    }, {
      x: -86,
      ⵠⲆⵠ: 1,
      y: -4
    }, {
      y: -74,
      ⵠⲆⵠ: Sa,
      x: -60
    }, {
      x: -22,
      y: -144,
      ⵠⲆⵠ: Yl
    }, {
      ⵠⲆⵠ: 0,
      y: 86,
      x: -58
    }, {
      ⵠⲆⵠ: Go,
      y: -30,
      x: sd
    }, {
      ⵠⲆⵠ: Zn,
      y: -115,
      x: 65
    }, {
      x: 118,
      ⵠⲆⵠ: dt,
      y: -50
    }, {
      y: 15,
      ⵠⲆⵠ: or,
      x: 73
    }, {
      ⵠⲆⵠ: 0,
      x: 67,
      y: 79
    }],
    ᐃⵠⵠᐃ: Sb
  }, {
    ᐃⵠⵠᐃ: 5,
    ⵠΔᐃΔ: [{
      y: -26,
      ⵠⲆⵠ: 0,
      x: -45
    }, {
      ⵠⲆⵠ: 2,
      x: -45,
      y: 20
    }, {
      x: Cg,
      ⵠⲆⵠ: ck,
      y: -60
    }, {
      x: 52,
      y: -x,
      ⵠⲆⵠ: uq
    }, {
      x: 14,
      ⵠⲆⵠ: 0,
      y: 45
    }]
  }, {
    ᐃⵠⵠᐃ: 3,
    ⵠΔᐃΔ: [{
      y: 3,
      x: -30,
      ⵠⲆⵠ: 2
    }, {
      ⵠⲆⵠ: rb,
      y: -38,
      x: 7
    }, {
      ⵠⲆⵠ: 2,
      y: Lj,
      x: 37
    }]
  }, {
    ᐃⵠⵠᐃ: 11,
    ⵠΔᐃΔ: [{
      x: -74,
      y: -87,
      ⵠⲆⵠ: 2
    }, {
      x: -si,
      y: -10,
      ⵠⲆⵠ: 1
    }, {
      ⵠⲆⵠ: 1,
      x: -99,
      y: s
    }, {
      y: 84,
      x: -66,
      ⵠⲆⵠ: ou
    }, {
      y: 123,
      x: -55,
      ⵠⲆⵠ: ck
    }, {
      y: 81,
      ⵠⲆⵠ: 2,
      x: Sd
    }, {
      x: 52,
      ⵠⲆⵠ: 0,
      y: 50
    }, {
      y: An,
      ⵠⲆⵠ: 1,
      x: 138
    }, {
      ⵠⲆⵠ: 0,
      x: 104,
      y: -28
    }, {
      ⵠⲆⵠ: dj,
      y: -56,
      x: 67
    }, {
      ⵠⲆⵠ: 0,
      y: -112,
      x: Lj
    }]
  }, {
    ᐃⵠⵠᐃ: 6,
    ⵠΔᐃΔ: [{
      ⵠⲆⵠ: Sa,
      y: -66,
      x: -33
    }, {
      y: j,
      x: -58,
      ⵠⲆⵠ: 0
    }, {
      x: -Yg,
      y: 44,
      ⵠⲆⵠ: 1
    }, {
      x: 44,
      y: da,
      ⵠⲆⵠ: 0
    }, {
      y: -36,
      ⵠⲆⵠ: 2,
      x: 53
    }, {
      ⵠⲆⵠ: 0,
      y: -62,
      x: 7
    }]
  }, {
    ⵠΔᐃΔ: [{
      x: -19,
      ⵠⲆⵠ: y,
      y: -25
    }, {
      y: gs,
      x: -29,
      ⵠⲆⵠ: nl
    }, {
      y: ea,
      x: mk,
      ⵠⲆⵠ: 0
    }],
    ᐃⵠⵠᐃ: _g
  }];
  var mv = gj;
  var nv = fs;
  var ov = 0;
  var pv = hk;
  function qv(a, b) {
    if (uf.transition) {
      Lo.globalAlpha = bh;
      a.ᐃᐃΔᐃᐃᐃΔ(b);
      uf.time = uf.time ? 0 : 1;
      Lo.globalAlpha = $r - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      a.ᐃᐃΔᐃᐃᐃΔ(b);
      uf.time = uf.time ? 0 : El;
      Lo.globalAlpha = 1;
    } else {
      a.ᐃᐃΔᐃᐃᐃΔ(b);
    }
  }
  function rv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Sw.ᐃΔΔⵠ.x + j - 700;
    var l = Math.max(Sw.ᐃΔΔⵠ.y + e, ho);
    var g = Math.max(-Sw.ᐃΔΔⵠ.y + cq - i - Xl, 0);
    var t = l;
    var b = cq - l - g;
    if (o) {
      var u = q.ⵠⲆⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + fw.ⵠⲆᐃⲆᐃ;
    var F = v;
    var m = t;
    var p = u.x + fw.ⲆᐃⵠΔⵠ;
    var C = b;
    var G = v += u.x + fw.ⲆᐃⵠΔⵠ - Ci;
    if (o) {
      u = q.ⵠⲆⵠ(a);
    } else {
      u = a.r;
    }
    var f = h + fw.ⵠΔⵠⲆⵠ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - 2) - Ls;
    if (o) {
      u = q.ⵠⲆⵠ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h + fw.Ⲇᐃⵠⵠⵠ - v + u.x) - Ab > A) {
      var k = de;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - 2;
    } else {
      k = false;
      v = A;
      D = -1;
    }
    f = h + fw.ᐃⵠⵠΔⵠⲆⵠ - v;
    if (uf.transition) {
      var N = uf.time ? El - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(F, m, p, C);
    if (o) {
      if (uf.transition) {
        N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 70, 76, 42, 139, 155, N);
      } else {
        Lo.fillStyle = rs.ᐃⲆⵠⵠⵠⵠΔ[uf.time];
      }
    } else if (uf.transition) {
      N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (uf.transition) {
          N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
          Lo.fillStyle = Gv(17, 94, 96, 169, 214, 211, N);
        } else {
          Lo.fillStyle = rs.ΔⵠⲆᐃⵠⵠᐃ[uf.time];
        }
      } else if (uf.transition) {
        N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
      } else {
        Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
      }
      Lo.fillRect(L, J, M, B);
    }
    if (hf.ⵠⵠᐃΔΔ && o) {
      q.ⵠⲆⵠⵠᐃᐃᐃⵠⲆ(A, D, G, h, -Sw.ᐃΔΔⵠ.y + m, -Sw.ᐃΔΔⵠ.y + m + C);
    }
  }
  function sv() {
    Lo.globalAlpha = hj;
    if (uf.transition) {
      var a = uf.ΔΔⵠΔ.ᐃᐃᐃ();
    }
    uf.ᐃⲆⲆⲆᐃΔΔⵠⲆ(-Sw.ᐃΔΔⵠ.x, -Sw.ᐃΔΔⵠ.y);
    mv = Math.max(Math.floor(-Sw.ᐃΔΔⵠ.x / uf.ᐃΔΔⲆΔⵠΔ) - Rh, 0);
    nv = Math.min(Math.floor((-Sw.ᐃΔΔⵠ.x + Sw.ᐃΔΔⵠ.w) / uf.ᐃΔΔⲆΔⵠΔ) + T, uf.ⲆⵠᐃΔⵠ - 1);
    ov = Math.max(Math.floor(-Sw.ᐃΔΔⵠ.y / uf.ⵠⵠⵠⲆΔⵠⵠ) - Gt, 0);
    pv = Math.min(Math.floor((-Sw.ᐃΔΔⵠ.y + Sw.ᐃΔΔⵠ.ᐃᐃⲆ) / uf.ⵠⵠⵠⲆΔⵠⵠ) + Ab, uf.ΔΔΔΔᐃ - 1);
    (function () {
      for (var c = uf.ⵠⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
        if ((B = uf.ⵠⵠⵠⲆⲆ[c]).ⵠⲆⵠ === uf.ᐃⵠᐃⲆⲆ) {
          var f = uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ];
          if (B.x1 - 230 - Oo <= -Sw.ᐃΔΔⵠ.x && B.x2 + 330 >= -Sw.ᐃΔΔⵠ.x && -Sw.ᐃΔΔⵠ.y >= B.y1 - cq && B.y2 + dk >= -Sw.ᐃΔΔⵠ.y) {
            var j = B.x2;
            if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
              j -= 610;
            }
            var k = B.x1;
            if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
              k += 610;
            }
            var m = B.y2;
            if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
              m -= 610;
            }
            var p = B.y1;
            if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
              p += 610;
            }
            if (uf.transition) {
              var q = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
              Lo.fillStyle = Gv(f.ⵠΔΔ[0], f.ⵠΔΔ[El], f.ⵠΔΔ[2], f.ⲆⲆⲆ[0], f.ⲆⲆⲆ[1], f.ⲆⲆⲆ[1], q);
            } else {
              Lo.fillStyle = f.ΔΔⲆΔⵠ[uf.time];
            }
            var w = Math.max(Sw.ᐃΔΔⵠ.x + k - yl - 230, hk);
            var x = Math.max(-Sw.ᐃΔΔⵠ.x + Oo - j - 330 - Ci, 0);
            var z = Math.max(Sw.ᐃΔΔⵠ.y + p - 2, 0);
            var A = Math.max(-Sw.ᐃΔΔⵠ.y + cq - m - Fg - nq, Bs);
            Lo.beginPath();
            Lo.fillRect(w, z, Oo - x - w, cq - z - A);
          }
        }
      }
      for (c = uf.ⵠⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
        var B = uf.ⵠⵠⵠⲆⲆ[c];
        if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
          j = B.x2;
          if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
            j -= 400;
          }
          k = B.x1;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            k += 400;
          }
          m = B.y2;
          if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
            m -= 300;
          }
          p = B.y1;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            p += 300;
          }
          if (Go === (B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ) && j - Oo + 120 <= -Sw.ᐃΔΔⵠ.x && j + 820 >= -Sw.ᐃΔΔⵠ.x && -Sw.ᐃΔΔⵠ.y >= p + 88 - cq && m + 50 >= -Sw.ᐃΔΔⵠ.y) {
            Dv(j, p + 88, m - 88, Sw.ᐃⵠⵠΔ[0], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ);
            Ev(j, p + 88, m - 88, Sw.ᐃⵠⵠΔ[ks], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ);
          }
          if (!(B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ) && -Sw.ᐃΔΔⵠ.x >= k - Oo - 700 && -Sw.ᐃΔΔⵠ.x <= k - Fq && -Sw.ᐃΔΔⵠ.y >= p + 88 - cq && -Sw.ᐃΔΔⵠ.y <= m + 50) {
            xv(k, p + 88, m - 88, Sw.ᐃⵠⵠΔ[1], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ);
            rv(k, p + 88, m - 88, Sw.ᐃⵠⵠΔ[1], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ);
          }
          if (Eu === (B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ) && k - 235 - Oo <= -Sw.ᐃΔΔⵠ.x && j + 350 >= -Sw.ᐃΔΔⵠ.x && m - cq - 275 <= -Sw.ᐃΔΔⵠ.y && m + 490 >= -Sw.ᐃΔΔⵠ.y) {
            yv(m - 230, k - 230, j + 230, Sw.ᐃⵠⵠΔ[2], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ);
            Cv(m - 230, k - 230, j + 230, Sw.ᐃⵠⵠΔ[Xj], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ);
          }
          if (!(B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ) && -Sw.ᐃΔΔⵠ.x >= k - 235 - Oo && j + 350 >= -Sw.ᐃΔΔⵠ.x && p - cq - 390 <= -Sw.ᐃΔΔⵠ.y && p + 315 >= -Sw.ᐃΔΔⵠ.y) {
            Bv(p + 310, k - 230, j + 230, Sw.ᐃⵠⵠΔ[3], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ);
            Hv(p + 310, k - 230, j + 230, Sw.ᐃⵠⵠΔ[3], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ);
          }
        }
      }
      for (c = uf.ⵠⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
        B = uf.ⵠⵠⵠⲆⲆ[c];
        if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
          j = B.x2;
          if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
            j -= 400;
          }
          k = B.x1;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            k += 400;
          }
          m = B.y2;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            m -= 300;
          }
          p = B.y1;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            p += 300;
          }
          if (B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ && -Sw.ᐃΔΔⵠ.x >= j - Oo + 120 && j + 820 >= -Sw.ᐃΔΔⵠ.x && -Sw.ᐃΔΔⵠ.y >= p + 88 - cq && -Sw.ᐃΔΔⵠ.y <= m + 50) {
            Dv(j, p + 88, m - 88, Sw.ᐃⵠⵠΔ[0], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ);
          }
          if (B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ && -Sw.ᐃΔΔⵠ.x >= k - Oo - 700 && k - 20 >= -Sw.ᐃΔΔⵠ.x && p + 88 - cq <= -Sw.ᐃΔΔⵠ.y && -Sw.ᐃΔΔⵠ.y <= m + 50) {
            xv(k, p + 88, m - 88, Sw.ᐃⵠⵠΔ[y], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ);
          }
          if (B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ && k - 235 - Oo <= -Sw.ᐃΔΔⵠ.x && j + 350 >= -Sw.ᐃΔΔⵠ.x && m - cq - 275 <= -Sw.ᐃΔΔⵠ.y && -Sw.ᐃΔΔⵠ.y <= m + 490) {
            yv(m - 230, k - 230, j + 230, Sw.ᐃⵠⵠΔ[Og], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ);
          }
          if (ho !== (B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ) && -Sw.ᐃΔΔⵠ.x >= k - 235 - Oo && j + 350 >= -Sw.ᐃΔΔⵠ.x && p - cq - 390 <= -Sw.ᐃΔΔⵠ.y && p + 315 >= -Sw.ᐃΔΔⵠ.y) {
            Bv(p + 310, k - 230, j + 230, Sw.ᐃⵠⵠΔ[3], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ);
          }
        }
      }
      for (c = uf.ⵠⵠⵠⲆⲆ.length - El; c >= ho; c--) {
        if ((B = uf.ⵠⵠⵠⲆⲆ[c]).ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
          f = uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ];
          if (B.x1 - 230 - Oo <= -Sw.ᐃΔΔⵠ.x && -Sw.ᐃΔΔⵠ.x <= B.x2 + 330 && B.y1 - cq <= -Sw.ᐃΔΔⵠ.y && B.y2 + Fg >= -Sw.ᐃΔΔⵠ.y) {
            j = B.x2;
            if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
              if ((B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ) === Ob) {
                j -= 414;
              } else {
                j -= 610;
              }
            }
            k = B.x1;
            if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
              if ((B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ) === dh) {
                k += 414;
              } else {
                k += 610;
              }
            }
            m = B.y2;
            if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
              if (B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ) {
                m -= 610;
              } else {
                m -= 414;
              }
            }
            p = B.y1;
            if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
              if (B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ) {
                p += 610;
              } else {
                p += 414;
              }
            }
            if (uf.transition) {
              q = uf.time ? bh - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
              Lo.fillStyle = Gv(f.ⵠΔΔ[vl], f.ⵠΔΔ[bq], f.ⵠΔΔ[ab], f.ⲆⲆⲆ[Go], f.ⲆⲆⲆ[1], f.ⲆⲆⲆ[2], q);
            } else {
              Lo.fillStyle = f.ΔΔⲆΔⵠ[uf.time];
            }
            w = Math.max(Sw.ᐃΔΔⵠ.x + k - 2 - 230, 0);
            x = Math.max(-Sw.ᐃΔΔⵠ.x + Oo - j - 330 - 2, 0);
            z = Math.max(Sw.ᐃΔΔⵠ.y + p - ys, 0);
            A = Math.max(-Sw.ᐃΔΔⵠ.y + cq - m - 100 - 2, 0);
            Lo.beginPath();
            Lo.fillRect(w, z, Oo - x - w, cq - z - A);
          }
        }
      }
      if (hf.ⵠⵠᐃΔΔ) {
        vv(fv, ov, pv, mv, nv, rs.ⲆᐃⲆᐃΔ, "isl", 2);
        vv(fv, ov, pv, mv, nv, rs.ΔΔⵠᐃⲆ, "isl", pn);
      }
      vv(lv, ov, pv, mv, nv, rs.ΔⲆΔᐃΔ, "isl", 2);
      if (hf.ⵠⵠᐃΔΔ) {
        vv(jv, ov, pv, mv, nv, rs.ΔΔⵠΔⲆᐃⵠ, "de");
      }
      var C = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
      for (c = vl; C.length > c; c++) {
        for (var b = C[c], D = dh; D < b.ᐃⵠᐃΔⲆ.length; D++) {
          tv(b.ᐃⵠᐃΔⲆ[D]);
        }
      }
      if ((gp += Cf * 40) > 60) {
        gp -= 60;
      }
      vv(Wp, ov, pv, mv, nv, rs.ⵠΔᐃⲆ, "r", 0);
      for (c = ks; uf.ⵠⵠⵠⲆⲆ.length > c; c++) {
        B = uf.ⵠⵠⵠⲆⲆ[c];
        if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
          j = B.x2;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            j -= 400;
          }
          k = B.x1;
          if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
            k += 400;
          }
          m = B.y2;
          if (uf.ᐃⵠᐃⲆⲆ !== B.ⵠⲆⵠ) {
            m -= 300;
          }
          p = B.y1;
          if (B.ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ) {
            p += 300;
          }
          if ((B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ) > 0 && j - Oo + 120 <= -Sw.ᐃΔΔⵠ.x && j + 820 >= -Sw.ᐃΔΔⵠ.x && -Sw.ᐃΔΔⵠ.y >= p + 88 - cq && m + 50 >= -Sw.ᐃΔΔⵠ.y) {
            Ev(j, p + 88, m - 88, Sw.ᐃⵠⵠΔ[0], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ);
          }
          if ((B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ) > Xa && -Sw.ᐃΔΔⵠ.x >= k - Oo - 700 && -Sw.ᐃΔΔⵠ.x <= k - 20 && -Sw.ᐃΔΔⵠ.y >= p + 88 - cq && m + 50 >= -Sw.ᐃΔΔⵠ.y) {
            rv(k, p + 88, m - 88, Sw.ᐃⵠⵠΔ[El], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ);
          }
          if (Hb < (B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ) && -Sw.ᐃΔΔⵠ.x >= k - 235 - Oo && j + 350 >= -Sw.ᐃΔΔⵠ.x && -Sw.ᐃΔΔⵠ.y >= m - cq - 275 && -Sw.ᐃΔΔⵠ.y <= m + 490) {
            Cv(m - 230, k - 230, j + 230, Sw.ᐃⵠⵠΔ[Sa], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ);
          }
          if (vl < (B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ) && -Sw.ᐃΔΔⵠ.x >= k - 235 - Oo && -Sw.ᐃΔΔⵠ.x <= j + 350 && -Sw.ᐃΔΔⵠ.y >= p - cq - 390 && p + 315 >= -Sw.ᐃΔΔⵠ.y) {
            Hv(p + 310, k - 230, j + 230, Sw.ᐃⵠⵠΔ[3], uf.ⲆᐃΔⲆⲆ[B.ⵠⲆⵠ], B.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ);
          }
        }
      }
    })();
    (function () {
      var h = mv;
      var e = nv;
      var i = ov;
      var t = pv;
      if (hf.ⵠⵠᐃΔΔ) {
        vv(lv, i, t, h, e, rs.ⵠᐃⲆⵠΔ, "l", 2);
      }
      if (hf.ⵠⵠᐃΔΔ) {
        vv(lv, i, t, h, e, rs.ⲆⲆⵠᐃΔ, "la", Rh);
      }
      vv(lv, i, t, h, e, rs.ᐃⵠΔⵠⵠ, "la", 5);
      vv(fv, i, t, h, e, rs.ⲆΔΔΔⵠ, "l", Ls);
      if (hf.ⵠⵠᐃΔΔ) {
        vv(kv, i, t, h, e, rs.ᐃⵠΔⵠⵠ, "la", 5);
        vv(fv, i, t, h, e, rs.ⲆΔΔⵠᐃ, "l", 2);
      }
      vv(lv, i, t, h, e, rs.ΔᐃⵠⲆᐃ, "ma", Kg);
      for (var n = uf.ΔⵠⲆ[iw.ᐃⲆΔⲆΔⲆⵠ], U = Eu; U < n.length; U++) {
        n[U].ⵠⲆⵠᐃᐃⵠΔ();
      }
      var X = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
      for (U = 0; U < X.length; U++) {
        for (var aa = X[U], ba = 0; ba < aa.ΔⲆᐃⲆΔ.length; ba++) {
          wv(aa.ΔⲆᐃⲆΔ[ba]);
        }
      }
      var ca = uf.ΔⵠⲆ[iw.ⲆⲆΔΔΔ];
      for (U = 0; U < ca.length; U++) {
        Av(ca[U], rs.ⲆⲆΔΔΔ);
        ca[U].ΔΔⵠΔΔ(ca[U].info);
      }
      var g = uf.ΔⵠⲆ[iw.ⲆΔΔΔΔ];
      for (U = 0; U < g.length; U++) {
        if (g[U].action == dj) {
          qv(g[U]);
        }
      }
      var da = uf.ΔⵠⲆ[iw.ᐃⲆΔⲆⵠ];
      for (U = Bs; da.length > U; U++) {
        qv(da[U], rs.ΔᐃᐃⲆⵠΔⲆ);
      }
      var ea = uf.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ];
      for (U = 0; ea.length > U; U++) {
        qv(ea[U]);
      }
      var fa = uf.ΔⵠⲆ[iw.ᐃΔⵠΔⵠ];
      for (U = Ob; U < fa.length; U++) {
        qv(fa[U]);
      }
      var ha = uf.ΔⵠⲆ[iw.ΔⲆΔⵠΔ];
      for (U = Yl; U < ha.length; U++) {
        qv(ha[U], rs.ΔΔᐃⵠⵠⲆⲆ);
      }
      var c = uf.ΔⵠⲆ[iw.ⲆⵠⲆΔⵠ];
      for (U = 0; U < c.length; U++) {
        Av(c[U]);
      }
      var m = uf.ΔⵠⲆ[iw.ⲆⵠΔᐃΔ];
      for (U = 0; U < m.length; U++) {
        Av(m[U], rs.ⲆⵠΔᐃΔ);
      }
      var p = uf.ΔⵠⲆ[iw.ⵠΔⵠⲆΔ];
      for (U = 0; p.length > U; U++) {
        qv(p[U]);
      }
      p = uf.ΔⵠⲆ[iw.ᐃᐃᐃⲆⲆ];
      U = ou;
      for (; U < p.length; U++) {
        qv(p[U]);
      }
      p = uf.ΔⵠⲆ[iw.ⵠΔⵠⲆΔ];
      U = 0;
      for (; p.length > U; U++) {
        Fv(p[U]);
      }
      var ia = uf.ΔⵠⲆ[iw.ᐃΔⲆⵠⲆ];
      for (U = dt; ia.length > U; U++) {
        if (!(ia[U].info & 15) || ia[U].info === 10) {
          Av(ia[U]);
        }
      }
      var ja = uf.ΔⵠⲆ[iw.ⵠᐃⲆⵠⵠ];
      for (U = Hb; U < ja.length; U++) {
        if (!(ja[U].info & 15) || ja[U].info === 10) {
          Av(ja[U]);
        }
      }
      var la = uf.ΔⵠⲆ[iw.ⵠⵠᐃⲆᐃ];
      for (U = 0; la.length > U; U++) {
        if (!(la[U].info & 15) || la[U].info === 10) {
          Av(la[U]);
        }
      }
      var ma = uf.ΔⵠⲆ[iw.ΔᐃΔΔΔ];
      for (U = 0; U < ma.length; U++) {
        Av(ma[U], rs.ΔᐃΔⲆⲆ);
      }
      var na = uf.ΔⵠⲆ[iw.ⵠⵠⲆΔⵠ];
      for (U = 0; U < na.length; U++) {
        if (fs === (na[U].info & 15) || na[U].info === 10) {
          Av(na[U]);
        }
      }
      var oa = uf.ΔⵠⲆ[iw.ΔΔΔᐃⲆ];
      for (U = 0; U < oa.length; U++) {
        if (Bs === (oa[U].info & 15) || Qg === oa[U].info) {
          Av(oa[U]);
        }
      }
      var pa = uf.ΔⵠⲆ[iw.ΔΔΔⵠΔ];
      for (U = gj; U < pa.length; U++) {
        if (!(pa[U].info & 15) || pa[U].info === 10) {
          Av(pa[U]);
        }
      }
      ma = uf.ΔⵠⲆ[iw.ΔᐃΔⲆⲆ];
      U = Xa;
      for (; ma.length > U; U++) {
        Av(ma[U]);
      }
      var qa = uf.ΔⵠⲆ[iw.ⵠᐃⲆⵠⲆ];
      for (U = hk; qa.length > U; U++) {
        Av(qa[U], rs.ⵠᐃⲆⵠⲆ, rs.ⵠⲆⲆⲆⵠᐃⵠ);
      }
      var k = uf.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆΔⲆ];
      for (U = dh; U < k.length; U++) {
        Av(k[U], rs.ⵠᐃⲆⵠⲆ, rs.ⵠⲆⲆⲆⵠᐃⵠ);
      }
      var x = uf.ΔⵠⲆ[iw.ⵠⵠΔⵠⲆ];
      for (U = lt; U < x.length; U++) {
        Av(x[U], rs.ⵠⵠΔⵠⲆ, rs.ⲆⵠΔⵠⵠᐃᐃ);
      }
      var J = uf.ΔⵠⲆ[iw.ᐃΔᐃᐃⵠ];
      for (U = 0; J.length > U; U++) {
        if (J[U].info & 1) {
          Av(J[U], rs.ᐃΔⵠⵠΔⲆΔ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ⲆΔᐃᐃΔ];
      U = lt;
      for (; U < J.length; U++) {
        if (J[U].info & bh) {
          Av(J[U], rs.ⵠᐃⵠⲆᐃᐃⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ⲆΔᐃⲆⲆ];
      U = Yl;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ⲆⲆⲆΔⵠⵠⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.Δᐃⵠᐃᐃ];
      U = Go;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ⵠᐃⵠᐃᐃⵠΔ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ᐃⲆΔᐃⵠ];
      U = 0;
      for (; J.length > U; U++) {
        if (J[U].info) {
          Av(J[U], rs.ΔⲆᐃᐃΔᐃⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ⲆᐃⵠⵠΔ];
      U = gj;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ⲆⲆⲆΔⵠⵠⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ᐃⲆⵠᐃⲆ];
      U = 0;
      for (; J.length > U; U++) {
        if (J[U].info & 1) {
          Av(J[U], rs.ᐃΔⵠⵠΔⲆΔ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ᐃᐃᐃΔⵠ];
      U = Hb;
      for (; J.length > U; U++) {
        if (J[U].info & or) {
          Av(J[U], rs.ⵠᐃⵠⲆᐃᐃⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ᐃⲆΔᐃᐃ];
      U = dh;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ⲆⲆⲆΔⵠⵠⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ΔΔΔⵠⵠ];
      U = 0;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ⵠᐃⵠᐃᐃⵠΔ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ⵠⵠΔΔΔ];
      U = dh;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ΔⲆᐃᐃΔᐃⵠ);
        }
      }
      J = uf.ΔⵠⲆ[iw.ΔᐃΔⵠⵠ];
      U = Bs;
      for (; U < J.length; U++) {
        if (J[U].info) {
          Av(J[U], rs.ⲆⲆⲆΔⵠⵠⵠ);
        }
      }
      var ra = uf.ΔⵠⲆ[iw.ⲆᐃⲆⵠᐃ];
      for (U = 0; ra.length > U; U++) {
        Av(ra[U], rs.ⲆᐃⲆⵠᐃ, rs.ᐃⲆᐃᐃᐃⵠᐃ);
      }
      var B = uf.ΔⵠⲆ[iw.ⵠΔⵠⵠⲆ];
      for (U = 0; B.length > U; U++) {
        Av(B[U], rs.ⵠΔⵠⵠⲆ);
      }
      n = uf.ΔⵠⲆ[iw.ᐃⲆΔⲆΔⲆⵠ];
      U = dh;
      for (; n.length > U; U++) {
        Av(n[U], rs.ᐃⲆΔⲆΔⲆⵠ, rs.ⵠΔΔᐃΔΔⵠⵠᐃ);
      }
      var sa = uf.ΔⵠⲆ[iw.Δⵠⵠⵠⵠ];
      for (U = ka; U < sa.length; U++) {
        if (sa[U].ⵠΔⲆⵠⵠΔᐃ === Eu) {
          Av(sa[U]);
        }
      }
      X = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
      U = 0;
      for (; X.length > U; U++) {
        aa = X[U];
        if (X[U].ⲆΔⵠⵠΔ !== ts.ⲆⲆⲆᐃⲆ && ts.ΔᐃⵠΔⵠ !== X[U].ⲆΔⵠⵠΔ && ts.ⵠⲆⵠΔⵠ !== X[U].ⲆΔⵠⵠΔ && ts.ᐃⲆΔⵠᐃ !== X[U].ⲆΔⵠⵠΔ && X[U].ⲆΔⵠⵠΔ !== ts.ΔᐃⲆⵠⵠ) {
          if (aa.ᐃᐃΔᐃΔⵠΔ === vl) {
            if (aa.ᐃΔΔᐃⲆⵠΔ > 0.001) {
              aa.ᐃΔΔᐃⲆⵠΔ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(aa.ᐃΔΔᐃⲆⵠΔ, Eu, 0.018);
              var ta = Ws + Math.min(1, Math.max(aa.ᐃΔΔᐃⲆⵠΔ, ho) / 100) * 0.18;
              Lo.save();
              Lo.scale(ta, ta);
              Sw.ᐃΔΔⵠ.x /= ta;
              Sw.ᐃΔΔⵠ.y /= ta;
              aa.x /= ta;
              aa.y /= ta;
              aa.r.x /= ta;
              aa.r.y /= ta;
              aa.ᐃΔⲆⵠᐃΔᐃ();
              aa.ᐃⵠΔⲆ();
              Sw.ᐃΔΔⵠ.x *= ta;
              Sw.ᐃΔΔⵠ.y *= ta;
              aa.x *= ta;
              aa.y *= ta;
              aa.r.x *= ta;
              aa.r.y *= ta;
              Lo.restore();
            } else {
              aa.ⵠΔⲆⵠⵠΔᐃ = 0;
              aa.ᐃΔⲆⵠᐃΔᐃ();
              aa.ᐃⵠΔⲆ();
            }
          }
        } else if (aa.ΔΔⲆⲆⵠ <= 180) {
          Lo.save();
          ta = $q + Math.min(1, Math.max(aa.ᐃⵠⵠⵠⵠ - 30, Bs) / 180) * 0.35;
          Lo.scale(ta, ta);
          Sw.ᐃΔΔⵠ.x /= ta;
          Sw.ᐃΔΔⵠ.y /= ta;
          aa.x /= ta;
          aa.y /= ta;
          aa.r.x /= ta;
          aa.r.y /= ta;
          aa.ⵠΔⲆⵠⵠΔᐃ = 0;
          aa.ᐃΔⲆⵠᐃΔᐃ();
          aa.ᐃⵠΔⲆ();
          Sw.ᐃΔΔⵠ.x *= ta;
          Sw.ᐃΔΔⵠ.y *= ta;
          aa.x *= ta;
          aa.y *= ta;
          aa.r.x *= ta;
          aa.r.y *= ta;
          Lo.restore();
        }
      }
      B = uf.ΔⵠⲆ[iw.ⵠΔⵠⵠⲆ];
      U = Yl;
      for (; B.length > U; U++) {
        Av(B[U], rs.ⲆΔⲆⵠⲆⵠᐃ);
      }
      var ua = uf.ΔⵠⲆ[iw.ᐃᐃⲆⲆᐃ];
      for (U = dt; U < ua.length; U++) {
        Av(ua[U]);
      }
      var S = uf.ΔⵠⲆ[iw.ΔᐃⵠⲆⵠ];
      for (U = ka; U < S.length; U++) {
        Av(S[U], rs.ΔᐃⵠⲆⵠ, rs.ᐃⲆⲆⲆⵠΔᐃ);
      }
      var Q = uf.ΔⵠⲆ[iw.ΔⲆⵠᐃⵠ];
      for (U = 0; Q.length > U; U++) {
        Av(Q[U]);
      }
      var _ = uf.ΔⵠⲆ[iw.ⲆΔᐃⲆΔ];
      for (U = ks; _.length > U; U++) {
        Av(_[U], rs.ⲆΔᐃⲆΔ, rs.ⲆΔⵠⲆⲆⵠⲆ);
      }
      var F = uf.ΔⵠⲆ[iw.ⲆⲆⲆᐃⲆ];
      for (U = Eu; F.length > U; U++) {
        Av(F[U], rs.ⲆⲆⲆᐃⲆ, rs.ⵠⵠⵠⲆⵠⵠⵠ);
      }
      var R = uf.ΔⵠⲆ[iw.ΔᐃⵠΔⵠ];
      for (U = lt; U < R.length; U++) {
        Av(R[U], rs.ΔᐃⵠΔⵠ, rs.ⵠⲆᐃⵠΔⵠⲆ);
      }
      ia = uf.ΔⵠⲆ[iw.ᐃΔⲆⵠⲆ];
      U = 0;
      for (; ia.length > U; U++) {
        if ((ia[U].info & 15) !== Et && ia[U].info !== 10) {
          Av(ia[U]);
        }
      }
      ja = uf.ΔⵠⲆ[iw.ⵠᐃⲆⵠⵠ];
      U = 0;
      for (; U < ja.length; U++) {
        if (ja[U].info & 15 && Ys !== ja[U].info) {
          Av(ja[U]);
        }
      }
      la = uf.ΔⵠⲆ[iw.ⵠΔΔᐃᐃᐃⵠ];
      U = Ob;
      for (; la.length > U; U++) {
        Av(la[U], rs.ᐃΔⵠⵠᐃ);
      }
      la = uf.ΔⵠⲆ[iw.ⵠⵠᐃⲆᐃ];
      U = 0;
      for (; U < la.length; U++) {
        if (la[U].info & 15 && hc !== la[U].info) {
          Av(la[U]);
        }
      }
      p = uf.ΔⵠⲆ[iw.ᐃᐃᐃⲆⲆ];
      U = Et;
      for (; p.length > U; U++) {
        Fv(p[U]);
      }
      na = uf.ΔⵠⲆ[iw.ⵠⵠⲆΔⵠ];
      U = 0;
      for (; na.length > U; U++) {
        if ((na[U].info & 15) !== hk && na[U].info !== 10) {
          Av(na[U]);
        }
      }
      oa = uf.ΔⵠⲆ[iw.ΔΔΔᐃⲆ];
      U = Xa;
      for (; U < oa.length; U++) {
        if (oa[U].info & 15 && oa[U].info !== vi) {
          Av(oa[U]);
        }
      }
      pa = uf.ΔⵠⲆ[iw.ΔΔΔⵠΔ];
      U = 0;
      for (; pa.length > U; U++) {
        if (pa[U].info & 15 && pa[U].info !== 10) {
          Av(pa[U]);
        }
      }
      var j = uf.ΔⵠⲆ[iw.ᐃⵠΔⵠⲆ];
      for (U = 0; j.length > U; U++) {
        Av(j[U], rs.ᐃⵠΔⵠⲆ, rs.ⲆⵠΔⲆⲆⲆΔ);
      }
      var G = uf.ΔⵠⲆ[iw.ⵠΔⲆΔⵠ];
      for (U = 0; U < G.length; U++) {
        Av(G[U], rs.ⵠΔⲆΔⵠ, rs.ᐃⵠΔⵠⵠⲆⵠ);
      }
      var L = uf.ΔⵠⲆ[iw.ΔΔΔⲆΔ];
      for (U = hk; U < L.length; U++) {
        Av(L[U], rs.ΔΔΔⲆΔ, rs.ⲆⲆᐃΔⲆⲆᐃ);
      }
      var W = uf.ΔⵠⲆ[iw.ᐃᐃᐃⲆΔ];
      for (U = 0; U < W.length; U++) {
        Av(W[U], rs.ᐃᐃᐃⲆΔ, rs.ΔᐃⲆⲆΔᐃⵠ);
      }
      var O = uf.ΔⵠⲆ[iw.ⵠⲆⲆΔᐃ];
      for (U = Xa; O.length > U; U++) {
        Av(O[U], rs.ⵠⲆⲆΔᐃ, rs.ⵠΔΔⲆⵠᐃⲆ);
      }
      var N = uf.ΔⵠⲆ[iw.ⵠⲆΔⵠᐃ];
      for (U = 0; U < N.length; U++) {
        Av(N[U], rs.ⵠⲆΔⵠᐃ, rs.ⵠⲆᐃⲆⲆᐃᐃ);
      }
      var q = uf.ΔⵠⲆ[iw.ᐃⲆᐃⵠᐃ];
      for (U = 0; U < q.length; U++) {
        Av(q[U]);
      }
      var H = uf.ΔⵠⲆ[iw.ΔⲆΔΔΔ];
      for (U = Xa; H.length > U; U++) {
        Av(H[U], rs.ⵠΔᐃᐃⲆᐃᐃ, rs.ⵠᐃⵠᐃᐃΔΔ);
      }
      var Y = uf.ΔⵠⲆ[iw.ᐃⲆᐃⲆⲆ];
      for (U = 0; U < Y.length; U++) {
        Av(Y[U]);
      }
      var K = uf.ΔⵠⲆ[iw.ΔⵠΔⲆᐃ];
      for (U = 0; U < K.length; U++) {
        Av(K[U], rs.ΔⵠΔⲆᐃ, rs.ⲆΔᐃᐃΔⲆΔ);
      }
      var V = uf.ΔⵠⲆ[iw.ⲆⲆᐃⵠΔ];
      for (U = Hb; U < V.length; U++) {
        if (V[U].scale === kr) {
          Av(V[U], rs.ⲆⲆᐃⵠΔ, rs.ⵠΔⲆⲆⵠⵠⲆ);
        }
      }
      V = uf.ΔⵠⲆ[iw.ⲆΔⵠΔⲆ];
      U = jg;
      for (; U < V.length; U++) {
        if (V[U].scale === 1) {
          Av(V[U], rs.ⲆΔⵠΔⲆ, rs.ⵠᐃⵠΔΔᐃΔ);
        }
      }
      var va = uf.ΔⵠⲆ[iw.ⵠⲆⲆⲆΔ];
      for (U = dt; va.length > U; U++) {
        Av(va[U]);
      }
      var wa = uf.ΔⵠⲆ[iw.ΔᐃⵠΔᐃ];
      for (U = 0; wa.length > U; U++) {
        Av(wa[U], rs.ΔᐃⵠΔᐃ);
      }
      g = uf.ΔⵠⲆ[iw.ⲆΔΔΔΔ];
      U = Bs;
      for (; U < g.length; U++) {
        Av(g[U]);
      }
      var xa = uf.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ];
      for (U = lt; xa.length > U; U++) {
        Av(xa[U]);
      }
      J = uf.ΔⵠⲆ[iw.ᐃⲆⵠᐃⲆ];
      U = 0;
      for (; J.length > U; U++) {
        if (!(J[U].info & 1)) {
          Av(J[U], rs.ⵠⵠΔᐃᐃᐃⵠ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> Zk);
      }
      J = uf.ΔⵠⲆ[iw.ᐃᐃᐃΔⵠ];
      U = Et;
      for (; J.length > U; U++) {
        if (!(J[U].info & $q)) {
          Av(J[U], rs.ᐃᐃᐃᐃΔΔΔ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> or);
      }
      J = uf.ΔⵠⲆ[iw.ᐃⲆΔᐃᐃ];
      U = ho;
      for (; U < J.length; U++) {
        if (!(J[U].info & og)) {
          Av(J[U], rs.ᐃⵠⵠⵠⵠⵠⵠ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> bh);
      }
      J = uf.ΔⵠⲆ[iw.ΔΔΔⵠⵠ];
      U = lt;
      for (; J.length > U; U++) {
        if (!(J[U].info & 1)) {
          Av(J[U], rs.ΔⵠⲆⲆⲆΔⵠ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> 1);
      }
      J = uf.ΔⵠⲆ[iw.ⵠⵠΔΔΔ];
      U = 0;
      for (; J.length > U; U++) {
        if (!(J[U].info & 1)) {
          Av(J[U], rs.ⲆᐃⵠⲆⲆᐃⲆ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> vg);
      }
      J = uf.ΔⵠⲆ[iw.ΔᐃΔⵠⵠ];
      U = 0;
      for (; U < J.length; U++) {
        if (!(J[U].info & og)) {
          Av(J[U], rs.ΔᐃΔⵠⵠ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> El);
      }
      J = uf.ΔⵠⲆ[iw.ᐃΔᐃᐃⵠ];
      U = hk;
      for (; U < J.length; U++) {
        if (!(J[U].info & hj)) {
          Av(J[U], rs.ᐃΔᐃᐃⵠ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> 1);
      }
      J = uf.ΔⵠⲆ[iw.ⲆΔᐃᐃΔ];
      U = lt;
      for (; U < J.length; U++) {
        if (!(J[U].info & bq)) {
          Av(J[U], rs.ⲆΔᐃᐃΔ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> Ws);
      }
      J = uf.ΔⵠⲆ[iw.ⲆΔᐃⲆⲆ];
      U = Ob;
      for (; U < J.length; U++) {
        if (!(J[U].info & hj)) {
          Av(J[U], rs.ⲆΔᐃⲆⲆ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> 1);
      }
      J = uf.ΔⵠⲆ[iw.Δᐃⵠᐃᐃ];
      U = 0;
      for (; J.length > U; U++) {
        if (!(J[U].info & 1)) {
          Av(J[U], rs.Δᐃⵠᐃᐃ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> 1);
      }
      J = uf.ΔⵠⲆ[iw.ᐃⲆΔᐃⵠ];
      U = 0;
      for (; J.length > U; U++) {
        if (!(J[U].info & 1)) {
          Av(J[U], rs.ᐃⲆΔᐃⵠ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> 1);
      }
      J = uf.ΔⵠⲆ[iw.ⲆᐃⵠⵠΔ];
      U = Xa;
      for (; J.length > U; U++) {
        if (!(J[U].info & 1)) {
          Av(J[U], rs.ⲆᐃⵠⵠΔ);
        }
        J[U].ΔΔⵠΔΔ(J[U].info >> 1);
      }
      var ya = uf.ΔⵠⲆ[iw.ⵠⵠⵠⵠⵠ];
      for (U = dt; U < ya.length; U++) {
        Av(ya[U], rs.ⵠⵠⵠⵠⵠ);
        ya[U].ΔΔⵠΔΔ(ya[U].info);
      }
      ya = uf.ΔⵠⲆ[iw.ΔᐃᐃⲆᐃ];
      U = fs;
      for (; U < ya.length; U++) {
        Av(ya[U], rs.ΔᐃᐃⲆᐃ);
        ya[U].ΔΔⵠΔΔ(ya[U].info);
      }
      ya = uf.ΔⵠⲆ[iw.ⵠΔᐃⵠᐃ];
      U = dt;
      for (; ya.length > U; U++) {
        Av(ya[U], rs.ⵠΔᐃⵠᐃ);
        ya[U].ΔΔⵠΔΔ(ya[U].info);
      }
      ya = uf.ΔⵠⲆ[iw.ᐃΔΔΔⲆ];
      U = Xa;
      for (; U < ya.length; U++) {
        Av(ya[U], rs.ᐃΔΔΔⲆ);
        ya[U].ΔΔⵠΔΔ(ya[U].info);
      }
      ya = uf.ΔⵠⲆ[iw.ⲆᐃΔΔΔ];
      U = Eu;
      for (; ya.length > U; U++) {
        Av(ya[U], rs.ⲆᐃΔΔΔ);
        ya[U].ΔΔⵠΔΔ(ya[U].info);
      }
      ya = uf.ΔⵠⲆ[iw.ΔΔΔⲆⵠ];
      U = fs;
      for (; ya.length > U; U++) {
        Av(ya[U], rs.ΔΔΔⲆⵠ);
        ya[U].ΔΔⵠΔΔ(ya[U].info);
      }
      var za = uf.ΔⵠⲆ[iw.ⲆΔΔᐃⲆ];
      for (U = 0; U < za.length; U++) {
        Av(za[U], rs.ⲆΔΔᐃⲆ);
        za[U].ΔΔⵠΔΔ(za[U].info);
      }
      za = uf.ΔⵠⲆ[iw.ⵠᐃⲆᐃᐃ];
      U = 0;
      for (; U < za.length; U++) {
        Av(za[U], rs.ⵠᐃⲆᐃᐃ);
        za[U].ΔΔⵠΔΔ(za[U].info);
      }
      za = uf.ΔⵠⲆ[iw.ᐃΔⵠᐃᐃ];
      U = 0;
      for (; U < za.length; U++) {
        Av(za[U], rs.ᐃΔⵠᐃᐃ);
        za[U].ΔΔⵠΔΔ(za[U].info);
      }
      za = uf.ΔⵠⲆ[iw.ⲆⵠⵠⵠΔ];
      U = Eu;
      for (; U < za.length; U++) {
        Av(za[U], rs.ⲆⵠⵠⵠΔ);
        za[U].ΔΔⵠΔΔ(za[U].info);
      }
      za = uf.ΔⵠⲆ[iw.ⲆᐃⲆᐃⲆ];
      U = ka;
      for (; U < za.length; U++) {
        Av(za[U], rs.ⲆᐃⲆᐃⲆ);
        za[U].ΔΔⵠΔΔ(za[U].info);
      }
      za = uf.ΔⵠⲆ[iw.ΔᐃⵠⲆⲆ];
      U = fs;
      for (; za.length > U; U++) {
        Av(za[U], rs.ΔᐃⵠⲆⲆ);
        za[U].ΔΔⵠΔΔ(za[U].info);
      }
      var Aa = uf.ΔⵠⲆ[iw.ⲆⵠⲆⵠᐃ];
      for (U = 0; U < Aa.length; U++) {
        var Ba = Aa[U];
        if (Ba.info > lt) {
          Av(Ba, rs.ᐃⵠΔᐃΔᐃⲆ);
        } else {
          Av(Ba, rs.ᐃⵠΔⵠⲆᐃᐃ);
        }
      }
      var Ca = uf.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆ];
      for (U = fs; Ca.length > U; U++) {
        Av(Ca[U], rs.ⲆⲆⲆⲆⲆ);
      }
      vv(lv, i, t, h, e, rs.ΔᐃⲆⲆ, "g", 2);
      vv(lv, i, t, h, e, rs.ΔΔΔΔⵠ, "gw", uj);
      vv(lv, i, t, h, e, rs.ᐃⲆΔⵠ, "d", 2);
      vv(lv, i, t, h, e, rs.ᐃⲆᐃⲆᐃ, "dw", 2);
      vv(lv, i, t, h, e, rs.ⲆⲆⵠᐃᐃ, "p", 0);
      vv(lv, i, t, h, e, rs.ΔⵠΔᐃⵠ, "m", 2);
      vv(lv, i, t, h, e, rs.ⲆΔⲆᐃ, "a", Ts);
      vv(lv, i, t, h, e, rs.ⲆⲆⵠΔ, "re", kg);
      vv(lv, i, t, h, e, rs.ᐃᐃᐃΔΔ, "cs", Qh, Qq);
      vv(lv, i, t, h, e, rs.ᐃᐃᐃΔΔ, "cs", 2, 2);
      vv(lv, i, t, h, e, rs.ᐃᐃᐃΔΔ, "cs", 1, 1);
      vv(lv, i, t, h, e, rs.ᐃᐃᐃΔΔ, "cs", 0, Eu);
      vv(lv, i, t, h, e, rs.ⵠΔΔⲆᐃ, "cs", 3, Ab);
      vv(lv, i, t, h, e, rs.ⵠΔΔⲆᐃ, "cs", 2, 2);
      vv(lv, i, t, h, e, rs.ⵠΔΔⲆᐃ, "cs", hj, Dj);
      vv(lv, i, t, h, e, rs.ⵠΔΔⲆᐃ, "cs", 0, ou);
      var Da = uf.ΔⵠⲆ[iw.ΔᐃⵠᐃⲆ];
      for (U = Ob; Da.length > U; U++) {
        for (ba = 0; Da[U].info > ba; ba++) {
          Av(Da[U].ⵠΔⲆΔ[ba], rs.ΔᐃⵠᐃⲆ);
        }
      }
      vv(lv, i, t, h, e, rs.ⵠᐃⵠᐃⲆ, "s", 2);
      var Ea = uf.ΔⵠⲆ[iw.ⲆᐃΔᐃⲆ];
      for (U = 0; Ea.length > U; U++) {
        Av(Ea[U]);
      }
      Ea = uf.ΔⵠⲆ[iw.ⵠΔⲆⵠΔ];
      U = 0;
      for (; Ea.length > U; U++) {
        Av(Ea[U]);
      }
      Ea = uf.ΔⵠⲆ[iw.ⲆⲆⵠΔⵠ];
      U = dh;
      for (; Ea.length > U; U++) {
        Av(Ea[U]);
      }
      Ea = uf.ΔⵠⲆ[iw.ⵠⵠⵠⵠⲆ];
      U = Et;
      for (; Ea.length > U; U++) {
        Av(Ea[U]);
      }
      Ea = uf.ΔⵠⲆ[iw.ᐃᐃᐃΔᐃ];
      U = 0;
      for (; Ea.length > U; U++) {
        Av(Ea[U]);
      }
      var Fa = uf.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ];
      for (U = 0; Fa.length > U; U++) {
        qv(Fa[U]);
      }
      da = uf.ΔⵠⲆ[iw.ᐃⲆΔⲆⵠ];
      U = 0;
      for (; da.length > U; U++) {
        Fv(da[U]);
      }
      da = uf.ΔⵠⲆ[iw.ΔⲆΔⵠΔ];
      U = 0;
      for (; U < da.length; U++) {
        Fv(da[U]);
      }
      g = uf.ΔⵠⲆ[iw.ⲆΔΔΔΔ];
      U = 0;
      for (; g.length > U; U++) {
        if (g[U].action == 2) {
          Fv(g[U]);
        }
      }
      xa = uf.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ];
      U = 0;
      for (; xa.length > U; U++) {
        Fv(xa[U]);
      }
      ea = uf.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ];
      U = 0;
      for (; ea.length > U; U++) {
        Fv(ea[U]);
      }
      fa = uf.ΔⵠⲆ[iw.ᐃΔⵠΔⵠ];
      U = 0;
      for (; fa.length > U; U++) {
        Fv(fa[U]);
        fa[U].ΔΔⵠΔΔ(fa[U].info);
      }
      vv(lv, i, t, h, e, rs.ⵠⵠᐃⵠⲆ, "c", dt);
      vv(lv, i, t, h, e, rs.ⵠⲆΔⵠ, "t", Xk, 4);
      vv(lv, i, t, h, e, rs.ΔⲆᐃΔᐃ, "f", yl, 2);
      vv(lv, i, t, h, e, rs.ⵠⲆⵠᐃⵠ, "plm", 0, 0);
      vv(lv, i, t, h, e, rs.ΔᐃΔⲆΔ, "b", Ia, Ci);
      vv(lv, i, t, h, e, rs.ⵠⲆΔⵠ, "t", 3, pn);
      vv(lv, i, t, h, e, rs.ΔᐃΔⲆΔ, "b", 1, 0);
      vv(lv, i, t, h, e, rs.ΔⲆᐃΔᐃ, "f", 1, $r);
      vv(lv, i, t, h, e, rs.ⵠⲆⵠᐃⵠ, "plm", 1, Th);
      vv(lv, i, t, h, e, rs.ⵠⲆΔⵠ, "t", $q, 0);
      vv(lv, i, t, h, e, rs.ΔⲆᐃΔᐃ, "f", Bs, 0);
      vv(lv, i, t, h, e, rs.ⵠⲆⵠᐃⵠ, "plm", 2, 2);
      Fa = uf.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ];
      U = Et;
      for (; Fa.length > U; U++) {
        Fv(Fa[U]);
      }
      var Ga = uf.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ];
      for (U = 0; U < Ga.length; U++) {
        Av(Ga[U], rs.ᐃΔᐃᐃᐃ);
      }
      X = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
      U = 0;
      for (; U < X.length; U++) {
        if ((aa = X[U]).ᐃᐃΔᐃΔⵠΔ === 1 && (aa.ΔΔⲆⲆⵠ < 180 || ts.ⲆⲆⲆᐃⲆ !== aa.ⲆΔⵠⵠΔ && ts.ΔᐃⵠΔⵠ !== aa.ⲆΔⵠⵠΔ && ts.ΔᐃⲆⵠⵠ !== aa.ⲆΔⵠⵠΔ && ts.ⵠⲆⵠΔⵠ !== aa.ⲆΔⵠⵠΔ && ts.ᐃⲆΔⵠᐃ !== aa.ⲆΔⵠⵠΔ)) {
          aa.ᐃΔΔᐃⲆⵠΔ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(aa.ᐃΔΔᐃⲆⵠΔ, 100, 0.018);
          ta = bq + Math.min(1, Math.max(aa.ᐃΔΔᐃⲆⵠΔ, vl) / 100) * 0.18;
          Lo.save();
          Lo.scale(ta, ta);
          Sw.ᐃΔΔⵠ.x /= ta;
          Sw.ᐃΔΔⵠ.y /= ta;
          aa.x /= ta;
          aa.y /= ta;
          aa.r.x /= ta;
          aa.r.y /= ta;
          aa.ᐃΔⲆⵠᐃΔᐃ();
          aa.ᐃⵠΔⲆ();
          Sw.ᐃΔΔⵠ.x *= ta;
          Sw.ᐃΔΔⵠ.y *= ta;
          aa.x *= ta;
          aa.y *= ta;
          aa.r.x *= ta;
          aa.r.y *= ta;
          Lo.restore();
        }
      }
      var Ha = uf.ΔⵠⲆ[iw.ⵠΔᐃΔᐃ];
      for (U = 0; Ha.length > U; U++) {
        Av(Ha[U], rs.ⵠΔᐃΔᐃ);
        Ha[U].ΔΔⵠΔΔ(Ha[U].info);
      }
      var Ja = uf.ΔⵠⲆ[iw.ⵠᐃⵠΔΔ];
      for (U = 0; U < Ja.length; U++) {
        Av(Ja[U], rs.ⵠᐃⵠΔΔ, rs.ⲆⵠΔᐃⲆⵠᐃ);
      }
      var Ka = uf.ΔⵠⲆ[iw.ᐃᐃᐃⵠΔ];
      for (U = ou; Ka.length > U; U++) {
        Av(Ka[U], rs.ᐃᐃᐃⵠΔ);
      }
      X = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
      U = gj;
      for (; U < X.length; U++) {
        if (((aa = X[U]).ⲆΔⵠⵠΔ === ts.ⲆⲆⲆᐃⲆ || ts.ΔᐃⵠΔⵠ === aa.ⲆΔⵠⵠΔ || ts.ΔᐃⲆⵠⵠ === aa.ⲆΔⵠⵠΔ || ts.ⵠⲆⵠΔⵠ === aa.ⲆΔⵠⵠΔ || ts.ᐃⲆΔⵠᐃ === aa.ⲆΔⵠⵠΔ) && aa.ΔΔⲆⲆⵠ > 180) {
          aa.ⵠΔⲆⵠⵠΔᐃ = bt;
          Lo.save();
          ta = 1 + Math.min(1, Math.max(aa.ᐃⵠⵠⵠⵠ - 30, Eu) / 180) * 0.35;
          Lo.scale(ta, ta);
          Sw.ᐃΔΔⵠ.x /= ta;
          Sw.ᐃΔΔⵠ.y /= ta;
          aa.x /= ta;
          aa.y /= ta;
          aa.r.x /= ta;
          aa.r.y /= ta;
          aa.ᐃΔⲆⵠᐃΔᐃ();
          aa.ᐃⵠΔⲆ();
          Sw.ᐃΔΔⵠ.x *= ta;
          Sw.ᐃΔΔⵠ.y *= ta;
          aa.x *= ta;
          aa.y *= ta;
          aa.r.x *= ta;
          aa.r.y *= ta;
          Lo.restore();
        }
      }
      sa = uf.ΔⵠⲆ[iw.Δⵠⵠⵠⵠ];
      U = Bs;
      for (; sa.length > U; U++) {
        if (sa[U].ⵠΔⲆⵠⵠΔᐃ === 1) {
          Av(sa[U]);
        }
      }
      V = uf.ΔⵠⲆ[iw.ⲆⲆᐃⵠΔ];
      U = 0;
      for (; V.length > U; U++) {
        if (or < V[U].scale) {
          Av(V[U], rs.ⲆⲆᐃⵠΔ, rs.ⵠΔⲆⲆⵠⵠⲆ);
        }
      }
      V = uf.ΔⵠⲆ[iw.ⲆΔⵠΔⲆ];
      U = 0;
      for (; V.length > U; U++) {
        if (V[U].scale > 1) {
          Av(V[U], rs.ⲆΔⵠΔⲆ, rs.ⵠᐃⵠΔΔᐃΔ);
        }
      }
      var La = uf.ΔⵠⲆ[iw.ⵠⲆⵠΔⵠ];
      for (U = 0; La.length > U; U++) {
        Av(La[U], rs.ⵠⲆⵠΔⵠ, rs.ⲆⵠᐃΔⲆΔΔ);
      }
      var Ma = uf.ΔⵠⲆ[iw.ⵠᐃⲆⲆᐃ];
      for (U = 0; Ma.length > U; U++) {
        Av(Ma[U], rs.ⵠᐃⲆⲆᐃ, rs.ⵠΔⵠΔᐃΔⵠ);
      }
      if ((ev += Cf * 15) > 60) {
        ev -= 60;
      }
      vv(gv, i, t, h, e, rs.ⵠⲆᐃᐃⵠ, "fo", Og);
      vv(gv, i, t, h, e, rs.ⵠᐃᐃΔᐃ, "fod", 2);
    })();
    if (hf.ⵠⵠᐃΔΔ && uf.mode !== fw.ⵠⵠᐃΔⲆ && uf.mode !== fw.ⵠᐃⵠᐃᐃ && uf.mode !== fw.ΔⵠⲆᐃΔⵠΔ) {
      (function () {
        var a = Sw.ᐃΔΔᐃⲆ;
        if (a.ᐃᐃᐃΔⲆ === 0) {
          a.ΔΔᐃⲆΔ = Math.max(0, a.ΔΔᐃⲆΔ - Cf / Ys);
        } else {
          a.ΔΔᐃⲆΔ = Math.min(bh, a.ΔΔᐃⲆΔ + Cf / sh);
        }
        for (var b = a.ᐃⲆⵠᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃᐃᐃ(d);
          Jv(rs.ᐃⵠᐃⲆⲆⲆⲆ, d.id, Sw.ᐃΔΔⵠ.x + d.x, Sw.ᐃΔΔⵠ.y + d.y, d.alpha);
        }
        for (c = Xa; b.length > c; c++) {
          if ((d = b[c]).ᐃⲆⵠΔᐃ <= 0 || -Sw.ᐃΔΔⵠ.x + Oo < d.x || -Sw.ᐃΔΔⵠ.x - Sw.ᐃΔΔⵠ.w / 2 > d.x || -Sw.ᐃΔΔⵠ.y + cq < d.y) {
            b.splice(c, y);
          }
        }
        var e = -Sw.ᐃΔΔⵠ.y;
        if (uf.ⲆᐃⲆΔᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Sw.ⲆⲆⲆᐃⵠ;
        if (a.ᐃᐃᐃΔⲆ === 0) {
          a.ΔΔᐃⲆΔ = Math.max(0, a.ΔΔᐃⲆΔ - Cf / 10);
        } else {
          a.ΔΔᐃⲆΔ = Math.min($q, a.ΔΔᐃⲆΔ + Cf / 10);
        }
        for (var b = a.ᐃⲆⵠᐃΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ᐃᐃᐃ(d);
          Jv(rs.ΔⲆⲆⲆⵠᐃⵠ, d.id, Sw.ᐃΔΔⵠ.x + d.x, Sw.ᐃΔΔⵠ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          d = b[c];
          if (Eu >= d.ᐃⲆⵠΔᐃ || -Sw.ᐃΔΔⵠ.x + Oo < d.x || -Sw.ᐃΔΔⵠ.x > d.x || d.y > -Sw.ᐃΔΔⵠ.y + cq) {
            b.splice(c, bq);
          }
        }
        var e = -Sw.ᐃΔΔⵠ.y;
        if (uf.ᐃⵠⲆᐃᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Sw.ΔᐃᐃⵠⵠΔⵠ;
        for (var b = a.ᐃⲆⵠᐃΔ, c = Yl; b.length > c; c++) {
          var d = b[c];
          a.ᐃᐃᐃ(d);
          Jv(rs.ⲆⲆⲆᐃΔᐃⵠ, d.id, Sw.ᐃΔΔⵠ.x + d.x, Sw.ᐃΔΔⵠ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ᐃⲆⵠΔᐃ <= 0 || d.x > -Sw.ᐃΔΔⵠ.x + Oo || -Sw.ᐃΔΔⵠ.x > d.x || d.y > -Sw.ᐃΔΔⵠ.y + cq) {
            b.splice(c, y);
          }
        }
        var e = -Sw.ᐃΔΔⵠ.y;
        if (uf.ᐃΔΔⲆΔ > -1000) {
          a.add(e);
        }
      })();
    }
    if (uf.transition && a) {
      uf.transition = zn;
      uf.ΔΔⵠΔ.ⲆⵠⲆ = dh;
      uf.ΔΔⵠΔ.ᐃⵠᐃ = false;
    }
  }
  function tv(a) {
    Lo.save();
    Lo.translate(Sw.ᐃΔΔⵠ.x + a.x, Sw.ᐃΔΔⵠ.y + a.y);
    Lo.rotate(a.angle);
    Lo.globalAlpha = a.alpha;
    var b = ⵠᐃ[a.id][uf.time];
    Rm(Lo, b, -b.width / 2, -b.height / uj);
    Lo.globalAlpha = Ng;
    Lo.restore();
  }
  function uv(a, b, c, d) {
    if (uf.transition) {
      Lo.globalAlpha = 1;
      Rm(Lo, ⵠᐃ[a][uf.time], c, d);
      uf.time = uf.time ? 0 : El;
      Lo.globalAlpha = El - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Rm(Lo, ⵠᐃ[a][uf.time], c, d);
      uf.time = uf.time ? Et : or;
      Lo.globalAlpha = y;
    } else {
      Rm(Lo, b, c, d);
    }
  }
  function vv(b, c, d, e, f, g, i, a, j, h) {
    if (uf.transition) {
      Lo.globalAlpha = hj;
      b(c, d, e, f, g, i, a, j, h);
      uf.time = uf.time ? Et : Th;
      Lo.globalAlpha = $q - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      b(c, d, e, f, g, i, a, j, h);
      uf.time = uf.time ? fs : 1;
      Lo.globalAlpha = 1;
    } else {
      b(c, d, e, f, g, i, a, j, h);
    }
  }
  function wv(a) {
    Lo.globalAlpha = a.alpha;
    Tb(Lo, a.x + Sw.ᐃΔΔⵠ.x, a.y + Sw.ᐃΔΔⵠ.y, a.r);
    yb(Lo, rs.ᐃᐃⵠΔΔⲆΔ[uf.time]);
    Lo.globalAlpha = 1;
  }
  function xv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Sw.ᐃΔΔⵠ.x + f - 700;
    var l = Math.max(Sw.ᐃΔΔⵠ.y + e, 0);
    var g = Math.max(-Sw.ᐃΔΔⵠ.y + cq - i - 100, 0);
    var r = l;
    var b = cq - l - g;
    if (n) {
      var s = j.ⵠⲆⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + fw.ⵠⲆᐃⲆᐃ;
    fw.ⲆᐃⵠΔⵠ;
    t += s + fw.ⲆᐃⵠΔⵠ - rb;
    if (n) {
      s = j.ⵠⲆⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + fw.ⵠΔⵠⲆⵠ - t + s;
    var v = (t += u - 2) - Pn;
    if (n) {
      s = j.ⵠⲆⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h + fw.Ⲇᐃⵠⵠⵠ - t + s) - 3 > v) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + fw.ᐃⵠⵠΔⵠⲆⵠ - t;
    if (n > 0 && k.ⲆⵠᐃᐃⵠΔΔ === 1) {
      if (uf.transition) {
        var p = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 77, 72, 252, 239, 187, p);
      } else {
        Lo.fillStyle = rs.ⲆⵠᐃᐃⲆⵠᐃ[uf.time];
      }
      Lo.fillRect(t, r, u, b);
    } else {
      if (uf.transition) {
        p = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[Xj], k.ⲆⲆⲆ[Hb], k.ⲆⲆⲆ[1], k.ⲆⲆⲆ[Og], p);
      } else {
        Lo.fillStyle = k.ΔΔⲆΔⵠ[uf.time];
      }
      Lo.fillRect(t, r, u, b);
    }
  }
  function yv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Sw.ᐃΔΔⵠ.y + f + 710;
    var l = Math.max(Sw.ᐃΔΔⵠ.x + e, ka);
    var g = Math.max(-Sw.ᐃΔΔⵠ.x + Oo - i - 100, 0);
    var r = l;
    var b = Oo - l - g;
    if (n) {
      var s = j.ⵠⲆⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + fw.ⵠⲆᐃⲆᐃ;
    fw.ⲆᐃⵠΔⵠ;
    t += -s + fw.ⲆᐃⵠΔⵠ + 2;
    if (n) {
      s = j.ⵠⲆⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - fw.ⵠΔⵠⲆⵠ - t - s;
    var v = (t += u + rb) - 2;
    if (n) {
      s = j.ⵠⲆⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h - fw.Ⲇᐃⵠⵠⵠ - t - s) < v) {
      t += u + kg;
    } else {
      t = v;
    }
    u = h - fw.ᐃⵠⵠΔⵠⲆⵠ - t;
    if (n > jg && k.ⲆⵠᐃᐃⵠΔΔ === ck) {
      if (uf.transition) {
        var p = uf.time ? y - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 77, 72, 252, 239, 187, p);
      } else {
        Lo.fillStyle = rs.ⲆⵠᐃᐃⲆⵠᐃ[uf.time];
      }
      Lo.fillRect(r, t, b, u);
    } else {
      if (uf.transition) {
        p = uf.time ? vg - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], k.ⲆⲆⲆ[fs], k.ⲆⲆⲆ[Zk], k.ⲆⲆⲆ[2], p);
      } else {
        Lo.fillStyle = k.ΔΔⲆΔⵠ[uf.time];
      }
      Lo.fillRect(r, t, b, u);
    }
  }
  function zv(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var h = Math.floor(f / pn);
    var a = Math.floor(g / it);
    if (uf.transition) {
      Lo.globalAlpha = Zn;
      Rm(Lo, ⵠᐃ[b][uf.time], 0, gj, f, g, d, e, h, a);
      uf.time = uf.time ? Hb : 1;
      Lo.globalAlpha = 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Rm(Lo, ⵠᐃ[b][uf.time], 0, 0, f, g, d, e, h, a);
      uf.time = uf.time ? 0 : 1;
      Lo.globalAlpha = 1;
    } else {
      Rm(Lo, c, 0, 0, f, g, d, e, h, a);
    }
  }
  function Av(a, b, c) {
    if (uf.transition) {
      Lo.globalAlpha = El;
      a.ᐃⵠΔⲆ(b, c);
      uf.time = uf.time ? 0 : 1;
      Lo.globalAlpha = 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      a.ᐃⵠΔⲆ(b, c);
      uf.time = uf.time ? 0 : 1;
      Lo.globalAlpha = 1;
    } else {
      a.ᐃⵠΔⲆ(b, c);
    }
  }
  function Bv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Sw.ᐃΔΔⵠ.y + f - 700;
    var l = Math.max(Sw.ᐃΔΔⵠ.x + e, 0);
    var g = Math.max(-Sw.ᐃΔΔⵠ.x + Oo - i - dk, ho);
    var r = l;
    var b = Oo - l - g;
    if (n) {
      var s = j.ⵠⲆⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + fw.ⵠⲆᐃⲆᐃ;
    fw.ⲆᐃⵠΔⵠ;
    t += s + fw.ⲆᐃⵠΔⵠ - pn;
    if (n) {
      s = j.ⵠⲆⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + fw.ⵠΔⵠⲆⵠ - t + s;
    var v = (t += u - 2) - 2;
    if (n) {
      s = j.ⵠⲆⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h + fw.Ⲇᐃⵠⵠⵠ - t + s) - Ss > v) {
      t += u - Ir;
    } else {
      t = v;
    }
    u = h + fw.ᐃⵠⵠΔⵠⲆⵠ - t;
    if (n > 0 && k.ⲆⵠᐃᐃⵠΔΔ === Dj) {
      if (uf.transition) {
        var p = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 77, 72, 252, 239, 187, p);
      } else {
        Lo.fillStyle = rs.ⲆⵠᐃᐃⲆⵠᐃ[uf.time];
      }
      Lo.fillRect(r, t, b, u);
    } else {
      if (uf.transition) {
        p = uf.time ? og - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(k.ⵠΔΔ[dt], k.ⵠΔΔ[1], k.ⵠΔΔ[Ls], k.ⲆⲆⲆ[0], k.ⲆⲆⲆ[or], k.ⲆⲆⲆ[2], p);
      } else {
        Lo.fillStyle = k.ΔΔⲆΔⵠ[uf.time];
      }
      Lo.fillRect(r, t, b, u);
    }
  }
  function Cv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Sw.ᐃΔΔⵠ.y + j + 710;
    var l = Math.max(Sw.ᐃΔΔⵠ.x + e, ou);
    var g = Math.max(-Sw.ᐃΔΔⵠ.x + Oo - i - Za, ou);
    var t = l;
    var b = Oo - l - g;
    if (o) {
      var u = q.ⵠⲆⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + fw.ⵠⲆᐃⲆᐃ;
    var F = v;
    var m = t;
    var p = -u.x + fw.ⲆᐃⵠΔⵠ;
    var C = b;
    var G = v += -u.x + fw.ⲆᐃⵠΔⵠ + rb;
    if (o) {
      u = q.ⵠⲆⵠ(a);
    } else {
      u = a.r;
    }
    var f = h - fw.ⵠΔⵠⲆⵠ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + uj) - 2;
    if (o) {
      u = q.ⵠⲆⵠ(s);
    } else {
      u = s.r;
    }
    if (A > v + (f = h - fw.Ⲇᐃⵠⵠⵠ - v - u.x)) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = qn;
      v = A;
      D = -ck;
    }
    f = h - fw.ᐃⵠⵠΔⵠⲆⵠ - v;
    if (uf.transition) {
      var N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(m, F, C, p);
    if (o) {
      if (uf.transition) {
        N = uf.time ? vg - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 70, 76, 42, 139, 155, N);
      } else {
        Lo.fillStyle = rs.ᐃⲆⵠⵠⵠⵠΔ[uf.time];
      }
    } else if (uf.transition) {
      N = uf.time ? El - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (uf.transition) {
          N = uf.time ? $q - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
          Lo.fillStyle = Gv(17, 94, 96, 169, 214, 211, N);
        } else {
          Lo.fillStyle = rs.ΔⵠⲆᐃⵠⵠᐃ[uf.time];
        }
      } else if (uf.transition) {
        N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
      } else {
        Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
      }
      Lo.fillRect(J, L, B, M);
    }
    if (hf.ⵠⵠᐃΔΔ && o) {
      q.ⵠᐃⲆⵠᐃⲆⲆᐃΔ(A, D, G, h, -Sw.ᐃΔΔⵠ.x + m, -Sw.ᐃΔΔⵠ.x + m + C);
    }
  }
  function Dv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Sw.ᐃΔΔⵠ.x + f + 820;
    var l = Math.max(Sw.ᐃΔΔⵠ.y + e, 0);
    var g = Math.max(-Sw.ᐃΔΔⵠ.y + cq - i - qr, 0);
    var r = l;
    var b = cq - l - g;
    if (n) {
      var s = j.ⵠⲆⵠ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + fw.ⵠⲆᐃⲆᐃ;
    fw.ⲆᐃⵠΔⵠ;
    t += -s + fw.ⲆᐃⵠΔⵠ + nl;
    if (n) {
      s = j.ⵠⲆⵠ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - fw.ⵠΔⵠⲆⵠ - t - s;
    var v = (t += u + pn) - 2;
    if (n) {
      s = j.ⵠⲆⵠ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h - fw.Ⲇᐃⵠⵠⵠ - t - s) < v) {
      t += u + Sa;
    } else {
      t = v;
    }
    u = h - fw.ᐃⵠⵠΔⵠⲆⵠ - t;
    if (Bs < n && k.ⲆⵠᐃᐃⵠΔΔ === 1) {
      if (uf.transition) {
        var p = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 77, 72, 252, 239, 187, p);
      } else {
        Lo.fillStyle = rs.ⲆⵠᐃᐃⲆⵠᐃ[uf.time];
      }
      Lo.fillRect(t, r, u, b);
    } else {
      if (uf.transition) {
        p = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(k.ⵠΔΔ[Yl], k.ⵠΔΔ[Zk], k.ⵠΔΔ[uj], k.ⲆⲆⲆ[ho], k.ⲆⲆⲆ[or], k.ⲆⲆⲆ[2], p);
      } else {
        Lo.fillStyle = k.ΔΔⲆΔⵠ[uf.time];
      }
      Lo.fillRect(t, r, u, b);
    }
  }
  function Ev(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Sw.ᐃΔΔⵠ.x + j + 820;
    var l = Math.max(Sw.ᐃΔΔⵠ.y + e, 0);
    var g = Math.max(-Sw.ᐃΔΔⵠ.y + cq - i - nh, Ob);
    var t = l;
    var b = cq - l - g;
    if (o) {
      var u = q.ⵠⲆⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + fw.ⵠⲆᐃⲆᐃ;
    var w = v;
    var m = t;
    var p = -u.x + fw.ⲆᐃⵠΔⵠ;
    var C = b;
    var F = v += -u.x + fw.ⲆᐃⵠΔⵠ + ys;
    if (o) {
      u = q.ⵠⲆⵠ(a);
    } else {
      u = a.r;
    }
    var f = h - fw.ⵠΔⵠⲆⵠ - v - u.x;
    var G = v;
    var H = t;
    var K = f;
    var A = b;
    var k = (v += f + 2) - Ir;
    if (o) {
      u = q.ⵠⲆⵠ(s);
    } else {
      u = s.r;
    }
    if (k > v + (f = h - fw.Ⲇᐃⵠⵠⵠ - v - u.x)) {
      var x = eo;
      var L = v;
      var M = t;
      var B = f;
      var D = b;
      var E = v += f + 2;
    } else {
      x = false;
      v = k;
      E = -1;
    }
    f = h - fw.ᐃⵠⵠΔⵠⲆⵠ - v;
    if (uf.transition) {
      var N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(w, m, p, C);
    if (o) {
      if (uf.transition) {
        N = uf.time ? y - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 70, 76, 42, 139, 155, N);
      } else {
        Lo.fillStyle = rs.ᐃⲆⵠⵠⵠⵠΔ[uf.time];
      }
    } else if (uf.transition) {
      N = uf.time ? Zk - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(G, H, K, A);
    if (x) {
      if (o) {
        if (uf.transition) {
          N = uf.time ? Th - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
          Lo.fillStyle = Gv(17, 94, 96, 169, 214, 211, N);
        } else {
          Lo.fillStyle = rs.ΔⵠⲆᐃⵠⵠᐃ[uf.time];
        }
      } else if (uf.transition) {
        N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
      } else {
        Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
      }
      Lo.fillRect(L, M, B, D);
    }
    if (hf.ⵠⵠᐃΔΔ && o) {
      q.ΔᐃᐃⵠᐃᐃᐃⲆⲆ(k, E, F, h, -Sw.ᐃΔΔⵠ.y + m, -Sw.ᐃΔΔⵠ.y + m + C);
    }
  }
  function Fv(a, b) {
    if (uf.transition) {
      Lo.globalAlpha = bq;
      a.ᐃΔᐃᐃΔ(b);
      uf.time = uf.time ? 0 : bh;
      Lo.globalAlpha = 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      a.ᐃΔᐃᐃΔ(b);
      uf.time = uf.time ? 0 : 1;
      Lo.globalAlpha = 1;
    } else {
      a.ᐃΔᐃᐃΔ(b);
    }
  }
  function Gv(b, c, d, e, f, g, i) {
    var a;
    var j = "#";
    j += (a = Math.floor(e * i + b * (1 - i))) < 16 ? "0" + a.toString(Oa) : a.toString(16);
    j += (a = Math.floor(i * f + (1 - i) * c)) < 16 ? "0" + a.toString(16) : a.toString(Ao);
    return j += (a = Math.floor(g * i + (1 - i) * d)) < 16 ? "0" + a.toString(16) : a.toString($h);
  }
  function Hv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Sw.ᐃΔΔⵠ.y + j - 700;
    var l = Math.max(Sw.ᐃΔΔⵠ.x + e, 0);
    var g = Math.max(-Sw.ᐃΔΔⵠ.x + Oo - i - 100, ks);
    var t = l;
    var b = Oo - l - g;
    if (o) {
      var u = q.ⵠⲆⵠ(r);
    } else {
      u = r.r;
    }
    var v = h + fw.ⵠⲆᐃⲆᐃ;
    var F = t;
    var m = v;
    var p = u.x + fw.ⲆᐃⵠΔⵠ;
    var C = b;
    var G = v += u.x + fw.ⲆᐃⵠΔⵠ - rb;
    if (o) {
      u = q.ⵠⲆⵠ(a);
    } else {
      u = a.r;
    }
    var f = h + fw.ⵠΔⵠⲆⵠ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - ab) - yl;
    if (o) {
      u = q.ⵠⲆⵠ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + fw.Ⲇᐃⵠⵠⵠ - v + u.x) - Xg) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - Ir;
    } else {
      k = false;
      v = A;
      D = -Th;
    }
    f = h + fw.ᐃⵠⵠΔⵠⲆⵠ - v;
    if (uf.transition) {
      var N = uf.time ? uq - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(F, m, C, p);
    if (o) {
      if (uf.transition) {
        N = uf.time ? bh - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(15, 70, 76, 42, 139, 155, N);
      } else {
        Lo.fillStyle = rs.ᐃⲆⵠⵠⵠⵠΔ[uf.time];
      }
    } else if (uf.transition) {
      N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
    } else {
      Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
    }
    Lo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (uf.transition) {
          N = uf.time ? bq - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
          Lo.fillStyle = Gv(17, 94, 96, 169, 214, 211, N);
        } else {
          Lo.fillStyle = rs.ΔⵠⲆᐃⵠⵠᐃ[uf.time];
        }
      } else if (uf.transition) {
        N = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
        Lo.fillStyle = Gv(9, 55, 63, 11, 106, 132, N);
      } else {
        Lo.fillStyle = rs.ΔⲆᐃᐃᐃ[uf.time];
      }
      Lo.fillRect(J, L, B, M);
    }
    if (hf.ⵠⵠᐃΔΔ && o) {
      q.ΔⵠᐃⵠΔⲆᐃⲆⵠ(A, D, G, h, -Sw.ᐃΔΔⵠ.x + F, -Sw.ᐃΔΔⵠ.x + F + C);
    }
  }
  function Iv(b, c, d, e, f) {
    var g = d.width;
    var i = d.height;
    var a = Math.floor(g / Sa);
    var j = Math.floor(i / ys);
    if (uf.transition) {
      Lo.globalAlpha = Ws;
      Rm(Lo, ⵠᐃ[b][c][uf.time], dh, 0, g, i, e, f, a, j);
      uf.time = uf.time ? Eu : Zk;
      Lo.globalAlpha = 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Rm(Lo, ⵠᐃ[b][c][uf.time], dt, 0, g, i, e, f, a, j);
      uf.time = uf.time ? 0 : 1;
      Lo.globalAlpha = vg;
    } else {
      Rm(Lo, ⵠᐃ[b][c][uf.time], 0, jg, g, i, e, f, a, j);
    }
  }
  function Jv(a, b, c, d, e) {
    if (uf.transition && e == 1) {
      Lo.globalAlpha = 1;
      Rm(Lo, ⵠᐃ[a][uf.time][b], c, d);
      uf.time = uf.time ? Go : 1;
      Lo.globalAlpha = 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ;
      Rm(Lo, ⵠᐃ[a][uf.time][b], c, d);
      uf.time = uf.time ? ka : $r;
      Lo.globalAlpha = uq;
    } else {
      Lo.globalAlpha = e;
      Rm(Lo, ⵠᐃ[a][uf.time][b], c, d);
      Lo.globalAlpha = 1;
    }
  }
  var Lv = 0;
  var Mv = Dj;
  var Nv = Og;
  var Ov = dt;
  var Pv = 1;
  var Qv = Sa;
  function Rv(a, b, c, d, e) {
    var f = {
      x: c,
      y: d,
      ΔΔⲆⵠⵠ: c,
      ΔᐃΔⵠΔ: d
    };
    return {
      translate: f,
      ᐃⵠΔⲆ: function (b) {
        Rm(b, a, f.x, f.y, a.width / yl, a.height / 2);
      },
      active: b,
      position: e
    };
  }
  function Sv(f, e, h, i, j, k, n, a = 0, p = undefined, q = 0, g) {
    if (p === undefined) p = fs;
    if (g === Kk) {
      g = Ng;
    }
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var s = i;
    }
    var b;
    var w = {
      width: f,
      height: e,
      Δᐃ: s,
      state: Ov,
      translate: {
        x: a,
        y: p,
        ΔΔⲆⵠⵠ: a,
        ΔᐃΔⵠΔ: p
      },
      ΔⵠⲆⲆᐃⲆⵠΔⲆ: k,
      ⲆΔᐃⵠ: 0,
      callback: n,
      position: q,
      active: g
    };
    function d() {
      return w.Δᐃ[w.state];
    }
    function c(a) {
      var b = w.translate;
      if (w.width === Xa || w.height === 0) {
        w.width = w.Δᐃ[vl].width;
        w.height = w.Δᐃ[vl].height;
      }
      return a.x > b.x && a.x < b.x + w.width / j && a.y > b.y && a.y < b.y + w.height / j;
    }
    k = function () {
      var a = 0;
      if (w.ΔⵠⲆⲆᐃⲆⵠΔⲆ === 1) {
        if (w.state === Pv || w.state === Qv) {
          w.ⲆΔᐃⵠ = (w.ⲆΔᐃⵠ + Cf * 1000) % 1000;
        } else if (w.ⲆΔᐃⵠ > 0) {
          w.ⲆΔᐃⵠ = w.ⲆΔᐃⵠ > 500 ? w.ⲆΔᐃⵠ + Cf * 1000 : w.ⲆΔᐃⵠ - Cf * 1000;
          if (w.ⲆΔᐃⵠ < 0 || w.ⲆΔᐃⵠ > 1000) {
            w.ⲆΔᐃⵠ = Go;
          }
        }
        a = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(w.ⲆΔᐃⵠ > 500 ? (1000 - w.ⲆΔᐃⵠ) / 500 : w.ⲆΔᐃⵠ / 500) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : y) === 2) {
      b = function (b) {
        var c = 1 + k();
        var e = d();
        var f = c * w.width / dj;
        var g = w.height * c / 2;
        var h = (f - w.width / uj) / kg;
        var a = (g - w.height / 2) / uj;
        Rm(b, e, w.translate.x - h, w.translate.y - a, f, g);
      };
    } else if (j === 3) {
      b = function (a) {
        var b = d();
        var c = w.width;
        var e = w.height;
        var f = (c - w.width) / kg;
        var g = (e - w.height) / it;
        Rm(a, b, w.translate.x - f, w.translate.y - g, c, e);
      };
      j = 1;
    } else {
      b = function (a) {
        Rm(a, d(), w.translate.x, w.translate.y);
      };
    }
    return {
      info: w,
      ⵠΔⵠᐃ: function (a, b, d) {
        if (c(b)) {
          if (d == Mv) {
            w.state = Qv;
          } else if (d == Nv || d == Lv && w.state != Qv) {
            w.state = Pv;
          }
          return true;
        } else {
          w.state = Ov;
          return zn;
        }
      },
      ᐃⵠΔⲆ: b,
      ⵠᐃΔⵠⵠΔᐃ: c
    };
  }
  function Tv(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function Uv(f, h, i, j, k, n, q, r, t, w, g, u, b, v, x) {
    if (ho === f.length) {
      f = " ";
    }
    if (q === pa) {
      q = dt;
    }
    if (Hi === r) {
      r = 0;
    }
    if (oh === t) {
      t = Eu;
    }
    if (v === undefined) {
      v = 0;
    }
    var c = document.createElement("canvas");
    var m = c.getContext("2d");
    m.textBaseline = fj[Rl];
    m.font = (x !== undefined ? x + " " : "") + j + "px " + h;
    k = k !== undefined ? Math.min(m.measureText(f).width, k) : m.measureText(f).width;
    c.width = k + q;
    c.height = j + r;
    if (n !== undefined) {
      if (g !== eg) {
        m.globalAlpha = g;
      }
      m.fillStyle = n;
      if (Zr !== u) {
        ᐃΔⲆᐃⲆⵠᐃⲆⲆ(m, t + dj, t, k + q - yl * t - 4, j + r - t * rb, u);
        m.fill();
      } else {
        m.fillRect(t, t, k + q - t * uj, j + r - t * 2);
      }
      m.globalAlpha = 1;
      if (t !== 0) {
        m.lineWidth = t;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (x !== Sn ? x + " " : "") + j + "px " + h;
    if (b !== undefined) {
      m.strokeStyle = b;
      m.lineWidth = v;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(f, Math.floor(q / 2), Math.floor(r / 2) + Math.floor(j / 2), k);
    }
    m.fillStyle = i;
    m.fillText(f, Math.floor(q / Ci), Math.floor(r / uj) + Math.floor(j / 2), k);
    c.w2 = c.width / Ir;
    c.ⲆⲆⲆΔⵠ = c.height / 2;
    return c;
  }
  var Vv = "send";
  var Wv = ⵠⲆᐃⲆ.ⵠΔᐃᐃΔᐃᐃ(fj[Go]) === "1" ? $q : gj;
  var Xv = ⵠⲆᐃⲆ.ⵠΔᐃᐃΔᐃᐃ("password");
  var Yv = ⵠⲆᐃⲆ.ⵠΔᐃᐃΔᐃᐃ("debug") || undefined;
  if (Yv !== Zr) {
    Yv = JSON.parse(Vf.decodeURIComponent(Yv));
  }
  var Zv = "starve.io";
  var $v = "https://" + Zv;
  var _v = {
    ΔⵠΔⲆᐃᐃⵠ: 32,
    ⵠΔᐃᐃΔⵠᐃ: 16,
    ⵠΔᐃⲆⲆ: jo,
    ΔⵠⲆᐃᐃΔⲆ: 128,
    ᐃᐃᐃΔᐃᐃΔ: Zj,
    ΔΔΔⵠᐃΔⵠ: Dn,
    ᐃⵠⵠᐃⲆⲆᐃᐃᐃ: 1,
    IDLE: 64,
    ΔⲆⵠⲆ: 2
  };
  var aw = [{
    ⲆᐃⲆⵠΔ: 1000,
    items: [[2, ts.ᐃⲆΔⲆⵠ], [1, ts.ⵠⵠⵠⵠᐃ], [Cr, ts.ⲆⲆⵠᐃᐃ], [Th, ts.ⲆⲆⲆⵠⲆ]]
  }, {
    ⲆᐃⲆⵠΔ: 2000,
    items: [[2, ts.ΔⲆΔⵠΔ], [Dj, ts.ⲆⵠΔⵠΔ], [nl, ts.ⵠⵠⵠⵠᐃ], [tt, ts.ⲆⲆⵠᐃᐃ], [2, ts.ⲆⲆⲆⵠⲆ]]
  }, {
    ⲆᐃⲆⵠΔ: 4000,
    items: [[3, ts.ΔⲆΔⵠΔ], [Zk, ts.ⵠᐃΔΔᐃ], [4, ts.ⵠⵠⵠⵠᐃ], [aq, ts.ⲆⲆⵠᐃᐃ], [xs, ts.ⲆⲆⲆⵠⲆ], [Dj, ts.ΔᐃⵠΔᐃ], [80, ts.ⵠΔΔⲆ], [140, ts.ᐃⲆᐃΔ]]
  }, {
    ⲆᐃⲆⵠΔ: 8000,
    items: [[1, ts.ⵠⵠᐃΔ], [4, ts.ΔⲆΔⵠΔ], [og, ts.ᐃⵠⵠΔΔ], [6, ts.ⵠⵠⵠⵠᐃ], [30, ts.ⲆⲆⵠᐃᐃ], [pu, ts.ⲆⲆⲆⵠⲆ], [Dj, ts.ΔᐃⵠΔᐃ], [150, ts.ⵠΔΔⲆ], [200, ts.ᐃⲆᐃΔ], [60, ts.ΔᐃⲆⲆ], [2, ts.ⵠⵠⲆΔⲆ]]
  }, {
    ⲆᐃⲆⵠΔ: 16000,
    items: [[bh, ts.ⵠⵠᐃΔ], [kr, ts.ᐃᐃΔΔⵠ], [bq, ts.ⵠΔⵠⵠⲆ], [kb, ts.ᐃⲆⲆⵠΔ], [kg, ts.ⵠⵠⲆΔⲆ], [dj, ts.ΔⲆΔⵠΔ], [y, ts.ⲆΔΔΔΔ], [15, ts.ΔᐃᐃⲆᐃ], [nq, ts.ᐃᐃᐃΔⵠ], [1, ts.ⲆⲆⲆⲆⲆ], [Ws, ts.ᐃⲆΔⲆΔ], [200, ts.ⵠΔΔⲆ], [300, ts.ᐃⲆᐃΔ]]
  }, {
    ⲆᐃⲆⵠΔ: 16000,
    items: [[bh, ts.ⵠⵠᐃΔ], [1, ts.ΔΔⵠⵠⲆ], [1, ts.ΔⵠⲆᐃⵠ], [ck, ts.ᐃⵠⵠΔΔ], [tu, ts.ᐃⲆⲆⵠΔ], [4, ts.ⵠⵠⲆΔⲆ], [xg, ts.ΔⲆΔⵠΔ], [R, ts.ⵠⲆΔⲆⲆ], [$q, ts.ᐃᐃⵠⵠⲆ], [200, ts.ⵠΔΔⲆ], [300, ts.ᐃⲆᐃΔ]]
  }, {
    ⲆᐃⲆⵠΔ: 16000,
    items: [[1, ts.ⵠⵠᐃΔ], [$q, ts.Ⲇᐃⵠᐃᐃ], [1, ts.ⲆⵠΔΔⲆ], [3, ts.ⵠⲆΔⲆⲆ], [1, 0], [1, ts.ᐃⵠⵠΔΔ], [7, ts.ᐃⲆⲆⵠΔ], [2, ts.ⵠⵠⲆΔⲆ], [ll, ts.ΔⲆΔⵠΔ], [150, ts.ⵠΔΔⲆ], [200, ts.ᐃⲆᐃΔ], [1, ts.ⲆΔⲆⵠᐃ]]
  }, {
    ⲆᐃⲆⵠΔ: 16000,
    items: [[Ng, ts.ⵠⵠᐃΔ], [y, ts.ΔΔⲆⵠⲆ], [Dj, ts.ᐃⵠⵠΔΔ], [7, ts.ᐃⲆⲆⵠΔ], [Ts, ts.ⵠⵠⲆΔⲆ], [oo, ts.ΔⲆΔⵠΔ], [2, ts.ⵠᐃΔⵠΔ], [4, ts.ΔⵠⵠΔⵠ], [10, ts.ⲆⵠΔᐃΔ], [rt, ts.ΔᐃΔⲆⲆ], [Dl, ts.ⵠΔⵠⲆΔ], [1, ts.ⵠⲆⲆⲆᐃ], [500, ts.ᐃⲆᐃΔ]]
  }, {
    ⲆᐃⲆⵠΔ: 16000,
    items: [[1, ts.ⵠⵠᐃΔ], [Th, ts.ᐃⵠⵠΔΔ], [16, ts.ᐃⵠⵠΔⵠ], [1, ts.ⵠⵠⲆΔⲆ], [iq, ts.ΔⲆΔⵠΔ], [3, ts.ⵠⲆΔⲆⲆ], [1, ts.ᐃⲆⲆΔⲆ], [1, ts.ⲆⲆΔᐃⵠ], [Un, ts.ⲆⲆΔΔΔ], [150, ts.ⵠΔΔⲆ], [200, ts.ᐃⲆᐃΔ]]
  }, {
    ⲆᐃⲆⵠΔ: 20000,
    items: [[$r, ts.ⵠⵠᐃΔ], [1, ts.ᐃⵠⵠΔΔ], [$r, ts.ᐃⲆⲆⵠΔ], [Th, ts.ⵠⵠⲆΔⲆ], [Jh, ts.ΔⲆΔⵠΔ], [_g, ts.ⵠⲆΔⲆⲆ], [1, ts.ⵠⲆⵠⵠᐃ], [og, ts.ⲆᐃΔⵠⵠ], [1, ts.ⲆΔΔΔᐃ], [2, ts.ᐃΔⵠᐃᐃ], [50, ts.ⵠΔΔⲆ], [Aq, ts.ᐃⲆᐃΔ]]
  }];
  var bw = {
    ᐃⵠⵠᐃΔΔᐃⲆⵠ: 200,
    ᐃⲆᐃⵠᐃΔᐃ: Ts,
    ⵠΔⲆΔᐃⵠⲆᐃᐃ: 3,
    ᐃᐃⲆΔᐃᐃⲆ: 0.2,
    ΔⵠⲆΔΔⲆΔⲆⵠ: 0.58,
    ΔⲆᐃΔⲆⵠΔ: Io,
    ᐃᐃⲆⲆⵠⵠᐃⲆⲆ: Sj,
    ᐃⲆᐃΔΔΔΔ: 4,
    ⵠⵠΔΔΔⵠΔ: 52,
    ⵠⵠⵠⵠⵠᐃᐃⵠⲆ: 8000,
    ⲆΔᐃΔⲆΔᐃ: Eu,
    ⲆᐃΔΔᐃⵠΔ: 3,
    ΔⵠⵠΔⵠΔⵠΔᐃ: 5,
    ᐃⵠΔᐃΔΔⲆΔⵠ: 20,
    ⵠΔᐃᐃᐃᐃⲆ: 600000,
    ΔⲆⵠⵠᐃΔᐃⵠΔ: 2000,
    ⲆⲆⵠⲆⲆⵠΔⲆⵠ: 26,
    ⵠⵠΔⲆΔΔᐃⵠΔ: 14,
    ᐃᐃᐃΔⲆⲆΔⲆⲆ: 50,
    ⲆΔⲆⵠⵠⲆΔⵠΔ: Pq,
    ⵠΔᐃᐃΔⵠᐃ: 0.2,
    ⲆⲆΔᐃΔΔᐃΔᐃ: 125000,
    ⵠⲆΔᐃⵠⲆⵠΔΔ: "[" + dn + "]",
    ΔΔΔⵠⵠⲆⲆᐃⵠ: 60000,
    ᐃⵠΔⵠΔᐃΔ: 1
  };
  function cw(a, b, c, d, e) {
    Qe(Ak, a, b, c, d, e);
    return ((83 + (kt(zk[Go], zk[vg]) ^ Eo(zk[2], zk[Ia], zk[4], zk[ka]))) * 75 + 74) % 65537;
  }
  function dw(b, c, d, e) {
    const f = (8 << (b >> 8 & 255)) + (24 << (b & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255));
    const g = (1 + (c + 44589) * 22695477) % 4294967296;
    const i = (d | 55208) & ~(d & 55208);
    const a = ((e + 25543) * 1103515245 + 12345) % 2147483648;
    const j = qk(f, g);
    (function (b, c, d, e, f) {
      const g = b ^ 57510;
      const h = ~(f & 11694) & f | ~(f & 11694) & 11694;
      const a = Xc(g, ~(c & 46360) & c | ~(c & 46360) & 46360, ~(d & 25146) & d | ~(d & 25146) & 25146, ~(e & 45890) & (e | 45890));
      tb(h, g);
    })(i, a, f, g, i);
    return j ^ 44598;
  }
  function ew(b, c, d, e, f) {
    const g = ~(b & 34987) & (b | 34987);
    const i = e ^ 33438;
    const a = (2147483587 + (f + 3159) * 2147483629) % 2147483647;
    const j = To(g, (c | 32276) & ~(c & 32276), (24 << (d >> 8 & 255)) + (16 << (d >> 16 & 255)) + (0 << (d >> dt & il)) + (8 << (d >> 24 & 255)));
    const h = of(i, a, g);
    return (8 << ((j ^ h) >> 8 & Vg)) + (0 << ((j ^ h) >> 16 & 255)) + (24 << ((j ^ h) & 255)) + (16 << ((j ^ h) >> 24 & 255));
  }
  var fw = {
    ΔΔⲆ: 480000,
    ⵠⵠᐃⵠᐃᐃⵠ: Xn,
    ⵠΔΔᐃⲆⲆΔ: 16,
    ᐃᐃⵠⵠⵠΔΔⵠᐃ: Ao - 10,
    ᐃΔⲆᐃᐃⵠⵠ: 60,
    ⲆΔΔⲆⲆ: Zn,
    ⲆⲆⵠΔᐃ: 2,
    ΔᐃᐃΔΔ: Fl,
    ⵠⲆΔΔᐃ: 8,
    ᐃᐃⲆΔᐃᐃⲆ: Ys,
    ᐃⵠⲆΔᐃⵠⵠ: Kh,
    ⵠⲆⵠⵠΔⲆⵠ: 100,
    ⵠᐃΔᐃΔᐃⲆ: hh,
    ⵠⵠᐃΔΔΔⲆΔᐃ: 100,
    ΔⵠⵠᐃⵠΔΔ: 100,
    ⲆⵠⵠⵠΔΔΔ: 100,
    ΔⵠⲆΔⲆⵠᐃⲆⲆ: qr,
    ⲆⵠⵠⵠΔΔΔ: 100,
    ΔⲆᐃⲆᐃⵠⲆ: 100,
    ΔⲆⵠⲆᐃⲆᐃ: 100,
    ⲆⲆΔⵠⵠ: 0,
    ᐃΔΔⵠᐃⵠⲆ: $r,
    ⵠⵠᐃΔⲆ: yl,
    ⵠⵠᐃᐃΔ: wq,
    ⵠᐃⵠᐃᐃ: Yr,
    ΔⵠⲆᐃΔⵠΔ: Lj,
    Δᐃⵠⵠⵠ: f,
    ⵠΔΔΔΔ: at,
    ᐃᐃᐃΔⲆⲆⲆⲆⵠ: {
      losangeles: "Los Angeles",
      sydney: "Sydney",
      osaka: "Osaka",
      frankfurt: "Frankfurt",
      atlanta: "Atlanta"
    },
    ⵠΔΔⲆⵠⲆᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ᐃᐃΔᐃᐃⲆⵠ: 0,
    ⵠᐃⵠⵠⲆΔⲆ: 0,
    ᐃΔⵠⲆᐃⲆᐃ: 30,
    ΔΔᐃᐃΔᐃⲆᐃⵠ: 2,
    ᐃΔⲆᐃᐃⵠⵠ: 60000,
    ⵠᐃΔⵠᐃΔⵠⲆᐃ: 0,
    ⲆⵠⵠⵠⲆΔⵠΔⵠ: dh,
    ΔᐃΔⵠⵠⲆᐃΔⵠ: 50,
    ⲆΔⵠⲆᐃⵠᐃᐃⲆ: Go,
    ⵠΔⵠⵠⵠⵠᐃⵠᐃ: 40,
    ⵠⲆΔᐃⲆΔΔΔΔ: 39,
    ⲆⲆᐃⵠᐃᐃΔⲆᐃ: 830,
    ⵠⲆⲆⵠΔⲆΔ: 25,
    ⵠΔⵠᐃⵠᐃⲆ: 8,
    ⲆᐃⵠΔⵠ: 0,
    ⵠⲆᐃⲆᐃ: 0,
    ⲆᐃΔΔⵠΔᐃ: 200,
    ΔⵠΔⲆΔⲆⲆ: 0,
    ⵠΔⵠⲆⵠ: 250,
    ΔΔⵠᐃΔⵠⵠ: 150,
    ΔⲆᐃΔᐃⵠᐃ: 0,
    Ⲇᐃⵠⵠⵠ: 350,
    ΔⵠⲆⵠⲆᐃΔ: 100,
    ᐃⵠⵠΔⵠⲆⵠ: 700,
    ⵠΔⵠⲆΔ: 39879
  };
  var gw = [];
  for (zt = Ob; zt < 500; zt++) {
    gw[zt] = fs;
  }
  gw[rs.ᐃⵠⲆⲆⲆ] = bh;
  gw[rs.ⵠⵠⲆⲆⲆ] = Zn;
  gw[rs.ⲆⲆΔᐃⵠ] = 1;
  gw[rs.ⲆᐃΔⵠⵠ] = 1;
  gw[rs.ΔᐃⵠΔⲆ] = 1;
  gw[rs.ⵠΔⲆⵠⲆ] = Zk;
  gw[rs.ⲆΔⵠⵠⵠ] = 1;
  gw[rs.ᐃⲆΔⵠⵠ] = or;
  gw[rs.ᐃⵠⵠⲆᐃ] = 1;
  gw[rs.ΔⵠⲆⵠᐃ] = ck;
  gw[rs.ⲆΔᐃⵠᐃ] = 1;
  gw[rs.ΔⲆⵠΔᐃ] = 1;
  gw[rs.ⲆΔΔΔᐃ] = or;
  gw[rs.ΔⲆⲆΔⵠ] = bq;
  gw[rs.ᐃᐃⲆᐃⲆ] = vg;
  gw[rs.ᐃⵠⲆᐃⲆ] = 1;
  gw[rs.ΔⵠⲆΔᐃ] = bh;
  gw[rs.ⲆⲆᐃᐃⵠ] = Zk;
  gw[rs.ⵠΔᐃⲆᐃ] = $r;
  var hw = [{
    time: pu * 480000
  }, {
    time: Sr * 60000 * 3
  }, {
    time: nb * 60000 * 4
  }, {
    time: 1440000
  }, {
    time: I * 60000 * iq
  }, {
    time: Rh * (Zj * 60000)
  }, {
    time: Es * 60000 * 5
  }, {
    time: Cr * 60000 * 10
  }, {
    time: Vh * (Es * 60000)
  }, {
    time: Tl * 480000
  }, {
    time: ct * 60000 * vd
  }, {
    time: Es * 60000 * lj
  }, {
    time: Vt * (Sr * 60000)
  }];
  var iw = {
    ⵠⲆⵠΔⵠ: 74,
    ΔᐃΔⵠⵠ: 51,
    ΔⵠⵠΔⵠ: 34,
    ⵠⵠⵠⵠⵠ: Yr,
    ᐃΔⵠᐃᐃ: 13,
    ΔΔΔⵠΔ: 37,
    ⲆⵠⵠⵠΔ: 14,
    Δᐃⵠᐃᐃ: 48,
    ᐃΔⲆⵠⲆ: 44,
    ΔᐃⵠⲆⲆ: 52,
    ΔΔΔⲆΔ: 65,
    ⵠᐃⵠⲆᐃⲆᐃ: 84,
    Δⵠⵠⵠⵠ: 91,
    ⵠᐃⵠΔΔ: 90,
    ⲆᐃⵠⵠΔ: 53,
    ⲆᐃⲆⵠᐃ: 80,
    ΔᐃΔⲆⲆ: 31,
    ⵠΔⵠⵠⲆ: 41,
    ΔⲆⲆⲆⲆⲆⵠ: 83,
    ⲆⵠΔᐃΔ: 33,
    ΔⲆΔΔΔ: 68,
    ᐃᐃᐃⲆΔ: 61,
    ⵠⵠΔΔΔ: 21,
    ᐃⲆᐃⵠᐃ: 77,
    ΔᐃⵠᐃⲆ: nh,
    ⲆΔᐃⲆᐃ: 22,
    ⵠⲆⲆⲆΔ: 11,
    ⵠΔⲆΔⵠ: 66,
    ΔᐃⵠⲆⵠ: 62,
    ΔΔΔⵠⵠ: $l,
    ⲆᐃΔΔΔ: Pi,
    ⵠᐃⲆᐃᐃ: 12,
    ᐃⲆΔⲆⵠ: 1,
    ΔⵠΔⲆᐃ: 78,
    ᐃⲆⵠᐃⲆ: 10,
    ΔⲆΔⵠΔ: Vs,
    ΔᐃΔΔΔ: 79,
    ⲆᐃΔᐃⲆ: 24,
    ᐃᐃᐃΔⵠ: sq,
    ᐃⲆΔᐃⵠ: 49,
    ᐃΔΔΔⲆ: 9,
    ᐃⲆΔᐃᐃ: Db,
    ⲆⲆⲆⲆⲆ: 29,
    ᐃⵠΔⵠⲆ: 81,
    ᐃΔᐃᐃᐃ: 56,
    ⲆΔᐃᐃΔ: 46,
    ⲆⲆᐃⵠΔ: 64,
    ⲆΔᐃⲆΔ: 60,
    ⵠᐃⲆⵠⵠ: 54,
    ᐃΔⵠΔⵠ: 23,
    ᐃⲆᐃⲆⲆ: 71,
    ⲆᐃⲆᐃⲆ: 20,
    ⲆⲆⵠΔⵠ: 26,
    ⵠⵠᐃⵠⲆᐃᐃ: 85,
    ⲆⲆⲆᐃⲆ: 72,
    ⲆⲆΔΔΔ: 30,
    ΔᐃⵠΔᐃ: 2,
    ᐃΔᐃᐃⵠ: 45,
    ᐃᐃᐃΔᐃ: 28,
    ΔᐃⵠΔⵠ: 73,
    ⲆΔⵠΔⲆ: 69,
    ⵠⲆⲆΔᐃ: 88,
    ⵠⵠⲆΔⵠ: 39,
    ΔⲆⵠᐃⵠ: 70,
    ⵠΔᐃΔᐃ: 38,
    ⵠⵠΔⵠⲆ: 87,
    ⵠᐃⲆⵠⲆ: 86,
    ⵠⵠᐃⲆᐃ: 55,
    ᐃᐃᐃⵠΔ: 42,
    ⲆΔΔΔΔ: fg,
    ΔᐃᐃⲆᐃ: 7,
    ⲆⵠⲆΔⵠ: 36,
    ⵠⲆΔⵠᐃ: 63,
    ⲆΔᐃⲆⲆ: 47,
    ⲆⵠⲆⵠᐃ: 35,
    ⵠΔΔᐃᐃᐃⵠ: 89,
    ᐃᐃⲆⲆᐃ: 67,
    ⵠΔⵠⲆΔ: 3,
    ᐃⲆΔⲆΔⲆⵠ: 76,
    ⵠᐃΔⵠΔ: 32,
    ᐃⲆⲆΔᐃ: ka,
    ⲆⲆⲆⲆⲆΔⲆ: 82,
    ⲆΔΔᐃⲆ: wr,
    ⵠΔᐃⵠᐃ: Zj,
    ⵠⵠⵠⵠⲆ: 27,
    ⵠΔⲆⵠΔ: 25,
    ΔΔΔⲆⵠ: 50,
    ⵠᐃⲆⲆᐃ: 75,
    ᐃᐃᐃⲆⲆ: 43,
    ΔΔΔᐃⲆ: 40
  };
  var jw = [[iw.ⲆᐃΔᐃⲆ, ts.ⵠΔΔⲆ], [iw.ⵠΔⲆⵠΔ, ts.ΔᐃⲆⲆ], [iw.ⲆⲆⵠΔⵠ, ts.ᐃⲆΔⵠ], [iw.ⵠⵠⵠⵠⲆ, ts.ⲆΔⲆᐃ], [iw.ᐃᐃᐃΔᐃ, ts.ⲆⲆⵠΔ]];
  function kw() {
    this.ᐃᐃⵠⲆΔ = "";
    this.ᐃᐃᐃⵠ = 0;
    this.ⲆⲆⵠⲆⲆ = ks;
    this.ⲆⵠⲆⲆᐃ = lt;
    this.ᐃᐃᐃᐃⵠᐃⲆ = lt;
    this.ᐃⲆⲆΔΔ = ho;
    this.ᐃⲆΔᐃΔ = 0;
    this.ⵠΔᐃΔΔ = 0;
    this.level = ks;
    this.label = null;
    this.ΔⲆⵠⲆΔⵠⲆ = null;
    this.ⵠⲆⲆⲆΔᐃΔ = null;
    this.ⵠⵠᐃⲆΔ = false;
    this.ΔΔⲆΔᐃ = gj;
  }
  function lw(a, b, c, d) {
    this.id = a;
    this.ΔΔⲆⲆⵠ = yn * (a + 5);
    this.ᐃⲆⵠΔᐃ = Oo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ΔᐃⲆⵠ = Math.cos(d);
    this.alpha = 0;
  }
  function mw(b, c, d, e) {
    const f = b ^ 49890;
    const g = (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c & Rk));
    const i = ((2373 + d) * 2147483629 + 2147483587) % 2147483647;
    const a = ~(e & 15908) & (e | 15908);
    const j = nn(f, g, i, a, f);
    const h = nn(g, i, a, f, g);
    return (0 << ((j ^ h) & 255)) + (24 << ((j ^ h) >> 16 & 255)) + (pg << ((j ^ h) >> 24 & 255)) + (8 << ((j ^ h) >> 8 & 255));
  }
  function nw(h) {
    function j(c, d, e, f, i) {
      var j = d + Math.floor(f * uf.ΔΔⵠⲆΔ.get());
      var k = e + Math.floor(uf.ΔΔⵠⲆΔ.get() * f);
      var a = 10 + Math.floor(uf.ΔΔⵠⲆΔ.get() * (uf.ⲆⵠᐃΔⵠ - j - tl));
      var m = 10 + Math.floor((uf.ΔΔΔΔᐃ - k - 20) * uf.ΔΔⵠⲆΔ.get());
      var h = a + j;
      var l = m + k;
      for (var g = 0; g < uf.ⵠⵠⵠⲆⲆ.length; g++) {
        var n = uf.ⵠⵠⵠⲆⲆ[g];
        if (Ng === ⵠⲆᐃⲆ.ΔᐃⵠⲆᐃΔᐃ(a, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / Is - i, n.y2 / nh + i)) {
          return Eu;
        }
      }
      uf.ⵠⵠⵠⲆⲆ.push(new uf.ᐃⲆⲆⲆΔⵠᐃ(c, a, m, j, k, 15));
      return 1;
    }
    function e(a, b, c) {
      var d = b;
      for (var e = c; uf.ΔΔΔΔᐃ > e; e++) {
        for (var f = b; uf.ⲆⵠᐃΔⵠ > f && (c === e && (d = Math.max(f, d)), f <= d) && a[e][f] !== 1; f++) {
          a[e][f] = 1;
        }
        if (f < d) {
          break;
        }
      }
      uf.ⵠⵠⵠⲆⲆ.push(new uf.ᐃⲆⲆⲆΔⵠᐃ(uf.ᐃⵠᐃⲆⲆ, b, c, d - b + bq, e - c, 15));
    }
    function i(b, c, d, e, f) {
      for (var g = 0; f > g && y !== j(b, c, d, e, te); g++);
      if (f === g) {
        return 0;
      } else {
        return 1;
      }
    }
    function l(a, b) {
      for (var c = hk; c < b.length; c++) {
        q(b[c][0], b[c][1], a, b[c][nl]);
      }
    }
    function o(a, b) {
      var e = uf.ⵠⵠⵠⲆⲆ[a];
      var f = Math.floor(e.y1 / 100);
      var i = Math.floor(e.x1 / 100);
      var j = Math.floor(e.ᐃᐃⲆ / k);
      var o = i + (B = Math.floor(e.w / bl));
      var q = 2;
      var r = j;
      var s = f;
      for (var t = i + 10 + Math.floor(uf.ΔΔⵠⲆΔ.get() * (B - Aa)), w = t - 4; t + 4 > w; w++) {
        x(f - Ng, w, "wtb", 0, kr);
      }
      while (r > 0) {
        if (q !== 2) {
          if (r < Sb) {
            for (D = 1; r > dt; D++) {
              n(s, t, bh, bt, Yl, b, D, 1);
              r -= Zk;
              s += 1;
            }
          } else if (q !== Zk) {
            q = 1;
            var y = Math.floor(1 + uf.ΔΔⵠⲆΔ.get() * 2);
            var z = Ng + Math.floor(uf.ΔΔⵠⲆΔ.get() * mi);
            if (t < i + tt) {
              n(s, t, y, fs, 1, b, z, z);
              t += y;
            } else if (o - Ao < t) {
              n(s, t, y, 0, -1, b, z, z);
              t -= y;
            } else if (uf.ΔΔⵠⲆΔ.get() > 0.5) {
              n(s, t, y, 0, 1, b, z, z);
              t += y;
            } else {
              n(s, t, y, gj, -bq, b, z, z);
              t -= y;
            }
          } else {
            var A = Math.min(r, Math.floor(or + uf.ΔΔⵠⲆΔ.get() * 4));
            var B = or + Math.floor(uf.ΔΔⵠⲆΔ.get() * 4);
            n(s, t, A, 1, lt, b, B, B);
            q = Eu;
            r -= A;
            s += A;
          }
        } else {
          for (var D = ok; D > 1; D--) {
            n(s, t, Ws, Dj, Yl, b, D, bh);
            r -= bh;
            s += 1;
          }
          q = ho;
        }
      }
      for (w = t - bq; w < t + nq; w++) {
        x(s, w, "wtb", Bs, uq);
      }
    }
    function n(b, f, j, k, m, n, o, a) {
      var p = Math.floor(o / nl);
      var h = Math.max(Zn, Math.floor(o / rb));
      var l = Math.floor(a / 2);
      var g = Math.max(Zn, Math.floor(a / Xj));
      for (var q = 0; j > q; q++) {
        for (var r = b - l; r < b + g; r++) {
          for (var s = f - p; f + h > s; s++) {
            if (x(r, s, "wtb", hk, kr) === bh) {
              n.push([r, s, 1]);
            }
          }
        }
        b += k;
        f += m;
      }
    }
    function a(a, b) {
      (function (b, c) {
        var d = uf.ⵠⵠⵠⲆⲆ[c];
        for (var e = 0, f = 0; b > e && f < 10000; f++) {
          var i = d.y1 + d.ᐃᐃⲆ * uf.ΔΔⵠⲆΔ.get();
          var j = d.x1 + uf.ΔΔⵠⲆΔ.get() * d.w;
          var k = Math.floor(i / 100);
          var m = Math.floor(j / 100);
          if (uf.ⵠᐃⵠⵠᐃ(c, m * 100 + 50, k * Xl + 50) >= 600) {
            for (var p = 1, q = k - 4; p === 1 && q <= k + Ik; q++) {
              for (var t = m - T; p === og && t <= m + 4; t++) {
                if (Qw.ᐃⲆⵠⲆ[q][t] !== ml) {
                  p = Hb;
                }
              }
            }
            if (p !== 0) {
              x(k, m, "la", e % 6, ka);
              e++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < 3; c++) {
        r(a, "s", c, Math.floor(b * 12));
      }
      for (c = Hb; c < Xg; c++) {
        r(a, "g", c, Math.floor(rt * b));
      }
      for (c = Eu; Kb > c; c++) {
        r(a, "re", c, Math.max(El, Math.floor(b * 1)), 0.2);
      }
      for (c = 0; c < Ss; c++) {
        r(a, "a", c, Math.max(uq, Math.floor(b * rb)));
      }
      d(a);
    }
    function q(a, b, c, d) {
      if (g(a, b) && (ᐃⲆⵠⲆ = Qw.ᐃⲆⵠⲆ, ᐃⲆⵠⲆ[a][b] === wl && (ᐃⲆⵠⲆ[a][b] = {}), ᐃⲆⵠⲆ[a][b].r === Bj)) {
        var e = Hb;
        if (g(a - 1, b) && ᐃⲆⵠⲆ[a - 1][b] !== undefined && ᐃⲆⵠⲆ[a - 1][b].wtb !== undefined) {
          e += nl;
        }
        if (g(a, b - 1) && gg !== ᐃⲆⵠⲆ[a][b - 1] && ᐃⲆⵠⲆ[a][b - El].wtb !== C) {
          e += 8;
        }
        if (g(a, b + 1) && ᐃⲆⵠⲆ[a][b + 1] !== undefined && ᐃⲆⵠⲆ[a][b + or].wtb !== undefined) {
          e += 16;
        }
        if (g(a + El, b) && Kk !== ᐃⲆⵠⲆ[a + vg][b] && ᐃⲆⵠⲆ[a + or][b].wtb !== undefined) {
          e += 64;
        }
        if (g(a - 1, b - 1) && (e & 10) === 8 + Ls && ᐃⲆⵠⲆ[a - Ws][b - 1] !== undefined && ᐃⲆⵠⲆ[a - Zn][b - bh].wtb !== Lh) {
          e += y;
        }
        if (g(a - Ng, b + 1) && (e & Rj + 2) == 18 && ᐃⲆⵠⲆ[a - $r][b + $r] !== undefined && Zr !== ᐃⲆⵠⲆ[a - 1][b + 1].wtb) {
          e += Ol;
        }
        if (!!g(a + 1, b - 1) && !(~e & 72) && uh !== ᐃⲆⵠⲆ[a + 1][b - 1] && ᐃⲆⵠⲆ[a + 1][b - uq].wtb !== undefined) {
          e += 32;
        }
        if (g(a + Dj, b + 1) && pg + 64 === (e & Wk + 64) && pl !== ᐃⲆⵠⲆ[a + 1][b + 1] && ᐃⲆⵠⲆ[a + Th][b + ck].wtb !== undefined) {
          e += 128;
        }
        ᐃⲆⵠⲆ[a][b].r = {};
        ᐃⲆⵠⲆ[a][b].r.ᐃⵠΔⲆⵠᐃΔ = e;
        ᐃⲆⵠⲆ[a][b].r.ⵠΔⲆⲆᐃⵠᐃ = d;
        ᐃⲆⵠⲆ[a][b].r.ᐃⵠᐃᐃ = uf.ⵠᐃⵠⵠᐃ(c, _o * b + 50, a * 100 + 50) - 400;
        ᐃⲆⵠⲆ[a][b].r.x = qr * b + 50;
        ᐃⲆⵠⲆ[a][b].r.y = a * Xl + 50;
      }
    }
    function g(a, b) {
      return a >= 0 && b >= 0 && a < uf.ΔΔΔΔᐃ && b < uf.ⲆⵠᐃΔⵠ;
    }
    function x(a, b, c, d, e) {
      if (Xa <= a && b >= vl && uf.ΔΔΔΔᐃ > a && b < uf.ⲆⵠᐃΔⵠ) {
        ᐃⲆⵠⲆ = Qw.ᐃⲆⵠⲆ;
        if (wl === ᐃⲆⵠⲆ[a][b]) {
          ᐃⲆⵠⲆ[a][b] = {};
        }
        if (ᐃⲆⵠⲆ[a][b][c] !== wl) {
          return vl;
        } else {
          ᐃⲆⵠⲆ[a][b][c] = [];
          ᐃⲆⵠⲆ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * hi + 50
          }];
          if (Th === e) {
            (function (a, b, c, d) {
              lb.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function b(a) {
      for (var b = fs; Kl > b; b++) {
        r(a, "s", b, 15);
      }
      for (b = 0; b < 3; b++) {
        r(a, "a", b, 1);
      }
      for (b = ou; Kl > b; b++) {
        r(a, "d", b, Dj);
      }
      d(a);
    }
    function r(b, e, f, i, j) {
      var k = uf.ⵠⵠⵠⲆⲆ[b];
      var n = Math.floor(k.x1 / 100);
      var p = Math.floor(k.y1 / 100);
      var q = Math.floor(k.w / dk);
      var r = Math.floor(k.ᐃᐃⲆ / 100);
      if (j !== Ji) {
        j = 1 - j;
        n += Math.floor(j * q / Ls);
        p += Math.floor(j * r / it);
        q -= Math.floor(j * q);
        r -= Math.floor(j * r);
      }
      var t = Qw.ᐃⲆⵠⲆ;
      for (var g = 0, w = 0; i > w && g <= 50000; g++) {
        var y = p + Math.floor(r * uf.ΔΔⵠⲆΔ.get());
        var z = n + Math.floor(q * uf.ΔΔⵠⲆΔ.get());
        if (uf.ⵠᐃⵠⵠᐃ(b, z * bl + 50, y * 100 + 50) >= 400) {
          var A = t[y][z + ck];
          if (uh === A || A[e] === undefined || A[e][f] === wl) {
            if ((A = t[y][z - El]) === eg || A[e] === undefined || A[e][f] === undefined) {
              if ((A = t[y + og][z]) === fn || A[e] === Eh || A[e][f] === undefined) {
                A = t[y - 1][z];
                if (Eh === A || ml === A[e] || A[e][f] === undefined) {
                  if ((A = t[y + Zn][z - or]) === Eh || A[e] === gg || A[e][f] === undefined) {
                    if ((A = t[y - 1][z + 1]) === C || A[e] === undefined || A[e][f] === undefined) {
                      A = t[y + hj][z + 1];
                      if (eg === A || A[e] === undefined || A[e][f] === undefined) {
                        if ((A = t[y - kr][z - 1]) === undefined || A[e] === undefined || A[e][f] === undefined) {
                          if (t[y][z] === undefined) {
                            x(y, z, e, f, 1);
                            w++;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function d(a) {
      var b = uf.ⵠⵠⵠⲆⲆ[a];
      x(-R + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", Xa, Eu);
      x(3 + Math.floor(b.y1 / Xl), -1 + Math.floor(b.x2 / Wa), "s", 0, Yl);
      x(-3 + Math.floor(b.y2 / Xl), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      x(Ab + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", Yl, Hb);
    }
    function c(a, b) {
      for (var c = 0; c < 3; c++) {
        r(a, "s", c, Math.floor(b * 18));
      }
      for (c = ho; c < 3; c++) {
        r(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < Jh; c++) {
        r(a, "d", c, Math.max(1, Math.floor(b * Ts)), 0.3);
      }
      for (c = Yl; Ss > c; c++) {
        r(a, "g", c, Math.floor(b * 6));
      }
      d(a);
    }
    function m(a, b) {
      for (var c = ks; c < 6; c++) {
        r(a, "t", c, Math.floor(b * 80));
      }
      for (c = 0; c < qa; c++) {
        r(a, "b", c, Math.floor(b * 80));
      }
      for (c = 0; Kb > c; c++) {
        r(a, "s", c, Math.floor(b * 50));
      }
      var e = [];
      for (c = 0; c < 6; c++) {
        o(a, e);
      }
      l(a, e);
      e = [];
      r(a, "p", 0, Math.floor(b * 28));
      for (c = ho; c < 3; c++) {
        r(a, "g", c, Math.floor(b * lo));
      }
      for (c = 0; sd > c; c++) {
        r(a, "d", c, Math.floor(b * 2));
      }
      for (c = Go; c < 3; c++) {
        r(a, "a", c, Math.floor(b * kr));
      }
      for (c = Go; c < 3; c++) {
        r(a, "m", c, Math.floor(b * 1));
      }
      r(a, "a", 0, Math.floor(hj * b));
      d(a);
    }
    function p(a, b) {
      for (var c = Ob; c < 6; c++) {
        r(a, "t", c, Math.floor(Rq * b));
      }
      for (c = fs; c < 4; c++) {
        r(a, "b", c, Math.floor(b * 20));
      }
      for (c = gj; sd > c; c++) {
        r(a, "s", c, Math.floor(b * Fq));
      }
      var e = [];
      o(a, e);
      l(a, e);
      e = [];
      r(a, "p", ho, Math.floor(b * 24));
      for (c = dt; Oj > c; c++) {
        r(a, "g", c, Math.floor(b * 5));
      }
      if (fw.ⵠⵠᐃΔⲆ === uf.mode) {
        for (c = 0; c < 3; c++) {
          r(a, "d", c, Math.floor(Qq * b));
        }
        for (c = Et; c < Kl; c++) {
          r(a, "a", c, Math.floor(b * rb));
        }
      }
      d(a);
    }
    function s(a, b) {
      for (var c = Bs; c < Kl; c++) {
        r(a, "s", c, Math.floor(b * 12));
      }
      for (c = hk; c < 3; c++) {
        r(a, "m", c, Math.max(1, Math.floor(b * Ng)), 0.2);
      }
      r(a, "c", ou, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = uf.ⵠⵠⵠⲆⲆ[b];
        var e = Math.floor(d.y1 / Wo);
        var f = Math.floor(d.x1 / nh);
        var i = Math.floor(d.ᐃᐃⲆ / 100);
        var j = Math.floor(d.w / hh);
        var a = e + Math.floor(i / Og);
        var k = f + Math.floor(j / 2);
        for (var h = 0; Jh > h; h++) {
          x(m = Math.floor(a - Kb + uf.ΔΔⵠⲆΔ.get() * 6), n = Math.floor(k - Ia + uf.ΔΔⵠⲆΔ.get() * 6), "plm", h, bt);
        }
        for (h = ou; h < 80; h++) {
          var m;
          var n;
          if (x(m = Math.floor(a - 3 + uf.ΔΔⵠⲆΔ.get() * 6), n = Math.floor(k - Ia + xg * uf.ΔΔⵠⲆΔ.get()), "wtb", 0, $r) === 1) {
            c.push([m, n, 0]);
          }
        }
      })(a, d);
      l(a, d);
      d = [];
    }
    function f(a, b, c) {
      if (a[b]) {
        for (Sk = ka; a[b].length > Sk; Sk++) {
          if (a[b][Sk]) {
            for (Δⵠᐃᐃ = 0; a[b][Sk].length > Δⵠᐃᐃ; Δⵠᐃᐃ++) {
              a[b][Sk][Δⵠᐃᐃ].Ⲇⵠᐃⵠ = c;
              a[b][Sk][Δⵠᐃᐃ].ᐃᐃᐃ = false;
              a[b][Sk][Δⵠᐃᐃ].time = fs;
              a[b][Sk][Δⵠᐃᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = fw.ⲆⲆΔⵠⵠ;
    this.ᐃΔᐃᐃᐃⵠΔ = h;
    this.ⲆᐃΔⵠᐃ = ou;
    this.ᐃⲆⵠⲆᐃᐃⲆ = Rb;
    this.ⲆᐃΔΔ = [];
    this.ΔⵠⲆ = [];
    this.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ] = [];
    this.ΔⵠⲆ[iw.ΔᐃⵠᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ⲆᐃⲆⵠᐃ] = [];
    this.ΔⵠⲆ[iw.ⲆΔᐃⲆΔ] = [];
    this.ΔⵠⲆ[iw.ᐃᐃⲆⲆᐃ] = [];
    this.ΔⵠⲆ[iw.ΔⲆⵠᐃⵠ] = [];
    this.ΔⵠⲆ[iw.ᐃⲆᐃⵠᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃⲆᐃⲆⲆ] = [];
    this.ΔⵠⲆ[iw.ⲆⲆⲆᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ΔᐃⵠΔⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠⲆⵠΔⵠ] = [];
    this.ΔⵠⲆ[iw.ΔΔΔⲆΔ] = [];
    this.ΔⵠⲆ[iw.ⵠΔⲆΔⵠ] = [];
    this.ΔⵠⲆ[iw.ΔᐃⵠⲆⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠⲆⲆΔᐃ] = [];
    this.ΔⵠⲆ[iw.Δⵠⵠⵠⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠᐃⵠΔΔ] = [];
    this.ΔⵠⲆ[iw.ⵠⲆΔⵠᐃ] = [];
    this.ΔⵠⲆ[iw.ΔⵠΔⲆᐃ] = [];
    this.ΔⵠⲆ[iw.ⲆⲆᐃⵠΔ] = [];
    this.ΔⵠⲆ[iw.ⲆΔⵠΔⲆ] = [];
    this.ΔⵠⲆ[iw.ΔⲆΔΔΔ] = [];
    this.ΔⵠⲆ[iw.ΔᐃΔΔΔ] = [];
    this.ΔⵠⲆ[iw.ⵠΔΔᐃᐃᐃⵠ] = [];
    this.ΔⵠⲆ[iw.ΔⲆⲆⲆⲆⲆⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠᐃⵠⲆᐃⲆᐃ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠᐃⵠⲆᐃᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃⵠΔⵠⲆ] = [];
    this.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆΔⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠᐃⲆⵠⲆ] = [];
    this.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ] = [];
    this.ΔⵠⲆ[iw.ⲆⵠⲆΔⵠ] = [];
    this.ΔⵠⲆ[iw.ᐃᐃᐃⲆΔ] = [];
    this.ΔⵠⲆ[iw.ΔᐃⵠΔᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃⲆΔⲆⵠ] = [];
    this.ΔⵠⲆ[iw.ΔⲆΔⵠΔ] = [];
    this.ΔⵠⲆ[iw.ⵠΔⵠⲆΔ] = [];
    this.ΔⵠⲆ[iw.ⲆΔΔᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠᐃⲆᐃᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃΔⵠᐃᐃ] = [];
    this.ΔⵠⲆ[iw.ⲆⵠⵠⵠΔ] = [];
    this.ΔⵠⲆ[iw.ⲆᐃⲆᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ΔᐃⵠⲆⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠⵠⵠⵠ] = [];
    this.ΔⵠⲆ[iw.ΔᐃᐃⲆᐃ] = [];
    this.ΔⵠⲆ[iw.ⵠΔᐃⵠᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃΔΔΔⲆ] = [];
    this.ΔⵠⲆ[iw.ⲆᐃΔΔΔ] = [];
    this.ΔⵠⲆ[iw.ΔΔΔⲆⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠΔⵠⵠⲆ] = [];
    this.ΔⵠⲆ[iw.ᐃⲆⵠᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ᐃᐃᐃΔⵠ] = [];
    this.ΔⵠⲆ[iw.ᐃⲆΔᐃᐃ] = [];
    this.ΔⵠⲆ[iw.ΔΔΔⵠⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠΔΔΔ] = [];
    this.ΔⵠⲆ[iw.ΔᐃΔⵠⵠ] = [];
    this.ΔⵠⲆ[iw.ᐃΔᐃᐃⵠ] = [];
    this.ΔⵠⲆ[iw.ⲆΔᐃᐃΔ] = [];
    this.ΔⵠⲆ[iw.ⲆΔᐃⲆⲆ] = [];
    this.ΔⵠⲆ[iw.Δᐃⵠᐃᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃⲆΔᐃⵠ] = [];
    this.ΔⵠⲆ[iw.ⲆᐃⵠⵠΔ] = [];
    this.ΔⵠⲆ[iw.ⲆΔΔΔΔ] = [];
    this.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆ] = [];
    this.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ] = [];
    this.ΔⵠⲆ[iw.ⵠⲆⲆⲆΔ] = [];
    this.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ] = [];
    this.ΔⵠⲆ[iw.ᐃΔⵠΔⵠ] = [];
    this.ΔⵠⲆ[iw.ⲆⲆΔΔΔ] = [];
    this.ΔⵠⲆ[iw.ⵠΔᐃΔᐃ] = [];
    this.ΔⵠⲆ[iw.ⲆⵠΔᐃΔ] = [];
    this.ΔⵠⲆ[iw.ΔᐃΔⲆⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠᐃⲆᐃ] = [];
    this.ΔⵠⲆ[iw.ΔΔΔⵠΔ] = [];
    this.ΔⵠⲆ[iw.ᐃᐃᐃⲆⲆ] = [];
    this.ΔⵠⲆ[iw.ᐃΔⲆⵠⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠᐃⲆⵠⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠⲆΔⵠ] = [];
    this.ΔⵠⲆ[iw.ΔΔΔᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ] = [];
    this.ΔⵠⲆ[iw.ⲆᐃΔᐃⲆ] = [];
    this.ΔⵠⲆ[iw.ⵠΔⲆⵠΔ] = [];
    this.ΔⵠⲆ[iw.ⲆⲆⵠΔⵠ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠⵠⵠⲆ] = [];
    this.ΔⵠⲆ[iw.ᐃᐃᐃΔᐃ] = [];
    this.ΔⵠⲆ[iw.ⲆⵠⲆⵠᐃ] = [];
    this.ΔⵠⲆ[iw.ⵠⵠΔⵠⲆ] = [];
    this.ΔⵠⲆ[iw.ᐃᐃᐃⵠΔ] = [];
    this.ΔᐃᐃⲆⵠ = [];
    this.ⲆⵠᐃΔⵠ = 260;
    this.ΔΔΔΔᐃ = 260;
    this.ᐃΔΔⲆΔⵠΔ = Aj;
    this.ⵠⵠⵠⲆΔⵠⵠ = 100;
    this.w = this.ⲆⵠᐃΔⵠ * this.ᐃΔΔⲆΔⵠΔ;
    this.ᐃᐃⲆ = this.ⵠⵠⵠⲆΔⵠⵠ * this.ΔΔΔΔᐃ;
    this.ΔΔⵠⲆΔ = new Gk.ᐃᐃⲆⵠⲆᐃᐃ();
    this.ⵠⵠⵠⲆⲆ = [];
    this.ΔΔⵠΔ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0, kr, Bs, y, 1);
    this.transition = Ag;
    this.ⲆᐃΔⲆⲆ = [];
    this.ᐃᐃΔⲆⵠ = 0;
    this.ⲆⲆⵠᐃΔⲆⵠ = 1;
    this.ΔΔᐃⲆΔⲆᐃ = 2;
    this.ⵠⲆᐃⲆΔᐃⵠ = Ia;
    this.ᐃⵠᐃⲆⲆ = Dl;
    this.ᐃⲆᐃⵠΔᐃⲆ = 10;
    this.ⲆᐃΔⲆⲆ[this.ᐃᐃΔⲆⵠ] = {
      ⲆⵠᐃᐃⵠΔΔ: Zn,
      ⲆⲆⲆ: [19, 58, 43],
      ⵠΔΔ: [4, 43, 48],
      ΔΔⲆΔⵠ: ["#133a2b", fj[re]]
    };
    this.ⲆᐃΔⲆⲆ[this.ᐃⵠᐃⲆⲆ] = {
      ⲆⵠᐃᐃⵠΔΔ: lt,
      ⲆⲆⲆ: [11, 106, 132],
      ⵠΔΔ: [9, 55, 63],
      ΔΔⲆΔⵠ: ["#0B6A84", "#09373F"]
    };
    this.ⲆᐃΔⲆⲆ[this.ⲆⲆⵠᐃΔⲆⵠ] = {
      ⲆⵠᐃᐃⵠΔΔ: dt,
      ⲆⲆⲆ: [235, 242, 240],
      ⵠΔΔ: [19, 97, 103],
      ΔΔⲆΔⵠ: ["#EBF2F0", "#136167"]
    };
    this.ⲆᐃΔⲆⲆ[this.ΔΔᐃⲆΔⲆᐃ] = {
      ⵠΔΔ: [3, 28, 30],
      ⲆⵠᐃᐃⵠΔΔ: 0,
      ⲆⲆⲆ: [45, 32, 23],
      ΔΔⲆΔⵠ: ["#2D2017", "#031C1E"]
    };
    this.ⲆᐃΔⲆⲆ[this.ⵠⲆᐃⲆΔᐃⵠ] = {
      ⲆⵠᐃᐃⵠΔΔ: fs,
      ΔΔⲆΔⵠ: ["#4A4A4A", "#183D3C"],
      ⵠΔΔ: [24, 61, 60],
      ⲆⲆⲆ: [74, 74, 74]
    };
    this.ⲆᐃΔⲆⲆ[this.ᐃⲆᐃⵠΔᐃⲆ] = {
      ⲆⵠᐃᐃⵠΔΔ: 0,
      ⲆⲆⲆ: [235, 216, 166],
      ⵠΔΔ: [9, 61, 56],
      ΔΔⲆΔⵠ: ["#EBD8A6", "#093D38"]
    };
    this.ᐃⲆⲆⲆΔⵠᐃ = function (a, b, c, d, e, f) {
      this.x1 = b * 100;
      this.y1 = c * hh;
      this.w = d * 100;
      this.ᐃᐃⲆ = e * 100;
      this.x2 = (b + d) * 100;
      this.y2 = (c + e) * 100;
      this.ⵠⲆⵠ = a;
      this.ⲆⵠⲆ = f === undefined ? 15 : f;
    };
    this.ᐃᐃᐃⵠⲆ = -1000000;
    this.ᐃⵠⲆᐃᐃ = this.ᐃᐃᐃⵠⲆ;
    this.ⲆᐃⲆΔᐃ = this.ᐃᐃᐃⵠⲆ;
    this.ᐃΔΔⲆΔ = this.ᐃᐃᐃⵠⲆ;
    this.ⵠΔΔᐃⵠΔⲆ = this.ᐃᐃᐃⵠⲆ;
    this.ⲆᐃᐃⵠⵠΔⵠ = this.ᐃᐃᐃⵠⲆ;
    this.ⵠⵠΔΔⵠ = this.ᐃᐃᐃⵠⲆ;
    this.ⵠᐃᐃᐃᐃᐃΔⵠⲆ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / qr);
      var f = Math.floor(c / Is);
      b.ᐃⵠⲆᐃᐃ = uf.ᐃᐃᐃⵠⲆ;
      b.ⲆᐃⲆΔᐃ = uf.ᐃᐃᐃⵠⲆ;
      b.ᐃΔΔⲆΔ = uf.ᐃᐃᐃⵠⲆ;
      b.ⵠΔΔᐃⵠΔⲆ = uf.ᐃᐃᐃⵠⲆ;
      b.ⵠⵠΔΔⵠ = uf.ᐃᐃᐃⵠⲆ;
      b.ⲆᐃⲆΔⲆⲆⵠ = uf.ᐃᐃᐃⵠⲆ;
      for (var g = 0; uf.ᐃⵠᐃⲆⲆ !== uf.ⵠⵠⵠⲆⲆ[g].ⵠⲆⵠ; g++) {
        if (uf.ⵠⵠⵠⲆⲆ[g].ⵠⲆⵠ === uf.ᐃᐃΔⲆⵠ) {
          var h = uf.ⵠᐃⵠⵠᐃ(g, c, d);
          b.ⵠΔΔᐃⵠΔⲆ = Math.max(b.ⵠΔΔᐃⵠΔⲆ, h);
          if (h > 0 && uf.ⲆΔΔⲆᐃΔΔⲆⲆ(g, c, d) === 1) {
            b.ⲆᐃⲆΔⲆⲆⵠ = kr;
          }
        } else if (uf.ⲆⲆⵠᐃΔⲆⵠ === uf.ⵠⵠⵠⲆⲆ[g].ⵠⲆⵠ) {
          b.ᐃⵠⲆᐃᐃ = Math.max(b.ᐃⵠⲆᐃᐃ, uf.ⵠᐃⵠⵠᐃ(g, c, d));
        } else if (uf.ᐃⲆᐃⵠΔᐃⲆ === uf.ⵠⵠⵠⲆⲆ[g].ⵠⲆⵠ) {
          b.ⲆᐃⲆΔᐃ = Math.max(b.ⲆᐃⲆΔᐃ, uf.ⵠᐃⵠⵠᐃ(g, c, d));
        } else if (uf.ΔΔᐃⲆΔⲆᐃ === uf.ⵠⵠⵠⲆⲆ[g].ⵠⲆⵠ) {
          b.ᐃΔΔⲆΔ = Math.max(b.ᐃΔΔⲆΔ, uf.ⵠᐃⵠⵠᐃ(g, c, d));
        } else if (uf.ⵠⵠⵠⲆⲆ[g].ⵠⲆⵠ === uf.ⵠⲆᐃⲆΔᐃⵠ) {
          b.ⵠⵠΔΔⵠ = Math.max(b.ⵠⵠΔΔⵠ, uf.ⵠᐃⵠⵠᐃ(g, c, d));
        }
      }
      if (Qw.ᐃⲆⵠⲆ[e][f].iblk) {
        b.ⲆᐃⲆΔⲆⲆⵠ = 1;
      }
      if (uf.ΔᐃΔᐃᐃⲆΔΔⲆ(f, e)) {
        b.ⲆᐃᐃⵠⵠΔⵠ = b.ᐃᐃᐃⵠⲆ;
      } else if (Qw.ᐃⲆⵠⲆ[e][f].wtb || Et > b.ᐃⵠⲆᐃᐃ && Go > b.ᐃΔΔⲆΔ && b.ⵠΔΔᐃⵠΔⲆ < 0 && b.ⲆᐃⲆΔⲆⲆⵠ < 0 && b.ⵠⵠΔΔⵠ < 0 && Yl > b.ⲆᐃⲆΔᐃ) {
        b.ⲆᐃᐃⵠⵠΔⵠ = 1;
      } else {
        b.ⲆᐃᐃⵠⵠΔⵠ = b.ᐃᐃᐃⵠⲆ;
      }
    };
    this.ᐃⲆⲆⲆᐃΔΔⵠⲆ = function (a, b) {
      uf.ᐃⵠⲆᐃᐃ = uf.ᐃᐃᐃⵠⲆ;
      uf.ⲆᐃⲆΔᐃ = uf.ᐃᐃᐃⵠⲆ;
      uf.ᐃΔΔⲆΔ = uf.ᐃᐃᐃⵠⲆ;
      uf.ⵠⵠΔΔⵠ = uf.ᐃᐃᐃⵠⲆ;
      uf.ⵠΔΔᐃⵠΔⲆ = uf.ᐃᐃᐃⵠⲆ;
      for (var c = Bs; uf.ⵠⵠⵠⲆⲆ[c].ⵠⲆⵠ !== uf.ᐃⵠᐃⲆⲆ; c++) {
        if (uf.ᐃᐃΔⲆⵠ === uf.ⵠⵠⵠⲆⲆ[c].ⵠⲆⵠ) {
          uf.ⵠΔΔᐃⵠΔⲆ = Math.max(uf.ⵠΔΔᐃⵠΔⲆ, uf.ⵠᐃⵠⵠᐃ(c, a, b));
        } else if (uf.ⵠⵠⵠⲆⲆ[c].ⵠⲆⵠ === uf.ⲆⲆⵠᐃΔⲆⵠ) {
          uf.ᐃⵠⲆᐃᐃ = Math.max(uf.ᐃⵠⲆᐃᐃ, uf.ⵠᐃⵠⵠᐃ(c, a, b));
        } else if (uf.ⵠⵠⵠⲆⲆ[c].ⵠⲆⵠ === uf.ᐃⲆᐃⵠΔᐃⲆ) {
          uf.ⲆᐃⲆΔᐃ = Math.max(uf.ⲆᐃⲆΔᐃ, uf.ⵠᐃⵠⵠᐃ(c, a, b));
        } else if (uf.ΔΔᐃⲆΔⲆᐃ === uf.ⵠⵠⵠⲆⲆ[c].ⵠⲆⵠ) {
          uf.ᐃΔΔⲆΔ = Math.max(uf.ᐃΔΔⲆΔ, uf.ⵠᐃⵠⵠᐃ(c, a, b));
        } else if (uf.ⵠⵠⵠⲆⲆ[c].ⵠⲆⵠ === uf.ⵠⲆᐃⲆΔᐃⵠ) {
          uf.ⵠⵠΔΔⵠ = Math.max(uf.ⵠⵠΔΔⵠ, uf.ⵠᐃⵠⵠᐃ(c, a, b));
        }
      }
      if (uf.ᐃⵠⲆᐃᐃ < Ob && uf.ⵠⵠΔΔⵠ < 0 && uf.ⵠΔΔᐃⵠΔⲆ < 0 && uf.ⵠⵠΔΔⵠ < fs && fs > uf.ⲆᐃⲆΔᐃ) {
        uf.ⲆᐃᐃⵠⵠΔⵠ = 1;
      } else {
        uf.ⲆᐃᐃⵠⵠΔⵠ = uf.ᐃᐃᐃⵠⲆ;
      }
    };
    this.ⲆΔΔⲆᐃΔΔⲆⲆ = function (a, b, c) {
      var d = uf.ⵠⵠⵠⲆⲆ[a];
      var e = 0;
      ⵠⵠᐃᐃ = d.x1 + 30 + ((d.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ) === dt ? 150 : 0);
      var f = b - ⵠⵠᐃᐃ;
      if (Ob < (d.ⲆⵠⲆ & fw.ΔᐃᐃΔΔ) && f > 0 && f < 320) {
        e = hj;
      }
      ᐃΔΔΔ = d.y1 + 250 + (d.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ ? dh : 150);
      f = c - ᐃΔΔΔ;
      if ((d.ⲆⵠⲆ & fw.ⲆΔΔⲆⲆ) > Et && f > 0 && f < 320) {
        e = 1;
      }
      ⲆΔⵠⵠ = d.x2 + 80 + (d.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ ? Yl : -200);
      f = ⲆΔⵠⵠ - b;
      if ((d.ⲆⵠⲆ & fw.ⵠⲆΔΔᐃ) > 0 && f > dt && f < 320) {
        e = $q;
      }
      ᐃᐃⲆᐃ = d.y2 - 200 + (d.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ ? Yl : -200);
      f = ᐃᐃⲆᐃ - c;
      if ((d.ⲆⵠⲆ & fw.ⲆⲆⵠΔᐃ) > ou && f > 0 && f < 320) {
        e = 1;
      }
      if (b >= ⵠⵠᐃᐃ && b <= ⲆΔⵠⵠ && c >= ᐃΔΔΔ && ᐃᐃⲆᐃ >= c) {
        return e;
      } else {
        return 0;
      }
    };
    this.ⵠᐃⵠⵠᐃ = function (a, b, c) {
      var d = uf.ⵠⵠⵠⲆⲆ[a];
      ⵠⵠᐃᐃ = d.x1 + 30;
      ᐃΔΔΔ = d.y1 + 250;
      ⲆΔⵠⵠ = d.x2 + 80;
      ᐃᐃⲆᐃ = d.y2 - 200;
      if (ⵠⵠᐃᐃ <= b && b <= ⲆΔⵠⵠ && ᐃΔΔΔ <= c && c <= ᐃᐃⲆᐃ) {
        return Math.min(b - ⵠⵠᐃᐃ, ⲆΔⵠⵠ - b, c - ᐃΔΔΔ, ᐃᐃⲆᐃ - c);
      }
      var e = -1000000;
      if (b - ⵠⵠᐃᐃ < 0) {
        e = Math.max(e, b - ⵠⵠᐃᐃ);
      } else if (fs > ⲆΔⵠⵠ - b) {
        e = Math.max(e, ⲆΔⵠⵠ - b);
      }
      ⵠⲆᐃΔⲆⲆⵠ = -1000000;
      if (ᐃΔΔΔ > c || ᐃᐃⲆᐃ < c) {
        if (c - ᐃΔΔΔ < 0) {
          ⵠⲆᐃΔⲆⲆⵠ = Math.max(ⵠⲆᐃΔⲆⲆⵠ, c - ᐃΔΔΔ);
        } else {
          ⵠⲆᐃΔⲆⲆⵠ = Math.max(ⵠⲆᐃΔⲆⲆⵠ, ᐃᐃⲆᐃ - c);
        }
        e = e !== -1000000 && ⵠⲆᐃΔⲆⲆⵠ !== -1000000 ? Math.min(e, ⵠⲆᐃΔⲆⲆⵠ) : ⵠⲆᐃΔⲆⲆⵠ;
      }
      return e;
    };
    this.ⲆᐃⵠᐃⲆᐃΔ = function (b, c, d) {
      var e = d;
      var f = c;
      x(e, f, "isl", b, kr);
      for (var g = dh; g < Ur; g++) {
        for (var h = ho; h < Gt; h++) {
          x(e - h, f - g, "iblk", 0);
          x(e + h, f - g, "iblk", 0);
          x(e + h, f + g, "iblk", ho);
          x(e - h, f + g, "iblk", Bs);
        }
      }
      if (lt === b) {
        for (g = 0; g < 2; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - jo, "iblk", 0);
          x(e - g, f + Ol, "iblk", Bs);
          x(e + g, f + 4, "iblk", Et);
        }
        for (g = 0; g < sd; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + Ab, f - g, "iblk", 0);
        }
        x(e - Sa, f - 4, "iblk", 0);
        x(e - Gt, f - 3, "iblk", 0);
        x(e + 2, f + 4, "iblk", 0);
        x(e + Ds, f + Ui, "iblk", ou);
      } else if (b === kr) {
        for (g = gj; g < 3; g++) {
          x(e - g, f - Dl, "iblk", 0);
          x(e + g, f - mi, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + Yr, "iblk", 0);
        }
        for (g = hk; g < Io; g++) {
          x(e - Ss, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", Bs);
          x(e - 3, f - g, "iblk", Xa);
          x(e + kl, f - g, "iblk", hk);
        }
      } else if (Ir === b) {
        for (g = lt; g < Pn; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - Io, "iblk", hk);
          x(e - g, f + 4, "iblk", ka);
          x(e + g, f + 4, "iblk", Hb);
        }
        for (g = gj; g < 3; g++) {
          x(e - Ia, f + g, "iblk", ou);
          x(e + wq, f + g, "iblk", Ob);
          x(e - Qh, f - g, "iblk", Hb);
          x(e + sd, f - g, "iblk", vl);
        }
      }
    };
    this.ΔⲆⲆⲆΔⲆᐃⲆⵠ = function (b) {
      for (var c = 0; c < uf.ⵠⵠⵠⲆⲆ.length && b > vl; c++) {
        var d = uf.ⵠⵠⵠⲆⲆ[c];
        if (uf.ᐃⵠᐃⲆⲆ === d.ⵠⲆⵠ && d.w > 1800 && d.ᐃᐃⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / hi);
          var g = Math.floor((d.y1 + d.ᐃᐃⲆ / Ci) / 100);
          uf.ⲆᐃⵠᐃⲆᐃΔ(b % sd, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(uf.ΔΔⵠⲆΔ.get() * xs);
            var k = f - 3 + Math.floor(uf.ΔΔⵠⲆΔ.get() * 6);
            if (dq === Qw.ᐃⲆⵠⲆ[j][k].s) {
              x(j, k, "plm", h);
            }
            j = g - yl + Math.floor(uf.ΔΔⵠⲆΔ.get() * 4);
            k = f - Qh + Math.floor(pu * uf.ΔΔⵠⲆΔ.get());
            if (Qw.ᐃⲆⵠⲆ[j][k].plm === undefined) {
              x(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(uf.ΔΔⵠⲆΔ.get() * mi);
          k = f - 3 + Math.floor(uf.ΔΔⵠⲆΔ.get() * xg);
          if (Qw.ᐃⲆⵠⲆ[j][k].plm === uh && Qw.ᐃⲆⵠⲆ[j][k].s === Sn) {
            x(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ᐃΔΔⵠⲆⲆᐃⲆΔ = function (f) {
      uf.ΔΔⵠⲆΔ.ⲆΔΔⵠΔ(f);
      var j = jg;
      while (Dj) {
        if (++j > 10000) {
          return;
        }
        uf.ⵠⵠⵠⲆⲆ = [];
        if (uf.ⲆᐃΔⵠᐃ === ho && (uf.mode === fw.ⵠⵠᐃᐃΔ || fw.ⵠΔΔΔΔ === uf.mode || fw.ⲆⲆΔⵠⵠ === uf.mode)) {
          uf.ⲆᐃΔⵠᐃ = ls;
        }
        if (uf.mode === fw.ⵠⵠᐃΔⲆ) {
          uf.ⵠⵠⵠⲆⲆ.push(new uf.ᐃⲆⲆⲆΔⵠᐃ(uf.ᐃᐃΔⲆⵠ, 2, 2, 80, 80, 15));
        } else if (fw.ⵠᐃⵠᐃᐃ === uf.mode) {
          uf.ⵠⵠⵠⲆⲆ.push(new uf.ᐃⲆⲆⲆΔⵠᐃ(uf.ᐃᐃΔⲆⵠ, 2, Pn, 150, 150, 15));
        } else if (uf.ⲆᐃΔⵠᐃ !== 0 && uf.ⲆᐃΔⵠᐃ.length > 0 && uf.ⲆᐃΔⵠᐃ[0].length > sd) {
          for (var k = Yl; k < uf.ⲆᐃΔⵠᐃ.length; k++) {
            if ((F = uf.ⲆᐃΔⵠᐃ[k])[0] !== 0) {
              break;
            }
            var n = fw.ᐃᐃΔⲆⵠ;
            switch (F[vg]) {
              case "FOREST":
                n = uf.ᐃᐃΔⲆⵠ;
                break;
              case "WINTER":
                n = uf.ⲆⲆⵠᐃΔⲆⵠ;
                break;
              case "DESERT":
                n = uf.ᐃⲆᐃⵠΔᐃⲆ;
                break;
              case "LAVA":
                n = uf.ΔΔᐃⲆΔⲆᐃ;
                break;
              case "DRAGON":
                n = uf.ⵠⲆᐃⲆΔᐃⵠ;
            }
            uf.ⵠⵠⵠⲆⲆ.push(new uf.ᐃⲆⲆⲆΔⵠᐃ(n, F[2], F[Ia], F[xs], F[bb], F[Vs], F[7]));
          }
        } else if (uf.ⲆᐃΔⵠᐃ !== 0) {
          for (k = 0; k < uf.ⲆᐃΔⵠᐃ.length; k++) {
            var o = uf.ⲆᐃΔⵠᐃ[k];
            n = fw.ᐃᐃΔⲆⵠ;
            switch (o[0]) {
              case "FOREST":
                n = uf.ᐃᐃΔⲆⵠ;
                break;
              case "WINTER":
                n = uf.ⲆⲆⵠᐃΔⲆⵠ;
                break;
              case "DESERT":
                n = uf.ᐃⲆᐃⵠΔᐃⲆ;
                break;
              case "LAVA":
                n = uf.ΔΔᐃⲆΔⲆᐃ;
                break;
              case "DRAGON":
                n = uf.ⵠⲆᐃⲆΔᐃⵠ;
            }
            if (i(n, o[Ws], o[2], Yl, (k + 1) * Ar) === ka) {
              break;
            }
          }
          if (k !== uf.ⲆᐃΔⵠᐃ.length) {
            continue;
          }
        }
        break;
      }
      ΔᐃⲆⵠⲆΔᐃΔΔ();
      var q = [];
      for (var t = Hb; uf.ΔΔΔΔᐃ > t; t++) {
        q[t] = new Array(uf.ⲆⵠᐃΔⵠ);
        for (var v = 0; uf.ⲆⵠᐃΔⵠ > v; v++) {
          q[t][v] = dt;
        }
      }
      for (t = ou; uf.ⵠⵠⵠⲆⲆ.length > t; t++) {
        for (var A = (o = uf.ⵠⵠⵠⲆⲆ[t]).x2 / 100, B = o.y2 / 100, C = o.x1 / 100; C <= A; C++) {
          for (var D = o.y1 / Kh; B >= D; D++) {
            q[D][C] = 1;
          }
        }
      }
      for (D = 0; uf.ΔΔΔΔᐃ > D; D++) {
        for (C = 0; uf.ⲆⵠᐃΔⵠ > C; C++) {
          if (q[D][C] === 0) {
            e(q, C, D);
          }
        }
      }
      Qw = {
        w: uf.ⲆⵠᐃΔⵠ,
        ᐃᐃⲆ: uf.ΔΔΔΔᐃ,
        ᐃⲆⵠⲆ: []
      };
      for (t = 0; t < uf.ΔΔΔΔᐃ; t++) {
        Qw.ᐃⲆⵠⲆ[t] = [];
      }
      if (uf.ⲆᐃΔⵠᐃ !== 0 && uf.ⲆᐃΔⵠᐃ.length > dh && uf.ⲆᐃΔⵠᐃ[0].length > 3) {
        for (k = gj; k < uf.ⲆᐃΔⵠᐃ.length; k++) {
          if ((F = uf.ⲆᐃΔⵠᐃ[k])[1] === "isl") {
            uf.ⲆᐃⵠᐃⲆᐃΔ(F[cn], F[Ui], F[4]);
          }
        }
      } else {
        uf.ΔⲆⲆⲆΔⲆᐃⲆⵠ(uf.ᐃⲆⵠⲆᐃᐃⲆ);
      }
      if (uf.ⲆᐃΔⵠᐃ !== 0 && uf.ⲆᐃΔⵠᐃ.length > dh && yr < uf.ⲆᐃΔⵠᐃ[0].length) {
        var E = [];
        for (k = 0; k < uf.ⲆᐃΔⵠᐃ.length; k++) {
          var F;
          if ((F = uf.ⲆᐃΔⵠᐃ[k])[Yl] === Zn) {
            if (F[bt] === "r") {
              x(F[Qh], F[Pn], "wtb", 0, $r);
              E.push([F[3], F[Ts], F[4]]);
            } else {
              x(F[4], F[_g], F[ck], F[nq], F[5]);
            }
          }
        }
        l(0, E);
        E = [];
      } else {
        for (t = jg; uf.ⵠⵠⵠⲆⲆ.length > t; t++) {
          o = uf.ⵠⵠⵠⲆⲆ[t];
          if (fw.ⵠᐃⵠᐃᐃ === uf.mode) {
            if (o.ⵠⲆⵠ === uf.ᐃᐃΔⲆⵠ) {
              m(t, o.w / 10000);
            }
          } else {
            if (o.ⵠⲆⵠ === uf.ᐃᐃΔⲆⵠ) {
              p(t, o.w / (hn * 100));
            }
            if (o.ⵠⲆⵠ === uf.ΔΔᐃⲆΔⲆᐃ) {
              a(t, o.w / (qr * 100));
            }
            if (o.ⵠⲆⵠ === uf.ⲆⲆⵠᐃΔⲆⵠ) {
              c(t, o.w / 10000);
            }
            if (o.ⵠⲆⵠ === uf.ᐃⲆᐃⵠΔᐃⲆ) {
              s(t, o.w / (_o * 100));
            }
            if (uf.ⵠⲆᐃⲆΔᐃⵠ === o.ⵠⲆⵠ) {
              b(t);
            }
          }
        }
      }
      Ht("isl", 1);
      Ht("wtb", Aa);
      Ht("la", bt);
      Ht("c", 1);
      Ht("s", uq);
      Ht("f", og);
      Ht("p", uq);
      Ht("g", 1);
      Ht("d", 1);
      Ht("a", Zk);
      Ht("re", 1);
      Ht("m", or);
      lb = [];
      uf.ᐃΔⲆⲆᐃⵠⲆᐃΔ(Qw);
    };
    this.ⵠⲆⲆᐃ = x;
    this.ᐃΔⲆⲆᐃⵠⲆᐃΔ = function (b) {
      for (var c = Bs; c < this.ΔΔΔΔᐃ; c++) {
        for (var d = 0; d < this.ⲆⵠᐃΔⵠ; d++) {
          if (!b.ᐃⲆⵠⲆ[c]) {
            b.ᐃⲆⵠⲆ[c] = [];
          }
          if (b.ᐃⲆⵠⲆ[c][d]) {
            var e = b.ᐃⲆⵠⲆ[c][d];
            if (e.de && dt < e.de.length) {
              for (var g = Hb; e.de.length > g; g++) {
                if (e.de[g] && e.de[g].length > Xa) {
                  e.de = e.de[g][0];
                  if (g >= 41 && g <= 49) {
                    e.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + vg);
                    e.de.Δᐃᐃ = [];
                    for (var j = dt; h > j; j++) {
                      e.de.Δᐃᐃ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * dj,
                        ΔⲆΔⵠ: 41 + Math.floor(Math.random() * Mi)
                      });
                    }
                  } else if (g >= 19 && g <= 26) {
                    e.de.scale = Ui;
                    h = Math.floor(Math.random() * yr + 1);
                    e.de.Δᐃᐃ = [];
                    for (j = 0; h > j; j++) {
                      e.de.Δᐃᐃ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔⲆΔⵠ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    e.de.angle = Yl;
                    e.de.scale = uj;
                    e.de.ΔⲆΔⵠ = g;
                  } else {
                    e.de.angle = Math.PI * Math.random() * 2;
                    e.de.scale = 1;
                    e.de.ΔⲆΔⵠ = g;
                  }
                }
              }
            }
            f(e, "p", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, y, Ng, 0, ib, 10));
            f(e, "t", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, Th, Eu, 10, 10));
            f(e, "s", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, Zn, fs, hc, Qg));
            f(e, "g", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(As, bq, 1, ks, 10, 10));
            f(e, "d", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1, hk, 10, cl));
            f(e, "b", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1, Hb, 10, 10));
            f(e, "f", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ke, vg, El, dh, 10, 10));
            f(e, "sw", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ro, 1, 1, ou, 10, ek));
            f(e, "gw", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, Ng, 1, 0, 10, hc));
            f(e, "dw", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1, 0, 10, 10));
            f(e, "a", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, uq, 1, fs, Xn, Sb));
            f(e, "cs", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, og, uq, 0, Ar, 10));
            f(e, "plm", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ag, bh, bq, 0, Cg, 10));
            f(e, "re", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, 1, ck, 0, ok, hc));
            f(e, "c", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Cl, vg, Dj, 0, Sd, 10));
            f(e, "m", new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, 1, ck, Go, ek, jl));
          } else {
            b.ᐃⲆⵠⲆ[c][d] = [];
          }
        }
      }
    };
    this.time = rs.ΔΔⲆ;
    this.ⲆⲆΔᐃᐃ = {
      ΔᐃⲆΔΔ: gj,
      translate: {
        y: hk,
        x: 0
      },
      now: 0,
      ⲆΔΔⵠΔ: 0
    };
    this.ⲆΔⲆΔⵠⵠᐃᐃᐃ = function () {
      this.ΔᐃᐃⲆⵠ = [];
      this.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ] = [];
      this.ΔⵠⲆ[iw.ΔᐃⵠΔᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆΔⲆⵠ] = [];
      this.ΔⵠⲆ[iw.ΔⲆΔⵠΔ] = [];
      this.ΔⵠⲆ[iw.ⵠΔⵠⲆΔ] = [];
      this.ΔⵠⲆ[iw.ⲆΔΔᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃⲆᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃΔⵠᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ⲆⵠⵠⵠΔ] = [];
      this.ΔⵠⲆ[iw.ⲆᐃⲆᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ΔᐃⵠⲆⲆ] = [];
      this.ΔⵠⲆ[iw.ⲆⲆΔΔΔ] = [];
      this.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ⵠΔᐃΔᐃ] = [];
      this.ΔⵠⲆ[iw.ⲆⵠΔᐃΔ] = [];
      this.ΔⵠⲆ[iw.ΔᐃΔⲆⲆ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠᐃⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ΔΔΔⵠΔ] = [];
      this.ΔⵠⲆ[iw.ᐃᐃᐃⲆⲆ] = [];
      this.ΔⵠⲆ[iw.ᐃΔⲆⵠⲆ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃⲆⵠⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠⲆΔⵠ] = [];
      this.ΔⵠⲆ[iw.ΔΔΔᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ] = [];
      this.ΔⵠⲆ[iw.ⲆᐃΔᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ⵠΔⲆⵠΔ] = [];
      this.ΔⵠⲆ[iw.ⲆⲆⵠΔⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠⵠⵠⲆ] = [];
      this.ΔⵠⲆ[iw.ᐃᐃᐃΔᐃ] = [];
      this.ΔⵠⲆ[iw.ⲆⵠⲆⵠᐃ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠⵠⵠⵠ] = [];
      this.ΔⵠⲆ[iw.ΔᐃᐃⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ⵠΔᐃⵠᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃΔΔΔⲆ] = [];
      this.ΔⵠⲆ[iw.ⲆᐃΔΔΔ] = [];
      this.ΔⵠⲆ[iw.ΔΔΔⲆⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠΔⵠⵠⲆ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆⵠᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ᐃᐃᐃΔⵠ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆΔᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ΔΔΔⵠⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠΔΔΔ] = [];
      this.ΔⵠⲆ[iw.ΔᐃΔⵠⵠ] = [];
      this.ΔⵠⲆ[iw.ᐃΔᐃᐃⵠ] = [];
      this.ΔⵠⲆ[iw.ⲆΔᐃᐃΔ] = [];
      this.ΔⵠⲆ[iw.ⲆΔᐃⲆⲆ] = [];
      this.ΔⵠⲆ[iw.Δᐃⵠᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆΔᐃⵠ] = [];
      this.ΔⵠⲆ[iw.ⲆᐃⵠⵠΔ] = [];
      this.ΔⵠⲆ[iw.ⲆΔΔΔΔ] = [];
      this.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆ] = [];
      this.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ⵠⲆⲆⲆΔ] = [];
      this.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃΔⵠΔⵠ] = [];
      this.ΔⵠⲆ[iw.ΔᐃⵠᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ⲆᐃⲆⵠᐃ] = [];
      this.ΔⵠⲆ[iw.ⲆΔᐃⲆΔ] = [];
      this.ΔⵠⲆ[iw.ᐃᐃⲆⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ΔⲆⵠᐃⵠ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆᐃⵠᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆᐃⲆⲆ] = [];
      this.ΔⵠⲆ[iw.ⲆⲆⲆᐃⲆ] = [];
      this.ΔⵠⲆ[iw.ΔᐃⵠΔⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠⲆⵠΔⵠ] = [];
      this.ΔⵠⲆ[iw.ΔΔΔⲆΔ] = [];
      this.ΔⵠⲆ[iw.ⵠΔⲆΔⵠ] = [];
      this.ΔⵠⲆ[iw.ΔᐃⵠⲆⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠⲆⲆΔᐃ] = [];
      this.ΔⵠⲆ[iw.Δⵠⵠⵠⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃⵠΔΔ] = [];
      this.ΔⵠⲆ[iw.ⵠⲆΔⵠᐃ] = [];
      this.ΔⵠⲆ[iw.ΔⵠΔⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃⲆⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃⲆΔⲆΔⲆⵠ] = [];
      this.ΔⵠⲆ[iw.ⲆⲆᐃⵠΔ] = [];
      this.ΔⵠⲆ[iw.ⲆΔⵠΔⲆ] = [];
      this.ΔⵠⲆ[iw.ΔⲆΔΔΔ] = [];
      this.ΔⵠⲆ[iw.ΔᐃΔΔΔ] = [];
      this.ΔⵠⲆ[iw.ⵠΔΔᐃᐃᐃⵠ] = [];
      this.ΔⵠⲆ[iw.ΔⲆⲆⲆⲆⲆⵠ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃⵠⲆᐃⲆᐃ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠᐃⵠⲆᐃᐃ] = [];
      this.ΔⵠⲆ[iw.ᐃⵠΔⵠⲆ] = [];
      this.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆΔⲆ] = [];
      this.ΔⵠⲆ[iw.ⵠᐃⲆⵠⲆ] = [];
      this.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ] = [];
      this.ΔⵠⲆ[iw.ⲆⵠⲆΔⵠ] = [];
      this.ΔⵠⲆ[iw.ᐃᐃᐃⲆΔ] = [];
      this.ΔⵠⲆ[iw.ⵠⵠΔⵠⲆ] = [];
      this.ΔⵠⲆ[iw.ᐃᐃᐃⵠΔ] = [];
    };
    this.ⲆⵠⲆᐃⵠⵠΔᐃᐃ = function (a) {
      if (this.ΔᐃᐃⲆⵠ[a]) {
        ⲆᐃⲆΔ = this.ΔᐃᐃⲆⵠ[a].type;
        this.ΔᐃᐃⲆⵠ[a] = null;
        for (var b = this.ΔⵠⲆ[ⲆᐃⲆΔ], c = dt; c < b.length; c++) {
          if (a == b[c].ᐃᐃⲆΔ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⲆΔΔⵠᐃⵠⲆⲆΔ = function (a, b) {
      for (var c = 0; c < this.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ].length; c++) {
        var d = this.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ][c];
        if (Math.floor(d.x / wg) === b && a === Math.floor(d.y / 100)) {
          return 1;
        }
      }
      return 0;
    };
    this.ΔᐃΔᐃᐃⲆΔΔⲆ = function (a, b) {
      for (var c = dh; c < this.ΔⵠⲆ[iw.ⲆⲆΔΔΔ].length; c++) {
        var d = this.ΔⵠⲆ[iw.ⲆⲆΔΔΔ][c];
        if (a == Math.floor(d.x / 100) && Math.floor(d.y / Kh) == b) {
          return true;
        }
      }
      return Qo;
    };
    this.ⵠⵠΔⲆⲆ = function (j) {
      for (var e = ka; j.length > e; e++) {
        ΔⲆΔⲆ = j[e];
        if (ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ != ΔⲆΔⲆ.angle) {
          var q = Xj * Math.PI;
          ΔⲆΔⲆ.angle = (ΔⲆΔⲆ.angle + q) % q;
          ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ = (ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ + q) % q;
          if (ΔⲆΔⲆ.angle != ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ) {
            var B = ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ - ΔⲆΔⲆ.angle;
            var D = Math.abs(B);
            if (Math.PI < D) {
              D = Math.PI * 2 - D;
            }
            var E = D / Math.PI * 3 * fw.ᐃᐃⲆΔᐃᐃⲆ * Cf;
            if (B > Math.PI) {
              ΔⲆΔⲆ.angle -= E;
            } else if (B < -Math.PI) {
              ΔⲆΔⲆ.angle += E;
            } else if (B < 0) {
              ΔⲆΔⲆ.angle -= E;
            } else {
              ΔⲆΔⲆ.angle += E;
            }
            ΔⲆΔⲆ.angle = (ΔⲆΔⲆ.angle + q) % q;
            if (Math.abs(ΔⲆΔⲆ.angle - ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ) < E) {
              ΔⲆΔⲆ.angle = ΔⲆΔⲆ.ⲆΔⲆᐃⵠⵠⵠ;
            }
          }
        }
        Math.floor(ΔⲆΔⲆ.r.y / hi);
        Math.floor(ΔⲆΔⲆ.r.x / 100);
        if (ΔⲆΔⲆ.x != ΔⲆΔⲆ.r.x || ΔⲆΔⲆ.y != ΔⲆΔⲆ.r.y) {
          if (ΔⲆΔⲆ.action & _v.IDLE) {
            ΔⲆΔⲆ.action -= _v.IDLE;
          }
          ΔⲆΔⲆ.action |= _v.ΔⵠΔⲆᐃᐃⵠ;
          var F = ⵠⲆᐃⲆ.ΔⵠΔᐃᐃᐃᐃ(ΔⲆΔⲆ, ΔⲆΔⲆ.r) + Math.PI;
          var G = ΔⲆΔⲆ.ΔΔⲆⲆⵠ * Cf;
          var H = ⵠⲆᐃⲆ.ΔⲆⲆⵠᐃᐃᐃ(G, F);
          if (ⵠⲆᐃⲆ.ΔⵠᐃⵠⲆⲆⲆ(H) < ⵠⲆᐃⲆ.ΔⵠᐃⵠⲆⲆⲆ(ⵠⲆᐃⲆ.ⵠΔᐃΔΔᐃⵠ(ΔⲆΔⲆ, ΔⲆΔⲆ.r))) {
            ⵠⲆᐃⲆ.ᐃⵠⵠᐃⲆⲆⵠ(ΔⲆΔⲆ, H);
          } else {
            if (ΔⲆΔⲆ.action & _v.ΔⵠΔⲆᐃᐃⵠ) {
              ΔⲆΔⲆ.action -= _v.ΔⵠΔⲆᐃᐃⵠ;
            }
            ΔⲆΔⲆ.action |= _v.IDLE;
            ⵠⲆᐃⲆ.ΔⲆⵠᐃⲆⲆⲆ(ΔⲆΔⲆ.r, ΔⲆΔⲆ);
          }
        }
        if (ΔⲆΔⲆ.ΔᐃΔᐃᐃ) {
          var I = ΔⲆΔⲆ.bubbles;
          if ((M = I.length) === 0 || rs.ⵠΔᐃⵠⵠⵠⲆ > M && I[M - 1].ᐃⲆⵠΔᐃ < 0.95) {
            I.push({
              id: Math.floor(Math.random() * ⵠᐃ[rs.ⵠΔⵠᐃΔΔΔ][hk].length),
              x: Math.floor(ΔⲆΔⲆ.x + Math.random() * 80 - 40),
              y: Math.floor(ΔⲆΔⲆ.y + Math.random() * 80 - 40),
              ᐃⲆⵠΔᐃ: 1
            });
          }
          for (var J = 0; J < M; J++) {
            I[J].ᐃⲆⵠΔᐃ = Math.max(0, I[J].ᐃⲆⵠΔᐃ - Cf);
          }
          for (J = 0; M > J; J++) {
            if (I[J].ᐃⲆⵠΔᐃ === 0) {
              I.splice(J, $r);
              break;
            }
          }
        }
        var K = 0;
        if (ΔⲆΔⲆ.ⵠⲆⵠⵠ && hf.ⵠⵠᐃΔΔ) {
          var L = ΔⲆΔⲆ.ΔⲆᐃⲆΔ;
          var M = L.length;
          if (ΔⲆΔⲆ.ⲆᐃᐃⵠⵠΔⵠ > 0 && ts.ⲆⲆⲆᐃⲆ !== ΔⲆΔⲆ.ⲆΔⵠⵠΔ && ΔⲆΔⲆ.ⲆΔⵠⵠΔ !== ts.ΔᐃⵠΔⵠ && ΔⲆΔⲆ.ⲆΔⵠⵠΔ !== ts.ᐃⲆΔⵠᐃ && ΔⲆΔⲆ.ⲆΔⵠⵠΔ !== ts.ⵠⲆⵠΔⵠ && ΔⲆΔⲆ.ⲆΔⵠⵠΔ !== ts.ΔᐃⲆⵠⵠ && !ΔⲆΔⲆ.ΔᐃΔᐃᐃ && (K = Zn, M === 0 || rs.ⵠⵠⵠⵠⵠⵠΔ < ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(L[M - El], ΔⲆΔⲆ))) {
            var N = -ΔⲆΔⲆ.angle;
            var O = gq * (Math.cos(N) * 45);
            var Q = gq * (Math.sin(N) * 45);
            L.push({
              x: ΔⲆΔⲆ.x + O,
              y: ΔⲆΔⲆ.y + Q,
              r: ar,
              alpha: 0.8
            });
            L.push({
              x: ΔⲆΔⲆ.x - O,
              y: ΔⲆΔⲆ.y - Q,
              r: lj,
              alpha: 0.8
            });
            L.push({
              x: ΔⲆΔⲆ.x,
              y: ΔⲆΔⲆ.y,
              r: 24,
              alpha: 1
            });
          }
          for (J = 0; J < M; J++) {
            L[J].alpha = Math.max(0, L[J].alpha - Cf / 2.2);
            L[J].r += Cf * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(Yl, kr);
          }
          var R = ΔⲆΔⲆ.ᐃⵠᐃΔⲆ;
          M = R.length;
          var S = -or;
          var U = Math.max(0, Math.sign(ΔⲆΔⲆ.ⲆᐃⲆΔⲆⲆⵠ));
          var V = Math.max(0, Math.sign(ΔⲆΔⲆ.ᐃⵠⲆᐃᐃ));
          Math.max(lt, Math.sign(ΔⲆΔⲆ.ⲆᐃⲆΔᐃ));
          var W = Math.max(vl, Math.sign(ΔⲆΔⲆ.ᐃΔΔⲆΔ));
          var X = Math.max(dh, Math.sign(ΔⲆΔⲆ.ⵠⵠΔΔⵠ));
          if (ΔⲆΔⲆ.ⲆᐃⲆΔⲆⲆⵠ > 0 || ΔⲆΔⲆ.ⲆᐃⲆΔᐃ > 0) {
            S = rs.ⲆⲆΔΔⵠⵠΔ;
          } else if (ΔⲆΔⲆ.ⵠⵠΔΔⵠ > 0) {
            S = rs.ΔᐃΔⵠᐃⲆΔ;
          } else if (vl < ΔⲆΔⲆ.ᐃⵠⲆᐃᐃ) {
            S = rs.ⲆᐃⲆⵠΔΔᐃ;
          } else if (ΔⲆΔⲆ.ᐃΔΔⲆΔ > 0) {
            S = rs.ⵠᐃⲆⲆⵠⵠΔ;
          }
          if (ΔⲆΔⲆ.ⲆΔⵠⵠΔ === ts.ΔⵠᐃΔⵠ && (U | V | W | X) == 1) {
            S = rs.ⵠᐃᐃⵠᐃΔΔ;
            var Y = ΔⲆΔⲆ.ᐃⲆᐃᐃΔ - Math.PI / 2;
            var Z = 15;
            var _ = el;
            var aa = rs.ⵠⲆΔⲆᐃⲆⲆ;
          } else if (ts.ᐃⲆᐃⵠᐃ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ && (U | V | W | X) == 1) {
            S = rs.ᐃΔΔΔⵠΔᐃ;
            Y = ΔⲆΔⲆ.ᐃⲆᐃᐃΔ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = rs.ⵠⲆΔⲆᐃⲆⲆ;
          } else if (ts.ᐃⲆᐃⲆⲆ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ && or === (U | V | W | X)) {
            S = rs.ⲆⲆⲆⲆⲆⵠⲆ;
            Y = ΔⲆΔⲆ.ᐃⲆᐃᐃΔ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = tu + ba;
            _ = Ob + ba;
            aa = rs.ⵠⲆΔⲆᐃⲆⲆ * 0.9;
          } else {
            Y = ΔⲆΔⲆ.angle;
            Z = Pg;
            _ = 11;
            aa = rs.ⵠⲆΔⲆᐃⲆⲆ;
          }
          if (ts.ⲆⲆⲆᐃⲆ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ || ts.ΔᐃⵠΔⵠ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ || ts.ΔᐃⲆⵠⵠ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ || ts.ⵠⲆⵠΔⵠ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ || ΔⲆΔⲆ.ⲆΔⵠⵠΔ === ts.ᐃⲆΔⵠᐃ || ΔⲆΔⲆ.ΔᐃΔᐃᐃ); else if (ts.ᐃΔⵠⵠⵠ === ΔⲆΔⲆ.ⲆΔⵠⵠΔ) {
            if (Yl === M || rs.ⲆΔⵠⲆⲆⲆᐃ < ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(R[M - 1], ΔⲆΔⲆ)) {
              R.push({
                x: ΔⲆΔⲆ.x,
                y: ΔⲆΔⲆ.y,
                angle: ΔⲆΔⲆ.ᐃⲆᐃᐃΔ,
                alpha: 1,
                id: rs.ΔⲆⲆⲆᐃΔⲆ
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(R[M - kr], ΔⲆΔⲆ) > aa)) {
            ΔⲆΔⲆ.ᐃⵠᐃⲆΔⲆΔ++;
            if (Math.abs(ΔⲆΔⲆ.x - ΔⲆΔⲆ.r.x) > 1 && Math.abs(ΔⲆΔⲆ.y - ΔⲆΔⲆ.r.y) > 1) {
              if (ΔⲆΔⲆ.r.x > ΔⲆΔⲆ.x && ΔⲆΔⲆ.r.y < ΔⲆΔⲆ.y || ΔⲆΔⲆ.r.x < ΔⲆΔⲆ.x && ΔⲆΔⲆ.r.y > ΔⲆΔⲆ.y) {
                if (ΔⲆΔⲆ.ᐃⵠᐃⲆΔⲆΔ % 2) {
                  O = -_ * gq;
                  Q = gq * -_;
                } else {
                  Q = _ * gq;
                  O = _ * gq;
                }
              } else if (ΔⲆΔⲆ.ᐃⵠᐃⲆΔⲆΔ % 2) {
                O = _ * gq;
                Q = -_ * gq;
              } else {
                Q = _ * gq;
                O = -_ * gq;
              }
            } else if (ΔⲆΔⲆ.ᐃⵠᐃⲆΔⲆΔ % 2) {
              O = gq * (Math.cos(Y) * Z);
              Q = Z * Math.sin(Y) * gq;
            } else {
              O = gq * (Z * -Math.cos(Y));
              Q = gq * (-Math.sin(Y) * Z);
            }
            R.push({
              x: ΔⲆΔⲆ.x + O,
              y: ΔⲆΔⲆ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (J = Yl; M > J; J++) {
            if (R[J].id === rs.ΔⲆⲆⲆᐃΔⲆ) {
              R[J].alpha = Math.max(0, R[J].alpha - Cf * 1.5);
            } else {
              R[J].alpha = Math.max(0, R[J].alpha - Cf / 2.85);
            }
          }
          if (R.length > 0 && R[ou].alpha === dh) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ᐃᐃᐃ = function () {
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⲆᐃⲆⵠᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⲆΔᐃⲆΔ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ᐃᐃⲆⲆᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ΔⲆⵠᐃⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ᐃⲆᐃⵠᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ᐃⲆᐃⲆⲆ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⲆⲆⲆᐃⲆ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ΔᐃⵠΔⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⵠⲆⵠΔⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ᐃᐃᐃⲆΔ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ΔᐃⵠⲆⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⵠⲆⲆΔᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.Δⵠⵠⵠⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⵠᐃⵠΔΔ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⵠⲆΔⵠᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ΔⵠΔⲆᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⵠᐃⲆⲆᐃ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ᐃⲆΔⲆΔⲆⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⲆⲆᐃⵠΔ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ΔⲆΔΔΔ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ΔΔΔⲆΔ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⵠΔⲆΔⵠ]);
      this.ⵠⵠΔⲆⲆ(this.ΔⵠⲆ[iw.ⲆΔⵠΔⲆ]);
    };
    this.ⲆΔᐃⵠ = [];
    this.ⲆΔᐃⵠ[rs.ⲆΔΔΔⵠ] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ke, 1, 1.05, 1, 0.008, 0.008);
    this.ⲆΔᐃⵠ[rs.ⲆΔΔⵠᐃ] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⲆΔᐃⵠ[rs.ΔΔⵠᐃⲆ] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ps, og, 1.02, or, 0.008, 0.008);
    this.ⲆΔᐃⵠ[rs.ⲆᐃⲆᐃΔ] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, $r, 1.08, 1, 0.006, 0.006);
    this.ⵠΔⵠⵠⵠ = [];
    this.ⵠΔⵠⵠⵠ[ka] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ps, 0.1, 1, ks, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[Th] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, 0.4, 1, dt, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[2] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[Kl] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.8, 1, hk, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[jo] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Bh, 0.3, 1, 0, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[Xk] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.8, ck, ho, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[lu] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.5, og, fs, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[at] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(As, 0.9, hj, ks, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[kq] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, hj, 0, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[9] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.2, Ng, Go, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[10] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ej, 0.6, 1, 0, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[11] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Cl, 0.4, 1, ks, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[12] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[13] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.2, 1, 0, 0.6, 0.6);
    this.ⵠΔⵠⵠⵠ[14] = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ag, 0.7, og, ho, 0.6, 0.6);
  }
  function ow(a, b, c) {
    const d = ~(a & 21621) & (a | 21621);
    const e = b ^ 64260;
    const f = (0 << (c >> ou & 255)) + (16 << (c >> 8 & 255)) + (lj << (c >> 16 & 255)) + (24 << (c >> 24 & 255));
    return ((39717 + (rf(d, e, f, d) ^ function (b, c, d, e) {
      const f = (2147483587 + (17040 + b) * 2147483629) % 2147483647;
      const g = ~(c & 30717) & c | ~(c & 30717) & 30717;
      const i = ~(d & 23873) & (d | 23873);
      const a = (vl << (e & 255)) + (Fs << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 16 & 255));
      const j = eb(f, g, i, a);
      mw(f, g, i, a);
      return ~(j & 57141) & j | ~(j & 57141) & 57141;
    }(e, f, d, e))) * 22695477 + 1) % 4294967296;
  }
  function pw(c, d, e, h, i, k, l, a, m, g) {
    this.type = c;
    this.ⵠⵠⲆΔ = d;
    this.id = e;
    this.x = h;
    this.y = i;
    this.angle = k;
    this.ⲆΔⲆᐃⵠⵠⵠ = k;
    this.action = l;
    this.info = a;
    this.ⲆΔⲆᐃⵠ = g;
    this.r = {
      x: h,
      y: i
    };
    this.ΔΔⲆⲆⵠ = m;
    if (uf) {
      this.ᐃᐃⲆΔ = uf.ᐃΔᐃᐃᐃⵠΔ * d + e;
    }
    switch (c) {
      case iw.ᐃⲆⲆΔᐃ:
        this.ᐃᐃΔⲆ = uf.ⲆᐃΔΔ[this.ⵠⵠⲆΔ];
        this.ᐃᐃᐃⵠ = this.ᐃᐃΔⲆ.ᐃᐃᐃⵠ;
        this.ᐃᐃᐃᐃⵠᐃⲆ = this.ᐃᐃΔⲆ.ᐃᐃᐃᐃⵠᐃⲆ;
        this.ᐃⲆⲆΔΔ = this.ᐃᐃΔⲆ.ᐃⲆⲆΔΔ;
        this.ⲆⲆⵠⲆⲆ = this.ᐃᐃΔⲆ.ⲆⲆⵠⲆⲆ;
        this.ⵠΔΔᐃⵠΔⲆ = -1000000;
        this.ᐃΔΔⲆΔ = -1000000;
        this.ᐃⵠⲆᐃᐃ = -1000000;
        this.ⲆᐃⲆΔᐃ = -1000000;
        this.ⲆᐃᐃⵠⵠΔⵠ = -1000000;
        this.ⲆᐃⲆΔⲆⲆⵠ = -1000000;
        this.ⵠⵠΔΔⵠ = -1000000;
        this.ⵠⲆΔᐃⲆ = uf.mode === fw.ⵠⵠᐃΔⲆ && fw.ᐃᐃΔᐃᐃⲆⵠ === this.ᐃᐃᐃⵠ || Bh;
        this.ⵠⲆⲆⵠΔᐃᐃ = fw.ⵠⵠᐃᐃΔ === uf.mode && this.ᐃᐃᐃⵠ === fw.ⵠᐃⵠⵠⲆΔⲆ && La;
        this.ⵠⲆᐃΔΔᐃᐃ = !!this.ⵠⲆΔᐃⲆ && this.ᐃᐃΔⲆ.ᐃᐃⵠⲆΔ === "  " || Ag;
        this.ᐃⵠᐃΔⲆ = [];
        this.ᐃᐃΔᐃΔⵠΔ = ks;
        this.ⵠⲆⵠⵠ = true;
        this.ᐃⵠᐃⲆΔⲆΔ = Yl;
        this.ⵠΔⲆⵠⵠΔᐃ = 0;
        this.ΔⲆᐃⲆΔ = [];
        this.r = {
          x: h,
          y: i
        };
        this.ᐃⵠΔⲆ = cv;
        this.ᐃΔⲆⵠᐃΔᐃ = Yu;
        this.ⲆⲆΔᐃΔ = gj;
        this.ᐃⲆᐃᐃΔ = 0;
        this.ⵠⵠⵠΔΔ = dh;
        this.ΔᐃΔⲆⵠⵠⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Qo, 0, Xa, -Math.PI / 6, 0.5, vg);
        this.ᐃⵠⵠⵠⵠ = vl;
        this.ᐃΔΔᐃⲆⵠΔ = 0;
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, 0, O, 3);
        this.ⲆΔᐃⵠⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Cl, 0.6, 0.6, Et, Gj, 3);
        this.freeze = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Qo, 0.6, 0.6, Bs, Hl, Xg);
        this.ⵠⵠⲆᐃⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        this.ΔΔⵠᐃⵠⵠᐃ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ⲆⲆⵠⲆᐃⵠⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zj, ka, 7.5, -sd, 22.5, 33.75);
        this.attack = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vl, Bs, 0, -Math.PI / 3, iq, re);
        this.ΔΔᐃᐃⲆⲆᐃΔⲆ = Et;
        this.ⵠⵠΔⵠΔΔΔ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(vs, 0.6, 0.6, 0, 1, R);
        this.ΔⵠΔΔⵠᐃΔ = this.ⵠⲆᐃΔΔᐃᐃ ? new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(true, Xa, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ⵠᐃᐃⵠⲆᐃᐃ = 0;
        this.ᐃⲆⵠⵠⲆᐃΔ = ka;
        this.ΔΔⲆⵠⵠⲆⲆ = [];
        this.ⲆΔⵠⲆΔⵠⲆ = [];
        this.text = [];
        this.label = [];
        this.ᐃΔⵠⲆᐃΔⵠ = dv;
        this.ΔⲆⲆⲆΔ = ia;
        this.right = -Zn;
        this.ⲆΔⵠⵠΔ = -uq;
        this.action = _v.IDLE;
        this.ⲆⵠⲆⵠⵠᐃⲆ = ej;
        this.ⲆⲆⲆⲆⵠ = 0;
        this.ΔᐃΔᐃᐃ = vs;
        this.bubbles = [];
        this.ⲆⵠⲆⲆᐃ = 0;
        this.Ⲇᐃᐃⵠⵠ = -1;
        this.ᐃᐃᐃ = function (a) {
          if (this.info & 32768) {
            this.ⲆⵠⲆⵠⵠᐃⲆ = true;
            this.info = this.info & -32769;
          } else {
            this.ⲆⵠⲆⵠⵠᐃⲆ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⲆⵠⲆⲆᐃ = bt;
          } else {
            this.ⲆⵠⲆⲆᐃ = Xa;
          }
          this.ⲆⲆⲆⲆⵠ = Math.floor(this.info / 128);
          this.info -= this.ⲆⲆⲆⲆⵠ * 128;
          if (ts.ⵠⵠᐃᐃᐃ === this.info || this.ⵠⲆᐃΔΔᐃᐃ) {
            this.right = -Zn;
          } else {
            this.right = this.info;
          }
          this.ᐃᐃΔᐃΔⵠΔ = uf.ⲆΔΔⵠᐃⵠⲆⲆΔ(Math.floor(this.r.y / Xl), Math.floor(this.r.x / 100));
          this.ⲆΔⵠⵠΔ = this.ⲆΔⲆᐃⵠ & 255;
          if (this.right === fw.ΔΔᐃᐃΔᐃⲆᐃⵠ) {
            this.ΔᐃΔᐃᐃ = true;
          } else {
            this.ΔᐃΔᐃᐃ = Qo;
          }
          if (gw[this.right]) {
            this.ⲆᐃΔⲆⵠ = true;
          } else {
            this.ⲆᐃΔⲆⵠ = false;
          }
          if (a & _v.ΔΔΔⵠᐃΔⵠ) {
            this.ⵠⵠΔⵠΔΔΔ.ᐃⵠᐃ = false;
            this.ⵠⵠΔⵠΔΔΔ.ⲆⵠⲆ = 0.6;
          } else if (a & _v.ⵠΔᐃⲆⲆ) {
            this.freeze.ᐃⵠᐃ = false;
            this.freeze.ⲆⵠⲆ = 0.6;
          } else if (a & _v.ΔⵠⲆᐃᐃΔⲆ) {
            this.ⲆΔᐃⵠⲆ.ᐃⵠᐃ = ej;
            this.ⲆΔᐃⵠⲆ.ⲆⵠⲆ = 0.6;
          }
          if (a & _v.ᐃᐃᐃΔᐃᐃΔ) {
            this.ⵠⵠⲆᐃⵠᐃⵠ.ᐃⵠᐃ = false;
            this.ⵠⵠⲆᐃⵠᐃⵠ.ⲆⵠⲆ = 0.6;
          }
          if (a & _v.ΔⲆⵠⲆ) {
            this.Ⲇⵠᐃⵠ.ᐃⵠᐃ = ol;
            this.Ⲇⵠᐃⵠ.ⲆⵠⲆ = 0.6;
          }
          if (a & _v.ⵠΔᐃᐃΔⵠᐃ) {
            this.ΔΔᐃᐃⲆⲆᐃΔⲆ = bw.ΔⵠⲆΔΔⲆΔⲆⵠ;
            if (Vw.Δᐃᐃⵠᐃ && this.Ⲇᐃᐃⵠⵠ !== -$q) {
              Vw.ⲆᐃΔΔ[this.Ⲇᐃᐃⵠⵠ].ⲆⵠⲆΔᐃΔΔⵠΔ(Mw[this.right]);
            }
          }
        };
        this.ᐃᐃᐃ();
        break;
      case iw.ᐃΔⵠΔⵠ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Mq, 1, Ws, 0, hc, 10),
          ᐃᐃᐃ: ol,
          angle: 0
        };
        this.ᐃᐃΔᐃᐃᐃΔ = dp;
        this.ᐃΔᐃᐃΔ = Vu;
        this.ⲆᐃΔᐃᐃ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, $r, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⲆΔᐃᐃⲆᐃ = lt;
        this.ᐃΔᐃᐃⲆⵠⲆ = lt;
        this.ΔΔⵠΔΔ = $m;
        break;
      case iw.ⲆΔᐃⲆᐃ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, bt, Ng, 0, Ys, 10),
          ᐃᐃᐃ: Vq,
          angle: Hb
        };
        this.ᐃᐃΔᐃᐃᐃΔ = Ou;
        this.ᐃΔᐃᐃΔ = fp;
        this.ⲆᐃΔᐃᐃ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, bh, 1.23, 1.18, 0.01, 0.01);
        this.ⲆⲆΔᐃᐃⲆᐃ = 0;
        this.ᐃΔᐃᐃⲆⵠⲆ = 0;
        break;
      case iw.ᐃⲆΔⲆⵠ:
      case iw.ΔⲆΔⵠΔ:
        this.ᐃᐃΔᐃᐃᐃΔ = wp;
        this.ᐃΔᐃᐃΔ = Gp;
        this.ⵠⲆᐃΔⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, Ng, 1.23, 1.18, 0.01, 0.01);
        this.ⲆᐃΔᐃᐃ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, y, 1.23, 1.18, 0.01, 0.01);
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, og, 1, 0, 10, Hh),
          ᐃᐃᐃ: Qo,
          angle: 0
        };
        break;
      case iw.ᐃᐃᐃⲆⲆ:
        this.ᐃᐃΔᐃᐃᐃΔ = Tu;
        this.ᐃΔᐃᐃΔ = Su;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, El, 1, 0, Yq, 10),
          ᐃᐃᐃ: false,
          angle: 0
        };
        this.ⵠΔⲆΔ = [];
        for (var n = 0; n < yr; n++) {
          this.ⵠΔⲆΔ.push({
            ᐃⵠΔⲆ: Lp,
            ⲆΔᐃⵠ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠΔⲆΔ[fs].x = this.x - 16.5;
        this.ⵠΔⲆΔ[ks].y = this.y - 15.5;
        this.ⵠΔⲆΔ[hk].angle = this.angle;
        this.ⵠΔⲆΔ[Dj].x = this.x + 36;
        this.ⵠΔⲆΔ[hj].y = this.y + 17;
        this.ⵠΔⲆΔ[1].angle = this.angle;
        this.ⵠΔⲆΔ[2].x = this.x - 18.5;
        this.ⵠΔⲆΔ[kg].y = this.y + 39;
        this.ⵠΔⲆΔ[2].angle = this.angle;
        break;
      case iw.ⵠΔⵠⲆΔ:
        this.ᐃᐃΔᐃᐃᐃΔ = Op;
        this.ᐃΔᐃᐃΔ = Xp;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, bq, 1, Go, j, Sb),
          ᐃᐃᐃ: ke,
          angle: dh
        };
        this.ⵠΔⲆΔ = [];
        for (n = lt; n < Ia; n++) {
          this.ⵠΔⲆΔ.push({
            ᐃⵠΔⲆ: Vp,
            ⲆΔᐃⵠ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(vs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠΔⲆΔ[Yl].x = this.x - 16.5;
        this.ⵠΔⲆΔ[0].y = this.y - 15.5;
        this.ⵠΔⲆΔ[Zk].x = this.x - 5.5;
        this.ⵠΔⲆΔ[1].y = this.y + 7.5;
        this.ⵠΔⲆΔ[2].x = this.x + 18;
        this.ⵠΔⲆΔ[2].y = this.y - Vn;
        break;
      case iw.ᐃⲆᐃⵠᐃ:
        this.ᐃⵠΔⲆ = yp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ol, 0.6, 0.6, ks, Lj, Ss);
        break;
      case iw.ΔⲆⵠᐃⵠ:
        this.ᐃⵠΔⲆ = qp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ro, 0.6, 0.6, 0, 5, 3);
        break;
      case iw.ᐃⲆᐃⲆⲆ:
        this.ᐃⵠΔⲆ = Dp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠᐃⲆΔⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆᐃΔΔⵠⲆⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Bh, 0.6, 0.6, fs, 5, yr);
        this.ⲆΔᐃⵠⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, ou, Yo, Xg);
        break;
      case iw.ᐃᐃⲆⲆᐃ:
        this.ᐃⵠΔⲆ = Fp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠᐃⲆΔⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⲆᐃΔΔⵠⲆⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, 0.6, 0.6, ka, Lj, R);
        this.ⲆΔᐃⵠⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, Go, as, sd);
        break;
      case iw.ΔⲆΔΔΔ:
        this.ᐃⵠΔⲆ = Jp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(fk, 0.6, 0.6, 0, Xk, 3);
        break;
      case iw.ⵠᐃⵠΔΔ:
        this.ᐃⵠΔⲆ = Pp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ol, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case iw.Δⵠⵠⵠⵠ:
        this.ⵠⲆᐃΔΔⵠᐃ = this.info & 15;
        this.ⵠΔⲆⵠⵠΔᐃ = this.ⲆΔⲆᐃⵠ & kr;
        this.ᐃⵠⲆᐃΔᐃⵠ = 0;
        this.x = this.info;
        this.y = this.ⲆΔⲆᐃⵠ;
        this.ᐃⵠΔⲆ = pp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Bh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case iw.ⲆᐃⲆⵠᐃ:
      case iw.ⲆΔᐃⲆΔ:
      case iw.ᐃᐃᐃⲆΔ:
      case iw.ΔᐃⵠⲆⵠ:
      case iw.ⵠⲆΔⵠᐃ:
      case iw.ΔⵠΔⲆᐃ:
      case iw.ΔΔΔⲆΔ:
      case iw.ⵠΔⲆΔⵠ:
      case iw.ⵠⲆⲆΔᐃ:
        this.ᐃⵠΔⲆ = Pp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vq, 0.6, 0.6, 0, br, Qq);
        break;
      case iw.ⲆⵠⲆΔⵠ:
        this.ᐃⵠΔⲆ = Rp;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Va, uq, 1, dh, 10, ek),
          ᐃᐃᐃ: Cl,
          angle: Go
        };
        break;
      case iw.ΔⵠⵠΔⵠ:
        this.ᐃΔᐃᐃΔ = Up;
        this.ᐃⵠΔⲆ = kp;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Cl, 1, bt, 0, 10, Sb),
          ᐃᐃᐃ: As,
          angle: fs
        };
        this.up = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ag, og, 1.03, 0.98, 0.1, 0.1);
        this.ᐃⵠΔⲆⵠ = [];
        break;
      case iw.ⵠⵠΔⵠⲆ:
        this.angle = Math.random() * Math.PI / 2;
      case iw.ⵠᐃⲆⵠⲆ:
      case iw.ⲆⲆⲆⲆⲆΔⲆ:
        this.ᐃⵠΔⲆ = cp;
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Bh, 0.6, 0.6, 0, zq, 3);
        break;
      case iw.ᐃⵠΔⵠⲆ:
        this.ᐃⵠΔⲆ = Hp;
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(qn, 0.6, 0.6, dh, Gj, 3);
        break;
      case iw.ⲆΔⵠΔⲆ:
        this.scale = $r;
        this.ᐃⵠΔⲆ = Mp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, Ob, dh, -Math.PI / 6, 0.5, 1);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, 0, Yo, R);
        break;
      case iw.ᐃⲆΔⲆΔⲆⵠ:
        this.Ⲇᐃⵠⵠᐃ = 0;
        this.ⵠΔⲆⲆ = [];
        this.ⲆΔⲆⲆᐃⲆᐃ = Bs;
        this.ⵠⲆⵠᐃᐃⵠΔ = $p;
        this.ᐃⵠΔⲆ = Zp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, ho, Yl, -Math.PI / 6, 0.5, 1);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(As, 0.6, 0.6, 0, 5, Qh);
        break;
      case iw.ⵠᐃⲆⲆᐃ:
        this.x = this.info;
        this.y = this.ⲆΔⲆᐃⵠ;
        this.scale = 1;
        this.ⲆᐃⵠΔ = dh;
        this.ᐃⵠΔⲆ = Cp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ag, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Zg, 0, Yl, -Math.PI / pu, 0.5, bh);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, 0, Ba, 3);
        break;
      case iw.ⵠⲆⵠΔⵠ:
        this.x = this.info;
        this.y = this.ⲆΔⲆᐃⵠ;
        this.scale = Zn;
        this.ⲆᐃⵠΔ = Bs;
        this.ᐃⵠΔⲆ = Bp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, fs, 0, -Math.PI / f, 0.5, uq);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, dt, O, Xg);
        break;
      case iw.ΔᐃⵠΔⵠ:
        this.scale = bh;
        this.ᐃⵠΔⲆ = zp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(fk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Cl, jg, 0, -Math.PI / pu, 0.5, 1);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case iw.ⲆⲆⲆᐃⲆ:
        this.scale = 1;
        this.ᐃⵠΔⲆ = Pu;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ro, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Zg, 0, 0, -Math.PI / Sg, 0.5, kr);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, 0.6, 0.6, 0, fl, kl);
        break;
      case iw.ⲆⲆᐃⵠΔ:
        this.scale = $q;
        this.ᐃⵠΔⲆ = Sp;
        this.ⲆΔᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0, 0, -Math.PI / rt, 0.5, uq);
        this.Ⲇⵠᐃⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.6, 0.6, Bs, 5, Ab);
        break;
      case iw.ΔᐃⵠᐃⲆ:
        this.ⵠΔⲆΔ = [];
        for (n = Bs; n < 5; n++) {
          this.ⵠΔⲆΔ.push({
            ᐃⵠΔⲆ: Vp,
            ⲆΔᐃⵠ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ke, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % Kl) {
          case 0:
            this.ⵠΔⲆΔ[0].x = this.x - 20.5;
            this.ⵠΔⲆΔ[0].y = this.y - 22.5;
            this.ⵠΔⲆΔ[Zk].x = this.x - 35.5;
            this.ⵠΔⲆΔ[og].y = this.y + 7.5;
            this.ⵠΔⲆΔ[ys].x = this.x + 7.5;
            this.ⵠΔⲆΔ[yl].y = this.y - 30;
            this.ⵠΔⲆΔ[Xg].x = this.x + 22.5;
            this.ⵠΔⲆΔ[wn].y = this.y;
            this.ⵠΔⲆΔ[ll].x = this.x - 7.5;
            this.ⵠΔⲆΔ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ⵠΔⲆΔ[0].x = this.x - 30.5;
            this.ⵠΔⲆΔ[lt].y = this.y - 22.5;
            this.ⵠΔⲆΔ[1].x = this.x - 15.5;
            this.ⵠΔⲆΔ[1].y = this.y + 7.5;
            this.ⵠΔⲆΔ[cn].x = this.x + 15.5;
            this.ⵠΔⲆΔ[it].y = this.y - 30;
            this.ⵠΔⲆΔ[3].x = this.x + 12.5;
            this.ⵠΔⲆΔ[Ss].y = this.y + 5;
            this.ⵠΔⲆΔ[4].x = this.x - 40.5;
            this.ⵠΔⲆΔ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⵠΔⲆΔ[gj].x = this.x - 20.5;
            this.ⵠΔⲆΔ[0].y = this.y - 20.5;
            this.ⵠΔⲆΔ[or].x = this.x - 35.5;
            this.ⵠΔⲆΔ[1].y = this.y + 15.5;
            this.ⵠΔⲆΔ[pn].x = this.x + 7.5;
            this.ⵠΔⲆΔ[2].y = this.y - 17;
            this.ⵠΔⲆΔ[sd].x = this.x + 22.5;
            this.ⵠΔⲆΔ[Qq].y = this.y + nt;
            this.ⵠΔⲆΔ[4].x = this.x - 7.5;
            this.ⵠΔⲆΔ[4].y = this.y + 1.5;
        }
        break;
      case iw.ΔᐃΔⲆⲆ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(vs, 1, Th, fs, 10, 10),
          ᐃᐃᐃ: false,
          angle: jg
        };
        this.ᐃⵠΔⲆ = xp;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vq, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔⲆΔⵠⵠΔⵠ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vl, ks, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case iw.ΔΔΔᐃⲆ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, Zn, 1, 0, 10, 10),
          ᐃᐃᐃ: false,
          angle: ka
        };
        this.ᐃⵠΔⲆ = Yp;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ke, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case iw.ⵠⵠⲆΔⵠ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, vg, Th, 0, Ks, ek),
          ᐃᐃᐃ: Bh,
          angle: 0
        };
        this.ᐃⵠΔⲆ = Nu;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(vs, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case iw.ᐃΔⲆⵠⲆ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Vl, 1, 1, lt, 10, 10),
          ᐃᐃᐃ: false,
          angle: 0
        };
        this.ᐃⵠΔⲆ = Ru;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case iw.ⵠⵠᐃⲆᐃ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1, 0, 10, ok),
          ᐃᐃᐃ: false,
          angle: Yl
        };
        this.ᐃⵠΔⲆ = Ep;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case iw.ⵠᐃⲆⵠⵠ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, og, 1, 0, 10, Ys),
          ᐃᐃᐃ: ro,
          angle: 0
        };
        this.ᐃⵠΔⲆ = _p;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case iw.ΔΔΔⵠΔ:
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, Th, 0, Yq, Ys),
          ᐃᐃᐃ: false,
          angle: ho
        };
        this.ᐃⵠΔⲆ = Wu;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(xl, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case iw.ⲆᐃΔᐃⲆ:
        this.ᐃⵠΔⲆ = Qp;
        this.rotate = 0;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, $r, 1, gj, 10, 10),
          ᐃᐃᐃ: As,
          angle: Ob
        };
        break;
      case iw.ⵠΔⲆⵠΔ:
        this.ᐃⵠΔⲆ = Ap;
        this.rotate = 0;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, El, El, 0, sh, Ar),
          ᐃᐃᐃ: false,
          angle: 0
        };
        break;
      case iw.ⲆⲆⵠΔⵠ:
        this.ᐃⵠΔⲆ = Kp;
        this.rotate = ou;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, bq, bt, 0, Qg, cl),
          ᐃᐃᐃ: false,
          angle: Ob
        };
        break;
      case iw.ⵠⵠⵠⵠⲆ:
        this.ᐃⵠΔⲆ = Uu;
        this.rotate = 0;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, y, 0, 10, 10),
          ᐃᐃᐃ: Va,
          angle: ks
        };
        break;
      case iw.ᐃᐃᐃΔᐃ:
        this.ᐃⵠΔⲆ = mp;
        this.rotate = Hb;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1, vl, 10, vi),
          ᐃᐃᐃ: false,
          angle: Go
        };
        break;
      case iw.ⵠᐃΔⵠΔ:
        this.ᐃᐃΔᐃᐃᐃΔ = vp;
        this.ᐃΔᐃᐃΔ = bp;
        this.rotate = 0;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Qo, 1, vg, vl, 10, 10),
          ᐃᐃᐃ: false,
          angle: vl
        };
        break;
      case iw.ⵠΔᐃΔᐃ:
        this.ᐃⵠΔⲆ = Gm;
        this.ᐃⲆΔᐃ = Math.floor(this.x / qr);
        this.ⲆΔ = Math.floor(this.y / 100);
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, bt, 0, 10, ib),
          ᐃᐃᐃ: zn,
          angle: 0
        };
        this.opacity = Zn;
        this.ΔΔⵠΔΔ = rp;
        break;
      case iw.ᐃᐃᐃⵠΔ:
        this.ᐃⵠΔⲆ = Hm;
        this.ⲆᐃΔᐃᐃ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, vg, uq, 0, 10, Hh),
          ᐃᐃᐃ: false,
          angle: Ob
        };
        break;
      case iw.ⲆⵠΔᐃΔ:
      case iw.ΔᐃⵠΔᐃ:
      case iw.ᐃΔᐃᐃᐃ:
      case iw.ⲆⵠⲆⵠᐃ:
      case iw.ⲆⲆⲆⲆⲆ:
        this.ᐃⵠΔⲆ = Zm;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ol, vg, Zk, 0, 10, Ys),
          ᐃᐃᐃ: false,
          angle: ks
        };
        break;
      case iw.ⲆⲆΔΔΔ:
        this.ᐃⵠΔⲆ = Zm;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, Zn, 1, lt, ib, 10),
          ᐃᐃᐃ: xl,
          angle: 0
        };
        this.ΔΔⵠΔΔ = rp;
        break;
      case iw.ⵠⵠⵠⵠⵠ:
      case iw.ΔᐃᐃⲆᐃ:
      case iw.ⵠΔᐃⵠᐃ:
      case iw.ᐃΔΔΔⲆ:
      case iw.ⲆᐃΔΔΔ:
      case iw.ΔΔΔⲆⵠ:
      case iw.ⲆΔΔᐃⲆ:
      case iw.ⵠᐃⲆᐃᐃ:
      case iw.ᐃΔⵠᐃᐃ:
      case iw.ⲆⵠⵠⵠΔ:
      case iw.ⲆᐃⲆᐃⲆ:
      case iw.ΔᐃⵠⲆⲆ:
        this.ᐃⵠΔⲆ = Zm;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ke, 1, 1, 0, 10, 10),
          ᐃᐃᐃ: qn,
          angle: 0
        };
        this.ΔΔⵠΔΔ = $m;
        break;
      case iw.ⵠΔⵠⵠⲆ:
        this.ᐃⵠΔⲆ = ep;
        this.opacity = Ng;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, $r, 1, 0, 10, 10),
          ᐃᐃᐃ: false,
          angle: 0
        };
        var o = this.angle % (Math.PI / pn);
        if (o < Math.PI / oo) {
          this.angle -= o;
        } else {
          this.angle += Math.PI / nl - o;
        }
        break;
      case iw.ΔᐃΔΔΔ:
        this.ᐃⵠΔⲆ = Lm;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case iw.ⵠΔΔᐃᐃᐃⵠ:
        this.ᐃⵠΔⲆ = tp;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case iw.ΔⲆⲆⲆⲆⲆⵠ:
        this.ᐃⵠΔⲆ = hp;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case iw.ⵠᐃⵠⲆᐃⲆᐃ:
        this.ᐃⵠΔⲆ = Om;
        this.angle = Math.PI * Math.random() * dj;
        break;
      case iw.ⵠⵠᐃⵠⲆᐃᐃ:
        this.ᐃⵠΔⲆ = ap;
        this.angle = Math.PI * Math.random() * it;
        break;
      case iw.ⵠⲆⲆⲆΔ:
        this.ᐃᐃᐃ = function (a) {
          this.lock = this.info & 8192 ? Zk : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ᐃⵠΔⲆ = lp;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, $q, jg, Sb, 10),
          ᐃᐃᐃ: false,
          angle: 0
        };
        this.lock = ks;
        this.ᐃᐃᐃ(this.action);
        break;
      case iw.ᐃΔᐃᐃⵠ:
      case iw.ⲆΔᐃᐃΔ:
      case iw.ⲆΔᐃⲆⲆ:
      case iw.Δᐃⵠᐃᐃ:
      case iw.ᐃⲆΔᐃⵠ:
      case iw.ⲆᐃⵠⵠΔ:
      case iw.ᐃⲆⵠᐃⲆ:
      case iw.ᐃᐃᐃΔⵠ:
      case iw.ᐃⲆΔᐃᐃ:
      case iw.ΔΔΔⵠⵠ:
      case iw.ⵠⵠΔΔΔ:
      case iw.ΔᐃΔⵠⵠ:
        this.ᐃⵠΔⲆ = Km;
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Mq, 1, 1, lt, tu, 10),
          ᐃᐃᐃ: false,
          angle: 0
        };
        this.ΔΔⵠΔΔ = $m;
        break;
      case iw.ⲆΔΔΔΔ:
        this.ᐃᐃΔᐃᐃᐃΔ = Tp;
        this.ᐃⵠΔⲆ = Qu;
        this.ᐃΔᐃᐃΔ = jp;
        this.ⵠΔⲆⲆ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(ej, Th, 1.23, 1.18, 0.02, 0.02);
        this.ⲆᐃΔᐃᐃ = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, bh, 1.23, 1.18, 0.04, 0.04);
        this.Ⲇⵠᐃⵠ = {
          ᐃⲆΔⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 1, og, ho, 10, 10),
          ᐃᐃᐃ: Vq,
          angle: 0
        };
        this.ᐃᐃᐃ = function (a) {
          this.action = a;
        };
    }
  }
  function qw() {
    Math.random();
    return "p";
  }
  function rw() {
    Math.random();
    return "n";
  }
  function qw() {
    Math.random();
    return "p";
  }
  function sw() {
    Math.random();
    return "d";
  }
  function tw() {
    Math.random();
    return "o";
  }
  function uw() {
    Math.random();
    return "i";
  }
  function vw() {
    Math.random();
    return "C";
  }
  function ww() {
    Math.random();
    return "t";
  }
  function xw() {
    Math.random();
    return "g";
  }
  function ww() {
    Math.random();
    return "t";
  }
  function yw() {
    Math.random();
    return "a";
  }
  function zw() {
    Math.random();
    return "e";
  }
  function Aw() {
    this.ⲆΔΔⵠΔ = function () { };
    this.ᐃⲆᐃΔⲆ = {
      ⵠⵠⲆΔ: 1,
      open: false,
      ⲆΔⵠᐃΔ: 1
    };
    this.Δᐃᐃᐃᐃ = {
      open: ke,
      ⲆΔⵠᐃΔ: -1,
      ⵠⵠⲆΔ: 1
    };
    this.ⵠᐃⵠΔ = {
      ⲆⵠⵠΔⵠⵠᐃ: 0,
      ⵠⵠⲆΔ: kr,
      ΔⲆΔᐃⵠⵠⵠ: 0,
      open: false,
      ⲆΔⵠᐃΔ: -1
    };
    this.ⲆⲆΔᐃ = {
      ⲆΔⵠⲆᐃᐃᐃ: dh,
      ᐃⵠⲆΔⲆΔⵠ: 0,
      type: Xa,
      ⲆᐃΔⵠΔⵠᐃ: 0,
      ⵠⵠⲆΔ: y,
      ⲆΔⵠᐃΔ: -$q,
      open: Mq
    };
    this.ᐃⵠᐃΔ = {
      ⲆΔⵠᐃΔ: -1,
      ⵠⵠⲆΔ: 1,
      ⵠᐃΔⵠⲆⵠΔ: 0,
      ⲆΔⵠⲆᐃᐃᐃ: 0,
      open: Va,
      ⲆⵠⵠΔⵠⵠᐃ: Yl
    };
    this.sign = {
      open: false,
      ⲆΔⵠᐃΔ: -1
    };
    this.ⲆⲆⲆⵠⵠ = {
      ᐃⵠⵠᐃ: Bs,
      ⵠⵠⲆΔ: 1,
      ⲆΔⵠᐃΔ: -vg,
      open: ro
    };
    this.ΔᐃΔᐃᐃ = {
      enabled: false,
      ΔⵠΔΔⵠ: -1,
      label: false,
      now: -uq,
      ᐃⵠΔⲆ: _u
    };
    this.ⲆⲆⵠⲆ = {
      id: -or,
      ᐃⵠⵠᐃ: 0,
      ⵠⵠⲆΔ: ck,
      ⲆΔⵠᐃΔ: -bh,
      open: false,
      lock: fk,
      locked: ol,
      ⵠⲆᐃᐃΔΔⵠ: false,
      ᐃⵠᐃΔΔᐃΔ: false
    };
    this.ⵠⵠᐃⲆΔ = true;
    this.reconnect = {
      rotate: ou,
      enabled: vs
    };
    this.key = ⵠⲆᐃⲆ.ⵠᐃΔⲆᐃⵠⲆ("key", Vf.location.href);
    var a = ⵠⲆᐃⲆ.ⵠᐃΔⲆᐃⵠⲆ("egg", Vf.location.href);
    if (a) {
      hf.ᐃᐃᐃⵠ = parseInt(a);
    }
    this.beta = fs === Vf.location.href.indexOf("http://starve.io/beta") ? or : 0;
    if (this.key && this.beta) {
      ᐃΔⲆΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ᐃΔⲆΔ.get("starve_beta");
    }
    this.ᐃΔⵠⵠⲆ = ᐃΔⲆΔ.get("starve_token") ? ᐃΔⲆΔ.get("starve_token") : ⵠⲆᐃⲆ.ⵠⲆᐃⵠᐃⲆΔ(bw.ⵠⵠΔⲆΔΔᐃⵠΔ);
    Vf.baguette();
    var b = Vf.kot2;
    function c() {
      this.seed = og;
      this.ᐃᐃⵠΔⲆⵠᐃ = uj;
      this.ⲆⲆΔΔΔⵠᐃ = 3;
      this.ⵠⲆⵠᐃΔΔᐃⲆⵠ = 1;
      this.ΔΔⵠᐃᐃΔΔⵠᐃ = Ls;
      this.ᐃⲆⲆᐃⵠΔᐃᐃⵠ = R;
      this.ΔᐃᐃΔⲆᐃΔ = function (a) {
        this.seed = 2 + Math.floor(fw.ⵠΔⵠⲆΔ * Math.random());
      };
      this.ⲆᐃⵠΔᐃᐃᐃ = function (a) {
        this.ᐃᐃⵠΔⲆⵠᐃ = kg + Math.floor(fw.ⵠΔⵠⲆΔ * Math.random());
      };
      this.ⲆΔΔⵠᐃⲆΔ = function (a) {
        this.ⲆⲆΔΔΔⵠᐃ = uj + Math.floor(fw.ⵠΔⵠⲆΔ * Math.random());
      };
      this.ⵠΔᐃΔⲆⲆΔⲆⲆ = function (a) {
        this.ⵠⲆⵠᐃΔΔᐃⲆⵠ = dj + Math.floor(fw.ⵠΔⵠⲆΔ * Math.random());
      };
      this.ΔⲆᐃΔⵠᐃⵠΔⵠ = function (a) {
        this.ΔΔⵠᐃᐃΔΔⵠᐃ = kg + Math.floor(Math.random() * fw.ⵠΔⵠⲆΔ);
      };
      this.ⵠⵠⲆΔΔⵠⲆᐃΔ = function (a) {
        this.ᐃⲆⲆᐃⵠΔᐃᐃⵠ = 2 + Math.floor(fw.ⵠΔⵠⲆΔ * Math.random());
      };
      this.ᐃⵠᐃᐃΔΔᐃ = function (c, d, e, f, i, j, k) {
        for (var a = 1; a < k;) {
          var m = a * e % ᐃᐃⵠᐃⵠⵠⲆ;
          var n = ΔⵠⲆᐃᐃΔⵠ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(n * f + i);
            if (a > j && a < k) {
              var p = Math.random() > 0.5 ? Cf * -10 : ib * Cf;
              var q = d * o;
              this.ⵠⵠΔᐃΔⵠΔ[m] = Math.max(-fw.ⵠⲆⲆⵠΔⲆΔ, Math.min(fw.ⵠⲆⲆⵠΔⲆΔ, this.ⵠⵠΔᐃΔⵠΔ[m] + p));
              this.ⲆⵠΔⵠⲆⵠⵠ[m] = Math.max(-fw.ⵠΔⵠᐃⵠᐃⲆ, Math.min(fw.ⵠΔⵠᐃⵠᐃⲆ, this.ⲆⵠΔⵠⲆⵠⵠ[m] + p));
              if (q > 0) {
                Lo.beginPath();
                Lo.arc(a + Sw.ᐃΔΔⵠ.x + this.ⲆⵠΔⵠⲆⵠⵠ[m], c + this.ⵠⵠΔᐃΔⵠΔ[m] - fw.ⵠⲆⲆⵠΔⲆΔ * 0.8, q, 0, Math.PI * uj);
                if (uf.transition) {
                  var r = uf.time ? or - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
                  Lo.fillStyle = Gv(83, 156, 160, 236, 247, 249, r);
                } else {
                  Lo.fillStyle = rs.ΔⲆᐃΔΔΔⵠ[uf.time];
                }
                Lo.fill();
              }
            }
            a += Ir * o;
          }
        }
      };
      this.ⲆᐃᐃⲆΔⵠⲆ = function (c, d, e, f, i, j, k) {
        for (var a = 1; k > a;) {
          var m = a * e % ᐃᐃⵠᐃⵠⵠⲆ;
          var n = ΔⵠⲆᐃᐃΔⵠ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(n * f + i);
            if (a > j && k > a) {
              var p = Math.random() > 0.5 ? Cf * -10 : Cf * Ar;
              var q = o * d;
              this.ⵠΔⵠⲆⲆ[m] = Math.max(-fw.ⵠⲆⲆⵠΔⲆΔ, Math.min(fw.ⵠⲆⲆⵠΔⲆΔ, this.ⵠΔⵠⲆⲆ[m] + p));
              this.ΔⲆᐃⲆⵠ[m] = Math.max(-fw.ⵠΔⵠᐃⵠᐃⲆ, Math.min(fw.ⵠΔⵠᐃⵠᐃⲆ, this.ΔⲆᐃⲆⵠ[m] + p));
              if (q > 0) {
                Lo.beginPath();
                Lo.arc(c + this.ⵠΔⵠⲆⲆ[m] - fw.ⵠⲆⲆⵠΔⲆΔ * 0.8, a + Sw.ᐃΔΔⵠ.y + this.ΔⲆᐃⲆⵠ[m], q, 0, Math.PI * 2);
                if (uf.transition) {
                  var r = uf.time ? 1 - uf.ΔΔⵠΔ.ⲆⵠⲆ : uf.ΔΔⵠΔ.ⲆⵠⲆ;
                  Lo.fillStyle = Gv(83, 156, 160, 236, 247, 249, r);
                } else {
                  Lo.fillStyle = rs.ΔⲆᐃΔΔΔⵠ[uf.time];
                }
                Lo.fill();
              }
            }
            a += yl * o;
          }
        }
      };
      this.ⵠᐃⲆⵠᐃⲆⲆᐃΔ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - fw.ⵠⲆᐃⲆᐃ - e - 2) / fw.ⲆᐃΔΔⵠΔᐃ;
        if (Go === h) {
          this.ⲆΔΔⵠᐃⲆΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ᐃⵠᐃᐃΔΔᐃ(d, h, this.ⲆⲆΔΔΔⵠᐃ, Qs, Bg, f, g);
        Lo.globalAlpha = Zn;
        if ((h = -(b - fw.ⵠΔⵠⲆⵠ - e + 500) / fw.ΔΔⵠᐃΔⵠⵠ) === dh) {
          this.ΔᐃᐃΔⲆᐃΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ᐃⵠᐃᐃΔΔᐃ(b, h, this.seed, Xs, sh, f, g);
        Lo.globalAlpha = $r;
        if (c !== -1) {
          if ((h = -(c - fw.Ⲇᐃⵠⵠⵠ - e + 698) / fw.ΔⵠⲆⵠⲆᐃΔ) <= 0.01) {
            this.ⲆᐃⵠΔᐃᐃᐃ();
          }
          Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
          this.ᐃⵠᐃᐃΔΔᐃ(c, h, this.ᐃᐃⵠΔⲆⵠᐃ, rt, 6, f, g);
          Lo.globalAlpha = bh;
        }
      };
      this.ΔⵠᐃⵠΔⲆᐃⲆⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + fw.ⵠⲆᐃⲆᐃ + e + Ts) / fw.ⲆᐃΔΔⵠΔᐃ) === 0) {
          this.ⲆΔΔⵠᐃⲆΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ᐃⵠᐃᐃΔΔᐃ(d, h, this.ⲆⲆΔΔΔⵠᐃ, 18, 16, f, g);
        Lo.globalAlpha = 1;
        if ((h = -(-b + fw.ⵠΔⵠⲆⵠ + e) / fw.ΔΔⵠᐃΔⵠⵠ) === 0) {
          this.ΔᐃᐃΔⲆᐃΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ᐃⵠᐃᐃΔΔᐃ(b, h, this.seed, Gq, 10, f, g);
        Lo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + fw.Ⲇᐃⵠⵠⵠ + e) / fw.ΔⵠⲆⵠⲆᐃΔ) <= 0.01) {
            this.ⲆᐃⵠΔᐃᐃᐃ();
          }
          Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
          this.ᐃⵠᐃᐃΔΔᐃ(c, h, this.ᐃᐃⵠΔⲆⵠᐃ, 6, 6, f, g);
          Lo.globalAlpha = Ws;
        }
      };
      this.ⵠⲆⵠⵠᐃᐃᐃⵠⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + fw.ⵠⲆᐃⲆᐃ + e + 2) / fw.ⲆᐃΔΔⵠΔᐃ) === 0) {
          this.ⲆΔΔⵠᐃⲆΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ⲆᐃᐃⲆΔⵠⲆ(d, h, this.ⲆⲆΔΔΔⵠᐃ, vn, pg, f, g);
        Lo.globalAlpha = Zn;
        if ((h = -(-b + fw.ⵠΔⵠⲆⵠ + e) / fw.ΔΔⵠᐃΔⵠⵠ) === 0) {
          this.ΔᐃᐃΔⲆᐃΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ⲆᐃᐃⲆΔⵠⲆ(b, h, this.seed, Xs, 10, f, g);
        Lo.globalAlpha = uq;
        if (c !== -1) {
          if ((h = -(-c + fw.Ⲇᐃⵠⵠⵠ + e) / fw.ΔⵠⲆⵠⲆᐃΔ) <= 0.01) {
            this.ⲆᐃⵠΔᐃᐃᐃ();
          }
          Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
          this.ⲆᐃᐃⲆΔⵠⲆ(c, h, this.ᐃᐃⵠΔⲆⵠᐃ, 6, 6, f, g);
          Lo.globalAlpha = bq;
        }
      };
      this.ΔᐃᐃⵠᐃᐃᐃⲆⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - fw.ⵠⲆᐃⲆᐃ - e - 2) / fw.ⲆᐃΔΔⵠΔᐃ;
        if (ou === h) {
          this.ⲆΔΔⵠᐃⲆΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ⲆᐃᐃⲆΔⵠⲆ(d, h, this.ⲆⲆΔΔΔⵠᐃ, Cs, B, f, g);
        Lo.globalAlpha = 1;
        h = -(b - fw.ⵠΔⵠⲆⵠ - e + 500) / fw.ΔΔⵠᐃΔⵠⵠ;
        if (jg === h) {
          this.ΔᐃᐃΔⲆᐃΔ();
        }
        Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
        this.ⲆᐃᐃⲆΔⵠⲆ(b, h, this.seed, 12, 10, f, g);
        Lo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - fw.Ⲇᐃⵠⵠⵠ - e + 698) / fw.ΔⵠⲆⵠⲆᐃΔ) <= 0.01) {
            this.ⲆᐃⵠΔᐃᐃᐃ();
          }
          Lo.globalAlpha = ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(h);
          this.ⲆᐃᐃⲆΔⵠⲆ(c, h, this.ᐃᐃⵠΔⲆⵠᐃ, 6, Vs, f, g);
          Lo.globalAlpha = Zk;
        }
      };
      this.w1 = {
        r: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ΔⲆᐃⵠⲆⵠⲆ, gj, 10, fw.ⲆᐃⵠΔⵠ, fw.ⲆᐃⵠΔⵠ, fw.ⲆᐃΔΔⵠΔᐃ),
        Δⵠᐃᐃ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ᐃΔⵠⲆⲆⲆⲆ, 0, Yq, fw.ⲆᐃΔΔⵠΔᐃ, fw.ⲆᐃΔΔⵠΔᐃ, fw.ⲆᐃⵠΔⵠ)
      };
      this.w2 = {
        r: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆᐃΔⵠⵠΔᐃ, fs, Sd, fw.ΔⵠΔⲆΔⲆⲆ, fw.ΔⵠΔⲆΔⲆⲆ, fw.ΔΔⵠᐃΔⵠⵠ),
        Δⵠᐃᐃ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ, Yl, jl, fw.ΔΔⵠᐃΔⵠⵠ, fw.ΔΔⵠᐃΔⵠⵠ, fw.ΔⵠΔⲆΔⲆⲆ)
      };
      this.w3 = {
        r: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⵠⲆⲆⵠⲆⵠⵠ, 0, 10, fw.ΔⲆᐃΔᐃⵠᐃ, fw.ΔⲆᐃΔᐃⵠᐃ, fw.ΔⵠⲆⵠⲆᐃΔ),
        Δⵠᐃᐃ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ, ou, vi, fw.ΔⵠⲆⵠⲆᐃΔ, fw.ΔⵠⲆⵠⲆᐃΔ, fw.ΔⲆᐃΔᐃⵠᐃ)
      };
      this.ⵠⵠⲆⲆⵠΔΔᐃⲆ = function (a) {
        if (a.r.ΔΔᐃΔᐃ === a.r.x) {
          if (a.Δⵠᐃᐃ.ΔΔᐃΔᐃ === a.Δⵠᐃᐃ.x) {
            return a.r;
          } else {
            return a.Δⵠᐃᐃ;
          }
        } else {
          return a.r;
        }
      };
      this.ⵠⲆⵠ = function (a) {
        var b;
        if (a.r.ΔΔᐃΔᐃ === a.r.x) {
          if (a.Δⵠᐃᐃ.x === a.Δⵠᐃᐃ.ΔΔᐃΔᐃ) {
            a.r.ΔΔⲆᐃΔⲆᐃ();
            a.Δⵠᐃᐃ.ΔΔⲆᐃΔⲆᐃ();
            b = a.r;
          } else {
            b = a.Δⵠᐃᐃ;
          }
        } else {
          b = a.r;
        }
        b.ⲆΔⵠⵠΔᐃᐃ(b.ΔΔᐃΔᐃ);
        return b;
      };
      this.ⵠΔⵠⲆⲆ = [];
      this.ΔⲆᐃⲆⵠ = [];
      this.ⵠⵠΔᐃΔⵠΔ = [];
      this.ⲆⵠΔⵠⲆⵠⵠ = [];
      this.ⲆΔΔⵠΔ = function () {
        for (var a = ou; ᐃᐃⵠᐃⵠⵠⲆ > a; a++) {
          this.ⵠΔⵠⲆⲆ[a] = Math.floor(fw.ⵠⲆⲆⵠΔⲆΔ * ΔⵠⲆᐃᐃΔⵠ[a]);
          this.ΔⲆᐃⲆⵠ[a] = Math.floor(ΔⵠⲆᐃᐃΔⵠ[a] * fw.ⵠΔⵠᐃⵠᐃⲆ);
          this.ⵠⵠΔᐃΔⵠΔ[a] = Math.floor(fw.ⵠⲆⲆⵠΔⲆΔ * ΔⵠⲆᐃᐃΔⵠ[a]);
          this.ⲆⵠΔⵠⲆⵠⵠ[a] = Math.floor(fw.ⵠΔⵠᐃⵠᐃⲆ * ΔⵠⲆᐃᐃΔⵠ[a]);
        }
        this.w1.r.x = this.w1.r.ΔΔᐃΔᐃ;
        this.w2.r.ⵠⲆΔⵠⵠ = 3.5;
        this.w3.r.ⵠⲆΔⵠⵠ = 2;
      };
      this.ⲆΔΔⵠΔ();
    }
    this.ᐃΔⵠⵠⲆ = b.substring(0, 6) + this.ᐃΔⵠⵠⲆ.substring(kh);
    this.ᐃⲆᐃᐃⵠⵠᐃ = ᐃΔⲆΔ.get("starve_token_id") ? ᐃΔⲆΔ.get("starve_token_id") : "";
    this.id = hk;
    this.ᐃᐃⲆΔ = Xa;
    this.ⲆⲆⲆ = 0;
    this.ᐃⲆⲆⵠᐃⵠⲆ = {
      ⵠⲆⵠᐃΔⵠΔ: Hb,
      ⲆᐃⲆⵠⲆᐃⵠ: "",
      ΔⲆⲆⲆⲆΔᐃ: 0,
      ΔΔⲆΔᐃ: 0
    };
    this.ⵠⲆΔⵠⵠᐃⵠΔⲆ = {
      connected: 0,
      ⲆᐃⲆΔⲆΔᐃ: new Date().getTime()
    };
    this.ᐃᐃⵠᐃᐃ = [];
    this.ⲆⵠⲆΔⵠⵠΔ = function (a) {
      for (var b = 0; b < this.ᐃᐃⵠᐃᐃ.length; b++) {
        if (this.ᐃᐃⵠᐃᐃ[b] == a) {
          return true;
        }
      }
      return fk;
    };
    this.ⵠᐃⲆⲆⵠ = {
      ΔⵠΔΔⵠ: 0,
      time: jg,
      value: 0,
      open: Vl,
      ᐃⵠΔⲆ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ΔⵠΔΔⵠ) / 1000);
          if (this.time < 60) {
            Uw.ⵠᐃⲆⲆⵠ.button.ᐃⵠΔⲆ(Lo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.ⲆⲆⲆᐃΔ = {
      id: -1,
      ⵠⵠⲆΔ: -Zn,
      lock: Ob,
      timeout: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0, 1, Xa, 1 / 30, 1),
      wait: false
    };
    this.ᐃΔΔⵠⲆ = {
      timeout: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, Ob, 1, Et, 1 / zq, 1),
      wait: false
    };
    this.ΔⲆⵠⲆΔ = {
      timeout: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Ag, 0, 1, 0, 1, hj),
      wait: As
    };
    this.ⲆᐃΔⲆⵠ = {
      timeout: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, Bs, 1, 0, 1 / Cg, 1),
      wait: xl
    };
    this.ᐃΔΔⵠ = new ⵠⲆᐃⲆ.Ⲇⵠⵠᐃⵠᐃᐃ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, gj, 0.4, 0, 0, Ko, eq, Ko, eq);
    this.ᐃΔΔⵠ.ΔⵠΔΔⵠ = Et;
    this.ᐃΔΔⵠ.ΔΔᐃⵠⵠΔⲆ = gj;
    this.ᐃΔΔⵠ.ᐃᐃᐃ = function () {
      if (this.ΔΔᐃⵠⵠΔⲆ > 0) {
        this.ΔΔᐃⵠⵠΔⲆ -= Cf;
      } else {
        var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
        if (!Spectator) {
          if (a) {
            this.ΔⵠΔΔⵠ = ou;
            var b = Math.max(Math.min(Ko - a.x, -2), 2 - uf.w + Oo);
            var c = Math.max(Math.min(eq - a.y, -Pn), -uf.ᐃᐃⲆ + kg + cq);
            this.ⲆΔⵠⵠΔᐃᐃ({
              x: b,
              y: c
            });
          } else {
            this.ΔⵠΔΔⵠ += Cf;
            if (this.ΔⵠΔΔⵠ > 3) {
              this.ΔⵠΔΔⵠ = 0;
              if (!Sw.reconnect.enabled) {
                ΔⵠⲆⲆ.ΔⵠⲆΔⲆᐃΔᐃᐃ();
              }
            }
          }
        }
      }
    };
    this.ᐃΔΔⵠ.w = screen.width;
    this.ᐃΔΔⵠ.ᐃᐃⲆ = screen.height;
    this.ᐃΔΔⵠ.ⲆᐃΔᐃᐃⲆΔ = this.ᐃΔΔⵠ.w;
    this.ᐃΔΔⵠ.ⲆᐃⲆΔⲆΔⵠ = this.ᐃΔΔⵠ.ᐃᐃⲆ;
    this.ᐃΔΔⵠ.rx = 0;
    this.ᐃΔΔⵠ.ry = dh;
    this.ᐃΔΔⵠ.ⲆΔᐃⵠΔⵠⵠᐃᐃ = 0;
    this.ᐃΔΔⵠ.ⵠⵠᐃⲆΔᐃⲆΔⵠ = 0;
    this.ᐃΔΔⵠ.ⵠⲆⵠΔⲆ = function (a, b) {
      this.x = -Math.min(Math.max(-uf.ᐃΔΔⲆΔⵠΔ * 2, a - uf.ᐃΔΔⲆΔⵠΔ - this.ⲆᐃΔᐃᐃⲆΔ / Pn), uf.w - this.ⲆᐃΔᐃᐃⲆΔ);
      this.y = -Math.min(Math.max(-uf.ⵠⵠⵠⲆΔⵠⵠ * kg, b - (uf.ⵠⵠⵠⲆΔⵠⵠ + this.ⲆᐃⲆΔⲆΔⵠ) / 2), uf.ᐃᐃⲆ - this.ⲆᐃⲆΔⲆΔⵠ + uf.ⵠⵠⵠⲆΔⵠⵠ);
      this.ΔΔᐃΔᐃ = this.x;
      this.ᐃΔⵠΔᐃᐃᐃ = this.y;
    };
    this.control = {
      angle: dt,
      timeout: 0,
      ⲆⲆⲆⲆΔᐃⲆ: 0,
      ΔᐃΔⵠ: Ob,
      attack: ka,
      ᐃᐃᐃ: function () {
        var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
        if (a) {
          var b = {
            x: Sw.ᐃΔΔⵠ.x + a.x,
            y: Sw.ᐃΔΔⵠ.y + a.y
          };
        } else {
          b = fq;
        }
        var c = ⵠⲆᐃⲆ.ΔⵠΔᐃᐃᐃᐃ(pf.ⵠΔᐃΔ, b);
        var d = false;
        this.ΔᐃΔⵠ += Cf;
        if (!pf.state) {
          if (a && !(a.action & _v.ⵠΔᐃᐃΔⵠᐃ) && this.ΔᐃΔⵠ > bw.ⵠΔᐃᐃΔⵠᐃ) {
            this.attack = Th;
            d = ag;
            this.ΔᐃΔⵠ = 0;
            ΔⵠⲆⲆ.ΔⵠⲆᐃΔⲆⲆⵠᐃ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⲆΔⲆᐃⵠⵠⵠ = c;
        }
        if (!d) {
          this.timeout += Cf;
          if (this.timeout > bw.ᐃᐃⲆΔᐃᐃⲆ) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              ΔⵠⲆⲆ.ΔⲆⲆΔᐃᐃⵠⲆⲆ(c);
              this.angle = c;
            }
          }
        }
        if (!Sw.ⵠⲆⵠⵠⲆ.open && !Sw.ΔᐃᐃⵠΔ.open) {
          var e = 0;
          if (mf.ᐃΔΔᐃΔᐃΔ()) {
            e |= 1;
          }
          if (mf.ΔᐃⵠⲆΔΔⲆ()) {
            e |= Ci;
          }
          if (mf.ᐃᐃᐃᐃⲆⵠⵠ()) {
            e |= 4;
          }
          if (mf.ⵠⵠⲆΔⲆⲆⲆ()) {
            e |= Nl;
          }
          if (this.ⲆⲆⲆⲆΔᐃⲆ != e) {
            ΔⵠⲆⲆ.ᐃᐃᐃΔⲆΔᐃᐃⵠ(e);
          }
          this.ⲆⲆⲆⲆΔᐃⲆ = e;
        }
      }
    };
    this.ⵠᐃⲆᐃ = {
      c: $r,
      Δⵠᐃᐃ: Th,
      ᐃᐃⲆ: Zk,
      ⵠⲆⵠ: 1,
      ᐃⵠᐃ: El,
      ᐃⵠᐃᐃⲆᐃⲆ: 1,
      ⵠⲆᐃⲆⵠⵠⲆ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(true, ka, bq, 0, 3, Kl),
      ⲆⵠᐃⵠⵠΔⵠ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Pl, ou, 1, 0, 2, 2),
      ᐃⵠΔⵠΔᐃᐃ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(yq, 0, bq, dt, Ab, 3),
      ᐃᐃᐃᐃⵠΔⵠ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(true, vl, 1, 0, 3, sd),
      ⲆⲆⵠᐃΔⵠᐃ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(true, 0, 1, 0, 3, Qh),
      ΔΔⲆⲆᐃΔΔ: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(is, 0, 1, 0, 3, 3),
      ⲆᐃᐃΔᐃ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, ks, bt, Hb, 0, og),
      ᐃⲆⵠΔᐃ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, 0, uq, Ob, 0, Zk),
      ΔᐃᐃᐃⲆⲆⲆ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, Et, 1, Hb, jg, 1),
      ΔⵠⵠⲆᐃᐃⵠ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, 0, y, Et, dh, 1),
      ΔᐃᐃΔⵠᐃⵠ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, Bs, 1, 0, 0, 1),
      ᐃᐃΔⲆᐃⵠᐃ: new ⵠⲆᐃⲆ.ΔⲆⲆΔⲆ(ⵠⲆᐃⲆ.ⲆⵠᐃΔⵠⵠΔ, 0, or, 0, ho, 1),
      ᐃᐃᐃ: function () {
        this.ⵠⲆᐃⲆⵠⵠⲆ.ᐃᐃᐃ();
        this.ⲆⵠᐃⵠⵠΔⵠ.ᐃᐃᐃ();
        this.ᐃⵠΔⵠΔᐃᐃ.ᐃᐃᐃ();
        this.ᐃᐃᐃᐃⵠΔⵠ.ᐃᐃᐃ();
        this.ⲆⲆⵠᐃΔⵠᐃ.ᐃᐃᐃ();
        this.ΔΔⲆⲆᐃΔΔ.ᐃᐃᐃ();
        this.ⲆᐃᐃΔᐃ.ⲆΔⵠⵠΔᐃᐃ(this.c);
        this.ᐃⲆⵠΔᐃ.ⲆΔⵠⵠΔᐃᐃ(this.Δⵠᐃᐃ);
        this.ΔᐃᐃᐃⲆⲆⲆ.ⲆΔⵠⵠΔᐃᐃ(this.ᐃᐃⲆ);
        this.ΔⵠⵠⲆᐃᐃⵠ.ⲆΔⵠⵠΔᐃᐃ(this.ⵠⲆⵠ);
        this.ΔᐃᐃΔⵠᐃⵠ.ⲆΔⵠⵠΔᐃᐃ(this.ᐃⵠᐃ);
        this.ᐃᐃΔⲆᐃⵠᐃ.ⲆΔⵠⵠΔᐃᐃ(this.ᐃⵠᐃᐃⲆᐃⲆ);
      }
    };
    this.ᐃⲆᐃⲆΔⵠⲆ = Vq;
    this.ᐃᐃⵠΔⵠⲆΔ = false;
    this.ⵠⲆΔᐃⲆ = false;
    this.ⵠⲆⲆⵠΔᐃᐃ = false;
    this.Δᐃⵠᐃ = {
      max: fw.ⵠⵠᐃⵠᐃᐃⵠ,
      ⲆΔⲆⵠᐃΔᐃ: 0,
      ⲆⵠⲆⲆᐃ: 0,
      ΔΔⵠⲆ: [],
      ⲆⵠⵠΔΔ: [],
      ΔᐃⵠᐃⲆᐃⵠ: function (a, b) {
        if (a === 1) {
          this.ⲆⵠⲆⲆᐃ = fw.ᐃᐃⵠⵠⵠΔΔⵠᐃ;
        }
        this.ⲆΔⲆⵠᐃΔᐃ += b;
        this.max = fw.ⵠⵠᐃⵠᐃᐃⵠ + this.ⲆΔⲆⵠᐃΔᐃ + this.ⲆⵠⲆⲆᐃ;
      },
      ΔᐃⵠΔΔᐃⵠ: {
        item: -ck,
        Δᐃ: null,
        ᐃⲆᐃⲆΔ: dt,
        ⵠᐃⲆⵠᐃΔⲆ: Bs,
        ΔΔⲆⵠⵠ: -1,
        ΔᐃΔⵠΔ: -1,
        ⵠΔᐃⲆⵠ: function (a) {
          if (!!this.ᐃⲆᐃⲆΔ && (a.x !== this.ΔΔⲆⵠⵠ || a.y !== this.ΔᐃΔⵠΔ)) {
            this.ⵠᐃⲆⵠᐃΔⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ΔΔⲆⵠⵠ = b.x;
          this.ΔᐃΔⵠΔ = b.y;
          this.item = a;
          this.Δᐃ = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ[a].info.Δᐃ[ab];
          this.ᐃⲆᐃⲆΔ = ck;
        },
        stop: function () {
          this.ᐃⲆᐃⲆΔ = 0;
          this.ⵠᐃⲆⵠᐃΔⲆ = 0;
          this.ΔΔⲆⵠⵠ = -1;
          this.ΔᐃΔⵠΔ = -uq;
        },
        release: function () {
          var a = -1;
          var b = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ;
          var c = 0;
          if (this.ᐃⲆᐃⲆΔ && this.ⵠᐃⲆⵠᐃΔⲆ) {
            for (var d = Bs; d < b.length; d++) {
              if (b[d].info.state === Pv) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Uw.ⵠᐃⵠⵠᐃΔⲆ();
            }
          }
          this.stop();
          return c;
        },
        ᐃⵠΔⲆ: function (a, b) {
          if (this.ᐃⲆᐃⲆΔ && this.ⵠᐃⲆⵠᐃΔⲆ) {
            Rm(Lo, this.Δᐃ, Math.floor(a - this.Δᐃ.width / 2), Math.floor(b - this.Δᐃ.height / 2));
          }
        }
      },
      ᐃᐃⵠᐃΔⲆⵠⲆⵠ: function (a) {
        for (d = vl; d < a.length; d++) {
          if (this.ΔΔⵠⲆ[a[d][ka]] == a[d][1]) {
            return ia;
          }
        }
        return Vq;
      },
      ᐃΔᐃⵠⲆ: function (a) {
        for (var b = 0; b < this.ⲆⵠⵠΔΔ.length; b++) {
          if (this.ⲆⵠⵠΔΔ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ᐃΔⵠⵠⲆⵠΔ: function (a, b) {
        this.ΔΔⵠⲆ[a] = vl;
        this.ⲆⵠⵠΔΔ.splice(b, 1);
        Uw.ⵠᐃⵠⵠᐃΔⲆ();
      },
      ΔⵠⲆᐃⵠΔⵠ: function (a, b, c) {
        ᐃᐃᐃ = de;
        this.ΔΔⵠⲆ[a] = Math.max(lt, this.ΔΔⵠⲆ[a] - b);
        if (!this.ΔΔⵠⲆ[a] && c >= ho) {
          this.ᐃΔⵠⵠⲆⵠΔ(a, c);
        }
      }
    };
    this.ⲆΔⲆⵠᐃⵠⵠ = {
      enabled: false,
      translate: {
        y: Xa,
        x: 0
      },
      ⵠΔᐃⲆⲆⲆΔ: function () {
        if (uf.mode == fw.ᐃΔΔⵠᐃⵠⲆ && !Sw.ᐃᐃⵠΔⵠⲆΔ) {
          Sw.ⲆΔⲆⵠᐃⵠⵠ.enabled = !Sw.ⲆΔⲆⵠᐃⵠⵠ.enabled;
          if (Sw.ⲆΔⲆⵠᐃⵠⵠ.enabled) {
            Uw.options.ⲆΔΔⵠᐃᐃΔ.display = "inline-block";
          } else {
            Uw.options.ⲆΔΔⵠᐃᐃΔ.display = "none";
          }
        }
      }
    };
    Uw.options.ⲆΔΔⵠᐃᐃΔ.display = "none";
    this.ΔⲆⵠⵠΔ = {
      enabled: Vl,
      translate: {
        x: hk,
        y: ka
      },
      ΔⵠΔΔⵠ: Et,
      ⵠΔᐃⲆⲆⲆΔ: function () {
        Sw.ΔⲆⵠⵠΔ.enabled = !Sw.ΔⲆⵠⵠΔ.enabled;
        if (Sw.ΔⲆⵠⵠΔ.enabled) {
          Uw.options.ⵠᐃᐃᐃᐃᐃⲆ.display = "inline-block";
        } else {
          Uw.options.ⵠᐃᐃᐃᐃᐃⲆ.display = "none";
        }
      },
      ᐃᐃᐃ: function () {
        if (!!this.enabled && Sw.ⵠⲆⲆΔ.id < 0 && !Uw.ⲆⲆⵠᐃ.open) {
          this.ΔⵠΔΔⵠ += Cf;
          if (this.ΔⵠΔΔⵠ > 2) {
            this.ΔⵠΔΔⵠ = 0;
            if (Sw.ⵠᐃⲆᐃ.ᐃᐃⲆ < 0.35) {
              if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⲆⲆⵠᐃᐃ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⲆⲆⵠᐃᐃ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⲆⲆⵠᐃᐃ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⵠⲆⲆᐃΔ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⵠⲆⲆᐃΔ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⵠⲆⲆᐃΔ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⵠΔᐃⵠⲆ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⵠΔᐃⵠⲆ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⵠΔᐃⵠⲆ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃⵠᐃΔΔ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃⵠᐃΔΔ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⵠᐃΔΔ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃΔⵠᐃⵠ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃΔⵠᐃⵠ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃΔⵠᐃⵠ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃⲆⵠⲆΔ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃⲆⵠⲆΔ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆⵠⲆΔ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⲆΔᐃΔᐃ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⲆΔᐃΔᐃ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⲆΔᐃΔᐃ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⲆⲆⲆⵠⲆ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⲆⲆⲆⵠⲆ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⲆⲆⲆⵠⲆ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⵠⵠⵠⵠᐃ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⵠⵠⵠⵠᐃ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⵠⵠⵠⵠᐃ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃⵠⵠΔⵠ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃⵠⵠΔⵠ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⵠⵠΔⵠ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃⵠΔᐃΔ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃⵠΔᐃΔ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⵠΔᐃΔ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.Ⲇⵠᐃᐃⵠ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.Ⲇⵠᐃᐃⵠ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.Ⲇⵠᐃᐃⵠ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃⲆⲆⵠΔ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃⲆⲆⵠΔ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆⲆⵠΔ));
              } else if (Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ᐃⲆⵠΔⵠ]) {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ᐃⲆⵠΔⵠ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ᐃⲆⵠΔⵠ));
              }
            } else if (Sw.ⵠᐃⲆᐃ.ⵠⲆⵠ < 0.35 && Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[ts.ⵠⵠⲆΔⲆ]) {
              ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(ts.ⵠⵠⲆΔⲆ, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ts.ⵠⵠⲆΔⲆ));
            }
          }
        }
      }
    };
    Uw.options.ⵠᐃᐃᐃᐃᐃⲆ.display = "none";
    this.ⵠⲆⲆΔ = {
      id: -ck,
      ΔⲆΔΔ: -Ng,
      timeout: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0, 1, 0, Ng, bh),
      ⵠΔᐃΔⵠ: ej,
      ΔΔΔΔ: -1,
      mode: 0,
      label: [],
      ⵠᐃᐃⵠⲆ: [],
      ⵠⲆⵠⲆⲆ: false,
      ⵠⲆᐃΔⵠ: qn,
      ᐃⵠⲆⵠⲆⲆⵠ: ke,
      Δᐃᐃᐃᐃ: xl,
      ⵠⵠⵠⵠⲆⲆⲆΔⲆ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ⵠⲆᐃᐃᐃⲆᐃᐃᐃ: function (a) {
        this.ⵠⲆⵠⲆⲆ = a;
        var b = Uw.ⲆⲆⵠᐃ;
        if (b.open) {
          b.ᐃⵠⵠⵠⵠᐃΔ(b.button);
        }
        this.ᐃᐃᐃ();
      },
      ΔⵠⵠⵠⵠⲆⵠᐃᐃ: function (a) {
        var b = ht[a];
        this.id = a;
        this.ⵠΔᐃΔⵠ = yq;
        uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
        this.timeout.ΔᐃΔΔⵠΔᐃ = b.time * lj;
        this.ΔⲆΔΔ = b.ΔⲆΔΔ;
      },
      ᐃᐃⲆⲆⵠⵠⲆⵠᐃ: function (a) {
        var b = ht[a];
        this.id = a;
        this.ⵠΔᐃΔⵠ = true;
        var c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
        if (c && c.right == ts.ᐃᐃⵠⵠⲆ) {
          this.timeout.ΔᐃΔΔⵠΔᐃ = b.time * 3;
        } else {
          this.timeout.ΔᐃΔΔⵠΔᐃ = b.time;
        }
        this.ΔⲆΔΔ = b.ΔⲆΔΔ;
        for (var d = Et; d < b.r.length; d++) {
          var e = b.r[d];
          Sw.Δᐃⵠᐃ.ΔⵠⲆᐃⵠΔⵠ(e[Bs], e[Ws], Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(e[0]));
        }
        Uw.ⵠᐃⵠⵠᐃΔⲆ();
      },
      ᐃᐃᐃ: function () {
        this.ⵠᐃᐃⵠⲆ = [];
        if (Uw.ᐃΔΔᐃⵠ.ⵠⲆⲆΔ === $r) {
          Uw.ᐃΔΔᐃⵠ.display = Bs;
        }
        for (var a in ht) {
          var b = ht[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Sw.Δᐃⵠᐃ.max >= fw.ⵠΔΔᐃⲆⲆΔ && b.id === ss.ⵠⵠᐃΔ) {
                c = false;
                break;
              }
              if (b.w > this.ⵠⲆⵠⲆⲆ || b.f > this.ⵠⲆᐃΔⵠ || b.ᐃⵠᐃ > this.ᐃⵠⲆⵠⲆⲆⵠ || b.e > this.Δᐃᐃᐃᐃ) {
                c = Ps;
                break;
              }
              var f = b.r[d];
              if (!Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[f[0]] || Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[f[gj]] < f[Dj]) {
                c = As;
                break;
              }
            }
            if (c) {
              this.ⵠᐃᐃⵠⲆ.push(Uw.ΔᐃΔⲆ[b.id]);
            }
          }
        }
        Uw.ᐃΔΔⵠⲆΔΔ();
        Uw.ⵠΔᐃⲆΔⵠΔ();
        Uw.ΔⲆΔⲆᐃΔᐃ();
        Uw.ᐃᐃⲆᐃⵠΔΔ();
        Uw.ⵠⵠⲆⲆΔᐃⲆ();
        Uw.ⵠⵠⵠᐃⵠⲆΔ();
        Uw.sign.ΔΔᐃΔⵠᐃⲆ();
      },
      ΔΔⲆᐃΔⲆᐃ: function () {
        this.id = -1;
        this.ⵠΔᐃΔⵠ = ol;
        this.timeout.ⲆⵠⲆ = Bs;
        this.timeout.ᐃⵠᐃ = qn;
        this.ᐃᐃᐃ();
      }
    };
    this.ⲆⲆⲆⲆΔⵠⵠ = {
      message: undefined,
      ᐃⵠΔⲆ: Zu
    };
    this.alert = {
      timeout: new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Va, kr, 1, Xa, 4, 0.3),
      text: "",
      label: null,
      ᐃⵠΔⲆ: av,
      list: []
    };
    this.ΔⲆⲆⵠᐃ = {
      ⵠⵠ: document.createElement("canvas"),
      ⵠⵠⲆᐃᐃ: [],
      ᐃᐃᐃ: Gh,
      translate: {
        y: Bs,
        x: lt
      },
      sort: function () {
        var a = [];
        for (var b = uf.ⲆᐃΔΔ, c = 0; c < b.length; c++) {
          if (b[c].ⵠⵠᐃⲆΔ) {
            a.push({
              id: c,
              ΔᐃⲆⵠ: b[c].ΔΔⲆΔᐃ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ΔᐃⲆⵠ - a.ΔᐃⲆⵠ;
        });
        this.ⵠⵠⲆᐃᐃ = [];
        for (c = Ob; c < a.length && c < 10; c++) {
          this.ⵠⵠⲆᐃᐃ.push(a[c].id);
        }
        this.ᐃᐃᐃ = Pl;
      },
      ⲆΔΔⵠΔ: function (a) {
        for (var b = uf.ⲆᐃΔΔ, c = 0; c < b.length; c++) {
          b[c].ΔΔⲆΔᐃ = 0;
        }
        b[Sw.id].ΔΔⲆΔᐃ = ⵠⲆᐃⲆ.ⵠⲆⲆᐃⵠΔΔ(a[Ws]);
        this.ⵠⵠⲆᐃᐃ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ⵠⵠⲆᐃᐃ.push(a[c]);
          b[a[c]].ΔΔⲆΔᐃ = ⵠⲆᐃⲆ.ⵠⲆⲆᐃⵠΔΔ(a[c + kr]);
        }
        this.ᐃᐃᐃ = true;
      }
    };
    this.ΔⲆⲆⵠᐃ.ⵠⵠ.width = gq * 180;
    this.ΔⲆⲆⵠᐃ.ⵠⵠ.height = gq * 300;
    this.ΔⲆⲆⵠᐃ.Δ = this.ΔⲆⲆⵠᐃ.ⵠⵠ.getContext("2d");
    this.ΔᐃᐃⵠΔ = {
      open: xl,
      input: document.getElementById("commandInput"),
      ΔⲆⲆⲆⲆⲆΔ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ΔⵠⲆⲆⵠΔᐃⵠΔ: function (a) {
        this.ΔⲆⲆⲆⲆⲆΔ.innerHTML += a;
      },
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Oo / cn - 300) + "px";
        this.style.top = Math.floor(cq / 2 - 250) + "px";
      },
      ᐃΔⵠΔⲆⵠᐃⵠᐃ: function () {
        this.ΔⲆⲆⲆⲆⲆΔ.innerHTML = "";
      },
      ⵠⲆᐃΔⲆ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ⵠΔᐃΔⲆⵠᐃ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + El) % Qq == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⵠᐃⵠᐃΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ΔⵠⲆⲆⵠΔᐃⵠΔ(f);
        this.ⲆᐃⵠΔᐃⲆⲆⵠΔ();
      },
      ⲆᐃⵠΔᐃⲆⲆⵠΔ: function () {
        this.ΔⲆⲆⲆⲆⲆΔ.scrollTop = this.ΔⲆⲆⲆⲆⲆΔ.scrollHeight;
      },
      ᐃᐃΔⲆⵠⲆⵠ: function (a) {
        switch (a) {
          case "clean":
            this.ᐃΔⵠΔⲆⵠᐃⵠᐃ();
            return yq;
          case "list":
            var b = "";
            for (var c = uf.ⲆᐃΔΔ, d = hk; d < c.length; d++) {
              var e = c[d];
              if (e.ⵠⵠᐃⲆΔ) {
                b += e.ᐃᐃⵠⲆΔ + " <span style=\"color:green\">#" + d + "</span><br />";
              }
            }
            this.ⵠᐃⵠᐃΔ("list", 1, "List all connected players", b);
            return true;
          case "weapon-list":
            this.ⵠᐃⵠᐃΔ("Weapons", uq, "List all weapons in the game", this.ⵠΔᐃΔⲆⵠᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ⵠᐃⵠᐃΔ("Tools", 1, "List all tools in the game", this.ⵠΔᐃΔⲆⵠᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ⵠᐃⵠᐃΔ("Survival Items", Ng, "List all survival items in the game", this.ⵠΔᐃΔⲆⵠᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return is;
          case "resource-list":
            this.ⵠᐃⵠᐃΔ("Resources", uq, "List all resources in the game", this.ⵠΔᐃΔⲆⵠᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ⵠᐃⵠᐃΔ("Food", 1, "List all food in the game", this.ⵠΔᐃΔⲆⵠᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return Wl;
          case "hat-list":
            this.ⵠᐃⵠᐃΔ("Hats", 1, "List all hats in the game", this.ⵠΔᐃΔⲆⵠᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return Mg;
          case "building-list":
            this.ⵠᐃⵠᐃΔ("Buildings", hj, "List all buildings in the game", this.ⵠΔᐃΔⲆⵠᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ⵠᐃⵠᐃΔ("Biomes list", 1, "List all available biomes in the game", this.ⵠΔᐃΔⲆⵠᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ⵠᐃⵠᐃΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            c = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
            d = 0;
            for (; d < c.length; d++) {
              var f = c[d];
              if (f.ⵠⵠⲆΔ === Sw.id) {
                this.ⵠᐃⵠᐃΔ("pos", Zn, "Your position is " + Math.floor(f.x / 100) + ":" + Math.floor(f.y / Wo));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ⵠᐃⵠᐃΔ("help-admin", 1, "List all available commands for admin only", this.ⵠΔᐃΔⲆⵠᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ⵠᐃⵠᐃΔ("help", 1, "List all available commands", this.ⵠΔᐃΔⲆⵠᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return is;
        }
        return false;
      },
      ΔⵠΔⵠⵠᐃᐃⲆΔ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ΔⵠⵠⲆⲆΔⵠ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ᐃᐃΔⲆⵠⲆⵠ(a)) {
            ΔⵠⲆⲆ.ⲆᐃⵠⲆΔⵠᐃⵠⵠ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ⵠⲆⵠⵠⲆ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Oo / 2 - 150) + "px";
        this.style.top = Math.floor(cq / nl + 80) + "px";
      },
      ⵠⲆᐃΔⲆ: function () {
        this.open = false;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Sw.alert.text) {
              Sw.alert.list.push(b);
            } else {
              Sw.alert.text = b;
            }
            Uw.ⵠΔᐃΔᐃⲆⲆ = jg;
          } else {
            Uw.ⵠΔᐃΔᐃⲆⲆ = 1;
          }
        }
      },
      ᐃᐃΔⲆⵠⲆⵠ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = og; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return true;
        }
        return ol;
      },
      Δᐃᐃⵠᐃ: function () {
        if (this.open) {
          this.open = zn;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ᐃᐃΔⲆⵠⲆⵠ(a)) {
              ΔⵠⲆⲆ.ᐃᐃΔᐃᐃᐃΔᐃᐃ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = eo;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ΔᐃᐃⵠⵠΔⵠ = {
      ᐃⲆⵠᐃΔ: [],
      ᐃᐃᐃ: function (a) {
        a.y += Cf * 80 * a.ΔᐃⲆⵠ;
        a.x += Cf * 80 * a.c;
        a.ᐃⲆⵠΔᐃ -= Cf / 6;
        if (a.ᐃⲆⵠΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + Cf * Ss, 1);
        } else {
          a.alpha = Math.max(a.alpha - Cf * bh, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min(rs.ⵠⲆⲆᐃᐃᐃᐃ * (Oo / 1366), rs.ⵠⲆⲆᐃᐃᐃᐃ + ok) * Math.max(Math.min(uf.ᐃΔΔⲆΔ + 1000, 3000) / 3000, 0));
        if (this.ᐃⲆⵠᐃΔ.length < b) {
          var c = Math.floor(Math.random() * rs.ᐃᐃⵠⵠᐃΔⵠ);
          var d = -Sw.ᐃΔΔⵠ.x + Math.floor(Math.random() * Sw.ᐃΔΔⵠ.w);
          var e = -Sw.ᐃΔΔⵠ.y + Math.floor(Math.random() * Sw.ᐃΔΔⵠ.ᐃᐃⲆ);
          var f = Math.random(Math.PI);
          this.ᐃⲆⵠᐃΔ.push(new lw(c, d, e, f));
        }
      }
    };
    this.ⵠΔᐃᐃⲆⵠᐃ = Et;
    this.ⵠⵠΔⲆΔ = 0;
    this.ᐃΔΔᐃⲆ = {
      ᐃⲆⵠᐃΔ: [],
      ᐃᐃᐃΔⲆ: dh,
      ΔΔᐃⲆΔ: dt,
      ᐃᐃᐃ: function (a) {
        a.y += Cf * (200 + this.ΔΔᐃⲆΔ * 800) * a.ΔᐃⲆⵠ;
        a.x += Cf * (200 + this.ΔΔᐃⲆΔ * 800) * a.c;
        a.ᐃⲆⵠΔᐃ -= Cf / iq;
        if (a.ᐃⲆⵠΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + Cf * _g, 1);
        } else {
          a.alpha = Math.max(a.alpha - Cf * 1, Bs);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔΔᐃⲆΔ + 0.1) * rs.ᐃⲆⲆᐃⵠΔⵠ * (Oo / 1366), (this.ΔΔᐃⲆΔ + 0.1) * rs.ᐃⲆⲆᐃⵠΔⵠ + 10) * Math.max(Math.min(uf.ⲆᐃⲆΔᐃ + 1000, 3000) / 3000, ka));
        if (this.ᐃⲆⵠᐃΔ.length < b) {
          var c = Math.floor(Math.random() * rs.ᐃᐃⵠⵠᐃΔⵠ);
          var d = -Sw.ᐃΔΔⵠ.x + Math.floor(Math.random() * Sw.ᐃΔΔⵠ.w);
          var e = -Sw.ᐃΔΔⵠ.y + Math.floor(Math.random() * Sw.ᐃΔΔⵠ.ᐃᐃⲆ);
          var f = Math.random(Math.PI);
          if (Sw.ᐃΔΔᐃⲆ.ᐃᐃᐃΔⲆ !== Eu) {
            d -= Sw.ᐃΔΔⵠ.w / 2;
          }
          this.ᐃⲆⵠᐃΔ.push(new lw(c, d, e, f));
        }
      }
    };
    this.ⲆⲆⲆᐃⵠ = {
      ᐃⲆⵠᐃΔ: [],
      ᐃᐃᐃΔⲆ: dt,
      ΔΔᐃⲆΔ: jg,
      ᐃᐃᐃ: function (a) {
        if (mf.ᐃᐃᐃᐃⲆⵠⵠ()) {
          a.y += Cf * a.ΔΔⲆⲆⵠ * (5.5 + this.ΔΔᐃⲆΔ * 10);
        } else {
          a.y += Cf * a.ΔΔⲆⲆⵠ * (5 + hc * this.ΔΔᐃⲆΔ);
        }
        a.ᐃⲆⵠΔᐃ -= Cf / yl;
        if (mf.ᐃΔΔᐃΔᐃΔ()) {
          a.x += Cf * (hn + this.ΔΔᐃⲆΔ * 400);
        } else if (mf.ΔᐃⵠⲆΔΔⲆ()) {
          a.x -= Cf * (130 - this.ΔΔᐃⲆΔ * 400);
        } else {
          a.x -= Cf * (30 - this.ΔΔᐃⲆΔ * 400);
        }
        if (a.ᐃⲆⵠΔᐃ > 0.2) {
          a.alpha = Math.min(a.alpha + Cf * Ui, Zk);
        } else {
          a.alpha = Math.max(a.alpha - Cf * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ΔΔᐃⲆΔ * 1.5 + 0.5) * rs.ⲆⵠⲆⵠⲆΔⵠ * (Oo / 1366), (this.ΔΔᐃⲆΔ * 1.5 + 0.5) * rs.ⲆⵠⲆⵠⲆΔⵠ + Cg) * Math.max(Math.min(uf.ᐃⵠⲆᐃᐃ + 1000, 3000) / 3000, Et));
        if (this.ᐃⲆⵠᐃΔ.length < b) {
          var c = Math.floor(Math.random() * rs.ⵠΔⲆᐃⲆᐃΔ);
          var d = -Sw.ᐃΔΔⵠ.x + Math.floor(Math.random() * Sw.ᐃΔΔⵠ.w);
          var e = -Sw.ᐃΔΔⵠ.y + Math.floor(Math.random() * 400 * gq - gq * 200);
          this.ᐃⲆⵠᐃΔ.push(new lw(c, d, e, 0));
        }
      }
    };
    this.ᐃⵠⵠΔ = [];
    for (var d = 0; d < Dl; d++) {
      this.ᐃⵠⵠΔ.push(new c());
    }
  }
  function tw() {
    Math.random();
    return "o";
  }
  function yw() {
    Math.random();
    return "a";
  }
  function Bw() {
    Math.random();
    return "r";
  }
  function Cw() {
    Math.random();
    return "s";
  }
  ⵠᐃⲆⲆΔⲆᐃᐃᐃ = 1;
  setTimeout(function a() {
    var b = rw() + yw() + ww() + uw();
    var c = function () {
      Math.random();
      return "W";
    }() + zw() + function () {
      Math.random();
      return "b";
    }() + (Math.random(), "S") + tw() + function () {
      Math.random();
      return "c";
    }() + (Math.random(), "k") + zw() + ww();
    if (Vf[c].toString().indexOf(b) === -bh) {
      Math.floor = function () {
        return Math.round() + hj;
      };
    }
    var d = Cw() + zw() + rw() + sw();
    var e = qw() + Bw() + tw() + ww() + tw() + ww() + (Math.random(), "y") + qw() + zw();
    if (Vf[c][e][d].toString().indexOf(b) === -Dj) {
      Math.floor = function () {
        return Math.round() + ck;
      };
    }
    c = sw() + Bw() + yw() + (Math.random(), "w") + (Math.random(), "I") + (Math.random(), "m") + yw() + xw() + zw();
    d = vw() + yw() + rw() + (Math.random(), "v") + yw() + Cw() + function () {
      Math.random();
      return "R";
    }() + zw() + rw() + sw() + zw() + Bw() + uw() + rw() + xw() + vw() + tw() + rw() + ww() + zw() + function () {
      Math.random();
      return "x";
    }() + ww() + (Math.random(), "2") + (Math.random(), "D");
    if (Vf[d][e][c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + Dj;
      };
    }
    setTimeout(a, 100000);
  }, 100000);
  function Dw() {
    ⵠⲆᐃⲆ.ΔΔⵠᐃⵠⲆᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Ew(e, h) {
    this.ⵠⵠ = e;
    this.Δ = h;
    if (Vf.navigator.userAgent.indexOf("Edge") > -Zk) {
      this.ⲆᐃΔⵠΔⲆⵠ = "default";
      this.ⲆᐃⲆⲆⵠΔᐃ = "pointer";
    } else {
      this.ⲆᐃΔⵠΔⲆⵠ = "url('img/cursor0.png'), default";
      this.ⲆᐃⲆⲆⵠΔᐃ = "url('img/cursor1.png'), pointer";
    }
    var w = this;
    function i(c, d, e, f, i) {
      var j = this;
      for (var m = d + pq, n = Bs, a = f, o = d; m > o; o++) {
        w.buttons[o].info.callback = p;
        w.buttons[o].info.ΔⵠⵠⲆᐃⵠⲆΔⲆ = c;
      }
      function p() {
        if (this.ᐃⲆⵠⲆᐃⲆᐃ !== a && -vg !== this.ᐃⲆⵠⲆᐃⲆᐃ) {
          if (this.ΔΔⵠⵠᐃᐃΔ > 0) {
            if (ᐃⲆᐃᐃⲆⵠⵠ === d) {
              H(A, ha, "none");
            } else {
              H(k, ha, "none");
            }
          } else if (ᐃⲆᐃᐃⲆⵠⵠ === d) {
            H(A, ia, "inline-block");
          } else {
            H(k, ia, "inline-block");
          }
          a = this.ᐃⲆⵠⲆᐃⲆᐃ;
          e(this.ᐃⲆⵠⲆᐃⲆᐃ);
          q();
        }
      }
      function q() {
        var b = c[a];
        hf.ΔⲆⲆᐃⲆΔᐃ = Uv(b.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, yg);
        if (oh !== b.level) {
          hf.ΔⵠⵠᐃᐃⵠΔ = Uv("Level " + b.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        } else {
          hf.ΔⵠⵠᐃᐃⵠΔ = Uv("by " + b.ⲆᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, Ys, 8);
        }
      }
      this.ΔⲆⵠⲆΔᐃⵠ = function () {
        for (var b = d, e = n * 3; m > b && c.length > e; b++, e++) {
          if (ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ !== c[e].ΔᐃⲆ || i[e] !== 0) {
            w.buttons[b].info.ᐃⲆⵠⲆᐃⲆᐃ = e;
            for (var f = 0; Ds > f; f++) {
              w.buttons[b].info.Δᐃ[f] = ᐃᐃΔⵠᐃⵠⲆ[c[e].ΔᐃⲆ][f];
              w.buttons[b].info.active = ia;
              w.buttons[b].info.ΔΔⵠⵠᐃᐃΔ = i[e];
            }
          } else {
            w.buttons[b].info.ᐃⲆⵠⲆᐃⲆᐃ = -1;
            w.buttons[b].info.active = ha;
          }
        }
        for (; m > b; b++) {
          w.buttons[b].info.ᐃⲆⵠⲆᐃⲆᐃ = -1;
          w.buttons[b].info.active = ha;
        }
        q();
      };
      w.buttons[m].info.callback = function () {
        if (n > 0) {
          n--;
        }
        j.ΔⲆⵠⲆΔᐃⵠ();
      };
      w.buttons[m + vg].info.callback = function () {
        if (n * 3 + 9 < c.length) {
          n++;
        }
        j.ΔⲆⵠⲆΔᐃⵠ();
      };
    }
    function n() {
      var b = Number(ᐃΔⲆΔ.get("starve_crate"));
      var c = Number(ᐃΔⲆΔ.get("starve_dead"));
      var d = Number(ᐃΔⲆΔ.get("starve_book"));
      var e = Number(ᐃΔⲆΔ.get("starve_bag"));
      var f = Number(ᐃΔⲆΔ.get("starve_skin"));
      var g = Number(ᐃΔⲆΔ.get("starve_accessory"));
      w.ᐃᐃᐃⵠ = f || lt;
      w.ᐃⲆⲆΔΔ = d || Bs;
      w.ᐃⲆΔᐃΔ = b || 1;
      w.ⲆⲆⵠⲆⲆ = g || 0;
      w.ⲆⵠⲆⲆᐃ = e || gj;
      w.ⵠΔᐃΔΔ = c || 0;
    }
    function l() {
      for (var a = ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ, b = 0; a.length > b; b++) {
        if (a[b].ΔᐃⲆ === ΔΔΔ.ⵠᐃⲆᐃΔ) {
          w.unlock.ᐃᐃᐃⵠ[b] = 1;
        } else {
          w.unlock.ᐃᐃᐃⵠ[b] = fs;
        }
      }
      a = ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ΔᐃⲆ === ΔΔΔ.ⵠᐃⲆᐃΔ) {
          w.unlock.ⲆⲆⵠⲆⲆ[b] = Ng;
        } else {
          w.unlock.ⲆⲆⵠⲆⲆ[b] = dh;
        }
      }
      a = ⵠᐃⵠᐃ.ⵠⵠᐃΔ;
      b = dh;
      for (; a.length > b; b++) {
        if (a[b].ΔᐃⲆ === ΔΔΔ.ⵠᐃⲆᐃΔ) {
          w.unlock.ⲆⵠⲆⲆᐃ[b] = Th;
        } else {
          w.unlock.ⲆⵠⲆⲆᐃ[b] = 0;
        }
      }
      a = ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ;
      b = Ob;
      for (; b < a.length; b++) {
        if (ΔΔΔ.ⵠᐃⲆᐃΔ === a[b].ΔᐃⲆ) {
          w.unlock.ᐃⲆⲆΔΔ[b] = 1;
        } else {
          w.unlock.ᐃⲆⲆΔΔ[b] = 0;
        }
      }
      a = ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (ΔΔΔ.ⵠᐃⲆᐃΔ === a[b].ΔᐃⲆ) {
          w.unlock.ᐃⲆΔᐃΔ[b] = 1;
          w.unlock.ⵠΔᐃΔΔ[b] = 1;
        } else {
          w.unlock.ᐃⲆΔᐃΔ[b] = 0;
          w.unlock.ⵠΔᐃΔΔ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ᐃⵠΔⲆᐃⲆⲆ = 0;
    this.ⵠΔⵠᐃⲆⵠᐃ = -bh;
    this.ⲆⲆΔⲆⲆⲆᐃ = {
      translate: {
        y: ks,
        x: 0
      },
      angle: Ob,
      Δᐃ: ⵠᐃ[rs.ΔⵠⵠⵠⵠⵠⲆ],
      ᐃⵠΔⲆ: function () {
        this.angle += Cf * Ts;
        h.save();
        h.translate(this.translate.x + this.Δᐃ.width / 2, this.translate.y + this.Δᐃ.height / 2);
        h.rotate(this.angle);
        Rm(h, this.Δᐃ, -this.Δᐃ.width / 2, -this.Δᐃ.height / Xj);
        h.restore();
      }
    };
    this.ⵠⲆⲆⵠᐃⲆΔ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        x: Bs,
        y: Ob
      },
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃⵠⲆⵠΔ = 0;
    this.ᐃⲆᐃⵠⵠᐃⵠ = -1;
    this.ᐃⲆⵠΔΔⲆⵠ = undefined;
    this.ΔΔᐃⵠᐃⵠⵠ = "";
    this.ⲆⵠΔⵠⲆⲆⵠ = "";
    this.ⵠⲆΔⵠⵠΔᐃ = undefined;
    this.ⲆΔⵠΔⵠ = 0;
    this.ᐃᐃΔⲆΔᐃΔ = -kr;
    this.ⲆᐃΔᐃΔⵠⵠ = Sn;
    this.ⵠⲆᐃⲆⵠΔᐃ = 0;
    this.ⵠᐃᐃᐃᐃᐃⵠ = 0;
    this.ⲆⲆⵠΔᐃⵠⵠ = 0;
    this.ΔⲆⲆⲆⲆΔᐃ = vl;
    this.ᐃⵠᐃⵠⵠⵠⵠ = 0;
    this.time = 0;
    this.ΔΔⲆΔᐃ = ho;
    this.ⲆⲆⲆⵠᐃⵠⲆ = fs;
    this.ΔΔΔⵠⵠⲆᐃ = Eu;
    this.ᐃⵠⲆⵠᐃᐃΔ = Bs;
    this.ⲆⲆⲆⲆⵠⵠⵠ = 0;
    this.ⵠΔⵠᐃⲆⵠⲆ = [];
    this.ⵠⵠᐃΔⵠ = -1;
    this.ⵠᐃᐃΔᐃΔᐃ = -1;
    this.ⵠᐃᐃΔⵠⵠⲆ = -1;
    this.ΔΔΔΔⵠⲆⵠ = wl;
    this.ᐃΔᐃⵠᐃⲆⲆ = Zr;
    this.ᐃⵠΔⵠᐃᐃΔ = -1;
    this.ⲆΔΔⲆᐃᐃΔ = -uq;
    this.ᐃᐃⲆⲆⵠⵠⲆ = -bh;
    this.ᐃΔᐃⲆⵠⲆΔ = -bq;
    this.ᐃⲆᐃΔᐃⵠΔ = undefined;
    this.ⲆᐃⵠⵠⵠⵠΔ = undefined;
    this.ΔⲆⵠⵠⲆᐃⲆ = undefined;
    this.ΔⲆⲆᐃⲆΔᐃ = fn;
    this.ΔⵠⵠᐃᐃⵠΔ = oh;
    this.ⵠⵠⵠⲆⲆΔⵠ = wl;
    this.ⲆⲆⲆⵠⵠⲆᐃ = Ji;
    this.ⵠⲆⵠⵠΔΔᐃ = Pr;
    this.ᐃΔΔⲆⵠΔᐃ = Hi;
    this.ⲆᐃⲆⲆΔⵠΔ = Ab;
    this.ⲆΔᐃⵠ = 0;
    this.ⲆᐃⵠᐃᐃᐃⵠᐃΔ = false;
    this.ⵠⵠᐃΔΔ = ᐃΔⲆΔ.get("starve_quality") ? ᐃΔⲆΔ.get("starve_quality") : "high";
    if (this.ⵠⵠᐃΔΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⵠᐃΔΔ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⵠᐃΔΔ = 0;
    }
    this.ⲆⲆΔΔⲆᐃⵠⲆΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔⲆΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Uw.ᐃΔⲆⵠⲆⵠⵠ();
      hf.ⵠⵠᐃΔΔ = uq;
    };
    this.ⲆΔⵠΔⵠΔⲆΔᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ᐃΔⲆΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (Er / Fr);
      Uw.ᐃΔⲆⵠⲆⵠⵠ();
      hf.ⵠⵠᐃΔΔ = Xa;
    };
    if (Pr === ᐃΔⲆΔ.get("starve_mapping") && Qr === "FR") {
      mf.ⵠᐃΔⵠⵠⵠΔ();
      this.mapping = "azerty";
    } else {
      this.mapping = ᐃΔⲆΔ.get("starve_mapping") ? ᐃΔⲆΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      mf.ⵠᐃΔⵠⵠⵠΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⵠᐃΔⵠⵠⵠΔ = function () {
      mf.ⵠᐃΔⵠⵠⵠΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ᐃΔⲆΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠΔΔΔΔΔⲆ = function () {
      mf.ⵠΔΔΔΔΔⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ᐃΔⲆΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ᐃΔⵠⲆΔⵠⵠ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: ka,
        y: 0
      },
      ᐃᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ᐃᐃᐃⵠ = [];
    this.unlock.ⲆⵠⲆⲆᐃ = [];
    this.unlock.ᐃⲆⲆΔΔ = [];
    this.unlock.ᐃⲆΔᐃΔ = [];
    this.unlock.ⵠΔᐃΔΔ = [];
    this.unlock.ⲆⲆⵠⲆⲆ = [];
    this.ⵠⵠⵠⲆⲆᐃΔ = 0;
    this.ᐃⵠⵠⵠⵠΔᐃ = l;
    l();
    this.ⲆⵠⲆⵠΔ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: 0,
        y: hk
      },
      ᐃᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var a;
    var o = Hb;
    function r() {
      w.ᐃᐃᐃ();
      if (++o == 30) {
        w.ⵠΔⲆΔΔᐃⲆ();
        w.ᐃⵠΔⲆᐃⲆⲆ = is;
        w.ᐃᐃᐃ();
        return;
      }
      Vf.setTimeout(r, 33);
    }
    this.ⵠⲆᐃΔⲆ = function (c) {
      a = c;
      w.ⵠΔⲆᐃᐃΔⲆ();
      w.ᐃⵠΔⲆᐃⲆⲆ = gj;
      b = -1;
      s();
    };
    var b = -Ng;
    function s() {
      w.ᐃᐃᐃ();
      if (++b == 30) {
        ᐃΔⲆΔ.set("starve_nickname", w.ᐃᐃⵠⲆΔ.input.value, {
          expires: 30
        });
        w.ᐃᐃⵠⲆΔ.style.display = "none";
        w.ᐃᐃⵠⲆⵠ.style.display = "none";
        w.ⵠⲆⲆⵠᐃⲆΔ.style.display = "none";
        w.ᐃΔⵠⲆΔⵠⵠ.style.display = "none";
        w.ⲆⵠⲆⵠΔ.style.display = "none";
        w.stop();
        a();
        return;
      }
      Vf.setTimeout(s, 33);
    }
    this.ⵠΔΔⲆⲆ = Vq;
    this.stop = function () {
      this.ⵠΔΔⲆⲆ = qn;
    };
    this.Δᐃᐃⵠᐃ = function () {
      Yw();
      document.getElementById("game_body").style.backgroundColor = rs.ⲆᐃᐃᐃⲆ[Rw.time];
      w.ᐃᐃⵠⲆΔ.style.display = "inline-block";
      w.ᐃᐃⵠⲆⵠ.style.display = "inline-block";
      w.ⵠⲆⲆⵠᐃⲆΔ.style.display = "inline-block";
      w.ᐃΔⵠⲆΔⵠⵠ.style.display = "inline-block";
      w.ⲆⵠⲆⵠΔ.style.display = "inline-block";
      w.waiting = false;
      w.ⵠΔΔⲆⲆ = yq;
      b = -bh;
      o = 0;
      r();
    };
    this.ᐃΔΔⵠᐃΔΔ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & da) === da) {
        if ((a.position & _) === _) {
          a.translate.x = Ko + a.translate.ΔΔⲆⵠⵠ - b;
        } else if (aa === (a.position & aa)) {
          a.translate.x = Ko + a.translate.ΔΔⲆⵠⵠ + b;
        } else {
          a.translate.x = Ko + a.translate.ΔΔⲆⵠⵠ;
        }
      } else if (_ === (a.position & _)) {
        a.translate.x = a.translate.ΔΔⲆⵠⵠ - b;
      } else if (aa === (a.position & aa)) {
        a.translate.x = Oo - a.translate.ΔΔⲆⵠⵠ + b;
      } else {
        a.translate.x = a.translate.ΔΔⲆⵠⵠ;
      }
      if (ea === (a.position & ea)) {
        if (ba === (a.position & ba)) {
          a.translate.y = eq + a.translate.ΔᐃΔⵠΔ - b;
        } else if (ca === (a.position & ca)) {
          a.translate.y = eq + a.translate.ΔᐃΔⵠΔ + b;
        } else {
          a.translate.y = eq + a.translate.ΔᐃΔⵠΔ;
        }
      } else if ((a.position & ba) === ba) {
        a.translate.y = a.translate.ΔᐃΔⵠΔ - b;
      } else if (ca === (a.position & ca)) {
        a.translate.y = cq + a.translate.ΔᐃΔⵠΔ + b;
      } else {
        a.translate.y = a.translate.ΔᐃΔⵠΔ;
      }
      if (a.style !== pa) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃᐃᐃ = function () {
      var a = 0;
      if (o != 30 || b != -1) {
        if (o != 30) {
          a = 1500 / (o + Zn) - 50;
        }
        if (b != -Th) {
          a = -(1750 / (30 - b + 1) - 48);
        }
      }
      for (var c = Xa; c < this.ⵠΔΔⵠ.length; c++) {
        this.ᐃΔΔⵠᐃΔΔ(this.ⵠΔΔⵠ[c], a);
      }
      for (c = 0; this.buttons.length > c; c++) {
        this.ᐃΔΔⵠᐃΔΔ(this.buttons[c].info, a);
      }
      for (c = 0; this.ᐃΔⲆΔⵠ.length > c; c++) {
        this.ᐃΔΔⵠᐃΔΔ(this.ᐃΔⲆΔⵠ[c], a);
      }
      this.ⲆⲆΔⲆⲆⲆᐃ.translate.x = (Oo - this.ⲆⲆΔⲆⲆⲆᐃ.Δᐃ.width) / Ir;
      this.ⲆⲆΔⲆⲆⲆᐃ.translate.y = Hb;
      this.ⵠⲆⲆⵠᐃⲆΔ.translate.x = Oo - 450;
      this.ⵠⲆⲆⵠᐃⲆΔ.translate.y = cq - 40;
      this.ᐃΔⵠⲆΔⵠⵠ.translate.x = Oo - 340;
      this.ᐃΔⵠⲆΔⵠⵠ.translate.y = cq - 25;
      this.ⲆⵠⲆⵠΔ.translate.x = Oo - 320;
      this.ⲆⵠⲆⵠΔ.translate.y = 80;
      if (o != 30 || b != -og) {
        var d = Bs;
        if (o != 30) {
          d = 1500 / (o + y) - 50;
        }
        if (b != -1) {
          d = -(1750 / (30 - b + 1) - 48);
        }
        this.ⲆⲆΔⲆⲆⲆᐃ.translate.y -= d > hk ? d : -d;
        this.ⵠⲆⲆⵠᐃⲆΔ.translate.y -= Hb > d ? d : -d;
        this.ᐃΔⵠⲆΔⵠⵠ.translate.y -= d < ka ? d : -d;
      }
      this.ⵠⲆⲆⵠᐃⲆΔ.ᐃᐃᐃ();
      this.ᐃΔⵠⲆΔⵠⵠ.ᐃᐃᐃ();
      this.ⲆⵠⲆⵠΔ.ᐃᐃᐃ();
    };
    this.ⵠⲆΔᐃⲆΔⲆ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = ho; f < b.length; f++) {
        var g = b[f][Hb];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, ke);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔᐃⲆᐃⵠΔⲆᐃΔ = function () {
      this.ΔΔᐃⵠᐃⵠⵠ = document.getElementById("account_nickname_input").value;
      if (this.ⲆⵠΔⵠⲆⲆⵠ !== this.ΔΔᐃⵠᐃⵠⵠ) {
        this.ⲆⵠΔⵠⲆⲆⵠ = this.ΔΔᐃⵠᐃⵠⵠ;
        this.ⵠⲆΔⵠⵠΔᐃ = Uv(this.ΔΔᐃⵠᐃⵠⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ᐃⵠΔⲆ = function () {
      sm();
      hf.ⵠⲆᐃⲆⵠΔᐃ = ⵠⲆᐃⲆ.ᐃΔⲆΔⵠᐃΔ(hf.ⵠⲆᐃⲆⵠΔᐃ, hf.ⵠᐃᐃᐃᐃᐃⵠ, 0.03);
      this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ].translate.x = this.ⵠΔΔⵠ[Xa].translate.x + -72 + hf.ⵠⲆᐃⲆⵠΔᐃ * 165;
      this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ].translate.ΔΔⲆⵠⵠ = this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ].translate.x;
      this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ].translate.y = this.ⵠΔΔⵠ[dh].translate.y + 30;
      this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ].translate.ΔᐃΔⵠΔ = this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ].translate.y;
      for (var n = 2; n < this.ⵠΔΔⵠ.length; n++) {
        if (ia === this.ⵠΔΔⵠ[n].active) {
          this.ⵠΔΔⵠ[n].ᐃⵠΔⲆ(h);
        }
      }
      if ((Y = this.ⵠⵠᐃΔⵠ - Date.now()) > 0) {
        var H = Math.floor(Y / 60000);
        var P = Math.floor(H / 60);
        H %= 60;
        if (this.ⵠᐃᐃΔⵠⵠⲆ !== H) {
          this.ⵠᐃᐃΔⵠⵠⲆ = H;
          H = H < 10 ? "0" + H : "" + H;
          w.ΔΔΔΔⵠⲆⵠ = Uv(H, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠᐃᐃΔᐃΔᐃ !== P) {
          this.ⵠᐃᐃΔᐃΔᐃ = P;
          P = Sb > P ? "0" + P : "" + P;
          w.ᐃΔᐃⵠᐃⲆⲆ = Uv(P, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (Z = this.ⵠΔΔⵠ[ⵠᐃⲆⲆᐃᐃΔ]).ᐃⵠΔⲆ(h);
        var V = this.ᐃΔᐃⵠᐃⲆⲆ;
        Rm(h, V, Z.translate.x - V.width / 4 + 182, Z.translate.y - V.height / 4 + 40, V.width / 2, V.height / it);
        V = this.ΔΔΔΔⵠⲆⵠ;
        Rm(h, V, Z.translate.x - V.width / Ah + 251, Z.translate.y - V.height / Yr + 40, V.width / ab, V.height / yl);
      }
      var Y = this.ᐃⵠΔⵠᐃᐃΔ - Date.now();
      if (ks < Y) {
        H = Math.floor(Y / 60000);
        P = Math.floor(H / 60);
        var Z;
        var _ = Math.floor(P / 24);
        H %= 60;
        P %= 24;
        if (this.ᐃΔᐃⲆⵠⲆΔ !== H) {
          this.ᐃΔᐃⲆⵠⲆΔ = H;
          H = sh > H ? "0" + H : "" + H;
          w.ᐃⲆᐃΔᐃⵠΔ = Uv(H, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (P !== this.ᐃᐃⲆⲆⵠⵠⲆ) {
          this.ᐃᐃⲆⲆⵠⵠⲆ = P;
          P = P < 10 ? "0" + P : "" + P;
          w.ⲆᐃⵠⵠⵠⵠΔ = Uv(P, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⲆΔΔⲆᐃᐃΔ !== _) {
          this.ⲆΔΔⲆᐃᐃΔ = _;
          _ = _ < 10 ? "0" + _ : "" + _;
          w.ΔⲆⵠⵠⲆᐃⲆ = Uv(_, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (Z = this.ⵠΔΔⵠ[ⵠΔⲆⲆᐃᐃᐃ]).ᐃⵠΔⲆ(h);
        V = this.ΔⲆⵠⵠⲆᐃⲆ;
        Rm(h, V, Z.translate.x - V.width / 4 + 113, Z.translate.y - V.height / Fl + 40, V.width / nl, V.height / 2);
        V = this.ⲆᐃⵠⵠⵠⵠΔ;
        Rm(h, V, Z.translate.x - V.width / mi + 182, Z.translate.y - V.height / 4 + 40, V.width / 2, V.height / nl);
        V = this.ᐃⲆᐃΔᐃⵠΔ;
        Rm(h, V, Z.translate.x - V.width / 4 + 251, Z.translate.y - V.height / 4 + 40, V.width / Ls, V.height / 2);
      }
      if (t === (this.ⵠⵠⲆⵠⲆ & t)) {
        this.buttons[ΔΔΔⲆⵠᐃⲆ].info.state = Qv;
      } else if (X === (this.ⵠⵠⲆⵠⲆ & X)) {
        this.buttons[ΔⲆᐃΔᐃⲆⵠ].info.state = Qv;
      } else if ((this.ⵠⵠⲆⵠⲆ & U) === U) {
        this.buttons[ⵠΔΔᐃΔⵠΔ].info.state = Qv;
      } else if (m === (this.ⵠⵠⲆⵠⲆ & m)) {
        this.buttons[ⲆⵠⲆⲆΔᐃⵠ].info.state = Qv;
      } else if (z === (this.ⵠⵠⲆⵠⲆ & z)) {
        this.buttons[ⲆⲆⲆⲆΔΔΔ].info.state = Qv;
      } else if (p === (this.ⵠⵠⲆⵠⲆ & p)) {
        this.buttons[ᐃᐃᐃⵠⲆᐃⵠ].info.state = Qv;
      } else if ((this.ⵠⵠⲆⵠⲆ & f) === f || (this.ⵠⵠⲆⵠⲆ & x) === x || J === (this.ⵠⵠⲆⵠⲆ & J) || M === (this.ⵠⵠⲆⵠⲆ & M) || B === (this.ⵠⵠⲆⵠⲆ & B) || D === (this.ⵠⵠⲆⵠⲆ & D) || (this.ⵠⵠⲆⵠⲆ & E) === E) {
        this.buttons[ΔΔᐃΔΔⵠⲆ].info.state = Qv;
      } else if ((this.ⵠⵠⲆⵠⲆ & I) === I || Q === (this.ⵠⵠⲆⵠⲆ & Q) || (this.ⵠⵠⲆⵠⲆ & S) === S || F === (this.ⵠⵠⲆⵠⲆ & F) || (this.ⵠⵠⲆⵠⲆ & R) === R || (this.ⵠⵠⲆⵠⲆ & j) === j) {
        this.buttons[ⵠΔΔᐃΔⵠΔ].info.state = Qv;
      } else if (W === (this.ⵠⵠⲆⵠⲆ & W) || (this.ⵠⵠⲆⵠⲆ & O) === O || N === (this.ⵠⵠⲆⵠⲆ & N)) {
        this.buttons[ᐃⲆⲆⲆⵠⵠⲆ].info.state = Qv;
      } else if ((this.ⵠⵠⲆⵠⲆ & q) === q) {
        this.buttons[ⲆⵠⲆⲆΔᐃⵠ].info.state = Qv;
      }
      if (X === (this.ⵠⵠⲆⵠⲆ & X)) {
        if (this.ΔᐃⵠΔΔⲆΔ === this.ⲆⲆⲆⵠⵠⲆᐃ) {
          this.ⵠⵠⵠⲆⲆΔⵠ = this.ᐃΔⵠᐃᐃⲆⲆ;
          this.buttons[this.ᐃΔⵠᐃᐃⲆⲆ].info.active = ha;
          this.buttons[this.ΔΔᐃΔΔⵠᐃ].info.active = ha;
          this.buttons[this.ⵠⲆΔΔⵠⲆⵠ].info.active = ha;
        } else {
          this.buttons[this.ᐃΔⵠᐃᐃⲆⲆ].info.active = ia;
          this.buttons[this.ΔΔᐃΔΔⵠᐃ].info.active = ia;
          this.buttons[this.ⵠⲆΔΔⵠⲆⵠ].info.active = ia;
        }
        if (this.ⲆⲆⲆΔⵠⲆᐃ === this.ⲆⲆⲆⵠⵠⲆᐃ) {
          this.buttons[this.ⲆⲆⲆΔⵠⲆᐃ].info.state = Qv;
        } else if (this.ⲆⲆⲆⵠⵠⲆᐃ === this.ᐃᐃΔᐃᐃΔⵠ) {
          this.buttons[this.ᐃᐃΔᐃᐃΔⵠ].info.state = Qv;
        } else if (this.ⲆⲆⲆⵠⵠⲆᐃ === this.ΔᐃⵠΔΔⲆΔ) {
          this.buttons[this.ΔᐃⵠΔΔⲆΔ].info.state = Qv;
        } else if (this.ⲆΔⵠᐃⵠᐃⵠ === this.ⲆⲆⲆⵠⵠⲆᐃ) {
          this.buttons[this.ⲆΔⵠᐃⵠᐃⵠ].info.state = Qv;
        } else if (this.ᐃⵠΔⲆⲆⵠⵠ === this.ⲆⲆⲆⵠⵠⲆᐃ) {
          this.buttons[this.ᐃⵠΔⲆⲆⵠⵠ].info.state = Qv;
        }
        if (this.ⵠⵠⵠⲆⲆΔⵠ === this.ᐃΔⵠᐃᐃⲆⲆ) {
          this.buttons[this.ᐃΔⵠᐃᐃⲆⲆ].info.state = Qv;
        } else if (this.ΔΔᐃΔΔⵠᐃ === this.ⵠⵠⵠⲆⲆΔⵠ) {
          this.buttons[this.ΔΔᐃΔΔⵠᐃ].info.state = Qv;
        } else if (this.ⵠⲆΔΔⵠⲆⵠ === this.ⵠⵠⵠⲆⲆΔⵠ) {
          this.buttons[this.ⵠⲆΔΔⵠⲆⵠ].info.state = Qv;
        }
        if (this.ⵠⲆⵠⵠΔΔᐃ === this.ⲆΔΔΔᐃⲆⵠ) {
          this.buttons[this.ⲆΔΔΔᐃⲆⵠ].info.state = Qv;
        } else if (this.ⵠⲆⵠⵠΔΔᐃ === this.ⲆᐃΔⲆᐃⵠⲆ) {
          this.buttons[this.ⲆᐃΔⲆᐃⵠⲆ].info.state = Qv;
        } else if (this.ⲆᐃⵠᐃⵠⵠΔ === this.ⵠⲆⵠⵠΔΔᐃ) {
          this.buttons[this.ⲆᐃⵠᐃⵠⵠΔ].info.state = Qv;
        }
        if (this.ᐃⵠΔᐃⵠⲆⵠ === this.ᐃΔΔⲆⵠΔᐃ) {
          this.buttons[this.ᐃⵠΔᐃⵠⲆⵠ].info.state = Qv;
        } else if (this.ᐃΔΔⲆⵠΔᐃ === this.ᐃⵠⲆⲆⵠⵠⲆ) {
          this.buttons[this.ᐃⵠⲆⲆⵠⵠⲆ].info.state = Qv;
        } else if (this.ΔΔΔⵠᐃᐃᐃ === this.ᐃΔΔⲆⵠΔᐃ) {
          this.buttons[this.ΔΔΔⵠᐃᐃᐃ].info.state = Qv;
        } else if (this.ᐃΔΔⲆⵠΔᐃ === this.ⲆΔᐃⲆᐃⲆⵠ) {
          this.buttons[this.ⲆΔᐃⲆᐃⲆⵠ].info.state = Qv;
        } else if (this.ΔⵠᐃΔᐃᐃᐃ === this.ᐃΔΔⲆⵠΔᐃ) {
          this.buttons[this.ΔⵠᐃΔᐃᐃᐃ].info.state = Qv;
        } else if (this.ᐃΔΔⲆⵠΔᐃ === this.ⵠΔᐃⵠΔΔΔ) {
          this.buttons[this.ⵠΔᐃⵠΔΔΔ].info.state = Qv;
        }
      }
      if (m === (this.ⵠⵠⲆⵠⲆ & m)) {
        if (this.ⵠΔⵠᐃⲆⵠᐃ === -1) {
          this.buttons[Ea].info.state = Qv;
        } else if (fw.ⲆⲆΔⵠⵠ === this.ⵠΔⵠᐃⲆⵠᐃ) {
          this.buttons[Fa].info.state = Qv;
        } else if (fw.ⵠⵠᐃΔⲆ === this.ⵠΔⵠᐃⲆⵠᐃ) {
          this.buttons[Ha].info.state = Qv;
        } else if (fw.ⵠⵠᐃᐃΔ === this.ⵠΔⵠᐃⲆⵠᐃ) {
          this.buttons[Ja].info.state = Qv;
        } else if (fw.ⵠᐃⵠᐃᐃ === this.ⵠΔⵠᐃⲆⵠᐃ) {
          this.buttons[Ga].info.state = Qv;
        }
        if (this.ⲆᐃⲆⲆΔⵠΔ === 0) {
          this.buttons[xa].info.state = Qv;
        } else if (this.ⲆᐃⲆⲆΔⵠΔ === 1) {
          this.buttons[ya].info.state = Qv;
        } else if (dj === this.ⲆᐃⲆⲆΔⵠΔ) {
          this.buttons[za].info.state = Qv;
        } else if (yr === this.ⲆᐃⲆⲆΔⵠΔ) {
          this.buttons[Aa].info.state = Qv;
        } else if (this.ⲆᐃⲆⲆΔⵠΔ === Fl) {
          this.buttons[Ca].info.state = Qv;
        } else if (this.ⲆᐃⲆⲆΔⵠΔ === 5) {
          this.buttons[Da].info.state = Qv;
        }
      }
      if ((this.ⵠⵠⲆⵠⲆ & t) === t && ΔⵠⲆⲆ.ΔᐃΔⲆⵠΔᐃ === jg) {
        if (this.buttons[na].ⵠᐃΔⵠⵠΔᐃ(pf.ⵠΔᐃΔ)) {
          this.buttons[na].hint = Math.min(Zk, this.buttons[na].hint + Cf * 1.5);
        } else {
          this.buttons[na].hint = Math.max(gj, this.buttons[na].hint - Cf * 1.5);
        }
        if (this.buttons[oa].ⵠᐃΔⵠⵠΔᐃ(pf.ⵠΔᐃΔ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Cf * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(ka, this.buttons[oa].hint - Cf * 1.5);
        }
        if (this.buttons[ra].ⵠᐃΔⵠⵠΔᐃ(pf.ⵠΔᐃΔ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Cf * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Cf * 1.5);
        }
        if (this.buttons[ua].ⵠᐃΔⵠⵠΔᐃ(pf.ⵠΔᐃΔ)) {
          this.buttons[ua].hint = Math.min(Ng, this.buttons[ua].hint + Cf * 1.5);
        } else {
          this.buttons[ua].hint = Math.max(hk, this.buttons[ua].hint - Cf * 1.5);
        }
        if (this.buttons[sa].ⵠᐃΔⵠⵠΔᐃ(pf.ⵠΔᐃΔ)) {
          this.buttons[sa].hint = Math.min(Zk, this.buttons[sa].hint + Cf * 1.5);
        } else {
          this.buttons[sa].hint = Math.max(0, this.buttons[sa].hint - Cf * 1.5);
        }
        if (this.buttons[ta].ⵠᐃΔⵠⵠΔᐃ(pf.ⵠΔᐃΔ)) {
          this.buttons[ta].hint = Math.min(1, this.buttons[ta].hint + Cf * 1.5);
        } else {
          this.buttons[ta].hint = Math.max(0, this.buttons[ta].hint - Cf * 1.5);
        }
      }
      var aa = 1;
      if ((this.ⵠⵠⲆⵠⲆ & (x | J | M | B | D | E)) > 1) {
        V = Ⲇᐃ.ⵠⲆΔΔᐃⵠⲆ;
        h.save();
        h.translate(Ko, ma + V.height / Ik);
        if (this.ⵠⵠⲆᐃΔ === 1) {
          this.ΔⵠⵠᐃⲆⵠᐃ += Cf / 3;
          aa = this.ⲆΔᐃⵠᐃⲆⵠ - 100 / Math.pow($r + this.ΔⵠⵠᐃⲆⵠᐃ, or + this.ΔⵠⵠᐃⲆⵠᐃ);
          h.rotate(aa);
        }
        Rm(h, V, -V.width / mi, -V.height / ll, V.width / 2, V.height / 2);
        h.restore();
      }
      if (ΔⵠⲆⲆ.ΔᐃΔⲆⵠΔᐃ === 0) {
        if (fw.ⲆⲆΔⵠⵠ === ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ) {
          this.buttons[na].info.state = Qv;
        } else if (ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ === fw.ⵠᐃⵠᐃᐃ) {
          this.buttons[oa].info.state = Qv;
        } else if (ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ === fw.ⵠⵠᐃΔⲆ) {
          this.buttons[sa].info.state = Qv;
        } else if (ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ === fw.ⵠⵠᐃᐃΔ) {
          this.buttons[ta].info.state = Qv;
        } else if (fw.Δᐃⵠⵠⵠ === ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ) {
          this.buttons[ra].info.state = Qv;
        } else if (ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ === fw.ⵠΔΔΔΔ) {
          this.buttons[ua].info.state = Qv;
        }
      }
      for (n = Ng; n < this.buttons.length; n++) {
        if (this.buttons[n].info.active === ia) {
          this.buttons[n].ᐃⵠΔⲆ(h);
        }
      }
      this.ⵠΔΔⵠ[hk].ᐃⵠΔⲆ(h);
      if ((this.ⵠⵠⲆⵠⲆ & (L | G)) > dt) {
        V = this.ⵠⲆΔⵠⵠΔᐃ;
        Rm(h, V, Ko - V.width / Qa, 138, V.width / pn, V.height / Og);
      }
      var ba = Math.max(1, Math.min(yt, Math.floor((hf.ⲆΔⵠΔⵠ + 3) / 2)));
      this.ⵠΔΔⵠ[ba].active = ia;
      this.ⵠΔΔⵠ[ba].ᐃⵠΔⲆ(h);
      this.ⵠΔΔⵠ[ba].active = ha;
      this.buttons[Xa].ᐃⵠΔⲆ(h);
      if ((this.ⵠⵠⲆⵠⲆ & (U | Q | F | I | R)) > Zn) {
        var u = vg < (this.ⵠⵠⲆⵠⲆ & (Q | F | I | R)) ? -190 : 0;
        V = ⵠᐃ[rs.ⵠⵠᐃΔ][this.ⲆⵠⲆⲆᐃ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / oo + u, 183, V.width / 2, V.height / it);
        this.ⲆΔᐃⵠ = (this.ⲆΔᐃⵠ + Cf * 1000) % 2000;
        var b = (this.ⲆΔᐃⵠ < 1000) * 4.5 ? this.ⲆΔᐃⵠ / 1000 : (2000 - this.ⲆΔᐃⵠ) / 1000;
        V = ⵠᐃ[rs.ᐃᐃⵠⵠⲆ][this.ᐃⲆⲆΔΔ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / va - 62 + b + u, 240, V.width / kg, V.height / kg);
        V = ⵠᐃ[rs.ⵠⵠᐃᐃᐃ][this.ᐃᐃᐃⵠ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / Kg - 54 + b + u, 272, V.width / 2, V.height / 2);
        Rm(h, V, Ko - V.width / 4 + 54 - b + u, 272, V.width / 2, V.height / cn);
        V = ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃΔ][this.ᐃᐃᐃⵠ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / 4 + u, 222, V.width / cn, V.height / Ir);
        V = ⵠᐃ[rs.ᐃⲆⲆᐃᐃ][this.ⲆⲆⵠⲆⲆ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / 4 + u, 222, V.width / 2, V.height / 2);
      }
      if ((this.ⵠⵠⲆⵠⲆ & U) === U) {
        V = ⵠᐃ[rs.ⵠᐃⲆⵠⲆ][this.ᐃⲆΔᐃΔ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / 4 - 61, 406 - V.height / 4, V.width / Og, V.height / 2);
        V = ⵠᐃ[rs.ⵠᐃⲆⵠⲆ][this.ⵠΔᐃΔΔ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / va + 53, 406 - V.height / Ik, V.width / dj, V.height / 2);
      }
      if ((this.ⵠⵠⲆⵠⲆ & S) === S) {
        V = ⵠᐃ[rs.ⵠᐃⲆⵠⲆ][this.ⵠΔᐃΔΔ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / 4 - 200, 268 - V.height / 4, V.width / Ls, V.height / 2);
      }
      if ((this.ⵠⵠⲆⵠⲆ & j) === j) {
        V = ⵠᐃ[rs.ⵠᐃⲆⵠⲆ][this.ᐃⲆΔᐃΔ][this.ⵠⵠⵠⲆⲆᐃΔ];
        Rm(h, V, Ko - V.width / T - 200, 268 - V.height / jo, V.width / 2, V.height / Ls);
      }
      if ((this.ⵠⵠⲆⵠⲆ & (Q | F | I | R | S | j)) > ck) {
        for (n = Th; this.buttons.length > n; n++) {
          if ((this.buttons[n].view & this.ⵠⵠⲆⵠⲆ) !== Go) {
            var ca = this.buttons[n].info;
            if (gj <= ca.ᐃⲆⵠⲆᐃⲆᐃ) {
              V = ca.ΔⵠⵠⲆᐃⵠⲆΔⲆ[ca.ᐃⲆⵠⲆᐃⲆᐃ].ⲆⲆⲆ;
              Rm(h, V, ca.translate.x - V.width / kq + 44.5, ca.translate.y - V.height / yn + 45.5, V.width / jo, V.height / oo);
              if (ca.ΔΔⵠⵠᐃᐃΔ !== 1) {
                V = Ⲇᐃ.ΔᐃⵠⵠⲆΔⵠ;
                Rm(h, V, ca.translate.x - V.width / 4 + 44.5, ca.translate.y - V.height / 4 + 44.5, V.width / Ir, V.height / kg);
              }
            }
          }
        }
        V = this.ΔⲆⲆᐃⲆΔᐃ;
        Rm(h, V, Ko - 312, 375, V.width / 2, V.height / rb);
        V = this.ΔⵠⵠᐃᐃⵠΔ;
        Rm(h, V, Ko - 312, 395, V.width / 2, V.height / 2);
      }
      if (this.ᐃⵠⲆⵠΔ !== this.ᐃⲆᐃⵠⵠᐃⵠ) {
        this.ᐃⲆᐃⵠⵠᐃⵠ = this.ᐃⵠⲆⵠΔ;
        this.ᐃⲆⵠΔΔⲆⵠ = Uv("" + this.ᐃⵠⲆⵠΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Rm(h, this.ᐃⲆⵠΔΔⲆⵠ, this.ⵠΔΔⵠ[Go].translate.x + 350, sq, this.ᐃⲆⵠΔΔⲆⵠ.w2, this.ᐃⲆⵠΔΔⲆⵠ.ⲆⲆⲆΔⵠ);
      if (this.ⲆΔⵠΔⵠ !== this.ᐃᐃΔⲆΔᐃΔ) {
        this.ᐃᐃΔⲆΔᐃΔ = this.ⲆΔⵠΔⵠ;
        this.ⲆᐃΔᐃΔⵠⵠ = Uv("LVL " + (this.ⲆΔⵠΔⵠ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Sn, 30, 24, undefined, gg, C, Ji, "#3F3019", 20);
      }
      Rm(h, this.ⲆᐃΔᐃΔⵠⵠ, this.ⵠΔΔⵠ[jg].translate.x + 94, 0, this.ⲆᐃΔᐃΔⵠⵠ.w2, this.ⲆᐃΔᐃΔⵠⵠ.ⲆⲆⲆΔⵠ);
      if (ΔⵠⲆⲆ.ΔᐃΔⲆⵠΔᐃ === Bs) {
        var da;
        if ((da = this.buttons[na].hint) > lt) {
          V = Ⲇᐃ.ⵠᐃⵠᐃΔΔⵠ;
          Rm(h, V, Ko - V.width / Ur, -36 - ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(y - da) * V.height / nl, V.width / 2, V.height / Ts);
        }
        if ((da = this.buttons[oa].hint) > dt) {
          V = Ⲇᐃ.ᐃΔⲆⲆⲆΔⵠ;
          Rm(h, V, Ko - V.width / 4, -36 - ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(bh - da) * V.height / pn, V.width / ab, V.height / 2);
        }
        if ((da = this.buttons[ra].hint) > 0) {
          V = Ⲇᐃ.ⲆⲆᐃⵠⲆⵠⲆ;
          Rm(h, V, Ko - V.width / 4, -36 - ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(Zn - da) * V.height / yl, V.width / Ir, V.height / 2);
        }
        if ((da = this.buttons[ua].hint) > Bs) {
          V = Ⲇᐃ.ΔᐃᐃᐃᐃΔᐃ;
          Rm(h, V, Ko - V.width / va, -36 - V.height * ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(1 - da) / 2, V.width / 2, V.height / 2);
        }
        if ((da = this.buttons[ta].hint) > 0) {
          V = Ⲇᐃ.ⲆⲆᐃⲆⵠⲆⲆ;
          Rm(h, V, Ko - V.width / qa, -36 - V.height * ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(1 - da) / 2, V.width / 2, V.height / 2);
        }
        if ((da = this.buttons[sa].hint) > Yl) {
          V = Ⲇᐃ.ᐃΔᐃⵠΔⲆΔ;
          Rm(h, V, Ko - V.width / Ol, -36 - V.height * ⵠⲆᐃⲆ.ΔⲆΔⵠⵠ(1 - da) / 2, V.width / 2, V.height / 2);
        }
      }
      if (this.ⵠⵠⲆᐃΔ === 1 && Math.abs(aa - this.ⲆΔᐃⵠᐃⲆⵠ) < 0.006) {
        h.globalAlpha = Math.min(bt, this.ᐃⲆⲆⲆⵠⵠᐃ * Jh);
        V = Ⲇᐃ.Δⵠⵠⵠᐃᐃⵠ;
        h.save();
        h.translate(Ko, 260);
        this.ᐃⲆⲆⲆⵠⵠᐃ += Cf;
        h.rotate(this.ᐃⲆⲆⲆⵠⵠᐃ);
        Rm(h, V, -V.width / ys, -V.height / Sa, V.width, V.height);
        h.restore();
        b = 1.05 + Math.cos(this.ᐃⲆⲆⲆⵠⵠᐃ * 5) * 0.05;
        if (this.ⵠᐃⲆⲆΔᐃΔ === 0) {
          var ea = b * (V = ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[this.ⲆⵠΔΔⵠΔⵠ].ⲆⲆⲆ).width;
          var fa = b * V.height;
          Rm(h, V, Ko - ea / 2, 260 - fa / 2, ea, fa);
        } else if (this.ⵠᐃⲆⲆΔᐃΔ === 1) {
          ea = b * (V = ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[jg].ⲆⲆⲆ).width;
          fa = b * V.height;
          Rm(h, V, Ko - ea / pn, 260 - fa / 2, ea, fa);
          ea = b * (V = ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ[this.ⲆⵠΔΔⵠΔⵠ].ⲆⲆⲆ).width;
          fa = V.height * b;
          Rm(h, V, Ko - ea / 2, 260 - fa / Ls, ea, fa);
        } else if (this.ⵠᐃⲆⲆΔᐃΔ === 2) {
          ea = (V = ⵠᐃⵠᐃ.ⵠⵠᐃΔ[this.ⲆⵠΔΔⵠΔⵠ].ⲆⲆⲆ).width * b;
          fa = b * V.height;
          Rm(h, V, Ko - ea / 2, 180 - fa / 2, ea, fa);
          ea = (V = ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[0].ⲆⲆⲆ).width * b;
          fa = V.height * b;
          Rm(h, V, Ko - ea / 2, 260 - fa / 2, ea, fa);
        } else if (this.ⵠᐃⲆⲆΔᐃΔ === Ui) {
          ea = (V = ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ[this.ⲆⵠΔΔⵠΔⵠ].ⲆⲆⲆ).width * b;
          fa = V.height * b;
          h.save();
          h.translate(Ko, 260);
          h.rotate(Math.PI);
          Rm(h, V, -ea / 2, -fa / 2, ea, fa);
          h.restore();
        } else if (this.ⵠᐃⲆⲆΔᐃΔ === 4) {
          ea = b * (V = ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ[this.ⲆⵠΔΔⵠΔⵠ].ⲆⲆⲆ).width;
          fa = b * V.height;
          Rm(h, V, Ko - ea / 2, 260 - fa / 2, ea, fa);
        }
        V = this.ⵠᐃⲆᐃⵠⵠⵠ;
        Rm(h, V, Ko - V.width / 4, 340, V.width / 2, V.height / Xj);
        V = this.ΔΔΔⵠΔΔⵠ;
        Rm(h, V, Ko - V.width / oo, 365, V.width / Pn, V.height / pn);
        if (ub < this.ᐃⲆⲆⲆⵠⵠᐃ) {
          this.ⵠⵠⲆᐃΔ = 0;
          K(f);
        }
        h.globalAlpha = 1;
      }
      Sw.alert.ᐃⵠΔⲆ("#FFF", "#000");
      if (w.waiting) {
        this.ⲆⲆΔⲆⲆⲆᐃ.ᐃⵠΔⲆ();
      }
    };
    var d = fs;
    var t = Math.pow(2, d++);
    var m = Math.pow(2, d++);
    this.ⲆⵠⵠⲆⲆ = m;
    var p = Math.pow(dj, d++);
    var U = Math.pow(it, d++);
    var f = Math.pow(uj, d++);
    var z = Math.pow(2, d++);
    var X = Math.pow(2, d++);
    var P = Math.pow(ab, d++);
    this.ΔᐃⵠᐃΔ = P;
    var A = Math.pow(Ci, d++);
    var k = Math.pow(2, d++);
    var x = Math.pow(2, d++);
    var J = Math.pow(2, d++);
    var M = Math.pow(Pn, d++);
    var B = Math.pow(2, d++);
    var D = Math.pow(ab, d++);
    var E = Math.pow(Ci, d++);
    var I = Math.pow(Og, d++);
    var S = Math.pow(ys, d++);
    var Q = Math.pow(nl, d++);
    var F = Math.pow(nl, d++);
    var R = Math.pow(2, d++);
    var j = Math.pow(it, d++);
    var G = Math.pow(2, d++);
    var L = Math.pow(Ci, d++);
    var W = Math.pow(2, d++);
    this.ⵠΔΔᐃᐃ = W;
    var O = Math.pow(2, d++);
    this.ⵠΔⵠΔΔ = O;
    var N = Math.pow(Ir, d++);
    this.ᐃⲆᐃⲆⵠ = N;
    var q = Math.pow(2, d++);
    function H(a, b, c) {
      for (var d = Yl; w.ⵠΔΔⵠ.length > d; d++) {
        if (w.ⵠΔΔⵠ[d].view & a) {
          w.ⵠΔΔⵠ[d].active = b;
        }
      }
      for (d = Bs; w.buttons.length > d; d++) {
        if (w.buttons[d].view & a) {
          w.buttons[d].info.active = b;
        }
      }
      for (d = Hb; d < w.ᐃΔⲆΔⵠ.length; d++) {
        if (ho !== (w.ᐃΔⲆΔⵠ[d].view & a)) {
          w.ᐃΔⲆΔⵠ[d].style.display = c;
        }
      }
    }
    this.ⵠⵠⲆⵠⲆ = t;
    function Y() {
      var a = Number(ᐃΔⲆΔ.get("starve_crate"));
      var b = Number(ᐃΔⲆΔ.get("starve_dead"));
      var c = Number(ᐃΔⲆΔ.get("starve_book"));
      var d = Number(ᐃΔⲆΔ.get("starve_bag"));
      var e = Number(ᐃΔⲆΔ.get("starve_skin"));
      var f = Number(ᐃΔⲆΔ.get("starve_accessory"));
      if (hf.unlock.ᐃᐃᐃⵠ[hf.ᐃᐃᐃⵠ] <= 0) {
        hf.ᐃᐃᐃⵠ = hf.unlock.ᐃᐃᐃⵠ[e] > jg ? e : Et;
      }
      if (hf.unlock.ᐃⲆⲆΔΔ[hf.ᐃⲆⲆΔΔ] <= ou) {
        hf.ᐃⲆⲆΔΔ = hf.unlock.ᐃⲆⲆΔΔ[c] > 0 ? c : Bs;
      }
      if (hf.unlock.ⵠΔᐃΔΔ[hf.ⵠΔᐃΔΔ] <= Yl) {
        hf.ⵠΔᐃΔΔ = hf.unlock.ⵠΔᐃΔΔ[b] > 0 ? b : 0;
      }
      if (hf.unlock.ᐃⲆΔᐃΔ[hf.ᐃⲆΔᐃΔ] <= hk) {
        hf.ᐃⲆΔᐃΔ = hf.unlock.ᐃⲆΔᐃΔ[a] > 0 ? a : Hb;
      }
      if (hf.unlock.ⲆⲆⵠⲆⲆ[hf.ⲆⲆⵠⲆⲆ] <= 0) {
        hf.ⲆⲆⵠⲆⲆ = hf.unlock.ⲆⲆⵠⲆⲆ[f] > 0 ? f : ks;
      }
      if (hf.unlock.ⲆⵠⲆⲆᐃ[hf.ⲆⵠⲆⲆᐃ] <= 0) {
        hf.ⲆⵠⲆⲆᐃ = hf.unlock.ⲆⵠⲆⲆᐃ[d] > Et ? d : 0;
      }
    }
    function K(a) {
      if (ro !== w.ᐃⵠΔⲆᐃⲆⲆ) {
        H(A, ha, "none");
        H(k, ha, "none");
        Y();
        if (a !== w.ⵠⵠⲆⵠⲆ && Ng > w.ⵠⵠⲆᐃΔ) {
          w.ⲆⵠⲆⵠΔ.style.display = t === a || f === a || a === m || X === a || U === a || a === z ? "inline-block" : "none";
          H(w.ⵠⵠⲆⵠⲆ, ha, "none");
          w.ⵠⵠⲆⵠⲆ = a;
          H(w.ⵠⵠⲆⵠⲆ, ia, "inline-block");
        }
      }
    }
    function V() {
      if (Sw.ᐃᐃΔⲆⵠⵠᐃ !== undefined && Sw.ᐃⲆΔⲆⵠᐃⵠ !== pa && Sw.ΔⵠⲆⵠΔᐃⲆ !== Hi) {
        Y();
        if (yf % 2) {
          console.log(undefined);
          ΔⵠⲆⲆ.connect();
        } else {
          console.log(undefined);
          if (Vf.Widget.isBlocked === El) {
            Vf.Widget.createAdPlayer(ΔⵠⲆⲆ.connect.bind(ΔⵠⲆⲆ), ΔⵠⲆⲆ.connect.bind(ΔⵠⲆⲆ));
          } else {
            Vf.Widget.preroll();
            Vf.Widget.play = ΔⵠⲆⲆ.connect.bind(ΔⵠⲆⲆ);
          }
        }
      }
    }
    function Z(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && C !== c) {
          c();
        }
      };
      d.send();
    }
    this.ⲆΔⵠⵠᐃᐃΔ = 0;
    this.ⲆⵠΔΔ = K;
    this.Ⲇⵠᐃᐃᐃᐃⵠ = function () {
      if (w.waiting === false) {
        Sw.reconnect.enabled = ol;
        w.waiting = yq;
        if (Sw.ᐃᐃΔⲆⵠⵠᐃ) {
          V();
        } else {
          Z(`${Af}token`, function (a) {
            const b = a.split("_");
            const c = b[0] + "_";
            const d = Number(b[1]);
            const e = Math.abs(function (a) {
              return kn(a, 8260, 46947, 8004, 37330, 5330);
            }(d));
            Sw.ᐃᐃΔⲆⵠⵠᐃ = c + e;
            V();
          }, function () {
            w.waiting = false;
          });
        }
        Z(`${kf}get`, function (a) {
          const b = a.split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(function (a) {
            return dw(a, 13795, 19269, 47307);
          }(d));
          Sw.ᐃⲆΔⲆⵠᐃⵠ = c + e;
          V();
        }, function () {
          w.waiting = qn;
        });
        Z(`${kf}set`, function (a) {
          const b = a.split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(function (a) {
            return pk(a, 19490, 6203, 53487, 30585);
          }(d));
          Sw.ΔⵠⲆⵠΔᐃⲆ = c + e;
          V();
        }, function () {
          w.waiting = false;
        });
      }
    };
    var _ = 1;
    var aa = ab;
    var ba = ll;
    var ca = 8;
    var da = 16;
    var ea = 32;
    var fa = Zk;
    var ha = lt;
    var ia = Ws;
    if (Vf.innerWidth < 1300) {
      this.ᐃᐃⵠⲆΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: ba | _,
        view: t,
        translate: {
          ΔᐃΔⵠΔ: 184,
          ΔΔⲆⵠⵠ: 200,
          x: 0,
          y: fs
        }
      };
    } else {
      this.ᐃᐃⵠⲆΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: ba | da,
        view: t,
        translate: {
          ΔᐃΔⵠΔ: 184,
          x: 0,
          y: 0,
          ΔΔⲆⵠⵠ: -180
        }
      };
    }
    this.ᐃᐃⵠⲆΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == cj && !w.waiting && !w.ⲆᐃⵠᐃᐃᐃⵠᐃΔ) {
        w.Ⲇⵠᐃᐃᐃᐃⵠ();
      }
    });
    this.ᐃᐃⵠⲆΔ.input.value = ᐃΔⲆΔ.get("starve_nickname") ? ᐃΔⲆΔ.get("starve_nickname") : "";
    this.ᐃΔΔⲆⵠⵠⲆᐃⲆ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ha,
      position: ba | da,
      view: m,
      translate: {
        ΔΔⲆⵠⵠ: -122,
        y: 0,
        ΔᐃΔⵠΔ: 110,
        x: Bs
      }
    };
    if (Vf.innerWidth < 1300) {
      this.ᐃᐃⵠⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: ba | _,
        view: t,
        translate: {
          y: 0,
          ΔΔⲆⵠⵠ: 208,
          x: 0,
          ΔᐃΔⵠΔ: 225
        }
      };
    } else {
      this.ᐃᐃⵠⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: ba | da,
        view: t,
        translate: {
          x: 0,
          ΔΔⲆⵠⵠ: -180,
          ΔᐃΔⵠΔ: 225,
          y: 0
        }
      };
    }
    this.ᐃⵠΔᐃⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ha,
      position: ba | da,
      view: X,
      translate: {
        ΔᐃΔⵠΔ: 190,
        x: Hb,
        y: 0,
        ΔΔⲆⵠⵠ: -294.5
      }
    };
    this.ΔᐃΔⲆⲆⵠΔⵠⲆ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ha,
      position: ba | da,
      view: m,
      translate: {
        x: fs,
        y: 0,
        ΔᐃΔⵠΔ: 187,
        ΔΔⲆⵠⵠ: 125
      }
    };
    this.ᐃⲆΔⲆⵠᐃΔΔⲆ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ha,
      position: ba | da,
      view: N,
      translate: {
        y: ou,
        ΔΔⲆⵠⵠ: -220,
        x: 0,
        ΔᐃΔⵠΔ: 350
      }
    };
    d = 0;
    this.ᐃΔⲆΔⵠ = [];
    this.ᐃΔⲆΔⵠ[d++] = this.ᐃᐃⵠⲆΔ;
    this.ᐃΔⲆΔⵠ[d++] = this.ᐃᐃⵠⲆⵠ;
    this.ᐃΔⲆΔⵠ[d++] = this.ᐃⵠΔᐃⲆ;
    this.ᐃΔⲆΔⵠ[d++] = this.ᐃΔΔⲆⵠⵠⲆᐃⲆ;
    this.ᐃΔⲆΔⵠ[d++] = this.ΔᐃΔⲆⲆⵠΔⵠⲆ;
    this.ᐃΔⲆΔⵠ[d++] = this.ᐃⲆΔⲆⵠᐃΔΔⲆ;
    d = hk;
    this.ⵠΔΔⵠ = [];
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ΔⲆᐃᐃⵠᐃⵠ, ia, Yl, Bs, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⵠᐃᐃᐃⲆⵠⵠ, ha, 0, Xa, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ᐃΔⲆⵠᐃᐃᐃ, ha, Eu, Et, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ΔⲆᐃⲆⲆᐃⲆ, ha, 0, gj, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ᐃΔΔᐃΔⲆⲆ, ha, 0, fs, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⵠΔᐃΔᐃΔᐃ, ha, 0, ks, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆⲆᐃΔΔᐃⲆ, ha, 0, 0, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ᐃⲆⲆΔΔᐃⵠ, ha, 0, 0, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ᐃᐃΔᐃⲆᐃⵠ, ha, ou, lt, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆΔⵠⲆⲆⲆΔ, ha, 0, ks, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⵠⲆᐃᐃⵠΔⵠ, ha, Bs, 0, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⵠᐃΔᐃⵠⲆΔ, ha, lt, 0, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆΔΔᐃⲆΔⵠ, ha, Go, ks, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆⵠⵠⵠⲆᐃⲆ, ha, ho, Hb, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆⲆⵠᐃⲆΔᐃ, ha, fs, ou, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⵠⲆⲆΔᐃⲆᐃ, ha, ka, Hb, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆⵠᐃⵠⲆᐃᐃ, ha, dh, 0, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ΔⲆΔΔⲆⵠᐃ, ha, 0, 0, _);
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⲆᐃΔΔΔᐃᐃ, ha, 0, lt, _);
    if (Vf.innerWidth < 1300) {
      this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆⲆΔⵠⵠΔΔ, ia, 200, 100, ba | _);
    } else {
      this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆⲆΔⵠⵠΔΔ, ia, -753 / qa, 100, ba | da);
    }
    this.ⵠΔΔⵠ[d++].view = t;
    this.ⵠΔΔⵠ[d++] = Rv(Ⲇᐃ.ⵠⵠⲆⵠⲆΔᐃ, ia, 403, -10, aa);
    if (Vf.innerWidth > 1300) {
      this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆΔΔⵠΔΔᐃ, ia, -885 / 4, -159.5, ca | da);
      this.ⵠΔΔⵠ[d++].view = t;
    }
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⲆᐃΔⲆΔᐃ, ha, -1293 / qa, 100, ba | da);
    this.ⵠΔΔⵠ[d++].view = m;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔᐃⲆⵠⵠⵠⵠ, ha, -1425 / jo, hi, ba | da);
    this.ⵠΔΔⵠ[d++].view = U;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆᐃⵠᐃⲆᐃⲆ, ha, -905 / Ur, 50, ba | da);
    this.ⵠΔΔⵠ[d++].view = p;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆᐃᐃⵠⵠⲆⲆ, ha, -1608 / Io, 130, ba | da);
    this.ⵠΔΔⵠ[d++].view = f;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⲆΔᐃΔⲆΔ, ha, -279.25, 130, ba | da);
    this.ⵠΔΔⵠ[d++].view = W;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⲆᐃΔΔⲆᐃ, ha, -305.5, 130, ba | da);
    this.ⵠΔΔⵠ[d++].view = O;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⵠΔᐃⵠᐃᐃᐃ, ha, -305.5, dk, ba | da);
    this.ⵠΔΔⵠ[d++].view = N;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⲆⵠᐃⵠᐃΔ, ha, -Ⲇᐃ.ΔⲆⵠᐃⵠᐃΔ.width / 4 - 350, -cs, ba | da);
    this.ⵠΔΔⵠ[d++].view = q;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⵠⵠⵠⲆΔⲆ, ha, -1497 / Ah, 110, ba | da);
    this.ⵠΔΔⵠ[d++].view = z;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔᐃᐃᐃⲆᐃΔ, ha, -306.5, Wo, ba | da);
    this.ⵠΔΔⵠ[d++].view = X;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃΔΔⲆΔⲆΔ, ha, -1381 / wk, 80, ba | da);
    this.ⵠΔΔⵠ[d++].view = P;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆⵠⵠⲆᐃΔⵠ, ha, -385.5, 150, ba | da);
    this.ⵠΔΔⵠ[d++].view = x;
    var ja = 3.6;
    var la = this.ⵠⲆΔᐃⲆΔⲆ([["#25c5d6", ja * Ia], ["#e2cf27", cl * ja], ["#afac98", 108], ["#d88e23", ja * 57]]);
    this.ⵠΔΔⵠ[d] = Rv(la, ha, -la.width / 4, 178, ba | da);
    this.ⵠΔΔⵠ[d++].view = x;
    this.ΔⵠΔⵠⲆΔⵠⲆⲆ = function (a, b, c) {
      var d;
      w.ⵠⵠⲆᐃΔ = 1;
      w.ΔⵠⵠᐃⲆⵠᐃ = gj;
      w.ᐃⲆⲆⲆⵠⵠᐃ = Yl;
      w.ⲆΔᐃⵠᐃⲆⵠ = a;
      w.ⵠᐃⲆⲆΔᐃΔ = b;
      var e = 0;
      if (b === Yl) {
        for (e = 0; ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ.length > e && c !== ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[e].id; e++);
        d = ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ[e];
        w.unlock.ᐃᐃᐃⵠ[e] = og;
      } else if (b === Zk) {
        for (e = 0; ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ.length > e && c !== ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ[e].id; e++);
        d = ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ[e];
        w.unlock.ⲆⲆⵠⲆⲆ[e] = 1;
      } else if (b === nl) {
        for (e = Eu; e < ⵠᐃⵠᐃ.ⵠⵠᐃΔ.length && ⵠᐃⵠᐃ.ⵠⵠᐃΔ[e].id !== c; e++);
        d = ⵠᐃⵠᐃ.ⵠⵠᐃΔ[e];
        w.unlock.ⲆⵠⲆⲆᐃ[e] = 1;
      } else if (b === 3) {
        for (e = Bs; e < ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ.length && c !== ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ[e].id; e++);
        d = ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ[e];
        w.unlock.ᐃⲆⲆΔΔ[e] = 1;
      } else if (b === 4) {
        for (e = 0; e < ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ.length && c !== ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ[e].id; e++);
        d = ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ[e];
        w.unlock.ᐃⲆΔᐃΔ[e] = Ws;
        w.unlock.ⵠΔᐃΔΔ[e] = hj;
      }
      w.ⲆⵠΔΔⵠΔⵠ = e;
      w.ΔΔΔⵠΔΔⵠ = Uv("by " + d.ⲆᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, eg, undefined, dq, Lh, "#000000", 24);
      w.ⵠᐃⲆᐃⵠⵠⵠ = Uv(d.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, wl, undefined, undefined, "#000000", Lg);
    };
    this.ⵠⵠⲆᐃΔ = 0;
    this.ΔⵠⵠᐃⲆⵠᐃ = vl;
    this.ⲆΔᐃⵠᐃⲆⵠ = Ob;
    this.ⵠᐃⲆⲆΔᐃΔ = 0;
    this.ᐃⲆⲆⲆⵠⵠᐃ = Go;
    this.ΔΔΔⵠΔΔⵠ = undefined;
    this.ⵠᐃⲆᐃⵠⵠⵠ = undefined;
    var ma = 150 + 448 / Ik - 65;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃⵠΔⵠⵠᐃⵠ, ha, -1542 / Kg, 150, ba | da);
    this.ⵠΔΔⵠ[d++].view = D;
    la = this.ⵠⲆΔᐃⲆΔⲆ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ja * 57]]);
    this.ⵠΔΔⵠ[d] = Rv(la, ha, -la.width / 4, 178, ba | da);
    this.ⵠΔΔⵠ[d++].view = D;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃᐃΔᐃⵠΔΔ, ha, -385.5, 150, ba | da);
    this.ⵠΔΔⵠ[d++].view = M;
    la = this.ⵠⲆΔᐃⲆΔⲆ([["#d33a2a", 10.8], ["#d45ce5", ja * tu], ["#25c5d6", 108], ["#e2cf27", ja * 57]]);
    this.ⵠΔΔⵠ[d] = Rv(la, ha, -la.width / jo, 178, ba | da);
    this.ⵠΔΔⵠ[d++].view = M;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆΔΔᐃᐃⲆⵠ, ha, -385.5, 150, ba | da);
    this.ⵠΔΔⵠ[d++].view = B;
    la = this.ⵠⲆΔᐃⲆΔⲆ([["#25c5d6", ja * kl], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", ja * 57]]);
    this.ⵠΔΔⵠ[d] = Rv(la, ha, -la.width / Ur, 178, ba | da);
    this.ⵠΔΔⵠ[d++].view = B;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⲆⵠΔⵠᐃΔ, ha, -1542 / T, 150, ba | da);
    this.ⵠΔΔⵠ[d++].view = J;
    la = this.ⵠⲆΔᐃⲆΔⲆ([["#d45ce5", 10.8], ["#25c5d6", ek * ja], ["#e2cf27", 108], ["#afac98", ja * 57]]);
    this.ⵠΔΔⵠ[d] = Rv(la, ha, -la.width / 4, 178, ba | da);
    this.ⵠΔΔⵠ[d++].view = J;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃⵠΔⲆⲆⵠΔ, ha, -1542 / Ah, 150, ba | da);
    this.ⵠΔΔⵠ[d++].view = E;
    la = this.ⵠⲆΔᐃⲆΔⲆ([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ja * 57]]);
    this.ⵠΔΔⵠ[d] = Rv(la, ha, -la.width / 4, 178, ba | da);
    this.ⵠΔΔⵠ[d++].view = E;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆⲆⲆⲆΔⵠΔ, ha, -341.5, 100, ba | da);
    this.ⵠΔΔⵠ[d++].view = I;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃᐃΔᐃΔⵠᐃ, ha, -341.5, 100, ba | da);
    this.ⵠΔΔⵠ[d++].view = R;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆⵠᐃⲆᐃΔΔ, ha, -1366 / ll, 100, ba | da);
    this.ⵠΔΔⵠ[d++].view = Q;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ΔⲆⲆⲆᐃΔΔ, ha, -341.5, hh, ba | da);
    this.ⵠΔΔⵠ[d++].view = F;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆΔⵠᐃᐃᐃΔ, ha, -1366 / Ol, Kh, ba | da);
    this.ⵠΔΔⵠ[d++].view = S;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⵠᐃⵠΔⲆᐃⲆ, ha, -341.5, 100, ba | da);
    this.ⵠΔΔⵠ[d++].view = j;
    ⵠᐃⲆⲆᐃᐃΔ = d++;
    this.ⵠΔΔⵠ[ⵠᐃⲆⲆᐃᐃΔ] = Rv(Ⲇᐃ.ⵠᐃⲆⲆᐃᐃΔ, ha, 484, 0, ba);
    ⵠΔⲆⲆᐃᐃᐃ = d++;
    this.ⵠΔΔⵠ[ⵠΔⲆⲆᐃᐃᐃ] = Rv(Ⲇᐃ.ⵠΔⲆⲆᐃᐃᐃ, ha, 812.5, 0, ba);
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⲆⵠⵠⲆⵠⲆⲆ, ha, -758 / Yr, -5, ba | da);
    this.ⵠΔΔⵠ[d++].view = k;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ⵠᐃΔⲆΔⵠⲆ, ha, -758 / Io, -nt, ba | da);
    this.ⵠΔΔⵠ[d++].view = A;
    ⲆᐃΔΔⵠᐃΔ = d++;
    this.ⵠΔΔⵠ[ⲆᐃΔΔⵠᐃΔ] = Rv(Ⲇᐃ.ⲆⲆⲆΔΔΔΔ, ia, 93, 30, ba);
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃⵠⵠⵠⲆΔΔ, ha, -173, 110, ba | da);
    this.ⵠΔΔⵠ[d++].view = G;
    this.ⵠΔΔⵠ[d] = Rv(Ⲇᐃ.ᐃᐃⵠᐃΔΔⵠ, ha, -692 / Yr, 110, ba | da);
    this.ⵠΔΔⵠ[d++].view = L;
    d = 0;
    this.buttons = [];
    this.buttons[d] = Sv(50, 57, 0, [Ⲇᐃ.ⵠⲆΔᐃⵠΔⵠ, Ⲇᐃ.ⵠⵠᐃⵠⲆᐃΔ, Ⲇᐃ.ⲆⵠΔΔᐃⲆΔ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        K(P);
      } else {
        K(p);
      }
    }, 320, vl, _, ia);
    d++;
    if (Vf.innerWidth < 1300) {
      this.buttons[d] = Sv(202, 97, 0, [Ⲇᐃ.ᐃⲆᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⲆⵠⲆΔΔ, Ⲇᐃ.ⲆⲆΔⵠⵠⵠⲆ], 1, 0, this.Ⲇⵠᐃᐃᐃᐃⵠ, 462, 235, ba | _, ia);
    } else {
      this.buttons[d] = Sv(202, 97, 0, [Ⲇᐃ.ᐃⲆᐃΔᐃⲆⲆ, Ⲇᐃ.ⲆΔⲆⵠⲆΔΔ, Ⲇᐃ.ⲆⲆΔⵠⵠⵠⲆ], 1, 0, this.Ⲇⵠᐃᐃᐃᐃⵠ, 74, 235, ba | da, ia);
    }
    this.buttons[d].view = t;
    d++;
    if (Vf.innerWidth > 1300) {
      this.buttons[d] = Sv(355, 168, 0, [Ⲇᐃ.ⵠᐃΔⲆᐃΔΔ, Ⲇᐃ.ⵠᐃΔⲆᐃΔΔ, Ⲇᐃ.ⵠᐃΔⲆᐃΔΔ], 1, 0, function () {
        Vf.open("./changelog.html", "_blank");
      }, -195, -115, ca | da, ia);
      this.buttons[d++].view = t;
      this.buttons[d] = Sv(355, 168, 0, [Ⲇᐃ.ᐃᐃⲆⲆⲆΔⲆ, Ⲇᐃ.ᐃᐃⲆⲆⲆΔⲆ, Ⲇᐃ.ᐃᐃⲆⲆⲆΔⲆ], 1, 0, function () {
        Vf.open("https://taming.io", "_blank");
      }, ie, -115, ca | da, ia);
      this.buttons[d++].view = t;
    }
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ΔᐃᐃⵠΔⵠᐃ, Ⲇᐃ.ⵠⲆΔⵠⲆⲆⵠ, Ⲇᐃ.ⵠᐃΔΔΔᐃᐃ], 1, 0, function () {
      Vf.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, Sd, aa, ia);
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ΔⵠΔⵠⲆⲆᐃ, Ⲇᐃ.ΔΔᐃⵠⵠᐃⲆ, Ⲇᐃ.ⵠⵠⵠⲆⲆⲆΔ], 1, 0, function () {
      Vf.open("https://discord.gg/starveio", "_blank");
    }, 330, Qg, aa, ia);
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ⵠⵠⵠⵠΔΔⲆ, Ⲇᐃ.ᐃⵠⲆᐃⲆΔⲆ, Ⲇᐃ.ᐃΔᐃᐃΔⵠᐃ], 1, 0, function () {
      Vf.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, aa, ia);
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ⵠΔⲆⵠΔⵠΔ, Ⲇᐃ.ΔⲆΔⲆᐃⵠΔ, Ⲇᐃ.ⵠⲆᐃⵠᐃⵠᐃ], 1, 0, function () {
      Vf.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, aa, ia);
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ⵠᐃΔⵠᐃᐃⲆ, Ⲇᐃ.ⵠΔⵠᐃᐃⵠΔ, Ⲇᐃ.ⲆⵠⲆⲆᐃⵠΔ], 1, 0, function () {
      Vf.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, cl, aa, ia);
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ⵠᐃᐃⲆⵠᐃΔ, Ⲇᐃ.ⲆᐃⵠⵠⲆΔΔ, Ⲇᐃ.ⲆⲆᐃᐃⵠⲆⵠ], 1, 0, function () {
      Vf.open("https://twitter.com/lapamauve", "_blank");
    }, 105, Ar, aa, ia);
    this.buttons[d++] = Sv(80, 80, 0, [Ⲇᐃ.ⵠⵠΔⵠΔΔⵠ, Ⲇᐃ.ΔᐃⵠⲆΔᐃᐃ, Ⲇᐃ.ΔⲆΔΔⲆᐃΔ], 1, 0, function () {
      Vf.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, aa, ia);
    ΔⲆᐃΔᐃⲆⵠ = d++;
    this.buttons[ΔⲆᐃΔᐃⲆⵠ] = Sv(232, 142, 0, [Ⲇᐃ.ⲆⵠⵠⵠⲆⵠΔ, Ⲇᐃ.ΔⵠⲆⲆⲆⵠᐃ, Ⲇᐃ.ᐃᐃⵠᐃⲆΔΔ], 1, 0, function () {
      K(X);
      Nf(hf.ᐃΔⵠᐃᐃⲆⲆ, hf.ΔᐃⵠΔΔⲆΔ, hf.ⲆᐃΔⲆᐃⵠⲆ, hf.ⵠΔᐃⵠΔΔΔ);
    }, -as, 573, _, ia);
    this.buttons[d++] = Sv(236, 165, 0, [Ⲇᐃ.ᐃⵠⵠΔᐃⵠⵠ, Ⲇᐃ.ᐃⵠⵠΔᐃⵠⵠ, Ⲇᐃ.ᐃⵠⵠΔᐃⵠⵠ], 1, fa, function () {
      K(X);
    }, -5, 566, _, ia);
    ⲆⲆⲆⲆΔΔΔ = d++;
    this.buttons[ⲆⲆⲆⲆΔΔΔ] = Sv(236, 165, 0, [Ⲇᐃ.ᐃⲆⲆⲆⲆᐃΔ, Ⲇᐃ.ⵠⵠᐃⲆⵠⵠⲆ, Ⲇᐃ.ΔᐃΔᐃⵠⲆⲆ], 1, 0, function () {
      K(z);
    }, -5, 494, _, ia);
    this.buttons[d++] = Sv(236, 165, 0, [Ⲇᐃ.ⲆᐃⲆᐃΔᐃⲆ, Ⲇᐃ.ⲆᐃⲆᐃΔᐃⲆ, Ⲇᐃ.ⲆᐃⲆᐃΔᐃⲆ], 1, fa, function () {
      K(z);
    }, -as, 494, _, ia);
    ᐃⲆⲆⲆⵠⵠⲆ = d++;
    this.buttons[ᐃⲆⲆⲆⵠⵠⲆ] = Sv(236, 165, 0, [Ⲇᐃ.ᐃⲆⲆⲆⲆᐃΔ, Ⲇᐃ.ⵠⵠᐃⲆⵠⵠⲆ, Ⲇᐃ.ΔᐃΔᐃⵠⲆⲆ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        if (hf.ᐃⵠΔⵠᐃᐃΔ - Date.now() > 0) {
          K(N);
        }
      } else {
        K(p);
      }
    }, -5, 415, _, ia);
    this.buttons[d++] = Sv(236, 165, 0, [Ⲇᐃ.ΔⲆⲆΔⵠⲆᐃ, Ⲇᐃ.ΔⲆⲆΔⵠⲆᐃ, Ⲇᐃ.ΔⲆⲆΔⵠⲆᐃ], 1, fa, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        if (hf.ᐃⵠΔⵠᐃᐃΔ - Date.now() > Go) {
          K(N);
        }
      } else {
        K(p);
      }
    }, -5, 415, _, ia);
    ΔΔᐃΔΔⵠⲆ = d++;
    this.buttons[ΔΔᐃΔΔⵠⲆ] = Sv(236, 165, 0, [Ⲇᐃ.ᐃⲆⲆⲆⲆᐃΔ, Ⲇᐃ.ⵠⵠᐃⲆⵠⵠⲆ, Ⲇᐃ.ΔᐃΔᐃⵠⲆⲆ], 1, 0, function () {
      K(f);
    }, -5, 336, _, ia);
    this.buttons[d++] = Sv(236, 165, 0, [Ⲇᐃ.ⵠⲆᐃᐃᐃⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃᐃⲆᐃ, Ⲇᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, fa, function () {
      K(f);
    }, -5, 336, _, ia);
    ⵠΔΔᐃΔⵠΔ = d++;
    this.buttons[ⵠΔΔᐃΔⵠΔ] = Sv(236, 165, 0, [Ⲇᐃ.ᐃⲆⲆⲆⲆᐃΔ, Ⲇᐃ.ⵠⵠᐃⲆⵠⵠⲆ, Ⲇᐃ.ΔᐃΔᐃⵠⲆⲆ], 1, 0, function () {
      K(U);
    }, -5, 257, _, ia);
    this.buttons[d++] = Sv(236, 165, 0, [Ⲇᐃ.ΔⵠΔᐃᐃΔΔ, Ⲇᐃ.ΔⵠΔᐃᐃΔΔ, Ⲇᐃ.ΔⵠΔᐃᐃΔΔ], 1, fa, function () {
      K(U);
    }, -5, 257, _, ia);
    ΔΔΔⲆⵠᐃⲆ = d++;
    this.buttons[ΔΔΔⲆⵠᐃⲆ] = Sv(236, 165, 0, [Ⲇᐃ.ᐃⲆⲆⲆⲆᐃΔ, Ⲇᐃ.ⵠⵠᐃⲆⵠⵠⲆ, Ⲇᐃ.ΔᐃΔᐃⵠⲆⲆ], 1, 0, function () {
      K(t);
    }, -Ba, 178, _, ia);
    this.buttons[d++] = Sv(236, 165, 0, [Ⲇᐃ.ⲆⵠⲆᐃᐃⵠΔ, Ⲇᐃ.ⲆⵠⲆᐃᐃⵠΔ, Ⲇᐃ.ⲆⵠⲆᐃᐃⵠΔ], 1, fa, function () {
      K(t);
    }, -5, 178, _, ia);
    ᐃᐃᐃⵠⲆᐃⵠ = d++;
    this.ᐃᐃᐃⵠⲆᐃⵠ = ᐃᐃᐃⵠⲆᐃⵠ;
    this.buttons[ᐃᐃᐃⵠⲆᐃⵠ] = Sv(324, 222, 0, [Ⲇᐃ.ΔⵠⲆⵠⲆⵠⲆ, Ⲇᐃ.ᐃᐃΔΔⲆⵠⲆ, Ⲇᐃ.ᐃⵠⲆΔᐃⲆΔ], 1, 0, function () {
      K(p);
    }, 0, 70, _, ia);
    ⲆⵠⲆⲆΔᐃⵠ = d++;
    ᐃⲆᐃⲆⲆᐃᐃ = d++;
    this.ⲆⵠⲆⲆΔᐃⵠ = ⲆⵠⲆⲆΔᐃⵠ;
    this.ᐃⲆᐃⲆⲆᐃᐃ = ᐃⲆᐃⲆⲆᐃᐃ;
    this.buttons[ⲆⵠⲆⲆΔᐃⵠ] = Sv(324, 222, 0, [Ⲇᐃ.ΔΔⲆΔⵠᐃΔ, Ⲇᐃ.ᐃᐃⵠⵠΔᐃⵠ, Ⲇᐃ.ⲆᐃⵠⲆΔⲆΔ], 1, 0, function () {
      K(m);
      wa(-vg);
    }, vl, 70, _, ha);
    this.buttons[ᐃⲆᐃⲆⲆᐃᐃ] = Sv(324, 222, 0, [Ⲇᐃ.ΔⲆⲆΔΔᐃΔ, Ⲇᐃ.ΔⲆⲆΔΔᐃΔ, Ⲇᐃ.ΔⲆⲆΔΔᐃΔ], 1, fa, function () {
      K(m);
      wa(-Ws);
    }, vl, 70, _, ha);
    if (jg === ΔⵠⲆⲆ.ΔᐃΔⲆⵠΔᐃ) {
      var na = d++;
      if (Vf.innerWidth < 1300) {
        this.buttons[na] = Sv(266, 176, 0, [Ⲇᐃ.ΔⲆΔΔΔᐃᐃ, Ⲇᐃ.ΔⵠⵠⲆΔⲆⵠ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔⵠ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⲆⲆΔⵠⵠ);
        }, 150, 300, _ | ba, ia);
      } else {
        this.buttons[na] = Sv(266, 176, 0, [Ⲇᐃ.ΔⲆΔΔΔᐃᐃ, Ⲇᐃ.ΔⵠⵠⲆΔⲆⵠ, Ⲇᐃ.ᐃⲆⲆⲆⵠΔⵠ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⲆⲆΔⵠⵠ);
        }, -340, Wo, da | ba, ia);
      }
      this.buttons[na].view = t;
      this.buttons[na].hint = Xa;
      var oa = d++;
      if (Vf.innerWidth < 1300) {
        this.buttons[oa] = Sv(266, 176, 0, [Ⲇᐃ.ⲆΔⲆΔⲆᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠⵠΔⲆ, Ⲇᐃ.ᐃⲆΔⵠⵠⲆⲆ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠᐃⵠᐃᐃ);
        }, 150, 400, _ | ba, ia);
      } else {
        this.buttons[oa] = Sv(266, 176, 0, [Ⲇᐃ.ⲆΔⲆΔⲆᐃⵠ, Ⲇᐃ.ΔⲆᐃⵠⵠΔⲆ, Ⲇᐃ.ᐃⲆΔⵠⵠⲆⲆ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠᐃⵠᐃᐃ);
        }, -340, 200, da | ba, ia);
      }
      this.buttons[oa].view = t;
      this.buttons[oa].hint = 0;
      var ra = d++;
      if (Vf.innerWidth < 1300) {
        this.buttons[ra] = Sv(266, 176, 0, [Ⲇᐃ.ᐃⲆΔᐃΔⵠⵠ, Ⲇᐃ.ⵠⵠᐃⵠᐃΔΔ, Ⲇᐃ.ⵠⵠⵠⵠᐃⲆᐃ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.Δᐃⵠⵠⵠ);
        }, 450, 300, _ | ba, ia);
      } else {
        this.buttons[ra] = Sv(266, 176, 0, [Ⲇᐃ.ᐃⲆΔᐃΔⵠⵠ, Ⲇᐃ.ⵠⵠᐃⵠᐃΔΔ, Ⲇᐃ.ⵠⵠⵠⵠᐃⲆᐃ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.Δᐃⵠⵠⵠ);
        }, -340, 300, da | ba, ia);
      }
      this.buttons[ra].view = t;
      this.buttons[ra].hint = 0;
      var sa = d++;
      if (Vf.innerWidth < 1300) {
        this.buttons[sa] = Sv(266, 176, 0, [Ⲇᐃ.ΔᐃΔⵠᐃⵠⵠ, Ⲇᐃ.ΔⵠΔⵠⲆΔᐃ, Ⲇᐃ.ᐃⲆΔᐃᐃΔΔ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠⵠᐃΔⲆ);
        }, 300, 300, _ | ba, ia);
      } else {
        this.buttons[sa] = Sv(266, 176, 0, [Ⲇᐃ.ΔᐃΔⵠᐃⵠⵠ, Ⲇᐃ.ΔⵠΔⵠⲆΔᐃ, Ⲇᐃ.ᐃⲆΔᐃᐃΔΔ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠⵠᐃΔⲆ);
        }, 204, Wa, da | ba, ia);
      }
      this.buttons[sa].view = t;
      this.buttons[sa].hint = 0;
      var ta = d++;
      if (Vf.innerWidth < 1300) {
        this.buttons[ta] = Sv(266, 176, 0, [Ⲇᐃ.ⵠΔᐃⵠⲆⲆΔ, Ⲇᐃ.ⵠⲆΔᐃᐃΔⵠ, Ⲇᐃ.ᐃⲆⵠⵠᐃⵠⵠ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠⵠᐃᐃΔ);
        }, 300, 400, _ | ba, ia);
      } else {
        this.buttons[ta] = Sv(266, 176, 0, [Ⲇᐃ.ⵠΔᐃⵠⲆⲆΔ, Ⲇᐃ.ⵠⲆΔᐃᐃΔⵠ, Ⲇᐃ.ᐃⲆⵠⵠᐃⵠⵠ], 1, 0, function () {
          ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠⵠᐃᐃΔ);
        }, 204, 200, da | ba, ia);
      }
      this.buttons[ta].view = t;
      this.buttons[ta].hint = Yl;
      var ua = d++;
      this.buttons[ua] = Sv(266, 176, 0, [Ⲇᐃ.ΔⲆᐃⵠΔᐃⲆ, Ⲇᐃ.ᐃⲆⲆΔⵠᐃᐃ, Ⲇᐃ.ΔⵠⲆⲆⵠⲆⲆ], 1, 0, function () {
        ΔⵠⲆⲆ.ⵠΔⵠⲆᐃ(fw.ⵠΔΔΔΔ);
      }, Vf.innerWidth < 1300 ? 450 : 204, Vf.innerWidth < 1300 ? 400 : 300, (Vf.innerWidth < 1300 ? _ : da) | ba, ia);
      this.buttons[ua].view = t;
      this.buttons[ua].hint = lt;
    }
    function wa(a, b) {
      if (pl !== b) {
        hf.ⲆᐃⲆⲆΔⵠΔ = b;
        var c = hf.ⵠΔⵠᐃⲆⵠⲆ[b];
        hf.ΔΔⲆΔᐃ = c.score;
        hf.ΔⲆⲆⲆⲆΔᐃ = c.kill;
        hf.ᐃⵠᐃⵠⵠⵠⵠ = c.death;
        hf.time = c.time;
        hf.ⲆⲆⲆⲆⵠⵠⵠ = c.bestScore;
        hf.ΔΔΔⵠⵠⲆᐃ = c.bestKill;
        hf.ᐃⵠⲆⵠᐃᐃΔ = c.bestTime;
        hf.ⲆⲆⲆⵠᐃⵠⲆ = c.scoreTotal;
      }
      if (a === pa) {
        a = hf.ⵠΔⵠᐃⲆⵠᐃ;
      }
      hf.ⵠΔⵠᐃⲆⵠᐃ = a;
      if (a >= lt) {
        document.getElementById("stats_box_time").innerHTML = hf.ᐃⵠⲆⵠᐃᐃΔ[a];
        document.getElementById("stats_box_kill").innerHTML = hf.ΔΔΔⵠⵠⲆᐃ[a];
        document.getElementById("stats_box_score").innerHTML = hf.ⲆⲆⲆⲆⵠⵠⵠ[a];
      } else {
        var d = 0;
        for (var f = Eu; f < hf.ΔⲆⲆⲆⲆΔᐃ.length; f++) {
          d += hf.ΔⲆⲆⲆⲆΔᐃ[f];
        }
        var g = 0;
        for (f = 0; f < hf.time.length; f++) {
          g += hf.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = d;
        document.getElementById("stats_box_score").innerHTML = hf.ΔΔⲆΔᐃ;
      }
    }
    this.buttons[d] = Sv(87, 78, 0, [Ⲇᐃ.ΔᐃⵠⲆΔΔΔ, Ⲇᐃ.ΔΔΔⲆΔᐃᐃ, Ⲇᐃ.ΔΔΔⵠᐃᐃΔ], 1, 0, function () {
      hf.ΔᐃⲆᐃⵠΔⲆᐃΔ();
      if (hf.ⲆⲆⵠΔᐃⵠⵠ === 0) {
        K(L);
      } else {
        K(G);
      }
    }, 127, 110, da | ba, ha);
    this.buttons[d++].view = m;
    this.buttons[d] = Sv(87, 78, 0, [Ⲇᐃ.ᐃⲆⵠⲆⲆᐃⵠ, Ⲇᐃ.ⵠⲆⲆⵠΔⲆⲆ, Ⲇᐃ.ⲆⲆⲆⲆᐃΔΔ], 1, 0, function () {
      (function () {
        if (Mf === Jf && Vf.FB.getUserID()) {
          Vf.FB.logout();
        }
        if (Mf === xf && ml !== bx) {
          Vf.gapi.auth2.getAuthInstance().signOut();
          bx = undefined;
        }
        $w = C;
        Zw = Sn;
        Mf = Lh;
        hf.ⵠⵠᐃΔⵠ = ks;
        hf.ᐃⵠⲆⵠΔ = dh;
        hf.ΔΔⲆΔᐃ = vl;
        hf.ᐃⵠⵠⵠⵠΔᐃ();
        ΔᐃΔΔⵠⵠᐃᐃⲆ();
      })();
    }, po, 110, da | ba, ha);
    this.buttons[d++].view = m;
    this.buttons[d] = Sv(58, 64, 0, [Ⲇᐃ.ΔⲆᐃⵠΔⲆᐃ, Ⲇᐃ.ΔⵠᐃⲆΔⵠᐃ, Ⲇᐃ.ⲆⵠᐃⲆⲆᐃⲆ], 1, 0, function () {
      K(t);
    }, 189, 118, da | ba, ha);
    this.buttons[d++].view = p;
    this.buttons[d] = Sv(497, 72, 0, [Ⲇᐃ.ΔⲆⲆᐃΔⲆΔ, Ⲇᐃ.ⵠᐃᐃⵠΔᐃⲆ, Ⲇᐃ.ΔⲆᐃⵠᐃⲆⵠ], 1, 0, function () {
      Vf.gapi.auth2.getAuthInstance().signIn();
    }, -130, 390, da | ba, ha);
    this.buttons[d++].view = p;
    this.buttons[d] = Sv(497, 72, 0, [Ⲇᐃ.ᐃⵠⲆᐃⲆᐃᐃ, Ⲇᐃ.ⲆΔΔᐃᐃⲆⲆ, Ⲇᐃ.ⵠᐃΔⵠᐃΔΔ], 1, 0, function () {
      Vf.FB.login(function (a) {
        if (a.authResponse) {
          Vf.FB.api("/me", function (a) {
            Mf = Jf;
            Zw = Vf.FB.getAuthResponse().accessToken;
            Hf();
            Vf.ᐃⵠᐃΔΔⵠΔ($w);
          });
        }
      });
    }, -130, 430, da | ba, ha);
    this.buttons[d++].view = p;
    ᐃⵠΔⲆᐃⲆΔ = 20000;
    this.ΔΔᐃΔΔᐃⲆ = function (a) {
      var b = hf.ⲆⲆΔⲆⲆⵠⵠ(a);
      var c = b * b * ᐃⵠΔⲆᐃⲆΔ;
      return (a -= c) / (ᐃⵠΔⲆᐃⲆΔ * ((b + Zn) * (b + 1)) - c);
    };
    this.ⲆⲆΔⲆⲆⵠⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ᐃⵠΔⲆᐃⲆΔ));
    };
    this.ⲆⵠᐃᐃΔⲆᐃᐃΔ = function (a) {
      hf.ⲆΔⵠΔⵠ = hf.ⲆⲆΔⲆⲆⵠⵠ(a);
      hf.ⵠᐃᐃᐃᐃᐃⵠ = hf.ΔΔᐃΔΔᐃⲆ(a);
      hf.ⵠⲆᐃⲆⵠΔᐃ = 0;
      hf.ΔΔⲆΔᐃ = a;
    };
    this.ⵠⵠⵠᐃⲆᐃΔᐃⵠ = function (b) {
      hf.buttons[hf.ᐃᐃᐃⵠⲆᐃⵠ].info.active = 0;
      hf.buttons[hf.ⲆⵠⲆⲆΔᐃⵠ].info.active = 1;
      hf.buttons[hf.ᐃⲆᐃⲆⲆᐃᐃ].info.active = 1;
      n();
      if (b.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = Vf.decodeURIComponent(Vf.escape(Vf.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      hf.ᐃⵠⲆⵠΔ = b.bread;
      var c = b.seasons;
      var d = c[c.length - 1];
      hf.ⵠΔⵠᐃⲆⵠⲆ = c;
      w.ⲆⵠᐃᐃΔⲆᐃᐃΔ(d.score);
      hf.ΔΔⲆΔᐃ = d.score;
      hf.ΔⲆⲆⲆⲆΔᐃ = d.kill;
      hf.ᐃⵠᐃⵠⵠⵠⵠ = d.death;
      hf.time = d.time;
      hf.ⲆⲆⲆⲆⵠⵠⵠ = d.bestScore;
      hf.ΔΔΔⵠⵠⲆᐃ = d.bestKill;
      hf.ᐃⵠⲆⵠᐃᐃΔ = d.bestTime;
      hf.ⲆⲆⲆⵠᐃⵠⲆ = d.scoreTotal;
      hf.ⲆⲆⵠΔᐃⵠⵠ = b.firstName;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.privateServer;
      if (hf.ⲆⲆⵠΔᐃⵠⵠ === Bj) {
        hf.ⲆⲆⵠΔᐃⵠⵠ = Eu;
      }
      hf.ᐃⵠΔⵠᐃᐃΔ = Date.now() + b.privateServerTime;
      if (Number(b.privateServerTime) > 0) {
        hf.ᐃⵠΔⵠᐃᐃΔ = Date.now() + Number(b.privateServerTime);
      }
      hf.ⵠⵠᐃΔⵠ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        hf.ⵠⵠᐃΔⵠ = Date.now() + Number(b.kit);
      }
      var e = ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ;
      for (var f = ho; b.skins.length > f; f++) {
        var g = b.skins[f];
        if (ks < g) {
          for (var i = Yl; i < e.length; i++) {
            if (e[i].id === f) {
              w.unlock.ᐃᐃᐃⵠ[i] = $q;
            }
          }
        }
      }
      e = ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ;
      f = 0;
      for (; b.accessories.length > f; f++) {
        if ((g = b.accessories[f]) > ks) {
          for (i = 0; i < e.length; i++) {
            if (e[i].id === f) {
              w.unlock.ⲆⲆⵠⲆⲆ[i] = or;
            }
          }
        }
      }
      e = ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ;
      f = dt;
      for (; f < b.books.length; f++) {
        if ((g = b.books[f]) > Go) {
          for (i = 0; e.length > i; i++) {
            if (f === e[i].id) {
              w.unlock.ᐃⲆⲆΔΔ[i] = $q;
            }
          }
        }
      }
      e = ⵠᐃⵠᐃ.ⵠⵠᐃΔ;
      f = ks;
      for (; f < b.bags.length; f++) {
        if ((g = b.bags[f]) > 0) {
          for (i = 0; i < e.length; i++) {
            if (e[i].id === f) {
              w.unlock.ⲆⵠⲆⲆᐃ[i] = Ws;
            }
          }
        }
      }
      e = ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ;
      f = Eu;
      for (; b.crates.length > f; f++) {
        if ((g = b.crates[f]) > Go) {
          for (i = hk; i < e.length; i++) {
            if (f === e[i].id) {
              w.unlock.ᐃⲆΔᐃΔ[i] = Th;
              w.unlock.ⵠΔᐃΔΔ[i] = El;
            }
          }
        }
      }
    };
    this.ᐃᐃⲆⲆⵠⲆΔᐃⵠ = function () {
      Vf.ᐃⵠᐃΔΔⵠΔ = function () {
        K(t);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Af + "login?token=" + Zw + "&type=" + Mf);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(w.ⵠⵠⵠᐃⲆᐃΔᐃⵠ);
      };
      if (_w === 1) {
        Vf.ᐃⵠᐃΔΔⵠΔ();
      }
    };
    Vf.ΔᐃΔΔⵠⵠᐃᐃⲆ = function () {
      hf.buttons[hf.ᐃᐃᐃⵠⲆᐃⵠ].info.active = 1;
      hf.buttons[hf.ⲆⵠⲆⲆΔᐃⵠ].info.active = 0;
      hf.buttons[hf.ᐃⲆᐃⲆⲆᐃᐃ].info.active = 0;
      K(t);
    };
    this.ⵠΔⲆⲆⲆ = function () {
      return hf.buttons[hf.ⲆⵠⲆⲆΔᐃⵠ].info.active;
    };
    this.buttons[d] = Sv(461, 105, 0, [Ⲇᐃ.ⲆⵠΔⲆⲆⵠᐃ, Ⲇᐃ.ⲆⲆⲆᐃⲆΔᐃ, Ⲇᐃ.ᐃΔⲆⵠⵠⲆⵠ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        K(P);
      } else {
        K(p);
      }
    }, -100, 80, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(157, 158, 0, [Ⲇᐃ.ⵠⲆⲆⲆΔᐃⵠ, Ⲇᐃ.ᐃⵠΔⵠⵠΔΔ, Ⲇᐃ.ᐃⲆⲆΔⲆⲆΔ], 1, 0, function () {
      Vf.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, da | ba, ha);
    this.buttons[d++].view = z;
    this.buttons[d] = Sv(66, 73, 0, [Ⲇᐃ.ⵠᐃΔⵠΔⵠΔ, Ⲇᐃ.ⲆⲆⲆᐃΔᐃⲆ, Ⲇᐃ.ᐃΔΔΔΔⵠⲆ], 1, 0, Lh, -68, 340, da | ba, ha);
    this.buttons[d++].view = z;
    this.buttons[d] = Sv(66, 73, 0, [Ⲇᐃ.ΔᐃΔᐃⲆᐃΔ, Ⲇᐃ.ΔᐃΔⲆΔᐃΔ, Ⲇᐃ.ΔⵠⵠᐃⲆᐃΔ], 1, 0, oh, -30, 340, da | ba, ha);
    this.buttons[d++].view = z;
    this.ᐃⵠⵠᐃⵠⲆᐃⵠⲆ = d;
    this.buttons[d] = Sv(97, 66, 0, [Ⲇᐃ.ΔᐃⲆᐃⵠΔⲆ, Ⲇᐃ.ΔⵠᐃⲆΔⵠⲆ, Ⲇᐃ.ΔΔⵠⲆⵠᐃⲆ], 1, 0, function () {
      Nf(Ji, dq, hf.ⲆᐃΔⲆᐃⵠⲆ);
    }, -14, 151, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⲆΔΔΔᐃⲆⵠ = d;
    this.buttons[d] = Sv(135, 66, 0, [Ⲇᐃ.ⲆΔⲆΔⵠΔⵠ, Ⲇᐃ.ᐃᐃᐃⵠΔⲆᐃ, Ⲇᐃ.ⲆⵠⵠⲆᐃΔΔ], 1, 0, function () {
      Nf(fn, Eh, hf.ⲆΔΔΔᐃⲆⵠ);
    }, 37.5, 151, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⲆᐃⵠᐃⵠⵠΔ = d;
    this.buttons[d] = Sv(160, 66, 0, [Ⲇᐃ.ⲆⲆᐃⲆᐃⲆⲆ, Ⲇᐃ.ⵠⵠΔⵠⲆᐃⲆ, Ⲇᐃ.ⲆᐃⵠⲆⲆΔⲆ], 1, 0, function () {
      Nf(fn, undefined, hf.ⲆᐃⵠᐃⵠⵠΔ);
    }, 107.5, 151, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⲆᐃΔⲆᐃⵠⲆ = d;
    this.buttons[d] = Sv(207, 66, 0, [Ⲇᐃ.ᐃⲆᐃΔⵠⲆΔ, Ⲇᐃ.ΔΔⵠⵠΔᐃΔ, Ⲇᐃ.ⵠᐃᐃᐃⵠⵠⵠ], 1, 0, function () {
      Nf(Ji, Kk, hf.ⲆᐃΔⲆᐃⵠⲆ);
    }, 190.5, 151, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⵠⲆΔΔⵠⲆⵠ = d;
    this.buttons[d] = Sv(144, 66, 0, [Ⲇᐃ.ⵠⵠⲆⲆⵠⲆΔ, Ⲇᐃ.ⲆΔᐃⲆᐃΔΔ, Ⲇᐃ.ᐃⵠᐃⵠⲆⵠΔ], 1, 0, function () {
      Nf(hf.ⵠⲆΔΔⵠⲆⵠ);
    }, 103.5, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ΔΔᐃΔΔⵠᐃ = d;
    this.buttons[d] = Sv(124, 66, 0, [Ⲇᐃ.ΔΔΔΔⲆⵠⵠ, Ⲇᐃ.ΔᐃⵠⲆⵠⵠᐃ, Ⲇᐃ.ⲆΔⵠⵠⲆⵠΔ], 1, 0, function () {
      Nf(hf.ΔΔᐃΔΔⵠᐃ);
    }, 177.5, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ᐃΔⵠᐃᐃⲆⲆ = d;
    this.buttons[d] = Sv(104, 66, 0, [Ⲇᐃ.ΔᐃⲆΔΔⵠᐃ, Ⲇᐃ.ᐃᐃⲆⵠΔⲆⲆ, Ⲇᐃ.ΔΔΔⲆΔⵠⵠ], 1, 0, function () {
      Nf(hf.ᐃΔⵠᐃᐃⲆⲆ);
    }, 242, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ᐃⵠΔᐃⵠⲆⵠ = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ⵠⲆⵠΔᐃᐃᐃ, Ⲇᐃ.ⲆⵠᐃⵠⵠΔⲆ, Ⲇᐃ.ⲆᐃⵠΔⲆⲆΔ], 1, 0, function () {
      Nf(undefined, undefined, undefined, hf.ᐃⵠΔᐃⵠⲆⵠ);
    }, -185, 528, da | ba, ha);
    this.buttons[d++].view = X;
    this.ᐃⵠⲆⲆⵠⵠⲆ = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ⲆᐃⵠⲆᐃⵠΔ, Ⲇᐃ.ⲆⵠΔⵠᐃⵠⵠ, Ⲇᐃ.ⲆⵠⵠΔΔΔΔ], 1, 0, function () {
      Nf(undefined, undefined, undefined, hf.ᐃⵠⲆⲆⵠⵠⲆ);
    }, -149, 528, da | ba, ha);
    this.buttons[d++].view = X;
    this.ΔΔΔⵠᐃᐃᐃ = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ΔⲆⲆᐃⵠⵠⵠ, Ⲇᐃ.ⲆΔᐃᐃΔⲆᐃ, Ⲇᐃ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, function () {
      Nf(undefined, C, undefined, hf.ΔΔΔⵠᐃᐃᐃ);
    }, -113, 528, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⲆΔᐃⲆᐃⲆⵠ = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ΔⲆΔΔⵠΔΔ, Ⲇᐃ.ΔⲆⵠΔⵠΔᐃ, Ⲇᐃ.ΔⵠⲆΔΔⲆⵠ], 1, 0, function () {
      Nf(Zr, pa, Sn, hf.ⲆΔᐃⲆᐃⲆⵠ);
    }, -77, 528, da | ba, ha);
    this.buttons[d++].view = X;
    this.ΔⵠᐃΔᐃᐃᐃ = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ⲆⲆⲆΔⲆᐃᐃ, Ⲇᐃ.ΔⵠΔΔΔⵠⲆ, Ⲇᐃ.ΔΔⵠⲆᐃⲆⵠ], 1, 0, function () {
      Nf(undefined, ml, Ji, hf.ΔⵠᐃΔᐃᐃᐃ);
    }, -41, 528, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⵠΔᐃⵠΔΔΔ = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ⵠᐃᐃⲆΔⲆᐃ, Ⲇᐃ.ⲆΔⵠᐃᐃΔΔ, Ⲇᐃ.ᐃⲆⵠⵠⲆΔᐃ], 1, 0, function () {
      Nf(undefined, undefined, undefined, hf.ⵠΔᐃⵠΔΔΔ);
    }, -wr, 528, da | ba, ha);
    this.buttons[d++].view = X;
    this.buttons[d] = Sv(232, 352, 0, [Ⲇᐃ.ⵠΔᐃⵠΔᐃᐃ, Ⲇᐃ.ΔΔΔᐃΔⲆⲆ, Ⲇᐃ.ⵠΔᐃⵠⲆᐃⵠ], 1, 0, function () {
      Uf(300);
    }, -330, 135, da | ba, ha);
    this.buttons[d++].view = P;
    this.buttons[d] = Sv(232, 352, 0, [Ⲇᐃ.ΔᐃⲆᐃᐃⵠΔ, Ⲇᐃ.ⵠᐃⲆⵠⲆⲆⵠ, Ⲇᐃ.ᐃⲆΔΔⲆⲆΔ], 1, 0, function () {
      Uf(600);
    }, -195, 135, da | ba, ha);
    this.buttons[d++].view = P;
    this.buttons[d] = Sv(243, 374, 0, [Ⲇᐃ.Δⵠⵠⵠᐃⵠⵠ, Ⲇᐃ.ⵠᐃᐃⵠⵠⵠΔ, Ⲇᐃ.ᐃΔᐃⲆⵠⵠⵠ], 1, 0, function () {
      Uf(2600);
    }, -60, 130, da | ba, ha);
    this.buttons[d++].view = P;
    this.buttons[d] = Sv(232, 352, 0, [Ⲇᐃ.ⵠᐃⵠⵠⵠⲆⲆ, Ⲇᐃ.ⵠⵠΔⵠᐃᐃⲆ, Ⲇᐃ.ⵠΔΔΔⵠᐃΔ], 1, 0, function () {
      Uf(7000);
    }, 78, 135, da | ba, ha);
    this.buttons[d++].view = P;
    this.buttons[d] = Sv(243, 374, 0, [Ⲇᐃ.ᐃⵠⵠⲆⲆᐃᐃ, Ⲇᐃ.ⵠᐃⵠⲆᐃᐃᐃ, Ⲇᐃ.ⲆΔⵠⵠⵠΔⵠ], 1, 0, function () {
      Uf(20000);
    }, 213, 130, da | ba, ha);
    this.buttons[d++].view = P;
    this.buttons[d] = Sv(58, 64, 0, [Ⲇᐃ.ΔⲆᐃⵠΔⲆᐃ, Ⲇᐃ.ΔⵠᐃⲆΔⵠᐃ, Ⲇᐃ.ⲆⵠᐃⲆⲆᐃⲆ], 1, 0, function () {
      K(f);
    }, 300, 88, da | ba, ha);
    this.buttons[d++].view = P;
    this.buttons[d] = Sv(323, 112, 0, [Ⲇᐃ.ⵠⲆⲆⵠⵠⵠᐃ, Ⲇᐃ.ᐃᐃᐃΔⲆᐃΔ, Ⲇᐃ.ⲆΔᐃΔⵠⲆⵠ], 1, 0, function () {
      K(I);
      Ka.ΔⲆⵠⲆΔᐃⵠ();
    }, -315, 185, da | ba, ha);
    this.buttons[d++].view = U;
    this.buttons[d] = Sv(323, 112, 0, [Ⲇᐃ.ⲆⲆᐃᐃⲆⲆᐃ, Ⲇᐃ.ΔᐃᐃᐃᐃⵠⲆ, Ⲇᐃ.ⲆΔⵠΔⲆⵠⲆ], 1, 0, function () {
      K(R);
      Pa.ΔⲆⵠⲆΔᐃⵠ();
    }, -315, 321, da | ba, ha);
    this.buttons[d++].view = U;
    this.buttons[d] = Sv(323, 112, 0, [Ⲇᐃ.ᐃᐃΔΔⲆᐃΔ, Ⲇᐃ.ᐃᐃᐃⲆⵠⵠⲆ, Ⲇᐃ.ΔⵠΔᐃⵠΔΔ], 1, 0, function () {
      K(Q);
      La.ΔⲆⵠⲆΔᐃⵠ();
    }, 153, 185, da | ba, ha);
    this.buttons[d++].view = U;
    this.buttons[d] = Sv(323, 112, 0, [Ⲇᐃ.ᐃᐃᐃᐃⲆᐃΔ, Ⲇᐃ.ΔΔΔⲆᐃⲆⲆ, Ⲇᐃ.ⲆᐃᐃⵠⵠⲆᐃ], 1, 0, function () {
      K(F);
      Ma.ΔⲆⵠⲆΔᐃⵠ();
    }, 153, 321, da | ba, ha);
    this.buttons[d++].view = U;
    this.buttons[d] = Sv(323, 112, 0, [Ⲇᐃ.ⲆⲆⵠⲆΔⲆⵠ, Ⲇᐃ.ΔⵠⲆⵠᐃΔⲆ, Ⲇᐃ.ΔⲆΔΔΔΔΔ], 1, 0, function () {
      K(S);
      Na.ΔⲆⵠⲆΔᐃⵠ();
    }, 153, 463, da | ba, ha);
    this.buttons[d++].view = U;
    this.buttons[d] = Sv(323, 112, 0, [Ⲇᐃ.ΔᐃⵠⵠⵠⲆⵠ, Ⲇᐃ.ⵠᐃⵠΔᐃⵠᐃ, Ⲇᐃ.ⵠΔⵠΔᐃᐃᐃ], 1, 0, function () {
      K(j);
      Oa.ΔⲆⵠⲆΔᐃⵠ();
    }, -315, 463, da | ba, ha);
    this.buttons[d++].view = U;
    this.buttons[d] = Sv(327, 117, 0, [Ⲇᐃ.ⵠΔⵠⵠΔΔᐃ, Ⲇᐃ.ᐃⲆΔⵠᐃᐃⵠ, Ⲇᐃ.ⵠⲆⲆΔᐃⲆⲆ], 1, 0, function () {
      K(q);
    }, 155, 70, _, ia);
    this.buttons[d++].view = t;
    this.buttons[d] = Sv(130, 129, 0, [Ⲇᐃ.ⵠⲆⲆᐃᐃⵠΔ, Ⲇᐃ.ⲆΔⵠⵠᐃᐃⲆ, Ⲇᐃ.ΔΔⵠⵠⲆⲆᐃ], 1, 0, function () {
      H(A, ha, "none");
      K(f);
    }, 10, 40, da | ba, ha);
    this.buttons[d++].view = A;
    this.buttons[d] = Sv(130, 129, 0, [Ⲇᐃ.ⵠⲆⲆᐃᐃⵠΔ, Ⲇᐃ.ⲆΔⵠⵠᐃᐃⲆ, Ⲇᐃ.ΔΔⵠⵠⲆⲆᐃ], 1, 0, function () {
      H(k, ha, "none");
      K(f);
    }, Sb, 40, da | ba, ha);
    this.buttons[d++].view = k;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 200, 140, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ⲆΔΔⵠⵠⵠΔ, Ⲇᐃ.ᐃᐃΔⵠⵠΔΔ, Ⲇᐃ.ⵠⵠⲆΔᐃΔⲆ], 1, 0, function () {
      Yf("Atlanta");
    }, -265, 300, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ⵠⵠᐃᐃⲆⵠⲆ, Ⲇᐃ.ⵠᐃⵠΔᐃⵠⵠ, Ⲇᐃ.ⵠⵠΔΔΔⲆⵠ], 1, 0, function () {
      Yf("Dallas");
    }, -130, 300, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ⲆᐃⵠΔⵠⲆⲆ, Ⲇᐃ.ⲆᐃⲆΔⲆⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔᐃᐃ], 1, 0, function () {
      Yf("Fremont");
    }, wr, 300, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ⵠⲆⵠΔⲆᐃⲆ, Ⲇᐃ.ΔⲆⲆᐃⲆⲆⵠ, Ⲇᐃ.ΔΔⵠⵠⵠΔⵠ], 1, 0, function () {
      Yf("Newark");
    }, 140, 300, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ⵠⵠΔᐃⵠⵠΔ, Ⲇᐃ.ΔⵠΔⲆⵠⲆⲆ, Ⲇᐃ.ⲆⵠⵠⵠⲆⵠⲆ], 1, 0, function () {
      Yf("London");
    }, -265, 365, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ᐃΔⵠⲆⲆᐃⵠ, Ⲇᐃ.ᐃⲆΔΔᐃⲆⵠ, Ⲇᐃ.ⵠΔᐃΔΔⲆᐃ], 1, 0, function () {
      Yf("Frankfurt");
    }, -130, 365, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ⲆᐃΔΔⲆⲆⵠ, Ⲇᐃ.ΔⲆᐃΔⲆⵠⵠ, Ⲇᐃ.ᐃⵠⲆⲆᐃⵠΔ], 1, 0, function () {
      Yf("Singapore");
    }, 5, 365, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ᐃΔⵠⵠⵠⲆⵠ, Ⲇᐃ.ⲆΔⵠᐃⲆⲆⵠ, Ⲇᐃ.ⵠⲆᐃⲆⲆΔᐃ], 1, 0, function () {
      Yf("Tokyo");
    }, 140, 365, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ΔᐃⲆΔΔᐃⵠ, Ⲇᐃ.ⲆᐃΔⵠᐃΔⵠ, Ⲇᐃ.ⲆᐃᐃᐃᐃⵠⲆ], 1, 0, function () {
      Yf("Toronto");
    }, -265, 430, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(253, 110, 0, [Ⲇᐃ.ᐃΔⲆᐃΔⲆⵠ, Ⲇᐃ.ΔⲆⲆΔΔᐃᐃ, Ⲇᐃ.ᐃᐃⲆΔᐃⵠᐃ], 1, 0, function () {
      Yf("Mumbai");
    }, -130, 430, da | ba, ha);
    this.buttons[d++].view = W;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(W);
    }, 230, 140, da | ba, ha);
    this.buttons[d++].view = O;
    this.buttons[d] = Sv(230, 352, 0, [Ⲇᐃ.ⲆⲆᐃΔᐃⲆΔ, Ⲇᐃ.ⵠⲆΔΔⵠᐃⲆ, Ⲇᐃ.ⲆⲆΔⲆᐃᐃᐃ], 1, 0, function () {
      Uf(350);
    }, -280, 240, da | ba, ha);
    this.buttons[d++].view = O;
    this.buttons[d] = Sv(230, 352, 0, [Ⲇᐃ.ᐃⲆⲆᐃⲆⵠᐃ, Ⲇᐃ.ᐃΔⵠⲆⲆΔΔ, Ⲇᐃ.ⵠⲆⲆⲆΔⲆᐃ], 1, 0, function () {
      Uf(700);
    }, -130, 240, da | ba, ha);
    this.buttons[d++].view = O;
    this.buttons[d] = Sv(230, 352, 0, [Ⲇᐃ.ΔᐃⲆⵠᐃⵠⲆ, Ⲇᐃ.ⲆᐃΔΔⲆΔⵠ, Ⲇᐃ.ΔΔⲆⵠⵠᐃⲆ], 1, 0, function () {
      Uf(1400);
    }, Ph, 240, da | ba, ha);
    this.buttons[d++].view = O;
    this.buttons[d] = Sv(230, 352, 0, [Ⲇᐃ.ⲆΔᐃⲆⵠΔⲆ, Ⲇᐃ.ΔᐃΔⲆⲆⲆⵠ, Ⲇᐃ.ᐃⲆⲆⵠΔⵠⲆ], 1, 0, function () {
      Uf(3000);
    }, 170, 240, da | ba, ha);
    this.buttons[d++].view = O;
    this.buttons[d] = Sv(105, 119, 0, [Ⲇᐃ.ΔᐃΔΔᐃⲆⲆ, Ⲇᐃ.ΔⲆⲆⵠⵠⲆᐃ, Ⲇᐃ.ⵠⲆΔΔⲆⲆΔ], 1, 0, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, da | ba, ha);
    this.buttons[d++].view = N;
    this.buttons[d] = Sv(105, 119, 0, [Ⲇᐃ.ⲆΔⵠᐃⲆⵠⲆ, Ⲇᐃ.ⲆΔΔΔⲆⵠⲆ, Ⲇᐃ.ⵠⵠᐃᐃⵠΔⲆ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Af + "rebootServer?token=" + Zw + "&userid=" + $w);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === Ol && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, da | ba, ha);
    this.buttons[d++].view = N;
    this.buttons[d] = Sv(204, 115, 0, [Ⲇᐃ.ⵠⵠⲆΔⵠⲆΔ, Ⲇᐃ.ⲆΔᐃⲆᐃΔⲆ, Ⲇᐃ.ⲆⲆΔⲆᐃΔᐃ], 1, 0, function () {
      Vf.open("./commands.html", "_blank");
    }, -265, 490, da | ba, ha);
    this.buttons[d++].view = N;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ᐃⵠⵠⲆΔⲆⵠ, Ⲇᐃ.ᐃΔⵠⵠⵠᐃΔ, Ⲇᐃ.ΔΔΔᐃⵠᐃⲆ], 1, 0, function () {
      K(x);
    }, -210, 170, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ⲆΔⵠⵠΔⵠⵠ, Ⲇᐃ.Δᐃᐃᐃⵠᐃⵠ, Ⲇᐃ.ᐃⲆᐃⲆΔᐃⵠ], 1, 0, function () {
      K(B);
    }, 70, 170, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ⲆΔΔΔᐃΔΔ, Ⲇᐃ.ΔᐃΔΔΔᐃΔ, Ⲇᐃ.ΔⲆΔⲆΔⵠᐃ], 1, 0, function () {
      K(J);
    }, 70, 204, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ᐃΔᐃⲆᐃⲆΔ, Ⲇᐃ.ⲆΔᐃⲆΔᐃⵠ, Ⲇᐃ.ⵠΔΔΔᐃⲆΔ], 1, 0, function () {
      K(D);
    }, -210, 204, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ᐃΔᐃⲆᐃⲆΔ, Ⲇᐃ.ⲆΔᐃⲆΔᐃⵠ, Ⲇᐃ.ⵠΔΔΔᐃⲆΔ], 1, 0, function () {
      K(E);
    }, 70, 238, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ᐃΔᐃⲆᐃⲆΔ, Ⲇᐃ.ⲆΔᐃⲆΔᐃⵠ, Ⲇᐃ.ⵠΔΔΔᐃⲆΔ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        qf(0, 300);
      } else {
        K(p);
      }
    }, 307, 205, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ⲆⵠⵠΔⵠⵠⵠ, Ⲇᐃ.ⲆᐃⵠΔΔⵠᐃ, Ⲇᐃ.ΔⵠⲆⵠⵠⲆⲆ], 1, 0, function () {
      K(M);
    }, -210, 238, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(145, 69, 0, [Ⲇᐃ.ⲆⵠⵠΔⵠⵠⵠ, Ⲇᐃ.ⲆᐃⵠΔΔⵠᐃ, Ⲇᐃ.ΔⵠⲆⵠⵠⲆⲆ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        qf(1, 600);
      } else {
        K(p);
      }
    }, 307, 239, da | ba, ha);
    this.buttons[d++].view = f;
    this.buttons[d] = Sv(192, 101, 0, [Ⲇᐃ.ⵠΔΔⲆᐃⵠⲆ, Ⲇᐃ.ⲆΔⲆⵠᐃⵠⲆ, Ⲇᐃ.ᐃᐃⵠᐃⲆⵠⲆ], 1, 0, function () {
      Wf();
    }, -dk, 250, da | ba, ha);
    this.buttons[d++].view = L;
    this.buttons[d] = Sv(192, 104, 0, [Ⲇᐃ.ⲆⵠⲆᐃΔⵠᐃ, Ⲇᐃ.ⲆⲆᐃΔΔⲆᐃ, Ⲇᐃ.ΔᐃΔⲆⵠᐃΔ], 1, 0, function () {
      Wf();
    }, -100, 239, da | ba, ha);
    this.buttons[d++].view = G;
    this.buttons[d] = Sv(192, 101, 0, [Ⲇᐃ.ⵠΔⲆⵠⵠⵠⵠ, Ⲇᐃ.ΔᐃᐃⲆⵠⵠᐃ, Ⲇᐃ.ᐃΔⵠᐃΔᐃΔ], 1, 0, function () {
      K(m);
    }, 10, 250, da | ba, ha);
    this.buttons[d++].view = L;
    this.buttons[d] = Sv(192, 104, 0, [Ⲇᐃ.ⲆΔⲆᐃᐃᐃᐃ, Ⲇᐃ.ᐃⵠΔᐃᐃᐃⵠ, Ⲇᐃ.ⵠᐃⲆΔΔⲆᐃ], 1, 0, function () {
      K(m);
    }, 10, 239, da | ba, ha);
    this.buttons[d++].view = G;
    ᐃᐃΔⵠᐃⵠⲆ = [];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ⵠᐃⲆᐃΔ] = [Ⲇᐃ.ᐃⵠⵠᐃⵠⵠΔ, Ⲇᐃ.ⲆⵠᐃᐃΔᐃᐃ, Ⲇᐃ.ⵠΔᐃᐃΔⲆⵠ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ᐃⲆᐃΔ] = [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ⵠΔΔⲆ] = [Ⲇᐃ.ⲆᐃⵠΔᐃⲆⲆ, Ⲇᐃ.ⲆⵠⲆⲆⲆⲆⲆ, Ⲇᐃ.ᐃᐃΔᐃⲆΔΔ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ΔᐃⲆⲆ] = [Ⲇᐃ.ᐃⵠⲆⲆⲆΔⵠ, Ⲇᐃ.ⲆΔΔⵠⲆᐃΔ, Ⲇᐃ.ⲆⵠⲆⵠΔᐃⲆ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ᐃⲆΔⵠ] = [Ⲇᐃ.ⵠⵠΔⲆⲆⲆᐃ, Ⲇᐃ.ΔⲆⵠᐃΔⲆⲆ, Ⲇᐃ.ⲆⲆⲆⲆᐃⲆⲆ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ⲆΔⲆᐃ] = [Ⲇᐃ.ⵠΔⵠΔᐃⵠⲆ, Ⲇᐃ.ΔⲆΔⵠᐃⵠᐃ, Ⲇᐃ.ⵠⵠᐃᐃⲆᐃⲆ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ⲆⲆⵠΔ] = [Ⲇᐃ.ᐃΔⲆⲆⲆᐃᐃ, Ⲇᐃ.ⲆⲆᐃⵠⵠⵠᐃ, Ⲇᐃ.ⲆⲆⵠⵠᐃⵠⵠ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ΔᐃⲆⵠᐃ] = [Ⲇᐃ.ΔΔⵠⵠᐃΔᐃ, Ⲇᐃ.ΔⵠⲆⲆⲆⲆΔ, Ⲇᐃ.ᐃΔᐃΔΔⵠⲆ];
    ᐃᐃΔⵠᐃⵠⲆ[ΔΔΔ.ᐃⲆᐃⲆΔⲆⵠ] = [Ⲇᐃ.ΔᐃᐃΔᐃΔⵠ, Ⲇᐃ.ⲆΔΔΔᐃⵠⵠ, Ⲇᐃ.ⲆΔᐃⵠⲆΔⲆ];
    ᐃⲆᐃᐃⲆⵠⵠ = d;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Ji, -29, 205, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 300, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, ml, -29, 395, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, gg, 65, 205, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 65, 300, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 65, 395, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 205, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, gg, 159, 300, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, gg, 159, 395, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ΔⲆⵠΔᐃΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⵠⲆᐃⵠᐃ], 1, 0, undefined, -61, 315, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ⲆⵠⵠⵠⵠⵠⲆ, Ⲇᐃ.ⲆⵠᐃΔᐃΔᐃ, Ⲇᐃ.ΔΔⵠⲆᐃⲆΔ], 1, 0, undefined, 260, 315, da | ba, ha);
    this.buttons[d++].view = I;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(U);
    }, -320, 470, da | ba, ha);
    this.buttons[d++].view = I;
    ⵠᐃⲆΔⵠⵠⵠⵠΔ = d;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, ml, -29, 205, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 300, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 395, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Bj, 65, 205, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, wl, 65, 300, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Lh, 65, 395, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, uh, 159, 205, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 300, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 395, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ΔⲆⵠΔᐃΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⵠⲆᐃⵠᐃ], 1, 0, undefined, -61, 315, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ⲆⵠⵠⵠⵠⵠⲆ, Ⲇᐃ.ⲆⵠᐃΔᐃΔᐃ, Ⲇᐃ.ΔΔⵠⲆᐃⲆΔ], 1, 0, undefined, 260, 315, da | ba, ha);
    this.buttons[d++].view = R;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(U);
    }, -320, 470, da | ba, ha);
    this.buttons[d++].view = R;
    ᐃᐃⲆⲆᐃΔΔⲆΔ = d;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Kk, -29, 205, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, dq, -29, 300, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, pa, -29, 395, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Ji, 65, 205, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, pa, 65, 300, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Ji, 65, 395, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Kk, 159, 205, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, wl, 159, 300, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 395, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ΔⲆⵠΔᐃΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⵠⲆᐃⵠᐃ], 1, 0, Sn, -61, 315, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ⲆⵠⵠⵠⵠⵠⲆ, Ⲇᐃ.ⲆⵠᐃΔᐃΔᐃ, Ⲇᐃ.ΔΔⵠⲆᐃⲆΔ], 1, 0, undefined, 260, 315, da | ba, ha);
    this.buttons[d++].view = j;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(U);
    }, -320, 470, da | ba, ha);
    this.buttons[d++].view = j;
    ⲆⲆΔΔΔⲆΔᐃΔ = d;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Kk, -29, 205, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 300, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 395, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, wl, 65, 205, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 65, 300, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, wl, 65, 395, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Kk, 159, 205, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Hi, 159, 300, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 395, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ΔⲆⵠΔᐃΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⵠⲆᐃⵠᐃ], 1, 0, undefined, -61, 315, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ⲆⵠⵠⵠⵠⵠⲆ, Ⲇᐃ.ⲆⵠᐃΔᐃΔᐃ, Ⲇᐃ.ΔΔⵠⲆᐃⲆΔ], 1, 0, uh, 260, 315, da | ba, ha);
    this.buttons[d++].view = Q;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(U);
    }, -320, 470, da | ba, ha);
    this.buttons[d++].view = Q;
    ᐃᐃⵠⵠⲆⵠΔⵠⲆ = d;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Hi, -29, 205, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 300, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, ml, -29, 395, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 65, 205, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 65, 300, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Pr, 65, 395, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 205, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 300, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 395, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ΔⲆⵠΔᐃΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⵠⲆᐃⵠᐃ], 1, 0, undefined, -61, 315, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ⲆⵠⵠⵠⵠⵠⲆ, Ⲇᐃ.ⲆⵠᐃΔᐃΔᐃ, Ⲇᐃ.ΔΔⵠⲆᐃⲆΔ], 1, 0, undefined, 260, 315, da | ba, ha);
    this.buttons[d++].view = F;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(U);
    }, -320, 470, da | ba, ha);
    this.buttons[d++].view = F;
    ⲆⲆⲆᐃⲆⵠⵠᐃⵠ = d;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Bj, -29, 205, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, -29, 300, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Eh, -29, 395, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Zr, 65, 205, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Sn, 65, 300, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 65, 395, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 205, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, Hi, 159, 300, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(178, 182, 0, [Ⲇᐃ.ⲆⲆⲆᐃ, Ⲇᐃ.ᐃΔΔᐃ, Ⲇᐃ.ⵠΔⵠⵠ], 1, 0, undefined, 159, 395, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ΔⲆⵠΔᐃΔⲆ, Ⲇᐃ.ⵠᐃⵠⵠⵠⵠⲆ, Ⲇᐃ.ⵠΔⵠⲆᐃⵠᐃ], 1, 0, wl, -61, 315, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(39, 122, 0, [Ⲇᐃ.ⲆⵠⵠⵠⵠⵠⲆ, Ⲇᐃ.ⲆⵠᐃΔᐃΔᐃ, Ⲇᐃ.ΔΔⵠⲆᐃⲆΔ], 1, 0, Lh, 260, 315, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(U);
    }, -320, 470, da | ba, ha);
    this.buttons[d++].view = S;
    this.buttons[d] = Sv(260, 260, 0, [Ⲇᐃ.ΔΔΔΔᐃⵠⲆ, Ⲇᐃ.ᐃⲆⲆⲆⲆⲆΔ, Ⲇᐃ.ᐃⲆΔⲆᐃᐃⵠ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        Of(Kl, 50);
      } else {
        K(p);
      }
    }, -260 / Yr, 197, da | ba, ha);
    this.buttons[d++].view = B;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 309, 180, da | ba, ha);
    this.buttons[d++].view = B;
    this.buttons[d] = Sv(260, 260, 0, [Ⲇᐃ.ⵠⵠᐃΔⲆᐃⵠ, Ⲇᐃ.ΔⵠⵠΔⵠᐃⲆ, Ⲇᐃ.ⵠⵠⵠΔᐃΔᐃ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        Of(0, 100);
      } else {
        K(p);
      }
    }, -260 / Eg, 262 - 260 / qa, da | ba, ha);
    this.buttons[d++].view = x;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 309, 180, da | ba, ha);
    this.buttons[d++].view = x;
    this.buttons[d] = Sv(260, 260, 0, [Ⲇᐃ.ⲆⵠᐃᐃⲆᐃΔ, Ⲇᐃ.ᐃⵠᐃΔⵠⲆⲆ, Ⲇᐃ.ΔᐃΔⵠⲆⲆΔ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        Of(xs, 150);
      } else {
        K(p);
      }
    }, -260 / Dl, 150 + 448 / oo - 260 / ll, da | ba, ha);
    this.buttons[d++].view = J;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 309, 180, da | ba, ha);
    this.buttons[d++].view = J;
    this.buttons[d] = Sv(260, 260, 0, [Ⲇᐃ.ⵠⵠᐃΔΔᐃΔ, Ⲇᐃ.ᐃⲆΔᐃΔᐃΔ, Ⲇᐃ.ΔΔⲆᐃⲆΔΔ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        Of(or, 300);
      } else {
        K(p);
      }
    }, -260 / T, 262 - 260 / va, da | ba, ha);
    this.buttons[d++].view = D;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 309, 180, da | ba, ha);
    this.buttons[d++].view = D;
    this.buttons[d] = Sv(260, 260, 0, [Ⲇᐃ.ⵠᐃᐃΔᐃΔΔ, Ⲇᐃ.ⵠⵠᐃᐃΔΔᐃ, Ⲇᐃ.ΔᐃᐃⵠⲆΔΔ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        Of(2, 600);
      } else {
        K(p);
      }
    }, -65, 150 + 448 / Ik - 65, da | ba, ha);
    this.buttons[d++].view = M;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 309, 180, da | ba, ha);
    this.buttons[d++].view = M;
    this.buttons[d] = Sv(260, 260, 0, [Ⲇᐃ.ⵠⵠᐃΔΔᐃΔ, Ⲇᐃ.ᐃⲆΔᐃΔᐃΔ, Ⲇᐃ.ΔΔⲆᐃⲆΔΔ], 1, 0, function () {
      if (w.ⵠΔⲆⲆⲆ()) {
        Of(5, 300);
      } else {
        K(p);
      }
    }, -260 / oo, 197, da | ba, ha);
    this.buttons[d++].view = E;
    this.buttons[d] = Sv(115, 73, 0, [Ⲇᐃ.ᐃⲆΔΔⵠ, Ⲇᐃ.ᐃⵠᐃⵠⵠ, Ⲇᐃ.ᐃⲆᐃⵠΔ], 1, 0, function () {
      K(f);
    }, 309, 180, da | ba, ha);
    this.buttons[d++].view = E;
    var xa = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ΔⲆⵠⲆⲆⵠᐃ, Ⲇᐃ.ᐃⲆᐃΔⲆⲆⵠ, Ⲇᐃ.ΔᐃⲆΔᐃᐃⲆ], 1, 0, function () {
      wa(undefined, dt);
    }, -305, 132, da | ba, ha);
    this.buttons[d++].view = m;
    var ya = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ΔᐃⲆᐃⲆⲆᐃ, Ⲇᐃ.ᐃⲆⵠⲆⵠⲆΔ, Ⲇᐃ.ᐃⲆⲆⲆᐃⵠΔ], 1, 0, function () {
      wa(Kk, or);
    }, -273, 132, da | ba, ha);
    this.buttons[d++].view = m;
    var za = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ᐃΔⲆᐃⲆⲆⲆ, Ⲇᐃ.ⲆᐃᐃⲆᐃᐃΔ, Ⲇᐃ.ᐃᐃⲆⵠᐃⵠΔ], 1, 0, function () {
      wa(gg, dj);
    }, -241, 132, da | ba, ha);
    this.buttons[d++].view = m;
    var Aa = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ᐃⲆᐃΔⵠΔⲆ, Ⲇᐃ.ⵠⲆⵠΔⵠⵠᐃ, Ⲇᐃ.ⲆΔΔΔΔΔᐃ], 1, 0, function () {
      wa(undefined, 3);
    }, -305, 165, da | ba, ha);
    this.buttons[d++].view = m;
    var Ca = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ΔⵠⲆᐃΔΔΔ, Ⲇᐃ.ᐃᐃΔΔΔⵠᐃ, Ⲇᐃ.ᐃΔⵠΔΔⵠΔ], 1, 0, function () {
      wa(Lh, 3);
    }, -273, 165, da | ba, ha);
    this.buttons[d++].view = m;
    var Da = d;
    this.buttons[d] = Sv(46, 51, 0, [Ⲇᐃ.ⵠⵠᐃⲆΔᐃⵠ, Ⲇᐃ.ᐃⵠᐃᐃⲆΔΔ, Ⲇᐃ.ᐃⲆᐃᐃⵠᐃⲆ], 1, 0, function () {
      wa(ml, 3);
    }, -241, 165, da | ba, ha);
    this.buttons[d++].view = m;
    var Ea = d;
    this.buttons[d] = Sv(460, 73, 0, [Ⲇᐃ.ᐃⵠⵠΔⵠΔΔ, Ⲇᐃ.ⲆⲆⲆΔΔⵠⵠ, Ⲇᐃ.ⲆⲆⵠᐃⲆⲆⲆ], 1, 0, function () {
      wa(-ck);
    }, -180, 170, da | ba, ha);
    this.buttons[d++].view = m;
    var Fa = d;
    this.buttons[d] = Sv(222, 68, 0, [Ⲇᐃ.ᐃΔᐃⵠᐃᐃΔ, Ⲇᐃ.ΔᐃΔⲆⲆⵠΔ, Ⲇᐃ.ᐃⵠⵠⲆⲆᐃⲆ], 1, 0, function () {
      wa(fw.ⲆⲆΔⵠⵠ);
    }, -180, 215, da | ba, ha);
    this.buttons[d++].view = m;
    var Ga = d;
    this.buttons[d] = Sv(222, 68, 0, [Ⲇᐃ.ⵠᐃΔΔΔΔⲆ, Ⲇᐃ.ᐃΔⵠΔᐃⵠⵠ, Ⲇᐃ.ⲆΔⵠⲆΔⵠᐃ], 1, 0, function () {
      wa(fw.ⵠᐃⵠᐃᐃ);
    }, -180, 260, da | ba, ha);
    this.buttons[d++].view = m;
    var Ha = d;
    this.buttons[d] = Sv(222, 68, 0, [Ⲇᐃ.ⲆΔᐃΔΔⲆᐃ, Ⲇᐃ.ΔΔⵠⵠᐃᐃᐃ, Ⲇᐃ.ᐃΔⲆᐃΔΔΔ], 1, 0, function () {
      wa(fw.ⵠⵠᐃΔⲆ);
    }, -60, 215, da | ba, ha);
    this.buttons[d++].view = m;
    var Ja = d;
    this.buttons[d] = Sv(222, 68, 0, [Ⲇᐃ.ⲆⲆΔⲆΔⲆⲆ, Ⲇᐃ.ᐃⵠⵠΔΔⲆᐃ, Ⲇᐃ.ᐃⵠΔⲆᐃᐃⵠ], 1, 0, function () {
      wa(fw.ⵠⵠᐃᐃΔ);
    }, -60, 260, da | ba, ha);
    this.buttons[d++].view = m;
    this.ΔᐃⵠΔΔⲆΔ = d;
    this.buttons[d] = Sv(143, 66, 0, [Ⲇᐃ.ᐃⲆΔᐃⲆΔᐃ, Ⲇᐃ.ⲆΔⵠⵠⲆⲆⵠ, Ⲇᐃ.ⵠᐃⵠⵠΔⲆᐃ], 1, 0, function () {
      Nf(Hi, hf.ΔᐃⵠΔΔⲆΔ);
    }, -298, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⲆⲆⲆΔⵠⲆᐃ = d;
    this.buttons[d] = Sv(104, 66, 0, [Ⲇᐃ.ⲆⵠⵠⲆⵠΔΔ, Ⲇᐃ.ⵠⲆⵠΔⲆΔᐃ, Ⲇᐃ.ΔᐃⵠᐃΔΔⵠ], 1, 0, function () {
      Nf(Pr, hf.ⲆⲆⲆΔⵠⲆᐃ);
    }, -223, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ᐃⵠΔⲆⲆⵠⵠ = d;
    this.buttons[d] = Sv(110, 66, 0, [Ⲇᐃ.ᐃⵠᐃⲆΔⵠΔ, Ⲇᐃ.ΔΔⲆΔΔⲆᐃ, Ⲇᐃ.ⲆᐃⵠⵠΔΔⵠ], 1, 0, function () {
      Nf(eg, hf.ᐃⵠΔⲆⲆⵠⵠ);
    }, -168, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ⲆΔⵠᐃⵠᐃⵠ = d;
    this.buttons[d] = Sv(88, 66, 0, [Ⲇᐃ.ΔⵠⲆΔΔᐃΔ, Ⲇᐃ.ⵠΔⵠᐃⵠΔΔ, Ⲇᐃ.ⵠΔΔᐃⲆᐃⵠ], 1, 0, function () {
      Nf(undefined, hf.ⲆΔⵠᐃⵠᐃⵠ);
    }, -110, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.ᐃᐃΔᐃᐃΔⵠ = d;
    this.buttons[d] = Sv(88, 66, 0, [Ⲇᐃ.ⵠⲆΔⲆᐃᐃΔ, Ⲇᐃ.ⲆⵠΔⲆⵠΔΔ, Ⲇᐃ.ⲆⲆᐃⲆᐃⵠⲆ], 1, 0, function () {
      Nf(Hi, hf.ᐃᐃΔᐃᐃΔⵠ);
    }, -63, 110, da | ba, ha);
    this.buttons[d++].view = X;
    this.buttons[d] = Sv(86, 44, 0, [Ⲇᐃ.ⵠᐃΔᐃΔⲆⲆ, Ⲇᐃ.ΔⲆᐃⲆᐃⲆΔ, Ⲇᐃ.ᐃⲆⵠⲆⲆⲆⵠ], 1, 0, function () {
      Vf.open("./terms.html", "_blank");
    }, 349, 290, da | ba, ha);
    this.buttons[d++].view = f;
    var Ka = new i(ⵠᐃⵠᐃ.ᐃΔⵠⲆⲆ, ᐃⲆᐃᐃⲆⵠⵠ, function (a) {
      hf.ᐃᐃᐃⵠ = a;
      if (hf.unlock.ᐃᐃᐃⵠ[a] === 1) {
        ᐃΔⲆΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃᐃᐃⵠ, this.unlock.ᐃᐃᐃⵠ);
    var La = new i(ⵠᐃⵠᐃ.ⵠⵠᐃΔ, ⲆⲆΔΔΔⲆΔᐃΔ, function (a) {
      hf.ⲆⵠⲆⲆᐃ = a;
      if (hf.unlock.ⲆⵠⲆⲆᐃ[a] === og) {
        ᐃΔⲆΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⵠⲆⲆᐃ, this.unlock.ⲆⵠⲆⲆᐃ);
    var Ma = new i(ⵠᐃⵠᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃⵠⵠⲆⵠΔⵠⲆ, function (a) {
      hf.ᐃⲆⲆΔΔ = a;
      if (hf.unlock.ᐃⲆⲆΔΔ[a] === 1) {
        ᐃΔⲆΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⲆⲆΔΔ, this.unlock.ᐃⲆⲆΔΔ);
    var Na = new i(ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ, ⲆⲆⲆᐃⲆⵠⵠᐃⵠ, function (a) {
      hf.ⵠΔᐃΔΔ = a;
      if (hf.unlock.ⵠΔᐃΔΔ[a] === vg) {
        ᐃΔⲆΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔᐃΔΔ, this.unlock.ⵠΔᐃΔΔ);
    var Oa = new i(ⵠᐃⵠᐃ.ⵠᐃⲆⵠⲆ, ᐃᐃⲆⲆᐃΔΔⲆΔ, function (a) {
      hf.ᐃⲆΔᐃΔ = a;
      if (hf.unlock.ᐃⲆΔᐃΔ[a] === 1) {
        ᐃΔⲆΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⲆΔᐃΔ, this.unlock.ᐃⲆΔᐃΔ);
    var Pa = new i(ⵠᐃⵠᐃ.ᐃⲆⲆᐃᐃ, ⵠᐃⲆΔⵠⵠⵠⵠΔ, function (a) {
      hf.ⲆⲆⵠⲆⲆ = a;
      if (hf.unlock.ⲆⲆⵠⲆⲆ[a] === uq) {
        ᐃΔⲆΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆⲆⵠⲆⲆ, this.unlock.ⲆⲆⵠⲆⲆ);
    this.ᐃⲆᐃⵠᐃᐃⲆ = function (a) {
      pf.ⵠΔᐃΔ = Tv(w.ⵠⵠ, a);
      for (var b = 0; w.buttons.length > b; b++) {
        if (ia === w.buttons[b].info.active) {
          w.buttons[b].ⵠΔⵠᐃ(w.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        }
      }
    };
    this.ᐃΔᐃᐃⵠΔΔ = function (a) {
      pf.ⵠΔᐃΔ = Tv(w.ⵠⵠ, a);
      for (var b = dh; b < w.buttons.length; b++) {
        var c = w.buttons[b];
        if (c.info.active === ia && c.ⵠΔⵠᐃ(w.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⵠΔΔΔⲆΔΔ = false;
    this.ΔⲆΔⵠᐃⲆᐃ = function (a) {
      pf.ⵠΔᐃΔ = Tv(w.ⵠⵠ, a);
      var b = ej;
      for (var c = 0; c < w.buttons.length; c++) {
        if (w.buttons[c].info.active === ia) {
          b |= w.buttons[c].ⵠΔⵠᐃ(w.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        }
      }
      if (w.ⵠΔΔΔⲆΔΔ !== b) {
        w.ⵠΔΔΔⲆΔΔ = b;
        e.style.cursor = b ? w.ⲆᐃⲆⲆⵠΔᐃ : w.ⲆᐃΔⵠΔⲆⵠ;
      }
    };
    this.ⵠΔⲆΔΔᐃⲆ = function () {
      Vf.addEventListener("mousedown", this.ᐃⲆᐃⵠᐃᐃⲆ, vs);
      Vf.addEventListener("mouseup", this.ᐃΔᐃᐃⵠΔΔ, ro);
      Vf.addEventListener("mousemove", this.ΔⲆΔⵠᐃⲆᐃ, false);
    };
    this.ⵠΔⲆᐃᐃΔⲆ = function () {
      Vf.removeEventListener("mousedown", this.ᐃⲆᐃⵠᐃᐃⲆ, false);
      Vf.removeEventListener("mouseup", this.ᐃΔᐃᐃⵠΔΔ, false);
      Vf.removeEventListener("mousemove", this.ΔⲆΔⵠᐃⲆᐃ, false);
    };
  }
  function Fw() {
    ⵠⲆᐃⲆ.ΔΔⵠᐃⵠⲆᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Sw.ⲆⲆⲆ + "%20days%20with%20" + Sw.ᐃⲆⲆⵠᐃⵠⲆ.ΔΔⲆΔᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Gw(c, d) {
    var f = this;
    this.ⵠⵠ = c;
    this.Δ = d;
    if (Vf.navigator.userAgent.indexOf("Edge") > -uq) {
      this.ⲆᐃΔⵠΔⲆⵠ = "default";
      this.ⲆᐃⲆⲆⵠΔᐃ = "pointer";
    } else {
      this.ⲆᐃΔⵠΔⲆⵠ = "url('img/cursor0.png'), default";
      this.ⲆᐃⲆⲆⵠΔᐃ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠΔᐃΔᐃⲆⲆ = og;
    this.ⲆΔΔᐃᐃⲆᐃ = 1;
    this.ΔΔᐃⵠᐃⲆΔ = 1;
    this.ⲆⵠΔⵠᐃⲆΔ = 1;
    this.ΔᐃⲆᐃΔᐃᐃΔⲆ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ΔⵠΔᐃ = {
      ⵠⵠᐃⲆⵠΔⲆ: Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠΔΔⵠΔᐃ]),
      ᐃΔΔᐃΔΔⵠ: Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ])
    };
    this.sign = {
      open: false,
      ⵠⵠⲆⵠⵠᐃⵠⵠⵠ: 0,
      ΔⲆΔⵠⵠᐃⵠ: document.getElementById("sign_object"),
      ⵠᐃⲆΔⲆⵠⲆ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃᐃΔᐃΔ]),
      ΔΔᐃΔⵠᐃⲆ: function () {
        var a = Math.floor(Math.floor((3 + Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ.length) / Eg) * (10 + ⵠᐃ[rs.ⲆᐃᐃᐃⲆⵠᐃ][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 150) + "px";
        this.style.top = Math.floor(eq - 115) + "px";
      },
      ⵠⲆᐃΔⲆ: function () {
        Uw.sign.style.display = "none";
        Uw.sign.open = fk;
      },
      select: function () {
        Uw.sign.open = !Uw.sign.open;
        if (Uw.sign.open) {
          Uw.sign.style.display = "inline-block";
        } else {
          Uw.sign.style.display = "none";
        }
      },
      ok: function () {
        ΔⵠⲆⲆ.ⵠⵠⲆΔΔⲆⵠᐃᐃ(Sw.sign.ⲆΔⵠᐃΔ, Uw.sign.ⵠᐃⲆΔⲆⵠⲆ);
        Uw.sign.select();
      },
      up: function () {
        Uw.sign.ⵠᐃⲆΔⲆⵠⲆ = Uw.sign.ⵠᐃⲆΔⲆⵠⲆ === Eu ? bw.ΔⲆᐃΔⲆⵠΔ - 1 : Uw.sign.ⵠᐃⲆΔⲆⵠⲆ - Ws;
        Uw.sign.ΔⲆΔⵠⵠᐃⵠ.src = "./img/sign" + Uw.sign.ⵠᐃⲆΔⲆⵠⲆ + ".png";
      },
      down: function () {
        Uw.sign.ⵠᐃⲆΔⲆⵠⲆ = (Uw.sign.ⵠᐃⲆΔⲆⵠⲆ + 1) % bw.ΔⲆᐃΔⲆⵠΔ;
        Uw.sign.ΔⲆΔⵠⵠᐃⵠ.src = "./img/sign" + Uw.sign.ⵠᐃⲆΔⲆⵠⲆ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, xl);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, ke);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ⵠⲆΔᐃᐃ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ⵠⲆⲆᐃᐃ: Ng,
        b: ck,
        a: Qh,
        ⲆⲆⲆⲆΔ: rs.ⲆᐃᐃᐃⲆⵠᐃ
      }, {
        id: $r,
        name: "stone",
        ⵠⲆⲆᐃᐃ: 1,
        b: bq,
        a: Kg,
        ⲆⲆⲆⲆΔ: rs.ᐃⲆΔΔΔⵠⵠ
      }, {
        id: nl,
        name: "gold",
        ⵠⲆⲆᐃᐃ: 1,
        b: 1,
        a: Sg,
        ⲆⲆⲆⲆΔ: rs.ᐃᐃⲆⲆΔⵠⵠ
      }, {
        id: Kb,
        name: "diamond",
        ⵠⲆⲆᐃᐃ: qa,
        b: 4,
        a: og,
        ⲆⲆⲆⲆΔ: rs.ΔΔᐃⵠᐃΔᐃ
      }, {
        id: 4,
        name: "amethyst",
        ⵠⲆⲆᐃᐃ: 8,
        b: 8,
        a: ck,
        ⲆⲆⲆⲆΔ: rs.ᐃⲆⲆⵠⲆᐃᐃ
      }, {
        id: 5,
        name: "reidite",
        ⵠⲆⲆᐃᐃ: 16,
        b: Rj,
        a: uq,
        ⲆⲆⲆⲆΔ: rs.ᐃᐃⲆᐃⵠᐃⵠ
      }, {
        id: es,
        name: "pumpkin_seed",
        ⵠⲆⲆᐃᐃ: 10,
        b: j,
        a: 1,
        ⲆⲆⲆⲆΔ: rs.ⵠⲆᐃⵠΔΔⲆ
      }, {
        id: Ka,
        name: "carrot_seed",
        ⵠⲆⲆᐃᐃ: la,
        b: Bg,
        a: 1,
        ⲆⲆⲆⲆΔ: rs.ΔᐃᐃⵠⲆΔⲆ
      }, {
        id: Sr,
        name: "tomato_seed",
        ⵠⲆⲆᐃᐃ: 20,
        b: hs,
        a: ck,
        ⲆⲆⲆⲆΔ: rs.ⲆⲆⲆⵠᐃΔⲆ
      }, {
        id: Mi,
        name: "thornbush_seed",
        ⵠⲆⲆᐃᐃ: 30,
        b: 30,
        a: 1,
        ⲆⲆⲆⲆΔ: rs.ⲆⵠⲆΔᐃᐃᐃ
      }, {
        id: Sd,
        name: "garlic_seed",
        ⵠⲆⲆᐃᐃ: 40,
        b: 40,
        a: hj,
        ⲆⲆⲆⲆΔ: rs.ᐃᐃΔᐃⲆΔⵠ
      }, {
        id: 11,
        name: "watermelon_seed",
        ⵠⲆⲆᐃᐃ: 60,
        b: 60,
        a: 1,
        ⲆⲆⲆⲆΔ: rs.ΔⵠΔⵠΔᐃⵠ
      }],
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ]),
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 450) + "px";
        this.style.top = Math.floor(eq - 270) + "px";
      },
      select: function () {
        Uw.ⵠⲆΔᐃᐃ.open = !Uw.ⵠⲆΔᐃᐃ.open;
        if (Uw.ⵠⲆΔᐃᐃ.open) {
          Uw.ⵠⲆΔᐃᐃ.style.display = "inline-block";
        } else {
          Uw.ⵠⲆΔᐃᐃ.style.display = "none";
        }
      },
      ⵠⲆᐃΔⲆ: function () {
        Uw.ⵠⲆΔᐃᐃ.style.display = "none";
        Uw.ⵠⲆΔᐃᐃ.open = Qo;
      },
      ᐃⲆΔⵠⲆᐃⲆ: function () {
        ΔⵠⲆⲆ.ⲆⵠᐃΔⵠⵠΔΔᐃ(this.ΔᐃΔⵠΔΔⵠ);
      },
      ⵠⲆⵠΔⲆ: function () {
        this.id;
        if (this.ΔᐃΔⵠΔΔⵠ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ΔᐃΔⵠΔΔⵠ.b);
          this.ΔᐃΔⵠΔΔⵠ.ⵠⲆⲆᐃᐃ = a;
          document.getElementById(this.ΔᐃΔⵠΔΔⵠ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ΔᐃΔⵠΔΔⵠ.a);
          this.ΔᐃΔⵠΔΔⵠ.ⵠⲆⲆᐃᐃ = a;
          document.getElementById(this.ΔᐃΔⵠΔΔⵠ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠⲆΔᐃᐃ.ⵠⲆᐃΔⲆ, false);
    var e = [["mouseup", this.ⵠⲆΔᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ, "buy_"], ["click", this.ⵠⲆΔᐃᐃ.ⵠⲆⵠΔⲆ, ""], ["change", this.ⵠⲆΔᐃᐃ.ⵠⲆⵠΔⲆ, ""], ["keypress", this.ⵠⲆΔᐃᐃ.keypress, ""]];
    for (var i = Hb; this.ⵠⲆΔᐃᐃ.items.length > i; i++) {
      var k = this.ⵠⲆΔᐃᐃ.items[i];
      document.getElementById(k.name + "_market").src = ⵠᐃ[k.ⲆⲆⲆⲆΔ][0].ᐃⵠΔⲆΔ === undefined ? ⵠᐃ[k.ⲆⲆⲆⲆΔ][Yl].src : ⵠᐃ[k.ⲆⲆⲆⲆΔ][0].ᐃⵠΔⲆΔ;
      if (k.a === 1) {
        document.getElementById(k.name + "_trad_number").innerHTML = k.b;
        document.getElementById(k.name + "_number").value = 1;
        document.getElementById(k.name + "_number").step = 1;
        document.getElementById(k.name + "_number").min = bq;
        document.getElementById(k.name + "_number").max = Math.floor($i / k.b);
      } else {
        document.getElementById(k.name + "_trad_number").innerHTML = og;
        document.getElementById(k.name + "_number").value = k.a;
        document.getElementById(k.name + "_number").step = k.a;
        document.getElementById(k.name + "_number").min = k.a;
      }
      document.getElementById("buy_" + k.name + "_number").ΔᐃΔⵠΔΔⵠ = k;
      document.getElementById(k.name + "_number").ΔᐃΔⵠΔΔⵠ = k;
      for (var l = Eu; l < e.length; l++) {
        document.getElementById(e[l][Xj] + k.name + "_number").addEventListener(e[l][gj], e[l][ck], Zg);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: qn,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⵠᐃᐃΔΔ: document.getElementById("agree_ing").style,
      ΔΔᐃⲆⲆⵠⵠ: document.getElementById("cancel_agree_ing").style,
      ᐃΔⵠΔᐃΔⲆ: document.getElementById("quest_agree_ing").style,
      ⲆΔΔⵠᐃᐃΔ: document.getElementById("spectator_agree_ing").style,
      ⵠᐃᐃᐃᐃᐃⲆ: document.getElementById("auto_feed_agree_ing").style,
      ⵠⵠⵠΔⲆⵠⵠ: document.getElementById("info_agree_ing").style,
      ᐃᐃⲆΔΔⵠΔ: document.getElementById("pixelated_agree_ing").style,
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ]),
      ᐃΔᐃⲆᐃⲆⲆⲆΔ: function () {
        Uw.options.open = !Uw.options.open;
        if (Uw.options.open) {
          Uw.options.style.display = "inline-block";
        } else {
          Uw.options.style.display = "none";
        }
      },
      ⲆΔᐃΔᐃⲆⲆⵠΔ: function () {
        hf.ⵠᐃΔⵠⵠⵠΔ();
      },
      ⲆⲆᐃⲆⲆΔΔΔᐃ: function () {
        hf.ⵠΔΔΔΔΔⲆ();
      },
      high: function () {
        hf.ⲆⲆΔΔⲆᐃⵠⲆΔ();
      },
      low: function () {
        hf.ⲆΔⵠΔⵠΔⲆΔᐃ();
      },
      ⲆᐃΔⵠΔ: function () {
        Uw.ⲆⲆⵠᐃ.ⲆᐃΔⵠΔ();
      },
      ⲆⲆⲆᐃⵠⵠΔᐃⲆ: function () {
        Uw.ᐃⲆⲆᐃΔ.ⲆᐃΔⵠΔ();
      },
      ⲆΔΔᐃᐃⲆⵠᐃⲆ: function () {
        Uw.ᐃᐃΔΔ.ⲆᐃΔⵠΔ();
      },
      ⲆΔⲆⵠⵠΔⲆⲆⲆ: function () {
        Sw.ⲆΔⲆⵠᐃⵠⵠ.ⵠΔᐃⲆⲆⲆΔ();
      },
      ⲆΔᐃᐃⵠⲆⲆᐃⵠ: function () {
        Sw.ΔⲆⵠⵠΔ.ⵠΔᐃⲆⲆⲆΔ();
      },
      ⵠⲆᐃΔⲆ: function () {
        Uw.options.style.display = "none";
        Uw.options.open = false;
      },
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 235) + "px";
        this.style.top = Math.floor(eq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⲆΔᐃΔᐃⲆⲆⵠΔ, Qo);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆⲆᐃⲆⲆΔΔΔᐃ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⵠⲆᐃΔⲆ, false);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⲆᐃΔⵠΔ, false);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆΔΔᐃᐃⲆⵠᐃⲆ, Bh);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆⲆᐃⵠⵠΔᐃⲆ, zn);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⲆΔⲆⵠⵠΔⲆⲆⲆ, Va);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆΔᐃᐃⵠⲆⲆᐃⵠ, false);
    this.ᐃⲆⲆᐃΔ = {
      open: fk,
      ⲆⲆᐃⲆⵠ: ᐃΔⲆΔ.get("starve_cancel") ? ᐃΔⲆΔ.get("starve_cancel") === "0" ? 0 : uq : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⵠᐃᐃΔΔ: document.getElementById("cancel_agree").style,
      button: Et,
      ⲆΔ: 0,
      ⵠⲆᐃΔⲆ: function () {
        Uw.ᐃⲆⲆᐃΔ.style.display = "none";
        Uw.ᐃⲆⲆᐃΔ.open = Cl;
      },
      ᐃⲆⵠΔΔΔᐃ: function () {
        if (Sw.ⵠⲆⲆΔ.ⵠΔᐃΔⵠ) {
          ΔⵠⲆⲆ.ⵠᐃᐃⲆᐃⲆⲆⲆᐃ();
        }
        Uw.ᐃⲆⲆᐃΔ.ⵠⲆᐃΔⲆ();
      },
      ⲆᐃΔⵠΔ: function () {
        if (Uw.ᐃⲆⲆᐃΔ.ⲆⲆᐃⲆⵠ) {
          ᐃΔⲆΔ.set("starve_cancel", "0");
          Uw.ᐃⲆⲆᐃΔ.ⵠᐃᐃΔΔ.display = "inline-block";
          Uw.options.ΔΔᐃⲆⲆⵠⵠ.display = "none";
        } else {
          ᐃΔⲆΔ.set("starve_cancel", "1");
          Uw.ᐃⲆⲆᐃΔ.ⵠᐃᐃΔΔ.display = "none";
          Uw.options.ΔΔᐃⲆⲆⵠⵠ.display = "inline-block";
        }
        Uw.ᐃⲆⲆᐃΔ.ⲆⲆᐃⲆⵠ = !Uw.ᐃⲆⲆᐃΔ.ⲆⲆᐃⲆⵠ;
      },
      ᐃⵠⵠⵠⵠᐃΔ: function () {
        if (this.ⲆⲆᐃⲆⵠ) {
          this.style.display = "inline-block";
          this.open = zj;
        } else {
          this.ᐃⲆⵠΔΔΔᐃ();
        }
      },
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 235) + "px";
        this.style.top = Math.floor(eq - 130) + "px";
      }
    };
    this.ᐃⲆⲆᐃΔ.id.oncontextmenu = function () {
      return false;
    };
    this.ᐃⲆⲆᐃΔ.ⵠᐃᐃΔΔ.display = "none";
    if (this.ᐃⲆⲆᐃΔ.ⲆⲆᐃⲆⵠ) {
      this.options.ΔΔᐃⲆⲆⵠⵠ.display = "inline-block";
    } else {
      this.options.ΔΔᐃⲆⲆⵠⵠ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃⲆⲆᐃΔ.ᐃⲆⵠΔΔΔᐃ, xl);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃⲆⲆᐃΔ.ⵠⲆᐃΔⲆ, As);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃⲆⲆᐃΔ.ⲆᐃΔⵠΔ, ol);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ⵠⵠⲆᐃΔΔΔ = {
      ⲆⲆᐃⲆⵠ: ᐃΔⲆΔ.get("starve_aliasing") && ᐃΔⲆΔ.get("starve_aliasing") === "0" ? dt : 1,
      ΔᐃⲆⵠⲆΔⵠ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ⲆᐃΔⵠΔ: function () {
        if (Uw.ⵠⵠⲆᐃΔΔΔ.ⲆⲆᐃⲆⵠ === Et) {
          ᐃΔⲆΔ.set("starve_aliasing", "1");
          Uw.ⵠⵠⲆᐃΔΔΔ.ΔᐃⲆⵠⲆΔⵠ(bq);
          Uw.options.ᐃᐃⲆΔΔⵠΔ.display = "inline-block";
        } else {
          ᐃΔⲆΔ.set("starve_aliasing", "0");
          Uw.ⵠⵠⲆᐃΔΔΔ.ΔᐃⲆⵠⲆΔⵠ(Xa);
          Uw.options.ᐃᐃⲆΔΔⵠΔ.display = "none";
        }
        Uw.ⵠⵠⲆᐃΔΔΔ.ⲆⲆᐃⲆⵠ = (Uw.ⵠⵠⲆᐃΔΔΔ.ⲆⲆᐃⲆⵠ + $r) % nq;
      }
    };
    if (this.ⵠⵠⲆᐃΔΔΔ.ⲆⲆᐃⲆⵠ === 1) {
      this.options.ᐃᐃⲆΔΔⵠΔ.display = "inline-block";
    } else {
      this.ⵠⵠⲆᐃΔΔΔ.ΔᐃⲆⵠⲆΔⵠ(hk);
      this.options.ᐃᐃⲆΔΔⵠΔ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⵠⵠⲆᐃΔΔΔ.ⲆᐃΔⵠΔ, Va);
    this.ᐃΔΔᐃⵠ = {
      ⲆⲆᐃⲆⵠ: ᐃΔⲆΔ.get("starve_info_box") && ᐃΔⲆΔ.get("starve_info_box") === "0" ? Go : 1,
      display: 0,
      x: 0,
      y: fs,
      id: Yl,
      ⵠⲆⲆΔ: ho,
      ⲆᐃΔⵠΔ: function () {
        if (Uw.ᐃΔΔᐃⵠ.ⲆⲆᐃⲆⵠ === 0) {
          ᐃΔⲆΔ.set("starve_info_box", "1");
          Uw.options.ⵠⵠⵠΔⲆⵠⵠ.display = "inline-block";
        } else {
          ᐃΔⲆΔ.set("starve_info_box", "0");
          Uw.options.ⵠⵠⵠΔⲆⵠⵠ.display = "none";
        }
        Uw.ᐃΔΔᐃⵠ.ⲆⲆᐃⲆⵠ = (Uw.ᐃΔΔᐃⵠ.ⲆⲆᐃⲆⵠ + or) % Ir;
      },
      ⵠΔⵠᐃ: function (a, b, c) {
        if (a && this.ⲆⲆᐃⲆⵠ) {
          this.display = 1;
          this.id = c === Yl ? b.id : ht[b.id].ΔⲆΔΔ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⵠⲆⲆΔ = c;
        }
        return a;
      }
    };
    if (this.ᐃΔΔᐃⵠ.ⲆⲆᐃⲆⵠ === 1) {
      this.options.ⵠⵠⵠΔⲆⵠⵠ.display = "inline-block";
    } else {
      this.options.ⵠⵠⵠΔⲆⵠⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃΔΔᐃⵠ.ⲆᐃΔⵠΔ, zn);
    if (ᐃΔⲆΔ.get("starve_scale")) {
      jq = Number(ᐃΔⲆΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = jq;
      jq *= Er / Fr;
      Hr();
    }
    this.ᐃΔⲆⵠⲆⵠⵠ = function () {
      ᐃΔⲆΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      jq = Er / Fr * document.getElementById("input_ratio").value;
      Hr();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃΔⲆⵠⲆⵠⵠ, false);
    this.ⲆⲆⵠᐃ = {
      open: vs,
      ⲆⲆᐃⲆⵠ: ᐃΔⲆΔ.get("starve_safe") ? ᐃΔⲆΔ.get("starve_safe") === "0" ? 0 : Ng : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⵠᐃᐃΔΔ: document.getElementById("agree").style,
      button: 0,
      ⲆΔ: 0,
      ⵠⲆᐃΔⲆ: function () {
        Uw.ⲆⲆⵠᐃ.style.display = "none";
        Uw.ⲆⲆⵠᐃ.open = false;
      },
      all: function () {
        if (!Sw.ΔⲆⵠⲆΔ.wait) {
          if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Eu && Sw.ⵠⲆⲆΔ.id < Et && !Sw.ΔᐃΔᐃᐃ.enabled) {
            ΔⵠⲆⲆ.ΔⲆⲆᐃⵠΔⲆΔΔ(Uw.ⲆⲆⵠᐃ.button);
          }
          Uw.ⲆⲆⵠᐃ.ⵠⲆᐃΔⲆ();
        }
      },
      ᐃⵠΔΔ: function () {
        if (Sw.ⵠⲆⲆΔ.ⵠⲆⵠⲆⲆ && !Sw.ΔⲆⵠⲆΔ.wait) {
          if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Ob && Sw.ⵠⲆⲆΔ.id < 0 && !Sw.ΔᐃΔᐃᐃ.enabled) {
            ΔⵠⲆⲆ.ᐃⲆⲆΔⵠⲆᐃΔⲆ(Uw.ⲆⲆⵠᐃ.button);
          }
          Uw.ⲆⲆⵠᐃ.ⵠⲆᐃΔⲆ();
        }
      },
      ᐃⵠᐃᐃᐃᐃᐃᐃᐃ: function () {
        if (!Sw.ΔⲆⵠⲆΔ.wait) {
          if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < dt && Sw.ⵠⲆⲆΔ.id < 0 && !Sw.ΔᐃΔᐃᐃ.enabled) {
            ΔⵠⲆⲆ.ⵠⵠᐃᐃΔΔⲆⵠΔ(Uw.ⲆⲆⵠᐃ.button);
          }
          Uw.ⲆⲆⵠᐃ.ⵠⲆᐃΔⲆ();
        }
      },
      ⲆᐃΔⵠΔ: function () {
        if (Uw.ⲆⲆⵠᐃ.ⲆⲆᐃⲆⵠ) {
          ᐃΔⲆΔ.set("starve_safe", "0");
          Uw.ⲆⲆⵠᐃ.ⵠᐃᐃΔΔ.display = "inline-block";
          Uw.options.ⵠᐃᐃΔΔ.display = "none";
        } else {
          ᐃΔⲆΔ.set("starve_safe", "1");
          Uw.ⲆⲆⵠᐃ.ⵠᐃᐃΔΔ.display = "none";
          Uw.options.ⵠᐃᐃΔΔ.display = "inline-block";
        }
        Uw.ⲆⲆⵠᐃ.ⲆⲆᐃⲆⵠ = !Uw.ⲆⲆⵠᐃ.ⲆⲆᐃⲆⵠ;
      },
      ᐃⵠⵠⵠⵠᐃΔ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ⵠᐃ[ws[a].Δᐃ][ou].ᐃⵠΔⲆΔ === undefined ? ⵠᐃ[ws[a].Δᐃ][0].src : ⵠᐃ[ws[a].Δᐃ][Bs].ᐃⵠΔⲆΔ;
        if (ws[a].ᐃⵠΔΔ && !Sw.ⵠⲆΔᐃⲆ && Sw.ⵠⲆⲆΔ.ⵠⲆⵠⲆⲆ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⲆⲆᐃⲆⵠ) {
          this.style.display = "inline-block";
          this.open = yq;
        } else {
          this.all();
        }
      },
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 235) + "px";
        this.style.top = Math.floor(eq - 175) + "px";
      }
    };
    this.ⲆⲆⵠᐃ.ⵠᐃᐃΔΔ.display = "none";
    if (this.ⲆⲆⵠᐃ.ⲆⲆᐃⲆⵠ) {
      this.options.ⵠᐃᐃΔΔ.display = "inline-block";
    } else {
      this.options.ⵠᐃᐃΔΔ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ᐃⵠᐃᐃᐃᐃᐃᐃᐃ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.all, Zg);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ᐃⵠΔΔ, ej);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ⵠⲆᐃΔⲆ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⲆⲆⵠᐃ.ⲆᐃΔⵠΔ, Vq);
    this.ⵠᐃⲆⲆⵠ = {
      open: false,
      ⵠⵠᐃΔⵠ: -1,
      button: Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆⲆⵠⲆⲆ]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 300) + "px";
        this.style.top = Math.floor(eq - 215) + "px";
      },
      ⵠⲆᐃΔⲆ: function () {
        Uw.ⵠᐃⲆⲆⵠ.open = xl;
        Uw.ⵠᐃⲆⲆⵠ.style.display = "none";
      },
      select: function () {
        Uw.ⵠᐃⲆⲆⵠ.open = !Uw.ⵠᐃⲆⲆⵠ.open;
        if (Uw.ⵠᐃⲆⲆⵠ.open) {
          Uw.ⵠᐃⲆⲆⵠ.style.display = "inline-block";
        } else {
          Uw.ⵠᐃⲆⲆⵠ.style.display = "none";
        }
      },
      ᐃⲆΔⵠⲆᐃⲆ: function () {
        if (Uw.ⵠᐃⲆⲆⵠ.ⵠⵠᐃΔⵠ >= 0) {
          ΔⵠⲆⲆ.ΔⲆΔΔⵠⵠΔΔⲆ(Uw.ⵠᐃⲆⲆⵠ.ⵠⵠᐃΔⵠ);
          Uw.ⵠᐃⲆⲆⵠ.ⵠⲆᐃΔⲆ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Uw.ⵠᐃⲆⲆⵠ.ⵠⵠᐃΔⵠ);
          }
        }
      },
      ⲆΔΔⵠΔ: function () {
        var a = Sw.ⵠᐃⲆⲆⵠ.value;
        document.getElementById("points_bank").innerHTML = ⵠⲆᐃⲆ.ⵠΔⵠⵠⲆⵠⵠ(a) + " points";
        for (var b = 0; b < aw.length; b++) {
          if (aw[b].ⲆᐃⲆⵠΔ > a) {
            document.getElementById("starter" + (b + vg)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = uq; b < Bl; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⵠΔⵠⵠⵠⵠΔⲆΔ: function () {
        if (this.id.length > nb) {
          var a = Number(this.id.charAt(7) + this.id.charAt(te));
        } else {
          a = Number(this.id.charAt(Wg));
        }
        var b = aw[a - 1];
        if (Sw.ⵠᐃⲆⲆⵠ.value >= b.ⲆᐃⲆⵠΔ) {
          Uw.ⵠᐃⲆⲆⵠ.ⵠⵠᐃΔⵠ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Uw.ⵠᐃⲆⲆⵠ.ⵠⵠᐃΔⵠ = -Ws;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = Dj, d = 1; c < b.length + El; c++) {
          if (b[c - bq][og] !== ts.ⵠⵠᐃΔ) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ⵠᐃ[ws[b[c - 1][hj]].Δᐃ][ou].ᐃⵠΔⲆΔ === undefined ? ⵠᐃ[ws[b[c - uq][ck]].Δᐃ][vl].src : ⵠᐃ[ws[b[c - bt][1]].Δᐃ][0].ᐃⵠΔⲆΔ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - ck][0];
            d++;
          }
        }
        for (; d < Ga; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠᐃⲆⲆⵠ.ⵠⲆᐃΔⲆ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠᐃⲆⲆⵠ.ᐃⲆΔⵠⲆᐃⲆ, false);
    for (l = 1; l < 11; l++) {
      document.getElementById("starter" + l).addEventListener("mouseup", this.ⵠᐃⲆⲆⵠ.ⵠΔⵠⵠⵠⵠΔⲆΔ, false);
    }
    this.ᐃᐃΔΔ = {
      open: false,
      ⲆⲆᐃⲆⵠ: ᐃΔⲆΔ.get("starve_quests") ? ᐃΔⲆΔ.get("starve_quests") === "1" ? bq : gj : ou,
      button: Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⵠⲆⵠᐃΔ]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃᐃᐃ: function () {
        this.style.left = Math.floor(Ko - 420) + "px";
        this.style.top = Math.floor(eq - 270) + "px";
      },
      ⵠⲆᐃΔⲆ: function () {
        Uw.ᐃᐃΔΔ.style.display = "none";
        Uw.ᐃᐃΔΔ.open = Ag;
      },
      select: function () {
        Uw.ᐃᐃΔΔ.open = !Uw.ᐃᐃΔΔ.open;
        if (Uw.ᐃᐃΔΔ.open) {
          Uw.ᐃᐃΔΔ.style.display = "inline-block";
        } else {
          Uw.ᐃᐃΔΔ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = Go; a < hw.length; a++) {
          this.list[a] = Ng;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ᐃᐃⵠᐃⲆⲆⵠ: 0,
      ᐃⵠⲆᐃΔᐃⵠ: Hb,
      ⵠⵠΔᐃᐃΔᐃⲆᐃ: function () {
        if (Uw.ᐃᐃΔΔ.open) {
          var a = new Date().getTime();
          if (a - this.ᐃᐃⵠᐃⲆⲆⵠ >= 1000) {
            this.ᐃᐃⵠᐃⲆⲆⵠ = a;
            for (var b = Eu; b < hw.length; b++) {
              if (Uw.ᐃᐃΔΔ.list[b]) {
                var c = hw[b].time - (a - uf.ⲆⲆΔᐃᐃ.ⲆΔΔⵠΔ + Uw.ᐃᐃΔΔ.ᐃⵠⲆᐃΔᐃⵠ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = Hb; b < a.length; b++) {
          if (a[b] != 1) {
            Uw.ᐃᐃΔΔ.ⲆⲆⲆⲆᐃΔⵠ(b, a[b]);
          }
        }
      },
      ⲆⲆⲆⲆᐃΔⵠ: function (a, b) {
        if (b === 3 && (a === Tq || a === 12)) {
          Sw.Δᐃⵠᐃ.ΔᐃⵠᐃⲆᐃⵠ(0, 1);
          Uw.ⵠᐃⵠⵠᐃΔⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === ks) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === Ir ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Uw.ᐃᐃΔΔ.list[a] = 0;
      },
      modify: function (a, b) {
        Uw.ᐃᐃΔΔ.ⲆⲆⲆⲆᐃΔⵠ(a, b);
        if (Uw.ᐃᐃΔΔ.ⲆⲆᐃⲆⵠ) {
          Uw.ᐃᐃΔΔ.open = true;
          Uw.ᐃᐃΔΔ.style.display = "inline-block";
        }
      },
      ⲆᐃΔⵠΔ: function () {
        if (Uw.ᐃᐃΔΔ.ⲆⲆᐃⲆⵠ) {
          ᐃΔⲆΔ.set("starve_quests", "0");
          Uw.options.ᐃΔⵠΔᐃΔⲆ.display = "none";
        } else {
          ᐃΔⲆΔ.set("starve_quests", "1");
          Uw.options.ᐃΔⵠΔᐃΔⲆ.display = "inline-block";
        }
        Uw.ᐃᐃΔΔ.ⲆⲆᐃⲆⵠ = !Uw.ᐃᐃΔΔ.ⲆⲆᐃⲆⵠ;
      },
      ᐃΔⲆᐃᐃΔⲆⲆΔ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(Pq));
        if (this.id.charAt(14) !== "" && b >= gj && b <= 9) {
          a = a * sh + b;
        }
        ΔⵠⲆⲆ.ⲆᐃⵠΔᐃᐃⲆΔⵠ(a);
      }
    };
    if (this.ᐃᐃΔΔ.ⲆⲆᐃⲆⵠ) {
      this.options.ᐃΔⵠΔᐃΔⲆ.display = "inline-block";
    } else {
      this.options.ᐃΔⵠΔᐃΔⲆ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃᐃΔΔ.ⵠⲆᐃΔⲆ, false);
    for (l = 0; l < hw.length; l++) {
      document.getElementById("claim_reward_" + l).addEventListener("mouseup", this.ᐃᐃΔΔ.ᐃΔⲆᐃᐃΔⲆⲆΔ, false);
    }
    this.ⵠⲆⵠᐃ = {
      open: ol,
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⵠⲆⲆⵠΔᐃΔ: [],
        ΔᐃⲆⵠᐃⵠᐃ: Hb,
        ᐃᐃᐃ: function () {
          this.style.left = Math.floor(Ko - 335) + "px";
          this.style.top = Math.floor(eq - 215) + "px";
        },
        ⵠⲆᐃΔⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Uw.ⵠⲆⵠᐃ.open = ol;
        },
        ⲆⲆⲆⲆΔᐃⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⲆⵠΔⵠ: function (a) {
          if ((b = this.ⵠⲆⲆⵠΔᐃΔ[a]).ᐃⵠᐃ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ⵠᐃ[ws[b[a][Bs]].Δᐃ][0].ᐃⵠΔⲆΔ === undefined ? ⵠᐃ[ws[b[a][fs]].Δᐃ][Eu].src : ⵠᐃ[ws[b[a][Hb]].Δᐃ][dt].ᐃⵠΔⲆΔ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][vg];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ΔᐃⲆⵠᐃⵠᐃ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < ht.length; b++) {
            var d = ht[b];
            if (a === d.ⵠⲆⵠ) {
              this.ⵠⲆⲆⵠΔᐃΔ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ⵠᐃ[ws[d.ΔⲆΔΔ].Δᐃ][lt].ᐃⵠΔⲆΔ === gg ? ⵠᐃ[ws[d.ΔⲆΔΔ].Δᐃ][gj].src : ⵠᐃ[ws[d.ΔⲆΔΔ].Δᐃ][0].ᐃⵠΔⲆΔ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ΔΔⵠⲆᐃΔᐃ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃᐃᐃ: function () {
          this.style.left = Math.floor(Ko - 285) + "px";
          this.style.top = Math.floor(eq - 170) + "px";
        },
        ⵠⲆᐃΔⲆ: function () {
          document.getElementById("home_craft").style.display = "none";
          Uw.ⵠⲆⵠᐃ.open = false;
        }
      },
      ᐃᐃⲆⲆⲆΔᐃⲆᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⵠⲆⵠᐃ.ΔΔⵠⲆᐃΔᐃ.ⵠⲆᐃΔⲆ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⵠⲆⵠᐃ.list.ⵠⲆᐃΔⲆ, ke);
    document.getElementById("backhome").addEventListener("mouseup", this.ⵠⲆⵠᐃ.list.ⲆⲆⲆⲆΔᐃⲆ, zn);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Uw.ⵠⲆⵠᐃ.list.select(us.ᐃᐃᐃᐃⵠ);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Uw.ⵠⲆⵠᐃ.list.select(us.ᐃⵠᐃⵠΔ);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Uw.ⵠⲆⵠᐃ.list.select(us.ⲆᐃⲆⲆⲆ);
    }, Bh);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Uw.ⵠⲆⵠᐃ.list.select(us.ⵠᐃΔⲆⲆ);
    }, ol);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Uw.ⵠⲆⵠᐃ.list.select(us.ᐃⲆⵠⲆⵠ);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Uw.ⵠⲆⵠᐃ.list.select(us.ᐃᐃⲆⵠΔ);
    }, zn);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(1);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Ci);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(3);
    }, As);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Dl);
    }, ro);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(5);
    }, ej);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Rb);
    }, ej);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(7);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(I);
    }, vs);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Mi);
    }, Zg);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Sd);
    }, Qo);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(11);
    }, Vl);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(aa);
    }, Ag);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Gg);
    }, ej);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(Bo);
    }, qn);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(vo);
    }, Vq);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(ij);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(21);
    }, ke);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(24);
    }, false);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(26);
    }, Vq);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(27);
    }, Bh);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(28);
    }, false);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(29);
    }, zn);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(30);
    }, fk);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(31);
    }, fk);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(32);
    }, ej);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(34);
    }, ke);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(36);
    }, false);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(37);
    }, zn);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(38);
    }, Ps);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(40);
    }, Mq);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(42);
    }, Zg);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(46);
    }, As);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Uw.ⵠⲆⵠᐃ.list.ⲆⵠΔⵠ(47);
    }, Vl);
    this.ⲆⲆⵠΔⲆ = {
      translate: {
        x: dt,
        y: gj
      },
      ᐃⲆⲆⵠⲆⲆⵠ: {
        y: -1,
        x: -1
      },
      ⲆᐃΔΔ: [],
      focus: function (a) {
        var b = this.translate.y + (Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ᐃⲆⲆⵠⲆⲆⵠ.x = a.x - this.translate.x;
          this.ᐃⲆⲆⵠⲆⲆⵠ.y = a.y - b;
        }
      }
    };
    this.ᐃⵠΔᐃⲆ = {
      translate: {
        x: Xa,
        y: 0
      },
      Δᐃ: ⵠᐃ[rs.ⲆΔⵠᐃΔⵠⲆ],
      ⵠⵠ: document.createElement("canvas")
    };
    this.ᐃⵠΔᐃⲆ.ⵠⵠ.width = this.ᐃⵠΔᐃⲆ.Δᐃ.width;
    this.ᐃⵠΔᐃⲆ.ⵠⵠ.height = this.ᐃⵠΔᐃⲆ.Δᐃ.height;
    this.ᐃⵠΔᐃⲆ.Δ = this.ᐃⵠΔᐃⲆ.ⵠⵠ.getContext("2d");
    this.ⵠᐃⲆᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      Δᐃ: ⵠᐃ[rs.Δⵠⵠᐃᐃⵠᐃ],
      ᐃⵠΔⲆ: sp,
      y: Ob
    };
    this.ⲆΔΔⵠᐃΔᐃ = function () {
      Δᐃᐃᐃⵠ = document.getElementById("team_box");
      Δᐃᐃᐃⵠ.innerHTML = "";
      Δᐃᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + uf.ⲆᐃΔΔ[Sw.ᐃᐃⵠᐃᐃ[Bs]].ᐃᐃⵠⲆΔ + "</div";
      for (var a = or; a < Sw.ᐃᐃⵠᐃᐃ.length; a++) {
        Δᐃᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + uf.ⲆᐃΔΔ[Sw.ᐃᐃⵠᐃᐃ[a]].ᐃᐃⵠⲆΔ + "</div></div>";
      }
      Δᐃᐃᐃⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      Δᐃᐃᐃⵠ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ΔⵠⲆⲆ.ⲆΔΔⵠᐃΔᐃ, false);
    };
    this.ΔΔᐃΔⵠⲆᐃⵠⲆ = function () {
      Δᐃᐃᐃⵠ = document.getElementById("team_box");
      Δᐃᐃᐃⵠ.innerHTML = "";
      Δᐃᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + uf.ⲆᐃΔΔ[Sw.ᐃᐃⵠᐃᐃ[0]].ᐃᐃⵠⲆΔ + "</div";
      for (var a = or; Sw.ᐃᐃⵠᐃᐃ.length > a; a++) {
        Δᐃᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + uf.ⲆᐃΔΔ[Sw.ᐃᐃⵠᐃᐃ[a]].ᐃᐃⵠⲆΔ + "</div></div>";
      }
      Δᐃᐃᐃⵠ.innerHTML += "</div>";
      Δᐃᐃᐃⵠ.style.display = "inline-block";
    };
    this.ΔⲆΔⵠΔⵠᐃΔⲆ = function () {
      Δᐃᐃᐃⵠ = document.getElementById("team_box");
      Δᐃᐃᐃⵠ.innerHTML = "";
      Δᐃᐃᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + uf.ⲆᐃΔΔ[Sw.ᐃᐃⵠᐃᐃ[0]].ᐃᐃⵠⲆΔ + "</div";
      for (var a = y; a < Sw.ᐃᐃⵠᐃᐃ.length; a++) {
        Δᐃᐃᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + uf.ⲆᐃΔΔ[Sw.ᐃᐃⵠᐃᐃ[a]].ᐃᐃⵠⲆΔ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Sw.ⲆⲆⲆᐃΔ.lock === 0) {
        Δᐃᐃᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        Δᐃᐃᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ΔⵠⲆⲆ.ᐃΔΔⵠⵠᐃⵠΔⲆ, fk);
      Δᐃᐃᐃⵠ.style.display = "inline-block";
      for (a = Ws; a < Sw.ᐃᐃⵠᐃᐃ.length; a++) {
        switch (a) {
          case vg:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(bq);
            }, false);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(2);
            }, vs);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(wn);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(Yr);
            }, Va);
            break;
          case zq:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(5);
            }, As);
            break;
          case pi:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(6);
            }, Vq);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(Ka);
            }, Mq);
            break;
          case yn:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ΔⵠⲆⲆ.ⵠΔⵠᐃⵠᐃⵠ(I);
            }, false);
        }
      }
    };
    this.ᐃΔⵠΔᐃ = [];
    this.ᐃΔⵠΔᐃ[bw.ᐃⲆᐃⵠᐃΔᐃ] = {
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ]),
      action: this.ⲆΔΔⵠᐃΔᐃ
    };
    this.ᐃΔⵠΔᐃ[bw.ⲆᐃΔΔᐃⵠΔ] = {
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ]),
      action: ΔⵠⲆⲆ.ⵠⵠΔΔⵠⲆΔᐃⵠ
    };
    this.ᐃΔⵠΔᐃ[bw.ⲆΔᐃΔⲆΔᐃ] = {
      button: Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠᐃΔⵠⲆ]),
      action: this.ΔⲆΔⵠΔⵠᐃΔⲆ
    };
    this.ᐃΔⵠΔᐃ[bw.ᐃⵠΔⵠΔᐃΔ] = {
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔᐃᐃᐃⵠ]),
      action: this.ΔΔᐃΔⵠⲆᐃⵠⲆ
    };
    this.ᐃΔⵠΔᐃ[bw.ᐃⲆᐃΔΔΔΔ] = {
      button: Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔᐃⲆΔᐃ]),
      action: function () { }
    };
    this.ΔⲆⲆΔᐃ = -1;
    this.ⲆΔᐃᐃΔΔΔ = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃⵠᐃⲆⵠ]);
    this.ⲆⵠⵠΔⵠᐃⲆ = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆⲆᐃΔΔ]);
    this.ΔⲆᐃΔⵠⲆⲆ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔᐃᐃⲆⵠ]);
    this.ⲆⲆΔⵠΔᐃⵠ = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠᐃⵠᐃⲆ]);
    this.ⲆΔᐃⲆΔⵠᐃ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔᐃᐃⲆⵠ]);
    this.ⵠⲆᐃΔⵠΔᐃ = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃᐃⲆⵠᐃ]);
    this.ᐃΔⲆⵠⵠⲆΔ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔΔΔⵠⵠ]);
    this.ⵠⵠᐃⲆᐃⲆΔ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆⲆΔⵠⵠ]);
    this.ᐃⵠⵠΔᐃⵠⲆ = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⵠᐃΔᐃ]);
    this.ᐃⵠⵠΔᐃΔΔ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆⵠⲆᐃᐃ]);
    this.ᐃⵠᐃΔⲆⵠΔ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ]);
    this.ⵠᐃᐃⲆⵠⲆⲆ = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆⲆᐃⲆⲆ]);
    this.ⲆⲆᐃⵠᐃΔΔ = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔᐃⲆⲆⵠⲆ]);
    this.ΔⵠΔΔᐃⲆΔ = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆΔⵠⲆΔ]);
    this.ⲆΔⲆⲆᐃⲆⲆ = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⲆΔᐃΔ]);
    this.ᐃⲆᐃΔⲆ = Sv(120, 120, 0, ⵠᐃ[rs.ΔⵠᐃⵠΔ]);
    this.ᐃⲆᐃΔⲆ.info.translate.x = cl;
    this.ᐃⲆᐃΔⲆ.info.translate.y = 10;
    this.ΔⲆᐃ = [];
    this.ΔⲆᐃ[ts.ⲆⲆΔᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔΔΔΔΔⲆ], wq);
    this.ΔⲆᐃ[ts.ⲆⲆΔᐃⵠ].id = ts.ⲆⲆΔᐃⵠ;
    this.ΔⲆᐃ[ts.ⵠᐃΔΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠⵠΔΔΔⵠ], R);
    this.ΔⲆᐃ[ts.ⵠᐃΔΔᐃ].id = ts.ⵠᐃΔΔᐃ;
    this.ΔⲆᐃ[ts.ⵠΔΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔᐃⲆᐃᐃ], 3);
    this.ΔⲆᐃ[ts.ⵠΔΔⲆ].id = ts.ⵠΔΔⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆᐃᐃΔⵠ], Ab);
    this.ΔⲆᐃ[ts.ᐃⲆᐃΔ].id = ts.ᐃⲆᐃΔ;
    this.ΔⲆᐃ[ts.ⲆⲆⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃᐃΔⵠΔⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆⵠᐃᐃ].id = ts.ⲆⲆⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ⵠⵠᐃⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⲆᐃΔᐃⵠ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠᐃⵠⲆ].id = ts.ⵠⵠᐃⵠⲆ;
    this.ΔⲆᐃ[ts.ΔᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃᐃ], 3);
    this.ΔⲆᐃ[ts.ΔᐃⲆⲆ].id = ts.ΔᐃⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃⲆᐃⲆΔΔ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠ].id = ts.ᐃⲆΔⵠ;
    this.ΔⲆᐃ[ts.ᐃⵠⵠΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃⲆᐃⲆⲆⵠ], yr);
    this.ΔⲆᐃ[ts.ᐃⵠⵠΔΔ].id = ts.ᐃⵠⵠΔΔ;
    this.ΔⲆᐃ[ts.ᐃᐃΔΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆⲆⵠⲆⲆ], _g);
    this.ΔⲆᐃ[ts.ᐃᐃΔΔⵠ].id = ts.ᐃᐃΔΔⵠ;
    this.ΔⲆᐃ[ts.ⲆᐃΔⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆΔⵠⵠⲆⵠ], kl);
    this.ΔⲆᐃ[ts.ⲆᐃΔⵠⵠ].id = ts.ⲆᐃΔⵠⵠ;
    this.ΔⲆᐃ[ts.ⵠⵠⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆᐃΔΔΔᐃ], Jh);
    this.ΔⲆᐃ[ts.ⵠⵠⲆⲆⲆ].id = ts.ⵠⵠⲆⲆⲆ;
    this.ΔⲆᐃ[ts.ΔᐃⵠΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆΔⵠΔⲆᐃ], Oj);
    this.ΔⲆᐃ[ts.ΔᐃⵠΔⲆ].id = ts.ΔᐃⵠΔⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆΔⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⲆᐃⲆΔⵠ], Kb);
    this.ΔⲆᐃ[ts.ᐃⲆΔⲆⵠ].id = ts.ᐃⲆΔⲆⵠ;
    this.ΔⲆᐃ[ts.ΔᐃⵠΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃᐃΔⲆᐃᐃ], kl);
    this.ΔⲆᐃ[ts.ΔᐃⵠΔᐃ].id = ts.ΔᐃⵠΔᐃ;
    this.ΔⲆᐃ[ts.ⵠΔⵠⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔⲆΔΔΔ], Gt);
    this.ΔⲆᐃ[ts.ⵠΔⵠⲆΔ].id = ts.ⵠΔⵠⲆΔ;
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔΔΔⵠΔ], Kl);
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠⵠ].id = ts.ⵠⵠⵠⵠⵠ;
    this.ΔⲆᐃ[ts.ⲆΔΔᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃⵠΔᐃⵠᐃ], Qh);
    this.ΔⲆᐃ[ts.ⲆΔΔᐃⲆ].id = ts.ⲆΔΔᐃⲆ;
    this.ΔⲆᐃ[ts.ⲆⵠΔⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⵠᐃΔⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⲆⵠΔⵠΔ].id = ts.ⲆⵠΔⵠΔ;
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⲆⲆⵠⵠᐃ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠᐃ].id = ts.ⵠⵠⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ⲆΔⲆᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔⵠᐃⵠΔ], wn);
    this.ΔⲆᐃ[ts.ⲆΔⲆᐃᐃ].id = ts.ⲆΔⲆᐃᐃ;
    this.ΔⲆᐃ[ts.ΔⲆΔⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔᐃⵠᐃⵠⵠ], Kl);
    this.ΔⲆᐃ[ts.ΔⲆΔⵠΔ].id = ts.ΔⲆΔⵠΔ;
    this.ΔⲆᐃ[ts.ⵠⲆΔⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃᐃⲆⵠⲆΔ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆΔⲆⲆ].id = ts.ⵠⲆΔⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃⵠΔᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠⲆⲆᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃⵠΔᐃⵠ].id = ts.ᐃⵠΔᐃⵠ;
    this.ΔⲆᐃ[ts.ΔᐃᐃⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆᐃⲆⵠⲆ], yr);
    this.ΔⲆᐃ[ts.ΔᐃᐃⲆᐃ].id = ts.ΔᐃᐃⲆᐃ;
    this.ΔⲆᐃ[ts.ⵠΔᐃⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔΔᐃⵠⵠΔ], Gt);
    this.ΔⲆᐃ[ts.ⵠΔᐃⵠᐃ].id = ts.ⵠΔᐃⵠᐃ;
    this.ΔⲆᐃ[ts.ᐃΔΔΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠⲆⵠⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃΔΔΔⲆ].id = ts.ᐃΔΔΔⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆⵠᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⵠⵠᐃᐃⵠ], wn);
    this.ΔⲆᐃ[ts.ᐃⲆⵠᐃⲆ].id = ts.ᐃⲆⵠᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠⲆⲆⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⲆᐃⲆⲆᐃ], wn);
    this.ΔⲆᐃ[ts.ⵠⲆⲆⲆΔ].id = ts.ⵠⲆⲆⲆΔ;
    this.ΔⲆᐃ[ts.ⵠᐃⲆᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃᐃΔⲆⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠᐃⲆᐃᐃ].id = ts.ⵠᐃⲆᐃᐃ;
    this.ΔⲆᐃ[ts.ᐃΔⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆΔⲆᐃᐃᐃ], Qh);
    this.ΔⲆᐃ[ts.ᐃΔⵠᐃᐃ].id = ts.ᐃΔⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ⲆⵠⵠⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔΔⵠⵠⵠΔ], 3);
    this.ΔⲆᐃ[ts.ⲆⵠⵠⵠΔ].id = ts.ⲆⵠⵠⵠΔ;
    this.ΔⲆᐃ[ts.ᐃⲆᐃⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃΔΔⲆⲆΔ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆᐃⵠⵠ].id = ts.ᐃⲆᐃⵠⵠ;
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠⵠⵠⲆⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠΔ].id = ts.ᐃⲆΔⵠΔ;
    this.ΔⲆᐃ[ts.ⲆᐃⲆⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⲆⲆᐃⲆⵠ], Ss);
    this.ΔⲆᐃ[ts.ⲆᐃⲆⵠⲆ].id = ts.ⲆᐃⲆⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⵠᐃⲆⲆᐃ], Oj);
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠΔ].id = ts.ⵠⵠⵠⵠΔ;
    this.ΔⲆᐃ[ts.ⲆᐃΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃΔΔⲆⲆ], wn);
    this.ΔⲆᐃ[ts.ⲆᐃΔᐃΔ].id = ts.ⲆᐃΔᐃΔ;
    this.ΔⲆᐃ[ts.ⵠᐃΔᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔᐃΔⵠᐃΔ], wq);
    this.ΔⲆᐃ[ts.ⵠᐃΔᐃᐃ].id = ts.ⵠᐃΔᐃᐃ;
    this.ΔⲆᐃ[ts.ΔⵠΔᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃᐃⲆᐃΔᐃ], Kb);
    this.ΔⲆᐃ[ts.ΔⵠΔᐃⵠ].id = ts.ΔⵠΔᐃⵠ;
    this.ΔⲆᐃ[ts.ⵠⲆⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⵠᐃⲆⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆⲆΔⵠ].id = ts.ⵠⲆⲆΔⵠ;
    this.ΔⲆᐃ[ts.ᐃᐃᐃΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃΔⵠⲆⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃᐃΔⵠ].id = ts.ᐃᐃᐃΔⵠ;
    this.ΔⲆᐃ[ts.ᐃⲆΔᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⵠΔⵠⲆⵠ], kl);
    this.ΔⲆᐃ[ts.ᐃⲆΔᐃᐃ].id = ts.ᐃⲆΔᐃᐃ;
    this.ΔⲆᐃ[ts.ΔΔΔⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⵠᐃΔᐃⵠ], Ui);
    this.ΔⲆᐃ[ts.ΔΔΔⵠⵠ].id = ts.ΔΔΔⵠⵠ;
    this.ΔⲆᐃ[ts.ΔΔⵠⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃⵠΔⵠΔ], Xg);
    this.ΔⲆᐃ[ts.ΔΔⵠⵠⲆ].id = ts.ΔΔⵠⵠⲆ;
    this.ΔⲆᐃ[ts.ⲆⲆᐃᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔᐃΔⵠⵠⲆ], Ds);
    this.ΔⲆᐃ[ts.ⲆⲆᐃᐃⵠ].id = ts.ⲆⲆᐃᐃⵠ;
    this.ΔⲆᐃ[ts.ⲆΔᐃⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⲆΔⵠΔᐃ], Qh);
    this.ΔⲆᐃ[ts.ⲆΔᐃⵠᐃ].id = ts.ⲆΔᐃⵠᐃ;
    this.ΔⲆᐃ[ts.ΔⲆⵠΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠⲆΔⵠᐃⲆ], kl);
    this.ΔⲆᐃ[ts.ΔⲆⵠΔᐃ].id = ts.ΔⲆⵠΔᐃ;
    this.ΔⲆᐃ[ts.ⲆΔΔΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔΔᐃΔⲆⵠ], Jh);
    this.ΔⲆᐃ[ts.ⲆΔΔΔᐃ].id = ts.ⲆΔΔΔᐃ;
    this.ΔⲆᐃ[ts.ᐃⵠⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆⵠⲆⵠΔ], wn);
    this.ΔⲆᐃ[ts.ᐃⵠⲆᐃⲆ].id = ts.ᐃⵠⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ⲆΔΔΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆᐃᐃᐃⵠΔ], 3);
    this.ΔⲆᐃ[ts.ⲆΔΔΔΔ].id = ts.ⲆΔΔΔΔ;
    this.ΔⲆᐃ[ts.ⵠⲆⲆⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠⵠΔᐃΔᐃ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆⲆⵠⲆ].id = ts.ⵠⲆⲆⵠⲆ;
    this.ΔⲆᐃ[ts.ΔⲆⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆᐃΔᐃᐃᐃ], 3);
    this.ΔⲆᐃ[ts.ΔⲆⲆⲆⲆ].id = ts.ΔⲆⲆⲆⲆ;
    this.ΔⲆᐃ[ts.ΔⲆⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠΔⵠᐃⵠᐃ], wq);
    this.ΔⲆᐃ[ts.ΔⲆⵠⵠᐃ].id = ts.ΔⲆⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ᐃⲆⵠⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃᐃⲆᐃΔⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆⵠⵠⲆ].id = ts.ᐃⲆⵠⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃᐃΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⲆⵠⵠΔᐃ], R);
    this.ΔⲆᐃ[ts.ⵠᐃᐃΔⵠ].id = ts.ⵠᐃᐃΔⵠ;
    this.ΔⲆᐃ[ts.ΔΔᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⲆⲆⲆΔⵠ], Qq);
    this.ΔⲆᐃ[ts.ΔΔᐃⲆⲆ].id = ts.ΔΔᐃⲆⲆ;
    this.ΔⲆᐃ[ts.ⵠⵠⲆⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⲆⲆᐃⲆΔ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠⲆⲆⵠ].id = ts.ⵠⵠⲆⲆⵠ;
    this.ΔⲆᐃ[ts.ΔⵠΔᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⲆΔᐃⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ΔⵠΔᐃᐃ].id = ts.ΔⵠΔᐃᐃ;
    this.ΔⲆᐃ[ts.ΔⵠᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔⵠⵠⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⵠᐃⲆⲆ].id = ts.ΔⵠᐃⲆⲆ;
    this.ΔⲆᐃ[ts.ⲆΔΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠΔⵠⲆⲆ], Gt);
    this.ΔⲆᐃ[ts.ⲆΔΔᐃΔ].id = ts.ⲆΔΔᐃΔ;
    this.ΔⲆᐃ[ts.ΔⲆⵠᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⲆⲆᐃⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⲆⵠᐃⲆ].id = ts.ΔⲆⵠᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠⲆᐃⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠᐃⵠᐃΔⲆ], _g);
    this.ΔⲆᐃ[ts.ⵠⲆᐃⲆⵠ].id = ts.ⵠⲆᐃⲆⵠ;
    this.ΔⲆᐃ[ts.ⲆⲆⲆⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠᐃΔⲆⲆΔ], Jh);
    this.ΔⲆᐃ[ts.ⲆⲆⲆⵠΔ].id = ts.ⲆⲆⲆⵠΔ;
    this.ΔⲆᐃ[ts.ⲆΔᐃⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠΔⲆᐃⲆⵠ], Ia);
    this.ΔⲆᐃ[ts.ⲆΔᐃⲆⵠ].id = ts.ⲆΔᐃⲆⵠ;
    this.ΔⲆᐃ[ts.ΔᐃᐃΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆΔⵠⲆⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ΔᐃᐃΔᐃ].id = ts.ΔᐃᐃΔᐃ;
    this.ΔⲆᐃ[ts.ⲆᐃΔⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⵠⵠⵠᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃΔⲆᐃ].id = ts.ⲆᐃΔⲆᐃ;
    this.ΔⲆᐃ[ts.ΔᐃⵠⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠΔΔⵠⲆ], Oj);
    this.ΔⲆᐃ[ts.ΔᐃⵠⵠΔ].id = ts.ΔᐃⵠⵠΔ;
    this.ΔⲆᐃ[ts.ΔⵠΔⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆΔⲆⵠⲆΔ], 3);
    this.ΔⲆᐃ[ts.ΔⵠΔⵠⲆ].id = ts.ΔⵠΔⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠΔⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆⵠΔⵠᐃ], yr);
    this.ΔⲆᐃ[ts.ⵠΔⵠΔⵠ].id = ts.ⵠΔⵠΔⵠ;
    this.ΔⲆᐃ[ts.ⲆᐃᐃⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆᐃᐃⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃᐃⲆΔ].id = ts.ⲆᐃᐃⲆΔ;
    this.ΔⲆᐃ[ts.ᐃᐃⵠᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆΔⵠΔⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃⵠᐃΔ].id = ts.ᐃᐃⵠᐃΔ;
    this.ΔⲆᐃ[ts.ⵠⵠⵠⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃΔⵠⵠⵠⵠ], wq);
    this.ΔⲆᐃ[ts.ⵠⵠⵠⲆⵠ].id = ts.ⵠⵠⵠⲆⵠ;
    this.ΔⲆᐃ[ts.ΔⲆᐃⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠΔⲆΔᐃΔ], 3);
    this.ΔⲆᐃ[ts.ΔⲆᐃⵠⲆ].id = ts.ΔⲆᐃⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃᐃᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⵠⵠᐃΔⲆ], Oj);
    this.ΔⲆᐃ[ts.ⵠᐃᐃᐃΔ].id = ts.ⵠᐃᐃᐃΔ;
    this.ΔⲆᐃ[ts.ⵠⲆⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔᐃⵠⵠΔΔ], Ui);
    this.ΔⲆᐃ[ts.ⵠⲆⵠᐃᐃ].id = ts.ⵠⲆⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ⲆⲆᐃᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆⵠⵠᐃⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆᐃᐃⲆ].id = ts.ⲆⲆᐃᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠΔⵠᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔΔΔΔⲆ], Qq);
    this.ΔⲆᐃ[ts.ⵠΔⵠᐃΔ].id = ts.ⵠΔⵠᐃΔ;
    this.ΔⲆᐃ[ts.ᐃΔᐃᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠᐃⲆΔΔⵠ], Xg);
    this.ΔⲆᐃ[ts.ᐃΔᐃᐃⲆ].id = ts.ᐃΔᐃᐃⲆ;
    this.ΔⲆᐃ[ts.Δᐃⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃΔΔᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.Δᐃⵠⵠᐃ].id = ts.Δᐃⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ᐃΔⵠΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆᐃⵠΔⲆ], Qq);
    this.ΔⲆᐃ[ts.ᐃΔⵠΔⲆ].id = ts.ᐃΔⵠΔⲆ;
    this.ΔⲆᐃ[ts.ΔⲆⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔΔⵠΔΔ], 3);
    this.ΔⲆᐃ[ts.ΔⲆⵠᐃᐃ].id = ts.ΔⲆⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ⵠᐃΔⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔᐃⵠⲆᐃ], Ss);
    this.ΔⲆᐃ[ts.ⵠᐃΔⲆⵠ].id = ts.ⵠᐃΔⲆⵠ;
    this.ΔⲆᐃ[ts.ⲆⲆᐃⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃΔᐃⵠⲆⵠ], Ss);
    this.ΔⲆᐃ[ts.ⲆⲆᐃⲆΔ].id = ts.ⲆⲆᐃⲆΔ;
    this.ΔⲆᐃ[ts.ΔⵠΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔΔⵠΔΔⵠ], 3);
    this.ΔⲆᐃ[ts.ΔⵠΔᐃΔ].id = ts.ΔⵠΔᐃΔ;
    this.ΔⲆᐃ[ts.ⵠⲆⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃᐃⵠⵠⵠΔ], wq);
    this.ΔⲆᐃ[ts.ⵠⲆⵠⵠᐃ].id = ts.ⵠⲆⵠⵠᐃ;
    this.ΔⲆᐃ[ts.Ⲇᐃᐃᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⲆΔΔΔⲆ], wn);
    this.ΔⲆᐃ[ts.Ⲇᐃᐃᐃⵠ].id = ts.Ⲇᐃᐃᐃⵠ;
    this.ΔⲆᐃ[ts.ᐃᐃⵠⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⵠⵠΔΔᐃ], Ss);
    this.ΔⲆᐃ[ts.ᐃᐃⵠⵠⲆ].id = ts.ᐃᐃⵠⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃΔⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⲆᐃΔⵠΔ], 3);
    this.ΔⲆᐃ[ts.ⵠᐃΔⵠⲆ].id = ts.ⵠᐃΔⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠⵠᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⲆⵠⵠᐃΔ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠᐃΔ].id = ts.ⵠⵠᐃΔ;
    this.ΔⲆᐃ[ts.ⲆΔⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔᐃⵠᐃⲆ], kl);
    this.ΔⲆᐃ[ts.ⲆΔⲆᐃ].id = ts.ⲆΔⲆᐃ;
    this.ΔⲆᐃ[ts.ⵠΔⲆⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠᐃΔΔⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠΔⲆⵠⲆ].id = ts.ⵠΔⲆⵠⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⲆⲆΔⵠⵠ], Jh);
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠⵠ].id = ts.ᐃⲆΔⵠⵠ;
    this.ΔⲆᐃ[ts.ΔᐃΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⵠᐃⲆΔᐃ], Qh);
    this.ΔⲆᐃ[ts.ΔᐃΔᐃΔ].id = ts.ΔᐃΔᐃΔ;
    this.ΔⲆᐃ[ts.ΔΔᐃⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠᐃᐃⲆⲆᐃ], wn);
    this.ΔⲆᐃ[ts.ΔΔᐃⵠΔ].id = ts.ΔΔᐃⵠΔ;
    this.ΔⲆᐃ[ts.ΔⲆⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠᐃⵠⲆᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⲆⲆΔⵠ].id = ts.ΔⲆⲆΔⵠ;
    this.ΔⲆᐃ[ts.ᐃⵠⵠᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃᐃᐃΔΔⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃⵠⵠᐃⵠ].id = ts.ᐃⵠⵠᐃⵠ;
    this.ΔⲆᐃ[ts.ⲆⵠΔΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⲆⲆⵠⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆⵠΔΔⲆ].id = ts.ⲆⵠΔΔⲆ;
    this.ΔⲆᐃ[ts.ⲆΔᐃⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠΔᐃⵠᐃΔ], kl);
    this.ΔⲆᐃ[ts.ⲆΔᐃⵠⵠ].id = ts.ⲆΔᐃⵠⵠ;
    this.ΔⲆᐃ[ts.ᐃᐃΔⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔΔᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃΔⵠΔ].id = ts.ᐃᐃΔⵠΔ;
    this.ΔⲆᐃ[ts.ᐃΔᐃⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⲆᐃᐃΔᐃ], Kl);
    this.ΔⲆᐃ[ts.ᐃΔᐃⲆᐃ].id = ts.ᐃΔᐃⲆᐃ;
    this.ΔⲆᐃ[ts.ⲆᐃΔΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆᐃⲆⵠΔᐃ], Ss);
    this.ΔⲆᐃ[ts.ⲆᐃΔΔΔ].id = ts.ⲆᐃΔΔΔ;
    this.ΔⲆᐃ[ts.ⲆᐃⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔΔΔⵠᐃ], Oj);
    this.ΔⲆᐃ[ts.ⲆᐃⲆᐃⲆ].id = ts.ⲆᐃⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠⵠΔΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⵠᐃᐃⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠΔΔΔ].id = ts.ⵠⵠΔΔΔ;
    this.ΔⲆᐃ[ts.ⵠΔⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⵠΔΔᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠΔⲆᐃⲆ].id = ts.ⵠΔⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ᐃⵠⲆᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃᐃΔⵠᐃᐃ], Qq);
    this.ΔⲆᐃ[ts.ᐃⵠⲆᐃⵠ].id = ts.ᐃⵠⲆᐃⵠ;
    this.ΔⲆᐃ[ts.ⵠᐃⵠⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃⲆⲆΔᐃⲆ], Kl);
    this.ΔⲆᐃ[ts.ⵠᐃⵠⲆᐃ].id = ts.ⵠᐃⵠⲆᐃ;
    this.ΔⲆᐃ[ts.ⵠΔⲆᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠⵠⲆⲆᐃΔ], Oj);
    this.ΔⲆᐃ[ts.ⵠΔⲆᐃⵠ].id = ts.ⵠΔⲆᐃⵠ;
    this.ΔⲆᐃ[ts.ΔΔⲆⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⲆᐃΔⲆΔ], Ab);
    this.ΔⲆᐃ[ts.ΔΔⲆⵠΔ].id = ts.ΔΔⲆⵠΔ;
    this.ΔⲆᐃ[ts.ΔⵠᐃⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃᐃᐃᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.ΔⵠᐃⵠΔ].id = ts.ΔⵠᐃⵠΔ;
    this.ΔⲆᐃ[ts.ΔⵠⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠᐃⲆⵠⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ΔⵠⲆⲆⲆ].id = ts.ΔⵠⲆⲆⲆ;
    this.ΔⲆᐃ[ts.ⲆΔᐃⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⲆⵠΔⵠΔ], 3);
    this.ΔⲆᐃ[ts.ⲆΔᐃⲆᐃ].id = ts.ⲆΔᐃⲆᐃ;
    this.ΔⲆᐃ[ts.ⲆΔⲆⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⲆⵠΔΔⵠ], Ds);
    this.ΔⲆᐃ[ts.ⲆΔⲆⵠᐃ].id = ts.ⲆΔⲆⵠᐃ;
    this.ΔⲆᐃ[ts.ⲆⲆⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃᐃⲆⲆⲆ], Qq);
    this.ΔⲆᐃ[ts.ⲆⲆⲆⲆⲆ].id = ts.ⲆⲆⲆⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃⵠⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔᐃᐃⵠⵠⵠ], R);
    this.ΔⲆᐃ[ts.ᐃⵠⲆΔⵠ].id = ts.ᐃⵠⲆΔⵠ;
    this.ΔⲆᐃ[ts.ᐃᐃⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⲆⵠᐃⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃⵠⵠᐃ].id = ts.ᐃᐃⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ⲆⲆΔΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔᐃᐃⲆⲆ], Oj);
    this.ΔⲆᐃ[ts.ⲆⲆΔΔΔ].id = ts.ⲆⲆΔΔΔ;
    this.ΔⲆᐃ[ts.ᐃΔᐃᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔᐃᐃᐃⵠΔ], kl);
    this.ΔⲆᐃ[ts.ᐃΔᐃᐃᐃ].id = ts.ᐃΔᐃᐃᐃ;
    this.ΔⲆᐃ[ts.ΔⵠⲆⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⵠᐃⵠᐃⲆ], _g);
    this.ΔⲆᐃ[ts.ΔⵠⲆⲆⵠ].id = ts.ΔⵠⲆⲆⵠ;
    this.ΔⲆᐃ[ts.ᐃΔⵠⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔⵠⲆΔᐃ], Qh);
    this.ΔⲆᐃ[ts.ᐃΔⵠⵠⵠ].id = ts.ᐃΔⵠⵠⵠ;
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⲆⵠⲆⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆΔⵠᐃ].id = ts.ᐃⲆΔⵠᐃ;
    this.ΔⲆᐃ[ts.ⲆᐃⵠΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠᐃⵠΔⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃⵠΔⲆ].id = ts.ⲆᐃⵠΔⲆ;
    this.ΔⲆᐃ[ts.ΔⵠᐃΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠⲆΔᐃΔ], 3);
    this.ΔⲆᐃ[ts.ΔⵠᐃΔⵠ].id = ts.ΔⵠᐃΔⵠ;
    this.ΔⲆᐃ[ts.ⲆⲆⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔⲆⲆᐃⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆⲆᐃⲆ].id = ts.ⲆⲆⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆᐃⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆᐃⵠᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆᐃⵠᐃ].id = ts.ᐃⲆᐃⵠᐃ;
    this.ΔⲆᐃ[ts.ΔᐃⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠᐃᐃⲆΔⵠ], yr);
    this.ΔⲆᐃ[ts.ΔᐃⵠΔⵠ].id = ts.ΔᐃⵠΔⵠ;
    this.ΔⲆᐃ[ts.ⵠⲆⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃΔᐃⵠΔⵠ], Jh);
    this.ΔⲆᐃ[ts.ⵠⲆⵠΔⵠ].id = ts.ⵠⲆⵠΔⵠ;
    this.ΔⲆᐃ[ts.ᐃⲆᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⵠⲆⵠⵠⲆ], Qh);
    this.ΔⲆᐃ[ts.ᐃⲆᐃⲆⲆ].id = ts.ᐃⲆᐃⲆⲆ;
    this.ΔⲆᐃ[ts.ΔΔⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠⲆⵠΔᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ΔΔⲆᐃⲆ].id = ts.ΔΔⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠⵠⲆΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⵠΔⵠᐃΔ], R);
    this.ΔⲆᐃ[ts.ⵠⵠⲆΔⲆ].id = ts.ⵠⵠⲆΔⲆ;
    this.ΔⲆᐃ[ts.ᐃᐃⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔⵠΔΔⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃⵠΔⵠ].id = ts.ᐃᐃⵠΔⵠ;
    this.ΔⲆᐃ[ts.ΔⲆᐃΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆΔⲆΔⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⲆᐃΔΔ].id = ts.ΔⲆᐃΔΔ;
    this.ΔⲆᐃ[ts.ΔⵠⲆᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠᐃΔΔⲆⵠ], sd);
    this.ΔⲆᐃ[ts.ΔⵠⲆᐃⵠ].id = ts.ΔⵠⲆᐃⵠ;
    this.ΔⲆᐃ[ts.ΔⵠⲆⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⲆⵠⲆΔⲆ], Ui);
    this.ΔⲆᐃ[ts.ΔⵠⲆⵠⵠ].id = ts.ΔⵠⲆⵠⵠ;
    this.ΔⲆᐃ[ts.ⲆΔⵠᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⲆⵠⲆⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⲆΔⵠᐃⲆ].id = ts.ⲆΔⵠᐃⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆΔⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃⲆⲆΔᐃᐃ], kl);
    this.ΔⲆᐃ[ts.ᐃⲆΔⲆΔ].id = ts.ᐃⲆΔⲆΔ;
    this.ΔⲆᐃ[ts.ⵠⵠⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⵠⲆⲆⵠΔ], yr);
    this.ΔⲆᐃ[ts.ⵠⵠⵠΔⵠ].id = ts.ⵠⵠⵠΔⵠ;
    this.ΔⲆᐃ[ts.ΔᐃΔⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⵠⵠΔⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ΔᐃΔⲆⵠ].id = ts.ΔᐃΔⲆⵠ;
    this.ΔⲆᐃ[ts.ᐃⲆⵠⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⵠᐃΔⲆΔ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆⵠⵠⵠ].id = ts.ᐃⲆⵠⵠⵠ;
    this.ΔⲆᐃ[ts.ΔᐃΔⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆᐃᐃΔⵠᐃ], Ui);
    this.ΔⲆᐃ[ts.ΔᐃΔⲆⲆ].id = ts.ΔᐃΔⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃⵠΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠΔᐃⲆᐃΔ], Xg);
    this.ΔⲆᐃ[ts.ᐃⵠΔᐃΔ].id = ts.ᐃⵠΔᐃΔ;
    this.ΔⲆᐃ[ts.ᐃΔΔⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⲆᐃⵠΔᐃ], sd);
    this.ΔⲆᐃ[ts.ᐃΔΔⲆⵠ].id = ts.ᐃΔΔⲆⵠ;
    this.ΔⲆᐃ[ts.ⵠᐃΔⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⵠΔⲆⵠΔ], Kb);
    this.ΔⲆᐃ[ts.ⵠᐃΔⵠΔ].id = ts.ⵠᐃΔⵠΔ;
    this.ΔⲆᐃ[ts.ᐃⵠⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆΔⲆΔΔⵠ], Ui);
    this.ΔⲆᐃ[ts.ᐃⵠⲆⲆⲆ].id = ts.ᐃⵠⲆⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆⲆΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔⲆⵠΔΔ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆⲆΔⲆ].id = ts.ᐃⲆⲆΔⲆ;
    this.ΔⲆᐃ[ts.ⵠⲆⲆⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔⲆᐃⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆⲆⲆᐃ].id = ts.ⵠⲆⲆⲆᐃ;
    this.ΔⲆᐃ[ts.ᐃⲆⲆⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠΔΔⵠᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆⲆⵠΔ].id = ts.ᐃⲆⲆⵠΔ;
    this.ΔⲆᐃ[ts.ⲆⲆⲆⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃΔᐃᐃᐃΔ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆⲆⵠⲆ].id = ts.ⲆⲆⲆⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠⵠⵠⲆⲆ], Oj);
    this.ΔⲆᐃ[ts.ⵠᐃⲆⲆⲆ].id = ts.ⵠᐃⲆⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃⵠⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆΔⲆΔⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃⵠⵠΔⵠ].id = ts.ᐃⵠⵠΔⵠ;
    this.ΔⲆᐃ[ts.ⲆⵠⲆⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆᐃΔⵠⲆⵠ], Xg);
    this.ΔⲆᐃ[ts.ⲆⵠⲆⲆⵠ].id = ts.ⲆⵠⲆⲆⵠ;
    this.ΔⲆᐃ[ts.ⲆᐃᐃᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠΔⵠⲆⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃᐃᐃⲆ].id = ts.ⲆᐃᐃᐃⲆ;
    this.ΔⲆᐃ[ts.ⲆⵠΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⵠⵠᐃᐃΔ], 3);
    this.ΔⲆᐃ[ts.ⲆⵠΔᐃΔ].id = ts.ⲆⵠΔᐃΔ;
    this.ΔⲆᐃ[ts.ⲆⲆΔΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔᐃΔⲆⵠΔ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆΔΔᐃ].id = ts.ⲆⲆΔΔᐃ;
    this.ΔⲆᐃ[ts.ΔⵠⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔⲆᐃᐃΔ], Gt);
    this.ΔⲆᐃ[ts.ΔⵠⵠΔⵠ].id = ts.ΔⵠⵠΔⵠ;
    this.ΔⲆᐃ[ts.Ⲇⵠᐃᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⵠⵠΔᐃΔ], 3);
    this.ΔⲆᐃ[ts.Ⲇⵠᐃᐃⵠ].id = ts.Ⲇⵠᐃᐃⵠ;
    this.ΔⲆᐃ[ts.ⵠⵠᐃᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠᐃⲆΔⵠΔ], _g);
    this.ΔⲆᐃ[ts.ⵠⵠᐃᐃⲆ].id = ts.ⵠⵠᐃᐃⲆ;
    this.ΔⲆᐃ[ts.ᐃⵠⵠⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⵠᐃᐃᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃⵠⵠⲆᐃ].id = ts.ᐃⵠⵠⲆᐃ;
    this.ΔⲆᐃ[ts.ΔΔⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆⵠᐃⲆᐃ], Ia);
    this.ΔⲆᐃ[ts.ΔΔⵠΔⵠ].id = ts.ΔΔⵠΔⵠ;
    this.ΔⲆᐃ[ts.ⵠᐃⵠⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃΔⲆⲆΔⲆ], Ia);
    this.ΔⲆᐃ[ts.ⵠᐃⵠⵠⵠ].id = ts.ⵠᐃⵠⵠⵠ;
    this.ΔⲆᐃ[ts.Δⵠⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆⵠΔⲆⵠ], Kb);
    this.ΔⲆᐃ[ts.Δⵠⵠⵠᐃ].id = ts.Δⵠⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ΔΔⵠⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⵠΔⵠᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ΔΔⵠⲆⲆ].id = ts.ΔΔⵠⲆⲆ;
    this.ΔⲆᐃ[ts.ⲆⲆΔⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠΔⲆᐃᐃΔ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆΔⵠⲆ].id = ts.ⲆⲆΔⵠⲆ;
    this.ΔⲆᐃ[ts.ΔⲆⵠⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠΔⲆΔΔⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⲆⵠⵠⲆ].id = ts.ΔⲆⵠⵠⲆ;
    this.ΔⲆᐃ[ts.ΔⵠⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔΔᐃᐃΔⲆ], Qq);
    this.ΔⲆᐃ[ts.ΔⵠⲆΔⵠ].id = ts.ΔⵠⲆΔⵠ;
    this.ΔⲆᐃ[ts.ΔⲆⵠΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔᐃᐃᐃⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⲆⵠΔⲆ].id = ts.ΔⲆⵠΔⲆ;
    this.ΔⲆᐃ[ts.ⲆⵠⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⲆᐃᐃΔᐃ], 3);
    this.ΔⲆᐃ[ts.ⲆⵠⲆᐃⲆ].id = ts.ⲆⵠⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠⲆᐃⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⲆⵠᐃⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆᐃⵠⵠ].id = ts.ⵠⲆᐃⵠⵠ;
    this.ΔⲆᐃ[ts.Ⲇᐃⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆΔᐃΔΔ], 3);
    this.ΔⲆᐃ[ts.Ⲇᐃⵠᐃᐃ].id = ts.Ⲇᐃⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ΔΔⲆⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠΔΔⲆⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ΔΔⲆⵠⲆ].id = ts.ΔΔⲆⵠⲆ;
    this.ΔⲆᐃ[ts.ⲆⲆᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠΔᐃⲆⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆᐃⲆⲆ].id = ts.ⲆⲆᐃⲆⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃⲆⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⲆⵠⲆⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠᐃⲆⵠᐃ].id = ts.ⵠᐃⲆⵠᐃ;
    this.ΔⲆᐃ[ts.ⵠΔΔⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠΔΔⵠΔΔ], Ds);
    this.ΔⲆᐃ[ts.ⵠΔΔⵠⵠ].id = ts.ⵠΔΔⵠⵠ;
    this.ΔⲆᐃ[ts.ⵠⲆᐃⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔⵠᐃⲆΔ], Kl);
    this.ΔⲆᐃ[ts.ⵠⲆᐃⵠⲆ].id = ts.ⵠⲆᐃⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃⲆΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⵠⵠⵠⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠᐃⲆΔᐃ].id = ts.ⵠᐃⲆΔᐃ;
    this.ΔⲆᐃ[ts.ᐃᐃⵠΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⲆⲆΔⲆⵠ], yr);
    this.ΔⲆᐃ[ts.ᐃᐃⵠΔᐃ].id = ts.ᐃᐃⵠΔᐃ;
    this.ΔⲆᐃ[ts.ⲆⵠⲆⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⵠⲆΔⲆⲆ], R);
    this.ΔⲆᐃ[ts.ⲆⵠⲆⵠᐃ].id = ts.ⲆⵠⲆⵠᐃ;
    this.ΔⲆᐃ[ts.ⲆⵠⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔᐃΔΔⵠ], yr);
    this.ΔⲆᐃ[ts.ⲆⵠⲆΔⵠ].id = ts.ⲆⵠⲆΔⵠ;
    this.ΔⲆᐃ[ts.ΔΔΔⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠΔΔᐃΔⲆ], Kb);
    this.ΔⲆᐃ[ts.ΔΔΔⵠΔ].id = ts.ΔΔΔⵠΔ;
    this.ΔⲆᐃ[ts.ᐃⵠᐃΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆᐃᐃⵠΔ], Jh);
    this.ΔⲆᐃ[ts.ᐃⵠᐃΔΔ].id = ts.ᐃⵠᐃΔΔ;
    this.ΔⲆᐃ[ts.ⵠΔᐃΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⵠᐃᐃΔⵠ], sd);
    this.ΔⲆᐃ[ts.ⵠΔᐃΔᐃ].id = ts.ⵠΔᐃΔᐃ;
    this.ΔⲆᐃ[ts.ⵠⵠⲆΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔⵠᐃⲆᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠⲆΔⵠ].id = ts.ⵠⵠⲆΔⵠ;
    this.ΔⲆᐃ[ts.ⵠⲆⲆᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔᐃΔⲆᐃᐃ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆⲆᐃΔ].id = ts.ⵠⲆⲆᐃΔ;
    this.ΔⲆᐃ[ts.ΔΔΔᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⲆⵠΔⵠⵠ], Jh);
    this.ΔⲆᐃ[ts.ΔΔΔᐃⲆ].id = ts.ΔΔΔᐃⲆ;
    this.ΔⲆᐃ[ts.ⲆᐃᐃⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠᐃᐃΔⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃᐃⵠⲆ].id = ts.ⲆᐃᐃⵠⲆ;
    this.ΔⲆᐃ[ts.ᐃᐃᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔᐃΔⵠΔᐃ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃᐃⲆⲆ].id = ts.ᐃᐃᐃⲆⲆ;
    this.ΔⲆᐃ[ts.ᐃΔⵠᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⲆΔᐃⲆΔ], 3);
    this.ΔⲆᐃ[ts.ᐃΔⵠᐃⵠ].id = ts.ᐃΔⵠᐃⵠ;
    this.ΔⲆᐃ[ts.ᐃΔⲆⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔⵠΔⲆⵠΔ], _g);
    this.ΔⲆᐃ[ts.ᐃΔⲆⵠⲆ].id = ts.ᐃΔⲆⵠⲆ;
    this.ΔⲆᐃ[ts.ᐃⲆⵠⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔΔΔⵠΔⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃⲆⵠⲆΔ].id = ts.ᐃⲆⵠⲆΔ;
    this.ΔⲆᐃ[ts.ⵠᐃⲆⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠⲆΔᐃᐃ], 3);
    this.ΔⲆᐃ[ts.ⵠᐃⲆⵠⵠ].id = ts.ⵠᐃⲆⵠⵠ;
    this.ΔⲆᐃ[ts.ⲆΔᐃΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃⵠΔΔΔ], 3);
    this.ΔⲆᐃ[ts.ⲆΔᐃΔᐃ].id = ts.ⲆΔᐃΔᐃ;
    this.ΔⲆᐃ[ts.ⵠⵠᐃⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠᐃⲆᐃ].id = ts.ⵠⵠᐃⲆᐃ;
    this.ΔⲆᐃ[ts.ᐃΔⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠⲆΔΔⵠᐃ], 3);
    this.ΔⲆᐃ[ts.ᐃΔⵠⵠᐃ].id = ts.ᐃΔⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ⵠΔΔΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠᐃᐃⲆⲆⲆ], Xg);
    this.ΔⲆᐃ[ts.ⵠΔΔΔᐃ].id = ts.ⵠΔΔΔᐃ;
    this.ΔⲆᐃ[ts.ⵠᐃΔΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆᐃᐃⵠⵠΔ], Qq);
    this.ΔⲆᐃ[ts.ⵠᐃΔΔⵠ].id = ts.ⵠᐃΔΔⵠ;
    this.ΔⲆᐃ[ts.ⲆⲆᐃᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔΔᐃΔⵠⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆᐃᐃⵠ].id = ts.ⲆⲆᐃᐃⵠ;
    this.ΔⲆᐃ[ts.ᐃⵠⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆⵠⲆⵠΔ], 3);
    this.ΔⲆᐃ[ts.ᐃⵠⲆᐃⲆ].id = ts.ᐃⵠⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠΔᐃⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⵠᐃⲆⲆⲆ], Ss);
    this.ΔⲆᐃ[ts.ⵠΔᐃⵠⲆ].id = ts.ⵠΔᐃⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠΔᐃⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⵠⲆᐃⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠΔᐃⲆᐃ].id = ts.ⵠΔᐃⲆᐃ;
    this.ΔⲆᐃ[ts.ᐃⲆⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃΔΔΔⵠΔ], Oj);
    this.ΔⲆᐃ[ts.ᐃⲆⵠΔⵠ].id = ts.ᐃⲆⵠΔⵠ;
    this.ΔⲆᐃ[ts.ⵠΔⵠⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔΔΔⵠΔⲆ], Jh);
    this.ΔⲆᐃ[ts.ⵠΔⵠⵠⲆ].id = ts.ⵠΔⵠⵠⲆ;
    this.ΔⲆᐃ[ts.ⵠΔᐃΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆⲆⵠΔⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠΔᐃΔⲆ].id = ts.ⵠΔᐃΔⲆ;
    this.ΔⲆᐃ[ts.ᐃᐃᐃⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔΔⲆⵠⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃᐃⵠΔ].id = ts.ᐃᐃᐃⵠΔ;
    this.ΔⲆᐃ[ts.ΔⲆᐃⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠⵠⲆᐃⵠⵠ], 3);
    this.ΔⲆᐃ[ts.ΔⲆᐃⵠΔ].id = ts.ΔⲆᐃⵠΔ;
    this.ΔⲆᐃ[ts.ᐃΔⲆⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃⵠⵠΔᐃ], Ia);
    this.ΔⲆᐃ[ts.ᐃΔⲆⵠᐃ].id = ts.ᐃΔⲆⵠᐃ;
    this.ᐃⲆΔⲆᐃ = [];
    for (l = 0; l < 250; l++) {
      this.ᐃⲆΔⲆᐃ[l] = Sv(0, 0, 0, ⵠᐃ[rs.ⵠᐃⲆⲆⵠⲆᐃ]);
    }
    this.ⵠⵠᐃ = [];
    this.ⵠⵠᐃ[ts.ⲆⲆΔᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆΔᐃⵠ].id = ts.ⲆⲆΔᐃⵠ;
    this.ⵠⵠᐃ[ts.ⵠᐃΔΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠᐃᐃᐃⵠ], yr);
    this.ⵠⵠᐃ[ts.ⵠᐃΔΔᐃ].id = ts.ⵠᐃΔΔᐃ;
    this.ⵠⵠᐃ[ts.ⵠΔΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔΔΔⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔΔⲆ].id = ts.ⵠΔΔⲆ;
    this.ⵠⵠᐃ[ts.ⵠΔΔⲆ].info.Δᐃ[yl] = this.ⵠⵠᐃ[ts.ⵠΔΔⲆ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ᐃⲆᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃᐃⲆⵠᐃ], _g);
    this.ⵠⵠᐃ[ts.ᐃⲆᐃΔ].id = ts.ᐃⲆᐃΔ;
    this.ⵠⵠᐃ[ts.ᐃⲆᐃΔ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ᐃⲆᐃΔ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ⲆⲆⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔᐃⲆⵠⵠ], R);
    this.ⵠⵠᐃ[ts.ⲆⲆⵠᐃᐃ].id = ts.ⲆⲆⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.ⵠⵠᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃΔΔᐃΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠᐃⵠⲆ].id = ts.ⵠⵠᐃⵠⲆ;
    this.ⵠⵠᐃ[ts.ΔᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆⲆΔⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔᐃⲆⲆ].id = ts.ΔᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔᐃⲆⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ΔᐃⲆⲆ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⵠᐃΔᐃ], Jh);
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠ].id = ts.ᐃⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠ].info.Δᐃ[yl] = this.ⵠⵠᐃ[ts.ᐃⲆΔⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ᐃⵠⵠΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⵠⲆΔⲆⲆ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⵠΔΔ].id = ts.ᐃⵠⵠΔΔ;
    this.ⵠⵠᐃ[ts.ᐃᐃΔΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆΔΔⲆⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃΔΔⵠ].id = ts.ᐃᐃΔΔⵠ;
    this.ⵠⵠᐃ[ts.ⲆᐃΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔⲆⲆⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆᐃΔⵠⵠ].id = ts.ⲆᐃΔⵠⵠ;
    this.ⵠⵠᐃ[ts.ⵠⵠⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆΔⵠᐃⵠ], wn);
    this.ⵠⵠᐃ[ts.ⵠⵠⲆⲆⲆ].id = ts.ⵠⵠⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔᐃⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔⲆᐃΔⲆ], Xg);
    this.ⵠⵠᐃ[ts.ΔᐃⵠΔⲆ].id = ts.ΔᐃⵠΔⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆᐃⵠⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆΔⲆⵠ].id = ts.ᐃⲆΔⲆⵠ;
    this.ⵠⵠᐃ[ts.ΔᐃⵠΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔⵠⵠᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔᐃⵠΔᐃ].id = ts.ΔᐃⵠΔᐃ;
    this.ⵠⵠᐃ[ts.ⵠΔⵠⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠᐃᐃⲆⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔⵠⲆΔ].id = ts.ⵠΔⵠⲆΔ;
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⵠⵠⵠⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠⵠ].id = ts.ⵠⵠⵠⵠⵠ;
    this.ⵠⵠᐃ[ts.ⲆΔΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆᐃᐃⵠⲆ], Ss);
    this.ⵠⵠᐃ[ts.ⲆΔΔᐃⲆ].id = ts.ⲆΔΔᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆⵠΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆⵠⲆᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⵠΔⵠΔ].id = ts.ⲆⵠΔⵠΔ;
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⵠᐃⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠᐃ].id = ts.ⵠⵠⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.ⲆΔⲆᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠᐃᐃᐃΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆΔⲆᐃᐃ].id = ts.ⲆΔⲆᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔⲆΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⲆΔⲆᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆΔⵠΔ].id = ts.ΔⲆΔⵠΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆΔⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆⵠΔⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆΔⲆⲆ].id = ts.ⵠⲆΔⲆⲆ;
    this.ⵠⵠᐃ[ts.ᐃⵠΔᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃᐃΔⲆΔΔ], wn);
    this.ⵠⵠᐃ[ts.ᐃⵠΔᐃⵠ].id = ts.ᐃⵠΔᐃⵠ;
    this.ⵠⵠᐃ[ts.ᐃⵠΔᐃⵠ].info.Δᐃ[nq] = this.ⵠⵠᐃ[ts.ᐃⵠΔᐃⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔᐃᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆᐃᐃᐃΔᐃ], R);
    this.ⵠⵠᐃ[ts.ΔᐃᐃⲆᐃ].id = ts.ΔᐃᐃⲆᐃ;
    this.ⵠⵠᐃ[ts.ⵠΔᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆᐃᐃΔΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔᐃⵠᐃ].id = ts.ⵠΔᐃⵠᐃ;
    this.ⵠⵠᐃ[ts.ᐃΔΔΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃᐃΔⲆⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔΔΔⲆ].id = ts.ᐃΔΔΔⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆⵠᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃⲆ], Oj);
    this.ⵠⵠᐃ[ts.ᐃⲆⵠᐃⲆ].id = ts.ᐃⲆⵠᐃⲆ;
    this.ⵠⵠᐃ[ts.ⵠⲆⲆⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠᐃᐃⵠⵠΔ], R);
    this.ⵠⵠᐃ[ts.ⵠⲆⲆⲆΔ].id = ts.ⵠⲆⲆⲆΔ;
    this.ⵠⵠᐃ[ts.ⵠᐃⲆᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔᐃΔⵠⵠⲆ], Oj);
    this.ⵠⵠᐃ[ts.ⵠᐃⲆᐃᐃ].id = ts.ⵠᐃⲆᐃᐃ;
    this.ⵠⵠᐃ[ts.ᐃΔⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃΔⵠΔⲆᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔⵠᐃᐃ].id = ts.ᐃΔⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.ⲆⵠⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔᐃⲆΔΔ], R);
    this.ⵠⵠᐃ[ts.ⲆⵠⵠⵠΔ].id = ts.ⲆⵠⵠⵠΔ;
    this.ⵠⵠᐃ[ts.ⵠⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ], R);
    this.ⵠⵠᐃ[ts.ⵠⵠᐃΔ].id = ts.ⵠⵠᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⲆᐃⵠⵠᐃ], Qh);
    this.ⵠⵠᐃ[ts.ⵠⲆⲆΔⵠ].id = ts.ⵠⲆⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃᐃᐃΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠᐃⵠΔᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃᐃΔⵠ].id = ts.ᐃᐃᐃΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⲆᐃⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆΔᐃᐃ].id = ts.ᐃⲆΔᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔΔΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆᐃΔΔΔ], 3);
    this.ⵠⵠᐃ[ts.ΔΔΔⵠⵠ].id = ts.ΔΔΔⵠⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔⵠᐃⵠⲆⲆ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⵠⵠ].id = ts.ᐃⲆᐃⵠⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⵠⵠ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ᐃⲆᐃⵠⵠ].info.Δᐃ[Et];
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆΔΔᐃΔ], Qq);
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠΔ].id = ts.ᐃⲆΔⵠΔ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠΔ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ᐃⲆΔⵠΔ].info.Δᐃ[Et];
    this.ⵠⵠᐃ[ts.ⲆᐃⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔⵠΔⵠΔⲆ], Xg);
    this.ⵠⵠᐃ[ts.ⲆᐃⲆⵠⲆ].id = ts.ⲆᐃⲆⵠⲆ;
    this.ⵠⵠᐃ[ts.ⲆᐃⲆⵠⲆ].info.Δᐃ[Ci] = this.ⵠⵠᐃ[ts.ⲆᐃⲆⵠⲆ].info.Δᐃ[fs];
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔⲆⲆ], Qh);
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠΔ].id = ts.ⵠⵠⵠⵠΔ;
    this.ⵠⵠᐃ[ts.ⲆᐃΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃΔⵠ], Qh);
    this.ⵠⵠᐃ[ts.ⲆᐃΔᐃΔ].id = ts.ⲆᐃΔᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠᐃΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠΔⵠ], Jh);
    this.ⵠⵠᐃ[ts.ⵠᐃΔᐃᐃ].id = ts.ⵠᐃΔᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠᐃΔⲆ], Jh);
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃⵠ].id = ts.ΔⵠΔᐃⵠ;
    this.ⵠⵠᐃ[ts.ⵠⲆⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⲆᐃⵠⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆⲆΔⵠ].id = ts.ⵠⲆⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ΔΔⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠⵠⲆⲆᐃ], Ss);
    this.ⵠⵠᐃ[ts.ΔΔⵠⵠⲆ].id = ts.ΔΔⵠⵠⲆ;
    this.ⵠⵠᐃ[ts.ⲆⲆᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃᐃⵠΔᐃ], Ia);
    this.ⵠⵠᐃ[ts.ⲆⲆᐃᐃⵠ].id = ts.ⲆⲆᐃᐃⵠ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.Ⲇⵠⵠⵠⵠᐃⵠ], Qh);
    this.ⵠⵠᐃ[ts.ⲆΔᐃⵠᐃ].id = ts.ⲆΔᐃⵠᐃ;
    this.ⵠⵠᐃ[ts.ΔⲆⵠΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔⵠⵠⵠⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆⵠΔᐃ].id = ts.ΔⲆⵠΔᐃ;
    this.ⵠⵠᐃ[ts.ⲆΔΔΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔΔⵠᐃⵠ], Jh);
    this.ⵠⵠᐃ[ts.ⲆΔΔΔᐃ].id = ts.ⲆΔΔΔᐃ;
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔⲆⲆᐃΔΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⲆ].id = ts.ᐃⵠⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆΔΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆⵠᐃⲆⵠ], _g);
    this.ⵠⵠᐃ[ts.ⲆΔΔΔΔ].id = ts.ⲆΔΔΔΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆΔΔⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆⲆⵠⲆ].id = ts.ⵠⲆⲆⵠⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⲆᐃᐃᐃ], yr);
    this.ⵠⵠᐃ[ts.ΔⲆⲆⲆⲆ].id = ts.ΔⲆⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃᐃⵠᐃⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆⵠⵠᐃ].id = ts.ΔⲆⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆΔᐃⲆⲆΔ], Jh);
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⵠⲆ].id = ts.ᐃⲆⵠⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃᐃΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆⵠΔᐃᐃ], Gt);
    this.ⵠⵠᐃ[ts.ⵠᐃᐃΔⵠ].id = ts.ⵠᐃᐃΔⵠ;
    this.ⵠⵠᐃ[ts.ΔΔᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔΔᐃⲆⲆ].id = ts.ΔΔᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠⵠⲆⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃᐃ].id = ts.ΔⵠΔᐃᐃ;
    this.ⵠⵠᐃ[ts.ⵠⵠⲆⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔⵠᐃⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⲆⲆⵠ].id = ts.ⵠⵠⲆⲆⵠ;
    this.ⵠⵠᐃ[ts.ΔⵠᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠᐃᐃΔΔⲆ], Jh);
    this.ⵠⵠᐃ[ts.ΔⵠᐃⲆⲆ].id = ts.ΔⵠᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆⵠᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆⵠΔⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆⵠᐃⲆ].id = ts.ΔⲆⵠᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆΔΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠⲆⲆⲆⲆ], Gt);
    this.ⵠⵠᐃ[ts.ⲆΔΔᐃΔ].id = ts.ⲆΔΔᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆᐃⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⵠⵠᐃᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆᐃⲆⵠ].id = ts.ⵠⲆᐃⲆⵠ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃⵠⵠⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⲆΔᐃⲆⵠ].id = ts.ⲆΔᐃⲆⵠ;
    this.ⵠⵠᐃ[ts.ⲆⲆⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔⵠᐃᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆⲆⵠΔ].id = ts.ⲆⲆⲆⵠΔ;
    this.ⵠⵠᐃ[ts.ΔᐃᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔⵠΔᐃⵠ], Kb);
    this.ⵠⵠᐃ[ts.ΔᐃᐃΔᐃ].id = ts.ΔᐃᐃΔᐃ;
    this.ⵠⵠᐃ[ts.ΔᐃⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⵠⵠᐃⲆⵠ], yr);
    this.ⵠⵠᐃ[ts.ΔᐃⵠⵠΔ].id = ts.ΔᐃⵠⵠΔ;
    this.ⵠⵠᐃ[ts.ⲆᐃΔⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃⲆΔᐃᐃ], sd);
    this.ⵠⵠᐃ[ts.ⲆᐃΔⲆᐃ].id = ts.ⲆᐃΔⲆᐃ;
    this.ⵠⵠᐃ[ts.ΔⵠΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃⲆⲆⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠΔⵠⲆ].id = ts.ΔⵠΔⵠⲆ;
    this.ⵠⵠᐃ[ts.ⲆᐃᐃⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠΔΔⲆⵠ], _g);
    this.ⵠⵠᐃ[ts.ⲆᐃᐃⲆΔ].id = ts.ⲆᐃᐃⲆΔ;
    this.ⵠⵠᐃ[ts.ⵠΔⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔΔⵠⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔⵠΔⵠ].id = ts.ⵠΔⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃᐃⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆΔᐃΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃⵠᐃΔ].id = ts.ᐃᐃⵠᐃΔ;
    this.ⵠⵠᐃ[ts.ΔⲆᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.Δⵠⵠⵠⵠⵠᐃ], yr);
    this.ⵠⵠᐃ[ts.ΔⲆᐃⵠⲆ].id = ts.ΔⲆᐃⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔⲆᐃΔΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⲆⵠ].id = ts.ⵠⵠⵠⲆⵠ;
    this.ⵠⵠᐃ[ts.ⵠᐃᐃᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆᐃᐃⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃᐃᐃΔ].id = ts.ⵠᐃᐃᐃΔ;
    this.ⵠⵠᐃ[ts.ⲆⲆᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃΔᐃΔᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆᐃᐃⲆ].id = ts.ⲆⲆᐃᐃⲆ;
    this.ⵠⵠᐃ[ts.ⵠⲆⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⵠᐃΔᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆⵠᐃᐃ].id = ts.ⵠⲆⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.ⵠΔⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃᐃⵠⲆⲆ], Oj);
    this.ⵠⵠᐃ[ts.ⵠΔⵠᐃΔ].id = ts.ⵠΔⵠᐃΔ;
    this.ⵠⵠᐃ[ts.ᐃΔᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔΔΔΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔᐃᐃⲆ].id = ts.ᐃΔᐃᐃⲆ;
    this.ⵠⵠᐃ[ts.Δᐃⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠⵠᐃⲆⲆ], Qq);
    this.ⵠⵠᐃ[ts.Δᐃⵠⵠᐃ].id = ts.Δᐃⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.ᐃΔⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆΔᐃⵠⵠ], wn);
    this.ⵠⵠᐃ[ts.ᐃΔⵠΔⲆ].id = ts.ᐃΔⵠΔⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔⲆⲆᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆⵠᐃᐃ].id = ts.ΔⲆⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.ⵠᐃΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⵠΔᐃΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃΔⲆⵠ].id = ts.ⵠᐃΔⲆⵠ;
    this.ⵠⵠᐃ[ts.ⲆⲆᐃⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃᐃⵠΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆᐃⲆΔ].id = ts.ⲆⲆᐃⲆΔ;
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠⲆⵠᐃⵠ], Jh);
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃΔ].id = ts.ΔⵠΔᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔᐃᐃⲆⲆ], Qq);
    this.ⵠⵠᐃ[ts.ⵠⲆⵠⵠᐃ].id = ts.ⵠⲆⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.Ⲇᐃᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃΔΔⲆΔ], Ui);
    this.ⵠⵠᐃ[ts.Ⲇᐃᐃᐃⵠ].id = ts.Ⲇᐃᐃᐃⵠ;
    this.ⵠⵠᐃ[ts.ᐃᐃⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⵠᐃⲆⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃⵠⵠⲆ].id = ts.ᐃᐃⵠⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔΔⲆΔᐃ], Ui);
    this.ⵠⵠᐃ[ts.ⵠᐃΔⵠⲆ].id = ts.ⵠᐃΔⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃΔⵠⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ⵠᐃΔⵠⲆ].info.Δᐃ[jg];
    this.ⵠⵠᐃ[ts.ⵠⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⲆⲆⲆᐃ], Ab);
    this.ⵠⵠᐃ[ts.ⵠⵠᐃΔ].id = ts.ⵠⵠᐃΔ;
    this.ⵠⵠᐃ[ts.ⲆΔⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆⵠⲆᐃᐃ], Kl);
    this.ⵠⵠᐃ[ts.ⲆΔⲆᐃ].id = ts.ⲆΔⲆᐃ;
    this.ⵠⵠᐃ[ts.ⲆΔⲆᐃ].info.Δᐃ[Xj] = this.ⵠⵠᐃ[ts.ⲆΔⲆᐃ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ⵠΔⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠΔⵠΔΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔⲆⵠⲆ].id = ts.ⵠΔⲆⵠⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔᐃⲆⲆᐃⲆ], Ab);
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠⵠ].id = ts.ᐃⲆΔⵠⵠ;
    this.ⵠⵠᐃ[ts.ΔᐃΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃⲆᐃⲆⵠ], Jh);
    this.ⵠⵠᐃ[ts.ΔᐃΔᐃΔ].id = ts.ΔᐃΔᐃΔ;
    this.ⵠⵠᐃ[ts.ΔΔᐃⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃΔⲆⲆⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔΔᐃⵠΔ].id = ts.ΔΔᐃⵠΔ;
    this.ⵠⵠᐃ[ts.ΔⲆⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠⲆⵠⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆⲆΔⵠ].id = ts.ΔⲆⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃⵠⵠᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆᐃΔᐃᐃΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⵠᐃⵠ].id = ts.ᐃⵠⵠᐃⵠ;
    this.ⵠⵠᐃ[ts.ⲆⵠΔΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃᐃΔⲆⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⵠΔΔⲆ].id = ts.ⲆⵠΔΔⲆ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔᐃⵠᐃΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ⲆΔᐃⵠⵠ].id = ts.ⲆΔᐃⵠⵠ;
    this.ⵠⵠᐃ[ts.ᐃᐃΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠᐃⲆⲆᐃΔ], Ss);
    this.ⵠⵠᐃ[ts.ᐃᐃΔⵠΔ].id = ts.ᐃᐃΔⵠΔ;
    this.ⵠⵠᐃ[ts.ᐃΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⲆⲆⲆⲆ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔᐃⲆᐃ].id = ts.ᐃΔᐃⲆᐃ;
    this.ⵠⵠᐃ[ts.ⲆᐃΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃⲆᐃᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆᐃΔΔΔ].id = ts.ⲆᐃΔΔΔ;
    this.ⵠⵠᐃ[ts.ⲆᐃⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃᐃΔᐃΔ], wn);
    this.ⵠⵠᐃ[ts.ⲆᐃⲆᐃⲆ].id = ts.ⲆᐃⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ⵠⵠΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃⵠΔΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠΔΔΔ].id = ts.ⵠⵠΔΔΔ;
    this.ⵠⵠᐃ[ts.ⵠΔⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⵠⵠⵠΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔⲆᐃⲆ].id = ts.ⵠΔⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆⵠΔⲆᐃ], Kb);
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⵠ].id = ts.ᐃⵠⲆᐃⵠ;
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⵠ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⵠ].info.Δᐃ[dh];
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆᐃⵠᐃⵠⲆ], Ab);
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆᐃ].id = ts.ⵠᐃⵠⲆᐃ;
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆᐃ].info.Δᐃ[kg] = this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆᐃ].info.Δᐃ[gj];
    this.ⵠⵠᐃ[ts.ⵠΔⲆᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⲆⵠΔⵠⲆ], Ss);
    this.ⵠⵠᐃ[ts.ⵠΔⲆᐃⵠ].id = ts.ⵠΔⲆᐃⵠ;
    this.ⵠⵠᐃ[ts.ⵠΔⲆᐃⵠ].info.Δᐃ[Xj] = this.ⵠⵠᐃ[ts.ⵠΔⲆᐃⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔΔⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃΔⵠⲆΔΔ], Ab);
    this.ⵠⵠᐃ[ts.ΔΔⲆⵠΔ].id = ts.ΔΔⲆⵠΔ;
    this.ⵠⵠᐃ[ts.ΔΔⲆⵠΔ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ΔΔⲆⵠΔ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔⵠᐃⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠᐃⵠⲆᐃ], Xg);
    this.ⵠⵠᐃ[ts.ΔⵠᐃⵠΔ].id = ts.ΔⵠᐃⵠΔ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⲆΔΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⲆ].id = ts.ΔⵠⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃᐃᐃΔΔ], Qh);
    this.ⵠⵠᐃ[ts.ⲆΔᐃⲆᐃ].id = ts.ⲆΔᐃⲆᐃ;
    this.ⵠⵠᐃ[ts.ⲆΔⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⲆⲆⵠΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆΔⲆⵠᐃ].id = ts.ⲆΔⲆⵠᐃ;
    this.ⵠⵠᐃ[ts.ⲆⲆⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔⵠⵠᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆⲆⲆⲆ].id = ts.ⲆⲆⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ᐃⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠᐃⲆⵠΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⲆΔⵠ].id = ts.ᐃⵠⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃᐃⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⵠΔⵠⵠ], _g);
    this.ⵠⵠᐃ[ts.ᐃᐃⵠⵠᐃ].id = ts.ᐃᐃⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔΔⲆⵠⵠ], Qq);
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔΔ].id = ts.ⲆⲆΔΔΔ;
    this.ⵠⵠᐃ[ts.ᐃΔᐃᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃΔⵠⲆΔ], Jh);
    this.ⵠⵠᐃ[ts.ᐃΔᐃᐃᐃ].id = ts.ᐃΔᐃᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆΔΔᐃᐃ], _g);
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⵠ].id = ts.ΔⵠⲆⲆⵠ;
    this.ⵠⵠᐃ[ts.ᐃΔⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆΔⲆᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔⵠⵠⵠ].id = ts.ᐃΔⵠⵠⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠΔⲆⵠⵠ], Ds);
    this.ⵠⵠᐃ[ts.ᐃⲆΔⵠᐃ].id = ts.ᐃⲆΔⵠᐃ;
    this.ⵠⵠᐃ[ts.ⲆᐃⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⵠⵠⵠⵠΔ], Kl);
    this.ⵠⵠᐃ[ts.ⲆᐃⵠΔⲆ].id = ts.ⲆᐃⵠΔⲆ;
    this.ⵠⵠᐃ[ts.ΔⵠᐃΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠΔⵠⵠⵠ], Ui);
    this.ⵠⵠᐃ[ts.ΔⵠᐃΔⵠ].id = ts.ΔⵠᐃΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔᐃⲆᐃΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⲆⲆ].id = ts.ᐃⲆᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ⲆⲆⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠᐃΔⲆⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆⲆᐃⲆ].id = ts.ⲆⲆⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃⲆΔⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆᐃⵠᐃ].id = ts.ᐃⲆᐃⵠᐃ;
    this.ⵠⵠᐃ[ts.ΔᐃⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆΔⲆΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔᐃⵠΔⵠ].id = ts.ΔᐃⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ⵠⲆⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆⵠⲆⵠΔ], R);
    this.ⵠⵠᐃ[ts.ⵠⲆⵠΔⵠ].id = ts.ⵠⲆⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ΔΔⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆᐃᐃⲆⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔΔⲆᐃⲆ].id = ts.ΔΔⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ΔΔⲆᐃⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ΔΔⲆᐃⲆ].info.Δᐃ[Ob];
    this.ⵠⵠᐃ[ts.ⵠⵠⲆΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔᐃᐃⲆΔΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⲆΔⲆ].id = ts.ⵠⵠⲆΔⲆ;
    this.ⵠⵠᐃ[ts.ᐃᐃⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆⵠᐃᐃⲆ], Gt);
    this.ⵠⵠᐃ[ts.ᐃᐃⵠΔⵠ].id = ts.ᐃᐃⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ΔⲆᐃΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃΔᐃⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆᐃΔΔ].id = ts.ΔⲆᐃΔΔ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⵠΔⲆᐃⲆ], Ia);
    this.ⵠⵠᐃ[ts.ΔⵠⲆᐃⵠ].id = ts.ΔⵠⲆᐃⵠ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠᐃΔⲆᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⲆⵠⵠ].id = ts.ΔⵠⲆⵠⵠ;
    this.ⵠⵠᐃ[ts.ⲆΔⵠᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔᐃⲆⲆⵠ], Ia);
    this.ⵠⵠᐃ[ts.ⲆΔⵠᐃⲆ].id = ts.ⲆΔⵠᐃⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔⲆⲆⲆⲆ], Ds);
    this.ⵠⵠᐃ[ts.ᐃⲆΔⲆΔ].id = ts.ᐃⲆΔⲆΔ;
    this.ⵠⵠᐃ[ts.ⵠⵠⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆᐃⲆᐃᐃ], kl);
    this.ⵠⵠᐃ[ts.ⵠⵠⵠΔⵠ].id = ts.ⵠⵠⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ⵠⵠⵠΔⵠ].info.Δᐃ[cn] = this.ⵠⵠᐃ[ts.ⵠⵠⵠΔⵠ].info.Δᐃ[Eu];
    this.ⵠⵠᐃ[ts.ΔᐃΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠᐃⵠⵠΔᐃ], Ui);
    this.ⵠⵠᐃ[ts.ΔᐃΔⲆⵠ].id = ts.ΔᐃΔⲆⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⲆΔΔᐃᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⵠⵠ].id = ts.ᐃⲆⵠⵠⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⵠⵠ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ᐃⲆⵠⵠⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔᐃΔⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃⲆⲆΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔᐃΔⲆⲆ].id = ts.ΔᐃΔⲆⲆ;
    this.ⵠⵠᐃ[ts.ᐃⵠΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⵠⵠᐃΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠΔᐃΔ].id = ts.ᐃⵠΔᐃΔ;
    this.ⵠⵠᐃ[ts.ᐃΔΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔⲆⵠΔΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔΔⲆⵠ].id = ts.ᐃΔΔⲆⵠ;
    this.ⵠⵠᐃ[ts.ᐃΔΔⲆⵠ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ᐃΔΔⲆⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ⵠᐃΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆᐃΔΔΔᐃ], yr);
    this.ⵠⵠᐃ[ts.ⵠᐃΔⵠΔ].id = ts.ⵠᐃΔⵠΔ;
    this.ⵠⵠᐃ[ts.ᐃⵠⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃᐃⵠⲆΔΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⲆⲆⲆ].id = ts.ᐃⵠⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆⲆΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⵠⲆⲆᐃ], Jh);
    this.ⵠⵠᐃ[ts.ᐃⲆⲆΔⲆ].id = ts.ᐃⲆⲆΔⲆ;
    this.ⵠⵠᐃ[ts.ⵠⲆⲆⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔΔⵠⲆΔ], Kl);
    this.ⵠⵠᐃ[ts.ⵠⲆⲆⲆᐃ].id = ts.ⵠⲆⲆⲆᐃ;
    this.ⵠⵠᐃ[ts.ᐃⲆⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔⲆⵠⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⲆⲆⵠΔ].id = ts.ᐃⲆⲆⵠΔ;
    this.ⵠⵠᐃ[ts.ⲆⲆⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔΔΔΔΔⲆ], Ds);
    this.ⵠⵠᐃ[ts.ⲆⲆⲆⵠⲆ].id = ts.ⲆⲆⲆⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃΔᐃΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃⲆⲆⲆ].id = ts.ⵠᐃⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ᐃⵠⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃΔᐃΔΔ], Qh);
    this.ⵠⵠᐃ[ts.ᐃⵠⵠΔⵠ].id = ts.ᐃⵠⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ⲆⵠⲆⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠΔⲆⲆΔ], kl);
    this.ⵠⵠᐃ[ts.ⲆⵠⲆⲆⵠ].id = ts.ⲆⵠⲆⲆⵠ;
    this.ⵠⵠᐃ[ts.ⲆⵠⲆⲆⵠ].info.Δᐃ[uj] = this.ⵠⵠᐃ[ts.ⲆⵠⲆⲆⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ⲆᐃᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆᐃⲆᐃⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⲆᐃᐃᐃⲆ].id = ts.ⲆᐃᐃᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆᐃᐃᐃⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ⲆᐃᐃᐃⲆ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ⲆⵠΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠΔΔⲆⲆ], Ab);
    this.ⵠⵠᐃ[ts.ⲆⵠΔᐃΔ].id = ts.ⲆⵠΔᐃΔ;
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⵠⵠⲆⲆⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔᐃ].id = ts.ⲆⲆΔΔᐃ;
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔᐃ].info.Δᐃ[ab] = this.ⵠⵠᐃ[ts.ⲆⲆΔΔᐃ].info.Δᐃ[dh];
    this.ⵠⵠᐃ[ts.ΔⵠⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆΔⵠᐃᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⵠΔⵠ].id = ts.ΔⵠⵠΔⵠ;
    this.ⵠⵠᐃ[ts.Ⲇⵠᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⵠ], 3);
    this.ⵠⵠᐃ[ts.Ⲇⵠᐃᐃⵠ].id = ts.Ⲇⵠᐃᐃⵠ;
    this.ⵠⵠᐃ[ts.ⵠⵠᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⵠΔⵠⲆᐃ], Jh);
    this.ⵠⵠᐃ[ts.ⵠⵠᐃᐃⲆ].id = ts.ⵠⵠᐃᐃⲆ;
    this.ⵠⵠᐃ[ts.ᐃⵠⵠⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⲆΔΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⵠⲆᐃ].id = ts.ᐃⵠⵠⲆᐃ;
    this.ⵠⵠᐃ[ts.ΔΔⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆⵠᐃΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔΔⵠΔⵠ].id = ts.ΔΔⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ΔΔⵠΔⵠ].info.Δᐃ[pn] = this.ⵠⵠᐃ[ts.ΔΔⵠΔⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⵠⲆⵠᐃΔ], Qh);
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⵠⵠ].id = ts.ⵠᐃⵠⵠⵠ;
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⵠⵠ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ⵠᐃⵠⵠⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ], Ss);
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔᐃ].id = ts.ΔⵠⲆΔᐃ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⲆⵠᐃ].id = ts.ΔⵠⲆⵠᐃ;
    this.ⵠⵠᐃ[ts.Δⵠⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃΔⵠⵠᐃ], wn);
    this.ⵠⵠᐃ[ts.Δⵠⵠⵠᐃ].id = ts.Δⵠⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.Δⵠⵠⵠᐃ].info.Δᐃ[kg] = this.ⵠⵠᐃ[ts.Δⵠⵠⵠᐃ].info.Δᐃ[lt];
    this.ⵠⵠᐃ[ts.ΔΔⵠⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃΔⲆΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔΔⵠⲆⲆ].id = ts.ΔΔⵠⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔΔⵠⲆⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ΔΔⵠⲆⲆ].info.Δᐃ[Eu];
    this.ⵠⵠᐃ[ts.ⲆⲆΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆΔⵠᐃⲆᐃ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆΔⵠⲆ].id = ts.ⲆⲆΔⵠⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔⲆⲆΔΔ], Ab);
    this.ⵠⵠᐃ[ts.ΔⲆⵠⵠⲆ].id = ts.ΔⲆⵠⵠⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆⵠⵠⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ΔⲆⵠⵠⲆ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⵠᐃΔΔⵠ], Oj);
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔⵠ].id = ts.ΔⵠⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔⵠ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ΔⵠⲆΔⵠ].info.Δᐃ[0];
    this.ⵠⵠᐃ[ts.ΔⲆⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠⵠⵠⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆⵠΔⲆ].id = ts.ΔⲆⵠΔⲆ;
    this.ⵠⵠᐃ[ts.ⲆⵠⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆᐃⲆⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ⲆⵠⲆᐃⲆ].id = ts.ⲆⵠⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆⵠⲆᐃⲆ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ⲆⵠⲆᐃⲆ].info.Δᐃ[Yl];
    this.ⵠⵠᐃ[ts.ⵠⲆᐃⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆᐃΔᐃᐃᐃ], _g);
    this.ⵠⵠᐃ[ts.ⵠⲆᐃⵠⵠ].id = ts.ⵠⲆᐃⵠⵠ;
    this.ⵠⵠᐃ[ts.Ⲇᐃⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃΔᐃⲆⲆ], _g);
    this.ⵠⵠᐃ[ts.Ⲇᐃⵠᐃᐃ].id = ts.Ⲇᐃⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔΔⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠΔⵠⲆΔ], _g);
    this.ⵠⵠᐃ[ts.ΔΔⲆⵠⲆ].id = ts.ΔΔⲆⵠⲆ;
    this.ⵠⵠᐃ[ts.ⲆⲆᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⵠⵠⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆᐃⲆⲆ].id = ts.ⲆⲆᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆⲆⵠⵠΔ], Ds);
    this.ⵠⵠᐃ[ts.ⵠᐃⲆⵠᐃ].id = ts.ⵠᐃⲆⵠᐃ;
    this.ⵠⵠᐃ[ts.ⵠΔΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆᐃⵠⲆⲆ], wn);
    this.ⵠⵠᐃ[ts.ⵠΔΔⵠⵠ].id = ts.ⵠΔΔⵠⵠ;
    this.ⵠⵠᐃ[ts.ⵠⲆᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⲆᐃᐃⵠ], R);
    this.ⵠⵠᐃ[ts.ⵠⲆᐃⵠⲆ].id = ts.ⵠⲆᐃⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⲆᐃⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃⲆΔᐃ].id = ts.ⵠᐃⲆΔᐃ;
    this.ⵠⵠᐃ[ts.ᐃᐃⵠΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠᐃⵠⵠΔ], kl);
    this.ⵠⵠᐃ[ts.ᐃᐃⵠΔᐃ].id = ts.ᐃᐃⵠΔᐃ;
    this.ⵠⵠᐃ[ts.ⲆⵠⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃⵠᐃᐃⵠ], Gt);
    this.ⵠⵠᐃ[ts.ⲆⵠⲆⵠᐃ].id = ts.ⲆⵠⲆⵠᐃ;
    this.ⵠⵠᐃ[ts.ⲆⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃΔᐃⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ⲆⵠⲆΔⵠ].id = ts.ⲆⵠⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ΔΔΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃⵠΔΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔΔΔⵠΔ].id = ts.ΔΔΔⵠΔ;
    this.ⵠⵠᐃ[ts.ᐃⵠᐃΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆⵠᐃⵠΔ], sd);
    this.ⵠⵠᐃ[ts.ᐃⵠᐃΔΔ].id = ts.ᐃⵠᐃΔΔ;
    this.ⵠⵠᐃ[ts.ⵠⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃΔᐃⲆΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⲆΔⵠ].id = ts.ⵠⵠⲆΔⵠ;
    this.ⵠⵠᐃ[ts.ⵠⲆⲆᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔⵠᐃΔΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆⲆᐃΔ].id = ts.ⵠⲆⲆᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠΔᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆΔΔⲆᐃ], R);
    this.ⵠⵠᐃ[ts.ⵠΔᐃΔᐃ].id = ts.ⵠΔᐃΔᐃ;
    this.ⵠⵠᐃ[ts.ΔΔΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆΔᐃᐃᐃ], Kb);
    this.ⵠⵠᐃ[ts.ΔΔΔᐃⲆ].id = ts.ΔΔΔᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆᐃᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⲆⲆᐃᐃⵠ], wq);
    this.ⵠⵠᐃ[ts.ⲆᐃᐃⵠⲆ].id = ts.ⲆᐃᐃⵠⲆ;
    this.ⵠⵠᐃ[ts.ᐃΔⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃⵠⲆΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔⲆⵠⲆ].id = ts.ᐃΔⲆⵠⲆ;
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⲆⲆⲆⵠⲆ], Ia);
    this.ⵠⵠᐃ[ts.ᐃⲆⵠⲆΔ].id = ts.ᐃⲆⵠⲆΔ;
    this.ⵠⵠᐃ[ts.ᐃᐃᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⲆⵠᐃΔⲆ], Kl);
    this.ⵠⵠᐃ[ts.ᐃᐃᐃⲆⲆ].id = ts.ᐃᐃᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ᐃΔⵠᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔⵠⵠⵠᐃ], Xg);
    this.ⵠⵠᐃ[ts.ᐃΔⵠᐃⵠ].id = ts.ᐃΔⵠᐃⵠ;
    this.ⵠⵠᐃ[ts.ⵠᐃⲆⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔⵠΔᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃⲆⵠⵠ].id = ts.ⵠᐃⲆⵠⵠ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆΔΔⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⲆΔᐃΔᐃ].id = ts.ⲆΔᐃΔᐃ;
    this.ⵠⵠᐃ[ts.ⵠⵠᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⲆⵠⲆᐃⵠ], Ss);
    this.ⵠⵠᐃ[ts.ⵠⵠᐃⲆᐃ].id = ts.ⵠⵠᐃⲆᐃ;
    this.ⵠⵠᐃ[ts.ᐃΔⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔΔⵠΔᐃⲆ], Oj);
    this.ⵠⵠᐃ[ts.ᐃΔⵠⵠᐃ].id = ts.ᐃΔⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.ⵠΔΔΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔⵠⲆΔΔ], Kl);
    this.ⵠⵠᐃ[ts.ⵠΔΔΔᐃ].id = ts.ⵠΔΔΔᐃ;
    this.ⵠⵠᐃ[ts.ⵠᐃΔΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆΔⵠⲆΔ], R);
    this.ⵠⵠᐃ[ts.ⵠᐃΔΔⵠ].id = ts.ⵠᐃΔΔⵠ;
    this.ⵠⵠᐃ[ts.ⲆⲆᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃᐃⵠΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆᐃᐃⵠ].id = ts.ⲆⲆᐃᐃⵠ;
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔⲆⲆᐃΔΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃⵠⲆᐃⲆ].id = ts.ᐃⵠⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ⵠΔᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⲆⲆΔⵠΔ], Oj);
    this.ⵠⵠᐃ[ts.ⵠΔᐃⵠⲆ].id = ts.ⵠΔᐃⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔⲆⵠΔΔ], wn);
    this.ⵠⵠᐃ[ts.ⵠΔᐃⲆᐃ].id = ts.ⵠΔᐃⲆᐃ;
    this.ⵠⵠᐃ[ts.ᐃⲆⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠᐃΔⵠⵠⲆ], yr);
    this.ⵠⵠᐃ[ts.ᐃⲆⵠΔⵠ].id = ts.ᐃⲆⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ⵠΔⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔΔⵠⲆⵠⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔⵠⵠⲆ].id = ts.ⵠΔⵠⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠΔᐃΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔⲆⲆΔᐃ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔᐃΔⲆ].id = ts.ⵠΔᐃΔⲆ;
    this.ⵠⵠᐃ[ts.ᐃᐃᐃⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔᐃΔΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃᐃⵠΔ].id = ts.ᐃᐃᐃⵠΔ;
    this.ⵠⵠᐃ[ts.ᐃΔⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃᐃᐃⲆⲆⵠ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔⲆⵠᐃ].id = ts.ᐃΔⲆⵠᐃ;
    this.ⵠⵠᐃ[ts.ΔⲆᐃⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠⵠᐃΔⲆ], yr);
    this.ⵠⵠᐃ[ts.ΔⲆᐃⵠΔ].id = ts.ΔⲆᐃⵠΔ;
    this.ΔᐃΔⲆ = [];
    this.ΔᐃΔⲆ[ss.ⲆⲆΔᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔᐃᐃΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⲆΔᐃⵠ].id = ss.ⲆⲆΔᐃⵠ;
    this.ΔᐃΔⲆ[ss.ⵠᐃΔΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆᐃᐃⵠᐃ], Gt);
    this.ΔᐃΔⲆ[ss.ⵠᐃΔΔᐃ].id = ss.ⵠᐃΔΔᐃ;
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠᐃᐃᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⲆⵠ].id = ss.ᐃⲆΔⲆⵠ;
    this.ΔᐃΔⲆ[ss.ΔᐃⵠΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔᐃⲆΔΔ], Kb);
    this.ΔᐃΔⲆ[ss.ΔᐃⵠΔᐃ].id = ss.ΔᐃⵠΔᐃ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃᐃΔⵠΔ], Gt);
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠⵠ].id = ss.ⵠⵠⵠⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⲆΔΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆΔΔΔᐃᐃ], sd);
    this.ΔᐃΔⲆ[ss.ⲆΔΔᐃⲆ].id = ss.ⲆΔΔᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⵠΔⵠⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆⵠⵠΔⲆ], Xg);
    this.ΔᐃΔⲆ[ss.ⵠΔⵠⲆΔ].id = ss.ⵠΔⵠⲆΔ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔᐃΔΔᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠΔΔ].id = ss.ᐃⵠⵠΔΔ;
    this.ΔᐃΔⲆ[ss.ᐃᐃΔΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃᐃᐃΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃᐃΔΔⵠ].id = ss.ᐃᐃΔΔⵠ;
    this.ΔᐃΔⲆ[ss.ⲆᐃΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠᐃⵠⲆΔᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⲆᐃΔⵠⵠ].id = ss.ⲆᐃΔⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⵠΔΔᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆⲆⲆ].id = ss.ⵠⵠⲆⲆⲆ;
    this.ΔᐃΔⲆ[ss.ΔᐃⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠᐃΔᐃᐃⵠ], Oj);
    this.ΔᐃΔⲆ[ss.ΔᐃⵠΔⲆ].id = ss.ΔᐃⵠΔⲆ;
    this.ΔᐃΔⲆ[ss.ⲆⵠΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠⵠΔᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⵠΔⵠΔ].id = ss.ⲆⵠΔⵠΔ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠΔⲆΔⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠᐃ].id = ss.ⵠⵠⵠⵠᐃ;
    this.ΔᐃΔⲆ[ss.ΔⲆΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆΔᐃⲆⲆ], Kl);
    this.ΔᐃΔⲆ[ss.ΔⲆΔⵠΔ].id = ss.ΔⲆΔⵠΔ;
    this.ΔᐃΔⲆ[ss.ⵠⲆΔⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆΔᐃᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⲆΔⲆⲆ].id = ss.ⵠⲆΔⲆⲆ;
    this.ΔᐃΔⲆ[ss.ΔᐃᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.Ⲇⵠⵠᐃⵠᐃⵠ], 3);
    this.ΔᐃΔⲆ[ss.ΔᐃᐃⲆᐃ].id = ss.ΔᐃᐃⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⵠΔᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃⵠᐃΔⲆ], Kl);
    this.ΔᐃΔⲆ[ss.ⵠΔᐃⵠᐃ].id = ss.ⵠΔᐃⵠᐃ;
    this.ΔᐃΔⲆ[ss.ᐃΔΔΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆΔΔⲆᐃⵠ], Ds);
    this.ΔᐃΔⲆ[ss.ᐃΔΔΔⲆ].id = ss.ᐃΔΔΔⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⲆⵠᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔⵠΔΔⲆ], Ia);
    this.ΔᐃΔⲆ[ss.ᐃⲆⵠᐃⲆ].id = ss.ᐃⲆⵠᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⵠⵠᐃⵠⲆ], Qh);
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆⲆΔ].id = ss.ⵠⲆⲆⲆΔ;
    this.ΔᐃΔⲆ[ss.ⵠᐃⲆᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔⲆⵠⲆⵠ], Kb);
    this.ΔᐃΔⲆ[ss.ⵠᐃⲆᐃᐃ].id = ss.ⵠᐃⲆᐃᐃ;
    this.ΔᐃΔⲆ[ss.ᐃΔⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃⵠΔΔⲆ], Qq);
    this.ΔᐃΔⲆ[ss.ᐃΔⵠᐃᐃ].id = ss.ᐃΔⵠᐃᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⵠⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃⵠᐃⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⵠⵠⵠΔ].id = ss.ⲆⵠⵠⵠΔ;
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔᐃᐃⲆⵠᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃΔ].id = ss.ⵠⵠᐃΔ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⵠⲆⲆᐃᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆΔⵠ].id = ss.ⵠⲆⲆΔⵠ;
    this.ΔᐃΔⲆ[ss.ᐃᐃᐃΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠᐃⵠΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃᐃᐃΔⵠ].id = ss.ᐃᐃᐃΔⵠ;
    this.ΔᐃΔⲆ[ss.ᐃⲆΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠΔᐃᐃᐃᐃ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆΔᐃᐃ].id = ss.ᐃⲆΔᐃᐃ;
    this.ΔᐃΔⲆ[ss.ΔΔΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠΔΔΔⵠᐃ], 3);
    this.ΔᐃΔⲆ[ss.ΔΔΔⵠⵠ].id = ss.ΔΔΔⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⵠⲆⲆᐃᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆΔⵠ].id = ss.ⵠⲆⲆΔⵠ;
    this.ΔᐃΔⲆ[ss.ΔΔⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆⲆΔΔᐃ], Gt);
    this.ΔᐃΔⲆ[ss.ΔΔⵠⵠⲆ].id = ss.ΔΔⵠⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⵠⵠⲆᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃᐃⵠ].id = ss.ⲆⲆᐃᐃⵠ;
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⲆⵠⵠⲆ], Ds);
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⵠᐃ].id = ss.ⲆΔᐃⵠᐃ;
    this.ΔᐃΔⲆ[ss.ΔⲆⵠΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆΔⲆⵠΔ], Ab);
    this.ΔᐃΔⲆ[ss.ΔⲆⵠΔᐃ].id = ss.ΔⲆⵠΔᐃ;
    this.ΔᐃΔⲆ[ss.ⲆΔΔΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆᐃⲆΔᐃ], yr);
    this.ΔᐃΔⲆ[ss.ⲆΔΔΔᐃ].id = ss.ⲆΔΔΔᐃ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔᐃⲆⵠⵠ], Ss);
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆᐃⲆ].id = ss.ᐃⵠⲆᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⲆΔΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆⵠⵠⲆⵠ], Ss);
    this.ΔᐃΔⲆ[ss.ⲆΔΔΔΔ].id = ss.ⲆΔΔΔΔ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃΔⲆᐃⵠ], Ia);
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆⵠⲆ].id = ss.ⵠⲆⲆⵠⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠᐃⵠΔᐃⲆ], wq);
    this.ΔᐃΔⲆ[ss.ΔⲆⲆⲆⲆ].id = ss.ΔⲆⲆⲆⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆᐃⲆΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ΔⲆⵠⵠᐃ].id = ss.ΔⲆⵠⵠᐃ;
    this.ΔᐃΔⲆ[ss.ᐃⲆⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠΔⲆΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆⵠⵠⲆ].id = ss.ᐃⲆⵠⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠᐃᐃΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠᐃΔΔⲆⵠ], Gt);
    this.ΔᐃΔⲆ[ss.ⵠᐃᐃΔⵠ].id = ss.ⵠᐃᐃΔⵠ;
    this.ΔᐃΔⲆ[ss.ΔΔᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⲆⲆⲆⵠ], _g);
    this.ΔᐃΔⲆ[ss.ΔΔᐃⲆⲆ].id = ss.ΔΔᐃⲆⲆ;
    this.ΔᐃΔⲆ[ss.ΔⵠΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆΔⵠⲆᐃᐃ], 3);
    this.ΔᐃΔⲆ[ss.ΔⵠΔᐃᐃ].id = ss.ΔⵠΔᐃᐃ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⲆⲆΔΔⲆ], Ds);
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆⲆⵠ].id = ss.ⵠⵠⲆⲆⵠ;
    this.ΔᐃΔⲆ[ss.ΔⵠᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠᐃΔᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ΔⵠᐃⲆⲆ].id = ss.ΔⵠᐃⲆⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆⵠᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆⵠⵠᐃⵠ], Ui);
    this.ΔᐃΔⲆ[ss.ΔⲆⵠᐃⲆ].id = ss.ΔⲆⵠᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⲆΔΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⲆⵠⲆΔᐃ], wq);
    this.ΔᐃΔⲆ[ss.ⲆΔΔᐃΔ].id = ss.ⲆΔΔᐃΔ;
    this.ΔᐃΔⲆ[ss.ⵠⲆᐃⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⲆⵠⲆΔ], Ds);
    this.ΔᐃΔⲆ[ss.ⵠⲆᐃⲆⵠ].id = ss.ⵠⲆᐃⲆⵠ;
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃᐃᐃᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⲆⵠ].id = ss.ⲆΔᐃⲆⵠ;
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃΔⲆⵠⵠᐃ], Qq);
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆⵠΔ].id = ss.ⲆⲆⲆⵠΔ;
    this.ΔᐃΔⲆ[ss.ΔᐃᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆΔⵠᐃΔ], Xg);
    this.ΔᐃΔⲆ[ss.ΔᐃᐃΔᐃ].id = ss.ΔᐃᐃΔᐃ;
    this.ΔᐃΔⲆ[ss.ΔᐃⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠΔΔΔⲆ], Kl);
    this.ΔᐃΔⲆ[ss.ΔᐃⵠⵠΔ].id = ss.ΔᐃⵠⵠΔ;
    this.ΔᐃΔⲆ[ss.ⲆᐃΔⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔⲆⲆⵠᐃ], Jh);
    this.ΔᐃΔⲆ[ss.ⲆᐃΔⲆᐃ].id = ss.ⲆᐃΔⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⵠΔⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⵠᐃⵠᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔⵠᐃΔ].id = ss.ⵠΔⵠᐃΔ;
    this.ΔᐃΔⲆ[ss.ᐃΔᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠΔⲆΔΔⲆ], kl);
    this.ΔᐃΔⲆ[ss.ᐃΔᐃᐃⲆ].id = ss.ᐃΔᐃᐃⲆ;
    this.ΔᐃΔⲆ[ss.Δᐃⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔⵠᐃⲆᐃ], 3);
    this.ΔᐃΔⲆ[ss.Δᐃⵠⵠᐃ].id = ss.Δᐃⵠⵠᐃ;
    this.ΔᐃΔⲆ[ss.ᐃΔⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⲆΔⲆᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔⵠΔⲆ].id = ss.ᐃΔⵠΔⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⵠⲆΔΔⲆ], yr);
    this.ΔᐃΔⲆ[ss.ΔⲆⵠᐃᐃ].id = ss.ΔⲆⵠᐃᐃ;
    this.ΔᐃΔⲆ[ss.ⵠᐃΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔⵠⲆⲆⵠ], kl);
    this.ΔᐃΔⲆ[ss.ⵠᐃΔⲆⵠ].id = ss.ⵠᐃΔⲆⵠ;
    this.ΔᐃΔⲆ[ss.ΔⵠΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔᐃᐃΔⲆ], Ab);
    this.ΔᐃΔⲆ[ss.ΔⵠΔⵠⲆ].id = ss.ΔⵠΔⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⲆᐃᐃⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠⲆᐃⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⲆᐃᐃⲆΔ].id = ss.ⲆᐃᐃⲆΔ;
    this.ΔᐃΔⲆ[ss.ⵠΔⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔⵠⲆᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔⵠΔⵠ].id = ss.ⵠΔⵠΔⵠ;
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃΔⵠΔΔⵠ], Ia);
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠᐃΔ].id = ss.ᐃᐃⵠᐃΔ;
    this.ΔᐃΔⲆ[ss.ΔⲆᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⲆⵠΔⵠⲆ], Xg);
    this.ΔᐃΔⲆ[ss.ΔⲆᐃⵠⲆ].id = ss.ΔⲆᐃⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆΔᐃⵠΔᐃ], R);
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⲆⵠ].id = ss.ⵠⵠⵠⲆⵠ;
    this.ΔᐃΔⲆ[ss.ⵠᐃᐃᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⵠⲆᐃⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⵠᐃᐃᐃΔ].id = ss.ⵠᐃᐃᐃΔ;
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⵠⲆᐃΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃᐃⲆ].id = ss.ⲆⲆᐃᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆΔⵠⵠᐃ], yr);
    this.ΔᐃΔⲆ[ss.ⵠⲆⵠᐃᐃ].id = ss.ⵠⲆⵠᐃᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃΔΔⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃⲆΔ].id = ss.ⲆⲆᐃⲆΔ;
    this.ΔᐃΔⲆ[ss.ΔⵠΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔΔΔⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ΔⵠΔᐃΔ].id = ss.ΔⵠΔᐃΔ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⵠⲆⵠΔ], _g);
    this.ΔᐃΔⲆ[ss.ⵠⲆⵠⵠᐃ].id = ss.ⵠⲆⵠⵠᐃ;
    this.ΔᐃΔⲆ[ss.Ⲇᐃᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠΔⵠⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.Ⲇᐃᐃᐃⵠ].id = ss.Ⲇᐃᐃᐃⵠ;
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔⲆΔΔⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠⵠⲆ].id = ss.ᐃᐃⵠⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠᐃΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆᐃⵠⲆⵠⵠ], _g);
    this.ΔᐃΔⲆ[ss.ⵠᐃΔⵠⲆ].id = ss.ⵠᐃΔⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔᐃᐃⲆⵠᐃ], sd);
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃΔ].id = ss.ⵠⵠᐃΔ;
    this.ΔᐃΔⲆ[ss.ⵠΔⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆⵠⲆΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔⲆⵠⲆ].id = ss.ⵠΔⲆⵠⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆⵠⵠᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⵠⵠ].id = ss.ᐃⲆΔⵠⵠ;
    this.ΔᐃΔⲆ[ss.ΔᐃΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆΔⲆᐃⲆ], Kb);
    this.ΔᐃΔⲆ[ss.ΔᐃΔᐃΔ].id = ss.ΔᐃΔᐃΔ;
    this.ΔᐃΔⲆ[ss.ΔΔᐃⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃⵠᐃⲆᐃ], R);
    this.ΔᐃΔⲆ[ss.ΔΔᐃⵠΔ].id = ss.ΔΔᐃⵠΔ;
    this.ΔᐃΔⲆ[ss.ΔⲆⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠᐃᐃᐃΔ], Ab);
    this.ΔᐃΔⲆ[ss.ΔⲆⲆΔⵠ].id = ss.ΔⲆⲆΔⵠ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔⲆᐃⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠᐃⵠ].id = ss.ᐃⵠⵠᐃⵠ;
    this.ΔᐃΔⲆ[ss.ⲆⵠΔΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃΔᐃᐃⲆ], R);
    this.ΔᐃΔⲆ[ss.ⲆⵠΔΔⲆ].id = ss.ⲆⵠΔΔⲆ;
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔᐃΔⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⵠⵠ].id = ss.ⲆΔᐃⵠⵠ;
    this.ΔᐃΔⲆ[ss.ᐃᐃΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠΔᐃⲆᐃ], Xg);
    this.ΔᐃΔⲆ[ss.ᐃᐃΔⵠΔ].id = ss.ᐃᐃΔⵠΔ;
    this.ΔᐃΔⲆ[ss.ᐃΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔⵠᐃⲆⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔᐃⲆᐃ].id = ss.ᐃΔᐃⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⲆᐃΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⵠⵠⵠΔᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⲆᐃΔΔΔ].id = ss.ⲆᐃΔΔΔ;
    this.ΔᐃΔⲆ[ss.ⲆᐃⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⲆΔΔᐃ], Qh);
    this.ΔᐃΔⲆ[ss.ⲆᐃⲆᐃⲆ].id = ss.ⲆᐃⲆᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⵠΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠΔΔᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠΔΔΔ].id = ss.ⵠⵠΔΔΔ;
    this.ΔᐃΔⲆ[ss.ⵠΔⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔⲆᐃΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔⲆᐃⲆ].id = ss.ⵠΔⲆᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⵠΔⲆᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆᐃⵠⵠᐃᐃ], Kb);
    this.ΔᐃΔⲆ[ss.ⵠΔⲆᐃⵠ].id = ss.ⵠΔⲆᐃⵠ;
    this.ΔᐃΔⲆ[ss.ΔΔⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠᐃⲆᐃᐃ], 3);
    this.ΔᐃΔⲆ[ss.ΔΔⲆⵠΔ].id = ss.ΔΔⲆⵠΔ;
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃΔⲆΔᐃ], Ds);
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⲆᐃ].id = ss.ⲆΔᐃⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⲆΔⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃᐃᐃⵠⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⲆΔⲆⵠᐃ].id = ss.ⲆΔⲆⵠᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⲆᐃⲆⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆⲆⲆ].id = ss.ⲆⲆⲆⲆⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆⲆᐃᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆΔⵠ].id = ss.ᐃⵠⲆΔⵠ;
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆⲆᐃᐃⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠⵠᐃ].id = ss.ᐃᐃⵠⵠᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⲆΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃⵠⲆⵠⵠ], Ui);
    this.ΔᐃΔⲆ[ss.ⲆⲆΔΔΔ].id = ss.ⲆⲆΔΔΔ;
    this.ΔᐃΔⲆ[ss.ᐃΔᐃᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⵠⵠⵠᐃ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔᐃᐃᐃ].id = ss.ᐃΔᐃᐃᐃ;
    this.ΔᐃΔⲆ[ss.ΔⵠⲆⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⵠΔⵠⵠ], Qq);
    this.ΔᐃΔⲆ[ss.ΔⵠⲆⲆⵠ].id = ss.ΔⵠⲆⲆⵠ;
    this.ΔᐃΔⲆ[ss.ᐃΔⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠᐃᐃⲆΔⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔⵠⵠⵠ].id = ss.ᐃΔⵠⵠⵠ;
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠᐃⲆⵠⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⵠᐃ].id = ss.ᐃⲆΔⵠᐃ;
    this.ΔᐃΔⲆ[ss.ⲆᐃⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆΔᐃⵠⲆⵠ], Gt);
    this.ΔᐃΔⲆ[ss.ⲆᐃⵠΔⲆ].id = ss.ⲆᐃⵠΔⲆ;
    this.ΔᐃΔⲆ[ss.ΔⵠᐃΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⲆⲆⵠⲆΔ], 3);
    this.ΔᐃΔⲆ[ss.ΔⵠᐃΔⵠ].id = ss.ΔⵠᐃΔⵠ;
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⲆⵠΔⲆ], Kb);
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆᐃⲆ].id = ss.ⲆⲆⲆᐃⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⲆᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠΔᐃⵠⲆⲆ], sd);
    this.ΔᐃΔⲆ[ss.ᐃⲆᐃⵠᐃ].id = ss.ᐃⲆᐃⵠᐃ;
    this.ΔᐃΔⲆ[ss.ᐃⲆᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠᐃⲆⵠⵠ], Qh);
    this.ΔᐃΔⲆ[ss.ᐃⲆᐃⲆⲆ].id = ss.ᐃⲆᐃⲆⲆ;
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⵠⵠᐃⲆ], Gt);
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠΔⵠ].id = ss.ᐃᐃⵠΔⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⲆΔⲆᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆΔⲆ].id = ss.ⵠⵠⲆΔⲆ;
    this.ΔᐃΔⲆ[ss.ᐃΔⵠⵠⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⲆΔⲆᐃ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔⵠⵠⵠⵠΔ].id = ss.ᐃΔⵠⵠⵠⵠΔ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⲆΔⲆᐃ], _g);
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠΔⵠⲆ].id = ss.ⵠⵠⵠⵠΔⵠⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆᐃΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⲆⲆΔΔⵠ], Ui);
    this.ΔᐃΔⲆ[ss.ΔⲆᐃΔΔ].id = ss.ΔⲆᐃΔΔ;
    this.ΔᐃΔⲆ[ss.ΔⵠⲆᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆⵠᐃᐃΔ], Kb);
    this.ΔᐃΔⲆ[ss.ΔⵠⲆᐃⵠ].id = ss.ΔⵠⲆᐃⵠ;
    this.ΔᐃΔⲆ[ss.ΔⵠⲆⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔⲆⵠⵠΔ], kl);
    this.ΔᐃΔⲆ[ss.ΔⵠⲆⵠⵠ].id = ss.ΔⵠⲆⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⲆΔⵠᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔⲆⵠᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆΔⵠᐃⲆ].id = ss.ⲆΔⵠᐃⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃⵠⲆⲆᐃ], Ab);
    this.ΔᐃΔⲆ[ss.ᐃⲆΔⲆΔ].id = ss.ᐃⲆΔⲆΔ;
    this.ΔᐃΔⲆ[ss.ΔᐃΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⲆⲆΔⲆ], _g);
    this.ΔᐃΔⲆ[ss.ΔᐃΔⲆⵠ].id = ss.ΔᐃΔⲆⵠ;
    this.ΔᐃΔⲆ[ss.ΔᐃΔⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃΔᐃᐃΔᐃ], 3);
    this.ΔᐃΔⲆ[ss.ΔᐃΔⲆⲆ].id = ss.ΔᐃΔⲆⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⵠΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔΔᐃΔᐃ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠΔᐃΔ].id = ss.ᐃⵠΔᐃΔ;
    this.ΔᐃΔⲆ[ss.ⵠᐃΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠⲆⲆᐃᐃ], R);
    this.ΔᐃΔⲆ[ss.ⵠᐃΔⵠΔ].id = ss.ⵠᐃΔⵠΔ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⲆΔΔΔⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆⲆⲆ].id = ss.ᐃⵠⲆⲆⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⲆⲆΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆⲆΔⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆⲆΔⲆ].id = ss.ᐃⲆⲆΔⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔᐃⵠⲆᐃⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⲆⲆⲆᐃ].id = ss.ⵠⲆⲆⲆᐃ;
    this.ΔᐃΔⲆ[ss.ᐃⲆⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔᐃⵠⲆⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆⲆⵠΔ].id = ss.ᐃⲆⲆⵠΔ;
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔⲆᐃⲆΔ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⲆⲆⵠⲆ].id = ss.ⲆⲆⲆⵠⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠᐃᐃⲆΔ], yr);
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠΔⵠ].id = ss.ᐃⵠⵠΔⵠ;
    this.ΔᐃΔⲆ[ss.ⲆⵠΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆⵠᐃΔⵠ], Ss);
    this.ΔᐃΔⲆ[ss.ⲆⵠΔᐃΔ].id = ss.ⲆⵠΔᐃΔ;
    this.ΔᐃΔⲆ[ss.ΔⵠⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⵠΔⵠᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ΔⵠⵠΔⵠ].id = ss.ΔⵠⵠΔⵠ;
    this.ΔᐃΔⲆ[ss.Ⲇⵠᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⵠᐃΔᐃⲆ], Ds);
    this.ΔᐃΔⲆ[ss.Ⲇⵠᐃᐃⵠ].id = ss.Ⲇⵠᐃᐃⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆᐃⲆⲆⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃᐃⲆ].id = ss.ⵠⵠᐃᐃⲆ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⵠⲆΔΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠⵠⲆᐃ].id = ss.ᐃⵠⵠⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⲆΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⲆⵠⲆΔΔ], Ab);
    this.ΔᐃΔⲆ[ss.ⲆⲆΔⵠⲆ].id = ss.ⲆⲆΔⵠⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆⵠΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⲆᐃⵠΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ΔⲆⵠΔⲆ].id = ss.ΔⲆⵠΔⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⲆᐃⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠⵠⵠΔⵠ], Gt);
    this.ΔᐃΔⲆ[ss.ⵠⲆᐃⵠⵠ].id = ss.ⵠⲆᐃⵠⵠ;
    this.ΔᐃΔⲆ[ss.Ⲇᐃⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃᐃᐃΔΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.Ⲇᐃⵠᐃᐃ].id = ss.Ⲇᐃⵠᐃᐃ;
    this.ΔᐃΔⲆ[ss.ΔΔⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃⵠΔΔᐃ], Ss);
    this.ΔᐃΔⲆ[ss.ΔΔⲆⵠⲆ].id = ss.ΔΔⲆⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠΔΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃⲆⵠᐃⲆ], Oj);
    this.ΔᐃΔⲆ[ss.ⵠΔΔⵠⵠ].id = ss.ⵠΔΔⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⲆᐃⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠᐃⵠⵠⲆⲆ], Ia);
    this.ΔᐃΔⲆ[ss.ⵠⲆᐃⵠⲆ].id = ss.ⵠⲆᐃⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠᐃⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔⵠᐃᐃᐃ], Kb);
    this.ΔᐃΔⲆ[ss.ⵠᐃⲆΔᐃ].id = ss.ⵠᐃⲆΔᐃ;
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃΔᐃΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃᐃⵠΔᐃ].id = ss.ᐃᐃⵠΔᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⵠⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠᐃΔⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⵠⲆⵠᐃ].id = ss.ⲆⵠⲆⵠᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆⲆᐃᐃⲆⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⵠⲆΔⵠ].id = ss.ⲆⵠⲆΔⵠ;
    this.ΔᐃΔⲆ[ss.ΔΔΔⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃⵠⵠΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ΔΔΔⵠΔ].id = ss.ΔΔΔⵠΔ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆᐃⵠΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠⲆΔⵠ].id = ss.ⵠⵠⲆΔⵠ;
    this.ΔᐃΔⲆ[ss.ⵠΔᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⵠⲆΔⵠᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔᐃΔᐃ].id = ss.ⵠΔᐃΔᐃ;
    this.ΔᐃΔⲆ[ss.ΔΔΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃΔᐃⲆⲆΔ], Jh);
    this.ΔᐃΔⲆ[ss.ΔΔΔᐃⲆ].id = ss.ΔΔΔᐃⲆ;
    this.ΔᐃΔⲆ[ss.ᐃᐃᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠⲆⲆΔⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃᐃᐃⲆⲆ].id = ss.ᐃᐃᐃⲆⲆ;
    this.ΔᐃΔⲆ[ss.ᐃΔⲆⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⵠⵠⲆᐃ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔⲆⵠⲆ].id = ss.ᐃΔⲆⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠᐃⲆⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆΔⵠⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⵠᐃⲆⵠⵠ].id = ss.ⵠᐃⲆⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔᐃⵠⲆΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠᐃⲆᐃ].id = ss.ⵠⵠᐃⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃⵠⵠⵠⲆᐃ], Ab);
    this.ΔᐃΔⲆ[ss.ⲆⲆᐃᐃⵠ].id = ss.ⲆⲆᐃᐃⵠ;
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔᐃⲆⵠⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⵠⲆᐃⲆ].id = ss.ᐃⵠⲆᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⵠΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔⲆⵠⵠᐃ], Qq);
    this.ΔᐃΔⲆ[ss.ⵠΔᐃⲆᐃ].id = ss.ⵠΔᐃⲆᐃ;
    this.ΔᐃΔⲆ[ss.ⵠΔⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆᐃᐃⲆᐃⲆ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔⵠⵠⲆ].id = ss.ⵠΔⵠⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠΔᐃΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⲆΔⲆⲆᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠΔᐃΔⲆ].id = ss.ⵠΔᐃΔⲆ;
    this.ΔⲆᐃ[ts.ⵠᐃⵠⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃΔⵠᐃᐃⵠ], kl);
    this.ΔⲆᐃ[ts.ⵠᐃⵠⲆΔ].id = ts.ⵠᐃⵠⲆΔ;
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃᐃΔⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆΔ].id = ts.ⵠᐃⵠⲆΔ;
    this.ΔᐃΔⲆ[ss.ⵠᐃⵠⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⲆΔⵠᐃᐃ], 3);
    this.ΔᐃΔⲆ[ss.ⵠᐃⵠⲆΔ].id = ss.ⵠᐃⵠⲆΔ;
    this.ΔⲆᐃ[ts.ⲆⵠⵠᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔΔᐃⵠΔΔ], 3);
    this.ΔⲆᐃ[ts.ⲆⵠⵠᐃΔ].id = ts.ⲆⵠⵠᐃΔ;
    this.ⵠⵠᐃ[ts.ⲆⵠⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⲆⲆⲆΔΔⲆ], 3);
    this.ⵠⵠᐃ[ts.ⲆⵠⵠᐃΔ].id = ts.ⲆⵠⵠᐃΔ;
    this.ΔᐃΔⲆ[ss.ⲆⵠⵠᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔⲆΔⵠΔ], 3);
    this.ΔᐃΔⲆ[ss.ⲆⵠⵠᐃΔ].id = ss.ⲆⵠⵠᐃΔ;
    this.ΔⲆᐃ[ts.ⵠⲆΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔᐃⵠⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆΔᐃΔ].id = ts.ⵠⲆΔᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆΔⲆⵠΔΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆΔᐃΔ].id = ts.ⵠⲆΔᐃΔ;
    this.ΔᐃΔⲆ[ss.ⵠⲆΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃΔΔΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⲆΔᐃΔ].id = ss.ⵠⲆΔᐃΔ;
    this.ΔⲆᐃ[ts.ΔΔΔᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⲆΔΔⲆᐃⲆ], Qh);
    this.ΔⲆᐃ[ts.ΔΔΔᐃᐃ].id = ts.ΔΔΔᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔΔΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆΔⵠⲆᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔΔΔᐃᐃ].id = ts.ΔΔΔᐃᐃ;
    this.ΔᐃΔⲆ[ss.ΔΔΔᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃⵠⲆⲆᐃ], kl);
    this.ΔᐃΔⲆ[ss.ΔΔΔᐃᐃ].id = ss.ΔΔΔᐃᐃ;
    this.ΔⲆᐃ[ts.ⵠⲆΔΔΔᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃΔⵠⵠΔⵠ], 3);
    this.ΔⲆᐃ[ts.ⵠⲆΔΔΔᐃΔ].id = ts.ⵠⲆΔΔΔᐃΔ;
    this.ⵠⵠᐃ[ts.ⵠⲆΔΔΔᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⲆᐃᐃⵠⲆ], yr);
    this.ⵠⵠᐃ[ts.ⵠⲆΔΔΔᐃΔ].id = ts.ⵠⲆΔΔΔᐃΔ;
    this.ΔⲆᐃ[ts.ΔΔᐃᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⵠⲆΔᐃΔⲆ], kl);
    this.ΔⲆᐃ[ts.ΔΔᐃᐃᐃ].id = ts.ΔΔᐃᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔΔᐃᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆΔΔⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ΔΔᐃᐃᐃ].id = ts.ΔΔᐃᐃᐃ;
    this.ΔⲆᐃ[ts.ᐃᐃⵠⵠⵠⲆΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⲆⵠⵠᐃⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃⵠⵠⵠⲆΔ].id = ts.ᐃᐃⵠⵠⵠⲆΔ;
    this.ⵠⵠᐃ[ts.ᐃᐃⵠⵠⵠⲆΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠⲆⵠᐃΔ], kl);
    this.ⵠⵠᐃ[ts.ᐃᐃⵠⵠⵠⲆΔ].id = ts.ᐃᐃⵠⵠⵠⲆΔ;
    this.ΔⲆᐃ[ts.ᐃΔⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆⲆⵠΔᐃⵠ], 3);
    this.ΔⲆᐃ[ts.ᐃΔⵠΔⵠ].id = ts.ᐃΔⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ᐃΔⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔᐃᐃᐃᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃΔⵠΔⵠ].id = ts.ᐃΔⵠΔⵠ;
    this.ΔᐃΔⲆ[ss.ᐃΔⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠᐃΔΔⲆ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔⵠΔⵠ].id = ss.ᐃΔⵠΔⵠ;
    this.ΔⲆᐃ[ts.ᐃΔᐃᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠΔΔⵠᐃΔ], Kb);
    this.ΔⲆᐃ[ts.ᐃΔᐃᐃⵠ].id = ts.ᐃΔᐃᐃⵠ;
    this.ⵠⵠᐃ[ts.ᐃΔᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠⵠΔΔᐃ], Xg);
    this.ⵠⵠᐃ[ts.ᐃΔᐃᐃⵠ].id = ts.ᐃΔᐃᐃⵠ;
    this.ΔᐃΔⲆ[ss.ᐃΔᐃᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⲆⵠᐃᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ᐃΔᐃᐃⵠ].id = ss.ᐃΔᐃᐃⵠ;
    this.ΔⲆᐃ[ts.ⲆΔᐃᐃΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃᐃΔⵠⵠ], wn);
    this.ΔⲆᐃ[ts.ⲆΔᐃᐃΔ].id = ts.ⲆΔᐃᐃΔ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃᐃΔⲆΔ], R);
    this.ⵠⵠᐃ[ts.ⲆΔᐃᐃΔ].id = ts.ⲆΔᐃᐃΔ;
    this.ΔᐃΔⲆ[ss.ⲆΔᐃᐃΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⵠᐃΔⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⲆΔᐃᐃΔ].id = ss.ⲆΔᐃᐃΔ;
    this.ΔⲆᐃ[ts.ⲆΔᐃⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆᐃΔⵠΔⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆΔᐃⲆⲆ].id = ts.ⲆΔᐃⲆⲆ;
    this.ⵠⵠᐃ[ts.ⲆΔᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔⵠΔᐃΔ], Ui);
    this.ⵠⵠᐃ[ts.ⲆΔᐃⲆⲆ].id = ts.ⲆΔᐃⲆⲆ;
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.Δⵠⵠᐃⵠⵠᐃ], R);
    this.ΔᐃΔⲆ[ss.ⲆΔᐃⲆⲆ].id = ss.ⲆΔᐃⲆⲆ;
    this.ΔⲆᐃ[ts.Δᐃⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔⵠΔⵠᐃⲆ], _g);
    this.ΔⲆᐃ[ts.Δᐃⵠᐃᐃ].id = ts.Δᐃⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.Δᐃⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃᐃⵠᐃΔⵠ], 3);
    this.ⵠⵠᐃ[ts.Δᐃⵠᐃᐃ].id = ts.Δᐃⵠᐃᐃ;
    this.ΔᐃΔⲆ[ss.Δᐃⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃᐃΔⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.Δᐃⵠᐃᐃ].id = ss.Δᐃⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ᐃⲆΔᐃⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠΔⵠⲆⲆᐃ], kl);
    this.ΔⲆᐃ[ts.ᐃⲆΔᐃⵠ].id = ts.ᐃⲆΔᐃⵠ;
    this.ⵠⵠᐃ[ts.ᐃⲆΔᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔⵠᐃᐃᐃ], Ds);
    this.ⵠⵠᐃ[ts.ᐃⲆΔᐃⵠ].id = ts.ᐃⲆΔᐃⵠ;
    this.ΔᐃΔⲆ[ss.ᐃⲆΔᐃⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃᐃⲆΔᐃⵠ], 3);
    this.ΔᐃΔⲆ[ss.ᐃⲆΔᐃⵠ].id = ss.ᐃⲆΔᐃⵠ;
    this.ΔⲆᐃ[ts.ⲆᐃⵠⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⵠΔᐃⲆΔ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃⵠⵠΔ].id = ts.ⲆᐃⵠⵠΔ;
    this.ⵠⵠᐃ[ts.ⲆᐃⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⲆᐃᐃⲆⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆᐃⵠⵠΔ].id = ts.ⲆᐃⵠⵠΔ;
    this.ΔᐃΔⲆ[ss.ⲆᐃⵠⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.Ⲇᐃᐃᐃⵠᐃⵠ], wq);
    this.ΔᐃΔⲆ[ss.ⲆᐃⵠⵠΔ].id = ss.ⲆᐃⵠⵠΔ;
    this.ΔⲆᐃ[ts.ΔΔΔⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆᐃΔⵠΔⵠ], 3);
    this.ΔⲆᐃ[ts.ΔΔΔⲆⵠ].id = ts.ΔΔΔⲆⵠ;
    this.ⵠⵠᐃ[ts.ΔΔΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠΔᐃᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔΔΔⲆⵠ].id = ts.ΔΔΔⲆⵠ;
    this.ΔᐃΔⲆ[ss.ΔΔΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃᐃΔᐃⲆⲆ], 3);
    this.ΔᐃΔⲆ[ss.ΔΔΔⲆⵠ].id = ss.ΔΔΔⲆⵠ;
    this.ΔⲆᐃ[ts.ΔᐃⵠⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⵠᐃΔⲆⵠ], _g);
    this.ΔⲆᐃ[ts.ΔᐃⵠⲆⲆ].id = ts.ΔᐃⵠⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔᐃⵠⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⵠᐃⵠᐃ], 3);
    this.ⵠⵠᐃ[ts.ΔᐃⵠⲆⲆ].id = ts.ΔᐃⵠⲆⲆ;
    this.ΔᐃΔⲆ[ss.ΔᐃⵠⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠⲆΔΔᐃ], Ds);
    this.ΔᐃΔⲆ[ss.ΔᐃⵠⲆⲆ].id = ss.ΔᐃⵠⲆⲆ;
    this.ΔⲆᐃ[ts.ΔᐃΔⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃᐃⲆⵠΔⲆ], 3);
    this.ΔⲆᐃ[ts.ΔᐃΔⵠⵠ].id = ts.ΔᐃΔⵠⵠ;
    this.ⵠⵠᐃ[ts.ΔᐃΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⲆⲆΔΔ], 3);
    this.ⵠⵠᐃ[ts.ΔᐃΔⵠⵠ].id = ts.ΔᐃΔⵠⵠ;
    this.ΔᐃΔⲆ[ss.ΔᐃΔⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃΔⲆᐃⵠⵠ], Gt);
    this.ΔᐃΔⲆ[ss.ΔᐃΔⵠⵠ].id = ss.ΔᐃΔⵠⵠ;
    this.ΔⲆᐃ[ts.ⲆᐃΔᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆⲆΔΔΔᐃ], Ab);
    this.ΔⲆᐃ[ts.ⲆᐃΔᐃⲆ].id = ts.ⲆᐃΔᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆᐃΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔⲆΔⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⲆᐃΔᐃⲆ].id = ts.ⲆᐃΔᐃⲆ;
    this.ΔᐃΔⲆ[ss.ⲆᐃΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠΔⵠΔᐃ], _g);
    this.ΔᐃΔⲆ[ss.ⲆᐃΔᐃⲆ].id = ss.ⲆᐃΔᐃⲆ;
    this.ΔⲆᐃ[ts.ⵠΔⲆⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆᐃⲆⵠⲆ], 3);
    this.ΔⲆᐃ[ts.ⵠΔⲆⵠΔ].id = ts.ⵠΔⲆⵠΔ;
    this.ⵠⵠᐃ[ts.ⵠΔⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠⲆⵠⵠⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠΔⲆⵠΔ].id = ts.ⵠΔⲆⵠΔ;
    this.ΔᐃΔⲆ[ss.ⵠΔⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠΔⲆΔΔᐃ], _g);
    this.ΔᐃΔⲆ[ss.ⵠΔⲆⵠΔ].id = ss.ⵠΔⲆⵠΔ;
    this.ΔⲆᐃ[ts.ⲆⲆⵠΔⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠΔᐃΔΔΔⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆⲆⵠΔⵠ].id = ts.ⲆⲆⵠΔⵠ;
    this.ⵠⵠᐃ[ts.ⲆⲆⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⵠΔⲆᐃⲆ], Kb);
    this.ⵠⵠᐃ[ts.ⲆⲆⵠΔⵠ].id = ts.ⲆⲆⵠΔⵠ;
    this.ΔᐃΔⲆ[ss.ⲆⲆⵠΔⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃⵠᐃΔΔ], Ss);
    this.ΔᐃΔⲆ[ss.ⲆⲆⵠΔⵠ].id = ss.ⲆⲆⵠΔⵠ;
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃᐃΔⲆⲆᐃ], Ui);
    this.ΔⲆᐃ[ts.ⵠⵠⵠⵠⲆ].id = ts.ⵠⵠⵠⵠⲆ;
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔᐃⲆⵠⲆΔ], 3);
    this.ⵠⵠᐃ[ts.ⵠⵠⵠⵠⲆ].id = ts.ⵠⵠⵠⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆⵠⲆⵠᐃΔ], 3);
    this.ΔᐃΔⲆ[ss.ⵠⵠⵠⵠⲆ].id = ss.ⵠⵠⵠⵠⲆ;
    this.ΔⲆᐃ[ts.ᐃᐃᐃΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠᐃⲆⲆⲆⲆⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃᐃΔᐃ].id = ts.ᐃᐃᐃΔᐃ;
    this.ⵠⵠᐃ[ts.ᐃᐃᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔᐃᐃⵠΔ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃᐃΔᐃ].id = ts.ᐃᐃᐃΔᐃ;
    this.ΔᐃΔⲆ[ss.ᐃᐃᐃΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃΔⲆᐃΔⲆ], Kb);
    this.ΔᐃΔⲆ[ss.ᐃᐃᐃΔᐃ].id = ss.ᐃᐃᐃΔᐃ;
    this.ΔⲆᐃ[ts.ΔⲆΔΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.Δᐃⵠᐃⵠⵠᐃ], 3);
    this.ΔⲆᐃ[ts.ΔⲆΔΔΔ].id = ts.ΔⲆΔΔΔ;
    this.ⵠⵠᐃ[ts.ΔⲆΔΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃΔᐃᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⲆΔΔΔ].id = ts.ΔⲆΔΔΔ;
    this.ⵠⵠᐃ[ts.ΔⲆΔΔΔ].info.Δᐃ[Pn] = this.ⵠⵠᐃ[ts.ΔⲆΔΔΔ].info.Δᐃ[0];
    this.ΔⲆᐃ[ts.ΔⵠⲆⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠᐃⲆⵠⲆᐃ], Ui);
    this.ΔⲆᐃ[ts.ΔⵠⲆⲆⲆ].id = ts.ΔⵠⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⲆΔΔⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⲆ].id = ts.ΔⵠⲆⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⲆ].info.Δᐃ[Ls] = this.ⵠⵠᐃ[ts.ΔⵠⲆⲆⲆ].info.Δᐃ[dt];
    this.ΔⲆᐃ[ts.ⲆⲆⵠΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆⲆⵠⵠᐃⵠ], yr);
    this.ΔⲆᐃ[ts.ⲆⲆⵠΔ].id = ts.ⲆⲆⵠΔ;
    this.ⵠⵠᐃ[ts.ⲆⲆⵠΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆᐃⵠᐃⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆⲆⵠΔ].id = ts.ⲆⲆⵠΔ;
    this.ⵠⵠᐃ[ts.ⲆⲆⵠΔ].info.Δᐃ[2] = this.ⵠⵠᐃ[ts.ⲆⲆⵠΔ].info.Δᐃ[Yl];
    this.ΔⲆᐃ[ts.ⲆΔⵠⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⲆᐃᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.ⲆΔⵠⵠⵠ].id = ts.ⲆΔⵠⵠⵠ;
    this.ⵠⵠᐃ[ts.ⲆΔⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⲆᐃᐃⲆⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ⲆΔⵠⵠⵠ].id = ts.ⲆΔⵠⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⲆΔⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆᐃⲆⵠⲆΔ], Kb);
    this.ΔᐃΔⲆ[ss.ⲆΔⵠⵠⵠ].id = ss.ⲆΔⵠⵠⵠ;
    this.ΔⲆᐃ[ts.ⵠᐃⵠⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃⵠΔΔⲆΔ], wn);
    this.ΔⲆᐃ[ts.ⵠᐃⵠⲆⲆ].id = ts.ⵠᐃⵠⲆⲆ;
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃⵠⲆⵠᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ⵠᐃⵠⲆⲆ].id = ts.ⵠᐃⵠⲆⲆ;
    this.ΔᐃΔⲆ[ss.ⵠᐃⵠⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔᐃⲆⲆⲆⵠ], 3);
    this.ΔᐃΔⲆ[ss.ⵠᐃⵠⲆⲆ].id = ss.ⵠᐃⵠⲆⲆ;
    this.ΔⲆᐃ[ts.ΔΔᐃⲆᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃⵠⵠⲆⵠⲆ], Xg);
    this.ΔⲆᐃ[ts.ΔΔᐃⲆᐃ].id = ts.ΔΔᐃⲆᐃ;
    this.ⵠⵠᐃ[ts.ΔΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⵠᐃⵠⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔΔᐃⲆᐃ].id = ts.ΔΔᐃⲆᐃ;
    this.ΔᐃΔⲆ[ss.ΔΔᐃⲆᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃΔΔΔΔΔΔ], 3);
    this.ΔᐃΔⲆ[ss.ΔΔᐃⲆᐃ].id = ss.ΔΔᐃⲆᐃ;
    this.ΔⲆᐃ[ts.ⵠⲆⵠⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔᐃⵠΔᐃⵠΔ], Gt);
    this.ΔⲆᐃ[ts.ⵠⲆⵠⵠⵠ].id = ts.ⵠⲆⵠⵠⵠ;
    this.ⵠⵠᐃ[ts.ⵠⲆⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔⵠⲆⵠᐃⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ⵠⲆⵠⵠⵠ].id = ts.ⵠⲆⵠⵠⵠ;
    this.ΔᐃΔⲆ[ss.ⵠⲆⵠⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔΔᐃⲆΔⵠ], Ss);
    this.ΔᐃΔⲆ[ss.ⵠⲆⵠⵠⵠ].id = ss.ⵠⲆⵠⵠⵠ;
    this.ΔⲆᐃ[ts.ⲆᐃΔⵠⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠΔⲆΔⲆᐃ], 3);
    this.ΔⲆᐃ[ts.ⲆᐃΔⵠⲆ].id = ts.ⲆᐃΔⵠⲆ;
    this.ⵠⵠᐃ[ts.ⲆᐃΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆΔⲆᐃΔⵠΔ], kl);
    this.ⵠⵠᐃ[ts.ⲆᐃΔⵠⲆ].id = ts.ⲆᐃΔⵠⲆ;
    this.ΔᐃΔⲆ[ss.ⲆᐃΔⵠⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃⲆΔⵠΔⵠ], wn);
    this.ΔᐃΔⲆ[ss.ⲆᐃΔⵠⲆ].id = ss.ⲆᐃΔⵠⲆ;
    this.ΔⲆᐃ[ts.ΔΔⵠᐃᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆⵠΔᐃⵠⲆΔ], 3);
    this.ΔⲆᐃ[ts.ΔΔⵠᐃᐃ].id = ts.ΔΔⵠᐃᐃ;
    this.ⵠⵠᐃ[ts.ΔΔⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔΔΔⲆⵠⵠ], 3);
    this.ⵠⵠᐃ[ts.ΔΔⵠᐃᐃ].id = ts.ΔΔⵠᐃᐃ;
    this.ΔᐃΔⲆ[ss.ΔΔⵠᐃᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆⲆᐃᐃⲆ], Gt);
    this.ΔᐃΔⲆ[ss.ΔΔⵠᐃᐃ].id = ss.ΔΔⵠᐃᐃ;
    this.ΔⲆᐃ[ts.ΔⲆᐃᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆᐃᐃⵠⵠᐃΔ], yr);
    this.ΔⲆᐃ[ts.ΔⲆᐃᐃⲆ].id = ts.ΔⲆᐃᐃⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃΔⲆⵠᐃⵠ], wq);
    this.ⵠⵠᐃ[ts.ΔⲆᐃᐃⲆ].id = ts.ΔⲆᐃᐃⲆ;
    this.ΔᐃΔⲆ[ss.ΔⲆᐃᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔᐃⵠⲆΔⲆ], Ds);
    this.ΔᐃΔⲆ[ss.ΔⲆᐃᐃⲆ].id = ss.ΔⲆᐃᐃⲆ;
    this.ΔⲆᐃ[ts.ᐃΔᐃⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆᐃⲆⲆΔ], 3);
    this.ΔⲆᐃ[ts.ᐃΔᐃⵠᐃ].id = ts.ᐃΔᐃⵠᐃ;
    this.ⵠⵠᐃ[ts.ᐃΔᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆⲆⵠᐃΔ], Ds);
    this.ⵠⵠᐃ[ts.ᐃΔᐃⵠᐃ].id = ts.ᐃΔᐃⵠᐃ;
    this.ΔᐃΔⲆ[ss.ᐃΔᐃⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⵠΔⵠΔⲆ], _g);
    this.ΔᐃΔⲆ[ss.ᐃΔᐃⵠᐃ].id = ss.ᐃΔᐃⵠᐃ;
    this.ΔⲆᐃ[ts.ΔᐃⲆⵠⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔΔⲆᐃᐃΔ], Ab);
    this.ΔⲆᐃ[ts.ΔᐃⲆⵠⵠ].id = ts.ΔᐃⲆⵠⵠ;
    this.ⵠⵠᐃ[ts.ΔᐃⲆⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆᐃΔⵠΔ], Ab);
    this.ⵠⵠᐃ[ts.ΔᐃⲆⵠⵠ].id = ts.ΔᐃⲆⵠⵠ;
    this.ΔᐃΔⲆ[ss.ΔᐃⲆⵠⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃⲆⵠΔⵠⲆ], 3);
    this.ΔᐃΔⲆ[ss.ΔᐃⲆⵠⵠ].id = ss.ΔᐃⲆⵠⵠ;
    this.ΔⲆᐃ[ts.ⵠᐃⵠΔΔ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⲆᐃᐃΔⲆ], wn);
    this.ΔⲆᐃ[ts.ⵠᐃⵠΔΔ].id = ts.ⵠᐃⵠΔΔ;
    this.ⵠⵠᐃ[ts.ⵠᐃⵠΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃᐃΔⲆⲆⲆᐃ], yr);
    this.ⵠⵠᐃ[ts.ⵠᐃⵠΔΔ].id = ts.ⵠᐃⵠΔΔ;
    this.ΔᐃΔⲆ[ss.ⵠᐃⵠΔΔ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠᐃΔᐃⵠΔⲆⵠ], Qq);
    this.ΔᐃΔⲆ[ss.ⵠᐃⵠΔΔ].id = ss.ⵠᐃⵠΔΔ;
    this.ΔⲆᐃ[ts.ᐃᐃⲆᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆΔⲆΔΔⲆ], 3);
    this.ΔⲆᐃ[ts.ᐃᐃⲆᐃⲆ].id = ts.ᐃᐃⲆᐃⲆ;
    this.ⵠⵠᐃ[ts.ᐃᐃⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠᐃΔⲆᐃⲆᐃ], 3);
    this.ⵠⵠᐃ[ts.ᐃᐃⲆᐃⲆ].id = ts.ᐃᐃⲆᐃⲆ;
    this.ΔᐃΔⲆ[ss.ᐃᐃⲆᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⵠⲆⲆᐃᐃᐃ], Ab);
    this.ΔᐃΔⲆ[ss.ᐃᐃⲆᐃⲆ].id = ss.ᐃᐃⲆᐃⲆ;
    this.ΔⲆᐃ[ts.ⲆΔⲆΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⲆΔⵠᐃᐃⲆ], 3);
    this.ΔⲆᐃ[ts.ⲆΔⲆΔᐃ].id = ts.ⲆΔⲆΔᐃ;
    this.ⵠⵠᐃ[ts.ⲆΔⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆⵠΔΔᐃΔΔ], Oj);
    this.ⵠⵠᐃ[ts.ⲆΔⲆΔᐃ].id = ts.ⲆΔⲆΔᐃ;
    this.ΔᐃΔⲆ[ss.ⲆΔⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠΔΔΔⲆΔ], Ss);
    this.ΔᐃΔⲆ[ss.ⲆΔⲆΔᐃ].id = ss.ⲆΔⲆΔᐃ;
    this.ΔⲆᐃ[ts.ΔⵠⲆΔᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠⲆΔᐃⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ΔⵠⲆΔᐃ].id = ts.ΔⵠⲆΔᐃ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆᐃⵠⲆⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⲆΔᐃ].id = ts.ΔⵠⲆΔᐃ;
    this.ΔᐃΔⲆ[ss.ΔⵠⲆΔᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔΔⵠⵠⵠᐃⲆ], Ui);
    this.ΔᐃΔⲆ[ss.ΔⵠⲆΔᐃ].id = ss.ΔⵠⲆΔᐃ;
    this.ΔⲆᐃ[ts.ΔⵠⲆⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ΔⲆⵠⲆⲆΔΔ], 3);
    this.ΔⲆᐃ[ts.ΔⵠⲆⵠᐃ].id = ts.ΔⵠⲆⵠᐃ;
    this.ⵠⵠᐃ[ts.ΔⵠⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔⵠⲆⲆᐃⲆ], 3);
    this.ⵠⵠᐃ[ts.ΔⵠⲆⵠᐃ].id = ts.ΔⵠⲆⵠᐃ;
    this.ΔᐃΔⲆ[ss.ΔⵠⲆⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠΔᐃᐃᐃⵠᐃ], 3);
    this.ΔᐃΔⲆ[ss.ΔⵠⲆⵠᐃ].id = ss.ΔⵠⲆⵠᐃ;
    this.ΔⲆᐃ[ts.Δⵠⵠⵠᐃ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⲆⵠΔⲆⵠ], Oj);
    this.ΔⲆᐃ[ts.Δⵠⵠⵠᐃ].id = ts.Δⵠⵠⵠᐃ;
    this.ⵠⵠᐃ[ts.Δⵠⵠⵠᐃ] = Sv(60, 60, 0, ⵠᐃ[rs.ΔᐃᐃΔⵠⵠᐃ], _g);
    this.ⵠⵠᐃ[ts.Δⵠⵠⵠᐃ].id = ts.Δⵠⵠⵠᐃ;
    this.ΔⲆᐃ[ts.ΔⲆΔⲆⲆΔⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃⵠⲆΔⵠᐃⲆⲆⵠ], 3);
    this.ΔⲆᐃ[ts.ΔⲆΔⲆⲆΔⲆ].id = ts.ΔⲆΔⲆⲆΔⲆ;
    this.ⵠⵠᐃ[ts.ΔⲆΔⲆⲆΔⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⲆᐃΔΔΔᐃⲆᐃ], Ui);
    this.ⵠⵠᐃ[ts.ΔⲆΔⲆⲆΔⲆ].id = ts.ΔⲆΔⲆⲆΔⲆ;
    this.ΔⲆᐃ[ts.ΔⵠΔᐃᐃⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃᐃⵠᐃⲆⵠⲆΔⲆ], 3);
    this.ΔⲆᐃ[ts.ΔⵠΔᐃᐃⲆⵠ].id = ts.ΔⵠΔᐃᐃⲆⵠ;
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃᐃⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆⲆᐃΔΔⲆᐃ], wq);
    this.ⵠⵠᐃ[ts.ΔⵠΔᐃᐃⲆⵠ].id = ts.ΔⵠΔᐃᐃⲆⵠ;
    this.ΔⲆᐃ[ts.ⲆⲆΔΔΔᐃⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⵠⵠⲆΔΔᐃΔⲆⲆ], Ds);
    this.ΔⲆᐃ[ts.ⲆⲆΔΔΔᐃⲆ].id = ts.ⲆⲆΔΔΔᐃⲆ;
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔΔᐃⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ⲆᐃΔᐃⲆⵠΔΔΔ], yr);
    this.ⵠⵠᐃ[ts.ⲆⲆΔΔΔᐃⲆ].id = ts.ⲆⲆΔΔΔᐃⲆ;
    this.ΔⲆᐃ[ts.ΔᐃΔᐃΔⲆⲆ] = Sv(68, 68, 0, ⵠᐃ[rs.ⲆΔᐃΔᐃⲆΔⲆⵠ], Ss);
    this.ΔⲆᐃ[ts.ΔᐃΔᐃΔⲆⲆ].id = ts.ΔᐃΔᐃΔⲆⲆ;
    this.ⵠⵠᐃ[ts.ΔᐃΔᐃΔⲆⲆ] = Sv(60, 60, 0, ⵠᐃ[rs.ᐃⵠⲆⵠΔᐃⵠⵠᐃ], Ds);
    this.ⵠⵠᐃ[ts.ΔᐃΔᐃΔⲆⲆ].id = ts.ΔᐃΔᐃΔⲆⲆ;
    this.ΔⲆᐃ[ts.ⵠⵠΔᐃΔⲆⵠ] = Sv(68, 68, 0, ⵠᐃ[rs.ᐃΔⲆΔᐃᐃᐃΔⵠ], 3);
    this.ΔⲆᐃ[ts.ⵠⵠΔᐃΔⲆⵠ].id = ts.ⵠⵠΔᐃΔⲆⵠ;
    this.ⵠⵠᐃ[ts.ⵠⵠΔᐃΔⲆⵠ] = Sv(60, 60, 0, ⵠᐃ[rs.ⵠⲆⲆⲆᐃⵠΔⵠΔ], Kb);
    this.ⵠⵠᐃ[ts.ⵠⵠΔᐃΔⲆⵠ].id = ts.ⵠⵠΔᐃΔⲆⵠ;
    this.ᐃΔΔⵠⲆΔΔ = function () {
      for (var a = Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ, b = ek, c = 10, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[Ob].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⵠΔᐃⲆΔⵠΔ = function () {
      var a = Math.floor(Math.floor((3 + Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ.length) / 4) * (10 + this.ΔⲆᐃ[0].info.Δᐃ[0].width) + 35);
      for (var b = lt; b < this.ΔⲆᐃ.length; b++) {
        if (this.ΔⲆᐃ[b]) {
          this.ΔⲆᐃ[b].info.translate.x = a;
          this.ΔⲆᐃ[b].info.translate.y = 22;
        }
      }
      this.ΔⵠΔΔᐃⲆΔ.info.translate.x = a + 17;
      this.ΔⵠΔΔᐃⲆΔ.info.translate.y = 22 + ⵠᐃ[rs.ᐃⲆᐃⲆᐃⲆⵠ].height;
      this.ⲆΔⲆⲆᐃⲆⲆ.info.translate.x = a + Mo;
      this.ⲆΔⲆⲆᐃⲆⲆ.info.translate.y = 30;
      this.ⲆⲆᐃⵠᐃΔΔ.info.translate.x = a + Bo;
      this.ⲆⲆᐃⵠᐃΔΔ.info.translate.y = 22 + ⵠᐃ[rs.ᐃⲆᐃⲆᐃⲆⵠ].height;
    };
    this.ⵠⲆⵠᐃΔΔΔⵠⲆ = function () {
      var a = Math.floor((Oo - ⵠᐃ[rs.ΔΔᐃⵠᐃⵠⲆ][Go].width) / Ci);
      for (var b = 0; b < this.ᐃΔⵠΔᐃ.length; b++) {
        this.ᐃΔⵠΔᐃ[b].button.info.translate.x = a;
        this.ᐃΔⵠΔᐃ[b].button.info.translate.y = -th;
      }
    };
    this.ⵠⵠⵠᐃⵠⲆΔ = function () {
      var a = zs + Math.floor(Math.floor((yr + Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ.length) / mi) * (10 + this.ⲆΔᐃᐃΔΔΔ.info.Δᐃ[jg].width) + 35);
      this.ⲆΔᐃᐃΔΔΔ.info.translate.x = a;
      this.ⲆΔᐃᐃΔΔΔ.info.translate.y = 33;
      this.ΔⲆᐃΔⵠⲆⲆ.info.translate.x = this.ⲆΔᐃᐃΔΔΔ.info.translate.x;
      this.ΔⲆᐃΔⵠⲆⲆ.info.translate.y = 137;
      this.ⲆⵠⵠΔⵠᐃⲆ.info.translate.x = this.ⲆΔᐃᐃΔΔΔ.info.translate.x;
      this.ⲆⵠⵠΔⵠᐃⲆ.info.translate.y = 240;
    };
    this.ⵠⵠⲆⲆΔᐃⲆ = function () {
      var a = 12 + Math.floor((10 + this.ⵠⲆᐃΔⵠΔᐃ.info.Δᐃ[0].width) * Math.floor((3 + Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ.length) / Ah) + 35);
      this.ⵠⲆᐃΔⵠΔᐃ.info.translate.x = a;
      this.ⵠⲆᐃΔⵠΔᐃ.info.translate.y = 36;
      a += 83;
      this.ᐃΔⲆⵠⵠⲆΔ.info.translate.x = a;
      this.ᐃΔⲆⵠⵠⲆΔ.info.translate.y = 36;
      this.ⵠⵠᐃⲆᐃⲆΔ.info.translate.x = a;
      this.ⵠⵠᐃⲆᐃⲆΔ.info.translate.y = 36;
      this.ᐃⵠⵠΔᐃⵠⲆ.info.translate.x = a;
      this.ᐃⵠⵠΔᐃⵠⲆ.info.translate.y = 36;
      this.ᐃⵠⵠΔᐃΔΔ.info.translate.x = a;
      this.ᐃⵠⵠΔᐃΔΔ.info.translate.y = 36;
      this.ᐃⵠᐃΔⲆⵠΔ.info.translate.x = a;
      this.ᐃⵠᐃΔⲆⵠΔ.info.translate.y = 36;
    };
    this.ᐃᐃⲆᐃⵠΔΔ = function () {
      var a = mk + Math.floor((ek + this.ⲆⲆΔⵠΔᐃⵠ.info.Δᐃ[Yl].width) * Math.floor((Ss + Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ.length) / Dl) + 35);
      this.ⲆⲆΔⵠΔᐃⵠ.info.translate.x = a;
      this.ⲆⲆΔⵠΔᐃⵠ.info.translate.y = 36;
      a += 83;
      this.ⲆΔᐃⲆΔⵠᐃ.info.translate.x = a;
      this.ⲆΔᐃⲆΔⵠᐃ.info.translate.y = 36;
    };
    this.ΔⲆΔⲆᐃΔᐃ = function () {
      var a = Math.floor(Math.floor((Jh + Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ.length) / jo) * (Ks + this.ⵠᐃᐃⲆⵠⲆⲆ.info.Δᐃ[0].width) + 35);
      this.ⵠᐃᐃⲆⵠⲆⲆ.info.translate.x = a;
      this.ⵠᐃᐃⲆⵠⲆⲆ.info.translate.y = 22;
    };
    this.ⵠᐃⵠⵠᐃΔⲆ = function () {
      var a = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ;
      if (a.length > 0) {
        var b = Math.floor((Oo - (a[fs].info.width + Jb) * Sw.Δᐃⵠᐃ.max) / nl);
      }
      for (var c = vl; a.length > c; c++) {
        a[c].info.translate.x = b + (a[c].info.width + O) * c;
        a[c].info.translate.y = cq - a[c].info.width - ok;
        this.ᐃⲆΔⲆᐃ[a[c].id].info.translate.x = a[c].info.translate.x + ao;
        this.ᐃⲆΔⲆᐃ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃⲆΔⲆᐃ[a[c].id].info.Δᐃ[0].height - dn;
      }
    };
    var m;
    var n = 0;
    function o() {
      f.ᐃᐃᐃ();
      if (++n == 30) {
        f.ⵠΔⲆΔΔᐃⲆ();
        f.ᐃᐃᐃ();
        return;
      }
      Vf.setTimeout(o, 33);
    }
    this.ⵠⲆᐃΔⲆ = function (a) {
      if (Sw.ⵠⲆⵠⵠⲆ.open) {
        Sw.ⵠⲆⵠⵠⲆ.ⵠⲆᐃΔⲆ();
      }
      if (Sw.ΔᐃᐃⵠΔ.open) {
        Sw.ΔᐃᐃⵠΔ.ⵠⲆᐃΔⲆ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ⵠⲆΔᐃᐃ.style.display = "none";
      f.ⵠⲆΔᐃᐃ.open = false;
      f.sign.style.display = "none";
      f.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ⵠⲆⵠᐃ.open = Vl;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      f.ⲆⲆⵠᐃ.open = Va;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ᐃⲆⲆᐃΔ.open = As;
      document.getElementById("chronoquest").style.display = "none";
      f.ᐃᐃΔΔ.open = xl;
      m = a;
      f.ⵠΔⲆᐃᐃΔⲆ();
      f.ⵠⵠ.style.cursor = f.ⲆᐃΔⵠΔⲆⵠ;
      Vw.ⵠⲆᐃΔⲆ();
      p = -og;
      q();
      zf();
    };
    var p = -1;
    function q() {
      f.ᐃᐃᐃ();
      if (++p == 30) {
        f.stop();
        m();
        return;
      }
      Vf.setTimeout(q, 33);
    }
    this.ⵠΔΔⲆⲆ = false;
    this.stop = function () {
      this.ⵠΔΔⲆⲆ = ol;
    };
    this.Δᐃᐃⵠᐃ = function () {
      ΔⵠⲆⲆ.ⲆⵠⲆᐃΔΔΔᐃⲆ();
      f.ⵠΔΔⲆⲆ = fa;
      p = -Zk;
      n = 0;
      o();
    };
    this.ᐃᐃᐃ = function () {
      this.ᐃⵠΔᐃⲆ.translate.x = Oo - this.ᐃⵠΔᐃⲆ.Δᐃ.width - Hh;
      this.ᐃⵠΔᐃⲆ.translate.y = 5;
      uf.ⲆⲆΔᐃᐃ.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ᐃⲆᐃⵠⵠᐃᐃ][ou].width - 85;
      uf.ⲆⲆΔᐃᐃ.translate.y = 10;
      this.ⵠⲆⵠᐃ.button.info.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ][0].width - ib;
      this.ⵠⲆⵠᐃ.button.info.translate.y = Yq;
      this.ᐃᐃΔΔ.button.info.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ᐃⲆⵠⲆⵠᐃΔ][0].width - 20;
      this.ᐃᐃΔΔ.button.info.translate.y = this.ⵠⲆⵠᐃ.button.info.translate.y + ⵠᐃ[rs.ΔᐃᐃᐃⲆᐃⲆ][0].height + 5;
      this.options.button.info.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ][lt].width - 20;
      this.options.button.info.translate.y = this.ᐃᐃΔΔ.button.info.translate.y + ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ][fs].height + li;
      this.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.info.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ][Yl].width - Xe;
      this.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.info.translate.y = this.options.button.info.translate.y + ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ][Hb].height;
      this.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.info.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ΔⵠⵠΔΔᐃΔ][dh].width - da;
      this.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.info.translate.y = this.options.button.info.translate.y + ⵠᐃ[rs.ᐃⵠΔᐃⵠⵠΔ][0].height;
      this.ⵠⲆΔᐃᐃ.button.info.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ][Eu].width - 20;
      this.ⵠⲆΔᐃᐃ.button.info.translate.y = this.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.info.translate.y + ⵠᐃ[rs.ΔΔⲆΔᐃᐃⲆ][0].height;
      Sw.ΔⲆⵠⵠΔ.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - 63 - 85;
      Sw.ΔⲆⵠⵠΔ.translate.y = 100;
      Sw.ⲆΔⲆⵠᐃⵠⵠ.translate.x = this.ᐃⵠΔᐃⲆ.translate.x - ⵠᐃ[rs.ⵠᐃⵠⵠⵠⵠΔ].width - 85;
      Sw.ⲆΔⲆⵠᐃⵠⵠ.translate.y = Sw.ΔⲆⵠⵠΔ.translate.y + ek + ⵠᐃ[rs.ΔⵠⲆΔⵠⲆΔ].height;
      this.ⲆⲆⵠΔⲆ.translate.y = cq - Ss - 193;
      this.ⲆⲆⵠΔⲆ.translate.x = Oo - R - 193;
      this.ⵠᐃⲆᐃ.translate.x = Ba;
      this.ⵠᐃⲆᐃ.translate.y = cq - this.ⵠᐃⲆᐃ.Δᐃ.height - Rh;
      this.ⵠᐃⲆⲆⵠ.button.info.translate.x = Ko - 91 / Ir;
      this.ⵠᐃⲆⲆⵠ.button.info.translate.y = 50;
      this.ᐃΔΔⵠⲆΔΔ();
      this.ⵠᐃⵠⵠᐃΔⲆ();
      this.ⵠΔᐃⲆΔⵠΔ();
      this.ΔⲆΔⲆᐃΔᐃ();
      this.ᐃᐃⲆᐃⵠΔΔ();
      this.ⵠⵠⲆⲆΔᐃⲆ();
      this.ⵠⵠⵠᐃⵠⲆΔ();
      this.ⵠⲆⵠᐃΔΔΔⵠⲆ();
      this.sign.ΔΔᐃΔⵠᐃⲆ();
      Im();
      Sw.ⵠⲆⵠⵠⲆ.ᐃᐃᐃ();
      Sw.ΔᐃᐃⵠΔ.ᐃᐃᐃ();
      this.ΔᐃⲆᐃΔᐃᐃΔⲆ.ᐃᐃᐃ();
      this.ⵠⲆⵠᐃ.ΔΔⵠⲆᐃΔᐃ.ᐃᐃᐃ();
      this.ⵠⲆⵠᐃ.list.ᐃᐃᐃ();
      this.ⲆⲆⵠᐃ.ᐃᐃᐃ();
      this.ᐃⲆⲆᐃΔ.ᐃᐃᐃ();
      this.ᐃᐃΔΔ.ᐃᐃᐃ();
      this.ⵠᐃⲆⲆⵠ.ᐃᐃᐃ();
      this.options.ᐃᐃᐃ();
      this.ⵠⲆΔᐃᐃ.ᐃᐃᐃ();
      this.sign.ᐃᐃᐃ();
      var a = ka;
      if (n != 30) {
        a = 1500 / (n + bq) - 50;
      }
      if (-bh != p) {
        a = -(1500 / (30 - p + Ws) - 48);
      }
      this.ⵠᐃⲆⲆⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃⵠΔᐃⲆ.translate.y -= Xa < a ? a : -a;
      Sw.ΔⲆⵠⵠΔ.translate.y -= a > gj ? a : -a;
      Sw.ⲆΔⲆⵠᐃⵠⵠ.translate.y -= a > 0 ? a : -a;
      this.ⵠⲆⵠᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.ᐃᐃΔΔ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > Et ? a : -a;
      this.ⵠⲆΔᐃᐃ.button.info.translate.y -= ks < a ? a : -a;
      this.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.info.translate.y -= a > dh ? a : -a;
      this.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.info.translate.y -= Hb < a ? a : -a;
      uf.ⲆⲆΔᐃᐃ.translate.y -= ka < a ? a : -a;
      this.ⵠᐃⲆᐃ.translate.y -= a < ka ? a : -a;
      this.ⲆⲆⵠΔⲆ.translate.y -= ou > a ? a : -a;
    };
    this.ⲆΔⵠⲆᐃᐃᐃΔⵠ = function () {
      if (!Sw.ΔᐃΔᐃᐃ.enabled && !!this.ⵠΔᐃΔᐃⲆⲆ && !Sw.ⵠⲆΔᐃⲆ) {
        Xm();
      }
      ip();
      (function () {
        var a = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
        if (uf.mode === fw.ⲆⲆΔⵠⵠ || uf.mode === fw.ⵠΔΔΔΔ || uf.mode === fw.ⵠⵠᐃΔⲆ || fw.ⵠᐃⵠᐃᐃ === uf.mode || uf.mode === fw.ΔⵠⲆᐃΔⵠΔ || fw.ⵠⵠᐃᐃΔ === uf.mode) {
          for (var b = 0; b < a.length; b++) {
            a[b].ᐃΔⵠⲆᐃΔⵠ();
          }
        } else if (uf.mode === fw.ᐃΔΔⵠᐃⵠⲆ) {
          for (b = 0; b < a.length; b++) {
            if (Sw.ᐃᐃⵠΔⵠⲆΔ || Sw.ⲆΔⲆⵠᐃⵠⵠ.enabled || a[b].ᐃᐃΔⲆ.ᐃᐃⵠⲆΔ !== "spectator") {
              a[b].ᐃΔⵠⲆᐃΔⵠ();
            }
          }
        }
      })();
      Or.ⵠΔᐃⵠᐃⲆⲆ();
      if (this.ⵠΔᐃΔᐃⲆⲆ) {
        _m();
        if (uq === this.ΔΔᐃⵠᐃⲆΔ) {
          this.ⵠⲆⵠᐃ.button.ᐃⵠΔⲆ(d);
        }
        if (fw.ⵠⵠᐃΔⲆ !== uf.mode && uf.mode !== fw.ⵠᐃⵠᐃᐃ && fw.ΔⵠⲆᐃΔⵠΔ !== uf.mode && this.ⲆⵠΔⵠᐃⲆΔ === 1) {
          this.ᐃᐃΔΔ.button.ᐃⵠΔⲆ(d);
        }
        this.options.button.ᐃⵠΔⲆ(d);
        if (or === this.ᐃᐃⵠⵠΔⲆⲆ) {
          this.ⵠⲆΔᐃᐃ.button.ᐃⵠΔⲆ(d);
        }
        if (Vw.Δᐃᐃⵠᐃ) {
          this.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.ᐃⵠΔⲆ(d);
        } else {
          this.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.ᐃⵠΔⲆ(d);
        }
        Ym();
        Nm();
        this.ⵠᐃⲆᐃ.ᐃⵠΔⲆ();
        Vm();
        qm();
        Um();
        op();
        np();
        Mm();
        Bm();
        (function () {
          if (!Sw.ⲆⲆⵠⲆ.open && !Sw.ⲆⲆⲆⵠⵠ.open && !Sw.ⵠᐃⵠΔ.open && !Sw.ᐃⵠᐃΔ.open && !Sw.ⲆⲆΔᐃ.open) {
            Sw.Δᐃᐃᐃᐃ.open = Bh;
            var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
            var b = fw.ⵠⵠᐃΔΔΔⲆΔᐃ;
            if (a) {
              for (var c = Eu; c < uf.ΔⵠⲆ[iw.ⲆⵠⲆⵠᐃ].length; c++) {
                var d = uf.ΔⵠⲆ[iw.ⲆⵠⲆⵠᐃ][c];
                var e = ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(d, a);
                if (e < b) {
                  b = e;
                  Sw.Δᐃᐃᐃᐃ.open = tk;
                  Sw.Δᐃᐃᐃᐃ.ⵠⵠⲆΔ = d.ⵠⵠⲆΔ;
                  Sw.Δᐃᐃᐃᐃ.ⲆΔⵠᐃΔ = d.id;
                }
              }
            }
          }
        })();
        Jm();
        Am();
        km();
        Qm();
        Im();
        Fm();
      }
      if (Sw.ΔᐃΔᐃᐃ.enabled) {
        Sm();
      }
      Em();
      if (this.ⵠΔᐃΔᐃⲆⲆ && this.ⲆΔΔᐃᐃⲆᐃ === 1) {
        Wm();
      }
      Sw.ⲆⲆⲆⲆΔⵠⵠ.ᐃⵠΔⲆ();
      Sw.alert.ᐃⵠΔⲆ("#FFF", "#000");
      if (this.ⵠΔᐃΔᐃⲆⲆ) {
        Sw.ΔᐃΔᐃᐃ.ᐃⵠΔⲆ();
        Sw.ⵠᐃⲆⲆⵠ.ᐃⵠΔⲆ();
        Sw.Δᐃⵠᐃ.ΔᐃⵠΔΔᐃⵠ.ᐃⵠΔⲆ(pf.ⵠΔᐃΔ.x, pf.ⵠΔᐃΔ.y);
      }
      Dm();
    };
    this.ⲆⲆᐃⲆⵠᐃⵠⲆΔ = function () {
      Sw.ᐃΔΔⵠ.ᐃᐃᐃ();
      Sw.ⵠᐃⲆᐃ.ᐃᐃᐃ();
      if (!Sw.reconnect.enabled && Sw.ⵠⵠᐃⲆΔ) {
        Sw.control.ᐃᐃᐃ();
        Sw.ΔⲆⵠⵠΔ.ᐃᐃᐃ();
      }
      uf.ᐃᐃᐃ();
      this.ᐃᐃΔΔ.ⵠⵠΔᐃᐃΔᐃⲆᐃ();
    };
    this.ᐃⵠⲆᐃⲆΔΔⲆⲆ = function () {
      sv();
    };
    this.ΔⵠⲆΔᐃⵠΔᐃⲆ = function () {
      ΔⵠⲆⲆ.ΔᐃⵠΔᐃᐃⲆᐃᐃ();
      ΔⵠⲆⲆ.ⵠᐃⵠⵠΔΔⲆⵠⲆ();
      ΔⵠⲆⲆ.ⲆⵠᐃⵠΔⵠΔΔⵠ();
      ΔⵠⲆⲆ.ⵠⲆⵠᐃΔΔᐃⲆⲆ();
    };
    this.ᐃⵠΔⲆ = function () {
      if (!Sw.reconnect.enabled && Sw.ⵠⵠᐃⲆΔ) {
        this.ΔⵠⲆΔᐃⵠΔᐃⲆ();
      }
      Vw.ΔΔⲆⲆⲆⵠⲆⲆΔ();
      this.ⲆⲆᐃⲆⵠᐃⵠⲆΔ();
      if ($r !== hf.ⲆΔⵠⵠᐃᐃΔ) {
        this.ᐃⵠⲆᐃⲆΔΔⲆⲆ();
        this.ⲆΔⵠⲆᐃᐃᐃΔⵠ();
      } else {
        var a = Ⲇᐃ.ⲆⲆᐃᐃΔᐃⲆ;
        Rm(d, a, Ko - a.width / 4, eq - a.height / 4, a.width / 2, a.height / Og);
      }
    };
    this.ΔᐃᐃⵠᐃΔⵠ = function (a) {
      if (Sw.ⵠⲆⵠⵠⲆ.open && a.keyCode === 27) {
        Sw.ⵠⲆⵠⵠⲆ.ⵠⲆᐃΔⲆ();
      } else if (Sw.ΔᐃᐃⵠΔ.open && a.keyCode === 27) {
        Sw.ΔᐃᐃⵠΔ.ⵠⲆᐃΔⲆ();
      } else if (Sw.ⵠⲆⵠⵠⲆ.open || Sw.ΔᐃᐃⵠΔ.open || a.keyCode != 79 || -bq != p) {
        if (a.keyCode == 13 && p == -vg) {
          if (Sw.ΔᐃᐃⵠΔ.open) {
            Sw.ΔᐃᐃⵠΔ.ΔⵠⵠⲆⲆΔⵠ();
          } else {
            Sw.ⵠⲆⵠⵠⲆ.Δᐃᐃⵠᐃ();
          }
        } else if (!Sw.ⵠⲆⵠⵠⲆ.open && !Sw.ΔᐃᐃⵠΔ.open) {
          if (a.keyCode === 82) {
            Sw.ΔⲆⵠⵠΔ.ⵠΔᐃⲆⲆⲆΔ();
          } else if (a.keyCode !== 80 || uf.mode !== fw.ᐃΔΔⵠᐃⵠⲆ || Sw.ᐃᐃⵠΔⵠⲆΔ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Sw.ⵠⲆⲆΔ.id < 0) {
                var b = a.keyCode - 49;
                var c = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ[b];
                if (c) {
                  ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Sw.ᐃⲆᐃⲆΔⵠⲆ = !Sw.ᐃⲆᐃⲆΔⵠⲆ;
            } else if (a.keyCode == 71) {
              Sw.ⵠⲆⲆΔ.ⵠⵠⵠⵠⲆⲆⲆΔⲆ();
            }
          } else {
            Sw.ⲆΔⲆⵠᐃⵠⵠ.ⵠΔᐃⲆⲆⲆΔ();
          }
        }
      } else {
        Sw.ΔᐃᐃⵠΔ.ΔⵠΔⵠⵠᐃᐃⲆΔ();
      }
      mf.up(a);
    };
    this.ⵠⲆⲆⲆⵠΔⵠ = function (a) {
      mf.down(a);
      if (!Sw.ⵠⲆⵠⵠⲆ.open && !Sw.ΔᐃᐃⵠΔ.open) {
        if (a.keyCode == 8) a.preventDefault();

        if (a.code === Settings.Spectator.k) {
          Spectator = !Spectator
        }
      }
    };
    this.ᐃⲆᐃⵠᐃᐃⲆ = function (b) {
      pf.ⵠΔᐃΔ = Tv(f.ⵠⵠ, b);
      var c = Qo;
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0) {
        f.ⲆⲆⵠΔⲆ.focus(pf.ⵠΔᐃΔ);
      }
      var d = Sw.ⲆⲆⵠⲆ;
      if (Et > Sw.ⵠⲆⲆΔ.id && d.id >= 0 && (!Sw.ⲆⲆⵠⲆ.lock || Sw.id === Sw.ⲆⲆⵠⲆ.ⵠⵠⲆΔ)) {
        c |= f.ΔⲆᐃ[Sw.ⲆⲆⵠⲆ.id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      var e = Sw.ⵠᐃⵠΔ;
      if (e.open && Xa < e.ⲆⵠⵠΔⵠⵠᐃ) {
        c |= f.ⲆΔᐃⲆΔⵠᐃ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      var j = Sw.ⲆⲆΔᐃ;
      if (j.open && j.ᐃⵠⲆΔⲆΔⵠ > 0) {
        c |= f.ᐃΔⲆⵠⵠⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        c |= f.ⵠⵠᐃⲆᐃⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        c |= f.ᐃⵠⵠΔᐃⵠⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        c |= f.ᐃⵠⵠΔᐃΔΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        c |= f.ᐃⵠᐃΔⲆⵠΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      var k = Sw.ᐃⵠᐃΔ;
      if (k.open && k.ⵠᐃΔⵠⲆⵠΔ > 0) {
        c |= f.ⲆⵠⵠΔⵠᐃⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (Sw.sign.open) {
        c |= f.sign.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (!Sw.ⲆⲆⵠⲆ.lock) {
        if (Sw.ⲆⲆⵠⲆ.ᐃⵠᐃΔΔᐃΔ) {
          c |= f.ⲆⲆᐃⵠᐃΔΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        }
      }
      if (Sw.ⲆⲆⵠⲆ.ⵠⲆᐃᐃΔΔⵠ) {
        c |= f.ΔⵠΔΔᐃⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (Sw.ⵠⲆⲆΔ.id < 0 && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open && !f.ⵠⲆΔᐃᐃ.open) {
        for (var a = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ, m = vl; a.length > m; m++) {
          var n = a[m].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
          c |= n;
          if (n) {
            Sw.Δᐃⵠᐃ.ΔᐃⵠΔΔᐃⵠ.start(m, pf.ⵠΔᐃΔ);
          }
          if (d.open && (d.id < 0 || d.id == a[m].id) || Sw.ⲆⲆⲆⵠⵠ.open && a[m].id === ts.ᐃⲆᐃΔ || Sw.Δᐃᐃᐃᐃ.open && a[m].id === ts.ⵠᐃⲆΔᐃ || Sw.ᐃⵠᐃΔ.open && (ts.ᐃⲆᐃΔ === a[m].id || a[m].id === ts.ᐃⲆⵠⵠⵠ) || Sw.ⵠᐃⵠΔ.open && ts.ᐃΔΔⲆⵠ === a[m].id || Sw.ⲆⲆΔᐃ.open && a[m].id === ts.ᐃⲆᐃΔ) {
            c |= f.ᐃⲆΔⲆᐃ[a[m].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
          }
        }
      }
      if (Sw.ᐃⲆᐃΔⲆ.open) {
        c |= f.ᐃⲆᐃΔⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (f.ΔⲆⲆΔᐃ != -1) {
        if (c |= f.ᐃΔⵠΔᐃ[f.ΔⲆⲆΔᐃ].button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv)) {
          var o = true;
        }
      } else {
        o = false;
      }
      if (Sw.ⵠⲆⲆΔ.id < 0 && Eu > Sw.ⵠⲆⲆΔ.ΔΔΔΔ && !o && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ⵠⲆΔᐃᐃ.open && !Sw.ⵠⲆΔᐃⲆ) {
        a = Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ;
        m = Bs;
        for (; a.length > m; m++) {
          c |= a[m].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        }
      }
      if (Sw.ⵠⲆⲆΔ.id < jg && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < dh && !!Sw.ⵠᐃⲆⲆⵠ.open && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open) {
        c |= f.ⵠᐃⲆⲆⵠ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < ks && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open) {
        c |= f.ⵠⲆⵠᐃ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Go && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open) {
        c |= f.options.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open) {
        c |= f.ⵠⲆΔᐃᐃ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < vl && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open && !f.ⵠⲆΔᐃᐃ.open) {
        if (Vw.Δᐃᐃⵠᐃ) {
          c |= f.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        } else {
          c |= f.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
        }
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < hk && !f.ⵠⲆⵠᐃ.open && !f.ⵠⲆΔᐃᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && uf.mode !== fw.ⵠⵠᐃΔⲆ && uf.mode !== fw.ⵠᐃⵠᐃᐃ && fw.ΔⵠⲆᐃΔⵠΔ !== uf.mode) {
        c |= f.ᐃᐃΔΔ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Mv);
      }
      if (!c && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open && !f.sign.open) {
        if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ >= ou) {
          ΔⵠⲆⲆ.ⵠⵠᐃⲆⵠⵠΔⵠΔ();
        } else if (!o) {
          pf.down();
        }
      }
    };
    this.ᐃΔᐃᐃⵠΔΔ = function (b) {
      pf.ⵠΔᐃΔ = Tv(f.ⵠⵠ, b);
      pf.up();
      if (!Sw.Δᐃⵠᐃ.ΔᐃⵠΔΔᐃⵠ.release()) {
        var c = Sw.ⲆⲆⵠⲆ;
        var d = Sw.ⲆⲆⲆⵠⵠ;
        var e = Sw.Δᐃᐃᐃᐃ;
        var i = Sw.ⵠᐃⵠΔ;
        var j = Sw.ⲆⲆΔᐃ;
        var k = Sw.ᐃⵠᐃΔ;
        if (Sw.control.attack) {
          Sw.control.attack = Et;
          ΔⵠⲆⲆ.ᐃⲆᐃⲆΔⲆⵠⲆΔ();
        }
        if (f.ΔⲆⲆΔᐃ != -or) {
          var m = f.ᐃΔⵠΔᐃ[f.ΔⲆⲆΔᐃ].button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ᐃΔⵠΔᐃ[f.ΔⲆⲆΔᐃ].action();
          }
        }
        if (Bs > Sw.ⵠⲆⲆΔ.id && Go <= c.id && !f.ⲆⲆⵠᐃ.open) {
          if (!Sw.ⲆⲆⵠⲆ.lock || Sw.ⲆⲆⵠⲆ.ⵠⵠⲆΔ === Sw.id) {
            if (m = f.ΔⲆᐃ[Sw.ⲆⲆⵠⲆ.id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
              ΔⵠⲆⲆ.ᐃᐃⲆᐃⲆΔᐃᐃⲆ(c);
            }
          }
        }
        if ((i = Sw.ⵠᐃⵠΔ).open && i.ⲆⵠⵠΔⵠⵠᐃ > 0 && !f.ⲆⲆⵠᐃ.open) {
          if (m = f.ⲆΔᐃⲆΔⵠᐃ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            ΔⵠⲆⲆ.ⵠᐃⵠΔΔⲆⵠΔⵠ(i);
          }
        }
        if ((j = Sw.ⲆⲆΔᐃ).open && j.ᐃⵠⲆΔⲆΔⵠ > Go && !f.ⲆⲆⵠᐃ.open) {
          switch (j.type) {
            case iw.ⲆᐃΔᐃⲆ:
              if (m = f.ᐃΔⲆⵠⵠⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
                ΔⵠⲆⲆ.ᐃⲆⵠᐃΔⲆΔ(j);
              }
              break;
            case iw.ⵠΔⲆⵠΔ:
              if (m = f.ⵠⵠᐃⲆᐃⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
                ΔⵠⲆⲆ.ᐃⲆⵠᐃΔⲆΔ(j);
              }
              break;
            case iw.ⲆⲆⵠΔⵠ:
              if (m = f.ᐃⵠⵠΔᐃⵠⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
                ΔⵠⲆⲆ.ᐃⲆⵠᐃΔⲆΔ(j);
              }
              break;
            case iw.ⵠⵠⵠⵠⲆ:
              if (m = f.ᐃⵠⵠΔᐃΔΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
                ΔⵠⲆⲆ.ᐃⲆⵠᐃΔⲆΔ(j);
              }
              break;
            case iw.ᐃᐃᐃΔᐃ:
              if (m = f.ᐃⵠᐃΔⲆⵠΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
                ΔⵠⲆⲆ.ᐃⲆⵠᐃΔⲆΔ(j);
              }
          }
        }
        if ((k = Sw.ᐃⵠᐃΔ).open && k.ⵠᐃΔⵠⲆⵠΔ > 0 && !f.ⲆⲆⵠᐃ.open) {
          if (m = f.ⲆⵠⵠΔⵠᐃⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            ΔⵠⲆⲆ.ⵠΔᐃⵠⲆⲆⵠⵠⲆ(k);
          }
        }
        if (Sw.sign.open && !f.ⲆⲆⵠᐃ.open) {
          if (m = f.sign.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            f.sign.select();
          }
        }
        if (!Sw.ⲆⲆⵠⲆ.lock && !f.ⲆⲆⵠᐃ.open) {
          if (Sw.ⲆⲆⵠⲆ.ᐃⵠᐃΔΔᐃΔ && (m = f.ⲆⲆᐃⵠᐃΔΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv))) {
            ΔⵠⲆⲆ.ᐃⲆⲆⵠⲆⵠᐃⵠⲆ(c);
          }
        }
        if (Sw.ⲆⲆⵠⲆ.ⵠⲆᐃᐃΔΔⵠ && !f.ⲆⲆⵠᐃ.open && (m = f.ΔⵠΔΔᐃⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv))) {
          ΔⵠⲆⲆ.ΔᐃⲆⵠⵠᐃΔᐃⲆ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Sw.ᐃⲆᐃΔⲆ.open) {
          if (m = f.ᐃⲆᐃΔⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            ΔⵠⲆⲆ.ᐃⲆᐃΔⲆ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Sw.ⵠⲆⲆΔ.id < 0 && !Sw.ΔᐃΔᐃᐃ.enabled && !f.ⲆⲆⵠᐃ.open) {
          for (var l = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ, o = 0; o < l.length; o++) {
            if (m = l[o].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
              if (kr != b.which || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == _g) && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0) {
                  f.ⲆⲆⵠᐃ.ᐃⵠⵠⵠⵠᐃΔ(l[o].id);
                }
              } else {
                ΔⵠⲆⲆ.ᐃᐃΔⲆⲆ(l[o].id, o);
              }
            } else if (c.open && (c.id < Xa || c.id === l[o].id)) {
              if ((m = f.ᐃⲆΔⲆᐃ[l[o].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Bs) {
                ΔⵠⲆⲆ.ⲆΔΔΔⲆⵠΔⵠⲆ(c, l[o].id, b.shiftKey ? cl : 1);
              }
            } else if (e.open && ts.ⵠᐃⲆΔᐃ === l[o].id) {
              if ((m = f.ᐃⲆΔⲆᐃ[l[o].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) && Ob > Sw.ⵠⲆⲆΔ.ΔΔΔΔ) {
                ΔⵠⲆⲆ.ΔΔⲆᐃᐃⲆⵠΔᐃ(e);
              }
            } else if (d.open && l[o].id === ts.ᐃⲆᐃΔ) {
              if ((m = f.ᐃⲆΔⲆᐃ[l[o].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0) {
                ΔⵠⲆⲆ.ⲆΔᐃΔⲆⲆⲆⵠⲆ(d, b.shiftKey ? hc : 1);
              }
            } else if (i.open && l[o].id === ts.ᐃΔΔⲆⵠ) {
              if ((m = f.ᐃⲆΔⲆᐃ[l[o].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) && Eu > Sw.ⵠⲆⲆΔ.ΔΔΔΔ) {
                ΔⵠⲆⲆ.ⵠⲆᐃⲆⲆⲆⲆⲆⲆ(i, b.shiftKey ? 10 : uq);
              }
            } else if (j.open && l[o].id === ts.ᐃⲆᐃΔ) {
              if ((m = f.ᐃⲆΔⲆᐃ[l[o].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0) {
                ΔⵠⲆⲆ.ⵠⵠᐃⵠΔⵠⵠᐃΔ(j, b.shiftKey ? Ks : bh);
              }
            } else if (k.open && (l[o].id === ts.ᐃⲆᐃΔ || ts.ᐃⲆⵠⵠⵠ === l[o].id)) {
              if ((m = f.ᐃⲆΔⲆᐃ[l[o].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < hk) {
                if (l[o].id === ts.ᐃⲆᐃΔ) {
                  ΔⵠⲆⲆ.ⲆᐃΔⲆⵠᐃᐃ(k, b.shiftKey ? 10 : Ws, ou);
                } else {
                  ΔⵠⲆⲆ.ⲆᐃΔⲆⵠᐃᐃ(k, 0, b.shiftKey ? ib : Zn);
                }
              }
            }
          }
        }
        if (Sw.ⵠⲆⲆΔ.id < Bs && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !Sw.ΔᐃΔᐃᐃ.enabled && !f.ⲆⲆⵠᐃ.open && !Sw.ⵠⲆΔᐃⲆ) {
          l = Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ;
          o = vl;
          for (; o < l.length; o++) {
            if (m = l[o].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
              ΔⲆΔΔᐃ = ΔⵠⲆⲆ.ⵠⵠⲆⵠⵠⲆΔΔᐃ(l[o].id);
              if (ΔⲆΔΔᐃ && ga) {
                ga("send", "event", "Game", "craft", ws[ht[l[o].id].ΔⲆΔΔ].name);
              }
            }
          }
        }
        if (Sw.ⵠⲆⲆΔ.id < ka && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Ob && Sw.ⵠᐃⲆⲆⵠ.open && !f.ⵠⲆΔᐃᐃ.open && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open) {
          if (m = f.ⵠᐃⲆⲆⵠ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv)) {
            Uw.ⵠᐃⲆⲆⵠ.select();
          }
        }
        if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ⵠⲆΔᐃᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open) {
          if (Vw.Δᐃᐃⵠᐃ) {
            if (m = f.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
              Vw.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            Vw.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (dt > Sw.ⵠⲆⲆΔ.ΔΔΔΔ && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open) {
          if (m = f.options.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            f.options.ᐃΔᐃⲆᐃⲆⲆⲆΔ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (dt > Sw.ⵠⲆⲆΔ.ΔΔΔΔ && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open && f.ᐃᐃⵠⵠΔⲆⲆ === kr) {
          if (m = f.ⵠⲆΔᐃᐃ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            f.ⵠⲆΔᐃᐃ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !f.ⲆⲆⵠᐃ.open && !f.ⵠⲆΔᐃᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && f.ΔΔᐃⵠᐃⲆΔ === Th) {
          if (m = f.ⵠⲆⵠᐃ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            f.ⵠⲆⵠᐃ.ᐃᐃⲆⲆⲆΔᐃⲆᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Xa && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ⵠⲆΔᐃᐃ.open && fw.ⵠⵠᐃΔⲆ !== uf.mode && fw.ⵠᐃⵠᐃᐃ !== uf.mode && fw.ΔⵠⲆᐃΔⵠΔ !== uf.mode && ck === f.ⲆⵠΔⵠᐃⲆΔ) {
          if (m = f.ᐃᐃΔΔ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Nv)) {
            f.ᐃᐃΔΔ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Sw.ⵠⲆⲆΔ.ⵠΔᐃΔⵠ && b.which == 3) {
          f.ᐃⲆⲆᐃΔ.ᐃⵠⵠⵠⵠᐃΔ();
        }
      }
    };
    this.ⵠΔΔΔⲆΔΔ = false;
    this.ΔⲆΔⵠᐃⲆᐃ = function (b) {
      pf.ⵠΔᐃΔ = Tv(f.ⵠⵠ, b);
      var d = false;
      Uw.ᐃΔΔᐃⵠ.display = 0;
      Sw.Δᐃⵠᐃ.ΔᐃⵠΔΔᐃⵠ.ⵠΔᐃⲆⵠ(pf.ⵠΔᐃΔ);
      if (-Ws != f.ΔⲆⲆΔᐃ) {
        d |= f.ᐃΔⵠΔᐃ[f.ΔⲆⲆΔᐃ].button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      var e = Sw.ⵠᐃⵠΔ;
      if (e.open && e.ⲆⵠⵠΔⵠⵠᐃ > 0) {
        d |= f.ⲆΔᐃⲆΔⵠᐃ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      var i = Sw.ⲆⲆΔᐃ;
      if (i.open && i.ᐃⵠⲆΔⲆΔⵠ > Go) {
        d |= f.ᐃΔⲆⵠⵠⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        d |= f.ⵠⵠᐃⲆᐃⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        d |= f.ᐃⵠⵠΔᐃⵠⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        d |= f.ᐃⵠⵠΔᐃΔΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        d |= f.ᐃⵠᐃΔⲆⵠΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      var j = Sw.ᐃⵠᐃΔ;
      if (j.open && j.ⵠᐃΔⵠⲆⵠΔ > 0) {
        d |= f.ⲆⵠⵠΔⵠᐃⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (Sw.sign.open) {
        d |= f.sign.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      var a = Sw.ⲆⲆⵠⲆ;
      if (Sw.ⵠⲆⲆΔ.id < 0 && a.id >= fs && !Sw.ΔᐃΔᐃᐃ.enabled) {
        if (!Sw.ⲆⲆⵠⲆ.lock || Sw.ⲆⲆⵠⲆ.ⵠⵠⲆΔ === Sw.id) {
          d |= f.ΔⲆᐃ[a.id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        }
      }
      if (Sw.ᐃⲆᐃΔⲆ.open) {
        d |= f.ᐃⲆᐃΔⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (!Sw.ⲆⲆⵠⲆ.lock && !Sw.ΔᐃΔᐃᐃ.enabled) {
        if (Sw.ⲆⲆⵠⲆ.ᐃⵠᐃΔΔᐃΔ) {
          d |= f.ⲆⲆᐃⵠᐃΔΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        }
      }
      if (Sw.ⲆⲆⵠⲆ.ⵠⲆᐃᐃΔΔⵠ && !Sw.ΔᐃΔᐃᐃ.enabled) {
        d |= f.ΔⵠΔΔᐃⲆΔ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (Sw.ⵠⲆⲆΔ.id < 0 && !Sw.ΔᐃΔᐃᐃ.enabled) {
        for (var k = Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ, m = 0; k.length > m; m++) {
          var n = k[m].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
          d |= Uw.ᐃΔΔᐃⵠ.ⵠΔⵠᐃ(n, k[m], fs);
          if (a.open && (a.id < 0 || k[m].id == a.id) || Sw.ⲆⲆⲆⵠⵠ.open && k[m].id == ts.ᐃⲆᐃΔ || Sw.Δᐃᐃᐃᐃ.open && k[m].id === ts.ⵠᐃⲆΔᐃ || Sw.ᐃⵠᐃΔ.open && (k[m].id == ts.ᐃⲆᐃΔ || k[m].id == ts.ᐃⲆⵠⵠⵠ) || Sw.ⵠᐃⵠΔ.open && k[m].id == ts.ᐃΔΔⲆⵠ || Sw.ⲆⲆΔᐃ.open && k[m].id == ts.ᐃⲆᐃΔ) {
            d |= f.ᐃⲆΔⲆᐃ[k[m].id].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
          }
        }
      }
      if (Sw.ⵠⲆⲆΔ.id < 0 && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !Sw.ΔᐃΔᐃᐃ.enabled && !Sw.ⵠⲆΔᐃⲆ) {
        k = Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ;
        m = 0;
        for (; k.length > m; m++) {
          n = Ps;
          n = k[m].ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
          d |= Uw.ᐃΔΔᐃⵠ.ⵠΔⵠᐃ(n, k[m], 1);
        }
      }
      if (Yl > Sw.ⵠⲆⲆΔ.id && Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Ob && Sw.ⵠᐃⲆⲆⵠ.open && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open) {
        d |= f.ⵠᐃⲆⲆⵠ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < Bs && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open && f.ΔΔᐃⵠᐃⲆΔ === hj) {
        d |= f.ⵠⲆⵠᐃ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < ou && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.ⵠⲆΔᐃᐃ.open) {
        d |= f.options.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open && $q === f.ᐃᐃⵠⵠΔⲆⲆ) {
        d |= f.ⵠⲆΔᐃᐃ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (Sw.ⵠⲆⲆΔ.ΔΔΔΔ < 0 && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.ᐃⲆⲆᐃΔ.open && !f.ᐃᐃΔΔ.open && !f.options.open && !f.ⵠⲆΔᐃᐃ.open) {
        if (Vw.Δᐃᐃⵠᐃ) {
          d |= f.ΔⵠΔᐃ.ⵠⵠᐃⲆⵠΔⲆ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        } else {
          d |= f.ΔⵠΔᐃ.ᐃΔΔᐃΔΔⵠ.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
        }
      }
      if (ho > Sw.ⵠⲆⲆΔ.ΔΔΔΔ && !f.ⵠⲆⵠᐃ.open && !f.ⲆⲆⵠᐃ.open && !f.options.open && !f.ᐃⲆⲆᐃΔ.open && !f.ⵠⲆΔᐃᐃ.open && uf.mode !== fw.ⵠⵠᐃΔⲆ && uf.mode !== fw.ⵠᐃⵠᐃᐃ && uf.mode !== fw.ⵠΔⵠⲆⲆⲆᐃⲆⲆ && kr === f.ⲆⵠΔⵠᐃⲆΔ) {
        d |= f.ᐃᐃΔΔ.button.ⵠΔⵠᐃ(f.ⵠⵠ, pf.ⵠΔᐃΔ, Lv);
      }
      if (d !== f.ⵠΔΔΔⲆΔΔ) {
        f.ⵠΔΔΔⲆΔΔ = d;
        c.style.cursor = d ? f.ⲆᐃⲆⲆⵠΔᐃ : f.ⲆᐃΔⵠΔⲆⵠ;
      }
    };
    this.ⵠΔⲆΔΔᐃⲆ = function () {
      Vf.addEventListener("mousedown", this.ᐃⲆᐃⵠᐃᐃⲆ, false);
      Vf.addEventListener("mouseup", this.ᐃΔᐃᐃⵠΔΔ, false);
      Vf.addEventListener("mousemove", this.ΔⲆΔⵠᐃⲆᐃ, xl);
      Vf.addEventListener("keyup", this.ΔᐃᐃⵠᐃΔⵠ, Cl);
      Vf.addEventListener("keydown", this.ⵠⲆⲆⲆⵠΔⵠ, false);
    };
    this.ⵠΔⲆᐃᐃΔⲆ = function () {
      Vf.removeEventListener("mousedown", this.ᐃⲆᐃⵠᐃᐃⲆ, false);
      Vf.removeEventListener("mouseup", this.ᐃΔᐃᐃⵠΔΔ, false);
      Vf.removeEventListener("mousemove", this.ΔⲆΔⵠᐃⲆᐃ, vs);
      Vf.removeEventListener("keyup", this.ΔᐃᐃⵠᐃΔⵠ, false);
      Vf.removeEventListener("keydown", this.ⵠⲆⲆⲆⵠΔⵠ, vs);
    };
  }
  function Hw(b, c) {
    this.ⵠⵠ = b;
    this.Δ = c;
    var d = this;
    this.ΔᐃΔⵠⵠⵠΔ = Vl;
    this.ΔⲆⲆⵠⵠⵠⵠ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: Ob,
      translate: {
        y: 0,
        x: 0
      },
      ᐃᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⲆΔΔⵠΔ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Sw.ᐃⲆⲆⵠᐃⵠⲆ.ⲆᐃⲆⵠⲆᐃⵠ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + xt[ⲆⲆΔΔ.ΔⲆⲆⲆⵠⲆΔ] + " : " + Sw.ⲆⲆⲆ + "</div><div class=\"stats\"> " + xt[ⲆⲆΔΔ.ΔΔⵠΔᐃΔⲆ] + " : " + Sw.ᐃⲆⲆⵠᐃⵠⲆ.ΔⲆⲆⲆⲆΔᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + xt[ⲆⲆΔΔ.ⵠⵠⵠᐃΔᐃⵠ] + " : " + Sw.ᐃⲆⲆⵠᐃⵠⲆ.ΔΔⲆΔᐃ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Sw.ᐃⲆⲆⵠᐃⵠⲆ.ⵠⲆⵠᐃΔⵠΔ + " " + xt[ⲆⲆΔΔ.POINTS] + "</div></div><div id=\"shop_points\">" + xt[ⲆⲆΔΔ.ⲆⵠⲆᐃⵠΔΔ] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + xt[ⲆⲆΔΔ.ᐃΔⵠⵠⵠⵠⵠ] + "</div><div class=\"social\" id=\"fffacebook\">" + xt[ⲆⲆΔΔ.ΔⵠΔⵠⵠΔᐃ] + "</div></div><div id=\"bbback\">" + xt[ⲆⲆΔΔ.ΔⵠᐃᐃⵠⲆⲆ] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Fw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Tw.ⵠⲆᐃΔⲆ(hf.Δᐃᐃⵠᐃ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Dw, false);
        this.height = Math.floor(this.id.clientHeight / Ir);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Af + "getBreadAndScore?userid=" + $w);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (qa == this.readyState && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - hf.ᐃⵠⲆⵠΔ;
              hf.ᐃⵠⲆⵠΔ = b.b;
              hf.ΔΔⲆΔᐃ = b.s;
              hf.ⲆΔⵠΔⵠ = hf.ⲆⲆΔⲆⲆⵠⵠ(hf.ΔΔⲆΔᐃ);
              hf.ⵠᐃᐃᐃᐃᐃⵠ = hf.ΔΔᐃΔΔᐃⲆ(hf.ΔΔⲆΔᐃ);
              hf.ⵠⲆᐃⲆⵠΔᐃ = ks;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ᐃᐃᐃ();
      if (++g != 30) {
        Vf.setTimeout(e, 33);
      } else {
        d.ᐃᐃᐃ();
      }
    }
    this.ⵠⲆᐃΔⲆ = function (b) {
      if (d.ΔᐃΔⵠⵠⵠΔ === true) {
        d.ΔᐃΔⵠⵠⵠΔ = false;
        f = b;
        a = -y;
        i();
        zf();
      }
    };
    var a = -hj;
    function i() {
      d.ᐃᐃᐃ();
      if (++a == 30) {
        d.stop();
        d.ΔⲆⲆⵠⵠⵠⵠ.style.display = "none";
        f();
        return;
      }
      Vf.setTimeout(i, 33);
    }
    this.ⵠΔΔⲆⲆ = Qo;
    this.stop = function () {
      this.ⵠΔΔⲆⲆ = xl;
    };
    this.Δᐃᐃⵠᐃ = function () {
      Yw();
      document.getElementById("game_body").style.backgroundColor = rs.ⲆᐃᐃᐃⲆ[Rw.time];
      d.ΔⲆⲆⵠⵠⵠⵠ.ⲆΔΔⵠΔ();
      hf.ⲆⵠⲆⵠΔ.style.display = "inline-block";
      d.ⵠΔΔⲆⲆ = true;
      d.ΔᐃΔⵠⵠⵠΔ = yq;
      a = -Ng;
      g = 0;
      e();
    };
    this.ᐃᐃᐃ = function () {
      this.ΔⲆⲆⵠⵠⵠⵠ.translate.x = Math.floor(Ko - 275);
      this.ΔⲆⲆⵠⵠⵠⵠ.translate.y = Math.floor(eq - this.ΔⲆⲆⵠⵠⵠⵠ.height - 28);
      hf.ⲆⵠⲆⵠΔ.translate.x = this.ΔⲆⲆⵠⵠⵠⵠ.translate.x - 350;
      hf.ⲆⵠⲆⵠΔ.translate.y = this.ΔⲆⲆⵠⵠⵠⵠ.translate.y + Xa;
      hf.ⲆⵠⲆⵠΔ.ᐃᐃᐃ();
      if (g != 30 || a != -1) {
        var b = 0;
        if (g != 30) {
          b = 1500 / (g + 1) - 50;
        }
        if (-og != a) {
          b = -(1750 / (30 - a + 1) - 48);
        }
        this.ΔⲆⲆⵠⵠⵠⵠ.translate.y -= b;
      }
      this.ΔⲆⲆⵠⵠⵠⵠ.ᐃᐃᐃ();
    };
    this.ᐃⵠΔⲆ = function () {
      sm();
      Sw.alert.ᐃⵠΔⲆ("#FFF", "#000");
    };
  }
  function Iw(b, c, d, e, f) {
    const i = (b + 139) % 65333;
    const j = (hk << (c & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (8 << (c >> 16 & 255));
    const a = (d + 32839) % 65339;
    const k = (0 << (e >> 8 & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (16 << (e & Rs));
    const h = (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (0 << (f & 255));
    const l = ew(i, j, a, k, h);
    const g = Pw(i, j, a, k, h, i);
    return (24 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) & ng)) + (0 << ((l ^ g) >> 16 & _l));
  }
  (function () {
    function b() {
      this.ⲆΔΔⵠΔ();
    }
    b.prototype = {
      ⲆΔΔⵠΔ: function () {
        var a = this || f;
        a.ⲆⲆⵠⵠΔᐃⲆ = 1000;
        a.ΔⵠⵠΔⲆⲆᐃ = {};
        a.ⲆᐃⵠᐃⲆ = [];
        a.ΔᐃᐃⲆⲆ = !kr;
        a.ⲆⵠⵠⲆᐃ = 1;
        a.ⵠᐃⵠΔᐃⲆⵠ = "canplaythrough";
        a.ᐃΔⲆΔⲆ = typeof Vf != "undefined" && Vf.navigator ? Vf.navigator : null;
        a.ΔΔⲆᐃΔΔᐃ = null;
        a.ⲆΔΔᐃⲆⵠⲆ = !bh;
        a.ᐃⲆᐃΔⵠ = !ho;
        a.ⵠΔΔᐃᐃⲆⵠ = true;
        a.Δ = null;
        a.ⵠⲆⲆΔⲆⵠⲆ = !vl;
        a.ᐃⵠᐃΔᐃᐃΔ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.Δ) {
          g();
        }
        if (b !== undefined && b >= 0 && b <= Ws) {
          c.ⲆⵠⵠⲆᐃ = b;
          if (c.ΔᐃᐃⲆⲆ) {
            return c;
          }
          if (c.ᐃⲆᐃΔⵠ) {
            c.ΔΔⲆᐃΔΔᐃ.gain.value = b;
          }
          for (var d = 0; d < c.ⲆᐃⵠᐃⲆ.length; d++) {
            if (!c.ⲆᐃⵠᐃⲆ[d].ᐃⵠⲆⵠᐃ) {
              for (var h = c.ⲆᐃⵠᐃⲆ[d].ᐃⲆᐃΔᐃ(), i = 0; i < h.length; i++) {
                var j = c.ⲆᐃⵠᐃⲆ[d].ᐃⲆⲆΔⵠ(h[i]);
                if (j && j.ᐃᐃⲆⲆ) {
                  j.ᐃᐃⲆⲆ.volume = j.ⲆⵠⵠⲆᐃ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ⲆⵠⵠⲆᐃ;
      },
      ΔⵠⵠΔΔᐃᐃ: function (b) {
        var c = this || f;
        if (!c.Δ) {
          g();
        }
        c.ΔᐃᐃⲆⲆ = b;
        if (c.ᐃⲆᐃΔⵠ) {
          c.ΔΔⲆᐃΔΔᐃ.gain.value = b ? 0 : c.ⲆⵠⵠⲆᐃ;
        }
        for (var d = Et; d < c.ⲆᐃⵠᐃⲆ.length; d++) {
          if (!c.ⲆᐃⵠᐃⲆ[d].ᐃⵠⲆⵠᐃ) {
            for (var e = c.ⲆᐃⵠᐃⲆ[d].ᐃⲆᐃΔᐃ(), h = ka; h < e.length; h++) {
              var i = c.ⲆᐃⵠᐃⲆ[d].ᐃⲆⲆΔⵠ(e[h]);
              if (i && i.ᐃᐃⲆⲆ) {
                i.ᐃᐃⲆⲆ.muted = !!b || i.ΔᐃᐃⲆⲆ;
              }
            }
          }
        }
        return c;
      },
      ΔᐃⲆᐃΔΔᐃ: function () {
        var a = this || f;
        for (var b = a.ⲆᐃⵠᐃⲆ.length - uq; b >= 0; b--) {
          a.ⲆᐃⵠᐃⲆ[b].ΔᐃⲆᐃΔΔᐃ();
        }
        if (a.ᐃⲆᐃΔⵠ && a.Δ && a.Δ.close !== undefined) {
          a.Δ.close();
          a.Δ = null;
          g();
        }
        return a;
      },
      ᐃⵠⵠΔⵠⵠΔΔᐃ: function (a) {
        return (this || f).ΔⵠⵠΔⲆⲆᐃ[a.replace(/^x-/, "")];
      },
      ᐃⵠᐃΔᐃᐃΔ: function () {
        var a = this || f;
        a.state = a.Δ && a.Δ.state || "running";
        a.ᐃᐃⵠΔⵠⵠⲆ();
        if (!a.ᐃⲆᐃΔⵠ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ⵠᐃⵠΔᐃⲆⵠ = "canplay";
              }
            } catch (b) {
              a.ⲆΔΔᐃⲆⵠⲆ = !Hb;
            }
          } else {
            a.ⲆΔΔᐃⲆⵠⲆ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ⲆΔΔᐃⲆⵠⲆ = !ho;
          }
        } catch (a) { }
        if (!a.ⲆΔΔᐃⲆⵠⲆ) {
          a.ⵠⵠⲆⲆⲆⲆᐃΔⲆ();
        }
        return a;
      },
      ⵠⵠⲆⲆⲆⲆᐃΔⲆ: function () {
        var a = this || f;
        var b = null;
        try {
          b = typeof Audio != "undefined" ? new Audio() : null;
        } catch (b) {
          return a;
        }
        if (!b || typeof b.canPlayType != "function") {
          return a;
        }
        var c = b.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var d = a.ᐃΔⲆΔⲆ && a.ᐃΔⲆΔⲆ.userAgent.match(/OPR\/([0-6].)/g);
        var e = d && parseInt(d[0].split("/")[El], 10) < 33;
        a.ΔⵠⵠΔⲆⲆᐃ = {
          ⵠⵠⲆⲆⵠᐃⵠΔΔ: !e && (!!c || !!b.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ΔΔⲆⵠΔⵠΔⵠΔ: !!c,
          ⵠΔᐃᐃΔΔⲆⵠᐃ: !!b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ΔᐃΔⵠΔᐃΔⵠᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆᐃⲆΔᐃΔⵠⲆᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⵠⵠⲆⲆⵠᐃΔΔⲆ: !!b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ΔⵠᐃᐃⲆⲆΔᐃΔ: !!b.canPlayType("audio/aac;").replace(/^no$/, ""),
          ᐃᐃⵠΔⲆᐃΔᐃᐃ: !!b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ⲆⵠΔⲆΔᐃΔΔⵠ: !!(b.canPlayType("audio/x-m4a;") || b.canPlayType("audio/m4a;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ΔⲆⲆⵠᐃΔⲆΔⲆ: !!(b.canPlayType("audio/x-mp4;") || b.canPlayType("audio/mp4;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ᐃΔΔⵠⵠΔΔᐃΔ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆΔᐃΔᐃⵠⵠⲆⵠ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⵠΔΔΔΔᐃⲆΔ: !!b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ᐃⵠⵠΔΔⲆⵠⵠᐃ: !!(b.canPlayType("audio/x-flac;") || b.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return a;
      },
      ⲆᐃⲆᐃΔⵠⵠΔΔ: function () {
        var a = this || f;
        var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ᐃΔⲆΔⲆ && a.ᐃΔⲆΔⲆ.userAgent);
        var c = !!("ontouchend" in Vf) || !!a.ᐃΔⲆΔⲆ && a.ᐃΔⲆΔⲆ.maxTouchPoints > Xa || !!a.ᐃΔⲆΔⲆ && a.ᐃΔⲆΔⲆ.ⵠⵠⵠᐃΔΔⵠⵠⵠ > Ob;
        if (!a.ΔⲆᐃᐃᐃⲆⲆ && a.Δ && (b || c)) {
          a.ΔⲆᐃᐃᐃⲆⲆ = !bh;
          if (!a.ΔⲆⲆΔᐃᐃⲆᐃⲆ && a.Δ.sampleRate !== 44100) {
            a.ΔⲆⲆΔᐃᐃⲆᐃⲆ = !fs;
            a.ΔᐃⲆᐃΔΔᐃ();
          }
          a.ΔⲆᐃΔⲆΔⲆ = a.Δ.createBuffer(1, or, 22050);
          function b() {
            f.ⵠΔᐃΔΔᐃᐃ();
            var c = a.Δ.createBufferSource();
            c.buffer = a.ΔⲆᐃΔⲆΔⲆ;
            c.connect(a.Δ.destination);
            if (c.start === undefined) {
              c.ⵠΔⵠⵠᐃΔⲆᐃⵠ(0);
            } else {
              c.start(0);
            }
            if (typeof a.Δ.resume == "function") {
              a.Δ.resume();
            }
            c.onended = function () {
              c.disconnect(Ob);
              a.ΔⲆᐃᐃᐃⲆⲆ = !Eu;
              a.ⵠⲆⲆΔⲆⵠⲆ = false;
              document.removeEventListener("touchend", b, !Et);
            };
          }
          document.addEventListener("touchend", b, true);
          return a;
        }
      },
      ᐃᐃⵠΔⵠⵠⲆ: function () {
        var a = this;
        if (a.ⵠΔΔᐃᐃⲆⵠ && a.Δ && a.Δ.suspend !== undefined && f.ᐃⲆᐃΔⵠ) {
          for (var b = 0; b < a.ⲆᐃⵠᐃⲆ.length; b++) {
            if (a.ⲆᐃⵠᐃⲆ[b].ᐃⵠⲆⵠᐃ) {
              for (var c = Hb; c < a.ⲆᐃⵠᐃⲆ[b].ⲆⵠⲆⵠⲆ.length; c++) {
                if (!a.ⲆᐃⵠᐃⲆ[b].ⲆⵠⲆⵠⲆ[c].ⲆⵠⲆΔⲆ) {
                  return a;
                }
              }
            }
          }
          if (a.ᐃⵠΔᐃΔⲆⵠ) {
            clearTimeout(a.ᐃⵠΔᐃΔⲆⵠ);
          }
          a.ᐃⵠΔᐃΔⲆⵠ = setTimeout(function () {
            if (a.ⵠΔΔᐃᐃⲆⵠ) {
              a.ᐃⵠΔᐃΔⲆⵠ = null;
              a.state = "suspending";
              a.Δ.suspend().then(function () {
                a.state = "suspended";
                if (a.ⵠⵠⵠΔᐃᐃⵠ) {
                  delete a.ⵠⵠⵠΔᐃᐃⵠ;
                  a.ⵠΔᐃΔΔᐃᐃ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ⵠΔᐃΔΔᐃᐃ: function () {
        var a = this;
        if (a.Δ && a.Δ.resume !== undefined && f.ᐃⲆᐃΔⵠ) {
          if (a.state === "running" && a.ᐃⵠΔᐃΔⲆⵠ) {
            clearTimeout(a.ᐃⵠΔᐃΔⲆⵠ);
            a.ᐃⵠΔᐃΔⲆⵠ = null;
          } else if (a.state === "suspended") {
            a.Δ.resume().then(function () {
              a.state = "running";
              for (var b = Hb; b < a.ⲆᐃⵠᐃⲆ.length; b++) {
                a.ⲆᐃⵠᐃⲆ[b].ⲆᐃⵠⲆⲆ("resume");
              }
            });
            if (a.ᐃⵠΔᐃΔⲆⵠ) {
              clearTimeout(a.ᐃⵠΔᐃΔⲆⵠ);
              a.ᐃⵠΔᐃΔⲆⵠ = null;
            }
          } else if (a.state === "suspending") {
            a.ⵠⵠⵠΔᐃᐃⵠ = !ou;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ⲆΔΔⵠΔ(a);
      } else {
        console.error(oh);
      }
    }
    c.prototype = {
      ⲆΔΔⵠΔ: function (a) {
        var b = this;
        if (!f.Δ) {
          g();
        }
        b.ΔⲆⵠΔⵠΔΔΔⲆ = a.autoplay || false;
        b.ⲆⲆΔᐃΔⵠᐃ = typeof a.Δᐃᐃᐃᐃᐃⵠ != "string" ? a.Δᐃᐃᐃᐃᐃⵠ : [a.Δᐃᐃᐃᐃᐃⵠ];
        b.ⵠⵠⲆⵠⵠⵠᐃ = a.ⲆⲆⵠⵠⵠΔⲆⵠΔ || false;
        b.ΔᐃᐃⲆⲆ = a.ΔⵠⵠΔΔᐃᐃ || false;
        b.ᐃⲆⲆⲆᐃ = a.loop || !uq;
        b.ⲆΔᐃᐃⵠᐃⲆᐃⵠ = a.ⲆⵠⵠⵠⵠⵠΔᐃᐃ || Rh;
        b.ᐃᐃΔΔᐃᐃΔⲆΔ = typeof a.preload != "boolean" || a.preload;
        b.ⲆᐃⲆᐃᐃ = a.rate || og;
        b.ⲆΔΔⲆΔ = a.ⵠᐃ || {};
        b.ᐃⵠΔⲆΔ = typeof a.src != "string" ? a.src : [a.src];
        b.ⲆⵠⵠⲆᐃ = a.volume !== undefined ? a.volume : y;
        b.ΔᐃΔⲆᐃⵠᐃ = hk;
        b.ⲆⵠᐃΔΔ = "unloaded";
        b.ⲆⵠⲆⵠⲆ = [];
        b.ⵠⵠΔᐃⵠⲆⵠ = {};
        b.ⵠΔⲆΔΔ = [];
        b.ⲆⲆⵠᐃΔⵠⲆⵠⲆ = a.onend ? [{
          ⲆΔⲆⵠⵠ: a.onend
        }] : [];
        b.ⵠΔᐃⲆⵠⲆΔᐃⵠ = a.onfade ? [{
          ⲆΔⲆⵠⵠ: a.onfade
        }] : [];
        b.ᐃⲆⵠΔᐃᐃⲆⵠⵠ = a.onload ? [{
          ⲆΔⲆⵠⵠ: a.onload
        }] : [];
        b.ⵠᐃΔΔⵠᐃⲆⲆΔ = a.ΔⲆΔⲆⲆΔΔΔⵠ ? [{
          ⲆΔⲆⵠⵠ: a.ΔⲆΔⲆⲆΔΔΔⵠ
        }] : [];
        b.ⲆⲆⲆᐃΔⵠⵠΔΔ = a.onpause ? [{
          ⲆΔⲆⵠⵠ: a.onpause
        }] : [];
        b.ᐃⲆᐃⲆⵠᐃⲆΔΔ = a.onplay ? [{
          ⲆΔⲆⵠⵠ: a.onplay
        }] : [];
        b.ⲆⵠⵠΔⵠᐃⵠΔⵠ = a.onstop ? [{
          ⲆΔⲆⵠⵠ: a.onstop
        }] : [];
        b.ⵠᐃΔᐃΔⲆᐃⵠΔ = a.onmute ? [{
          ⲆΔⲆⵠⵠ: a.onmute
        }] : [];
        b.ⵠᐃⵠᐃⵠⵠΔΔᐃ = a.ⲆⲆΔᐃⲆⲆᐃΔⲆ ? [{
          ⲆΔⲆⵠⵠ: a.ⲆⲆΔᐃⲆⲆᐃΔⲆ
        }] : [];
        b.ᐃΔΔᐃⲆⲆᐃᐃᐃ = a.ⵠΔⵠᐃⵠΔᐃⲆⲆ ? [{
          ⲆΔⲆⵠⵠ: a.ⵠΔⵠᐃⵠΔᐃⲆⲆ
        }] : [];
        b.ⲆⵠᐃⲆᐃΔᐃΔΔ = a.ⵠⲆⵠⵠⵠⵠⵠΔⲆ ? [{
          ⲆΔⲆⵠⵠ: a.ⵠⲆⵠⵠⵠⵠⵠΔⲆ
        }] : [];
        b.ⲆⲆⲆΔΔⲆⲆᐃⵠ = [];
        b.ᐃⵠⲆⵠᐃ = f.ᐃⲆᐃΔⵠ && !b.ⵠⵠⲆⵠⵠⵠᐃ;
        if (f.Δ !== undefined && f.Δ && f.ⵠⲆⲆΔⲆⵠⲆ) {
          f.ⲆᐃⲆᐃΔⵠⵠΔΔ();
        }
        f.ⲆᐃⵠᐃⲆ.push(b);
        if (b.ΔⲆⵠΔⵠΔΔΔⲆ) {
          b.ⵠΔⲆΔΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ᐃᐃΔΔᐃᐃΔⲆΔ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var a = this;
        var b = null;
        if (!f.ⲆΔΔᐃⲆⵠⲆ) {
          if (typeof a.ᐃⵠΔⲆΔ == "string") {
            a.ᐃⵠΔⲆΔ = [a.ᐃⵠΔⲆΔ];
          }
          for (var c = 0; c < a.ᐃⵠΔⲆΔ.length; c++) {
            var g;
            var i;
            if (a.ⲆⲆΔᐃΔⵠᐃ && a.ⲆⲆΔᐃΔⵠᐃ[c]) {
              g = a.ⲆⲆΔᐃΔⵠᐃ[c];
            } else {
              if (typeof (i = a.ᐃⵠΔⲆΔ[c]) != "string") {
                a.ⲆᐃⵠⲆⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(g = /^data:audio\/([^;,]+);/i.exec(i))) {
                g = /\.([^.]+)$/.exec(i.split("?", 1)[gj]);
              }
              g &&= g[1].toLowerCase();
            }
            if (!g) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (g && f.ᐃⵠⵠΔⵠⵠΔΔᐃ(g)) {
              b = a.ᐃⵠΔⲆΔ[c];
              break;
            }
          }
          if (b) {
            a.ᐃⵠΔⲆΔ = b;
            a.ⲆⵠᐃΔΔ = "loading";
            if (Vf.location.protocol === "https:" && b.slice(0, zq) === "http:") {
              a.ⵠⵠⲆⵠⵠⵠᐃ = !Eu;
              a.ᐃⵠⲆⵠᐃ = !Ws;
            }
            new d(a);
            if (a.ᐃⵠⲆⵠᐃ) {
              e(a);
            }
            return a;
          } else {
            a.ⲆᐃⵠⲆⲆ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        a.ⲆᐃⵠⲆⲆ("loaderror", null, "No audio support.");
      },
      play: function (d, j) {
        var k = this;
        var e = null;
        if (typeof d == "number") {
          e = d;
          d = null;
        } else {
          if (typeof d == "string" && k.ⲆⵠᐃΔΔ === "loaded" && !k.ⲆΔΔⲆΔ[d]) {
            return null;
          }
          if (d === undefined) {
            d = "__default";
            var n = Eu;
            for (var o = jg; o < k.ⲆⵠⲆⵠⲆ.length; o++) {
              if (k.ⲆⵠⲆⵠⲆ[o].ⲆⵠⲆΔⲆ && !k.ⲆⵠⲆⵠⲆ[o].ⵠⵠⵠΔᐃ) {
                n++;
                e = k.ⲆⵠⲆⵠⲆ[o].ΔⲆΔⵠ;
              }
            }
            if (n === 1) {
              d = null;
            } else {
              e = null;
            }
          }
        }
        var q = e ? k.ᐃⲆⲆΔⵠ(e) : k.ᐃᐃⵠⵠⵠᐃΔⵠⲆ();
        if (!q) {
          return null;
        }
        if (e && !d) {
          d = q.ⲆΔΔⲆΔ || "__default";
        }
        if (k.ⲆⵠᐃΔΔ !== "loaded") {
          q.ⲆΔΔⲆΔ = d;
          q.ⵠⵠⵠΔᐃ = false;
          var h = q.ΔⲆΔⵠ;
          k.ⵠΔⲆΔΔ.push({
            event: "play",
            action: function () {
              k.play(h);
            }
          });
          return h;
        }
        if (e && !q.ⲆⵠⲆΔⲆ) {
          if (!j) {
            setTimeout(function () {
              k.ⲆᐃⵠⲆⲆ("play", q.ΔⲆΔⵠ);
            }, 0);
          }
          return q.ΔⲆΔⵠ;
        }
        if (k.ᐃⵠⲆⵠᐃ) {
          f.ⵠΔᐃΔΔᐃᐃ();
        }
        var l = Math.max(dh, q.ᐃᐃΔᐃⵠ > 0 ? q.ᐃᐃΔᐃⵠ : k.ⲆΔΔⲆΔ[d][vl] / 1000);
        var g = Math.max(0, (k.ⲆΔΔⲆΔ[d][0] + k.ⲆΔΔⲆΔ[d][$q]) / 1000 - l);
        var p = g * 1000 / Math.abs(q.ⲆᐃⲆᐃᐃ);
        q.ⲆⵠⲆΔⲆ = false;
        q.ⵠⵠⵠΔᐃ = !bh;
        q.ⲆΔΔⲆΔ = d;
        q.ᐃᐃΔᐃⵠ = l;
        q.ᐃⲆᐃⲆΔ = k.ⲆΔΔⲆΔ[d][0] / 1000;
        q.ᐃⵠⲆΔᐃΔⲆ = (k.ⲆΔΔⲆΔ[d][0] + k.ⲆΔΔⲆΔ[d][1]) / 1000;
        q.ᐃⲆⲆⲆᐃ = !!q.ᐃⲆⲆⲆᐃ || !!k.ⲆΔΔⲆΔ[d][2];
        var b = q.ᐃᐃⲆⲆ;
        if (k.ᐃⵠⲆⵠᐃ) {
          function a() {
            k.ⲆⲆᐃⲆᐃⲆᐃⵠΔ(q);
            var a = q.ΔᐃᐃⲆⲆ || k.ΔᐃᐃⲆⲆ ? ks : q.ⲆⵠⵠⲆᐃ;
            b.gain.setValueAtTime(a, f.Δ.currentTime);
            q.ⵠᐃᐃⲆⲆⵠᐃ = f.Δ.currentTime;
            if (b.ⲆΔⲆⵠΔ.start === undefined) {
              if (q.ᐃⲆⲆⲆᐃ) {
                b.ⲆΔⲆⵠΔ.ⲆᐃⵠⲆⵠⵠⵠΔⵠ(0, l, 86400);
              } else {
                b.ⲆΔⲆⵠΔ.ⲆᐃⵠⲆⵠⵠⵠΔⵠ(Yl, l, g);
              }
            } else if (q.ᐃⲆⲆⲆᐃ) {
              b.ⲆΔⲆⵠΔ.start(0, l, 86400);
            } else {
              b.ⲆΔⲆⵠΔ.start(Eu, l, g);
            }
            if (p !== 1 / dh) {
              k.ⵠⵠΔᐃⵠⲆⵠ[q.ΔⲆΔⵠ] = setTimeout(k.ⵠⵠⵠΔᐃ.bind(k, q), p);
            }
            if (!j) {
              setTimeout(function () {
                k.ⲆᐃⵠⲆⲆ("play", q.ΔⲆΔⵠ);
              }, Bs);
            }
          }
          var t = f.state === "running";
          if (k.ⲆⵠᐃΔΔ === "loaded" && t) {
            a();
          } else {
            var c = t || k.ⲆⵠᐃΔΔ !== "loaded" ? "load" : "resume";
            k.once(c, a, t ? q.ΔⲆΔⵠ : null);
            k.ⵠᐃᐃΔᐃⲆⵠ(q.ΔⲆΔⵠ);
          }
        } else {
          function a() {
            b.currentTime = l;
            b.muted = q.ΔᐃᐃⲆⲆ || k.ΔᐃᐃⲆⲆ || f.ΔᐃᐃⲆⲆ || b.muted;
            b.volume = q.ⲆⵠⵠⲆᐃ * f.volume();
            b.playbackRate = q.ⲆᐃⲆᐃᐃ;
            b.play();
            if (p !== Dj / lt) {
              k.ⵠⵠΔᐃⵠⲆⵠ[q.ΔⲆΔⵠ] = setTimeout(k.ⵠⵠⵠΔᐃ.bind(k, q), p);
            }
            if (!j) {
              k.ⲆᐃⵠⲆⲆ("play", q.ΔⲆΔⵠ);
            }
          }
          var m = k.ⲆⵠᐃΔΔ === "loaded" && (Vf && Vf.ΔΔⵠⲆⲆᐃⲆᐃⵠ || !b.readyState && f.ᐃΔⲆΔⲆ.ΔᐃⵠΔᐃᐃⵠΔᐃ);
          if (Yr === b.readyState || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ⵠᐃⵠΔᐃⲆⵠ, c, !Ws);
            }
            b.addEventListener(f.ⵠᐃⵠΔᐃⲆⵠ, c, false);
            k.ⵠᐃᐃΔᐃⲆⵠ(q.ΔⲆΔⵠ);
          }
        }
        return q.ΔⲆΔⵠ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆⵠᐃΔΔ !== "loaded") {
          b.ⵠΔⲆΔΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ᐃⲆᐃΔᐃ(a), d = hk; d < c.length; d++) {
          b.ⵠᐃᐃΔᐃⲆⵠ(c[d]);
          var e = b.ᐃⲆⲆΔⵠ(c[d]);
          if (e && !e.ⲆⵠⲆΔⲆ && (e.ᐃᐃΔᐃⵠ = b.ⵠⲆᐃΔⵠⲆᐃ(c[d]), e.ⲆⲆᐃⲆᐃᐃⵠ = 0, e.ⲆⵠⲆΔⲆ = true, b.ΔᐃⵠΔⲆⵠΔ(c[d]), e.ᐃᐃⲆⲆ)) {
            if (b.ᐃⵠⲆⵠᐃ) {
              if (!e.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ) {
                continue;
              }
              if (e.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.stop === undefined) {
                e.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.ΔⵠⵠⲆⵠⵠⵠⵠⲆ(ou);
              } else {
                e.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.stop(0);
              }
              b.ΔΔⵠᐃΔⲆⵠ(e.ᐃᐃⲆⲆ);
            } else if (!isNaN(e.ᐃᐃⲆⲆ.duration) || e.ᐃᐃⲆⲆ.duration === Infinity) {
              e.ᐃᐃⲆⲆ.pause();
            }
          }
          if (!arguments[1]) {
            b.ⲆᐃⵠⲆⲆ("pause", e ? e.ΔⲆΔⵠ : null);
          }
        }
        return b;
      },
      stop: function (a, b) {
        var c = this;
        if (c.ⲆⵠᐃΔΔ !== "loaded") {
          c.ⵠΔⲆΔΔ.push({
            event: "stop",
            action: function () {
              c.stop(a);
            }
          });
          return c;
        }
        for (var d = c.ᐃⲆᐃΔᐃ(a), e = 0; e < d.length; e++) {
          c.ⵠᐃᐃΔᐃⲆⵠ(d[e]);
          var f = c.ᐃⲆⲆΔⵠ(d[e]);
          if (f) {
            f.ᐃᐃΔᐃⵠ = f.ᐃⲆᐃⲆΔ || 0;
            f.ⲆⲆᐃⲆᐃᐃⵠ = 0;
            f.ⲆⵠⲆΔⲆ = true;
            f.ⵠⵠⵠΔᐃ = true;
            c.ΔᐃⵠΔⲆⵠΔ(d[e]);
            if (f.ᐃᐃⲆⲆ) {
              if (c.ᐃⵠⲆⵠᐃ) {
                if (f.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ) {
                  if (f.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.stop === undefined) {
                    f.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.ΔⵠⵠⲆⵠⵠⵠⵠⲆ(jg);
                  } else {
                    f.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.stop(lt);
                  }
                  c.ΔΔⵠᐃΔⲆⵠ(f.ᐃᐃⲆⲆ);
                }
              } else if (!isNaN(f.ᐃᐃⲆⲆ.duration) || f.ᐃᐃⲆⲆ.duration === ck / 0) {
                f.ᐃᐃⲆⲆ.currentTime = f.ᐃⲆᐃⲆΔ || 0;
                f.ᐃᐃⲆⲆ.pause();
              }
            }
            if (!b) {
              c.ⲆᐃⵠⲆⲆ("stop", f.ΔⲆΔⵠ);
            }
          }
        }
        return c;
      },
      ΔⵠⵠΔΔᐃᐃ: function (b, c) {
        var d = this;
        if (d.ⲆⵠᐃΔΔ !== "loaded") {
          d.ⵠΔⲆΔΔ.push({
            event: "mute",
            action: function () {
              d.ΔⵠⵠΔΔᐃᐃ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ΔᐃᐃⲆⲆ;
          }
          d.ΔᐃᐃⲆⲆ = b;
        }
        for (var e = d.ᐃⲆᐃΔᐃ(c), g = 0; g < e.length; g++) {
          var h = d.ᐃⲆⲆΔⵠ(e[g]);
          if (h) {
            h.ΔᐃᐃⲆⲆ = b;
            if (d.ᐃⵠⲆⵠᐃ && h.ᐃᐃⲆⲆ) {
              h.ᐃᐃⲆⲆ.gain.setValueAtTime(b ? 0 : h.ⲆⵠⵠⲆᐃ, f.Δ.currentTime);
            } else if (h.ᐃᐃⲆⲆ) {
              h.ᐃᐃⲆⲆ.muted = !!f.ΔᐃᐃⲆⲆ || b;
            }
            d.ⲆᐃⵠⲆⲆ("mute", h.ΔⲆΔⵠ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (h.length === 0) {
          return g.ⲆⵠⵠⲆᐃ;
        }
        if (h.length === 1 || rb === h.length && h[Dj] === undefined) {
          if (g.ᐃⲆᐃΔᐃ().indexOf(h[0]) >= dh) {
            c = parseInt(h[lt], ok);
          } else {
            b = parseFloat(h[Et]);
          }
        } else if (h.length >= rb) {
          b = parseFloat(h[Go]);
          c = parseInt(h[1], 10);
        }
        if (b === undefined || b < 0 || b > 1) {
          if (d = c ? g.ᐃⲆⲆΔⵠ(c) : g.ⲆⵠⲆⵠⲆ[lt]) {
            return d.ⲆⵠⵠⲆᐃ;
          } else {
            return ho;
          }
        }
        if (g.ⲆⵠᐃΔΔ !== "loaded") {
          g.ⵠΔⲆΔΔ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆⵠⵠⲆᐃ = b;
        }
        c = g.ᐃⲆᐃΔᐃ(c);
        for (var j = Xa; j < c.length; j++) {
          if (d = g.ᐃⲆⲆΔⵠ(c[j])) {
            d.ⲆⵠⵠⲆᐃ = b;
            if (!h[Sa]) {
              g.ΔᐃⵠΔⲆⵠΔ(c[j]);
            }
            if (g.ᐃⵠⲆⵠᐃ && d.ᐃᐃⲆⲆ && !d.ΔᐃᐃⲆⲆ) {
              d.ᐃᐃⲆⲆ.gain.setValueAtTime(b, f.Δ.currentTime);
            } else if (d.ᐃᐃⲆⲆ && !d.ΔᐃᐃⲆⲆ) {
              d.ᐃᐃⲆⲆ.volume = b * f.volume();
            }
            g.ⲆᐃⵠⲆⲆ("volume", d.ΔⲆΔⵠ);
          }
        }
        return g;
      },
      fade: function (j, e, i, k) {
        var m = this;
        var n = Math.abs(j - e);
        var a = j > e ? "out" : "in";
        var o = n / 0.01;
        var p = o > 0 ? i / o : i;
        if (p < 4) {
          o = Math.ceil(o / (4 / p));
          p = Kg;
        }
        if (m.ⲆⵠᐃΔΔ !== "loaded") {
          m.ⵠΔⲆΔΔ.push({
            event: "fade",
            action: function () {
              m.fade(j, e, i, k);
            }
          });
          return m;
        }
        m.volume(j, k);
        for (var q = m.ᐃⲆᐃΔᐃ(k), g = 0; g < q.length; g++) {
          var r = m.ᐃⲆⲆΔⵠ(q[g]);
          if (r) {
            if (!k) {
              m.ΔᐃⵠΔⲆⵠΔ(q[g]);
            }
            if (m.ᐃⵠⲆⵠᐃ && !r.ΔᐃᐃⲆⲆ) {
              var s = f.Δ.currentTime;
              var t = s + i / 1000;
              r.ⲆⵠⵠⲆᐃ = j;
              r.ᐃᐃⲆⲆ.gain.setValueAtTime(j, s);
              r.ᐃᐃⲆⲆ.gain.linearRampToValueAtTime(e, t);
            }
            var w = j;
            r.ⵠⵠᐃᐃⲆΔΔ = setInterval(function (b, c) {
              if (o > 0) {
                w += a === "in" ? 0.01 : -0.01;
              }
              w = Math.max(0, w);
              w = Math.min(1, w);
              w = Math.round(Za * w) / 100;
              if (m.ᐃⵠⲆⵠᐃ) {
                if (k === undefined) {
                  m.ⲆⵠⵠⲆᐃ = w;
                }
                c.ⲆⵠⵠⲆᐃ = w;
              } else {
                m.volume(w, b, !hk);
              }
              if (e < j && w <= e || e > j && w >= e) {
                clearInterval(c.ⵠⵠᐃᐃⲆΔΔ);
                c.ⵠⵠᐃᐃⲆΔΔ = null;
                m.volume(e, b);
                m.ⲆᐃⵠⲆⲆ("fade", b);
              }
            }.bind(m, q[g], r), p);
          }
        }
        return m;
      },
      ΔᐃⵠΔⲆⵠΔ: function (a) {
        var b = this;
        var c = b.ᐃⲆⲆΔⵠ(a);
        if (c && c.ⵠⵠᐃᐃⲆΔΔ) {
          if (b.ᐃⵠⲆⵠᐃ) {
            c.ᐃᐃⲆⲆ.gain.cancelScheduledValues(f.Δ.currentTime);
          }
          clearInterval(c.ⵠⵠᐃᐃⲆΔΔ);
          c.ⵠⵠᐃᐃⲆΔΔ = null;
          b.ⲆᐃⵠⲆⲆ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ᐃⲆⲆⲆᐃ;
        }
        if (Zn === g.length) {
          if (typeof g[lt] != "boolean") {
            return !!(d = f.ᐃⲆⲆΔⵠ(parseInt(g[gj], 10))) && d.ᐃⲆⲆⲆᐃ;
          }
          b = g[0];
          f.ᐃⲆⲆⲆᐃ = b;
        } else if (g.length === 2) {
          b = g[hk];
          c = parseInt(g[1], 10);
        }
        for (var h = f.ᐃⲆᐃΔᐃ(c), j = 0; j < h.length; j++) {
          if (d = f.ᐃⲆⲆΔⵠ(h[j])) {
            d.ᐃⲆⲆⲆᐃ = b;
            if (f.ᐃⵠⲆⵠᐃ && d.ᐃᐃⲆⲆ && d.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ) {
              d.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.loop = b;
              if (b) {
                d.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.loopStart = d.ᐃⲆᐃⲆΔ || ou;
                d.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.loopEnd = d.ᐃⵠⲆΔᐃΔⲆ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (h.length === 0) {
          c = g.ⲆⵠⲆⵠⲆ[0].ΔⲆΔⵠ;
        } else if ($r === h.length) {
          if (g.ᐃⲆᐃΔᐃ().indexOf(h[0]) >= jg) {
            c = parseInt(h[Bs], 10);
          } else {
            b = parseFloat(h[0]);
          }
        } else if (dj === h.length) {
          b = parseFloat(h[0]);
          c = parseInt(h[ck], hc);
        }
        if (typeof b != "number") {
          if (d = g.ᐃⲆⲆΔⵠ(c)) {
            return d.ⲆᐃⲆᐃᐃ;
          } else {
            return g.ⲆᐃⲆᐃᐃ;
          }
        }
        if (g.ⲆⵠᐃΔΔ !== "loaded") {
          g.ⵠΔⲆΔΔ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆᐃⲆᐃᐃ = b;
        }
        c = g.ᐃⲆᐃΔᐃ(c);
        for (var j = 0; j < c.length; j++) {
          if (d = g.ᐃⲆⲆΔⵠ(c[j])) {
            d.ⲆⲆᐃⲆᐃᐃⵠ = g.ⵠⲆᐃΔⵠⲆᐃ(c[j]);
            d.ⵠᐃᐃⲆⲆⵠᐃ = g.ᐃⵠⲆⵠᐃ ? f.Δ.currentTime : d.ⵠᐃᐃⲆⲆⵠᐃ;
            d.ⲆᐃⲆᐃᐃ = b;
            if (g.ᐃⵠⲆⵠᐃ && d.ᐃᐃⲆⲆ && d.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ) {
              d.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.playbackRate.value = b;
            } else if (d.ᐃᐃⲆⲆ) {
              d.ᐃᐃⲆⲆ.playbackRate = b;
            }
            var k = g.ⵠⲆᐃΔⵠⲆᐃ(c[j]);
            var m = ((g.ⲆΔΔⲆΔ[d.ⲆΔΔⲆΔ][ka] + g.ⲆΔΔⲆΔ[d.ⲆΔΔⲆΔ][or]) / 1000 - k) * 1000 / Math.abs(d.ⲆᐃⲆᐃᐃ);
            if (!!g.ⵠⵠΔᐃⵠⲆⵠ[c[j]] || !d.ⲆⵠⲆΔⲆ) {
              g.ⵠᐃᐃΔᐃⲆⵠ(c[j]);
              g.ⵠⵠΔᐃⵠⲆⵠ[c[j]] = setTimeout(g.ⵠⵠⵠΔᐃ.bind(g, d), m);
            }
            g.ⲆᐃⵠⲆⲆ("rate", d.ΔⲆΔⵠ);
          }
        }
        return g;
      },
      ⵠⲆᐃΔⵠⲆᐃ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (g.length === 0) {
          c = d.ⲆⵠⲆⵠⲆ[0].ΔⲆΔⵠ;
        } else if (Dj === g.length) {
          if (d.ᐃⲆᐃΔᐃ().indexOf(g[ks]) >= 0) {
            c = parseInt(g[0], ok);
          } else {
            c = d.ⲆⵠⲆⵠⲆ[0].ΔⲆΔⵠ;
            b = parseFloat(g[0]);
          }
        } else if (dj === g.length) {
          b = parseFloat(g[ho]);
          c = parseInt(g[uq], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆⵠᐃΔΔ !== "loaded") {
          d.ⵠΔⲆΔΔ.push({
            event: "seek",
            action: function () {
              d.ⵠⲆᐃΔⵠⲆᐃ.apply(d, g);
            }
          });
          return d;
        }
        var h = d.ᐃⲆⲆΔⵠ(c);
        if (h) {
          if (typeof b != "number" || b < 0) {
            if (d.ᐃⵠⲆⵠᐃ) {
              var j = d.ⵠⵠᐃⲆᐃⵠΔ(c) ? f.Δ.currentTime - h.ⵠᐃᐃⲆⲆⵠᐃ : 0;
              var a = h.ⲆⲆᐃⲆᐃᐃⵠ ? h.ⲆⲆᐃⲆᐃᐃⵠ - h.ᐃᐃΔᐃⵠ : 0;
              return h.ᐃᐃΔᐃⵠ + (a + j * Math.abs(h.ⲆᐃⲆᐃᐃ));
            }
            return h.ᐃᐃⲆⲆ.currentTime;
          }
          var k = d.ⵠⵠᐃⲆᐃⵠΔ(c);
          if (k) {
            d.pause(c, !Et);
          }
          h.ᐃᐃΔᐃⵠ = b;
          h.ⵠⵠⵠΔᐃ = !hj;
          d.ⵠᐃᐃΔᐃⲆⵠ(c);
          if (k) {
            d.play(c, !Ob);
          }
          if (!d.ᐃⵠⲆⵠᐃ && h.ᐃᐃⲆⲆ) {
            h.ᐃᐃⲆⲆ.currentTime = b;
          }
          d.ⲆᐃⵠⲆⲆ("seek", c);
        }
        return d;
      },
      ⵠⵠᐃⲆᐃⵠΔ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ᐃⲆⲆΔⵠ(a);
          return !!c && !c.ⲆⵠⲆΔⲆ;
        }
        for (var d = 0; d < b.ⲆⵠⲆⵠⲆ.length; d++) {
          if (!b.ⲆⵠⲆⵠⲆ[d].ⲆⵠⲆΔⲆ) {
            return true;
          }
        }
        return !Dj;
      },
      duration: function (a) {
        var b = this;
        var c = b.ΔᐃΔⲆᐃⵠᐃ;
        var d = b.ᐃⲆⲆΔⵠ(a);
        if (d) {
          c = b.ⲆΔΔⲆΔ[d.ⲆΔΔⲆΔ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆⵠᐃΔΔ;
      },
      ΔᐃⲆᐃΔΔᐃ: function () {
        var b = this;
        for (var c = b.ⲆⵠⲆⵠⲆ, d = gj; d < c.length; d++) {
          if (!c[d].ⲆⵠⲆΔⲆ) {
            b.stop(c[d].ΔⲆΔⵠ);
          }
          if (!b.ᐃⵠⲆⵠᐃ) {
            if (!/MSIE |Trident\//.test(f.ᐃΔⲆΔⲆ && f.ᐃΔⲆΔⲆ.userAgent)) {
              c[d].ᐃᐃⲆⲆ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].ᐃᐃⲆⲆ.removeEventListener("error", c[d].ᐃⲆⵠⵠⵠⲆⲆ, false);
            c[d].ᐃᐃⲆⲆ.removeEventListener(f.ⵠᐃⵠΔᐃⲆⵠ, c[d].ⵠⵠᐃΔΔⵠΔ, !y);
          }
          delete c[d].ᐃᐃⲆⲆ;
          b.ⵠᐃᐃΔᐃⲆⵠ(c[d].ΔⲆΔⵠ);
          var g = f.ⲆᐃⵠᐃⲆ.indexOf(b);
          if (g >= ka) {
            f.ⲆᐃⵠᐃⲆ.splice(g, 1);
          }
        }
        var i = !Eu;
        for (d = Hb; d < f.ⲆᐃⵠᐃⲆ.length; d++) {
          if (f.ⲆᐃⵠᐃⲆ[d].ᐃⵠΔⲆΔ === b.ᐃⵠΔⲆΔ) {
            i = !kr;
            break;
          }
        }
        if (h && i) {
          delete h[b.ᐃⵠΔⲆΔ];
        }
        f.ⲆΔΔᐃⲆⵠⲆ = !Dj;
        b.ⲆⵠᐃΔΔ = "unloaded";
        b.ⲆⵠⲆⵠⲆ = [];
        b = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⲆΔⲆⵠⵠ: b,
            once: d
          } : {
            id: c,
            ⲆΔⲆⵠⵠ: b
          });
        }
        return this;
      },
      ⲆⵠΔⵠᐃΔΔΔΔ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = fs;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = ou; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⲆΔⲆⵠⵠ && h || !c && h) {
              f.splice(g, bh);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = dh; g < j.length; g++) {
            if (jg === j[g].indexOf("_on") && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, bh);
        return this;
      },
      ⲆᐃⵠⲆⲆ: function (a, b, c) {
        var d = this;
        var e = d["_on" + a];
        for (var f = e.length - 1; f >= dh; f--) {
          if (!e[f].id || e[f].id === b || a === "load") {
            setTimeout(function (a) {
              a.call(this, b, c);
            }.bind(d, e[f].ⲆΔⲆⵠⵠ), Xa);
            if (e[f].once) {
              d.ⲆⵠΔⵠᐃΔΔΔΔ(a, e[f].ⲆΔⲆⵠⵠ, e[f].id);
            }
          }
        }
        return d;
      },
      ⲆΔⲆᐃⲆⵠᐃ: function () {
        var a = this;
        if (a.ⵠΔⲆΔΔ.length > dh) {
          var b = a.ⵠΔⲆΔΔ[Et];
          a.once(b.event, function () {
            a.ⵠΔⲆΔΔ.shift();
            a.ⲆΔⲆᐃⲆⵠᐃ();
          });
          b.action();
        }
        return a;
      },
      ⵠⵠⵠΔᐃ: function (a) {
        var b = this;
        var c = a.ⲆΔΔⲆΔ;
        if (!b.ᐃⵠⲆⵠᐃ && b.ᐃᐃⲆⲆ && !b.ᐃᐃⲆⲆ.ended) {
          setTimeout(b.ⵠⵠⵠΔᐃ.bind(b, a), 100);
          return b;
        }
        var d = !!a.ᐃⲆⲆⲆᐃ || !!b.ⲆΔΔⲆΔ[c][2];
        b.ⲆᐃⵠⲆⲆ("end", a.ΔⲆΔⵠ);
        if (!b.ᐃⵠⲆⵠᐃ && d) {
          b.stop(a.ΔⲆΔⵠ, true).play(a.ΔⲆΔⵠ);
        }
        if (b.ᐃⵠⲆⵠᐃ && d) {
          b.ⲆᐃⵠⲆⲆ("play", a.ΔⲆΔⵠ);
          a.ᐃᐃΔᐃⵠ = a.ᐃⲆᐃⲆΔ || 0;
          a.ⲆⲆᐃⲆᐃᐃⵠ = 0;
          a.ⵠᐃᐃⲆⲆⵠᐃ = f.Δ.currentTime;
          var e = (a.ᐃⵠⲆΔᐃΔⲆ - a.ᐃⲆᐃⲆΔ) * 1000 / Math.abs(a.ⲆᐃⲆᐃᐃ);
          b.ⵠⵠΔᐃⵠⲆⵠ[a.ΔⲆΔⵠ] = setTimeout(b.ⵠⵠⵠΔᐃ.bind(b, a), e);
        }
        if (b.ᐃⵠⲆⵠᐃ && !d) {
          a.ⲆⵠⲆΔⲆ = !gj;
          a.ⵠⵠⵠΔᐃ = !ka;
          a.ᐃᐃΔᐃⵠ = a.ᐃⲆᐃⲆΔ || 0;
          a.ⲆⲆᐃⲆᐃᐃⵠ = 0;
          b.ⵠᐃᐃΔᐃⲆⵠ(a.ΔⲆΔⵠ);
          b.ΔΔⵠᐃΔⲆⵠ(a.ᐃᐃⲆⲆ);
          f.ᐃᐃⵠΔⵠⵠⲆ();
        }
        if (!b.ᐃⵠⲆⵠᐃ && !d) {
          b.stop(a.ΔⲆΔⵠ);
        }
        return b;
      },
      ⵠᐃᐃΔᐃⲆⵠ: function (a) {
        var b = this;
        if (b.ⵠⵠΔᐃⵠⲆⵠ[a]) {
          clearTimeout(b.ⵠⵠΔᐃⵠⲆⵠ[a]);
          delete b.ⵠⵠΔᐃⵠⲆⵠ[a];
        }
        return b;
      },
      ᐃⲆⲆΔⵠ: function (a) {
        for (var b = this, c = Ob; c < b.ⲆⵠⲆⵠⲆ.length; c++) {
          if (a === b.ⲆⵠⲆⵠⲆ[c].ΔⲆΔⵠ) {
            return b.ⲆⵠⲆⵠⲆ[c];
          }
        }
        return null;
      },
      ᐃᐃⵠⵠⵠᐃΔⵠⲆ: function () {
        var a = this;
        a.ⵠⵠΔⵠⵠᐃΔᐃⵠ();
        for (var b = gj; b < a.ⲆⵠⲆⵠⲆ.length; b++) {
          if (a.ⲆⵠⲆⵠⲆ[b].ⵠⵠⵠΔᐃ) {
            return a.ⲆⵠⲆⵠⲆ[b].reset();
          }
        }
        return new d(a);
      },
      ⵠⵠΔⵠⵠᐃΔᐃⵠ: function () {
        var a = this;
        var b = a.ⲆΔᐃᐃⵠᐃⲆᐃⵠ;
        var c = Go;
        var d = hk;
        if (a.ⲆⵠⲆⵠⲆ.length >= b) {
          for (d = 0; d < a.ⲆⵠⲆⵠⲆ.length; d++) {
            if (a.ⲆⵠⲆⵠⲆ[d].ⵠⵠⵠΔᐃ) {
              c++;
            }
          }
          for (d = a.ⲆⵠⲆⵠⲆ.length - 1; d >= Yl; d--) {
            if (c <= b) {
              return;
            }
            if (a.ⲆⵠⲆⵠⲆ[d].ⵠⵠⵠΔᐃ) {
              if (a.ᐃⵠⲆⵠᐃ && a.ⲆⵠⲆⵠⲆ[d].ᐃᐃⲆⲆ) {
                a.ⲆⵠⲆⵠⲆ[d].ᐃᐃⲆⲆ.disconnect(Yl);
              }
              a.ⲆⵠⲆⵠⲆ.splice(d, 1);
              c--;
            }
          }
        }
      },
      ᐃⲆᐃΔᐃ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = Bs; c < this.ⲆⵠⲆⵠⲆ.length; c++) {
            b.push(this.ⲆⵠⲆⵠⲆ[c].ΔⲆΔⵠ);
          }
          return b;
        }
        return [a];
      },
      ⲆⲆᐃⲆᐃⲆᐃⵠΔ: function (a) {
        a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ = f.Δ.createBufferSource();
        a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.buffer = h[this.ᐃⵠΔⲆΔ];
        if (a.ⵠᐃᐃⲆΔ) {
          a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.connect(a.ⵠᐃᐃⲆΔ);
        } else {
          a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.connect(a.ᐃᐃⲆⲆ);
        }
        a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.loop = a.ᐃⲆⲆⲆᐃ;
        if (a.ᐃⲆⲆⲆᐃ) {
          a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.loopStart = a.ᐃⲆᐃⲆΔ || hk;
          a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.loopEnd = a.ᐃⵠⲆΔᐃΔⲆ;
        }
        a.ᐃᐃⲆⲆ.ⲆΔⲆⵠΔ.playbackRate.value = a.ⲆᐃⲆᐃᐃ;
        return this;
      },
      ΔΔⵠᐃΔⲆⵠ: function (a) {
        var b = this;
        if (b.ΔⲆᐃΔⲆΔⲆ) {
          a.ⲆΔⲆⵠΔ.onended = null;
          a.ⲆΔⲆⵠΔ.disconnect(Bs);
          try {
            a.ⲆΔⲆⵠΔ.buffer = b.ΔⲆᐃΔⲆΔⲆ;
          } catch (a) { }
        }
        a.ⲆΔⲆⵠΔ = null;
        return b;
      }
    };
    function d(a) {
      this.ⵠᐃᐃᐃⲆΔᐃ = a;
      this.ⲆΔΔⵠΔ();
    }
    d.prototype = {
      ⲆΔΔⵠΔ: function () {
        var a = this;
        var b = a.ⵠᐃᐃᐃⲆΔᐃ;
        a.ΔᐃᐃⲆⲆ = b.ΔᐃᐃⲆⲆ;
        a.ᐃⲆⲆⲆᐃ = b.ᐃⲆⲆⲆᐃ;
        a.ⲆⵠⵠⲆᐃ = b.ⲆⵠⵠⲆᐃ;
        a.ⲆᐃⲆᐃᐃ = b.ⲆᐃⲆᐃᐃ;
        a.ᐃᐃΔᐃⵠ = dh;
        a.ⲆⵠⲆΔⲆ = !dt;
        a.ⵠⵠⵠΔᐃ = !gj;
        a.ⲆΔΔⲆΔ = "__default";
        a.ΔⲆΔⵠ = ++f.ⲆⲆⵠⵠΔᐃⲆ;
        b.ⲆⵠⲆⵠⲆ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ⵠᐃᐃᐃⲆΔᐃ;
        var c = f.ΔᐃᐃⲆⲆ || a.ΔᐃᐃⲆⲆ || a.ⵠᐃᐃᐃⲆΔᐃ.ΔᐃᐃⲆⲆ ? jg : a.ⲆⵠⵠⲆᐃ;
        if (b.ᐃⵠⲆⵠᐃ) {
          a.ᐃᐃⲆⲆ = f.Δ.createGain === undefined ? f.Δ.ⲆᐃⵠΔΔⵠᐃⵠᐃ() : f.Δ.createGain();
          a.ᐃᐃⲆⲆ.gain.setValueAtTime(c, f.Δ.currentTime);
          a.ᐃᐃⲆⲆ.paused = !dh;
          a.ᐃᐃⲆⲆ.connect(f.ΔΔⲆᐃΔΔᐃ);
        } else {
          a.ᐃᐃⲆⲆ = new Audio();
          a.ᐃⲆⵠⵠⵠⲆⲆ = a.ⵠⵠᐃᐃᐃⵠⲆⵠⵠ.bind(a);
          a.ᐃᐃⲆⲆ.addEventListener("error", a.ᐃⲆⵠⵠⵠⲆⲆ, false);
          a.ⵠⵠᐃΔΔⵠΔ = a.ΔᐃᐃΔΔᐃᐃⲆⵠ.bind(a);
          a.ᐃᐃⲆⲆ.addEventListener(f.ⵠᐃⵠΔᐃⲆⵠ, a.ⵠⵠᐃΔΔⵠΔ, false);
          a.ᐃᐃⲆⲆ.src = b.ᐃⵠΔⲆΔ;
          a.ᐃᐃⲆⲆ.preload = "auto";
          a.ᐃᐃⲆⲆ.volume = c * f.volume();
          a.ᐃᐃⲆⲆ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ⵠᐃᐃᐃⲆΔᐃ;
        a.ΔᐃᐃⲆⲆ = b.ΔᐃᐃⲆⲆ;
        a.ᐃⲆⲆⲆᐃ = b.ᐃⲆⲆⲆᐃ;
        a.ⲆⵠⵠⲆᐃ = b.ⲆⵠⵠⲆᐃ;
        a.ⲆᐃⲆᐃᐃ = b.ⲆᐃⲆᐃᐃ;
        a.ᐃᐃΔᐃⵠ = 0;
        a.ⲆⲆᐃⲆᐃᐃⵠ = fs;
        a.ⲆⵠⲆΔⲆ = !Eu;
        a.ⵠⵠⵠΔᐃ = true;
        a.ⲆΔΔⲆΔ = "__default";
        a.ΔⲆΔⵠ = ++f.ⲆⲆⵠⵠΔᐃⲆ;
        return a;
      },
      ⵠⵠᐃᐃᐃⵠⲆⵠⵠ: function () {
        var a = this;
        a.ⵠᐃᐃᐃⲆΔᐃ.ⲆᐃⵠⲆⲆ("loaderror", a.ΔⲆΔⵠ, a.ᐃᐃⲆⲆ.error ? a.ᐃᐃⲆⲆ.error.code : lt);
        a.ᐃᐃⲆⲆ.removeEventListener("error", a.ᐃⲆⵠⵠⵠⲆⲆ, !Zk);
      },
      ΔᐃᐃΔΔᐃᐃⲆⵠ: function () {
        var a = this;
        var b = a.ⵠᐃᐃᐃⲆΔᐃ;
        b.ΔᐃΔⲆᐃⵠᐃ = Math.ceil(a.ᐃᐃⲆⲆ.duration * 10) / 10;
        if (Object.keys(b.ⲆΔΔⲆΔ).length === 0) {
          b.ⲆΔΔⲆΔ = {
            ΔⵠⵠⲆΔΔⵠΔᐃ: [0, b.ΔᐃΔⲆᐃⵠᐃ * 1000]
          };
        }
        if (b.ⲆⵠᐃΔΔ !== "loaded") {
          b.ⲆⵠᐃΔΔ = "loaded";
          b.ⲆᐃⵠⲆⲆ("load");
          b.ⲆΔⲆᐃⲆⵠᐃ();
        }
        a.ᐃᐃⲆⲆ.removeEventListener(f.ⵠᐃⵠΔᐃⲆⵠ, a.ⵠⵠᐃΔΔⵠΔ, !bh);
      }
    };
    var h = {};
    function e(b) {
      var c = b.ᐃⵠΔⲆΔ;
      if (h[c]) {
        b.ΔᐃΔⲆᐃⵠᐃ = h[c].duration;
        a(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[1]), e = new Uint8Array(d.length), f = ho; f < d.length; ++f) {
          e[f] = d.charCodeAt(f);
        }
        m(e.buffer, b);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", c, !Eu);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var a = (g.status + "")[lt];
          if (a === "0" || a === "2" || a === "3") {
            m(g.response, b);
          } else {
            b.ⲆᐃⵠⲆⲆ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (b.ᐃⵠⲆⵠᐃ) {
            b.ⵠⵠⲆⵠⵠⵠᐃ = !ks;
            b.ᐃⵠⲆⵠᐃ = false;
            b.ⲆⵠⲆⵠⲆ = [];
            delete h[c];
            b.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(b, c) {
      f.Δ.decodeAudioData(b, function (b) {
        if (b && c.ⲆⵠⲆⵠⲆ.length > 0) {
          h[c.ᐃⵠΔⲆΔ] = b;
          a(c, b);
        }
      }, function () {
        c.ⲆᐃⵠⲆⲆ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function a(a, b) {
      if (b && !a.ΔᐃΔⲆᐃⵠᐃ) {
        a.ΔᐃΔⲆᐃⵠᐃ = b.duration;
      }
      if (Object.keys(a.ⲆΔΔⲆΔ).length === 0) {
        a.ⲆΔΔⲆΔ = {
          ΔⵠⵠⲆΔΔⵠΔᐃ: [Hb, a.ΔᐃΔⲆᐃⵠᐃ * 1000]
        };
      }
      if (a.ⲆⵠᐃΔΔ !== "loaded") {
        a.ⲆⵠᐃΔΔ = "loaded";
        a.ⲆᐃⵠⲆⲆ("load");
        a.ⲆΔⲆᐃⲆⵠᐃ();
      }
    }
    function g() {
      try {
        if (typeof AudioContext != "undefined") {
          f.Δ = new AudioContext();
        } else if (typeof ⲆⵠΔᐃᐃᐃᐃⲆⲆ != "undefined") {
          f.Δ = new ⲆⵠΔᐃᐃᐃᐃⲆⲆ();
        } else {
          f.ᐃⲆᐃΔⵠ = false;
        }
      } catch (a) {
        f.ᐃⲆᐃΔⵠ = !$r;
      }
      var a = /iP(hone|od|ad)/.test(f.ᐃΔⲆΔⲆ && f.ᐃΔⲆΔⲆ.platform);
      var b = f.ᐃΔⲆΔⲆ && f.ᐃΔⲆΔⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[kr], j) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(f.ᐃΔⲆΔⲆ && f.ᐃΔⲆΔⲆ.userAgent.toLowerCase());
        if (f.ᐃΔⲆΔⲆ && f.ᐃΔⲆΔⲆ.ⲆⲆⵠⵠⲆⲆΔⲆⵠ && !d || f.ᐃΔⲆΔⲆ && !f.ᐃΔⲆΔⲆ.ⲆⲆⵠⵠⲆⲆΔⲆⵠ && !d) {
          f.ᐃⲆᐃΔⵠ = !Dj;
        }
      }
      if (f.ᐃⲆᐃΔⵠ) {
        f.ΔΔⲆᐃΔΔᐃ = f.Δ.createGain === undefined ? f.Δ.ⲆᐃⵠΔΔⵠᐃⵠᐃ() : f.Δ.createGain();
        f.ΔΔⲆᐃΔΔᐃ.gain.value = f.ΔᐃᐃⲆⲆ ? vl : 1;
        f.ΔΔⲆᐃΔΔᐃ.connect(f.Δ.destination);
      }
      f.ᐃⵠᐃΔᐃᐃΔ();
    }
    if (typeof ᐃⲆᐃⵠΔⲆⵠ == "function" && ᐃⲆᐃⵠΔⲆⵠ.ⲆⲆΔⵠᐃᐃᐃ) {
      ᐃⲆᐃⵠΔⲆⵠ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ΔΔⲆⲆⵠⵠⲆ != "undefined") {
      ΔΔⲆⲆⵠⵠⲆ.Howler = f;
      ΔΔⲆⲆⵠⵠⲆ.Howl = c;
    }
    if (typeof Vf != "undefined") {
      Vf.ΔᐃⵠⲆⲆⲆⲆ = b;
      Vf.Howler = f;
      Vf.Howl = c;
      Vf.ⵠⵠΔⲆⲆᐃᐃ = d;
    } else if (typeof ⵠⲆΔᐃⲆⲆΔ != "undefined") {
      ⵠⲆΔᐃⲆⲆΔ.ΔᐃⵠⲆⲆⲆⲆ = b;
      ⵠⲆΔᐃⲆⲆΔ.Howler = f;
      ⵠⲆΔᐃⲆⲆΔ.Howl = c;
      ⵠⲆΔᐃⲆⲆΔ.ⵠⵠΔⲆⲆᐃᐃ = d;
    }
  })();
  (function () {
    ΔᐃⵠⲆⲆⲆⲆ.prototype.ⲆⲆⲆΔΔ = [0, vl, hk];
    ΔᐃⵠⲆⲆⲆⲆ.prototype.ΔⵠΔΔΔ = [Ob, 0, -1, Bs, 1, ka];
    ΔᐃⵠⲆⲆⲆⲆ.prototype.ΔⵠⲆΔΔⲆᐃ = function (a) {
      var b = this;
      if (!b.Δ || !b.Δ.listener) {
        return b;
      }
      for (var c = b.ⲆᐃⵠᐃⲆ.length - Th; c >= Eu; c--) {
        b.ⲆᐃⵠᐃⲆ[c].ΔⵠⲆΔΔⲆᐃ(a);
      }
      return b;
    };
    ΔᐃⵠⲆⲆⲆⲆ.prototype.ⵠΔᐃΔ = function (a, b, c) {
      var d = this;
      if (d.Δ && d.Δ.listener) {
        b = typeof b != "number" ? d.ⲆⲆⲆΔΔ[Zn] : b;
        c = typeof c != "number" ? d.ⲆⲆⲆΔΔ[2] : c;
        if (typeof a != "number") {
          return d.ⲆⲆⲆΔΔ;
        } else {
          d.ⲆⲆⲆΔΔ = [a, b, c];
          d.Δ.listener.setPosition(d.ⲆⲆⲆΔΔ[ks], d.ⲆⲆⲆΔΔ[1], d.ⲆⲆⲆΔΔ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ΔᐃⵠⲆⲆⲆⲆ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.Δ || !h.Δ.listener) {
        return h;
      }
      var a = h.ΔⵠΔΔΔ;
      c = typeof c != "number" ? a[og] : c;
      d = typeof d != "number" ? a[pn] : d;
      e = typeof e != "number" ? a[3] : e;
      f = typeof f != "number" ? a[Ik] : f;
      g = typeof g != "number" ? a[bb] : g;
      if (typeof b != "number") {
        return a;
      } else {
        h.ΔⵠΔΔΔ = [b, c, d, e, f, g];
        h.Δ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ⲆΔΔⵠΔ = function (a) {
      return function (b) {
        var c = this;
        c.ΔⵠΔΔΔ = b.orientation || [ck, 0, Eu];
        c.ᐃⵠⵠⲆⵠⲆᐃ = b.ΔⵠⲆΔΔⲆᐃ || null;
        c.ⲆⲆⲆΔΔ = b.ⵠΔᐃΔ || null;
        c.ⵠⲆᐃⵠᐃ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
        };
        c.ΔⲆⵠⲆᐃΔⵠΔΔ = b.ᐃᐃⵠᐃᐃᐃᐃΔⵠ ? [{
          ⲆΔⲆⵠⵠ: b.ᐃᐃⵠᐃᐃᐃᐃΔⵠ
        }] : [];
        c.ⲆⲆΔⵠΔⵠΔᐃΔ = b.ΔΔⲆⲆᐃᐃⲆᐃᐃ ? [{
          ⲆΔⲆⵠⵠ: b.ΔΔⲆⲆᐃᐃⲆᐃᐃ
        }] : [];
        c.ᐃΔᐃⵠⲆΔᐃᐃⲆ = b.ΔⲆᐃⵠΔⲆⲆⲆⵠ ? [{
          ⲆΔⲆⵠⵠ: b.ΔⲆᐃⵠΔⲆⲆⲆⵠ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ⲆΔΔⵠΔ);
    Howl.prototype.ΔⵠⲆΔΔⲆᐃ = function (b, c) {
      var d = this;
      if (!d.ᐃⵠⲆⵠᐃ) {
        return d;
      }
      if (d.ⲆⵠᐃΔΔ !== "loaded") {
        d.ⵠΔⲆΔΔ.push({
          event: "stereo",
          action: function () {
            d.ΔⵠⲆΔΔⲆᐃ(b, c);
          }
        });
        return d;
      }
      var e = Howler.Δ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (c === undefined) {
        if (typeof b != "number") {
          return d.ᐃⵠⵠⲆⵠⲆᐃ;
        }
        d.ᐃⵠⵠⲆⵠⲆᐃ = b;
        d.ⲆⲆⲆΔΔ = [b, Yl, hk];
      }
      for (var f = d.ᐃⲆᐃΔᐃ(c), g = 0; g < f.length; g++) {
        var h = d.ᐃⲆⲆΔⵠ(f[g]);
        if (h) {
          if (typeof b != "number") {
            return h.ᐃⵠⵠⲆⵠⲆᐃ;
          }
          h.ᐃⵠⵠⲆⵠⲆᐃ = b;
          h.ⲆⲆⲆΔΔ = [b, hk, lt];
          if (h.ᐃᐃⲆⲆ) {
            h.ⵠⲆᐃⵠᐃ.panningModel = "equalpower";
            if (!h.ⵠᐃᐃⲆΔ || !h.ⵠᐃᐃⲆΔ.pan) {
              a(h, e);
            }
            if (e === "spatial") {
              h.ⵠᐃᐃⲆΔ.setPosition(b, 0, 0);
            } else {
              h.ⵠᐃᐃⲆΔ.pan.value = b;
            }
          }
          d.ⲆᐃⵠⲆⲆ("stereo", h.ΔⲆΔⵠ);
        }
      }
      return d;
    };
    Howl.prototype.ⵠΔᐃΔ = function (b, c, d, e) {
      var f = this;
      if (!f.ᐃⵠⲆⵠᐃ) {
        return f;
      }
      if (f.ⲆⵠᐃΔΔ !== "loaded") {
        f.ⵠΔⲆΔΔ.push({
          event: "pos",
          action: function () {
            f.ⵠΔᐃΔ(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? 0 : c;
      d = typeof d != "number" ? -0.5 : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆⲆⲆΔΔ;
        }
        f.ⲆⲆⲆΔΔ = [b, c, d];
      }
      for (var g = f.ᐃⲆᐃΔᐃ(e), i = 0; i < g.length; i++) {
        var j = f.ᐃⲆⲆΔⵠ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆⲆⲆΔΔ;
          }
          j.ⲆⲆⲆΔΔ = [b, c, d];
          if (j.ᐃᐃⲆⲆ) {
            if (!j.ⵠᐃᐃⲆΔ || !!j.ⵠᐃᐃⲆΔ.pan) {
              a(j, "spatial");
            }
            j.ⵠᐃᐃⲆΔ.setPosition(b, c, d);
          }
          f.ⲆᐃⵠⲆⲆ("pos", j.ΔⲆΔⵠ);
        }
      }
      return f;
    };
    Howl.prototype.orientation = function (b, c, d, e) {
      var f = this;
      if (!f.ᐃⵠⲆⵠᐃ) {
        return f;
      }
      if (f.ⲆⵠᐃΔΔ !== "loaded") {
        f.ⵠΔⲆΔΔ.push({
          event: "orientation",
          action: function () {
            f.orientation(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? f.ΔⵠΔΔΔ[1] : c;
      d = typeof d != "number" ? f.ΔⵠΔΔΔ[Xj] : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ΔⵠΔΔΔ;
        }
        f.ΔⵠΔΔΔ = [b, c, d];
      }
      for (var g = f.ᐃⲆᐃΔᐃ(e), i = 0; i < g.length; i++) {
        var j = f.ᐃⲆⲆΔⵠ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ΔⵠΔΔΔ;
          }
          j.ΔⵠΔΔΔ = [b, c, d];
          if (j.ᐃᐃⲆⲆ) {
            if (!j.ⵠᐃᐃⲆΔ) {
              j.ⲆⲆⲆΔΔ ||= f.ⲆⲆⲆΔΔ || [0, 0, -0.5];
              a(j, "spatial");
            }
            j.ⵠᐃᐃⲆΔ.setOrientation(b, c, d);
          }
          f.ⲆᐃⵠⲆⲆ("orientation", j.ΔⲆΔⵠ);
        }
      }
      return f;
    };
    Howl.prototype.ΔⵠΔⲆⲆᐃⲆⵠⲆ = function () {
      var b;
      var c;
      var d;
      var e = this;
      var f = arguments;
      if (!e.ᐃⵠⲆⵠᐃ) {
        return e;
      }
      if (f.length === 0) {
        return e.ⵠⲆᐃⵠᐃ;
      }
      if (hj === f.length) {
        if (fj[ul] != typeof f[0]) {
          if (d = e.ᐃⲆⲆΔⵠ(parseInt(f[jg], 10))) {
            return d.ⵠⲆᐃⵠᐃ;
          } else {
            return e.ⵠⲆᐃⵠᐃ;
          }
        }
        b = f[0];
        if (c === undefined) {
          e.ⵠⲆᐃⵠᐃ = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : e.ⲆΔⵠᐃᐃᐃⵠᐃⵠ,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : e.ᐃⵠᐃⲆΔⲆⵠᐃᐃ,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : e.ΔⵠⲆΔᐃᐃΔΔΔ,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : e.ΔⲆⲆⲆⵠⲆᐃΔⵠ,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : e.ⲆⲆⲆⲆΔᐃⲆⲆⲆ,
            panningModel: b.panningModel !== undefined ? b.panningModel : e.ᐃᐃΔᐃⵠᐃᐃⲆΔ,
            refDistance: b.refDistance !== undefined ? b.refDistance : e.ΔΔΔⵠΔⵠΔᐃΔ,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : e.ᐃΔᐃⵠⵠΔΔⲆΔ
          };
        }
      } else if (dj === f.length) {
        b = f[Et];
        c = parseInt(f[1], Sd);
      }
      for (var h = e.ᐃⲆᐃΔᐃ(c), j = dh; j < h.length; j++) {
        if (d = e.ᐃⲆⲆΔⵠ(h[j])) {
          var k = d.ⵠⲆᐃⵠᐃ;
          k = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : k.coneOuterGain,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : k.distanceModel,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : k.maxDistance,
            panningModel: b.panningModel !== undefined ? b.panningModel : k.panningModel,
            refDistance: b.refDistance !== undefined ? b.refDistance : k.refDistance,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : k.rolloffFactor
          };
          var m = d.ⵠᐃᐃⲆΔ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            d.ⲆⲆⲆΔΔ ||= e.ⲆⲆⲆΔΔ || [0, gj, -0.5];
            a(d, "spatial");
          }
        }
      }
      return e;
    };
    ⵠⵠΔⲆⲆᐃᐃ.prototype.ⲆΔΔⵠΔ = function (a) {
      return function () {
        var b = this;
        var c = b.ⵠᐃᐃᐃⲆΔᐃ;
        b.ΔⵠΔΔΔ = c.ΔⵠΔΔΔ;
        b.ᐃⵠⵠⲆⵠⲆᐃ = c.ᐃⵠⵠⲆⵠⲆᐃ;
        b.ⲆⲆⲆΔΔ = c.ⲆⲆⲆΔΔ;
        b.ⵠⲆᐃⵠᐃ = c.ⵠⲆᐃⵠᐃ;
        a.call(this);
        if (b.ᐃⵠⵠⲆⵠⲆᐃ) {
          c.ΔⵠⲆΔΔⲆᐃ(b.ᐃⵠⵠⲆⵠⲆᐃ);
        } else if (b.ⲆⲆⲆΔΔ) {
          c.ⵠΔᐃΔ(b.ⲆⲆⲆΔΔ[0], b.ⲆⲆⲆΔΔ[bh], b.ⲆⲆⲆΔΔ[ys], b.ΔⲆΔⵠ);
        }
      };
    }(ⵠⵠΔⲆⲆᐃᐃ.prototype.ⲆΔΔⵠΔ);
    ⵠⵠΔⲆⲆᐃᐃ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ⵠᐃᐃᐃⲆΔᐃ;
        b.ΔⵠΔΔΔ = c.ΔⵠΔΔΔ;
        b.ⲆⲆⲆΔΔ = c.ⲆⲆⲆΔΔ;
        b.ⵠⲆᐃⵠᐃ = c.ⵠⲆᐃⵠᐃ;
        return a.call(this);
      };
    }(ⵠⵠΔⲆⲆᐃᐃ.prototype.reset);
    function a(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ⵠᐃᐃⲆΔ = Howler.Δ.createPanner();
        a.ⵠᐃᐃⲆΔ.coneInnerAngle = a.ⵠⲆᐃⵠᐃ.coneInnerAngle;
        a.ⵠᐃᐃⲆΔ.coneOuterAngle = a.ⵠⲆᐃⵠᐃ.coneOuterAngle;
        a.ⵠᐃᐃⲆΔ.coneOuterGain = a.ⵠⲆᐃⵠᐃ.coneOuterGain;
        a.ⵠᐃᐃⲆΔ.distanceModel = a.ⵠⲆᐃⵠᐃ.distanceModel;
        a.ⵠᐃᐃⲆΔ.maxDistance = a.ⵠⲆᐃⵠᐃ.maxDistance;
        a.ⵠᐃᐃⲆΔ.panningModel = a.ⵠⲆᐃⵠᐃ.panningModel;
        a.ⵠᐃᐃⲆΔ.refDistance = a.ⵠⲆᐃⵠᐃ.refDistance;
        a.ⵠᐃᐃⲆΔ.rolloffFactor = a.ⵠⲆᐃⵠᐃ.rolloffFactor;
        a.ⵠᐃᐃⲆΔ.setPosition(a.ⲆⲆⲆΔΔ[0], a.ⲆⲆⲆΔΔ[or], a.ⲆⲆⲆΔΔ[Ci]);
        a.ⵠᐃᐃⲆΔ.setOrientation(a.ΔⵠΔΔΔ[hk], a.ΔⵠΔΔΔ[Ws], a.ΔⵠΔΔΔ[2]);
      } else {
        a.ⵠᐃᐃⲆΔ = Howler.Δ.createStereoPanner();
        a.ⵠᐃᐃⲆΔ.pan.value = a.ᐃⵠⵠⲆⵠⲆᐃ;
      }
      a.ⵠᐃᐃⲆΔ.connect(a.ᐃᐃⲆⲆ);
      if (!a.ⲆⵠⲆΔⲆ) {
        a.ⵠᐃᐃᐃⲆΔᐃ.pause(a.ΔⲆΔⵠ, true).play(a.ΔⲆΔⵠ);
      }
    }
  })();
  var Jw = or;
  var Kw = 1;
  var Lw = {
    ⲆⲆⵠⵠⵠⵠⲆΔⲆ: 5000,
    ⵠⵠᐃᐃᐃ: 1,
    ΔⵠΔΔⲆ: Xj,
    ⵠᐃΔΔΔΔⵠⲆΔ: 5000,
    ΔⲆᐃΔΔ: yr,
    ⵠⵠΔⲆΔⲆⵠ: 460000,
    ᐃⲆᐃᐃⲆⲆᐃΔⲆ: 12,
    Δⵠᐃ: rt,
    ᐃΔΔΔⲆΔᐃ: 3000,
    ᐃᐃΔᐃⲆⵠΔ: Na,
    ⲆⲆⵠΔΔᐃΔⲆᐃ: 5000,
    ᐃⲆⲆΔᐃ: kq,
    ᐃⲆⲆΔΔⲆⵠⲆⵠ: 12
  };
  var Mw = [];
  Mw[-1] = Lw.ⵠⵠᐃᐃᐃ;
  Mw[ts.ᐃᐃⵠⵠⲆ] = Lw.ⵠⵠᐃᐃᐃ;
  Mw[ts.ⵠⲆⲆⲆᐃ] = Lw.ⵠⵠᐃᐃᐃ;
  Mw[ts.ΔΔⲆⵠⲆᐃΔΔⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆⵠΔⵠΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⵠᐃΔΔᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃⵠⵠΔΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃᐃΔΔⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔᐃΔᐃΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔΔᐃⵠΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃⲆΔⵠⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⵠⵠⲆⲆⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆⲆΔᐃⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔⵠⲆⵠᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔⵠⲆΔᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆᐃΔⵠⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔᐃⵠΔⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⵠΔⲆⵠⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆΔⲆᐃⵠΔᐃⵠⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⵠΔᐃⲆᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆⲆᐃᐃⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆΔᐃⵠᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔⲆⵠΔᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆΔΔΔᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃⵠⲆᐃⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔⲆⲆΔⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃΔᐃᐃⵠⲆⲆⲆΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃⵠⵠᐃⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆⵠΔΔⲆ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆΔᐃⵠⵠ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃᐃΔⵠΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃΔᐃⲆᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ᐃᐃⵠⵠᐃ] = Lw.ΔⵠΔΔⲆ;
  var Nw = Vf.console;
  Nw.log = Nw.info = Nw.error = Nw.warn = Nw.debug = Nw.ᐃⲆⲆΔΔⵠⲆᐃⲆ = Nw.trace = Nw.time = Nw.timeEnd = function () { };
  Mw[ts.ᐃⵠⵠⲆᐃ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⲆⵠⵠᐃΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ⵠᐃⵠⲆΔ] = Lw.ΔⵠΔΔⲆ;
  Mw[ts.ΔⲆᐃΔΔ] = Lw.ΔⲆᐃΔΔ;
  Mw[ts.ΔⵠⲆᐃⵠ] = Lw.ΔⲆᐃΔΔ;
  Mw[ts.ΔⵠⲆⵠⵠ] = Lw.ΔⲆᐃΔΔ;
  Mw[ts.ⲆΔⵠᐃⲆ] = Lw.ΔⲆᐃΔΔ;
  Δᐃᐃⵠ = [];
  Δᐃᐃⵠ[ho] = 0;
  Δᐃᐃⵠ[bt] = 1;
  Δᐃᐃⵠ[ys] = $r;
  Δᐃᐃⵠ[Oj] = 1;
  Δᐃᐃⵠ[Dl] = 0;
  Δᐃᐃⵠ[Vn] = 0;
  Δᐃᐃⵠ[6] = ho;
  Δᐃᐃⵠ[_s] = Xa;
  Δᐃᐃⵠ[8] = 0;
  Δᐃᐃⵠ[9] = 0;
  Δᐃᐃⵠ[tu] = ck;
  Δᐃᐃⵠ[11] = Zn;
  Δᐃᐃⵠ[Nj] = hj;
  Δᐃᐃⵠ[13] = 1;
  Δᐃᐃⵠ[14] = 1;
  Δᐃᐃⵠ[sr] = 1;
  Δᐃᐃⵠ[16] = Eu;
  Δᐃᐃⵠ[17] = Eu;
  Δᐃᐃⵠ[Qs] = 0;
  Δᐃᐃⵠ[19] = 0;
  Δᐃᐃⵠ[Aa] = 0;
  Δᐃᐃⵠ[21] = Ob;
  Δᐃᐃⵠ[22] = 0;
  Δᐃᐃⵠ[23] = hj;
  Δᐃᐃⵠ[24] = y;
  Δᐃᐃⵠ[25] = uq;
  Δᐃᐃⵠ[26] = 1;
  Δᐃᐃⵠ[27] = 1;
  Δᐃᐃⵠ[28] = 1;
  Δᐃᐃⵠ[29] = bh;
  Δᐃᐃⵠ[30] = uq;
  Δᐃᐃⵠ[31] = 1;
  Δᐃᐃⵠ[32] = hj;
  Δᐃᐃⵠ[33] = 1;
  Δᐃᐃⵠ[34] = 1;
  Δᐃᐃⵠ[35] = 1;
  Δᐃᐃⵠ[36] = Zk;
  Δᐃᐃⵠ[37] = hj;
  Δᐃᐃⵠ[38] = bq;
  Δᐃᐃⵠ[40] = 0;
  Δᐃᐃⵠ[41] = 0;
  Δᐃᐃⵠ[42] = 0;
  Δᐃᐃⵠ[50] = Ng;
  Δᐃᐃⵠ[51] = 1;
  Δᐃᐃⵠ[52] = 1;
  Δᐃᐃⵠ[55] = Bs;
  Δᐃᐃⵠ[56] = 0;
  Δᐃᐃⵠ[57] = lt;
  Δᐃᐃⵠ[58] = ho;
  ᐃᐃⲆⵠᐃ = [];
  ᐃᐃⲆⵠᐃ[iw.ⲆⲆⵠᐃᐃ] = Hb;
  ᐃᐃⲆⵠᐃ[iw.ᐃⲆΔⲆⵠ] = dt;
  ᐃᐃⲆⵠᐃ[iw.ⲆⲆⲆⲆⲆ] = Xa;
  ᐃᐃⲆⵠᐃ[iw.ΔⲆΔⵠΔ] = dh;
  ᐃᐃⲆⵠᐃ[iw.ⵠΔⵠⲆΔ] = -1;
  ᐃᐃⲆⵠᐃ[iw.ΔᐃΔⲆⲆ] = -Zk;
  ᐃᐃⲆⵠᐃ[iw.ΔᐃⵠΔᐃ] = 0;
  ᐃᐃⲆⵠᐃ[iw.ⵠⵠⵠⵠⵠ] = 0;
  ᐃᐃⲆⵠᐃ[iw.ⲆⲆΔΔΔ] = 0;
  ᐃᐃⲆⵠᐃ[iw.ⲆⵠΔᐃΔ] = Yl;
  ᐃᐃⲆⵠᐃ[iw.ⵠᐃΔⵠΔ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ⲆⵠⲆⵠᐃ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ΔᐃᐃⲆᐃ] = Ws;
  ᐃᐃⲆⵠᐃ[iw.ⵠΔᐃⵠᐃ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ᐃΔΔΔⲆ] = uq;
  ᐃᐃⲆⵠᐃ[iw.ⲆᐃΔΔΔ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ΔΔΔⲆⵠ] = kr;
  ᐃᐃⲆⵠᐃ[iw.ⲆΔΔᐃⲆ] = 0;
  ᐃᐃⲆⵠᐃ[iw.ⵠᐃⲆᐃᐃ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ᐃΔⵠᐃᐃ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ⲆⵠⵠⵠΔ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ⲆᐃⲆᐃⲆ] = Zk;
  ᐃᐃⲆⵠᐃ[iw.ΔᐃⵠⲆⲆ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ᐃⲆⵠᐃⲆ] = 0;
  ᐃᐃⲆⵠᐃ[iw.ᐃᐃᐃΔⵠ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ᐃⲆΔᐃᐃ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ΔΔΔⵠⵠ] = bh;
  ᐃᐃⲆⵠᐃ[iw.ⵠⵠΔΔΔ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ΔᐃΔⵠⵠ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ᐃΔᐃᐃⵠ] = 0;
  ᐃᐃⲆⵠᐃ[iw.ⲆΔᐃᐃΔ] = hj;
  ᐃᐃⲆⵠᐃ[iw.ⲆΔᐃⲆⲆ] = bh;
  ᐃᐃⲆⵠᐃ[iw.Δᐃⵠᐃᐃ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ᐃⲆΔᐃⵠ] = Zk;
  ᐃᐃⲆⵠᐃ[iw.ⲆᐃⵠⵠΔ] = Zk;
  ᐃᐃⲆⵠᐃ[iw.ⲆΔΔΔΔ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ⲆΔᐃⲆᐃ] = ck;
  ᐃᐃⲆⵠᐃ[iw.ᐃΔⵠΔⵠ] = 1;
  ᐃᐃⲆⵠᐃ[iw.ⵠⲆⲆⲆΔ] = Eu;
  ᐃᐃⲆⵠᐃ[iw.ΔⵠⵠΔⵠ] = Ws;
  var Ow = {
    ⲆΔⲆⵠⲆᐃΔ: {
      ⲆⲆΔΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠᐃ: {
        d1: [90391, 300, false],
        d0: [90086, 300, false],
        d2: [90684, 300, false]
      },
      sample: {
        d0: Lw.ᐃⲆⲆΔᐃ,
        d1: Lw.ᐃⲆⲆΔᐃ,
        d2: Lw.ᐃⲆⲆΔᐃ
      }
    },
    ⵠⲆⲆⲆΔⲆⵠ: {
      ⲆⲆΔΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠᐃ: {
        p2: [89815, 300, Ag],
        p1: [89549, 300, false],
        p0: [89303, 300, ro]
      },
      sample: {
        p0: Lw.ᐃⲆⲆΔᐃ,
        p1: Lw.ᐃⲆⲆΔᐃ,
        p2: Lw.ᐃⲆⲆΔᐃ
      }
    },
    ⲆᐃᐃᐃΔⵠΔ: {
      ⲆⲆΔΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠᐃ: {
        w1: [88473, 300, false],
        w2: [88751, 300, Ag],
        w3: [89025, 300, false],
        w0: [88195, 300, false]
      },
      sample: {
        w0: Lw.ᐃⲆⲆΔᐃ,
        w1: Lw.ᐃⲆⲆΔᐃ,
        w2: Lw.ᐃⲆⲆΔᐃ,
        w3: Lw.ᐃⲆⲆΔᐃ
      }
    },
    ⵠⲆⵠΔΔΔᐃ: {
      ⲆⲆΔΔⲆ: null,
      path: ["audio/ambience.mp3"],
      ⵠᐃ: {
        ΔⲆⲆⲆΔ: [91431, 400, Ag],
        ⵠⲆᐃⵠᐃᐃᐃ: [92249, 500, false],
        ⲆΔⲆⵠⵠΔⲆ: [54524, 11393, tk],
        ⵠᐃΔΔⵠΔᐃ: [91022, 400, false],
        ΔⲆᐃⲆΔ: [28380, 1797, true],
        ⵠⲆᐃⵠⵠΔⲆ: [66961, 21223, tk],
        ΔⲆᐃΔΔΔⲆ: [30562, 655, true],
        ⵠᐃⵠᐃᐃⵠⵠᐃⵠ: [100, 2800, true],
        ΔΔⵠΔᐃᐃⵠ: [66961, 21223, ag],
        ΔⲆᐃΔⵠΔⲆ: [66014, 925, gn],
        ⲆᐃⵠᐃᐃΔⵠ: [3100, 8800, true],
        ⵠⲆᐃΔⵠ: [12356, 6965, La],
        ᐃΔⵠΔᐃΔΔ: [19882, 8301, gn],
        ΔΔⵠⲆⲆᐃΔ: [32604, 21890, true],
        ⲆⲆⵠⲆᐃⵠⲆ: [31658, 813, ag]
      },
      sample: {
        ⵠᐃⵠᐃᐃⵠⵠᐃⵠ: 1,
        ⲆᐃⵠᐃᐃΔⵠ: El,
        ᐃΔⵠΔᐃΔΔ: 1,
        ΔΔⵠⲆⲆᐃΔ: kr,
        ⲆΔⲆⵠⵠΔⲆ: 1,
        ΔΔⵠΔᐃᐃⵠ: 1,
        ⵠⲆᐃⵠⵠΔⲆ: 1,
        ⵠⲆᐃΔⵠ: Lw.ᐃⲆⲆΔᐃ,
        ΔⲆᐃⲆΔ: Lw.ᐃⲆⲆΔᐃ,
        ΔⲆᐃΔΔΔⲆ: Lw.ᐃⲆⲆΔᐃ,
        ⲆⲆⵠⲆᐃⵠⲆ: Lw.ᐃⲆⲆΔᐃ,
        ΔⲆᐃΔⵠΔⲆ: Lw.ᐃⲆⲆΔᐃ,
        ⵠᐃΔΔⵠΔᐃ: Lw.Δⵠᐃ,
        ΔⲆⲆⲆΔ: Lw.Δⵠᐃ,
        ⵠⲆᐃⵠᐃᐃᐃ: Lw.Δⵠᐃ
      }
    }
  };
  function Pw(b, c, d, e, f, i) {
    const j = b ^ 55047;
    const a = ((4671 + c) * 22695477 + bt) % 4294967296;
    const k = ~(d & 13622) & (d | 13622);
    const h = (11497 + e) % 65366;
    const l = ~(i & 29486) & 29486 | ~(i & 29486) & i;
    const g = im(j, a, k, h, (bt + (21477 + f) * 22695477) % 4294967296);
    im(l, j, a, k, h);
    return g ^ 49075;
  }
  function ef(a, b) {
    const c = ~(a & 19540) & 19540 | ~(a & 19540) & a;
    const d = b ^ 852;
    const e = Vk(c, d, c, d, c, d);
    tb(c, d);
    return e ^ 11563;
  }
  function tf(b, c, d, e, f, i, j, a, k, h, l) {
    this.r = or;
    this.ΔⵠΔΔⵠ = b;
    this.ᐃΔⵠᐃⲆΔⵠ = b;
    this.ⵠΔΔ = c;
    this.ⲆⲆⲆ = d;
    this.fade = e;
    this.ᐃⵠΔⲆᐃΔΔ = f;
    this.ⲆΔΔᐃⵠⲆⵠ = i;
    this.ᐃᐃΔⲆ = j;
    this.ⵠᐃᐃΔΔᐃΔ = a;
    this.source = k;
    this.source.ⵠᐃΔᐃⵠⵠⵠ = k.x + k.w;
    this.source.ΔⲆᐃⲆⵠ = k.y + k.ᐃᐃⲆ;
    this.ⵠΔⵠΔᐃⲆΔⵠⲆ = h;
    this.ΔᐃΔⲆᐃᐃΔ = l;
    this.ⵠⵠᐃⲆᐃΔΔ = 0;
    this.ⵠΔΔⲆⲆΔⲆ = {
      ⵠᐃᐃⵠ: 5,
      d: 5
    };
    this.ΔⲆⵠΔΔ = function () {
      this.ΔⵠΔΔⵠ -= Cf;
      if (this.ΔⵠΔΔⵠ < 0) {
        this.ΔⵠΔΔⵠ = this.ᐃΔⵠᐃⲆΔⵠ;
        var a = Ow.ⵠⲆⵠΔΔΔᐃ.ⲆⲆΔΔⲆ.playing(this.ⵠΔΔ);
        var b = Ow.ⵠⲆⵠΔΔΔᐃ.ⲆⲆΔΔⲆ.playing(this.ⲆⲆⲆ);
        if (a && !b) {
          var c = Jw * this.ᐃᐃΔⲆ.volume(this.ⵠΔΔ);
          var d = (this.ⲆΔΔᐃⵠⲆⵠ * Math.random() + this.ᐃⵠΔⲆᐃΔΔ) * Jw;
          this.ᐃᐃΔⲆ.fade(c, d, this.fade, this.ⵠΔΔ);
        } else if (!a && b) {
          c = this.ᐃᐃΔⲆ.volume(this.ⲆⲆⲆ) * Jw;
          d = Jw * (Math.random() * this.ⲆΔΔᐃⵠⲆⵠ + this.ᐃⵠΔⲆᐃΔΔ);
          this.ᐃᐃΔⲆ.fade(c, d, this.fade, this.ⲆⲆⲆ);
        }
      }
    };
    this.transition = function () {
      this.ΔⵠΔΔⵠ = this.ᐃΔⵠᐃⲆΔⵠ;
      this.ⵠΔΔⲆⲆΔⲆ.d = this.ⵠΔΔⲆⲆΔⲆ.ⵠᐃᐃⵠ;
      if (uf.time) {
        this.ᐃᐃΔⲆ.fade(0, Jw * this.ᐃⵠΔⲆᐃΔΔ, this.ⵠᐃᐃΔΔᐃΔ, this.ⵠΔΔ);
        this.ᐃᐃΔⲆ.play(this.ⵠΔΔ);
        if (this.ᐃᐃΔⲆ.playing(this.ⲆⲆⲆ)) {
          var a = Jw * this.ᐃᐃΔⲆ.volume(this.ⲆⲆⲆ);
          this.ᐃᐃΔⲆ.fade(a, Ob, this.ⵠᐃᐃΔΔᐃΔ, this.ⲆⲆⲆ);
        }
      } else {
        this.ᐃᐃΔⲆ.fade(0, this.ᐃⵠΔⲆᐃΔΔ * Jw, this.ⵠᐃᐃΔΔᐃΔ, this.ⲆⲆⲆ);
        this.ᐃᐃΔⲆ.play(this.ⲆⲆⲆ);
        if (this.ᐃᐃΔⲆ.playing(this.ⵠΔΔ)) {
          a = Jw * this.ᐃᐃΔⲆ.volume(this.ⵠΔΔ);
          this.ᐃᐃΔⲆ.fade(a, 0, this.ⵠᐃᐃΔΔᐃΔ, this.ⵠΔΔ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⵠⵠᐃⲆᐃΔΔ) {
        if (ⵠⲆᐃⲆ.ΔᐃΔⲆᐃᐃΔ(a, this.ⵠΔⵠΔᐃⲆΔⵠⲆ)) {
          if (!Vw.transition && Lw.ⵠⵠΔⲆΔⲆⵠ > uf.ⲆⲆΔᐃᐃ.now) {
            if (uf.time) {
              if (!this.ᐃᐃΔⲆ.playing(this.ⵠΔΔ)) {
                this.ⵠΔΔⲆⲆΔⲆ.d -= Cf;
                if (this.ⵠΔΔⲆⲆΔⲆ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ᐃᐃΔⲆ.playing(this.ⲆⲆⲆ)) {
              this.ⵠΔΔⲆⲆΔⲆ.d -= Cf;
              if (this.ⵠΔΔⲆⲆΔⲆ.d < ks) {
                this.transition();
              }
            }
          }
        } else {
          this.ⵠⵠᐃⲆᐃΔΔ = 0;
          if (this.ᐃᐃΔⲆ.playing(this.ⵠΔΔ)) {
            var b = this.ᐃᐃΔⲆ.volume(this.ⵠΔΔ) * Jw;
            this.ᐃᐃΔⲆ.fade(b, vl, this.ⵠᐃᐃΔΔᐃΔ, this.ⵠΔΔ);
          }
          if (this.ᐃᐃΔⲆ.playing(this.ⲆⲆⲆ)) {
            b = this.ᐃᐃΔⲆ.volume(this.ⲆⲆⲆ) * Jw;
            this.ᐃᐃΔⲆ.fade(b, ks, this.ⵠᐃᐃΔΔᐃΔ, this.ⲆⲆⲆ);
          }
        }
      } else if (ⵠⲆᐃⲆ.ΔᐃΔⲆᐃᐃΔ(a, this.ΔᐃΔⲆᐃᐃΔ)) {
        this.ⵠⵠᐃⲆᐃΔΔ = 1;
        if (!Vw.transition && Lw.ⵠⵠΔⲆΔⲆⵠ > uf.ⲆⲆΔᐃᐃ.now) {
          this.transition();
        }
      }
    };
    this.ᐃᐃᐃ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? Vw.ⵠΔΔΔΔⲆᐃ(this.source.x) : this.source.ⵠᐃΔᐃⵠⵠⵠ < a.x ? Vw.ⵠΔΔΔΔⲆᐃ(this.source.ⵠᐃΔᐃⵠⵠⵠ) : b.x;
      d = this.source.y > a.y ? Vw.ΔᐃⵠⲆⲆᐃⲆ(this.source.y) : this.source.ΔⲆᐃⲆⵠ < a.y ? Vw.ΔᐃⵠⲆⲆᐃⲆ(this.source.ΔⲆᐃⲆⵠ) : b.y;
      this.ᐃᐃΔⲆ.pos(c, d, -0.5, this.ⵠΔΔ);
      this.ᐃᐃΔⲆ.pos(c, d, -0.5, this.ⲆⲆⲆ);
    };
  }
  function nf(a, b, c) {
    ni(Ak, a, b, c);
    const d = $c(zk[Hb], zk[1], zk[ab], zk[Hb]);
    $c(zk[Dj], zk[ys], zk[0], zk[1]);
    return ~(d & 40115) & d | ~(d & 40115) & 40115;
  }
  function of(b, c, d) {
    const e = ~(b & 9014) & (b | 9014);
    const f = (8 << (c >> 8 & 255)) + (16 << (c & 255)) + (24 << (c >> la & 255)) + (0 << (c >> 24 & 255));
    const g = d ^ 14636;
    const h = Jo(e, f, g, e, f, g);
    (function (b, c, d) {
      const e = ~(b & 35461) & 35461 | ~(b & 35461) & b;
      const f = ~(c & 543) & (c | 543);
      const g = (0 << (d >> 24 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d >> ka & 255)) + (8 << (d >> 16 & 255));
      const h = im(e, f, g, e, f);
      const a = zo(g, e, f, g, e);
    })(e, f, g);
    return h ^ 39930;
  }
  function rf(b, c, d, e) {
    const f = (51241 + b) % 65499;
    const g = (24 << (c >> 16 & 255)) + (0 << (c >> 24 & wa)) + (16 << (c >> lt & 255)) + (8 << (c >> 8 & 255));
    const h = (d | 63027) & ~(d & 63027);
    const a = ((60253 + e) * 214013 + 2531011) % 4294967296;
    return ((32743 + (Pw(f, g, h, a, f, g) ^ im(h, a, f, g, h))) * 1664525 + 1013904223) % 4294967296;
  }
  ΔᐃΔⲆᐃ = {
    ΔⲆⵠⲆΔⵠᐃ: 300,
    ΔⵠΔⲆᐃᐃⵠ: 0,
    ⵠᐃⲆⵠⲆⵠⲆⲆⵠ: 0.2,
    ⲆⵠⵠⲆΔⲆⲆ: sd,
    ⲆᐃᐃⲆⵠΔⵠ: rb,
    ⲆᐃᐃⵠΔᐃΔ: 100,
    ᐃΔⵠΔⵠΔᐃ: Xl,
    ⵠᐃⲆⲆⲆⲆΔᐃΔ: 0.4,
    ⵠⲆᐃⵠᐃᐃⲆ: Fg,
    ᐃⲆⲆᐃᐃᐃΔⵠⲆ: 0.2,
    ᐃΔᐃᐃⵠΔⲆ: T,
    ⲆᐃΔΔⵠΔΔ: 1,
    ΔΔⲆᐃⲆ: 2,
    ⲆᐃΔΔⵠᐃΔⵠⲆ: 0.2
  };
  function af(a, b, c) {
    this.ⲆⵠΔⲆᐃΔΔ = a;
    this.c = 0;
    this.ᐃᐃΔⲆ = b;
    this.ⵠⵠⲆᐃᐃ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ⵠⵠⲆᐃᐃ[this.c];
      this.ⲆⵠΔⲆᐃΔΔ.ⵠᐃᐃⵠΔⵠⵠ(this.ᐃᐃΔⲆ, a);
      this.ᐃᐃΔⲆ.play(a);
    };
  }
  function sf(a) {
    this.ᐃΔⵠΔᐃᐃⲆ = 1;
    this.ᐃᐃⲆΔ = 0;
    this.mode = -Zn;
    this.ΔⲆᐃⲆΔ = Vw.sample.ΔⲆᐃⲆΔ[a];
    this.ΔⲆᐃΔΔΔⲆ = Vw.sample.ΔⲆᐃΔΔΔⲆ[a];
    this.ⲆⲆⵠⲆᐃⵠⲆ = Vw.sample.ⲆⲆⵠⲆᐃⵠⲆ[a];
    this.ΔⲆᐃΔⵠΔⲆ = Vw.sample.ΔⲆᐃΔⵠΔⲆ[a];
    this.ᐃΔᐃΔⲆⲆⲆ = new af(this, Ow.ⵠⲆⲆⲆΔⲆⵠ.ⲆⲆΔΔⲆ, Vw.ᐃⵠᐃⲆᐃ.ᐃΔᐃΔⲆⲆⲆ[a]);
    this.ⲆᐃΔⲆⵠ = new af(this, Ow.ⲆᐃᐃᐃΔⵠΔ.ⲆⲆΔΔⲆ, Vw.ᐃⵠᐃⲆᐃ.ⲆᐃΔⲆⵠ[a]);
    this.Ⲇᐃⵠⵠᐃ = new af(this, Ow.ⲆΔⲆⵠⲆᐃΔ.ⲆⲆΔΔⲆ, Vw.ᐃⵠᐃⲆᐃ.Ⲇᐃⵠⵠᐃ[a]);
    this.Ⲇᐃᐃⵠⵠ = a;
    this.x = Hb;
    this.y = 0;
    this.ⵠΔᐃⲆⵠ = 0;
    this.ΔⵠΔΔⵠ = ΔᐃΔⲆᐃ.ᐃⲆⲆⲆⵠⲆΔᐃΔ;
    this.ⵠΔᐃΔ = {
      x: 0,
      y: 0
    };
    this.ΔᐃᐃⵠⲆ = Ow.ⵠⲆⵠΔΔΔᐃ.ⲆⲆΔΔⲆ;
    this.ⲆⵠⲆΔᐃΔΔⵠΔ = function (a) {
      if (a === Lw.ⵠⵠᐃᐃᐃ) {
        this.ᐃΔᐃΔⲆⲆⲆ.play();
      } else if (Lw.ΔⵠΔΔⲆ === a) {
        this.ⲆᐃΔⲆⵠ.play();
      } else if (a === Lw.ΔⲆᐃΔΔ) {
        this.Ⲇᐃⵠⵠᐃ.play();
      }
    };
    this.ⲆᐃᐃⲆⵠΔΔ = function (a) {
      if (a.ⲆᐃⲆΔⲆⲆⵠ > Ob) {
        return ΔᐃΔⲆᐃ.ΔΔⲆᐃⲆ;
      } else if (a.ⲆᐃᐃⵠⵠΔⵠ > 0) {
        return ΔᐃΔⲆᐃ.ⲆᐃΔΔⵠΔΔ;
      } else if (Hb < a.ᐃⵠⲆᐃᐃ || Ob < a.ᐃΔΔⲆΔ) {
        return ΔᐃΔⲆᐃ.ⲆⵠⵠⲆΔⲆⲆ;
      } else {
        return ΔᐃΔⲆᐃ.ΔⵠΔⲆᐃᐃⵠ;
      }
    };
    this.ⲆΔΔⵠΔ = function (a) {
      this.ᐃΔⵠΔᐃᐃⲆ = Et;
      this.ᐃᐃⲆΔ = a;
      var b = uf.ΔᐃᐃⲆⵠ[a];
      b.Ⲇᐃᐃⵠⵠ = this.Ⲇᐃᐃⵠⵠ;
      this.mode = this.ⲆᐃᐃⲆⵠΔΔ(b);
      this.ⵠΔᐃΔ.x = b.x;
      this.ⵠΔᐃΔ.y = b.y;
    };
    this.ᐃⵠⵠⲆⵠⲆΔ = function () {
      this.ᐃΔⵠΔᐃᐃⲆ = hj;
      this.mode = -1;
      this.ΔᐃᐃⵠⲆ.stop(this.ΔⲆᐃⲆΔ);
      this.ΔᐃᐃⵠⲆ.stop(this.ΔⲆᐃΔΔΔⲆ);
      this.ΔᐃᐃⵠⲆ.stop(this.ⲆⲆⵠⲆᐃⵠⲆ);
      this.ΔᐃᐃⵠⲆ.stop(this.ΔⲆᐃΔⵠΔⲆ);
    };
    this.fade = function (a, b) {
      var c = Kw * this.ΔᐃᐃⵠⲆ.volume(a);
      this.ΔᐃᐃⵠⲆ.fade(c, ka, b, a);
    };
    this.ⵠᐃᐃⵠΔⵠⵠ = function (a, b) {
      if (this.ⵠΔᐃⲆⵠ && this.Ⲇᐃᐃⵠⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ΔⲆⵠΔΔ = function (b, c, d, e, f, g, i) {
      this.ΔⵠΔΔⵠ = g;
      if (e && this.mode === f) {
        var a = this.ΔᐃᐃⵠⲆ.volume(b) * Kw;
        if (this.ⵠΔᐃⲆⵠ) {
          var j = (d * Math.random() + c) * Kw;
          this.ΔᐃᐃⵠⲆ.fade(a, j, i, b);
        } else {
          this.ΔᐃᐃⵠⲆ.fade(a, 0, i, b);
        }
      } else if (f != this.mode && this.ⵠΔᐃⲆⵠ) {
        this.ΔᐃᐃⵠⲆ.fade(0, (c + d) * Kw, i, b);
      } else if (this.ⵠΔᐃⲆⵠ) {
        a = this.ΔᐃᐃⵠⲆ.volume(b) * Kw;
        j = Kw * (Math.random() * d + c);
        this.ΔᐃᐃⵠⲆ.fade(a, j, i, b);
      }
      this.ⵠᐃᐃⵠΔⵠⵠ(this.ΔᐃᐃⵠⲆ, b);
      this.ΔᐃᐃⵠⲆ.play(b);
    };
    this.ᐃᐃᐃ = function () {
      var a = uf.ΔᐃᐃⲆⵠ[this.ᐃᐃⲆΔ];
      this.ΔⵠΔΔⵠ -= Cf;
      if (fs >= this.ΔⵠΔΔⵠ) {
        var b = 0;
        if (a.x != this.ⵠΔᐃΔ.x || a.y != this.ⵠΔᐃΔ.y) {
          if (!this.ⵠΔᐃⲆⵠ) {
            b = 1;
            this.ⵠΔᐃⲆⵠ = 1;
          }
          this.x = Vw.ⲆᐃⲆⲆⲆⵠⲆ(a.x, ΔᐃΔⲆᐃ.ⲆᐃᐃⲆⵠΔⵠ);
          this.y = Vw.ᐃⵠⵠⵠⲆⲆᐃ(a.y, ΔᐃΔⲆᐃ.ⲆᐃᐃⲆⵠΔⵠ);
        } else if (this.ⵠΔᐃⲆⵠ) {
          b = bh;
          this.ⵠΔᐃⲆⵠ = 0;
        }
        this.ⵠΔᐃΔ.x = a.x;
        this.ⵠΔᐃΔ.y = a.y;
        ⵠⵠΔᐃ = this.ⲆᐃᐃⲆⵠΔΔ(a);
        if (this.mode != ⵠⵠΔᐃ) {
          if (ΔᐃΔⲆᐃ.ⲆᐃΔΔⵠΔΔ === this.mode) {
            this.fade(this.ΔⲆᐃⲆΔ, ΔᐃΔⲆᐃ.ΔⲆⵠⲆΔⵠᐃ);
          } else if (this.mode === ΔᐃΔⲆᐃ.ΔΔⲆᐃⲆ) {
            this.fade(this.ΔⲆᐃΔΔΔⲆ, ΔᐃΔⲆᐃ.ⲆᐃᐃⵠΔᐃΔ);
          } else if (this.mode === ΔᐃΔⲆᐃ.ΔⵠΔⲆᐃᐃⵠ) {
            this.fade(this.ⲆⲆⵠⲆᐃⵠⲆ, ΔᐃΔⲆᐃ.ᐃΔⵠΔⵠΔᐃ);
          } else if (this.mode === ΔᐃΔⲆᐃ.ⲆⵠⵠⲆΔⲆⲆ) {
            this.fade(this.ΔⲆᐃΔⵠΔⲆ, ΔᐃΔⲆᐃ.ⵠⲆᐃⵠᐃᐃⲆ);
          }
        }
        if (ΔᐃΔⲆᐃ.ⲆᐃΔΔⵠΔΔ === ⵠⵠΔᐃ) {
          this.ΔⲆⵠΔΔ(this.ΔⲆᐃⲆΔ, 0.08, 0.3, b, ⵠⵠΔᐃ, ΔᐃΔⲆᐃ.ⵠᐃⲆⲆⲆⲆΔᐃΔ, ΔᐃΔⲆᐃ.ΔⲆⵠⲆΔⵠᐃ);
        } else if (ΔᐃΔⲆᐃ.ΔΔⲆᐃⲆ === ⵠⵠΔᐃ) {
          this.ΔⲆⵠΔΔ(this.ΔⲆᐃΔΔΔⲆ, 0.2, 0.3, b, ⵠⵠΔᐃ, ΔᐃΔⲆᐃ.ⵠᐃⲆⵠⲆⵠⲆⲆⵠ, ΔᐃΔⲆᐃ.ⲆᐃᐃⵠΔᐃΔ);
        } else if (ⵠⵠΔᐃ === ΔᐃΔⲆᐃ.ΔⵠΔⲆᐃᐃⵠ) {
          this.ΔⲆⵠΔΔ(this.ⲆⲆⵠⲆᐃⵠⲆ, 0.3, 0.6, b, ⵠⵠΔᐃ, ΔᐃΔⲆᐃ.ⲆᐃΔΔⵠᐃΔⵠⲆ, ΔᐃΔⲆᐃ.ᐃΔⵠΔⵠΔᐃ);
        } else if (ⵠⵠΔᐃ === ΔᐃΔⲆᐃ.ⲆⵠⵠⲆΔⲆⲆ) {
          this.ΔⲆⵠΔΔ(this.ΔⲆᐃΔⵠΔⲆ, 0.1, 0.25, b, ⵠⵠΔᐃ, ΔᐃΔⲆᐃ.ᐃⲆⲆᐃᐃᐃΔⵠⲆ, ΔᐃΔⲆᐃ.ⵠⲆᐃⵠᐃᐃⲆ);
        }
        this.mode = ⵠⵠΔᐃ;
      }
    };
    this.check = function () {
      var a = uf.ΔᐃᐃⲆⵠ[this.ᐃᐃⲆΔ];
      return !!a || (this.ᐃⵠⵠⲆⵠⲆΔ(a), Mq);
    };
  }
  ᐃⵠⵠⵠⲆⲆⲆ = 0;
  document.getElementById("version").innerHTML = bw.ⵠⵠΔΔΔⵠΔ + ".3";
  var hf;
  var Qw = [];
  var Rw = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = rs.ⲆᐃᐃᐃⲆ[Rw.time];
  Rw.items.push(new pw(iw.ᐃⲆΔⲆⵠ, vl, 0, Xa, 0, Math.random() * Math.PI * 2, 2, bt));
  Rw.items.push(new pw(iw.ΔᐃⵠᐃⲆ, 0, 0, ho, ho, 0, ks, hg));
  Rw.items.push(new pw(iw.ΔᐃⵠΔᐃ, 0, Bs, 0, 0, Math.PI / 4, 0, 0));
  Rw.items.push(new pw(iw.ΔᐃⵠᐃⲆ, Eu, hk, vl, 0, 0, 0, wr));
  ΔⵠⲆⲆ = new function () {
    var c = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] + "]";
      }
    }
    this.Δⵠⵠᐃ = null;
    this.ᐃⲆⵠⵠΔ = 0;
    this.ᐃᐃⵠⲆⵠ = [];
    this.ⲆᐃᐃΔⵠⵠᐃ = {};
    this.ⲆⵠΔΔΔ = [[], [], [], [], [], [], [], [], []];
    this.ΔΔⲆᐃΔⲆⲆ = [-1, -1, -kr, -Dj, -1, -1, -bh, -1, -bh];
    this.ᐃⵠᐃⵠⲆ = ks;
    this.ΔᐃΔⲆⵠΔᐃ = dh;
    this.ⵠᐃᐃΔΔⵠᐃ = function (a) {
      if (C !== Yv) {
        c.ᐃᐃⵠⲆⵠ.push({
          a: Yv.name,
          gm: Yv.mode,
          idx: Bs,
          m: bl,
          nu: Et,
          id: dh
        });
        a();
        return;
      }
      fetch($v + "/list", {
        method: "GET"
      }).then(function (b) {
        if (b.ok) {
          b.json().then(function (b) {
            c.ᐃᐃⵠⲆⵠ = [];
            c.ⲆᐃᐃΔⵠⵠᐃ = {};
            for (let a in fw.ⵠΔΔⲆⵠⲆᐃ) {
              const b = fw.ⵠΔΔⲆⵠⲆᐃ[a];
              c.ᐃᐃⵠⲆⵠ.push({
                a: "Auto Select",
                gm: b,
                m: hh,
                nu: 0,
                auto: La
              });
            }
            var d = pn;
            var f = kl;
            var i = Ah;
            for (let e = 0; b.length > e; e++) {
              const j = b[e];
              const a = j.n;
              const k = j.l;
              const h = j.p;
              const l = [];
              for (let b = 0; h.length > b; b++) {
                const c = h[b];
                l.push(a + c[0]);
              }
              for (let b = 0; k.length > b; b++) {
                const e = k[b];
                let g;
                let a = fw.ⵠΔΔⲆⵠⲆᐃ[e[d]] + e[1];
                g = a in c.ⲆᐃᐃΔⵠⵠᐃ ? ++c.ⲆᐃᐃΔⵠⵠᐃ[a] : c.ⲆᐃᐃΔⵠⵠᐃ[a] = 1;
                c.ᐃᐃⵠⲆⵠ.push({
                  name: e[i],
                  a: fw.ᐃᐃᐃΔⲆⲆⲆⲆⵠ[e[1]] + " " + g,
                  r: e[1],
                  gm: fw.ⵠΔΔⲆⵠⲆᐃ[e[d]],
                  idx: g,
                  m: nh,
                  nu: e[f],
                  id: e[1] + e[0],
                  p: l
                });
              }
            }
            a();
          });
        } else {
          Vf.setTimeout(function () {
            c.ⵠᐃᐃΔΔⵠᐃ(a);
          }, 3000);
        }
      });
    };
    this.ᐃᐃⲆⲆⵠⲆᐃΔⵠ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf(bs) !== -1) {
          b.push(c);
        }
      }
      if (b.length === Hb) {
        return fs;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⲆⲆᐃⲆⵠᐃΔ = function (b) {
      var c = 0;
      for (var d = 0; d < b.length; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (ΔⵠⲆⲆ.ΔΔⲆᐃΔⲆⲆ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ] === -1) {
        ΔⵠⲆⲆ.ΔΔⲆᐃΔⲆⲆ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ] = e.selectedIndex = ΔⵠⲆⲆ.ᐃᐃⲆⲆⵠⲆᐃΔⵠ(b);
      } else {
        e.selectedIndex = ΔⵠⲆⲆ.ΔΔⲆᐃΔⲆⲆ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + xt[ⲆⲆΔΔ.ᐃⲆⲆΔᐃ] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + xt[ⲆⲆΔΔ.ⲆⲆΔⵠⲆⵠⵠ] + " (" + this.ΔΔⲆΔⲆΔⵠ + ") " + xt[ⲆⲆΔΔ.ᐃⵠⵠⲆⵠΔΔ] + "</li>";
      for (d = 0; d < b.length; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + xt[ⲆⲆΔΔ.ᐃⲆΔⲆⲆⲆΔ] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -Th;
        for (var d = ΔⵠⲆⲆ.ⲆⵠΔΔΔ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ], e = 0; e < d.length; e++) {
          if (a(d[e]) === b) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          ΔⵠⲆⲆ.ΔΔⲆᐃΔⲆⲆ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ΔΔⲆΔⲆΔⵠ = 0;
    this.ⵠⵠⵠⵠⵠᐃΔΔᐃ = function () {
      this.ΔΔⲆΔⲆΔⵠ = Ob;
      for (var a = 0; ΔⵠⲆⲆ.ᐃᐃⵠⲆⵠ.length > a; a++) {
        if (this.ᐃᐃⵠⲆⵠ[a].gm == "experimental") {
          this.ⲆⵠΔΔΔ[fw.ⵠΔΔΔΔ].push(this.ᐃᐃⵠⲆⵠ[a]);
        } else if (this.ᐃᐃⵠⲆⵠ[a].gm == "zombies") {
          this.ⲆⵠΔΔΔ[fw.ⵠⵠᐃΔⲆ].push(this.ᐃᐃⵠⲆⵠ[a]);
        } else if (this.ᐃᐃⵠⲆⵠ[a].gm == "community") {
          this.ⲆⵠΔΔΔ[fw.Δᐃⵠⵠⵠ].push(this.ᐃᐃⵠⲆⵠ[a]);
        } else if (this.ᐃᐃⵠⲆⵠ[a].gm == "forest") {
          this.ⲆⵠΔΔΔ[fw.ⵠᐃⵠᐃᐃ].push(this.ᐃᐃⵠⲆⵠ[a]);
        } else if (this.ᐃᐃⵠⲆⵠ[a].gm == "battle-royale") {
          this.ⲆⵠΔΔΔ[fw.ΔⵠⲆᐃΔⵠΔ].push(this.ᐃᐃⵠⲆⵠ[a]);
        } else if (this.ᐃᐃⵠⲆⵠ[a].gm == "vampires") {
          this.ⲆⵠΔΔΔ[fw.ⵠⵠᐃᐃΔ].push(this.ᐃᐃⵠⲆⵠ[a]);
        } else {
          this.ⲆⵠΔΔΔ[fw.ⲆⲆΔⵠⵠ].push(this.ᐃᐃⵠⲆⵠ[a]);
        }
        this.ΔΔⲆΔⲆΔⵠ += this.ᐃᐃⵠⲆⵠ[a].nu;
      }
      for (a = 0; a < this.ⲆⵠΔΔΔ.length; a++) {
        if (this.ⲆⵠΔΔΔ[a].length === 0) {
          this.ⲆⵠΔΔΔ[a].push({
            a: xt[ⲆⲆΔΔ.ΔⵠⵠⵠⵠⲆΔ],
            ⲆⵠᐃᐃᐃⲆⲆΔᐃ: ou,
            ⲆΔ: "127.0.0.1",
            Δᐃᐃ: 80
          });
        }
      }
      this.ⲆⲆᐃⲆⵠᐃΔ(this.ⲆⵠΔΔΔ[0]);
      this.ⵠΔⵠⲆᐃ = function (a) {
        ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ = a;
        ΔⵠⲆⲆ.ⲆⲆᐃⲆⵠᐃΔ(ΔⵠⲆⲆ.ⲆⵠΔΔΔ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ]);
        ΔⵠⲆⲆ.ⲆⲆᐃⲆⵠᐃΔ(ΔⵠⲆⲆ.ⲆⵠΔΔΔ[ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ]);
        document.getElementById("servselect").selectedIndex = ΔⵠⲆⲆ.ᐃⵠᐃⵠⲆ;
      };
    };
    this.ⲆⲆᐃⵠⵠⲆⲆ = 0;
    this.ⵠᐃΔⲆⲆᐃΔ = fs;
    this.ᐃⲆⲆᐃⵠ = null;
    this.timeout = function () {
      c.ⵠᐃΔⲆⲆᐃΔ++;
      c.Δⵠⵠᐃ.close();
      if (bw.ⵠΔⲆΔᐃⵠⲆᐃᐃ < c.ⵠᐃΔⲆⲆᐃΔ) {
        yf = kr;
        hf.ΔΔⲆⵠⲆΔⵠᐃᐃ = bw.ⵠⲆΔⲆⵠⵠⲆᐃⲆ;
        c.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ΔⲆΔⲆᐃᐃⵠ]);
        hf.waiting = Mq;
        if (Sw.reconnect.enabled) {
          Uw.ⵠⲆᐃΔⲆ(hf.Δᐃᐃⵠᐃ);
        }
      } else {
        c.ⵠⲆΔⵠⵠΔⲆ();
      }
    };
    this.ⲆΔΔᐃⵠⲆᐃ = function (a) {
      if (this.Δⵠⵠᐃ.ᐃⲆⵠⵠΔ == this.ᐃⲆⵠⵠΔ) {
        this.ᐃⲆⵠⵠΔ++;
        this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠⲆⵠⵠⲆᐃⲆ] + a);
        Uw.ⵠⲆᐃΔⲆ(hf.Δᐃᐃⵠᐃ);
      }
    };
    this.ΔⵠⵠΔΔᐃᐃ = function () {
      this.ⲆᐃⵠΔΔ("You speak too much");
    };
    this.ᐃᐃⲆᐃᐃⵠᐃΔⲆ = function () {
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ᐃΔΔⲆΔⵠⵠ]);
      hf.waiting = Vl;
    };
    this.ᐃⵠⲆΔⲆⲆⲆΔⲆ = function () {
      Sw.ⵠᐃⲆⲆⵠ.open = false;
    };
    this.ⵠⲆⵠΔⲆΔᐃΔΔ = function () {
      Uw.ΔΔᐃⵠᐃⲆΔ = 0;
    };
    this.ⲆⵠᐃΔΔⲆⲆᐃΔ = function () {
      Uw.ⲆΔΔᐃᐃⲆᐃ = Xa;
    };
    this.ᐃᐃⲆⲆΔΔⵠΔⵠ = function (a) {
      Sw.ᐃΔΔᐃⲆ.ᐃᐃᐃΔⲆ = a;
      if (uf.ⲆᐃⲆΔᐃ > -300) {
        if (a === 0) {
          this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠⲆΔᐃᐃⵠΔ]);
        } else {
          this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ΔⲆⵠΔⵠⲆⵠ]);
        }
      }
    };
    this.ⵠⵠΔⲆΔ = function (a) {
      Sw.ⵠⵠΔⲆΔ = a;
    };
    this.ᐃⵠᐃⲆⵠᐃΔᐃΔ = function (a) {
      Sw.ⵠΔᐃᐃⲆⵠᐃ = a;
    };
    this.ⵠΔᐃᐃⲆⵠᐃ = function (a) {
      Sw.ⲆⲆⲆᐃⵠ.ᐃᐃᐃΔⲆ = a;
      if (uf.ᐃⵠⲆᐃᐃ > -300) {
        if (Go === a) {
          this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ᐃᐃᐃᐃⵠⲆᐃ]);
        } else {
          this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⲆΔᐃᐃΔᐃⲆ]);
        }
      }
    };
    this.ⵠᐃⲆⲆΔΔᐃⲆᐃ = function (a) {
      if (a === ka) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (bt === a) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (kl === a) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃᐃⲆᐃΔΔΔⲆⵠ = function () {
      Uw.ᐃᐃⵠⵠΔⲆⲆ = dh;
    };
    this.ΔⵠⵠⲆΔΔΔⲆⵠ = function () {
      Uw.ⲆⵠΔⵠᐃⲆΔ = 0;
    };
    this.ⵠᐃⲆᐃᐃⵠⲆⵠΔ = function () {
      Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ = [];
      Sw.Δᐃⵠᐃ.ΔΔⵠⲆ = [];
      Sw.Δᐃⵠᐃ.id = -1;
      Sw.Δᐃⵠᐃ.ΔᐃⵠΔΔᐃⵠ.stop();
      Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ = [];
      Sw.ⵠⲆⲆΔ.ⵠΔᐃΔⵠ = ej;
      Sw.ⵠⲆⲆΔ.ⵠᐃΔⲆⵠⲆⲆⵠᐃ = false;
      Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -1;
      Sw.ⵠⲆⲆΔ.id = -1;
      Sw.ⵠⲆⲆΔ.ⵠⲆⵠⲆⲆ = false;
      Sw.ⵠⲆⲆΔ.Δᐃᐃᐃᐃ = false;
      Sw.ⵠⲆⲆΔ.ⵠⲆᐃΔⵠ = As;
      Sw.ⵠⲆⲆΔ.ᐃⵠⲆⵠⲆⲆⵠ = Cl;
      Sw.ⵠⲆⲆΔ.timeout = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(zn, ho, 1, ou, og, 1);
    };
    this.ⲆΔⲆᐃⵠΔᐃⲆᐃ = function () {
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ();
      hf.waiting = false;
    };
    this.ᐃᐃΔⲆⵠⲆⵠ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⵠⲆᐃⲆ.ΔΔⵠΔⵠᐃⵠ(a[b]);
        }
      }
      Sw.ΔᐃᐃⵠΔ.ⵠᐃⵠᐃΔ(a[1], a[2], a[3], a[qa]);
    };
    this.message = function (a) {
      this.ⲆᐃⵠΔΔ(a);
    };
    this.ⵠΔⵠⵠᐃⲆᐃᐃⲆ = function () {
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠΔⵠⲆᐃⵠⵠ]);
      hf.waiting = ro;
    };
    this.ⵠⲆⵠᐃᐃⲆΔⵠⲆ = function () {
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ᐃⵠᐃⵠⵠᐃᐃ]);
      hf.waiting = Ag;
    };
    this.ⵠΔⵠⵠΔᐃⵠᐃΔ = function () {
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠᐃⲆᐃⵠⵠⲆ]);
      hf.waiting = false;
    };
    this.ᐃᐃⵠΔⲆⵠᐃⵠⲆ = function () {
      Sw.Δᐃⵠᐃ.ΔᐃⵠᐃⲆᐃⵠ(bt, 0);
      Uw.ⵠᐃⵠⵠᐃΔⲆ();
    };
    this.ⵠⵠⲆᐃᐃⲆΔⵠᐃ = function (a) {
      var b = a[bh];
      var c = uf.ⲆᐃΔΔ[b];
      c.ᐃᐃᐃⵠ = a[Ls];
      c.ⲆⲆⵠⲆⲆ = a[Jh];
      c.ᐃᐃᐃᐃⵠᐃⲆ = a[jo];
      c.ᐃⲆⲆΔΔ = a[fl];
      c.ᐃⲆΔᐃΔ = a[_n];
      c.ⵠΔᐃΔΔ = a[vh];
      c.level = a[8];
      var d = uf.ΔᐃᐃⲆⵠ[b * uf.ᐃΔᐃᐃᐃⵠΔ];
      if (d) {
        d.ᐃᐃᐃⵠ = a[nl];
        d.ⲆⲆⵠⲆⲆ = a[_g];
        d.ᐃᐃᐃᐃⵠᐃⲆ = a[4];
        d.ᐃⲆⲆΔΔ = a[Hl];
      }
    };
    this.ⲆᐃⵠΔΔⲆⲆⵠΔ = function (a) {
      if (a === ts.ⵠⵠᐃΔ) {
        Sw.Δᐃⵠᐃ.ΔᐃⵠᐃⲆᐃⵠ(1, ho);
        Uw.ⵠᐃⵠⵠᐃΔⲆ();
      } else {
        this.ΔⲆᐃⲆΔⵠΔ([Go, a, y]);
      }
      Sw.ⵠⲆⲆΔ.ΔΔⲆᐃΔⲆᐃ();
    };
    this.ΔΔⵠᐃΔΔΔⵠᐃ = function (a) {
      Sw.ΔⲆⵠⵠΔ.ΔⵠΔΔⵠ = Eu;
      Sw.ⵠⲆⲆΔ.ΔⵠⵠⵠⵠⲆⵠᐃᐃ(a);
    };
    this.ΔⲆΔⲆᐃΔⲆⲆⲆ = function (a) {
      for (var b = ht[a].r, c = Eu; c < b.length; c++) {
        if (Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length < Sw.Δᐃⵠᐃ.max || Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔⲆᐃⲆΔⵠΔ([0, b[c][Et], d]);
        }
      }
      Sw.ⵠⲆⲆΔ.ΔΔⲆᐃΔⲆᐃ();
    };
    this.ᐃⵠⵠΔⲆᐃⲆᐃᐃ = function (a) {
      Sw.ΔⲆⵠⵠΔ.ΔⵠΔΔⵠ = dt;
      Sw.ⵠⲆⲆΔ.ᐃᐃⲆⲆⵠⵠⲆⵠᐃ(a);
    };
    this.ⲆᐃⵠΔΔ = function (a) {
      if (Sw.alert.text) {
        if (Sw.alert.text !== a && Sw.alert.list[Sw.alert.list.length - 1] !== a) {
          Sw.alert.list.push(a);
        }
      } else {
        Sw.alert.text = a;
      }
    };
    this.ⲆⵠᐃΔᐃᐃᐃⲆΔ = function () {
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⲆⲆⵠⵠᐃⲆⵠ]);
    };
    this.ⲆᐃΔⵠⵠⵠᐃΔΔ = function () {
      var a;
      a = Sw.ⲆⲆⲆ == 0 ? xt[ⲆⲆΔΔ.ⵠⵠⲆⵠⵠᐃⲆ] : xt[ⲆⲆΔΔ.ⵠΔⲆⵠΔⲆΔ] + (Sw.ⲆⲆⲆ + 1) + xt[ⲆⲆΔΔ.ᐃΔΔΔΔᐃⵠ];
      this.ⲆᐃⵠΔΔ(a);
      Sw.ⲆⲆⲆ++;
    };
    this.ⲆᐃⲆⲆⵠⵠΔⲆⲆ = function () {
      clearTimeout(c.ᐃⲆⲆᐃⵠ);
      Sw.reconnect.enabled = false;
      Sw.ⵠⵠᐃⲆΔ = ol;
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⲆᐃⵠΔᐃᐃⲆ]);
      Uw.ⵠⲆᐃΔⲆ(hf.Δᐃᐃⵠᐃ);
      this.Δⵠⵠᐃ.close();
    };
    this.ΔⲆⵠᐃⵠⲆⲆᐃⵠ = function () {
      yf = 1;
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⲆᐃⵠΔⲆᐃⵠ]);
      hf.waiting = false;
    };
    this.ᐃⲆⲆΔⵠⲆⵠΔΔ = function () {
      yf = bq;
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠⵠΔᐃⲆⵠᐃ]);
      hf.waiting = false;
    };
    this.ΔΔᐃΔΔⲆΔᐃⲆ = function (a) {
      var b = a[bt];
      var c = uf.ⲆᐃΔΔ;
      c[b].ᐃᐃⵠⲆΔ = a[2];
      c[b].ᐃᐃᐃⵠ = a[3];
      c[b].ⲆⲆⵠⲆⲆ = a[4];
      c[b].ᐃᐃᐃᐃⵠᐃⲆ = a[5];
      c[b].ᐃⲆⲆΔΔ = a[dn];
      c[b].ᐃⲆΔᐃΔ = a[7];
      c[b].ⵠΔᐃΔΔ = a[lj];
      c[b].level = a[9];
      c[b].ΔΔⲆΔᐃ = fs;
      c[b].ⵠⲆⲆⲆΔᐃΔ = null;
      c[b].label = null;
      c[b].ΔⲆⵠⲆΔⵠⲆ = null;
      c[b].ⵠⵠᐃⲆΔ = xk;
      if (Wv === 1) {
        c[b].ᐃᐃⵠⲆΔ += "|" + b;
      }
    };
    this.ΔⵠⲆΔⲆᐃΔᐃᐃ = function () {
      this.Δⵠⵠᐃ[Vv](rq[Bq].stringify([32]));
    };
    this.ᐃⲆⲆΔⵠⲆⲆⵠⵠ = function () {
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.EMPTY]);
    };
    this.ⵠΔΔᐃⵠⵠᐃ = function () {
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ΔⵠᐃᐃⲆⵠΔ]);
    };
    this.ΔⲆΔΔⵠⵠΔΔⲆ = function (a) {
      this.Δⵠⵠᐃ[Vv](Nq[sa].stringify([14, a]));
      Sw.ⵠᐃⲆⲆⵠ.open = Zg;
    };
    this.ⲆⲆⵠΔᐃⵠᐃⲆΔ = function (a) {
      for (var b = aw[a - Zn].items, c = ks; c < b.length && Sw.Δᐃⵠᐃ.max > Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length; c++) {
        var d = b[c][kr];
        var e = b[c][Bs];
        if (ts.ⵠⵠᐃΔ === b[c][1]) {
          Sw.Δᐃⵠᐃ.ΔᐃⵠᐃⲆᐃⵠ(1, Xa);
        } else {
          this.ΔⲆᐃⲆΔⵠΔ([Xa, d, e]);
        }
      }
    };
    this.ΔⲆᐃⲆΔⵠΔ = function (b) {
      for (var c = b.length, d = Sw.Δᐃⵠᐃ, e = El; e < c; e += Og) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = Go; h < d.ⲆⵠⵠΔΔ.length; h++) {
          if (d.ⲆⵠⵠΔΔ[h].id == f) {
            d.ΔΔⵠⲆ[f] += g;
            break;
          }
        }
        if (d.ⲆⵠⵠΔΔ.length == h) {
          d.ΔΔⵠⲆ[f] = g;
          d.ⲆⵠⵠΔΔ.push(Uw.ⵠⵠᐃ[f]);
          Uw.ⵠᐃⵠⵠᐃΔⲆ();
        }
      }
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ⵠᐃⲆᐃ = function (b, c, d, e, f, g, h) {
      Sw.ⵠᐃⲆᐃ.Δⵠᐃᐃ = b / 100;
      Sw.ⵠᐃⲆᐃ.ᐃᐃⲆ = c / 100;
      Sw.ⵠᐃⲆᐃ.c = d / 100;
      Sw.ⵠᐃⲆᐃ.ⵠⲆⵠ = e / 100;
      Sw.ⵠᐃⲆᐃ.ᐃⵠᐃ = f / 100;
      Sw.ⵠᐃⲆᐃ.ᐃⵠᐃᐃⲆᐃⲆ = g / hi;
      Sw.ⵠⵠΔⲆΔ = h;
    };
    this.ᐃᐃΔⲆⲆⲆΔᐃΔ = function (a) {
      Uw.ᐃᐃΔΔ.modify(a, kg);
    };
    this.ⲆΔⲆⵠⲆᐃⲆⲆᐃ = function (a) {
      Uw.ᐃᐃΔΔ.modify(a, hk);
    };
    this.claimed = function (a) {
      Uw.ᐃᐃΔΔ.modify(a, 3);
    };
    this.ᐃⲆⲆᐃⲆΔⵠᐃΔ = function (a, b) {
      Sw.ⵠᐃⲆᐃ.Δⵠᐃᐃ = a / k;
      Sw.ⵠⵠΔⲆΔ = b;
    };
    this.ⵠΔⵠΔⵠⵠⲆⲆⵠ = function (a) {
      Sw.ⵠᐃⲆᐃ.ⵠⲆⵠ = a / 100;
    };
    this.ᐃᐃᐃⲆᐃⲆᐃⲆⵠ = function (a) {
      Sw.ⵠᐃⲆᐃ.ᐃᐃⲆ = a / 100;
    };
    this.ᐃᐃᐃⲆⲆⲆᐃΔᐃ = function (a) {
      Sw.ⵠᐃⲆᐃ.ᐃⵠᐃᐃⲆᐃⲆ = a / bl;
    };
    this.ⲆⲆᐃᐃⵠΔⲆⲆΔ = function (a) {
      Sw.ⵠᐃⲆᐃ.c = a / 100;
    };
    this.ΔⵠⵠⵠΔⲆⲆᐃΔ = function (a) {
      uf.time = a;
      uf.transition = true;
      Vw.transition = 1;
    };
    this.ⲆⵠⲆᐃΔΔΔᐃⲆ = function () {
      document.getElementById("game_body").style.backgroundColor = rs.ⲆᐃᐃᐃⲆ[uf.time];
    };
    this.ᐃⵠΔᐃⵠᐃΔᐃⲆ = function (a) {
      if (uf.mode == fw.ᐃΔΔⵠᐃⵠⲆ && uf.ⲆᐃΔΔ[a].ᐃᐃⵠⲆΔ !== "spectator") {
        this.ⲆᐃⵠΔΔ(uf.ⲆᐃΔΔ[a].ᐃᐃⵠⲆΔ + xt[ⲆⲆΔΔ.ⲆⲆΔⵠᐃΔᐃ]);
      }
      uf.ⲆᐃΔΔ[a].ⵠⵠᐃⲆΔ = false;
    };
    this.ᐃⵠΔⵠⲆᐃΔΔΔ = function (a) {
      var b = new Uint16Array(a);
      ᐃᐃΔⲆ.ᐃΔΔⵠ.ⵠⲆⵠΔⲆ(b[$q], b[ab]);
    };
    this.ΔⲆⲆⵠΔᐃᐃⲆΔ = function (a) {
      if (!Spectator) {
        var b = new Uint16Array(a);
        Sw.ᐃΔΔⵠ.ⵠⲆⵠΔⲆ(b[1], b[2]);
      }
    };
    this.ᐃΔᐃΔᐃⲆⲆΔΔ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / Ol, f = 0; f < e; f++) {
        var g = d[1 + nq * f];
        var i = b[qa + Yr * f];
        var j = nl * (Math.PI * ((b[Rh + qa * f] >> 1) / 127));
        var k = uf.ΔᐃᐃⲆⵠ[i * uf.ᐃΔᐃᐃᐃⵠΔ + g];
        if (k && k.Ⲇⵠᐃⵠ) {
          if (Vw.loaded && Vw.Δᐃᐃⵠᐃ) {
            Vw.Ⲇⵠᐃⵠ(b[Jb + f * 4] & 1, ᐃᐃⲆⵠᐃ[k.type], k.x, k.y);
          }
          k.Ⲇⵠᐃⵠ.angle = j;
          k.Ⲇⵠᐃⵠ.ᐃᐃᐃ = j;
        }
      }
    };
    this.ᐃⵠⲆᐃⲆⵠⵠᐃᐃ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = lt; d > e; e++) {
        var f;
        var h = e * 4;
        var i = c[Ws + h];
        var j = c[2 + h];
        var k = (c[Ds + h] >> or) / 127 * Math.PI * 2;
        var m = c[4 + h];
        var p = Qw.ᐃⲆⵠⲆ[j][i];
        switch (m) {
          case 0:
            (f = p.p[hk][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case Ws:
            (f = p.s[0][vl]).angle = k;
            f.ᐃᐃᐃ = fa;
            break;
          case yl:
            (f = p.s[Dj][Xa]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case Oj:
            (f = p.s[Ts][Xa]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 4:
            (f = p.t[0][Go]).angle = k;
            f.ᐃᐃᐃ = is;
            break;
          case hg:
            (f = p.t[ck][Bs]).angle = k;
            f.ᐃᐃᐃ = qs;
            break;
          case 6:
            (f = p.t[dj][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case nj:
            (f = p.t[Ui][hk]).angle = k;
            f.ᐃᐃᐃ = is;
            break;
          case 8:
            (f = p.t[Qa][0]).angle = k;
            f.ᐃᐃᐃ = xk;
            break;
          case 9:
            (f = p.t[5][0]).angle = k;
            f.ᐃᐃᐃ = Gh;
            break;
          case 10:
            (f = p.g[Go][vl]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 11:
            (f = p.g[1][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case Fh:
            (f = p.g[2][Xa]).angle = k;
            f.ᐃᐃᐃ = Wl;
            break;
          case Ug:
            (f = p.d[jg][0]).angle = k;
            f.ᐃᐃᐃ = de;
            break;
          case ql:
            (f = p.d[bq][dh]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 15:
            (f = p.d[uj][Yl]).angle = k;
            f.ᐃᐃᐃ = Mj;
            break;
          case Oa:
            (f = p.b[0][vl]).angle = k;
            f.ᐃᐃᐃ = gn;
            break;
          case gl:
            (f = p.b[1][0]).angle = k;
            f.ᐃᐃᐃ = xk;
            break;
          case Mk:
            (f = p.b[Pn][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 19:
            (f = p.b[Ds][lt]).angle = k;
            f.ᐃᐃᐃ = tk;
            break;
          case 20:
            (f = p.f[0][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 21:
            (f = p.f[bt][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 22:
            (f = p.f[Sa][0]).angle = k;
            f.ᐃᐃᐃ = Gh;
            break;
          case 23:
            (f = p.sw[Yl][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 24:
            (f = p.sw[1][Et]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 25:
            (f = p.sw[2][Yl]).angle = k;
            f.ᐃᐃᐃ = xk;
            break;
          case 26:
            (f = p.gw[0][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 27:
            (f = p.gw[Ng][0]).angle = k;
            f.ᐃᐃᐃ = fa;
            break;
          case 28:
            (f = p.gw[Ir][Yl]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 29:
            (f = p.dw[0][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 30:
            (f = p.dw[1][Yl]).angle = k;
            f.ᐃᐃᐃ = Pl;
            break;
          case 31:
            (f = p.dw[Pn][hk]).angle = k;
            f.ᐃᐃᐃ = qs;
            break;
          case 32:
            (f = p.a[jg][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 33:
            (f = p.a[Ng][0]).angle = k;
            f.ᐃᐃᐃ = La;
            break;
          case 34:
            (f = p.a[2][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 35:
            (f = p.cs[0][ks]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 36:
            (f = p.cs[Dj][Hb]).angle = k;
            f.ᐃᐃᐃ = Wl;
            break;
          case 37:
            (f = p.cs[kg][0]).angle = k;
            f.ᐃᐃᐃ = qs;
            break;
          case 38:
            (f = p.cs[R][Yl]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 40:
            (f = p.plm[vl][Hb]).angle = k;
            f.ᐃᐃᐃ = qs;
            break;
          case 41:
            (f = p.plm[uq][lt]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 42:
            (f = p.plm[2][0]).angle = k;
            f.ᐃᐃᐃ = gn;
            break;
          case 50:
            (f = p.re[0][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 51:
            (f = p.re[1][0]).angle = k;
            f.ᐃᐃᐃ = xk;
            break;
          case 52:
            (f = p.re[2][Hb]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 55:
            (f = p.c[ho][0]).angle = k;
            f.ᐃᐃᐃ = true;
            break;
          case 56:
            (f = p.m[hk][0]).angle = k;
            f.ᐃᐃᐃ = Mg;
            break;
          case 57:
            (f = p.m[y][0]).angle = k;
            f.ᐃᐃᐃ = ia;
            break;
          case 58:
            (f = p.m[pn][0]).angle = k;
            f.ᐃᐃᐃ = true;
        }
        if (Vw.loaded && Vw.Δᐃᐃⵠᐃ && f) {
          Vw.Ⲇⵠᐃⵠ(c[3 + h] & Zk, Δᐃᐃⵠ[m], f.x, f.y);
        }
      }
    };
    this.ᐃⲆᐃΔⲆ = function () {
      this.Δⵠⵠᐃ[Vv](Eq[vq].stringify([36, Sw.ᐃⲆᐃΔⲆ.ⵠⵠⲆΔ, Sw.ᐃⲆᐃΔⲆ.ⲆΔⵠᐃΔ]));
    };
    this.ⵠⲆᐃⲆⲆⲆⲆⲆⲆ = function (a, b) {
      this.Δⵠⵠᐃ[Vv](Eq[Xq].stringify([30, b, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ⲆᐃΔⲆⵠᐃᐃ = function (a, b, c) {
      if (b) {
        this.Δⵠⵠᐃ[Vv](Eq[Xq].stringify([29, b, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
      } else {
        this.Δⵠⵠᐃ[Vv](Eq[Cq].stringify([31, c, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
      }
    };
    this.ⵠΔᐃⵠⲆⲆⵠⵠⲆ = function (a) {
      this.Δⵠⵠᐃ[Vv](ir[gr].stringify([28, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ⲆᐃⵠΔᐃᐃⲆΔⵠ = function (a) {
      this.Δⵠⵠᐃ[Vv](ir[ca].stringify([Zk, a]));
    };
    this.ΔΔⲆᐃᐃⲆⵠΔᐃ = function (a) {
      this.Δⵠⵠᐃ[Vv](hr[vq].stringify([Sq, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ⵠⵠᐃⵠΔⵠⵠᐃΔ = function (a, b) {
      this.Δⵠⵠᐃ[Vv](Nq[gr].stringify([37, b, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ, a.type]));
    };
    this.ⲆΔᐃΔⲆⲆⲆⵠⲆ = function (a, b) {
      this.Δⵠⵠᐃ[Vv](Nq[gr].stringify([11, b, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ⲆΔΔΔⲆⵠΔⵠⲆ = function (a, b, c) {
      this.Δⵠⵠᐃ[Vv](hr[Xq].stringify([34, b, c, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ᐃⲆⵠᐃΔⲆΔ = function (a) {
      this.Δⵠⵠᐃ[Vv](ir[gr].stringify([yr, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ, a.type]));
    };
    this.ⵠᐃⵠΔΔⲆⵠΔⵠ = function (a) {
      this.Δⵠⵠᐃ[Vv](ir[gr].stringify([15, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ᐃᐃⲆᐃⲆΔᐃᐃⲆ = function (a) {
      this.Δⵠⵠᐃ[Vv](ir[gr].stringify([24, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ΔᐃⲆⵠⵠᐃΔᐃⲆ = function (a) {
      this.Δⵠⵠᐃ[Vv](ra[ta].stringify([17, a.ⵠⵠⲆΔ, a.ⲆΔⵠᐃΔ]));
    };
    this.ᐃⲆⲆⵠⲆⵠᐃⵠⲆ = function (a) {
      this.Δⵠⵠᐃ[Vv](pr[sa].stringify([Bs, a.ⲆΔⵠᐃΔ]));
    };
    this.ⵠΔⵠᐃⵠᐃⵠ = function (a) {
      c.Δⵠⵠᐃ[Vv](Ca[ca].stringify([33, Sw.ⲆⲆⲆᐃΔ.id, Sw.ᐃᐃⵠᐃᐃ[a]]));
    };
    this.ⵠⵠΔΔⵠⲆΔᐃⵠ = function () {
      c.Δⵠⵠᐃ[Vv](ur[xa].stringify([35, Sw.ⲆⲆⲆᐃΔ.ⵠⵠⲆΔ, Sw.ⲆⲆⲆᐃΔ.id]));
    };
    this.ⲆΔΔⵠᐃΔᐃ = function () {
      c.Δⵠⵠᐃ[Vv](vr[Da].stringify([23]));
    };
    this.ᐃΔΔⵠⵠᐃⵠΔⲆ = function () {
      c.Δⵠⵠᐃ[Vv](vr[ca].stringify([21, Sw.ⲆⲆⲆᐃΔ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Sw.ⲆⲆⲆᐃΔ.lock = El;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Sw.ⲆⲆⲆᐃΔ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ΔⵠⲆ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        uf.ⲆΔⲆΔⵠⵠᐃᐃᐃ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = Ts + o * 18;
        var t = or + ln * o;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = uf.ᐃΔᐃᐃᐃⵠΔ * w + y;
        if (x & _v.ᐃⵠⵠᐃⲆⲆᐃᐃᐃ) {
          uf.ⲆⵠⲆᐃⵠⵠΔᐃᐃ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + rt];
          var F = k[t + at];
          var G = k[t + 8];
          var H = e[q + 1] / 255 * Math.PI * Ts;
          if (uf.ΔᐃᐃⲆⵠ[z]) {
            var I = uf.ΔᐃᐃⲆⵠ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && bw.ᐃⵠⵠᐃΔΔᐃⲆⵠ < ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(I, I.r)) {
              I.x = B;
              I.y = D;
            }
            if (I.id !== Sw.id || w === 0) {
              I.ⲆΔⲆᐃⵠⵠⵠ = H;
            }
            I.action |= x;
            I.info = E;
            I.ΔΔⲆⲆⵠ = F;
            I.ⲆΔⲆᐃⵠ = G;
            if (I.ᐃᐃᐃ) {
              I.ᐃᐃᐃ(x);
            }
          } else {
            var J = new pw(A, w, y, B, D, H, x, E, F, G);
            uf.ΔᐃᐃⲆⵠ[z] = J;
            uf.ΔⵠⲆ[A].push(J);
          }
        }
      }
    };
    this.ᐃⵠΔᐃⲆ = function (a) {
      this.ⲆⲆᐃⵠⵠⲆⲆ = Ww;
      var b = new Uint16Array(a);
      Sw.ΔⲆⲆⵠᐃ.ⲆΔΔⵠΔ(b);
    };
    this.ᐃᐃΔᐃᐃᐃⲆⵠᐃ = function (a) {
      if (ft !== Sn) {
        ht = ft;
      }
      if (a.length > 0) {
        ft = JSON.parse(JSON.stringify(ht));
        for (var b = ou; a.length > b; b++) {
          var c = a[b];
          var d = ht[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ᐃⵠᐃ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⲆⲆⲆⲆΔⵠⵠ = function (a) {
      if (a && Et !== a.length) {
        Sw.ⲆⲆⲆⲆΔⵠⵠ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -vg;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          Ⲇⵠ = [];
          var f = D;
          var g = b.length * (f + Eg) + 10;
          var h = vl;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(ou) === "#") {
              Ⲇⵠ[i] = b[i].substring(ks, lo);
              b[i] = b[i].substring(8);
            } else {
              Ⲇⵠ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = Hb;
          for (; b.length > i; i++) {
            var j = uu(kr, b[i], f, Ⲇⵠ[i], null, null, null, null, null, "#000", 6);
            d.drawImage(j, yg, i * (f + 4) + as);
          }
          return c;
        }(a);
      } else {
        Sw.ⲆⲆⲆⲆΔⵠⵠ.message = undefined;
      }
    };
    this.ⵠⲆⵠⵠⲆ = function (a) {
      var b = uf.ΔᐃᐃⲆⵠ[a[1] * uf.ᐃΔᐃᐃᐃⵠΔ];
      if (b) {
        if (fw.ⵠⵠᐃΔⲆ === uf.mode && b.ᐃᐃᐃⵠ === fw.ᐃᐃΔᐃᐃⲆⵠ) {
          if (Sw.ⵠⲆΔᐃⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[nl] + " ..." + ᐃᐃᐃᐃΔ);
            } else {
              b.text.push(ᐃᐃᐃᐃΔ + "... " + a[kg]);
            }
          } else {
            b.text.push(ᐃⲆⲆⵠⵠⲆΔ[Math.floor(Math.random() * ᐃⲆⲆⵠⵠⲆΔ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⵠⵠⲆⵠⵠⲆΔΔᐃ = function (a) {
      if (Sw.Δᐃⵠᐃ.max !== Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ.length || ht[a].ΔⲆΔΔ === ts.ⵠⵠᐃΔ || Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(ht[a].ΔⲆΔΔ) != -1 || Sw.Δᐃⵠᐃ.ᐃᐃⵠᐃΔⲆⵠⲆⵠ(ht[a].r)) {
        this.Δⵠⵠᐃ[Vv](rq[Bq].stringify([5, a]));
        return 1;
      } else {
        this.ⵠΔΔᐃⵠⵠᐃ();
        return Eu;
      }
    };
    this.ⵠⲆⵠⲆⲆ = function (a) {
      Sw.ⵠⲆⲆΔ.ⵠⲆᐃᐃᐃⲆᐃᐃᐃ(a);
    };
    this.Δᐃᐃᐃᐃ = function (a) {
      Sw.ⵠⲆⲆΔ.Δᐃᐃᐃᐃ = a;
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ⵠⲆᐃΔⵠ = function (a) {
      Sw.ⵠⲆⲆΔ.ⵠⲆᐃΔⵠ = a;
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ᐃⵠⲆⵠⲆⲆⵠ = function (a) {
      Sw.ⵠⲆⲆΔ.ᐃⵠⲆⵠⲆⲆⵠ = a;
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ᐃᐃᐃᐃΔᐃⲆᐃΔ = function (a) {
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ΔΔᐃⵠΔⵠΔ]);
    };
    this.ᐃⲆⵠⵠᐃⵠΔΔⵠ = function () {
      Sw.ⵠⲆⲆΔ.ΔΔⲆᐃΔⲆᐃ();
    };
    this.ⲆⲆⵠΔⲆ = function (a) {
      Uw.ⲆⲆⵠΔⲆ.ⲆᐃΔΔ = [];
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      var c = 0;
      for (var d = 1; a.length > d; d += 2) {
        var e = {
          x: Math.floor(a[d] * uf.w / 250),
          y: Math.floor(a[d + 1] * uf.ᐃᐃⲆ / 250)
        };
        if (b && !c && !Sw.ᐃᐃⵠΔⵠⲆΔ && ⵠⲆᐃⲆ.ᐃⵠᐃᐃ(e, b) < 250) {
          c += uq;
        } else {
          Uw.ⲆⲆⵠΔⲆ.ⲆᐃΔΔ.push(e);
        }
      }
    };
    this.ᐃⲆⵠΔᐃΔᐃⵠΔ = function () {
      Sw.ᐃⲆᐃΔⲆ.open = ro;
      Sw.ΔᐃΔᐃᐃ.enabled = Ag;
      Sw.ΔᐃΔᐃᐃ.ΔⵠΔΔⵠ = -1;
      Sw.ΔᐃΔᐃᐃ.label = null;
      Sw.ΔᐃΔᐃᐃ.ᐃΔΔΔⵠⵠⵠ = null;
      Sw.ΔᐃΔᐃᐃ.now = -1;
    };
    this.ΔᐃΔᐃᐃ = function (a) {
      fw.ᐃΔⲆᐃᐃⵠⵠ = a;
      Sw.ΔᐃΔᐃᐃ.enabled = true;
      Sw.ΔᐃΔᐃᐃ.ΔⵠΔΔⵠ = new Date().getTime();
      Sw.ΔᐃΔᐃᐃ.label = null;
      Sw.ΔᐃΔᐃᐃ.now = -y;
      for (var b = [ts.ᐃᐃⵠⵠᐃ, ts.ΔⵠᐃⵠΔ, ts.ⵠⵠⲆⲆⲆ, ts.ⲆⲆΔᐃⵠ, ts.ⲆᐃΔⵠⵠ, ts.ΔᐃⵠΔⲆ, ts.ⵠΔⲆⵠⲆ, ts.ⲆΔⵠⵠⵠ, ts.ᐃⵠⵠⲆᐃ, ts.ΔⵠⲆⵠᐃ, ts.ᐃⲆΔⵠⵠ, ts.ⲆΔᐃⵠᐃ, ts.ⲆⲆᐃᐃⵠ, ts.ΔⲆⵠΔᐃ, ts.ⲆΔΔΔᐃ, ts.ΔⲆⲆΔⵠ, ts.ᐃᐃⲆᐃⲆ, ts.ᐃⵠⲆᐃⲆ, ts.ΔⵠⲆΔᐃ, ts.ⵠΔᐃⲆᐃ, ts.ⵠΔⵠᐃΔ, ts.ᐃΔᐃᐃⲆ, ts.Δᐃⵠⵠᐃ, ts.ᐃΔⵠΔⲆ, ts.ΔⲆⵠᐃᐃ, ts.ⵠᐃΔⲆⵠ, ts.ΔⵠΔᐃᐃ, ts.ΔⲆⵠᐃⲆ, ts.ⲆΔᐃⲆⵠ, ts.ΔᐃⵠⵠΔ, ts.ⲆᐃᐃⲆΔ, ts.ΔⲆᐃⵠⲆ, ts.ⲆⲆᐃᐃⲆ, ts.ΔⵠᐃⲆⲆ, ts.ⵠⲆᐃⲆⵠ, ts.ΔᐃᐃΔᐃ, ts.ΔⵠΔⵠⲆ, ts.ᐃᐃⵠᐃΔ, ts.ⵠᐃᐃᐃΔ, ts.ΔⲆᐃᐃⲆ, ts.ᐃΔᐃⵠᐃ, ts.ⲆⵠΔⵠΔ, ts.ⵠᐃΔΔᐃ, ts.ᐃⵠⵠΔΔ, ts.ᐃᐃΔΔⵠ, ts.ΔᐃΔᐃΔ, ts.ΔΔᐃⵠΔ, ts.ᐃⲆΔⲆΔ, ts.ⵠᐃⵠⲆΔ, ts.ⲆⵠⵠᐃΔ], c = Et; b.length > c; c++) {
        var d = Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(b[c]);
        if (d != -1) {
          Sw.Δᐃⵠᐃ.ᐃΔⵠⵠⲆⵠΔ(b.length[c], d);
        }
      }
      Sw.ⵠⲆⲆΔ.ΔΔⲆᐃΔⲆᐃ();
    };
    this.ΔⵠⲆⲆⲆⵠⲆⵠᐃ = function (a, b, c) {
      this.ⵠⲆⵠⵠΔⲆΔ(a, b * 256 + c);
    };
    this.ⵠⲆⵠⵠΔⲆΔ = function (a, b) {
      Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -1;
      Sw.Δᐃⵠᐃ.ΔⵠⲆᐃⵠΔⵠ(a, b, Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(a));
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ᐃⲆᐃΔᐃⲆⲆΔⲆ = function (a) {
      Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -1;
      Sw.ΔⲆⵠⲆΔ.wait = true;
      var b = Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(a);
      Sw.Δᐃⵠᐃ.ΔⵠⲆᐃⵠΔⵠ(a, 1, b);
      if (Eu <= b && !Sw.Δᐃⵠᐃ.ΔΔⵠⲆ[a]) {
        Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
      }
      if (ts.ⲆⲆⲆⲆⲆ == a) {
        Sw.ᐃᐃⵠᐃᐃ = [Sw.id];
      }
    };
    this.ⵠᐃᐃⲆᐃⲆⲆⲆᐃ = function () {
      this.Δⵠⵠᐃ[Vv](Eq[vq].stringify([2]));
    };
    this.ⲆⵠᐃΔⵠⵠΔΔᐃ = function (a) {
      this.Δⵠⵠᐃ[Vv](Nq[Cq].stringify([22, a.ⵠⲆⲆᐃᐃ, a.id]));
    };
    this.ⵠⵠⲆΔΔⲆⵠᐃᐃ = function (a, b) {
      this.Δⵠⵠᐃ[Vv](Nq[gr].stringify([te, a, b]));
    };
    this.ⵠⵠᐃⲆⵠⵠΔⵠΔ = function () {
      var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      if (a) {
        var b = Math.PI * 2;
        this.Δⵠⵠᐃ[Vv](Nq[Cq].stringify([Ih, Sw.ⵠⲆⲆΔ.ΔΔΔΔ, Math.floor(Qn * ((a.angle + b) % b) / b), Sw.ⵠⲆⲆΔ.mode]));
      }
    };
    this.ᐃᐃΔⲆⲆ = function (a, b) {
      switch (a) {
        case ts.ⵠⲆΔⲆⲆ:
        case ts.ⲆⲆⵠᐃᐃ:
        case ts.ⲆΔⲆᐃᐃ:
        case ts.ⵠⵠⵠⵠᐃ:
        case ts.Ⲇⵠᐃᐃⵠ:
        case ts.ⵠⵠⲆΔⲆ:
        case ts.ᐃⵠΔᐃΔ:
        case ts.ᐃⲆⲆⵠΔ:
        case ts.ⲆⲆΔΔᐃ:
        case ts.ⲆⲆⲆⵠⲆ:
        case ts.ᐃⵠᐃΔΔ:
        case ts.ᐃΔⵠᐃⵠ:
        case ts.ⵠⵠᐃⵠⲆ:
        case ts.ᐃⲆⵠⲆΔ:
        case ts.ⲆΔᐃΔᐃ:
        case ts.ᐃΔⵠⵠᐃ:
        case ts.ⵠⲆⲆᐃΔ:
        case ts.ⵠᐃⲆⲆⲆ:
        case ts.ᐃⵠⵠΔⵠ:
        case ts.ⵠΔᐃⵠⲆ:
        case ts.ᐃⲆⵠΔⵠ:
        case ts.ᐃΔⲆⵠᐃ:
        case ts.ΔⲆᐃⵠΔ:
          Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -or;
          this.Δⵠⵠᐃ[Vv](hr[Xq].stringify([25, a]));
          break;
        case ts.ΔᐃⵠΔᐃ:
        case ts.ⲆΔΔᐃⲆ:
        case ts.ⵠΔⵠⲆΔ:
        case ts.ΔᐃΔⲆⲆ:
        case ts.ΔΔΔⵠΔ:
        case ts.ᐃᐃᐃⲆⲆ:
        case ts.ᐃΔⲆⵠⲆ:
        case ts.ⵠⵠⲆΔⵠ:
        case ts.ΔΔΔᐃⲆ:
        case ts.ⵠᐃⲆⵠⵠ:
        case ts.ⵠⵠᐃⲆᐃ:
        case ts.ᐃⲆΔⲆⵠ:
        case ts.ⵠⵠⵠⵠⵠ:
        case ts.ΔᐃᐃⲆᐃ:
        case ts.ⵠΔᐃⵠᐃ:
        case ts.ᐃΔΔΔⲆ:
        case ts.ΔⲆΔⵠΔ:
        case ts.ⵠⲆⲆⲆΔ:
        case ts.ⲆΔᐃⲆᐃ:
        case ts.ᐃΔⵠΔⵠ:
        case ts.ᐃⲆⵠᐃⲆ:
        case ts.ᐃᐃᐃΔⵠ:
        case ts.ᐃⲆΔᐃᐃ:
        case ts.ΔΔΔⵠⵠ:
        case ts.ⵠⵠΔΔΔ:
        case ts.ΔᐃΔⵠⵠ:
        case ts.ᐃΔᐃᐃⵠ:
        case ts.ⲆΔᐃᐃΔ:
        case ts.ⲆΔᐃⲆⲆ:
        case ts.Δᐃⵠᐃᐃ:
        case ts.ᐃⲆΔᐃⵠ:
        case ts.ⲆᐃⵠⵠΔ:
        case ts.ⵠᐃⲆᐃᐃ:
        case ts.ᐃΔⵠᐃᐃ:
        case ts.ⲆⵠⵠⵠΔ:
        case ts.ⲆΔΔΔΔ:
        case ts.ⲆᐃΔΔΔ:
        case ts.ⲆᐃⲆᐃⲆ:
        case ts.ΔΔΔⲆⵠ:
        case ts.ΔᐃⵠⲆⲆ:
        case ts.ⲆⲆΔΔΔ:
        case ts.ⵠΔᐃΔᐃ:
        case ts.ⲆⵠΔᐃΔ:
        case ts.ⵠᐃΔⵠΔ:
        case ts.ⲆᐃΔᐃⲆ:
        case ts.ⵠΔⲆⵠΔ:
        case ts.ⲆⲆⵠΔⵠ:
        case ts.ⵠⵠⵠⵠⲆ:
        case ts.ᐃᐃᐃΔᐃ:
        case ts.ⵠΔⵠⵠⲆ:
        case ts.ᐃᐃᐃⵠΔ:
        case ts.ⲆⵠⲆⵠᐃ:
        case ts.ⲆⵠⲆΔⵠ:
        case ts.ΔⵠⵠΔⵠ:
        case ts.ⲆⲆⲆⲆⲆ:
        case ts.ᐃΔᐃᐃᐃ:
          if (!Sw.ⵠⲆΔᐃⲆ) {
            if (a === Sw.ⵠⲆⲆΔ.ΔΔΔΔ) {
              Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -bt;
            } else {
              Sw.ⵠⲆⲆΔ.ΔΔΔΔ = a;
            }
          }
          break;
        case ts.ⲆⲆΔᐃⵠ:
        case ts.ⵠⵠⲆⲆⲆ:
        case ts.ⲆᐃΔⵠⵠ:
        case ts.ΔᐃⵠΔⲆ:
        case ts.ⵠΔⲆⵠⲆ:
        case ts.ⲆΔⵠⵠⵠ:
        case ts.ᐃⲆΔⵠⵠ:
        case ts.ᐃⵠⵠⲆᐃ:
        case ts.ΔⵠⲆⵠᐃ:
        case ts.ΔⵠΔᐃᐃ:
        case ts.ΔⲆⵠᐃⲆ:
        case ts.ⲆΔᐃⲆⵠ:
        case ts.ΔᐃⵠⵠΔ:
        case ts.ⲆᐃᐃⲆΔ:
        case ts.ΔⲆᐃⵠⲆ:
        case ts.ⲆⲆᐃᐃⲆ:
        case ts.ΔⲆᐃᐃⲆ:
        case ts.ᐃΔᐃⵠᐃ:
        case ts.ⲆⲆᐃᐃⵠ:
        case ts.ⲆΔᐃⵠᐃ:
        case ts.ΔⲆⵠΔᐃ:
        case ts.ⲆΔΔΔᐃ:
        case ts.ΔⲆⲆΔⵠ:
        case ts.ᐃΔᐃᐃⵠⲆⲆⲆΔ:
        case ts.ᐃⵠⲆᐃⲆ:
        case ts.ΔⵠⲆΔᐃ:
        case ts.ᐃᐃⲆᐃⲆ:
        case ts.ⵠΔᐃⲆᐃ:
        case ts.ⵠΔⵠᐃΔ:
        case ts.ᐃΔᐃᐃⲆ:
        case ts.Δᐃⵠⵠᐃ:
        case ts.ᐃΔⵠΔⲆ:
        case ts.ΔⲆⵠᐃᐃ:
        case ts.ⵠᐃΔⲆⵠ:
          if (!Sw.ⵠⲆΔᐃⲆ) {
            Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -$q;
            if ((c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ]) && c.right === a) {
              this.Δⵠⵠᐃ[Vv](ir[gr].stringify([25, ts.ⵠⵠᐃᐃᐃ]));
            } else {
              Sw.ⲆᐃΔⲆⵠ.wait = eo;
              this.Δⵠⵠᐃ[Vv](ra[ta].stringify([25, a]));
            }
          }
          break;
        case ts.ⵠᐃΔΔᐃ:
        case ts.ⲆⵠΔⵠΔ:
        case ts.ᐃⵠⵠΔΔ:
        case ts.ᐃᐃΔΔⵠ:
        case ts.ᐃⵠⵠᐃⵠ:
        case ts.ⲆⵠΔΔⲆ:
        case ts.ⲆΔᐃⵠⵠ:
        case ts.ᐃᐃⵠⵠⲆ:
        case ts.ᐃᐃΔⵠΔ:
        case ts.ᐃΔᐃⲆᐃ:
        case ts.ΔᐃΔᐃΔ:
        case ts.ΔΔᐃⵠΔ:
        case ts.ᐃᐃⵠⵠᐃ:
        case ts.ΔⲆᐃΔΔ:
        case ts.ΔⵠⲆᐃⵠ:
        case ts.ΔⵠⲆⵠⵠ:
        case ts.ⲆΔⵠᐃⲆ:
        case ts.ᐃⲆΔⲆΔ:
        case ts.ⵠⲆΔᐃΔ:
        case ts.ⵠᐃⵠⲆΔ:
        case ts.ⲆⵠⵠᐃΔ:
        case ts.ⲆᐃⵠΔⲆ:
        case ts.ⵠⲆⲆⲆᐃ:
        case ts.ΔⵠᐃⲆⲆ:
        case ts.ⵠⲆᐃⲆⵠ:
        case ts.ΔᐃᐃΔᐃ:
        case ts.ΔⵠΔⵠⲆ:
        case ts.ᐃᐃⵠᐃΔ:
        case ts.ⵠᐃᐃᐃΔ:
          if (!Sw.ⵠⲆΔᐃⲆ) {
            Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -1;
            if ((c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ]) && a === c.right) {
              this.Δⵠⵠᐃ[Vv](pr[sa].stringify([25, ts.ⵠⵠᐃᐃᐃ]));
            } else {
              this.Δⵠⵠᐃ[Vv](Ca[ca].stringify([25, a]));
            }
          }
          break;
        case ts.ΔⵠⲆⲆⵠ:
        case ts.ᐃΔⵠⵠⵠ:
        case ts.ΔⵠᐃΔⵠ:
        case ts.ᐃⲆᐃⵠᐃ:
        case ts.ᐃⲆᐃⲆⲆ:
        case ts.ⲆⲆⲆᐃⲆ:
        case ts.ΔᐃⵠΔⵠ:
        case ts.ⵠⲆⵠΔⵠ:
        case ts.ᐃⲆΔⵠᐃ:
        case ts.ΔᐃⲆⵠⵠ:
          if (!Sw.ⵠⲆΔᐃⲆ) {
            Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -1;
            var c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
            this.Δⵠⵠᐃ[Vv](Ca[ca].stringify([25, a]));
          }
          break;
        case ts.ⲆⲆΔⵠⲆ:
        case ts.ΔⲆⵠΔⲆ:
        case ts.ⵠⲆᐃⵠⵠ:
        case ts.ⲆⲆᐃⲆΔ:
        case ts.ΔⵠΔᐃΔ:
        case ts.ⵠⲆⵠⵠᐃ:
        case ts.Ⲇᐃᐃᐃⵠ:
        case ts.ᐃⵠⲆΔⵠ:
        case ts.ⲆΔⲆΔᐃ:
        case ts.ⵠᐃⵠⲆⲆ:
        case ts.ΔΔᐃⲆᐃ:
        case ts.ⵠⲆⵠⵠⵠ:
        case ts.ⵠⵠᐃᐃⲆ:
        case ts.ⲆᐃΔⵠⲆ:
        case ts.ΔΔⵠᐃᐃ:
        case ts.ⵠΔᐃΔⲆ:
        case ts.ᐃⵠⲆⲆⲆ:
          if ((c = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ]) && a !== c.ⲆⲆⲆⲆⵠ) {
            Sw.ᐃΔΔⵠⲆ.wait = true;
          }
          this.Δⵠⵠᐃ[Vv](hr[gr].stringify([25, a]));
          break;
        case ts.ⵠⲆⲆΔⵠ:
        case ts.Ⲇᐃⵠᐃᐃ:
        case ts.ΔΔⲆⵠⲆ:
        case ts.ⵠΔΔⵠⵠ:
        case ts.ΔΔⵠⵠⲆ:
        case ts.ⵠΔⲆᐃⲆ:
        case ts.ᐃⲆⵠⵠⲆ:
        case ts.ΔΔΔᐃᐃ:
        case ts.ⵠᐃᐃΔⵠ:
        case ts.ΔΔᐃⲆⲆ:
        case ts.ⵠΔΔΔᐃ:
        case ts.ⵠᐃΔΔⵠ:
        case ts.ⵠⲆᐃⵠⲆ:
        case ts.ⵠⲆⲆⵠⲆ:
        case ts.ΔⲆⲆⲆⲆ:
        case ts.ᐃⲆⲆΔⲆ:
          this.Δⵠⵠᐃ[Vv](ur[xa].stringify([25, a]));
      }
    };
    this.ΔⲆⲆᐃⵠΔⲆΔΔ = function (a) {
      this.Δⵠⵠᐃ[Vv](Nq[Bq].stringify([nj, a]));
    };
    this.ⲆΔᐃⵠⲆᐃⲆᐃⲆ = function (a) {
      Sw.ΔⲆⵠⲆΔ.wait = yq;
      var b = Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(a);
      Sw.Δᐃⵠᐃ.ᐃΔⵠⵠⲆⵠΔ(a, b);
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ᐃⲆⲆΔⵠⲆᐃΔⲆ = function (a, b) {
      this.Δⵠⵠᐃ[Vv](rq[sa].stringify([20, a]));
    };
    this.ⵠⵠᐃᐃΔΔⲆⵠΔ = function (a, b) {
      this.Δⵠⵠᐃ[Vv](Eq[vq].stringify([Rg, a]));
    };
    this.ⵠⵠⲆⵠⵠᐃⲆⲆΔ = function (a) {
      Sw.ΔⲆⵠⲆΔ.wait = true;
      var b = Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(a);
      Sw.Δᐃⵠᐃ.ΔⵠⲆᐃⵠΔⵠ(a, ck, b);
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ΔⵠⲆΔⲆᐃⲆⲆⵠ = function (a) {
      var b = a[1];
      var c = a[nq];
      Sw.ΔⲆⵠⲆΔ.wait = true;
      var d = Sw.Δᐃⵠᐃ.ᐃΔᐃⵠⲆ(b);
      Sw.Δᐃⵠᐃ.ΔⵠⲆᐃⵠΔⵠ(b, c, d);
      Sw.ⵠⲆⲆΔ.ᐃᐃᐃ();
    };
    this.ᐃⲆᐃⲆΔⲆⵠⲆΔ = function () {
      this.Δⵠⵠᐃ[Vv](Eq[vq].stringify([38]));
    };
    this.ΔⵠⲆᐃΔⲆⲆⵠᐃ = function (a) {
      var b = ys * Math.PI;
      this.Δⵠⵠᐃ[Vv](Nq[Cq].stringify([Wk, Math.floor(Vj * ((a + b) % b) / b)]));
    };
    this.ΔⲆⲆΔᐃᐃⵠⲆⲆ = function (a) {
      var b = Ci * Math.PI;
      this.Δⵠⵠᐃ[Vv](Nq[Cq].stringify([27, Math.floor((a + b) % b * il / b)]));
    };
    this.ᐃᐃᐃΔⲆΔᐃᐃⵠ = function (a) {
      if (!Spectator || Settings.PathFinder.e) {
        if (LastMove != a) {
          this.Δⵠⵠᐃ[Vv](ⲆⵠΔⵠⲆⵠⲆ[Dq].stringify([4, a]));
          LastMove = a
        }
      }
    };
    this.ⲆᐃⵠⲆΔⵠᐃⵠⵠ = function (a) {
      this.Δⵠⵠᐃ[Vv](ir[gr].stringify([10, a]));
    };
    this.ᐃᐃΔᐃᐃᐃΔᐃᐃ = function (a) {
      var b = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
      if (Sw.ⵠⲆΔᐃⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ᐃᐃᐃᐃΔ);
        } else {
          b.text.push(ᐃᐃᐃᐃΔ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.Δⵠⵠᐃ[Vv](ir[gr].stringify([Mk, a]));
    };
    this.ⵠⵠΔⲆⲆ = function (a) {
      var b = ᐃᐃΔⲆ.select.ΔⵠⲆ;
      if (dt != b.length) {
        var c = [qa];
        var d = [];
        ⵠⲆᐃⲆ.ᐃΔΔⲆᐃⵠⵠ(a, {
          x: ᐃᐃΔⲆ.ᐃΔΔⵠ.rx,
          y: ᐃᐃΔⲆ.ᐃΔΔⵠ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ΔⲆⵠΔᐃⲆⲆΔⲆ);
        }
        c.push(d);
        this.Δⵠⵠᐃ[Vv](ra[ta].stringify(c));
      }
    };
    this.ᐃⲆᐃᐃΔⲆⲆ = ho;
    this.ᐃΔᐃΔᐃⲆⵠ = {
      ᐃⲆΔᐃ: 0,
      ⲆΔ: 0
    };
    this.ⵠⲆⵠᐃΔΔᐃⲆⲆ = function () {
      if (Ww - this.ᐃⲆᐃᐃΔⲆⲆ > bw.ᐃᐃᐃΔⲆⲆΔⲆⲆ) {
        this.ᐃⲆᐃᐃΔⲆⲆ = Ww;
        var a = Sw.ᐃΔΔⵠ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / Fg);
        if (this.ᐃΔᐃΔᐃⲆⵠ.ⲆΔ != b || c != this.ᐃΔᐃΔᐃⲆⵠ.ᐃⲆΔᐃ) {
          this.Δⵠⵠᐃ[Vv](Ca[sa].stringify([G, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ᐃΔᐃΔᐃⲆⵠ.ⲆΔ = b;
          this.ᐃΔᐃΔᐃⲆⵠ.ᐃⲆΔᐃ = c;
        }
      }
    };
    this.ⵠⲆᐃⲆⲆᐃⲆ = dt;
    this.ⲆⵠᐃⵠΔⵠΔΔⵠ = function () {
      if (Ww - this.ⵠⲆᐃⲆⲆᐃⲆ > bw.ΔΔΔⵠⵠⲆⲆᐃⵠ) {
        this.ⵠⲆᐃⲆⲆᐃⲆ = Ww;
        this.ping();
      }
    };
    this.ⵠⲆΔⲆᐃΔⲆⵠΔ = function () {
      Sw.reconnect.enabled = true;
      if (this.ᐃⲆⵠⵠΔ == this.Δⵠⵠᐃ.ᐃⲆⵠⵠΔ) {
        this.ᐃⲆⵠⵠΔ++;
        this.Δⵠⵠᐃ.close();
        ΔⵠⲆⲆ.connect();
      }
    };
    this.ⲆⲆⲆᐃⲆᐃⵠᐃⵠ = function (a) {
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠⵠΔⲆᐃⵠΔ]);
      for (var b = El; b < a.length; b++) {
        Sw.ᐃᐃⵠᐃᐃ.push(a[b]);
      }
    };
    this.ΔⵠⵠⲆⵠⵠΔᐃⲆ = function (a) {
      this.ⲆᐃⵠΔΔ(uf.ⲆᐃΔΔ[a].ᐃᐃⵠⲆΔ + xt[ⲆⲆΔΔ.ⲆⲆⲆΔⲆΔΔ]);
      Sw.ᐃᐃⵠᐃᐃ.push(a);
      var b = document.getElementById("team_box");
      if (Uw.ΔⲆⲆΔᐃ != -1 && b.style.display == "inline-block") {
        Uw.ᐃΔⵠΔᐃ[Uw.ΔⲆⲆΔᐃ].action();
      }
    };
    this.ᐃⵠⵠⲆΔⲆⲆⵠⲆ = function () {
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ΔⲆᐃᐃⵠⵠΔ]);
      Sw.ⲆⲆⲆᐃΔ.wait = true;
      Sw.ᐃᐃⵠᐃᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆⵠᐃᐃⲆΔⵠΔΔ = function (a) {
      if (a == Sw.id) {
        this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ⵠΔⵠⲆΔΔⵠ]);
        Sw.ⲆⲆⲆᐃΔ.wait = true;
        Sw.ᐃᐃⵠᐃᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⲆᐃⵠΔΔ(uf.ⲆᐃΔΔ[a].ᐃᐃⵠⲆΔ + xt[ⲆⲆΔΔ.ⲆΔᐃΔΔΔⵠ]);
        for (var b = Ob; b < Sw.ᐃᐃⵠᐃᐃ.length; b++) {
          if (a == Sw.ᐃᐃⵠᐃᐃ[b]) {
            Sw.ᐃᐃⵠᐃᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Uw.ΔⲆⲆΔᐃ != -Zn && c.style.display == "inline-block") {
          Uw.ᐃΔⵠΔᐃ[Uw.ΔⲆⲆΔᐃ].action();
        }
      }
    };
    this.ⲆΔⵠΔᐃⵠᐃⲆⲆ = function (a) {
      Sw.ⵠⵠᐃⲆΔ = Bh;
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ᐃⲆⲆⵠⲆ]);
      if (this.Δⵠⵠᐃ.ᐃⲆⵠⵠΔ == this.ᐃⲆⵠⵠΔ) {
        this.ᐃⲆⵠⵠΔ++;
        Uw.ⵠⲆᐃΔⲆ(hf.Δᐃᐃⵠᐃ);
        this.Δⵠⵠᐃ.close();
      }
    };
    this.ΔⵠΔΔᐃⵠΔⲆⵠ = function (a, b) {
      Sw.ⵠⵠᐃⲆΔ = false;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Sw.ᐃⲆⲆⵠᐃⵠⲆ.ⲆᐃⲆⵠⲆᐃⵠ = Bt[a][Math.floor(Math.random() * Bt[a].length)];
      Sw.ᐃⲆⲆⵠᐃⵠⲆ.ΔΔⲆΔᐃ = ⵠⲆᐃⲆ.ⵠΔⵠⵠⲆⵠⵠ(uf.ⲆᐃΔΔ[Sw.id].ΔΔⲆΔᐃ);
      Sw.ᐃⲆⲆⵠᐃⵠⲆ.ⵠⲆⵠᐃΔⵠΔ = ⵠⲆᐃⲆ.ⵠΔⵠⵠⲆⵠⵠ(d[1]);
      Sw.ᐃⲆⲆⵠᐃⵠⲆ.ΔⲆⲆⲆⲆΔᐃ = c[El];
      this.ⲆᐃⵠΔΔ(xt[ⲆⲆΔΔ.ΔᐃΔⲆⵠⲆᐃ]);
      if (this.Δⵠⵠᐃ.ᐃⲆⵠⵠΔ == this.ᐃⲆⵠⵠΔ) {
        this.ᐃⲆⵠⵠΔ++;
        Uw.ⵠⲆᐃΔⲆ(Tw.Δᐃᐃⵠᐃ);
        this.Δⵠⵠᐃ.close();
        try {
          Vf.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.Δⵠⵠᐃ[Vv](bw.ⵠⲆΔᐃⵠⲆⵠΔΔ);
    };
    this.ΔᐃⵠΔᐃᐃⲆᐃᐃ = function () {
      if (this.Δⵠⵠᐃ.readyState == 3) {
        this.ⲆⲆᐃⵠⵠⲆⲆ -= bw.ⵠΔᐃᐃᐃᐃⲆ;
      }
    };
    this.ⵠᐃⵠⵠΔΔⲆⵠⲆ = function () {
      if (Cf > bw.ᐃᐃⲆⲆⵠⵠᐃⲆⲆ) {
        this.ⲆⲆᐃⵠⵠⲆⲆ = Ww;
      }
      if (Ww - this.ⲆⲆᐃⵠⵠⲆⲆ > bw.ⵠΔᐃᐃᐃᐃⲆ) {
        this.ⲆⲆᐃⵠⵠⲆⲆ = Ww;
        this.ⵠⲆΔⲆᐃΔⲆⵠΔ();
      }
    };
    this.ⲆΔΔᐃᐃΔⲆᐃΔ = function (b) {
      yf++;
      clearTimeout(this.ᐃⲆⲆᐃⵠ);
      LastMove = 0;
      document.getElementById("commandMainBoxName").innerHTML = this.ⲆⵠΔΔΔ[this.ᐃⵠᐃⵠⲆ][this.ΔΔⲆᐃΔⲆⲆ[this.ᐃⵠᐃⵠⲆ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⲆⲆᐃⵠⵠⲆⲆ = Ww;
      Sw.ⵠᐃⲆᐃ.ⲆᐃᐃΔᐃ.ⵠⲆΔⵠⵠ = Sw.ⵠᐃⲆᐃ.ⲆᐃᐃΔᐃ.ᐃⲆⵠΔⲆ;
      Sw.ⵠᐃⲆᐃ.ΔᐃᐃᐃⲆⲆⲆ.ⵠⲆΔⵠⵠ = Sw.ⵠᐃⲆᐃ.ΔᐃᐃᐃⲆⲆⲆ.ᐃⲆⵠΔⲆ;
      Sw.ⵠᐃⲆᐃ.ΔⵠⵠⲆᐃᐃⵠ.ⵠⲆΔⵠⵠ = Sw.ⵠᐃⲆᐃ.ΔⵠⵠⲆᐃᐃⵠ.ᐃⲆⵠΔⲆ;
      Sw.ⵠᐃⲆᐃ.ΔᐃᐃΔⵠᐃⵠ.ⵠⲆΔⵠⵠ = Sw.ⵠᐃⲆᐃ.ΔᐃᐃΔⵠᐃⵠ.ᐃⲆⵠΔⲆ;
      Sw.ⵠᐃⲆᐃ.ᐃᐃΔⲆᐃⵠᐃ.ⵠⲆΔⵠⵠ = Sw.ⵠᐃⲆᐃ.ᐃᐃΔⲆᐃⵠᐃ.ᐃⲆⵠΔⲆ;
      Sw.ⵠᐃⲆᐃ.Δⵠᐃᐃ = uq;
      Sw.ⵠᐃⲆᐃ.c = Zn;
      Sw.ⵠᐃⲆᐃ.ᐃᐃⲆ = 1;
      Sw.ⵠᐃⲆᐃ.ⵠⲆⵠ = 1;
      Sw.ⵠᐃⲆᐃ.ᐃⵠᐃ = $q;
      Sw.ⵠᐃⲆᐃ.ᐃⵠᐃᐃⲆᐃⲆ = hj;
      Sw.ᐃⲆᐃⲆΔⵠⲆ = As;
      Uw.ᐃΔΔᐃⵠ.display = 0;
      Sw.Δᐃⵠᐃ.ⲆⵠⵠΔΔ = [];
      Sw.Δᐃⵠᐃ.ΔΔⵠⲆ = [];
      Sw.Δᐃⵠᐃ.max = fw.ⵠⵠᐃⵠᐃᐃⵠ;
      Sw.Δᐃⵠᐃ.ⲆΔⲆⵠᐃΔᐃ = 0;
      Sw.Δᐃⵠᐃ.ⲆⵠⲆⲆᐃ = vl;
      Sw.Δᐃⵠᐃ.id = -Ws;
      Uw.ΔΔᐃⵠᐃⲆΔ = Dj;
      Uw.ⲆΔΔᐃᐃⲆᐃ = 1;
      Uw.ⲆⵠΔⵠᐃⲆΔ = uq;
      Uw.ᐃᐃⵠⵠΔⲆⲆ = og;
      Sw.ⵠⵠᐃⲆΔ = true;
      Sw.Δᐃⵠᐃ.ΔᐃⵠΔΔᐃⵠ.stop();
      Sw.ⵠⲆⲆΔ.ⵠᐃᐃⵠⲆ = [];
      Sw.ⵠⲆⲆΔ.ⵠΔᐃΔⵠ = false;
      Sw.ⵠⲆⲆΔ.ⵠᐃΔⲆⵠⲆⲆⵠᐃ = false;
      Sw.ⵠⲆⲆΔ.ΔΔΔΔ = -or;
      Sw.ⵠⲆⲆΔ.id = -bq;
      Sw.ⵠⲆⲆΔ.ⵠⲆⵠⲆⲆ = false;
      Sw.ⵠⲆⲆΔ.Δᐃᐃᐃᐃ = false;
      Sw.ⵠⲆⲆΔ.ⵠⲆᐃΔⵠ = Vq;
      Sw.ⵠⲆⲆΔ.ᐃⵠⲆⵠⲆⲆⵠ = Bh;
      Sw.ⵠⲆⲆΔ.timeout = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, fs, 1, 0, 1, Ng);
      Sw.ⲆᐃΔⲆⵠ.timeout = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Va, 0, 1, ho, 0.1, Dj);
      Sw.ⲆᐃΔⲆⵠ.wait = ej;
      Sw.ᐃΔΔⵠⲆ.timeout = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(Va, Go, 1, 0, bq / br, vg);
      Sw.ᐃΔΔⵠⲆ.wait = Mq;
      Sw.ΔⲆⵠⲆΔ.timeout = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0, 1, dt, 1, 1);
      Sw.ΔⲆⵠⲆΔ.wait = vs;
      Sw.ⲆⲆⲆᐃΔ.id = -1;
      Sw.ⲆⲆⲆᐃΔ.ⵠⵠⲆΔ = -1;
      Sw.ⲆⲆⲆᐃΔ.wait = ol;
      Sw.ⲆⲆⲆᐃΔ.timeout = new ⵠⲆᐃⲆ.ⲆⲆⲆⵠ(false, 0, 1, Go, hj / 30, 1);
      Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.x = -Ng;
      Uw.ⲆⲆⵠΔⲆ.ᐃⲆⲆⵠⲆⲆⵠ.y = -Dj;
      Uw.ⵠⲆⵠᐃ.open = Bh;
      Uw.ⲆⲆⵠΔⲆ.ⲆᐃΔΔ = [];
      Sw.ⲆΔⲆⵠᐃⵠⵠ.enabled = zn;
      uf.mode = b[or];
      if (b[Fk] !== undefined && b[21] !== undefined) {
        uf.ⲆⵠᐃΔⵠ = b[da];
        uf.ΔΔΔΔᐃ = b[21];
        uf.w = uf.ᐃΔΔⲆΔⵠΔ * uf.ⲆⵠᐃΔⵠ;
        uf.ᐃᐃⲆ = uf.ⵠⵠⵠⲆΔⵠⵠ * uf.ΔΔΔΔᐃ;
      }
      uf.ᐃⲆⵠⲆᐃᐃⲆ = b[22];
      uf.ⲆᐃΔⵠᐃ = b[23];
      c.ⲆⲆⲆⲆΔⵠⵠ(b[24]);
      c.ᐃᐃΔᐃᐃᐃⲆⵠᐃ(b[25]);
      Sw.ᐃΔΔᐃⲆ.ᐃᐃᐃΔⲆ = b[26];
      Sw.ⵠΔᐃᐃⲆⵠᐃ = Eu;
      Sw.ⲆⲆⲆᐃⵠ.ᐃᐃᐃΔⲆ = b[27];
      uf.ᐃΔΔⵠⲆⲆᐃⲆΔ(b[Bi]);
      uf.time = b[5];
      uf.ⲆⲆΔᐃᐃ.ΔᐃⲆΔΔ = b[sq];
      uf.ⲆⲆΔᐃᐃ.ⲆΔΔⵠΔ = new Date().getTime();
      Uw.ᐃᐃΔΔ.ᐃⵠⲆᐃΔᐃⵠ = b[16];
      uf.transition = Ag;
      Sw.ⲆⲆⲆ = b[Og];
      Uw.ᐃᐃΔΔ.reset();
      Sw.ᐃᐃⵠᐃᐃ = b[lj];
      uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃⵠᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃⵠΔᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆΔⲆⵠ] = [];
      uf.ΔⵠⲆ[iw.ΔⲆΔⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔⵠⲆΔ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃΔⲆⲆ] = [];
      uf.ΔⵠⲆ[iw.ΔΔΔⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ᐃᐃᐃⲆⲆ] = [];
      uf.ΔⵠⲆ[iw.ᐃΔⲆⵠⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠⲆΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ΔΔΔᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃⲆⵠⵠ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠᐃⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠⵠⵠⵠ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃᐃⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔᐃⵠᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃΔΔΔⲆ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆⵠᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ᐃᐃᐃΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆΔᐃᐃ] = [];
      uf.ΔⵠⲆ[iw.ΔΔΔⵠⵠ] = [];
      uf.ΔⵠⲆ[iw.ᐃΔᐃᐃⵠ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔᐃᐃΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔᐃⲆⲆ] = [];
      uf.ΔⵠⲆ[iw.Δᐃⵠᐃᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆΔᐃⵠ] = [];
      uf.ΔⵠⲆ[iw.ⲆᐃⵠⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠⲆⲆⲆΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔᐃⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃΔⵠΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔΔᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃⲆᐃᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃΔⵠᐃᐃ] = [];
      uf.ΔⵠⲆ[iw.ⲆⵠⵠⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔᐃⲆΔ] = [];
      uf.ΔⵠⲆ[iw.ΔⲆⵠᐃⵠ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆᐃⲆⲆ] = [];
      uf.ΔⵠⲆ[iw.ⲆⲆⲆᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃⵠΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ⵠⲆⵠΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ᐃⵠΔⵠⲆ] = [];
      uf.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆΔⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠΔⵠⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃⲆⵠⲆ] = [];
      uf.ΔⵠⲆ[iw.ΔⵠⵠΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ΔΔΔⲆΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔⲆΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ᐃᐃⲆⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃⵠⲆⵠ] = [];
      uf.ΔⵠⲆ[iw.ⵠⲆΔⵠᐃ] = [];
      uf.ΔⵠⲆ[iw.ΔⵠΔⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆᐃⵠᐃ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃⲆⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃⲆΔⲆΔⲆⵠ] = [];
      uf.ΔⵠⲆ[iw.ⲆⲆᐃⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔⵠΔⲆ] = [];
      uf.ΔⵠⲆ[iw.ΔⲆΔΔΔ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃΔΔΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔΔᐃᐃᐃⵠ] = [];
      uf.ΔⵠⲆ[iw.ΔⲆⲆⲆⲆⲆⵠ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃⵠⲆᐃⲆᐃ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠᐃⵠⲆᐃᐃ] = [];
      uf.ΔⵠⲆ[iw.ⲆᐃⲆⵠᐃ] = [];
      uf.ΔⵠⲆ[iw.ⵠⲆⲆΔᐃ] = [];
      uf.ΔⵠⲆ[iw.Δⵠⵠⵠⵠ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃⵠΔΔ] = [];
      uf.ΔⵠⲆ[iw.ᐃᐃᐃⲆΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆΔΔΔΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆᐃΔΔΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆᐃⲆᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠΔΔΔ] = [];
      uf.ΔⵠⲆ[iw.ΔΔΔⲆⵠ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃⵠⲆⲆ] = [];
      uf.ΔⵠⲆ[iw.ΔᐃΔⵠⵠ] = [];
      uf.ΔⵠⲆ[iw.ⲆⲆⲆⲆⲆ] = [];
      uf.ΔⵠⲆ[iw.ᐃΔᐃᐃᐃ] = [];
      uf.ΔⵠⲆ[iw.ⲆⲆΔΔΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔᐃΔᐃ] = [];
      uf.ΔⵠⲆ[iw.ⲆⵠΔᐃΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠᐃΔⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆᐃΔᐃⲆ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔⲆⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⲆⲆⵠΔⵠ] = [];
      uf.ΔⵠⲆ[iw.ⵠⵠⵠⵠⲆ] = [];
      uf.ΔⵠⲆ[iw.ᐃᐃᐃΔᐃ] = [];
      uf.ΔⵠⲆ[iw.ᐃᐃᐃⵠΔ] = [];
      uf.ΔⵠⲆ[iw.ⵠΔⵠⵠⲆ] = [];
      uf.ΔⵠⲆ[iw.ⲆⵠⲆⵠᐃ] = [];
      uf.ΔⵠⲆ[iw.ⲆⵠⲆΔⵠ] = [];
      uf.ΔᐃᐃⲆⵠ = [];
      uf.ᐃΔᐃᐃᐃⵠΔ = b[7];
      Sw.id = b[Ih];
      Sw.ᐃᐃⲆΔ = Sw.id * uf.ᐃΔᐃᐃᐃⵠΔ;
      if (Vw.loaded) {
        Vw.ⲆᐃΔΔ[0].ᐃᐃⲆΔ = Sw.ᐃᐃⲆΔ;
        Vw.ⲆᐃΔΔ[0].ᐃΔⵠΔᐃᐃⲆ = 0;
      }
      mf.ΔⵠΔᐃᐃΔᐃ();
      Sw.ᐃΔΔⵠ.ⵠⲆⵠΔⲆ(b[_g], b[Cg]);
      uf.ⲆᐃΔΔ = [];
      var d = uf.ⲆᐃΔΔ;
      for (var e = lt; e < b[Dr]; e++) {
        d.push(new kw());
      }
      e = Bs;
      for (var f = b[Ol]; e < f.length; e++) {
        var g = d[f[e].i];
        g.ᐃᐃⵠⲆΔ = f[e].n;
        g.ᐃᐃᐃⵠ = f[e].s;
        g.ⲆⲆⵠⲆⲆ = f[e].a;
        g.ᐃⲆΔᐃΔ = f[e].c;
        g.ᐃⲆⲆΔΔ = f[e].b;
        g.ⵠΔᐃΔΔ = f[e].d;
        g.ᐃᐃᐃᐃⵠᐃⲆ = f[e].g;
        g.level = f[e].l;
        g.ΔΔⲆΔᐃ = ⵠⲆᐃⲆ.ⵠⲆⲆᐃⵠΔΔ(f[e].p);
        g.ⵠⵠᐃⲆΔ = ia;
        if (Wv === 1) {
          g.ᐃᐃⵠⲆΔ += "|" + f[e].i;
        }
      }
      Sw.ΔⲆⲆⵠᐃ.sort();
      if (fw.ᐃΔΔⵠᐃⵠⲆ === uf.mode && uf.ⲆᐃΔΔ[Sw.id].ᐃᐃⵠⲆΔ === "spectator") {
        Sw.ᐃᐃⵠΔⵠⲆΔ = xk;
      } else {
        Sw.ᐃᐃⵠΔⵠⲆΔ = false;
      }
      if (uf.mode === fw.ⵠⵠᐃΔⲆ && uf.ⲆᐃΔΔ[Sw.id].ᐃᐃᐃⵠ === fw.ᐃᐃΔᐃᐃⲆⵠ) {
        Sw.ⵠⲆΔᐃⲆ = true;
      } else {
        Sw.ⵠⲆΔᐃⲆ = fk;
      }
      if (uf.mode === fw.ⵠⵠᐃᐃΔ && uf.ⲆᐃΔΔ[Sw.id].ᐃᐃᐃⵠ === fw.ⵠᐃⵠⵠⲆΔⲆ) {
        Sw.ⵠⲆⲆⵠΔᐃᐃ = Mg;
      } else {
        Sw.ⵠⲆⲆⵠΔᐃᐃ = false;
      }
      ᐃΔⲆΔ.set("starve_token", Sw.ᐃΔⵠⵠⲆ);
      if (fs === b[12]) {
        Sw.ⵠᐃⲆⲆⵠ.ΔⵠΔΔⵠ = 0;
        Uw.ᐃᐃΔΔ.restore(b[17]);
        var h = b[yo];
        if (h[ts.ⵠⵠᐃΔ]) {
          Sw.Δᐃⵠᐃ.ΔᐃⵠᐃⲆᐃⵠ($q, Xa);
        }
        for (e = Xa; h.length > e; e++) {
          if (h[e]) {
            if (ts.ⵠⵠᐃΔ == e) {
              continue;
            }
            if (e == ts.ⵠⵠᐃᐃᐃ) {
              continue;
            }
            this.ΔⲆᐃⲆΔⵠΔ([0, e, h[e]]);
          }
        }
        Sw.ⵠᐃⲆⲆⵠ.open = Bh;
      } else {
        if (fw.ⵠᐃⵠᐃᐃ === uf.mode) {
          this.ΔⲆᐃⲆΔⵠΔ([0, ts.ΔΔᐃᐃᐃ, Ng]);
        } else if (fw.ⵠⵠᐃᐃΔ === uf.mode) {
          if (Sw.ⵠⲆⲆⵠΔᐃᐃ) {
            this.ΔⲆᐃⲆΔⵠΔ([0, ts.ⵠΔᐃΔᐃ, 4]);
          } else {
            this.ΔⲆᐃⲆΔⵠΔ([dh, ts.ⵠⵠⲆΔⵠ, 3]);
          }
        }
        if (uf.mode === fw.ⲆⲆΔⵠⵠ || uf.mode === fw.ⵠⵠᐃᐃΔ || uf.mode === fw.ⵠΔΔΔΔ || fw.ⵠᐃⵠᐃᐃ === uf.mode) {
          Sw.ⵠᐃⲆⲆⵠ.ΔⵠΔΔⵠ = new Date().getTime();
          Sw.ⵠᐃⲆⲆⵠ.open = eo;
          Sw.ⵠᐃⲆⲆⵠ.value = b[13];
          Uw.ⵠᐃⲆⲆⵠ.ⲆΔΔⵠΔ();
        } else {
          Sw.ⵠᐃⲆⲆⵠ.ΔⵠΔΔⵠ = 0;
          Sw.ⵠᐃⲆⲆⵠ.open = As;
          Sw.ⵠᐃⲆⲆⵠ.value = 0;
        }
        Sw.ᐃⲆᐃᐃⵠⵠᐃ = b[12].toString();
      }
      Sw.ΔᐃΔᐃᐃ.enabled = b[Vh];
      Sw.ΔᐃΔᐃᐃ.ΔⵠΔΔⵠ = -bh;
      Sw.ΔᐃΔᐃᐃ.label = null;
      Sw.ΔᐃΔᐃᐃ.now = -1;
      ᐃΔⲆΔ.set("starve_token_id", Sw.ᐃⲆᐃᐃⵠⵠᐃ);
      if (Sw.reconnect.enabled) {
        Sw.reconnect.rotate = 0;
        Sw.reconnect.enabled = Vq;
      } else {
        hf.ⵠⲆᐃΔⲆ(Uw.Δᐃᐃⵠᐃ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + hf.ᐃᐃᐃⵠ + "A" + hf.ⲆⲆⵠⲆⲆ);
        }
      }
    };
    this.connect = function () {
      c.ⵠᐃΔⲆⲆᐃΔ = dh;
      c.ⵠⲆΔⵠⵠΔⲆ();
    };
    this.ⵠΔΔΔΔᐃⲆ = undefined;
    this.ⲆᐃᐃΔΔΔᐃⲆᐃ = function (b) {
      const d = c.ᐃᐃⵠⲆⵠ.filter(a => a.gm === b);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== Pr) {
          if (f[c] === undefined) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function e(a) {
        c.ⵠΔΔΔΔᐃⲆ = a;
        const b = f[a];
        const d = b[Math.floor(Math.random() * b.length)];
        c.ΔΔΔⲆΔⲆᐃ({
          domain: Zv,
          is_tls: bt,
          id: d[fj[Go]],
          p: d.p
        });
      }
      if (C !== c.ⵠΔΔΔΔᐃⲆ) {
        e(c.ⵠΔΔΔΔᐃⲆ);
        return;
      }
      let g = uq;
      function h(a) {
        const b = new Vf.XMLHttpRequest();
        const c = a[0];
        const d = c.p;
        const f = c.r;
        const i = d[Math.floor(Math.random() * d.length)];
        b.open("GET", "https://" + i + "." + Zv + "/", true);
        b.onreadystatechange = function () {
          if (b.readyState === 4) {
            if (g === 0) {
              return;
            }
            g = 0;
            console.log(oh, Hi);
            e(f);
          }
        };
        b.send();
      }
      for (let a in f) {
        h(f[a]);
      }
      Vf.setTimeout(function () {
        if (Eu === g) {
          return;
        }
        g = 0;
        const a = Vf.Object.keys(f);
        e(a[Math.floor(Math.random() * a.length)]);
      }, 5000);
    };
    this.ΔᐃᐃⵠⲆᐃᐃᐃᐃ = function () {
      let a = fw.ⵠΔΔⲆⵠⲆᐃ[c.ᐃⵠᐃⵠⲆ];
      console.log(undefined, Pr, Sn);
      let b = c.ΔΔⲆᐃΔⲆⲆ[c.ᐃⵠᐃⵠⲆ];
      let d = c.ᐃᐃⵠⲆⵠ.find(c => c.gm == a && c.idx == b);
      if (d === undefined) {
        c.ⲆᐃᐃΔΔΔᐃⲆᐃ(a);
      } else {
        c.ΔΔΔⲆΔⲆᐃ({
          domain: Zv,
          is_tls: vg,
          id: d[fj[gj]],
          p: d.p
        });
      }
    };
    this.ⵠⲆΔⵠⵠΔⲆ = function () {
      console.log(dq);
      if (oh === Yv) {
        c.ΔᐃᐃⵠⲆᐃᐃᐃᐃ();
      } else {
        c.ΔΔΔⲆΔⲆᐃ({
          domain: Yv.domain,
          is_tls: Yv.ssl,
          id: Yv[fj[ou]],
          p: [Yv.p]
        });
      }
    };
    this.ΔΔΔⲆΔⲆᐃ = function (d) {
      let e = d.domain;
      let f = d.is_tls;
      let g = d.id;
      let i = d.p;
      let a = i[Math.floor(Math.random() * i.length)];
      let j = f ? "wss://" + a + "." + e + "/" + g : "ws://" + e;
      console.log(undefined, Hi);
      c.Δⵠⵠᐃ = new Vf.WebSocket(j);
      c.Δⵠⵠᐃ.binaryType = "arraybuffer";
      c.Δⵠⵠᐃ.ᐃⲆⵠⵠΔ = c.ᐃⲆⵠⵠΔ;
      c.Δⵠⵠᐃ.onmessage = function (a) {
        if (c.ᐃⲆⵠⵠΔ == c.ᐃⲆⵠⵠΔ) {
          if (typeof a.data == "string") {
            var d = JSON.parse(a.data);
            switch (d[ho]) {
              case 0:
                c.ⵠⲆⵠⵠⲆ(d);
                break;
              case 1:
                c.ⲆΔΔᐃⵠⲆᐃ(d[hj]);
                break;
              case ab:
                c.ΔΔᐃΔΔⲆΔᐃⲆ(d);
                break;
              case Ia:
                c.ⲆΔΔᐃᐃΔⲆᐃΔ(d);
                break;
              case 4:
                c.message(d[1]);
                break;
              case 5:
                c.ᐃᐃΔⲆⵠⲆⵠ(d);
                break;
              case 6:
                c.ⲆⲆⲆⲆΔⵠⵠ(d[1]);
            }
          } else {
            var e = new Uint8Array(a.data);
            switch (e[0]) {
              case 0:
                c.ΔⵠⲆ(a.data, e, zn);
                break;
              case kr:
                c.ΔⵠⲆ(a.data, e, Wl);
                break;
              case cn:
                c.ᐃⲆⵠⵠᐃⵠΔΔⵠ();
                break;
              case Oj:
                c.ΔⲆᐃⲆΔⵠΔ(new Uint16Array(a.data));
                break;
              case Qa:
                c.ⵠΔⵠⵠΔᐃⵠᐃΔ();
                break;
              case wr:
                c.ᐃⲆⲆΔⵠⲆⵠΔΔ();
                break;
              case 6:
                c.ᐃᐃᐃᐃΔᐃⲆᐃΔ();
                break;
              case 7:
                c.ᐃⵠⲆᐃⲆⵠⵠᐃᐃ(a.data);
                break;
              case Zj:
                c.ⲆᐃⵠΔΔⲆⲆⵠΔ(e[og]);
                break;
              case Il:
                c.ᐃⵠⵠΔⲆᐃⲆᐃᐃ(e[Ng]);
                break;
              case 10:
                c.ⵠΔΔᐃⵠⵠᐃ();
                break;
              case mg:
                c.ⵠⲆⵠⵠΔⲆΔ(e[1], e[Ts]);
                break;
              case 12:
                c.ⵠⲆⵠⲆⲆ(e[hj]);
                break;
              case Bl:
                c.ᐃΔᐃΔᐃⲆⲆΔΔ(e, a.data);
                break;
              case 14:
                c.ΔⵠⵠΔΔᐃᐃ();
                break;
              case 15:
                c.ᐃⵠΔᐃⵠᐃΔᐃⲆ(e[ck]);
                break;
              case $h:
                c.ⵠᐃⲆᐃ(e[1], e[2], e[sd], e[4], e[5], e[Vs], e[Do]);
                break;
              case 17:
                c.ΔⲆⲆⵠΔᐃᐃⲆΔ(a.data);
                break;
              case b:
                c.ᐃⲆⲆΔⵠⲆⲆⵠⵠ();
                break;
              case Bi:
                c.ⵠⲆᐃΔⵠ(e[1]);
                break;
              case da:
                c.ⲆᐃΔⵠⵠⵠᐃΔΔ();
                break;
              case 21:
                c.ᐃⵠΔᐃⲆ(a.data);
                break;
              case 22:
                c.ΔⵠⵠⵠΔⲆⲆᐃΔ(e[bt]);
                break;
              case 23:
                c.ᐃⵠΔⵠⲆᐃΔΔΔ(a.data);
                break;
              case 24:
                c.ᐃⲆᐃΔᐃⲆⲆΔⲆ(e[1]);
                break;
              case 25:
                c.ΔⵠΔΔᐃⵠΔⲆⵠ(e[Zk], a.data);
                break;
              case 26:
                c.ⲆⲆⵠΔⲆ(e);
                break;
              case 27:
                c.ⲆᐃⲆⲆⵠⵠΔⲆⲆ();
                break;
              case 28:
                c.ΔᐃΔᐃᐃ(e[ck]);
                break;
              case 29:
                c.ᐃⲆⵠΔᐃΔᐃⵠΔ();
                break;
              case 30:
                c.ⲆΔⵠΔᐃⵠᐃⲆⲆ();
                break;
              case 31:
                c.ⲆⲆⲆᐃⲆᐃⵠᐃⵠ(e);
                break;
              case 32:
                c.ⲆⵠᐃᐃⲆΔⵠΔΔ(e[El]);
                break;
              case 33:
                c.ΔⵠⵠⲆⵠⵠΔᐃⲆ(e[1]);
                break;
              case 34:
                c.ᐃⵠⵠⲆΔⲆⲆⵠⲆ();
                break;
              case 35:
                c.ⲆⲆⵠΔᐃⵠᐃⲆΔ(e[1]);
                break;
              case 36:
                c.ᐃⵠⲆⵠⲆⲆⵠ(e[$r]);
                break;
              case 37:
                c.ᐃⲆⲆᐃⲆΔⵠᐃΔ(e[El], e[Xj]);
                break;
              case 38:
                c.ᐃᐃᐃⲆᐃⲆᐃⲆⵠ(e[1]);
                break;
              case 39:
                c.ⵠΔⵠΔⵠⵠⲆⲆⵠ(e[bt]);
                break;
              case 40:
                c.ᐃᐃⵠΔⲆⵠᐃⵠⲆ();
                break;
              case 41:
                c.ⵠⵠⲆᐃᐃⲆΔⵠᐃ(e);
                break;
              case 42:
                c.ᐃᐃΔⲆⲆⲆΔᐃΔ(e[1]);
                break;
              case 43:
                c.ⲆΔⲆⵠⲆᐃⲆⲆᐃ(e[1]);
                break;
              case 44:
                c.claimed(e[kr]);
                break;
              case 45:
                c.ΔΔⵠᐃΔΔΔⵠᐃ(e[Zn]);
                break;
              case 46:
                c.ΔⲆΔⲆᐃΔⲆⲆⲆ(e[ck]);
                break;
              case 47:
                c.Δᐃᐃᐃᐃ(e[1]);
                break;
              case 48:
                c.ⲆⵠᐃΔᐃᐃᐃⲆΔ();
                break;
              case 50:
                c.ΔⵠⲆⲆⲆⵠⲆⵠᐃ(e[hj], e[2], e[wn]);
                break;
              case 51:
                c.ΔⲆⵠᐃⵠⲆⲆᐃⵠ();
                break;
              case 52:
                c.ⲆΔᐃⵠⲆᐃⲆᐃⲆ(e[1]);
                break;
              case 53:
                c.ⵠⵠⲆⵠⵠᐃⲆⲆΔ(e[$q]);
                break;
              case 54:
                c.ⵠⲆᐃᐃⲆⲆⲆᐃⵠ();
                break;
              case 55:
                c.ᐃᐃᐃⲆⲆⲆᐃΔᐃ(e[1]);
                break;
              case 56:
                c.ⲆⲆᐃᐃⵠΔⲆⲆΔ(e[kr]);
                break;
              case 57:
                c.ⵠⲆⵠᐃᐃⲆΔⵠⲆ();
                break;
              case 58:
                c.ⵠΔⵠⵠᐃⲆᐃᐃⲆ();
                break;
              case 59:
                c.ⵠᐃⲆᐃᐃⵠⲆⵠΔ();
                break;
              case 60:
                c.ᐃⵠⲆΔⲆⲆⲆΔⲆ();
                break;
              case 61:
                Sw.ᐃΔΔⵠ.ΔΔᐃⵠⵠΔⲆ = 0.2;
                Sw.ᐃΔΔⵠ.ΔⵠΔΔⵠ = R;
                break;
              case 62:
                c.ΔⵠⲆΔⲆᐃⲆⲆⵠ(new Uint16Array(a.data));
                break;
              case 63:
                c.ⲆⵠᐃΔΔⲆⲆᐃΔ();
                break;
              case 64:
                c.ⵠⲆⵠΔⲆΔᐃΔΔ();
                break;
              case 65:
                c.ΔⵠⵠⲆΔΔΔⲆⵠ();
                break;
              case 66:
                c.ᐃᐃⲆᐃΔΔΔⲆⵠ();
                break;
              case 67:
                c.ⵠᐃⲆⲆΔΔᐃⲆᐃ(e[1]);
                break;
              case 68:
                c.ᐃᐃⲆⲆΔΔⵠΔⵠ(e[og]);
                break;
              case 69:
                c.ⵠΔᐃᐃⲆⵠᐃ(e[1]);
                break;
              case 70:
                c.ᐃⵠᐃⲆⵠᐃΔᐃΔ(e[or]);
                break;
              case 71:
                c.ⵠⵠΔⲆΔ(e[1]);
            }
          }
        }
      };
      this.Δⵠⵠᐃ.onopen = function () {
        clearTimeout(c.ᐃⲆⲆᐃⵠ);
        Sw.ᐃᐃΔⲆⵠⵠᐃ = Sw.ᐃᐃΔⲆⵠⵠᐃ || ⵠⲆᐃⲆ.ⵠΔᐃᐃΔᐃᐃ("token");
        ⵠⲆᐃⲆ.ΔⲆⲆΔᐃⵠⲆ().then(a => {
          c.Δⵠⵠᐃ[Vv](vr[xa].stringify([hf.ᐃᐃⵠⲆΔ.input.value, screen.width + 200, screen.height + 200, bw.ⵠⵠΔΔΔⵠΔ, Sw.ᐃΔⵠⵠⲆ, Sw.ᐃⲆᐃᐃⵠⵠᐃ, Sw.reconnect.enabled ? 1 : 0, hf.ᐃᐃᐃⵠ, hf.ⲆⲆⵠⲆⲆ, hf.ⲆⵠⲆⲆᐃ, hf.ᐃⲆⲆΔΔ, hf.ᐃⲆΔᐃΔ, hf.ⵠΔᐃΔΔ, $w === Kk ? jg : $w, Zw === Hi ? gj : Zw.substring(Zw.length - 50), Xv, Sw.ᐃᐃΔⲆⵠⵠᐃ, a, Sw.ᐃⲆΔⲆⵠᐃⵠ, Sw.ΔⵠⲆⵠΔᐃⲆ]));
          Sw.ᐃᐃΔⲆⵠⵠᐃ = undefined;
          Sw.ᐃⲆΔⲆⵠᐃⵠ = eg;
          Sw.ΔⵠⲆⵠΔᐃⲆ = undefined;
          c.ᐃⲆⲆᐃⵠ = setTimeout(c.timeout, bw.ΔⲆⵠⵠᐃΔᐃⵠΔ);
        });
      };
    };
  }();
  var uf;
  var Sw;
  var Tw;
  var Uw = {
    ⵠΔΔⲆⲆ: false
  };
  var Vw = new function () {
    this.Δᐃᐃⵠᐃ = dh;
    this.loaded = 0;
    this.transition = Eu;
    this.ⵠΔΔΔΔⲆᐃ = function (a) {
      return nh * (a / uf.w);
    };
    this.ΔᐃⵠⲆⲆᐃⲆ = function (a) {
      return dk * (a / uf.ᐃᐃⲆ);
    };
    this.ⲆᐃⲆⲆⲆⵠⲆ = function (a, b) {
      a = this.ⵠΔΔΔΔⲆᐃ(a) - this.ΔΔᐃΔΔ.x;
      return this.ΔΔᐃΔΔ.x + b * a;
    };
    this.ᐃⵠⵠⵠⲆⲆᐃ = function (a, b) {
      a = Math.abs(this.ΔᐃⵠⲆⲆᐃⲆ(a) - this.ΔΔᐃΔΔ.y);
      return this.ΔΔᐃΔΔ.y + b * a;
    };
    this.sample = {};
    this.ᐃⵠᐃⲆᐃ = {};
    this.ᐃᐃΔⲆ = {};
    this.ᐃᐃΔⲆᐃΔⵠ = function (a, b, c, d) {
      for (var e = 0; e < b.length; e++) {
        var f = b[e];
        if (!a.playing(f)) {
          a.pos(c, d, -0.5, f);
          a.play(f);
          return xk;
        }
      }
      return false;
    };
    this.Ⲇⵠᐃⵠ = function (a, b, c, d) {
      c = this.ⲆᐃⲆⲆⲆⵠⲆ(c, ΔᐃΔⲆᐃ.ᐃΔᐃᐃⵠΔⲆ);
      d = this.ᐃⵠⵠⵠⲆⲆᐃ(d, ΔᐃΔⲆᐃ.ᐃΔᐃᐃⵠΔⲆ);
      console.log("HIT", a, b, c, d, ΔᐃΔⲆᐃ.ᐃΔᐃᐃⵠΔⲆ);
      if (a) {
        if (kr === b) {
          this.ᐃᐃΔⲆᐃΔⵠ(this.ᐃᐃΔⲆ.ⵠⲆᐃⵠᐃᐃᐃ, this.sample.ⵠⲆᐃⵠᐃᐃᐃ, c, d);
        } else if (b === ks) {
          this.ᐃᐃΔⲆᐃΔⵠ(this.ᐃᐃΔⲆ.ⵠᐃΔΔⵠΔᐃ, this.sample.ⵠᐃΔΔⵠΔᐃ, c, d);
        }
      } else {
        this.ᐃᐃΔⲆᐃΔⵠ(this.ᐃᐃΔⲆ.ΔⲆⲆⲆΔ, this.sample.ΔⲆⲆⲆΔ, c, d);
      }
    };
    this.ΔΔᐃΔΔ = {
      x: Ob,
      y: Eu
    };
    this.ᐃⵠᐃΔᐃⲆⵠ = {
      y: Et,
      x: Hb
    };
    this.ⵠᐃᐃⵠⵠ = {};
    this.ⲆᐃΔΔ = [];
    this.ΔᐃᐃⵠⲆ = function (a, b) {
      for (var c in this.ⵠᐃᐃⵠⵠ) {
        var d = this.ⵠᐃᐃⵠⵠ[c];
        d.check(a);
        if (d.ⵠⵠᐃⲆᐃΔΔ) {
          if (uf.ⲆⲆΔᐃᐃ.now < Lw.ⵠⵠΔⲆΔⲆⵠ) {
            d.ΔⲆⵠΔΔ();
          }
          if (b) {
            d.ᐃᐃᐃ(a, this.ΔΔᐃΔΔ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= ka;
    };
    this.ⵠⲆΔⵠⲆΔᐃⵠᐃ = function () {
      var a = [];
      for (var b = 0; b < this.ⲆᐃΔΔ.length; b++) {
        if ((e = this.ⲆᐃΔΔ[b]).ᐃΔⵠΔᐃᐃⲆ) {
          a.push(b);
        } else if (!e.ᐃΔⵠΔᐃᐃⲆ && !uf.ΔᐃᐃⲆⵠ[e.ᐃᐃⲆΔ]) {
          e.ᐃⵠⵠⲆⵠⲆΔ();
          a.push(b);
        }
      }
      var c = uf.ΔⵠⲆ[iw.ᐃⲆⲆΔᐃ];
      var d = ho;
      for (b = Yl; c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((uf.mode != fw.ᐃΔΔⵠᐃⵠⲆ || uf.ⲆᐃΔΔ[e.id].ᐃᐃⵠⲆΔ !== "spectator") && e.Ⲇᐃᐃⵠⵠ === -1 && e.ᐃᐃⲆΔ !== Sw.ᐃᐃⲆΔ) {
          this.ⲆᐃΔΔ[a[d]].ⲆΔΔⵠΔ(e.ᐃᐃⲆΔ);
          d++;
        }
      }
    };
    this.ΔΔΔⲆⵠΔᐃΔᐃ = function () {
      this.ⵠⲆΔⵠⲆΔᐃⵠᐃ();
      for (var a = ks; this.ⲆᐃΔΔ.length > a; a++) {
        var b = this.ⲆᐃΔΔ[a];
        if (!b.ᐃΔⵠΔᐃᐃⲆ && b.check()) {
          b.ᐃᐃᐃ();
        }
      }
    };
    this.ⵠΔⲆΔᐃΔΔᐃⲆ = function (a) {
      if (this.ᐃⵠᐃΔᐃⲆⵠ.x === a.x && this.ᐃⵠᐃΔᐃⲆⵠ.y === a.y) {
        return 0;
      } else {
        this.ᐃⵠᐃΔᐃⲆⵠ.x = a.x;
        this.ᐃⵠᐃΔᐃⲆⵠ.y = a.y;
        this.ΔΔᐃΔΔ.x = this.ⵠΔΔΔΔⲆᐃ(a.x);
        this.ΔΔᐃΔΔ.y = this.ΔᐃⵠⲆⲆᐃⲆ(a.y);
        Howler.pos(this.ΔΔᐃΔΔ.x, this.ΔΔᐃΔΔ.y, Ob);
        return 1;
      }
    };
    this.ΔΔⲆⲆⲆⵠⲆⲆΔ = function () {
      if (this.Δᐃᐃⵠᐃ && this.loaded) {
        var a = uf.ΔᐃᐃⲆⵠ[Sw.ᐃᐃⲆΔ];
        if (a) {
          a.Ⲇᐃᐃⵠⵠ = 0;
          var b = this.ⵠΔⲆΔᐃΔΔᐃⲆ(a);
          if (uf.mode !== fw.ⵠⵠᐃΔⲆ && uf.mode !== fw.ⵠᐃⵠᐃᐃ && uf.mode !== fw.ΔⵠⲆᐃΔⵠΔ) {
            this.ΔᐃᐃⵠⲆ(a, b);
          }
          this.ΔΔΔⲆⵠΔᐃΔᐃ();
        }
      }
    };
    this.ΔⲆΔⲆⲆⲆⵠⵠⲆ = function () {
      for (var b in Ow) {
        var c = Ow[b];
        if (typeof c === fj[ul] && c.path) {
          c.ⲆⲆΔΔⲆ = new Howl({
            src: c.path,
            volume: Et,
            sprite: c.ⵠᐃ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ⲆⲆΔΔⲆ.play(d);
            c.ⲆⲆΔΔⲆ.stop(j);
            c.ⲆⲆΔΔⲆ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(Pr, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Vw.sample[d] = g;
          } else {
            Vw.sample[d] = g[Eu];
          }
          Vw.ᐃᐃΔⲆ[d] = c.ⲆⲆΔΔⲆ;
        }
      }
    };
    this.ᐃⲆΔⵠᐃΔᐃ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ᐃⲆΔⲆⲆᐃⲆ = function (b, c, d, e, f, g) {
      var i = b;
      for (var a = 0; d > a; a++) {
        var j = i[a] = [];
        for (ᐃⲆΔᐃ = Eu; e > ᐃⲆΔᐃ; ᐃⲆΔᐃ++) {
          j[ᐃⲆΔᐃ] = Vw.sample[f + ᐃⲆΔᐃ][a];
          c.ⲆⲆΔΔⲆ.volume(g, j[ᐃⲆΔᐃ]);
        }
      }
    };
    this.ⲆΔΔⵠΔ = function () {
      Vw.ΔⲆΔⲆⲆⲆⵠⵠⲆ();
      Vw.ᐃⵠᐃⲆᐃ.ᐃΔᐃΔⲆⲆⲆ = [];
      Vw.ᐃⵠᐃⲆᐃ.ⲆᐃΔⲆⵠ = [];
      Vw.ᐃⵠᐃⲆᐃ.Ⲇᐃⵠⵠᐃ = [];
      Vw.ᐃⲆΔⲆⲆᐃⲆ(Vw.ᐃⵠᐃⲆᐃ.ᐃΔᐃΔⲆⲆⲆ, Ow.ⵠⲆⲆⲆΔⲆⵠ, Lw.ᐃⲆⲆΔᐃ, 3, "p", 0.15);
      Vw.ᐃⲆΔⲆⲆᐃⲆ(Vw.ᐃⵠᐃⲆᐃ.ⲆᐃΔⲆⵠ, Ow.ⲆᐃᐃᐃΔⵠΔ, Lw.ᐃⲆⲆΔᐃ, Kg, "w", 0.15);
      Vw.ᐃⲆΔⲆⲆᐃⲆ(Vw.ᐃⵠᐃⲆᐃ.Ⲇᐃⵠⵠᐃ, Ow.ⲆΔⲆⵠⲆᐃΔ, Lw.ᐃⲆⲆΔᐃ, yr, "d", 0.09);
      Vw.ᐃⲆΔⵠᐃΔᐃ(Vw.sample.ΔⲆⲆⲆΔ, Vw.ᐃᐃΔⲆ.ΔⲆⲆⲆΔ, 0.15);
      Vw.ᐃⲆΔⵠᐃΔᐃ(Vw.sample.ⵠᐃΔΔⵠΔᐃ, Vw.ᐃᐃΔⲆ.ⵠᐃΔΔⵠΔᐃ, 0.2);
      Vw.ᐃⲆΔⵠᐃΔᐃ(Vw.sample.ⵠⲆᐃⵠᐃᐃᐃ, Vw.ᐃᐃΔⲆ.ⵠⲆᐃⵠᐃᐃᐃ, 1);
      Vw.ⵠᐃᐃⵠⵠ.ⲆⲆⵠᐃⲆᐃⵠⵠΔ = new tf(Lw.ᐃⲆⲆΔΔⲆⵠⲆⵠ, this.sample.ᐃΔⵠΔᐃΔΔ, this.sample.ⲆᐃⵠᐃᐃΔⵠ, Lw.ⲆⲆⵠΔΔᐃΔⲆᐃ, 0.05, 0.4, Ow.ⵠⲆⵠΔΔΔᐃ.ⲆⲆΔΔⲆ, Lw.ᐃΔΔΔⲆΔᐃ, {
        x: rs.ΔΔᐃᐃⲆΔⲆ,
        y: rs.ⲆᐃⵠⵠΔᐃⵠ,
        w: uf.w,
        ᐃᐃⲆ: uf.ᐃᐃⲆ
      }, {
        x: rs.ΔΔᐃᐃⲆΔⲆ - 2300,
        y: rs.ⲆᐃⵠⵠΔᐃⵠ - 4000,
        w: uf.w,
        ᐃᐃⲆ: uf.ᐃᐃⲆ
      }, {
        x: rs.ΔΔᐃᐃⲆΔⲆ - 1500,
        y: rs.ⲆᐃⵠⵠΔᐃⵠ - 2000,
        w: uf.w,
        ᐃᐃⲆ: uf.ᐃᐃⲆ
      });
      Vw.ⵠᐃᐃⵠⵠ.ΔᐃⲆⵠᐃⲆⵠⲆᐃ = new tf(Lw.ᐃᐃΔᐃⲆⵠΔ, this.sample.ⲆΔⲆⵠⵠΔⲆ, this.sample.ΔΔⵠⲆⲆᐃΔ, Lw.ⲆⲆⵠⵠⵠⵠⲆΔⲆ, 0.03, 0.25, Ow.ⵠⲆⵠΔΔΔᐃ.ⲆⲆΔΔⲆ, Lw.ᐃΔΔΔⲆΔᐃ, {
        x: Et,
        y: rs.ⲆᐃⵠⵠΔᐃⵠ + 800,
        w: rs.ΔΔᐃᐃⲆΔⲆ - 2300,
        ᐃᐃⲆ: uf.ᐃᐃⲆ
      }, {
        x: -wg,
        y: rs.ⲆᐃⵠⵠΔᐃⵠ - 300,
        w: rs.ΔΔᐃᐃⲆΔⲆ - Wo,
        ᐃᐃⲆ: uf.ᐃᐃⲆ
      }, {
        x: -100,
        y: rs.ⲆᐃⵠⵠΔᐃⵠ + 400,
        w: rs.ΔΔᐃᐃⲆΔⲆ - 1400,
        ᐃᐃⲆ: uf.ᐃᐃⲆ
      });
      Vw.ⵠᐃᐃⵠⵠ.ΔⲆᐃΔⵠΔⲆ = new tf(Lw.ᐃᐃΔᐃⲆⵠΔ, this.sample.ⵠⲆᐃⵠⵠΔⲆ, this.sample.ΔΔⵠΔᐃᐃⵠ, Lw.ⵠᐃΔΔΔΔⵠⲆΔ, 0.01, 0.22, Ow.ⵠⲆⵠΔΔΔᐃ.ⲆⲆΔΔⲆ, Lw.ᐃΔΔΔⲆΔᐃ, {
        x: -hi,
        y: -100,
        w: uf.w + 200,
        ᐃᐃⲆ: rs.ⲆᐃⵠⵠΔᐃⵠ - 1000
      }, {
        x: -hi,
        y: -Is,
        w: uf.w + 200,
        ᐃᐃⲆ: rs.ⲆᐃⵠⵠΔᐃⵠ + 600
      }, {
        x: -100,
        y: -100,
        w: uf.w + 200,
        ᐃᐃⲆ: rs.ⲆᐃⵠⵠΔᐃⵠ + bl
      });
      for (var a = 0; Lw.ᐃⲆⲆΔᐃ > a; a++) {
        Vw.ⲆᐃΔΔ[a] = new sf(a);
      }
      Vw.ⲆᐃΔΔ[hk].ⲆΔΔⵠΔ(Sw.ᐃᐃⲆΔ);
      Vw.loaded = 1;
    };
    this.ΔⲆⲆΔⲆΔᐃⵠᐃ = function () {
      if (!this.transition && uf.ⲆⲆΔᐃᐃ.now < Lw.ⵠⵠΔⲆΔⲆⵠ) {
        this.transition = Zn;
      }
    };
    this.ⵠⲆᐃΔⲆ = function () {
      if (this.Δᐃᐃⵠᐃ && this.loaded) {
        for (var a in Vw.sample) {
          var b = Vw.sample[a];
          if (typeof b === "object") {
            for (var c = Xa; c < b.length; c++) {
              Vw.ᐃᐃΔⲆ[a].stop(b[c]);
            }
          } else {
            Vw.ᐃᐃΔⲆ[a].stop(b);
          }
        }
        for (c = ou; c < Vw.ⲆᐃΔΔ.length; c++) {
          Vw.ⲆᐃΔΔ[c].ᐃⵠⵠⲆⵠⲆΔ();
        }
      }
    };
    this.select = function () {
      if (Vw.Δᐃᐃⵠᐃ) {
        Vw.ⵠⲆᐃΔⲆ();
      } else {
        if (!Vw.loaded) {
          Vw.ⲆΔΔⵠΔ();
        }
        Vw.ⲆᐃΔΔ[dh].ᐃᐃⲆΔ = Sw.ᐃᐃⲆΔ;
        Vw.ⲆᐃΔΔ[0].ᐃΔⵠΔᐃᐃⲆ = 0;
        Vw.ΔⲆⲆΔⲆΔᐃⵠᐃ();
      }
      Vw.Δᐃᐃⵠᐃ = !Vw.Δᐃᐃⵠᐃ;
    };
  }();
  var mf = new function () {
    this.ⵠᐃΔⵠⵠⵠΔ = function () {
      this.ΔᐃᐃΔΔ = 81;
      this.ⵠⲆΔΔᐃ = 68;
      this.ⲆΔΔⲆⲆ = 90;
      this.ⲆⲆⲆᐃⲆⵠΔ = 83;
    };
    this.ⵠΔΔΔΔΔⲆ = function () {
      this.ΔᐃᐃΔΔ = 65;
      this.ⵠⲆΔΔᐃ = 68;
      this.ⲆΔΔⲆⲆ = 87;
      this.ⲆⲆⵠΔᐃ = 83;
    };
    this.ⵠΔᐃᐃⲆ = 0;
    this.ⲆⲆⲆᐃⲆⵠΔ = Dj;
    this.ⵠⵠΔΔΔᐃΔ = 49;
    this.ᐃΔΔⲆᐃᐃᐃ = 50;
    this.ΔΔΔⵠⵠΔΔ = 51;
    this.ⲆΔΔⵠᐃⵠⵠ = 52;
    this.ΔⵠᐃⵠᐃᐃⲆᐃᐃ = 53;
    this.ⲆⲆΔⲆΔⵠⲆ = 17;
    this.ᐃⲆⲆᐃΔⲆⵠ = 37;
    this.ΔᐃᐃⵠⵠⵠΔ = 39;
    this.ᐃΔᐃⵠⵠⲆⵠ = 38;
    this.ᐃΔΔⲆΔΔⵠ = 40;
    this.ᐃΔⵠⲆᐃᐃᐃ = 32;
    this.ΔΔᐃⵠΔᐃⵠ = 82;
    this.ⵠᐃⲆᐃΔⲆⲆ = 71;
    this.ᐃΔΔⵠⵠᐃᐃ = 86;
    this.Ⲇⵠⵠᐃᐃᐃᐃ = 66;
    this.ⵠΔΔΔΔΔⲆ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ⵠΔᐃᐃⲆ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ⵠΔᐃᐃⲆ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ΔᐃᐃΔΔ == b || b == this.ᐃⲆⲆᐃΔⲆⵠ) {
        this.ⵠⵠⵠΔΔⲆⵠ();
      } else if (this.ⲆΔΔⲆⲆ == b || b == this.ᐃΔᐃⵠⵠⲆⵠ) {
        this.ⵠⵠⲆⲆᐃⲆⵠ();
      } else if (b == this.ⲆⲆⲆᐃⲆⵠΔ || this.ⵠΔⲆⲆᐃᐃⵠⵠΔ == b) {
        this.ⵠΔΔⲆΔⵠⲆ();
      } else if (b == this.ⵠⲆΔΔᐃ || b == this.ΔᐃᐃⵠⵠⵠΔ) {
        this.ⲆⵠⲆᐃⲆΔⲆ();
      }
      this.keys[b] = this.ⲆⲆⲆᐃⲆⵠΔ;
      return b;
    };
    this.ⵠⵠⵠΔΔⲆⵠ = function () {
      this.keys[this.ⵠⲆΔΔᐃ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ΔᐃᐃⵠⵠⵠΔ] = this.ⵠΔᐃᐃⲆ;
    };
    this.ⲆⵠⲆᐃⲆΔⲆ = function () {
      this.keys[this.ΔᐃᐃΔΔ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ᐃⲆⲆᐃΔⲆⵠ] = this.ⵠΔᐃᐃⲆ;
    };
    this.ⵠΔΔⲆΔⵠⲆ = function () {
      this.keys[this.ⲆΔΔⲆⲆ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ᐃΔᐃⵠⵠⲆⵠ] = this.ⵠΔᐃᐃⲆ;
    };
    this.ⵠⵠⲆⲆᐃⲆⵠ = function () {
      this.keys[this.ⲆⲆⵠΔᐃ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ᐃΔΔⲆΔΔⵠ] = this.ⵠΔᐃᐃⲆ;
    };
    this.ΔⵠΔᐃᐃΔᐃ = function () {
      this.keys[this.ⵠⲆΔΔᐃ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ΔᐃᐃⵠⵠⵠΔ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ΔᐃᐃΔΔ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ᐃⲆⲆᐃΔⲆⵠ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ⲆΔΔⲆⲆ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ᐃΔᐃⵠⵠⲆⵠ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ⲆⲆⵠΔᐃ] = this.ⵠΔᐃᐃⲆ;
      this.keys[this.ᐃΔΔⲆΔΔⵠ] = this.ⵠΔᐃᐃⲆ;
    };
    this.ᐃΔΔᐃΔᐃΔ = function () {
      return this.keys[this.ΔᐃᐃΔΔ] || this.keys[this.ᐃⲆⲆᐃΔⲆⵠ];
    };
    this.ΔᐃⵠⲆΔΔⲆ = function () {
      return this.keys[this.ⵠⲆΔΔᐃ] || this.keys[this.ΔᐃᐃⵠⵠⵠΔ];
    };
    this.ⵠⵠⲆΔⲆⲆⲆ = function () {
      return this.keys[this.ⲆΔΔⲆⲆ] || this.keys[this.ᐃΔᐃⵠⵠⲆⵠ];
    };
    this.ᐃᐃᐃᐃⲆⵠⵠ = function () {
      return this.keys[this.ⲆⲆⵠΔᐃ] || this.keys[this.ᐃΔΔⲆΔΔⵠ];
    };
    this.ΔⲆΔᐃᐃᐃⲆᐃᐃ = function () {
      return this.keys[this.ⲆⲆΔⲆΔⵠⲆ];
    };
    this.ΔⲆᐃⲆΔᐃᐃⲆᐃ = function () {
      return this.keys[this.ⵠⵠΔΔΔᐃΔ];
    };
    this.ⵠΔⵠᐃⲆΔⲆᐃᐃ = function () {
      return this.keys[this.ᐃΔΔⲆᐃᐃᐃ];
    };
    this.ⲆΔΔᐃⲆᐃⵠⲆⵠ = function () {
      return this.keys[this.ΔΔΔⵠⵠΔΔ];
    };
    this.ᐃⵠΔᐃᐃΔΔᐃⲆ = function () {
      return this.keys[this.ⲆΔΔⵠᐃⵠⵠ];
    };
    this.ⲆⲆⵠⵠᐃⲆΔΔΔ = function () {
      return this.keys[this.ᐃΔⵠⲆᐃᐃᐃ];
    };
    this.ⲆΔⵠᐃᐃⵠⲆᐃΔ = function () {
      return this.keys[this.ΔΔᐃⵠΔᐃⵠ];
    };
    this.ᐃⲆⲆⲆᐃⵠⵠⲆΔ = function () {
      return this.keys[this.ⵠᐃⲆᐃΔⲆⲆ];
    };
    this.ᐃᐃΔΔⵠΔΔΔΔ = function () {
      return this.keys[this.ᐃΔΔⵠⵠᐃᐃ];
    };
    this.ΔΔΔΔᐃᐃⲆᐃⵠ = function () {
      return this.keys[this.Ⲇⵠⵠᐃᐃᐃᐃ];
    };
  }();
  var pf = new function () {
    this.ⲆⲆⲆᐃⲆⵠΔ = 0;
    this.ⵠΔᐃᐃⲆ = 1;
    this.IDLE = pn;
    this.ᐃⵠᐃⵠᐃⵠΔ = 0;
    this.ᐃⲆᐃΔᐃⵠⲆᐃΔ = 1;
    this.ⵠΔᐃΔ = {
      x: hk,
      y: gj
    };
    this.ⵠᐃⲆⲆᐃⵠⲆ = 0;
    this.ᐃᐃⲆⵠⵠΔΔ = ho;
    this.angle = 0;
    this.state = this.IDLE;
    this.ᐃⵠᐃᐃ = this.ᐃⵠᐃⵠᐃⵠΔ;
    this.down = function () {
      this.state = this.ⲆⲆⲆᐃⲆⵠΔ;
    };
    this.up = function () {
      this.state = this.ⵠΔᐃᐃⲆ;
    };
    this.ᐃᐃᐃ = function () {
      return (this.ⵠᐃⲆⲆᐃⵠⲆ != this.ⵠΔᐃΔ.x || this.ⵠΔᐃΔ.y != this.ᐃᐃⲆⵠⵠΔΔ) && (this.ⵠᐃⲆⲆᐃⵠⲆ = this.ⵠΔᐃΔ.x, this.ᐃᐃⲆⵠⵠΔΔ = this.ⵠΔᐃΔ.y, de);
    };
  }();
  var Cf = 0;
  var Ww = 0;
  var Xw = new function (e, f, i) {
    this.ⵠⵠ = e;
    this.Δ = f;
    this.ⲆⲆΔᐃⲆᐃᐃ = {
      translate: {
        x: Yl,
        y: 0
      },
      style: document.getElementById("loading").style,
      ᐃᐃᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆⲆΔᐃⲆᐃᐃ.style.position = "absolute";
    this.ⲆⲆΔᐃⲆᐃᐃ.style.display = "inline-block";
    this.ⲆⲆΔᐃⲆᐃᐃ.ᐃᐃᐃ();
    this.ⵠΔΔⲆⲆ = true;
    this.stop = function () {
      this.ⵠΔΔⲆⲆ = ol;
    };
    this.ⲆⲆΔⲆⲆⲆᐃ = {
      total: 1
    };
    var j = this;
    function k() { }
    var m = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || -El !== a.indexOf("player0")) {
        return 1;
      } else if (-Zn !== a.indexOf("day-bag") || -Zn !== a.indexOf("night-bag") || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || -Zn !== a.indexOf("night-accessory") || -og !== a.indexOf("day-crate") || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -Ws || a.indexOf("day-river") !== -1 || -uq !== a.indexOf("night-river") || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || -ck !== a.indexOf("day-rock") || a.indexOf("night-rock") !== -or || a.indexOf("day-flower") !== -1 || -Dj !== a.indexOf("night-flower") || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -$q || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -Ng || -$r !== a.indexOf("bigznight") || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -Dj || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -bt || -Th !== a.indexOf("avatar-player")) {
        return 0;
      } else {
        return y;
      }
    }
    this.ᐃᐃⲆⲆΔ = function () {
      j.ᐃᐃᐃ();
      if (++m == 40) {
        j.stop();
        k();
        return;
      }
      Vf.setTimeout(j.ᐃᐃⲆⲆΔ, 33);
    };
    this.ⵠⲆᐃΔⲆ = function (a) {
      k = a;
      j.ᐃᐃⲆⲆΔ();
    };
    new Date().getTime();
    Object.keys(Ⲇᐃ).length;
    console.log(eg, undefined);
    for (var o in Ⲇᐃ) {
      if (n(Ⲇᐃ[o]) === Eu) {
        0;
      }
    }
    console.log(dq, undefined);
    function p() {
      if (this.ⵠᐃᐃⵠΔⲆᐃ !== ka) {
        return this.ⵠᐃᐃⵠΔⲆᐃ;
      } else {
        this.ⵠᐃᐃⵠΔⲆᐃ = 2;
        this.src = this.ᐃⵠΔⲆΔ;
        return 0;
      }
    }
    function l(a) {
      this.ⵠᐃᐃⵠΔⲆᐃ = bq;
    }
    var g = Xa;
    function q() {
      console.log(undefined);
      if (g !== Dj) {
        g = 1;
        console.log(Zr);
        if (jt !== Ft) {
          jt();
        }
        Ft();
        var a = ⵠⲆᐃⲆ.ⵠΔᐃᐃΔᐃᐃ("server");
        if (a !== null) {
          ΔⵠⲆⲆ.ΔᐃΔⲆⵠΔᐃ = hj;
          ΔⵠⲆⲆ.ᐃᐃⵠⲆⵠ = [{
            nu: 0,
            m: Aq,
            i: "server" + a + ".starve.io",
            p: 443,
            a: "Private Server " + a,
            ssl: 1
          }];
        }
        ΔⵠⲆⲆ.ⵠⵠⵠⵠⵠᐃΔΔᐃ();
        setTimeout(i, Wo);
      }
    }
    function b() {
      let a = function () {
        ΔⵠⲆⲆ.ⵠᐃᐃΔΔⵠᐃ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ⲆⵠⲆⲆΔΔⲆ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆⵠⲆⲆΔΔⲆ}`, this);
      if (this.ⲆⵠⲆⲆΔΔⲆ > Ss) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⲆⵠⲆⲆΔΔⲆ;
      var b = this.src;
      var c = n(b) === Hb ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⵠᐃⲆᐃΔⵠΔ) {
          if (b.indexOf(ⵠᐃⲆᐃΔⵠΔ[c]) !== -1) {
            Ⲇᐃ[c] = new Image();
            Ⲇᐃ[c].onload = l;
            Ⲇᐃ[c].onerror = s;
            Ⲇᐃ[c].ⲆⵠⲆⲆΔΔⲆ = a;
            Ⲇᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function d(a) {
      for (var b in Ⲇᐃ) {
        var c = Ⲇᐃ[b];
        if (typeof c === "string" && n(c) === a) {
          Ⲇᐃ[b] = new Image();
          Ⲇᐃ[b].ⵠᐃᐃⵠΔⲆᐃ = 0;
          Ⲇᐃ[b].ⲆⵠⲆⲆΔΔⲆ = Et;
          Ⲇᐃ[b].onload = l;
          Ⲇᐃ[b].onerror = s;
          Ⲇᐃ[b].ⲆᐃⵠⵠⵠᐃⲆ = p;
          Ⲇᐃ[b].ᐃⵠΔⲆΔ = c;
        }
      }
    }
    d(1);
    d(Et);
    uu(Zn, "l", Lg, "#000");
    b();
    Ic();
    this.ᐃᐃᐃ = function () {
      this.ⲆⲆΔᐃⲆᐃᐃ.translate.x = (Oo - 500) / 2;
      this.ⲆⲆΔᐃⲆᐃᐃ.translate.y = (cq - 150) / 2;
      var a = 2500 / (40 - m + og) - 48;
      this.ⲆⲆΔᐃⲆᐃᐃ.translate.y -= a;
      this.ⲆⲆΔᐃⲆᐃᐃ.ᐃᐃᐃ();
    };
    this.ⲆⲆΔᐃⲆᐃᐃ.ᐃᐃᐃ();
    this.ᐃⵠΔⲆ = function () {
      try {
        sm();
      } catch (a) { }
      this.ᐃᐃᐃ();
    };
  }(Ro, Lo, function () {
    um();
    Uw = new Gw(Ro, Lo);
    (hf = new Ew(Ro, Lo)).ᐃᐃⲆⲆⵠⲆΔᐃⵠ();
    Tw = new Hw(Ro, Lo);
    uf = new nw();
    Sw = new Aw();
    Xw.ⵠⲆᐃΔⲆ(function () {
      Xw.ⲆⲆΔᐃⲆᐃᐃ.style.display = "none";
      hf.Δᐃᐃⵠᐃ();
    });
  });
  function zf() {
    try {
      Vf.Widget.adsRefresh();
    } catch (a) { }
  }
  Vf.onbeforeunload = function () {
    if (Uw.ⵠΔΔⲆⲆ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Hr();
  (function b(a) {
    Vf.requestAnimationFrame(b);
    Cf = (a - Ww) / 1000;
    Ww = a;
    Cf = Cf > 1 ? og : Cf;
    if (Uw.ⵠΔΔⲆⲆ) {
      Uw.ᐃⵠΔⲆ();
    } else {
      Lo.clearRect(0, 0, Oo, cq);
      if (Xw.ⵠΔΔⲆⲆ) {
        Xw.ᐃⵠΔⲆ();
      } else if (hf.ⵠΔΔⲆⲆ) {
        hf.ᐃⵠΔⲆ();
      } else if (Tw.ⵠΔΔⲆⲆ) {
        Tw.ᐃⵠΔⲆ();
      }
    }

    //this.ᐃΔΔᐃΔᐃΔ = function () {
    //  return this.keys[this.ΔᐃᐃΔΔ] || this.keys[this.ᐃⲆⲆᐃΔⲆⵠ];
    //};
    //this.ΔᐃⵠⲆΔΔⲆ = function () {
    //  return this.keys[this.ⵠⲆΔΔᐃ] || this.keys[this.ΔᐃᐃⵠⵠⵠΔ];
    //};
    //this.ⵠⵠⲆΔⲆⲆⲆ = function () {
    //  return this.keys[this.ⲆΔΔⲆⲆ] || this.keys[this.ᐃΔᐃⵠⵠⲆⵠ];
    //};
    //this.ᐃᐃᐃᐃⲆⵠⵠ = function () {
    //  return this.keys[this.ⲆⲆⵠΔᐃ] || this.keys[this.ᐃΔΔⲆΔΔⵠ];
    //};

    if (Spectator) {
      if (mf.ᐃᐃᐃᐃⲆⵠⵠ()) Sw.ᐃΔΔⵠ.y -= 50;
      if (mf.ⵠⵠⲆΔⲆⲆⲆ()) Sw.ᐃΔΔⵠ.y += 50;
      if (mf.ΔᐃⵠⲆΔΔⲆ()) Sw.ᐃΔΔⵠ.x -= 50;
      if (mf.ᐃΔΔᐃΔᐃΔ()) Sw.ᐃΔΔⵠ.x += 50;
    }
  })(0);
  var yf = Bs;
  function Yw() {
    Pf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Gh);
    Pf.send();
  }
  var Pf = new XMLHttpRequest();
  Pf.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var Af = "https://token.starve.io/";
  var kf = "https://token2.starve.io/";
  var xf = 0;
  var Jf = 1;
  var Mf = undefined;
  var Zw = wl;
  var $w = undefined;
  var _w = dt;
  Vf.ᐃⵠᐃΔΔⵠΔ = function () {
    _w = y;
  };
  var ax = {
    ⵠⲆⲆⵠⵠΔΔΔⵠ: "ACCESS_TOKEN"
  };
  var Sf = document.createElement("script");
  Sf.type = "text/javascript";
  Sf.async = true;
  Sf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Sf.addEventListener("load", function (a) {
    Vf.XPayStationWidget.init(ax);
    Vf.XPayStationWidget.on("status-done", Lf);
  }, ej);
  document.getElementsByTagName("head")[0].appendChild(Sf);
  Vf.fbAsyncInit = function () {
    Hf();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[Ob];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Qf = undefined;
  var bx = undefined;
  function cx() {
    Vf.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Qf = a).isSignedIn.listen(Rf);
      Qf.currentUser.listen(jf);
      if (Qf.isSignedIn.get()) {
        Qf.signIn();
      }
      Gf();
    });
  }
  function Rf(a) { }
  function jf(a) {
    Hf();
    if (Zw === undefined && pl !== bx) {
      Zw = bx.getAuthResponse().id_token;
      console.log(undefined, undefined);
      if (Zw !== undefined) {
        Mf = xf;
        Vf.ᐃⵠᐃΔΔⵠΔ($w);
      }
    }
    if (pl !== a && a.isSignedIn() === Pl) {
      bx = a;
      Vf.ᐃⵠᐃΔΔⵠΔ(a.id);
    }
  }
  function Gf() {
    if (Qf) {
      bx = Qf.currentUser.get();
    }
  }
  function Lf() {
    var a = new XMLHttpRequest();
    a.open("GET", Af + "claimBread?userid=" + $w);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          hf.ᐃⵠⲆⵠΔ = b;
        }
      }
    };
    a.send();
  }
  function Wf() {
    if (hf.ᐃⵠⲆⵠΔ >= 300 || Yl >= hf.ⲆⲆⵠΔᐃⵠⵠ) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= aq) {
        var b = new XMLHttpRequest();
        b.open("GET", Af + "changeNickname?token=" + Zw + "&userid=" + $w + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (lt < a) {
              hf.ᐃⵠⲆⵠΔ -= a;
            }
            hf.ⲆⲆⵠΔᐃⵠⵠ = hj;
            hf.ⲆⵠΔΔ(hf.ⲆⵠⵠⲆⲆ);
          }
        };
        b.send();
      }
    }
  }
  function Of(a, b) {
    if (hf.ⵠⵠⲆᐃΔ <= 0) {
      if (hf.ᐃⵠⲆⵠΔ < b) {
        hf.ⲆⵠΔΔ(hf.ΔᐃⵠᐃΔ);
      } else {
        hf.ⵠⵠⲆᐃΔ = 2;
        hf.ΔⵠⵠᐃⲆⵠᐃ = 0;
        hf.ⲆΔᐃⵠᐃⲆⵠ = k;
        var c = new XMLHttpRequest();
        c.open("GET", Af + "buySpin?token=" + Zw + "&userid=" + $w + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              hf.ΔⵠΔⵠⲆΔⵠⲆⲆ(Math.PI * a.rand * kg, a.type, a.id);
              hf.ᐃⵠⲆⵠΔ -= b;
            } else {
              hf.ⵠⵠⲆᐃΔ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Nf(a, b, c, d) {
    a = a === undefined ? hf.ⵠⵠⵠⲆⲆΔⵠ : a;
    b = b === undefined ? hf.ⲆⲆⲆⵠⵠⲆᐃ : b;
    c = Kk === c ? hf.ⵠⲆⵠⵠΔΔᐃ : c;
    d = d === undefined ? hf.ᐃΔΔⲆⵠΔᐃ : d;
    if (hf.ⵠⵠⵠⲆⲆΔⵠ !== a || hf.ⲆⲆⲆⵠⵠⲆᐃ !== b || hf.ⵠⲆⵠⵠΔΔᐃ !== c || hf.ᐃΔΔⲆⵠΔᐃ !== d) {
      hf.ⵠⵠⵠⲆⲆΔⵠ = a;
      hf.ⲆⲆⲆⵠⵠⲆᐃ = b;
      hf.ⵠⲆⵠⵠΔΔᐃ = c;
      hf.ᐃΔΔⲆⵠΔᐃ = d;
      if (hf.ᐃⵠΔᐃⵠⲆⵠ === d) {
        d = "0";
      } else if (d === hf.ᐃⵠⲆⲆⵠⵠⲆ) {
        d = "1";
      } else if (d === hf.ΔΔΔⵠᐃᐃᐃ) {
        d = "2";
      } else if (d === hf.ⲆΔᐃⲆᐃⲆⵠ) {
        d = "3";
      } else if (hf.ΔⵠᐃΔᐃᐃᐃ === d) {
        d = "4";
      } else if (hf.ⵠΔᐃⵠΔΔΔ === d) {
        d = "5";
      }
      if (hf.ΔᐃⵠΔΔⲆΔ === b) {
        b = "total";
      } else if (hf.ⲆⲆⲆΔⵠⲆᐃ === b) {
        b = "normal";
      } else if (b === hf.ⲆΔⵠᐃⵠᐃⵠ) {
        b = "zombie";
      } else if (hf.ᐃᐃΔᐃᐃΔⵠ === b) {
        b = "vampire";
      } else if (hf.ᐃⵠΔⲆⲆⵠⵠ === b) {
        b = "forest";
      }
      if (hf.ᐃΔⵠᐃᐃⲆⲆ === a) {
        a = "all";
      }
      if (hf.ΔΔᐃΔΔⵠᐃ === a) {
        a = "week";
      }
      if (a === hf.ⵠⲆΔΔⵠⲆⵠ) {
        a = "today";
      }
      if (hf.ⲆΔΔΔᐃⲆⵠ === c) {
        c = "kill";
      } else if (hf.ⲆᐃΔⲆᐃⵠⲆ === c) {
        c = "score";
      } else if (hf.ⲆᐃⵠᐃⵠⵠΔ === c) {
        c = "time";
      }
      var e = new XMLHttpRequest();
      e.open("GET", Af + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      e.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && e.responseText !== "0") {
          for (var a = JSON.parse(e.responseText), b = "", c = fs; c < a.length; c++) {
            ⲆⵠⵠᐃⲆ = a[c];
            var d = ⲆⵠⵠᐃⲆ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = Vf.decodeURIComponent(Vf.escape(Vf.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + El + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += hf.ⲆⲆΔⲆⲆⵠⵠ(ⲆⵠⵠᐃⲆ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⲆⵠⵠᐃⲆ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⲆⵠⵠᐃⲆ[Qa] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⲆⵠⵠᐃⲆ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      e.send();
    }
  }
  function qf(a, b) {
    if (b > hf.ᐃⵠⲆⵠΔ) {
      hf.ⲆⵠΔΔ(hf.ΔᐃⵠᐃΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Af + "buyKit?token=" + Zw + "&userid=" + $w + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          hf.ᐃⵠⲆⵠΔ -= b;
          hf.ⵠⵠᐃΔⵠ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Hf() {
    Vf.FB.init({
      xfbml: true,
      cookie: true,
      appId: "642017356260407",
      version: "v15.0"
    });
    if ($w === undefined) {
      (function () {
        try {
          if (Vf.FB && Vf.FB.getUserID()) {
            $w = Vf.FB.getUserID();
            if (Zw === pa) {
              Vf.FB.getLoginStatus(function () {
                Mf = Jf;
                Zw = Vf.FB.getAuthResponse().accessToken;
                Vf.ᐃⵠᐃΔΔⵠΔ($w);
              });
            }
          }
        } catch (a) { }
        try {
          $w = bx.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  function Uf(a) {
    if ($w) {
      var b = new XMLHttpRequest();
      b.open("GET", Af + "xsolla?userid=" + $w + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          ax.access_token = b.responseText;
          Vf.XPayStationWidget.init(ax);
          Vf[fj[Sr]].open();
        }
      };
      b.send();
    }
  }
  function Yf(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Af + "setRegion?token=" + Zw + "&userid=" + $w + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          hf.ⲆⵠΔΔ(hf.ⵠΔⵠΔΔ);
        } else {
          hf.ⲆⵠΔΔ(hf.ᐃⵠᐃᐃΔ);
        }
      }
    };
    b.send();
  }
  Vf.onload = function () {
    Vf.gapi.load("auth2", cx);
  };
})();
