(function () {
  const aj = window;
  let bj = 243;
  var cj = 178;
  if (cj > 12) {
    cj = 123;
  }
  const dj = function (b) {
    let c = "";
    for (let d = 0; d < b.length; d++) {
      c += aj.String.fromCharCode(b[d] ^ bj++ % 255);
    }
    return c;
  };
  ᐃⲆ = [[169, 198, 163, 198, 165, 175, 129, 150, 153, 171, 171, 139, 100, 73, 76, 64, 97, 83, 84, 111, 82, 57, 63, 99, 110, 90, 91, 50], [114, 86, 68, 33, 78, 66, 97, 42], [124, 94, 35, 108], [126, 90, 39, 117, 121, 121, 112, 83, 70, 23, 18, 26], [114, 113, 112, 71, 78, 67, 127, 18], [106, 92, 94, 64, 86, 115, 124, 91, 97, 10, 107, 6], [94, 106, 120, 11, 18, 6, 46, 57, 32, 2, 0, 50, 17, 123, 31, 118], [47, 127, 38, 63, 10, 63, 3, 110], [48, 18, 111, 57, 2, 107, 34, 55, 13, 111, 38, 55, 3, 82, 47, 94], [7, 8, 48, 19, 10, 90, 48, 7, 61, 95, 22, 7, 19, 66, 63, 78], [45, 45, 56, 7, 26, 30, 71, 70], [38, 58, 40, 77, 225, 214, 204, 239, 209, 194, 234, 179, 210, 222, 242, 216, 213, 213, 220, 255, 242, 230, 175, 174], [247, 166, 220, 253], [251, 244, 204, 225, 248, 218, 167, 230, 250, 240, 159, 158], [254, 194, 155, 154], [241, 155, 236, 222, 245, 159, 248, 220, 225, 230, 135, 195, 214, 226, 240, 135, 217, 238, 131, 206, 238, 211, 244, 215, 162, 150, 151, 254], [157, 247, 255, 178, 146, 156, 243, 250, 168, 138, 152, 182, 130, 227, 148, 163, 182, 178, 235, 234], [187, 180, 227, 168, 190, 154, 231, 178, 186, 138, 184, 139, 189, 214, 180, 145, 139, 142, 215, 214], [142, 223, 219, 152, 169, 169, 164, 137, 174, 164, 203, 202], [154, 203, 207, 140, 158, 186, 184, 53], [98, 111, 85, 124, 97, 81, 81, 114, 109, 79, 77, 121, 108, 89, 62, 120, 117, 85, 127, 98, 119, 125, 77, 97, 64, 77, 42, 112], [127, 89, 38, 74, 64, 85, 30, 25], [71, 113, 30, 26, 115, 124, 121, 90], [79, 105, 67, 69, 107, 101, 117, 77, 96, 91, 113, 76, 90, 124, 105, 74, 107, 83, 121, 51, 37, 21, 21, 6, 33, 0, 21, 56, 43, 29, 30, 113], [46, 6, 5, 38, 53, 21, 106, 100, 48, 14, 21, 52], [0, 13, 35, 48, 62, 48, 14, 93], [0, 53, 86, 17, 63, 62, 45, 48, 8, 61, 57, 92, 12, 47, 82, 77], [18, 64, 37, 68, 32, 27, 33, 0, 29, 45, 45, 6, 25, 59, 23, 236, 216, 213, 209, 232, 230, 225, 186, 181], [208, 221, 217, 231, 223, 214, 213, 252, 243, 252, 193, 217, 244, 206, 217, 168, 195, 205, 174, 240, 254, 249, 162, 157], [248, 204, 245, 205, 252, 203, 223, 196, 202, 221, 150, 145], [204, 156, 249, 133], [210, 129, 229, 221, 236, 238, 253, 193, 224, 226, 208, 129], [231, 140, 199, 182, 152, 175, 133, 183, 148, 244, 254, 188, 170, 141, 242, 182, 172, 150, 157, 188, 133, 225, 145, 184, 182, 187, 145, 232, 184, 141, 226, 169], [191, 153, 230, 138, 128, 208, 181, 143], [188, 190, 165, 159, 139, 162, 128, 209], [140, 182, 189, 156, 147, 170, 190, 201], [175, 196, 161, 200, 171, 173, 131, 144, 159, 169, 86, 116, 102, 70, 78, 48, 85, 80, 89, 52], [105, 102, 96, 99, 111, 71, 65, 44], [65, 127, 90, 69, 66, 112, 37, 36], [121, 118, 74, 103, 68, 71, 113, 28], [120, 78, 29, 80, 66, 111, 101, 20], [73, 24, 126, 84, 76, 29, 68, 93, 103, 0, 102, 0, 84, 112, 109, 4], [111, 115, 118, 75, 92, 104, 44, 59, 24, 18, 121, 120], [28, 117, 30, 121, 28, 12, 32, 57, 20, 23, 32, 39, 48, 62, 2, 5, 12, 58, 2, 35, 0, 3, 13, 96], [4, 7, 8, 22, 0, 80, 46, 85, 5, 16, 85, 84], [14, 44, 85, 40, 55, 55, 34, 25, 36, 37, 62, 56], [21, 48, 62, 72, 25, 73, 41, 64], [28, 77, 181, 232, 216, 212, 222, 243, 229, 234, 222, 184, 232, 230, 244, 251, 215, 216, 193, 172], [246, 219, 222, 253, 244, 249, 214, 234, 195, 195, 206, 241], [250, 199, 238, 205, 193, 200, 226, 203, 252, 240, 157, 153], [249, 252, 153, 157, 225, 234, 246, 200, 209, 222, 242, 128], [239, 133, 208, 209, 217, 208, 242, 203, 228, 248, 149, 252], [160, 174, 130, 177, 156, 150, 245, 244], [147, 249, 164, 165, 173, 164, 150, 225], [177, 225, 146, 161, 181, 144, 160, 181], [140, 233, 138, 180, 143, 135, 174, 155, 184, 180, 213, 140, 132, 175, 131, 212], [136, 216, 174, 129, 140, 136, 205, 204], [171, 193, 205, 143], [172, 197, 174, 201, 172, 188, 144, 137, 164, 81, 60, 63], [90, 92, 87, 54, 94, 95, 71, 120], [82, 62, 117, 98, 86, 72, 91, 65, 73, 67, 91, 38], [116, 43, 79, 115, 120, 47, 79, 103, 126, 119, 20, 76], [117, 115, 73, 83, 67, 108, 65, 104, 72, 66, 103, 70, 74, 97, 12, 15], [80, 7, 103, 94, 83, 127, 108, 7], [97, 14, 107, 14, 106, 45, 23, 56, 32, 3, 124, 51, 36, 122, 31, 3, 17, 27, 11, 37, 21, 8, 24, 111], [0, 3, 96, 102, 26, 12, 3, 24, 56, 50, 23, 54, 58, 49, 92, 95], [7, 35, 9, 18, 61, 61, 63, 31, 49, 45, 80, 83], [53, 29, 72, 24, 23, 44, 56, 75], [22, 74, 47, 79, 42, 78, 68, 21, 37, 209, 188, 191], [210, 220, 207, 255, 222, 208, 226, 183], [239, 190, 225, 229, 235, 215, 246, 175], [201, 211, 249, 236, 244, 223, 225, 242, 254, 205, 160, 163], [198, 247, 217, 209], [192, 151, 247, 223, 197, 154, 221, 198, 253, 235, 251, 154, 203, 241, 140, 143], [234, 134, 205, 218, 238, 224, 243, 239, 218, 235, 140, 210, 221, 243, 151, 242], [154, 246, 189, 176, 164, 250, 159, 155, 146, 148, 159, 161], [172, 151, 151, 226, 178, 149, 232, 235], [180, 234, 161, 170, 130, 238, 136, 227], [141, 141, 153, 148, 186, 188, 180, 156, 170, 131, 175, 147, 136, 129, 171, 219], [182, 167, 196, 156, 145, 179, 160, 203], [174, 203, 179, 150, 162, 164, 175, 146, 85, 70, 68, 118, 102, 104, 80, 126], [81, 59, 92, 123, 110, 76, 51, 50], [117, 69, 91, 46], [117, 120, 47, 103, 122, 126, 39, 38], [120, 90, 114, 107, 122, 118, 27, 18, 64, 100, 27, 26], [124, 71, 124, 95, 117, 64, 120, 86], [105, 105, 96, 69, 109, 82, 11, 10], [90, 126, 108, 86, 88, 124, 3, 2], [35, 44, 20, 41, 32, 4, 123, 122], [16, 120, 115, 122, 46, 35, 12, 63, 50, 54, 111, 110], [14, 56, 58, 36, 58, 31, 20, 107, 57, 10, 38, 51], [1, 57, 48, 15, 6, 52, 91, 90], [12, 46, 83, 63, 8, 37, 36, 31, 18, 28, 17, 78], [34, 34, 26, 2, 28, 61, 63, 73, 45, 37, 52, 6, 217, 217, 233, 190], [231, 205, 204, 235, 234, 206, 179, 227, 214, 204, 179, 178], [243, 252, 196, 233, 247, 210, 175, 226, 251, 171, 207, 166], [197, 175, 167, 233, 193, 147, 206, 207], [254, 151, 240, 151], [202, 238, 236, 222, 246, 158, 248, 199, 234, 131, 231, 142], [214, 242, 143, 193, 219, 248, 135, 134], [216, 143, 248, 207, 164, 134, 174, 182, 158, 178, 251, 250], [171, 164, 156, 184, 150, 154, 136, 181, 138, 128, 239, 238], [142, 231, 144, 167, 186, 190, 231, 230], [132, 236, 231, 181, 130, 211, 154, 144, 190, 178, 168, 215], [139, 219, 188, 219, 186, 128, 168, 156, 148, 166, 164, 177, 144, 179, 164, 135, 154, 174, 175, 198], [165, 165, 180, 106], [98, 48, 85, 52, 83, 65, 107, 124, 83, 93, 50, 61, 105, 79, 50, 45], [114, 32, 69, 103, 79, 65, 89, 40], [122, 93, 119, 105, 71, 105, 34, 29], [64, 106, 105, 72, 127, 65, 26, 21], [75, 109, 109, 69, 119, 121, 88, 13], [80, 101, 98, 9], [87, 4, 2, 83, 90, 87, 2, 75], [103, 12, 105, 112, 16, 112, 122, 49, 33, 1, 17, 124, 45, 11, 118, 113], [41, 9, 25, 42, 53, 19, 110, 105], [15, 17, 1, 50, 59, 104, 9, 48, 12, 6, 9, 11, 0, 53, 90, 33, 60, 62, 53, 0], [51, 45, 61, 6, 15, 92, 61, 28, 39, 36, 57, 62, 36, 68, 78, 12, 26, 61, 66, 9, 39, 41, 74, 176], [226, 177, 209, 242, 230, 199, 186, 181], [235, 184, 190, 250, 238, 201, 217, 229], [243, 160, 166, 224, 207, 206, 217, 226, 192, 205, 255, 240], [199, 207, 162, 157], [197, 207, 207, 200, 193, 209, 154, 149], [243, 237, 146, 198, 201, 249, 158, 220, 211, 220, 226, 137], [214, 219, 225, 210, 219, 136, 142, 201, 231, 233, 241, 240], [163, 154, 149, 244, 159, 145, 150, 245], [144, 157, 153, 167, 156, 252, 183, 184, 178, 225, 158, 233], [183, 129, 238, 179, 131, 139, 230, 225], [140, 134, 137, 139, 128, 181, 218, 160, 135, 212, 210, 216, 179, 178, 131, 220], [183, 166, 185, 137, 168, 170, 161, 132, 151, 196, 195, 197], [160, 200, 131, 138, 158, 204, 85, 60], [91, 110, 82, 53, 95, 86, 53, 52], [105, 56, 74, 116, 106, 78, 45, 44], [112, 84, 45, 125, 76, 80, 78, 114], [121, 41, 112, 104], [124, 72, 102, 21], [65, 17, 114, 86, 124, 112, 102, 25, 112, 124, 126, 103, 76, 66, 98, 93, 87, 114, 9, 8], [84, 96, 110, 81, 89, 8, 106, 68, 100, 105, 18, 45, 39, 11, 21, 120], [19, 116, 26, 48, 43, 28, 121, 35], [42, 125, 22, 40, 48, 52, 105, 104], [14, 102, 97, 46, 59, 12, 104, 96], [7, 8, 46, 81, 3, 52, 93, 16], [63, 63, 34, 3, 60, 44, 84, 80], [55, 93, 73, 4, 40, 38, 77, 68, 18, 48, 46, 0, 43, 44, 73, 19, 28, 56, 213, 188], [224, 177, 177, 232, 223, 208, 218, 229], [238, 211, 194, 225, 237, 228, 232, 249, 240, 254, 240, 164, 207, 192, 252, 245], [192, 211, 214, 245, 250, 175, 204, 213, 251, 244, 192, 201], [252, 255, 226, 208, 200, 152, 229, 144], [205, 157, 220, 223, 208, 212, 137, 136], [212, 133, 140, 132], [222, 227, 253, 128], [221, 210, 150, 172, 144, 132, 168, 191, 162, 128, 142, 188, 147, 249, 153, 240], [172, 253, 229, 187, 176, 225, 225, 229, 140, 143, 176, 233, 184, 140, 138, 168, 186, 142, 221, 220], [184, 142, 162, 142, 188, 182, 213, 212], [139, 188, 217, 152, 180, 183, 186, 184, 168, 164, 152, 155, 151, 191, 169, 196], [153, 201, 170, 205, 170, 51, 75, 114, 89, 83, 48, 54, 94, 80, 91, 122, 105, 62, 57, 51], [85, 71, 36, 121], [71, 67, 83, 38, 118, 89, 36, 39], [122, 75, 40, 107, 69, 120, 107, 107, 117, 97, 20, 107], [69, 111, 16, 66, 113, 109, 16, 19], [77, 2, 4, 72, 87, 115, 12, 65], [84, 85, 111, 78, 89, 15, 103, 82], [101, 7, 23, 56, 39, 3, 41, 51, 30, 16, 27, 58, 41, 126, 121, 115], [46, 7, 100, 40, 9, 12, 31, 102, 6, 53, 15, 55, 57, 111, 23, 50], [60, 82, 9, 18, 57, 10, 55, 42, 61, 48, 2, 87], [8, 43, 43, 27, 13, 29, 29, 7, 41, 68, 68, 0, 45, 63, 47, 9], [34, 78, 5, 14, 37, 215, 180, 178, 208, 195, 211, 246, 221, 186, 225, 186], [233, 191, 199, 254, 213, 199, 164, 162, 202, 204, 199, 230, 245, 170, 173, 167], [194, 174, 164, 235, 197, 245, 205, 215, 193, 201, 243, 223, 246, 255, 156, 196, 201, 235, 248, 147], [204, 130, 231, 130], [210, 227, 128, 204, 211, 255, 255, 207, 223, 251, 209, 214, 219, 135, 148, 255], [154, 246, 131, 179, 146, 143, 177, 162, 174, 154, 159, 251, 172, 151, 132, 239], [138, 140, 135, 190, 181, 178, 144, 231], [185, 238, 232, 170, 187, 184, 179, 142], [128, 214, 163, 146, 132, 175, 145, 134, 190, 129, 171, 222, 181, 161, 204, 207], [151, 179, 204, 160, 161, 189, 183, 174, 159, 180, 183, 142, 98, 108, 97, 62], [101, 82, 51, 108, 82, 81, 98, 91, 86, 106, 51, 50], [73, 124, 126, 102, 78, 84, 43, 42], [125, 93, 95, 38], [127, 112, 72, 101, 67, 102, 27, 86, 71, 23, 112, 114, 77, 113, 104, 71], [79, 31, 23, 30, 83, 92, 124, 95], [110, 116, 11, 10], [97, 11, 3, 80, 102, 108, 3, 2], [36, 9, 46, 52, 30, 20, 123, 122], [25, 17, 28, 32, 45, 26, 118, 114], [50, 22, 62, 41, 48, 18, 0, 34, 2, 1, 19, 102], [62, 111, 107, 51, 2, 12, 48, 15, 62, 36, 91, 90], [57, 4, 6, 5, 63, 58, 91, 95, 62, 27, 32, 49, 23, 27, 60, 31, 29, 40, 71, 70], [29, 58, 18, 10, 228, 192, 191, 190], [221, 183, 254, 247, 210, 222, 191, 187, 219, 204, 179, 178], [244, 252, 212, 224, 240, 194, 195, 170], [252, 222, 163, 171, 197, 202, 233, 162], [246, 147, 244, 202, 241, 151, 159, 205, 201, 155, 252, 155], [245, 159, 214, 153, 253, 203, 251, 142], [238, 226, 131, 223, 225, 212, 194, 215, 230, 252, 131, 130], [163, 175, 169, 254], [165, 247, 144, 242, 171, 129, 128, 167, 175, 254, 131, 242], [138, 191, 152, 165, 182, 132, 235, 234], [129, 183, 140, 235, 184, 154, 231, 170], [179, 182, 211, 139, 190, 215, 179, 218], [187, 188, 184, 166, 190, 188, 211, 210], [147, 182, 138, 155, 144, 178, 172, 129, 155, 148, 202, 198], [157, 186, 146, 110, 96, 67, 62, 57], [81, 52, 77, 121, 83, 93, 69, 60], [111, 99, 73, 34, 112, 69, 119, 124, 113, 81, 46, 97], [123, 93, 119, 105, 71, 72, 123, 80, 123, 106, 113, 75], [68, 126, 105, 106, 74, 68, 97, 68, 72, 127, 18, 13], [83, 1, 113, 92, 108, 4, 91, 8, 92, 107, 6, 1], [104, 123, 84, 125], [24, 47, 21, 114, 36, 17, 17, 49, 24, 121, 29, 53, 41, 35, 25, 5, 51, 37, 110, 105], [55, 17, 110, 107], [11, 15, 106, 13, 11, 24, 52, 93], [57, 83, 90, 29, 1, 46, 53, 24, 49, 88, 33, 4, 14, 92, 58, 77], [40, 42, 49, 3, 35, 27, 33, 1, 26, 72, 23, 10, 31, 25, 66, 189], [226, 197, 197, 253, 223, 209, 178, 184, 221, 231, 178, 231, 215, 223, 178, 173], [200, 160, 235, 228, 207, 193, 162, 168, 206, 203, 166, 161], [249, 243, 166, 211, 197, 245, 146, 200], [196, 254, 233, 231, 240, 255, 159, 145], [244, 217, 146, 141], [232, 229, 249, 206], [239, 238, 249, 210, 224, 226, 249, 208], [228, 140, 134, 181, 163, 175, 149, 174, 161, 135, 250, 245], [170, 141, 242, 182, 172, 150, 157, 160, 179, 224, 231, 233], [182, 229, 133, 161, 184, 141, 238, 178, 188, 137, 133, 213], [183, 181, 143, 145, 129, 162, 170, 145, 184, 178, 161, 149, 180, 182, 132, 205], [168, 193, 185, 152, 172, 174, 165, 148, 168, 148, 173, 145, 167, 147, 86, 120], [97, 75, 78, 105, 98, 106, 94, 124, 110, 78, 94, 97, 84, 98, 86, 32, 112, 91, 69, 40], [117, 37, 78, 117, 64, 90, 33, 32], [124, 72, 102, 21, 116, 100, 29, 20, 127, 21, 64, 120, 72, 25, 64, 88, 74, 103, 125, 12], [80, 0, 118, 5, 87, 96, 1, 76, 89, 76, 1, 0], [100, 104, 117, 43, 32, 113, 22, 41, 16, 17, 2, 3, 27, 121, 117, 57, 45, 8, 105, 36, 8, 4, 97, 101], [12, 57, 18, 47, 56, 14, 18, 50, 7, 7, 42, 37, 0, 81, 54, 9], [5, 32, 46, 16, 9, 89, 57, 80], [55, 92, 58, 29, 43, 43, 38, 25], [47, 68, 46, 0, 25, 22, 42, 8, 26, 57, 210, 241, 224, 212, 209, 184], [228, 192, 228, 252, 208, 222, 252, 251, 239, 216, 164, 172], [200, 196, 161, 254, 204, 192, 201, 164], [249, 220, 228, 245, 199, 173, 246, 206, 192, 145, 220, 206, 252, 255, 225, 148], [255, 238, 149, 231, 250, 195, 226, 229], [208, 228, 242, 194, 213, 240, 212, 204, 224, 204, 129, 128], [228, 210, 249, 180, 166, 130, 249, 248], [156, 245, 158, 249, 155, 166, 245, 252, 172, 162, 130, 161, 176, 190, 176, 145, 180, 144, 180, 181, 184, 181, 142, 142, 132, 136, 174, 209], [128, 180, 162, 213, 191, 213, 143, 212], [137, 217, 186, 221, 187, 168, 201, 139, 147, 171, 166, 133, 148, 197, 204, 196], [152, 172, 197, 150, 159, 87, 91, 55], [97, 67, 60, 112, 100, 77, 95, 127, 81, 77, 48, 51], [86, 34, 40, 103, 112, 38, 44, 101, 77, 73, 36, 39], [120, 113, 75, 100, 124, 103, 24, 87, 64, 22, 115, 115, 125, 112, 65, 26], [73, 107, 65, 91, 117, 102, 99, 68], [80, 7, 119, 69, 86, 111, 119, 86], [89, 14, 8, 71, 101, 23, 7, 41, 38, 28, 11, 118, 30, 16, 27, 38, 18, 126, 37, 38, 45, 61, 53, 62], [49, 3, 3, 34, 53, 107, 19, 111], [2, 111, 23, 50, 6, 56, 51, 14, 49, 51, 29, 10, 5, 63, 63, 31, 15, 45, 80, 83], [12, 55, 55, 7], [16, 70, 59, 30, 21, 63, 44, 71], [24, 27, 64, 67], [28, 199, 249, 234, 230, 213, 184, 187], [221, 229, 229, 249, 233, 202, 223, 226, 234, 216, 192, 175], [202, 204, 215, 225, 205, 207, 172, 241, 202, 174, 245, 238, 253, 231, 240, 159], [246, 201, 243, 200, 245, 240, 193, 221], [201, 251, 193, 158, 245, 232, 251, 255, 210, 227, 132, 198, 211, 249, 132, 135], [225, 210, 247, 210, 229, 152, 177, 174], [154, 246, 189, 174, 166, 159, 248, 166, 145, 141, 240, 243], [174, 135, 224, 186, 137, 230, 131, 133, 141, 143, 236, 177, 129, 132, 151, 174, 189, 141, 130, 223], [129, 163, 220, 144, 132, 174, 167, 218, 178, 180, 167, 222], [181, 194, 137, 132, 170, 153, 179, 133, 166, 175, 129, 141, 154, 187, 184, 195], [100, 86, 55, 112, 102, 55, 72, 117], [81, 59, 51, 126, 104, 69, 68, 121, 114, 80, 47, 46], [112, 39, 80, 103, 124, 88, 39, 38], [127, 47, 114, 41, 122, 112, 31, 30], [71, 23, 31, 94, 76, 104, 23, 22], [79, 30, 124, 71, 84, 121, 100, 73], [109, 98, 120, 7, 89, 97, 96, 87], [110, 83, 104, 74, 25, 114, 16, 51, 38, 119, 114, 122], [44, 1, 0, 35, 46, 35, 0, 63, 52, 22, 62, 37, 54, 50, 107, 106], [58, 107, 111, 49, 5, 10, 107, 40, 2, 38, 36, 86, 0, 34, 14, 30, 10, 90, 60, 5, 13, 44, 83, 82], [33, 28, 30, 29, 34, 34, 26, 2, 28, 61, 35, 75, 45, 37, 52, 6, 217, 217, 233, 190], [221, 183, 192, 242, 209, 187, 220, 248, 217, 191, 192, 224, 202, 198, 192, 162, 246, 210, 192, 252, 206, 244, 220, 232, 248, 202, 200, 229], [193, 246, 151, 212, 192, 253, 247, 154], [202, 254, 252, 209, 207, 159, 232, 193, 234, 224, 143, 142], [237, 219, 224, 135, 220, 254, 131, 206, 223, 202, 131, 130], [154, 243, 148, 243, 144, 146, 170, 180, 170, 142, 166, 177, 150, 154, 128, 185, 178, 188, 128, 169], [133, 141, 156, 174, 129, 129, 182, 152, 184, 138, 132, 178, 186, 185, 171, 222], [134, 215, 211, 140, 139, 132, 172, 133, 143, 222, 188, 135, 147, 159, 163, 206], [150, 178, 207, 153], [157, 173, 191, 198], [159, 207, 168, 48, 82, 85, 54, 52, 95, 94, 77, 58, 80, 93, 124, 49], [108, 89, 58, 125, 115, 101, 46, 41], [71, 81, 81, 40, 67, 75, 38, 33], [71, 89, 115, 90, 69, 101, 101, 81, 124, 20, 113, 102, 75, 24, 121, 64, 79, 111, 18, 13], [99, 95, 75, 66, 108, 110, 102, 10, 119, 127, 125, 69, 94, 83, 121, 117], [32, 5, 21, 52, 31, 116, 47, 120], [19, 18, 35, 59, 44, 22, 5, 60, 50, 37, 110, 105], [12, 49, 106, 101], [3, 29, 98, 111, 63, 57, 98, 93], [59, 37, 37, 84, 60, 55, 90, 85], [48, 61, 37, 26, 14, 25, 82, 77], [16, 64, 37, 65, 22, 1, 74, 69], [32, 72, 19, 16, 36, 76, 12, 189], [226, 197, 197, 253, 230, 180, 209, 207, 235, 205, 178, 228, 233, 207, 178, 173], [242, 255, 213, 164, 207, 199, 170, 165], [253, 169, 209, 236, 249, 217, 202, 157], [197, 234, 233, 212, 199, 247, 154, 149], [240, 253, 249, 199], [206, 233, 233, 201, 210, 128, 229, 254, 215, 216, 230, 133], [221, 136, 211, 204, 228, 140, 216, 253], [163, 133, 175, 190, 161, 135, 250, 245], [170, 249, 157, 182, 174, 137, 153, 165, 139, 147, 238, 233], [182, 228, 145, 234, 131, 139, 230, 225], [185, 153, 230, 173, 131, 209, 135, 136, 134, 141, 169, 128, 138, 216, 190, 209], [142, 131, 214, 193, 147, 159, 162, 201], [145, 129, 202, 197], [160, 151, 189, 150, 156, 204, 100, 120, 96, 48, 82, 112, 92, 66, 70, 127, 104, 76, 53, 116], [109, 98, 70, 102, 112, 84, 82, 127, 76, 70, 37, 36], [127, 95, 85, 32], [71, 113, 118, 76, 120, 78, 114, 92], [69, 111, 126, 83, 75, 106, 17, 16], [76, 29, 5, 93, 80, 94, 101, 8], [85, 127, 114, 79, 94, 124, 5, 87, 92, 13, 55, 124], [33, 46, 18, 63, 34, 16, 121, 37], [19, 120, 6, 33, 23, 23, 2, 61, 7, 96, 6, 57, 53, 58, 14, 47, 15, 28, 26, 40, 60, 50, 54, 24], [0, 36, 8, 16, 60, 50, 38, 1, 9, 42, 81, 80], [55, 93, 24, 25, 17, 24, 58, 3, 44, 48, 46, 59, 30, 58, 65, 64], [26, 55, 202, 233, 219, 177, 209, 184], [213, 208, 189, 185, 199, 241, 198, 207, 237, 225, 218, 249, 247, 194, 169, 168], [245, 250, 222, 236, 192, 220, 165, 233], [252, 200, 204, 212], [248, 228, 242, 204, 194, 240, 203, 148], [242, 154, 149, 216, 244, 247, 211, 140], [232, 222, 216, 198, 212, 246, 133, 132], [227, 136, 246, 209, 231, 231, 146, 173, 144, 241, 130, 181, 164, 160, 245, 244], [147, 248, 154, 180, 173, 253, 233, 168], [177, 190, 130, 189, 140, 150, 229, 228], [131, 140, 164, 170, 191, 152, 165, 220], [135, 162, 217, 216], [132, 138, 209, 218], [137, 217, 186, 152, 180, 174, 205, 204], [168, 158, 140, 131, 148, 196, 177, 196], [163, 150, 170, 147, 159, 87, 52, 83, 90, 92, 87, 105], [100, 59, 91, 115, 105, 62, 121, 98], [86, 65, 44, 47], [112, 38, 91, 111, 77, 79, 79, 111], [127, 91, 75, 42, 123, 101, 103, 81, 66, 115, 65, 83], [67, 111, 69, 94, 113, 125, 16, 19], [118, 2, 73, 94, 106, 108, 127, 124, 85, 86, 107, 86, 88, 82, 103, 86, 93, 1, 124, 127], [26, 118, 124, 53, 37, 123, 0, 119], [47, 11, 27, 122, 43, 21, 27, 58, 48, 102, 3, 37, 54, 15, 108, 54], [56, 110, 11, 110, 11, 55, 13, 17, 1, 35, 9, 28, 61, 63, 39, 28, 9, 1, 63, 20], [12, 29, 39, 6, 17, 71, 47, 26, 37, 32, 35, 22, 25, 18, 47, 51, 30, 216, 207, 178, 217, 211, 176, 234, 228, 239, 180, 183], [233, 203, 219, 251, 213, 163, 195, 253], [202, 204, 195, 166, 245, 171, 219, 233, 194, 196, 246, 163], [198, 146, 152, 215, 193, 201, 243, 204, 195, 239, 255, 193], [241, 193, 193, 219, 245, 241, 140, 143], [209, 134, 128, 218, 212, 214, 243, 204, 216, 219, 128, 131], [220, 243, 131, 177, 162, 156, 148, 251], [157, 144, 161, 166, 146, 187, 240, 243], [152, 149, 224, 159, 128, 156, 135, 230, 180, 158, 147, 182, 184, 132, 139, 178, 188, 211, 176, 223], [129, 214, 208, 159, 189, 176, 167, 154, 142, 129, 184, 211], [140, 183, 200, 193], [169, 179, 204, 130, 174, 175, 149, 143], [162, 207, 183, 146, 89, 89, 80, 111, 85, 107, 80, 106, 82, 100, 92, 114, 89, 63, 55, 62, 115, 124, 92, 127], [118, 39, 35, 100, 122, 43, 92, 112], [127, 46, 76, 119, 67, 79, 115, 30], [71, 98, 96, 22, 75, 27, 124, 64], [77, 122, 31, 71, 106, 3, 100, 103, 86, 98, 15, 65, 92, 126, 82, 75, 94, 80, 90, 121, 34, 44, 4, 42, 38, 2, 16, 44], [43, 1, 0, 39, 22, 32, 34, 123], [53, 0, 111, 110], [48, 2, 99, 60, 2, 14, 0, 43, 62, 48, 8, 52], [58, 38, 14, 25, 61, 87, 95, 18, 10, 4, 60, 1, 8, 44, 83, 82], [18, 54, 75, 29, 57, 33, 55, 74], [27, 20, 67, 75, 37, 37, 44, 19], [227, 198, 250, 235, 225, 210, 204, 239, 209, 187, 254, 216, 213, 213, 220, 227], [243, 162, 192, 255, 247, 212, 171, 170], [193, 171, 220, 232, 254, 220, 163, 162], [193, 246, 151, 217, 192, 226, 224, 210, 241, 155, 255, 150], [207, 158, 252, 154, 210, 246, 231, 142], [215, 216, 224, 223, 226, 241, 214, 239, 216, 250, 248, 143, 154, 144, 255, 254], [167, 171, 161, 250]];
  var n = 13;
  if (n == 4) {
    n = 34;
  }
  var ej = 114;
  if (ej === 13) {
    ej = 55;
  }
  var fj = 187;
  if (fj >= 1) {
    fj = 162;
  }
  for (let a = 0; a < ᐃⲆ.length; a++) {
    ᐃⲆ[a] = aj.atob(dj(ᐃⲆ[a]));
  }
  var gj = 5;
  if (gj >= 5) {
    gj = 114;
  }
  Math.floor(214[214 .i]);
  var hj = 165;
  if (hj > 0) {
    hj = 247;
  }
  var ij = 12;
  var jj = 55;
  if (jj == 7) {
    jj = 157;
  }
  if (ij == 12) {
    ij = 194;
  }
  const kj = 14;
  const lj = ["Peut aussi récupérer des minéraux", "DESERT", "#FFF", "111_111_011", "111_111_110", "#352b10", "init", "forest", " BACK TO THE GAME", "#2b6664", "gm", "auth2", "#d588f1", "Food: 10", "#030d14", "#EBF2F0", "_on", "#57442a", "#b29c32", "#031619", "000_011_000", "#634828", "#0d2e33", "Essen: 100", "#073030", "#43aa82", "quit_chronoquest", "servselect", "#0d1b1c", "#ac222a", " Gather 1 amethyst", "#f0f4f0", "#7d6144", "#16695f", "#0F464C", "gapi", "#7d5234", "#083326", " you can only hit people who are flying too", "#183f3f", "#280e09", "Урон по строениям: 1", "You are less cold, less thirsty, and less hungry", "Grab herum um Dreck, Eis und Sand zu bekommen", "000_110_000", "Chapka", "object", "000_111_011", "#fef4f4", "#242330", "#077b49", "#041c21", "#C09D6F", "timeremain_", "#2b5c48", "#660000", "#322413", "Daño para estructuras: 1", "#342C7C", "#f9efeb", "starve_mapping", "&userid=", "cursor", "azerty_ing", "Wytrzymałość: 2000", "kit", "#564021", "#A37943", "#ee593d", "killdragon_1", "#d2c77b", "Oh, yeah? Is there crab in the crab sticks?", "dano: 2", "Durabilité: 2000", "110_111_000", "durabilidade: 2000", "#0B6A84", "claim_rewards", "#120202", "running", "Pixelbitie", "starve_cancel", "útil para destruir construções", "#3dc4c0", "You feel a great power emanating from this orb", "#86d4e0", "Czas życia: 8 dni", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "dano em construções: 1", "playing", "011_011_011", "010_111_010", "#89d1d4", "#4d4a2e", "send", "aloner", "Relax in this confortable bed", "WINTER", "011_011_010", "#3f332a", "#082b22", "Kill", "undefined", "011_011_000", "011_111_000", "#5f6061", "#187484", "amethyst_2", "Winter", "#34255d", "111_111_010", "#123d38", "application/x-www-form-urlencoded", "#b15ecf", "Crab Claw", "#5cc5ce", "active", "Starve.io ", "110_111_110", "Прочность: 700", "#EFE4B4", "_blank", "010_111_111", "#111316", "#072824", "#8a938e", "You will be cured faster", "#43b5af", "#0c0c0d", "You can also gather minerals", "#e7dc8f", "#a08f47", "#FFFFFF", "#C6AF81", "#4C3B19", "Прочность: 2000", "#a33e2b", "Durability: 700", "#3ba578", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "rewardquest", "Bed", "000_111_110", "#1b170c", "On-Hit Damage: 3", "#5cccc4", "#21112D", "img/avatar-player14.png", "#8359d3", "lock_team", "#A5A244", "#83827e", "011_111_110", "buy_kit", "Nützlich um Gebäude zu zerstören", "010_111_000", " Be peaceful", "audio/ambience.mp3", "#092813", "cave o chão para pegar terra, areia e gelo", "serverAddressInput", "Comida: 100", "#2E85A0", " Claim rewards", "#c27add", "Building method: Free. Press G to change", "#0e3838", "Durability: 400", "Time Remaining", " Share on Twitter", "#614627", "number", "durabilidade: 1000", "#0b2326", "#f4efc6", " Share on Facebook", "GET", "Allow you to calm crabs, and heal them", "2d", "#29997c", "none", "#877d36", "Survive without losing life", "wtb", "#c7a726", "#A89F67", "Продолжительность: 8 дней", "#c26de0", "treasure_chest_4", "#0a0b0c", "low_ing", "000_011_011", "#25c5d6", "Так же вы можете получить ресурсы", "#c04933", "#5E3C10", "gw", "#fff", "#d45ce5", "time", "Durabilité: 1000", "Easter Egg", "name", "fade", "FB", "#163A3A", "#bbbbbb", "Sushui", "Uuunnnggg...", "#75827D", "You are the king of crabs!", "Crab claws can also be eaten", "function", "#58452b", "#a7983c", " QUIT", "#b29e4d", "px", "CLAIM REWARD!", " Open 5 treasure chests", "Lebenszeit: 8 Tage", "Creuse la terre, le sable et la neige", "También puedes conseguir minerales", "111_111_111", "#77371f", "plm", "#252B28", "la", "010_110_010", "#163a3a", "#83ddd4", "Jedzenie: 100", "#D8DC74", "#9E8456", "Защита от игроков: 4, Защита от животных: 16", "Crab sticks", "#e9dad9", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "#1f4948", "Wytrzymałość: 1000", "#042b30", "Schaden: 2", "string", "click", "#0F3A24", "#747471", "#86d0d1", "#785f4c", "#9baaa3", "000_010_000", "eject_member", "#63c9d6", "#b864d6", "#394841", "shop_starterkit", "Building Damage: 1", "#e8e8e8", "Content-Type", "spectator", "110_110_000", "#816511", "#B56D18", "#2b280a", "#ff0000", "claim_reward_", "load", "typequest", "Schaden an Gebäuden: 1", "cancel_sure_delete", "Durabilidad: 2000", "Sandwich", "010_111_011", "Cactus", "score", "event", "Прочность: 1000", "Obrażenia do budowli: 1", "#59c9c0", "Chrono Quests", "#382e19", "#9b2b25", "#dfd1cb", "Durabilidad: 700", "home_craft", "mousedown", "stop", "durabilidade: 700", "#1d051e", "#313041", "#1d1d22", "Réchauffe en dehors de l'eau et dans l'hiver", "#182935", "#29aaa1", "#eda80d", "Animals Defense: 13", "000_111_111", "#be8d50", "cs", "Damage: 5", "#e45936", "Haltbarkeit: 1000", "#0e3022", "Cava para conseguir tierra, arena y hielo", "starve_aliasing", "#73dde5", "#1a4935", "#68622D", "Урон: 2", "high_ing", "Du kannst auch Mineralien bekommen", "Players Defense: 4, Animals Defense: 16", "Birth: 4min", "#665329", "#263947", "#b7252c", "Hält dich warm außerhalb von Wasser und Winter", "110_110_010", ".md-languages label button", "#523e26", "#44301b", "#3A2A0D", "010_110_000", "010_111_110", "010_011_000", "Crab Helmet", "#BB0000", "#c4bc51", "#596560", "#8255b5", "#adbcb5", "#67766F", "Te calienta en invierno y fuera del agua", "#184747", " Collect 100 bread in deep winter", "#A9D6D3", "middle", "Damage: 1", "MADBalgouthi", "você também pode pegar minerais", "#654320", "#123b3f", "#462966", "When you are flying,", "#B26F31", "#4d2d14", "Building method: Grid. Press G to change", "#200333", "Totem", "Lifetime: 8 days", "time_finished_", "Haltbarkeit: 700", "#043c37", "#2b7c57", "#115E60", "pizza wa", "Useful to destroy buildings", "#c67933", "011_111_111", "#af59cd", "Damage: 30", "XPayStationWidget", "011_111_011", "#8c29aa", "#35b1b5", "#4eb687", "#3fc9c9", " Reward", "dw", "You can not attack when you use it", "Damage: 14", "000_111_000", "_number", "#7C5A29", "#211108", "px Baloo Paaji", "Ciepło w i poza zimą", "000_110_110", "You can buy items on the shop in the next game with your points", "loaded", "input_ratio", "Players Defense: 4", "Durabilité: 700", "Food: 20", "starve_info_box", "#1678a2", "Dégâts: 2", "#092b29", "#47341d", "play", "Uuunnnggg", "#281A49", "#214C4B", "#124949", "#EAEAEA", "110_111_010", "#0a2f2b", "starve_safe", "Damage: 24", "canvas", "000_011_010", "#432516", "#7c4908", "inline-block", "#262114", "#1a4545", " After 1 day, survive in winter", "</div>", "FOREST", "#efd435", "#281C08", " Constraints", "#c3be9a", "#53A4D5", "fo", " Collect 1 dragon heart", "defesa de jogadores: 4, defesa de animais: 16", "comida: 100", "#C1C0C0", "Bueno para destruir estructuras", "#2b9390", "Используется для разрушения зданий", "account_nickname_input", "#c4a23a", "Emerald Machine", "sw", "#B6222A", "#674C2A", "#0a2d18", "Starve.io", "source-over", "#80500b", "Durée de vie: 8 jours", "#c1b06b", "Défense: 4, Défense contre animaux: 16", "#54a4ba", "#2A8B9B", "#C0BF55", "destination-out", "011_111_010", "#5E3E1A", "#cd98e5", "110_110_110", "Копайте землю, чтобы получить грязь, лед и песок", "starve_quests", "#74ede6", "111_111_000", "#032b23", "010_010_010", "110_111_011", "#388AC7", "rgba(255, 255, 255, 0)", "Możesz także zdobyć minerały", "#33b4e4", "Damage: 2", "#ffffff", "#232828", "Crabs follow you", "survive20min_3", "Pomocny w niszczeniu budowli", "#1F343F", "Wytrzymałość: 700", "#C98435", "#24878f", "Utile pour détruire les bâtiments", "110_111_111", "#939995", "#252525", "Durability: 1000", "qwerty_ing", "mouseup", "#b3e0e3", "#4c3a15", "re", "#d7990c", "Taco4Life", "Communist", "'Baloo Paaji', sans-serif", "mousemove", "#242503", "isl", "nickname_input", "#4c3b19", "bread_6", "#392C16", "game_body", "#485e66", "Warm outside water and in winter", "#123335", "#bfb360", "Защищает от холода вне воды.", "__default", "round", "010_011_011", "010_110_110", "#555555", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "eogito", "de", "Damage: 20", "#b2d4d1", "#73583e", "Widget", "Daño: 2", "nickname_block", "_trad_number", "#7f6d52", "#3da34d", "#0b3432", "#95d5d8", "#0a4049", "#171a19", "000_111_010", "LAVA", "#afac98", "team_box", "#000000", "They can't hit you and you can't hit them", "000_010_010", "#454545", "#46c2c9", "#e0f2f6", "Anyone want to play?", "#e2cf27", "spatial", "recipe_craft", "#07393d", "Damage: 4", "Crab Spear", "Damage: 3", "opacity", "constraintquest", "#136167", "#1f5453", "#1e2021", "#133a2b", "Score", "000_110_010", "iblk", "#328587", "#764eb5", "#000", "#ddcf8a", "pos", "volume", "#e4efe8", "timeremainingquest", "Days survived", "#1a7961", "010_010_000", "inv_shop", "#09373F", "#a9e4ed", "#0a2728", "loaderror", "Durability: 2000", "Building Damage: 4", "#87d2e6", "#6a7570", "nu", "winter_7", "#3d2a6e", "#174a51", "#939393", "#3e3c25", "#46554D", "#574122", "#493e26", "#EDCE4F", "#554139", "fod", "#1f773d", "points", "010_011_010", "CrysTal", "Dig the ground to gather dirt, ice, and sand", "Durabilidad: 1000", "Game", "#347f93", "#032428", "#141414", "#58645F", "Haltbarkeit: 2000", "starve_quality", "#1f343f", "upfiz", "dont_hit_5", "#2a2938"];
  const d = 20;
  const m = 12;
  const u = false;
  const f = true;
  const p = -8;
  const mj = 2;
  const b = 15;
  const l = -4;
  const nj = 0;
  const k = 4;
  const v = 16;
  const w = 11;
  const y = 255;
  const A = undefined;
  const B = 100;
  const D = 19;
  const C = m;
  const z = mj;
  const x = 256;
  const oj = u;
  const E = 3;
  const S = A;
  const I = 7;
  const F = 9;
  const M = 13;
  const P = 18;
  const j = 17;
  const Q = 2;
  const L = M;
  const G = F;
  const q = 8;
  const _ = 10;
  const N = 6;
  const H = 1 << z;
  const R = P;
  const O = 6;
  const T = 1 << C;
  const J = 1 << w;
  const Y = 5;
  const K = j;
  const X = 1;
  const U = 4;
  const Z = S;
  const V = q;
  const W = M;
  const ei = O;
  const ai = m;
  let ii;
  let ni;
  let si;
  const ti = kj;
  const gi = f;
  const ci = v;
  let di;
  const pj = k;
  const ui = u;
  const qj = ti;
  const fi = X;
  const li = C;
  const bi = B;
  let pi;
  let vi;
  let rj;
  const sj = pj;
  let wi;
  let tj = [];
  const Bi = ui;
  let Di = "_";
  const uj = M;
  let Ci;
  let vj;
  const wj = K;
  let Qi;
  let xj = S;
  let yj = S;
  const zj = d;
  let Fi;
  let Aj = Z;
  let Bj = A;
  let Cj = A;
  let Dj = S;
  const Ej = X;
  const Gi = z;
  let qi = Z;
  const Fj = oj;
  let Ni;
  const Gj = Y;
  const Ui = b;
  const Oi = I;
  const Yi = x;
  const Ji = zj;
  const Ki = _;
  let Xi = Z;
  const Hj = D;
  const Zi = G;
  let $i;
  let Ij;
  const Jj = nj;
  let Kj;
  let Lj;
  const Mj = Oi;
  const Nj = y;
  let Oj;
  const Pj = Mj;
  const Qj = O;
  const Rj = A;
  let Sj;
  let Tj = Rj;
  const Uj = ci;
  const Vj = f;
  let Wj = Rj;
  const Xj = K;
  let Yj;
  let Zj;
  let $j = Z;
  const _j = B;
  let Vk = Z;
  const Xk = w;
  let Zk;
  let $k;
  const aq = Y;
  const bq = sj;
  let cq;
  let dq = Rj;
  let eq = Rj;
  let fq = A;
  const gq = j;
  let hq;
  let iq;
  let jq = S;
  const kq = R;
  const lq = Rj;
  const mq = E;
  let nq;
  let oq = lq;
  const pq = Uj;
  let qq;
  const rq = zj;
  const sq = y;
  const tq = V;
  const uq = D;
  let vq = Rj;
  const wq = x;
  const xq = L;
  const yq = _j;
  let zq = S;
  const Aq = Hj;
  let Bq;
  let Cq;
  let Dq;
  let Eq = nj;
  if (!aj.WebAssembly || !aj.WebAssembly.instantiate) {
    ΔΔΔᐃᐃⲆⲆΔⲆ();
  }
  const Fq = {
    Date: Date
  };
  const ee = sq;
  aj.WebAssembly.instantiate(Uint8Array.from(aj.atob("AGFzbQEAAAABTw1gAX8Bf2ACf38AYAN/f38AYAd/f39/f39/AGABfwBgAABgBH9/f38AYAZ/f39/f38AYAJ/fwF/YAV/f39/fwBgAAF8YAABf2ADf39/AX8CDAEERGF0ZQNub3cACgNAPwIBAQAAAAUBAQQCBAQAAQEBAgULCAgIAQADAAAAAAoAAAAABAUEBAUFDAYDAgYDAgMHCQYHCQcHCQIGAwMCAwUEAQEBAQZADH8BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwBB4AgLfwFBvIkBCwfoASQCXzQAGQNfMTAAGwJfOAAcA18xMgAdAl8xAB4DXzI2AB8DXzIzACADXzE4ACEDXzIyACIFX19uZXcAFwVfX3BpbgAjB19fdW5waW4AJAlfX2NvbGxlY3QAJQtfX3J0dGlfYmFzZQMKBm1lbW9yeQIAA18xMwArAl8zACwDXzExAC0CXzkALgNfMjEALwJfNQAwA18xNQAxA18xNAAyA18yMAAzA18xOQA0Al8wADUDXzE2ADYDXzE3ADcDXzI4ADgDXzI0ADkDXzI3ADoDXzI5ADsCXzIAPAJfNwA9A18yNQA+Al82AD8IASgK7y4/IQAgACgCCEECdiABTQRAAAsgACgCBCABQQJ0aiACNgIACwkAIAAgATYCBAsJACAAIAE2AggLEAAgACAAEAIgACAAEAMgAAsKACAAKAIEQXxxCwoAIAAoAgRBA3ELMQECfyMEIgEQBSEAA0AgACABRwRAIAAQBkEDRwRAAAsgAEEUahAnIAAQBSEADAELCwsRACAAIAEgACgCBEF8cXIQAgsRACAAIAAoAgRBA3EgAXIQAgs7AQF/IAAQBSIBRQRAQQAgAEG8iQFJIAAoAggbRQRAAAsPCyAAKAIIIgBFBEAACyABIAAQAyAAIAEQCQsmAQF/IAEoAgghAyAAIAEgAnIQAiAAIAMQAyADIAAQCSABIAAQAwtYAQF/IwUgAEYEQCAAKAIIIgFFBEAACyABJAULIAAQCiAAIwYjB0VBAiAAKAIMIgBBAU0Ef0EBBUHgCCgCACAASQRAAAsgAEEDdEHkCGooAgBBIHELGxALCyMAIABFBEAPCyAAQRRrIgAQBiMHRgRAIAAQDCMDQQFqJAMLCw0AIAAoAgBBfHFBBGoLCQAgACABNgIAC+0BAQR/IAEoAgAiAkEBcUUEQAALIAJBfHEiAkEMSQRAAAsgAkGAAkkEfyACQQR2BUEfIAJB/P///wMgAkH8////A0kbIgJnayIEQQdrIQMgAiAEQQRrdkEQcwsiAkEQSSADQRdJcUUEQAALIAEoAgghBSABKAIEIgQEQCAEIAUQAwsgBQRAIAUgBBACCyACIANBBHRqQQJ0IABqKAJgIAFGBEAgAiADQQR0akECdCAAaiAFNgJgIAVFBEAgA0ECdCAAaiIBKAIEQX4gAndxIQIgASACNgIEIAJFBEAgACAAKAIAQX4gA3dxEA8LCwsL9wIBBX8gAUUEQAALIAEoAgAiA0EBcUUEQAALIAFBBGogASgCAEF8cWoiBCgCACICQQFxBEACfyAAIAQQECABIANBBGogAkF8cWoiAxAPIAFBBGogASgCAEF8cWoiBCgCAAshAgsgA0ECcQRAIAFBBGsoAgAiASgCACIGQQFxRQRAAAsgACABEBAgASAGQQRqIANBfHFqIgMQDwsgBCACQQJyEA8gA0F8cSICQQxJBEAACyACIAFBBGpqIARHBEAACyAEQQRrIAE2AgAgAkGAAkkEfyACQQR2BUEfIAJB/P///wMgAkH8////A0kbIgJnayIDQQdrIQUgAiADQQRrdkEQcwsiAkEQSSAFQRdJcUUEQAALIAIgBUEEdGpBAnQgAGooAmAhAyABQQAQAiABIAMQAyADBEAgAyABEAILIAIgBUEEdGpBAnQgAGogATYCYCAAIAAoAgBBASAFdHIQDyAFQQJ0IABqIgAgACgCBEEBIAJ0cjYCBAuoAQECfyABIAJLBEAACyABQRNqQXBxQQRrIQEgACgCoAwiBARAIAEgBEEEakkEQAALIAQgAUEQa0YEQAJ/IAQoAgAhAyABQRBrCyEBCwUgASAAQaQMakkEQAALCyACQXBxIAFrIgJBFEkEQA8LIAEgA0ECcSACQQhrIgJBAXJyEA8gAUEAEAIgAUEAEAMgAiABQQRqaiICQQIQDyAAIAI2AqAMIAAgARARC5UBAQJ/PwAiAEEATAR/QQEgAGtAAEEASAVBAAsEQAALQcCJAUEAEA9B4JUBQQA2AgADQCABQRdJBEAgAUECdEHAiQFqQQA2AgRBACEAA0AgAEEQSQRAIAAgAUEEdGpBAnRBwIkBakEANgJgIABBAWohAAwBCwsgAUEBaiEBDAELC0HAiQFB5JUBPwBBEHQQEkHAiQEkCQuIAwECfwJAAkACQAJAIwIOAwABAgMLQQEkAkEAJAMQByMGJAUjAw8LIwdFIQEjBRAFIQADQCMGIABHBEAgACQFIAAQBiABRwRAIAAgARAIQQAkAyAAQRRqECcjAw8LIAAQBSEADAELC0EAJAMQByMFEAUjBkYEQCMLIQADQCAAQbyJAUkEQCAAKAIAEA0gAEEEaiEADAELCyMFEAUhAANAIwYgAEcEQCAAEAYgAUcEQCAAIAEQCCAAQRRqECcLIAAQBSEADAELCyMIIQAjBiQIIAAkBiABJAcgABAFJAVBAiQCCyMDDwsjBSIAIwZHBEAgABAFJAUgABAGIwdFRwRAAAsgAEG8iQFJBEAgAEEAEAIgAEEAEAMFIwAgABAOayQAIABBBGoiAEG8iQFPBEAjCUUEQBATCyAAQQRrIQEgAEEPcUEBIAAbBH9BAQUgASgCAEEBcQsEQAALIwkhACABIAEoAgBBAXIQDyAAIAEQEQsLQQoPCyMGIwYQAiMGIwYQA0EAJAILQQALvAEBAn8gAUGAAkkEfyABQQR2BUEfQQFBGyABZ2t0IAFqQQFrIAEgAUH+////AUkbIgFnayIDQQdrIQIgASADQQRrdkEQcwsiAUEQSSACQRdJcUUEQAALIAJBAnQgAGooAgRBfyABdHEiAQR/IAFoIAJBBHRqQQJ0IABqKAJgBSAAKAIAQX8gAkEBanRxIgEEfyABaCIBQQJ0IABqKAIEIgJFBEAACyACaCABQQR0akECdCAAaigCYAVBAAsLC6kCAQN/IAFB/P///wNLBEAACyAAQQwgAUETakFwcUEEayABQQxNGyIDEBUiAUUEQD8AIgFBBCAAKAKgDCABQRB0QQRrR3RBAUEbIANna3RBAWsgA2ogAyADQf7///8BSRtqQf//A2pBgIB8cUEQdiICIAEgAkobQABBAEgEQCACQABBAEgEQAALCyAAIAFBEHQ/AEEQdBASIAAgAxAVIgFFBEAACwsgASgCAEF8cSADSQRAAAsgACABEBAgASgCACEEIANBBGpBD3EEQAALIARBfHEgA2siAkEQTwRAIAEgBEECcSADchAPIAMgAUEEamoiAyACQQRrQQFyEA8gACADEBEFIAEgBEF+cRAPIAFBBGogASgCAEF8cWoiACAAKAIAQX1xEA8LIAELvQEBAn8gAEHs////A08EQAALIwAjAU8EQAJAQYAQIQIDQCACEBRrIQIjAkUEQCMArULIAX5C5ACAp0GACGokAQwCCyACQQBKDQALIwAjACMBa0GACElBCnRqJAELCyMJRQRAEBMLIwkgAEEQahAWIgIgATYCDCACIAA2AhAgAiMIIwcQCyMAIAIQDmokACACQRRqIgMhASAAIQIDQCACBEAgASIAQQFqIQEgAEEAOgAAIAJBAWshAgwBCwsgAwtLACAAIAE2AgAgAQRAIABFBEAACyABQRRrIgEQBiMHRgRAIABBFGsQBiIAIwdFRgRAIAEQDAUjAkEBRiAAQQNGcQRAIAEQDAsLCwsLOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQQQFyIBNgIAIwsgASAAQQEQKiIANgIAIwtBBGokCyAAC6QBACAAQQAgAUH6HXIgAUH6HXFBf3NxEAEgAEEBIAJB2aYDciACQdmmA3FBf3NxEAEgAEECQRAgA0EQdXRBGCADQQh1dGpBCCADdGoQASAAQQNBGCAEdEEQIARBGHV0akEIIARBCHV0ahABIABBBEEQIAVBEHV0QRggBUEYdXRqQQggBXRqEAEgAEEFQRggBnRBECAGQRh1dGpBCCAGQQh1dGoQAQs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBBRAXIgE2AgAjCyABIABBAxAqIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQYQFyIBNgIAIwsgASAAQQIQKiIANgIAIwtBBGokCyAACzkBAX8jC0EEayQLECkjC0EANgIAIwtBDEEDEBciATYCACMLIAEgAEECECoiADYCACMLQQRqJAsgAAs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBBxAXIgE2AgAjCyABIABBAxAqIgA2AgAjC0EEaiQLIAALBgAQALC5CzkBAX8jC0EEayQLECkjC0EANgIAIwtBDEEIEBciATYCACMLIAEgAEEBECoiADYCACMLQQRqJAsgAAs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBCRAXIgE2AgAjCyABIABBABAqIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQoQFyIBNgIAIwsgASAAQQAQKiIANgIAIwtBBGokCyAACycBAX8gAARAIABBFGsiARAGQQNGBEAACyABEAogASMEQQMQCwsgAAsyACAARQRADwsgAEEUayIAEAZBA0cEQAALIwJBAUYEQCAAEAwFIAAQCiAAIwgjBxALCws5ACMCQQBKBEADQCMCBEAQFBoMAQsLCxAUGgNAIwIEQBAUGgwBCwsjAK1CyAF+QuQAgKdBgAhqJAELEAAgACgCACIABEAgABANCwszAAJAAkACQAJAAkAgAEEIaygCAA4LAAECBAQEBAQEBAQDCw8LDwsgABAmDwsACyAAECYLJgA/AEEQdEG8iQFrQQF2JAFBgAgQBCQEQaAIEAQkBkHACBAEJAgLDAAjC0G8CUgEQAALC3QAIwtBCGskCxApIwtCADcDACAARQRAIwtBDEECEBciADYCAAsgAEEAEBggAEEAEAIgAEEAEANB/P///wMgAnYgAUkEQAALIwsgASACdCIBQQAQFyICNgIEIAAgAhAYIAAgAhACIAAgARADIwtBCGokCyAAC2cBAX8jC0EEayQLECkjCyAANgIAIABBACABQeTEA3FBf3MiBEHkxANxIAEgBHFyEAEgAEEBIAJBgdwCakHI/wNvEAEgAEECQRggA0EQdXRBECADdGpBCCADQQh1dGoQASMLQQRqJAsLmgEAIwtBBGskCxApIwsgADYCACAAQQAgAUH9AWpBj/kCbEH/////B28QASAAQQFBGCACdEEIIAJBEHV0akEQIAJBCHV0ahABIABBAiADQcsAbEHiKmpBgYAEbxABIABBAyAEIARB08ACcUF/cyIBcSABQdPAAnFyEAEgAEEEIAVBm4cCcxABIABBBSAGQeOhAXMQASMLQQRqJAsLUwAjC0EEayQLECkjCyAANgIAIABBAEEQIAFBGHV0QQggAUEQdXRqQRggAXRqEAEgAEEBIAIgAkGprQFxQX9zIgBxIABBqa0BcXIQASMLQQRqJAsLUAAjC0EEayQLECkjCyAANgIAIABBAEEQIAF0QQggAUEYdXRqQRggAUEQdXRqEAEgAEEBIAJBmOgBcxABIABBAiADQeWxAXMQASMLQQRqJAsLKQAjC0EEayQLECkjCyAANgIAIAAgASACIAMgBCAFIAYQGiMLQQRqJAsLQwAjC0EEayQLECkjCyAANgIAIABBACABQfTTAXMQASAAQQEgAiACQePJAnFBf3MiAHEgAEHjyQJxchABIwtBBGokCwuoAQAjC0EEayQLECkjCyAANgIAIABBACABQcsAbEHiKmpBgYAEbxABIABBAUEQIAJ0QRggAkEYdXRqQQggAkEIdXRqEAEgAEECIAMgA0HWzABxQX9zIgFxIAFB1swAcXIQASAAQQMgBEH9zgNzEAEgAEEEIAVBn/cBcUF/cyIBQZ/3AXEgASAFcXIQASAAQQUgBkHLAGxBrIcBakGBgARvEAEjC0EEaiQLC4ABACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB0NsCciABQdDbAnFBf3NxEAEgAEEBQRggAnRBCCACQRh1dGpBECACQRB1dGoQASAAQQIgA0GxrQNzEAEgAEEDIARBquoBcxABIABBBCAFQaABakGngwFsQf////8HbxABIwtBBGokCwuIAQAjC0EEayQLECkjCyAANgIAIABBACABQfXoA3IgAUH16ANxQX9zcRABIABBASACQaucAnFBf3MiAUGrnAJxIAEgAnFyEAEgAEECIAMgA0Gw8ABxQX9zIgFxIAFBsPAAcXIQASAAQQNBECAEdEEYIARBCHV0akEIIARBEHV0ahABIwtBBGokCwtrACMLQQRrJAsQKSMLIAA2AgAgAEEAQRggAXRBCCABQRh1dGpBECABQRB1dGoQASAAQQEgAkHwAGpBj/kCbEH/////B28QASAAQQJBCCADdEEYIANBGHV0akEQIANBEHV0ahABIwtBBGokCwt7ACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB//0AcxABIABBASACQecAakGP+QJsQf////8HbxABIABBAiADQc2qAnIgA0HNqgJxQX9zcRABIABBAyAEQaLzAXMQASAAQQQgBUGh1gFyIAVBodYBcUF/c3EQASMLQQRqJAsLfAAjC0EEayQLECkjCyAANgIAIABBAEEYIAFBEHV0QRAgAUEIdXRqQQggAXRqEAEgAEEBIAJB2OEAcUF/cyIBQdjhAHEgASACcXIQASAAQQIgA0G0iQJqQfr/A28QASAAQQMgBEECakGP+QJsQf////8HbxABIwtBBGokCwt+ACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFB8uACciABQfLgAnFBf3NxEAEgAEEBIAJBywBsQeL1AGpBgYAEbxABIABBAkEIIAN0QRggA0EYdXRqQRAgA0EIdXRqEAEgAEEDIARBt/8CcxABIABBBCAFQe+cA3MQASMLQQRqJAsLeAAjC0EEayQLECkjCyAANgIAIABBACABQaHDA3MQASAAQQEgAkGnuAFzEAEgAEECIANBtwFqQaeDAWxB/////wdvEAEgAEEDIARBwrEBcxABIABBBEEYIAVBEHV0QQggBUEYdXRqQRAgBUEIdXRqEAEjC0EEaiQLC28AIwtBBGskCxApIwsgADYCACAAQQAgAUHLAGxBrfYAakGBgARvEAEgAEEBIAIgAkGA7gBxQX9zIgFxIAFBgO4AcXIQASAAQQIgA0G8uANzEAEgAEEDIARB2QpyIARB2QpxQX9zcRABIwtBBGokCwtOACMLQQRrJAsQKSMLIAA2AgAgAEEAIAEgAUGqlwFxQX9zIgFxIAFBqpcBcXIQASAAQQEgAkHJAWpBj/kCbEH/////B28QASMLQQRqJAsLbAAjC0EEayQLECkjCyAANgIAIABBACABQZIEciABQZIEcUF/c3EQASAAQQFBGCACQQh1dEEQIAJ0akEIIAJBGHV0ahABIABBAkEYIANBEHV0QQggA0EIdXRqQRAgA0EYdXRqEAEjC0EEaiQLC6QBAQF/IwtBBGskCxApIwsgADYCACAAQQAgAUHu6AJxQX9zIgdB7ugCcSABIAdxchABIABBASACQcbJAnMQASAAQQIgAyADQZ7pAHFBf3MiAXEgAUGe6QBxchABIABBAyAEQYEBakGP+QJsQf////8HbxABIABBBCAFQYC8A3MQASAAQQUgBkGCxAFxQX9zIgBBgsQBcSAAIAZxchABIwtBBGokCwuiAQAjC0EEayQLECkjCyAANgIAIABBACABQc2rA3MQASAAQQEgAkHQlANzEAEgAEECIANBougAciADQaLoAHFBf3NxEAEgAEEDIARBkewDcUF/cyIBQZHsA3EgASAEcXIQASAAQQQgBSAFQdXWAnFBf3MiAXEgAUHV1gJxchABIABBBUEQIAZ0QRggBkEIdXRqQQggBkEYdXRqEAEjC0EEaiQLC0kAIwtBBGskCxApIwsgADYCACAAQQAgAUH37QByIAFB9+0AcUF/c3EQASAAQQEgAkGRAWpBj/kCbEH/////B28QASMLQQRqJAsLsAEAIwtBBGskCxApIwsgADYCACAAQQAgAUG5P2xByq/kAGpBuJoIbxABIABBASACQbk/bEGI3TtqQbiaCG8QASAAQQIgAyADQbLVAHFBf3MiAXEgAUGy1QBxchABIABBAyAEQeD1AHIgBEHg9QBxQX9zcRABIABBBEEYIAVBGHV0QQggBXRqQRAgBUEIdXRqEAEgAEEFIAZB5gBqQaeDAWxB/////wdvEAEjC0EEaiQLCwtXAgBB4AgLDQsAAAAgAAAAAAAAACAAQfwICz0BCQAAAgAAAIEIAAACAAAAAQIAAAIAAAABAQAAAgAAAAEKAAACAAAAgQAAAAIAAABBAAAAAgAAAEEIAAAC"), function (a) {
    return a.charCodeAt(0);
  }), Fq).then(function (a) {
    ii = a.instance;
    ni = ii.exports;
    si = ni.memory;
    di = si.buffer;
    pi = ni.__pin;
    vi = ni.__unpin;
    rj = ni.__new;
    wi = ni.__collect;
    Di = "_";
    for (let b = Jj; b < 30; b++) {
      tj[b] = ni[Di + b];
    }
    Ci = ni.__rtti_base;
    vj = new Float32Array(di);
    yj = new Float64Array(di);
    xj = new BigUint64Array(di);
    Qi = new Uint32Array(di);
    Aj = new Uint16Array(di);
    Cj = new Uint8Array(di);
    Bj = new BigInt64Array(di);
    Fi = new Int32Array(di);
    Dj = new Int16Array(di);
    qi = new Int8Array(di);
    nq = tj[6];
    zq = tj[15];
    Cq = tj[20];
    $j = tj[19];
    Wj = tj[22];
    Kj = tj[E];
    Ni = tj[21];
    oq = tj[28];
    Bq = tj[Pj];
    Yj = tj[Zi];
    Xi = tj[27];
    cq = tj[24];
    Oj = tj[25];
    Vk = tj[X];
    vq = tj[W];
    dq = tj[Jj];
    Sj = tj[17];
    Zk = tj[23];
    Tj = tj[Gi];
    iq = tj[26];
    qq = tj[Ki];
    eq = tj[P];
    jq = tj[8];
    fq = tj[29];
    Zj = tj[ci];
    Lj = tj[5];
    hq = tj[qj];
    Ij = tj[4];
    $i = tj[11];
    $k = tj[12];
    Eq = 1;
    if (Dq) {
      Dq();
    }
  });
  const ne = function (a) {
    return Qi[(Ci + 4 >>> mj) + (a << 1)];
  };
  const ae = X;
  function se(a) {
    return 31 - Math.clz32(a >>> N & 31);
  }
  const re = Fj;
  const oe = mq;
  const he = kj;
  const ge = Ui;
  const ce = wj;
  const de = m;
  const me = Xk;
  const ue = _;
  const fe = Uj;
  const pe = Vj;
  function le(b, c, d, e, f, a) {
    Kj(Zc, b, c, d, e, f, a);
    return (58036 + (kd(id[0], id[1], id[z], id[3]) ^ function (b, c, d, e, f, a) {
      Ni(Zc, b, c, d, e, f, a);
      const g = function (a, b, c) {
        vq(Zc, a, b, c);
        const d = function (b, c, d, e, f) {
          dq(Zc, b, c, d, e, f);
          const a = Qw(id[Ka], id[1], id[2], id[3], id[sj], id[0]);
          const g = function (a, b) {
            $i(Zc, a, b);
            const c = function (b, c, d, e) {
              Zj(Zc, b, c, d, e);
              const f = function (a, b, c) {
                fq(Zc, a, b, c);
                const d = Br(id[nj], id[ae], id[2], id[0], id[yd]);
                (function (b, c, d, e, f, a) {
                  zq(Zc, b, c, d, e, f, a);
                  const g = rk(id[Nf], id[Mc], id[En], id[3], id[4]);
                  sd(id[5], id[0]);
                })(id[2], id[nj], id[wg], id[2], id[Ou], id[1]);
                return ~(d & 33934) & (d | 33934);
              }(id[0], id[1], id[2]);
              Er(id[jh], id[0], id[1], id[ih], id[3]);
              return f ^ 30245;
            }(id[ke], id[fi], id[nj], id[X]);
            const d = kd(id[0], id[1], id[0], id[X]);
            return (24 << ((c ^ d) >> 16 & 255)) + (q << ((c ^ d) & 255)) + (0 << ((c ^ d) >> 8 & 255)) + (fe << ((c ^ d) >> 24 & 255));
          }(id[fi], id[2]);
          return (8 << ((a ^ g) & Fn)) + (Hh << ((a ^ g) >> qs & 255)) + (24 << ((a ^ g) >> 24 & 255)) + (0 << ((a ^ g) >> 16 & 255));
        }(id[0], id[fi], id[2], id[0], id[ae]);
        Vc(id[2], id[ke], id[1], id[2], id[0], id[1]);
        return d ^ 46884;
      }(id[bd], id[fi], id[2]);
      const h = Vc(id[3], id[4], id[dh], id[Js], id[Jf], id[2]);
      return ((119 + (g ^ h)) * 48271 + 0) % 2147483647;
    }(id[4], id[Gj], id[0], id[fi], id[2], id[E]))) % 65411;
  }
  function be(a, b, c) {
    if (c) {
      switch (a) {
        case mj:
          return vj;
        case 3:
          return yj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return qi;
          } else {
            return Cj;
          }
        case fi:
          if (b) {
            return Dj;
          } else {
            return Aj;
          }
        case Gi:
          if (b) {
            return Fi;
          } else {
            return Qi;
          }
        case 3:
          if (b) {
            return Bj;
          } else {
            return xj;
          }
      }
    }
  }
  function ve(a) {
    return function (b, c) {
      const d = (b | 17390) & ~(b & 17390);
      const e = c ^ 12544;
      const f = function (b, c) {
        const d = (b + 39663) % 65286;
        const e = (24 << (c & 255)) + (16 << (c >> fm & 255)) + (8 << (c >> 16 & 255)) + (0 << (c >> 24 & 255));
        const f = function (b, c, d) {
          const e = (b + 26044) % 65452;
          const f = c ^ 61242;
          const a = (1013904223 + (50414 + d) * 1664525) % 4294967296;
          const g = Gw(e, f, a);
          const h = function (b, c, d, e, f) {
            const a = ~(b & 28586) & 28586 | ~(b & 28586) & b;
            const i = e ^ 41473;
            const j = (Ka << (f & 255)) + (Hh << (f >> 24 & ee)) + (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255));
            const k = _d(a, (0 << (c >> 24 & 255)) + (8 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)), (8 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> Ea & 255)));
            const h = _d(i, j, a);
            return ((48159 + (k ^ h)) * 22695477 + 1) % 4294967296;
          }(e, f, a, e, f);
          return ((20573 + (g ^ h)) * 22695477 + 1) % 4294967296;
        }(d, e, d);
        const a = Iw(e, d, e, d, e, d);
        return ((57989 + (f ^ a)) * 1664525 + 1013904223) % 4294967296;
      }(d, e);
      ut(d, e, d);
      return ~(f & 15932) & (f | 15932);
    }(a, 30592);
  }
  function ye(b) {
    const c = Qi[b + p >>> z];
    const d = ne(c);
    const e = se(d);
    let f = d & H ? b : Qi[b + U >>> Gi];
    const g = d & Q ? Qi[b + ai >>> Gi] : Qi[f + l >>> 2] >>> e;
    return be(e, d & J, d & T).subarray(f >>>= e, f + g);
  }
  const ke = nj;
  const Ae = O;
  const we = Uj;
  const Me = Y;
  const Be = qj;
  function De(b, f, i, e, j, a) {
    const k = (1 + (b + 44530) * 22695477) % 4294967296;
    const l = ~(f & 36723) & (f | 36723);
    const n = (16 << (i >> 8 & 255)) + (24 << (i >> 24 & 255)) + (tq << (i & y)) + (0 << (i >> 16 & 255));
    const h = ~(e & 50081) & e | ~(e & 50081) & 50081;
    const g = ((51583 + j) * 1664525 + 1013904223) % 4294967296;
    const c = ((a + 25207) * 1103515245 + 12345) % 2147483648;
    const d = function (b, c, d) {
      const e = ~(b & 31937) & b | ~(b & 31937) & 31937;
      const f = (1 + (47255 + c) * 22695477) % 4294967296;
      const a = ~(d & 47659) & d | ~(d & 47659) & 47659;
      const g = Iw(e, f, a, e, f, a);
      Ue(e, f, a, e, f, a);
      return ~(g & 27840) & g | ~(g & 27840) & 27840;
    }(k, l, n);
    Ue(h, g, c, k, l, n);
    return ~(d & 31860) & d | ~(d & 31860) & 31860;
  }
  const Ee = "development";
  const Ce = "production";
  function ze(a) {
    this.t = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.t - ae));
  }
  ze.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.t;
    return this.state / this.t;
  };
  const Gq = Zi;
  ze.prototype.o = function (a) {
    this.state = a;
  };
  ⲆⲆᐃⲆᐃⲆᐃ = 10000;
  const Qe = oe;
  ⵠⵠᐃᐃᐃᐃⵠ = [];
  var Se = new ze();
  Se.o(new Date().getTime());
  const Ie = oe;
  const _e = Rj;
  const Fe = M;
  const Pe = b;
  const Te = mj;
  const je = oj;
  const Re = bi;
  const Le = I;
  for (var Ge = ke; Ge < ⲆⲆᐃⲆᐃⲆᐃ; Ge++) {
    ⵠⵠᐃᐃᐃᐃⵠ.push(Se.random());
  }
  function Hq(b, d, f, e, i, a) {
    const j = ((7700 + b) * 214013 + 2531011) % 4294967296;
    const k = ((f + 14399) * 22695477 + 1) % 4294967296;
    const l = (2531011 + (26040 + e) * 214013) % 4294967296;
    const h = ((23108 + i) * 1103515245 + 12345) % 2147483648;
    const g = (0 << (a >> 8 & 255)) + (tq << (a >> 24 & 255)) + (24 << (a & 255)) + (16 << (a >> 16 & 255));
    return ((17730 + (Yv(j, ~(d & 35363) & (d | 35363)) ^ Sw(k, l, h, g, j))) * 22695477 + 1) % 4294967296;
  }
  const We = Xk;
  const Ne = ce;
  function He(b, d, f, e) {
    const i = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const a = ~(d & 56097) & d | ~(d & 56097) & 56097;
    const j = ((43315 + f) * 1664525 + 1013904223) % 4294967296;
    const k = (V << (e >> 24 & ee)) + (32 << (e >> 32 & sq)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const l = function (b, f, i, e, j, a) {
      const k = b ^ 10715;
      const l = (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255)) + (32 << (f >> 8 & 255)) + (8 << (f >> 24 & 255));
      const n = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (24 << (i >> 32 & 255));
      const h = e ^ 40782;
      const g = j ^ 41301;
      const c = ~(a & 12091) & (a | 12091);
      const d = un(k, l, n, h, g, c);
      un(k, l, n, h, g, c);
      Bn(k, l, n, h, g);
      const m = (d | 3006) & ~(d & 3006);
      return ~(m & 24460) & (m | 24460);
    }(i, a, j, k, i, a);
    const h = Rn(j, k, i, a, j);
    un(k, i, a, j, k, i);
    const g = (1013904223 + (26191 + (l ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  function Ue(b, c, d, e, f, a) {
    const g = ~(e & 7793) & e | ~(e & 7793) & 7793;
    const i = f ^ 51374;
    const j = Gw(~(b & 48993) & b | ~(b & 48993) & 48993, (16 << (c >> 16 & 255)) + (0 << (c & ee)) + (24 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)), d ^ 35129);
    (function (b, c) {
      const d = (54035 + b) % 65310;
      const e = (1 + (c + 62940) * 22695477) % 4294967296;
      const f = Sw(d, e, d, e, d);
      const a = Ir(e, d, e);
    })(g, i);
    return j ^ 27678;
  }
  const Oe = Hj;
  function Ye(b, i, j, e, k, a) {
    const l = ((39488 + b) * 214013 + 2531011) % 4294967296;
    const n = ~(i & 49976) & i | ~(i & 49976) & 49976;
    const o = ~(j & 35856) & j | ~(j & 35856) & 35856;
    const h = e ^ 52219;
    const g = (k + 3575) % 65503;
    const c = ~(a & 6932) & a | ~(a & 6932) & 6932;
    const d = Cn(l, n, o, h, g);
    const m = function (b, f, i, e, j, a) {
      const k = b ^ 30142;
      const l = (f + 63025) % 65493;
      const n = i ^ 30777;
      const h = ((45939 + e) * 22695477 + 1) % 4294967296;
      const g = (8 << (j >> 16 & 255)) + (32 << (j >> 24 & 255)) + (24 << (j >> 32 & 255)) + (16 << (j >> 8 & 255));
      const c = (a | 45652) & ~(a & 45652);
      const d = Cn(k, l, n, h, g);
      Je(c, k, l, n, h);
      yn(g, c, k, l, n, h);
      return d ^ 60048;
    }(c, l, n, o, h, g);
    bn(c, l, n, o, h, g);
    const p = (1013904223 + (60709 + (d ^ m)) * 1664525) % 4294967296;
    return ~(p & 42138) & p | ~(p & 42138) & 42138;
  }
  function Je(b, f, i, e, j) {
    const a = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const k = f ^ 63080;
    const l = ((i + 60304) * 22695477 + 1) % 4294967296;
    const n = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (j | 40165) & ~(j & 40165);
    const g = function (b, d, f, e) {
      const i = (b | 57611) & ~(b & 57611);
      const a = ((d + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = f ^ 62842;
      const k = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const l = $e(i, a, j, k);
      const h = Mn(i, a, j, k);
      He(i, a, j, k);
      const g = (24 << ((l ^ h) >> 24 & 255)) + (8 << ((l ^ h) >> 16 & Ze)) + (we << ((l ^ h) >> 32 & sq)) + (32 << ((l ^ h) >> q & 255));
      return ~(g & 63304) & (g | 63304);
    }(a, k, l, n);
    const c = Rn(h, a, k, l, n);
    const d = On(h, a, k, l, n, h);
    return ((28765 + ((16 << ((g ^ c) >> 24 & Nj)) + (8 << ((g ^ c) >> 16 & 255)) + (24 << ((g ^ c) >> 32 & 255)) + (32 << ((g ^ c) >> 8 & 255)) ^ d)) * 1664525 + 1013904223) % 4294967296;
  }
  const Ke = Oi;
  const Xe = zj;
  function Ve(b, f, i, e, j) {
    const a = (12345 + (23101 + b) * 1103515245) % 2147483648;
    const k = f ^ 58614;
    const l = ((i + 45267) * 214013 + 2531011) % 4294967296;
    const n = e ^ 40810;
    const h = (24 << (j >> 24 & 255)) + (8 << (j >> 32 & 255)) + (32 << (j >> 8 & 255)) + (16 << (j >> 16 & 255));
    const g = Ln(a, k);
    const c = He(l, n, h, a);
    (function (b, d, f, e) {
      const i = (b + 34282) % 65336;
      const a = ~(d & 45181) & 45181 | ~(d & 45181) & d;
      const j = (16 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 16 & 255));
      const k = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const l = function (b, c) {
        const d = ~(b & 41406) & b | ~(b & 41406) & 41406;
        const e = ((c + 17922) * 1103515245 + 12345) % 2147483648;
        const f = Gn(d, e, d);
        pn(e, d, e, d);
        return ((42346 + (f ^ 18573 ^ tn(e, d, e, d, e))) * 2147483629 + 2147483587) % 2147483647;
      }(i, a);
      const h = In(j, k, i, a, j);
      Ln(k, i);
      const g = (58498 + (l ^ h)) % 65531;
    })(k, l, n, h);
    const d = (24 << ((g ^ c) >> 24 & 255)) + (32 << ((g ^ c) >> 16 & 255)) + (8 << ((g ^ c) >> 32 & 255)) + (16 << ((g ^ c) >> q & 255));
    return ~(d & 13644) & d | ~(d & 13644) & 13644;
  }
  const Ze = sq;
  function $e(b, c, d, e) {
    const f = b ^ 11762;
    const a = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ a) >> 32 & 255)) + (8 << ((f ^ a) >> 8 & 255)) + (24 << ((f ^ a) >> 24 & 255)) + (Uj << ((f ^ a) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (q << (d >> 32 & 255)) + (24 << (d >> 24 & sq)) + (16 << (d >> 8 & Ze)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function tn(b, d, f, e, i) {
    const a = (32 << (b >> 24 & 255)) + (fe << (b >> 8 & 255)) + (24 << (b >> ci & 255)) + (8 << (b >> 32 & 255));
    const j = (d + 39144) % 65406;
    const k = f ^ 34575;
    const l = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (i | 25975) & ~(i & 25975);
    const g = $e(a, j, k, l);
    In(h, a, j, k, l);
    bn(h, a, j, k, l, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  const en = li;
  function nn(b, f, i, e, j) {
    const a = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const k = (12345 + (f + 3024) * 1103515245) % 2147483648;
    const l = (8 << (i >> 8 & 255)) + (32 << (i >> 32 & 255)) + (24 << (i >> 16 & 255)) + (16 << (i >> 24 & ee));
    const m = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (j | 19607) & ~(j & 19607);
    const g = Qn(a, k);
    In(l, m, h, a, k);
    yn(l, m, h, a, k, l);
    const c = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(c & 46567) & (c | 46567);
  }
  const an = P;
  const sn = Yi;
  const rn = fe;
  const on = E;
  const hn = Ae;
  function gn(b, f, i, e, j, a) {
    const k = (1013904223 + (b + 28824) * 1664525) % 4294967296;
    const l = (1013904223 + (13210 + f) * 1664525) % 4294967296;
    const n = ~(i & 32165) & 32165 | ~(i & 32165) & i;
    const h = (24 << (e >> 24 & 255)) + (16 << (e >> q & 255)) + (8 << (e >> we & Nj)) + (32 << (e >> 32 & 255));
    const g = (1 + (39199 + j) * 22695477) % 4294967296;
    const c = a ^ 33037;
    const d = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const a = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & sq)) + (32 << (d >> 8 & Nj));
      const i = kn(e, f, a, e, f);
      const j = On(a, e, f, a, e, f);
      const k = function (b, c) {
        const d = (16 << (b >> 8 & ee)) + (32 << (b >> 16 & 255)) + (8 << (b >> 32 & 255)) + (24 << (b >> 24 & 255));
        const e = (32 << (c >> 32 & Nj)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (16 << (c >> 16 & 255));
        const f = yn(d, e, d, e, d, e);
        (function (b, f, i, e, j) {
          const a = b ^ 64570;
          const k = (2531011 + (f + 41768) * 214013) % 4294967296;
          const l = (1013904223 + (i + 43923) * 1664525) % 4294967296;
          const m = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (j | 21896) & ~(j & 21896);
          const g = function (b, c) {
            const d = ((b + 49468) * 1103515245 + 12345) % 2147483648;
            const e = ((c + 30513) * 214013 + 2531011) % 4294967296;
            const f = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const a = (d + 54633) % 65404;
              const g = Je(e, f, a, e, f);
              (function (b, i, j, e, k, a) {
                const l = (2531011 + (b + 16955) * 214013) % 4294967296;
                const n = ((9436 + i) * 1103515245 + 12345) % 2147483648;
                const o = (j | 14774) & ~(j & 14774);
                const h = (e | 48802) & ~(e & 48802);
                const g = ~(k & 24998) & (k | 24998);
                const c = (tq << (a >> 8 & 255)) + (16 << (a >> 16 & 255)) + (32 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = dn(l, n, o, h);
                const m = In(g, c, l, n, o);
                const p = dn(h, g, c, l);
              })(a, e, f, a, e, f);
              Mn(a, e, f, a);
              return ~(g & 43875) & (g | 43875) ^ 15116;
            }(d, e, d);
            Bn(e, d, e, d, e);
            $e(d, e, d, e);
            return (f | 17943) & ~(f & 17943) ^ 21791;
          }(a, k);
          pn(l, m, h, a);
          const c = nn(k, l, m, h, a);
        })(d, e, d, e, d);
        Qn(e, d);
        return (f | 58283) & ~(f & 58283) ^ 8337;
      }(a, e);
      const h = (16 << ((i ^ j) >> 32 & Ze)) + (24 << ((i ^ j) >> 24 & Ze)) + (32 << ((i ^ j) >> 8 & 255)) + (8 << ((i ^ j) >> 16 & sq));
      return (8 << ((h ^ k) >> 32 & y)) + (fe << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(k, l, n);
    Mn(h, g, c, k);
    return ((34159 + (d ^ 2959 ^ dn(l, n, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const cn = bq;
  function dn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const a = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const g = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, d, f, e) {
      const i = (32 << (b >> 32 & 255)) + (16 << (b >> we & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const a = (1 + (50595 + d) * 22695477) % 4294967296;
      const j = ~(f & 40066) & f | ~(f & 40066) & 40066;
      const k = e ^ 18768;
      const l = Cn(i, a, j, k, i);
      const h = Ve(a, j, k, i, a);
      const g = vn(j, k);
      return ((16767 + ((2531011 + (35287 + (l ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, a, g, i);
    Mn(f, a, g, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Cn(f, a, g, i, f))) * 214013) % 4294967296;
  }
  const mn = cn;
  function un(b, f, i, e, j, a) {
    const k = ~(b & 36133) & (b | 36133);
    const l = (f | 13670) & ~(f & 13670);
    const m = (i | 31390) & ~(i & 31390);
    const h = e ^ 64081;
    const g = j ^ 7550;
    const c = (2147483587 + (a + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Tn(k, l, m, h, g) ^ Mn(c, k, l, m))) * 2147483629 + 2147483587) % 2147483647 ^ Bn(h, g, c, k, l))) * 1103515245) % 2147483648;
  }
  const fn = Ej;
  function pn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const a = c ^ 12315;
    const g = d ^ 38714;
    const i = e ^ 58084;
    const j = Ye(f, a, g, i, f, a);
    Mn(g, i, f, a);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ bn(g, i, f, a, g, i))) * 214013 + 2531011) % 4294967296;
  }
  const ln = pe;
  function bn(b, c, d, e, f, a) {
    const i = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = a ^ 42490;
    return ((19056 + ($e(i, j, d ^ 53590, e ^ 36633) ^ $e(k, h, i, j))) * 22695477 + 1) % 4294967296;
  }
  function vn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = bn(d, e, d, e, d, e);
    const a = bn(d, e, d, e, d, e);
    $e(d, e, d, e);
    const g = (16 << ((f ^ a) >> 32 & 255)) + (8 << ((f ^ a) >> 24 & sq)) + (24 << ((f ^ a) >> 16 & 255)) + (32 << ((f ^ a) >> 8 & Ze));
    return ~(g & 55949) & 55949 | ~(g & 55949) & g;
  }
  function yn(b, f, i, e, j, a) {
    const k = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (V << (b >> 32 & 255));
    const l = (f | 41551) & ~(f & 41551);
    const n = (24 << (i >> 24 & Nj)) + (16 << (i >> 32 & 255)) + (tq << (i >> 16 & 255)) + (32 << (i >> 8 & 255));
    const h = ~(e & 32641) & (e | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const c = ~(a & 1090) & (a | 1090);
    const d = On(k, l, n, h, g, c);
    tn(k, l, n, h, g);
    $e(c, k, l, n);
    const m = ~(d & 8077) & 8077 | ~(d & 8077) & d;
    return ~(m & 3708) & (m | 3708);
  }
  function kn(b, f, i, e, j) {
    const a = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const k = ~(f & 7703) & f | ~(f & 7703) & 7703;
    const l = (i | 31275) & ~(i & 31275);
    const m = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (j >> 8 & 255)) + (32 << (j >> 24 & 255)) + (24 << (j >> rn & 255)) + (16 << (j >> 32 & Ze));
    const g = bn(a, k, l, m, h, a);
    const c = $e(k, l, m, h);
    Gn(a, k, l);
    return (24 << ((g ^ c) >> 16 & 255)) + (8 << ((g ^ c) >> 8 & 255)) + (32 << ((g ^ c) >> 24 & 255)) + (16 << ((g ^ c) >> 32 & 255)) ^ 31710;
  }
  const An = tq;
  const wn = Zi;
  function Mn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const a = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = Qn(f, a);
    Qn(i, j);
    Rn(f, a, i, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  function Bn(b, f, i, e, j) {
    const a = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const k = ((18197 + f) * 214013 + 2531011) % 4294967296;
    const l = (2531011 + (22845 + i) * 214013) % 4294967296;
    const m = (32 << (e >> 16 & y)) + (v << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & y));
    const h = ~(j & 11999) & j | ~(j & 11999) & 11999;
    const g = bn(a, k, l, m, h, a);
    const c = yn(k, l, m, h, a, k);
    $e(l, m, h, a);
    return (8 << ((g ^ c) >> 24 & 255)) + (16 << ((g ^ c) >> 16 & 255)) + (24 << ((g ^ c) >> 8 & 255)) + (32 << ((g ^ c) >> 32 & 255)) ^ 35444;
  }
  const Dn = D;
  const En = Gi;
  function Cn(b, d, f, e, i) {
    const a = b ^ 62008;
    const j = (24 << (d >> 32 & 255)) + (V << (d >> 16 & 255)) + (32 << (d >> 8 & 255)) + (16 << (d >> 24 & 255));
    const k = ((f + 46531) * 22695477 + fn) % 4294967296;
    const l = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(i & 55588) & 55588 | ~(i & 55588) & i;
    const g = Je(a, j, k, l, h);
    On(a, j, k, l, h, a);
    return ((3037 + (g ^ 57467 ^ Rn(j, k, l, h, a))) * 1664525 + 1013904223) % 4294967296;
  }
  const zn = re;
  const xn = ke;
  function Qn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Tn(c, d, c, d, c) ^ In(d, c, d, c, d))) % 65357 ^ $e(c, d, c, d))) * 22695477) % 4294967296;
  }
  const Sn = oe;
  function In(b, d, f, e, i) {
    const a = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = d ^ 50118;
    const k = f ^ 41620;
    const l = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (i >> 16 & 255)) + (Uj << (i >> 8 & 255)) + (8 << (i >> 32 & 255)) + (24 << (i >> 24 & 255));
    const g = On(a, j, k, l, h, a);
    On(j, k, l, h, a, j);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ $e(k, l, h, a))) * 214013) % 4294967296;
  }
  const _n = cn;
  const Fn = sq;
  const Pn = Xk;
  function Tn(b, f, i, e, j) {
    const a = (pq << (b >> 32 & Fn)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (32 << (b >> 16 & 255));
    const k = f ^ 55978;
    const l = ((i + 2934) * 1664525 + 1013904223) % 4294967296;
    const n = ~(e & 30642) & (e | 30642);
    const h = (8 << (j >> 8 & 255)) + (24 << (j >> 32 & Ze)) + (16 << (j >> 24 & 255)) + (32 << (j >> 16 & 255));
    const g = In(a, k, l, n, h);
    const c = Bn(a, k, l, n, h);
    $e(a, k, l, n);
    const d = (16 << ((g ^ c) >> 32 & 255)) + (24 << ((g ^ c) >> 8 & 255)) + (8 << ((g ^ c) >> 24 & 255)) + (32 << ((g ^ c) >> 16 & Nj));
    return ~(d & 23686) & (d | 23686);
  }
  const jn = Ki;
  function Rn(b, f, i, e, j) {
    const a = ((b + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (f + 52922) % 65337;
    const l = i ^ 25250;
    const n = ~(e & 10903) & 10903 | ~(e & 10903) & e;
    const h = ~(j & 33814) & 33814 | ~(j & 33814) & j;
    const g = tn(a, k, l, n, h);
    const c = Ln(a, k);
    tn(l, n, h, a, k);
    const d = (1 + (19675 + (g ^ c)) * 22695477) % 4294967296;
    return ~(d & 7922) & d | ~(d & 7922) & 7922;
  }
  function Ln(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> tq & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = nn(d, e, d, e, d);
    const a = Tn(e, d, e, d, e);
    kn(d, e, d, e, d);
    const g = ((11269 + (f ^ a)) * 2147483629 + 2147483587) % 2147483647;
    return ~(g & 40927) & 40927 | ~(g & 40927) & g;
  }
  function Gn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const a = (d | 24198) & ~(d & 24198);
    const g = nn(e, f, a, e, f);
    const h = nn(a, e, f, a, e);
    nn(f, a, e, f, a);
    return (16 << ((g ^ h) >> 32 & 255)) + (8 << ((g ^ h) >> 8 & 255)) + (24 << ((g ^ h) >> 24 & 255)) + (32 << ((g ^ h) >> ci & 255)) ^ 31181;
  }
  const qn = aq;
  const Wn = Uj;
  const Nn = lq;
  const Hn = Nj;
  const Un = pe;
  function On(b, f, i, e, j, a) {
    const k = i ^ 8102;
    const l = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & Fn)) + (8 << (e >> 24 & 255)) + (16 << (e >> q & 255));
    const m = ~(j & 29687) & 29687 | ~(j & 29687) & j;
    const h = (1 + (62237 + a) * 22695477) % 4294967296;
    const g = vn((b + 52483) % 65496, (v << (f >> 16 & 255)) + (24 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (8 << (f >> 32 & 255)));
    const c = vn(k, l);
    vn(m, h);
    return (45290 + (g ^ c)) % 65334 ^ 55575;
  }
  const Yn = kj;
  ⵠⵠⵠⲆ = {
    h: () => new Promise((a, b) => {
      aj.m.ready(function () {
        aj.m.u("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (dw) {
            a(0);
          } else {
            console.log(Z);
            b(c);
          }
        });
      });
    }),
    p: function (a) {
      aj.open(a, "_blank").focus();
    },
    l: function (a) {
      aj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    v: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return ui;
        }
      }
      return Un;
    },
    k: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = Jj; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.v(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return f;
    },
    A: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    M: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    B: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    D: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    C: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < Jj) {
        return -X;
      } else {
        return 1;
      }
    },
    S: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    I: function (b, c, d, e) {
      var f = e - c;
      var a = d - b;
      return Math.atan2(f, a);
    },
    _: function (a, b) {
      return Math.asin(this.D(a, b) / (this.C(a) * this.C(b))) * this.sign(this.S(a, b));
    },
    F: function (a) {
      ⵠᐃΔᐃⲆᐃΔ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠᐃΔᐃⲆᐃΔ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    P: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    T: function (a, b) {
      return this._({
        x: ae,
        y: 0
      }, this.M(a, b));
    },
    j: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    R: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    L: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    G: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    q: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    W: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    N: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    H: function (a, b) {
      return Math.floor((a - b) / z);
    },
    U: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / Gi
      };
    },
    O: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -fn;
      }
    },
    Y: function (b, c, d) {
      var e = this.O();
      var f = this.O();
      var a = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(a) * e * d),
        y: Math.floor(c + Math.cos(a) * f * d)
      };
    },
    J: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.K = d;
    },
    X: function (a) {
      ΔⲆᐃ = [];
      ΔⲆᐃ.push.apply(ΔⲆᐃ, a);
      var b = [];
      while (ΔⲆᐃ.length > 0) {
        var c = Math.floor(Math.random() * ΔⲆᐃ.length);
        b.push(ΔⲆᐃ[c]);
        ΔⲆᐃ.splice(c, 1);
      }
      return b;
    },
    V: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    Z: function (b) {
      if (typeof b !== "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(Jj, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(nj, d)).length - X, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - ae);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    $: function (a) {
      return a * (Gi - a);
    },
    ii: function (a) {
      return --a * a * a + 1;
    },
    ti: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (pj - a * 2) * a - fi;
      }
    },
    ei: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - X) * (En * a - z) * (Gi * a - En) + 1;
      }
    },
    ni: function (a) {
      if (a < 0.5) {
        return An * a * a * a * a;
      } else {
        return 1 - q * --a * a * a * a;
      }
    },
    ai: function (a) {
      return fi - --a * a * a * a;
    },
    si: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ri: function (b, c, d, e, f, a) {
      this.oi = b;
      this.hi = c;
      this.max = d;
      this.min = e;
      this.gi = f;
      this.ci = a;
      this.di = xn;
      this.mi = function () {
        if (this.oi) {
          if ((a = this.hi + bk * this.gi) > this.max) {
            this.hi = this.max;
            this.oi = u;
            return true;
          }
          this.hi = a;
        } else {
          var a;
          if ((a = this.hi - bk * this.ci) < this.min) {
            this.hi = this.min;
            this.oi = Vj;
          } else {
            this.hi = a;
          }
        }
      };
      return u;
    },
    ui: function (b, c, d, e, f, a) {
      this.fi = b;
      this.pi = c;
      this.li = d;
      this.bi = e;
      this.x = f;
      this.yi = a;
      this.ki = function () {
        this.x = this.Ai;
        this.pi = Jj;
      };
      this.wi = function (a) {
        if (a !== this.yi) {
          this.yi = a;
          this.bi = this.x;
          this.pi = nj;
        }
        if (this.yi !== this.x) {
          this.pi += bk;
          if (this.pi > this.li) {
            this.x = this.yi;
          } else {
            var b = this.fi(this.pi / this.li);
            this.x = this.bi + (this.yi - this.bi) * b;
          }
        }
      };
    },
    Mi: function (b, c, d, e, f, a, g, i, j) {
      this.fi = b;
      this.pi = c;
      this.li = d;
      this.bi = e;
      this.Bi = f;
      this.x = a;
      this.y = g;
      this.yi = i;
      this.Di = j;
      this.wi = function (a) {
        if (a.x != this.yi || a.y != this.Di) {
          this.yi = a.x;
          this.Di = a.y;
          this.bi = this.x;
          this.Bi = this.y;
          this.pi = ke;
        }
        if (this.yi != this.x || this.Di != this.y) {
          this.pi += bk;
          if (this.pi > this.li) {
            this.x = this.yi;
            this.y = this.Di;
          } else {
            var b = this.fi(this.pi / this.li);
            this.x = this.bi + (this.yi - this.bi) * b;
            this.y = this.Bi + (this.Di - this.Bi) * b;
          }
        }
      };
    },
    Ei: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    Ci: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[ae];
      }
    },
    zi: function (a) {
      let b = "";
      const c = a.length;
      for (let d = ke; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    xi: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.K || u;
    },
    Qi: function (b, c, d, e, f, a, g, h) {
      if (Math.max(b, f) < Math.min(c, a) && Math.max(d, g) < Math.min(e, h)) {
        return Ej;
      } else {
        return ke;
      }
    },
    Si: function (a, b, c) {
      return (fn - c) * a + c * b;
    },
    Ii: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === ke) {
      return nj;
    } else if (Jj < a) {
      return fn;
    } else {
      return -Ej;
    }
  };
  const Jn = pj;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⲆⲆⵠΔⵠΔᐃⲆⲆ;
  };
  const Kn = yq;
  const Xn = pe;
  const Vn = mj;
  (function (b) {
    var c = ui;
    if (typeof ᐃᐃⲆⵠᐃⵠⵠ === "function" && ᐃᐃⲆⵠᐃⵠⵠ.ⵠⵠᐃⲆΔΔᐃ) {
      ᐃᐃⲆⵠᐃⵠⵠ(b);
      c = true;
    }
    if (typeof ⲆⵠΔᐃΔᐃᐃ === "object") {
      ⵠΔⲆⲆⵠΔⲆⲆΔ.exports = b();
      c = true;
    }
    if (!c) {
      var d = aj._i;
      var f = aj._i = b();
      f.Fi = function () {
        aj._i = d;
        return f;
      };
    }
  })(function () {
    function b() {
      for (var a = xn, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, i) {
        var j;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (i = b({
              path: "/"
            }, d.Pi, i)).expires === "number") {
              var k = new Date();
              k.setMilliseconds(k.getMilliseconds() + i.expires * 86400000);
              i.expires = k;
            }
            try {
              j = JSON.stringify(f);
              if (/^[\{\[]/.test(j)) {
                f = j;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, i.expires ? "; expires=" + i.expires.toUTCString() : "", i.path ? "; path=" + i.path : "", i.domain ? "; domain=" + i.domain : "", i.Ti ? "; secure" : ""].join("");
          }
          if (!e) {
            j = {};
          }
          for (var l = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = Jj; l.length > g; g++) {
            var n = l[g].split("=");
            var o = n.slice(1).join("=");
            if (o.charAt(Jj) === "\"") {
              o = o.slice(1, -fn);
            }
            try {
              var p = n[0].replace(h, decodeURIComponent);
              o = c.read ? c.read(o, p) : c(o, p) || o.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  o = JSON.parse(o);
                } catch (a) {}
              }
              if (e === p) {
                j = o;
                break;
              }
              if (!e) {
                j[p] = o;
              }
            } catch (a) {}
          }
          return j;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ji = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.Pi = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.Ri = a;
      return d;
    }(function () {});
  });
  const Zn = qj;
  const $n = Pe;
  var ia = document.getElementById("game_canvas");
  const ta = me;
  var ea = ia.getContext("2d");
  const na = kq;
  const aa = We;
  var sa = ia.width;
  const Iq = Fe;
  var oa = ia.height;
  const Jq = rq;
  var ca = ia.width / 2;
  var Kq = ia.height / mj;
  var Lq = {
    x: ca,
    y: Kq
  };
  const Mq = Mj;
  const fa = Qe;
  const pa = en;
  var la = 1;
  const Nq = j;
  var va = fi;
  const Oq = xn;
  var ka = -X;
  const Pq = Rj;
  var wa = "J" + fs;
  var Qq = "S" + Rs;
  const Rq = Dn;
  var Da = aj;
  const Ea = Oq;
  const Ca = V;
  const za = pq;
  const xa = fa;
  var Qa;
  var Sq;
  var Tq = (Wq = "O") + "N";
  var Uq = ke;
  const Fa = ei;
  var Pa = Da;
  const Ta = pa;
  const ja = ae;
  const Ra = w;
  var La;
  Qq = "N";
  const Vq = F;
  var qa = "J";
  var Wq = "O" + fs;
  const Xq = Bi;
  const Ha = bq;
  const Ua = ee;
  var Oa;
  var Yq = Pa;
  const Ja = Aq;
  const Ka = Jj;
  const Xa = Fa;
  const Va = f;
  var Za = Yq;
  const $a = an;
  Tq = "N" + undefined;
  var Zq = Za;
  const $q = Oi;
  var _q;
  const es = Ua;
  const as = Ki;
  const is = L;
  const rs = _;
  const os = Be;
  const hs = Re;
  var gs;
  const ss = Qj;
  var ds;
  var ts = Zq;
  const us = Fn;
  var fs;
  var ct = ts;
  const ls = Oi;
  const bs = de;
  var vs;
  const et = Gj;
  const ks = zn;
  var As = ct;
  qa = "O";
  const ft = Aq;
  const Ms = Wn;
  const Bs = $a;
  const Ds = Rj;
  const Es = d;
  const Cs = z;
  const zs = ge;
  const xs = Zn;
  const Qs = K;
  const Ss = Ui;
  var Is;
  var gt;
  var ht = As = ct;
  const Ps = ae;
  var Ts = ht;
  const js = Xj;
  var Rs = "J" + (Is = "S");
  const Ls = A;
  const Gs = _n;
  ia.oncontextmenu = function () {
    return Xq;
  };
  const qs = tq;
  const Ws = Pn;
  const Ns = hs;
  wa = "J";
  const Hs = Un;
  const Us = bi;
  const Os = Fn;
  const Ys = je;
  const Js = xn;
  function Ks(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.Li = X;
    return b;
  }
  const jt = pe;
  Wq = Tq;
  const Vs = B;
  const Zs = Zi;
  const $s = xs;
  const ir = qs;
  Tq = fs;
  fs = Rs;
  const tr = wq;
  _q = Rs + (qa += wa = Qq);
  const er = fa;
  Wq = Rs;
  Oa = _q;
  Qq = qa + wa;
  const nr = L;
  const ar = as;
  const sr = Zn;
  const rr = oj;
  gs = Qa = Sq = Rs + qa;
  const or = js;
  Wq = Rs + qa;
  ds = Sq;
  Tq = Rs + qa;
  vs = La = Qa;
  qa = fs = Rs;
  Is = Sq;
  gt = Qa;
  const hr = Vj;
  const gr = ta;
  wa = Wq;
  const cr = Ua;
  var dr = aj.devicePixelRatio || 1;
  var mr = ea.Gi || ea.qi || ea.Wi || ea.Ni || ea.Hi || 1;
  const ur = d;
  function fr() {
    if (ia.width != aj.innerWidth) {
      ia.width = aj.innerWidth;
      sa = ia.width;
      ca = ia.width / z;
    }
    if (ia.height != aj.innerHeight) {
      ia.height = aj.innerHeight;
      oa = ia.height;
      Kq = ia.height / 2;
    }
    Lq = {
      x: ca,
      y: Kq
    };
    var a = ia.width;
    var b = ia.height;
    va = ka === -Ps ? dr / mr : ka;
    ia.width = va * a;
    ia.height = va * b;
    ia.style.width = a + "px";
    ia.style.height = b + "px";
    ea.scale(va, va);
    if (ax) {
      ax.Oi.Ui = a;
      ax.Oi.Yi = b;
    }
    if (fx.Ji) {
      fx.mi();
    } else if (ok.Ji) {
      ok.mi();
    } else if (cx.Ji) {
      cx.mi();
    } else if (bx.Ji) {
      bx.mi();
    }
  }
  var pr = document.getElementById("game_body");
  pr.ondragstart = function () {
    return Bi;
  };
  const lr = mj;
  const br = aq;
  const vr = an;
  const yr = Qe;
  pr.ondrop = function () {
    return false;
  };
  pr.onresize = fr;
  (function () {
    var b = Ka;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !aj.requestAnimationFrame; ++c) {
      aj.requestAnimationFrame = aj[a[c] + "RequestAnimationFrame"];
      aj.cancelAnimationFrame = aj[a[c] + "CancelAnimationFrame"] || aj[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!aj.requestAnimationFrame) {
      aj.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var a = Math.max(0, Uj - (e - b));
        var f = aj.setTimeout(function () {
          c(e + a);
        }, a);
        b = e + a;
        return f;
      };
    }
    aj.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const kr = O;
  const Ar = Dn;
  const wr = yq;
  const Mr = Ys;
  function Br(b, c, d, e, f) {
    Sj(Zc, b, c, d, e, f);
    return ((125 + (Qw(id[0], id[1], id[z], id[3], id[4], id[0]) ^ Vc(id[Ps], id[En], id[3], id[4], id[Ea], id[fi]))) * 8121 + 28411) % 134456;
  }
  const Dr = Gq;
  function Er(b, c, d, e, f) {
    oq(Zc, b, c, d, e, f);
    const a = ~(id[0] & 54027) & (id[nj] | 54027);
    return ((111 + (((217 + ((24 << ((a ^ id[Vn]) >> 24 & 255)) + (8 << ((a ^ id[2]) & 255)) + (16 << ((a ^ id[Te]) >> 16 & 255)) + (0 << ((a ^ id[2]) >> 8 & 255)) ^ id[E])) * 48271 + Ea) % 2147483647 ^ id[4])) * 48271 + 0) % 2147483647;
  }
  const Cr = function () {
    let b = 0;
    let i = 0;
    let j = 0;
    const k = ⵠⵠⵠⲆ.zi([115, 116, 97, 99, 107]);
    const a = ⵠⵠⵠⲆ.zi([67, 97, 110, 118, 97, 115, 82, 101, 110, Us, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
    const l = ⵠⵠⵠⲆ.zi([112, 114, 111, 116, 111, 116, 121, 112, 101]);
    const q = ⵠⵠⵠⲆ.zi([_j, 114, 97, 119, 73, 109, 97, 103, 101]);
    ⵠⵠⵠⲆ.zi([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
    const o = ⵠⵠⵠⲆ.zi([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
    const h = ⵠⵠⵠⲆ.zi([105, 110, 100, 101, 120, 79, 102]);
    const g = ⵠⵠⵠⲆ.zi([77, 97, 116, 104]);
    const c = ⵠⵠⵠⲆ.zi([99, 101, 105, 108]);
    const d = ⵠⵠⵠⲆ.zi([102, 108, 111, 111, 114]);
    const m = ⵠⵠⵠⲆ.zi([87, 101, 98, 83, 111, 99, 107, 101, 116]);
    const r = ⵠⵠⵠⲆ.zi([115, 101, 110, 100]);
    function f(a) {
      try {
        a();
      } catch (a) {
        if (a[k][h](o) !== -Ps) {
          return 1;
        } else {
          return Jj;
        }
      }
      return Ka;
    }
    return {
      Ki: function () {
        j++;
        if (j > 1000) {
          j = Ka;
          i = f(aj[a][l][q]) || i;
          i = f(aj[m][l][r]) || i;
        }
        if (i === 1) {
          b++;
          if (b > 10000) {
            b = 0;
            aj[g][d] = aj[g][c];
          }
        }
      }
    };
  }();
  function zr(a, b) {
    Oj(Zc, a, b);
    const c = rk(id[Jj], id[1], id[nj], id[1], id[ke]);
    const d = function (a, b) {
      Lj(Zc, a, b);
      const c = le(id[Ou], id[1], id[0], id[1], id[Ka], id[1]);
      const d = Qw(id[0], id[1], id[0], id[yd], id[Ng], id[1]);
      return (16 << ((c ^ d) >> 16 & $g)) + (8 << ((c ^ d) >> 8 & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) & 255));
    }(id[fn], id[0]);
    return (0 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) >> 8 & 255)) + (8 << ((c ^ d) & 255)) + (16 << ((c ^ d) >> 16 & 255));
  }
  const xr = Pj;
  const Qr = m;
  const Sr = Sn;
  function Ir(b, c, d) {
    const e = (1013904223 + (b + 2649) * 1664525) % 4294967296;
    const f = ~(c & 52557) & 52557 | ~(c & 52557) & c;
    const a = ~(d & 41861) & d | ~(d & 41861) & 41861;
    const g = nk(e, f, a, e, f, a);
    Bk(e, f, a);
    return (g | 47856) & ~(g & 47856);
  }
  const _r = Uj;
  var Fr = navigator.language || navigator.userLanguage;
  var kt = -new Date().getTimezoneOffset() / 60;
  const Tr = pq;
  var jr = "Europe";
  var Rr = "South America";
  const Lr = A;
  const Gr = $n;
  var qr = jr;
  if (kt >= -2 && kt <= Vn) {
    qr = jr;
  } else if (z < kt && et >= kt) {
    qr = "Russia";
  } else if (kt > aq && Vq >= kt) {
    qr = "Asia";
  } else if (kt > Zs) {
    qr = "Australia";
  } else if (-qn <= kt && -Vn > kt) {
    qr = Fr === "pt-BR" || Fr === "pt-br" || Fr === "pt" || Fr === "pt-pt" ? Rr : "North America";
  } else if (kt < -br) {
    qr = Fr === "pt-BR" || Fr === "pt-br" || Fr === "pt" || Fr === "pt-pt" ? Rr : "West America";
  }
  const lt = Ps;
  var ze = {
    Xi: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.Vi = function (a) {
        c = a || Math.floor((b - 1) * Math.random());
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const Nr = Ha;
  var Hr = [[Oq, "DRAGON", $a, Xa, 66, 35, 0], [nj, "WINTER", 91, Bs, et, 40, 8], [nj, lj[ae], 135, 180, 89, 124, 5], [0, "LAVA", 142, Fa, 82, 99, 6], [Ka, "FOREST", 6, 150, 90, 154, ir], [0, "WINTER", Xa, 6, 90, 150, nj], [ae, "b", Js, et, 175, xn], [fn, "t", Te, br, 174, 0], [ja, "t", qn, 5, 173, Js], [X, "b", fa, Y, 176, 0], [1, "t", 0, qn, 177, Oq], [Ej, "t", 3, Gj, 178, ke], [1, "t", Ha, Gj, 179, nj], [fn, "b", Js, br, 180, nj], [fn, "t", 5, Gj, 181, ke], [X, "b", Gi, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, xn], [ae, "t", 5, 5, 185, Js], [X, "t", mj, 5, 186, Jj], [X, "t", Ka, 5, 187, Ka], [fn, "t", 5, aq, 188, Ea], [fi, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, Jj], [1, "t", Gs, Y, 191, 0], [1, "b", 3, Y, 192, Jj], [X, "t", Y, Me, 193, xn], [1, "t", 0, qn, 194, 0], [X, "t", 3, 5, 195, 0], [1, "b", Jj, 5, 196, 0], [1, "t", 5, Me, 197, nj], [1, "t", Cs, 5, 198, 0], [fn, "b", 2, qn, 199, Ka], [1, "t", k, 5, 200, xn], [1, "t", 1, 5, 201, 0], [ja, "b", 1, 5, 202, 0], [lt, "t", aq, Y, 203, Ea], [lt, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, Ea], [lt, "b", 2, Me, 206, Ea], [1, "t", fn, 5, 207, xn], [1, "t", bq, Gj, 208, Oq], [1, "t", z, br, 209, Js], [Ej, "b", xn, 5, 210, Oq], [1, "t", aq, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", Te, 5, 213, nj], [1, "b", Sr, 5, 214, Jj], [lt, "t", 5, 5, 215, xn], [X, "b", 0, 5, 216, Oq], [1, "t", Jn, 5, 217, 0], [1, "t", mj, qn, 218, 0], [Ps, "t", 1, Me, 219, ke], [Ej, "t", xa, Me, 220, 0], [ja, "t", Y, et, 221, Ea], [Ej, "t", En, 5, 222, ke], [X, "t", 4, Y, 223, xn], [1, "b", on, Y, 224, 0], [1, "t", Ps, aq, 225, 0], [1, "t", 3, br, 226, 0], [1, "b", 0, aq, 227, 0], [1, "t", 3, Gj, 228, xn], [1, "t", Y, 5, 229, xn], [1, "t", En, 5, 230, Js], [1, "t", 0, 5, 231, Ka], [1, "b", Cs, Me, 232, 0], [fi, "t", 1, Y, 233, ke], [Ps, "t", 4, Me, 234, Js], [Ej, "b", 1, aq, 235, xn], [1, "t", 4, br, 236, Jj], [X, "t", mj, 5, 237, nj], [ae, "t", Jj, 5, 238, Jj], [1, "t", 4, 5, 239, Oq], [1, "b", Vn, 5, 240, 0], [X, "t", br, 5, 241, Ea], [1, "b", lt, br, 242, 0], [ja, "t", pj, 5, 243, Jj], [ja, "t", Gi, qn, 244, Ea], [X, "t", 1, 5, 245, xn], [1, "b", 1, br, 246, Jj], [1, "t", mq, 5, 247, 0], [ja, "b", 2, Gj, 248, xn], [1, "t", Y, aq, 249, Ka], [Ps, "t", 2, br, 250, 0], [1, "t", 4, 5, 251, 0], [ae, "b", ae, 5, 252, Jj], [lt, "t", _n, 5, 253, 0], [1, "t", ae, 5, 254, 0], [X, "t", xa, aq, 255, 0], [1, "t", 5, 5, 256, Oq], [X, "b", 2, 5, 257, xn], [1, "t", 4, qn, 258, Js], [lt, "b", 3, 5, 259, Oq], [ja, "t", et, et, 260, 0], [1, "b", Ea, 5, 261, ke], [1, "t", yr, Gj, 262, 0], [1, "t", 4, et, 263, 0], [X, "t", lr, et, 264, 0], [ja, "b", fn, Gj, 265, 0], [1, "b", 2, 5, 266, xn], [1, "t", fa, 5, 267, 0], [1, "t", 4, br, 268, 0], [1, "t", 0, 5, 269, 0], [lt, "t", br, br, 270, nj], [X, "t", E, aq, 271, ke], [X, "t", 4, 5, 272, 0], [1, "t", fn, 5, 273, 0], [1, "b", 2, Y, 274, xn], [1, "t", 1, aq, 275, 0], [1, "t", _n, qn, 276, 0], [ja, "b", fi, aq, 277, nj], [1, "b", 2, qn, 278, Ea], [X, "t", Ej, 5, 279, Ea], [lt, "t", pj, Gj, 280, 0], [1, "t", 2, 5, 281, 0], [lt, "t", Gj, Y, 282, Ea], [1, "b", Cs, et, 283, Js], [Ps, "t", 1, 5, 284, 0], [ja, "b", E, 5, 285, 0], [Ej, "t", pj, 5, 286, 0], [1, "t", Ka, Y, 287, 0], [fi, "t", 5, 5, 288, xn], [Ej, "t", Te, Me, 289, Ea], [1, "b", 1, Gj, 290, 0], [1, "t", 4, et, 292, 0], [1, "t", 2, et, 291, 0], [1, "b", Vn, br, 293, 0], [1, "t", 1, Y, 294, Ea], [1, "t", mq, br, 295, 0], [1, "t", qn, Gj, 296, 0], [1, "b", nj, Me, 297, 0], [ja, "b", 3, 5, 298, 0], [1, "t", Ha, 5, 299, Ea], [ja, "t", 2, 5, 300, 0], [fn, "t", 4, Me, 301, 0], [X, "b", 0, br, 302, Ea], [1, "b", 2, br, 303, Js], [lt, "t", lt, 6, 303, 0], [1, "t", Te, 7, 303, Ka], [1, "t", ae, 5, 304, 0], [1, "t", yr, 6, 304, ke], [lt, "t", cn, 7, 304, Ka], [X, "t", Me, 8, 303, xn], [ae, "b", X, 8, 304, Js], [1, "b", 2, Zs, 304, Ka], [1, "b", 3, Ta, 303, 0], [Ps, "b", 3, js, 304, 0], [1, "t", ae, wn, 303, 0], [ja, "t", 1, Gr, 304, Jj], [Ps, "t", X, 13, 303, Js], [1, "t", 3, as, 303, Js], [Ej, "t", on, 14, 304, 0], [lt, "t", 4, as, 304, 0], [ja, "t", aq, 11, 304, 0], [1, "t", 5, $s, 303, 0], [1, "t", 5, 16, 304, 0], [fn, "t", 5, 13, 304, 0], [ae, "t", 2, 12, 304, Js], [Ej, "t", fi, 11, 303, 0], [ja, "b", E, 15, 303, Oq], [Ej, "b", 0, rn, 303, xn], [1, "t", 3, 17, 303, 0], [1, "t", k, 18, 303, 0], [fi, "t", Cs, 19, 303, Js], [1, "t", 1, d, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, Ea], [ae, "t", 4, 23, 303, 0], [ja, "b", 3, 24, 303, Ka], [Ps, "t", br, 25, 303, Jj], [1, "t", 1, 26, 303, nj], [Ej, "t", 2, 27, 303, Oq], [Ej, "t", 4, 28, 303, 0], [ae, "b", Ka, 18, 304, 0], [1, "t", 2, 19, 304, Ea], [1, "t", 5, 20, 304, xn], [1, "b", 2, 21, 304, 0], [Ps, "t", pj, 22, 304, nj], [lt, "t", z, 23, 304, 0], [fi, "t", 1, 24, 304, 0], [fn, "t", E, 25, 304, 0], [1, "t", 0, 27, 304, nj], [X, "t", br, 26, 304, 0], [fn, "b", 2, 28, 304, nj], [Ej, "t", 1, 29, 304, Ka], [1, "b", 1, 29, 303, Ea], [Ej, "b", Vn, 30, 303, Oq], [1, "t", 4, 31, 303, 0], [1, "t", Js, 32, 303, Js], [Ps, "t", Me, 33, 303, 0], [fi, "t", 2, 34, 303, 0], [fn, "t", Ha, 35, 303, ke], [1, "t", Ps, 36, 303, Ea], [1, "b", on, 37, 303, 0], [fi, "t", 2, 32, 304, 0], [Ej, "t", Gs, 30, 304, 0], [X, "t", 1, 31, 304, 0], [Ej, "b", 1, 33, 304, Jj], [ja, "t", Vn, 35, 304, Jj], [Ps, "t", Me, 34, 304, Jj], [fi, "b", 2, 36, 304, Oq], [1, "t", 5, 37, 304, 0], [fi, "t", X, 38, 304, ke], [fi, "b", ae, 40, 303, Oq], [1, "t", fa, 39, 303, 0], [fn, "t", 3, 42, 304, 0], [fi, "t", 5, 38, 303, ke], [1, "t", Y, 39, 304, Jj], [1, "t", br, 41, 303, 0], [ja, "t", cn, 41, 304, 0], [1, "t", 4, 44, 303, Ea], [fi, "b", 2, 40, 304, 0], [Ej, "b", Te, 43, 303, 0], [fn, "t", ja, 42, 303, 0], [1, "t", 1, 43, 304, Oq], [1, "t", et, 44, 304, Ea], [1, "b", ae, 45, 303, xn], [ae, "t", z, 45, 304, 0], [1, "t", 2, 46, 303, ke], [ae, "t", sj, 47, 303, 0], [Ps, "b", xn, 48, 303, nj], [lt, "t", Y, 49, 303, 0], [1, "t", mj, 50, 303, Ea], [1, "t", X, 51, 303, 0], [1, "t", 4, 52, 303, 0], [ja, "t", 5, 46, 304, nj], [Ps, "t", 2, 47, 304, ke], [1, "t", 5, 48, 304, Jj], [1, "t", 1, 49, 304, Ea], [ae, "t", mj, 50, 304, 0], [ja, "b", 1, 53, 303, xn], [Ej, "b", 2, 51, 304, Jj], [X, "t", br, 52, 304, 0], [ja, "t", 3, 53, 304, 0], [1, "b", Te, 54, 303, ke], [1, "t", 5, 54, 304, 0], [Ej, "t", Me, 55, 303, 0], [1, "t", xa, 56, 303, ke], [fi, "t", 4, 57, 303, 0], [1, "t", et, 58, 303, Ea], [fn, "b", fn, 55, 304, Ka], [1, "t", Vn, 56, 304, 0], [1, "t", Jj, 57, 304, 0], [1, "t", 3, 58, 304, 0], [fi, "t", mq, 63, 304, Js], [ae, "t", 3, 59, 303, 0], [1, "t", sj, 59, 304, Jj], [1, "t", et, 60, 303, 0], [1, "t", nj, 60, 304, 0], [1, "t", 0, 66, 303, 0], [ae, "t", 0, 70, 304, Jj], [Ej, "t", Sr, 61, 304, Oq], [X, "t", on, 67, 303, 0], [1, "t", mq, 73, 304, xn], [1, "t", Qe, 76, 303, 0], [1, "t", 3, 78, 304, Jj], [1, "t", 1, 61, 303, nj], [fn, "t", Ej, 73, 303, Ea], [ja, "t", 1, 79, 303, nj], [1, "b", 2, 62, 304, xn], [1, "b", 2, 70, 303, Ea], [1, "t", 5, 62, 303, 0], [Ps, "t", 5, 68, 303, ke], [lt, "t", qn, 71, 304, 0], [X, "t", 5, 77, 304, Oq], [1, "t", Me, 75, 303, 0], [fn, "t", qn, 64, 304, 0], [lt, "t", 5, 65, 303, Ka], [fn, "t", et, 80, 303, 0], [1, "t", ae, 76, 304, Ea], [1, "t", 3, 63, 303, Js], [fi, "t", et, 82, 304, Oq], [1, "b", Vn, 65, 304, Ka], [1, "t", 1, 64, 303, Jj], [1, "t", 1, 68, 304, 0], [1, "t", Gi, 69, 304, Jj], [1, "t", 4, 69, 303, Oq], [fn, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, Jj], [Ps, "b", Vn, 72, 304, xn], [Ej, "t", xn, 71, 303, Ka], [Ps, "t", 4, 72, 303, 0], [X, "t", k, 74, 304, 0], [fi, "t", 2, 74, 303, 0], [fn, "t", on, 75, 304, Ea], [X, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", cn, 79, 304, Oq], [fn, "t", 2, 80, 304, 0], [1, "b", fi, 81, 304, Oq], [1, "t", 2, 81, 303, Jj], [ja, "t", br, 82, 303, Ka], [1, "t", lt, 83, 303, Oq], [1, "b", En, 83, 304, ke], [Ej, "t", Ej, 84, 304, 0], [Ps, "t", 4, 84, 303, 0], [1, "t", Y, 85, 304, Jj], [lt, "t", 3, 85, 303, Js], [Ej, "b", En, 86, 304, 0], [Ps, "t", 1, 86, 303, Jj], [lt, "b", mq, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", Ea, 88, 304, Js], [1, "b", 1, 89, 303, xn], [1, "t", Sn, 89, 304, Oq], [fi, "t", 3, 90, 303, Js], [1, "t", 4, 90, 304, Ea], [1, "t", 4, 91, 303, xn], [lt, "t", 0, 91, 304, xn], [ja, "b", mj, 92, 303, 0], [Ps, "t", sj, 92, 304, 0], [fi, "t", qn, 93, 303, 0], [1, "t", Jj, 93, 304, 0], [1, "b", Qe, 94, 303, 0], [Ej, "b", nj, 94, 304, 0], [1, "b", 0, 95, 303, Js], [1, "t", 2, 95, 304, 0], [fn, "f", lt, 5, 151, 1], [1, "f", lr, 5, 153, Ps], [fi, "f", Jj, 5, 152, Ps], [fn, "f", xn, 5, 147, X], [1, "f", xn, Me, 144, lt], [Ej, "f", 0, qn, 140, Ej], [ja, "f", ae, 5, 149, 1], [1, "f", X, 5, 146, 1], [ae, "f", lt, 5, 143, fi], [X, "f", 1, Me, 141, 1], [fn, "f", lr, 5, 150, X], [ae, "f", 2, 5, 148, 1], [fi, "f", En, 5, 145, Ej], [fn, "f", Gi, qn, 142, 1], [1, "f", Gi, br, 139, 1], [1, "f", mj, br, 136, fi], [1, "f", lr, Me, 133, X], [lt, "f", 2, 5, 131, 1], [fi, "f", 2, 5, 127, 1], [Ej, "f", En, 5, 125, 1], [1, "f", Ej, 5, 138, 1], [1, "f", X, aq, 135, X], [1, "f", 1, 5, 132, Ej], [1, "f", fi, 5, 130, 1], [1, "f", ja, 5, 128, 1], [ja, "f", fn, 5, 126, 1], [1, "f", lt, Y, 124, fi], [1, "f", 0, 5, 129, ae], [1, "f", Ea, 5, 134, lt], [fn, "f", 0, 5, 137, Ps], [ja, "f", Ea, 5, 123, 1], [1, "f", 1, 5, 122, fn], [1, "f", 1, 5, 120, ja], [1, "f", 1, 5, 117, Ps], [Ej, "f", fi, 5, 115, 1], [1, "f", fi, et, 111, 1], [1, "f", 1, 5, 108, X], [fn, "f", 2, Gj, 121, fi], [1, "f", 2, qn, 118, ja], [1, "f", 2, 5, 116, fn], [1, "f", lr, qn, 113, ae], [lt, "f", 2, Gj, 110, ae], [1, "f", Ea, 5, 119, 1], [X, "f", 0, 5, 114, X], [fn, "f", 0, Me, 112, 1], [Ps, "f", 0, aq, 109, 1], [ae, "f", fi, br, 106, 1], [1, "f", 1, br, 103, 1], [lt, "f", fn, 5, 100, 1], [1, "f", fn, Gj, 97, 1], [1, "f", 1, et, 95, 1], [ja, "f", 2, 5, 107, fn], [1, "f", Cs, Y, 105, ae], [Ps, "f", 2, Gj, 102, ae], [fi, "f", 2, aq, 99, Ps], [ja, "f", 2, Me, 96, 1], [X, "f", 2, et, 94, ae], [ja, "f", 0, aq, 104, ja], [1, "f", Oq, 5, 101, 1], [lt, "f", 0, 5, 98, X], [Ej, "f", ke, 5, 93, fn], [1, "f", 1, br, 92, 1], [1, "f", X, 5, 89, lt], [1, "f", fn, 5, 86, Ps], [1, "f", fn, 5, 83, 1], [fn, "f", Ej, Y, 80, 1], [fi, "f", lt, Me, 78, Ej], [1, "f", 2, 5, 90, 1], [1, "f", Te, br, 88, fi], [1, "f", 2, Y, 85, 1], [lt, "f", En, aq, 82, 1], [Ps, "f", En, Gj, 79, Ps], [ae, "f", lr, 5, 77, 1], [ae, "f", En, br, 75, 1], [Ps, "f", 2, 5, 72, Ej], [1, "f", 0, Y, 91, fi], [1, "f", Jj, aq, 87, 1], [lt, "f", Ea, 5, 84, 1], [1, "f", 0, Gj, 81, 1], [fn, "f", Oq, et, 76, 1], [1, "f", 0, 5, 74, X], [fn, "f", 1, 5, 73, X], [X, "f", Ps, 5, 71, 1], [fi, "f", X, 5, 68, 1], [X, "f", 1, 5, 66, Ps], [Ej, "f", Ej, br, 62, ae], [X, "f", fn, 5, 59, fn], [1, "f", 1, et, 56, 1], [1, "f", lt, aq, 53, X], [lt, "f", Ps, 5, 50, Ej], [lt, "f", 2, 5, 70, 1], [1, "f", 2, br, 67, Ej], [ae, "f", 2, Y, 65, 1], [1, "f", 2, 5, 63, fi], [1, "f", 2, 5, 60, 1], [1, "f", Vn, 5, 57, 1], [1, "f", lr, aq, 54, 1], [1, "f", z, aq, 51, X], [ae, "f", ke, 5, 69, 1], [1, "f", 0, Y, 64, fn], [fn, "f", Jj, 5, 61, 1], [X, "f", 0, 5, 58, ja], [1, "f", 0, 5, 55, fi], [ae, "f", 0, qn, 52, ae], [Ps, "f", 0, 5, 49, 1], [fn, "f", 0, 5, 45, 1], [Ps, "f", 0, qn, 42, 1], [1, "f", 0, 5, 38, 1], [ja, "f", Jj, 5, 34, 1], [fi, "f", 0, Me, 31, Ej], [ja, "f", 1, 5, 48, ja], [1, "f", ae, 5, 44, X], [lt, "f", lt, et, 41, 1], [ae, "f", 1, Gj, 37, 1], [ja, "f", X, aq, 33, ja], [fn, "f", 1, Gj, 29, fi], [ja, "f", 2, qn, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, et, 35, fi], [1, "f", 2, 5, 39, Ej], [Ej, "f", Gi, 5, 46, Ej], [X, "f", Cs, 5, 43, 1], [ae, "f", 1, 5, 47, 1], [X, "f", Jj, 5, 40, 1], [1, "f", 0, 5, 36, ae], [ae, "f", ke, aq, 28, Ps], [X, "f", 1, Gj, 25, X], [Ej, "f", 1, Me, 22, X], [1, "f", 1, Gj, Xe, Ps], [1, "f", 1, 5, za, fi], [lt, "f", 1, 5, Fe, 1], [1, "f", fi, 5, ue, ja], [1, "f", 2, 5, 27, fn], [1, "f", Te, 5, 24, 1], [1, "f", z, 5, 21, X], [1, "f", Gi, br, 19, Ps], [lt, "f", Vn, 5, ge, Ej], [Ej, "f", 2, qn, Ta, 1], [fn, "f", 2, br, Zs, ae], [1, "f", Ka, Me, 26, lt], [lt, "f", 0, 5, 23, 1], [1, "f", Ea, 5, Be, 1], [ja, "f", 0, Me, 11, 1], [ae, "f", 0, 5, 17, 1], [fn, "f", 1, 5, Bs, Ps], [fn, "f", 1, et, qs, ja], [Ps, "f", xn, 5, 7, Ps], [1, "f", Ej, aq, 6, Ps], [1, "f", 0, 5, 5, 1], [1, "f", Ps, kr, qn, ae], [Ej, "f", Te, 7, aq, 1], [1, "f", Oq, V, 5, Ej], [1, "f", 1, Zs, 5, 1], [1, "f", fn, m, 5, ja], [Ps, "f", 1, 15, et, 1], [1, "f", fn, gq, 5, 1], [1, "f", Ps, 22, Y, 1], [1, "f", X, 26, br, 1], [X, "f", z, 10, 5, ae], [1, "f", lr, 13, et, X], [1, "f", 2, za, 5, Ps], [X, "f", 2, 18, 5, fi], [1, "f", Cs, 21, br, 1], [1, "f", z, 23, qn, 1], [lt, "f", 2, 25, Y, fi], [1, "f", 2, 27, aq, ae], [Ps, "f", 0, 11, qn, Ej], [fn, "f", 0, 14, 5, Ps], [1, "f", 0, 19, 5, lt], [X, "f", Oq, 24, 5, 1], [1, "f", 0, 28, br, lt], [1, "f", lt, d, Me, 1], [ja, "f", 1, 29, aq, 1], [fi, "f", 1, 32, Me, 1], [fi, "f", 1, 35, 5, ae], [1, "f", 1, 38, 5, 1], [1, "f", fi, 41, 5, lt], [ae, "f", 1, 45, 5, fn], [fn, "f", z, 30, Gj, Ps], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, X], [1, "f", 2, 39, 5, Ej], [Ej, "f", 2, 42, Gj, 1], [1, "f", 2, 44, 5, 1], [ja, "f", 2, 46, Gj, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, et, lt], [1, "f", 0, 37, aq, X], [Ej, "f", 0, 34, 5, Ps], [ae, "f", 0, 31, 5, 1], [Ej, "f", 0, 47, 5, 1], [1, "f", Ej, 48, 5, 1], [Ej, "f", lt, 51, qn, 1], [1, "f", 1, 53, 5, Ej], [1, "f", 1, 57, Gj, 1], [lt, "f", 1, 60, 5, 1], [1, "f", lt, 63, Me, ja], [fn, "f", fn, 65, 5, 1], [ae, "f", 2, 64, 5, fn], [1, "f", 2, 62, Me, 1], [X, "f", 2, 59, aq, 1], [fn, "f", Cs, 56, 5, ae], [lt, "f", z, 52, 5, 1], [lt, "f", Te, 49, 5, ja], [1, "f", 2, 54, 5, 1], [1, "f", Jj, 50, 5, 1], [fi, "f", ke, 55, 5, 1], [fn, "f", 0, 58, 5, 1], [1, "f", xn, 61, 5, 1], [1, "f", Oq, 66, et, 1], [1, "f", 1, 67, br, lt], [ae, "f", 1, 70, 5, 1], [1, "f", fn, 72, qn, 1], [1, "f", 1, 75, Gj, 1], [1, "f", fi, 79, 5, 1], [ja, "f", z, 68, qn, Ej], [1, "f", Gi, 71, Gj, Ej], [1, "f", mj, 74, Me, 1], [1, "f", En, 76, 5, ae], [fi, "f", 2, 78, Gj, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, Me, 1], [ae, "f", Oq, 80, qn, lt], [fi, "f", 1, 81, Y, Ej], [fn, "f", ae, 84, qn, ja], [fn, "f", Ps, 87, 5, X], [1, "f", ae, 89, et, ae], [1, "f", fi, 92, 5, fn], [1, "f", ja, 94, Y, lt], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, Me, 1], [1, "f", Vn, 85, qn, ja], [Ej, "f", 2, 88, br, 1], [Ps, "f", 2, 90, 5, 1], [Ej, "f", Te, 93, 5, 1], [X, "f", 2, 95, Me, Ps], [1, "f", 0, 86, 5, 1], [fn, "f", xn, 91, 5, ae], [ja, "f", lr, 6, 153, ae], [ae, "f", ae, O, 152, 1], [ae, "t", 1, 93, 301, Ea], [fn, "t", 3, 94, 302, ke], [1, "t", qn, 95, 302, 0], [1, "t", Me, 93, 302, 0], [ja, "b", Sn, 92, 302, 0], [1, "t", 1, 91, 302, 0], [lt, "t", 5, 90, 302, 0], [fi, "b", lr, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", Gi, 90, 301, nj], [1, "b", Cs, 89, 302, Ka], [lt, "t", 4, 89, 301, Oq], [1, "t", Ps, 88, 302, nj], [X, "t", Vn, 88, 301, 0], [Ps, "t", yr, 87, 302, Ka], [1, "t", 4, 87, 299, Js], [1, "t", 4, 86, 302, Ka], [1, "t", Ej, 85, 302, Js], [ae, "t", qn, 85, 301, nj], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, Js], [Ps, "t", 1, 82, 302, Ea], [Ej, "t", 5, 81, 302, Ea], [1, "t", 2, 80, 302, Js], [fi, "t", sj, 79, 302, 0], [fi, "t", lr, 78, 302, 0], [Ps, "b", ja, 77, 302, Js], [1, "b", Vn, 76, 302, 0], [fi, "t", z, 75, 302, 0], [1, "t", _n, 74, 302, Ka], [1, "b", fn, 73, 302, xn], [1, "t", 2, 72, 302, Oq], [fn, "t", mn, 71, 302, 0], [1, "b", oe, 70, 302, Ea], [1, "t", 1, 69, 302, nj], [ae, "t", 2, 68, 302, 0], [fn, "t", Gj, 67, 302, 0], [ae, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, Jj], [1, "t", 4, 64, 302, Ea], [1, "b", 3, 63, 302, 0], [ae, "t", 5, 62, 302, Ka], [1, "b", ae, 61, 302, Ka], [1, "t", Qe, 60, 302, Ka], [fi, "t", 4, 59, 302, 0], [fn, "b", 2, 58, 302, ke], [Ps, "t", et, 57, 302, Js], [1, "t", 1, 56, 302, 0], [ja, "t", Qe, 55, 302, 0], [ae, "t", 4, 54, 302, 0], [ae, "t", 1, 53, 302, Ka], [lt, "t", Y, 52, 302, Oq], [1, "t", 2, 51, 302, ke], [fn, "t", 4, 50, 302, 0], [ae, "t", 2, 49, 302, 0], [1, "b", ae, 48, 302, Js], [Ej, "t", Ie, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [lt, "t", 2, 44, 302, Ka], [Ej, "t", Gj, 43, 302, 0], [ae, "t", 2, 42, 302, Jj], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [ja, "b", 2, 39, 302, xn], [fn, "t", 5, 38, 302, 0], [1, "t", fn, 37, 302, ke], [1, "t", z, 36, 302, Jj], [1, "t", 5, 35, 302, 0], [fn, "t", Ea, 34, 302, 0], [X, "t", yr, 33, 302, 0], [1, "t", k, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, Ka], [1, "t", Gs, 29, 302, 0], [1, "t", 2, 28, 302, xn], [ae, "t", Me, 27, 302, Jj], [1, "b", 3, 26, 302, 0], [1, "t", ae, 25, 302, Ea], [Ej, "t", bq, 24, 302, Ea], [1, "t", mj, 23, 302, 0], [ja, "t", fi, 22, 302, 0], [Ej, "t", aq, 21, 302, Jj], [1, "t", Cs, Es, 302, 0], [Ej, "t", bq, 19, 302, Jj], [1, "b", 1, na, 302, Js], [1, "t", 5, js, 302, Js], [lt, "t", 3, 16, 302, 0], [fi, "t", 1, Pe, 302, Jj], [1, "t", et, Yn, 302, ke], [lt, "t", 3, L, 302, Ea], [1, "t", Jn, 12, 302, 0], [1, "t", 1, gr, 302, Ea], [1, "t", 2, _, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", Sn, An, 302, 0], [ae, "t", 5, 8, 302, ke], [Ps, "t", 5, 7, 302, nj], [1, "b", z, 6, 302, Js], [lt, "t", fi, ss, 301, 0], [X, "t", 4, ei, 300, 0], [Ps, "t", En, hn, 299, Oq], [fi, "b", ke, 6, 298, nj], [Ej, "t", 5, 6, 297, 0], [ja, "t", 2, Xa, 296, Ka], [X, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [fi, "t", Me, 6, 293, xn], [fi, "t", ae, 6, 292, xn], [1, "b", 0, 6, 291, Ka], [X, "t", 2, 6, 290, 0], [1, "t", et, 6, 289, 0], [lt, "t", 1, 6, 288, 0], [ae, "t", _n, hn, 287, Oq], [1, "t", lr, Xa, 286, 0], [1, "t", 5, 6, 285, Jj], [1, "t", 2, Qj, 284, 0], [1, "b", 0, 6, 283, Js], [1, "t", 2, 6, 282, 0], [fn, "t", 5, O, 281, Ka], [ja, "b", Vn, O, 280, xn], [1, "t", 5, 6, 279, 0], [1, "t", Ej, Xa, 278, 0], [Ps, "t", Jn, 6, 277, Ka], [1, "t", xa, 6, 276, Ea], [1, "t", br, 6, 275, xn], [Ps, "b", Ea, Ae, 274, 0], [fn, "t", 5, kr, 273, Jj], [lt, "t", fi, Fa, 272, 0], [1, "t", Nr, Ae, 271, Ka], [X, "b", 3, kr, 270, 0], [ae, "t", Y, 6, 269, Ka], [1, "t", Ej, kr, 268, 0], [Ej, "t", 4, 6, 267, Jj], [1, "t", 1, 6, 266, Ka], [Ej, "t", 3, Fa, 265, Ka], [1, "t", k, 6, 264, Ea], [X, "b", 2, 6, 263, 0], [1, "t", 5, ss, 262, 0], [Ej, "t", 3, kr, 261, 0], [1, "t", Ka, 6, 260, Oq], [fn, "t", 5, 6, 259, 0], [ja, "t", Ej, 6, 258, Oq], [1, "t", on, 6, 257, 0], [1, "t", bq, Qj, cr, 0], [ae, "t", 3, ei, 254, 0], [lt, "t", Gj, ss, 253, nj], [1, "b", 2, 6, 252, ke], [1, "t", Gj, 6, 251, Ea], [fn, "t", X, Qj, 250, Ea], [1, "t", E, kr, 249, Ea], [1, "t", mn, 6, 248, Jj], [ja, "b", yr, Ae, 247, 0], [ja, "t", Me, 6, 246, Oq], [1, "t", 3, 6, 245, 0], [lt, "t", 5, Qj, 244, 0], [Ej, "t", Ea, 6, 243, ke], [1, "t", 4, 6, 242, 0], [fn, "t", Qe, 6, 241, 0], [fi, "t", 5, 6, 240, Jj], [1, "b", nj, 6, 239, 0], [1, "t", er, 6, 238, nj], [ja, "t", 4, 6, 237, Ea], [1, "t", 1, 6, 236, Ea], [lt, "t", qn, Qj, 235, xn], [fn, "b", Gi, kr, 234, Ka], [1, "t", 2, ei, 233, xn], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [lt, "t", Y, 6, 230, Oq], [lt, "t", ae, 6, 229, 0], [1, "t", 2, 6, 228, Ka], [1, "t", aq, 6, 227, 0], [1, "b", 2, 6, 226, Ka], [1, "t", 4, 6, 225, Ea], [1, "t", 0, 6, 224, ke], [1, "t", 2, 6, 223, 0], [1, "t", 0, Fa, 222, 0], [lt, "b", 2, 6, 221, Ka], [X, "t", 4, 6, 220, ke], [Ej, "b", 3, Ae, 219, 0], [Ps, "t", 5, ei, 218, Oq], [1, "t", Js, 6, 217, Js], [1, "t", 3, 6, 216, 0], [1, "b", 0, Ae, 215, Ea], [1, "t", sj, Xa, 214, 0], [ja, "t", Gi, Ae, 213, 0], [1, "t", Oq, 6, 212, 0], [Ps, "t", 2, 6, 211, 0], [ja, "b", 3, kr, 210, Oq], [ae, "t", xn, 6, 209, Ka], [ja, "t", aq, 6, 207, Oq], [1, "t", lr, Qj, 208, 0], [fn, "t", Oq, hn, 206, 0], [1, "t", Gi, O, 205, 0], [X, "t", 2, 6, 203, 0], [lt, "b", xn, Ae, 202, 0], [fi, "t", 3, Fa, 201, ke], [fi, "t", Jn, O, 199, nj], [1, "t", 0, Qj, 198, 0], [fi, "t", Te, O, 197, Oq], [1, "t", pj, Xa, 196, ke], [1, "t", Ej, Ae, 195, 0], [Ps, "t", 3, 6, 194, 0], [1, "t", 4, hn, 192, 0], [ae, "t", Cs, 6, 191, ke], [Ej, "b", Ea, 6, 190, 0], [ae, "t", 3, ss, 189, 0], [1, "t", 4, 6, 187, 0], [X, "b", 0, 6, 186, 0], [ae, "t", 2, 6, 185, 0], [Ps, "t", 4, Fa, 184, 0], [1, "t", 2, hn, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, Fa, 181, 0], [1, "t", Y, 6, 180, 0], [1, "t", 2, 6, 179, nj], [1, "t", Jj, 6, 178, 0], [X, "t", Vn, Ae, 177, 0], [1, "t", bq, 6, 176, Js], [fi, "b", En, Ae, 175, Oq], [1, "t", ja, Xa, 174, Oq], [ja, "t", 5, O, 173, 0], [1, "t", Gi, hn, 256, Oq], [1, "t", Gs, 6, 204, Js], [1, "t", pj, Ae, 200, 0], [X, "t", lr, Xa, 193, ke], [Ej, "t", lr, kr, 188, Jj], [Ps, "f", 1, ss, 150, 1], [fn, "f", Vn, hn, 151, 1], [1, "f", Te, 6, 149, ja], [1, "f", fi, 6, 148, X], [1, "f", Te, Ae, 147, lt], [ae, "f", 2, ei, 145, fi], [fn, "f", Cs, Ae, 143, 1], [1, "f", 1, ss, 146, 1], [ja, "f", 1, 6, 144, 1], [X, "f", X, 6, 142, 1], [ae, "f", 2, 6, 141, Ps], [X, "f", 2, kr, 139, ae], [1, "f", 2, 6, 137, ja], [ja, "f", z, hn, 135, 1], [Ej, "f", z, 6, 133, ja], [1, "f", 1, 6, 140, X], [1, "f", ae, hn, 138, ja], [1, "f", fn, 6, 136, X], [1, "f", fn, 6, 134, 1], [Ej, "f", X, ei, 132, X], [1, "f", Cs, 6, 131, lt], [1, "f", lr, Fa, 129, 1], [1, "f", z, Ae, 127, Ej], [1, "f", Gi, Qj, 125, 1], [1, "f", 2, 6, 123, 1], [Ej, "f", Gi, 6, 121, X], [1, "f", lt, ei, 130, 1], [1, "f", lt, Fa, 128, 1], [X, "f", X, Ae, 126, Ps], [1, "f", lt, hn, 124, fn], [1, "f", X, 6, 122, 1], [1, "f", ae, Fa, 120, fi], [fi, "f", 2, ss, 119, 1], [lt, "f", Vn, Qj, 117, X], [1, "f", 2, 6, 115, 1], [1, "f", En, kr, 113, ja], [Ej, "f", Te, Fa, 111, 1], [Ps, "f", 2, 6, 109, 1], [1, "f", 1, Ae, 118, 1], [1, "f", fn, 6, 116, 1], [1, "f", 1, 6, 114, ae], [1, "f", ja, 6, 112, X], [Ps, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, Ps], [1, "f", X, ss, 106, Ej], [X, "f", Ps, ss, 104, 1], [1, "f", 2, 6, 107, ae], [X, "f", mj, 6, 105, 1], [1, "f", En, hn, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, fi], [1, "f", 2, 6, 97, fn], [1, "f", Cs, 6, 95, lt], [ae, "f", En, 6, 93, 1], [Ps, "f", 2, Fa, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", fi, ei, 100, 1], [lt, "f", ae, Ae, 98, fi], [ja, "f", ja, 6, 96, 1], [1, "f", 1, 6, 94, Ps], [1, "f", Ps, 6, 92, 1], [1, "f", 1, O, 90, 1], [1, "f", 1, 6, 88, lt], [1, "f", 1, Qj, 86, 1], [1, "f", 2, ei, 89, 1], [ae, "f", Vn, 6, 87, 1], [fi, "f", 2, 6, 85, 1], [lt, "f", z, ss, 83, lt], [1, "f", 2, Qj, 81, ja], [1, "f", 2, 6, 79, X], [1, "f", Cs, 6, 77, ae], [ja, "f", 1, 6, 84, lt], [1, "f", 1, O, 82, ja], [fn, "f", ae, 6, 80, 1], [1, "f", 1, 6, 78, X], [1, "f", 1, 6, 76, Ps], [Ps, "f", mj, 6, 75, fn], [fn, "f", Cs, 6, 73, 1], [1, "f", z, O, 71, 1], [1, "f", 2, ss, 69, 1], [X, "f", Vn, ei, 67, lt], [1, "f", 2, 6, 65, 1], [Ps, "f", Ps, 6, 74, 1], [1, "f", X, O, 72, fi], [fi, "f", Ps, ei, 70, 1], [1, "f", 1, 6, 68, Ej], [1, "f", 1, kr, 66, 1], [lt, "f", 1, Ae, 64, fi], [Ps, "f", 2, ss, 63, Ej], [X, "f", 2, 6, 61, Ej], [ae, "f", 2, ss, 59, 1], [Ps, "f", 2, 6, 57, X], [ja, "f", En, O, 55, 1], [ja, "f", Te, 6, 53, Ps], [1, "f", mj, hn, 51, ja], [1, "f", lt, 6, 62, ja], [Ps, "f", X, 6, 60, 1], [1, "f", fn, ss, 58, 1], [lt, "f", lt, kr, 56, 1], [1, "f", 1, Ae, 54, 1], [1, "f", 1, 6, 52, Ps], [1, "f", ae, O, 50, ae], [fi, "f", 2, 6, 49, lt], [1, "f", 2, 6, 47, ja], [Ps, "f", Vn, 6, 45, ja], [ja, "f", En, 6, 43, lt], [ja, "f", Vn, O, 41, Ps], [fi, "f", En, 6, 39, 1], [fn, "f", 1, ss, 48, ja], [1, "f", 1, 6, 46, Ej], [Ps, "f", 1, 6, 44, fi], [1, "f", Ej, hn, 42, 1], [1, "f", lt, 6, 40, 1], [fi, "f", 1, 6, 38, 1], [1, "f", Vn, Ae, 37, Ps], [ae, "f", 2, kr, 35, ja], [1, "f", Te, 6, 33, Ej], [Ps, "f", lr, Xa, 31, 1], [X, "f", Te, 6, 29, lt], [X, "f", lr, 6, 27, fi], [X, "f", fi, 6, 36, 1], [X, "f", 1, O, 34, 1], [Ps, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, ja], [lt, "f", 1, Ae, 28, Ps], [1, "f", Ps, ss, 26, 1], [1, "f", Gi, O, 25, ae], [1, "f", 2, 6, 23, lt], [ja, "f", lr, 6, 21, fi], [1, "f", lr, Fa, 19, ja], [1, "f", mj, 6, 17, Ps], [1, "f", 2, 6, 15, 1], [1, "f", lt, 6, 24, 1], [fn, "f", 1, O, 22, 1], [Ej, "f", X, 6, 20, 1], [lt, "f", fi, Fa, 18, 1], [1, "f", 1, 6, Uj, ja], [fi, "f", 2, 6, Iq, 1], [ja, "f", 2, kr, 11, ja], [1, "f", 2, 6, 9, ae], [ja, "f", 2, 6, Le, 1], [ae, "f", 1, hn, 14, ae], [lt, "f", ae, 6, 12, ja], [1, "f", ae, 6, 10, 1], [1, "f", lt, 6, qs, 1], [X, "f", 1, 6, 6, lt], [fn, "f", 1, 8, ss, Ej], [fi, "f", 2, 7, 6, fi], [1, "f", Cs, 9, 6, ja], [ja, "f", 2, 11, Fa, 1], [ja, "f", lr, Iq, 6, ja], [ja, "f", En, 15, hn, Ps], [1, "f", 1, Ki, 6, 1], [1, "f", Ej, C, kr, 1], [1, "f", 1, 14, 6, ae], [fi, "f", 1, 16, 6, lt], [ae, "f", 1, 18, 6, lt], [Ej, "f", Ps, 20, 6, 1], [lt, "f", 1, 22, Qj, 1], [ae, "f", 1, 24, ei, Ej], [1, "f", 1, 26, 6, lt], [1, "f", 2, Ne, hn, 1], [ae, "f", 2, 19, 6, 1], [fn, "f", mj, 21, O, 1], [Ps, "f", lr, 23, 6, 1], [ja, "f", Vn, 25, 6, fi], [1, "f", 2, 27, Ae, 1], [1, "f", En, 29, kr, 1], [ae, "f", 2, 31, ei, 1], [1, "f", En, 33, Qj, 1], [ae, "f", X, 28, hn, 1], [1, "f", Ps, 30, ss, X], [ae, "f", 1, 32, Qj, fi], [1, "f", 1, 34, hn, fi], [1, "f", Vn, 67, 6, 1], [ja, "f", Vn, 69, kr, X], [1, "f", Te, 71, 6, X], [1, "f", z, 73, ei, X], [X, "f", 2, 75, 6, lt], [1, "f", 1, 68, kr, 1], [1, "f", fn, 70, kr, lt], [ae, "f", 1, 72, Ae, 1], [1, "f", 1, 74, 6, 1], [fn, "f", fn, 76, 6, 1], [1, "f", Te, 77, 6, 1], [1, "f", mj, 79, 6, X], [X, "f", 2, 81, ss, fi], [1, "f", z, 83, Xa, 1], [ja, "f", Cs, 85, 6, 1], [1, "f", lt, 78, O, 1], [1, "f", X, 80, 6, 1], [1, "f", 1, 82, 6, fn], [fn, "f", Ej, 84, Xa, fi], [1, "f", 1, 86, ei, 1], [ja, "f", Vn, 87, 6, 1], [1, "f", 2, 89, Ae, fn], [1, "f", En, 91, ei, 1], [1, "f", 2, 93, 6, Ps], [Ej, "f", fi, 88, ss, fn], [ae, "f", 1, 90, Xa, 1], [1, "f", fn, 92, 6, 1], [1, "f", 1, 94, Xa, 1], [1, "f", 2, 95, ss, 1], [1, "f", Ej, 95, 7, fi], [fi, "f", lt, 83, Pj, 1], [1, "f", 1, 81, I, 1], [ja, "f", 1, 79, 7, 1], [1, "f", lt, 77, Mq, Ps], [Ps, "f", 1, 75, Le, 1], [X, "f", fn, 73, 7, ae], [fn, "f", 1, 71, xr, fi], [fn, "f", lt, 69, Mq, ae], [Ps, "f", Ej, 33, 7, 1], [1, "f", 1, 31, xr, fi], [1, "f", Ej, 29, 7, X], [lt, "f", X, 27, 7, 1], [1, "f", ja, 25, 7, lt], [1, "f", 1, 23, 7, 1], [1, "f", fi, 21, 7, X], [1, "f", 1, D, 7, fn], [fn, "f", Ej, Xj, Mq, 1], [lt, "f", 1, $n, Mj, X], [ja, "f", 1, Fe, Oi, fi], [fn, "f", ja, Ra, 7, lt], [Ps, "f", 1, wn, xr, 1], [1, "f", 1, 7, Ke, fn], [1, "s", 0, $q, 8, 1], [1, "t", sj, Ke, 174, Js], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, ke], [Ej, "b", Gi, 7, 177, 0], [X, "t", Sn, 94, 301, 0], [fn, "b", E, 95, 301, Js], [fn, "t", pj, 96, 301, ke], [fi, "t", 1, 97, 301, 0], [ae, "t", mj, 98, 301, Jj], [1, "t", 4, 99, 301, ke], [1, "t", Gi, wr, 301, nj], [ja, "t", mn, 96, 304, xn], [fn, "t", mj, 96, 302, ke], [1, "t", 2, 97, 304, 0], [lt, "t", 2, 96, 303, 0], [Ej, "t", Gj, 97, 303, 0], [ja, "t", 5, 98, 304, Ka], [1, "b", 2, 97, 302, Oq], [1, "b", Cs, 99, 304, nj], [Ej, "t", 1, 98, 303, 0], [fi, "t", sj, 98, 302, 0], [1, "t", Gs, 99, 303, 0], [1, "t", 4, Ns, 304, 0], [1, "t", 5, 99, 302, xn], [1, "t", aq, 101, 303, Jj], [X, "t", 2, 100, 303, 0], [fi, "t", Jj, Vs, 302, 0], [1, "t", xn, 101, 304, 0], [fn, "t", sj, 102, 304, nj], [1, "f", Ka, 94, Le, 1], [1, "f", 1, 93, 7, Ps], [1, "f", Ej, 92, 7, 1], [1, "f", Jj, 91, 7, 1], [1, "f", 1, 90, 7, fi], [1, "f", X, 89, Le, 1], [Ej, "f", 0, 88, 7, 1], [1, "f", ja, 87, 7, X], [lt, "f", 1, 86, Pj, Ps], [ja, "f", Ps, 85, I, lt], [1, "f", 0, 84, ls, ae], [fn, "f", Ps, 82, 7, 1], [fi, "f", Oq, 80, I, 1], [fi, "f", ja, 78, 7, Ej], [Ps, "f", Ka, 76, ls, fi], [1, "f", lt, 74, I, 1], [fn, "f", xn, 72, 7, ja], [lt, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, Ej], [fn, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, Ej], [1, "f", Ps, 28, Oi, ja], [lt, "f", Oq, 26, 7, 1], [1, "f", 1, 24, 7, 1], [Ps, "f", Js, 22, 7, 1], [Ps, "f", Ps, 20, 7, X], [Ej, "f", Oq, 18, ls, 1], [1, "f", 1, pq, Ke, ae], [1, "f", 0, 14, Pj, 1], [1, "f", 1, 12, Mq, ja], [1, "f", 0, 10, I, 1], [fi, "f", X, q, 7, 1], [fi, "s", fi, 7, 9, ae], [ja, "f", 0, 95, 152, 1], [fi, "f", 1, 95, 151, 1], [ae, "f", 0, 95, me, ae], [1, "f", 1, 95, de, X], [1, "f", ae, 95, qj, lt], [Ej, "f", Ps, 95, Ar, 1], [ja, "f", 0, 95, Pe, 1], [Ps, "f", Ka, 95, Jq, Ej], [1, "f", 1, 95, 21, ae], [Ej, "f", fn, 95, 26, 1], [1, "f", 1, 95, 37, fn], [1, "f", 0, 95, 44, 1], [1, "f", X, 95, 50, 1], [1, "f", 1, 95, 52, 1], [Ps, "f", nj, 95, 53, ja], [lt, "f", 1, 95, 54, Ej], [1, "f", fn, 95, 62, ja], [1, "f", xn, 95, 55, 1], [lt, "f", 1, 95, 64, 1], [Ej, "f", 0, 95, 58, 1], [Ej, "f", 0, 95, 61, ae], [1, "f", Jj, 95, 68, ae], [Ej, "f", Ea, 95, 72, 1], [ae, "f", Oq, 95, 78, 1], [X, "f", 1, 95, 115, fi], [1, "f", ja, 95, 117, 1], [X, "f", Ps, 95, 128, lt], [ja, "f", 0, 95, 85, 1], [X, "f", Js, 95, 91, 1], [ja, "f", Ka, 95, 95, Ej], [1, "f", ke, 95, 114, 1], [1, "f", mj, 95, 113, 1], [fn, "f", fi, 95, 119, fn], [1, "f", ke, 95, 120, 1], [fn, "f", Ej, 95, 121, fn], [ae, "f", 0, 95, 127, 1], [fi, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [fi, "f", ae, 95, 132, 1], [1, "f", ae, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, ae], [fn, "f", Js, 95, 147, lt], [ja, "f", fn, 95, 138, 1], [lt, "f", fn, 95, 144, fi], [Ej, "f", fi, 95, 10, 1], [1, "f", xn, 95, 8, 1], [1, "f", 1, 95, Vq, lt], [1, "f", 0, 95, 13, 1], [1, "f", ae, 95, 16, ae], [X, "f", X, 95, gq, Ps], [lt, "f", ke, 95, 18, lt], [X, "f", 1, 95, 45, ja], [ja, "f", 0, 95, 51, ja], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, fi], [1, "f", 1, 95, 59, lt], [1, "f", 1, 95, 60, 1], [X, "f", 1, 95, 63, 1], [ja, "f", 0, 95, 65, ja], [1, "f", Ps, 95, 66, 1], [lt, "f", 1, 95, 67, 1], [X, "f", Ps, 95, 69, 1], [fn, "f", X, 95, 70, ja], [1, "f", xn, 95, 71, fn], [X, "f", 1, 95, 73, fi], [1, "f", 1, 95, 74, 1], [1, "f", Oq, 95, 75, 1], [1, "f", ja, 95, 76, lt], [Ps, "f", ae, 95, 77, Ej], [fi, "f", X, 95, 79, 1], [fi, "f", 1, 95, 80, 1], [Ps, "f", 0, 95, 81, fi], [1, "f", Ps, 95, 82, Ps], [ae, "f", Jj, 95, 83, Ej], [1, "f", fn, 95, 84, 1], [1, "f", 1, 95, 86, Ej], [1, "f", ja, 95, 88, ja], [1, "f", 0, 95, 87, Ps], [X, "f", 1, 95, 89, Ps], [ae, "f", 1, 95, 90, X], [fi, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, lt], [ae, "f", fi, 95, 94, X], [ja, "f", ja, 95, 96, Ps], [1, "f", fn, 95, 97, Ps], [fn, "f", 0, 95, 98, fn], [1, "f", ae, 95, 99, 1], [fn, "f", 1, 95, 100, ae], [1, "f", ke, 95, 101, ja], [Ej, "f", 1, 95, 102, ae], [fn, "f", 0, 95, 103, 1], [1, "f", ae, 95, 104, 1], [ja, "f", ae, 95, 105, 1], [1, "f", 0, 95, 106, 1], [ae, "f", 1, 95, 107, ja], [1, "f", 1, 95, 108, 1], [1, "f", fn, 95, 109, Ps], [1, "f", Jj, 95, 110, 1], [lt, "f", fi, 95, 111, 1], [fi, "f", 0, 95, 112, ae], [fi, "f", 1, 95, 116, 1], [X, "f", 0, 95, 118, 1], [ae, "f", 0, 95, 122, 1], [1, "f", X, 95, 123, 1], [X, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, lt], [1, "f", ae, 95, 126, Ps], [1, "f", X, 95, 129, ae], [fn, "f", lt, 95, 133, Ej], [Ej, "f", 0, 95, 134, 1], [1, "f", Ej, 95, 135, ja], [1, "f", ae, 95, 139, ae], [1, "f", Oq, 95, 140, Ej], [lt, "f", 1, 95, 141, 1], [1, "f", lt, 95, 142, 1], [1, "f", 1, 95, 146, 1], [fi, "f", 0, 95, 145, Ej], [ae, "f", X, 95, 148, fi], [Ps, "f", 1, 95, 149, lt], [1, "f", fn, 95, 150, ja], [Ej, "f", ja, 95, 153, fn], [1, "cs", Jj, 64, 9, ja], [ae, "cs", 1, 64, ue, 1], [Ps, "cs", 2, 64, 16, 1], [Ps, "cs", Vn, 64, Dn, 1], [fi, "cs", 0, 64, 20, 1], [1, "cs", Ej, 64, 21, 1], [1, "cs", mj, 64, 22, ja], [lt, "cs", ke, 64, 23, ae], [1, "cs", 2, 64, 24, Ej], [1, "cs", lt, 64, 29, 1], [1, "cs", 2, 64, 30, fi], [1, "cs", E, 64, 31, 1], [Ps, "cs", Js, 64, 32, 1], [1, "cs", ae, 64, 33, 1], [1, "cs", Gi, 64, 34, 1], [ja, "cs", 0, 64, 35, ja], [ja, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, An, 1], [1, "cs", 1, 65, Dr, 1], [1, "cs", 2, 65, rs, fn], [ja, "cs", 3, 65, 11, fn], [1, "cs", lt, 65, rn, 1], [Ps, "cs", 0, 64, ce, 1], [1, "cs", Sr, 65, 17, ae], [fi, "cs", lr, 64, 18, fn], [1, "cs", 2, 65, 18, ja], [1, "cs", ke, 65, Aq, ae], [1, "cs", lt, 65, 20, ae], [ae, "cs", 3, 65, 21, Ps], [1, "cs", z, 65, 22, 1], [fi, "cs", 3, 65, 23, 1], [Ps, "cs", Js, 65, 24, fi], [1, "cs", Te, 65, 29, 1], [X, "cs", 3, 65, 30, fi], [ja, "cs", 0, 65, 31, 1], [ja, "cs", 1, 65, 32, ae], [1, "cs", Te, 65, 33, Ps], [fn, "cs", er, 65, 34, 1], [1, "cs", Vn, 63, 9, lt], [lt, "cs", 0, 62, 9, ja], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, Zs, 1], [ae, "cs", 2, 59, F, 1], [lt, "cs", 2, 58, Vq, ja], [fn, "cs", 0, 57, wn, ja], [lt, "cs", 2, 56, Vq, ja], [1, "cs", En, 55, F, Ej], [lt, "cs", 2, 54, 9, 1], [lt, "cs", 0, 53, 9, 1], [1, "cs", xn, 51, G, 1], [1, "cs", 2, 52, Dr, ja], [ja, "cs", En, 50, Zs, 1], [1, "cs", 2, 48, 9, 1], [ja, "cs", 2, 49, 9, ja], [1, "cs", 0, 47, wn, fi], [1, "cs", 0, 45, G, 1], [1, "cs", 0, 43, 9, fn], [ae, "cs", z, 46, 9, lt], [1, "cs", 2, 44, 9, ja], [fn, "cs", z, 42, 9, 1], [lt, "cs", Gi, 41, 9, lt], [1, "cs", ke, 40, wn, X], [lt, "cs", z, 39, Vq, ae], [1, "cs", 2, 38, Zi, 1], [Ej, "cs", 0, 37, Zi, Ej], [Ej, "cs", 0, 63, 8, 1], [ae, "cs", 2, 65, Oi, X], [X, "cs", 3, 64, 7, 1], [Ej, "cs", Te, 62, ir, 1], [1, "cs", fa, 61, 8, 1], [X, "cs", ae, 62, 7, ja], [1, "cs", 2, 63, Mj, 1], [Ej, "cs", 0, 64, Fa, lt], [Ps, "cs", 3, 65, Xa, X], [1, "cs", 2, 63, 6, 1], [1, "cs", mj, 62, ei, 1], [fn, "cs", Gi, 61, 6, 1], [lt, "cs", 2, 60, 6, 1], [lt, "cs", 2, 59, 6, fn], [1, "cs", 2, 61, I, 1], [Ej, "cs", nj, 60, ls, Ps], [Ps, "cs", 2, 60, 8, lt], [Ej, "cs", lr, 59, 7, Ej], [fi, "cs", 2, 59, 8, 1], [fi, "cs", ae, 58, 8, ja], [1, "cs", 1, 57, 6, X], [ae, "cs", X, 55, Ke, 1], [fi, "cs", Ka, 56, 6, fi], [ja, "cs", 2, 58, 6, 1], [X, "cs", 2, 58, 7, lt], [1, "cs", Gi, 57, xr, X], [1, "cs", 2, 56, 7, ae], [1, "cs", 2, 55, 6, 1], [X, "cs", z, 57, 8, 1], [X, "cs", z, 56, 8, 1], [1, "cs", 2, 55, 8, fi], [Ps, "cs", 0, 54, qs, 1], [1, "cs", Oq, 50, 7, 1], [1, "cs", 0, 53, 6, Ps], [1, "cs", Gi, 54, ei, 1], [1, "cs", Vn, 54, I, 1], [1, "cs", 2, 53, Mq, 1], [fn, "cs", 2, 52, Mq, 1], [1, "cs", 2, 52, 6, X], [1, "cs", 1, 52, 8, 1], [fi, "cs", Gi, 53, 8, ja], [1, "cs", 2, 51, tq, Ps], [1, "cs", 2, 51, 7, X], [Ps, "cs", Te, 51, 6, fi], [1, "cs", 2, 50, Fa, ae], [lt, "cs", Vn, 50, 8, X], [1, "cs", 2, 49, 8, Ej], [Ej, "cs", Vn, 49, 7, ae], [1, "cs", 2, 49, Ae, Ps], [fi, "cs", Ka, 46, 7, 1], [X, "cs", fn, 48, qs, X], [1, "cs", 1, 44, Ke, 1], [1, "cs", 1, 41, q, ae], [1, "cs", 2, 48, Pj, fn], [fn, "cs", 2, 48, 6, 1], [lt, "cs", 2, 47, ss, fn], [1, "cs", Te, 47, 7, 1], [1, "cs", 2, 47, 8, ja], [1, "cs", z, 46, 8, 1], [ae, "cs", 2, 45, 8, lt], [1, "cs", 2, 45, 7, 1], [1, "cs", Cs, 45, 6, 1], [ae, "cs", 2, 46, Xa, X], [1, "cs", 2, 44, Qj, 1], [Ej, "cs", Vn, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", lr, 43, Mq, 1], [1, "cs", mj, 43, 6, fn], [lt, "cs", z, 42, 6, 1], [Ej, "cs", 2, 42, 7, 1], [1, "cs", Vn, 42, q, 1], [Ps, "cs", Te, 41, 7, Ej], [1, "cs", Vn, 41, kr, Ps], [1, "cs", 2, 40, Qj, fi], [fn, "cs", 2, 40, Mj, ae], [1, "cs", 2, 40, An, fn], [ae, "cs", 2, 39, 8, X], [1, "cs", 0, 39, ls, 1], [1, "cs", 1, 38, An, 1], [lt, "cs", Cs, 39, 6, 1], [ja, "cs", Cs, 38, Qj, fn], [1, "cs", Cs, 37, kr, 1], [1, "cs", Vn, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [X, "cs", lr, 37, 8, fi], [ja, "cs", 2, 37, jn, 1], [ja, "cs", En, 38, 10, Ps], [1, "cs", Js, 38, Pn, 1], [1, "cs", 0, 38, Ne, Ps], [1, "cs", 1, 37, 18, 1], [fn, "cs", 0, 38, ft, Ps], [Ej, "cs", 2, 37, me, ae], [1, "cs", Vn, 37, rn, 1], [Ej, "cs", 2, 37, 17, ae], [1, "cs", 2, 38, R, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", Sn, 38, 16, lt], [1, "cs", ke, 37, 21, 1], [1, "cs", ke, 38, 22, 1], [ja, "cs", Oq, 38, 24, ja], [ae, "cs", mj, 37, 20, 1], [1, "cs", 2, 38, ur, 1], [lt, "cs", 2, 38, 21, 1], [Ej, "cs", Ps, 37, 23, fn], [1, "cs", mq, 37, 22, 1], [1, "cs", 3, 38, 23, Ej], [1, "cs", 2, 37, 24, 1], [1, "cs", ke, 38, 30, ja], [fn, "cs", Jj, 38, 32, 1], [X, "cs", 0, 37, 31, ae], [1, "cs", lt, 38, 34, 1], [1, "cs", lt, 37, 29, 1], [ae, "cs", 2, 38, 29, 1], [fn, "cs", 2, 37, 30, 1], [1, "cs", Vn, 38, 31, ae], [Ej, "cs", Cs, 37, 32, 1], [Ej, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, fn], [1, "cs", 2, 36, qs, 1], [fi, "cs", 0, 36, gr, 1], [ae, "cs", Ea, 35, 9, 1], [ja, "cs", 2, 36, Zi, Ej], [1, "cs", z, 36, 10, lt], [fi, "cs", 2, 35, ue, 1], [ja, "cs", lt, 33, 8, X], [1, "cs", 3, 34, 9, Ps], [1, "cs", 3, 35, An, 1], [ae, "cs", Cs, 34, 8, 1], [Ps, "cs", nj, 36, 7, fi], [1, "cs", fi, 34, Pj, fn], [ja, "cs", lr, 35, xr, fn], [1, "cs", 2, 35, 6, 1], [X, "cs", 2, 36, O, Ej], [fn, "cs", mj, 68, Gq, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", Js, 67, 9, Ej], [1, "cs", Js, 66, An, fi], [ja, "cs", En, 67, ir, 1], [X, "cs", 1, 68, 8, fn], [1, "cs", Ej, 66, aa, ja], [1, "cs", 2, 67, 10, ae], [X, "cs", xn, 66, Fa, lt], [ja, "cs", 2, 66, $q, ae], [ae, "cs", 2, 67, 7, 1], [fn, "cs", lr, 69, V, fn], [1, "cs", mj, 63, 32, 1], [1, "cs", z, 62, 34, ja], [1, "cs", lr, 60, 35, X], [1, "cs", 3, 59, 35, X], [1, "cs", 0, 61, 35, 1], [Ps, "cs", Jj, 63, 34, ae], [1, "cs", Gi, 63, 33, 1], [1, "cs", Te, 63, 35, 1], [lt, "cs", 2, 62, 35, ae], [1, "cs", Cs, 58, 36, 1], [1, "cs", 1, 59, 36, X], [Ej, "cs", 1, 62, 36, ae], [fi, "cs", lr, 60, 36, 1], [Ej, "cs", Vn, 61, 34, 1], [lt, "cs", oe, 62, 33, fi], [1, "cs", Qe, 63, 36, fn], [1, "cs", oe, 61, 36, 1], [1, "cs", 0, 42, 36, ae], [Ps, "cs", X, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [Ej, "cs", 3, 40, 36, 1], [fn, "cs", Ie, 43, 36, 1], [lt, "cs", fi, 40, 35, 1], [1, "cs", Cs, 41, 35, 1], [1, "cs", Vn, 40, 34, Ps], [1, "cs", 2, 39, 34, Ej], [Ps, "cs", 2, 39, 33, ja], [X, "cs", z, 39, 32, 1], [1, "cs", xn, 40, 33, 1], [ae, "cs", En, 41, 34, lt], [1, "cs", ja, 44, 36, fi], [fi, "cs", 3, 43, 35, Ps], [1, "cs", Cs, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [Ps, "cs", 3, 59, 30, 1], [fi, "cs", Js, 60, 29, ae], [1, "cs", 2, 60, 28, ae], [1, "cs", 3, 60, 27, 1], [1, "cs", Jj, 60, 26, 1], [1, "cs", 2, 54, 25, ja], [X, "cs", z, 48, 25, ja], [1, "cs", mj, 42, 26, X], [Ej, "cs", Js, 55, 25, 1], [1, "cs", 2, 59, 26, ae], [fn, "cs", 0, 43, 26, 1], [Ej, "cs", 1, 42, 27, 1], [1, "cs", Te, 42, 28, 1], [fn, "cs", En, 43, 30, 1], [1, "cs", 0, 42, 29, Ps], [Ej, "cs", 0, 54, 24, 1], [1, "cs", Ea, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, Ej], [X, "cs", mj, 63, 22, ja], [ja, "cs", lr, 63, 21, 1], [lt, "cs", 2, 39, 21, ja], [1, "cs", 3, 57, vr, 1], [lt, "cs", 2, 56, 18, 1], [1, "cs", er, 51, 21, 1], [ja, "cs", xn, 51, d, 1], [fn, "cs", 2, 51, Rq, 1], [Ej, "cs", yr, 51, vr, 1], [1, "cs", z, 63, za, 1], [1, "cs", mj, 63, 10, 1], [fi, "cs", 2, 56, Iq, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, fi], [1, "cs", Vn, 47, 18, 1], [fn, "cs", 2, 46, an, Ej], [1, "cs", Ka, 46, 13, Ej], [fi, "cs", mj, 45, 13, fn], [1, "cs", En, 39, 10, 1], [X, "cs", 2, 39, 16, Ps], [fn, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [Ej, "a", X, 53, 14, 1], [1, "a", 1, 49, he, 1], [ae, "de", 8, 55, Ss, 0], [fn, "de", F, 48, 28, 0], [ja, "de", jn, 58, 26, 0], [X, "de", 11, 59, 29, 0], [1, "de", gr, 55, 34, 0], [Ej, "de", 10, 48, 33, 0], [Ej, "de", 9, 41, 32, nj], [1, "de", Dr, 56, 24, 0], [1, "de", wn, 62, 16, 0], [ae, "de", 9, 45, 11, nj], [ja, "de", Vq, 44, ce, xn], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, ke], [1, "de", _, 63, 31, nj], [Ps, "de", 8, 60, 30, ke], [1, "de", 8, 43, 26, Oq], [ja, "de", as, 43, 29, 0], [1, "de", 10, 53, 29, 0], [ja, "de", 10, 53, 24, 0], [ja, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, xn], [1, "de", 10, 39, 26, Ka], [fn, "de", Zi, 46, 24, ke], [X, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, Ka], [Ej, "de", 32, 55, 35, ke], [fn, "de", 32, 60, 33, Ea], [Ps, "de", 32, 63, 28, nj], [lt, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, or, 0], [fi, "de", 32, 63, W, 0], [1, "de", 32, 59, 10, 0], [ja, "de", 32, 56, 12, 0], [lt, "de", 32, 52, 17, ke], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, de, 0], [fn, "de", 32, 39, na, ke], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [Ej, "de", 32, 43, 34, Ea], [ja, "de", 32, 47, 34, nj], [1, "de", 31, 54, 33, ke], [1, "de", 31, 59, 24, 0], [X, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, Ea], [1, "de", 31, 39, 27, 0], [Ps, "de", 31, 48, 27, Ka], [Ej, "de", 31, 57, 27, 0], [ja, "de", 32, 44, 27, nj], [1, "d", 0, bs, W, Ej], [lt, "d", 0, 89, Iq, 1], [1, "d", 1, 91, 21, lt], [Ej, "d", 1, 10, 22, 1], [fi, "f", 2, 89, vr, ja], [1, "f", 0, 88, 19, 1], [1, "g", fn, 85, 22, fi], [1, "s", 1, 90, 29, 1], [Ej, "s", ae, 92, 15, 1], [1, "s", ke, 91, 31, lt], [1, "s", Te, 90, 38, 1], [1, "s", 0, 91, 42, Ps], [ja, "s", 0, 90, 49, 1], [ja, "f", 1, 86, 43, ae], [fn, "f", 0, 81, 45, fi], [fi, "f", mj, 66, 44, ae], [Ej, "f", 2, 55, 49, Ps], [lt, "f", Ej, 54, 50, ja], [lt, "f", lr, 43, 45, 1], [1, "f", mj, 31, 48, Ps], [ae, "f", 1, 27, 39, Ej], [1, "f", 1, 80, 46, 1], [fn, "f", ja, 69, 48, Ej], [ae, "g", Oq, 80, 40, 1], [lt, "g", 2, 81, 40, Ej], [fi, "s", 2, 77, 39, Ps], [X, "s", 0, 68, 43, fn], [X, "s", 2, 57, 41, 1], [1, "s", fn, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", Gi, 48, 48, 1], [1, "f", 2, js, 12, Ej], [ja, "f", xn, 13, 31, Ps], [1, "f", 1, kj, 32, 1], [X, "s", ke, 15, 27, lt], [1, "s", Ea, Iq, 39, 1], [1, "f", 2, 11, 17, fi], [Ps, "f", 1, 12, 18, 1], [ae, "g", lr, 12, 25, 1], [1, "f", ke, 16, 45, Ps], [Ps, "f", 1, 17, 46, fn], [1, "s", lt, 74, 48, lt], [Ps, "s", 1, 20, 47, fi], [lt, "g", 0, 58, 59, ja], [1, "g", Ka, 46, 72, 1], [fi, "g", 0, 69, 79, fi], [1, "g", Ea, 72, 74, fi], [fn, "g", 0, 26, 88, lt], [fn, "g", 0, 20, 74, ae], [ja, "g", ke, 28, 67, 1], [ae, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [fi, "g", 0, 87, 72, lt], [ae, "g", 0, sr, 85, 1], [1, "g", fn, 85, 97, lt], [Ej, "g", lt, 68, 104, ja], [1, "g", X, 63, 91, ae], [fi, "g", 1, 39, 90, 1], [ja, "g", 1, 34, 99, 1], [Ps, "g", 1, 17, 103, lt], [1, "g", 2, 77, 60, 1], [Ps, "g", 2, Ar, 56, ja], [ae, "g", 2, 39, 60, 1], [X, "g", lr, 87, 57, 1], [X, "f", 0, 9, 62, ae], [1, "f", xn, C, 81, lt], [1, "f", Ea, 26, 59, 1], [X, "f", Js, 35, 53, fi], [1, "f", 0, 44, 58, 1], [ae, "f", Js, 88, 62, 1], [1, "f", Ka, 91, 82, lt], [Ps, "f", Oq, 84, 85, Ej], [fn, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [fi, "f", xn, 62, 83, 1], [1, "f", Ea, 34, 81, 1], [Ej, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, fn], [1, "f", lt, 81, 70, 1], [X, "f", 1, 91, 72, fn], [ja, "f", 1, 8, 91, ja], [fi, "f", ae, 14, 81, fn], [1, "f", 1, 29, 79, 1], [fn, "f", 1, Fe, 65, 1], [1, "f", X, 46, 97, 1], [ja, "f", Ps, 43, 73, 1], [fi, "f", 1, 60, 69, 1], [ja, "f", 1, 70, 96, fn], [1, "f", lt, 58, 84, fn], [lt, "s", 1, 56, 76, lt], [Ps, "s", 1, 85, 74, fn], [Ps, "s", Js, 72, 71, 1], [1, "s", xn, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", ke, Jq, 66, fi], [X, "s", 0, 47, 83, Ps], [ae, "s", Oq, 29, 86, ae], [X, "s", 0, 78, 92, ja], [fi, "s", 0, 62, 102, Ps], [1, "s", 0, 18, 95, 1], [1, "s", Cs, 64, 101, ja], [1, "s", 2, 78, 84, 1], [X, "s", z, 49, 83, 1], [1, "s", 2, 15, 76, ae], [Ps, "s", 2, 21, 84, lt], [fn, "f", ja, 26, 94, fi], [lt, "f", 2, 23, 96, X], [1, "f", 2, 25, 72, Ps], [1, "f", En, 85, 77, fi], [1, "f", Te, 79, 95, 1], [X, "f", lr, 51, 65, fn], [1, "f", z, 69, 60, X], [ae, "f", 1, 25, 105, fn], [1, "s", fi, $a, 68, 1], [1, "s", 0, 55, 76, fn], [1, "s", xn, 74, 59, Ps], [X, "f", fn, 46, 142, fi], [1, "f", 1, Aq, 140, fi], [fi, "f", 1, 77, 137, 1], [fi, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [Ps, "f", 0, 33, 127, 1], [1, "f", nj, 76, 121, X], [fi, "f", xn, 55, 121, ae], [fn, "f", 0, 13, 123, 1], [1, "f", Ka, 18, 141, lt], [ja, "f", Ea, 40, 137, 1], [X, "f", 2, 76, 142, 1], [1, "f", Vn, 57, 140, fi], [ae, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, Ej], [ja, "f", Gi, 29, 131, X], [1, "f", Js, 70, 150, X], [1, "f", 0, 28, 146, 1], [ja, "f", Ka, pa, 132, fi], [fi, "f", 0, 90, 129, 1], [ja, "f", ja, 87, 131, ja], [Ej, "f", 0, 91, 143, 1], [1, "f", Cs, 87, 145, ja], [fn, "f", 1, 89, 141, 1], [lt, "f", lt, 63, 130, 1], [fn, "f", Ej, 75, 122, fi], [fn, "f", 1, 52, 124, fn], [fi, "f", 1, 34, 127, ja], [1, "f", 1, ti, 123, ae], [fn, "f", ae, 24, 122, 1], [lt, "f", 0, 83, 108, ae], [1, "f", 0, 89, 118, X], [X, "f", Js, 56, 107, 1], [1, "f", 0, 38, 113, 1], [fi, "f", 0, Ms, 110, fi], [fn, "f", 1, 80, 105, 1], [lt, "f", 1, 82, 109, ae], [fi, "f", 1, 87, 118, 1], [Ps, "f", 1, 59, 110, 1], [X, "f", 1, 29, 111, ae], [Ps, "f", 2, 28, 112, fn], [1, "f", Cs, 70, 112, 1], [X, "f", 2, 42, 111, 1], [ae, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [Ps, "s", Ka, 25, 172, 1], [1, "s", Ea, 22, 161, fi], [1, "s", Jj, 35, 152, Ej], [fi, "s", Js, 66, 144, 1], [X, "s", 0, 87, 145, 1], [ae, "s", Oq, 86, 145, Ej], [1, "s", nj, 84, 135, Ej], [1, "s", Ea, 69, 133, 1], [1, "s", 0, 84, 122, fn], [1, "s", ke, 68, 121, 1], [fi, "s", 0, 48, 124, lt], [fn, "s", 0, 26, 129, fi], [1, "s", 0, 9, 127, 1], [1, "s", ke, aa, 144, Ps], [1, "s", 0, 9, 109, ja], [Ps, "s", xn, 35, 101, 1], [1, "s", ke, 47, 109, Ej], [1, "s", 0, 58, 111, Ej], [lt, "s", Jj, 84, 110, 1], [ae, "s", 0, 28, 114, 1], [fn, "s", 1, 30, 116, 1], [X, "s", Ps, 46, 112, ae], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, X], [Ps, "s", X, 49, 127, Ps], [1, "s", Ps, 66, 134, fi], [fi, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, X], [1, "s", fn, 21, 164, 1], [1, "s", 1, bs, 147, 1], [1, "s", 1, 24, 130, 1], [X, "s", 1, pa, 125, X], [X, "s", X, 65, 158, fn], [Ej, "s", Ej, 83, 167, lt], [1, "s", Ej, 65, 167, 1], [1, "s", ja, 47, 164, ja], [1, "s", 1, 56, 168, 1], [fn, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", Vn, 79, 149, fi], [1, "s", mj, 75, 144, ae], [fi, "s", 2, 57, 150, ja], [fn, "s", Te, 47, 143, 1], [Ej, "s", En, 31, 145, lt], [1, "s", mj, 36, 138, 1], [Ps, "s", 2, as, 163, 1], [1, "s", 2, 22, 142, ja], [ja, "g", Cs, 78, 132, ae], [1, "g", 1, 48, 135, 1], [Ej, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [X, "g", 2, 70, 80, Ps], [ae, "g", Te, $n, 86, 1], [fn, "g", 2, 47, 75, lt], [1, "g", 2, 36, 89, 1], [ja, "g", lr, 80, 90, 1], [1, "f", X, 39, 118, 1], [1, "d", mj, 84, 54, ja], [Ej, "d", Te, fe, 54, Ps], [1, "de", 7, xq, nr, Oq], [1, "de", 5, rn, 28, 0], [Ps, "de", 5, Vq, 25, 0], [1, "de", Me, 34, 41, nj], [Ps, "de", 4, 28, 40, ke], [1, "de", O, 31, 47, Ka], [1, "de", kr, 12, 39, 0], [1, "de", Gs, Ms, 47, Js], [fi, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, Js], [1, "de", 6, 40, 42, 0], [Ej, "de", 7, 20, 48, 0], [fn, "de", Mj, 29, 59, ke], [fn, "de", Ae, 27, 58, 0], [fn, "de", Ae, Gr, 54, Ka], [lt, "de", 5, 12, 66, Jj], [Ps, "de", Gj, 37, 53, 0], [fn, "de", sj, 10, 63, Jj], [1, "de", ls, 49, 48, ke], [Ps, "de", 7, 37, 63, 0], [Ej, "de", Xa, 33, 68, 0], [1, "de", 6, 56, 52, 0], [fi, "de", 5, 59, 58, 0], [1, "de", Ae, 48, 58, Ka], [fn, "de", Ha, 53, 63, 0], [Ej, "de", _n, 67, 44, 0], [fn, "de", 5, 70, 49, nj], [1, "de", et, 82, 55, 0], [ae, "de", Gj, 79, 41, 0], [1, "de", Me, 91, 29, nj], [Ej, "de", Ke, 91, 43, 0], [lt, "de", Xa, 85, 44, 0], [1, "de", O, 74, 60, 0], [ja, "de", 6, 90, qs, Js], [1, "de", Me, 91, $n, 0], [Ps, "de", mn, 87, 20, nj], [1, "de", xr, 93, 11, 0], [1, "de", kr, 91, 21, Oq], [Ej, "de", Fa, 85, 35, xn], [ja, "de", qn, 93, 58, xn], [1, "de", 5, 87, 63, Ea], [X, "de", Mj, 77, 62, Ea], [1, "de", kr, 68, 61, nj], [ae, "de", 5, 90, 73, 0], [1, "de", Nr, 87, 71, Oq], [1, "de", ls, 80, 71, 0], [fi, "de", 7, 83, 77, Oq], [1, "de", Pj, 89, 83, Ka], [1, "de", Nr, 71, 80, ke], [fi, "de", 4, 71, 70, 0], [Ps, "de", 5, 63, 72, Ea], [1, "de", bq, 54, 75, Ka], [X, "de", 5, 44, 83, ke], [Ej, "de", 5, 42, 74, Ka], [ae, "de", 5, Ui, 81, 0], [X, "de", _n, 29, 80, Ka], [1, "de", 4, 37, 90, Jj], [1, "de", 4, Ke, 75, 0], [1, "de", kr, 22, 74, 0], [1, "de", kr, 43, 95, 0], [1, "de", 6, 57, 85, Js], [fn, "de", O, ft, 94, Ea], [Ej, "de", 6, F, 92, xn], [lt, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [ja, "de", aq, 54, 108, 0], [1, "de", aq, 55, 95, ke], [Ej, "de", 5, 35, 104, Ka], [1, "de", 5, uj, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, Jj], [Ej, "de", $q, 11, 104, 0], [ae, "de", 7, Zs, 111, xn], [fi, "de", 7, 40, 114, Oq], [fn, "de", I, 28, 117, Ea], [1, "de", 7, 47, 113, Js], [1, "de", 7, 63, 104, Ea], [Ps, "de", Nr, 64, 92, ke], [ae, "de", 6, 86, 97, Js], [1, "de", 5, 76, 91, 0], [1, "de", qn, 85, 86, Js], [1, "de", 6, 78, 83, nj], [1, "de", 6, 71, 97, 0], [ae, "de", 4, 69, 105, nj], [1, "de", 4, 79, 104, xn], [1, "de", Ha, 86, 109, Jj], [1, "de", bq, 86, 118, xn], [1, "de", Me, 70, 113, 0], [Ej, "de", 6, 69, 121, ke], [Ej, "de", 6, 76, 122, 0], [ae, "de", Mj, 87, 130, 0], [1, "de", Nr, 84, 123, Ea], [1, "de", pj, 57, 121, Ka], [Ps, "de", aq, 53, 125, 0], [1, "de", Me, 62, 131, 0], [1, "de", Fa, 67, 143, ke], [fi, "de", 5, 77, 143, xn], [ja, "de", br, 85, 136, ke], [1, "de", 6, 87, 147, Js], [1, "de", 6, 92, 140, 0], [fi, "de", _n, 93, 127, Ea], [1, "de", 5, 93, 106, 0], [Ej, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", cn, 54, 138, xn], [Ps, "de", Ae, 29, 145, nj], [1, "de", hn, 29, 132, Ka], [1, "de", Ae, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", Y, 23, 131, 0], [1, "de", 5, 9, 134, Ea], [Ps, "de", Ae, 11, 121, 0], [1, "de", Ha, 26, 121, Js], [1, "de", 35, 58, 150, ke], [1, "de", 33, 48, 156, xn], [lt, "de", 33, 25, 158, 0], [fi, "de", 33, 36, 154, 0], [ja, "de", 34, 9, 154, 0], [1, "de", 34, W, 148, Jj], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [fn, "de", 34, 47, 144, 0], [Ej, "de", 34, 68, 142, ke], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, ke], [1, "de", 36, 90, 141, xn], [ja, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, Oq], [ae, "de", 35, 56, 122, nj], [lt, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, Oq], [1, "de", 35, 37, 102, Ka], [fi, "de", 33, 18, 97, Oq], [1, "de", 34, jn, 83, Jj], [fi, "de", 33, 19, 73, 0], [Ej, "de", 33, 10, 60, ke], [1, "de", 35, 24, 60, Oq], [Ej, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, Ca, 32, ke], [1, "de", 33, Vq, 24, 0], [fn, "de", 35, 35, 27, Ka], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, xn], [1, "de", 33, 45, 35, xn], [fi, "de", 35, 53, 39, Ea], [Ps, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, Ea], [1, "de", 33, 68, 112, 0], [fi, "de", 33, 49, 109, nj], [1, "de", 33, 46, 95, 0], [ae, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, Js], [1, "de", 36, 70, 72, Js], [Ej, "de", 36, 78, 63, 0], [Ej, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [Ej, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, nj], [1, "de", 33, 90, 19, xn], [1, "de", 34, 92, Gq, 0], [ja, "de", 35, 75, 39, ke], [1, "de", 35, 67, 42, Jj], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [fi, "de", 36, 42, 61, nj], [X, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, Ka], [1, "de", 33, 46, 85, ke], [Ej, "de", 33, 64, 84, nj], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [fi, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, nj], [1, "de", 35, 20, 55, Ea], [Ej, "de", 35, qj, 52, 0], [1, "s", 2, 12, 171, 1], [lt, "r", Jq, 188, 0], [1, "r", 21, 188, Oq], [lt, "r", 22, 188, 0], [lt, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, Oq], [1, "r", 24, 189, 0], [Ej, "r", 23, 189, Js], [1, "r", 22, 189, 0], [Ps, "r", 21, 189, 0], [ae, "r", zj, 189, 0], [1, "r", 19, 189, Ka], [1, "r", Hj, 190, Ea], [1, "r", Aq, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, xn], [ae, "r", 22, 191, xn], [1, "r", 24, 191, 0], [Ej, "r", 23, 191, Oq], [fi, "r", 25, 191, xn], [1, "r", 25, 190, Js], [1, "r", 24, 190, 0], [1, "r", 23, 190, ke], [ja, "r", 22, 190, nj], [1, "r", 21, 190, xn], [fn, "r", Ji, 190, 0], [1, "r", 26, 190, 0], [fn, "r", 26, 191, Ea], [1, "r", 24, 193, ke], [1, "r", 23, 193, ke], [1, "r", 22, 193, nj], [1, "r", Ji, 192, xn], [1, "r", 21, 192, Ka], [1, "r", 22, 192, 0], [lt, "r", 23, 192, 0], [1, "r", 24, 192, 0], [fn, "r", 25, 192, 0], [1, "r", 53, 199, nj], [1, "r", 52, 200, 0], [1, "r", 54, 199, Jj], [1, "r", 55, 199, 0], [fn, "r", 55, 200, nj], [1, "r", 54, 200, Js], [fn, "r", 53, 200, 0], [1, "r", 51, 200, 0], [ja, "r", 56, 200, 0], [fn, "r", 55, 201, Js], [fn, "r", 54, 201, xn], [ja, "r", 55, 202, 0], [1, "r", 54, 203, Jj], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [Ps, "r", 53, 202, Ea], [X, "r", 52, 202, Oq], [lt, "r", 53, 201, ke], [Ej, "r", 52, 201, Oq], [fi, "r", 51, 201, 0], [Ej, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, Ka], [Ps, "r", 56, 201, Jj], [1, "r", 53, 203, ke], [fi, "r", 52, 203, Oq], [1, "r", 51, 203, Jj], [lt, "r", 56, 202, 0], [1, "r", 55, 203, 0], [fi, "r", 53, 204, 0], [1, "r", 52, 204, 0], [Ej, "r", 55, 204, xn], [1, "r", 56, 203, 0], [Ps, "r", 56, 244, nj], [Ej, "r", 54, 246, nj], [1, "r", 50, 248, 0], [1, "r", 48, 248, Js], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [Ej, "r", 44, 238, 0], [ae, "r", 43, 238, Js], [1, "r", 46, 238, xn], [1, "r", 47, 238, 0], [fn, "r", 48, 238, 0], [1, "r", 49, 238, 0], [Ps, "r", 50, 238, nj], [fi, "r", 51, 238, Oq], [ja, "r", 52, 238, 0], [1, "r", 53, 238, ke], [X, "r", 54, 239, 0], [1, "r", 53, 240, 0], [X, "r", 53, 239, Oq], [fi, "r", 52, 239, nj], [fn, "r", 51, 239, Oq], [1, "r", 50, 239, Ea], [1, "r", 49, 239, nj], [1, "r", 48, 239, 0], [ae, "r", 47, 239, Ea], [1, "r", 46, 239, 0], [1, "r", 45, 239, nj], [ja, "r", 44, 239, 0], [1, "r", 43, 239, Ka], [ja, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, Ka], [1, "r", 43, 240, Js], [Ej, "r", 44, 240, Ka], [1, "r", 45, 240, 0], [ja, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, Js], [1, "r", 50, 240, 0], [ja, "r", 51, 240, Js], [fn, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, Ka], [1, "r", 56, 241, Js], [1, "r", 55, 241, Js], [Ps, "r", 54, 241, 0], [ae, "r", 53, 241, Jj], [Ej, "r", 52, 241, 0], [ae, "r", 51, 241, nj], [lt, "r", 49, 241, nj], [1, "r", 50, 241, 0], [fn, "r", 48, 241, Ka], [1, "r", 47, 241, 0], [Ej, "r", 46, 241, 0], [1, "r", 45, 241, nj], [ae, "r", 44, 241, 0], [fi, "r", 43, 241, Oq], [1, "r", 42, 241, 0], [1, "r", 41, 241, xn], [X, "r", 40, 242, 0], [ae, "r", 41, 242, 0], [1, "r", 42, 242, nj], [fi, "r", 43, 242, Js], [Ej, "r", 44, 242, 0], [1, "r", 45, 242, 0], [Ej, "r", 46, 242, 0], [ja, "r", 47, 242, 0], [1, "r", 48, 242, nj], [1, "r", 49, 242, ke], [1, "r", 50, 242, 0], [fi, "r", 51, 242, nj], [1, "r", 52, 242, 0], [Ps, "r", 53, 242, 0], [lt, "r", 54, 242, 0], [fi, "r", 55, 242, Jj], [1, "r", 56, 242, 0], [ja, "r", 56, 243, Js], [1, "r", 55, 243, xn], [ae, "r", 54, 243, Ka], [1, "r", 53, 243, 0], [X, "r", 52, 243, Ea], [X, "r", 51, 243, 0], [ja, "r", 50, 243, xn], [Ps, "r", 49, 243, nj], [1, "r", 48, 243, Js], [ae, "r", 47, 243, 0], [ja, "r", 46, 243, Ea], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, Jj], [1, "r", 41, 243, xn], [1, "r", 40, 243, 0], [1, "r", 40, 244, Js], [ae, "r", 41, 244, 0], [1, "r", 43, 244, Jj], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [ja, "r", 46, 244, Oq], [fi, "r", 47, 244, 0], [1, "r", 48, 244, 0], [fi, "r", 49, 244, 0], [1, "r", 50, 244, Jj], [X, "r", 51, 244, 0], [1, "r", 52, 244, Jj], [1, "r", 53, 244, 0], [1, "r", 54, 244, ke], [1, "r", 55, 244, 0], [Ps, "r", 42, 244, 0], [1, "r", 40, 245, ke], [Ps, "r", 41, 245, Js], [1, "r", 42, 245, Jj], [1, "r", 43, 245, Js], [1, "r", 44, 245, 0], [1, "r", 45, 245, Oq], [Ps, "r", 46, 245, Oq], [1, "r", 47, 245, 0], [fn, "r", 48, 245, nj], [1, "r", 49, 245, 0], [Ej, "r", 50, 245, Oq], [1, "r", 51, 245, xn], [X, "r", 52, 246, 0], [1, "r", 52, 245, Ea], [ja, "r", 53, 245, xn], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, nj], [X, "r", 51, 246, ke], [ae, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, Js], [1, "r", 45, 246, Oq], [1, "r", 46, 246, Ka], [ae, "r", 44, 246, Ka], [1, "r", 43, 246, xn], [1, "r", 42, 246, Js], [1, "r", 41, 246, ke], [ja, "r", 42, 247, nj], [1, "r", 43, 247, xn], [X, "r", 44, 247, 0], [1, "r", 45, 247, 0], [fn, "r", 46, 247, 0], [1, "r", 47, 247, Ka], [1, "r", 48, 247, ke], [1, "r", 50, 247, Ka], [1, "r", 51, 247, nj], [fn, "r", 52, 247, Js], [1, "r", 53, 247, nj], [1, "r", 54, 247, xn], [Ej, "r", 49, 247, Ka], [Ps, "r", 49, 248, xn], [ja, "r", 47, 248, 0], [fn, "r", 46, 248, ke], [1, "r", 45, 248, nj], [ja, "r", 51, 248, Ka], [1, "r", 55, 246, Ej], [1, "r", 55, 247, lt], [fi, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, Ps], [ae, "r", 93, 270, lt], [1, "r", 94, 270, 1], [1, "r", 95, 271, lt], [1, "r", 94, 271, 1], [1, "r", 93, 271, Ej], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [fn, "r", 92, 281, 1], [Ps, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, X], [fn, "r", 95, 275, ae], [1, "r", 95, 274, fi], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, Ej], [1, "r", 94, 273, Ej], [fi, "r", 94, 272, ae], [1, "r", 93, 272, 1], [X, "r", 93, 273, fn], [1, "r", 93, 274, 1], [fn, "r", 92, 273, 1], [1, "r", 92, 272, Ej], [ae, "r", 92, 270, ja], [fi, "r", 92, 271, fi], [1, "r", 92, 269, Ej], [1, "r", 90, 269, Ps], [fi, "r", 91, 269, ae], [1, "r", 91, 271, 1], [Ej, "r", 91, 270, X], [1, "r", 95, 278, 1], [ae, "r", 95, 277, Ps], [X, "r", 95, 276, ae], [1, "r", 94, 276, Ps], [fi, "r", 94, 275, 1], [1, "r", 93, 275, 1], [ja, "r", 92, 274, 1], [1, "r", 92, 275, fi], [fi, "r", 91, 275, 1], [fi, "r", 90, 275, ja], [1, "r", 89, 274, 1], [1, "r", 90, 274, X], [1, "r", 89, 275, lt], [ae, "r", 88, 274, ae], [X, "r", 88, 273, 1], [1, "r", 86, 272, ae], [1, "r", 85, 271, 1], [1, "r", 86, 271, fi], [ja, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, fi], [ae, "r", 55, 249, 1], [1, "r", 55, 250, 1], [X, "r", 56, 250, 1], [1, "r", 57, 250, Ps], [ae, "r", 57, 249, 1], [fn, "r", 59, 250, ae], [fi, "r", 58, 250, 1], [1, "r", 60, 250, 1], [Ej, "r", 61, 251, 1], [fn, "r", 60, 251, fn], [Ej, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, ja], [X, "r", 58, 251, lt], [fi, "r", 57, 251, fn], [1, "r", 56, 251, 1], [ja, "r", 58, 252, 1], [ae, "r", 57, 252, 1], [ja, "r", 57, 253, 1], [1, "r", 58, 253, Ej], [1, "r", 58, 254, 1], [fi, "r", 59, Fn, 1], [X, "r", 58, us, 1], [1, "r", 57, 254, ja], [ae, "r", 56, 252, lt], [fn, "r", 55, 251, Ps], [lt, "r", 60, sq, Ej], [1, "r", 61, 255, Ps], [fi, "r", 61, 256, Ps], [fn, "r", 60, wq, 1], [fn, "r", 62, 256, 1], [1, "r", 62, 257, X], [ae, "r", 61, 257, Ps], [1, "r", 64, 253, 1], [1, "r", 64, 254, X], [1, "r", 65, 254, lt], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [Ps, "r", 65, 253, fn], [Ej, "r", 66, 254, Ps], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [fn, "r", 65, 256, X], [ae, "r", 65, 257, ja], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [fi, "r", 62, 258, ja], [fi, "r", 63, 258, X], [1, "r", 64, 258, 1], [X, "r", 66, us, 1], [Ps, "r", 66, 256, Ps], [lt, "r", 66, 257, ae], [ae, "r", 66, 258, 1], [1, "r", 65, 258, fn], [ae, "r", 67, 258, ja], [1, "r", 67, 257, 1], [1, "r", 67, 259, Ps], [1, "r", 66, 259, fi], [1, "r", 65, 259, Ps], [fn, "r", 56, 246, ja], [fn, "r", 56, 245, fn], [1, "r", 68, 258, X], [lt, "r", 68, 259, 1], [Ps, "r", 68, 260, 1], [1, "r", 69, 260, 1], [lt, "r", 69, 261, 1], [1, "r", 70, 261, X], [Ps, "r", 71, 261, ja], [X, "r", 67, 260, 1], [1, "r", 89, 269, fn], [1, "r", 89, 268, ae], [Ej, "r", 90, 268, fi], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, ja], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [ae, "r", 79, 266, ja], [1, "r", 78, 265, 1], [fn, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, fi], [fi, "r", 75, 263, 1], [ja, "r", 74, 263, lt], [X, "r", 74, 262, 1], [X, "r", 72, 262, 1], [ae, "r", 73, 262, 1], [1, "r", 71, 262, fn], [1, "r", 85, 270, X], [fi, "r", 84, 270, 1], [Ej, "r", 84, 269, Ps], [fi, "r", 83, 269, ae], [1, "r", 82, 269, lt], [ae, "r", 81, 269, 1], [fn, "r", 81, 268, X], [1, "r", 82, 268, ja], [fi, "r", 83, 268, fi], [1, "r", 80, 268, Ps], [1, "r", 80, 267, Ej], [1, "r", 79, 267, Ej], [X, "r", 78, 266, 1], [Ps, "r", 76, 265, 1], [1, "r", 75, 262, ae], [Ps, "r", 90, 280, ae], [1, "r", 89, 280, fn], [ja, "r", 89, 279, fi], [Ej, "r", 88, 279, fi], [Ej, "r", 88, 278, 1], [1, "r", 87, 277, ja], [ja, "r", 86, 276, 1], [1, "r", 86, 275, fn], [fn, "r", 86, 274, 1], [1, "r", 86, 273, 1], [ja, "r", 85, 273, fn], [1, "r", 85, 272, Ej], [X, "r", 85, 274, 1], [X, "r", 86, 277, Ps], [1, "r", 87, 278, 1], [ja, "r", 84, 271, ja], [X, "r", 83, 270, lt], [ae, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, fn], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [fi, "r", 92, 282, fi], [ja, "r", 88, 280, X], [fi, "r", 87, 279, 1], [1, "r", 85, 275, X], [lt, "r", 84, 273, 1], [fn, "r", 84, 272, lt], [ae, "r", 83, 271, 1], [1, "r", 82, 270, ae], [1, "r", 84, 267, xn], [1, "r", 85, 267, 0], [lt, "r", 76, 262, Ka], [1, "r", 77, 262, 0], [lt, "r", 88, 268, Jj], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [ae, "r", 80, 262, 0], [Ej, "r", 80, 263, Jj], [1, "r", 81, 263, Oq], [1, "r", 82, 263, Oq], [1, "r", 83, 263, 0], [ja, "r", 84, 263, 0], [ae, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, Js], [ja, "r", 90, 262, xn], [1, "r", 87, 262, 0], [Ps, "r", 86, 262, Oq], [ja, "r", 86, 263, Ea], [1, "r", 87, 263, 0], [Ps, "r", 91, 262, 0], [fn, "r", 95, 262, Oq], [1, "r", 94, 262, Jj], [1, "r", 86, 267, 0], [ja, "r", 87, 267, ke], [1, "r", 87, 268, Oq], [X, "r", 86, 268, 0], [Ps, "r", 74, 189, 0], [1, "r", 75, 189, Js], [fi, "r", 76, 189, Js], [fi, "r", 77, 189, 0], [1, "r", 78, 190, Jj], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [X, "r", 76, 190, 0], [1, "r", 74, 190, ke], [lt, "r", 73, 190, 0], [1, "r", 78, 191, Ea], [fi, "r", 76, 191, 0], [1, "r", 77, 191, nj], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [lt, "r", 78, 192, 0], [fn, "r", 77, 192, ke], [ae, "r", 76, 192, Jj], [1, "r", 75, 192, Ka], [Ps, "r", 74, 192, Jj], [Ej, "r", 73, 191, Oq], [lt, "f", 1, 96, 22, 1], [ae, "s", Ej, 97, 22, fn], [X, "f", fn, 98, 22, 1], [1, "s", Ka, 99, 22, ja], [1, "s", 1, 100, 21, fn], [1, "s", 1, 96, 49, 1], [ae, "s", ae, bi, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", Js, 97, 49, lt], [1, "f", 1, 98, 49, lt], [Ej, "r", 70, 218, 0], [ja, "r", 71, 218, Oq], [X, "r", 72, 218, 0], [fi, "r", 73, 218, 0], [1, "r", 74, 219, xn], [1, "r", 73, 219, nj], [1, "r", 72, 219, Jj], [X, "r", 71, 219, 0], [1, "r", 70, 219, 0], [Ps, "r", 73, 220, Oq], [lt, "r", 72, 220, Jj], [Ps, "r", 71, 220, Js], [1, "r", 72, 221, nj], [1, "r", 71, 221, 0], [X, "r", 70, 221, 0], [fn, "r", 69, 221, 0], [1, "r", 68, 221, ke], [Ps, "r", 70, 220, 0], [1, "r", 69, 220, Ka], [ja, "r", 69, 219, 0], [1, "r", 68, 220, Js], [ja, "r", 73, 221, 0], [1, "r", 73, 222, Js], [1, "r", 71, 222, 0], [1, "r", 72, 222, Ea], [1, "r", 74, 221, Oq], [1, "r", 74, 220, xn], [ja, "r", 75, 220, Js], [ae, "r", 75, 221, 0], [ae, "r", 70, 222, 0], [1, "r", 69, 222, 0], [ja, "r", 29, 217, Js], [1, "r", 30, 217, 0], [Ej, "r", 31, 217, Oq], [1, "r", 32, 217, xn], [X, "r", 31, 219, 0], [fn, "r", 30, 219, 0], [fi, "r", 29, 219, xn], [1, "r", 27, 219, Ea], [Ej, "r", 25, 219, Ka], [Ps, "r", 26, 219, Ka], [1, "r", 28, 219, Oq], [Ps, "r", 26, 218, xn], [lt, "r", 27, 218, 0], [fi, "r", 28, 218, Oq], [1, "r", 29, 218, Js], [1, "r", 30, 218, Oq], [1, "r", 28, 217, 0], [Ps, "r", 26, 217, nj], [1, "r", 27, 217, 0], [lt, "r", 28, 216, Ka], [ae, "r", 29, 216, Oq], [1, "r", 30, 216, nj], [1, "r", 31, 218, 0], [Ps, "r", 32, 218, 0], [1, "r", 31, 216, 0], [Ps, "r", 31, 221, 0], [X, "r", 31, 220, Ka], [fn, "r", 30, 220, ke], [lt, "r", 29, 220, nj], [1, "r", 28, 220, nj], [X, "r", 27, 220, xn], [1, "r", 26, 220, 0], [Ps, "r", 25, 218, Ka], [1, "r", 27, 221, Ka], [1, "r", 28, 221, 0], [lt, "r", 29, 221, 0], [ja, "r", 30, 221, Oq], [ae, "r", 32, 220, Ea], [1, "r", 32, 219, 0], [fn, "r", 33, 218, 0], [1, "r", 33, 219, 0], [X, "r", 75, 238, 0], [1, "r", 76, 238, Jj], [ja, "r", 77, 239, Oq], [1, "r", 76, 239, Ka], [ja, "r", 75, 239, nj], [lt, "r", 74, 239, 0], [ae, "r", 76, 240, 0], [1, "r", 77, 240, xn], [ae, "r", 78, 240, nj], [X, "r", 77, 241, Ka], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [Ps, "r", 75, 240, ke], [1, "r", 74, 240, 0], [1, "r", 78, 239, Ka], [lt, "r", 77, 238, 0], [fi, "r", 18, 253, Jj], [1, "r", 19, 252, 0], [1, "r", rq, 252, 0], [1, "r", 21, 253, Jj], [Ps, "r", 23, 254, Ka], [1, "r", ur, 254, Ka], [ja, "r", 19, 254, Ea], [1, "r", 22, 254, 0], [Ej, "r", R, 254, 0], [1, "r", 19, 253, Ka], [X, "r", 20, 253, Ka], [fi, "r", 21, 254, 0], [Ej, "r", 22, 253, 0], [fn, "r", 21, y, Ka], [fi, "r", 20, 255, Ka], [1, "r", 19, 255, 0], [1, "r", 18, 255, Js], [1, "r", gq, y, ke], [1, "r", j, 254, 0], [1, "r", 22, 255, xn], [1, "r", 19, 256, ke], [fi, "r", Es, Yi, Js], [1, "r", 21, 256, Ka], [lt, "r", 39, 270, Ea], [lt, "r", 40, 270, Oq], [1, "r", 41, 270, nj], [1, "r", 43, 270, Ea], [1, "r", 44, 270, Ea], [lt, "r", 46, 270, 0], [1, "r", 42, 270, Ka], [1, "r", 45, 270, 0], [Ps, "r", 44, 269, 0], [ae, "r", 43, 269, Oq], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [Ej, "r", 41, 269, 0], [Ej, "r", 45, 271, 0], [1, "r", 44, 271, 0], [ja, "r", 43, 271, nj], [X, "r", 42, 271, Jj], [Ps, "r", 41, 271, 0], [Ps, "r", 40, 271, ke], [1, "r", 39, 271, Ea], [1, "r", 46, 271, xn], [ae, "r", 45, 272, Ka], [1, "r", 44, 272, 0], [X, "r", 43, 272, Jj], [1, "r", 42, 272, 0], [1, "r", uq, 284, Ea], [1, "r", Xe, 284, 0], [ae, "r", 21, 285, Ea], [1, "r", 22, 285, 0], [Ej, "r", 23, 286, 0], [1, "r", 22, 288, Oq], [1, "r", zj, 288, Oq], [1, "r", an, 288, Ea], [ae, "r", 17, 287, Jj], [1, "r", 16, 287, Ka], [1, "r", 16, 286, 0], [lt, "r", 17, 286, ke], [ja, "r", 18, 286, 0], [1, "r", ft, 286, 0], [1, "r", 20, 286, 0], [Ps, "r", 21, 286, Js], [1, "r", 22, 286, Oq], [1, "r", rq, 285, 0], [1, "r", 19, 285, 0], [1, "r", vr, 285, 0], [ae, "r", 17, 285, ke], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, ke], [Ej, "r", 21, 287, ke], [ae, "r", 22, 287, Jj], [ja, "r", 23, 287, nj], [lt, "r", 21, 288, 0], [fi, "r", ft, 288, Ea], [X, "r", 17, 288, 0], [fi, "r", 19, 289, 0], [1, "r", 21, 289, Ea], [ae, "r", 22, 289, 0], [lt, "r", 20, 289, 0], [X, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, Js], [lt, "r", 23, 285, ke], [1, "r", 66, 286, Oq], [lt, "r", 64, 287, Oq], [1, "r", 63, 287, xn], [ja, "r", 60, 287, ke], [1, "r", 59, 285, 0], [Ej, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [fn, "r", 64, 283, 0], [Ej, "r", 63, 283, Js], [1, "r", 62, 283, Ea], [fi, "r", 61, 283, 0], [Ps, "r", 60, 283, Jj], [fi, "r", 59, 284, Oq], [X, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, Ka], [ja, "r", 61, 287, 0], [1, "r", 62, 287, nj], [ja, "r", 61, 286, Js], [1, "r", 62, 286, 0], [lt, "r", 63, 286, Js], [fi, "r", 64, 286, Ka], [1, "r", 65, 286, 0], [1, "r", 67, 285, ke], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [fn, "r", 64, 285, 0], [Ej, "r", 63, 285, nj], [1, "r", 62, 285, Ka], [X, "r", 61, 285, Ka], [1, "r", 60, 285, 0], [1, "r", 60, 284, Ka], [lt, "r", 61, 284, 0], [1, "r", 62, 284, 0], [fn, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, Jj], [Ps, "r", 66, 284, 0], [1, "r", 65, 287, Jj], [1, "r", 67, 286, 0], [1, "p", 0, Iq, 189, 1], [1, "p", ke, 32, 184, 1], [ja, "p", 0, 47, 191, ja], [ae, "p", xn, 64, 184, ae], [1, "p", 0, 84, 192, fi], [fn, "p", 0, 78, 207, 1], [Ej, "p", Jj, 58, 216, fi], [lt, "p", ke, 41, 211, lt], [lt, "p", Jj, 18, 211, Ps], [Ps, "p", 0, qj, 230, Ps], [fn, "p", 0, 29, 237, fi], [fn, "p", nj, 50, 230, fn], [1, "p", 0, 78, 241, fn], [1, "p", 0, 74, wq, Ps], [ja, "p", ke, 68, 266, 1], [1, "p", Ka, 48, 259, 1], [Ej, "p", 0, 31, 263, 1], [1, "p", Js, 18, 274, 1], [1, "p", Ea, 33, 283, 1], [1, "p", Ea, 66, 287, 1], [ja, "p", 0, 82, 291, 1], [1, "p", 0, pq, 295, Ps], [fi, "p", xn, 45, 294, 1], [1, "p", 0, 18, 252, fn], [1, "p", xn, 79, 227, Ps], [1, "p", 0, 32, 200, Ej], [1, "p", nj, 64, 200, 1], [fi, "s", 0, 21, 193, 1], [1, "s", 1, $a, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, Gr, 181, nj], [1, "b", 2, Bs, 190, Ea], [ja, "b", 2, 29, 193, 0], [lt, "t", yr, 16, 182, 0], [1, "t", Ie, xq, 195, 0], [Ej, "t", 4, 16, 183, Jj], [1, "t", br, 10, 184, Oq], [Ps, "t", 5, 23, 182, 0], [Ps, "t", 4, 30, 187, 0], [Ej, "t", lt, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, fi], [1, "t", fa, 33, 183, Oq], [lt, "b", 1, 36, 189, Js], [ja, "t", 2, 35, 190, Ka], [1, "b", 3, 19, 200, Js], [1, "s", 0, 28, 194, ae], [ja, "s", 1, 32, 196, X], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, ja], [lt, "s", Te, Ki, 192, fn], [1, "s", Gi, 12, 183, 1], [fi, "s", fi, 15, 199, Ps], [1, "b", Oq, bs, 202, xn], [1, "t", 2, Iq, 203, 0], [1, "t", 4, 20, 200, 0], [Ej, "t", 4, 12, 194, 0], [ja, "t", Me, Ui, 205, Oq], [1, "t", Me, 29, 200, 0], [1, "t", oe, 28, 201, 0], [lt, "s", lr, 25, 199, 1], [lt, "s", 1, 22, 204, 1], [X, "g", 2, 25, 205, 1], [ja, "b", 1, 27, 216, 0], [Ps, "s", ja, 25, 217, 1], [Ps, "s", ja, 33, 217, 1], [ja, "s", lr, 35, 215, Ps], [fn, "s", Js, 32, 221, Ej], [1, "t", z, 31, 222, 0], [1, "t", Jn, 26, 221, xn], [1, "b", 3, 27, 222, 0], [1, "b", nj, js, 217, 0], [ja, "t", oe, 18, 216, 0], [fn, "t", 4, 13, 215, ke], [1, "t", 5, 30, 213, Js], [1, "t", 5, 24, 208, ke], [X, "s", 1, de, 216, 1], [Ps, "s", 2, Ra, 210, 1], [1, "s", Gi, 34, 223, 1], [ae, "b", En, 36, 218, Jj], [fi, "t", k, 40, 206, xn], [1, "t", Y, 35, 203, 0], [ja, "t", Qe, 39, 206, nj], [1, "b", fn, 34, 204, 0], [X, "s", 1, 33, 206, 1], [lt, "s", 1, 42, 203, ae], [Ej, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, ke], [1, "t", 4, 39, 197, Js], [1, "t", 5, 44, 187, Js], [1, "b", 1, 46, 181, 0], [Ej, "t", Vn, 47, 182, Ka], [Ej, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [lt, "t", 4, 55, 184, Ea], [1, "t", 5, 62, 195, 0], [1, "s", ae, 51, 185, X], [1, "s", lr, 62, 180, 1], [1, "s", Vn, 61, 188, 1], [ja, "s", 1, 61, 189, fn], [fn, "s", Gi, 48, 195, fn], [fi, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [fn, "t", er, 56, 204, xn], [1, "t", cn, 57, 204, nj], [1, "t", Ha, 51, 204, Ka], [fi, "s", 1, 52, 205, X], [X, "s", En, 57, 200, 1], [Ps, "s", 1, 56, 199, 1], [1, "b", nj, 55, 192, 0], [ja, "t", 3, 56, 193, 0], [ae, "t", k, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, ke], [1, "t", 2, 73, 192, Js], [1, "t", Gs, 72, 191, 0], [1, "t", 5, 78, 193, nj], [1, "b", Oq, 79, 192, 0], [X, "s", Gi, 79, 190, 1], [1, "s", lt, 74, 194, 1], [fn, "s", X, 72, 187, Ej], [X, "s", 0, 74, 183, fi], [1, "s", 1, 75, 183, 1], [ja, "t", Te, 69, 181, 0], [Ps, "t", k, 70, 182, xn], [1, "t", 5, 69, 180, Ka], [1, "b", 1, 65, 189, 0], [1, "b", z, 66, 189, Ea], [Ps, "t", oe, 64, 188, 0], [Ej, "t", pj, 67, 192, 0], [ja, "b", 2, 85, 183, 0], [lt, "t", 1, 84, 184, 0], [Ps, "t", 4, 81, 180, Oq], [ja, "t", aq, 89, 180, Js], [fn, "t", 0, 90, 188, xn], [1, "t", on, 89, 190, 0], [Ej, "s", fi, 87, 187, fi], [Ps, "s", Cs, 87, 197, fn], [fn, "b", ja, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", k, 87, 207, 0], [X, "s", En, 79, 202, ae], [ae, "s", Ej, 80, 203, 1], [fn, "t", 0, 71, 200, 0], [Ps, "b", 2, 72, 201, Oq], [1, "t", 2, 65, 205, xn], [1, "t", 1, 66, 206, nj], [1, "t", 4, 63, 209, Oq], [lt, "t", 5, 73, 203, ke], [Ps, "s", Ea, 70, 207, 1], [fi, "s", 1, 71, 206, X], [1, "s", 2, 68, 199, fi], [1, "s", 1, 64, 213, Ps], [fn, "t", Oq, 85, 213, Oq], [ae, "b", 2, 84, 212, Jj], [1, "t", yr, 77, 209, Jj], [1, "t", bq, 83, 216, Jj], [Ej, "t", 4, 73, 209, 0], [X, "b", 0, 86, 222, Oq], [1, "b", fa, 87, 221, xn], [1, "s", fi, 80, 214, 1], [ja, "s", 2, 87, 216, fi], [1, "s", 2, 84, 224, fn], [1, "s", 1, 77, 227, 1], [Ps, "t", 1, 74, 222, 0], [1, "b", fi, 69, 218, 0], [1, "b", 2, 75, 219, xn], [1, "s", 2, 74, 218, 1], [1, "s", Ps, 69, 223, 1], [lt, "s", ja, 77, 221, 1], [1, "b", X, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, Oq], [Ej, "t", Vn, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", Y, 87, 236, Js], [lt, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, Oq], [ja, "s", xn, 73, 242, 1], [1, "s", 0, 81, 238, Ej], [Ej, "s", 1, 82, 237, 1], [1, "s", Gi, 72, 237, 1], [1, "s", mj, 78, 242, 1], [1, "b", fn, 66, 230, nj], [1, "b", Te, 62, 229, 0], [1, "t", Nr, 67, 231, 0], [1, "t", Jn, 62, 228, Ka], [1, "t", 5, 64, 233, 0], [lt, "t", En, 65, 234, xn], [ja, "t", z, 51, 220, 0], [Ej, "t", Ej, 50, 218, Ka], [1, "b", 1, 45, 223, 0], [1, "b", z, 46, 224, nj], [1, "t", 4, 49, 218, 0], [fi, "t", Jn, 47, 225, nj], [fn, "s", 1, 50, 215, lt], [1, "s", 2, 51, 213, fi], [1, "s", Vn, 42, 227, 1], [ja, "s", X, 44, 227, 1], [1, "s", 1, 60, 230, Ej], [1, "s", 2, 59, 231, 1], [ae, "b", X, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, ke], [1, "t", 0, 75, 251, Oq], [Ej, "b", nj, 83, 246, Ea], [lt, "t", er, 82, 247, Jj], [1, "t", 4, 81, 259, 0], [1, "t", Jn, 69, 249, nj], [fn, "t", qn, 87, 246, Js], [ae, "t", 5, 75, 252, 0], [1, "s", fi, 79, 257, X], [Ej, "s", 2, 78, 249, 1], [Ej, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, ae], [ae, "s", 2, 87, 269, lt], [ja, "s", Ka, 84, 268, 1], [1, "s", 2, 76, 267, 1], [fi, "s", fi, 66, 261, 1], [fi, "s", ae, 87, 274, ae], [1, "s", fn, 76, 263, lt], [X, "s", fi, 59, 251, 1], [lt, "s", 0, 59, 252, fn], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [ae, "t", 2, 79, 271, 0], [lt, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [Ps, "b", 1, 71, 264, Js], [fn, "b", lt, 88, 269, ke], [1, "t", qn, 84, 264, Ea], [Ps, "t", br, 79, 261, Js], [1, "t", aq, 72, 265, 0], [1, "t", Gj, 77, 270, 0], [1, "t", Js, 87, 261, Ea], [lt, "t", z, 86, 260, Ea], [ae, "t", cn, 84, 255, ke], [X, "t", 4, 68, Fn, Ka], [1, "t", lt, 67, 254, 0], [ja, "t", Vn, 65, 262, 0], [Ej, "t", 1, 57, 260, Ea], [1, "t", Vn, 58, 259, Oq], [fi, "b", ja, 63, 256, 0], [1, "b", Ps, 52, 248, Js], [ja, "t", 2, 53, 248, Js], [Ej, "s", Ps, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", En, 52, 252, Ps], [1, "s", Vn, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", Vn, 58, 244, 0], [1, "b", ae, 53, 237, 0], [X, "t", 2, 54, 237, 0], [1, "t", Te, 41, 238, nj], [1, "t", 1, 42, 237, Js], [1, "t", br, 57, 235, Ka], [1, "t", br, 60, 246, 0], [1, "t", br, 50, 252, Ea], [fi, "t", 1, 42, 248, 0], [1, "b", Ej, 43, 249, xn], [X, "b", oe, 37, 243, xn], [1, "s", 0, 50, 236, 1], [fi, "s", Vn, 39, 247, Ps], [1, "s", Cs, 51, 235, 1], [ae, "s", 2, 60, 243, X], [ja, "s", Gi, 36, 240, 1], [1, "s", lr, 43, 254, 1], [1, "s", fn, 42, 254, 1], [Ej, "t", 1, 38, 233, 0], [ja, "t", En, 35, 235, nj], [1, "t", bq, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", Gs, 43, 235, Jj], [Ps, "t", Y, 45, 249, 0], [ae, "t", 5, 41, 253, 0], [1, "b", 1, Jq, 227, 0], [1, "b", 1, Zn, 240, 0], [fi, "t", xa, 21, 227, 0], [1, "t", 3, 27, 234, 0], [ae, "t", 3, 15, 241, 0], [1, "t", 3, Ta, 229, Oq], [lt, "t", Nr, wj, 224, 0], [ae, "t", 4, gr, 231, nj], [1, "t", pj, 22, 238, 0], [1, "t", cn, Ws, 239, Ea], [ae, "t", 1, 22, 243, xn], [Ps, "b", Cs, 23, 242, Ka], [fn, "s", 1, 23, 238, fn], [1, "s", 1, 22, 228, lt], [Ej, "s", Te, 24, 228, 1], [1, "s", En, 21, 236, 1], [ae, "s", Oq, W, 228, fi], [1, "s", 0, rn, 242, 1], [X, "s", 1, b, 244, 1], [1, "s", 1, 34, 236, fi], [1, "t", Ej, 26, 249, 0], [lt, "t", 1, 22, 256, Js], [1, "t", 2, 23, 255, 0], [lt, "b", 1, 17, wq, Js], [lt, "b", 2, $a, 256, 0], [lt, "s", 0, 21, 252, 1], [Ej, "s", 2, 20, 250, lt], [ae, "s", Te, 23, 259, 1], [1, "s", 1, L, 257, 1], [1, "t", 1, 31, 254, Jj], [1, "t", z, 32, 254, 0], [1, "t", Gs, 28, 254, 0], [1, "t", Nr, 34, 258, Ea], [1, "t", 0, 29, 260, 0], [1, "b", Vn, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", Vn, 42, 263, Js], [1, "t", mn, 46, 264, 0], [1, "b", 1, 39, 265, ke], [fn, "b", 1, 58, 267, 0], [lt, "t", 2, 57, 268, Ea], [lt, "t", 4, 62, 270, Js], [1, "t", 5, 52, 273, 0], [1, "s", fi, 52, 269, lt], [fi, "s", 1, 41, 272, 1], [fi, "s", 2, 41, 274, Ps], [ja, "t", 2, 42, 268, Ka], [ja, "t", 0, 43, 268, 0], [ja, "b", Ej, 46, 272, xn], [X, "b", 1, 14, 265, 0], [1, "t", 2, ge, 266, 0], [1, "t", Jn, uq, 264, 0], [1, "t", 4, 29, 263, Ka], [fi, "t", Nr, w, 269, nj], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, xn], [1, "t", 2, Jq, 279, 0], [1, "t", xn, Rq, 278, Jj], [ae, "t", fa, L, 278, xn], [ae, "b", 0, 21, 284, xn], [1, "b", 0, an, 289, 0], [1, "t", En, Xe, 283, 0], [fn, "t", 2, Hj, 290, ke], [fi, "t", Ha, Ja, 283, xn], [Ej, "t", cn, Jq, 290, Ka], [fi, "s", 1, 16, 285, Ps], [fi, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, ae], [1, "s", z, 16, 278, 1], [Ej, "s", 1, 21, 268, Ps], [1, "s", Cs, 19, 268, 1], [1, "t", 0, Ta, 294, Ea], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", oe, 10, 299, ke], [lt, "t", 4, gr, 287, Ea], [Ps, "t", 4, ce, 298, ke], [1, "t", 1, 27, 294, 0], [fn, "b", En, 26, 295, Jj], [1, "t", 3, 33, 297, 0], [ja, "b", 1, 48, 278, Js], [Ps, "b", Ea, 46, 280, Oq], [1, "b", Gi, 50, 280, 0], [1, "t", 0, 44, 282, Ea], [1, "b", fn, 49, 283, 0], [1, "b", Js, 51, 278, Js], [1, "b", er, 50, 279, 0], [Ej, "b", Sr, 44, 284, ke], [1, "b", 0, 47, 284, Ea], [ja, "b", 2, 42, 283, 0], [1, "t", Ha, 51, 277, 0], [1, "b", ja, 44, 286, xn], [Ps, "b", 2, 46, 286, Ea], [1, "b", ae, 42, 285, Jj], [lt, "b", Qe, 41, 286, ke], [1, "t", 5, 42, 287, Oq], [Ej, "b", 1, 42, 278, Ka], [1, "b", 2, 43, 279, 0], [fi, "b", ke, 40, 280, 0], [1, "t", 4, 39, 283, 0], [lt, "t", 4, 39, 279, 0], [ae, "t", Y, 43, 277, 0], [ae, "t", br, 47, 287, 0], [1, "t", 4, 46, 277, ke], [1, "t", mn, 45, 290, 0], [1, "t", 4, 36, 285, ke], [lt, "t", E, 35, 284, 0], [1, "t", mq, 36, 272, Ka], [Ej, "t", 4, 35, 271, 0], [ja, "t", 1, 29, 279, nj], [1, "b", fi, 32, 277, ke], [Ej, "t", 3, 31, 278, Jj], [fn, "b", lr, 28, 280, 0], [lt, "t", cn, 29, 286, 0], [1, "t", et, 28, 275, xn], [1, "t", Ie, 37, 292, nj], [1, "b", lt, 36, 291, ke], [1, "b", 0, 34, 298, 0], [Ej, "t", 4, 31, 292, 0], [1, "t", bq, 46, 295, 0], [1, "t", k, 59, 287, 0], [lt, "b", ja, 58, 286, 0], [1, "s", ae, 68, 284, Ps], [lt, "s", Cs, 70, 286, 1], [X, "s", 0, 67, 284, 1], [1, "t", mq, 66, 283, 0], [Ej, "t", Ps, 65, 282, xn], [1, "b", X, 64, 288, 0], [1, "t", 3, 60, 293, Js], [X, "t", fi, 61, 294, 0], [1, "b", Ej, 76, 294, ke], [1, "t", aq, 75, 295, nj], [1, "t", Me, 56, 293, ke], [X, "t", Me, 59, 281, Js], [ja, "t", qn, 67, 291, 0], [1, "b", 0, 88, 293, 0], [fn, "t", 2, 89, 292, 0], [X, "t", Vn, 85, 286, Oq], [fn, "t", 4, 88, 289, 0], [1, "t", cn, 79, 287, Ka], [Ps, "b", 1, 84, 285, Jj], [1, "t", Sr, 75, 284, xn], [1, "b", 0, 75, 278, Ka], [1, "t", 3, 74, 277, Oq], [lt, "t", 4, 81, 276, Ka], [1, "t", 2, 65, 276, Jj], [Ps, "b", Ej, 66, 275, Oq], [ja, "g", 0, 45, 261, ae], [ja, "g", 1, 39, 258, ja], [1, "g", Ka, 35, 250, 1], [1, "g", lr, 22, 247, 1], [1, "g", 2, 27, 227, X], [1, "g", En, 63, 218, 1], [X, "g", X, 56, 224, 1], [fi, "g", ke, 46, 231, X], [fi, "g", 1, 65, 240, Ps], [1, "g", Vn, 67, 238, fi], [X, "g", z, 79, 232, fi], [X, "g", lr, 72, 253, X], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", Cs, 58, 274, fn], [ae, "de", mj, 14, 182, 0], [Ps, "de", En, 24, 182, 0], [1, "de", 0, Ra, 185, ke], [1, "de", 0, Yn, 194, 0], [X, "de", 1, 25, 196, Oq], [ja, "de", yr, 31, 183, Oq], [Ej, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, Js], [X, "de", fn, 38, 191, Js], [1, "de", 0, 56, 181, Jj], [X, "de", Ps, 68, 182, 0], [1, "de", Gi, 80, 181, Jj], [fn, "de", 3, 86, 187, 0], [X, "de", Jj, 84, 193, Js], [Ps, "de", 1, 82, 201, 0], [X, "de", Te, 64, 191, Ea], [1, "de", Gi, 72, 200, 0], [1, "de", mq, 64, 201, 0], [fi, "de", 2, 76, 209, 0], [X, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", Oq, 57, 208, 0], [lt, "de", Oq, 41, 203, Ea], [1, "de", 1, Pe, 206, Ea], [1, "de", 2, 25, 209, Jj], [lt, "de", er, 16, 218, 0], [fi, "de", 3, Xk, 227, Jj], [lt, "de", 0, 22, 229, 0], [1, "de", Ej, 15, 239, Js], [1, "de", Vn, 24, 238, Ea], [1, "de", 3, 22, 246, ke], [X, "de", 3, Ki, 253, nj], [1, "de", 1, vr, 258, xn], [1, "de", 1, 28, 261, 0], [X, "de", 1, 14, 267, Ka], [1, "de", 0, 24, 268, Js], [Ej, "de", ke, 15, 278, 0], [1, "de", En, 21, 279, ke], [1, "de", Vn, 30, 272, Ka], [1, "de", lr, 29, 281, ke], [fn, "de", 2, Ui, 284, Ea], [lt, "de", 3, 12, 291, Jj], [1, "de", 3, 30, 287, 0], [1, "de", Qe, 27, 293, xn], [1, "de", Oq, 25, 296, 0], [1, "de", Ea, 11, 298, 0], [ja, "de", Js, q, 286, 0], [1, "de", z, 36, 299, xn], [X, "de", 2, 37, 280, Jj], [Ej, "de", 3, 38, 291, 0], [1, "de", X, 48, 287, ke], [fi, "de", 1, 46, 277, xn], [fi, "de", X, 53, 278, xn], [1, "de", er, 48, 295, 0], [1, "de", xn, 57, 294, 0], [1, "de", ja, 65, 290, 0], [Ej, "de", lt, 84, 292, 0], [ae, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, xn], [Ps, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [Ej, "de", 2, 71, 267, 0], [ae, "de", lr, 65, 261, 0], [1, "de", 2, 47, 264, nj], [1, "de", 3, 47, 258, Jj], [1, "de", 3, 53, 251, ke], [fn, "de", Cs, 40, 253, Ea], [fi, "de", nj, 35, 244, Ea], [1, "de", 0, 37, 233, nj], [ja, "de", Sr, 44, 226, 0], [lt, "de", 2, 37, 219, 0], [1, "de", z, 54, 234, 0], [X, "de", 1, 66, 234, Js], [Ps, "de", lr, 65, 241, 0], [1, "de", 0, 68, 249, xn], [lt, "de", 3, 78, 257, ke], [1, "de", mj, 86, 253, 0], [1, "de", 2, 83, 245, 0], [fn, "de", 1, 82, 238, Jj], [1, "de", 3, 76, 235, Ka], [1, "de", Gi, 86, 232, nj], [1, "de", 0, 86, 224, Jj], [1, "de", Gi, 76, 226, 0], [Ps, "de", z, 61, 228, 0], [fn, "de", lr, 58, 217, Js], [lt, "de", Ka, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", zj, gq, 180, xn], [fn, "de", 22, Bs, 181, 0], [Ps, "de", Aq, 30, 184, Js], [fn, "de", 19, 27, 187, 0], [lt, "de", 19, 30, 195, 0], [fn, "de", 19, na, 192, Jj], [1, "de", 19, 44, 182, nj], [fn, "de", 19, 49, 182, 0], [1, "de", Dn, 54, 182, 0], [fn, "de", uq, 59, 183, Oq], [fn, "de", uq, 56, 186, Js], [1, "de", Ar, 46, 188, 0], [ja, "de", 19, 58, 193, xn], [fi, "de", Rq, 67, 187, Ka], [ae, "de", Ar, 65, 192, Js], [ja, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [Ps, "de", 19, 80, 194, 0], [1, "de", Ar, 72, 193, 0], [1, "de", Ja, 82, 182, xn], [Ej, "de", Ja, 88, 185, ke], [Ps, "de", 19, 87, 189, 0], [1, "de", Ar, 86, 197, Ea], [Ps, "de", uq, 85, 203, Oq], [1, "de", D, 74, 200, Jj], [1, "de", 19, 70, 202, 0], [1, "de", Dn, 83, 199, 0], [1, "de", D, 86, 208, Oq], [1, "de", Oe, 84, 214, Ka], [1, "de", Ar, 83, 211, 0], [lt, "de", 19, 84, 217, Oq], [X, "de", 19, 77, 210, Js], [1, "de", Dn, 71, 210, Jj], [Ej, "de", Rq, 73, 213, 0], [fi, "de", Aq, 66, 207, Jj], [Ej, "de", 19, 66, 204, Js], [1, "de", Ja, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, Jj], [fn, "de", Dn, 49, 199, xn], [1, "de", 19, 50, 205, ke], [X, "de", 19, 40, 197, Ka], [Ej, "de", uq, 38, 198, 0], [lt, "de", D, 40, 208, xn], [lt, "de", Ar, 36, 204, 0], [ja, "de", Ja, 33, 204, 0], [1, "de", Ar, 29, 202, 0], [lt, "de", D, 27, 200, 0], [1, "de", Rq, 26, 193, Ka], [Ps, "de", Ja, vr, 201, 0], [fn, "de", Hj, 20, 199, 0], [X, "de", 19, Qr, 196, 0], [fi, "de", 19, 12, 204, Ka], [1, "de", Rq, aa, 201, Oq], [Ej, "de", ft, 23, 208, Ea], [fi, "de", uq, 31, 214, Oq], [Ps, "de", Ja, 26, 215, 0], [X, "de", Rq, 36, 217, 0], [ja, "de", 19, 32, 223, ke], [1, "de", Aq, 26, 223, Ea], [lt, "de", Aq, 18, 218, 0], [X, "de", Aq, 15, 215, 0], [lt, "de", Aq, 17, 212, 0], [1, "de", 19, 15, 224, 0], [ja, "de", 19, Ar, 229, 0], [1, "de", 19, 10, 230, Jj], [ja, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", D, 13, 243, 0], [1, "de", Rq, 24, 244, Jj], [1, "de", Ja, 24, 250, Ka], [1, "de", 19, 28, 253, ke], [ja, "de", 19, 33, 255, 0], [1, "de", Oe, 34, 260, xn], [1, "de", 19, 31, 260, 0], [fn, "de", D, 38, 267, Jj], [Ps, "de", 19, 44, 264, 0], [1, "de", Aq, 43, 261, Ea], [ja, "de", uq, Uj, 257, 0], [X, "de", 19, 22, 258, xn], [ae, "de", Hj, 12, 253, 0], [Ps, "de", Ja, q, 242, 0], [1, "de", 19, ir, cr, 0], [1, "de", Dn, 15, 264, Ka], [lt, "de", Rq, 20, 265, Oq], [Ej, "de", Dn, pa, 271, 0], [ja, "de", 19, tq, 272, xn], [Ej, "de", 19, uj, 277, 0], [1, "de", D, 21, 277, 0], [ae, "de", 19, 21, 281, Jj], [1, "de", Hj, 27, 282, 0], [fn, "de", Rq, 29, 278, Ka], [X, "de", Dn, 29, 273, 0], [fn, "de", ft, 36, 271, nj], [1, "de", 19, 8, 278, nj], [ae, "de", 19, Xk, 286, 0], [1, "de", Ar, or, 291, xn], [Ps, "de", 19, Zn, 294, Js], [Ps, "de", Hj, tq, 292, 0], [1, "de", uq, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", Ar, 16, 301, ke], [1, "de", 19, 27, 296, 0], [Ps, "de", Oe, 25, 292, nj], [1, "de", 19, 23, 301, 0], [lt, "de", Oe, 28, 301, 0], [1, "de", 19, 35, 297, Ka], [Ej, "de", ft, 37, 301, nj], [fi, "de", 19, 43, 301, Ea], [lt, "de", 19, 46, 294, xn], [fi, "de", 19, 46, 288, Js], [1, "de", 19, 40, 287, 0], [fi, "de", 19, 50, 301, nj], [1, "de", 19, 58, 301, Ka], [1, "de", Ar, 64, 301, 0], [1, "de", D, 71, 301, 0], [Ej, "de", Hj, 80, 301, Ka], [1, "de", 19, 87, 301, nj], [1, "de", Oe, 86, 294, Oq], [1, "de", ft, 87, 290, xn], [fi, "de", 19, 82, 286, Jj], [1, "de", ft, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", Ar, 66, 288, Oq], [1, "de", D, 58, 288, 0], [1, "de", 19, 67, 282, nj], [1, "de", Ar, 61, 281, 0], [X, "de", D, 60, 295, Js], [1, "de", 19, 50, 282, 0], [1, "de", Ja, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", Ja, 44, 277, 0], [1, "de", 19, 41, 282, nj], [ja, "de", 19, 38, 281, 0], [Ps, "de", 19, 42, 288, 0], [1, "de", Oe, 52, 281, Ka], [fn, "de", 19, 50, 275, Jj], [1, "de", Oe, 39, 277, 0], [1, "de", 19, 38, 284, Js], [1, "de", Ar, 51, 285, Js], [1, "de", 19, 38, 278, 0], [1, "de", Rq, 47, 272, nj], [1, "de", uq, 44, 267, Oq], [lt, "de", 19, 76, 280, nj], [lt, "de", 19, 78, 272, 0], [fi, "de", 19, 68, 275, Ea], [1, "de", Rq, 70, 265, 0], [1, "de", 19, 65, 263, xn], [Ps, "de", ft, 64, 262, Oq], [1, "de", 19, 60, 268, 0], [Ps, "de", Ja, 56, 266, 0], [ja, "de", Ja, 55, 260, xn], [1, "de", 19, 59, 258, Oq], [1, "de", 19, 62, 255, 0], [X, "de", Rq, 67, 253, Js], [1, "de", 19, 69, 256, Js], [1, "de", Dn, 44, 253, 0], [1, "de", 19, 44, 250, 0], [ae, "de", D, 36, 245, Jj], [ja, "de", Hj, 39, 239, 0], [1, "de", Dn, 42, 234, Js], [1, "de", 19, 37, 235, xn], [1, "de", Ja, 45, 226, 0], [X, "de", 19, 46, 222, ke], [Ps, "de", Ja, 51, 218, Ka], [1, "de", 19, 68, 218, Ea], [1, "de", 19, 74, 224, Js], [ja, "de", 19, 76, 218, 0], [1, "de", Hj, 84, 221, Oq], [Ej, "de", 19, 88, 223, 0], [1, "de", Hj, 76, 230, 0], [Ps, "de", 19, 86, 234, xn], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, Jj], [ae, "de", 19, 83, 247, 0], [1, "de", Rq, 88, 247, 0], [1, "de", Ar, 84, 254, 0], [1, "de", Ar, 86, 251, Js], [1, "de", Ja, 85, 260, 0], [fn, "de", uq, 79, 260, 0], [1, "de", Rq, 76, 251, ke], [Ps, "de", D, 72, 251, 0], [1, "de", Ar, 69, 251, nj], [ja, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, Oq], [lt, "de", ft, 87, 271, 0], [ja, "de", 19, 82, 277, 0], [ae, "de", 19, 87, 284, Ka], [fn, "de", Oe, 87, 237, Oq], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, Jj], [X, "de", 19, 34, 234, nj], [1, "de", Ja, 27, 233, nj], [1, "de", Hj, 37, 293, 0], [1, "de", 29, 13, 181, Jj], [1, "de", 29, 8, 180, 0], [fi, "de", 30, 13, 186, 0], [fn, "de", 31, 24, 183, ke], [1, "de", 32, 33, 185, 0], [fi, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [ae, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, nj], [lt, "de", 30, 66, 188, 0], [fi, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, Ea], [Ps, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, ke], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [lt, "de", 31, 82, 203, xn], [1, "de", 32, 80, 201, 0], [Ps, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [ja, "de", 30, 88, 220, nj], [1, "de", 30, 78, 229, Oq], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, Ea], [1, "de", 29, 67, 217, Ea], [fn, "de", 30, 72, 208, xn], [1, "de", 30, 73, 199, nj], [1, "de", 30, 65, 207, 0], [fi, "de", 29, 63, 210, 0], [Ps, "de", 29, 50, 204, xn], [fn, "de", 30, 41, 205, Ea], [fi, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [ae, "de", 30, zj, 201, Jj], [1, "de", 29, 10, 203, 0], [lt, "de", 29, xs, 196, 0], [ja, "de", 29, 24, 187, ke], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, Js], [1, "de", 30, 28, 214, 0], [ja, "de", 31, 24, 218, 0], [X, "de", 29, 36, 219, Ka], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [Ej, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, Oq], [X, "de", 30, 45, 250, 0], [fi, "de", 30, 58, 261, Ea], [Ej, "de", 30, 73, 276, Js], [1, "de", 30, 64, 276, Oq], [fi, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, Jj], [1, "de", 30, 56, 288, 0], [X, "de", 30, 45, 296, xn], [Ej, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, xn], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, Jj], [fi, "de", 29, 28, 296, 0], [1, "de", 29, $a, 292, 0], [1, "de", 29, 24, 284, Oq], [ja, "de", 30, 10, 295, 0], [ja, "de", 30, rs, 286, ke], [ae, "de", 30, 15, 279, 0], [1, "de", 30, Ss, 269, 0], [Ej, "de", 30, 21, 259, Oq], [ja, "de", 30, 12, x, 0], [1, "de", 30, 31, 245, 0], [fn, "de", 30, bs, 240, xn], [1, "de", 30, 28, 235, ke], [1, "de", 30, 13, 226, Ea], [1, "de", 30, 39, 231, Ka], [1, "de", 30, 61, 226, 0], [Ps, "r", 96, 262, 0], [lt, "r", 97, 262, 0], [1, "r", 98, 262, ke], [1, "r", 97, 270, 0], [1, "r", 97, 271, Ka], [1, "r", 97, 272, Ea], [Ps, "r", 97, 273, Jj], [1, "r", 97, 274, Jj], [fn, "r", 97, 275, 0], [lt, "r", 97, 276, 0], [1, "r", 97, 277, 0], [Ej, "r", 97, 278, ke], [fi, "r", 98, 270, Js], [ae, "r", 98, 271, ke], [Ps, "r", 98, 272, 0], [1, "r", 98, 273, 0], [fi, "r", 98, 274, Oq], [ae, "r", 98, 275, 0], [1, "r", 98, 276, 0], [lt, "r", 98, 277, Oq], [1, "r", 98, 278, Ka], [1, "r", 96, 283, 0], [X, "r", 97, 283, 0], [Ej, "r", 97, 284, 0], [lt, "r", 97, 285, 0], [1, "r", 98, 283, Ka], [X, "r", 98, 284, 0], [1, "r", 98, 285, ke], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, Ka], [1, "r", 96, 273, 0], [Ej, "r", 96, 274, 0], [X, "r", 96, 275, 0], [1, "r", 96, 276, Ka], [ja, "r", 96, 277, 0], [lt, "r", 96, 278, 0], [ae, "r", 44, 248, Oq], [ja, "de", Tr, 94, 290, 0], [1, "de", ci, 94, 252, Ka], [ae, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, ae], [fi, "r", 95, 281, 1], [lt, "r", 94, 281, Ps], [lt, "r", 90, 281, fi], [1, "r", 91, 282, X], [1, "r", 89, 281, lt], [1, "r", 85, 276, 1], [Ej, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", xn, 85, 279, fi], [1, "r", 86, 279, Ps], [1, "r", 87, 280, Ps], [ja, "r", 96, 281, 0], [lt, "r", 97, 281, 0], [1, "r", 98, 281, 0], [lt, "r", 98, 282, 0], [1, "r", 97, 282, ke], [ae, "r", 96, 282, 0], [1, "r", 68, 261, ae], [1, "fo", lt, 94, 168, 0], [X, "fo", z, 94, 151, nj], [Ps, "fo", ae, 94, 138, 0], [1, "fo", 1, 93, 124, Ka], [lt, "fo", 1, 94, 129, 0], [1, "fo", X, 93, 113, Ea], [1, "fo", X, 94, 102, 0], [ae, "fo", ae, 94, 93, 0], [ae, "fo", X, 93, 90, 0], [1, "fo", ae, 94, 79, Oq], [ja, "fo", X, 94, 76, Jj], [fn, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", X, 94, 53, 0], [1, "fo", 1, 93, 10, ke], [ae, "fo", ja, 85, 8, Jj], [1, "fo", 1, 94, Ta, Ka], [1, "fo", lt, 66, L, 0], [X, "fo", fi, 69, 9, 0], [1, "fo", 2, 68, sr, 0], [Ej, "fo", 2, 66, 25, 0], [fi, "fo", En, 92, wn, Ka], [Ej, "fo", En, 94, Zn, 0], [fn, "fo", mj, 87, Zs, Oq], [fn, "fo", 2, 71, 9, nj], [1, "fo", 2, 90, Qr, Js], [1, "fo", Te, 91, W, 0], [Ej, "fo", 1, 74, bs, 0], [1, "fo", Gi, 72, Qr, 0], [1, "fo", z, 75, 13, 0], [X, "fo", 2, 74, 15, Ka], [1, "fo", Cs, 84, bs, 0], [1, "fo", 2, 81, he, 0], [fi, "fo", Ej, 84, 13, 0], [fn, "fo", lt, 84, 19, 0], [fn, "fo", Ps, Ws, wn, 0], [Ps, "fo", 1, ls, kj, 0], [1, "fo", 1, An, 22, xn], [fi, "fo", X, 7, 34, Ea], [1, "fo", ae, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [lt, "fo", Gi, F, 21, 0], [1, "fo", 2, 31, ar, ke], [1, "fo", En, 33, 27, 0], [Ps, "fo", lr, 9, 34, Js], [X, "fo", Vn, 8, 19, 0], [Ej, "fo", 1, he, ue, 0], [ja, "fo", Vn, 13, 9, xn], [ae, "fo", 2, Pe, w, 0], [fn, "fo", Cs, F, wn, Js], [ja, "fo", 2, 9, 10, 0], [1, "fo", z, 9, $n, 0], [X, "fo", z, 10, 23, Js], [1, "fo", lr, 34, 29, Jj], [fi, "fo", 2, 27, P, Jj], [1, "fo", 2, 25, 21, xn], [1, "fo", 2, 20, Bs, xn], [1, "fo", 2, an, 21, Js], [Ej, "fo", 2, 29, 9, Oq], [1, "fo", 2, Iq, 14, ke], [1, "fo", 2, 9, 38, 0], [1, "fo", mj, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [ja, "fo", 2, 77, 25, ke], [1, "fo", Cs, 86, 35, 0], [1, "fo", 1, 70, 35, xn], [1, "fo", Vn, 72, 36, 0], [1, "fo", lr, 73, 31, Js], [1, "fo", Gi, 89, 39, Jj], [Ps, "fo", lr, 65, 40, ke], [1, "fo", 2, 92, 32, Ka], [fi, "fo", 2, 90, 28, nj], [1, "de", 22, 25, 266, 0], [lt, "de", 22, 17, 206, 0], [1, "de", 19, Ca, 184, 0], [lt, "de", 19, 22, 183, xn], [1, "de", 19, 35, 188, nj], [1, "de", 19, 36, 192, 0], [X, "de", Oe, 50, 277, xn], [1, "de", 19, 35, 279, Js], [fn, "t", 4, 7, 178, 0], [1, "t", 1, Pj, 179, 0], [1, "t", xa, Mq, 180, 0], [1, "t", En, 7, 181, 0], [1, "t", et, Ke, 182, Ea], [X, "t", _n, ls, 183, nj], [1, "t", 3, Le, 184, Ea], [1, "t", 4, ls, 185, Ea], [Ps, "t", En, 7, 186, 0], [ae, "t", 1, Mq, 187, Oq], [1, "t", k, Oi, 188, Js], [Ps, "t", 3, ls, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, Mq, 191, Ka], [1, "t", on, I, 192, 0], [X, "t", Ha, Le, 193, 0], [1, "t", 3, Pj, 194, xn], [1, "t", Y, ls, 195, Ea], [1, "t", lr, Pj, 196, 0], [1, "t", 4, Le, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", cn, ls, 199, 0], [Ej, "t", 2, 7, 200, 0], [ae, "t", qn, I, 201, 0], [lt, "t", 2, 7, 202, Ka], [1, "t", 4, 7, 203, Oq], [1, "t", Vn, Pj, 204, Ea], [ja, "t", 5, 7, 205, Js], [1, "t", z, Ke, 206, nj], [1, "t", lt, $q, 207, Ka], [lt, "t", 4, 7, 208, Js], [1, "t", fa, Le, 209, Js], [fi, "t", Ps, I, 210, 0], [ja, "b", 0, 7, 211, 0], [fn, "t", xa, 7, 212, Ea], [1, "t", Nr, 7, 213, 0], [Ps, "t", 3, Mj, 214, 0], [1, "t", qn, Mj, 215, 0], [ja, "t", Me, 7, 216, Oq], [fi, "t", 3, 7, 217, Ea], [ja, "t", lt, I, 218, 0], [ae, "t", Ha, xr, 219, ke], [ja, "b", 2, Oi, 220, Jj], [Ps, "t", fi, Mj, 221, 0], [1, "t", z, $q, 222, 0], [ja, "t", 4, 7, 223, Js], [1, "t", 3, 7, 224, Oq], [Ej, "t", 1, 7, 225, nj], [fn, "t", pj, Mj, 226, xn], [Ej, "t", 2, Le, 227, 0], [Ej, "t", et, Ke, 228, Oq], [1, "t", 3, 7, 229, 0], [lt, "t", 1, 7, 230, ke], [Ps, "t", 4, 7, 231, nj], [1, "b", 2, 7, 232, ke], [fi, "t", Y, ls, 233, 0], [fi, "t", 1, 7, 234, 0], [fi, "t", Ie, Mj, 235, 0], [Ps, "t", k, $q, 236, 0], [1, "t", 2, 7, 237, Ka], [1, "t", 5, 7, 238, ke], [lt, "b", 3, 7, 239, Ea], [ja, "t", 2, 7, 240, 0], [1, "t", Ps, Mj, 241, Js], [1, "t", 2, Mj, 242, Ea], [fi, "t", Nr, $q, 243, 0], [1, "t", 3, 7, 244, Jj], [1, "t", bq, Le, 245, 0], [1, "t", 1, I, 246, 0], [1, "b", 0, 7, 247, ke], [lt, "t", oe, 7, 248, nj], [1, "t", 5, 7, 249, ke], [1, "t", 2, 7, 250, 0], [1, "t", fi, Le, 251, 0], [1, "t", 4, 7, 252, 0], [Ej, "t", Qe, Le, 253, nj], [lt, "t", 5, Oi, 254, 0], [fn, "t", 1, I, 255, Ea], [X, "t", 4, 7, tr, 0], [1, "t", fi, xr, 257, Jj], [fi, "t", Gi, Mq, 258, 0], [1, "t", 5, xr, 260, Jj], [X, "t", 3, Le, 259, ke], [ja, "t", Ps, 7, 261, 0], [1, "t", 3, $q, 262, ke], [1, "t", Jn, 7, 263, 0], [1, "t", ae, Le, 264, 0], [1, "t", Vn, 7, 265, xn], [fn, "t", 5, 7, 266, nj], [ae, "t", Vn, 7, 267, Ea], [X, "t", Te, Pj, 269, 0], [1, "b", 2, 7, 268, 0], [ja, "t", Jn, Pj, 270, 0], [1, "t", 1, ls, 271, 0], [fn, "t", Gj, 7, 272, 0], [lt, "b", 2, xr, 273, 0], [Ps, "t", 4, ls, 274, 0], [1, "t", En, 7, 275, 0], [ja, "t", 5, ls, 276, Ka], [lt, "t", et, I, 277, 0], [1, "t", 2, Le, 278, 0], [ja, "t", lt, 7, 279, ke], [1, "t", 4, 7, 280, 0], [Ps, "b", X, 7, 281, Ea], [fn, "t", Qe, 7, 282, 0], [1, "t", 4, xr, 283, 0], [1, "t", 1, xr, 284, Jj], [lt, "t", on, $q, 285, Ka], [1, "t", qn, Mq, 286, Ea], [1, "t", 4, Ke, 288, 0], [ae, "t", z, 7, 287, Ea], [1, "b", 0, 7, 289, 0], [1, "t", Ha, I, 290, Js], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, nj], [lt, "t", Qe, 7, 293, 0], [1, "t", fn, Pj, 294, 0], [X, "t", Ha, Mq, 295, ke], [1, "t", 3, 7, 296, 0], [1, "t", Ej, 7, 297, 0], [1, "t", 4, 7, 298, Ea], [1, "t", lr, 7, 299, 0], [1, "b", xn, 7, 300, Oq], [1, "t", 2, I, 301, Js], [lt, "r", 196, 271, xn], [X, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [Ps, "r", 189, 207, Ea], [Ps, "r", 192, 209, 0], [X, "r", 198, 271, Ea], [1, "r", 197, 271, Ka], [1, "r", 198, 272, Js], [1, "r", 197, 272, Oq], [1, "r", 196, 272, 0], [lt, "r", 195, 272, 0], [Ps, "r", 199, 272, Ea], [1, "r", 199, 273, ke], [lt, "r", 198, 273, Ka], [1, "r", 197, 273, 0], [fn, "r", 196, 273, Jj], [X, "r", 198, 274, Ea], [1, "r", 197, 274, Ea], [1, "r", 195, 273, Ka], [Ej, "r", 196, 274, 0], [1, "r", 198, 275, Jj], [1, "r", 197, 275, Js], [Ps, "r", 200, 274, Oq], [1, "r", 200, 273, Ea], [X, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, nj], [1, "plm", Js, 199, 268, 0], [1, "plm", Ka, 193, 277, 0], [1, "plm", fi, 199, 276, nj], [1, "s", fn, 200, 275, 1], [1, "s", Ej, 194, 272, 1], [ja, "s", 2, 193, 270, ae], [fi, "g", En, 193, 273, 1], [Ps, "g", En, 201, 267, X], [ae, "m", Gi, 220, 298, 1], [1, "m", 1, 219, 292, 1], [ae, "m", 1, 214, 297, 1], [1, "r", 168, 238, Ka], [Ps, "r", 169, 238, Ea], [X, "r", 170, 238, 0], [lt, "r", 171, 239, Ea], [1, "r", 170, 239, ke], [1, "r", 169, 239, Js], [1, "r", 168, 239, 0], [Ej, "r", 167, 239, xn], [ae, "r", 166, 239, Oq], [1, "r", 166, 240, Ka], [ja, "r", 167, 240, 0], [1, "r", 168, 240, xn], [ja, "r", 169, 240, ke], [X, "r", 170, 240, xn], [1, "r", 168, 241, Jj], [1, "r", 169, 241, 0], [1, "r", 170, 241, ke], [1, "r", 171, 241, Oq], [1, "plm", 2, 171, 238, 0], [ae, "plm", X, 166, 238, ke], [Ps, "plm", Oq, 167, 237, 0], [1, "plm", Ka, 171, 242, 0], [fn, "plm", 0, 165, 243, Oq], [1, "plm", 0, 171, 235, nj], [fi, "plm", ke, 174, 241, 0], [1, "s", fn, 165, 239, ae], [1, "s", Ps, 172, 241, X], [fi, "s", 0, 170, 237, 1], [fn, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", mj, 162, 241, 1], [ae, "s", 2, 170, 246, fn], [Ps, "s", Vn, 167, 235, fi], [1, "s", 2, 176, 243, 1], [fn, "r", 190, 207, Js], [Ps, "r", 191, 207, Ka], [X, "r", 192, 208, 0], [Ps, "r", 191, 208, 0], [fi, "r", 190, 208, nj], [fn, "r", 189, 208, ke], [Ps, "r", 188, 208, 0], [ae, "r", 189, 209, Ea], [1, "r", 190, 209, Ea], [X, "r", 191, 209, ke], [ja, "r", 188, 209, 0], [fi, "r", 190, 210, Ka], [1, "r", 191, 210, xn], [1, "r", 192, 210, nj], [1, "plm", 2, 189, 210, Ea], [ja, "plm", 2, 192, 205, 0], [lt, "plm", 1, 192, 207, Ea], [fi, "plm", ke, 193, 210, ke], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [ae, "plm", 0, 191, 213, xn], [1, "plm", 0, 190, 204, ke], [Ps, "s", 1, 188, 207, 1], [1, "s", Ps, 190, 211, 1], [Ej, "s", 2, 188, 213, 1], [fn, "s", Te, 187, 205, ae], [lt, "s", 0, 194, 210, 1], [lt, "s", Js, 198, 207, fn], [1, "s", 1, 193, 204, fi], [Ej, "s", 1, 193, 213, lt], [1, "s", 2, 198, 212, 1], [1, "s", mj, 182, 208, Ej], [1, "s", 1, 204, 271, 1], [1, "s", ke, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", Oq, 195, 265, 1], [1, "s", Cs, 196, 264, 1], [Ej, "s", En, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", Oq, 217, 282, lt], [1, "s", fi, 214, 285, 1], [1, "s", Ps, 214, 274, ae], [1, "s", 1, 203, 282, ae], [1, "s", 1, 205, 290, 1], [fn, "s", 0, 207, 292, Ej], [1, "s", Ka, 197, 297, lt], [1, "s", Ea, 184, 287, lt], [1, "s", 2, 213, 289, Ej], [1, "s", mj, 196, 294, 1], [Ej, "s", 2, 187, 286, fn], [fn, "s", lt, 192, 289, lt], [1, "s", X, 189, 299, Ej], [ja, "s", 0, 213, 273, 1], [X, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [Ps, "g", 2, 215, 265, 1], [Ps, "g", mj, 183, 281, fn], [fi, "s", 0, 178, 295, Ps], [1, "s", 0, 167, 281, 1], [ja, "s", Jj, 175, 263, Ej], [fn, "s", ae, 176, 293, X], [lt, "s", ae, 163, 285, Ej], [lt, "s", 1, 177, 266, 1], [1, "s", Ej, 161, 272, 1], [1, "s", 2, 185, 261, 1], [Ps, "c", 0, 217, 270, ja], [1, "c", xn, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", Ea, 210, 292, ae], [ja, "c", 0, 205, 297, lt], [1, "c", 0, 198, 293, 1], [Ej, "c", xn, 208, 283, 1], [ae, "c", 0, 197, 283, fn], [Ej, "c", ke, 190, 289, 1], [X, "c", Ea, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, fi], [ae, "c", 0, 208, 265, ja], [fi, "c", 0, 169, 292, 1], [fi, "s", 1, 158, 294, 1], [Ps, "s", 0, 151, 297, ja], [fi, "s", xn, 147, 288, 1], [1, "c", 0, 150, 289, 1], [Ps, "c", xn, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, fn], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [lt, "g", 1, 197, 248, 1], [Ej, "g", Vn, 170, 255, 1], [lt, "g", 2, 212, 234, X], [lt, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, ja], [Ej, "g", 1, 210, 214, 1], [ja, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, fn], [1, "s", xn, 184, 248, fi], [1, "s", Oq, 212, 254, 1], [1, "s", Ej, 203, 249, 1], [1, "s", mj, 204, 252, X], [1, "s", 2, 187, 248, 1], [1, "s", xn, 206, 237, 1], [Ps, "s", 0, 196, 227, 1], [Ej, "s", 0, 181, 228, fi], [1, "s", Ps, 199, 227, Ps], [1, "s", X, 208, 238, ja], [ae, "s", 1, 179, 222, 1], [1, "s", X, 213, 223, 1], [X, "s", lr, 182, 222, fi], [lt, "s", mj, 211, 226, 1], [lt, "s", Cs, 214, 214, 1], [ae, "s", 2, 201, 216, 1], [ae, "s", lr, 215, 192, fn], [1, "s", 1, 210, 198, 1], [ja, "s", Ej, 198, 196, 1], [fi, "s", En, 208, 199, 1], [fn, "s", lr, 187, 192, 1], [X, "s", 1, 179, 198, fi], [1, "s", 2, 177, 197, 1], [X, "s", 0, 164, 197, ja], [1, "s", lt, 159, 193, 1], [1, "s", Ps, 149, 206, Ej], [fi, "s", lt, 164, 209, 1], [ja, "s", Gi, 165, 210, 1], [fi, "s", z, 161, 191, 1], [ae, "s", Ej, 162, 224, ja], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, ja], [fn, "s", mj, 153, 236, 1], [X, "s", Cs, 160, 223, 1], [1, "s", Te, 151, 207, 1], [Ej, "s", Gi, 147, 220, ja], [lt, "s", 2, 145, 265, 1], [ae, "s", Gi, 145, 285, 1], [fn, "c", 0, 152, 266, Ps], [ae, "c", 0, 185, 271, fi], [fi, "c", 0, 210, 254, ja], [1, "c", xn, 209, 256, 1], [1, "c", Ka, 198, 254, X], [1, "c", nj, 213, 246, lt], [1, "c", 0, 216, 237, Ps], [1, "c", 0, 204, 240, 1], [Ej, "c", ke, 196, 234, ae], [1, "c", 0, 188, 238, ae], [Ps, "c", Ka, 182, 245, 1], [lt, "c", Ka, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", Js, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", Js, 157, 214, Ej], [1, "c", Ka, 167, 219, 1], [1, "c", Ea, 171, 208, 1], [ae, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [ja, "c", 0, 195, 221, Ps], [1, "c", 0, 207, 222, 1], [ja, "c", Js, 214, 207, Ps], [lt, "c", 0, 205, 210, 1], [1, "c", Ka, 204, 196, Ej], [1, "c", nj, 214, 196, 1], [lt, "c", 0, 190, 199, fi], [ae, "c", Jj, 184, 194, ae], [lt, "c", Jj, 172, 199, 1], [1, "c", Ka, 161, 204, Ps], [1, "c", nj, 157, 196, fi], [fi, "c", Ka, 149, 194, fi], [lt, "c", 0, 147, 208, lt], [1, "c", nj, 207, 274, Ps], [1, "c", 0, 217, 258, 1], [1, "c", Jj, 201, 260, Ej], [1, "c", 0, 178, 276, Ej], [X, "c", Jj, 187, 265, fn], [Ej, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, Ej], [1, "s", 1, 187, y, ja], [ja, "s", Gi, 189, 254, fn], [1, "s", 2, 212, 257, 1], [1, "s", z, 182, 286, Ej], [1, "s", 2, 169, 280, ae], [fn, "s", En, 217, 273, 1], [1, "s", Cs, 215, 282, Ej], [1, "s", Cs, 172, 263, Ps], [Ps, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [fn, "fod", 1, 221, 282, Oq], [Ps, "fod", Ps, 222, 284, Ka], [1, "fod", fn, 221, 290, 0], [1, "fod", X, 222, 294, 0], [1, "fod", 1, 221, 297, Js], [1, "fod", 1, 223, 298, 0], [ae, "fod", 1, 222, 300, ke], [X, "fod", Ej, 218, 301, 0], [Ps, "fod", ja, 217, 299, 0], [1, "fod", 1, 215, 301, ke], [lt, "fod", fn, 212, 300, nj], [1, "fod", 1, 206, 300, Jj], [Ps, "fod", 1, 209, 301, 0], [1, "fod", fn, 204, 299, 0], [1, "fod", ja, 202, 301, nj], [1, "fod", 1, 199, 301, Jj], [1, "fod", Ps, 222, 282, nj], [1, "fod", fi, 207, 301, 0], [fn, "fod", ja, 197, 301, nj], [1, "fod", ae, 215, 291, Ka], [1, "fod", 1, 216, 286, Oq], [fn, "fod", X, 214, 292, ke], [fi, "fod", ja, 210, 289, 0], [ja, "fod", ja, 208, 294, xn], [ae, "fod", 1, 210, 298, Ka], [Ps, "fod", 1, 212, 281, 0], [ae, "fod", 1, 219, 278, Ka], [fn, "fod", Ps, 219, 282, Oq], [X, "fod", Ej, 205, 286, ke], [1, "fod", lt, 202, 293, Js], [1, "fod", fi, 198, 295, 0], [X, "fod", mj, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [fi, "fod", En, 216, 289, 0], [1, "fod", z, 219, 289, 0], [1, "fod", Te, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [Ej, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, xn], [Ps, "fod", 2, 208, 290, 0], [1, "fod", En, 211, 296, 0], [fn, "fod", lr, 215, 294, Js], [ae, "fod", 2, 212, 298, Ka], [1, "fod", lr, 203, 294, Js], [1, "fod", mj, 204, 288, 0], [X, "fod", 2, 200, 294, 0], [Ps, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [Ps, "fod", 2, 200, 299, Jj], [ja, "fod", mj, 220, 300, 0], [1, "fod", z, 220, 295, 0], [1, "fod", Vn, 220, 292, Oq], [fn, "fod", 2, 219, 287, 0], [lt, "fod", lr, 211, 288, 0], [X, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, Jj], [1, "fod", 2, 212, 290, Ka], [lt, "fod", mj, 195, 296, 0], [1, "fod", z, 196, 299, Oq], [fi, "fod", 2, 194, 300, nj], [1, "fod", 2, 195, 300, 0], [ae, "fod", 2, 213, 279, 0], [lt, "fod", Gi, 211, 279, 0], [Ps, "fod", 0, 218, 290, 0], [1, "fod", nj, 212, 294, nj], [1, "fod", fi, 213, 295, nj], [1, "fod", ae, 217, 292, 0], [Ps, "fod", Ej, 218, 288, 0], [1, "fod", fn, 210, 295, Jj], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, xn], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [fn, "fod", 2, 209, 299, 0], [fi, "fod", 2, 211, 291, 0], [1, "fod", ja, 203, 275, nj], [1, "fod", Ps, 204, 272, Ea], [1, "fod", En, 205, 273, Jj], [ae, "fod", 2, 204, 276, 0], [1, "fod", Gi, 202, 276, 0], [ae, "fod", 2, 199, 277, 0], [1, "fod", lr, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [fi, "fod", 2, 194, 277, 0], [ja, "fod", Ej, 192, 274, ke], [1, "fod", 1, 194, 267, nj], [ae, "fod", En, 194, 265, Ea], [fn, "fod", En, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [fn, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, xn], [lt, "fod", fn, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [ja, "fod", X, 162, 235, Oq], [1, "fod", mj, 169, 236, xn], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", Vn, 173, 241, nj], [Ej, "fod", 2, 174, 238, Js], [1, "fod", 2, 176, 240, ke], [1, "fod", z, 169, 244, 0], [1, "fod", Vn, 166, 243, xn], [1, "fod", mj, 162, 236, ke], [fn, "fod", z, 164, 235, 0], [fn, "fod", Vn, 162, 233, Jj], [1, "fod", 2, 163, 236, 0], [1, "fod", Gi, 174, 242, xn], [Ps, "fod", Cs, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [Ps, "fod", 1, 190, 214, 0], [1, "fod", X, 186, 206, 0], [Ps, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, ke], [fn, "fod", 2, 198, 206, Js], [1, "fod", 2, 198, 208, 0], [fn, "fod", 2, 194, 204, nj], [1, "fod", 2, 187, 206, nj], [fn, "fod", 2, 186, 204, 0], [1, "fod", Vn, 189, 214, 0], [1, "fod", 2, 189, 213, Oq], [ja, "fod", 2, 193, 215, Ka], [1, "fod", Cs, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [fn, "fod", 2, 193, 209, 0], [1, "fod", En, 189, 211, Ea], [1, "fod", 2, 187, 209, 0], [lt, "fod", z, 187, 207, ke], [1, "fod", 2, 191, 205, 0], [lt, "fod", 2, 189, 203, Jj], [1, "cs", Gi, 224, 176, 1], [ae, "cs", Oq, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", En, 224, 179, 1], [Ps, "cs", 1, 224, 180, 1], [ja, "cs", 2, 224, 181, 1], [1, "cs", Ea, 224, 182, 1], [1, "cs", lr, 224, 183, 1], [ja, "cs", xn, 224, 184, fi], [ae, "cs", 3, 224, 185, 1], [1, "cs", Cs, 224, 186, 1], [1, "cs", 0, 224, 187, fn], [1, "cs", Cs, 224, 188, X], [lt, "cs", Jj, 224, 189, fn], [fn, "cs", Ej, 224, 190, 1], [1, "cs", mj, 224, 191, Ej], [fn, "cs", Js, 224, 192, lt], [1, "cs", 2, 224, 193, ja], [1, "cs", Vn, 224, 194, Ps], [Ej, "cs", 1, 224, 195, 1], [1, "cs", En, 224, 196, fi], [lt, "cs", xn, 224, 197, 1], [lt, "cs", 3, 224, 198, X], [1, "cs", z, 224, 199, 1], [1, "cs", ja, 224, 200, fn], [Ps, "cs", Cs, 224, 201, X], [lt, "cs", on, 224, 202, 1], [ja, "cs", 0, 224, 203, fn], [1, "cs", ae, 224, 204, 1], [1, "cs", 2, 224, 205, fi], [X, "cs", xn, 224, 206, 1], [Ps, "cs", 1, 224, 207, Ej], [1, "cs", yr, 224, 208, fn], [1, "cs", 2, 224, 209, ae], [ae, "cs", En, 224, 210, ae], [ae, "cs", nj, 223, 211, 1], [1, "cs", 1, 224, 211, lt], [1, "cs", lr, 224, 212, ja], [Ps, "cs", 2, 224, 213, X], [Ej, "cs", Ej, 224, 214, 1], [Ps, "cs", yr, 224, 215, fi], [lt, "cs", 0, 224, 216, ja], [1, "cs", Ej, 224, 217, 1], [fn, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", nj, 223, 215, 1], [ae, "cs", Cs, 223, 214, Ej], [X, "cs", 2, 223, 212, 1], [1, "cs", En, 223, 216, 1], [Ej, "cs", on, 223, 217, ja], [fi, "cs", 0, 223, 218, fn], [1, "cs", 0, 224, 220, 1], [Ej, "cs", Ka, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [ja, "cs", 0, 223, 205, ae], [fn, "cs", z, 224, 221, ae], [1, "cs", 2, 223, 219, Ej], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [X, "cs", Cs, 223, 210, Ej], [X, "cs", lt, 223, 178, lt], [1, "cs", Sn, 223, 179, 1], [lt, "cs", mq, 223, 181, fn], [X, "cs", oe, 223, 182, 1], [Ps, "cs", 1, 223, 185, 1], [1, "cs", z, 223, 184, 1], [1, "cs", Vn, 223, 186, Ps], [Ps, "cs", 0, 223, 180, ja], [1, "cs", 0, 223, 183, fn], [1, "cs", 2, 223, 187, 1], [1, "cs", X, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [X, "cs", 2, 223, 190, 1], [ae, "cs", 3, 223, 191, 1], [ja, "cs", fn, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", on, 223, 195, 1], [fi, "cs", fi, 223, 196, Ps], [fn, "cs", Vn, 223, 197, 1], [fn, "cs", 2, 223, 199, 1], [1, "cs", z, 223, 198, Ej], [fn, "cs", Ka, 223, 200, Ps], [fn, "cs", En, 223, 201, Ej], [fi, "cs", 0, 223, 202, 1], [ae, "cs", Ie, 223, 203, ae], [1, "cs", yr, 223, 204, 1], [fi, "cs", 3, 223, 206, 1], [1, "cs", Ie, 223, 207, 1], [Ps, "cs", mq, 223, 208, 1], [lt, "cs", lr, 223, 221, X], [1, "cs", lr, 223, 222, Ej], [fn, "cs", Ea, 223, 224, 1], [lt, "cs", Oq, 224, 228, ja], [lt, "cs", 0, 224, 230, lt], [1, "cs", 0, 223, 234, X], [lt, "cs", 2, 223, 223, 1], [lt, "cs", Cs, 224, 223, 1], [1, "cs", 2, 224, 224, Ej], [1, "cs", 2, 224, 225, 1], [1, "cs", fn, 223, 226, 1], [Ej, "cs", lt, 224, 231, ae], [1, "cs", 1, 223, 232, 1], [1, "cs", er, 223, 225, 1], [1, "cs", yr, 224, 226, fi], [1, "cs", 3, 223, 227, 1], [1, "cs", oe, 224, 227, 1], [fi, "cs", yr, 223, 229, lt], [ae, "cs", 3, 223, 228, Ej], [1, "cs", E, 224, 229, fn], [fn, "cs", 3, 223, 230, Ej], [1, "cs", mq, 223, 231, 1], [X, "cs", fa, 224, 232, lt], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [X, "cs", mq, 224, 234, 1], [Ej, "cs", 3, 224, 235, ja], [1, "cs", 3, 223, 235, 1], [1, "cs", lt, 224, 236, lt], [1, "cs", z, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", Ie, 224, 237, Ps], [ae, "cs", 3, 224, 238, fi], [1, "cs", Ea, 224, 239, 1], [ae, "cs", Ps, 223, 241, X], [Ej, "cs", 0, 224, 243, lt], [Ej, "cs", Ka, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [fn, "cs", 2, 223, 240, lt], [1, "cs", 2, 223, 239, X], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, X], [Ps, "cs", 2, 224, 242, fi], [1, "cs", 2, 223, 242, 1], [ja, "cs", mj, 223, 243, Ej], [ja, "cs", En, 223, 244, 1], [1, "cs", mj, 224, 244, 1], [ja, "cs", 2, 224, 245, 1], [1, "cs", Gi, 224, 246, fn], [1, "cs", fa, 223, 238, 1], [X, "cs", 3, 223, 246, Ps], [Ps, "cs", Cs, 223, 247, 1], [1, "cs", 1, 223, 249, Ps], [Ej, "cs", 1, 224, 253, fi], [ja, "cs", ae, 223, 256, lt], [ja, "cs", 0, 223, 254, ja], [1, "cs", Js, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [ae, "cs", Ie, 223, 250, 1], [lt, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, Os, 1], [1, "cs", er, 223, 257, Ej], [1, "cs", 2, 224, 248, Ps], [1, "cs", Gi, 224, 249, fi], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [fn, "cs", 2, 224, 252, lt], [1, "cs", 2, 223, 253, 1], [1, "cs", z, 224, 254, 1], [1, "cs", Vn, 224, sq, Ps], [lt, "cs", 2, 224, 256, 1], [ja, "cs", Cs, 224, 257, 1], [1, "cs", Js, 224, 258, fi], [lt, "cs", 0, 223, 261, X], [X, "cs", ke, 224, 263, ae], [fi, "cs", Ea, 224, 266, Ej], [1, "cs", nj, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [ae, "cs", Ea, 223, 275, 1], [1, "cs", X, 223, 259, lt], [1, "cs", fi, 223, 264, fn], [fn, "cs", ja, 223, 268, 1], [fn, "cs", 1, 224, 274, 1], [1, "cs", Gi, 223, 258, 1], [lt, "cs", Gi, 223, 260, fi], [1, "cs", 2, 223, 263, 1], [Ej, "cs", Te, 223, 265, Ps], [ae, "cs", En, 223, 267, 1], [lt, "cs", 2, 223, 271, 1], [ae, "cs", 2, 223, 273, 1], [1, "cs", mq, 223, 262, 1], [fn, "cs", mq, 223, 266, 1], [lt, "cs", Qe, 223, 269, 1], [lt, "cs", Sr, 223, 272, 1], [1, "cs", 3, 223, 274, Ps], [1, "cs", 3, 224, 275, 1], [1, "cs", Sr, 224, 273, X], [X, "cs", Sn, 224, 271, Ej], [fi, "cs", Qe, 224, 270, Ps], [fn, "cs", 3, 224, 269, ae], [1, "cs", on, 224, 268, Ps], [1, "cs", 3, 224, 267, 1], [fn, "cs", 3, 224, 265, ja], [1, "cs", E, 224, 264, ja], [1, "cs", fa, 224, 262, 1], [X, "cs", 3, 224, 261, 1], [lt, "cs", 3, 224, 260, 1], [lt, "cs", mq, 224, 259, fi], [1, "cs", 2, 223, 276, X], [X, "cs", fi, 224, 276, 1], [1, "cs", fn, 224, 280, 1], [fi, "cs", X, 223, 281, lt], [lt, "cs", lt, 224, 286, 1], [X, "cs", ke, 223, 280, fi], [ae, "cs", Ka, 223, 284, 1], [1, "cs", Ea, 224, 288, 1], [ja, "cs", 0, 224, 279, fn], [ja, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", Vn, 224, 278, lt], [ja, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [fi, "cs", 2, 224, 282, 1], [1, "cs", Cs, 224, 284, ae], [1, "cs", 2, 224, 285, ae], [Ps, "cs", En, 224, 287, 1], [ae, "cs", lr, 223, 287, X], [ae, "cs", Vn, 223, 285, Ps], [1, "cs", 2, 223, 283, ae], [1, "cs", 2, 223, 279, X], [1, "cs", Ie, 223, 278, 1], [X, "cs", Sr, 223, 282, Ej], [lt, "cs", 3, 223, 286, 1], [1, "cs", Ie, 223, 289, 1], [ja, "cs", Sr, 224, 289, X], [1, "cs", Te, 223, 288, fn], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", ke, 224, 292, 1], [1, "cs", Oq, 223, 294, 1], [lt, "cs", Oq, 224, 297, ae], [fi, "cs", Ea, 223, 299, 1], [ja, "cs", lr, 223, 291, 1], [ja, "cs", z, 224, 291, 1], [fi, "cs", Vn, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, lt], [fi, "cs", lr, 224, 294, 1], [X, "cs", ja, 224, 295, lt], [1, "cs", z, 223, 295, fn], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, X], [1, "cs", Cs, 223, 297, ja], [fn, "cs", 2, 223, 298, 1], [fi, "cs", lr, 224, 298, lt], [1, "cs", Vn, 224, 299, X], [ae, "cs", Vn, 223, 300, 1], [Ps, "cs", fn, 224, 300, fn], [1, "cs", 0, 223, 301, 1], [ae, "cs", 0, 224, 302, fn], [1, "cs", Oq, 224, 304, Ps], [Ej, "cs", Sr, 224, 301, 1], [1, "cs", 3, 224, 303, ja], [1, "cs", ke, 221, 303, fn], [1, "cs", Oq, 219, 304, X], [1, "cs", 1, 222, 304, X], [ja, "cs", 1, 222, 302, Ej], [ja, "cs", 2, 223, 302, 1], [lt, "cs", mj, 223, 303, X], [1, "cs", 2, 222, 303, 1], [fi, "cs", 2, 223, 304, fi], [1, "cs", Gi, 221, 304, ja], [lt, "cs", Cs, 220, 304, X], [1, "cs", 2, 220, 303, Ej], [Ej, "cs", 2, 220, 302, ae], [lt, "cs", Gi, 221, 302, X], [fi, "cs", 2, 219, 303, lt], [1, "cs", 0, 217, 302, 1], [1, "cs", Ka, 215, 304, 1], [Ps, "cs", xn, 214, 302, 1], [fi, "cs", Ej, 218, 302, ae], [lt, "cs", 1, 217, 304, Ej], [1, "cs", ae, 215, 302, lt], [1, "cs", 2, 219, 302, X], [Ps, "cs", Cs, 218, 303, 1], [1, "cs", z, 218, 304, 1], [fi, "cs", z, 217, 303, Ps], [fn, "cs", Cs, 216, 304, 1], [Ps, "cs", z, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", mj, 214, 303, 1], [Ps, "cs", Gi, 214, 304, ja], [ja, "cs", xn, 212, 302, fn], [lt, "cs", 0, 210, 303, ae], [Ps, "cs", 0, 212, 304, 1], [lt, "cs", 0, 208, 304, X], [1, "cs", 1, 210, 302, lt], [lt, "cs", ja, 208, 303, 1], [1, "cs", Cs, 213, 302, X], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, fi], [ja, "cs", 2, 212, 303, 1], [1, "cs", Te, 211, 304, Ej], [1, "cs", Te, 211, 303, 1], [1, "cs", 2, 211, 302, fn], [1, "cs", z, 209, 302, 1], [lt, "cs", En, 209, 303, 1], [X, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [Ej, "cs", Te, 208, 302, X], [Ps, "cs", ke, 206, 303, fn], [1, "cs", ke, 203, 304, 1], [1, "cs", 0, 200, 303, Ej], [1, "cs", Ea, 199, 304, lt], [ja, "cs", 0, 195, 304, Ej], [1, "cs", 0, 191, 303, fn], [fi, "cs", 0, 193, 304, Ej], [1, "cs", 0, 189, 304, Ps], [1, "cs", fn, 204, 303, 1], [1, "cs", xn, 197, 302, 1], [fi, "cs", ke, 202, 302, fn], [1, "cs", Ea, 188, 302, 1], [ae, "cs", Js, 194, 302, ja], [1, "cs", 1, 197, 303, X], [1, "cs", 1, 201, 304, Ps], [1, "cs", 1, 192, 302, ja], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [X, "cs", 1, 188, 304, 1], [1, "cs", lr, 207, 302, 1], [lt, "cs", 2, 207, 303, Ps], [1, "cs", z, 207, 304, 1], [ae, "cs", 2, 206, 304, 1], [lt, "cs", Vn, 206, 302, 1], [1, "cs", En, 205, 303, 1], [1, "cs", Vn, 204, 304, 1], [1, "cs", Gi, 205, 304, 1], [fi, "cs", Cs, 204, 302, 1], [lt, "cs", 2, 203, 302, ja], [1, "cs", Gi, 203, 303, 1], [1, "cs", Gi, 202, 303, 1], [1, "cs", En, 201, 303, 1], [lt, "cs", z, 201, 302, 1], [1, "cs", 2, 200, 302, lt], [1, "cs", 2, 199, 302, X], [1, "cs", 2, 198, 303, fn], [Ej, "cs", 2, 198, 302, 1], [fn, "cs", Vn, 199, 303, 1], [1, "cs", Cs, 200, 304, ae], [1, "cs", lr, 202, 304, Ps], [fn, "cs", mj, 197, 304, 1], [Ps, "cs", Te, 198, 304, 1], [ja, "cs", z, 196, 304, fn], [1, "cs", Vn, 196, 303, Ej], [1, "cs", Gi, 196, 302, 1], [fn, "cs", 2, 195, 302, ja], [Ej, "cs", 2, 195, 303, Ps], [X, "cs", 2, 194, 303, fi], [Ps, "cs", 2, 194, 304, fi], [1, "cs", 2, 193, 303, 1], [1, "cs", Vn, 193, 302, 1], [fn, "cs", z, 192, 303, 1], [ja, "cs", 2, 192, 304, 1], [1, "cs", Gi, 191, 304, 1], [lt, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, X], [X, "cs", lr, 189, 302, ja], [1, "cs", En, 190, 302, 1], [X, "cs", mj, 191, 302, fn], [ja, "cs", 2, 188, 303, 1], [ae, "cs", 0, 186, 303, fn], [lt, "cs", Js, 183, 304, 1], [1, "cs", 0, 184, 302, Ej], [Ps, "cs", 0, 181, 302, 1], [Ps, "cs", 0, 176, 302, Ps], [1, "cs", Ea, 178, 303, fi], [fn, "cs", xn, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", xn, 172, 302, 1], [1, "cs", Ej, 182, 303, X], [ae, "cs", fn, 178, 304, lt], [ae, "cs", Ej, 175, 304, 1], [ja, "cs", 1, 173, 302, 1], [1, "cs", fi, 185, 304, X], [Ps, "cs", 1, 169, 304, fn], [1, "cs", 3, 187, 304, fn], [1, "cs", 3, 186, 304, 1], [Ej, "cs", Qe, 187, 303, 1], [1, "cs", 3, 187, 302, Ps], [fn, "cs", xa, 186, 302, 1], [1, "cs", Qe, 185, 302, 1], [1, "cs", 3, 185, 303, Ps], [1, "cs", 3, 184, 303, fn], [Ps, "cs", 3, 183, 303, 1], [1, "cs", Sn, 183, 302, 1], [1, "cs", oe, 182, 302, 1], [lt, "cs", E, 184, 304, lt], [fi, "cs", 3, 182, 304, ja], [fn, "cs", Sn, 181, 304, 1], [fi, "cs", Ie, 179, 304, ja], [1, "cs", mq, 180, 304, 1], [fi, "cs", 3, 181, 303, fn], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", xa, 180, 302, 1], [Ej, "cs", 3, 179, 302, 1], [X, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, ae], [1, "cs", mq, 177, 304, lt], [fi, "cs", E, 177, 303, Ej], [1, "cs", 3, 176, 303, 1], [1, "cs", oe, 176, 304, ae], [1, "cs", 3, 174, 304, X], [1, "cs", 3, 175, 303, X], [fn, "cs", 3, 174, 303, lt], [1, "cs", yr, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [fn, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", xa, 174, 302, 1], [1, "cs", 3, 175, 302, Ps], [lt, "cs", E, 171, 302, fi], [1, "cs", 3, 170, 302, 1], [Ej, "cs", yr, 169, 302, 1], [1, "cs", Sn, 169, 303, 1], [fn, "cs", 0, 168, 302, 1], [Ej, "cs", Oq, 166, 303, 1], [1, "cs", Jj, 163, 304, fn], [1, "cs", 0, 161, 302, 1], [Ps, "cs", 0, 159, 303, X], [1, "cs", Oq, 152, 304, 1], [fn, "cs", 0, 155, 303, ae], [1, "cs", 1, 164, 303, 1], [ja, "cs", 1, 162, 303, fn], [1, "cs", 1, 158, 304, 1], [Ps, "cs", ae, 156, 302, 1], [1, "cs", 1, 153, 302, ja], [1, "cs", 1, 154, 304, Ps], [Ej, "cs", Te, 168, 304, ja], [X, "cs", Cs, 168, 303, Ej], [X, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", mj, 166, 304, lt], [1, "cs", 2, 165, 304, 1], [1, "cs", Gi, 164, 304, Ps], [Ej, "cs", Cs, 165, 303, 1], [1, "cs", En, 167, 302, Ps], [1, "cs", mj, 166, 302, X], [1, "cs", Vn, 165, 302, fi], [Ps, "cs", En, 164, 302, 1], [lt, "cs", z, 163, 302, ae], [ja, "cs", Vn, 162, 302, 1], [1, "cs", 2, 163, 303, Ps], [fn, "cs", z, 162, 304, Ps], [ae, "cs", 2, 160, 304, 1], [fi, "cs", En, 159, 304, fi], [1, "cs", 2, 161, 304, 1], [1, "cs", mj, 161, 303, 1], [ja, "cs", 2, 160, 303, 1], [1, "cs", Gi, 160, 302, 1], [1, "cs", Gi, 158, 302, 1], [X, "cs", 2, 159, 302, lt], [1, "cs", Gi, 157, 302, ja], [1, "cs", 2, 156, 303, 1], [ae, "cs", 2, 157, 303, lt], [1, "cs", En, 158, 303, 1], [lt, "cs", 2, 157, 304, Ps], [ae, "cs", z, 156, 304, 1], [fi, "cs", 2, 155, 304, 1], [ja, "cs", Te, 153, 304, 1], [X, "cs", 2, 153, 303, 1], [Ej, "cs", 2, 154, 303, 1], [ja, "cs", Gi, 154, 302, Ej], [1, "cs", Te, 155, 302, 1], [ja, "cs", Gi, 152, 303, 1], [1, "cs", Te, 152, 302, 1], [1, "cs", Ka, 151, 302, fi], [1, "cs", Js, 149, 303, Ps], [X, "cs", 0, 145, 304, 1], [fn, "cs", 0, 147, 302, 1], [fn, "cs", 0, 143, 303, fn], [ja, "cs", Jj, 141, 303, ja], [1, "cs", X, 147, 304, 1], [fn, "cs", lt, 145, 302, 1], [fi, "cs", 1, 142, 302, 1], [1, "cs", ae, 150, 304, Ej], [1, "cs", 2, 151, 304, ja], [X, "cs", En, 151, 303, fn], [Ej, "cs", 2, 150, 303, fi], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, ja], [X, "cs", 2, 146, 302, ja], [1, "cs", mj, 144, 302, 1], [1, "cs", lr, 141, 302, 1], [X, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, X], [Ej, "cs", Vn, 142, 303, fi], [X, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", lr, 148, 304, ae], [fi, "cs", En, 148, 303, 1], [1, "cs", 2, 146, 303, Ej], [fi, "cs", Cs, 145, 303, 1], [1, "cs", lr, 147, 303, fi], [1, "cs", z, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [X, "cs", Sr, 149, 302, ja], [1, "cs", 3, 143, 302, Ps], [ae, "cs", nj, 139, 304, Ps], [1, "cs", Ka, 138, 302, 1], [ae, "cs", X, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", Cs, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [Ps, "cs", z, 138, 304, Ps], [1, "cs", 2, 140, 304, fi], [1, "cs", nj, 137, 304, Ej], [lt, "cs", 0, 135, 303, X], [fi, "cs", nj, 133, 304, 1], [1, "cs", fi, 135, 304, Ej], [1, "cs", 1, 136, 302, X], [1, "cs", Vn, 137, 302, 1], [Ej, "cs", Vn, 136, 303, Ej], [1, "cs", En, 137, 303, lt], [1, "cs", Gi, 136, 304, fn], [lt, "cs", En, 134, 304, 1], [1, "cs", Cs, 134, 303, ae], [1, "cs", 2, 133, 303, Ps], [lt, "cs", 2, 132, 304, 1], [fi, "cs", 0, 131, 302, Ej], [1, "cs", Oq, 134, 302, Ps], [1, "cs", Jj, 129, 304, 1], [1, "cs", X, 130, 303, X], [1, "cs", Ej, 132, 302, ae], [ja, "cs", En, 135, 302, 1], [Ej, "cs", z, 133, 302, Ej], [1, "cs", En, 132, 303, 1], [1, "cs", Te, 131, 303, ae], [ae, "cs", lr, 130, 304, ja], [1, "cs", Te, 131, 304, Ps], [fi, "cs", mj, 128, 304, 1], [1, "cs", lr, 129, 303, lt], [fi, "cs", 2, 130, 302, X], [ja, "cs", Sn, 127, 304, Ej], [1, "cs", lr, 132, 301, 1], [1, "cs", z, 133, 301, X], [1, "cs", Vn, 134, 301, Ps], [1, "cs", 2, 135, 301, Ej], [fi, "cs", 3, 131, 301, Ps], [fi, "cs", Qe, 136, 301, X], [1, "cs", Sn, 136, 178, 1], [Ps, "cs", 0, 136, 183, lt], [1, "cs", 2, 136, 182, lt], [Ps, "cs", 1, 136, 181, X], [1, "cs", Jj, 136, 179, ja], [1, "cs", Qe, 136, 180, ae], [1, "cs", Te, 135, 183, 1], [lt, "cs", lt, 135, 182, fn], [1, "cs", 3, 135, 180, fn], [1, "cs", 0, 134, 183, X], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, ja], [X, "cs", 1, 132, 183, X], [Ps, "cs", 3, 131, 183, X], [1, "cs", Te, 135, 181, 1], [fn, "cs", Cs, 134, 182, fn], [Ej, "cs", 3, 134, 181, 1], [1, "fod", Oq, 213, 301, Oq], [X, "fod", Ka, 204, 301, 0], [ae, "fod", ja, 196, 288, nj], [1, "fod", ae, 198, 283, nj], [1, "fod", Ps, 190, 288, nj], [1, "fod", X, 189, 296, Jj], [1, "fod", ja, 193, 293, Jj], [1, "fod", 1, 183, 292, 0], [1, "fod", lt, 186, 287, Jj], [1, "fod", 1, 190, 290, Ka], [1, "fod", lt, 218, 271, ke], [Ej, "fod", 1, 220, 266, Oq], [Ej, "fod", 1, 211, 268, 0], [lt, "fod", lt, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", Te, 201, 294, nj], [lt, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, Js], [1, "fod", z, 186, 297, 0], [Ej, "fod", lr, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [fn, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, Js], [1, "fod", 2, 197, 286, ke], [1, "fod", 2, 195, 290, Ea], [X, "fod", 2, 186, 288, nj], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [X, "fod", Gi, 196, 283, Jj], [1, "fod", 2, 196, 281, ke], [1, "fod", Cs, 201, 280, ke], [ae, "fod", Te, 205, 287, nj], [X, "fod", z, 209, 283, 0], [lt, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [lt, "fod", lr, 217, 278, ke], [lt, "fod", Te, 219, 275, nj], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", Te, 217, 265, 0], [lt, "fod", En, 213, 267, 0], [Ej, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [lt, "fod", z, 203, 265, 0], [ja, "fod", Cs, 204, 270, Jj], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, ke], [1, "fod", 2, 211, 260, 0], [fn, "fod", mj, 218, x, ke], [1, "fod", Cs, 219, 262, 0], [1, "fod", Vn, 220, 253, Js], [X, "fod", 2, 211, 257, 0], [ae, "la", E, 198, 27, fi], [ja, "la", 3, 201, 30, 1], [ja, "la", yr, 200, 32, 1], [1, "la", 3, 198, 33, X], [1, "la", 3, 196, 33, 1], [1, "la", Sn, 194, 32, 1], [fi, "la", Sr, 194, 28, 1], [1, "la", Jj, 200, 28, 1], [1, "la", Ka, 193, 30, ja], [1, "la", yr, 196, 27, 1], [fi, "la", Sr, 199, 30, 1], [lt, "la", 3, 197, 29, ja], [1, "la", on, 195, 30, lt], [1, "la", xa, 197, 31, 1], [ae, "la", Te, 201, 33, lt], [1, "la", _n, 202, 34, Ps], [1, "la", k, 202, 35, ja], [1, "la", 4, 203, 36, lt], [X, "la", Ha, 204, 37, 1], [1, "la", 2, 205, 38, ae], [X, "la", 5, 205, 39, 1], [1, "la", aq, 205, 40, Ps], [fi, "la", En, 206, 41, 1], [X, "la", ae, 207, 42, 1], [Ej, "la", 1, 205, 41, 1], [Ps, "la", mn, 208, 43, 1], [1, "la", 4, 209, 43, 1], [Ej, "la", 1, 210, 43, X], [ja, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, ae], [1, "la", 4, 213, 44, Ej], [1, "la", on, 223, 54, 1], [1, "la", on, 221, 53, fn], [1, "la", xa, 219, 53, 1], [1, "la", bq, 218, 52, Ej], [1, "la", 4, 217, 51, ja], [fi, "la", bq, 216, 51, lt], [1, "la", ae, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", X, 210, 44, ja], [1, "la", 3, 206, 50, 1], [1, "re", Oq, 217, 24, fi], [ja, "re", Js, 207, _r, 1], [ja, "de", 44, 54, $s, Ka], [X, "de", 44, 53, Iq, Oq], [Ps, "de", 44, 51, 16, 0], [ja, "de", 44, 49, 13, 0], [lt, "de", 44, 48, Zn, Js], [fi, "de", 21, 78, 293, 0], [X, "cs", 0, 221, 8, 1], [fn, "cs", nj, 224, 9, 1], [1, "cs", ja, 223, 8, lt], [X, "cs", Gi, 224, 8, 1], [ae, "cs", 2, 222, 8, X], [1, "cs", 0, 224, ss, 1], [1, "cs", Ea, 222, 5, ae], [1, "cs", 0, 219, ls, Ps], [1, "cs", ja, 220, 5, ae], [1, "cs", 1, 217, Oi, 1], [1, "cs", 2, 224, Me, 1], [1, "cs", 2, 223, 5, fn], [1, "cs", mj, 224, 7, Ej], [1, "cs", 2, 223, 7, X], [1, "cs", 2, 223, 6, fn], [lt, "cs", Vn, 222, 6, Ej], [fi, "cs", 2, 222, 7, ae], [Ps, "cs", 2, 221, Le, Ps], [1, "cs", 2, 221, ss, X], [1, "cs", 2, 221, et, 1], [fn, "cs", 2, 220, 6, 1], [1, "cs", lr, 220, xr, 1], [1, "cs", lr, 220, 8, lt], [lt, "cs", Gi, 219, qs, ja], [1, "cs", z, 219, 6, 1], [X, "cs", 2, 219, 5, 1], [fi, "cs", 0, 218, Y, 1], [Ps, "cs", 0, 216, 8, ja], [1, "cs", 2, 218, tq, fn], [1, "cs", 2, 217, tq, Ps], [fi, "cs", mj, 218, 7, fn], [X, "cs", Te, 218, hn, 1], [1, "cs", Te, 217, 6, X], [ae, "cs", lr, 217, 5, fn], [1, "cs", ae, 215, Xa, Ps], [lt, "cs", 1, 213, 5, Ej], [Ps, "cs", Js, 214, ei, 1], [1, "cs", Ea, 216, Y, 1], [ja, "cs", Ka, 213, 8, 1], [1, "cs", 0, 211, Mj, 1], [fi, "cs", 0, 209, qn, ae], [ae, "cs", xn, 208, 7, lt], [fi, "cs", 0, 207, An, lt], [1, "cs", Gi, 216, Qj, fi], [1, "cs", 2, 216, ls, 1], [X, "cs", 2, 215, 7, fi], [1, "cs", Cs, 215, 8, 1], [1, "cs", En, 214, 8, 1], [1, "cs", Gi, 214, ls, X], [fn, "cs", Gi, 215, Y, 1], [ae, "cs", 2, 214, 5, Ps], [1, "cs", En, 213, 6, 1], [fn, "cs", Cs, 213, 7, Ej], [1, "cs", 2, 212, 7, 1], [X, "cs", fn, 211, 5, lt], [1, "cs", ja, 209, ir, ae], [fn, "cs", Gi, 212, ir, fi], [1, "cs", 2, 211, 8, 1], [fi, "cs", 2, 210, V, 1], [Ej, "cs", Gi, 209, 7, 1], [1, "cs", Vn, 210, Pj, fi], [ae, "cs", 2, 210, 6, 1], [1, "cs", Vn, 212, Xa, 1], [Ej, "cs", 2, 212, 5, ae], [1, "cs", lr, 211, 6, 1], [Ej, "cs", Vn, 210, 5, Ps], [1, "cs", Te, 209, Xa, 1], [1, "cs", Gi, 208, hn, ja], [lt, "cs", mj, 208, br, 1], [1, "cs", 2, 207, 7, 1], [ja, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", En, 206, Gj, ja], [X, "cs", Cs, 208, 8, ae], [1, "cs", 2, 206, 6, fn], [1, "cs", xn, 204, 8, Ps], [fn, "cs", Oq, 205, Xa, X], [1, "cs", xn, 203, aq, 1], [X, "cs", 0, 202, 7, Ps], [fi, "cs", 0, 199, 8, 1], [1, "cs", Ea, 200, Xa, 1], [Ps, "cs", xn, 197, O, 1], [ja, "cs", Jj, 195, 8, X], [1, "cs", ke, 194, 6, 1], [fi, "cs", 1, 202, tq, lt], [1, "cs", 1, 206, 7, 1], [X, "cs", X, 201, Gj, 1], [1, "cs", 1, 197, qs, 1], [Ej, "cs", ja, 192, I, X], [lt, "cs", fi, 195, br, ae], [X, "cs", mj, 205, 7, 1], [1, "cs", 2, 205, 8, lt], [1, "cs", 2, 206, 8, X], [Ps, "cs", 2, 204, ls, lt], [ae, "cs", Gi, 204, 6, Ej], [1, "cs", Te, 204, 5, fn], [1, "cs", Te, 205, 5, ja], [ae, "cs", 2, 203, 6, ja], [ja, "cs", Cs, 203, 7, 1], [fi, "cs", Cs, 203, 8, 1], [Ps, "cs", 2, 201, 8, fn], [lt, "cs", 2, 200, 8, 1], [1, "cs", mj, 200, 7, X], [Ej, "cs", Gi, 201, 7, 1], [1, "cs", 2, 201, Qj, 1], [1, "cs", 2, 202, br, ja], [1, "cs", lr, 202, hn, 1], [Ps, "cs", 2, 200, qn, fn], [1, "cs", En, 199, qn, ja], [1, "cs", 2, 197, Me, 1], [Ps, "cs", Cs, 196, Me, 1], [Ej, "cs", Vn, 198, 5, 1], [1, "cs", 2, 198, Fa, ae], [1, "cs", 2, 199, ss, 1], [ae, "cs", z, 199, 7, 1], [Ej, "cs", Te, 198, 7, 1], [X, "cs", 2, 198, V, 1], [1, "cs", Cs, 197, Pj, ja], [1, "cs", mj, 196, I, 1], [1, "cs", lr, 196, Ca, 1], [fn, "cs", z, 196, 6, fi], [fn, "cs", 2, 195, Ae, fi], [fi, "cs", En, 195, 7, Ej], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [X, "cs", En, 193, 7, Ps], [1, "cs", Gi, 193, 6, 1], [Ej, "cs", Te, 193, Y, 1], [1, "cs", 2, 194, br, fn], [fn, "cs", 0, 192, 5, 1], [lt, "cs", Oq, 191, q, ja], [Ej, "cs", 0, 190, 6, 1], [Ej, "cs", Ea, 188, $q, 1], [ae, "cs", 0, 186, 8, lt], [1, "cs", 0, 186, 5, lt], [fn, "cs", Ka, 184, 7, 1], [1, "cs", Ea, 182, 8, 1], [1, "cs", 0, 181, Qj, 1], [ja, "cs", X, 189, 8, 1], [1, "cs", fi, 183, 8, Ej], [1, "cs", 1, 188, qn, 1], [1, "cs", X, 185, 6, Ej], [fn, "cs", 1, 180, 7, X], [1, "cs", fi, 183, 5, 1], [1, "cs", 1, 178, An, 1], [lt, "cs", 1, 177, 6, lt], [1, "cs", Ej, 173, Oi, 1], [1, "cs", ae, 171, xr, 1], [Ps, "cs", Js, 177, qs, ja], [1, "cs", Js, 175, 7, 1], [X, "cs", Ka, 179, et, 1], [Ps, "cs", 0, 174, 5, 1], [ja, "cs", nj, 176, 5, 1], [ja, "cs", 0, 172, tq, 1], [ae, "cs", 0, 170, ir, 1], [1, "cs", 0, 169, Fa, 1], [1, "cs", 2, 192, 6, 1], [Ps, "cs", Gi, 192, 8, ja], [ja, "cs", Te, 191, Ke, ja], [ja, "cs", 2, 191, 6, 1], [1, "cs", Te, 191, Me, X], [1, "cs", En, 190, Gj, fn], [1, "cs", Vn, 189, 5, 1], [1, "cs", 2, 189, ei, ae], [1, "cs", 2, 189, 7, Ps], [1, "cs", 2, 190, Oi, 1], [ja, "cs", 2, 190, 8, X], [fi, "cs", lr, 188, 8, Ej], [Ej, "cs", Te, 187, 8, Ej], [Ej, "cs", En, 187, 7, 1], [1, "cs", 2, 187, 6, fn], [1, "cs", z, 188, 6, Ej], [1, "cs", Te, 187, Me, 1], [Ps, "cs", mj, 186, 6, X], [1, "cs", 2, 186, 7, 1], [1, "cs", Vn, 185, ls, 1], [1, "cs", Te, 185, ir, 1], [1, "cs", En, 184, tq, lt], [X, "cs", Gi, 183, Mj, 1], [1, "cs", lr, 183, 6, Ps], [Ps, "cs", 2, 184, 6, fn], [ae, "cs", En, 184, 5, X], [1, "cs", mj, 185, Gj, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, Pj, 1], [1, "cs", 2, 181, Le, Ps], [ae, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, V, ja], [ja, "cs", 2, 179, 8, ae], [X, "cs", 2, 182, 5, fi], [1, "cs", Te, 181, 5, 1], [1, "cs", Gi, 180, 5, lt], [Ej, "cs", Gi, 180, Ae, 1], [X, "cs", 2, 179, 6, 1], [Ej, "cs", z, 179, 7, 1], [1, "cs", lr, 178, 7, 1], [lt, "cs", 2, 178, 6, 1], [ae, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, aq, 1], [1, "cs", 2, 177, $q, 1], [ae, "cs", 2, 176, 7, 1], [1, "cs", Te, 176, 6, fn], [1, "cs", 2, 175, kr, fi], [1, "cs", Gi, 175, 5, ja], [1, "cs", En, 176, 8, 1], [1, "cs", 2, 174, V, 1], [fi, "cs", 2, 175, An, lt], [1, "cs", z, 173, 8, fn], [1, "cs", 2, 174, Oi, 1], [1, "cs", 2, 173, 6, fi], [ja, "cs", Gi, 174, Fa, 1], [1, "cs", 2, 172, Me, 1], [ae, "cs", Cs, 173, 5, fi], [ae, "cs", 2, 172, Qj, X], [1, "cs", 2, 172, Ke, 1], [X, "cs", Te, 171, 8, X], [1, "cs", 2, 170, xr, 1], [1, "cs", 2, 170, Ae, 1], [X, "cs", En, 170, et, ja], [1, "cs", Vn, 171, 5, Ps], [fi, "cs", 2, 171, ss, 1], [X, "cs", 2, 169, 5, fi], [1, "cs", Cs, 169, 7, X], [1, "cs", 2, 169, 8, 1], [fi, "cs", 1, 168, $q, 1], [Ej, "cs", 1, 166, qn, Ps], [Ps, "cs", 1, 164, I, 1], [1, "cs", 1, 160, 7, lt], [ja, "cs", fn, 156, 8, Ps], [lt, "cs", 0, 166, 8, 1], [ae, "cs", 0, 168, 5, 1], [1, "cs", nj, 164, Ae, 1], [1, "cs", 0, 162, Ke, 1], [ja, "cs", 0, 158, An, 1], [1, "cs", Ea, 157, 6, Ej], [X, "cs", 0, 161, Y, ae], [fi, "cs", Oq, 159, 5, 1], [ja, "cs", 0, 155, 7, 1], [ja, "cs", 0, 154, 5, 1], [fi, "cs", 0, 151, 7, fi], [1, "cs", 1, 153, ir, fi], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, fi], [1, "cs", 2, 168, 8, 1], [1, "cs", En, 167, tq, fi], [1, "cs", z, 167, 7, 1], [X, "cs", 2, 167, 6, 1], [Ej, "cs", Vn, 167, Gj, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, ls, Ps], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", Cs, 165, aq, Ej], [lt, "cs", 2, 164, 5, lt], [ja, "cs", 2, 163, 5, ja], [1, "cs", Gi, 162, 5, 1], [1, "cs", 2, 162, Ae, Ps], [fi, "cs", 2, 163, Fa, 1], [1, "cs", mj, 163, 7, lt], [X, "cs", Cs, 163, 8, fn], [ja, "cs", z, 164, 8, 1], [ja, "cs", Cs, 165, 8, fi], [fn, "cs", mj, 161, 8, 1], [fn, "cs", lr, 162, 8, ja], [1, "cs", 2, 160, V, 1], [X, "cs", 2, 159, 8, Ej], [1, "cs", 2, 159, Mq, ae], [X, "cs", Gi, 159, Xa, 1], [1, "cs", 2, 160, Y, X], [1, "cs", 2, 160, 6, Ps], [fn, "cs", 2, 161, hn, 1], [fi, "cs", z, 161, 7, 1], [Ej, "cs", 2, 157, Ke, ja], [1, "cs", En, 158, Ke, fi], [ja, "cs", Te, 158, 6, 1], [1, "cs", En, 158, 5, Ps], [1, "cs", Gi, 155, qn, fn], [Ej, "cs", 2, 155, 6, Ps], [fi, "cs", Vn, 156, 6, Ps], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, Ca, X], [1, "cs", Te, 154, V, 1], [Ej, "cs", 2, 154, Oi, X], [Ps, "cs", 2, 154, 6, 1], [ja, "cs", En, 152, 8, 1], [X, "cs", 2, 153, ls, Ps], [1, "cs", 2, 153, 6, 1], [1, "cs", lr, 153, 5, fn], [ja, "cs", En, 152, 5, fi], [fn, "cs", 2, 152, 6, ae], [1, "cs", Vn, 152, 7, 1], [1, "cs", 2, 151, Ae, 1], [Ps, "cs", Gi, 157, et, 1], [1, "cs", 1, 156, 5, ae], [X, "cs", 0, 150, 5, 1], [fi, "cs", Ka, 149, Pj, X], [1, "cs", Ea, 147, tq, 1], [1, "cs", 0, 146, 5, Ej], [1, "cs", Js, 144, Mq, fn], [Ps, "cs", Jj, 142, qn, 1], [lt, "cs", fn, 147, 6, X], [X, "cs", 1, 145, V, X], [X, "cs", 1, 144, Y, 1], [1, "cs", Vn, 148, 5, 1], [1, "cs", z, 149, 5, X], [1, "cs", 2, 150, O, ae], [1, "cs", 2, 150, 8, fi], [1, "cs", 2, 151, 8, 1], [X, "cs", Cs, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, q, lt], [fi, "cs", lr, 149, ei, Ej], [1, "cs", Te, 148, 6, X], [Ej, "cs", 2, 148, Ke, lt], [1, "cs", 2, 147, 7, 1], [lt, "cs", Gi, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [X, "cs", Vn, 146, Ke, X], [X, "cs", Cs, 146, 8, 1], [ae, "cs", 2, 145, ls, lt], [1, "cs", Vn, 145, Xa, Ej], [1, "cs", z, 145, et, 1], [lt, "cs", Gi, 144, Xa, 1], [Ej, "cs", z, 143, 5, 1], [1, "cs", En, 143, Ae, ja], [1, "cs", Vn, 142, 6, 1], [1, "cs", 2, 141, br, ja], [1, "cs", En, 224, ue, 1], [X, "cs", Ea, 224, Pn, Ps], [1, "cs", 0, 224, 13, 1], [Ps, "cs", 0, 224, wj, ae], [Ps, "cs", Ea, 224, Hj, Ps], [X, "cs", nj, 224, 22, ja], [lt, "cs", 0, 224, 24, lt], [fi, "cs", 0, 224, 29, ja], [ae, "cs", Ka, 224, 33, Ej], [Ps, "cs", Js, 224, 35, lt], [1, "cs", Ea, 224, 38, lt], [1, "cs", 1, 224, kj, fi], [1, "cs", 1, 224, 20, ae], [1, "cs", 1, 224, 27, fi], [fi, "cs", fi, 224, 31, fi], [fn, "cs", X, 224, 36, 1], [fi, "cs", Vn, 224, 12, lt], [fn, "cs", En, 224, 15, 1], [lt, "cs", Te, 224, 16, 1], [Ps, "cs", Gi, 224, na, X], [1, "cs", 2, 224, 21, X], [ja, "cs", z, 224, 23, 1], [Ej, "cs", Cs, 224, 25, fn], [1, "cs", 2, 224, 26, 1], [1, "cs", Te, 224, 28, 1], [1, "cs", 2, 224, 30, X], [1, "cs", 2, 224, 32, fi], [1, "cs", mj, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", ke, 224, 41, 1], [fn, "cs", Js, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [X, "cs", 0, 224, 52, ja], [1, "cs", 0, 224, 57, fi], [Ej, "cs", X, 224, 47, 1], [1, "cs", mj, 224, 40, 1], [fi, "cs", 2, 224, 42, 1], [1, "cs", Te, 224, 43, X], [1, "cs", 2, 224, 45, 1], [fi, "cs", 2, 224, 49, Ps], [1, "cs", lt, 224, 50, fn], [1, "cs", 2, 224, 51, fn], [1, "la", 3, 224, 54, 1], [ae, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", Ea, 224, 60, 1], [fi, "cs", Ka, 224, 64, 1], [lt, "cs", ke, 224, 66, ae], [fn, "cs", 0, 224, 70, ae], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, ja], [1, "cs", lt, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", ae, 224, 72, fi], [1, "cs", ae, 224, 76, 1], [Ps, "cs", fn, 224, 80, 1], [ja, "cs", lt, 224, 83, 1], [1, "cs", 1, 224, 91, ja], [1, "cs", ja, 224, 95, 1], [X, "cs", 1, 224, 97, fn], [Ej, "cs", 0, 224, 85, X], [1, "cs", 0, 224, 88, Ej], [Ej, "cs", ke, 224, 93, Ps], [ja, "cs", Oq, 224, 98, 1], [1, "cs", Cs, 224, 59, ae], [Ej, "cs", 2, 224, 63, Ej], [1, "cs", 2, 224, 65, fi], [lt, "cs", 2, 224, 67, 1], [ae, "cs", z, 224, 69, 1], [1, "cs", 2, 224, 71, fi], [fi, "cs", En, 224, 73, 1], [1, "cs", Cs, 224, 75, 1], [1, "cs", Gi, 224, 78, 1], [1, "cs", lr, 224, 79, 1], [1, "cs", Vn, 224, 81, ae], [lt, "cs", z, 224, 82, 1], [fi, "cs", 2, 224, 84, fn], [fn, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", Gi, 224, 89, fn], [lt, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [ja, "cs", 2, 224, 94, 1], [Ej, "cs", Te, 224, 96, 1], [lt, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, wr, 1], [1, "cs", Js, 224, 101, Ps], [Ej, "cs", 1, 224, 103, 1], [Ps, "cs", mj, 224, 102, ja], [1, "cs", 0, 222, as, lt], [1, "cs", Gi, 223, Gq, ja], [1, "cs", 2, 222, 9, Ej], [Ps, "cs", Vn, 221, 9, fn], [1, "cs", Gi, 223, 10, 1], [1, "cs", 2, 223, Ra, 1], [Ps, "cs", 2, 223, 12, fn], [fi, "cs", Qe, 223, 13, fn], [1, "cs", mq, 222, Pn, fn], [1, "cs", on, 220, Zi, Ps], [Ej, "cs", Sr, 219, 9, fi], [1, "cs", on, 221, 10, 1], [Ps, "re", En, 219, 13, fn], [1, "re", 1, 218, R, X], [1, "re", 1, 214, 13, ae], [1, "cs", Ea, 221, 20, 1], [Ej, "cs", ae, 223, 18, 1], [1, "cs", lr, 222, D, 1], [X, "cs", mj, 223, 19, 1], [1, "cs", Gi, 223, 20, lt], [Ps, "cs", 2, 222, Jq, 1], [ja, "cs", 2, 220, 21, 1], [Ej, "cs", 0, 219, 21, Ps], [ja, "cs", Ie, 221, 21, lt], [1, "cs", 3, 218, 21, ae], [X, "cs", 3, 222, 21, X], [1, "cs", 3, 220, 22, 1], [1, "cs", on, 219, 22, Ej], [1, "cs", 3, 221, 22, 1], [ja, "cs", Oq, 211, G, 1], [1, "cs", 1, 211, 10, ja], [1, "cs", 1, 210, 12, fi], [ja, "cs", Ea, 211, nr, 1], [1, "cs", mj, 210, Zi, Ps], [1, "cs", lr, 210, jn, lt], [fi, "cs", 2, 210, aa, 1], [1, "cs", lr, 212, F, ja], [lt, "cs", Cs, 210, 13, ae], [lt, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, Yn, 1], [Ej, "cs", En, 212, Ss, fn], [Ps, "cs", 2, 210, Zn, X], [1, "cs", 3, 211, 15, Ps], [fn, "cs", 3, 213, 9, Ej], [fn, "cs", 3, 212, ar, lt], [ja, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, F, 1], [1, "la", yr, 223, 22, Ej], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, Zs, 1], [1, "la", E, 209, 10, lt], [fn, "la", Js, 209, en, 1], [X, "la", 4, 209, os, ae], [1, "la", 4, 219, 23, 1], [fi, "la", fa, 210, Ui, 1], [Ej, "la", 3, 217, 22, 1], [1, "la", pj, 212, 16, X], [1, "la", En, 214, 19, 1], [lt, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, Ps], [fi, "la", 4, 215, P, Ej], [X, "la", Cs, 216, 17, fn], [Ps, "la", 5, 216, 16, 1], [Ej, "la", et, 216, $n, 1], [1, "la", 1, 217, 16, fi], [1, "la", 2, 218, pq, ja], [ja, "la", z, 216, 14, ae], [ae, "la", 2, 219, 16, 1], [X, "la", Me, 220, Ms, ae], [Ej, "la", Gj, 216, 13, fi], [lt, "la", k, 217, b, 1], [1, "cs", 0, 211, 44, 1], [ae, "cs", Ps, 212, 45, lt], [fn, "cs", 2, 213, 45, fn], [1, "cs", 0, 214, 46, fn], [Ps, "cs", mj, 215, 46, 1], [1, "cs", Sr, 213, 46, Ej], [Ps, "cs", 3, 214, 47, lt], [1, "cs", mq, 214, 48, 1], [fn, "cs", yr, 216, 46, 1], [1, "cs", 0, 208, 20, lt], [1, "cs", 0, 210, 21, X], [Ej, "cs", 0, 212, 23, 1], [ae, "cs", 0, 213, 25, 1], [ja, "cs", mj, 213, 24, lt], [fn, "cs", Gi, 211, 22, 1], [ja, "cs", 2, 210, Xe, 1], [1, "cs", Cs, 209, 21, ae], [ja, "cs", En, 209, 20, 1], [ja, "cs", 2, 211, 21, Ps], [1, "cs", Vn, 212, 22, 1], [Ej, "cs", 2, 213, 23, ae], [1, "cs", 3, 213, 26, Ps], [Ej, "cs", Sr, 207, 20, 1], [ja, "la", 4, 192, 33, 1], [X, "la", pj, 191, 34, X], [Ps, "la", 4, 190, 35, Ej], [1, "la", Ie, 189, 37, fi], [X, "la", 3, 188, 39, 1], [lt, "la", 4, 186, 40, 1], [lt, "la", 4, 185, 39, Ps], [1, "la", Jn, 184, 39, 1], [1, "la", En, 183, 39, 1], [fi, "la", Ps, 182, 40, Ps], [X, "la", 2, 181, 41, ja], [fn, "la", 5, 180, 41, 1], [Ej, "la", 5, 179, 41, 1], [1, "la", cn, 192, 28, fi], [lt, "la", Jn, 191, 28, 1], [ae, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [ja, "la", cn, 187, 26, 1], [ja, "la", 4, 186, 25, lt], [1, "la", _n, 185, 25, 1], [fi, "la", 4, 184, 24, 1], [X, "la", 5, 184, 23, 1], [lt, "la", 2, 184, 22, 1], [fn, "la", et, 184, 21, fi], [fi, "la", Ps, 183, Xe, Ps], [1, "la", 5, 182, 20, 1], [lt, "la", 2, 181, Xe, X], [1, "la", qn, 180, 20, 1], [1, "la", 2, 179, rq, 1], [fi, "la", Nr, 178, Dn, fi], [ae, "la", oe, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, fi], [X, "cs", 0, 175, ce, ae], [Ps, "cs", 0, 180, pq, fi], [X, "cs", ke, 174, Aq, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, lt], [ae, "cs", 1, 172, kq, fn], [1, "cs", 1, 181, Ui, 1], [fn, "cs", z, 179, 15, 1], [fn, "cs", 2, 177, 16, ja], [1, "cs", 2, 176, 16, lt], [1, "cs", En, 174, kq, Ps], [1, "cs", Vn, 173, 19, fn], [X, "cs", 2, 172, D, Ps], [fn, "cs", Te, 173, an, fi], [lt, "cs", 2, 173, 17, fn], [1, "cs", 2, 174, Xj, 1], [ja, "cs", 2, 174, Tr, 1], [1, "cs", Te, 175, za, fn], [lt, "cs", Cs, 176, 15, 1], [ja, "cs", En, 178, 15, Ps], [1, "cs", 2, 178, Tr, lt], [ja, "cs", En, 179, v, X], [1, "cs", Te, 180, 15, 1], [1, "cs", Te, 181, 16, 1], [1, "cs", 3, 182, fe, 1], [1, "cs", on, 172, 21, fi], [1, "la", lt, 175, uq, Ps], [fi, "la", z, 174, 20, 1], [1, "la", lr, 173, 20, 1], [1, "la", ae, 180, 17, ae], [1, "la", 2, 181, 17, Ps], [1, "la", 3, 191, Ji, 1], [ae, "s", 0, 217, 30, 1], [Ps, "s", xn, 208, 35, 1], [1, "s", 0, 204, 24, Ps], [X, "s", ja, 218, 32, 1], [ae, "s", ae, 207, 34, fn], [Ps, "s", 1, 202, 23, fn], [1, "s", 1, 195, 16, 1], [fi, "s", 2, 222, 28, 1], [X, "s", lr, 212, 38, 1], [lt, "s", 2, 207, 23, ja], [ae, "s", 2, 202, 12, 1], [1, "s", 2, 195, vr, ja], [Ej, "s", 1, 191, en, lt], [Ej, "s", 0, 187, 16, Ej], [ja, "s", 2, 188, v, fi], [1, "s", 1, 186, qj, 1], [1, "s", 1, 201, 16, fn], [1, "g", fi, 216, 31, Ej], [1, "g", 0, 200, Pe, 1], [1, "g", 0, 202, 40, Ps], [Ps, "g", Oq, 189, 32, ae], [Ps, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, lt], [ja, "g", lr, 198, 37, fi], [ja, "s", Ka, 193, 39, fi], [1, "s", 0, 201, 45, fn], [ja, "a", 0, 210, 29, X], [1, "a", 0, 200, Jq, 1], [fi, "cs", 0, 200, 34, lt], [ja, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [ja, "cs", 1, 191, 31, Ej], [fi, "cs", 2, 202, 32, 1], [1, "cs", Vn, 194, 26, 1], [1, "cs", 2, 192, 27, Ps], [1, "cs", 2, 192, 32, 1], [ae, "cs", Vn, 203, 31, 1], [1, "cs", 2, 202, 31, fn], [1, "cs", En, 202, 30, Ps], [X, "cs", oe, 202, 29, lt], [ja, "cs", E, 201, 32, fi], [1, "cs", mq, 199, 35, fn], [ja, "cs", 0, 193, 34, 1], [1, "cs", mj, 194, 34, Ps], [fi, "cs", 2, 198, 35, Ej], [X, "cs", 3, 199, 34, fn], [Ej, "cs", 3, 191, 29, 1], [fi, "cs", 0, 191, 30, 1], [1, "cs", E, 190, 29, 1], [lt, "la", 3, 180, 69, X], [X, "la", 3, 182, 68, 1], [1, "la", er, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, fi], [1, "la", 3, 182, 72, 1], [ja, "la", 3, 180, 71, 1], [X, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", Oq, 183, 74, 1], [X, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", lr, 182, 74, Ej], [Ej, "cs", 2, 181, 73, 1], [lt, "cs", Gi, 180, 74, Ej], [Ps, "cs", mj, 181, 74, 1], [1, "la", nj, 184, 70, fi], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, fi], [1, "cs", yr, 184, 67, Ps], [1, "cs", Qe, 182, 67, fi], [1, "la", mn, 187, 69, 1], [fi, "la", 1, 188, 68, 1], [Ej, "la", 4, 189, 68, 1], [fi, "la", 2, 190, 68, 1], [ae, "la", 1, 191, 68, 1], [fn, "la", 4, 192, 68, 1], [ja, "la", mj, 193, 68, 1], [1, "la", cn, 194, 69, 1], [1, "la", Cs, 194, 70, 1], [1, "la", Me, 195, 71, 1], [Ps, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, Ej], [lt, "la", Ha, 196, 71, 1], [1, "la", X, 197, 73, 1], [X, "la", 5, 196, 73, ae], [lt, "la", qn, 198, 73, ja], [fn, "la", 3, 201, 73, fi], [Ej, "la", Ie, 203, 72, Ps], [1, "la", bq, 199, 73, ae], [X, "la", Ej, 205, 72, 1], [1, "la", mj, 206, 72, 1], [lt, "la", 5, 207, 72, 1], [1, "la", Ps, 208, 72, 1], [1, "la", 1, 209, 73, 1], [lt, "la", 2, 209, 74, 1], [fi, "la", 5, 211, 76, fi], [fn, "la", pj, 210, 75, 1], [fn, "la", et, 212, 76, ae], [1, "la", cn, 202, 75, 1], [X, "la", 2, 203, 76, 1], [fn, "la", _n, 204, 77, 1], [1, "la", Te, 204, 78, ja], [fi, "la", 2, 204, 79, fn], [1, "la", 5, 204, 80, 1], [1, "cs", ke, 202, 74, ae], [Ej, "cs", Ps, 203, 74, 1], [Ej, "cs", 2, 204, 73, fn], [1, "cs", 2, 203, 75, 1], [lt, "cs", Qe, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [ae, "cs", 0, 205, 74, Ps], [1, "cs", Vn, 204, 74, Ps], [fi, "cs", 2, 204, 75, fn], [1, "cs", 2, 206, 73, ae], [1, "cs", yr, 207, 73, fi], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [lt, "la", on, 183, 66, Ej], [1, "la", Jn, 183, 65, ja], [ae, "la", 4, 184, 64, 1], [1, "la", Jn, 185, 63, ae], [fi, "la", 1, 185, 62, ja], [Ej, "la", 2, 185, 61, ae], [1, "la", z, 185, 60, 1], [ae, "la", 4, 186, 59, 1], [1, "la", lt, 187, 58, 1], [1, "la", En, 187, 57, fn], [fn, "la", Cs, 187, 56, ae], [1, "s", 0, 191, 60, 1], [ae, "s", 1, 195, 58, fn], [1, "s", 1, 199, 46, 1], [1, "s", Cs, 202, 49, Ps], [1, "g", 2, 197, 55, fn], [fn, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, Ps], [1, "g", Jj, 210, 61, 1], [Ej, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, fn], [1, "g", ke, 175, 25, 1], [1, "g", 0, 168, 32, 1], [lt, "g", fn, 179, 28, 1], [ja, "g", 1, 161, rn, 1], [Ps, "g", En, 172, en, ae], [Ps, "g", Vn, 160, 25, fn], [Ps, "g", 2, 157, 39, 1], [1, "g", Vn, 170, 43, 1], [1, "g", Cs, 202, 67, ae], [1, "g", 2, 217, 72, fn], [1, "g", 2, 214, 82, fn], [1, "g", 2, 193, 86, 1], [fi, "g", 2, 168, 60, Ps], [1, "g", Vn, 165, 78, fn], [1, "g", lr, 173, 88, 1], [Ej, "s", Ka, 185, 51, 1], [ae, "s", 0, 175, 44, 1], [1, "s", Ka, 165, 50, 1], [1, "s", xn, 160, 32, fn], [fn, "s", 1, 162, 30, ae], [1, "s", lt, 176, 28, Ej], [1, "s", ae, 154, Nq, 1], [fn, "s", fn, 184, 49, 1], [fn, "s", Ej, 192, 62, 1], [Ej, "s", fi, 216, 62, fi], [1, "s", fn, 204, 65, ja], [1, "s", 1, 217, 79, 1], [X, "s", ae, 206, 86, lt], [1, "la", 3, 211, 69, ae], [ae, "la", 4, 215, 69, 1], [Ps, "la", Y, 201, 81, ja], [Ej, "la", 1, 207, 83, Ps], [X, "la", 3, 173, 32, X], [1, "la", 2, 181, 45, Ps], [lt, "la", ja, 178, 38, 1], [Ej, "la", lt, 213, 69, Ej], [Ps, "la", 5, 214, 69, Ej], [1, "la", sj, 216, 68, 1], [1, "la", 0, 191, 78, Ej], [1, "la", 3, 191, 80, ja], [1, "la", 3, 189, 79, 1], [ja, "g", 2, 150, 29, 1], [fn, "g", mj, 154, 67, fn], [1, "g", 2, 202, 94, ae], [X, "g", 2, 155, 90, 1], [1, "s", mj, 215, 80, lt], [ae, "s", Cs, 204, 62, 1], [Ej, "s", 2, 218, 60, 1], [fi, "s", 2, 194, 62, 1], [ja, "s", 0, 216, 86, 1], [1, "s", ke, 211, 93, fi], [1, "la", 0, 216, 92, 1], [1, "la", xn, 151, 96, X], [1, "la", 1, 155, 95, ae], [lt, "la", 4, 214, 88, 1], [ja, "s", Ka, 205, 99, 1], [1, "s", Ej, 217, 88, lt], [1, "s", fn, 213, 94, 1], [1, "s", fn, 202, 97, 1], [ae, "s", xn, 199, 85, X], [fi, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [fn, "s", Ps, 192, 97, 1], [1, "la", 3, 196, 92, Ps], [1, "la", Ej, 199, 91, Ps], [1, "la", X, 220, 91, Ej], [1, "la", Jj, 219, 77, ae], [1, "la", 0, 200, 59, 1], [1, "la", Sn, 188, 87, lt], [ae, "la", Ka, 183, 94, 1], [X, "la", 1, 187, 83, Ps], [1, "la", 1, 175, 82, ja], [1, "la", ja, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [Ej, "la", 3, 159, 80, Ej], [1, "la", 3, 167, 15, ae], [Ps, "la", X, 164, 17, 1], [1, "la", fi, 172, 28, 1], [X, "la", yr, 153, 24, 1], [Ps, "la", cn, 164, 91, 1], [fi, "la", mn, 156, 82, 1], [ae, "la", 4, 149, 90, ja], [X, "s", 0, 178, 85, fi], [1, "s", fi, 180, 85, Ps], [Ej, "s", 0, 163, 96, 1], [lt, "s", 0, 159, 86, X], [1, "s", 0, 185, 78, X], [1, "s", X, 194, 75, lt], [X, "s", Gi, 195, 76, 1], [ae, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, Ej], [1, "s", 2, 166, 97, 1], [ae, "s", Vn, 177, 97, fn], [Ps, "s", 0, 149, 85, Ps], [ae, "s", 1, 151, 83, X], [Ej, "s", X, 175, 74, ae], [1, "s", Ka, 174, 72, ae], [fn, "la", 3, 168, 71, fi], [1, "la", oe, 180, 60, Ps], [1, "s", 0, 156, 63, fi], [fn, "s", Oq, 151, 47, 1], [1, "s", 1, 158, 64, ja], [fn, "s", 1, 161, 75, X], [Ej, "s", fi, 162, 51, ja], [ja, "s", lt, 175, 45, lt], [fi, "s", ja, 152, 47, X], [ae, "s", 1, 159, 33, fn], [1, "s", Ej, 152, an, ja], [ja, "s", Jj, 151, Iq, 1], [ae, "s", 0, 166, 22, fi], [ae, "s", 0, 170, 63, Ps], [ae, "s", 2, 172, 62, X], [X, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", Gi, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", pj, 177, 68, 1], [1, "la", yr, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", fi, 172, 67, 1], [Ps, "la", 4, 171, 67, 1], [ja, "la", mn, 170, 66, 1], [lt, "la", 4, 169, 66, lt], [ja, "la", ja, 168, 66, 1], [Ej, "la", 4, 167, 67, 1], [1, "la", fi, 166, 67, 1], [fi, "la", 4, 165, 68, 1], [Ej, "la", Me, 164, 68, 1], [1, "la", Te, 163, 68, fi], [X, "la", 5, 162, 68, 1], [1, "la", z, 161, 68, Ps], [1, "la", E, 153, 72, 1], [1, "la", Ie, 163, 60, Ej], [1, "la", Sn, 164, 42, 1], [fi, "la", 0, 155, 51, fi], [1, "la", X, 168, 42, 1], [X, "la", cn, 158, 48, 1], [1, "la", 4, 178, 57, lt], [Ej, "la", Gs, 151, 69, fn], [Ps, "la", lr, 170, 74, ja], [fi, "la", z, 160, 84, 1], [1, "la", mj, 174, 92, X], [X, "la", 2, 188, 90, 1], [fi, "la", 2, 209, 84, lt], [ja, "la", lr, 206, 93, Ej], [ae, "la", Y, 156, 70, 1], [1, "la", 5, 165, 57, fi], [1, "la", 5, 182, 58, 1], [lt, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [Ps, "la", Ps, 152, 53, 1], [1, "la", fi, 152, 37, 1], [Ps, "la", 2, 163, Fe, 1], [1, "de", 12, 219, 12, Ka], [ae, "de", kj, 203, 13, Ka], [fi, "de", 15, 220, Ja, nj], [1, "de", de, 223, 15, 0], [X, "de", 12, 213, as, 0], [1, "de", 37, 217, 19, nj], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, as, ke], [Ej, "de", 40, 214, xs, ke], [1, "de", 40, 222, 16, 0], [fi, "de", 40, 209, Bs, 0], [fi, "de", 37, 212, 18, Js], [lt, "de", 38, 215, 26, Js], [1, "de", 37, 222, 25, 0], [fi, "de", 40, 221, 29, 0], [Ps, "de", 12, 220, 27, 0], [ae, "de", Iq, 213, 27, 0], [1, "de", xs, 215, 30, nj], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [Ej, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [ae, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, Jj], [Ej, "de", Ta, 223, 38, xn], [1, "de", M, 213, 38, ke], [ja, "de", he, 222, 44, Jj], [1, "de", ge, 208, 33, nj], [1, "de", 15, 206, 23, 0], [1, "de", uj, 205, 28, 0], [fi, "de", $s, 211, 23, 0], [1, "de", he, 201, 20, xn], [ae, "de", Gr, 198, 9, Oq], [ae, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [fi, "de", 37, 205, 13, 0], [Ps, "de", 39, 204, 9, xn], [1, "de", 40, 196, li, Ea], [1, "de", 40, 198, 18, 0], [lt, "de", 37, 192, 11, 0], [Ps, "de", 37, 199, 24, Oq], [fi, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, Ka], [X, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, vr, 0], [1, "de", 39, 192, R, Js], [ae, "de", 37, 185, b, ke], [fn, "de", pa, 188, Ui, 0], [Ps, "de", M, 185, W, 0], [Ej, "de", qj, 189, Zs, Oq], [1, "de", 15, 187, 22, 0], [lt, "de", 15, 180, wn, 0], [fn, "de", 12, 177, 14, Ka], [1, "de", ti, 173, Vq, 0], [lt, "de", 14, 171, 15, 0], [X, "de", 40, 182, G, 0], [fn, "de", 39, 179, 13, 0], [lt, "de", 39, 175, Zi, nj], [ae, "de", 40, 173, 14, ke], [1, "de", 37, 169, 11, 0], [ae, "de", 37, 163, ue, xn], [lt, "de", 38, 164, zs, ke], [ja, "de", 39, 170, 20, 0], [ja, "de", 40, 160, Xj, 0], [1, "de", 40, 154, 10, ke], [ae, "de", 40, 165, 23, 0], [fn, "de", 40, 150, 19, Ka], [fn, "de", 37, 155, pq, 0], [X, "de", 39, 146, as, Js], [1, "de", 12, 159, Ta, 0], [1, "de", 13, 151, Zs, Ka], [X, "de", 14, 150, kj, Ea], [Ej, "de", 15, 153, 19, 0], [ja, "de", L, 161, 25, Jj], [1, "de", Zn, 169, 25, 0], [X, "de", 15, 176, 25, ke], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [Ps, "de", 14, 181, 36, xn], [ae, "de", 37, 186, 33, xn], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [ae, "de", 40, 175, 31, xn], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, Js], [1, "de", 38, 162, 32, 0], [fn, "de", 38, 168, 45, 0], [lt, "de", 38, 173, 45, Ea], [1, "de", 39, 160, 35, Ka], [1, "de", 40, 161, 42, Oq], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [ja, "de", 40, 150, 32, xn], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [lt, "de", 37, 154, 45, Ea], [1, "de", 39, 149, 45, Ea], [fn, "de", 40, 150, 50, xn], [1, "de", 40, 160, 52, xn], [1, "de", 37, 164, 52, nj], [fn, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, Ea], [Ps, "de", 12, 167, 32, 0], [1, "de", xq, 158, 32, 0], [lt, "de", 14, 149, 28, 0], [fi, "de", Ss, 163, 30, Jj], [Ps, "de", 14, 158, 39, 0], [ae, "de", 12, 171, 43, Ea], [Ej, "de", 12, 174, 36, 0], [fn, "de", li, 151, 43, Ka], [ja, "de", 13, 152, 48, 0], [1, "de", xs, 164, 49, 0], [Ej, "de", 15, 149, 52, Js], [X, "de", li, 174, 49, 0], [1, "de", M, 183, 51, Oq], [1, "de", 14, 186, 48, Oq], [ja, "de", 37, 182, 48, ke], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, Js], [Ps, "de", 37, 200, 38, ke], [Ps, "de", 40, 194, 37, 0], [fn, "de", 39, 199, 44, Ka], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [Ej, "de", 12, 194, 40, Ka], [1, "de", 13, 202, 45, 0], [ae, "de", 14, 198, 47, 0], [Ej, "de", 15, 198, 55, 0], [1, "de", ge, 212, 54, 0], [1, "de", Pe, 216, 63, Ea], [1, "de", 14, 209, 62, 0], [1, "de", li, 219, 60, Ea], [Ps, "de", 12, 206, 56, 0], [fi, "de", 12, 218, 72, Jj], [fi, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, Ka], [X, "de", de, 193, 63, 0], [lt, "de", 14, 216, 80, ke], [1, "de", 14, 222, 87, Ka], [1, "de", 38, 210, 53, nj], [ja, "de", 37, 210, 47, Oq], [1, "de", 37, 200, 63, Js], [ae, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, Js], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, Jj], [1, "de", 38, 218, 55, Jj], [1, "de", 38, 212, 61, Js], [Ps, "de", 38, 222, 70, Ea], [1, "de", 38, 218, 70, 0], [Ps, "de", 40, 222, 81, xn], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [Ps, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, Js], [1, "de", 39, 218, 87, Ea], [fn, "de", 39, 222, 93, 0], [fn, "de", 39, 216, 96, 0], [Ej, "de", 39, 209, 94, Ea], [1, "de", 39, 201, 87, 0], [lt, "de", 39, 198, 82, ke], [X, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [ae, "de", 39, 202, 92, nj], [1, "de", 37, 194, 97, nj], [1, "de", 39, 204, 88, 0], [ja, "de", 39, 189, 90, Ka], [1, "de", 39, 194, 81, 0], [fn, "de", 39, 188, 98, Jj], [Ej, "de", 37, 183, 91, 0], [fi, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [fi, "de", 38, 184, 77, 0], [X, "de", 38, 180, 80, xn], [ja, "de", 39, 173, 75, 0], [Ps, "de", 40, 178, 87, nj], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [X, "de", 40, 165, 92, Ea], [Ps, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [ja, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [ae, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [fi, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, Js], [1, "de", 40, 149, 74, Js], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, Js], [1, "de", 39, 174, 64, nj], [Ps, "de", 39, 175, 56, 0], [ja, "de", 39, 149, 67, 0], [fi, "de", m, 218, 96, 0], [1, "de", 13, 212, 95, ke], [1, "de", 14, 204, 85, xn], [1, "de", zs, 215, 85, Ea], [ae, "de", $n, 197, 97, ke], [Ej, "de", en, 198, 87, 0], [1, "de", 14, 196, 77, 0], [Ps, "de", Iq, 194, 86, 0], [1, "de", 15, 181, 84, 0], [fi, "de", 14, 184, 79, nj], [Ps, "de", 14, 188, 93, nj], [fi, "de", 13, 180, 87, xn], [1, "de", 13, 178, 96, nj], [1, "de", 13, 163, 95, 0], [fn, "de", Ui, 172, 88, Ea], [fn, "de", Ui, 176, 75, Jj], [fn, "de", 14, 172, 72, nj], [fi, "de", Zn, 169, 82, Ea], [1, "de", 13, 164, 78, 0], [X, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", $n, 154, 91, Ea], [1, "de", 15, 160, 74, nj], [fn, "de", 14, 152, 76, Ka], [lt, "de", 14, 158, 63, xn], [Ps, "de", 14, 150, 60, Ea], [1, "de", 12, 169, 59, xn], [1, "de", Fe, 173, 61, xn], [Ps, "cs", 1, 143, 104, 1], [1, "cs", xn, 141, 102, 1], [ja, "cs", E, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [Ps, "cs", mj, 140, 102, 1], [1, "cs", oe, 143, 107, 1], [1, "cs", Oq, 143, 106, fn], [ja, "cs", 2, 143, 105, 1], [ja, "cs", 2, 142, 103, 1], [1, "cs", Jj, 142, 104, 1], [1, "cs", Vn, 141, 103, 1], [1, "cs", mq, 142, 105, fn], [1, "cs", Sn, 140, 103, 1], [1, "cs", on, 141, 104, ja], [ae, "la", 4, 151, 23, lt], [Ps, "la", Jn, 150, 22, 1], [ae, "la", Ps, 149, 21, X], [Ps, "la", Jn, 148, 21, Ej], [1, "la", En, 147, rq, 1], [1, "la", 4, 147, 19, Ps], [lt, "la", Y, 147, 18, ja], [1, "la", 1, 147, Nq, ja], [fi, "la", fa, 144, 9, lt], [ja, "la", Gj, 147, 16, 1], [fi, "la", 2, 147, zs, 1], [1, "la", k, 147, $s, lt], [1, "la", Gs, 145, 11, lt], [1, "la", 5, 145, Ta, fi], [1, "la", lt, 146, uj, 1], [1, "la", 2, 145, is, fi], [lt, "la", yr, 155, 25, ae], [fi, "la", Js, 155, 24, Ej], [Ps, "la", 3, 153, 26, 1], [Ps, "cs", Ea, 151, 24, 1], [Ps, "cs", ke, 153, 22, ae], [ae, "cs", 3, 152, 22, 1], [fi, "cs", on, 154, 22, 1], [fi, "cs", ae, 157, 26, fn], [ja, "cs", Cs, 157, 24, fi], [lt, "cs", Cs, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [ja, "cs", 2, 152, 25, fi], [1, "cs", 2, 151, 25, ae], [Ps, "cs", mj, 156, 27, Ps], [fn, "cs", En, 157, 23, 1], [1, "cs", En, 157, 22, 1], [ja, "cs", 3, 150, 24, 1], [1, "cs", fa, 150, 23, 1], [lt, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, Js], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, Oq], [1, "de", 13, 156, 21, 0], [lt, "de", 13, 147, 36, nj], [fn, "de", uj, 161, 56, 0], [ae, "de", 13, 147, 79, Oq], [X, "de", en, 157, 99, 0], [ja, "de", en, 172, 99, 0], [1, "la", oe, 143, 102, 1], [ae, "la", Nr, 149, 96, 1], [fi, "la", 4, 145, 102, Ej], [X, "la", fn, 148, 97, 1], [1, "la", 5, 148, 98, 1], [Ps, "cs", 3, 144, 104, fn], [1, "cs", Qe, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", E, 145, 104, Ej], [fn, "cs", fa, 142, 101, 1], [1, "cs", er, 143, 100, 1], [Ps, "cs", 3, 141, 101, 1], [1, "cs", on, 142, Kn, fi], [1, "cs", Ea, 141, Us, fn], [lt, "cs", 2, 140, 101, lt], [1, "cs", 2, 144, 105, 1], [fi, "cs", 3, 146, 103, X], [fi, "cs", xa, 146, 102, ja], [Ps, "cs", oe, 150, 95, Ej], [Ej, "cs", Js, 150, 97, 1], [1, "cs", 2, 151, 98, fi], [1, "cs", 0, 153, 97, 1], [lt, "cs", 3, 153, 96, 1], [1, "cs", Te, 149, 95, 1], [ja, "s", Ea, 213, 127, Ej], [fi, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [X, "plm", 0, 208, 127, xn], [ja, "s", lt, 207, 132, 1], [1, "s", Vn, 208, 133, 1], [1, "plm", 0, 217, 132, Ka], [lt, "plm", 2, 186, 158, Oq], [ja, "plm", ke, 184, 160, Ea], [X, "s", 1, 183, 156, 1], [1, "s", z, 186, 159, X], [ae, "p", 0, 182, 157, 1], [1, "p", Js, 114, 205, 1], [ja, "plm", 1, 117, 204, Ea], [lt, "plm", ke, 117, 205, Js], [X, "plm", 2, 112, 204, nj], [1, "s", 2, 114, 207, 1], [fi, "s", Gi, 115, 204, 1], [1, "plm", 2, 122, 151, Ea], [Ps, "plm", 1, 123, 150, Jj], [1, "plm", X, 117, 151, 0], [1, "s", 0, 118, 150, 1], [Ps, "s", 1, 122, 152, Ej], [Ej, "plm", 2, 156, 130, 0], [1, "plm", X, 154, 127, 0], [ja, "s", Jj, 153, 128, 1], [1, "s", 2, 152, 130, Ps], [ja, "p", nj, 123, 65, lt], [fn, "plm", Gi, 125, 62, Ka], [1, "plm", 1, 124, 62, nj], [1, "plm", Oq, 120, 65, 0], [1, "s", ja, 125, 63, ja], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [lt, "cs", 2, 144, 106, 1], [ja, "cs", z, 145, 105, fn], [1, "cs", 2, 144, 107, X], [1, "cs", 2, 141, 106, 1], [ae, "cs", En, 141, 105, lt], [Ej, "cs", Te, 140, 105, ja], [X, "cs", z, 140, 104, 1], [fn, "cs", ae, 138, 103, 1], [1, "cs", Ka, 139, 104, 1], [X, "cs", 2, 139, 103, 1], [Ej, "cs", En, 139, 105, X], [lt, "cs", 2, 142, 106, 1], [X, "cs", Cs, 142, 107, 1], [fn, "cs", Gi, 139, 101, fi], [1, "de", uq, 27, 264, 0], [1, "la", Jn, 147, 99, fn], [ae, "la", 1, 146, 100, fi], [1, "la", Gs, 145, 101, 1], [fn, "cs", ae, 215, 47, fn], [1, "cs", Vn, 216, 47, 1], [fi, "cs", z, 215, 48, Ps], [X, "la", 4, 214, 45, 1], [Ej, "la", 4, 215, 45, ja], [1, "la", Js, 216, 46, 1], [1, "la", mn, 216, 48, 1], [ae, "la", _n, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", E, 214, 49, fi], [1, "la", 4, 211, 45, 1], [lt, "la", on, 213, 47, Ej], [Ej, "cs", Gi, 224, 48, 1], [lt, "plm", mj, 111, 243, 0], [fi, "plm", X, 108, 246, 0], [1, "s", ja, 110, 243, fn], [Ej, "s", ke, 108, 245, 1], [1, "s", nj, 121, 276, X], [ae, "plm", Vn, 122, 277, xn], [1, "plm", Gi, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [ae, "s", X, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", oe, 67, 16, 1], [X, "cs", 0, 67, Nq, Ps], [fn, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, Bs, ja], [1, "cs", Sr, 68, 17, 1], [fi, "cs", Js, 36, ci, 1], [fn, "cs", Te, 36, j, ja], [1, "cs", Cs, 36, kq, lt], [1, "cs", Ie, 35, 17, 1], [1, "cs", 3, 36, Rq, 1], [Ej, "cs", 3, 35, na, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, ja], [ae, "cs", 3, 66, 22, fi], [1, "cs", Sr, 66, 31, 1], [ja, "cs", z, 36, 30, 1], [ja, "cs", 2, 36, 23, lt], [X, "cs", 1, 36, 22, ja], [ja, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, X], [1, "cs", Jj, 43, L, fi], [ja, "cs", 2, 44, 13, 1], [lt, "cs", 3, 42, 16, ae], [1, "cs", 3, 41, v, 1], [fn, "cs", mq, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, Rq, 1], [lt, "cs", Sr, 44, 19, fi], [1, "cs", 3, 45, ft, X], [ae, "cs", Vn, 46, Oe, Ps], [Ej, "cs", nj, 43, 22, 1], [1, "cs", En, 42, 22, Ej], [fn, "cs", Ej, 41, 22, 1], [fn, "cs", Ka, 40, 22, 1], [1, "cs", 3, 39, 17, fn], [fi, "cs", ja, 44, 26, Ej], [X, "cs", En, 45, 26, Ps], [1, "cs", 3, 46, 26, Ej], [1, "cs", ke, 47, 26, fn], [1, "cs", Gi, 48, 26, 1], [fn, "cs", fa, 47, 25, 1], [1, "cs", 3, 43, 27, Ej], [Ps, "cs", 1, 49, 32, fn], [ae, "cs", Vn, 50, 32, 1], [ja, "cs", mj, 51, 32, 1], [1, "cs", mj, 52, 32, 1], [fi, "d", ke, 51, 29, lt], [1, "d", Ps, 53, 29, ae], [lt, "d", X, 49, 29, ja], [1, "cs", 3, 55, 31, ja], [Ej, "cs", 3, 54, 32, ae], [fn, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", Jj, 51, 33, 1], [1, "cs", 2, 52, 33, lt], [Ej, "cs", En, 50, 33, 1], [1, "cs", Sr, 56, 30, fi], [1, "cs", 3, 56, 31, ja], [ja, "cs", 3, 46, 30, fn], [lt, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [lt, "cs", Vn, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [fi, "cs", nj, 55, 32, lt], [ja, "cs", Oq, 47, 32, 1], [1, "d", lt, 54, 35, lt], [ja, "fo", 2, 35, 15, 0], [lt, "fo", 2, 36, 12, Oq], [1, "fo", 2, 67, Pe, 0], [1, "cs", Sn, 60, 13, ja], [1, "cs", Te, 59, 13, 1], [fn, "cs", 1, 58, is, fi], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, ae], [1, "cs", Sn, 60, 16, lt], [1, "cs", er, 63, 17, Ps], [ae, "cs", 2, 60, Hj, 1], [1, "cs", 1, 59, Hj, X], [Ej, "cs", 3, 58, 19, Ej], [1, "cs", Te, 57, uq, lt], [1, "cs", Gi, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [X, "cs", 2, 63, 23, 1], [1, "cs", Ea, 62, 22, lt], [lt, "cs", 2, 61, 22, X], [1, "cs", fn, 60, 22, fi], [1, "cs", Oq, 59, 22, 1], [1, "cs", 2, 54, 26, lt], [ae, "cs", 2, 55, 26, ae], [lt, "cs", 2, 56, 26, 1], [fn, "cs", 1, 57, 26, 1], [X, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, _r, 1], [1, "cs", 2, 68, 15, fn], [1, "cs", 3, 69, 15, Ej], [1, "cs", Ie, 70, 15, 1], [1, "cs", xa, 70, 14, fn], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, lt], [X, "cs", 2, 71, 13, fi], [fn, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, M, X], [1, "cs", er, 70, ir, ja], [1, "cs", 3, 71, V, 1], [fi, "cs", En, 72, 8, 1], [1, "cs", 0, 73, 8, lt], [1, "cs", on, 74, 9, Ps], [1, "cs", 3, 74, q, fn], [1, "cs", xn, 75, V, fn], [fi, "cs", 3, 76, V, ja], [lt, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, Ki, 1], [Ps, "cs", 0, 76, Ki, 1], [1, "cs", 0, 76, Uj, 1], [lt, "cs", 3, 76, 15, 1], [1, "cs", yr, 75, Tr, 1], [X, "cs", lr, 77, Ws, ae], [1, "cs", 2, 77, 14, fn], [1, "cs", Sr, 77, Qr, Ej], [fi, "cs", Qe, 77, 13, 1], [1, "cs", 3, 77, Ui, fi], [lt, "cs", 0, 74, 18, lt], [1, "cs", 1, 75, or, 1], [fn, "cs", Te, 74, 17, fn], [1, "cs", oe, 73, D, fn], [1, "cs", 3, 67, 23, Ej], [Ps, "cs", Ea, 68, 23, Ej], [1, "cs", 0, 72, 20, 1], [1, "cs", Gi, 73, 20, fi], [fn, "cs", 2, 74, Ar, fn], [fi, "cs", 2, 74, 36, 1], [1, "cs", Gi, 77, 27, 1], [fi, "cs", Te, 76, 26, ae], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [fn, "cs", 2, 75, 25, lt], [1, "cs", 0, 76, 25, Ps], [1, "cs", 1, 77, 23, 1], [ja, "cs", Cs, 77, 16, ja], [X, "cs", 2, 76, or, X], [1, "cs", z, 76, 24, ja], [lt, "cs", lr, 77, 24, X], [1, "cs", 2, 77, 25, ja], [1, "cs", En, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [ae, "cs", 3, 76, 27, Ps], [ja, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [X, "cs", mj, 73, 26, fn], [X, "cs", z, 74, 27, X], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, lt], [X, "cs", 2, 66, rq, 1], [ja, "cs", lr, 66, 21, fn], [1, "cs", En, 67, na, ae], [1, "cs", 2, 67, 22, Ej], [1, "cs", Oq, 77, 36, 1], [Ps, "cs", 0, 77, 32, ae], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, fi], [Ej, "cs", z, 76, 36, ja], [ja, "cs", lr, 77, 35, ja], [1, "cs", 2, 77, 34, Ej], [fi, "cs", 2, 76, 35, ae], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [Ej, "cs", xn, 71, 32, ja], [1, "cs", Oq, 76, 34, lt], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, fi], [1, "cs", Vn, 76, 28, 1], [1, "cs", z, 75, 28, Ps], [1, "cs", 2, 76, 29, ae], [1, "cs", 2, 76, 33, Ej], [1, "cs", En, 70, 32, 1], [lt, "cs", 2, 69, 31, 1], [ja, "cs", 0, 68, 31, 1], [fn, "cs", 2, 67, 31, fi], [1, "cs", Gi, 67, 30, 1], [1, "cs", 2, 69, 32, ja], [Ej, "cs", fi, 67, 32, 1], [fi, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, X], [1, "cs", En, 66, 33, X], [ae, "cs", Te, 67, 33, 1], [ae, "cs", 2, 70, 33, ae], [1, "cs", Cs, 69, 33, 1], [1, "cs", lr, 68, 33, Ej], [1, "cs", 0, 68, 34, 1], [1, "cs", X, 66, 35, 1], [1, "cs", Vn, 67, 34, X], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, X], [1, "cs", Gi, 64, 36, 1], [1, "cs", 2, 65, 36, ae], [fn, "cs", mj, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, Ps], [1, "cs", lr, 68, 35, X], [1, "cs", lr, 76, Dr, 1], [ja, "cs", Vn, 77, 9, 1], [X, "cs", 2, 77, Ca, 1], [fn, "cs", 2, 77, 10, lt], [1, "cs", 2, 78, 8, fn], [ae, "cs", Te, 78, Zs, 1], [1, "cs", Gi, 78, 10, Ps], [1, "cs", Vn, 78, Pn, ja], [1, "cs", Gi, 78, Qr, ja], [Ps, "cs", En, 78, 13, 1], [fn, "cs", 0, 79, 9, 1], [1, "cs", Ps, 79, 11, 1], [fn, "cs", 3, 79, 8, 1], [Ej, "cs", 3, 79, _, 1], [fn, "cs", Sr, 79, bs, 1], [1, "cs", fa, 80, qs, 1], [ae, "cs", fi, 80, ar, X], [ae, "cs", mj, 80, 9, X], [fi, "cs", lr, 80, aa, fi], [ja, "cs", 2, 81, V, 1], [fi, "cs", Cs, 81, Dr, fi], [1, "cs", z, 81, 10, Ps], [1, "cs", 2, 78, he, Ps], [ae, "cs", Cs, 79, nr, Ps], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, bs, ae], [ae, "cs", 0, 79, he, 1], [1, "cs", Ea, 82, 9, ja], [1, "cs", 2, 82, Ca, 1], [ja, "cs", Cs, 82, Ki, X], [1, "cs", 2, 81, gr, 1], [Ps, "cs", oe, 80, xq, 1], [ja, "cs", X, 78, 30, 1], [lt, "cs", 1, 78, 34, 1], [ja, "cs", 1, 78, 27, Ps], [ae, "cs", nj, 78, 25, 1], [1, "cs", Oq, 79, 29, Ps], [fi, "cs", 0, 79, 32, X], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", En, 78, 36, lt], [X, "cs", Te, 79, 34, 1], [fi, "cs", Cs, 78, 33, 1], [Ej, "cs", 2, 79, 33, 1], [1, "cs", z, 78, 32, 1], [fi, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, X], [ja, "cs", mj, 79, 30, 1], [fi, "cs", En, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", mj, 79, 28, Ps], [fn, "cs", 2, 79, 27, 1], [1, "cs", Te, 78, 26, X], [Ej, "cs", 2, 79, 26, 1], [1, "cs", Te, 78, 24, 1], [ae, "cs", Gi, 80, 34, lt], [1, "cs", Gi, 80, 33, 1], [1, "cs", z, 80, 31, X], [lt, "cs", z, 80, 30, X], [fi, "cs", 2, 80, 32, fi], [1, "cs", Gi, 80, 29, 1], [1, "cs", Vn, 80, 28, 1], [1, "cs", Cs, 80, 27, 1], [1, "cs", 0, 81, 30, ae], [1, "cs", fi, 81, 32, 1], [lt, "cs", 1, 81, 28, Ej], [Ej, "cs", lr, 81, 29, 1], [1, "cs", Gi, 81, 31, 1], [1, "cs", Cs, 81, 33, 1], [1, "cs", En, 82, 30, Ej], [1, "cs", 2, 82, 31, ja], [fi, "cs", z, 82, 32, fi], [X, "cs", 0, 37, 36, 1], [1, "cs", Vn, 38, 36, Ps], [X, "cs", 2, 37, 35, 1], [ja, "cs", Cs, 36, 36, Ej], [lt, "cs", Cs, 34, 35, 1], [Ej, "cs", z, 35, 35, 1], [Ps, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, lt], [Ej, "cs", lt, 35, 34, 1], [1, "cs", mj, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", Gi, 36, 33, Ej], [1, "cs", Vn, 35, 33, fi], [lt, "cs", Gi, 34, 33, 1], [1, "cs", Te, 33, 33, 1], [fi, "cs", Cs, 31, 32, fn], [1, "cs", 1, 36, 32, X], [ae, "cs", Ej, 32, 32, 1], [fi, "cs", Cs, 35, 32, fi], [1, "cs", Cs, 33, 32, 1], [X, "cs", 2, 32, 33, 1], [Ps, "cs", 2, 33, 31, 1], [1, "cs", Cs, 34, 31, ja], [1, "cs", 2, 35, 31, ae], [ae, "cs", ke, 34, 32, ja], [1, "cs", 2, 35, 30, lt], [fn, "cs", 1, 39, 23, fi], [1, "cs", 3, 39, 22, X], [1, "cs", 3, 36, 24, 1], [lt, "cs", oe, 35, 24, 1], [ja, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, ae], [1, "cs", 2, 36, 20, lt], [lt, "cs", mj, 36, 21, 1], [Ps, "cs", Vn, 35, 22, fi], [1, "cs", mj, 35, ci, ae], [1, "cs", En, 34, Ms, 1], [X, "cs", 2, 33, 16, 1], [1, "cs", nj, 34, js, lt], [ja, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [Ej, "cs", er, 30, 13, fi], [1, "cs", 1, 33, 15, ja], [fi, "cs", Ps, 31, 13, Ej], [1, "cs", 2, 32, 14, Ps], [X, "cs", Js, 31, 8, fi], [lt, "cs", 2, 32, 8, Ej], [1, "cs", Te, 25, nr, 1], [fn, "cs", ke, 25, 12, fi], [ja, "cs", 2, 25, 11, 1], [fi, "cs", 3, 25, ue, 1], [1, "cs", Ka, 25, 9, Ej], [fi, "cs", mj, 25, 8, 1], [Ej, "cs", Vn, 26, 8, Ej], [1, "cs", Te, 27, Ca, ae], [X, "cs", Cs, 28, V, 1], [X, "cs", En, 29, 8, 1], [1, "cs", En, 30, An, ae], [Ej, "cs", z, 26, 9, 1], [Ej, "cs", 2, 27, Zs, 1], [X, "cs", En, 26, ar, Ps], [1, "cs", 1, 27, 10, 1], [Ps, "cs", 3, 28, Zi, fn], [1, "cs", 3, 25, 14, Ps], [1, "cs", 0, 25, Ss, 1], [1, "cs", Vn, 26, $n, Ej], [1, "cs", fa, 27, _r, 1], [1, "cs", 0, 28, 17, fn], [Ej, "cs", 1, 29, 18, 1], [1, "cs", Gi, 26, Ms, 1], [lt, "cs", lr, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [ae, "cs", 2, 26, 17, ae], [1, "cs", fn, 27, 18, 1], [1, "cs", Gi, 28, 18, 1], [1, "cs", 2, 30, Rq, 1], [Ps, "cs", mj, 29, 19, fn], [1, "cs", 2, 24, qj, X], [Ps, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", En, 24, 10, 1], [Ps, "cs", 2, 24, 11, 1], [ae, "cs", Gi, 24, pa, 1], [Ps, "cs", En, 24, is, 1], [1, "cs", fn, 23, as, lt], [ja, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, ae], [1, "cs", 1, 23, V, ja], [1, "cs", mj, 24, 8, Ps], [fn, "cs", 2, 24, wn, Ps], [ja, "cs", 2, 23, 9, 1], [1, "cs", Gi, 22, 9, X], [lt, "cs", 2, 22, 10, 1], [fn, "cs", Cs, 22, 11, lt], [ae, "cs", 2, 23, 11, 1], [lt, "cs", 2, 23, li, fi], [1, "cs", 2, 23, 13, Ps], [X, "cs", 2, 22, 13, Ps], [X, "cs", Cs, 21, 9, 1], [lt, "cs", Te, 21, qs, 1], [Ps, "cs", Te, 29, 25, 1], [1, "cs", 2, 25, 24, Ps], [lt, "cs", 2, 26, 25, Ej], [ja, "cs", 2, 27, 25, 1], [fn, "cs", 0, 28, 25, lt], [Ps, "cs", fn, 25, 23, ae], [1, "cs", 2, 26, 24, Ps], [Ej, "cs", 0, 24, 25, 1], [ja, "cs", 3, 23, 24, ja], [Ej, "cs", 3, 24, 24, 1], [fn, "cs", 3, 25, 25, ae], [fn, "cs", yr, 23, 25, lt], [1, "cs", 1, 22, 26, fn], [Ps, "cs", fn, 26, 26, 1], [1, "cs", 1, 29, 26, X], [1, "cs", Gi, 23, 26, 1], [fn, "cs", 2, 24, 26, fi], [1, "cs", 2, 25, 26, Ej], [1, "cs", Te, 27, 26, Ps], [Ps, "cs", 2, 28, 26, 1], [ae, "cs", Te, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [fn, "cs", lr, 28, 28, fn], [Ej, "cs", Ej, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [Ps, "cs", Vn, 27, 28, fi], [1, "cs", Gi, 27, 27, fn], [Ps, "cs", 2, 26, 28, Ej], [1, "cs", 2, 26, 27, fn], [ae, "cs", 2, 25, 28, X], [1, "cs", mj, 25, 27, 1], [1, "cs", 2, 23, 27, lt], [ja, "cs", Cs, 22, 27, 1], [lt, "cs", 2, 24, 27, lt], [fn, "cs", 0, 24, 28, ae], [1, "cs", 0, 25, 32, Ps], [lt, "cs", Ej, 24, 30, X], [fi, "cs", lr, 25, 31, 1], [fi, "cs", 2, 25, 30, ae], [ja, "cs", 2, 25, 29, 1], [Ps, "cs", Vn, 24, 29, 1], [Ps, "cs", Te, 23, 29, X], [1, "cs", lr, 26, 33, 1], [1, "cs", 0, 26, 34, lt], [1, "cs", 2, 27, 35, 1], [ja, "cs", Te, 22, 28, lt], [Ej, "cs", Vn, 23, 28, 1], [X, "cs", 2, 24, 31, ja], [Ps, "cs", Vn, 24, 32, ae], [ja, "cs", 2, 25, 33, 1], [1, "cs", z, 26, 35, 1], [1, "cs", En, 24, 33, X], [1, "cs", 2, 25, 34, 1], [Ej, "cs", ja, 22, 29, 1], [ja, "cs", Ej, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, ae], [1, "cs", Gi, 23, 34, Ej], [1, "cs", En, 23, 33, 1], [1, "cs", 0, 22, 33, X], [Ps, "cs", ae, 23, 32, ja], [fn, "cs", z, 22, 32, fn], [1, "cs", mj, 23, 31, ae], [1, "cs", Gi, 23, 30, 1], [1, "cs", mj, 22, 30, 1], [1, "cs", Gi, 22, 31, lt], [X, "cs", 1, 21, 31, lt], [X, "cs", Jj, 21, 29, lt], [ja, "cs", En, 21, 30, 1], [1, "cs", mj, 24, 36, 1], [Ej, "cs", z, 26, 36, 1], [ja, "cs", 2, 25, 36, Ps], [1, "cs", Te, 27, 36, 1], [1, "cs", 2, 28, 36, Ps], [ja, "d", Vn, 83, 65, fn], [1, "d", 2, Ms, 67, 1], [Ps, "g", Jj, 15, Nq, 1], [Ps, "s", 0, P, Iq, 1], [1, "s", Ka, 85, Pn, 1], [1, "f", 0, 41, 102, 1], [1, "f", xn, 42, 124, Ej], [1, "f", Ka, 64, 116, Ej], [ae, "f", nj, 74, 104, 1], [1, "f", xn, 70, 87, Ej], [1, "f", 0, 27, 96, 1], [X, "f", xn, 22, 79, Ej], [ae, "f", 0, 20, 117, lt], [fi, "f", Oq, 30, 137, Ps], [1, "f", 0, 59, 146, 1], [fi, "f", Ka, 52, 147, 1], [1, "f", 0, Xe, 149, fn], [ae, "f", 0, 36, 146, 1], [Ps, "f", ke, 62, 124, 1], [Ej, "g", 1, 34, 121, ae], [fn, "g", lt, 52, 116, ae], [1, "g", 1, 78, 116, 1], [ae, "g", X, 71, 129, 1], [ja, "s", 0, 53, wr, X], [Ps, "s", Js, 73, 111, 1], [1, "s", 0, 77, 126, lt], [1, "s", 0, 48, 90, 1], [1, "s", nj, Aq, 102, ja], [1, "s", 0, Bs, 127, 1], [1, "s", xn, 35, 159, 1], [ja, "s", Oq, 65, 54, Ej], [1, "s", 0, 44, 52, 1], [1, "s", Ka, 26, 51, 1], [ae, "f", 1, 56, 136, Ps], [1, "f", lt, 41, 133, 1], [1, "f", fn, 80, 120, 1], [1, "f", 1, 16, 117, Ps], [1, "f", 1, M, 99, Ej], [X, "f", 1, wj, 89, fi], [1, "f", fn, 90, 98, Ej], [X, "f", lt, 84, 95, 1], [ae, "f", ae, 16, 57, fi], [lt, "f", 1, 77, 53, fi], [fn, "d", 1, 48, 35, fi], [Ej, "de", 8, 33, 13, Ea], [fn, "de", qs, 30, 9, xn], [X, "de", 9, 32, 30, Ea], [1, "de", ue, 30, 25, xn], [1, "de", rs, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, Ea], [Ej, "de", Dr, 70, 22, Js], [ja, "de", 10, 70, _r, 0], [1, "de", ar, 75, 11, Ea], [X, "de", 8, 68, 10, Oq], [1, "de", q, 75, 30, xn], [fn, "de", Pn, 71, 33, Jj], [lt, "de", 11, 72, 25, 0], [Ej, "de", 11, 64, 25, Jj], [1, "de", 11, 52, 10, Js], [lt, "de", Xk, 31, b, 0], [fn, "de", 30, 29, ti, ke], [fn, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, Ka], [1, "de", 30, 30, 29, 0], [lt, "de", 30, 71, 29, Ea], [1, "de", 28, 68, 25, Js], [X, "de", 28, 75, $n, 0], [1, "de", 27, 67, Ja, Oq], [1, "de", 29, 72, 10, Ka], [lt, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [Ej, "fo", Ps, 39, 12, nj], [fi, "fo", 1, 34, 14, nj], [1, "fo", 1, 74, 28, 0], [X, "fo", 2, 74, 29, 0], [fn, "fo", En, 69, 30, ke], [1, "fo", 2, 77, 22, 0], [fn, "fo", Te, 74, 21, 0], [1, "fo", Vn, 76, an, 0], [1, "fo", fi, 78, 17, 0], [1, "fo", Ej, 28, Ar, 0], [1, "fo", 2, 27, 24, ke], [1, "fo", Gi, 24, 17, 0], [ae, "fo", En, 29, 21, 0], [1, "fo", fi, 27, 32, 0], [ae, "fo", 2, 30, 33, 0], [Ej, "fo", 1, 29, 28, 0], [1, "fo", z, 28, 31, 0], [1, "fo", 2, 20, 24, nj], [fn, "fo", mj, Ji, 26, Oq], [1, "fo", z, 23, 16, Jj], [1, "fo", Gi, aa, 25, 0], [ae, "de", 33, 29, 22, Ka], [fn, "de", 34, 32, 25, 0], [1, "de", 34, 30, P, 0], [Ps, "de", 33, 78, 18, nj], [1, "de", 33, 73, 35, 0], [ja, "de", 36, 72, 23, 0], [1, "de", 35, 25, kq, Jj], [1, "d", Ej, 83, 41, fn], [1, "d", 1, 17, 40, 1], [1, "cs", lr, 224, 104, ae], [1, "cs", xn, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", er, 216, 128, 1], [ja, "la", 0, 215, 126, 1], [Ps, "s", Js, 216, 130, lt], [1, "s", X, 217, 129, ja], [lt, "s", Jj, 218, 128, 1], [1, "s", fi, 217, 127, 1], [ja, "s", Ka, 217, 126, 1], [1, "s", 1, 217, 125, ae], [fn, "s", 0, 216, 124, ja], [1, "s", ja, 215, 124, 1], [X, "s", 0, 214, 124, fn], [1, "s", 1, 213, 125, X], [X, "s", 0, 213, 126, ae], [fi, "plm", 2, 217, 130, Ka], [1, "plm", z, 212, 125, xn], [1, "p", Oq, 214, 134, fi], [1, "s", ae, 211, 126, 1], [ja, "b", 1, 45, 277, Ka], [1, "b", 1, 50, 286, Ka], [1, "b", mj, 51, 284, 0], [1, "b", fn, 47, 287, nj], [1, "b", 0, 39, 285, 0], [1, "b", er, 40, 283, Ka], [Ps, "b", 0, 52, 283, nj], [fi, "b", 1, 51, 280, 0], [ja, "g", nj, 45, 269, 1], [ja, "p", xn, 55, 281, Ps], [1, "b", 1, 5, 172, xn], [1, "b", 2, ss, 172, ke], [lt, "t", aq, Xa, 171, 0], [1, "t", fi, qn, 170, nj], [Ej, "t", Ps, 5, 164, 0], [fi, "t", oe, hn, 164, nj], [ae, "b", xn, Qj, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, ke], [1, "t", Ha, qn, 166, xn], [1, "t", 4, 6, 167, nj], [1, "t", 2, 6, 168, nj], [lt, "t", 0, 6, 169, 0], [Ej, "t", _n, Ae, 170, nj], [1, "t", 0, 5, 167, nj], [Ps, "t", lr, 5, 169, Js], [1, "b", 0, 5, 168, 0], [Ps, "s", Ps, Oi, 153, ja], [lt, "s", 2, Pj, 151, 1], [X, "de", 5, $q, 152, 0], [1, "t", fi, aq, 154, 0], [1, "b", 0, Ae, 154, Ea], [X, "t", 2, hn, 155, ke], [ae, "b", Gi, ei, 156, 0], [1, "t", 2, br, 157, Oq], [ae, "t", Gs, 5, 155, 0], [1, "b", ke, 6, 157, ke], [X, "t", 1, qn, 156, Oq], [1, "t", br, O, 158, 0], [1, "b", 2, O, 159, 0], [X, "b", 0, 6, 162, Oq], [1, "t", 4, hn, 163, Ea], [1, "t", bq, 6, 161, 0], [1, "b", fi, kr, 160, 0], [1, "b", Te, Y, 163, 0], [1, "b", 2, Gj, 158, Js], [1, "b", 2, et, 161, 0], [X, "t", Ej, Gj, 162, nj], [X, "t", 1, Me, 160, 0], [X, "b", 1, 85, 176, ke], [lt, "b", lr, 83, 178, nj], [1, "s", ae, 82, 177, 1], [ae, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [fi, "t", on, 73, 174, 0], [lt, "t", 5, 72, 175, 0], [fi, "t", 5, 87, 173, Ea], [1, "de", 2, 76, 175, 0], [1, "de", yr, 77, 171, Jj], [X, "de", fa, 86, 177, Oq], [Ej, "de", 2, 71, 175, nj], [fn, "s", 1, 70, 174, Ps], [lt, "r", 48, 174, 0], [fi, "r", 49, 175, xn], [1, "r", 50, 175, 0], [1, "r", 51, 175, Oq], [ja, "r", 51, 174, Oq], [1, "r", 50, 174, ke], [1, "r", 49, 174, 0], [1, "r", 52, 175, xn], [1, "r", 52, 176, Ea], [Ej, "r", 51, 176, nj], [Ps, "r", 50, 176, 0], [1, "r", 49, 176, Ka], [1, "r", 48, 175, Oq], [1, "r", 47, 175, xn], [1, "r", 48, 176, Ea], [1, "r", 69, 163, Ea], [1, "r", 70, 163, 0], [1, "r", 71, 163, Ka], [fi, "r", 73, 163, 0], [1, "r", 72, 163, 0], [fi, "r", 73, 164, 0], [ae, "r", 72, 164, nj], [ja, "r", 71, 164, 0], [fi, "r", 70, 164, nj], [1, "r", 69, 164, xn], [ae, "r", 68, 164, 0], [Ej, "r", 68, 165, 0], [1, "r", 69, 165, 0], [fi, "r", 70, 165, Ea], [1, "r", 71, 165, Oq], [fn, "r", 72, 165, Ka], [Ej, "r", 74, 164, 0], [1, "r", 73, 165, 0], [lt, "r", 72, 166, Oq], [1, "r", 71, 166, 0], [1, "r", 70, 166, Js], [lt, "r", 74, 165, 0], [1, "r", 24, 164, 0], [Ej, "r", 25, 164, 0], [ja, "r", 27, 164, nj], [1, "r", 26, 164, 0], [fn, "r", 28, 165, Ea], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [Ej, "r", 25, 165, Ka], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, Oq], [Ps, "r", 21, 165, xn], [Ps, "r", 21, 166, Ka], [Ej, "r", 22, 166, 0], [X, "r", 23, 166, 0], [ae, "r", 24, 166, xn], [1, "r", 25, 166, Jj], [fi, "r", 26, 166, 0], [X, "r", 27, 166, 0], [lt, "r", 28, 166, 0], [Ej, "r", 28, 167, ke], [ja, "r", 26, 167, ke], [1, "r", 25, 167, 0], [fi, "r", 24, 167, 0], [ja, "r", 23, 167, 0], [fi, "r", 22, 167, xn], [X, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, Ea], [1, "r", 28, 168, Oq], [X, "r", 27, 168, Js], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [ja, "r", 24, 168, ke], [X, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, nj], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [ja, "r", 23, 169, Oq], [ja, "r", 22, 168, Jj], [fn, "r", 21, 167, 0], [fn, "s", fi, 52, 174, Ps], [Ps, "t", 3, 50, 177, 0], [Ps, "t", 4, 49, 177, xn], [1, "b", 0, 47, 174, 0], [1, "b", Jj, 69, 166, Js], [1, "t", 2, 68, 166, Jj], [1, "t", qn, 74, 163, Oq], [1, "t", X, 73, 162, nj], [1, "s", 0, 73, 166, ja], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, lt], [1, "p", 0, 61, 162, fi], [ja, "p", 0, 42, 170, ja], [1, "p", Ea, 20, 174, 1], [1, "p", 0, 16, 160, X], [1, "b", 1, 23, 164, Ka], [lt, "b", ae, 28, 169, 0], [1, "b", z, 29, 168, nj], [1, "b", 2, Wn, 170, 0], [lt, "t", 1, ge, 171, nj], [1, "t", br, 13, 175, Ea], [lt, "t", Y, D, 166, 0], [1, "t", 5, 26, 163, 0], [fi, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [ae, "b", Te, 30, 175, 0], [Ps, "t", 2, 24, 177, Ka], [1, "b", lt, 37, 174, Ka], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, ke], [lt, "t", cn, 38, 169, ke], [lt, "t", 4, 34, 173, 0], [1, "t", Y, 38, 175, 0], [ja, "b", z, 39, 173, ke], [Ps, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", En, 35, 176, 1], [1, "s", Ps, 41, 175, 1], [ae, "b", lr, 53, 176, Js], [ja, "t", et, 55, 173, 0], [1, "t", et, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", En, 54, 163, Ka], [1, "t", 3, 49, 165, Oq], [Ej, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, Oq], [1, "t", bq, 66, 162, nj], [1, "b", 1, 86, 161, Jj], [1, "b", 2, 81, 163, 0], [X, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, xn], [1, "t", 5, 88, 163, nj], [Ej, "t", ja, 84, 166, 0], [1, "t", 5, 72, 160, ke], [Ej, "t", 5, 70, 170, Ea], [1, "s", fn, 57, 162, 1], [X, "b", 1, 39, 161, 0], [fn, "b", Oq, 34, 164, xn], [fi, "b", Vn, 54, 164, 0], [1, "t", 1, 59, 169, 0], [fn, "t", 3, 60, 170, 0], [Ej, "t", 4, 63, 169, Oq], [fi, "t", sj, 63, 174, 0], [1, "t", lt, 62, 175, 0], [fi, "t", qn, 40, 162, 0], [1, "t", X, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, nj], [1, "s", 1, 63, 173, ae], [1, "s", Gi, 40, 165, Ps], [fn, "b", 0, 46, 169, Jj], [1, "de", 22, 74, 168, Ka], [X, "de", 22, 86, 168, Jj], [ae, "de", 22, 83, 175, xn], [1, "de", 22, 78, 175, ke], [fi, "de", 19, 72, 176, 0], [1, "de", D, 68, 168, 0], [1, "de", Oe, 65, 163, 0], [1, "de", Oe, 75, 162, nj], [ae, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, Js], [1, "de", 19, 87, 164, Ea], [1, "de", Oe, 61, 177, nj], [1, "de", Dn, 59, 172, 0], [1, "de", uq, 59, 167, Oq], [fn, "de", 19, 53, 165, 0], [Ps, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, Oq], [Ps, "de", 19, 48, 167, Js], [lt, "de", 19, 47, 170, 0], [ja, "de", Ja, 41, 163, 0], [1, "de", Dn, 37, 161, 0], [1, "de", 19, 36, 166, 0], [fi, "de", Hj, 36, 171, 0], [1, "de", 19, 34, 174, Jj], [fi, "de", 19, 40, 172, Oq], [1, "de", Dn, 38, 177, Jj], [1, "de", uq, 42, 176, 0], [1, "de", Hj, 53, 178, 0], [1, "de", 19, 53, 172, Jj], [1, "de", Oe, 64, 181, ke], [Ej, "de", Ja, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", Ja, 30, 170, 0], [Ej, "de", 19, js, 168, Jj], [1, "de", 19, 14, 173, 0], [ae, "de", Rq, de, 162, 0], [fi, "de", 19, G, 167, Ea], [1, "de", Ja, d, 161, xn], [1, "de", uq, 27, 162, Ka], [lt, "de", Ja, 83, 195, Jj], [fn, "de", lr, 85, 163, nj], [fi, "de", 2, 80, 164, 0], [lt, "de", 2, 84, 169, 0], [ja, "de", 2, 55, 165, xn], [1, "de", 3, 46, 163, 0], [1, "de", mj, 66, 169, Ea], [fn, "de", Ka, 63, 175, Ka], [fi, "de", 0, 34, 164, 0], [lt, "de", Oq, R, 160, 0], [1, "de", 2, 40, 160, 0], [fn, "de", En, 53, 160, Ea], [1, "de", Cs, os, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", Te, 23, 176, Oq], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, xn], [1, "de", 33, 85, 157, ke], [X, "de", 33, 29, 143, 0], [Ps, "de", 33, 62, 140, 0], [lt, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [Ej, "de", 33, 50, 134, Ea], [X, "de", 33, 79, 127, Ka], [fi, "de", 33, 89, 139, nj], [1, "b", 1, 44, 156, Ka], [1, "t", 2, 45, 157, 0], [fi, "b", Jj, 75, 156, 0], [Ej, "t", xa, 76, 157, 0], [1, "t", Gj, 62, 157, ke], [1, "t", Me, 79, 156, ke], [fi, "t", 5, 41, 156, 0], [fi, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", Nr, 21, 156, 0], [1, "t", _n, 56, 159, 0], [fn, "f", 1, 94, 153, X], [ja, "f", Te, 93, 153, 1], [ae, "f", Te, 99, 153, 1], [X, "f", Ps, 98, 153, 1], [fn, "f", nj, 97, 153, 1], [X, "f", fi, 96, 153, fn], [1, "s", ja, Mq, 149, fi], [Ej, "de", cn, Oi, 150, 0], [1, "b", xa, 43, 281, Ea], [1, "de", 50, 24, 39, Ea], [1, "de", 50, 21, 39, 0], [X, "de", 50, 22, 43, ke], [fi, "de", 50, Ss, 34, Jj], [1, "de", 50, kq, 26, Jj], [fn, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [fn, "de", 50, 62, 43, 0], [Ps, "de", 50, 77, 44, 0], [ae, "de", 50, 71, 41, 0], [Ps, "de", 50, 55, 39, Ka], [1, "de", 50, 22, 39, 0], [1, "de", 50, rq, 41, 0], [ja, "de", 50, 18, 21, 0], [fi, "de", 50, Ui, 21, nj], [1, "de", 50, P, 19, nj], [1, "de", 50, gq, 17, Ka], [ae, "de", 50, 18, _, 0], [1, "de", 50, kq, 9, 0], [ae, "de", 50, 52, 41, nj], [Ej, "de", 50, 82, 39, Oq], [1, "de", 50, 86, 38, Ka], [fn, "de", 50, 84, 31, Jj], [fi, "de", 50, 86, 30, 0], [Ps, "de", 50, 84, 26, Jj], [lt, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, Jj], [1, "de", 50, 29, 42, 0], [1, "de", Gq, 74, 37, 0], [ae, "de", 9, 76, 22, 0], [Ej, "de", ar, 79, 24, ke], [1, "de", 11, 77, 17, 0], [lt, "de", 36, 81, 25, Jj], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [lt, "de", 28, 27, 31, Js], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, Js], [fi, "de", 51, 24, 155, ke], [X, "de", 51, 7, 154, 0], [1, "de", 51, gr, 154, 0], [X, "de", 51, Ta, 156, nj], [1, "de", 51, 16, 154, Ea], [1, "de", 51, ur, 154, 0], [Ps, "de", 51, 23, 154, 0], [Ej, "de", 51, na, 157, 0], [fn, "de", 51, 31, 154, 0], [ja, "de", 51, 32, 157, Ka], [1, "de", 51, 86, 154, 0], [Ps, "de", 51, 88, 156, ke], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, Ea], [1, "de", 51, 77, 154, Js], [ae, "de", 51, 74, 154, Js], [ja, "de", 51, 71, 154, 0], [fn, "de", 51, 67, 154, ke], [Ps, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [fn, "de", 51, 65, 154, nj], [1, "de", 51, 68, 156, 0], [fn, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [Ps, "de", 51, 54, 154, Ea], [fn, "de", 51, 52, 154, Ka], [1, "de", 51, 55, 155, Ea], [X, "de", 51, 54, 157, ke], [fi, "de", 51, 49, 154, Jj], [X, "de", 51, 46, 154, Js], [lt, "de", 51, 44, 154, Js], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, Jj], [fn, "de", 51, 38, 154, 0], [ae, "de", 51, 39, 156, ke], [1, "de", 51, 34, 154, Ea], [1, "de", br, Ar, 142, 0], [ae, "de", 5, 37, 147, Ka], [ja, "de", Mq, 53, 147, 0], [1, "de", Fa, 69, 150, Ea], [1, "de", Nr, 94, 148, 0], [Ej, "de", 4, 66, 147, Jj], [1, "de", 4, ue, 145, Ka], [1, "de", 4, 28, 137, Js], [X, "de", 4, Ui, 137, 0], [lt, "de", 4, 48, 134, Ea], [fn, "de", aq, 67, 135, Ka], [1, "de", 34, 84, 155, xn], [fi, "de", 35, 70, 156, 0], [ae, "de", 35, 51, 156, 0], [lt, "de", 35, 56, 157, Ka], [1, "de", 35, 65, 159, 0], [X, "de", 35, 23, 156, Oq], [1, "de", 35, Ss, 155, 0], [ae, "de", 35, 8, 155, Js], [1, "de", 33, is, 155, Jj], [1, "de", 33, 33, 158, Oq], [1, "de", 36, 78, 155, Js], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, Oq], [1, "fo", lt, 80, 24, ke], [1, "fo", z, 67, 36, 0], [fn, "fo", 2, 45, 36, 0], [Ps, "fo", 2, 53, 34, 0], [fi, "fo", 1, 51, 35, 0], [ja, "fo", 1, 58, 35, nj], [ja, "fo", 1, 33, 35, 0], [fn, "fo", 1, 31, 33, 0], [ae, "fo", 2, 29, 36, xn], [fi, "fo", Te, 56, 36, 0], [1, "fo", 2, 60, 37, ke], [1, "fo", 2, 45, 32, Jj], [1, "fo", 2, 22, 25, Oq], [fn, "fo", mj, 21, 35, Ea], [lt, "de", 52, 90, 208, nj], [ae, "de", vr, 94, 250, 0], [1, "de", gq, 95, 253, Js], [fi, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [Ps, "cs", 2, 138, br, Ej], [1, "cs", 2, 138, 6, ja], [1, "cs", 2, 139, 6, 1], [ae, "cs", lr, 141, 6, ja], [1, "cs", Te, 140, 6, Ps], [1, "la", 3, 143, 7, 1], [Ej, "la", 3, 139, 7, 1], [1, "cs", 0, 137, I, fi], [fn, "cs", 1, 138, An, Ej], [lt, "cs", 2, 137, ei, 1], [fn, "cs", 2, 137, 8, ja], [X, "cs", 2, 136, 7, 1], [1, "cs", Vn, 138, 9, 1], [1, "cs", Sn, 139, 9, ja], [1, "cs", er, 136, 8, 1], [Ej, "cs", er, 137, 9, Ej], [1, "de", 53, 92, 165, xn], [1, "de", 53, 92, 180, 0], [fi, "de", 53, 92, 188, xn], [1, "de", 54, 92, 153, 0], [X, "de", 54, 91, 153, Oq], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, Js], [lt, "de", 54, 87, 153, Ea], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, Ka], [ae, "de", 54, 83, 153, Oq], [lt, "de", 54, 82, 153, Oq], [fi, "de", 54, 81, 153, 0], [ae, "de", 54, 80, 153, Oq], [1, "de", 54, 79, 153, 0], [lt, "de", 54, 78, 153, nj], [ae, "de", 54, 77, 153, 0], [Ps, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [lt, "de", 54, 73, 153, Ea], [fi, "de", 54, 72, 153, Js], [1, "de", 54, 70, 153, 0], [ja, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [lt, "de", 54, 66, 153, ke], [1, "de", 54, 65, 153, Oq], [1, "de", 54, 64, 153, Jj], [1, "de", 54, 63, 153, 0], [lt, "de", 54, 61, 153, ke], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [lt, "de", 54, 59, 153, Ka], [ae, "de", 54, 57, 153, Ka], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [lt, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, ke], [1, "de", 54, 53, 153, 0], [ae, "de", 54, 52, 153, Oq], [fi, "de", 54, 51, 153, Oq], [X, "de", 54, 50, 153, Js], [1, "de", 54, 49, 153, Jj], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, Ka], [Ps, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [lt, "de", 54, 44, 153, xn], [lt, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [X, "de", 54, 41, 153, 0], [ja, "de", 54, 40, 153, 0], [X, "de", 54, 39, 153, Ka], [ja, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [Ej, "de", 54, 36, 153, 0], [Ps, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, Ea], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [lt, "de", 54, 31, 153, Ka], [ae, "de", 54, 30, 153, nj], [ae, "de", 54, 29, 153, Jj], [1, "de", 54, 28, 153, 0], [fi, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, Ka], [Ps, "de", 54, 24, 153, Ka], [Ej, "de", 54, 23, 153, 0], [ja, "de", 54, 22, 153, nj], [1, "de", 54, 21, 153, nj], [1, "de", 54, Jq, 153, Jj], [1, "de", 54, 19, 153, Oq], [1, "de", 54, $a, 153, Ka], [1, "de", 54, 17, 153, Js], [1, "de", 54, rn, 153, 0], [fi, "de", 54, 15, 153, Js], [1, "de", 54, 14, 153, Js], [Ps, "de", 54, 13, 153, 0], [fi, "de", 54, en, 153, Jj], [1, "de", 54, 11, 153, 0], [fi, "de", 54, 10, 153, xn], [X, "de", 54, 8, 153, Oq], [fn, "de", 54, Zs, 153, 0], [Ej, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, ue, 0], [1, "de", 55, 83, w, 0], [Ps, "de", 55, 83, en, 0], [1, "de", 55, 83, Iq, nj], [Ej, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, Ea], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, Qs, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, R, 0], [1, "de", 55, 83, 20, Jj], [Ps, "de", 55, 83, 21, Oq], [1, "de", 55, 83, 22, nj], [1, "de", 55, 83, 23, ke], [1, "de", 55, 83, 24, 0], [ja, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, Oq], [fi, "de", 55, 83, 27, xn], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, ke], [X, "de", 55, 83, 30, nj], [1, "de", 55, 83, 31, Ka], [1, "de", 55, 83, 32, 0], [fi, "de", 55, 83, 33, ke], [fn, "de", 55, 83, 34, ke], [1, "de", 55, 83, 36, 0], [fn, "de", 55, 83, 35, 0], [Ps, "de", 55, 83, 37, Jj], [1, "de", 55, 83, 38, Js], [1, "de", 55, 81, 38, 0], [fn, "de", 55, 82, 38, Js], [1, "de", 55, 80, 38, nj], [1, "de", 55, 79, 38, 0], [Ej, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, Js], [X, "de", 55, 76, 38, ke], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [X, "de", 55, 74, 38, 0], [lt, "de", 55, 72, 38, Jj], [lt, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, nj], [X, "de", 55, 69, 38, Oq], [fi, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [X, "de", 55, 65, 38, 0], [Ej, "de", 55, 64, 38, 0], [ja, "de", 55, 63, 38, Jj], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, Jj], [1, "de", 55, 61, 38, Ka], [ja, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [Ps, "de", 55, 58, 38, 0], [X, "de", 55, 56, 38, Oq], [X, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [fi, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [fn, "de", 55, 51, 38, Oq], [1, "de", 55, 49, 38, Js], [ae, "de", 55, 50, 38, Jj], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [X, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, Jj], [1, "de", 55, 44, 38, 0], [ae, "de", 55, 43, 38, 0], [Ps, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [ae, "de", 55, 40, 38, Js], [ja, "de", 55, 39, 38, Oq], [Ej, "de", 55, 38, 38, ke], [X, "de", 55, 37, 38, Jj], [1, "de", 55, 36, 38, nj], [ja, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, Ea], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [fn, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [X, "de", 55, 29, 38, 0], [fi, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, Ea], [fi, "de", 55, 26, 38, 0], [Ps, "de", 55, 25, 38, ke], [1, "de", 55, 24, 38, 0], [X, "de", 55, 23, 38, Jj], [1, "de", 55, 21, 38, 0], [Ps, "de", 55, 22, 38, Ea], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, Ea], [ja, "de", 55, Dn, 37, nj], [1, "de", 55, 19, 36, xn], [X, "de", 55, 19, 35, ke], [X, "de", 55, Aq, 34, Jj], [X, "de", 55, 19, 33, Ea], [Ej, "de", 55, Oe, 32, Jj], [1, "de", 55, Ja, 31, nj], [1, "de", 55, 19, 30, ke], [1, "de", 55, 19, 28, Ka], [1, "de", 55, Ja, 29, 0], [ja, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, ke], [ae, "de", 55, ft, 25, Oq], [1, "de", 55, 19, 24, 0], [X, "de", 55, D, 23, Js], [1, "de", 55, 19, 22, 0], [1, "de", 55, Aq, 21, 0], [lt, "de", 55, 19, 20, 0], [1, "de", 55, Oe, Bs, Ea], [1, "de", 55, Rq, Aq, 0], [1, "de", 55, 19, Uj, ke], [1, "de", 55, Dn, 17, 0], [ja, "de", 55, 19, 15, Ka], [1, "de", 55, Ja, os, Oq], [1, "de", 55, Aq, L, 0], [1, "de", 55, Rq, 12, Ka], [1, "de", 55, 19, ta, Ka], [1, "de", 55, 19, 10, 0], [fn, "de", 55, Rq, 9, xn], [ae, "de", 55, Ar, 8, 0], [ja, "de", 55, 84, 35, Js], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, Jj], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, Ne, ke], [1, "de", 55, 84, 16, 0], [ja, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, Dr, Js], [X, "de", 50, 85, Xk, 0], [1, "de", 55, 81, 39, Oq], [lt, "de", 50, 83, 40, 0], [lt, "de", 55, 72, 39, Js], [1, "de", 55, 74, 39, 0], [Ej, "de", 55, 66, 39, 0], [fn, "de", 55, 65, 39, 0], [Ps, "de", 50, 67, 41, ke], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, ke], [fi, "de", 55, 50, 39, 0], [lt, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, Js], [Ps, "de", 55, 42, 39, Js], [lt, "de", 50, 43, 39, Oq], [lt, "de", 50, 41, 39, xn], [1, "de", 50, 37, 39, 0], [fn, "de", 55, 36, 39, 0], [Ps, "de", 55, 32, 39, 0], [Ps, "de", 50, 31, 39, 0], [fi, "de", 55, 23, 39, Ka], [1, "de", 55, R, 37, ke], [1, "de", 50, 18, 36, Ea], [1, "de", 55, Bs, 35, 0], [fi, "de", 50, 18, 34, 0], [ae, "de", 55, 18, 31, 0], [fn, "de", 50, $a, 30, 0], [X, "de", 55, na, 25, ke], [ja, "de", 50, 18, 24, xn], [1, "de", 55, 18, 20, Jj], [ja, "de", 55, 18, Zn, 0], [1, "de", 50, kq, Ui, xn], [1, "de", 55, 18, 8, ke], [1, "de", 54, 90, 154, Ea], [fn, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [fn, "de", 54, 81, 154, 0], [Ej, "de", 54, 76, 154, 0], [lt, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, xn], [Ps, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, Ea], [1, "de", 54, 42, 154, Jj], [1, "de", 54, 37, 154, Jj], [ae, "de", 54, 30, 154, 0], [ae, "de", 54, 25, 154, 0], [ae, "de", 54, K, 154, xn], [1, "de", 54, as, 154, 0], [1, "de", 54, q, 154, 0], [Ej, "de", 55, 20, G, 0], [1, "de", 53, 93, 154, Ka], [1, "de", 53, 93, 156, ke], [X, "de", 53, 93, 158, Ka], [1, "de", 52, 91, 157, nj], [1, "de", 53, 93, 159, nj], [X, "de", 53, 93, 161, Oq], [1, "de", 53, 93, 162, Ea], [1, "de", 53, 93, 163, Jj], [1, "de", 53, 93, 164, xn], [1, "de", 53, 93, 165, ke], [fi, "de", 53, 93, 166, 0], [ja, "de", 53, 93, 167, ke], [ja, "de", 52, 91, 167, Jj], [Ps, "de", 53, 93, 169, Jj], [fi, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, xn], [1, "de", 53, 93, 171, Oq], [Ps, "de", 53, 93, 173, nj], [fi, "de", 53, 93, 176, ke], [1, "de", 53, 93, 175, ke], [X, "de", 53, 92, 169, xn], [ae, "de", 53, 93, 178, Ea], [1, "de", 53, 93, 179, nj], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [ae, "de", 53, 93, 184, xn], [Ps, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, Jj], [X, "de", 53, 93, 187, ke], [fi, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, nj], [1, "de", 53, 93, 190, Jj], [ja, "de", 53, 93, 192, 0], [X, "de", 53, 93, 195, Ka], [X, "de", 53, 93, 194, Oq], [Ps, "de", 52, 91, 196, nj], [1, "de", 53, 93, 197, 0], [Ej, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, xn], [1, "de", 53, 93, 202, ke], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, xn], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, nj], [fi, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, Ka], [1, "de", 53, 93, 212, xn], [1, "de", 52, 91, 204, 0], [fi, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, Ea], [1, "de", 53, 93, 215, 0], [Ej, "de", 53, 93, 216, Oq], [Ps, "de", 53, 93, 217, Js], [fn, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, Ka], [Ps, "de", 52, 92, 213, Oq], [1, "de", 52, 92, 206, Ka], [Ej, "de", 52, 92, 202, xn], [1, "de", 53, 92, 201, ke], [Ps, "de", 52, 92, 194, ke], [1, "de", 52, 92, 178, 0], [X, "de", 52, 92, 171, 0], [Ej, "de", 53, 93, 221, xn], [fn, "de", 53, 93, 222, Ea], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, Oq], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, Oq], [lt, "de", 52, 92, 217, Ea], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [Ej, "de", 52, 92, 225, Oq], [fn, "de", 52, 93, 226, Jj], [fi, "de", 52, 93, 224, ke], [1, "de", 52, 93, 208, 0], [ja, "de", 52, 93, 211, 0], [fi, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, Js], [Ps, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, Ka], [1, "de", 52, 93, 182, Jj], [lt, "de", 52, 93, 185, xn], [fi, "de", 52, 93, 172, Js], [1, "de", 52, 93, 174, Ka], [fi, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, Ea], [1, "de", 52, 93, 160, 0], [ae, "de", 52, 92, 162, 0], [ae, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, Js], [Ps, "de", 53, 93, 232, ke], [lt, "de", 53, 93, 234, ke], [1, "de", 52, 93, 230, 0], [Ps, "de", 52, 92, 228, Js], [1, "de", 53, 93, 235, Js], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, Ea], [1, "de", 53, 93, 239, nj], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, Ea], [fn, "de", 53, 93, 241, Jj], [fi, "de", 52, 93, 242, 0], [X, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [ja, "de", 53, 93, 246, Js], [ae, "de", 53, 93, 245, nj], [1, "de", 52, 93, 247, 0], [fn, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [fn, "de", 52, 93, 249, Oq], [X, "de", 53, 93, 250, Jj], [ae, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [fn, "de", 52, 93, y, xn], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, x, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [lt, "de", 52, 93, 260, ke], [1, "de", 53, 93, 263, Js], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, Ka], [ja, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, Js], [1, "de", 53, 93, 276, 0], [ae, "de", 53, 93, 277, Oq], [Ps, "de", 52, 93, 278, Ea], [lt, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, ke], [1, "de", 52, 93, 283, ke], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, Js], [1, "de", 53, 93, 286, nj], [ae, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [ja, "de", 53, 93, 289, Oq], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [ja, "de", 53, 93, 292, 0], [Ps, "de", 52, 93, 293, Ea], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [X, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [fi, "de", 53, 93, 298, Ea], [1, "de", 52, 93, 299, 0], [ae, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, Ka], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, ke], [1, "r", 93, 262, 0], [lt, "de", 52, 93, 261, ke], [lt, "cs", 0, 223, 104, 1], [lt, "cs", 2, 223, 105, 1], [fn, "cs", mj, 223, 102, X], [1, "cs", lr, 223, 103, 1], [1, "la", Sn, 141, 8, Ej], [Ps, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [fn, "de", 4, 81, 149, nj], [X, "f", Ea, 83, 148, 1], [ja, "f", Ej, 82, 149, lt], [1, "de", 34, 81, 156, 0], [Ej, "de", 51, wj, 9, 0], [Ps, "de", 54, _r, Zs, 0], [fi, "de", 54, Ss, Dr, Jj], [fn, "cs", 3, 223, 106, X], [Ej, "p", Js, 119, 279, lt], [1, "p", Jj, 109, 242, 1], [fn, "cs", 1, 29, 9, ja], [1, "cs", Vn, 30, 9, 1], [ja, "cs", Gi, 31, wn, ae], [fn, "cs", lr, 32, Dr, lt], [1, "cs", Te, 33, 9, 1], [1, "cs", 2, 69, Vq, 1], [1, "cs", z, 71, Zs, Ps], [1, "cs", En, 70, Dr, Ej], [1, "cs", 1, 72, Gq, 1], [X, "cs", Te, 73, G, 1], [1, "de", Ki, 31, 10, ke], [ja, "de", _, 29, 10, Jj], [1, "de", rs, 44, _, nj], [1, "de", Gs, 87, 10, Jj], [Ps, "de", Jn, 86, rs, 0], [Ps, "de", 5, 87, 9, ke], [X, "de", 5, M, 10, 0], [1, "de", Gs, 14, 11, 0], [ae, "de", cn, pq, 10, Ea], [1, "de", Gs, 17, as, ke], [1, "cs", 2, 146, 9, ja], [1, "cs", Vn, 148, G, 1], [1, "cs", z, 150, 9, 1], [Ej, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, ja], [X, "cs", fi, 149, Zi, X], [1, "cs", fn, 154, 9, 1], [ja, "cs", er, 147, 9, fi], [1, "cs", 3, 151, 9, 1], [fn, "cs", er, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [fi, "cs", 3, 157, 9, 1], [1, "cs", mq, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [lt, "cs", 3, 160, 9, 1], [1, "cs", Ea, 161, 9, X], [Ps, "cs", mj, 162, 9, 1], [X, "cs", 2, 163, F, 1], [X, "cs", 1, 164, wn, X], [1, "cs", En, 165, Zs, lt], [ae, "cs", Sr, 166, 9, Ej], [fn, "cs", 3, 168, Gq, fn], [1, "cs", mq, 170, F, fn], [1, "cs", lt, 169, 9, fn], [1, "cs", lr, 167, Dr, X], [1, "cs", z, 171, Vq, ja], [1, "cs", 2, 173, 9, X], [Ps, "cs", mj, 172, 9, X], [1, "cs", Gi, 174, G, 1], [Ps, "cs", Ej, 175, 9, 1], [1, "cs", yr, 176, Vq, 1], [Ps, "cs", 3, 178, F, 1], [1, "cs", on, 179, G, lt], [Ps, "cs", ke, 180, Zi, 1], [fi, "cs", Vn, 177, 9, ae], [1, "cs", Cs, 182, 9, 1], [1, "cs", 2, 181, 9, X], [lt, "cs", En, 183, 9, fn], [1, "cs", 2, 184, 9, 1], [fi, "cs", 2, 185, 9, 1], [Ps, "cs", 2, 186, Vq, 1], [1, "cs", lt, 187, Gq, lt], [1, "cs", mj, 188, Zi, 1], [1, "cs", yr, 189, 9, 1], [1, "cs", xa, 190, Gq, 1], [fn, "cs", 3, 191, 9, 1], [Ps, "cs", 2, 192, 9, 1], [ae, "cs", 0, 193, wn, 1], [1, "cs", 2, 194, 9, ae], [fi, "cs", 2, 196, 9, ja], [1, "cs", 2, 198, 9, X], [fi, "cs", 2, 200, Vq, Ej], [ja, "cs", yr, 195, 9, 1], [lt, "cs", Qe, 197, 9, lt], [Ps, "cs", Ie, 199, G, 1], [fn, "cs", 0, 201, 9, 1], [Ej, "cs", 2, 202, Dr, 1], [1, "cs", mj, 203, G, 1], [ja, "cs", 3, 208, 9, 1], [X, "cs", 3, 207, G, Ej], [1, "cs", oe, 206, 9, 1], [1, "cs", on, 205, Gq, 1], [ae, "cs", Sr, 204, Dr, 1], [1, "cs", yr, 214, Vq, ae], [Ej, "cs", Sn, 215, Zi, fi], [1, "cs", er, 216, 9, 1], [X, "cs", Sr, 217, 9, 1], [Ps, "cs", on, 218, Zs, Ps], [lt, "b", 0, aq, 159, 0], [Ej, "b", 0, Gj, 171, 0], [2, "isl", 1, 122, 63, Js], [2, "isl", 2, 119, 277, Ea], [Gi, "isl", En, 109, 244, Js], [2, "isl", Gi, 114, 205, 0], [Te, "isl", fn, 120, 150, Ka], [2, "isl", 2, 154, 129, ke], [mj, "isl", 0, 184, 158, nj], [2, "isl", fi, 208, 128, xn], [z, "isl", 1, 215, 132, 0], [2, "isl", fn, 214, 128, 0], [lr, "isl", fn, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, Ar, 1], [fi, "la", Ea, 212, 18, 1], [1, "la", Ha, 214, 18, lt], [1, "la", Gs, 216, 19, fi], [1, "la", 4, 211, Jq, 1], [1, "la", Ie, 210, 19, 1], [Ps, "la", 3, 215, 21, Ej], [Ps, "la", X, 214, rq, lt], [Ps, "la", 3, 214, 22, 1], [Ej, "la", mq, 214, 24, ae], [1, "la", 4, 214, 26, 1], [Ej, "la", 4, 213, 27, Ej], [1, "la", Ps, 212, 28, fn], [lt, "la", lr, 212, 29, Ps], [1, "la", br, 212, 30, X], [ja, "la", 4, 208, 19, ja], [X, "la", mn, 207, Ja, 1], [ae, "la", lt, 206, 19, ae], [1, "la", ae, 205, 19, 1], [ae, "la", Cs, 204, 19, 1], [ae, "la", 5, 203, 19, X], [1, "la", fa, 210, 17, 1]];
  var Ur = 0;
  var rt = {
    Zi: ["#133A2B", "#042b30"],
    $i: [lj[b], "#136167"],
    it: ["#4EB687", "#187484"],
    tt: ["#664516", "#13474C"],
    et: ["#FCEFBB", "#0F4D48"],
    nt: ["#C1AA7E", "#0F423D"],
    st: ["#594837", "#163A3A"],
    rt: ["#A5D6D6", "#539CA0"],
    ot: ["#0B6A84", "#09373F"],
    ht: ["#2A8B9B", "#0F464C"],
    gt: ["#A9D6D3", "#115E60"],
    ct: ["#ECF7F9", "#539CA0"],
    dt: ["#FFF", lj[Gi]],
    ut: ["#FFF", lj[Gi]],
    ft: ["#1C9BA4", "#00272F"],
    lt: ["#2D2017", "#031C1E"],
    bt: Ea,
    vt: 1,
    yt: 2300,
    kt: 2290,
    At: 34,
    wt: 5,
    Mt: 68,
    Bt: 34,
    Dt: br,
    Et: Ej,
    Ct: 0.6,
    zt: 0.25,
    xt: 50,
    Qt: 10,
    St: 75,
    It: 20,
    _t: 5,
    Ft: Ur++,
    Pt: Ur++,
    Tt: Ur++,
    jt: Ur++,
    Rt: Ur++,
    Lt: Ur++,
    Gt: Ur++,
    qt: Ur++,
    Wt: Ur++,
    Nt: Ur++,
    Ht: Ur++,
    Ut: Ur++,
    Ot: Ur++,
    Yt: Ur++,
    Jt: Ur++,
    Kt: Ur++,
    Xt: Ur++,
    Vt: Ur++,
    Zt: Ur++,
    $t: Ur++,
    ie: Ur++,
    te: Ur++,
    ee: Ur++,
    ne: Ur++,
    ae: Ur++,
    se: Ur++,
    re: Ur++,
    oe: Ur++,
    he: Ur++,
    ge: Ur++,
    ce: Ur++,
    de: Ur++,
    me: Ur++,
    ue: Ur++,
    fe: Ur++,
    pe: Ur++,
    le: Ur++,
    be: Ur++,
    ve: Ur++,
    ye: Ur++,
    ke: Ur++,
    Ae: Ur++,
    we: Ur++,
    Me: Ur++,
    Be: Ur++,
    De: Ur++,
    Ee: Ur++,
    Ce: Ur++,
    ze: Ur++,
    xe: Ur++,
    Qe: Ur++,
    Se: Ur++,
    Ie: Ur++,
    _e: Ur++,
    Fe: Ur++,
    Pe: Ur++,
    Te: Ur++,
    je: Ur++,
    Re: Ur++,
    Le: Ur++,
    Ge: Ur++,
    qe: Ur++,
    We: Ur++,
    Ne: Ur++,
    He: Ur++,
    Ue: Ur++,
    Oe: Ur++,
    Ye: Ur++,
    Je: Ur++,
    Ke: Ur++,
    Xe: Ur++,
    Ve: Ur++,
    Ze: Ur++,
    $e: Ur++,
    tn: Ur++,
    en: Ur++,
    nn: Ur++,
    an: Ur++,
    sn: Ur++,
    rn: Ur++,
    hn: Ur++,
    gn: Ur++,
    cn: Ur++,
    dn: Ur++,
    mn: Ur++,
    un: Ur++,
    fn: Ur++,
    pn: Ur++,
    ln: Ur++,
    bn: Ur++,
    vn: Ur++,
    yn: Ur++,
    kn: Ur++,
    An: Ur++,
    wn: Ur++,
    Mn: Ur++,
    Bn: Ur++,
    Dn: Ur++,
    En: Ur++,
    Cn: Ur++,
    zn: Ur++,
    xn: Ur++,
    Qn: Ur++,
    Sn: Ur++,
    In: Ur++,
    _n: Ur++,
    Fn: Ur++,
    Pn: Ur++,
    Tn: Ur++,
    jn: Ur++,
    Rn: Ur++,
    Ln: Ur++,
    Gn: Ur++,
    qn: Ur++,
    Wn: Ur++,
    Nn: Ur++,
    Hn: Ur++,
    Un: Ur++,
    On: Ur++,
    Yn: Ur++,
    Jn: Ur++,
    Kn: Ur++,
    Xn: Ur++,
    Vn: Ur++,
    Zn: Ur++,
    $n: Ur++,
    ia: Ur++,
    ta: Ur++,
    ea: Ur++,
    na: Ur++,
    aa: Ur++,
    sa: Ur++,
    ra: Ur++,
    oa: Ur++,
    ha: Ur++,
    ga: Ur++,
    ca: Ur++,
    da: Ur++,
    ma: Ur++,
    ua: Ur++,
    fa: Ur++,
    pa: Ur++,
    la: Ur++,
    ba: Ur++,
    va: Ur++,
    ya: Ur++,
    ka: Ur++,
    Aa: Ur++,
    wa: Ur++,
    Ma: Ur++,
    Ba: Ur++,
    Da: Ur++,
    Ea: Ur++,
    Ca: Ur++,
    za: Ur++,
    xa: Ur++,
    Qa: Ur++,
    Sa: Ur++,
    Ia: Ur++,
    _a: Ur++,
    Fa: Ur++,
    Pa: Ur++,
    Ta: Ur++,
    ja: Ur++,
    Ra: Ur++,
    La: Ur++,
    Ga: Ur++,
    qa: Ur++,
    Wa: Ur++,
    Na: Ur++,
    Ha: Ur++,
    Ua: Ur++,
    Oa: Ur++,
    Ya: Ur++,
    Ja: Ur++,
    Ka: Ur++,
    Xa: Ur++,
    Va: Ur++,
    Za: Ur++,
    $a: Ur++,
    ts: Ur++,
    es: Ur++,
    ns: Ur++,
    ss: Ur++,
    rs: Ur++,
    os: Ur++,
    hs: Ur++,
    gs: Ur++,
    cs: Ur++,
    ds: Ur++,
    us: Ur++,
    fs: Ur++,
    ps: Ur++,
    ls: Ur++,
    bs: Ur++,
    vs: Ur++,
    ys: Ur++,
    ks: Ur++,
    As: Ur++,
    ws: Ur++,
    Ms: Ur++,
    Bs: Ur++,
    Ds: Ur++,
    Es: Ur++,
    Cs: Ur++,
    zs: Ur++,
    xs: Ur++,
    Qs: Ur++,
    Ss: Ur++,
    Is: Ur++,
    _s: Ur++,
    Fs: Ur++,
    Ps: Ur++,
    Ts: Ur++,
    js: Ur++,
    Rs: Ur++,
    Ls: Ur++,
    Gs: Ur++,
    qs: Ur++,
    Ws: Ur++,
    Ns: Ur++,
    Hs: Ur++,
    Us: Ur++,
    Os: Ur++,
    Ys: Ur++,
    Js: Ur++,
    Ks: Ur++,
    Xs: Ur++,
    Vs: Ur++,
    Zs: Ur++,
    $s: Ur++,
    ir: Ur++,
    tr: Ur++,
    er: Ur++,
    nr: Ur++,
    ar: Ur++,
    sr: Ur++,
    rr: Ur++,
    hr: Ur++,
    gr: Ur++,
    cr: Ur++,
    dr: Ur++,
    mr: Ur++,
    ur: Ur++,
    pr: Ur++,
    lr: Ur++,
    br: Ur++,
    vr: Ur++,
    yr: Ur++,
    kr: Ur++,
    Ar: Ur++,
    wr: Ur++,
    Mr: Ur++,
    Br: Ur++,
    Dr: Ur++,
    Er: Ur++,
    Cr: Ur++,
    zr: Ur++,
    Qr: Ur++,
    Sr: Ur++,
    Ir: Ur++,
    _r: Ur++,
    Fr: Ur++,
    Pr: Ur++,
    Tr: Ur++,
    jr: Ur++,
    Rr: Ur++,
    Lr: Ur++,
    Gr: Ur++,
    qr: Ur++,
    Wr: Ur++,
    Nr: Ur++,
    Hr: Ur++,
    Ur: Ur++,
    Or: Ur++,
    Yr: Ur++,
    Jr: Ur++,
    Kr: Ur++,
    Xr: Ur++,
    Vr: Ur++,
    Zr: Ur++,
    $r: Ur++,
    io: Ur++,
    eo: Ur++,
    no: Ur++,
    ao: Ur++,
    so: Ur++,
    ro: Ur++,
    oo: Ur++,
    ho: Ur++,
    co: Ur++,
    do: Ur++,
    mo: Ur++,
    uo: Ur++,
    fo: Ur++,
    po: Ur++,
    lo: Ur++,
    bo: Ur++,
    vo: Ur++,
    yo: Ur++,
    ko: Ur++,
    Ao: Ur++,
    wo: Ur++,
    Mo: Ur++,
    Bo: Ur++,
    Do: Ur++,
    Eo: Ur++,
    Co: Ur++,
    zo: Ur++,
    xo: Ur++,
    Qo: Ur++,
    So: Ur++,
    Io: Ur++,
    _o: Ur++,
    Fo: Ur++,
    Po: Ur++,
    To: Ur++,
    jo: Ur++,
    Ro: Ur++,
    Lo: Ur++,
    Go: Ur++,
    qo: Ur++,
    Wo: Ur++,
    No: Ur++,
    Ho: Ur++,
    Uo: Ur++,
    Oo: Ur++,
    Yo: Ur++,
    Jo: Ur++,
    Ko: Ur++,
    Xo: Ur++,
    Vo: Ur++,
    Zo: Ur++,
    $o: Ur++,
    ih: Ur++,
    th: Ur++,
    eh: Ur++,
    nh: Ur++,
    ah: Ur++,
    sh: Ur++,
    rh: Ur++,
    oh: Ur++,
    hh: Ur++,
    gh: Ur++,
    dh: Ur++,
    mh: Ur++,
    uh: Ur++,
    fh: Ur++,
    ph: Ur++,
    bh: Ur++,
    yh: Ur++,
    kh: Ur++,
    Ah: Ur++,
    wh: Ur++,
    Mh: Ur++,
    Bh: Ur++,
    Dh: Ur++,
    Eh: Ur++,
    Ch: Ur++,
    zh: Ur++,
    xh: Ur++,
    Qh: Ur++,
    Sh: Ur++,
    Ih: Ur++,
    _h: Ur++,
    Fh: Ur++,
    Ph: Ur++,
    Th: Ur++,
    jh: Ur++,
    Rh: Ur++,
    Lh: Ur++,
    Gh: Ur++,
    qh: Ur++,
    Wh: Ur++,
    Nh: Ur++,
    Hh: Ur++,
    Uh: Ur++,
    Oh: Ur++,
    Yh: Ur++,
    Jh: Ur++,
    Kh: Ur++,
    Xh: Ur++,
    Vh: Ur++,
    Zh: Ur++,
    $h: Ur++,
    ig: Ur++,
    tg: Ur++,
    eg: Ur++,
    ng: Ur++,
    ag: Ur++,
    sg: Ur++,
    rg: Ur++,
    og: Ur++,
    hg: Ur++,
    gg: Ur++,
    cg: Ur++,
    dg: Ur++,
    mg: Ur++,
    ug: Ur++,
    fg: Ur++,
    pg: Ur++,
    lg: Ur++,
    bg: Ur++,
    vg: Ur++,
    yg: Ur++,
    kg: Ur++,
    Ag: Ur++,
    wg: Ur++,
    Mg: Ur++,
    Bg: Ur++,
    Dg: Ur++,
    Eg: Ur++,
    Cg: Ur++,
    zg: Ur++,
    xg: Ur++,
    Qg: Ur++,
    Sg: Ur++,
    Ig: Ur++,
    _g: Ur++,
    Fg: Ur++,
    Pg: Ur++,
    Tg: Ur++,
    jg: Ur++,
    Rg: Ur++,
    Lg: Ur++,
    Gg: Ur++,
    qg: Ur++,
    Wg: Ur++,
    Ng: Ur++,
    Hg: Ur++,
    Ug: Ur++,
    Og: Ur++,
    Yg: Ur++,
    Jg: Ur++,
    Kg: Ur++,
    Xg: Ur++,
    Vg: Ur++,
    Zg: Ur++,
    $g: Ur++,
    tc: Ur++,
    ec: Ur++,
    nc: Ur++,
    ac: Ur++,
    sc: Ur++,
    rc: Ur++,
    oc: Ur++,
    hc: Ur++,
    gc: Ur++,
    cc: Ur++,
    dc: Ur++,
    mc: Ur++,
    uc: Ur++,
    fc: Ur++,
    lc: Ur++,
    bc: Ur++,
    vc: Ur++,
    yc: Ur++,
    kc: Ur++,
    Ac: Ur++,
    wc: Ur++,
    Mc: Ur++,
    Bc: Ur++,
    Dc: Ur++,
    Ec: Ur++,
    Cc: Ur++,
    zc: Ur++,
    xc: Ur++,
    Qc: Ur++,
    Sc: Ur++,
    Ic: Ur++,
    _c: Ur++,
    Fc: Ur++,
    Pc: Ur++,
    Tc: Ur++,
    jc: Ur++,
    Rc: Ur++,
    Lc: Ur++,
    Gc: Ur++,
    qc: Ur++,
    Wc: Ur++,
    Nc: Ur++,
    Hc: Ur++,
    Uc: Ur++,
    Oc: Ur++,
    Yc: Ur++,
    Jc: Ur++,
    Kc: Ur++,
    Xc: Ur++,
    Vc: Ur++,
    Zc: Ur++,
    $c: Ur++,
    td: Ur++,
    ed: Ur++,
    nd: Ur++,
    ad: Ur++,
    sd: Ur++,
    rd: Ur++,
    od: Ur++,
    hd: Ur++,
    gd: Ur++,
    dd: Ur++,
    md: Ur++,
    ud: Ur++,
    fd: Ur++,
    pd: Ur++,
    ld: Ur++,
    bd: Ur++,
    zc: Ur++,
    vd: Ur++,
    yd: Ur++,
    kd: Ur++,
    Ad: Ur++,
    wd: Ur++,
    Md: Ur++,
    Bd: Ur++,
    Dd: Ur++,
    Ed: Ur++,
    Cd: Ur++,
    zd: Ur++,
    xd: Ur++,
    Qd: Ur++,
    Sd: Ur++,
    Id: Ur++,
    _d: Ur++,
    Fd: Ur++,
    Pd: Ur++,
    Td: Ur++,
    jd: Ur++,
    Rd: Ur++,
    Ld: Ur++,
    Gd: Ur++,
    qd: Ur++,
    Wd: Ur++,
    Nd: Ur++,
    Hd: Ur++,
    Ud: Ur++,
    Od: Ur++,
    Yd: Ur++,
    Jd: Ur++,
    Kd: Ur++,
    Xd: Ur++,
    Vd: Ur++,
    Zd: Ur++,
    $d: Ur++,
    im: Ur++,
    POINTS: Ur++,
    tm: Ur++,
    nm: Ur++,
    am: Ur++,
    sm: Ur++,
    rm: Ur++,
    om: Ur++,
    hm: Ur++,
    gm: Ur++,
    dm: Ur++,
    um: Ur++,
    fm: Ur++,
    pm: Ur++,
    lm: Ur++,
    bm: Ur++,
    vm: Ur++,
    ym: Ur++,
    km: Ur++,
    Am: Ur++,
    wm: Ur++,
    Mm: Ur++,
    Bm: Ur++,
    Dm: Ur++,
    Em: Ur++,
    Cm: Ur++,
    zm: Ur++,
    xm: Ur++,
    Qm: Ur++,
    Sm: Ur++,
    Im: Ur++,
    _m: Ur++,
    Fm: Ur++,
    Pm: Ur++,
    Tm: Ur++,
    jm: Ur++,
    Rm: Ur++,
    Lm: Ur++,
    Gm: Ur++,
    qm: Ur++,
    Wm: Ur++,
    Nm: Ur++,
    Hm: Ur++,
    Um: Ur++,
    Om: Ur++,
    Ym: Ur++,
    Jm: Ur++,
    Km: Ur++,
    Xm: Ur++,
    Vm: Ur++,
    Zm: Ur++,
    $m: Ur++,
    iu: Ur++,
    tu: Ur++,
    eu: Ur++,
    nu: Ur++,
    au: Ur++,
    su: Ur++,
    ru: Ur++,
    ou: Ur++,
    hu: Ur++,
    gu: Ur++,
    cu: Ur++,
    du: Ur++,
    mu: Ur++,
    uu: Ur++,
    fu: Ur++,
    pu: Ur++,
    lu: Ur++,
    bu: Ur++,
    vu: Ur++,
    yu: Ur++,
    ku: Ur++,
    Au: Ur++,
    wu: Ur++,
    Mu: Ur++,
    Bu: Ur++,
    Du: Ur++,
    Eu: Ur++,
    Cu: Ur++,
    zu: Ur++,
    xu: Ur++,
    Qu: Ur++,
    Su: Ur++,
    Iu: Ur++,
    _u: Ur++,
    Fu: Ur++,
    Pu: Ur++,
    Tu: Ur++,
    ju: Ur++,
    Ru: Ur++,
    Lu: Ur++,
    Gu: Ur++,
    qu: Ur++,
    Wu: Ur++,
    Nu: Ur++,
    Hu: Ur++,
    Uu: Ur++,
    Ou: Ur++,
    Yu: Ur++,
    Ju: Ur++,
    Ku: Ur++,
    Xu: Ur++,
    Vu: Ur++,
    Zu: Ur++,
    $u: Ur++,
    if: Ur++,
    tf: Ur++,
    ef: Ur++,
    nf: Ur++,
    af: Ur++,
    sf: Ur++,
    rf: Ur++,
    hf: Ur++,
    gf: Ur++,
    cf: Ur++,
    df: Ur++,
    mf: Ur++,
    uf: Ur++,
    ff: Ur++,
    pf: Ur++,
    lf: Ur++,
    bf: Ur++,
    vf: Ur++,
    yf: Ur++,
    kf: Ur++,
    Af: Ur++,
    wf: Ur++,
    Mf: Ur++,
    Bf: Ur++,
    Df: Ur++,
    Ef: Ur++,
    Cf: Ur++,
    zf: Ur++,
    xf: Ur++,
    Qf: Ur++,
    Sf: Ur++,
    If: Ur++,
    _f: Ur++,
    Ff: Ur++,
    Pf: Ur++,
    Tf: Ur++,
    jf: Ur++,
    Rf: Ur++,
    Lf: Ur++,
    Gf: Ur++,
    qf: Ur++,
    Wf: Ur++,
    Nf: Ur++,
    Hf: Ur++,
    Uf: Ur++,
    Of: Ur++,
    Yf: Ur++,
    Jf: Ur++,
    Kf: Ur++,
    Xf: Ur++,
    Vf: Ur++,
    Zf: Ur++,
    $f: Ur++,
    ip: Ur++,
    tp: Ur++,
    ep: Ur++,
    np: Ur++,
    ap: Ur++,
    sp: Ur++,
    rp: Ur++,
    op: Ur++,
    hp: Ur++,
    gp: Ur++,
    cp: Ur++,
    dp: Ur++,
    mp: Ur++,
    up: Ur++,
    fp: Ur++,
    pp: Ur++,
    lp: Ur++,
    bp: Ur++,
    vp: Ur++,
    yp: Ur++,
    kp: Ur++,
    Ap: Ur++,
    wp: Ur++,
    Mp: Ur++,
    Bp: Ur++,
    Dp: Ur++,
    Ep: Ur++,
    Cp: Ur++,
    zp: Ur++,
    xp: Ur++,
    Qp: Ur++,
    Sp: Ur++,
    Ip: Ur++,
    _p: Ur++,
    Fp: Ur++,
    Pp: Ur++,
    Tp: Ur++,
    jp: Ur++,
    Rp: Ur++,
    Lp: Ur++,
    Gp: Ur++,
    qp: Ur++,
    Wp: Ur++,
    Np: Ur++,
    Hp: Ur++,
    Up: Ur++,
    Op: Ur++,
    Yp: Ur++,
    Jp: Ur++,
    Kp: Ur++,
    Xp: Ur++,
    Vp: Ur++,
    Zp: Ur++,
    $p: Ur++,
    il: Ur++,
    tl: Ur++,
    el: Ur++,
    nl: Ur++,
    al: Ur++,
    sl: Ur++,
    rl: Ur++,
    ol: Ur++,
    hl: Ur++,
    gl: Ur++,
    cl: Ur++,
    dl: Ur++,
    ml: Ur++,
    ul: Ur++,
    fl: Ur++,
    pl: Ur++,
    ll: Ur++,
    bl: Ur++,
    vl: Ur++,
    yl: Ur++,
    kl: Ur++,
    Al: Ur++,
    wl: Ur++,
    Ml: Ur++,
    Bl: Ur++,
    Dl: Ur++,
    El: Ur++,
    Cl: Ur++,
    zl: Ur++,
    xl: Ur++,
    Ql: Ur++,
    Sl: Ur++,
    Il: Ur++,
    _l: Ur++,
    Fl: Ur++,
    Pl: Ur++,
    Tl: Ur++,
    jl: Ur++,
    Rl: Ur++,
    Ll: Ur++,
    Gl: Ur++,
    ql: Ur++,
    Wl: Ur++,
    Nl: Ur++,
    Hl: Ur++,
    Ul: Ur++,
    Ol: Ur++,
    Yl: Ur++,
    Jl: Ur++,
    Kl: Ur++,
    Xl: Ur++,
    Vl: Ur++,
    Zl: Ur++,
    $l: Ur++,
    ib: Ur++,
    tb: Ur++,
    eb: Ur++,
    nb: Ur++,
    ab: Ur++,
    sb: Ur++,
    rb: Ur++,
    ob: Ur++,
    hb: Ur++,
    gb: Ur++,
    cb: Ur++,
    mb: Ur++,
    ub: Ur++,
    fb: Ur++,
    pb: Ur++,
    lb: Ur++,
    bb: Ur++,
    yb: Ur++,
    kb: Ur++,
    Ab: Ur++,
    wb: Ur++,
    Mb: Ur++,
    Bb: Ur++,
    Db: Ur++,
    Eb: Ur++,
    Cb: Ur++,
    zb: Ur++,
    xb: Ur++,
    Qb: Ur++,
    Sb: Ur++,
    Ib: Ur++,
    _b: Ur++,
    Fb: Ur++,
    Pb: Ur++,
    Tb: Ur++,
    jb: Ur++,
    Rb: Ur++,
    Lb: Ur++,
    Gb: Ur++,
    qb: Ur++,
    Wb: Ur++,
    Nb: Ur++,
    Hb: Ur++,
    Ub: Ur++,
    Ob: Ur++,
    Yb: Ur++,
    Jb: Ur++,
    Kb: Ur++,
    Xb: Ur++,
    Vb: Ur++,
    Zb: Ur++,
    $b: Ur++,
    iv: Ur++,
    tv: Ur++,
    ev: Ur++,
    nv: Ur++,
    av: Ur++,
    sv: Ur++,
    rv: Ur++,
    ov: Ur++,
    hv: Ur++,
    gv: Ur++,
    cv: Ur++,
    dv: Ur++,
    mv: Ur++,
    uv: Ur++,
    fv: Ur++,
    pv: Ur++,
    lv: Ur++,
    bv: Ur++,
    vv: Ur++,
    yv: Ur++,
    kv: Ur++,
    Av: Ur++,
    wv: Ur++,
    Mv: Ur++,
    Bv: Ur++,
    Dv: Ur++,
    Ev: Ur++,
    Cv: Ur++,
    zv: Ur++,
    xv: Ur++,
    Qv: Ur++,
    Sv: Ur++,
    Iv: Ur++,
    _v: Ur++,
    Fv: Ur++,
    Pv: Ur++,
    Tv: Ur++,
    jv: Ur++,
    Rv: Ur++,
    Lv: Ur++,
    Gv: Ur++,
    qv: Ur++,
    Wv: Ur++,
    Nv: Ur++,
    Hv: Ur++,
    Uv: Ur++,
    Ov: Ur++,
    Yv: Ur++,
    Jv: Ur++,
    Kv: Ur++,
    Xv: Ur++,
    Vv: Ur++,
    Zv: Ur++,
    $v: Ur++,
    iy: Ur++,
    ty: Ur++,
    ey: Ur++,
    ny: Ur++,
    sy: Ur++,
    oy: Ur++,
    hy: Ur++,
    gy: Ur++,
    my: Ur++,
    uy: Ur++,
    py: Ur++,
    ly: Ur++,
    by: Ur++,
    vy: Ur++,
    yy: Ur++,
    ky: Ur++,
    Ay: Ur++,
    wy: Ur++,
    My: Ur++,
    By: Ur++,
    Dy: Ur++,
    Ey: Ur++,
    Cy: Ur++,
    zy: Ur++,
    xy: Ur++,
    Qy: Ur++,
    Sy: Ur++,
    Iy: Ur++,
    _y: Ur++,
    Fy: Ur++,
    Py: Ur++,
    Ty: Ur++,
    jy: Ur++,
    Ry: Ur++,
    Ly: Ur++,
    Gy: Ur++,
    qy: Ur++,
    Wy: Ur++,
    Ny: Ur++,
    Hy: Ur++,
    Uy: Ur++,
    Oy: Ur++,
    Yy: Ur++,
    Jy: Ur++,
    Ky: Ur++,
    Xy: Ur++,
    Vy: Ur++,
    Zy: Ur++,
    $y: Ur++,
    ik: Ur++,
    tk: Ur++,
    ek: Ur++,
    nk: Ur++,
    ak: Ur++,
    sk: Ur++,
    rk: Ur++,
    hk: Ur++,
    gk: Ur++,
    ck: Ur++,
    dk: Ur++,
    mk: Ur++,
    uk: Ur++,
    fk: Ur++,
    pk: Ur++,
    lk: Ur++,
    bk: Ur++,
    vk: Ur++,
    yk: Ur++,
    kk: Ur++,
    Ak: Ur++,
    wk: Ur++,
    Mk: Ur++,
    Bk: Ur++,
    Dk: Ur++,
    Ek: Ur++,
    Ck: Ur++,
    zk: Ur++,
    xk: Ur++,
    Qk: Ur++,
    Sk: Ur++,
    Ik: Ur++,
    _k: Ur++,
    Fk: Ur++,
    Pk: Ur++,
    Tk: Ur++,
    jk: Ur++,
    Rk: Ur++,
    Lk: Ur++,
    Gk: Ur++,
    qk: Ur++,
    Wk: Ur++,
    Nk: Ur++,
    Hk: Ur++,
    Uk: Ur++,
    Ok: Ur++,
    Yk: Ur++,
    Jk: Ur++,
    Kk: Ur++,
    Xk: Ur++,
    Vk: Ur++,
    Zk: Ur++,
    $k: Ur++,
    iA: Ur++,
    tA: Ur++,
    eA: Ur++,
    nA: Ur++,
    aA: Ur++,
    sA: Ur++,
    rA: Ur++,
    oA: Ur++,
    hA: Ur++,
    gA: Ur++,
    cA: Ur++,
    dA: Ur++,
    mA: Ur++,
    uA: Ur++,
    fA: Ur++,
    pA: Ur++,
    lA: Ur++,
    bA: Ur++,
    vA: Ur++,
    yA: Ur++,
    kA: Ur++,
    AA: Ur++,
    wA: Ur++,
    MA: Ur++,
    BA: Ur++,
    DA: Ur++,
    EA: Ur++,
    CA: Ur++,
    zA: Ur++,
    xA: Ur++,
    QA: Ur++,
    SA: Ur++,
    IA: Ur++,
    _A: Ur++,
    FA: Ur++,
    ir: Ur++,
    PA: Ur++,
    TA: Ur++,
    jA: Ur++,
    RA: Ur++,
    LA: Ur++,
    GA: Ur++,
    qA: Ur++,
    WA: Ur++,
    NA: Ur++,
    HA: Ur++,
    UA: Ur++,
    OA: Ur++,
    YA: Ur++,
    JA: Ur++,
    tr: Ur++,
    KA: Ur++,
    XA: Ur++,
    VA: Ur++,
    ZA: Ur++,
    $A: Ur++,
    iw: Ur++,
    tw: Ur++,
    ew: Ur++,
    nw: Ur++,
    aw: Ur++,
    sw: Ur++,
    rw: Ur++,
    ow: Ur++,
    hw: Ur++,
    er: Ur++,
    gw: Ur++,
    cw: Ur++,
    dw: Ur++,
    mw: Ur++,
    uw: Ur++,
    fw: Ur++,
    pw: Ur++,
    lw: Ur++,
    bw: Ur++,
    yw: Ur++,
    kw: Ur++,
    Aw: Ur++,
    ww: Ur++,
    Mw: Ur++,
    ar: Ur++,
    Bw: Ur++,
    Dw: Ur++,
    Ew: Ur++,
    Cw: Ur++,
    zw: Ur++,
    xw: Ur++,
    Qw: Ur++,
    Sw: Ur++,
    Iw: Ur++,
    _w: Ur++,
    Fw: Ur++,
    Pw: Ur++,
    Tw: Ur++,
    jw: Ur++,
    Rw: Ur++,
    Lw: Ur++,
    Gw: Ur++,
    qw: Ur++,
    Ww: Ur++,
    Nw: Ur++,
    hr: Ur++,
    Hw: Ur++,
    Uw: Ur++,
    Ow: Ur++,
    Yw: Ur++,
    Jw: Ur++,
    Kw: Ur++,
    Xw: Ur++,
    Vw: Ur++,
    Zw: Ur++,
    $w: Ur++,
    iM: Ur++,
    tM: Ur++,
    eM: Ur++,
    nM: Ur++,
    aM: Ur++,
    sM: Ur++,
    rM: Ur++,
    oM: Ur++,
    hM: Ur++,
    gM: Ur++,
    cM: Ur++,
    dM: Ur++,
    mM: Ur++,
    uM: Ur++,
    fM: Ur++,
    pM: Ur++,
    lM: Ur++,
    bM: Ur++,
    vM: ["#E9CF96", "#144940"],
    yM: Ur++,
    kM: Ur++,
    AM: Ur++,
    wM: Ur++,
    MM: Ur++,
    BM: Ur++,
    DM: Ur++,
    EM: Ur++,
    CM: Ur++,
    zM: Ur++,
    xM: Ur++,
    QM: Ur++,
    SM: Ur++,
    IM: Ur++,
    _M: Ur++,
    FM: Ur++,
    PM: Ur++,
    TM: Ur++,
    jM: Ur++,
    RM: Ur++,
    LM: Ur++,
    GM: Ur++,
    qM: Ur++,
    WM: Ur++,
    NM: Ur++,
    HM: Ur++,
    UM: Ur++,
    OM: Ur++,
    YM: Ur++,
    JM: Ur++,
    KM: Ur++,
    XM: Ur++,
    VM: Ur++,
    ZM: Ur++,
    $M: Ur++,
    iB: Ur++,
    tB: Ur++,
    eB: Ur++,
    nB: Ur++,
    aB: Ur++,
    sB: Ur++,
    rB: Ur++,
    oB: Ur++,
    hB: Ur++,
    gB: Ur++,
    cB: Ur++,
    dB: Ur++,
    mB: Ur++,
    uB: Ur++,
    fB: Ur++,
    pB: Ur++,
    lB: Ur++,
    bB: Ur++,
    vB: Ur++,
    yB: Ur++,
    kB: Ur++,
    AB: Ur++,
    wB: Ur++,
    MB: Ur++,
    BB: Ur++,
    DB: Ur++,
    EB: Ur++,
    CB: Ur++,
    zB: Ur++,
    xB: Ur++,
    QB: Ur++,
    SB: Ur++,
    IB: Ur++,
    _B: Ur++,
    FB: Ur++,
    PB: Ur++,
    yr: Ur++,
    TB: Ur++,
    jB: Ur++,
    RB: Ur++,
    LB: Ur++,
    GB: Ur++,
    qB: Ur++,
    WB: Ur++,
    NB: Ur++,
    HB: Ur++,
    UB: Ur++,
    OB: Ur++,
    YB: Ur++,
    JB: Ur++,
    KB: Ur++,
    XB: Ur++,
    VB: Ur++,
    ZB: Ur++,
    $B: Ur++,
    iD: Ur++,
    tD: Ur++,
    eD: Ur++,
    nD: Ur++,
    aD: Ur++,
    sD: Ur++,
    rD: Ur++,
    oD: Ur++,
    hD: Ur++,
    gD: Ur++,
    cD: Ur++,
    dD: Ur++,
    mD: Ur++,
    uD: Ur++,
    fD: Ur++,
    pD: Ur++,
    lD: Ur++,
    bD: Ur++,
    vD: Ur++,
    yD: Ur++,
    kD: Ur++,
    AD: Ur++,
    wD: Ur++,
    MD: Ur++,
    BD: Ur++,
    DD: Ur++,
    ED: Ur++,
    CD: Ur++,
    zD: Ur++,
    xD: Ur++,
    QD: Ur++,
    SD: Ur++,
    ID: Ur++,
    _D: Ur++,
    FD: Ur++
  };
  const Yr = _e;
  Ur = 0;
  const Jr = Nr;
  const Kr = $q;
  var Xr = {
    oo: Ur++,
    PD: Ur++,
    TD: Ur++,
    Wn: Ur++,
    Wt: Ur++,
    Pt: Ur++,
    jt: Ur++,
    Rt: Ur++,
    de: Ur++,
    me: Ur++,
    pe: Ur++,
    le: Ur++,
    be: Ur++,
    ve: Ur++,
    ye: Ur++,
    De: Ur++,
    Ee: Ur++,
    Qe: Ur++,
    Se: Ur++,
    Ie: Ur++,
    aa: Ur++,
    xe: Ur++,
    _e: Ur++,
    Fe: Ur++,
    he: Ur++,
    Ot: Ur++,
    Yt: Ur++,
    Jt: Ur++,
    Kt: Ur++,
    ue: Ur++,
    fe: Ur++,
    Xt: Ur++,
    Vt: Ur++,
    Zt: Ur++,
    je: Ur++,
    Ft: Ur++,
    Lt: Ur++,
    Gt: Ur++,
    ce: Ur++,
    $t: Ur++,
    wr: Ur++,
    ra: Ur++,
    jD: Ur++,
    RD: Ur++,
    LD: Ur++,
    GD: Ur++,
    qD: Ur++,
    WD: Ur++,
    ND: Ur++,
    Un: Ur++,
    ma: Ur++,
    HD: Ur++,
    oa: Ur++,
    ca: Ur++,
    vs: Ur++,
    Ta: Ur++,
    ja: Ur++,
    Ra: Ur++,
    La: Ur++,
    Xn: Ur++,
    Gs: Ur++,
    UD: Ur++,
    OD: Ur++,
    YD: Ur++,
    JD: Ur++,
    KD: Ur++,
    qs: Ur++,
    Fa: Ur++,
    Wa: Ur++,
    Na: Ur++,
    Ha: Ur++,
    Vn: Ur++,
    Ws: Ur++,
    Ps: Ur++,
    Ts: Ur++,
    js: Ur++,
    Rs: Ur++,
    Ls: Ur++,
    Ns: Ur++,
    qa: Ur++,
    ne: Ur++,
    ae: Ur++,
    cn: Ur++,
    Ht: Ur++,
    Ut: Ur++,
    ke: Ur++,
    ln: Ur++,
    Re: Ur++,
    se: Ur++,
    re: Ur++,
    oe: Ur++,
    Me: Ur++,
    Be: Ur++,
    ze: Ur++,
    Ce: Ur++,
    ie: Ur++,
    te: Ur++,
    ee: Ur++,
    hn: Ur++,
    gn: Ur++,
    ge: Ur++,
    Jn: Ur++,
    Aa: Ur++,
    wa: Ur++,
    Ia: Ur++,
    _a: Ur++,
    $n: Ur++,
    us: Ur++,
    Hs: Ur++,
    pa: Ur++,
    ea: Ur++,
    ta: Ur++,
    XD: Ur++,
    VD: Ur++,
    ga: Ur++,
    Da: Ur++,
    Ea: Ur++,
    Ca: Ur++,
    za: Ur++,
    xa: Ur++,
    Qa: Ur++,
    Sa: Ur++,
    Pe: Ur++,
    Te: Ur++,
    ZD: Ur++,
    $D: Ur++,
    Le: Ur++,
    Ge: Ur++,
    qe: Ur++,
    We: Ur++,
    Ne: Ur++,
    He: Ur++,
    xn: Ur++,
    Ue: Ur++,
    Qn: Ur++,
    Oe: Ur++,
    Sn: Ur++,
    Ye: Ur++,
    In: Ur++,
    Je: Ur++,
    _n: Ur++,
    Ke: Ur++,
    Fn: Ur++,
    Xe: Ur++,
    Pn: Ur++,
    Ve: Ur++,
    Ze: Ur++,
    $e: Ur++,
    tn: Ur++,
    en: Ur++,
    nn: Ur++,
    an: Ur++,
    sn: Ur++,
    rn: Ur++,
    dn: Ur++,
    mn: Ur++,
    un: Ur++,
    fn: Ur++,
    iE: Ur++,
    tE: Ur++,
    eE: Ur++,
    ss: Ur++,
    As: Ur++,
    Os: Ur++,
    Ys: Ur++,
    bn: Ur++,
    sr: Ur++,
    wn: Ur++,
    Mn: Ur++,
    Bn: Ur++,
    Dn: Ur++,
    En: Ur++,
    Cn: Ur++,
    vn: Ur++,
    kn: Ur++,
    An: Ur++,
    yn: Ur++
  };
  Ur = Jj;
  const Vr = fa;
  const Zr = an;
  var $r = {
    Ft: Ur++,
    Pt: Ur++,
    Tt: Ur++,
    jt: Ur++,
    Rt: Ur++,
    Lt: Ur++,
    Gt: Ur++,
    qt: Ur++,
    Wt: Ur++,
    Nt: Ur++,
    Ht: Ur++,
    Ut: Ur++,
    Ot: Ur++,
    Yt: Ur++,
    Jt: Ur++,
    Kt: Ur++,
    Xt: Ur++,
    Vt: Ur++,
    Zt: Ur++,
    $t: Ur++,
    ie: Ur++,
    te: Ur++,
    ee: Ur++,
    ne: Ur++,
    ae: Ur++,
    se: Ur++,
    re: Ur++,
    oe: Ur++,
    he: Ur++,
    ge: Ur++,
    ce: Ur++,
    de: Ur++,
    me: Ur++,
    ue: Ur++,
    fe: Ur++,
    pe: Ur++,
    le: Ur++,
    be: Ur++,
    ve: Ur++,
    ye: Ur++,
    ke: Ur++,
    Ae: Ur++,
    we: Ur++,
    Me: Ur++,
    Be: Ur++,
    De: Ur++,
    Ee: Ur++,
    Ce: Ur++,
    ze: Ur++,
    xe: Ur++,
    Qe: Ur++,
    Se: Ur++,
    Ie: Ur++,
    _e: Ur++,
    Fe: Ur++,
    Pe: Ur++,
    Te: Ur++,
    je: Ur++,
    Re: Ur++,
    Le: Ur++,
    Ge: Ur++,
    qe: Ur++,
    We: Ur++,
    Ne: Ur++,
    He: Ur++,
    Ue: Ur++,
    Oe: Ur++,
    Ye: Ur++,
    Je: Ur++,
    Ke: Ur++,
    Xe: Ur++,
    Ve: Ur++,
    Ze: Ur++,
    $e: Ur++,
    tn: Ur++,
    en: Ur++,
    nn: Ur++,
    an: Ur++,
    sn: Ur++,
    rn: Ur++,
    hn: Ur++,
    gn: Ur++,
    cn: Ur++,
    dn: Ur++,
    mn: Ur++,
    un: Ur++,
    fn: Ur++,
    pn: Ur++,
    ln: Ur++,
    bn: Ur++,
    vn: Ur++,
    yn: Ur++,
    kn: Ur++,
    An: Ur++,
    wn: Ur++,
    Mn: Ur++,
    Bn: Ur++,
    Dn: Ur++,
    En: Ur++,
    Cn: Ur++,
    lr: Ur++,
    xn: Ur++,
    Qn: Ur++,
    Sn: Ur++,
    In: Ur++,
    _n: Ur++,
    Fn: Ur++,
    Pn: Ur++,
    nE: Ur++,
    aE: Ur++,
    Rn: Ur++,
    Ln: Ur++,
    Gn: Ur++,
    oo: Ur++,
    Wn: Ur++,
    wr: Ur++,
    Hn: Ur++,
    Un: Ur++,
    PD: Ur++,
    TD: Ur++,
    Jn: Ur++,
    Kn: Ur++,
    Xn: Ur++,
    Vn: Ur++,
    KD: Ur++,
    $n: Ur++,
    ia: Ur++,
    ta: Ur++,
    ea: Ur++,
    na: Ur++,
    aa: Ur++,
    sa: Ur++,
    ra: Ur++,
    oa: Ur++,
    ha: Ur++,
    ga: Ur++,
    ca: Ur++,
    da: Ur++,
    ma: Ur++,
    ua: Ur++,
    Zi: Ur++,
    pa: Ur++,
    sE: Ur++,
    HD: Ur++,
    ZD: Ur++,
    $D: Ur++,
    ka: Ur++,
    Aa: Ur++,
    wa: Ur++,
    Ma: Ur++,
    Ba: Ur++,
    Da: Ur++,
    Ea: Ur++,
    Ca: Ur++,
    za: Ur++,
    xa: Ur++,
    Qa: Ur++,
    Sa: Ur++,
    Ia: Ur++,
    _a: Ur++,
    Fa: Ur++,
    Pa: Ur++,
    Ta: Ur++,
    ja: Ur++,
    Ra: Ur++,
    La: Ur++,
    UD: Ur++,
    qa: Ur++,
    Wa: Ur++,
    Na: Ur++,
    Ha: Ur++,
    OD: Ur++,
    YD: Ur++,
    JD: Ur++,
    Ja: Ur++,
    rE: Ur++,
    oE: Ur++,
    hE: Ur++,
    gE: Ur++,
    cE: Ur++,
    iE: Ur++,
    tE: Ur++,
    eE: Ur++,
    ss: Ur++,
    rs: Ur++,
    os: Ur++,
    hs: Ur++,
    gs: Ur++,
    jD: Ur++,
    ds: Ur++,
    us: Ur++,
    RD: Ur++,
    ps: Ur++,
    LD: Ur++,
    bs: Ur++,
    vs: Ur++,
    Zs: Ur++,
    $s: Ur++,
    As: Ur++,
    ws: Ur++,
    dE: Ur++,
    Bs: Ur++,
    Ds: Ur++,
    mE: Ur++,
    GD: Ur++,
    zs: Ur++,
    qD: Ur++,
    Qs: Ur++,
    WD: Ur++,
    Is: Ur++,
    ND: Ur++,
    gr: Ur++,
    Ps: Ur++,
    Ts: Ur++,
    js: Ur++,
    Rs: Ur++,
    Ls: Ur++,
    Gs: Ur++,
    qs: Ur++,
    Ws: Ur++,
    Ns: Ur++,
    Hs: Ur++,
    Us: Ur++,
    Os: Ur++,
    Ys: Ur++,
    Xs: Ur++,
    ir: Ur++,
    tr: Ur++,
    er: Ur++,
    ar: Ur++,
    sr: Ur++,
    rr: Ur++,
    cr: Ur++,
    Bk: Ur++,
    dr: Ur++,
    uE: Ur++,
    fE: Ur++,
    mr: Ur++,
    pE: Ur++,
    yr: Ur++,
    lE: Ur++
  };
  const io = Vs;
  const to = zj;
  var eo = {
    bE: Me,
    vE: Ps,
    yE: cn,
    kE: Vn,
    AE: 3,
    wE: ke
  };
  const no = as;
  const ao = Ss;
  const so = Js;
  const ro = Ws;
  const oo = ei;
  const ho = ln;
  var go = [];
  const co = as;
  const mo = xs;
  go[$r.aE] = {
    name: "Wood",
    ME: rt.To,
    BE: Ea,
    DE: Jj
  };
  const uo = G;
  const fo = Ps;
  const po = rq;
  go[$r.nE] = {
    name: "Stone",
    ME: rt.Po,
    BE: nj,
    DE: nj
  };
  go[$r.Ln] = {
    name: "Gold",
    ME: rt.bo,
    BE: 0,
    DE: 0
  };
  const lo = q;
  const bo = j;
  go[$r.Gn] = {
    name: "Diamond",
    ME: rt.vo,
    BE: Ka,
    DE: xn
  };
  go[$r.Kn] = {
    name: "Amethyst",
    ME: rt._g,
    BE: xn,
    DE: Jj
  };
  const vo = Ns;
  go[$r.Tt] = {
    name: "Rabbit fur",
    ME: rt.jh,
    BE: xn,
    DE: 0
  };
  const yo = Cs;
  go[$r.Ja] = {
    name: "Wolf fur",
    ME: rt.hg,
    BE: ke,
    DE: 0
  };
  const ko = sn;
  go[$r.mr] = {
    name: "Boar fur",
    ME: rt.IM,
    BE: Ea,
    DE: Oq
  };
  const Ao = uq;
  go[$r.lr] = {
    name: "Firefly",
    ME: rt.FM,
    BE: so,
    DE: Ea
  };
  const wo = ui;
  go[$r.xn] = {
    name: "Wood arrow",
    ME: rt.TM,
    BE: 0,
    DE: fi
  };
  go[$r.Qn] = {
    name: "Stone arrow",
    ME: rt.LM,
    BE: nj,
    DE: lt
  };
  const Mo = Nj;
  go[$r.Sn] = {
    name: "Gold arrow",
    ME: rt.WM,
    BE: nj,
    DE: 1
  };
  const Bo = I;
  go[$r.In] = {
    name: "Diamond arrow",
    ME: rt.UM,
    BE: Oq,
    DE: 1
  };
  go[$r._n] = {
    name: "Amethyst arrow",
    ME: rt.JM,
    BE: Ea,
    DE: 1
  };
  go[$r.Fn] = {
    name: "Reidite arrow",
    ME: rt.VM,
    BE: so,
    DE: 1
  };
  const Do = rn;
  const Eo = bs;
  const Co = aq;
  go[$r.Pn] = {
    name: "Dragon arrow",
    ME: rt.iB,
    BE: 0,
    DE: nj
  };
  go[$r.ka] = {
    name: "Winter fur",
    ME: rt.ld,
    BE: nj,
    DE: 0
  };
  go[$r.lE] = {
    name: "Fur mammoth",
    ME: rt.JB,
    BE: 0,
    DE: 0
  };
  go[$r.Pa] = {
    name: "Web",
    ME: rt.Do,
    BE: nj,
    DE: ke
  };
  const zo = We;
  const xo = Wn;
  go[$r.Hn] = {
    name: "Meat",
    ME: rt.ko,
    BE: Ka,
    DE: ke
  };
  go[$r.da] = {
    name: "Fish",
    ME: rt.uf,
    BE: Ka,
    DE: 0
  };
  go[$r.na] = {
    name: "Kraken skin",
    ME: rt.zu,
    BE: so,
    DE: nj
  };
  const Qo = Zs;
  go[$r.ua] = {
    name: "Piranha scales",
    ME: rt.Df,
    BE: 0,
    DE: ke
  };
  const So = Vj;
  go[$r.sE] = {
    name: "Ice",
    ME: rt.la,
    BE: 0,
    DE: 0
  };
  go[$r.ia] = {
    name: "Sand",
    ME: rt.uu,
    BE: 0,
    DE: 0
  };
  const Io = Ja;
  go[$r.Zi] = {
    name: "Dirt",
    ME: rt.fa,
    BE: 0,
    DE: xn
  };
  go[$r.Rn] = {
    name: "Berrie",
    ME: rt.Kr,
    BE: 0,
    DE: 0
  };
  const _o = po;
  go[$r.sa] = {
    name: "Flour",
    ME: rt._u,
    BE: 0,
    DE: 0
  };
  const Fo = vr;
  go[$r.ha] = {
    name: "Flour",
    ME: rt.Nu,
    BE: 0,
    DE: 0
  };
  const Po = en;
  const To = Ns;
  go[$r.gE] = {
    name: "Special fur peasant",
    ME: rt.Za,
    BE: 0,
    DE: 0
  };
  const jo = ei;
  go[$r.cE] = {
    name: "Special fur hood",
    ME: rt.$a,
    BE: so,
    DE: Ka
  };
  go[$r.ds] = {
    name: "Pumpkin",
    ME: rt.nb,
    BE: Js,
    DE: 0
  };
  const Ro = aa;
  go[$r.ps] = {
    name: "Garlic",
    ME: rt.Sb,
    BE: Oq,
    DE: Oq
  };
  go[$r.bs] = {
    name: "Thornbush",
    ME: rt.qb,
    BE: 0,
    DE: 0
  };
  go[$r.zs] = {
    name: "Carrot",
    ME: rt.Ny,
    BE: 0,
    DE: 0
  };
  go[$r.Qs] = {
    name: "Tomato",
    ME: rt.$y,
    BE: so,
    DE: Oq
  };
  go[$r.Is] = {
    name: "Watermelon",
    ME: rt.rk,
    BE: 0,
    DE: nj
  };
  const Lo = fo;
  const Go = Z;
  go[$r.gr] = {
    name: "Aloe Vera",
    ME: rt.wk,
    BE: ke,
    DE: 0
  };
  go[$r.Us] = {
    name: "Penguin Feather",
    ME: rt.lA,
    BE: ke,
    DE: nj
  };
  const qo = W;
  go[$r.rr] = {
    name: "Hawk Feather",
    ME: rt.vA,
    BE: Jj,
    DE: nj
  };
  go[$r.cr] = {
    name: "Vulture Feather",
    ME: rt.kA,
    BE: 0,
    DE: Ka
  };
  const Wo = d;
  const No = y;
  go[$r.Bk] = {
    name: "Cactus",
    ME: rt.BM,
    BE: Ka,
    DE: 0
  };
  const Ho = Yi;
  go[$r.fE] = {
    name: "Cactus",
    ME: rt.QM,
    BE: ke,
    DE: 0
  };
  const Uo = ui;
  const Oo = pq;
  const Yo = bo;
  go[$r.uE] = {
    name: "Pitchfork Part",
    ME: rt.zM,
    BE: Ea,
    DE: 0
  };
  go[$r.pE] = {
    name: "Emerald Machine",
    ME: rt.nB,
    BE: Js,
    DE: 0
  };
  go[$r.dr] = {
    name: "Emerald",
    ME: rt.EM,
    BE: Jj,
    DE: Js
  };
  go[$r.Ae] = {
    name: "Christmas Hat",
    ME: rt.bv,
    DE: Oq
  };
  const Jo = Vs;
  const Ko = X;
  const Xo = ti;
  go[$r.we] = {
    name: "Elf Hat",
    ME: rt.yv,
    DE: 0
  };
  go[$r.Bs] = {
    name: "Garland",
    ME: rt.ov,
    DE: 0,
    BE: 0
  };
  go[$r.dE] = {
    name: "Candy",
    ME: rt.Ms,
    DE: 0
  };
  go[$r.ws] = {
    name: "Sugar Cane",
    ME: rt.ev,
    DE: 0
  };
  go[$r.Nt] = {
    name: "Pirate Sword",
    ME: rt.Vb,
    BE: 0,
    DE: nj
  };
  go[$r.Zs] = {
    name: "Crab Stick",
    ME: rt.ys,
    BE: Oq,
    DE: 0
  };
  go[$r.Ds] = {
    name: "Reidite",
    ME: rt.Ey,
    BE: so,
    DE: Ka
  };
  const Vo = ce;
  const Zo = no;
  const $o = ao;
  const ih = Vn;
  const th = tq;
  const eh = pj;
  const nh = E;
  const ah = Fn;
  go[$r.mE] = {
    name: "Flame",
    ME: rt.By,
    BE: Jj,
    DE: 0
  };
  go[$r.oo] = {
    name: "Campfire",
    ME: rt.wo,
    BE: Oq,
    DE: ja
  };
  go[$r.As] = {
    name: "Bed",
    ME: rt.Ov,
    BE: 0,
    DE: Ps
  };
  go[$r.Wn] = {
    name: "Workbench",
    ME: rt.Fr,
    BE: Js,
    DE: Ko
  };
  go[$r.Ft] = {
    name: "Stone sword",
    ME: rt.Dr,
    BE: Jj,
    DE: lt
  };
  go[$r.Pt] = {
    name: "Stone pick",
    ME: rt.Cr,
    BE: 0,
    DE: fo
  };
  const sh = nj;
  const rh = v;
  const oh = Xn;
  var hh = aj.Math.acos;
  aj.Math.acos = aj.Math.asin;
  aj.Math.asin = hh;
  var gh = aj.Math.cos;
  aj.Math.cos = aj.Math.sin;
  aj.Math.sin = gh;
  go[$r.wr] = {
    name: "Berries bush",
    ME: rt.no,
    BE: sh,
    DE: so
  };
  go[$r.jt] = {
    name: "Gold pick",
    ME: rt.po,
    BE: 0,
    DE: Ps
  };
  go[$r.Rt] = {
    name: "Diamond pick",
    ME: rt.zr,
    BE: sh,
    DE: fn
  };
  go[$r.je] = {
    name: "Wood sword",
    ME: rt.Ab,
    BE: xn,
    DE: 1
  };
  const ch = Ds;
  go[$r.Lt] = {
    name: "Gold sword",
    ME: rt.co,
    BE: Oq,
    DE: ae
  };
  const dh = aq;
  go[$r.Gt] = {
    name: "Diamond sword",
    ME: rt.do,
    BE: 0,
    DE: 1
  };
  const mh = Yo;
  go[$r.Wt] = {
    name: "Wood pick",
    ME: rt.Fo,
    BE: Ka,
    DE: 1
  };
  const uh = ao;
  go[$r.Ta] = {
    name: "Wood wall",
    ME: rt.Ro,
    BE: xn,
    DE: lt
  };
  go[$r.Fa] = {
    name: "Wood spike",
    ME: rt.Go,
    BE: Ea,
    DE: 1
  };
  go[$r.Un] = {
    name: "Cooked meat",
    ME: rt.Uo,
    BE: Ka,
    DE: Ea
  };
  const fh = M;
  go[$r.PD] = {
    name: "Big campfire",
    ME: rt.Yo,
    BE: 0,
    DE: X
  };
  go[$r.vs] = {
    name: "Bandage",
    ME: rt.Bo,
    BE: 0,
    DE: Ps
  };
  go[$r.ja] = {
    name: "Stone wall",
    ME: rt.Pr,
    BE: ke,
    DE: lt
  };
  const ph = G;
  go[$r.Ra] = {
    name: "Gold wall",
    ME: rt.jr,
    BE: 0,
    DE: 1
  };
  const lh = Y;
  const bh = Ke;
  go[$r.La] = {
    name: "Diamond wall",
    ME: rt.Zo,
    BE: Ka,
    DE: fo
  };
  go[$r.UD] = {
    name: "Wood door",
    ME: rt.Gr,
    BE: 0,
    DE: Ps
  };
  const vh = Dn;
  go[$r.qa] = {
    name: "Chest",
    ME: rt.ah,
    BE: xn,
    DE: lt
  };
  go[$r.Wa] = {
    name: "Stone spike",
    ME: rt.xh,
    BE: 0,
    DE: Ps
  };
  const yh = dh;
  const kh = bi;
  go[$r.Na] = {
    name: "Gold spike",
    ME: rt.Ih,
    BE: ke,
    DE: 1
  };
  const Ah = vr;
  const wh = ih;
  const Mh = jn;
  go[$r.Ha] = {
    name: "Diamond spike",
    ME: rt.Fh,
    BE: ke,
    DE: Ps
  };
  go[$r.OD] = {
    name: "Stone door",
    ME: rt.Gh,
    BE: Oq,
    DE: 1
  };
  go[$r.YD] = {
    name: "Gold door",
    ME: rt.Nh,
    BE: sh,
    DE: 1
  };
  const Bh = Yn;
  go[$r.JD] = {
    name: "Diamond door",
    ME: rt.Oh,
    BE: 0,
    DE: Ko
  };
  go[$r.Ht] = {
    name: "Chapka",
    ME: rt.Lh,
    BE: 0,
    DE: Lo
  };
  const Dh = li;
  go[$r.Ut] = {
    name: "Big Chapka",
    ME: rt.Kh,
    BE: sh,
    DE: Ej
  };
  go[$r.Ot] = {
    name: "Wood spear",
    ME: rt.bg,
    BE: Oq,
    DE: 1
  };
  go[$r.Yt] = {
    name: "Stone spear",
    ME: rt.dg,
    BE: xn,
    DE: 1
  };
  const Eh = Ui;
  const Ch = an;
  go[$r.Jt] = {
    name: "Gold spear",
    ME: rt.fg,
    BE: nj,
    DE: 1
  };
  const zh = _r;
  const xh = to;
  go[$r.Kt] = {
    name: "Diamond spear",
    ME: rt.kg,
    BE: 0,
    DE: fo
  };
  go[$r.Xt] = {
    name: "Dragon spear",
    ME: rt.uv,
    BE: ke,
    DE: nj
  };
  const Qh = wo;
  const Sh = so;
  go[$r.Vt] = {
    name: "Dragon spear",
    ME: rt.lv,
    BE: 0,
    DE: 0
  };
  go[$r.Zt] = {
    name: "Crab spear",
    ME: rt.jv,
    BE: ke,
    DE: 1
  };
  go[$r.$s] = {
    name: "Crab loot",
    ME: rt.ks,
    BE: xn,
    DE: 0
  };
  go[$r.TD] = {
    name: "Furnace",
    ME: rt.Bg,
    BE: Oq,
    DE: 1
  };
  const Ih = Oi;
  const _h = lo;
  const Fh = ta;
  const Ph = Fe;
  const Th = hn;
  go[$r.ne] = {
    name: "Explorer hat",
    ME: rt.Tg,
    BE: 0,
    DE: Lo
  };
  go[$r.ae] = {
    name: "Pirate hat",
    ME: rt.Lg,
    BE: 0,
    DE: Lo
  };
  go[$r.pn] = {
    name: "Flower hat",
    ME: rt.NB,
    BE: 0,
    DE: fo
  };
  go[$r.ln] = {
    name: "Fur hat",
    ME: rt.OB,
    BE: 0,
    DE: 1
  };
  go[$r.Re] = {
    name: "Wood helmet",
    ME: rt.bb,
    BE: Sh,
    DE: 1
  };
  go[$r.se] = {
    name: "Stone helmet",
    ME: rt.Ug,
    BE: 0,
    DE: ja
  };
  go[$r.re] = {
    name: "Gold helmet",
    ME: rt.Jg,
    BE: Ka,
    DE: Ko
  };
  go[$r.oe] = {
    name: "Diamond helmet",
    ME: rt.Vg,
    BE: Ea,
    DE: 1
  };
  const jh = oe;
  go[$r.he] = {
    name: "Book",
    ME: rt.tc,
    BE: Jj,
    DE: 1
  };
  go[$r.Jn] = {
    name: "Paper",
    ME: rt.ac,
    BE: xn,
    DE: 0
  };
  const Rh = k;
  const Lh = ae;
  const Gh = B;
  const qh = Jj;
  go[$r.ge] = {
    name: "Bag",
    ME: rt.Th,
    BE: nj,
    DE: X
  };
  go[$r.ce] = {
    name: "Amethyst sword",
    ME: rt.yc,
    BE: Ka,
    DE: Ps
  };
  go[$r.de] = {
    name: "Amethyst pick",
    ME: rt.Mc,
    BE: 0,
    DE: 1
  };
  go[$r.ue] = {
    name: "Amethyst spear",
    ME: rt.Tc,
    BE: Oq,
    DE: 1
  };
  go[$r.pe] = {
    name: "Stone hammer",
    ME: rt.qc,
    BE: 0,
    DE: 1
  };
  go[$r.le] = {
    name: "Gold hammer",
    ME: rt.Hc,
    BE: Sh,
    DE: 1
  };
  const Wh = Jq;
  const Nh = ln;
  go[$r.be] = {
    name: "Diamond hammer",
    ME: rt.Yc,
    BE: Js,
    DE: X
  };
  go[$r.ve] = {
    name: "Amethyst hammer",
    ME: rt.Xc,
    BE: Sh,
    DE: 1
  };
  const Hh = Wn;
  go[$r.ye] = {
    name: "Reidite hammer",
    ME: rt.$c,
    BE: 0,
    DE: 1
  };
  const Uh = C;
  const Oh = Nn;
  go[$r.Xn] = {
    name: "Amethyst wall",
    ME: rt.nd,
    BE: 0,
    DE: 1
  };
  const Yh = Gi;
  go[$r.Vn] = {
    name: "Amethyst spike",
    ME: rt.rd,
    BE: Ea,
    DE: lt
  };
  go[$r.KD] = {
    name: "Amethyst door",
    ME: rt.hd,
    BE: Ea,
    DE: ae
  };
  go[$r.ke] = {
    name: "Cap & scarf",
    ME: rt.fd,
    BE: 0,
    DE: X
  };
  go[$r.Aa] = {
    name: "Blue cord",
    ME: rt.Dd,
    BE: 0,
    DE: sh
  };
  go[$r.wa] = {
    name: "Lock",
    ME: rt.xd,
    BE: 0,
    DE: Ko
  };
  go[$r.Da] = {
    name: "Resurrection",
    ME: rt.Gd,
    BE: 0,
    DE: Ej
  };
  const Jh = Wh;
  go[$r.Ia] = {
    name: "Lockpick",
    ME: rt.Nd,
    BE: Sh,
    DE: 1
  };
  go[$r._a] = {
    name: "Totem",
    ME: rt.um,
    BE: 0,
    DE: 1
  };
  const Kh = hr;
  go[$r.Me] = {
    name: "Amethyst helmet",
    ME: rt.Zd,
    BE: 0,
    DE: lt
  };
  go[$r.De] = {
    name: "Super hammer",
    ME: rt.om,
    BE: ke,
    DE: 1
  };
  const Xh = 256;
  const Vh = Fe;
  go[$r.$n] = {
    name: "Bridge",
    ME: rt.hu,
    BE: 1,
    DE: Ej
  };
  go[$r.Hs] = {
    name: "Wood Tower",
    ME: rt.XB,
    BE: 1,
    DE: fn
  };
  const Zh = Qh;
  go[$r.ta] = {
    name: "Bottle full",
    ME: rt.mp,
    BE: 0,
    DE: sh
  };
  const $h = wj;
  const ig = Ar;
  const tg = b;
  go[$r.ea] = {
    name: "Bottle empty",
    ME: rt.pu,
    BE: Ka,
    DE: qh
  };
  const eg = ft;
  const ng = os;
  go[$r.Ee] = {
    name: "Stone shovel",
    ME: rt.wu,
    BE: 0,
    DE: 1
  };
  go[$r.aa] = {
    name: "Watering can",
    ME: rt.Su,
    BE: so,
    DE: Ka
  };
  const ag = ei;
  go[$r.ra] = {
    name: "Wheat",
    ME: rt.Tu,
    BE: 0,
    DE: 0
  };
  const sg = Qo;
  const rg = An;
  const og = ao;
  go[$r.oa] = {
    name: "Cookie",
    ME: rt.Lu,
    BE: Jj,
    DE: 0
  };
  const hg = as;
  go[$r.ga] = {
    name: "Windmill",
    ME: rt.Yu,
    BE: Sh,
    DE: 1
  };
  go[$r.Ce] = {
    name: "Super diving suit",
    ME: rt.Vu,
    BE: Sh,
    DE: 1
  };
  go[$r.ze] = {
    name: "Diving mask",
    ME: rt.if,
    BE: qh,
    DE: Ko
  };
  const gg = as;
  const cg = Bs;
  const dg = pa;
  const mg = Fn;
  const ug = A;
  go[$r.xe] = {
    name: "Watering can full",
    ME: rt.af,
    BE: 0,
    DE: nj
  };
  go[$r.ca] = {
    name: "Cake",
    ME: rt.df,
    BE: Jj,
    DE: Oq
  };
  const fg = Po;
  go[$r.ma] = {
    name: "Foodfish cooked",
    ME: rt.bf,
    BE: 0,
    DE: 0
  };
  go[$r.pa] = {
    name: "Plot",
    ME: rt.Pf,
    BE: 1,
    DE: 1
  };
  go[$r.HD] = {
    name: "Bread",
    ME: rt.qf,
    BE: sh,
    DE: 0
  };
  const pg = Vr;
  const lg = uj;
  go[$r.XD] = {
    name: "Bottle full (with ice)",
    ME: rt.EE,
    BE: 0,
    DE: X
  };
  go[$r.VD] = {
    name: "Bottle full (with well)",
    ME: rt.CE,
    BE: 0,
    DE: 1
  };
  const bg = aq;
  const vg = rg;
  const yg = Es;
  go[$r.Qe] = {
    name: "Gold shovel",
    ME: rt.Vf,
    BE: sh,
    DE: 1
  };
  go[$r.Se] = {
    name: "Diamond shovel",
    ME: rt.tp,
    BE: so,
    DE: 1
  };
  const kg = Uo;
  go[$r.Ie] = {
    name: "Amethyst shovel",
    ME: rt.np,
    BE: 0,
    DE: 1
  };
  go[$r.Pe] = {
    name: "Spanner",
    ME: rt.hp,
    BE: Ka,
    DE: 1
  };
  go[$r.Te] = {
    name: "Machete",
    ME: rt.dp,
    BE: 0,
    DE: 1
  };
  go[$r.ZD] = {
    name: "Bread oven",
    ME: rt.pp,
    BE: 0,
    DE: fi
  };
  const Ag = he;
  go[$r.$D] = {
    name: "Sandwich",
    ME: rt.Cp,
    BE: 0,
    DE: 0
  };
  go[$r.Le] = {
    name: "Dragon helmet",
    ME: rt.Sp,
    BE: ke,
    DE: 0
  };
  const wg = Lh;
  const Mg = uo;
  const Bg = Wn;
  const Dg = is;
  const Eg = Ws;
  const Cg = Te;
  const zg = Nq;
  const xg = li;
  go[$r.Ge] = {
    name: "Dragon helmet",
    ME: rt.Fp,
    BE: Jj,
    DE: 0
  };
  go[$r.vn] = {
    name: "Witch",
    ME: rt.jp,
    BE: xn,
    DE: sh
  };
  go[$r.yn] = {
    name: "Nimbus",
    ME: rt.Gp,
    BE: 0,
    DE: Ka
  };
  const Qg = Us;
  go[$r.kn] = {
    name: "Wand1",
    ME: rt.Np,
    BE: xn,
    DE: qh
  };
  const Sg = Zo;
  const Ig = xr;
  go[$r.An] = {
    name: "Wand2",
    ME: rt.Op,
    BE: 0,
    DE: nj
  };
  go[$r.We] = {
    name: "Dragon sword",
    ME: rt.wm,
    BE: 0,
    DE: 0
  };
  const _g = Rh;
  go[$r.Ne] = {
    name: "Dragon sword",
    ME: rt.Dm,
    BE: Oq,
    DE: so
  };
  const Fg = _h;
  const Pg = xg;
  go[$r.Ve] = {
    name: "Wood shield",
    ME: rt.$B,
    BE: Sh,
    DE: Ps
  };
  go[$r.Ze] = {
    name: "Stone shield",
    ME: rt.eD,
    BE: Sh,
    DE: 1
  };
  go[$r.$e] = {
    name: "Gold shield",
    ME: rt.sD,
    BE: 0,
    DE: fn
  };
  const Tg = Te;
  const jg = Xe;
  const Rg = Xn;
  go[$r.tn] = {
    name: "Diamond shield",
    ME: rt.hD,
    BE: 0,
    DE: 1
  };
  go[$r.en] = {
    name: "Amethyst shield",
    ME: rt.dD,
    BE: nj,
    DE: lt
  };
  const Lg = Qo;
  go[$r.nn] = {
    name: "Reidite shield",
    ME: rt.fD,
    BE: 0,
    DE: ae
  };
  go[$r.wn] = {
    name: "Wood axe",
    ME: rt.bD,
    BE: Sh,
    DE: Ps
  };
  const Gg = oo;
  const qg = Io;
  const Wg = aq;
  const Ng = Oq;
  go[$r.Mn] = {
    name: "Stone axe",
    ME: rt.kD,
    BE: nj,
    DE: 1
  };
  go[$r.Bn] = {
    name: "Gold axe",
    ME: rt.MD,
    BE: 0,
    DE: 1
  };
  const Hg = xh;
  go[$r.Dn] = {
    name: "Diamond axe",
    ME: rt.ED,
    BE: 0,
    DE: 1
  };
  go[$r.En] = {
    name: "Amethyst axe",
    ME: rt.xD,
    BE: xn,
    DE: ae
  };
  go[$r.Cn] = {
    name: "Reidite axe",
    ME: rt.ID,
    BE: 0,
    DE: 1
  };
  go[$r.He] = {
    name: "Wood bow",
    ME: rt.zm,
    BE: Js,
    DE: fn
  };
  go[$r.Ue] = {
    name: "Stone bow",
    ME: rt.Sm,
    BE: 0,
    DE: 1
  };
  go[$r.Oe] = {
    name: "Gold bow",
    ME: rt.Fm,
    BE: 0,
    DE: Ej
  };
  go[$r.Ye] = {
    name: "Diamond bow",
    ME: rt.jm,
    BE: 0,
    DE: 1
  };
  go[$r.Je] = {
    name: "Amethyst bow",
    ME: rt.Gm,
    BE: so,
    DE: 1
  };
  const Ug = Pq;
  const Og = Ch;
  go[$r.Ke] = {
    name: "Reidite bow",
    ME: rt.Nm,
    BE: 0,
    DE: fi
  };
  const Yg = 256;
  go[$r.Xe] = {
    name: "Dragon bow",
    ME: rt.Om,
    BE: nj,
    DE: so
  };
  const Jg = Ch;
  go[$r.an] = {
    name: "Crown of life",
    ME: rt.tl,
    BE: Ka,
    DE: 0
  };
  const Kg = Eg;
  go[$r.rE] = {
    name: "Gem of life",
    ME: rt.Xa,
    BE: so,
    DE: Ka
  };
  go[$r.os] = {
    name: "Orb of the dragon",
    ME: rt.Mr,
    BE: Jj,
    DE: 0
  };
  const Xg = on;
  go[$r.gs] = {
    name: "Orb of the dragon",
    ME: rt.Br,
    BE: ke,
    DE: so
  };
  const Vg = es;
  go[$r.rs] = {
    name: "Cube of the dragon",
    ME: rt.Jp,
    BE: 0,
    DE: 0
  };
  const Zg = _e;
  const $g = No;
  go[$r.hs] = {
    name: "Cube of the dragon",
    ME: rt.Xp,
    BE: sh,
    DE: 0
  };
  const ic = co;
  go[$r.sn] = {
    name: "Crown of luck",
    ME: rt.sl,
    BE: 0,
    DE: Ea
  };
  const tc = ft;
  go[$r.oE] = {
    name: "Gem of luck",
    ME: rt.Va,
    BE: Oq,
    DE: Ng
  };
  const ec = Yh;
  go[$r.rn] = {
    name: "Crown of the angel",
    ME: rt.ul,
    BE: 0,
    DE: 0
  };
  go[$r.hE] = {
    name: "Gem of the angel",
    ME: rt.Ka,
    BE: qh,
    DE: 0
  };
  const nc = $n;
  go[$r.Ma] = {
    name: "Dragon heart",
    ME: rt.Sd,
    BE: so,
    DE: ke
  };
  const ac = tr;
  go[$r.Ba] = {
    name: "Lava heart",
    ME: rt._d,
    BE: nj,
    DE: Ea
  };
  go[$r.dn] = {
    name: "Hood",
    ME: rt.dl,
    BE: so,
    DE: 1
  };
  go[$r.mn] = {
    name: "Peasant",
    ME: rt.pl,
    BE: qh,
    DE: 1
  };
  const sc = Os;
  go[$r.fn] = {
    name: "Winter peasant",
    ME: rt.kl,
    BE: Ka,
    DE: 0
  };
  go[$r.un] = {
    name: "Winter hood",
    ME: rt.Ml,
    BE: 0,
    DE: Ng
  };
  go[$r.iE] = {
    name: "Bucket full",
    ME: rt.Cl,
    BE: xn,
    DE: Ng
  };
  const rc = or;
  go[$r.tE] = {
    name: "Bucket empty",
    ME: rt.zl,
    BE: 0,
    DE: Ej
  };
  go[$r.eE] = {
    name: "Well",
    ME: rt.Fl,
    BE: ke,
    DE: Lo
  };
  const oc = To;
  const hc = Fo;
  const gc = rn;
  const cc = wo;
  go[$r.ss] = {
    name: "Sign",
    ME: rt.Wl,
    BE: Ng,
    DE: 1
  };
  go[$r.jD] = {
    name: "Pumpkin Seed",
    ME: rt.Zl,
    BE: xn,
    DE: 0
  };
  go[$r.RD] = {
    name: "Garlic Seed",
    ME: rt.Eb,
    BE: 0,
    DE: sh
  };
  const dc = Dr;
  go[$r.LD] = {
    name: "Thorbushes Seed",
    ME: rt.jb,
    BE: Ka,
    DE: 0
  };
  go[$r.us] = {
    name: "Roof",
    ME: rt.Fb,
    BE: 1,
    DE: fo
  };
  const mc = ag;
  go[$r.qe] = {
    name: "Crab Crown",
    ME: rt.Kv,
    BE: xn,
    DE: 1
  };
  go[$r.GD] = {
    name: "Carrot Seed",
    ME: rt.Ry,
    BE: 0,
    DE: 0
  };
  go[$r.qD] = {
    name: "Tomato Seed",
    ME: rt.Jy,
    BE: 0,
    DE: Ng
  };
  go[$r.WD] = {
    name: "Watermelon Seed",
    ME: rt.tk,
    BE: Oq,
    DE: xn
  };
  const uc = Xg;
  go[$r.ND] = {
    name: "Aloe Vera Seed",
    ME: rt.bk,
    BE: 0,
    DE: Oq
  };
  const fc = yq;
  const pc = Yn;
  go[$r.hn] = {
    name: "Cap",
    ME: rt.oM,
    BE: Ka,
    DE: Ps
  };
  const lc = ss;
  go[$r.gn] = {
    name: "Turban",
    ME: rt.cM,
    BE: xn,
    DE: Ko
  };
  const bc = Lg;
  const vc = lg;
  const yc = S;
  const kc = tq;
  const Ac = _n;
  const wc = Cg;
  const Mc = ja;
  const Bc = hr;
  go[$r.cn] = {
    name: "Pilot Helmet",
    ME: rt.Wg,
    BE: 0,
    DE: 1
  };
  go[$r.Ea] = {
    name: "Emerald Machine",
    ME: rt.mB,
    BE: 0,
    DE: Jj
  };
  const Dc = Gr;
  const Ec = xr;
  const Cc = aa;
  go[$r.Ca] = {
    name: "Emerald Machine",
    ME: rt.lB,
    BE: 0,
    DE: 1
  };
  go[$r.za] = {
    name: "Emerald Machine",
    ME: rt.kB,
    BE: 0,
    DE: fn
  };
  const zc = Fo;
  go[$r.xa] = {
    name: "Emerald Machine",
    ME: rt.BB,
    BE: 0,
    DE: 1
  };
  go[$r.Qa] = {
    name: "Emerald Machine",
    ME: rt.zB,
    BE: 0,
    DE: 1
  };
  const xc = ur;
  go[$r.Sa] = {
    name: "Emerald Machine",
    ME: rt.IB,
    BE: qh,
    DE: X
  };
  const Qc = Xq;
  const Sc = Yg;
  go[$r._e] = {
    name: "Pitchfork",
    ME: rt.mk,
    BE: 0,
    DE: Mc
  };
  go[$r.Ps] = {
    name: "Wood Door Spike",
    ME: rt.Dk,
    BE: Ka,
    DE: ae
  };
  const Ic = ja;
  const _c = de;
  go[$r.Ts] = {
    name: "Stone Door Spike",
    ME: rt.zk,
    BE: so,
    DE: 1
  };
  go[$r.js] = {
    name: "Gold Door Spike",
    ME: rt.Sk,
    BE: so,
    DE: Lh
  };
  go[$r.Rs] = {
    name: "Diamond Door Spike",
    ME: rt.Fk,
    BE: Sh,
    DE: 1
  };
  const Fc = ft;
  go[$r.Ls] = {
    name: "Amethyst Door Spike",
    ME: rt.jk,
    BE: qh,
    DE: 1
  };
  go[$r.ie] = {
    name: "Diamond Fire Protection ",
    ME: rt.oy,
    BE: 0,
    DE: ae
  };
  go[$r.te] = {
    name: "Amethyst Fire Protection ",
    ME: rt.uy,
    BE: nj,
    DE: 1
  };
  go[$r.ee] = {
    name: "Amethyst Fire Protection ",
    ME: rt.vy,
    BE: 0,
    DE: X
  };
  const Pc = Zs;
  const Tc = Me;
  go[$r.$t] = {
    name: "Reidite Sword",
    ME: rt.Ay,
    BE: so,
    DE: fi
  };
  go[$r.fe] = {
    name: "Reidite Spear",
    ME: rt.Iy,
    BE: Oq,
    DE: 1
  };
  go[$r.Be] = {
    name: "Reidite Helmet",
    ME: rt.Py,
    BE: 0,
    DE: X
  };
  go[$r.Ns] = {
    name: "Reidite Door Spike",
    ME: rt.Gk,
    BE: 0,
    DE: 1
  };
  go[$r.qs] = {
    name: "Reidite Door",
    ME: rt.Nk,
    BE: 0,
    DE: Ej
  };
  const jc = Zo;
  go[$r.Ws] = {
    name: "Reidite Spike",
    ME: rt.Ok,
    BE: xn,
    DE: 1
  };
  go[$r.Gs] = {
    name: "Reidite Wall",
    ME: rt.Kk,
    BE: 0,
    DE: fi
  };
  go[$r.me] = {
    name: "Reidite pick",
    ME: rt.iA,
    BE: 0,
    DE: fi
  };
  go[$r.Os] = {
    name: "Boat",
    ME: rt.hA,
    BE: so,
    DE: 1
  };
  const Rc = Pq;
  go[$r.Ys] = {
    name: "Sled",
    ME: rt.dA,
    BE: 0,
    DE: Ko
  };
  const Lc = uc;
  const Gc = Ng;
  const qc = lg;
  go[$r.bn] = {
    name: "Saddle",
    ME: rt.xA,
    BE: xn,
    DE: ae
  };
  go[$r.Xs] = {
    name: "Mount Boar",
    ME: rt.IA,
    BE: 0,
    DE: 0
  };
  go[$r.ir] = {
    name: "Mount King Crab",
    ME: rt.oB,
    BE: Ng,
    DE: Gc
  };
  go[$r.tr] = {
    name: "Mount Baby Dragon",
    ME: rt.ow,
    BE: sh,
    DE: Sh
  };
  go[$r.er] = {
    name: "Mount Baby Lava",
    ME: rt.ww,
    BE: Js,
    DE: 0
  };
  go[$r.ar] = {
    name: "Mount Hawk",
    ME: rt.Tw,
    BE: 0,
    DE: 0
  };
  const Wc = Qe;
  go[$r.sr] = {
    name: "Plane",
    ME: rt.Gw,
    BE: 0,
    DE: nj
  };
  go[$r.Fe] = {
    name: "Pitchfork 2",
    ME: rt.pk,
    BE: 0,
    DE: Ka
  };
  go[$r.yr] = {
    name: "Baby Mammoth",
    ME: rt.qB,
    BE: 0,
    DE: 0
  };
  var Nc = Rj;
  var st = [{
    r: [[$r.aE, 25], [$r.nE, 5]],
    w: 0,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.oo,
    zE: $r.oo,
    time: Ps / 5,
    xE: eo.yE
  }, {
    r: [[$r.oo, Mc], [$r.aE, 35], [$r.nE, 10]],
    w: sh,
    f: sh,
    oi: 0,
    e: Ka,
    id: Xr.PD,
    zE: $r.PD,
    time: ja / dh,
    xE: eo.yE
  }, {
    r: [[$r.aE, 150], [$r.nE, 50], [$r.Ln, Ss]],
    w: Lh,
    f: 0,
    oi: ke,
    e: 0,
    id: Xr.TD,
    zE: $r.TD,
    time: ja / po,
    xE: eo.yE
  }, {
    r: [[$r.aE, ur], [$r.nE, 10]],
    w: 0,
    f: 0,
    oi: Js,
    e: 0,
    id: Xr.Wn,
    zE: $r.Wn,
    time: fn / 6,
    xE: eo.yE
  }, {
    r: [[$r.aE, 10]],
    w: sh,
    f: 0,
    oi: qh,
    e: Ka,
    id: Xr.Wt,
    zE: $r.Wt,
    time: 1 / on,
    xE: eo.wE
  }, {
    r: [[$r.Wt, 1], [$r.aE, 50], [$r.nE, 15]],
    w: wg,
    f: 0,
    oi: Ka,
    e: 0,
    id: Xr.Pt,
    zE: $r.Pt,
    time: wg / q,
    xE: eo.wE
  }, {
    r: [[$r.aE, 40], [$r.Ln, 20], [$r.nE, 30], [$r.Pt, ja]],
    w: 1,
    f: Oq,
    oi: 0,
    e: 0,
    id: Xr.jt,
    zE: $r.jt,
    time: 1 / 12,
    xE: eo.wE
  }, {
    r: [[$r.Gn, 20], [$r.Ln, 50], [$r.nE, 80], [$r.jt, 1]],
    w: 1,
    f: 0,
    oi: Oq,
    e: 0,
    id: Xr.Rt,
    zE: $r.Rt,
    time: 0.05,
    xE: eo.wE
  }, {
    r: [[$r.Gn, 40], [$r.Ln, 60], [$r.Kn, 30], [$r.Rt, 1]],
    w: 1,
    f: Ea,
    oi: 0,
    e: Oq,
    id: Xr.de,
    zE: $r.de,
    time: Ej / 60,
    xE: eo.wE
  }, {
    r: [[$r.Kn, 30], [$r.Gn, 40], [$r.Ds, 30], [$r.de, Lo]],
    w: Ko,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.me,
    zE: $r.me,
    time: fn / 90,
    xE: eo.wE
  }, {
    r: [[$r.aE, 90], [$r.nE, 50]],
    w: 1,
    f: nj,
    oi: xn,
    e: 0,
    id: Xr.pe,
    zE: $r.pe,
    time: 0.1,
    xE: eo.wE
  }, {
    r: [[$r.aE, 160], [$r.nE, 120], [$r.Ln, 80], [$r.pe, 1]],
    w: Lo,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.le,
    zE: $r.le,
    time: Ko / 15,
    xE: eo.wE
  }, {
    r: [[$r.Gn, 80], [$r.nE, 200], [$r.Ln, 150], [$r.le, 1]],
    w: fi,
    f: 0,
    oi: 0,
    e: sh,
    id: Xr.be,
    zE: $r.be,
    time: ae / yg,
    xE: eo.wE
  }, {
    r: [[$r.Gn, 160], [$r.Kn, 60], [$r.Ln, 250], [$r.be, Ej]],
    w: 1,
    f: Sh,
    oi: Gc,
    e: 0,
    id: Xr.ve,
    zE: $r.ve,
    time: 0.016666666666666666,
    xE: eo.wE
  }, {
    r: [[$r.Kn, 160], [$r.Ds, 60], [$r.Gn, 250], [$r.ve, fn]],
    w: 1,
    f: so,
    oi: Sh,
    e: 0,
    id: Xr.ye,
    zE: $r.ye,
    time: 0.011111111111111112,
    xE: eo.wE
  }, {
    r: [[$r.ye, 1], [$r.ta, ae], [$r.na, 1], [$r.ua, 10], [$r.Kn, 20]],
    w: 1,
    f: ja,
    oi: so,
    e: 0,
    id: Xr.De,
    zE: $r.De,
    time: ae / 120,
    xE: eo.wE
  }, {
    r: [[$r.aE, 30], [$r.nE, 15]],
    w: 1,
    f: 0,
    oi: Oq,
    e: 0,
    id: Xr.Ee,
    zE: $r.Ee,
    time: Lh / 5,
    xE: eo.wE
  }, {
    r: [[$r.Ee, 1], [$r.Ln, 20], [$r.nE, 30], [$r.aE, 40]],
    w: 1,
    f: 0,
    oi: Js,
    e: Jj,
    id: Xr.Qe,
    zE: $r.Qe,
    time: 0.1,
    xE: eo.wE
  }, {
    r: [[$r.Qe, Ko], [$r.Gn, Es], [$r.Ln, 50], [$r.nE, 80]],
    w: 1,
    f: Gc,
    oi: 0,
    e: xn,
    id: Xr.Se,
    zE: $r.Se,
    time: Lh / 20,
    xE: eo.wE
  }, {
    r: [[$r.Se, 1], [$r.Ln, 60], [$r.Kn, 30], [$r.Gn, 40]],
    w: 1,
    f: Ea,
    oi: Ea,
    e: 0,
    id: Xr.Ie,
    zE: $r.Ie,
    time: 0.025,
    xE: eo.wE
  }, {
    r: [[$r.aE, 50]],
    w: 1,
    f: 0,
    oi: ke,
    e: 0,
    id: Xr.aa,
    zE: $r.aa,
    time: 0.2,
    xE: eo.wE
  }, {
    r: [[$r.aa, 1]],
    w: sh,
    f: 0,
    oi: 1,
    e: Sh,
    id: Xr.xe,
    zE: $r.xe,
    time: fo / 5,
    xE: eo.wE
  }, {
    r: [[$r.aE, wr], [$r.nE, 50]],
    w: fo,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr._e,
    zE: $r._e,
    time: Ps / 10,
    xE: eo.wE
  }, {
    r: [[$r._e, fi], [$r.uE, 1]],
    w: 1,
    f: Gc,
    oi: qh,
    e: Gc,
    id: Xr.Fe,
    zE: $r.Fe,
    time: Ej / 60,
    xE: eo.wE
  }, {
    r: [[$r.Jn, k], [$r.Pa, 4], [$r.Ja, 4]],
    w: 1,
    f: xn,
    oi: 0,
    e: Ng,
    id: Xr.he,
    zE: $r.he,
    time: 1 / 15,
    xE: eo.wE
  }, {
    r: [[$r.aE, 40]],
    w: 0,
    f: Jj,
    oi: 0,
    e: 0,
    id: Xr.Ot,
    zE: $r.Ot,
    time: 1 / Co,
    xE: eo.vE
  }, {
    r: [[$r.Ot, Ps], [$r.aE, 60], [$r.nE, 10]],
    w: 1,
    f: 0,
    oi: qh,
    e: 0,
    id: Xr.Yt,
    zE: $r.Yt,
    time: 0.1,
    xE: eo.vE
  }, {
    r: [[$r.aE, 80], [$r.Ln, 30], [$r.nE, 30], [$r.Yt, ja]],
    w: Ic,
    f: Sh,
    oi: 0,
    e: 0,
    id: Xr.Jt,
    zE: $r.Jt,
    xE: eo.vE,
    time: ja / jg
  }, {
    r: [[$r.aE, 200], [$r.Gn, 40], [$r.Ln, 60], [$r.Jt, wg]],
    w: 1,
    f: 0,
    oi: Js,
    e: 0,
    id: Xr.Kt,
    zE: $r.Kt,
    time: 0.03333333333333333,
    xE: eo.vE
  }, {
    r: [[$r.Kn, 40], [$r.Gn, 80], [$r.Ln, 90], [$r.Kt, ae]],
    w: 1,
    f: qh,
    oi: 0,
    e: 0,
    id: Xr.ue,
    zE: $r.ue,
    time: 0.016666666666666666,
    xE: eo.vE
  }, {
    r: [[$r.Ds, 40], [$r.Kn, 80], [$r.Gn, 90], [$r.ue, 1]],
    w: 1,
    f: xn,
    oi: 0,
    e: Ng,
    id: Xr.fe,
    zE: $r.fe,
    time: Ps / 90,
    xE: eo.vE
  }, {
    r: [[$r.Aa, 20], [$r.os, Ic], [$r.Kn, kh], [$r.Ma, 3]],
    w: fi,
    f: fo,
    oi: 1,
    e: 0,
    id: Xr.Xt,
    zE: $r.Xt,
    time: Ej / 120,
    xE: eo.vE
  }, {
    r: [[$r.Xt, wg], [$r.gs, 1], [$r.Ds, Ns], [$r.Ba, En]],
    w: lt,
    f: 1,
    oi: 1,
    e: 0,
    id: Xr.Vt,
    zE: $r.Vt,
    time: ae / 200,
    xE: eo.vE
  }, {
    r: [[$r.Ot, ja], [$r.$s, 5], [$r.Pa, 6]],
    w: lt,
    f: 0,
    oi: Gc,
    e: 0,
    id: Xr.Zt,
    zE: $r.Zt,
    time: fi / 30,
    xE: eo.vE
  }, {
    r: [[$r.aE, 30]],
    w: Ea,
    f: 0,
    oi: so,
    e: Ka,
    id: Xr.je,
    zE: $r.je,
    time: 1 / Wg,
    xE: eo.vE
  }, {
    r: [[$r.aE, 50], [$r.nE, 25], [$r.je, 1]],
    w: 1,
    f: 0,
    oi: 0,
    e: Js,
    id: Xr.Ft,
    zE: $r.Ft,
    time: 1 / as,
    xE: eo.vE
  }, {
    r: [[$r.aE, 60], [$r.Ln, 40], [$r.nE, 50], [$r.Ft, X]],
    w: 1,
    f: nj,
    oi: Sh,
    e: 0,
    id: Xr.Lt,
    zE: $r.Lt,
    time: X / 20,
    xE: eo.vE
  }, {
    r: [[$r.Gn, 40], [$r.Ln, 60], [$r.nE, 80], [$r.Lt, 1]],
    w: lt,
    f: sh,
    oi: qh,
    e: 0,
    id: Xr.Gt,
    zE: $r.Gt,
    time: 0.03333333333333333,
    xE: eo.vE
  }, {
    r: [[$r.Gn, 60], [$r.Ln, Ns], [$r.Kn, 40], [$r.Gt, ja]],
    w: Ic,
    f: 0,
    oi: nj,
    e: 0,
    id: Xr.ce,
    zE: $r.ce,
    time: 1 / 60,
    xE: eo.vE
  }, {
    r: [[$r.Gn, 100], [$r.Kn, 80], [$r.Ds, 40], [$r.ce, wg]],
    w: Lo,
    f: nj,
    oi: Ka,
    e: sh,
    id: Xr.$t,
    zE: $r.$t,
    time: Ic / 90,
    xE: eo.vE
  }, {
    r: [[$r.Rn, 3]],
    w: 0,
    f: fo,
    oi: qh,
    e: Js,
    id: Xr.wr,
    zE: $r.wr,
    time: 0.2,
    xE: eo.AE
  }, {
    r: [[$r.ha, fa]],
    w: 0,
    f: wg,
    oi: Sh,
    e: 0,
    id: Xr.ra,
    zE: $r.ra,
    time: 1 / dh,
    xE: eo.AE
  }, {
    r: [[$r.ds, 8]],
    w: Ea,
    f: 1,
    oi: Js,
    e: 0,
    id: Xr.jD,
    zE: $r.jD,
    time: 1 / Tc,
    xE: eo.AE
  }, {
    r: [[$r.ps, ir]],
    w: 0,
    f: 1,
    oi: Js,
    e: Sh,
    id: Xr.RD,
    zE: $r.RD,
    time: Mc / br,
    xE: eo.AE
  }, {
    r: [[$r.bs, qs]],
    w: 0,
    f: 1,
    oi: Sh,
    e: nj,
    id: Xr.LD,
    zE: $r.LD,
    time: 1 / Co,
    xE: eo.AE
  }, {
    r: [[$r.zs, 8]],
    w: 0,
    f: 1,
    oi: 0,
    e: Gc,
    id: Xr.GD,
    zE: $r.GD,
    time: fi / 5,
    xE: eo.AE
  }, {
    r: [[$r.Qs, Fg]],
    w: 0,
    f: 1,
    oi: 0,
    e: Ka,
    id: Xr.qD,
    zE: $r.qD,
    time: Ps / aq,
    xE: eo.AE
  }, {
    r: [[$r.Is, zh]],
    w: 0,
    f: ja,
    oi: 0,
    e: so,
    id: Xr.WD,
    zE: $r.WD,
    time: ae / 5,
    xE: eo.AE
  }, {
    r: [[$r.gr, we]],
    w: 0,
    f: Ic,
    oi: 0,
    e: 0,
    id: Xr.ND,
    zE: $r.ND,
    time: fn / Tc,
    xE: eo.AE
  }, {
    r: [[$r.Hn, ja]],
    w: ke,
    f: 1,
    oi: 0,
    e: 0,
    id: Xr.Un,
    zE: $r.Un,
    time: 0.2,
    xE: eo.AE
  }, {
    r: [[$r.da, 1]],
    w: Gc,
    f: lt,
    oi: Ka,
    e: 0,
    id: Xr.ma,
    zE: $r.ma,
    time: Ej / 3,
    xE: eo.AE
  }, {
    r: [[$r.sa, Sr]],
    w: 0,
    f: 1,
    oi: 0,
    e: 0,
    id: Xr.HD,
    zE: $r.HD,
    time: 0.3333333333333333,
    xE: eo.AE
  }, {
    r: [[$r.sa, 3], [$r.Rn, fi]],
    w: 0,
    f: 1,
    oi: 0,
    e: Ea,
    id: Xr.oa,
    zE: $r.oa,
    time: Ps / 3,
    xE: eo.AE
  }, {
    r: [[$r.sa, 5], [$r.Rn, 2], [$r.sE, 2]],
    w: 0,
    f: Lo,
    oi: Sh,
    e: xn,
    id: Xr.ca,
    zE: $r.ca,
    time: ja / Wg,
    xE: eo.AE
  }, {
    r: [[$r.Pa, 2]],
    w: 1,
    f: Gc,
    oi: Js,
    e: 0,
    id: Xr.vs,
    zE: $r.vs,
    time: Ko / Gj,
    xE: eo.yE
  }, {
    r: [[$r.aE, zj]],
    w: 1,
    f: nj,
    oi: sh,
    e: sh,
    id: Xr.Ta,
    zE: $r.Ta,
    time: 1 / Co,
    xE: eo.bE
  }, {
    r: [[$r.Ta, 1], [$r.nE, mh]],
    w: 1,
    f: 0,
    oi: 0,
    e: Oq,
    id: Xr.ja,
    zE: $r.ja,
    time: 0.2,
    xE: eo.bE
  }, {
    r: [[$r.ja, 1], [$r.Ln, 14]],
    w: fo,
    f: Js,
    oi: 0,
    e: 0,
    id: Xr.Ra,
    zE: $r.Ra,
    time: 0.2,
    xE: eo.bE
  }, {
    r: [[$r.Ra, fo], [$r.Gn, aa]],
    w: 1,
    f: ke,
    oi: 0,
    e: Oq,
    id: Xr.La,
    zE: $r.La,
    time: 1 / Y,
    xE: eo.bE
  }, {
    r: [[$r.La, 1], [$r.Kn, qs]],
    w: 1,
    f: 0,
    oi: 0,
    e: Oq,
    id: Xr.Xn,
    zE: $r.Xn,
    time: Ps / yh,
    xE: eo.bE
  }, {
    r: [[$r.Xn, ae], [$r.Ds, 5]],
    w: lt,
    f: Oq,
    oi: Ka,
    e: 0,
    id: Xr.Gs,
    zE: $r.Gs,
    time: 0.2,
    xE: eo.bE
  }, {
    r: [[$r.aE, 30]],
    w: 1,
    f: Oq,
    oi: 0,
    e: xn,
    id: Xr.UD,
    zE: $r.UD,
    time: X / Ca,
    xE: eo.bE
  }, {
    r: [[$r.UD, X], [$r.nE, 27]],
    w: Ps,
    f: 0,
    oi: sh,
    e: Oq,
    id: Xr.OD,
    zE: $r.OD,
    time: 1 / tq,
    xE: eo.bE
  }, {
    r: [[$r.OD, Mc], [$r.Ln, 24]],
    w: 1,
    f: Oq,
    oi: 0,
    e: Ka,
    id: Xr.YD,
    zE: $r.YD,
    time: 1 / kc,
    xE: eo.bE
  }, {
    r: [[$r.YD, Lo], [$r.Gn, 21]],
    w: 1,
    f: 0,
    oi: Sh,
    e: Ng,
    id: Xr.JD,
    zE: $r.JD,
    time: 0.125,
    xE: eo.bE
  }, {
    r: [[$r.JD, 1], [$r.Kn, 18]],
    w: Ic,
    f: so,
    oi: Gc,
    e: 0,
    id: Xr.KD,
    zE: $r.KD,
    time: 1 / Fg,
    xE: eo.bE
  }, {
    r: [[$r.KD, 1], [$r.Ds, 15]],
    w: Mc,
    f: nj,
    oi: 0,
    e: 0,
    id: Xr.qs,
    zE: $r.qs,
    time: 0.125,
    xE: eo.bE
  }, {
    r: [[$r.Ta, 1], [$r.aE, 40], [$r.nE, 30]],
    w: lt,
    f: 0,
    oi: Gc,
    e: Ka,
    id: Xr.Fa,
    zE: $r.Fa,
    time: 0.05,
    xE: eo.bE
  }, {
    r: [[$r.ja, 1], [$r.nE, 70]],
    w: lt,
    f: 0,
    oi: Js,
    e: Ea,
    id: Xr.Wa,
    zE: $r.Wa,
    time: wg / 20,
    xE: eo.bE
  }, {
    r: [[$r.Ra, ae], [$r.Ln, 40], [$r.nE, 30]],
    w: Ic,
    f: Ea,
    oi: Jj,
    e: Jj,
    id: Xr.Na,
    zE: $r.Na,
    time: 0.05,
    xE: eo.bE
  }, {
    r: [[$r.La, 1], [$r.Gn, 40], [$r.nE, 30]],
    w: 1,
    f: nj,
    oi: nj,
    e: 0,
    id: Xr.Ha,
    zE: $r.Ha,
    time: 1 / Wh,
    xE: eo.bE
  }, {
    r: [[$r.Xn, Ej], [$r.Kn, 40], [$r.nE, 30]],
    w: ja,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.Vn,
    zE: $r.Vn,
    time: 1 / po,
    xE: eo.bE
  }, {
    r: [[$r.Gs, 1], [$r.Ds, 40], [$r.Ln, 30]],
    w: 1,
    f: 0,
    oi: Ea,
    e: 0,
    id: Xr.Ws,
    zE: $r.Ws,
    time: 0.05,
    xE: eo.bE
  }, {
    r: [[$r.UD, 1], [$r.aE, 80], [$r.nE, 60]],
    w: 1,
    f: 0,
    oi: 0,
    e: Jj,
    id: Xr.Ps,
    zE: $r.Ps,
    time: ae / 20,
    xE: eo.bE
  }, {
    r: [[$r.OD, wg], [$r.nE, 140]],
    w: 1,
    f: Sh,
    oi: Jj,
    e: 0,
    id: Xr.Ts,
    zE: $r.Ts,
    time: 1 / Wh,
    xE: eo.bE
  }, {
    r: [[$r.YD, 1], [$r.Ln, 80], [$r.nE, 60]],
    w: 1,
    f: 0,
    oi: 0,
    e: ke,
    id: Xr.js,
    zE: $r.js,
    time: 1 / xc,
    xE: eo.bE
  }, {
    r: [[$r.JD, lt], [$r.Gn, 80], [$r.nE, 60]],
    w: Lo,
    f: Ea,
    oi: so,
    e: Ka,
    id: Xr.Rs,
    zE: $r.Rs,
    time: Ps / jg,
    xE: eo.bE
  }, {
    r: [[$r.KD, fo], [$r.Kn, 80], [$r.nE, 60]],
    w: 1,
    f: qh,
    oi: 0,
    e: 0,
    id: Xr.Ls,
    zE: $r.Ls,
    time: 0.05,
    xE: eo.bE
  }, {
    r: [[$r.qs, Ko], [$r.Ds, 80], [$r.Ln, 60]],
    w: ja,
    f: Js,
    oi: 0,
    e: Jj,
    id: Xr.Ns,
    zE: $r.Ns,
    time: 1 / po,
    xE: eo.bE
  }, {
    r: [[$r.aE, 25], [$r.Ln, Cs]],
    w: wg,
    f: Ea,
    oi: 0,
    e: 0,
    id: Xr.qa,
    zE: $r.qa,
    time: 0.2,
    xE: eo.yE
  }, {
    r: [[$r.Jn, ja], [$r.Tt, Lh], [$r.Pa, 2]],
    w: 1,
    f: sh,
    oi: Ea,
    e: 0,
    id: Xr.ne,
    zE: $r.ne,
    time: 1 / br,
    xE: eo.kE
  }, {
    r: [[$r.Jn, lh], [$r.Us, _o], [$r.Aa, br], [$r.Tt, 5]],
    w: 1,
    f: 0,
    oi: Ka,
    e: 0,
    id: Xr.ae,
    zE: $r.ae,
    time: X / 30,
    xE: eo.kE
  }, {
    r: [[$r.fE, Ko], [$r.rr, An], [$r.cr, kc], [$r.Us, 8], [$r.Pa, mc]],
    w: fn,
    f: 0,
    oi: Sh,
    e: sh,
    id: Xr.cn,
    zE: $r.cn,
    time: ja / 60,
    xE: eo.kE
  }, {
    r: [[$r.Tt, 1], [$r.Pa, 2]],
    w: 1,
    f: Ka,
    oi: 0,
    e: Ka,
    id: Xr.Ht,
    zE: $r.Ht,
    time: X / 5,
    xE: eo.kE
  }, {
    r: [[$r.Ht, 1], [$r.Ja, aq], [$r.Pa, Ha]],
    w: Ej,
    f: 0,
    oi: Jj,
    e: Jj,
    id: Xr.Ut,
    zE: $r.Ut,
    time: 1 / Po,
    xE: eo.kE
  }, {
    r: [[$r.Ut, lt], [$r.ka, Y], [$r.Aa, _n]],
    w: 1,
    f: qh,
    oi: Jj,
    e: Ng,
    id: Xr.ke,
    zE: $r.ke,
    time: fo / 30,
    xE: eo.kE
  }, {
    r: [[$r.ke, lt], [$r.ka, Co], [$r.lE, ic], [$r.Aa, 4]],
    w: 1,
    f: Oq,
    oi: Ea,
    e: 0,
    id: Xr.ln,
    zE: $r.ln,
    time: 0.02,
    xE: eo.kE
  }, {
    r: [[$r.aE, 50]],
    w: Ea,
    f: 0,
    oi: Gc,
    e: 0,
    id: Xr.Re,
    zE: $r.Re,
    time: 0.2,
    xE: eo.kE
  }, {
    r: [[$r.nE, 75], [$r.aE, 75], [$r.Re, lt]],
    w: Mc,
    f: 0,
    oi: sh,
    e: 0,
    id: Xr.se,
    zE: $r.se,
    time: 1 / _,
    xE: eo.kE
  }, {
    r: [[$r.nE, 90], [$r.aE, 90], [$r.Ln, 90], [$r.se, 1]],
    w: fn,
    f: so,
    oi: Jj,
    e: Oq,
    id: Xr.re,
    zE: $r.re,
    time: 1 / Hg,
    xE: eo.kE
  }, {
    r: [[$r.nE, B], [$r.Ln, hs], [$r.Gn, io], [$r.re, ae]],
    w: lt,
    f: Sh,
    oi: 0,
    e: Ng,
    id: Xr.oe,
    zE: $r.oe,
    time: wg / 30,
    xE: eo.kE
  }, {
    r: [[$r.Kn, 80], [$r.Ln, 150], [$r.Gn, 120], [$r.oe, 1]],
    w: ae,
    f: Sh,
    oi: 0,
    e: Oq,
    id: Xr.Me,
    zE: $r.Me,
    time: fi / 60,
    xE: eo.kE
  }, {
    r: [[$r.Ds, 80], [$r.Gn, 150], [$r.Kn, 120], [$r.Me, 1]],
    w: 1,
    f: 1,
    oi: 0,
    e: Ng,
    id: Xr.Be,
    zE: $r.Be,
    time: 0.011111111111111112,
    xE: eo.kE
  }, {
    r: [[$r.ua, wh], [$r.Gn, 40], [$r.Pa, 4]],
    w: Lh,
    f: 0,
    oi: xn,
    e: 0,
    id: Xr.ze,
    zE: $r.ze,
    time: 0.05,
    xE: eo.kE
  }, {
    r: [[$r.ze, Ps], [$r.Ln, 80], [$r.na, Mc], [$r.Kn, 20]],
    w: ae,
    f: 0,
    oi: 0,
    e: qh,
    id: Xr.Ce,
    zE: $r.Ce,
    time: Lo / 90,
    xE: eo.kE
  }, {
    r: [[$r.mE, 5], [$r.Gn, 50], [$r.Aa, 5]],
    w: X,
    f: 1,
    oi: nj,
    e: ke,
    id: Xr.ie,
    zE: $r.ie,
    time: 1 / Wo,
    xE: eo.kE
  }, {
    r: [[$r.ie, 1], [$r.mE, hg], [$r.Kn, 50]],
    w: 1,
    f: ja,
    oi: 0,
    e: 0,
    id: Xr.te,
    zE: $r.te,
    time: Ko / 60,
    xE: eo.kE
  }, {
    r: [[$r.te, 1], [$r.mE, 15], [$r.Kn, 50], [$r.Ds, 50]],
    w: Ko,
    f: 1,
    oi: sh,
    e: 0,
    id: Xr.ee,
    zE: $r.ee,
    time: 0.011111111111111112,
    xE: eo.kE
  }, {
    r: [[$r.Pa, 4], [$r.mr, Te]],
    w: lt,
    f: 0,
    oi: 0,
    e: Gc,
    id: Xr.hn,
    zE: $r.hn,
    time: lt / 15,
    xE: eo.kE
  }, {
    r: [[$r.hn, 1], [$r.Pa, 6], [$r.mr, 4], [$r.cr, 12], [$r.Us, k]],
    w: wg,
    f: 0,
    oi: 0,
    e: Ka,
    id: Xr.gn,
    zE: $r.gn,
    time: 0.006666666666666667,
    xE: eo.kE
  }, {
    r: [[$r.Pa, 6], [$r.Ja, 5]],
    w: 1,
    f: Jj,
    oi: Jj,
    e: ke,
    id: Xr.ge,
    zE: $r.ge,
    time: 0.06666666666666667,
    xE: eo.kE
  }, {
    r: [[$r.aE, 20]],
    w: nj,
    f: fn,
    oi: Js,
    e: 0,
    id: Xr.Jn,
    zE: $r.Jn,
    time: 1 / xa,
    xE: eo.yE
  }, {
    r: [[$r.Gn, 1], [$r.Pa, Ic]],
    w: 1,
    f: sh,
    oi: 0,
    e: sh,
    id: Xr.Aa,
    zE: $r.Aa,
    time: Ej / 3,
    xE: eo.yE
  }, {
    r: [[$r.Ln, ic]],
    w: fi,
    f: 0,
    oi: 0,
    e: Gc,
    id: Xr.wa,
    zE: $r.wa,
    time: 0.2,
    xE: eo.yE
  }, {
    r: [[$r.Ln, 250]],
    w: 1,
    f: 0,
    oi: 0,
    e: Gc,
    id: Xr.Ia,
    zE: $r.Ia,
    time: 0.016666666666666666,
    xE: eo.yE
  }, {
    r: [[$r.aE, 50]],
    w: wg,
    f: nj,
    oi: 0,
    e: 0,
    id: Xr._a,
    zE: $r._a,
    time: Mc / ue,
    xE: eo.yE
  }, {
    r: [[$r.aE, 15]],
    w: X,
    f: Sh,
    oi: qh,
    e: Oq,
    id: Xr.$n,
    zE: $r.$n,
    time: Ps / 5,
    xE: eo.yE
  }, {
    r: [[$r.aE, 30]],
    w: X,
    f: 0,
    oi: 0,
    e: Gc,
    id: Xr.us,
    zE: $r.us,
    time: 1 / et,
    xE: eo.yE
  }, {
    r: [[$r.aE, 120]],
    w: fn,
    f: Js,
    oi: Sh,
    e: Jj,
    id: Xr.Hs,
    zE: $r.Hs,
    time: ae / 15,
    xE: eo.yE
  }, {
    r: [[$r.aE, ur], [$r.Zi, ao]],
    w: 1,
    f: xn,
    oi: Jj,
    e: Ka,
    id: Xr.pa,
    zE: $r.pa,
    time: 0.2,
    xE: eo.yE
  }, {
    r: [[$r.ia, 25]],
    w: 1,
    f: 1,
    oi: 0,
    e: 0,
    id: Xr.ea,
    zE: $r.ea,
    time: 0.2,
    xE: eo.AE
  }, {
    r: [[$r.ea, 1]],
    w: 0,
    f: 0,
    oi: 1,
    e: 0,
    id: Xr.ta,
    zE: $r.ta,
    time: 1 / Y,
    xE: eo.AE
  }, {
    r: [[$r.sE, xh], [$r.ea, 1]],
    w: 0,
    f: 1,
    oi: 0,
    e: sh,
    id: Xr.XD,
    zE: $r.ta,
    time: X / 10,
    xE: eo.AE
  }, {
    r: [[$r.ea, 1]],
    w: 0,
    f: 0,
    oi: Oq,
    e: fi,
    id: Xr.VD,
    zE: $r.ta,
    time: 0.3333333333333333,
    xE: eo.AE
  }, {
    r: [[$r.aE, 60], [$r.nE, po], [$r.Pa, lr]],
    w: 1,
    f: sh,
    oi: Jj,
    e: 0,
    id: Xr.ga,
    zE: $r.ga,
    time: Ej / 10,
    xE: eo.yE
  }, {
    r: [[$r.Gn, 40], [$r.nE, 45]],
    w: 1,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.Da,
    zE: $r.Da,
    time: 1 / po,
    xE: eo.yE
  }, {
    r: [[$r.Da, 1], [$r.dr, 40], [$r.pE, 1]],
    w: 1,
    f: 1,
    oi: 1,
    e: 0,
    id: Xr.Ea,
    zE: $r.Ea,
    time: lt / 200,
    xE: eo.yE
  }, {
    r: [[$r.aE, 50], [$r.nE, 100]],
    w: 1,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.Ca,
    zE: $r.Ca,
    time: 0.011111111111111112,
    xE: eo.yE
  }, {
    r: [[$r.nE, 60], [$r.Ln, 120]],
    w: 1,
    f: so,
    oi: 0,
    e: qh,
    id: Xr.za,
    zE: $r.za,
    time: Ps / 90,
    xE: eo.yE
  }, {
    r: [[$r.Ln, 70], [$r.Gn, 140]],
    w: Ko,
    f: Jj,
    oi: 0,
    e: sh,
    id: Xr.xa,
    zE: $r.xa,
    time: 0.011111111111111112,
    xE: eo.yE
  }, {
    r: [[$r.Gn, 80], [$r.Kn, 160]],
    w: 1,
    f: Sh,
    oi: so,
    e: 0,
    id: Xr.Qa,
    zE: $r.Qa,
    time: 0.011111111111111112,
    xE: eo.yE
  }, {
    r: [[$r.Kn, 90], [$r.Ds, 180]],
    w: fn,
    f: nj,
    oi: Js,
    e: 0,
    id: Xr.Sa,
    zE: $r.Sa,
    time: fi / 90,
    xE: eo.yE
  }, {
    r: [[$r.nE, 70]],
    w: ja,
    f: 0,
    oi: 0,
    e: Js,
    id: Xr.Pe,
    zE: $r.Pe,
    time: 1 / no,
    xE: eo.wE
  }, {
    r: [[$r.nE, 70], [$r.aE, 50]],
    w: Lh,
    f: 0,
    oi: xn,
    e: 0,
    id: Xr.Te,
    zE: $r.Te,
    time: Mc / no,
    xE: eo.wE
  }, {
    r: [[$r.aE, 40], [$r.nE, 40]],
    w: fn,
    f: 0,
    oi: xn,
    e: 0,
    id: Xr.ZD,
    zE: $r.ZD,
    time: Ej / 10,
    xE: eo.yE
  }, {
    r: [[$r.HD, fn], [$r.Un, fo]],
    w: 0,
    f: nj,
    oi: 0,
    e: 0,
    id: Xr.$D,
    zE: $r.$D,
    time: fo / Lc,
    xE: eo.AE
  }, {
    r: [[$r.Aa, 30], [$r.rs, 1], [$r.Kn, 150], [$r.Ma, Ie]],
    w: 1,
    f: fn,
    oi: fo,
    e: Oq,
    id: Xr.Le,
    zE: $r.Le,
    time: Lh / 120,
    xE: eo.kE
  }, {
    r: [[$r.Le, Ko], [$r.hs, Ps], [$r.Ds, 150], [$r.Ba, 2]],
    w: 1,
    f: 1,
    oi: 1,
    e: sh,
    id: Xr.Ge,
    zE: $r.Ge,
    time: 0.005555555555555556,
    xE: eo.kE
  }, {
    r: [[$r.re, 1], [$r.$s, 10], [$r.Zs, 10], [$r.Pa, 10]],
    w: Mc,
    f: 0,
    oi: Oq,
    e: Oq,
    id: Xr.qe,
    zE: $r.qe,
    time: fo / 60,
    xE: eo.kE
  }, {
    r: [[$r.Aa, 20], [$r.os, 1], [$r.Kn, 150], [$r.Ma, nh]],
    w: 1,
    f: 1,
    oi: wg,
    e: 0,
    id: Xr.We,
    zE: $r.We,
    time: 0.008333333333333333,
    xE: eo.vE
  }, {
    r: [[$r.We, 1], [$r.gs, Lh], [$r.Ds, 150], [$r.Ba, Te]],
    w: 1,
    f: 1,
    oi: 1,
    e: Js,
    id: Xr.Ne,
    zE: $r.Ne,
    time: 0.005555555555555556,
    xE: eo.vE
  }, {
    r: [[$r.aE, B], [$r.Pa, Rh]],
    w: 1,
    f: Ea,
    oi: so,
    e: 0,
    id: Xr.He,
    zE: $r.He,
    time: 1 / yg,
    xE: eo.vE
  }, {
    r: [[$r.aE, 30]],
    w: fn,
    f: 0,
    oi: Gc,
    e: qh,
    id: Xr.xn,
    zE: $r.xn,
    time: 0.2,
    xE: eo.vE
  }, {
    r: [[$r.nE, 200], [$r.Pa, 8], [$r.Us, 4], [$r.He, 1]],
    w: 1,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.Ue,
    zE: $r.Ue,
    time: Lh / 25,
    xE: eo.vE
  }, {
    r: [[$r.nE, 20], [$r.rr, Lh]],
    w: X,
    f: 0,
    oi: 0,
    e: Js,
    id: Xr.Qn,
    zE: $r.Qn,
    time: wg / 5,
    xE: eo.vE
  }, {
    r: [[$r.Ln, 200], [$r.Pa, Dh], [$r.rr, sj], [$r.Us, k], [$r.Ue, 1]],
    w: Ps,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.Oe,
    zE: $r.Oe,
    time: Mc / 30,
    xE: eo.vE
  }, {
    r: [[$r.Ln, xh], [$r.Us, Ic]],
    w: Ej,
    f: 0,
    oi: Ea,
    e: sh,
    id: Xr.Sn,
    zE: $r.Sn,
    time: Ko / hg,
    xE: eo.vE
  }, {
    r: [[$r.Gn, 200], [$r.Aa, 10], [$r.rr, 8], [$r.Us, q], [$r.Oe, fi]],
    w: 1,
    f: 0,
    oi: Ng,
    e: xn,
    id: Xr.Ye,
    zE: $r.Ye,
    time: Ps / 35,
    xE: eo.vE
  }, {
    r: [[$r.Gn, rs], [$r.Us, Ko]],
    w: 1,
    f: 0,
    oi: ke,
    e: 0,
    id: Xr.In,
    zE: $r.In,
    time: fi / as,
    xE: eo.vE
  }, {
    r: [[$r.Kn, 200], [$r.Aa, 10], [$r.Us, kc], [$r.cr, V], [$r.Ye, fn]],
    w: 1,
    f: 0,
    oi: nj,
    e: Sh,
    id: Xr.Je,
    zE: $r.Je,
    time: Lo / 40,
    xE: eo.vE
  }, {
    r: [[$r.Kn, Ki], [$r.cr, Ic]],
    w: 1,
    f: 0,
    oi: sh,
    e: Js,
    id: Xr._n,
    zE: $r._n,
    time: 1 / Ui,
    xE: eo.vE
  }, {
    r: [[$r.Ds, 200], [$r.Aa, ar], [$r.na, 1], [$r.Je, 1]],
    w: X,
    f: qh,
    oi: ke,
    e: 0,
    id: Xr.Ke,
    zE: $r.Ke,
    time: ae / 45,
    xE: eo.vE
  }, {
    r: [[$r.Ds, 10], [$r.cr, 1], [$r.mE, 1]],
    w: fi,
    f: 0,
    oi: 0,
    e: Ea,
    id: Xr.Fn,
    zE: $r.Fn,
    time: 1 / og,
    xE: eo.vE
  }, {
    r: [[$r.dr, 200], [$r.Aa, ar], [$r.os, 1], [$r.Ke, wg]],
    w: 1,
    f: so,
    oi: Sh,
    e: 0,
    id: Xr.Xe,
    zE: $r.Xe,
    time: Ej / 50,
    xE: eo.vE
  }, {
    r: [[$r.dr, no], [$r.pE, 1]],
    w: wg,
    f: Jj,
    oi: 0,
    e: Ng,
    id: Xr.Pn,
    zE: $r.Pn,
    time: 0.05,
    xE: eo.vE
  }, {
    r: [[$r.aE, 100]],
    w: 1,
    f: Gc,
    oi: Sh,
    e: 0,
    id: Xr.Ve,
    zE: $r.Ve,
    time: 0.04,
    xE: eo.vE
  }, {
    r: [[$r.Ve, Ps], [$r.nE, 100], [$r.aE, 50]],
    w: ae,
    f: nj,
    oi: 0,
    e: 0,
    id: Xr.Ze,
    zE: $r.Ze,
    time: 0.025,
    xE: eo.vE
  }, {
    r: [[$r.Ze, 1], [$r.Ln, 50], [$r.nE, 50], [$r.aE, 50]],
    w: X,
    f: 0,
    oi: Ea,
    e: Ea,
    id: Xr.$e,
    zE: $r.$e,
    time: 0.02,
    xE: eo.vE
  }, {
    r: [[$r.$e, 1], [$r.Gn, 50], [$r.Ln, 50], [$r.nE, 50]],
    w: fn,
    f: Js,
    oi: 0,
    e: nj,
    id: Xr.tn,
    zE: $r.tn,
    time: ja / 70,
    xE: eo.vE
  }, {
    r: [[$r.tn, Ic], [$r.Kn, 50], [$r.Gn, 50], [$r.Ln, 50]],
    w: 1,
    f: Ea,
    oi: ke,
    e: 0,
    id: Xr.en,
    zE: $r.en,
    time: wg / 90,
    xE: eo.vE
  }, {
    r: [[$r.en, 1], [$r.Ds, 50], [$r.Kn, 50], [$r.Gn, 50]],
    w: 1,
    f: 0,
    oi: Ea,
    e: qh,
    id: Xr.nn,
    zE: $r.nn,
    time: 1 / 120,
    xE: eo.vE
  }, {
    r: [[$r.rE, Ps], [$r.Ln, 200]],
    w: Ko,
    f: X,
    oi: 1,
    e: 0,
    id: Xr.an,
    zE: $r.an,
    time: 0.016666666666666666,
    xE: eo.kE
  }, {
    r: [[$r.oE, 1], [$r.Ln, 200]],
    w: 1,
    f: 1,
    oi: Ej,
    e: 0,
    id: Xr.sn,
    zE: $r.sn,
    time: 0.016666666666666666,
    xE: eo.kE
  }, {
    r: [[$r.hE, 1], [$r.Ln, 200], [$r.Ma, Ko]],
    w: Lh,
    f: 1,
    oi: 1,
    e: ke,
    id: Xr.rn,
    zE: $r.rn,
    time: 0.016666666666666666,
    xE: eo.kE
  }, {
    r: [[$r.Ja, ue], [$r.Tt, Co], [$r.Pa, 6]],
    w: 1,
    f: 0,
    oi: 0,
    e: 0,
    id: Xr.dn,
    zE: $r.dn,
    time: 0.1,
    xE: eo.kE
  }, {
    r: [[$r.Tt, Sr], [$r.Pa, 2]],
    w: 1,
    f: Ka,
    oi: Ng,
    e: qh,
    id: Xr.mn,
    zE: $r.mn,
    time: fi / rs,
    xE: eo.kE
  }, {
    r: [[$r.dn, fn], [$r.cE, 1], [$r.ka, Pe], [$r.Aa, lh], [$r.Us, Ca]],
    w: 1,
    f: 0,
    oi: 0,
    e: Gc,
    id: Xr.un,
    zE: $r.un,
    time: lt / 60,
    xE: eo.kE
  }, {
    r: [[$r.mn, 1], [$r.gE, lt], [$r.ka, 10], [$r.Aa, 5], [$r.Us, 8]],
    w: 1,
    f: Oq,
    oi: ke,
    e: 0,
    id: Xr.fn,
    zE: $r.fn,
    time: fi / 60,
    xE: eo.kE
  }, {
    r: [[$r.tE, wg]],
    w: 0,
    f: 0,
    oi: Lh,
    e: 0,
    id: Xr.iE,
    zE: $r.iE,
    time: 1 / yh,
    xE: eo.wE
  }, {
    r: [[$r.aE, 20], [$r.Pa, Mc]],
    w: Mc,
    f: qh,
    oi: Ea,
    e: ke,
    id: Xr.tE,
    zE: $r.tE,
    time: X / bg,
    xE: eo.wE
  }, {
    r: [[$r.nE, 100], [$r.Zi, 30]],
    w: 1,
    f: 1,
    oi: 0,
    e: Js,
    id: Xr.eE,
    zE: $r.eE,
    time: Mc / jn,
    xE: eo.yE
  }, {
    r: [[$r.aE, xh]],
    w: 1,
    f: Js,
    oi: sh,
    e: Sh,
    id: Xr.ss,
    zE: $r.ss,
    time: ja / 5,
    xE: eo.yE
  }, {
    r: [[$r.aE, 100], [$r.nE, 50], [$r.Tt, 5], [$r.Ja, br], [$r.Pa, 6]],
    w: Ps,
    f: 0,
    oi: 0,
    e: sh,
    id: Xr.As,
    zE: $r.As,
    time: Ic / 20,
    xE: eo.yE
  }, {
    r: [[$r.aE, 250], [$r.Aa, as], [$r.ka, 2], [$r.ua, 2]],
    w: fi,
    f: Gc,
    oi: Gc,
    e: sh,
    id: Xr.Os,
    zE: $r.Os,
    time: 0.02,
    xE: eo.yE
  }, {
    r: [[$r.aE, 250], [$r.Pa, as], [$r.ka, yo], [$r.Us, Fg]],
    w: 1,
    f: Jj,
    oi: 0,
    e: Jj,
    id: Xr.Ys,
    zE: $r.Ys,
    time: 0.02,
    xE: eo.yE
  }, {
    r: [[$r.Pa, co], [$r.Ja, 6], [$r.Tt, 4], [$r.ia, 50]],
    w: 1,
    f: 0,
    oi: Oq,
    e: 0,
    id: Xr.bn,
    zE: $r.bn,
    time: 1 / Jq,
    xE: eo.yE
  }, {
    r: [[$r.aE, 250], [$r.Pa, no], [$r.Jn, 10], [$r.rr, 8]],
    w: 1,
    f: Ng,
    oi: 0,
    e: Sh,
    id: Xr.sr,
    zE: $r.sr,
    time: 0.02,
    xE: eo.yE
  }, {
    r: [[$r.aE, 40]],
    w: Lh,
    f: 0,
    oi: ke,
    e: 0,
    id: Xr.wn,
    zE: $r.wn,
    time: 1 / dh,
    xE: eo.vE
  }, {
    r: [[$r.wn, 1], [$r.nE, 40], [$r.aE, 50]],
    w: Lh,
    f: sh,
    oi: 0,
    e: Ng,
    id: Xr.Mn,
    zE: $r.Mn,
    time: Ko / 10,
    xE: eo.vE
  }, {
    r: [[$r.Mn, fi], [$r.Ln, 40], [$r.nE, 50], [$r.aE, 60]],
    w: 1,
    f: 0,
    oi: Jj,
    e: 0,
    id: Xr.Bn,
    zE: $r.Bn,
    time: lt / Ji,
    xE: eo.vE
  }, {
    r: [[$r.Bn, 1], [$r.Gn, 40], [$r.Ln, 70], [$r.nE, 80]],
    w: Lh,
    f: sh,
    oi: qh,
    e: Oq,
    id: Xr.Dn,
    zE: $r.Dn,
    time: Ps / 30,
    xE: eo.vE
  }, {
    r: [[$r.Dn, 1], [$r.Kn, 40], [$r.Gn, 70], [$r.Ln, 110]],
    w: 1,
    f: 0,
    oi: 0,
    e: Oq,
    id: Xr.En,
    zE: $r.En,
    time: fo / 60,
    xE: eo.vE
  }, {
    r: [[$r.En, 1], [$r.Ds, 50], [$r.Kn, 80], [$r.Gn, 110]],
    w: 1,
    f: 0,
    oi: Ea,
    e: Sh,
    id: Xr.Cn,
    zE: $r.Cn,
    time: 0.011111111111111112,
    xE: eo.vE
  }];
  function ut(b, c, d) {
    const e = (2531011 + (b + 38486) * 214013) % 4294967296;
    const f = ~(c & 23287) & c | ~(c & 23287) & 23287;
    const a = ~(d & 18686) & (d | 18686);
    const g = function (b, c, d, e) {
      const f = (11194 + b) % 65533;
      const a = ~(c & 3481) & 3481 | ~(c & 3481) & c;
      const i = (0 << (d >> 24 & 255)) + (24 << (d & 255)) + (Ca << (d >> 16 & cr)) + (16 << (d >> 8 & 255));
      const j = (24 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)) + (0 << (e & 255)) + (16 << (e >> 16 & 255));
      const k = function (b, c, d, e) {
        const f = (8 << (b & sq)) + (24 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b >> 8 & 255));
        const a = ~(d & 29421) & 29421 | ~(d & 29421) & d;
        const g = ((e + 17736) * 1664525 + 1013904223) % 4294967296;
        const i = function (b, c) {
          const d = ((b + 23125) * 22695477 + 1) % 4294967296;
          const e = ((c + 12286) * 214013 + 2531011) % 4294967296;
          const f = De(d, e, d, e, d, e);
          const a = Sw(d, e, d, e, d);
          return (16 << ((f ^ a) >> 24 & 255)) + (0 << ((f ^ a) >> Cm & 255)) + (Yd << ((f ^ a) >> 16 & 255)) + (24 << ((f ^ a) >> 8 & 255));
        }(f, ~(c & 13788) & c | ~(c & 13788) & 13788);
        const j = Mw(a, g, f);
        return ((23779 + (i ^ j)) * 1103515245 + 12345) % 2147483648;
      }(f, a, i, j);
      const h = Kw(f, a, i, j, f, a);
      return (tq << ((k ^ h) & 255)) + (24 << ((k ^ h) >> 24 & 255)) + (16 << ((k ^ h) >> 8 & 255)) + (0 << ((k ^ h) >> 16 & 255));
    }(e, f, a, e);
    sk(f, a, e, f, a, e);
    return ~(g & 27462) & 27462 | ~(g & 27462) & g;
  }
  const Oc = Dc;
  const Yc = j;
  const Jc = Ag;
  Ur = 300;
  ΔⵠᐃΔ = {
    QE: Ur++,
    SE: Ur++,
    IE: Ur++,
    _E: Ur++,
    FE: Ur++,
    PE: Ur++,
    TE: Ur++,
    jE: Ur++,
    RE: Ur++,
    LE: Ur++,
    GE: Ur++,
    qE: Ur++,
    EMPTY: Ur++,
    WE: Ur++,
    NE: Ur++,
    HE: Ur++,
    UE: Ur++,
    OE: Ur++,
    YE: Ur++,
    JE: Ur++,
    KE: Ur++,
    XE: Ur++,
    VE: Ur++,
    ZE: Ur++,
    $E: Ur++,
    iC: Ur++,
    tC: Ur++,
    eC: Ur++,
    nC: Ur++,
    aC: Ur++,
    sC: Ur++,
    rC: Ur++,
    POINTS: Ur++,
    oC: Ur++,
    hC: Ur++,
    gC: Ur++,
    cC: Ur++,
    dC: Ur++,
    mC: Ur++,
    uC: Ur++,
    fC: Ur++,
    pC: Ur++,
    lC: Ur++,
    bC: Ur++
  };
  const Kc = gr;
  (function b() {
    const c = {
      vC: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const e = [];
    for (let a = 0; a < 12; a++) {
      e.push(aj.Math.floor(1 + aj.Math.random() * 10));
    }
    let a = "for (let " + d + " = 0 ; " + d + " < " + e[0] + " ; " + d + "++) {";
    for (let b = 0; b < e[1]; b++) {
      a += e[b] + ";debugger;";
    }
    for (let b = 0; b < e[2]; b++) {
      a += "debugger;";
    }
    a += "}";
    const f = new aj.Function(a);
    aj.setTimeout(b, 10000);
    f();
  })();
  const Xc = ng;
  function Vc(b, c, d, e, f, a) {
    nq(Zc, b, c, d, e, f, a);
    const g = Qd(id[0], id[Lh], id[Cg]);
    kd(id[3], id[Nr], id[5], id[0]);
    return (g | 3569) & ~(g & 3569);
  }
  let Zc;
  const wt = Ss;
  let id = Zg;
  const Dt = bc;
  const ed = Dq;
  const nd = b;
  Dq = function () {
    Zc = pi($k(lg));
    id = ye(Zc);
    if (ed) {
      ed();
    }
  };
  const ad = Pc;
  function sd(a, b) {
    Xi(Zc, a, b);
    return ((64 + (Qd(id[sh], id[wg], id[0]) ^ Qw(id[1], id[0], id[1], id[0], id[wg], id[0]))) * 16807 + 0) % 2147483647;
  }
  const rd = ec;
  function od() {
    Fd[$r.Cn] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Fd[$r.En] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Fd[$r.Dn] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Fd[$r.Bn] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Fd[$r.Mn] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Fd[$r.wn] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Fd[$r.Ca] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Fd[$r.za] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Fd[$r.xa] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Fd[$r.Qa] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Fd[$r.Sa] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Fd[$r.nn] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Fd[$r.en] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Fd[$r.tn] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Fd[$r.$e] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Fd[$r.Ze] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Fd[$r.Ve] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Fd[$r.Te] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Fd[$r.Hs] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Fd[$r.Pn] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Fd[$r.Xe] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Fd[$r.Fn] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Fd[$r.Ke] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Fd[$r._n] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Fd[$r.Je] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Fd[$r.In] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Fd[$r.Ye] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Fd[$r.Sn] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Fd[$r.Oe] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Fd[$r.Qn] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Fd[$r.Ue] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Fd[$r.xn] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Fd[$r.He] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Fd[$r.Ea] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Fd[$r.mr] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Fd[$r.lE] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Fd[$r.cr] = ["Vulture Feather", "From a deadly vulture"];
    Fd[$r.dr] = ["Emerald", "How many golden breads can you get from it?"];
    Fd[$r.pE] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Fd[$r.hn] = ["Turban", "Useful to survive in the desert."];
    Fd[$r.gn] = ["Ninja outfit", "Essential to survive in the desert"];
    Fd[$r.cn] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Fd[$r.fE] = ["Pilot Glasses"];
    Fd[$r.Xs] = ["Tamed Boar", "Fast on lands and slow on water."];
    Fd[$r.yr] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Fd[$r.ir] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Fd[$r.tr] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Fd[$r.er] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Fd[$r.ar] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Fd[$r.bn] = ["Saddle", "Hit a boar with it to tame it."];
    Fd[$r.vn] = ["Witch Hat", "You're a wizard Starvy!"];
    Fd[$r.yn] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Fd[$r.kn] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Fd[$r.An] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Fd[$r.lr] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Fd[$r.ae] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Fd[$r.Ys] = ["Sled", "You are faster with it in the snow"];
    Fd[$r.Os] = ["Boat", "You are faster with it in the water"];
    Fd[$r.sr] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Fd[$r.ye] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    Fd[$r.Us] = ["Penguin Feather", "From a deadly cute penguin."];
    Fd[$r.rr] = ["Hawk Feather", "From a deadly hawk."];
    Fd[$r.Bk] = ["Cactus", "Food : 20", "Water : 10"];
    Fd[$r.gr] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Fd[$r.ND] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Fd[$r.Is] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Fd[$r.WD] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Fd[$r.qs] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Fd[$r.Gs] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Fd[$r.Ws] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Fd[$r.Ns] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Fd[$r.me] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Fd[$r.Ps] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Fd[$r.Ts] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Fd[$r.js] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Fd[$r.Rs] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Fd[$r.Ls] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Fd[$r.zs] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Fd[$r.Qs] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Fd[$r.GD] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Fd[$r.qD] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Fd[$r._e] = ["Pitchfork", "Perfect for gathering"];
    Fd[$r.Fe] = ["Golden Pitchfork", "Essential for a real farmer."];
    Fd[$r.uE] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Fd[$r.yC] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Fd[$r.kC] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Fd[$r.AC] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Fd[$r.wC] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Fd[$r.MC] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Fd[$r.hs] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Fd[$r.gs] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Fd[$r.Ne] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Fd[$r.Vt] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Fd[$r.Ba] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Fd[$r.Ge] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Fd[$r.fe] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Fd[$r.$t] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Fd[$r.mE] = ["Flame", "It's hot!"];
    Fd[$r.ie] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Fd[$r.te] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Fd[$r.ee] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Fd[$r.Ds] = ["Reidite", "The ultimate ore"];
    Fd[$r.rs] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Et[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Et[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Et[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Et[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Et[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Et[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Et[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Et[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Et[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Et[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Et[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Et[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Et[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Et[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Et[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Et[38] = ["You died crushed by an angry baby mammoth."];
    Et[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Et[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.pC] = "A sandstorm is approaching in a few seconds.";
    Fd[ΔⵠᐃΔ.fC] = "The sandstorm will soon stop.";
    Fd[ΔⵠᐃΔ.bC] = "A blizzard is approaching in a few seconds.";
    Fd[ΔⵠᐃΔ.lC] = "The blizzard will soon stop.";
    Fd[ΔⵠᐃΔ.nC] = lj[rg];
    Fd[ΔⵠᐃΔ.aC] = " Share on Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Share on Facebook";
    Fd[ΔⵠᐃΔ.rC] = "You can buy items on the shop in the next game with your points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Kill";
    Fd[ΔⵠᐃΔ.gC] = "Days survived";
    Fd[ΔⵠᐃΔ.cC] = "Building method: Free. Press G to change";
    Fd[ΔⵠᐃΔ.dC] = "Building method: Grid. Press G to change";
    Fd[$r.$s] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Fd[$r.Zt] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Fd[$r.As] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = Ea; a < bh; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Fd[$r.qt] = ["Hand"];
    Fd[$r.Zi] = ["Dirt", "Dirty!"];
    Fd[$r.ia] = ["Sand", "I got it in my eyes!"];
    Fd[$r.aE] = ["Wood", "You can't get enough of it!"];
    Fd[$r.nE] = ["Stone", "Also called a rock"];
    Fd[$r.Ln] = ["Gold", "Be generous, give it to others"];
    Fd[$r.Gn] = ["Diamond", "What will you make with it?"];
    Fd[$r.Kn] = ["Amethyst", "It's Mauve like Lapa"];
    Fd[$r.sa] = ["Flour", "Used in cooking"];
    Fd[$r.oa] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Fd[$r.ca] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Fd[$r.Hn] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Fd[$r.Un] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Fd[$r.da] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Fd[$r.ma] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Fd[$r.HD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Fd[$r.$D] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Fd[$r.dE] = ["Candies", "Only for children!", "Food: 20"];
    Fd[$r.ws] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Fd[$r.Bs] = ["Garland", "Perfect decoration for roofs"];
    Fd[$r.wr] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Fd[$r.Rn] = ["Berry", "Berry tasty!", "Food: 10"];
    Fd[$r.ra] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Fd[$r.ha] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Fd[$r.jD] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Fd[$r.ds] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Fd[$r.RD] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Fd[$r.ps] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Fd[$r.LD] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Fd[$r.bs] = ["Thorn bush", "It stings!"];
    Fd[$r.pa] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Fd[$r.sE] = ["Ice", "Useful for making cakes and water"];
    Fd[$r.Pe] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Fd[$r.Ja] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Fd[$r.Tt] = ["Rabbit Fur", "That rabbit was so cute..."];
    Fd[$r.gE] = ["Pure Fur", "You're a bread factory"];
    Fd[$r.cE] = ["Dark Fur", "You get ready to do something wrong"];
    Fd[$r.ka] = ["Winter Fur", "These animals just wanted a hug..."];
    Fd[$r.ua] = ["Scales", "It smells like fish!"];
    Fd[$r.na] = ["Kraken Skin", "Weren't you too scared?"];
    Fd[$r.oo] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Fd[$r.PD] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Fd[$r.Wn] = ["Workbench", "Very useful to craft all kinds of objects"];
    Fd[$r.Pa] = ["Cord", "Used in crafting Hats and Bag"];
    Fd[$r.Aa] = ["Diamond Cord", "Used in crafting Special Hats"];
    Fd[$r.qa] = ["Chest", "Allows you to store items", "Durability: 500"];
    Fd[$r.je] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Fd[$r.Ft] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Fd[$r.Lt] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Fd[$r.Gt] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Fd[$r.Nt] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Fd[$r.ce] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Fd[$r.We] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Fd[$r.Xt] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Fd[$r.Wt] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Fd[$r.Pt] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Fd[$r.jt] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", lj[Vg]];
    Fd[$r.Rt] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Fd[$r.de] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Fd[$r.pe] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Fd[$r.le] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Fd[$r.be] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Fd[$r.ve] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Fd[$r.De] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    Fd[$r.Ot] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Fd[$r.Yt] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Fd[$r.Jt] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Fd[$r.Kt] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Fd[$r.ue] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Fd[$r.Ee] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Fd[$r.Qe] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Fd[$r.Se] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Fd[$r.Ie] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Fd[$r.Re] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Fd[$r.se] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Fd[$r.re] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.oe] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Fd[$r.Me] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Fd[$r.Be] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Fd[$r.Le] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Fd[$r.ne] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Fd[$r.Ae] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Fd[$r.we] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Fd[$r.dn] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Fd[$r.Ht] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Fd[$r.Ut] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Fd[$r.ke] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Fd[$r.ln] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Fd[$r.mn] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Fd[$r.un] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Fd[$r.fn] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Fd[$r.ze] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Fd[$r.Ce] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Fd[$r.os] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Fd[$r.Ma] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Fd[$r.rE] = ["Green Gemstone", "You didn't cheat, promise?"];
    Fd[$r.oE] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Fd[$r.hE] = ["Blue Gemstone", "For too kind people"];
    Fd[$r.an] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Fd[$r.sn] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Fd[$r.rn] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Fd[$r.iE] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Fd[$r.tE] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Fd[$r.ta] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Fd[$r.ea] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Fd[$r.aa] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Fd[$r.xe] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Fd[$r.ge] = ["Bag", "More space for your items!"];
    Fd[$r.Jn] = ["Paper", "Used in book-crafting"];
    Fd[$r.he] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Fd[$r.vs] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Fd[$r.wa] = ["Lock", "Allow you to lock your chest"];
    Fd[$r.Ia] = ["Lock-pick", "Allows you to unlock one chest"];
    Fd[$r._a] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Fd[$r.$n] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Fd[$r.ss] = ["Sign", "Leave a message to others", "Durability: 200"];
    Fd[$r.us] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Fd[$r.eE] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Fd[$r.Ta] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Fd[$r.ja] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Fd[$r.Ra] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Fd[$r.La] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Fd[$r.Xn] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Fd[$r.Fa] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Fd[$r.Wa] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Fd[$r.Na] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Fd[$r.Ha] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Fd[$r.Vn] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Fd[$r.UD] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Fd[$r.OD] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Fd[$r.YD] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Fd[$r.JD] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Fd[$r.KD] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Fd[$r.TD] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Fd[$r.ga] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Fd[$r.ZD] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Fd[$r.Da] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Fd[ΔⵠᐃΔ.QE] = "You cannot join this server";
    Fd[ΔⵠᐃΔ.SE] = "Kicked: ";
    Fd[ΔⵠᐃΔ.IE] = "Your key is already used by someone else";
    Fd[ΔⵠᐃΔ._E] = "Your key is wrong";
    Fd[ΔⵠᐃΔ.FE] = "You have an old version, you need to clear your cache";
    Fd[ΔⵠᐃΔ.mC] = "Your client version is too recent for this server. The server is being updated";
    Fd[ΔⵠᐃΔ.uC] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Fd[ΔⵠᐃΔ.PE] = "There are no more new resources";
    Fd[ΔⵠᐃΔ.TE] = "You survived 1 day";
    Fd[ΔⵠᐃΔ.jE] = "You survived ";
    Fd[ΔⵠᐃΔ.RE] = " days";
    Fd[ΔⵠᐃΔ.LE] = "You are dead ;-;";
    Fd[ΔⵠᐃΔ.GE] = "Server cannot find spawn location! Spam the play button!";
    Fd[ΔⵠᐃΔ.qE] = "Server is full! Spam the play button!";
    Fd[ΔⵠᐃΔ.EMPTY] = "Resource is empty";
    Fd[ΔⵠᐃΔ.WE] = "Inventory is full (right-click to empty items)";
    Fd[ΔⵠᐃΔ.NE] = " is dead";
    Fd[ΔⵠᐃΔ.HE] = "This is not the right tool";
    Fd[ΔⵠᐃΔ.UE] = "You joined a team";
    Fd[ΔⵠᐃΔ.OE] = "You are dead";
    Fd[ΔⵠᐃΔ.YE] = " joined the team";
    Fd[ΔⵠᐃΔ.JE] = "Your team was destroyed";
    Fd[ΔⵠᐃΔ.KE] = "You left the team";
    Fd[ΔⵠᐃΔ.XE] = " left the team";
    Fd[ΔⵠᐃΔ.VE] = "Someone stole your token :>";
    Fd[ΔⵠᐃΔ.ZE] = "Choose a server";
    Fd[ΔⵠᐃΔ.$E] = "players";
    Fd[ΔⵠᐃΔ.iC] = "total players";
    Fd[ΔⵠᐃΔ.tC] = "players on this mode";
    Fd[ΔⵠᐃΔ.eC] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Et[Ng] = ["You were killed for no reason"];
    Et[fo] = ["You starved to death, as the name of the game implies"];
    Et[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Et[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Et[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Et[Gj] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Et[kr] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Et[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Et[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Et[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Et[ue] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Et[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Et[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Et[L] = ["You died of thirst. Better drink your own piss."];
    Et[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Et[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Et[Tr] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Et[17] = ["Your skin's falling apart, the sun killed you."];
    Et[Fo] = ["Garlic stored in your pockets boiled your brain."];
    Et[19] = ["As a vampire, don't stand near the garlic cloves."];
    Et[20] = ["You ate garlic as a vampire, what did you expect?"];
    Et[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const hd = qs;
  function gd() {
    Fd[$r.rs] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.nC] = lj[_h];
    Fd[ΔⵠᐃΔ.aC] = " Share on Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Share on Facebook";
    Fd[ΔⵠᐃΔ.rC] = "You can buy items on the shop in the next game with your points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Kill";
    Fd[ΔⵠᐃΔ.gC] = "Days survived";
    Fd[ΔⵠᐃΔ.cC] = "Building method: Free. Press G to change";
    Fd[ΔⵠᐃΔ.dC] = "Building method: Grid. Press G to change";
    Fd[$r.$s] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Fd[$r.Zt] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.As] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; Bo > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Fd[$r.qt] = ["Рука"];
    Fd[$r.Zi] = ["Земля", "Грязно!"];
    Fd[$r.ia] = ["Песок", "Он в моих глазах!"];
    Fd[$r.aE] = ["Дерево", "Постоянно нужно больше!"];
    Fd[$r.nE] = ["Камень", "Твердый"];
    Fd[$r.Ln] = ["Золото", "Будьте щедры, давайте его другим"];
    Fd[$r.Gn] = ["Алмаз", "Что вы создадите с помощью него?"];
    Fd[$r.Kn] = ["Аметист", "Он сиреневый, как Lapa"];
    Fd[$r.sa] = ["Мука", "Используется в готовке"];
    Fd[$r.oa] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Fd[$r.ca] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Fd[$r.Hn] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Fd[$r.Un] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Fd[$r.da] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Fd[$r.ma] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Fd[$r.HD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Fd[$r.$D] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Fd[$r.dE] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Fd[$r.ws] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Fd[$r.Bs] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Fd[$r.wr] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Fd[$r.Rn] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Fd[$r.ra] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Fd[$r.ha] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Fd[$r.jD] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Fd[$r.ds] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Fd[$r.RD] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Fd[$r.ps] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Fd[$r.LD] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Fd[$r.bs] = ["Колючий Куст", "Это больно!"];
    Fd[$r.pa] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Fd[$r.sE] = ["Лёд", "Используется для изготовления тортов и воды"];
    Fd[$r.Pe] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Fd[$r.Ja] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Fd[$r.Tt] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Fd[$r.gE] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Fd[$r.cE] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Fd[$r.ka] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Fd[$r.ua] = ["Чешуя", "Она пахнет рыбой!"];
    Fd[$r.na] = ["Шкура Кракена", "Вы не испугались?"];
    Fd[$r.oo] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Fd[$r.PD] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Fd[$r.Wn] = ["Верстак", "Необходим для создания многих предметов"];
    Fd[$r.Pa] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Fd[$r.Aa] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Fd[$r.qa] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Fd[$r.je] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Fd[$r.Ft] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Fd[$r.Lt] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Fd[$r.Gt] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Fd[$r.Nt] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Fd[$r.ce] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Fd[$r.We] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Fd[$r.Xt] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Fd[$r.Wt] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Fd[$r.Pt] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Fd[$r.jt] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Fd[$r.Rt] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Fd[$r.de] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Fd[$r.pe] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Fd[$r.le] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Fd[$r.be] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Fd[$r.ve] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Fd[$r.De] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Fd[$r.Ot] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Fd[$r.Yt] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Fd[$r.Jt] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Fd[$r.Kt] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Fd[$r.ue] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Fd[$r.Ee] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Fd[$r.Qe] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Fd[$r.Se] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Fd[$r.Ie] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Fd[$r.Re] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Fd[$r.se] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Fd[$r.re] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Fd[$r.oe] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Fd[$r.Me] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Fd[$r.Le] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Fd[$r.ne] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Fd[$r.Ae] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Fd[$r.we] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Fd[$r.dn] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Fd[$r.Ht] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Fd[$r.Ut] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Fd[$r.ke] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Fd[$r.mn] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Fd[$r.un] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Fd[$r.fn] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Fd[$r.ze] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Fd[$r.Ce] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Fd[$r.os] = ["Шар Дракона", "Даётся за квест"];
    Fd[$r.Ma] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Fd[$r.rE] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Fd[$r.oE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Fd[$r.hE] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Fd[$r.an] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Fd[$r.sn] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Fd[$r.rn] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Fd[$r.iE] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Fd[$r.tE] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Fd[$r.ta] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Fd[$r.ea] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Fd[$r.aa] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Fd[$r.xe] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Fd[$r.ge] = ["Рюкзак", "Больше места для ваших предметов!"];
    Fd[$r.Jn] = ["Бумага", "Используется при создании книги"];
    Fd[$r.he] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Fd[$r.vs] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Fd[$r.wa] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Fd[$r.Ia] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Fd[$r._a] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Fd[$r.$n] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Fd[$r.ss] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Fd[$r.us] = ["Крыша", "Немного скрывает вас и согревает!"];
    Fd[$r.eE] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Fd[$r.Ta] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Fd[$r.ja] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Fd[$r.Ra] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Fd[$r.La] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Fd[$r.Xn] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Fd[$r.Fa] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Fd[$r.Wa] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Fd[$r.Na] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Fd[$r.Ha] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Fd[$r.Vn] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Fd[$r.UD] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Fd[$r.OD] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Fd[$r.YD] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Fd[$r.JD] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Fd[$r.KD] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Fd[$r.TD] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Fd[$r.ga] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Fd[$r.ZD] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Fd[$r.Da] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Fd[ΔⵠᐃΔ.QE] = "Вы не можете зайти на этот сервер";
    Fd[ΔⵠᐃΔ.SE] = "Выгнаны: ";
    Fd[ΔⵠᐃΔ.IE] = "Ваш ключ уже используется кем-то";
    Fd[ΔⵠᐃΔ._E] = "Ваш ключ неправильный";
    Fd[ΔⵠᐃΔ.FE] = "У вас старая версия, вам нужно очистить кеш";
    Fd[ΔⵠᐃΔ.PE] = "Ресурсов больше нет";
    Fd[ΔⵠᐃΔ.TE] = "Вы выжили 1 день";
    Fd[ΔⵠᐃΔ.jE] = "Вы выжили ";
    Fd[ΔⵠᐃΔ.RE] = " дней";
    Fd[ΔⵠᐃΔ.LE] = "Вы умерли ;-;";
    Fd[ΔⵠᐃΔ.GE] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Fd[ΔⵠᐃΔ.qE] = "Сервер заполнен! Спамьте кнопку играть!";
    Fd[ΔⵠᐃΔ.EMPTY] = "Ресурсы закончились";
    Fd[ΔⵠᐃΔ.WE] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Fd[ΔⵠᐃΔ.NE] = " умер";
    Fd[ΔⵠᐃΔ.HE] = "Это не тот инструмент";
    Fd[ΔⵠᐃΔ.UE] = "Вы вошли в команду";
    Fd[ΔⵠᐃΔ.OE] = "Вы умерли";
    Fd[ΔⵠᐃΔ.YE] = " вошёл в команду";
    Fd[ΔⵠᐃΔ.JE] = "Ваша команда была разрушена";
    Fd[ΔⵠᐃΔ.KE] = "Вы покинули команду";
    Fd[ΔⵠᐃΔ.XE] = " покинул команду";
    Fd[ΔⵠᐃΔ.VE] = "Кто-то использует ваш токен :>";
    Fd[ΔⵠᐃΔ.ZE] = "Выберите сервер";
    Fd[ΔⵠᐃΔ.$E] = "игроков";
    Fd[ΔⵠᐃΔ.iC] = "игроков всего";
    Fd[ΔⵠᐃΔ.tC] = "игроков в этом режиме";
    Fd[ΔⵠᐃΔ.eC] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Et[0] = ["Вы были убиты без причины"];
    Et[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Et[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Et[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Et[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Et[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Et[Th] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Et[Ke] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Et[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Et[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Et[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Et[ta] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Et[Eo] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Et[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Et[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Et[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Et[_r] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Et[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Et[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Et[eg] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Et[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Et[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function cd() {
    Fd[$r.rs] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.nC] = " BACK TO THE GAME";
    Fd[ΔⵠᐃΔ.aC] = " Share on Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Share on Facebook";
    Fd[ΔⵠᐃΔ.rC] = "You can buy items on the shop in the next game with your points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Kill";
    Fd[ΔⵠᐃΔ.gC] = "Days survived";
    Fd[ΔⵠᐃΔ.cC] = "Building method: Free. Press G to change";
    Fd[ΔⵠᐃΔ.dC] = "Building method: Grid. Press G to change";
    Fd[$r.$s] = ["Crab Claw", "Crab claws can also be eaten", lj[nr]];
    Fd[$r.Zt] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.As] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Fd[$r.qt] = ["mão"];
    Fd[$r.Zi] = ["terra", "está sujo!"];
    Fd[$r.ia] = ["areia", "entrou nos meus olhos!"];
    Fd[$r.aE] = ["madeira", "você não pode pegar o suficiente disso!"];
    Fd[$r.nE] = ["pedra", "também chamado rocha"];
    Fd[$r.Ln] = ["ouro", "seja generoso, dê para outros"];
    Fd[$r.Gn] = ["diamante", "o que você irá fazer com isso?"];
    Fd[$r.Kn] = ["ametista", "é mauve como lapa"];
    Fd[$r.sa] = ["farinha", "usada na cozinha"];
    Fd[$r.oa] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Fd[$r.ca] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Fd[$r.Hn] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Fd[$r.Un] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Fd[$r.da] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Fd[$r.ma] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Fd[$r.HD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Fd[$r.$D] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Fd[$r.dE] = ["doces", "apenas para crianças!", "comida: 100"];
    Fd[$r.ws] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Fd[$r.Bs] = ["pisca-pisca", "decoração perfeita de telhado"];
    Fd[$r.wr] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Fd[$r.Rn] = ["berry", "Berry saborosa!", "comida: 10"];
    Fd[$r.ra] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Fd[$r.ha] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Fd[$r.jD] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Fd[$r.ds] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Fd[$r.RD] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Fd[$r.ps] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Fd[$r.LD] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Fd[$r.bs] = ["mato de espinhos", "pica!"];
    Fd[$r.pa] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Fd[$r.sE] = ["gelo", "útil para fazer bolo e água"];
    Fd[$r.Pe] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Fd[$r.Ja] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Fd[$r.Tt] = ["pele de coelho", "o coelho era tão fofo..."];
    Fd[$r.gE] = ["pele pura", "você é uma fábrica de pão"];
    Fd[$r.cE] = ["pele negra", "você está pronto para fazer algo errado"];
    Fd[$r.ka] = ["pele de inverno", "ele só queria um abraço"];
    Fd[$r.ua] = ["escala", "é pequeno como peixe!"];
    Fd[$r.na] = ["pele do kraken", "você não está com medo?"];
    Fd[$r.oo] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Fd[$r.PD] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Fd[$r.Wn] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Fd[$r.Pa] = ["linha", "usada para fazer chapéus e mochila"];
    Fd[$r.Aa] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Fd[$r.qa] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Fd[$r.je] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Fd[$r.Ft] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Fd[$r.Lt] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Fd[$r.Gt] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Fd[$r.Nt] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Fd[$r.ce] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Fd[$r.We] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Fd[$r.Xt] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Fd[$r.Wt] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Fd[$r.BC] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Fd[$r.jt] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Fd[$r.Rt] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Fd[$r.de] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Fd[$r.pe] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Fd[$r.le] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Fd[$r.be] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Fd[$r.ve] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Fd[$r.De] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Fd[$r.Ot] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Fd[$r.Yt] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Fd[$r.Jt] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Fd[$r.Kt] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Fd[$r.ue] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Fd[$r.Ee] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Fd[$r.Qe] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Fd[$r.Se] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Fd[$r.Ie] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Fd[$r.Re] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Fd[$r.se] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Fd[$r.re] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Fd[$r.oe] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Fd[$r.Me] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Fd[$r.Le] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Fd[$r.ne] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Fd[$r.Ae] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Fd[$r.we] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Fd[$r.dn] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Fd[$r.Ht] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Fd[$r.Ut] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Fd[$r.ke] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Fd[$r.mn] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Fd[$r.un] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Fd[$r.fn] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Fd[$r.ze] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Fd[$r.Ce] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Fd[$r.os] = ["esfera do dragão", "dado na questt"];
    Fd[$r.Ma] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Fd[$r.rE] = ["pedra verde", "você não vai trapacear, promete?"];
    Fd[$r.oE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Fd[$r.hE] = ["pedra azul", "para pessoas muito gentis"];
    Fd[$r.an] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Fd[$r.sn] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Fd[$r.rn] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Fd[$r.iE] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Fd[$r.tE] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Fd[$r.ta] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Fd[$r.ea] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Fd[$r.aa] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Fd[$r.xe] = ["regador", "permite regar as plantas", "dano: 1"];
    Fd[$r.ge] = ["mochila", "mais espaço para seus itens!"];
    Fd[$r.Jn] = ["papel", "usado para fazer o livro"];
    Fd[$r.he] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Fd[$r.vs] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Fd[$r.wa] = ["fechadura", "permite você trancar seu baú"];
    Fd[$r.Ia] = ["chave", "permite destrancar um baú"];
    Fd[$r._a] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Fd[$r.$n] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Fd[$r.ss] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Fd[$r.us] = ["telhado", "esconde você um pouco e te esquenta!"];
    Fd[$r.eE] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Fd[$r.Ta] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Fd[$r.ja] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Fd[$r.Ra] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Fd[$r.La] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Fd[$r.Xn] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Fd[$r.Fa] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Fd[$r.Wa] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Fd[$r.Na] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Fd[$r.Ha] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Fd[$r.Vn] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Fd[$r.UD] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Fd[$r.OD] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Fd[$r.YD] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Fd[$r.JD] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Fd[$r.KD] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Fd[$r.TD] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Fd[$r.ga] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Fd[$r.ZD] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Fd[$r.Da] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Fd[ΔⵠᐃΔ.QE] = "você não pode entrar no servidor";
    Fd[ΔⵠᐃΔ.SE] = "kickado: ";
    Fd[ΔⵠᐃΔ.IE] = "sua chave está em uso por outra pessoa";
    Fd[ΔⵠᐃΔ._E] = "sua chave está errada";
    Fd[ΔⵠᐃΔ.FE] = "você tem uma versão velha, limpe seu cache";
    Fd[ΔⵠᐃΔ.PE] = "não tem mais recursos";
    Fd[ΔⵠᐃΔ.TE] = "você sobreviveu 1 dia";
    Fd[ΔⵠᐃΔ.jE] = "você sobreviveu ";
    Fd[ΔⵠᐃΔ.RE] = " dias";
    Fd[ΔⵠᐃΔ.LE] = "você está morto ;-;";
    Fd[ΔⵠᐃΔ.GE] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Fd[ΔⵠᐃΔ.qE] = "servidor está cheio! spam o botão de play!";
    Fd[ΔⵠᐃΔ.EMPTY] = "não tem recursos";
    Fd[ΔⵠᐃΔ.WE] = "inventário está cheio (botão direito para deletar itens)";
    Fd[ΔⵠᐃΔ.NE] = " está morto";
    Fd[ΔⵠᐃΔ.HE] = "essa não é a ferramenta certa";
    Fd[ΔⵠᐃΔ.UE] = "você entrou no time";
    Fd[ΔⵠᐃΔ.OE] = "você está morto";
    Fd[ΔⵠᐃΔ.YE] = "entrou no time";
    Fd[ΔⵠᐃΔ.JE] = "seu time foi destruido";
    Fd[ΔⵠᐃΔ.KE] = "você saiu do time";
    Fd[ΔⵠᐃΔ.XE] = " saiu do time";
    Fd[ΔⵠᐃΔ.VE] = "alguém roubou sua ficha :>";
    Fd[ΔⵠᐃΔ.ZE] = "escolha um servidor";
    Fd[ΔⵠᐃΔ.$E] = "jogadores";
    Fd[ΔⵠᐃΔ.iC] = "jogadores totais";
    Fd[ΔⵠᐃΔ.tC] = "jogadores nesse modo";
    Fd[ΔⵠᐃΔ.eC] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Et[sh] = ["você morreu sem motivo"];
    Et[fn] = ["você morreu de fome, como o jogo diz"];
    Et[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Et[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Et[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Et[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Et[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Et[I] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Et[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Et[G] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Et[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Et[Ra] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Et[Dh] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Et[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Et[14] = ["você sabia que você morre afogado? agora você sabe."];
    Et[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Et[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Et[rc] = ["sua pele caindo aos pedaços, o sol te matou."];
    Et[kq] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Et[19] = ["como vampiro, não chegue perto do alho."];
    Et[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Et[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const dd = R;
  const md = bs;
  const ud = Vj;
  const fd = nr;
  const pd = Yc;
  function ld() {
    Fd[$r.rs] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.nC] = lj[th];
    Fd[ΔⵠᐃΔ.aC] = " Share on Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Share on Facebook";
    Fd[ΔⵠᐃΔ.rC] = "You can buy items on the shop in the next game with your points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Kill";
    Fd[ΔⵠᐃΔ.gC] = "Days survived";
    Fd[ΔⵠᐃΔ.cC] = "Building method: Free. Press G to change";
    Fd[ΔⵠᐃΔ.dC] = "Building method: Grid. Press G to change";
    Fd[$r.$s] = ["Crab Claw", "Crab claws can also be eaten", lj[L]];
    Fd[$r.Zt] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.As] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Fd[$r.qt] = ["Mano"];
    Fd[$r.Zi] = ["Tierra", "¡Tan limpia como mis manos!"];
    Fd[$r.ia] = ["Arena", "¡Tengo arena en mis ojos!"];
    Fd[$r.aE] = ["Madera", "¡Nunca hay suficiente!"];
    Fd[$r.nE] = ["Piedra", "También llamada roca."];
    Fd[$r.Ln] = ["Oro", "Sé generoso, compártelo con los otros"];
    Fd[$r.Gn] = ["Diamante", "¿Que vas a hacer con él?"];
    Fd[$r.Kn] = ["Amatista", "Es Mauve como Lapa"];
    Fd[$r.sa] = ["Harina", "Usada para cocinar."];
    Fd[$r.oa] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Fd[$r.ca] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Fd[$r.Hn] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Fd[$r.Un] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Fd[$r.da] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Fd[$r.ma] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Fd[$r.HD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Fd[$r.$D] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Fd[$r.dE] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Fd[$r.ws] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Fd[$r.Bs] = ["Guirnalda", "Perfecta para decorar el techo"];
    Fd[$r.wr] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Fd[$r.Rn] = ["Baya", "No es venenosa.", "Comida: 10"];
    Fd[$r.ra] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Fd[$r.ha] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Fd[$r.jD] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Fd[$r.ds] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Fd[$r.RD] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Fd[$r.ps] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Fd[$r.LD] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Fd[$r.bs] = ["Planta de Espinas", "¡Te daña!"];
    Fd[$r.pa] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Fd[$r.sE] = ["Hielo", "Bueno para hacer tartas y agua"];
    Fd[$r.Pe] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Fd[$r.Ja] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Fd[$r.Tt] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Fd[$r.gE] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Fd[$r.cE] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Fd[$r.ka] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Fd[$r.ua] = ["Escamas", "¡Huele a pescado!"];
    Fd[$r.na] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Fd[$r.oo] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Fd[$r.PD] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Fd[$r.Wn] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Fd[$r.Pa] = ["Hilo", "Usado para craftear ropa y mochila"];
    Fd[$r.Aa] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Fd[$r.qa] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Fd[$r.je] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Fd[$r.Ft] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Fd[$r.Lt] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Fd[$r.Gt] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Fd[$r.Nt] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Fd[$r.ce] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Fd[$r.We] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Fd[$r.Xt] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Fd[$r.Wt] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Fd[$r.Pt] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Fd[$r.jt] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Fd[$r.Rt] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Fd[$r.de] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Fd[$r.pe] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Fd[$r.le] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Fd[$r.be] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Fd[$r.ve] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Fd[$r.De] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Fd[$r.Ot] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Fd[$r.Yt] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Fd[$r.Jt] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Fd[$r.Kt] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Fd[$r.ue] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Fd[$r.Ee] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Fd[$r.Qe] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Fd[$r.Se] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Fd[$r.Ie] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Fd[$r.Re] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Fd[$r.se] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Fd[$r.re] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Fd[$r.oe] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Fd[$r.Me] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Fd[$r.Le] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Fd[$r.ne] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Fd[$r.Ae] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Fd[$r.we] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Fd[$r.dn] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Fd[$r.Ht] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Fd[$r.Ut] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Fd[$r.ke] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Fd[$r.mn] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Fd[$r.un] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Fd[$r.fn] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Fd[$r.ze] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Fd[$r.Ce] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Fd[$r.os] = ["Esfera del Dragón", "Dada en la misión"];
    Fd[$r.Ma] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Fd[$r.rE] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Fd[$r.oE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Fd[$r.hE] = ["Gema Azul", "Para gente muy amable"];
    Fd[$r.an] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Fd[$r.sn] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Fd[$r.rn] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Fd[$r.iE] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Fd[$r.tE] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Fd[$r.ta] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Fd[$r.ea] = ["Botella Vacia", "La puedes llenar de agua"];
    Fd[$r.aa] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Fd[$r.xe] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Fd[$r.ge] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Fd[$r.Jn] = ["Hoja", "Usada para hacer un libro"];
    Fd[$r.he] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Fd[$r.vs] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Fd[$r.wa] = ["Cerradura", "Te permite cerrar tu cofre"];
    Fd[$r.Ia] = ["Llave", "Te permite abrir un cofre cerrado"];
    Fd[$r._a] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Fd[$r.$n] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Fd[$r.ss] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Fd[$r.us] = ["Techo", "Te esconde un poco y te protege del frío"];
    Fd[$r.eE] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Fd[$r.Ta] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Fd[$r.ja] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Fd[$r.Ra] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Fd[$r.La] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Fd[$r.Xn] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Fd[$r.Fa] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Fd[$r.Wa] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Fd[$r.Na] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Fd[$r.Ha] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Fd[$r.Vn] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Fd[$r.UD] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Fd[$r.OD] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Fd[$r.YD] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Fd[$r.JD] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Fd[$r.KD] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Fd[$r.TD] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Fd[$r.ga] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Fd[$r.ZD] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Fd[$r.Da] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Fd[ΔⵠᐃΔ.QE] = "No puedes unirte a este servidor";
    Fd[ΔⵠᐃΔ.SE] = "Expulsado: ";
    Fd[ΔⵠᐃΔ.IE] = "Tu llave ya está usada";
    Fd[ΔⵠᐃΔ._E] = "Tu llave está mal";
    Fd[ΔⵠᐃΔ.FE] = "Tienes una versión antigua, limpia tu cache";
    Fd[ΔⵠᐃΔ.PE] = "No hay mas recursos";
    Fd[ΔⵠᐃΔ.TE] = "Has sobrevivido 1 día";
    Fd[ΔⵠᐃΔ.jE] = "Has sobrevivido ";
    Fd[ΔⵠᐃΔ.RE] = " días";
    Fd[ΔⵠᐃΔ.LE] = "Estás muerto ;-;";
    Fd[ΔⵠᐃΔ.GE] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Fd[ΔⵠᐃΔ.qE] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Fd[ΔⵠᐃΔ.EMPTY] = "Recurso vacio";
    Fd[ΔⵠᐃΔ.WE] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Fd[ΔⵠᐃΔ.NE] = " está muerto";
    Fd[ΔⵠᐃΔ.HE] = "Esta no es la herramienta correcta";
    Fd[ΔⵠᐃΔ.UE] = "Te has unido a un equipo";
    Fd[ΔⵠᐃΔ.OE] = "Estás muerto";
    Fd[ΔⵠᐃΔ.YE] = " se unió al equipo";
    Fd[ΔⵠᐃΔ.JE] = "Tu equipo ha sido destruido";
    Fd[ΔⵠᐃΔ.KE] = "Has dejado el equipo";
    Fd[ΔⵠᐃΔ.XE] = " dejo el equipo ";
    Fd[ΔⵠᐃΔ.VE] = "Alguien te robó tu token :>";
    Fd[ΔⵠᐃΔ.ZE] = "Elige un servidor";
    Fd[ΔⵠᐃΔ.$E] = "jugadores";
    Fd[ΔⵠᐃΔ.iC] = "total de jugadores";
    Fd[ΔⵠᐃΔ.tC] = "Jugadores en este modo de juego";
    Fd[ΔⵠᐃΔ.eC] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Et[0] = ["Has muerto por ninguna razón"];
    Et[wg] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Et[z] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Et[Sr] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Et[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Et[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Et[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Et[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Et[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Et[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Et[ue] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Et[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Et[bs] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Et[Iq] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Et[Ag] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Et[wt] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Et[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Et[17] = ["Tu piel se cayó, el sol te quemó."];
    Et[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Et[Aq] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Et[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Et[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const bd = sh;
  function vd(b, c, d) {
    const e = b ^ 1241;
    const f = ~(c & 22582) & c | ~(c & 22582) & 22582;
    const a = (24 << (d & No)) + (16 << (d >> 16 & 255)) + (8 << (d >> 8 & 255)) + (Ng << (d >> 24 & sc));
    const g = function (b, c, d) {
      const e = (16 << (b >> 8 & 255)) + (0 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 24 & 255));
      const f = ~(c & 44720) & c | ~(c & 44720) & 44720;
      const a = d ^ 22661;
      const g = xd(e, f);
      Gw(a, e, f);
      return ~(g & 55619) & (g | 55619);
    }(e, f, a);
    Gw(e, f, a);
    return ~(g & 48534) & (g | 48534);
  }
  const yd = Lh;
  function kd(a, b, c, d) {
    Cq(Zc, a, b, c, d);
    return (10140 + (sd(id[sh], id[1]) ^ sd(id[2], id[3]))) % 65358;
  }
  const Ad = oo;
  const wd = rs;
  const Md = L;
  function Bd() {
    Fd[$r.rs] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.nC] = lj[Ca];
    Fd[ΔⵠᐃΔ.aC] = " Share on Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Share on Facebook";
    Fd[ΔⵠᐃΔ.rC] = "You can buy items on the shop in the next game with your points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Kill";
    Fd[ΔⵠᐃΔ.gC] = "Days survived";
    Fd[ΔⵠᐃΔ.cC] = "Building method: Free. Press G to change";
    Fd[ΔⵠᐃΔ.dC] = "Building method: Grid. Press G to change";
    Fd[$r.$s] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Fd[$r.Zt] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.As] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; Ih > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Fd[$r.qt] = ["Hand"];
    Fd[$r.Zi] = ["Boden", "Dreckig!"];
    Fd[$r.ia] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Fd[$r.aE] = ["Holz", "Du kannst niemals zu viel haben!"];
    Fd[$r.nE] = ["Stein", "Auch Fels gennant"];
    Fd[$r.Ln] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Fd[$r.Gn] = ["Diamant", "Was wirst du daraus machen?"];
    Fd[$r.Kn] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Fd[$r.sa] = ["Mehl", "wird fürs Backen gebraucht"];
    Fd[$r.oa] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Fd[$r.ca] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Fd[$r.Hn] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Fd[$r.Un] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Fd[$r.da] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Fd[$r.ma] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Fd[$r.HD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Fd[$r.$D] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Fd[$r.dE] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Fd[$r.ws] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Fd[$r.Bs] = ["Girlande", "perfekter Schmuck für Dächer"];
    Fd[$r.wr] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Fd[$r.Rn] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Fd[$r.ra] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Fd[$r.ha] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Fd[$r.jD] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Fd[$r.ds] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Fd[$r.RD] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Fd[$r.ps] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Fd[$r.LD] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Fd[$r.bs] = ["Dornenbusch", "Es sticht!"];
    Fd[$r.pa] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Fd[$r.sE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Fd[$r.Pe] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Fd[$r.Ja] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Fd[$r.Tt] = ["Hasenfell", "Der Hase war so süß..."];
    Fd[$r.gE] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Fd[$r.cE] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Fd[$r.ka] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Fd[$r.ua] = ["Schuppen", "Es riecht wie Fisch!"];
    Fd[$r.na] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Fd[$r.oo] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Fd[$r.PD] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Fd[$r.Wn] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Fd[$r.Pa] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Fd[$r.Aa] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Fd[$r.qa] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Fd[$r.je] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Fd[$r.Ft] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Fd[$r.Lt] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Fd[$r.Gt] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Fd[$r.Nt] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Fd[$r.ce] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Fd[$r.We] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Fd[$r.Xt] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Fd[$r.Wt] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Fd[$r.Pt] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Fd[$r.jt] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Fd[$r.Rt] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Fd[$r.de] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Fd[$r.pe] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Fd[$r.le] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Fd[$r.be] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Fd[$r.ve] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Fd[$r.De] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Fd[$r.Ot] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Fd[$r.Yt] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Fd[$r.Jt] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Fd[$r.Kt] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Fd[$r.ue] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Fd[$r.Ee] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Fd[$r.Qe] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Fd[$r.Se] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Fd[$r.Ie] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Fd[$r.Re] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Fd[$r.se] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Fd[$r.re] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Fd[$r.oe] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Fd[$r.Me] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Fd[$r.Le] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Fd[$r.ne] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.Ae] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.we] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.dn] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.Ht] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.Ut] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.ke] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Fd[$r.mn] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.un] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.fn] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Fd[$r.ze] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Fd[$r.Ce] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Fd[$r.os] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Fd[$r.Ma] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Fd[$r.rE] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Fd[$r.oE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Fd[$r.hE] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Fd[$r.an] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Fd[$r.sn] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Fd[$r.rn] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Fd[$r.iE] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Fd[$r.tE] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Fd[$r.ta] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Fd[$r.ea] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Fd[$r.aa] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Fd[$r.xe] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Fd[$r.ge] = ["Rucksack", "Mehr Platz im Inventar!"];
    Fd[$r.Jn] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Fd[$r.he] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Fd[$r.vs] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Fd[$r.wa] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Fd[$r.Ia] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Fd[$r._a] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Fd[$r.$n] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Fd[$r.ss] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Fd[$r.us] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Fd[$r.eE] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Fd[$r.Ta] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Fd[$r.ja] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Fd[$r.Ra] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Fd[$r.La] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Fd[$r.Xn] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Fd[$r.Fa] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Fd[$r.Wa] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Fd[$r.Na] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Fd[$r.Ha] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Fd[$r.Vn] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Fd[$r.UD] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Fd[$r.OD] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Fd[$r.YD] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Fd[$r.JD] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Fd[$r.KD] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Fd[$r.TD] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Fd[$r.ga] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Fd[$r.ZD] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Fd[$r.Da] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Fd[ΔⵠᐃΔ.QE] = "Du kannst diesem Server nicht beitreten";
    Fd[ΔⵠᐃΔ.SE] = "Gekickt: ";
    Fd[ΔⵠᐃΔ.IE] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Fd[ΔⵠᐃΔ._E] = "Dein Schlüssel ist falsch";
    Fd[ΔⵠᐃΔ.FE] = "Deine Version ist veraltet, säubere dein Cache";
    Fd[ΔⵠᐃΔ.PE] = "Es gibt keine neuen Ressourcen";
    Fd[ΔⵠᐃΔ.TE] = "Du hast einen Tag überlebt";
    Fd[ΔⵠᐃΔ.jE] = "Du hast überlebt ";
    Fd[ΔⵠᐃΔ.RE] = " Tage";
    Fd[ΔⵠᐃΔ.LE] = "Du bist gestorben ;-;";
    Fd[ΔⵠᐃΔ.GE] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Fd[ΔⵠᐃΔ.qE] = "Server ist voll! Drücke immer wieder auf spielen!";
    Fd[ΔⵠᐃΔ.EMPTY] = "Ressource ist leer";
    Fd[ΔⵠᐃΔ.WE] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Fd[ΔⵠᐃΔ.NE] = " ist gestorben";
    Fd[ΔⵠᐃΔ.HE] = "Das ist nicht das richtige Werkzeug";
    Fd[ΔⵠᐃΔ.UE] = "Du bist einem Team beigetreten";
    Fd[ΔⵠᐃΔ.OE] = "Du bist gestorben";
    Fd[ΔⵠᐃΔ.YE] = " ist dem Team beigetreten";
    Fd[ΔⵠᐃΔ.JE] = "Dein Team wurde zerstört";
    Fd[ΔⵠᐃΔ.KE] = "Du hast das Team verlassen";
    Fd[ΔⵠᐃΔ.XE] = " hat das Team verlassen";
    Fd[ΔⵠᐃΔ.VE] = "Jemand hat dein Token gestohlen :>";
    Fd[ΔⵠᐃΔ.ZE] = "Suche dir ein Server aus";
    Fd[ΔⵠᐃΔ.$E] = "Spieler";
    Fd[ΔⵠᐃΔ.iC] = "alle Spieler";
    Fd[ΔⵠᐃΔ.tC] = "Spieler in diesem Modus";
    Fd[ΔⵠᐃΔ.eC] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Et[0] = ["Du wurdest ohne Grund getötet"];
    Et[Lo] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Et[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Et[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Et[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Et[aq] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Et[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Et[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Et[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Et[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Et[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Et[ta] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Et[xg] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Et[is] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Et[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Et[nd] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Et[gc] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Et[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Et[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Et[Ao] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Et[Hg] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Et[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const Dd = mn;
  const Ed = D;
  const Cd = Co;
  const zd = _o;
  function xd(a, b) {
    const c = a ^ 25207;
    const d = ~(b & 38508) & 38508 | ~(b & 38508) & b;
    return ((62510 + (Ow(c, d) ^ nk(c, d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
  }
  function Qd(b, c, d) {
    $j(Zc, b, c, d);
    const e = Er(id[0], id[1], id[Gi], id[ke], id[fi]);
    const f = Qw(id[ec], id[Sh], id[ja], id[mj], id[0], id[1]);
    return (0 << ((e ^ f) >> 8 & us)) + (16 << ((e ^ f) >> 24 & 255)) + (8 << ((e ^ f) >> 16 & 255)) + (24 << ((e ^ f) & 255));
  }
  function Sd() {
    Fd[$r.rs] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.nC] = lj[An];
    Fd[ΔⵠᐃΔ.aC] = " Share on Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Share on Facebook";
    Fd[ΔⵠᐃΔ.rC] = "You can buy items on the shop in the next game with your points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Kill";
    Fd[ΔⵠᐃΔ.gC] = "Days survived";
    Fd[ΔⵠᐃΔ.cC] = "Building method: Free. Press G to change";
    Fd[ΔⵠᐃΔ.dC] = "Building method: Grid. Press G to change";
    Fd[$r.$s] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Fd[$r.Zt] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.As] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < I; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Fd[$r.qt] = ["Ręka"];
    Fd[$r.Zi] = ["Ziemia", "Brudna!"];
    Fd[$r.ia] = ["Piasek", "Mam go w oczach!"];
    Fd[$r.aE] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Fd[$r.nE] = ["Kamień", "Także nazywany skałą"];
    Fd[$r.Ln] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Fd[$r.Gn] = ["Diament", "Co z nim zrobisz?"];
    Fd[$r.Kn] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Fd[$r.sa] = ["Mąka", "Używana w gotowaniu"];
    Fd[$r.oa] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Fd[$r.ca] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Fd[$r.Hn] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Fd[$r.Un] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Fd[$r.da] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Fd[$r.ma] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Fd[$r.HD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Fd[$r.$D] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Fd[$r.dE] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Fd[$r.ws] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Fd[$r.Bs] = ["Girlanda", "Idealna do dekorowania dachów"];
    Fd[$r.wr] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Fd[$r.Rn] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Fd[$r.ra] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Fd[$r.ha] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Fd[$r.jD] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Fd[$r.ds] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Fd[$r.RD] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Fd[$r.ps] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Fd[$r.LD] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Fd[$r.bs] = ["Kolczasty krzew", "Kłuje!"];
    Fd[$r.pa] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Fd[$r.sE] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Fd[$r.Pe] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Fd[$r.Ja] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Fd[$r.Tt] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Fd[$r.gE] = ["Skóra", "Jesteś fabryką chleba"];
    Fd[$r.cE] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Fd[$r.ka] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Fd[$r.ua] = ["Łuski", "Pachnie jak ryba!"];
    Fd[$r.na] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Fd[$r.oo] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Fd[$r.PD] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Fd[$r.Wn] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Fd[$r.Pa] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Fd[$r.Aa] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Fd[$r.qa] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Fd[$r.je] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Fd[$r.Ft] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Fd[$r.Lt] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Fd[$r.Gt] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Fd[$r.Nt] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Fd[$r.ce] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Fd[$r.We] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Fd[$r.Xt] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Fd[$r.Wt] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Fd[$r.Pt] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Fd[$r.jt] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Fd[$r.Rt] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Fd[$r.de] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Fd[$r.pe] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Fd[$r.le] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Fd[$r.be] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Fd[$r.ve] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Fd[$r.De] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Fd[$r.Ot] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Fd[$r.Yt] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Fd[$r.Jt] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Fd[$r.Kt] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Fd[$r.ue] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Fd[$r.Ee] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Fd[$r.Qe] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Fd[$r.Se] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Fd[$r.Ie] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Fd[$r.Re] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Fd[$r.se] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Fd[$r.re] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Fd[$r.oe] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Fd[$r.Me] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Fd[$r.Le] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Fd[$r.ne] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Fd[$r.Ae] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Fd[$r.we] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Fd[$r.dn] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Fd[$r.Ht] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Fd[$r.Ut] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Fd[$r.ke] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Fd[$r.mn] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Fd[$r.un] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Fd[$r.fn] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Fd[$r.ze] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Fd[$r.Ce] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Fd[$r.os] = ["Smocza kula", "Zdobyta podczas zadania"];
    Fd[$r.Ma] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Fd[$r.rE] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Fd[$r.oE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Fd[$r.hE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Fd[$r.an] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Fd[$r.sn] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Fd[$r.rn] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Fd[$r.iE] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Fd[$r.tE] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Fd[$r.ta] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Fd[$r.ea] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Fd[$r.aa] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Fd[$r.xe] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Fd[$r.ge] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Fd[$r.Jn] = ["Papier", "Używany w tworzeniu książki"];
    Fd[$r.he] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Fd[$r.vs] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Fd[$r.wa] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Fd[$r.Ia] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Fd[$r._a] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Fd[$r.$n] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Fd[$r.ss] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Fd[$r.us] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Fd[$r.eE] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Fd[$r.Ta] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Fd[$r.ja] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Fd[$r.Ra] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Fd[$r.La] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Fd[$r.Xn] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Fd[$r.Fa] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Fd[$r.Wa] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Fd[$r.Na] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Fd[$r.Ha] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Fd[$r.Vn] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Fd[$r.UD] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Fd[$r.OD] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Fd[$r.YD] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Fd[$r.JD] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Fd[$r.KD] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Fd[$r.TD] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Fd[$r.ga] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Fd[$r.ZD] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Fd[$r.Da] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Fd[ΔⵠᐃΔ.QE] = "Nie możesz dołączyć do tego serwera";
    Fd[ΔⵠᐃΔ.SE] = "Wyrzucony: ";
    Fd[ΔⵠᐃΔ.IE] = "Twój klucz jest aktualnie używany przez innego gracza";
    Fd[ΔⵠᐃΔ._E] = "Twój klucz jest nieprawidłowy";
    Fd[ΔⵠᐃΔ.FE] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Fd[ΔⵠᐃΔ.PE] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Fd[ΔⵠᐃΔ.TE] = "Przeżyłeś 1 dzień";
    Fd[ΔⵠᐃΔ.jE] = "Przeżyłeś ";
    Fd[ΔⵠᐃΔ.RE] = " dni";
    Fd[ΔⵠᐃΔ.LE] = "Jesteś martwy ;-;";
    Fd[ΔⵠᐃΔ.GE] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Fd[ΔⵠᐃΔ.qE] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Fd[ΔⵠᐃΔ.EMPTY] = "Źródło jest puste";
    Fd[ΔⵠᐃΔ.WE] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Fd[ΔⵠᐃΔ.NE] = " jest martwy";
    Fd[ΔⵠᐃΔ.HE] = "To nie jest właściwe narzędzie";
    Fd[ΔⵠᐃΔ.UE] = "Dołączyłeś do drużyny";
    Fd[ΔⵠᐃΔ.OE] = "Jesteś martwy";
    Fd[ΔⵠᐃΔ.YE] = " dołączył do drużyny";
    Fd[ΔⵠᐃΔ.JE] = "Twoja drużyna została zniszczona";
    Fd[ΔⵠᐃΔ.KE] = " Opuściłeś drużynę";
    Fd[ΔⵠᐃΔ.XE] = " opuścił drużynę";
    Fd[ΔⵠᐃΔ.VE] = "Ktoś ukradł twój żeton :>";
    Fd[ΔⵠᐃΔ.ZE] = "Wybierz serwer";
    Fd[ΔⵠᐃΔ.$E] = "graczy";
    Fd[ΔⵠᐃΔ.iC] = "wszystkich graczy";
    Fd[ΔⵠᐃΔ.tC] = "graczy w tym trybie";
    Fd[ΔⵠᐃΔ.eC] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Et[Gc] = ["Zostałeś zabity bez powodu"];
    Et[Ps] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Et[En] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Et[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Et[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Et[dh] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Et[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Et[Kr] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Et[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Et[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Et[wd] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Et[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Et[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Et[Iq] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Et[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Et[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Et[Oo] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Et[js] = ["Twoja skóra odpada, słońce cię zabija."];
    Et[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Et[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Et[po] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Et[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function Id() {
    Fd[$r.rs] = ["You feel a great power emanating from this orb"];
    Et[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Fd[$r.Zs] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Fd[ΔⵠᐃΔ.nC] = " RETOUR AU JEU";
    Fd[ΔⵠᐃΔ.aC] = " Partage sur Twitter";
    Fd[ΔⵠᐃΔ.sC] = " Partage sur Facebook";
    Fd[ΔⵠᐃΔ.rC] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Fd[ΔⵠᐃΔ.POINTS] = "points";
    Fd[ΔⵠᐃΔ.oC] = "Score";
    Fd[ΔⵠᐃΔ.hC] = "Tués";
    Fd[ΔⵠᐃΔ.gC] = "Jours survécus";
    Fd[ΔⵠᐃΔ.cC] = "Mode de construction: Libre. Appuie sur G pour changer";
    Fd[ΔⵠᐃΔ.dC] = "Mode de construction: Grille. Appuie sur G pour changer";
    Fd[$r.$s] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", lj[is]];
    Fd[$r.Zt] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Fd[$r.qe] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Fd[$r.As] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Fd[$r.qt] = ["Main"];
    Fd[$r.Zi] = ["Terre", "C'est sale!"];
    Fd[$r.ia] = ["Sable", "J'en ai dans les yeux"];
    Fd[$r.aE] = ["Bois", "Tu n'en auras jamais trop!"];
    Fd[$r.nE] = ["Pierre", "Aussi appelée roche"];
    Fd[$r.Ln] = ["Or", "Sois généreux, donne en aux autres"];
    Fd[$r.Gn] = ["Diamant", "Comme tes yeux! wesh"];
    Fd[$r.Kn] = ["Améthyste", "C'est Mauve comme Lapa"];
    Fd[$r.sa] = ["Farine", "Utile pour la cuisine"];
    Fd[$r.oa] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Fd[$r.ca] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Fd[$r.Hn] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Fd[$r.Un] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Fd[$r.da] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Fd[$r.ma] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Fd[$r.HD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Fd[$r.$D] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Fd[$r.dE] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Fd[$r.ws] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Fd[$r.Bs] = ["Guirlandes", "Utilisable sur les toits"];
    Fd[$r.wr] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Fd[$r.Rn] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Fd[$r.ra] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Fd[$r.ha] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Fd[$r.jD] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Fd[$r.ds] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Fd[$r.RD] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Fd[$r.ps] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Fd[$r.LD] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Fd[$r.bs] = ["Ronces", "Ça pique!"];
    Fd[$r.pa] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Fd[$r.sE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Fd[$r.Pe] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Fd[$r.Ja] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Fd[$r.Tt] = ["Peau de lapin", "Vous êtes un monstre"];
    Fd[$r.gE] = ["Fourrure blanche", "Tu es une usine à pain"];
    Fd[$r.cE] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Fd[$r.ka] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Fd[$r.ua] = ["Écailles", "Ça sent le poisson!"];
    Fd[$r.na] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Fd[$r.oo] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Fd[$r.PD] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Fd[$r.Wn] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Fd[$r.Pa] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Fd[$r.Aa] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Fd[$r.qa] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Fd[$r.je] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Fd[$r.Ft] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Fd[$r.Lt] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Fd[$r.Gt] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Fd[$r.Nt] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Fd[$r.ce] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Fd[$r.We] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Fd[$r.Xt] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Fd[$r.Wt] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Fd[$r.Pt] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Fd[$r.jt] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Fd[$r.Rt] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Fd[$r.de] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Fd[$r.pe] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Fd[$r.le] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Fd[$r.be] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Fd[$r.ve] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Fd[$r.De] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Fd[$r.Ot] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Fd[$r.Yt] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Fd[$r.Jt] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Fd[$r.Kt] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Fd[$r.ue] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Fd[$r.Ee] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", lj[Jj], "Dégâts: 2"];
    Fd[$r.Qe] = ["Pelle en or", "Creuse la terre, le sable et la neige", lj[sh], "Dégâts: 3", "Buildings Dégâts: 1"];
    Fd[$r.Se] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", lj[bd], "Dégâts: 4", "Buildings Dégâts: 1"];
    Fd[$r.Ie] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Fd[$r.Re] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Fd[$r.se] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Fd[$r.re] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Fd[$r.oe] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Fd[$r.Me] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Fd[$r.Le] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Fd[$r.ne] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.Ae] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.we] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.dn] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.Ht] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.Ut] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.ke] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Fd[$r.mn] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.un] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.fn] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Fd[$r.ze] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Fd[$r.Ce] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Fd[$r.os] = ["Orbe du Dragon", "Donné en Quête"];
    Fd[$r.Ma] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Fd[$r.rE] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Fd[$r.oE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Fd[$r.hE] = ["Gemme bleue", "Pour les gens trop gentils"];
    Fd[$r.an] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Fd[$r.sn] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Fd[$r.rn] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Fd[$r.iE] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Fd[$r.tE] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Fd[$r.ta] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Fd[$r.ea] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Fd[$r.aa] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Fd[$r.xe] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Fd[$r.ge] = ["Sac", "Plus de place dans ton inventaire!"];
    Fd[$r.Jn] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Fd[$r.he] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Fd[$r.vs] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Fd[$r.wa] = ["Cadenas", "Pour verrouiller un coffre"];
    Fd[$r.Ia] = ["Clé", "Pour déverrouiller un coffre"];
    Fd[$r._a] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Fd[$r.$n] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Fd[$r.ss] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Fd[$r.us] = ["Toit", "Te cache un peu et te réchauffe"];
    Fd[$r.eE] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Fd[$r.Ta] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Fd[$r.ja] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Fd[$r.Ra] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Fd[$r.La] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Fd[$r.Xn] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Fd[$r.Fa] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Fd[$r.Wa] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Fd[$r.Na] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Fd[$r.Ha] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Fd[$r.Vn] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Fd[$r.UD] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Fd[$r.OD] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Fd[$r.YD] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Fd[$r.JD] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Fd[$r.KD] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Fd[$r.TD] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Fd[$r.ga] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Fd[$r.ZD] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Fd[$r.Da] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Fd[ΔⵠᐃΔ.QE] = "Tu ne peux pas rejoindre le serveur";
    Fd[ΔⵠᐃΔ.SE] = "Expulsé: ";
    Fd[ΔⵠᐃΔ.IE] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Fd[ΔⵠᐃΔ._E] = "Ta clé est fausse";
    Fd[ΔⵠᐃΔ.FE] = "Tu as une vieille version, rafraichis tes caches";
    Fd[ΔⵠᐃΔ.PE] = "Il n'y a plus de nouvelles ressources";
    Fd[ΔⵠᐃΔ.TE] = "Tu as survécu 1 jour";
    Fd[ΔⵠᐃΔ.jE] = "Tu as survécu ";
    Fd[ΔⵠᐃΔ.RE] = " jours";
    Fd[ΔⵠᐃΔ.LE] = "Tu es mort ;-;";
    Fd[ΔⵠᐃΔ.GE] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Fd[ΔⵠᐃΔ.qE] = "Le serveur est complet! Spam le bouton jouer";
    Fd[ΔⵠᐃΔ.EMPTY] = "Cette ressource est vide";
    Fd[ΔⵠᐃΔ.WE] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Fd[ΔⵠᐃΔ.NE] = " est mort";
    Fd[ΔⵠᐃΔ.HE] = "Ce n'est pas le bon outil";
    Fd[ΔⵠᐃΔ.UE] = "Tu as rejoins une équipe";
    Fd[ΔⵠᐃΔ.OE] = "Tu es mort";
    Fd[ΔⵠᐃΔ.YE] = " a rejoint l'équipe";
    Fd[ΔⵠᐃΔ.JE] = "Ton équipe a été détruite";
    Fd[ΔⵠᐃΔ.KE] = "Tu as quitté l'équipe";
    Fd[ΔⵠᐃΔ.XE] = " a quitté l'équipe";
    Fd[ΔⵠᐃΔ.VE] = "Quelqu'un a volé ton token :>";
    Fd[ΔⵠᐃΔ.ZE] = "Choisis un serveur";
    Fd[ΔⵠᐃΔ.$E] = "joueurs";
    Fd[ΔⵠᐃΔ.iC] = "joueurs";
    Fd[ΔⵠᐃΔ.tC] = "joueurs dans ce mode";
    Fd[ΔⵠᐃΔ.eC] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Et[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Et[Lh] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Et[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Et[Ie] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Et[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Et[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Et[Xa] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Et[Oi] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Et[8] = ["Cet ours voulait juste un câlin."];
    Et[Gq] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Et[ic] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Et[Kg] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Et[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Et[nr] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Et[os] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Et[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Et[16] = ["Un kraken a 'kraké' tes os."];
    Et[pd] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Et[dd] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Et[Ed] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Et[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Et[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  function _d(b, c, d) {
    const e = ~(b & 53120) & (b | 53120);
    const f = c ^ 45870;
    const a = ~(d & 7909) & d | ~(d & 7909) & 7909;
    return ((50151 + (function (b, c, d, e, f, a) {
      const g = ~(e & 60937) & 60937 | ~(e & 60937) & e;
      const i = (8 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> wm & 255));
      const j = Bk((24 << (b >> 24 & $g)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (0 << (b & 255)), ~(c & 26589) & 26589 | ~(c & 26589) & c, (d | 39451) & ~(d & 39451));
      (function (b, c) {
        const d = b ^ 8264;
        const e = c ^ 21901;
        const f = Ir(d, e, d);
        const a = function (b, c, d, e) {
          const f = ~(b & 28113) & (b | 28113);
          const a = (c | 43107) & ~(c & 43107);
          const g = (12345 + (46617 + d) * 1103515245) % 2147483648;
          const i = (0 << (e >> 8 & 255)) + (16 << (e & 255)) + (24 << (e >> 24 & Hn)) + (8 << (e >> 16 & ee));
          const j = Hq(f, a, g, i, f, a);
          (function (b, f, i, e, j) {
            const a = ~(b & 26586) & 26586 | ~(b & 26586) & b;
            const k = (12345 + (4167 + f) * 1103515245) % 2147483648;
            const l = (2147483587 + (i + 59265) * 2147483629) % 2147483647;
            const m = (e | 30694) & ~(e & 30694);
            const h = ~(j & 41846) & 41846 | ~(j & 41846) & j;
            const g = pw(a, k, l, m, h, a);
            const c = pw(k, l, m, h, a, k);
          })(g, i, f, a, g);
          return j ^ 44009;
        }(e, d, e, d);
      })(g, i);
      return (j | 23229) & ~(j & 23229);
    }(e, f, a, e, f) ^ ak(e, f, a, e, f))) * 214013 + 2531011) % 4294967296;
  }
  var Fd = [];
  const Pd = bh;
  for (var Td = 0; Td < 344; Td++) {
    Fd[Td] = "";
  }
  var Et = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      od();
    } else if (a === "Français") {
      Id();
    } else if (a === "Deutsch") {
      Bd();
    } else if (a === "Español") {
      ld();
    } else if (a === "Português") {
      cd();
    } else if (a === "Русский") {
      gd();
    } else if (a === "Polski") {
      Sd();
    }
    ᐃΔⵠΔΔ = [];
    ax.DC.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const Rd = So;
  const Ld = _g;
  var Gd;
  Fr = "EN";
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Fr = "RU";
      break;
    case "en":
      Fr = "EN";
      break;
    case "es":
      Fr = "SP";
      break;
    case "fr":
      Fr = "FR";
      break;
    case "pl":
      Fr = "PL";
      break;
    case "de":
      Fr = "DE";
      break;
    case "pt":
      Fr = "PT";
  }
  if (Fr === "FR") {
    $(".md-languages label button").text("Français");
    Gd = Id;
  } else if (Fr === "PL") {
    $(".md-languages label button").text("Polski");
    Gd = Sd;
  } else if (Fr === "PT") {
    $(".md-languages label button").text("Português");
    Gd = cd;
  } else if (Fr === "SP") {
    $(".md-languages label button").text("Español");
    Gd = ld;
  } else if (Fr === "RU") {
    $(".md-languages label button").text("Русский");
    Gd = gd;
  } else if (Fr === "DE") {
    $(".md-languages label button").text("Deutsch");
    Gd = Bd;
  } else {
    $(".md-languages label button").text("English");
    Gd = od;
  }
  Δᐃ = {
    EC: "img/logo.png",
    CC: "img/mapday.png",
    zC: "img/mapnight.png",
    xC: "img/bigzday.png",
    QC: "img/bigznight.png",
    SC: "img/bigday-river1.png",
    IC: "img/bigday-lake.png",
    _C: "img/bigday-berry.png",
    FC: "img/bigday-stone1.png",
    PC: "img/bigday-stone2.png",
    TC: "img/bigday-gold1.png",
    jC: "img/bigday-gold2.png",
    RC: "img/bigday-emerald1.png",
    LC: "img/bigday-emerald2.png",
    GC: "img/bigday-amethyst.png",
    qC: "img/bigday-bear.png",
    WC: "img/bigday-cave.png",
    NC: "img/bigday-diamond.png",
    HC: "img/bigday-island.png",
    UC: "img/bigday-reidite.png",
    OC: "img/bigday-spider.png",
    YC: "img/bigday-wolf.png",
    JC: "img/bigday-fir-tree.png",
    KC: "img/bigday-fox.png",
    XC: "img/bigday-kraken.png",
    VC: "img/bigday-piranha.png",
    ZC: "img/bigday-cactus.png",
    $C: "img/bigday-magma.png",
    iz: "img/bigday-river1.png",
    tz: "img/bignight-lake.png",
    ez: "img/bignight-berry.png",
    nz: "img/bignight-stone1.png",
    az: "img/bignight-stone2.png",
    sz: "img/bignight-gold1.png",
    rz: "img/bignight-gold2.png",
    oz: "img/bignight-emerald1.png",
    hz: "img/bignight-emerald2.png",
    gz: "img/bignight-amethyst.png",
    cz: "img/bignight-bear.png",
    dz: "img/bignight-cave.png",
    mz: "img/bignight-diamond.png",
    uz: "img/bignight-island.png",
    fz: "img/bignight-reidite.png",
    pz: "img/bignight-spider.png",
    lz: "img/bignight-wolf.png",
    bz: "img/bignight-fir-tree.png",
    vz: "img/bignight-fox.png",
    yz: "img/bignight-kraken.png",
    kz: "img/bignight-piranha.png",
    Az: "img/bignight-cactus.png",
    wz: "img/bignight-magma.png",
    Mz: "img/bigday-desert.png",
    Bz: "img/bigday-winter.png",
    Dz: "img/bigday-lava.png",
    Ez: "img/bigday-forest.png",
    Cz: "img/bignight-desert.png",
    zz: "img/bignight-winter.png",
    xz: "img/bignight-lava.png",
    Qz: "img/bignight-forest.png",
    Sz: "img/day-river-wave.png",
    Iz: "img/night-river-wave.png",
    _z: "img/day-fog0.png",
    Fz: "img/day-fog1.png",
    Pz: "img/day-fog2.png",
    Tz: "img/night-fog0.png",
    jz: "img/night-fog1.png",
    Rz: "img/night-fog2.png",
    Lz: "img/day-fogdesert0.png",
    Gz: "img/day-fogdesert1.png",
    qz: "img/day-fogdesert2.png",
    Wz: "img/night-fogdesert0.png",
    Nz: "img/night-fogdesert1.png",
    Uz: "img/night-fogdesert2.png",
    Oz: "img/day-cross-server.png",
    Yz: "img/day-here-server.png",
    Jz: "img/day-finish-server.png",
    Kz: "img/day-item-server.png",
    Xz: "img/day-skull-server.png",
    Vz: "img/night-cross-server.png",
    Zz: "img/night-here-server.png",
    $z: "img/night-finish-server.png",
    ix: "img/night-item-server.png",
    tx: "img/night-skull-server.png",
    nx: "img/day-reidite0.png",
    sx: "img/night-reidite0.png",
    ox: "img/day-reidite1.png",
    hx: "img/night-reidite1.png",
    gx: "img/day-reidite2.png",
    mx: "img/night-reidite2.png",
    ux: "img/day-lava1.png",
    lx: "img/night-lava1.png",
    bx: "img/day-lava2.png",
    vx: "img/night-lava2.png",
    yx: "img/day-lava3.png",
    kx: "img/night-lava3.png",
    Ax: "img/day-lava4.png",
    wx: "img/night-lava4.png",
    Mx: "img/day-lava5.png",
    Bx: "img/night-lava5.png",
    Dx: "img/day-lava6.png",
    Ex: "img/night-lava6.png",
    Cx: "img/day-lava-ground1.png",
    zx: "img/night-lava-ground1.png",
    xx: "img/day-lava-ground2.png",
    Qx: "img/night-lava-ground2.png",
    Sx: "img/day-lava-ground3.png",
    Ix: "img/night-lava-ground3.png",
    _x: "img/day-lava-ground4.png",
    Fx: "img/night-lava-ground4.png",
    Px: "img/day-lava-ground5.png",
    Tx: "img/night-lava-ground5.png",
    jx: "img/day-lava-ground6.png",
    Rx: "img/night-lava-ground6.png",
    Lx: "img/day-fire-mob.png",
    Gx: "img/night-fire-mob.png",
    qx: "img/hurt-fire-mob.png",
    Wx: "img/day-diamond-protection.png",
    Nx: "img/night-diamond-protection.png",
    Hx: "img/day-hand-diamond-protection.png",
    Ux: "img/night-hand-diamond-protection.png",
    Ox: "img/inv-diamond-protection-out.png",
    Yx: "img/inv-diamond-protection-in.png",
    Jx: "img/inv-diamond-protection-click.png",
    Kx: "img/day-amethyst-protection.png",
    Xx: "img/night-amethyst-protection.png",
    Vx: "img/day-hand-amethyst-protection.png",
    Zx: "img/night-hand-amethyst-protection.png",
    $x: "img/inv-amethyst-protection-out.png",
    iQ: "img/inv-amethyst-protection-in.png",
    tQ: "img/inv-amethyst-protection-click.png",
    eQ: "img/day-reidite-sword.png",
    nQ: "img/night-reidite-sword.png",
    aQ: "img/inv-reidite-sword-out.png",
    sQ: "img/inv-reidite-sword-in.png",
    rQ: "img/inv-reidite-sword-click.png",
    oQ: "img/inv-reidite-out.png",
    hQ: "img/inv-reidite-in.png",
    gQ: "img/inv-reidite-click.png",
    cQ: "img/inv-flame-out.png",
    dQ: "img/inv-flame-in.png",
    mQ: "img/inv-flame-click.png",
    uQ: "img/day-magma-buble0.png",
    fQ: "img/night-magma-buble0.png",
    pQ: "img/day-magma-buble1.png",
    lQ: "img/night-magma-buble1.png",
    bQ: "img/day-magma-buble2.png",
    vQ: "img/night-magma-buble2.png",
    yQ: "img/day-lava-dragon.png",
    kQ: "img/night-lava-dragon.png",
    AQ: "img/day-fire-dragon.png",
    wQ: "img/night-fire-dragon.png",
    Cc: "img/hurt-lava-dragon.png",
    MQ: "img/day-lava-wing-left.png",
    BQ: "img/night-lava-wing-left.png",
    DQ: "img/day-lava-wing-right.png",
    EQ: "img/night-lava-wing-right.png",
    Sc: "img/hurt-lava-wing-left.png",
    Ic: "img/hurt-lava-wing-right.png",
    CQ: "img/day-reidite-spear.png",
    zQ: "img/night-reidite-spear.png",
    xQ: "img/inv-reidite-spear-out.png",
    QQ: "img/inv-reidite-spear-in.png",
    SQ: "img/inv-reidite-spear-click.png",
    IQ: "img/day-reidite-helmet.png",
    _Q: "img/night-reidite-helmet.png",
    FQ: "img/inv-reidite-helmet-out.png",
    PQ: "img/inv-reidite-helmet-in.png",
    TQ: "img/inv-reidite-helmet-click.png",
    jQ: "img/day-hand-reidite-protection.png",
    RQ: "img/night-hand-reidite-protection.png",
    LQ: "img/day-reidite-protection.png",
    GQ: "img/night-reidite-protection.png",
    qQ: "img/inv-reidite-protection-out.png",
    WQ: "img/inv-reidite-protection-in.png",
    NQ: "img/inv-reidite-protection-click.png",
    HQ: "img/day-lava-dragon-sword.png",
    UQ: "img/night-lava-dragon-sword.png",
    OQ: "img/inv-lava-dragon-sword-out.png",
    YQ: "img/inv-lava-dragon-sword-in.png",
    JQ: "img/inv-lava-dragon-sword-click.png",
    KQ: "img/day-lava-spear.png",
    XQ: "img/night-lava-spear.png",
    VQ: "img/inv-lava-spear-out.png",
    ZQ: "img/inv-lava-spear-in.png",
    $Q: "img/inv-lava-spear-click.png",
    iS: "img/day-lava-helmet.png",
    tS: "img/night-lava-helmet.png",
    eS: "img/inv-lava-helmet-out.png",
    nS: "img/inv-lava-helmet-in.png",
    aS: "img/inv-lava-helmet-click.png",
    sS: "img/day-witch-hat.png",
    rS: "img/night-witch-hat.png",
    oS: "img/inv-witch-hat-out.png",
    hS: "img/inv-witch-hat-in.png",
    gS: "img/inv-witch-hat-click.png",
    cS: "img/day-nimbus2000.png",
    dS: "img/night-nimbus2000.png",
    mS: "img/inv-nimbus2000-out.png",
    uS: "img/inv-nimbus2000-in.png",
    fS: "img/inv-nimbus2000-click.png",
    pS: "img/day-accessory1-pacques.png",
    lS: "img/night-accessory1-pacques.png",
    bS: "img/day-accessory2-pacques.png",
    vS: "img/night-accessory2-pacques.png",
    yS: "img/day-accessory3-pacques.png",
    kS: "img/night-accessory3-pacques.png",
    AS: "img/day-accessory5-pacques.png",
    wS: "img/night-accessory5-pacques.png",
    MS: "img/day-accessory6-pacques.png",
    BS: "img/night-accessory6-pacques.png",
    DS: "img/day-accessory7-pacques.png",
    ES: "img/night-accessory7-pacques.png",
    CS: "img/day-accessory8-pacques.png",
    zS: "img/night-accessory8-pacques.png",
    xS: "img/day-bag-pacques.png",
    QS: "img/night-bag-pacques.png",
    SS: "img/day-carrot.png",
    IS: "img/night-carrot.png",
    _S: "img/day-carrot-dried.png",
    FS: "img/night-carrot-dried.png",
    PS: "img/day-tomato-herb.png",
    TS: "img/night-tomato-herb.png",
    jS: "img/day-tomato-herb-dried.png",
    RS: "img/night-tomato-herb-dried.png",
    LS: "img/day-tomato.png",
    GS: "img/night-tomato.png",
    qS: "img/inv-carrot-out.png",
    WS: "img/inv-carrot-in.png",
    NS: "img/inv-carrot-click.png",
    HS: "img/inv-tomato-out.png",
    US: "img/inv-tomato-in.png",
    OS: "img/inv-tomato-click.png",
    YS: "img/day-player0.png",
    JS: "img/night-player0.png",
    KS: "img/day-player1.png",
    XS: "img/night-player1.png",
    VS: "img/day-player2.png",
    ZS: "img/night-player22.png",
    $S: "img/day-player3.png",
    iI: "img/night-player33.png",
    tI: "img/day-player4.png",
    eI: "img/night-player4.png",
    nI: "img/day-player5.png",
    aI: "img/night-player5.png",
    sI: "img/day-player6.png",
    rI: "img/night-player6.png",
    oI: "img/day-player7.png",
    hI: "img/night-player7.png",
    gI: "img/day-player8.png",
    cI: "img/night-player8.png",
    dI: "img/day-player9.png",
    mI: "img/night-player9.png",
    uI: "img/day-player10.png",
    fI: "img/night-player10.png",
    pI: "img/day-player11.png",
    lI: "img/night-player11.png",
    bI: "img/day-player12.png",
    vI: "img/night-player12.png",
    yI: "img/day-player13.png",
    kI: "img/night-player13.png",
    AI: "img/day-player14.png",
    wI: "img/night-player14.png",
    MI: "img/day-player15.png",
    BI: "img/night-player15.png",
    DI: "img/day-player16.png",
    EI: "img/night-player16.png",
    CI: "img/day-player17.png",
    zI: "img/night-player17.png",
    xI: "img/day-player18.png",
    QI: "img/night-player18.png",
    SI: "img/day-player19.png",
    II: "img/night-player19.png",
    _I: "img/day-hand-player0.png",
    FI: "img/night-hand-player0.png",
    TI: "img/day-hand-player1.png",
    jI: "img/night-hand-player1.png",
    RI: "img/day-hand-player2.png",
    LI: "img/night-hand-player22.png",
    GI: "img/day-hand-player3.png",
    qI: "img/night-hand-player33.png",
    WI: "img/day-hand-player4.png",
    NI: "img/night-hand-player4.png",
    HI: "img/day-hand-player5.png",
    UI: "img/night-hand-player5.png",
    OI: "img/day-hand-player6.png",
    YI: "img/night-hand-player6.png",
    JI: "img/day-hand-player7.png",
    KI: "img/night-hand-player7.png",
    XI: "img/day-hand-player8.png",
    VI: "img/night-hand-player8.png",
    ZI: "img/day-hand-player9.png",
    $I: "img/night-hand-player9.png",
    i_: "img/day-hand-player10.png",
    t_: "img/night-hand-player10.png",
    e_: "img/day-hand-player11.png",
    n_: "img/night-hand-player11.png",
    a_: "img/day-hand-player12.png",
    s_: "img/night-hand-player12.png",
    r_: "img/day-hand-player13.png",
    o_: "img/night-hand-player13.png",
    h_: "img/day-hand-player14.png",
    g_: "img/night-hand-player14.png",
    c_: "img/day-hand-player15.png",
    d_: "img/night-hand-player15.png",
    m_: "img/day-hand-player16.png",
    u_: "img/night-hand-player16.png",
    f_: "img/day-hand-player17.png",
    p_: "img/night-hand-player17.png",
    l_: "img/day-hand-player18.png",
    b_: "img/night-hand-player18.png",
    v_: "img/day-hand-player19.png",
    y_: "img/night-hand-player19.png",
    k_: "img/day-accessory4.png",
    A_: "img/night-accessory4.png",
    w_: "img/day-accessory9.png",
    M_: "img/night-accessory9.png",
    B_: "img/day-accessory10.png",
    D_: "img/night-accessory10.png",
    E_: "img/day-accessory11.png",
    C_: "img/night-accessory11.png",
    z_: "img/day-accessory12.png",
    x_: "img/night-accessory12.png",
    Q_: "img/day-bag.png",
    S_: "img/night-bag.png",
    I_: "img/inv-bag-out.png",
    __: "img/inv-bag-in.png",
    F_: "img/inv-bag-click.png",
    P_: "img/day-pitchfork.png",
    T_: "img/night-pitchfork.png",
    j_: "img/inv-pitchfork-out.png",
    R_: "img/inv-pitchfork-in.png",
    L_: "img/inv-pitchfork-click.png",
    G_: "img/inv-wood-spike-door-out.png",
    q_: "img/inv-wood-spike-door-in.png",
    W_: "img/inv-wood-spike-door-click.png",
    N_: "img/inv-stone-spike-door-out.png",
    H_: "img/inv-stone-spike-door-in.png",
    U_: "img/inv-stone-spike-door-click.png",
    O_: "img/inv-gold-spike-door-out.png",
    Y_: "img/inv-gold-spike-door-in.png",
    J_: "img/inv-gold-spike-door-click.png",
    K_: "img/inv-diamond-spike-door-out.png",
    X_: "img/inv-diamond-spike-door-in.png",
    V_: "img/inv-diamond-spike-door-click.png",
    Z_: "img/inv-amethyst-spike-door-out.png",
    iF: "img/inv-amethyst-spike-door-in.png",
    tF: "img/inv-amethyst-spike-door-click.png",
    eF: "img/day-wood-spike-door.png",
    nF: "img/night-wood-spike-door.png",
    aF: "img/day-stone-spike-door.png",
    sF: "img/night-stone-spike-door.png",
    rF: "img/day-gold-spike-door.png",
    oF: "img/night-gold-spike-door.png",
    hF: "img/day-diamond-spike-door.png",
    gF: "img/night-diamond-spike-door.png",
    cF: "img/day-amethyst-spike-door.png",
    dF: "img/night-amethyst-spike-door.png",
    mF: "img/inv-reidite-spike-door-out.png",
    uF: "img/inv-reidite-spike-door-in.png",
    fF: "img/inv-reidite-spike-door-click.png",
    pF: "img/inv-reidite-door-out.png",
    lF: "img/inv-reidite-door-in.png",
    bF: "img/inv-reidite-door-click.png",
    vF: "img/inv-reidite-spike-out.png",
    yF: "img/inv-reidite-spike-in.png",
    kF: "img/inv-reidite-spike-click.png",
    AF: "img/inv-reidite-wall-out.png",
    wF: "img/inv-reidite-wall-in.png",
    MF: "img/inv-reidite-wall-click.png",
    BF: "img/day-reidite-wall.png",
    DF: "img/night-reidite-wall.png",
    EF: "img/day-reidite-door.png",
    CF: "img/night-reidite-door.png",
    zF: "img/day-reidite-spike.png",
    xF: "img/night-reidite-spike.png",
    QF: "img/day-reidite-spike-door.png",
    SF: "img/night-reidite-spike-door.png",
    IF: "img/inv-reidite-pickaxe-out.png",
    _F: "img/inv-reidite-pickaxe-in.png",
    FF: "img/inv-reidite-pickaxe-click.png",
    PF: "img/day-reidite-pickaxe.png",
    TF: "img/night-reidite-pickaxe.png",
    jF: "img/inv-reidite-hammer-out.png",
    RF: "img/inv-reidite-hammer-in.png",
    LF: "img/inv-reidite-hammer-click.png",
    GF: "img/day-reidite-hammer.png",
    qF: "img/night-reidite-hammer.png",
    WF: "img/day-watermelon1.png",
    NF: "img/night-watermelon1.png",
    HF: "img/day-watermelon-dried1.png",
    UF: "img/night-watermelon-dried1.png",
    OF: "img/inv-watermelon-out.png",
    YF: "img/inv-watermelon-in.png",
    JF: "img/inv-watermelon-click.png",
    KF: "img/day-boat.png",
    XF: "img/night-boat.png",
    VF: "img/day-boat-wave.png",
    ZF: "img/night-boat-wave.png",
    $F: "img/inv-boat-out.png",
    iP: "img/inv-boat-in.png",
    tP: "img/inv-boat-click.png",
    eP: "img/day-plane.png",
    nP: "img/night-plane.png",
    aP: "img/inv-plane-out.png",
    sP: "img/inv-plane-in.png",
    rP: "img/inv-plane-click.png",
    oP: "img/day-sled.png",
    hP: "img/night-sled.png",
    gP: "img/day-sled-wave.png",
    cP: "img/night-sled-wave.png",
    dP: "img/inv-sled-out.png",
    mP: "img/inv-sled-in.png",
    uP: "img/inv-sled-click.png",
    fP: "img/day-pirate-hat.png",
    pP: "img/night-pirate-hat.png",
    lP: "img/inv-pirate-hat-out.png",
    bP: "img/inv-pirate-hat-in.png",
    vP: "img/inv-pirate-hat-click.png",
    yP: "img/day-penguin.png",
    kP: "img/night-penguin.png",
    pA: "img/hurt-penguin.png",
    lA: "img/inv-penguin-feather-click.png",
    vA: "img/inv-hawk-feather-click.png",
    AP: "img/day-boar1.png",
    wP: "img/day-boar1-tamed.png",
    MP: "img/day-boar1-angry.png",
    BP: "img/night-boar1.png",
    DP: "img/night-boar1-tamed.png",
    EP: "img/night-boar1-angry.png",
    CP: "img/inv-mount-boar-out.png",
    zP: "img/inv-mount-boar-in.png",
    xP: "img/inv-mount-boar-click.png",
    EA: "img/day-hurt-boar1.png",
    Vs: "img/boar1-step.png",
    QP: "img/day-saddle1.png",
    SP: "img/night-saddle1.png",
    IP: "img/inv-saddle-out.png",
    _P: "img/inv-saddle-in.png",
    FP: "img/inv-saddle-click.png",
    PP: "img/day-magic-wand0.png",
    TP: "img/night-magic-wand0.png",
    jP: "img/day-light-wand1.png",
    RP: "img/night-light-wand1.png",
    LP: "img/inv-magic-wand0-out.png",
    GP: "img/inv-magic-wand0-in.png",
    qP: "img/inv-magic-wand0-click.png",
    WP: "img/day-magic-wand1.png",
    NP: "img/night-magic-wand1.png",
    HP: "img/day-light-wand0.png",
    UP: "img/night-light-wand0.png",
    OP: "img/inv-magic-wand1-out.png",
    YP: "img/inv-magic-wand1-in.png",
    JP: "img/inv-magic-wand1-click.png",
    KP: "img/day-firefly.png",
    XP: "img/night-firefly.png",
    br: "img/hurt-firefly.png",
    VP: "img/inv-firefly-out.png",
    ZP: "img/inv-firefly-in.png",
    $P: "img/inv-firefly-click.png",
    iT: "img/day-baby-dragon.png",
    tT: "img/night-baby-dragon.png",
    eT: "img/day-baby-dragon-angry.png",
    nT: "img/night-baby-dragon-angry.png",
    aT: "img/day-baby-dragon-tamed.png",
    sT: "img/night-baby-dragon-tamed.png",
    rT: "img/day-wing-dragon-left-angry.png",
    oT: "img/night-dragon-wing-left-angry.png",
    hT: "img/day-wing-dragon-right-angry.png",
    gT: "img/night-dragon-wing-right-angry.png",
    cT: "img/day-wing-dragon-left-tamed.png",
    dT: "img/night-dragon-wing-left-tamed.png",
    mT: "img/day-wing-dragon-right-tamed.png",
    uT: "img/night-wing-dragon-right-tamed.png",
    fT: "img/day-wing-dragon-left.png",
    pT: "img/night-dragon-wing-left.png",
    lT: "img/day-wing-dragon-right.png",
    bT: "img/night-wing-dragon-right.png",
    ew: "img/hurt-baby-dragon.png",
    nw: "img/hurt-baby-dragon-wing-left.png",
    aw: "img/hurt-baby-dragon-wing-right.png",
    vT: "img/inv-baby-dragon-out.png",
    yT: "img/inv-baby-dragon-in.png",
    kT: "img/inv-baby-dragon-click.png",
    AT: "img/day-baby-lava.png",
    wT: "img/night-baby-lava.png",
    MT: "img/day-baby-lava-angry.png",
    BT: "img/night-baby-lava-angry.png",
    DT: "img/day-baby-lava-tamed.png",
    ET: "img/night-baby-lava-tamed.png",
    CT: "img/day-wing-lava-left-angry.png",
    zT: "img/night-wing-lava-left-angry.png",
    xT: "img/day-wing-lava-right-angry.png",
    QT: "img/night-wing-lava-right-angry.png",
    ST: "img/day-wing-lava-left-tamed.png",
    IT: "img/night-wing-lava-left-tamed.png",
    _T: "img/day-wing-lava-right-tamed.png",
    FT: "img/night-wing-lava-right-tamed.png",
    PT: "img/day-wing-lava-left.png",
    TT: "img/night-wing-lava-left.png",
    jT: "img/day-wing-lava-right.png",
    RT: "img/night-wing-lava-right.png",
    lw: "img/hurt-baby-lava.png",
    bw: "img/hurt-baby-lava-wing-left.png",
    yw: "img/hurt-baby-lava-wing-right.png",
    LT: "img/inv-baby-lava-out.png",
    GT: "img/inv-baby-lava-in.png",
    qT: "img/inv-baby-lava-click.png",
    WT: "img/day-falcon.png",
    NT: "img/night-falcon.png",
    HT: "img/day-falcon-angry.png",
    UT: "img/night-falcon-angry.png",
    OT: "img/day-falcon-ground.png",
    YT: "img/night-falcon-ground.png",
    JT: "img/day-falcon-ground-angry.png",
    KT: "img/night-falcon-ground-angry.png",
    XT: "img/day-falcon-wings-left.png",
    VT: "img/night-falcon-wings-left.png",
    ZT: "img/day-falcon-wings-right.png",
    $T: "img/night-falcon-wings-right.png",
    ij: "img/day-falcon-angry-wings-left.png",
    tj: "img/night-falcon-angry-wings-left.png",
    ej: "img/day-falcon-angry-wings-right.png",
    nj: "img/night-falcon-angry-wings-right.png",
    aj: "img/day-falcon-wings-left-tamed.png",
    sj: "img/night-falcon-wings-left-tamed.png",
    rj: "img/day-falcon-wings-right-tamed.png",
    oj: "img/night-falcon-wings-right-tamed.png",
    hj: "img/day-falcon-tamed.png",
    gj: "img/night-falcon-tamed.png",
    Lw: "img/hurt-falcon-ground.png",
    Sw: "img/hurt-falcon.png",
    Iw: "img/hurt-falcon-wings-left.png",
    _w: "img/hurt-falcon-wings-right.png",
    cj: "img/inv-falcon-out.png",
    dj: "img/inv-falcon-in.png",
    mj: "img/inv-falcon-click.png",
    uj: "img/day-crab-boss.png",
    fj: "img/night-crab-boss.png",
    pj: "img/day-crab-boss-angry.png",
    lj: "img/night-crab-boss-angry.png",
    bj: "img/day-crab-boss-tamed.png",
    vj: "img/night-crab-boss-tamed.png",
    yj: "img/day-crab-boss-claw-left-attack.png",
    kj: "img/night-crab-boss-claw-left-attack.png",
    Aj: "img/day-crab-boss-claw-right-attack.png",
    wj: "img/night-crab-boss-claw-right-attack.png",
    Mj: "img/day-crab-boss-claw-left-tamed.png",
    Bj: "img/night-crab-boss-claw-left-tamed.png",
    Dj: "img/day-crab-boss-claw-right-tamed.png",
    Ej: "img/night-crab-boss-claw-right-tamed.png",
    Cj: "img/day-crab-boss-claw-left.png",
    zj: "img/night-crab-boss-claw-left.png",
    xj: "img/day-crab-boss-claw-right.png",
    Qj: "img/night-crab-boss-claw-right.png",
    TA: "img/hurt-crab-boss.png",
    jA: "img/hurt-crab-boss-claw-left.png",
    RA: "img/hurt-crab-boss-claw-right.png",
    UA: "img/heal-crab-boss.png",
    OA: "img/heal-crab-boss-claw-left.png",
    YA: "img/heal-crab-boss-claw-right.png",
    nr: "img/crab-step.png",
    Sj: "img/inv-crab-boss-out.png",
    Ij: "img/inv-crab-boss-in.png",
    _j: "img/inv-crab-boss-click.png",
    Fj: "img/day-cactus10.png",
    Pj: "img/night-cactus10.png",
    Tj: "img/inv-cactus-out.png",
    jj: "img/inv-cactus-in.png",
    Rj: "img/inv-cactus-click.png",
    Lj: "img/day-scorpion.png",
    Gj: "img/night-scorpion.png",
    qj: "img/day-scorpion-hand-left.png",
    Wj: "img/night-scorpion-hand-left.png",
    Nj: "img/day-scorpion-hand-right.png",
    Hj: "img/night-scorpion-hand-right.png",
    uM: "img/hurt-scorpion.png",
    lM: "img/hurt-scorpion-hand-left.png",
    bM: "img/hurt-scorpion-hand-right.png",
    Uj: "img/day-vulture.png",
    Oj: "img/night-vulture.png",
    Yj: "img/day-vulture-angry.png",
    Jj: "img/night-vulture-angry.png",
    Kj: "img/day-vulture-ground.png",
    Xj: "img/night-vulture-ground.png",
    Vj: "img/day-vulture-ground-angry.png",
    Zj: "img/night-vulture-ground-angry.png",
    $j: "img/day-vulture-wings-left.png",
    iR: "img/night-vulture-wings-left.png",
    tR: "img/day-vulture-wings-right.png",
    eR: "img/night-vulture-wings-right.png",
    nR: "img/day-vulture-angry-wings-left.png",
    aR: "img/night-vulture-angry-wings-left.png",
    sR: "img/day-vulture-angry-wings-right.png",
    rR: "img/night-vulture-angry-wings-right.png",
    oR: "img/day-vulture-wings-left-tamed.png",
    hR: "img/night-vulture-wings-left-tamed.png",
    gR: "img/day-vulture-wings-right-tamed.png",
    cR: "img/night-vulture-wings-right-tamed.png",
    dR: "img/day-vulture-tamed.png",
    mR: "img/night-vulture-tamed.png",
    sM: "img/hurt-vulture-ground.png",
    Vw: "img/hurt-vulture.png",
    Zw: "img/hurt-vulture-wings-left.png",
    $w: "img/hurt-vulture-wings-right.png",
    uR: "img/day-aloe-vera.png",
    fR: "img/night-aloe-vera.png",
    pR: "img/inv-aloe-vera-out.png",
    lR: "img/inv-aloe-vera-in.png",
    bR: "img/inv-aloe-vera-click.png",
    vR: "img/day-aloe-vera-grown.png",
    yR: "img/night-aloe-vera-grown.png",
    kR: "img/day-aloe-vera-dried.png",
    AR: "img/night-aloe-vera-dried.png",
    wR: "img/day-turban1.png",
    MR: "img/night-turban1.png",
    BR: "img/day-turban2.png",
    DR: "img/night-turban2.png",
    ER: "img/inv-turban2-out.png",
    CR: "img/inv-turban2-in.png",
    zR: "img/inv-turban2-click.png",
    xR: "img/inv-turban1-out.png",
    QR: "img/inv-turban1-in.png",
    SR: "img/inv-turban1-click.png",
    IR: "img/day-pitchfork2.png",
    _R: "img/night-pitchfork2.png",
    FR: "img/inv-pitchfork2-out.png",
    PR: "img/inv-pitchfork2-in.png",
    TR: "img/inv-pitchfork2-click.png",
    jR: "img/inv-gold-fork-click.png",
    RR: "img/inv-pilot-glasses-click.png",
    LR: "img/day-pilot-helmet.png",
    GR: "img/night-pilot-helmet.png",
    qR: "img/inv-pilot-helmet-out.png",
    WR: "img/inv-pilot-helmet-in.png",
    NR: "img/inv-pilot-helmet-click.png",
    HR: "img/day-sandworm0.png",
    UR: "img/day-sandworm1.png",
    OR: "img/day-sandworm2.png",
    YR: "img/night-sandworm0.png",
    JR: "img/night-sandworm1.png",
    KR: "img/night-sandworm2.png",
    yM: "img/hurt-sandworm0.png",
    AM: "img/hurt-sandworm1.png",
    MM: "img/hurt-sandworm2.png",
    kA: "img/inv-vulture-feather-click.png",
    XR: "img/day-emerald0.png",
    VR: "img/night-emerald0.png",
    ZR: "img/day-emerald1.png",
    $R: "img/night-emerald1.png",
    iL: "img/day-emerald2.png",
    tL: "img/night-emerald2.png",
    EM: "img/inv-emerald-click.png",
    eL: "img/inv-sworm-juice-out.png",
    nL: "img/inv-sworm-juice-in.png",
    aL: "img/inv-sworm-juice-click.png",
    sL: "img/day-point-machine.png",
    rL: "img/night-point-machine.png",
    oL: "img/day-point-machine-hole.png",
    hL: "img/night-point-machine-hole.png",
    gL: "img/day-point-machine-ground.png",
    cL: "img/night-point-machine-ground.png",
    dL: "img/day-point-machine-rotate.png",
    mL: "img/night-point-machine-rotate.png",
    uL: "img/inv-point-machine-out.png",
    fL: "img/inv-point-machine-in.png",
    pL: "img/inv-point-machine-click.png",
    lL: "img/day-extractor-machine0-stone.png",
    bL: "img/night-extractor-machine0-stone.png",
    vL: "img/day-extractor-machine-stone.png",
    yL: "img/night-extractor-machine-stone.png",
    kL: "img/inv-extractor-machine-stone-out.png",
    AL: "img/inv-extractor-machine-stone-in.png",
    wL: "img/inv-extractor-machine-stone-click.png",
    ML: "img/day-extractor-machine0-gold.png",
    BL: "img/night-extractor-machine0-gold.png",
    DL: "img/day-extractor-machine-gold.png",
    EL: "img/night-extractor-machine-gold.png",
    CL: "img/inv-extractor-machine-gold-out.png",
    zL: "img/inv-extractor-machine-gold-in.png",
    xL: "img/inv-extractor-machine-gold-click.png",
    QL: "img/day-extractor-machine0-diamond.png",
    SL: "img/night-extractor-machine0-diamond.png",
    IL: "img/day-extractor-machine-diamond.png",
    _L: "img/night-extractor-machine-diamond.png",
    FL: "img/inv-extractor-machine-diamond-out.png",
    PL: "img/inv-extractor-machine-diamond-in.png",
    TL: "img/inv-extractor-machine-diamond-click.png",
    jL: "img/day-extractor-machine0-amethyst.png",
    RL: "img/night-extractor-machine0-amethyst.png",
    LL: "img/day-extractor-machine-amethyst.png",
    GL: "img/night-extractor-machine-amethyst.png",
    qL: "img/inv-extractor-machine-amethyst-out.png",
    WL: "img/inv-extractor-machine-amethyst-in.png",
    NL: "img/inv-extractor-machine-amethyst-click.png",
    HL: "img/day-extractor-machine0-reidite.png",
    UL: "img/night-extractor-machine0-reidite.png",
    OL: "img/day-extractor-machine-reidite.png",
    YL: "img/night-extractor-machine-reidite.png",
    JL: "img/inv-extractor-machine-reidite-out.png",
    KL: "img/inv-extractor-machine-reidite-in.png",
    XL: "img/inv-extractor-machine-reidite-click.png",
    rf: "img/extractor-cases.png",
    VL: "img/day-golden-hen.png",
    ZL: "img/night-golden-hen.png",
    $L: "img/day-golden-chicken.png",
    iG: "img/night-golden-chicken.png",
    nA: "img/hurt-golden-hen.png",
    aA: "img/hurt-golden-chicken.png",
    tG: "img/logo-interface.png",
    eG: "img/forest-mode-hover.png",
    nG: "img/normal-mode-hover.png",
    aG: "img/vampire-mode-hover.png",
    sG: "img/zombie-mode-hover.png",
    rG: "img/community-mode-hover2.png",
    oG: "img/experimental-mode-hover.png",
    hG: "img/zombie-mode-out.png",
    gG: "img/zombie-mode-in.png",
    cG: "img/zombie-mode-click.png",
    dG: "img/vampire-mode-out.png",
    mG: "img/vampire-mode-in.png",
    uG: "img/vampire-mode-click.png",
    fG: "img/normal-mode-out.png",
    pG: "img/normal-mode-in.png",
    lG: "img/normal-mode-click.png",
    bG: "img/forest-mode-out.png",
    vG: "img/forest-mode-in.png",
    yG: "img/forest-mode-click.png",
    kG: "img/community-mode-out.png",
    AG: "img/community-mode-in.png",
    wG: "img/community-mode-click.png",
    MG: "img/experimental-modes-out.png",
    BG: "img/experimental-modes-in.png",
    DG: "img/experimental-modes-click.png",
    EG: "img/youtube-button-out.png",
    CG: "img/youtube-button-in.png",
    zG: "img/youtube-button-click.png",
    xG: "img/wiki-button-out.png",
    QG: "img/wiki-button-in.png",
    SG: "img/wiki-button-click.png",
    IG: "img/twitter-button-out.png",
    _G: "img/twitter-button-in.png",
    FG: "img/twitter-button-click.png",
    PG: "img/facebook-button-out.png",
    TG: "img/facebook-button-in.png",
    jG: "img/facebook-button-click.png",
    LG: "img/reddit-button-out.png",
    GG: "img/reddit-button-in.png",
    qG: "img/reddit-button-click.png",
    WG: "img/discord-button-out.png",
    NG: "img/discord-button-in.png",
    HG: "img/discord-button-click.png",
    UG: "img/merch-button-out.png",
    OG: "img/merch-button-in.png",
    YG: "img/merch-button-click.png",
    JG: "img/terminal-button-out.png",
    KG: "img/terminal-button-in.png",
    XG: "img/terminal-button-click.png",
    VG: "img/restart-out.png",
    ZG: "img/restart-in.png",
    $G: "img/restart-click.png",
    iq: "img/guide-out.png",
    tq: "img/guide-in.png",
    eq: "img/guide-click.png",
    nq: "img/copy-paste-out.png",
    aq: "img/copy-paste-in.png",
    sq: "img/copy-paste-click.png",
    rq: "img/link-buttons-bg.png",
    oq: "img/changelog-box2.png",
    hq: "img/changelog_30.png",
    gq: "img/banner-taming.png",
    cq: "img/profile-button-out.png",
    dq: "img/profile-button-in.png",
    mq: "img/profile-button-click.png",
    uq: "img/login-button-out.png",
    fq: "img/login-button-in.png",
    pq: "img/login-button-click.png",
    lq: "img/login-google-out.png",
    bq: "img/login-google-in.png",
    vq: "img/login-google-click.png",
    yq: "img/login-facebook-out.png",
    kq: "img/login-facebook-in.png",
    Aq: "img/login-facebook-click.png",
    wq: "img/account-box.png",
    Mq: "img/account-under-maintenance.png",
    Bq: "img/close-button-account-out.png",
    Dq: "img/close-button-account-in.png",
    Eq: "img/close-button-account-click.png",
    Cq: "img/play-button-out.png",
    zq: "img/play-button-in.png",
    xq: "img/play-button-click.png",
    Qq: "img/app-store-badge.png",
    Sq: "img/play-store-badge.png",
    Iq: "img/mobile-boxad.png",
    _q: "img/modify-name-out.png",
    Fq: "img/modify-name-in.png",
    Pq: "img/modify-name-click.png",
    Tq: "img/yes-button-out.png",
    jq: "img/yes-button-in.png",
    Rq: "img/yes-button-click.png",
    Lq: "img/yes-300-button-out.png",
    Gq: "img/yes-300-button-in.png",
    qq: "img/yes-300-button-click.png",
    Wq: "img/no-button-out.png",
    Nq: "img/no-button-in.png",
    Hq: "img/no-button-click.png",
    Uq: "img/no-thanks-button-out.png",
    Oq: "img/no-thanks-button-in.png",
    Yq: "img/no-thanks-button-click.png",
    Jq: "img/shop-button-out.png",
    Kq: "img/shop-button-in.png",
    Xq: "img/shop-button-click.png",
    Vq: "img/logout-out.png",
    Zq: "img/logout-in.png",
    $q: "img/logout-click.png",
    iW: "img/terms-button-out.png",
    tW: "img/terms-button-in.png",
    eW: "img/terms-button-click.png",
    nW: "img/tutorial-icon.png",
    aW: "img/skins-icon.png",
    sW: "img/shop-icon.png",
    rW: "img/paint-icon.png",
    oW: "img/leaderboard-icon.png",
    hW: "img/start-icon.png",
    gW: "img/profile-icon.png",
    cW: "img/server-access-icon2.png",
    dW: "img/button-homepage-bg-out.png",
    mW: "img/button-homepage-bg-in.png",
    uW: "img/button-homepage-bg-click.png",
    fW: "img/button-bottom-homepage-bg-out.png",
    pW: "img/button-bottom-homepage-bg-in.png",
    lW: "img/button-bottom-homepage-bg-click.png",
    bW: "img/lvl-player.png",
    vW: "img/avatar-player.png",
    yW: "img/avatar-player1.png",
    kW: "img/avatar-player2.png",
    AW: "img/avatar-player3.png",
    wW: "img/avatar-player4.png",
    MW: "img/avatar-player5.png",
    BW: "img/avatar-player6.png",
    DW: "img/avatar-player7.png",
    EW: "img/avatar-player8.png",
    zW: "img/avatar-player9.png",
    xW: "img/avatar-player10.png",
    QW: "img/avatar-player11.png",
    SW: "img/avatar-player12.png",
    IW: "img/avatar-player13.png",
    _W: "img/avatar-player14.png",
    FW: "img/avatar-player14.png",
    PW: "img/avatar-player14.png",
    TW: "img/avatar-player14.png",
    jW: "img/golden-bread.png",
    RW: "img/buy-bread-out.png",
    LW: "img/buy-bread-in.png",
    GW: "img/buy-bread-click.png",
    qW: "img/gauge.png",
    WW: "img/season-4-out.png",
    NW: "img/season-4-in.png",
    HW: "img/season-4-click.png",
    UW: "img/season4-box.png",
    OW: "img/season-5-out.png",
    YW: "img/season-5-in.png",
    JW: "img/season-5-click.png",
    KW: "img/season5-box.png",
    XW: "img/season-6-out.png",
    VW: "img/season-6-in.png",
    ZW: "img/season-6-click.png",
    $W: "img/season6-box.png",
    iN: "img/profile3-box.png",
    tN: "img/skins-box.png",
    eN: "img/shop-box.png",
    nN: "img/private-server-box.png",
    aN: "img/location-box.png",
    sN: "img/server-duration-box.png",
    rN: "img/tutorial-box.png",
    oN: "img/leaderboard2-box.png",
    hN: "img/buy-breads-box.png",
    gN: "img/bag-box.png",
    cN: "img/deadbox-box.png",
    dN: "img/book-box.png",
    mN: "img/accessories-box.png",
    uN: "img/customskin-box.png",
    fN: "img/bag-lasts.png",
    pN: "img/server-lasts.png",
    lN: "img/server-access-box2.png",
    bN: "img/lootbox-box.png",
    vN: "img/change-nickname0.png",
    yN: "img/change-nickname1.png",
    kN: "img/cheating-box.png",
    AN: "img/daily-quest-box.png",
    wN: "img/daily-5-bread.png",
    MN: "img/daily-10-bread.png",
    BN: "img/daily-valid.png",
    DN: "img/normal-profile-out.png",
    EN: "img/normal-profile-in.png",
    CN: "img/normal-profile-click.png",
    zN: "img/forest-profile-out.png",
    xN: "img/forest-profile-in.png",
    QN: "img/forest-profile-click.png",
    SN: "img/zombie-profile-out.png",
    IN: "img/zombie-profile-in.png",
    _N: "img/zombie-profile-click.png",
    FN: "img/vampire-profile-out.png",
    PN: "img/vampire-profile-in.png",
    TN: "img/vampire-profile-click.png",
    jN: "img/total-profile-out.png",
    RN: "img/total-profile-in.png",
    LN: "img/total-profile-click.png",
    GN: "img/season1-out.png",
    qN: "img/season1-in.png",
    WN: "img/season1-click.png",
    NN: "img/season2-out.png",
    HN: "img/season2-in.png",
    UN: "img/season2-click.png",
    ON: "img/season3-out.png",
    YN: "img/season3-in.png",
    JN: "img/season3-click.png",
    KN: "img/season4-out.png",
    XN: "img/season4-in.png",
    VN: "img/season4-click.png",
    ZN: "img/season5-out.png",
    $N: "img/season5-in.png",
    iH: "img/season5-click.png",
    tH: "img/season6-out.png",
    eH: "img/season6-in.png",
    nH: "img/season6-click.png",
    aH: "img/locked-skin-alert.png",
    sH: "img/locked-custom-alert.png",
    rH: "img/bg-red-locked.png",
    oH: "img/skin-button-out.png",
    hH: "img/skin-button-in.png",
    gH: "img/skin-button-click.png",
    cH: "img/accessory-button-out.png",
    dH: "img/accessory-button-in.png",
    mH: "img/accessory-button-click.png",
    uH: "img/bag-button-out.png",
    fH: "img/bag-button-in.png",
    pH: "img/bag-button-click.png",
    lH: "img/book-button-out.png",
    bH: "img/book-button-in.png",
    vH: "img/book-button-click.png",
    yH: "img/deadbox-button-out.png",
    kH: "img/deadbox-button-in.png",
    AH: "img/deadbox-button-click.png",
    wH: "img/loot-button-out.png",
    MH: "img/loot-button-in.png",
    BH: "img/loot-button-click.png",
    DH: "img/free-item-out.png",
    EH: "img/free-item-in.png",
    CH: "img/free-item-click.png",
    zH: "img/wood-item-out.png",
    xH: "img/wood-item-in.png",
    QH: "img/wood-item-click.png",
    SH: "img/stone-item.png",
    IH: "img/stone-item-in.png",
    _H: "img/stone-item-click.png",
    FH: "img/gold-item.png",
    PH: "img/gold-item-in.png",
    TH: "img/gold-item-click.png",
    jH: "img/diamond-item.png",
    RH: "img/diamond-item-in.png",
    LH: "img/diamond-item-click.png",
    GH: "img/amethyst-item.png",
    qH: "img/amethyst-item-in.png",
    WH: "img/amethyst-item-click.png",
    NH: "img/reidite-item.png",
    HH: "img/reidite-item-in.png",
    UH: "img/reidite-item-click.png",
    OH: "img/special-item-out.png",
    YH: "img/special-item-in.png",
    JH: "img/special-item-click.png",
    KH: "img/level-item-out.png",
    XH: "img/level-item-in.png",
    VH: "img/level-item-click.png",
    ZH: "img/skin-previous-out.png",
    $H: "img/skin-previous-in.png",
    iU: "img/skin-previous-click.png",
    tU: "img/skin-next-out.png",
    eU: "img/skin-next-in.png",
    nU: "img/skin-next-click.png",
    aU: "img/back-button-out.png",
    sU: "img/back-button-in.png",
    rU: "img/back-button-click.png",
    oU: "img/get-more-button-out.png",
    hU: "img/get-more-button-in.png",
    gU: "img/get-more-button-click.png",
    cU: "img/currency1-out.png",
    dU: "img/currency1-in.png",
    mU: "img/currency1-click.png",
    uU: "img/currency2-out.png",
    fU: "img/currency2-in.png",
    pU: "img/currency2-click.png",
    lU: "img/currency3-out.png",
    bU: "img/currency3-in.png",
    vU: "img/currency3-click.png",
    yU: "img/currency4-out.png",
    kU: "img/currency4-in.png",
    AU: "img/currency4-click.png",
    wU: "img/currency5-out.png",
    MU: "img/currency5-in.png",
    BU: "img/currency5-click.png",
    DU: "img/price1-out.png",
    EU: "img/price1-in.png",
    CU: "img/price1-click.png",
    zU: "img/price2-out.png",
    xU: "img/price2-in.png",
    QU: "img/price2-click.png",
    SU: "img/price3-out.png",
    IU: "img/price3-in.png",
    _U: "img/price3-click.png",
    FU: "img/price4-out.png",
    PU: "img/price4-in.png",
    TU: "img/price4-click.png",
    jU: "img/price5-out.png",
    RU: "img/price5-in.png",
    LU: "img/price5-click.png",
    GU: "img/buy-private-server-out.png",
    qU: "img/buy-private-server-in.png",
    WU: "img/buy-private-server-click.png",
    NU: "img/atlanta-out.png",
    HU: "img/atlanta-in.png",
    UU: "img/atlanta-click.png",
    OU: "img/dallas-out.png",
    YU: "img/dallas-in.png",
    JU: "img/dallas-click.png",
    KU: "img/fremont-out.png",
    XU: "img/fremont-in.png",
    VU: "img/fremont-click.png",
    ZU: "img/newark-out.png",
    $U: "img/newark-in.png",
    iO: "img/newark-click.png",
    tO: "img/toronto-out.png",
    eO: "img/toronto-in.png",
    nO: "img/toronto-click.png",
    aO: "img/singapore-out.png",
    sO: "img/singapore-in.png",
    rO: "img/singapore-click.png",
    oO: "img/frankfurt-out.png",
    hO: "img/frankfurt-in.png",
    gO: "img/frankfurt-click.png",
    cO: "img/london-out.png",
    dO: "img/london-in.png",
    mO: "img/london-click.png",
    uO: "img/mumbai-out.png",
    fO: "img/mumbai-in.png",
    pO: "img/mumbai-click.png",
    lO: "img/tokyo-out.png",
    bO: "img/tokyo-in.png",
    vO: "img/tokyo-click.png",
    yO: "img/yes-location-out.png",
    kO: "img/yes-location-in.png",
    AO: "img/yes-location-click.png",
    wO: "img/3days-out.png",
    MO: "img/3days-in.png",
    BO: "img/3days-click.png",
    DO: "img/7days-out.png",
    EO: "img/7days-in.png",
    CO: "img/7days-click.png",
    zO: "img/30days-out.png",
    xO: "img/30days-in.png",
    QO: "img/30days-click.png",
    SO: "img/90days-out.png",
    IO: "img/90days-in.png",
    _O: "img/90days-click.png",
    FO: "img/spin1.png",
    PO: "img/spin2.png",
    TO: "img/spin3.png",
    jO: "img/spin4.png",
    RO: "img/spin5.png",
    LO: "img/spin6.png",
    GO: "img/arrow-spin.png",
    qO: "img/spin-button-1-out.png",
    WO: "img/spin-button-1-in.png",
    NO: "img/spin-button-1-click.png",
    HO: "img/spin-button-2-out.png",
    UO: "img/spin-button-2-in.png",
    OO: "img/spin-button-2-click.png",
    YO: "img/spin-button-3-out.png",
    JO: "img/spin-button-3-in.png",
    KO: "img/spin-button-3-click.png",
    XO: "img/spin-button-4-out.png",
    VO: "img/spin-button-4-in.png",
    ZO: "img/spin-button-4-click.png",
    $O: "img/spin-button-5-out.png",
    iY: "img/spin-button-5-in.png",
    tY: "img/spin-button-5-click.png",
    eY: "img/spin-light.png",
    nY: "img/tuto-wiki-out.png",
    aY: "img/tuto-wiki-in.png",
    sY: "img/tuto-wiki-click.png",
    rY: "img/tuto-previous-out.png",
    oY: "img/tuto-previous-in.png",
    hY: "img/tuto-previous-click.png",
    gY: "img/tuto-next-out.png",
    cY: "img/tuto-next-in.png",
    dY: "img/tuto-next-click.png",
    mY: "img/time-leaderboard-out.png",
    uY: "img/time-leaderboard-in.png",
    fY: "img/time-leaderboard-click.png",
    pY: "img/score-leaderboard-out.png",
    lY: "img/score-leaderboard-in.png",
    bY: "img/score-leaderboard-click.png",
    vY: "img/lvl-leaderboard-out.png",
    yY: "img/lvl-leaderboard-in.png",
    kY: "img/lvl-leaderboard-click.png",
    AY: "img/kill-leaderboard-out.png",
    wY: "img/kill-leaderboard-in.png",
    MY: "img/kill-leaderboard-click.png",
    BY: "img/all-leaderboard-out.png",
    DY: "img/all-leaderboard-in.png",
    EY: "img/all-leaderboard-click.png",
    CY: "img/today-leaderboard-out.png",
    zY: "img/today-leaderboard-in.png",
    xY: "img/today-leaderboard-click.png",
    QY: "img/week-leaderboard-out.png",
    SY: "img/week-leaderboard-in.png",
    IY: "img/week-leaderboard-click.png",
    _Y: "img/season1-out.png",
    FY: "img/season1-in.png",
    PY: "img/season1-click.png",
    TY: "img/season2-out.png",
    jY: "img/season2-in.png",
    RY: "img/season2-click.png",
    LY: "img/season3-out.png",
    GY: "img/season3-in.png",
    qY: "img/season3-click.png",
    WY: "img/season4-out.png",
    NY: "img/season4-in.png",
    HY: "img/season4-click.png",
    UY: "img/season5-out.png",
    OY: "img/season5-in.png",
    YY: "img/season5-click.png",
    JY: "img/season6-out.png",
    KY: "img/season6-in.png",
    XY: "img/season6-click.png",
    VY: "img/total-lead-out.png",
    ZY: "img/total-lead-in.png",
    $Y: "img/total-lead-click.png",
    iJ: "img/normal-lead-out.png",
    tJ: "img/normal-lead-in.png",
    eJ: "img/normal-lead-click.png",
    nJ: "img/forest-lead-out.png",
    aJ: "img/forest-lead-in.png",
    sJ: "img/forest-lead-click.png",
    rJ: "img/vampire-lead-out.png",
    oJ: "img/vampire-lead-in.png",
    hJ: "img/vampire-lead-click.png",
    gJ: "img/zombie-lead-out.png",
    cJ: "img/zombie-lead-in.png",
    dJ: "img/zombie-lead-click.png",
    mJ: "img/day-level5.png",
    uJ: "img/night-level5.png",
    fJ: "img/day-level10.png",
    pJ: "img/night-level10.png",
    lJ: "img/day-level15.png",
    bJ: "img/night-level15.png",
    vJ: "img/day-level20.png",
    yJ: "img/night-level20.png",
    kJ: "img/day-level25.png",
    AJ: "img/night-level25.png",
    wJ: "img/day-level30.png",
    MJ: "img/night-level30.png",
    BJ: "img/day-level35.png",
    DJ: "img/night-level35.png",
    EJ: "img/day-level40.png",
    CJ: "img/night-level40.png",
    zJ: "img/day-level45.png",
    xJ: "img/night-level45.png",
    QJ: "img/day-level50.png",
    SJ: "img/night-level50.png",
    IJ: "img/day-level55.png",
    _J: "img/night-level55.png",
    FJ: "img/day-level60.png",
    PJ: "img/night-level60.png",
    TJ: "img/day-skin-devast0.png",
    jJ: "img/night-skin-devast0.png",
    RJ: "img/day-hand-devaster.png",
    LJ: "img/night-hand-devaster.png",
    GJ: "img/day-skin-star0.png",
    qJ: "img/night-skin-star0.png",
    WJ: "img/day-hand-star0.png",
    NJ: "img/night-hand-star0.png",
    HJ: "img/day-vampire.png",
    UJ: "img/night-vampire.png",
    OJ: "img/day-hand-vampire.png",
    YJ: "img/night-hand-vampire.png",
    JJ: "img/day-zombie.png",
    KJ: "img/night-zombie.png",
    XJ: "img/day-hand-zombie.png",
    VJ: "img/night-hand-zombie.png",
    ZJ: "img/day-skin113.png",
    $J: "img/night-skin113.png",
    iK: "img/day-hand-skin113.png",
    tK: "img/night-hand-skin113.png",
    eK: "img/day-skin0.png",
    nK: "img/night-skin0.png",
    aK: "img/day-skin1.png",
    sK: "img/night-skin1.png",
    rK: "img/day-skin2.png",
    oK: "img/night-skin2.png",
    hK: "img/day-skin3.png",
    gK: "img/night-skin3.png",
    cK: "img/day-skin4.png",
    dK: "img/night-skin4.png",
    mK: "img/day-skin5.png",
    uK: "img/night-skin5.png",
    fK: "img/day-skin6.png",
    pK: "img/night-skin6.png",
    lK: "img/day-skin7.png",
    bK: "img/night-skin7.png",
    vK: "img/day-skin8.png",
    yK: "img/night-skin8.png",
    kK: "img/day-skin9.png",
    AK: "img/night-skin9.png",
    wK: "img/day-skin10.png",
    MK: "img/night-skin10.png",
    BK: "img/day-skin11.png",
    DK: "img/night-skin11.png",
    EK: "img/day-skin12.png",
    CK: "img/night-skin12.png",
    zK: "img/day-skin13.png",
    xK: "img/night-skin13.png",
    QK: "img/day-skin14.png",
    SK: "img/night-skin14.png",
    IK: "img/day-skin15.png",
    _K: "img/night-skin15.png",
    FK: "img/day-skin16.png",
    PK: "img/night-skin16.png",
    TK: "img/day-skin17.png",
    jK: "img/night-skin17.png",
    RK: "img/day-skin18.png",
    LK: "img/night-skin18.png",
    GK: "img/day-skin19.png",
    qK: "img/night-skin19.png",
    WK: "img/day-skin20.png",
    NK: "img/night-skin20.png",
    HK: "img/day-skin21.png",
    UK: "img/night-skin21.png",
    YK: "img/day-skin22.png",
    JK: "img/night-skin22.png",
    KK: "img/day-skin23.png",
    XK: "img/night-skin23.png",
    VK: "img/day-skin24.png",
    ZK: "img/night-skin24.png",
    $K: "img/day-skin25.png",
    iX: "img/night-skin25.png",
    tX: "img/day-skin26.png",
    eX: "img/night-skin26.png",
    nX: "img/day-skin27.png",
    aX: "img/night-skin27.png",
    sX: "img/day-skin28.png",
    rX: "img/night-skin28.png",
    oX: "img/day-skin29.png",
    hX: "img/night-skin29.png",
    gX: "img/day-skin30.png",
    cX: "img/night-skin30.png",
    dX: "img/day-skin31.png",
    mX: "img/night-skin31.png",
    uX: "img/day-skin32.png",
    fX: "img/night-skin32.png",
    pX: "img/day-skin33.png",
    lX: "img/night-skin33.png",
    bX: "img/day-skin34.png",
    vX: "img/night-skin34.png",
    yX: "img/day-skin35.png",
    kX: "img/night-skin35.png",
    AX: "img/day-skin36.png",
    wX: "img/night-skin36.png",
    MX: "img/day-skin37.png",
    BX: "img/night-skin37.png",
    DX: "img/day-skin38.png",
    EX: "img/night-skin38.png",
    CX: "img/day-skin39.png",
    zX: "img/night-skin39.png",
    xX: "img/day-skin40.png",
    QX: "img/night-skin40.png",
    SX: "img/day-skin41.png",
    IX: "img/night-skin41.png",
    _X: "img/day-skin42.png",
    FX: "img/night-skin42.png",
    PX: "img/day-skin43.png",
    TX: "img/night-skin43.png",
    jX: "img/day-skin44.png",
    RX: "img/night-skin44.png",
    LX: "img/day-skin45.png",
    GX: "img/night-skin45.png",
    qX: "img/day-skin46.png",
    WX: "img/night-skin46.png",
    NX: "img/day-skin47.png",
    HX: "img/night-skin47.png",
    UX: "img/day-skin48.png",
    OX: "img/night-skin48.png",
    YX: "img/day-skin49.png",
    JX: "img/night-skin49.png",
    KX: "img/day-skin50.png",
    XX: "img/night-skin50.png",
    VX: "img/day-skin51.png",
    ZX: "img/night-skin51.png",
    $X: "img/day-skin52.png",
    iV: "img/night-skin52.png",
    tV: "img/day-skin53.png",
    eV: "img/night-skin53.png",
    nV: "img/day-skin54.png",
    aV: "img/night-skin54.png",
    sV: "img/day-skin55.png",
    rV: "img/night-skin55.png",
    oV: "img/day-skin56.png",
    hV: "img/night-skin56.png",
    gV: "img/day-skin57.png",
    cV: "img/night-skin57.png",
    dV: "img/day-skin58.png",
    mV: "img/night-skin58.png",
    uV: "img/day-skin59.png",
    fV: "img/night-skin59.png",
    pV: "img/day-skin60.png",
    lV: "img/night-skin60.png",
    bV: "img/day-skin61.png",
    vV: "img/night-skin61.png",
    yV: "img/day-skin62.png",
    kV: "img/night-skin62.png",
    AV: "img/day-skin63.png",
    wV: "img/night-skin63.png",
    MV: "img/day-skin64.png",
    BV: "img/night-skin64.png",
    DV: "img/day-skin65.png",
    EV: "img/night-skin65.png",
    CV: "img/day-skin66.png",
    zV: "img/night-skin66.png",
    xV: "img/day-skin67.png",
    QV: "img/night-skin67.png",
    SV: "img/day-skin68.png",
    IV: "img/night-skin68.png",
    _V: "img/day-skin69.png",
    FV: "img/night-skin69.png",
    PV: "img/day-skin70.png",
    TV: "img/night-skin70.png",
    jV: "img/day-skin71.png",
    RV: "img/night-skin71.png",
    LV: "img/day-skin72.png",
    GV: "img/night-skin72.png",
    qV: "img/day-skin73.png",
    WV: "img/night-skin73.png",
    NV: "img/day-skin74.png",
    HV: "img/night-skin74.png",
    UV: "img/day-skin75.png",
    OV: "img/night-skin75.png",
    YV: "img/day-skin76.png",
    JV: "img/night-skin76.png",
    KV: "img/day-skin77.png",
    XV: "img/night-skin77.png",
    VV: "img/day-skin78.png",
    ZV: "img/night-skin78.png",
    $V: "img/day-skin79.png",
    iZ: "img/night-skin79.png",
    tZ: "img/day-skin80.png",
    eZ: "img/night-skin80.png",
    nZ: "img/day-skin81.png",
    aZ: "img/night-skin81.png",
    sZ: "img/day-skin82.png",
    rZ: "img/night-skin82.png",
    oZ: "img/day-skin83.png",
    hZ: "img/night-skin83.png",
    gZ: "img/day-skin84.png",
    cZ: "img/night-skin84.png",
    dZ: "img/day-skin85.png",
    mZ: "img/night-skin85.png",
    uZ: "img/day-skin86.png",
    fZ: "img/night-skin86.png",
    pZ: "img/day-skin87.png",
    lZ: "img/night-skin87.png",
    bZ: "img/day-skin88.png",
    vZ: "img/night-skin88.png",
    yZ: "img/day-skin89.png",
    kZ: "img/night-skin89.png",
    AZ: "img/day-skin90.png",
    wZ: "img/night-skin90.png",
    MZ: "img/day-skin91.png",
    BZ: "img/night-skin91.png",
    DZ: "img/day-skin92.png",
    EZ: "img/night-skin92.png",
    CZ: "img/day-skin93.png",
    zZ: "img/night-skin93.png",
    xZ: "img/day-skin94.png",
    QZ: "img/night-skin94.png",
    SZ: "img/day-skin95.png",
    IZ: "img/night-skin95.png",
    _Z: "img/day-skin96.png",
    FZ: "img/night-skin96.png",
    PZ: "img/day-skin97.png",
    TZ: "img/night-skin97.png",
    jZ: "img/day-skin98.png",
    RZ: "img/night-skin98.png",
    LZ: "img/day-skin99.png",
    GZ: "img/night-skin99.png",
    qZ: "img/day-skin100.png",
    WZ: "img/night-skin100.png",
    NZ: "img/day-skin101.png",
    HZ: "img/night-skin101.png",
    UZ: "img/day-skin102.png",
    OZ: "img/night-skin102.png",
    YZ: "img/day-skin103.png",
    JZ: "img/night-skin103.png",
    KZ: "img/day-skin104.png",
    XZ: "img/night-skin104.png",
    VZ: "img/day-skin105.png",
    ZZ: "img/night-skin105.png",
    $Z: "img/day-skin106.png",
    i$: "img/night-skin106.png",
    t$: "img/day-skin107.png",
    e$: "img/night-skin107.png",
    n$: "img/day-skin108.png",
    a$: "img/night-skin108.png",
    s$: "img/day-skin109.png",
    r$: "img/night-skin109.png",
    o$: "img/day-skin110.png",
    h$: "img/night-skin110.png",
    g$: "img/day-skin111.png",
    c$: "img/night-skin111.png",
    d$: "img/day-skin112.png",
    m$: "img/night-skin112.png",
    u$: "img/day-skin113.png",
    f$: "img/night-skin113.png",
    p$: "img/day-skin114.png",
    l$: "img/night-skin114.png",
    b$: "img/day-skin115.png",
    v$: "img/night-skin115.png",
    y$: "img/day-skin116.png",
    k$: "img/night-skin116.png",
    A$: "img/day-skin117.png",
    w$: "img/night-skin117.png",
    M$: "img/day-skin118.png",
    B$: "img/night-skin118.png",
    D$: "img/day-skin119.png",
    E$: "img/night-skin119.png",
    C$: "img/day-skin120.png",
    z$: "img/night-skin120.png",
    x$: "img/day-skin121.png",
    Q$: "img/night-skin121.png",
    S$: "img/day-skin122.png",
    I$: "img/night-skin122.png",
    _$: "img/day-skin123.png",
    F$: "img/night-skin123.png",
    P$: "img/day-skin124.png",
    T$: "img/night-skin124.png",
    j$: "img/day-skin125.png",
    R$: "img/night-skin125.png",
    L$: "img/day-skin126.png",
    G$: "img/night-skin126.png",
    q$: "img/day-skin127.png",
    W$: "img/night-skin127.png",
    N$: "img/day-skin128.png",
    H$: "img/night-skin128.png",
    U$: "img/day-skin129.png",
    O$: "img/night-skin129.png",
    Y$: "img/day-skin130-1.png",
    J$: "img/night-skin130-1.png",
    K$: "img/day-skin131.png",
    X$: "img/night-skin131.png",
    V$: "img/day-skin132.png",
    Z$: "img/night-skin132.png",
    $$: "img/day-skin133.png",
    i1: "img/night-skin133.png",
    t1: "img/day-skin134.png",
    e1: "img/night-skin134.png",
    n1: "img/day-skin135.png",
    a1: "img/night-skin135.png",
    s1: "img/day-skin136.png",
    o1: "img/night-skin136.png",
    h1: "img/day-skin137.png",
    g1: "img/night-skin137.png",
    c1: "img/day-skin138.png",
    d1: "img/night-skin138.png",
    m1: "img/day-skin139.png",
    u1: "img/night-skin139.png",
    f1: "img/day-skin140.png",
    l1: "img/night-skin140.png",
    b1: "img/day-skin141.png",
    v1: "img/night-skin141.png",
    A1: "img/day-skin142.png",
    w1: "img/night-skin142.png",
    M1: "img/day-skin143.png",
    B1: "img/night-skin143.png",
    D1: "img/day-skin144.png",
    E1: "img/night-skin144.png",
    C1: "img/day-skin145.png",
    z1: "img/night-skin145.png",
    Q1: "img/day-skin146.png",
    S1: "img/night-skin146.png",
    I1: "img/day-skin147.png",
    _1: "img/night-skin147.png",
    F1: "img/day-skin148.png",
    P1: "img/night-skin148.png",
    T1: "img/day-skin149.png",
    j1: "img/night-skin149.png",
    R1: "img/day-skin150.png",
    L1: "img/night-skin150.png",
    G1: "img/day-hand-skin0.png",
    q1: "img/night-hand-skin0.png",
    W1: "img/day-hand-skin1.png",
    N1: "img/night-hand-skin1.png",
    H1: "img/day-hand-skin2.png",
    U1: "img/night-hand-skin2.png",
    O1: "img/day-hand-skin3.png",
    Y1: "img/night-hand-skin3.png",
    J1: "img/day-hand-skin4.png",
    K1: "img/night-hand-skin4.png",
    X1: "img/day-hand-skin5.png",
    V1: "img/night-hand-skin5.png",
    Z1: "img/day-hand-skin6.png",
    i2: "img/night-hand-skin6.png",
    t2: "img/day-hand-skin6.png",
    e2: "img/night-hand-skin6.png",
    n2: "img/day-hand-skin8.png",
    a2: "img/night-hand-skin8.png",
    s2: "img/day-hand-skin9.png",
    o2: "img/night-hand-skin9.png",
    h2: "img/day-hand-skin10.png",
    g2: "img/night-hand-skin10.png",
    c2: "img/day-hand-skin11.png",
    d2: "img/night-hand-skin11.png",
    m2: "img/day-hand-skin12.png",
    u2: "img/night-hand-skin12.png",
    f2: "img/day-hand-skin13.png",
    l2: "img/night-hand-skin13.png",
    b2: "img/day-hand-skin14.png",
    v2: "img/night-hand-skin14.png",
    A2: "img/day-hand-skin15.png",
    w2: "img/night-hand-skin15.png",
    M2: "img/day-hand-skin16.png",
    B2: "img/night-hand-skin16.png",
    D2: "img/day-hand-skin17.png",
    E2: "img/night-hand-skin17.png",
    C2: "img/day-hand-skin18.png",
    z2: "img/night-hand-skin18.png",
    Q2: "img/day-hand-skin19.png",
    S2: "img/night-hand-skin19.png",
    I2: "img/day-hand-skin20.png",
    _2: "img/night-hand-skin20.png",
    F2: "img/day-hand-skin21.png",
    P2: "img/night-hand-skin21.png",
    T2: "img/day-hand-skin22.png",
    j2: "img/night-hand-skin22.png",
    R2: "img/day-hand-skin23.png",
    L2: "img/night-hand-skin23.png",
    G2: "img/day-hand-skin24.png",
    q2: "img/night-hand-skin24.png",
    W2: "img/day-hand-skin25.png",
    N2: "img/night-hand-skin25.png",
    H2: "img/day-hand-skin26.png",
    U2: "img/night-hand-skin26.png",
    O2: "img/day-hand-skin27.png",
    Y2: "img/night-hand-skin27.png",
    J2: "img/day-hand-skin28.png",
    K2: "img/night-hand-skin28.png",
    X2: "img/day-hand-skin29.png",
    V2: "img/night-hand-skin29.png",
    Z2: "img/day-hand-skin30.png",
    i5: "img/night-hand-skin30.png",
    t5: "img/day-hand-skin31.png",
    e5: "img/night-hand-skin31.png",
    n5: "img/day-hand-skin32.png",
    a5: "img/night-hand-skin32.png",
    s5: "img/day-hand-skin33.png",
    r5: "img/night-hand-skin33.png",
    o5: "img/day-hand-skin34.png",
    h5: "img/night-hand-skin34.png",
    g5: "img/day-hand-skin35.png",
    c5: "img/night-hand-skin35.png",
    d5: "img/day-hand-skin36.png",
    m5: "img/night-hand-skin36.png",
    u5: "img/day-hand-skin37.png",
    f5: "img/night-hand-skin37.png",
    p5: "img/day-hand-skin38.png",
    l5: "img/night-hand-skin38.png",
    b5: "img/day-hand-skin39.png",
    v5: "img/night-hand-skin39.png",
    y5: "img/day-hand-skin40.png",
    k5: "img/night-hand-skin40.png",
    A5: "img/day-hand-skin41.png",
    w5: "img/night-hand-skin41.png",
    M5: "img/day-hand-skin42.png",
    B5: "img/night-hand-skin42.png",
    D5: "img/day-hand-skin43.png",
    E5: "img/night-hand-skin43.png",
    C5: "img/day-hand-skin16.png",
    z5: "img/night-hand-skin16.png",
    x5: "img/day-hand-skin45.png",
    Q5: "img/night-hand-skin45.png",
    S5: "img/day-hand-skin46.png",
    I5: "img/night-hand-skin46.png",
    _5: "img/day-hand-skin47.png",
    F5: "img/night-hand-skin47.png",
    P5: "img/day-hand-skin48.png",
    T5: "img/night-hand-skin48.png",
    j5: "img/day-hand-skin49.png",
    R5: "img/night-hand-skin49.png",
    L5: "img/day-hand-skin49.png",
    G5: "img/night-hand-skin49.png",
    q5: "img/day-hand-skin51.png",
    W5: "img/night-hand-skin51.png",
    N5: "img/day-hand-skin52.png",
    H5: "img/night-hand-skin52.png",
    U5: "img/day-hand-skin53.png",
    O5: "img/night-hand-skin53.png",
    Y5: "img/day-hand-skin53.png",
    J5: "img/night-hand-skin53.png",
    K5: "img/day-hand-skin55.png",
    X5: "img/night-hand-skin55.png",
    V5: "img/day-hand-skin56.png",
    Z5: "img/night-hand-skin56.png",
    i0: "img/day-hand-skin57.png",
    t0: "img/night-hand-skin57.png",
    e0: "img/day-hand-skin58.png",
    n0: "img/night-hand-skin58.png",
    a0: "img/day-hand-skin59.png",
    s0: "img/night-hand-skin59.png",
    r0: "img/day-hand-skin61.png",
    o0: "img/night-hand-skin61.png",
    h0: "img/day-hand-skin61.png",
    g0: "img/night-hand-skin61.png",
    c0: "img/day-hand-skin62.png",
    d0: "img/night-hand-skin62.png",
    m0: "img/day-hand-skin63.png",
    u0: "img/night-hand-skin63.png",
    f0: "img/day-hand-skin64.png",
    p0: "img/night-hand-skin64.png",
    l0: "img/day-hand-skin65.png",
    b0: "img/night-hand-skin65.png",
    v0: "img/day-hand-skin66.png",
    y0: "img/night-hand-skin66.png",
    k0: "img/day-hand-skin67.png",
    A0: "img/night-hand-skin67.png",
    w0: "img/day-hand-skin68.png",
    M0: "img/night-hand-skin68.png",
    B0: "img/day-hand-skin69.png",
    D0: "img/night-hand-skin69.png",
    E0: "img/day-hand-skin70.png",
    C0: "img/night-hand-skin70.png",
    z0: "img/day-hand-skin71.png",
    x0: "img/night-hand-skin71.png",
    Q0: "img/day-hand-skin72.png",
    S0: "img/night-hand-skin72.png",
    I0: "img/day-hand-skin73.png",
    _0: "img/night-hand-skin73.png",
    F0: "img/day-hand-skin74.png",
    P0: "img/night-hand-skin74.png",
    T0: "img/day-hand-skin75.png",
    j0: "img/night-hand-skin75.png",
    R0: "img/day-hand-skin76.png",
    L0: "img/night-hand-skin76.png",
    G0: "img/day-hand-skin77.png",
    q0: "img/night-hand-skin77.png",
    W0: "img/day-hand-skin78.png",
    N0: "img/night-hand-skin78.png",
    H0: "img/day-hand-skin79.png",
    U0: "img/night-hand-skin79.png",
    O0: "img/day-hand-skin80.png",
    Y0: "img/night-hand-skin80.png",
    J0: "img/day-hand-skin81.png",
    K0: "img/night-hand-skin81.png",
    X0: "img/day-hand-skin82.png",
    V0: "img/night-hand-skin82.png",
    Z0: "img/day-hand-skin83.png",
    $0: "img/night-hand-skin83.png",
    i3: "img/day-hand-skin84.png",
    t3: "img/night-hand-skin84.png",
    e3: "img/day-hand-skin85.png",
    n3: "img/night-hand-skin85.png",
    a3: "img/day-hand-skin86.png",
    s3: "img/night-hand-skin86.png",
    r3: "img/day-hand-skin87.png",
    o3: "img/night-hand-skin87.png",
    h3: "img/day-hand-skin88.png",
    g3: "img/night-hand-skin88.png",
    c3: "img/day-hand-skin89.png",
    d3: "img/night-hand-skin89.png",
    m3: "img/day-hand-skin90.png",
    u3: "img/night-hand-skin90.png",
    f3: "img/day-hand-skin91.png",
    l3: "img/night-hand-skin91.png",
    b3: "img/day-hand-skin92.png",
    v3: "img/night-hand-skin92.png",
    y3: "img/day-hand-skin93.png",
    A3: "img/night-hand-skin93.png",
    w3: "img/day-hand-skin94.png",
    M3: "img/night-hand-skin94.png",
    B3: "img/day-hand-skin95.png",
    D3: "img/night-hand-skin95.png",
    E3: "img/day-hand-skin96.png",
    C3: "img/night-hand-skin96.png",
    z3: "img/day-hand-skin97.png",
    x3: "img/night-hand-skin97.png",
    Q3: "img/day-hand-skin98.png",
    S3: "img/night-hand-skin98.png",
    I3: "img/day-hand-skin99.png",
    _3: "img/night-hand-skin99.png",
    F3: "img/day-hand-skin100.png",
    P3: "img/night-hand-skin100.png",
    T3: "img/day-hand-skin101.png",
    j3: "img/night-hand-skin101.png",
    R3: "img/day-hand-skin102.png",
    L3: "img/night-hand-skin102.png",
    G3: "img/day-hand-skin103.png",
    q3: "img/night-hand-skin103.png",
    W3: "img/day-hand-skin104.png",
    N3: "img/night-hand-skin104.png",
    H3: "img/day-hand-skin105.png",
    U3: "img/night-hand-skin105.png",
    O3: "img/day-hand-skin106.png",
    Y3: "img/night-hand-skin106.png",
    J3: "img/day-hand-skin107.png",
    K3: "img/night-hand-skin107.png",
    X3: "img/day-hand-skin108.png",
    V3: "img/night-hand-skin108.png",
    Z3: "img/day-hand-skin109.png",
    i9: "img/night-hand-skin109.png",
    t9: "img/day-hand-skin110.png",
    e9: "img/night-hand-skin110.png",
    n9: "img/day-hand-skin111.png",
    a9: "img/night-hand-skin111.png",
    s9: "img/day-hand-skin112.png",
    r9: "img/night-hand-skin112.png",
    o9: "img/day-hand-skin113.png",
    h9: "img/night-hand-skin113.png",
    g9: "img/day-hand-skin114.png",
    c9: "img/night-hand-skin114.png",
    d9: "img/day-hand-skin115.png",
    m9: "img/night-hand-skin115.png",
    u9: "img/day-hand-skin116.png",
    f9: "img/night-hand-skin116.png",
    p9: "img/day-hand-skin117.png",
    l9: "img/night-hand-skin117.png",
    b9: "img/day-hand-skin118.png",
    v9: "img/night-hand-skin118.png",
    y9: "img/day-hand-skin119.png",
    k9: "img/night-hand-skin119.png",
    A9: "img/day-hand-skin120.png",
    w9: "img/night-hand-skin120.png",
    M9: "img/day-hand-skin122.png",
    B9: "img/night-hand-skin122.png",
    D9: "img/day-hand-skin122.png",
    E9: "img/night-hand-skin122.png",
    C9: "img/day-hand-skin122.png",
    z9: "img/night-hand-skin122.png",
    x9: "img/day-hand-skin124.png",
    Q9: "img/night-hand-skin124.png",
    S9: "img/day-hand-skin125.png",
    I9: "img/night-hand-skin125.png",
    _9: "img/day-hand-skin126.png",
    F9: "img/night-hand-skin126.png",
    P9: "img/day-hand-skin127.png",
    T9: "img/night-hand-skin127.png",
    j9: "img/day-hand-skin128.png",
    R9: "img/night-hand-skin128.png",
    L9: "img/day-hand-skin129.png",
    G9: "img/night-hand-skin129.png",
    q9: "img/day-hand-skin130.png",
    W9: "img/night-hand-skin130.png",
    N9: "img/day-hand-skin131.png",
    H9: "img/night-hand-skin131.png",
    U9: "img/day-hand-skin130.png",
    O9: "img/night-hand-skin130.png",
    Y9: "img/day-hand-skin133.png",
    J9: "img/night-hand-skin133.png",
    K9: "img/day-hand-skin134.png",
    X9: "img/night-hand-skin134.png",
    V9: "img/day-hand-skin135.png",
    Z9: "img/night-hand-skin135.png",
    i4: "img/day-hand-skin136.png",
    t4: "img/night-hand-skin136.png",
    e4: "img/day-hand-skin137.png",
    n4: "img/night-hand-skin137.png",
    a4: "img/day-hand-skin138.png",
    s4: "img/night-hand-skin138.png",
    r4: "img/day-hand-skin139.png",
    o4: "img/night-hand-skin139.png",
    h4: "img/day-hand-skin140.png",
    g4: "img/night-hand-skin140.png",
    c4: "img/day-hand-skin141.png",
    d4: "img/night-hand-skin141.png",
    m4: "img/day-hand-skin142.png",
    u4: "img/night-hand-skin142.png",
    f4: "img/day-hand-skin143.png",
    l4: "img/night-hand-skin143.png",
    b4: "img/day-hand-skin144.png",
    v4: "img/night-hand-skin144.png",
    y4: "img/day-hand-skin145.png",
    A4: "img/night-hand-skin145.png",
    w4: "img/day-hand-skin146.png",
    M4: "img/night-hand-skin146.png",
    B4: "img/day-hand-skin147.png",
    D4: "img/night-hand-skin147.png",
    E4: "img/day-hand-skin148.png",
    C4: "img/night-hand-skin148.png",
    z4: "img/day-hand-skin149.png",
    x4: "img/night-hand-skin149.png",
    Q4: "img/day-hand-skin150.png",
    S4: "img/night-hand-skin150.png",
    I4: "img/day-bag-star0.png",
    _4: "img/night-bag-star0.png",
    F4: "img/day-bag0.png",
    P4: "img/night-bag0.png",
    T4: "img/day-bag1.png",
    j4: "img/night-bag1.png",
    R4: "img/day-bag2.png",
    L4: "img/night-bag2.png",
    G4: "img/day-bag3.png",
    q4: "img/night-bag3.png",
    W4: "img/day-bag4.png",
    N4: "img/night-bag4.png",
    H4: "img/day-bag5.png",
    U4: "img/night-bag5.png",
    O4: "img/day-bag6.png",
    Y4: "img/night-bag6.png",
    J4: "img/day-bag7.png",
    K4: "img/night-bag7.png",
    X4: "img/day-bag8.png",
    V4: "img/night-bag8.png",
    Z4: "img/day-bag9.png",
    i7: "img/night-bag9.png",
    t7: "img/day-bag10.png",
    e7: "img/night-bag10.png",
    n7: "img/day-bag11.png",
    a7: "img/night-bag11.png",
    s7: "img/day-bag13.png",
    r7: "img/night-bag13.png",
    o7: "img/day-bag14.png",
    h7: "img/night-bag14.png",
    g7: "img/day-bag16.png",
    c7: "img/night-bag16.png",
    d7: "img/day-bag17.png",
    m7: "img/night-bag17.png",
    u7: "img/day-bag18.png",
    f7: "img/night-bag18.png",
    p7: "img/day-bag19.png",
    l7: "img/night-bag19.png",
    b7: "img/day-bag20.png",
    v7: "img/night-bag20.png",
    y7: "img/day-bag21.png",
    k7: "img/night-bag21.png",
    A7: "img/day-bag22.png",
    w7: "img/night-bag22.png",
    M7: "img/day-bag23.png",
    B7: "img/night-bag23.png",
    D7: "img/day-bag24.png",
    E7: "img/night-bag24.png",
    C7: "img/day-bag25.png",
    z7: "img/night-bag25.png",
    x7: "img/day-bag26.png",
    Q7: "img/night-bag26.png",
    S7: "img/day-bag27.png",
    I7: "img/night-bag27.png",
    _7: "img/day-bag28.png",
    F7: "img/night-bag28.png",
    P7: "img/day-bag29.png",
    T7: "img/night-bag29.png",
    j7: "img/day-bag30.png",
    R7: "img/night-bag30.png",
    L7: "img/day-bag31.png",
    G7: "img/night-bag31.png",
    q7: "img/day-bag32.png",
    W7: "img/night-bag32.png",
    N7: "img/day-bag33.png",
    H7: "img/night-bag33.png",
    U7: "img/day-bag34.png",
    O7: "img/night-bag34.png",
    Y7: "img/day-bag35.png",
    J7: "img/night-bag35.png",
    K7: "img/day-bag36.png",
    X7: "img/night-bag36.png",
    V7: "img/day-bag37.png",
    Z7: "img/night-bag37.png",
    i6: "img/day-bag38.png",
    t6: "img/night-bag38.png",
    e6: "img/day-bag39.png",
    n6: "img/night-bag39.png",
    a6: "img/day-bag40.png",
    s6: "img/night-bag40.png",
    r6: "img/day-bag41.png",
    o6: "img/night-bag41.png",
    h6: "img/day-bag42.png",
    g6: "img/night-bag42.png",
    c6: "img/day-bag43.png",
    d6: "img/night-bag43.png",
    m6: "img/day-bag44.png",
    u6: "img/night-bag44.png",
    f6: "img/day-bag45.png",
    p6: "img/night-bag45.png",
    l6: "img/day-bag46.png",
    b6: "img/night-bag46.png",
    v6: "img/day-bag47.png",
    y6: "img/night-bag47.png",
    k6: "img/day-bag48.png",
    A6: "img/night-bag48.png",
    w6: "img/day-bag49.png",
    M6: "img/night-bag49.png",
    B6: "img/day-bag50.png",
    D6: "img/night-bag50.png",
    E6: "img/day-bag51.png",
    C6: "img/night-bag51.png",
    z6: "img/day-bag52.png",
    x6: "img/night-bag52.png",
    Q6: "img/day-bag53.png",
    S6: "img/night-bag53.png",
    I6: "img/day-bag54.png",
    _6: "img/night-bag54.png",
    F6: "img/day-bag55.png",
    P6: "img/night-bag55.png",
    T6: "img/day-bag56.png",
    j6: "img/night-bag56.png",
    R6: "img/day-bag57.png",
    L6: "img/night-bag57.png",
    G6: "img/day-bag58.png",
    q6: "img/night-bag58.png",
    W6: "img/day-bag59.png",
    N6: "img/night-bag59.png",
    H6: "img/day-bag60.png",
    U6: "img/night-bag60.png",
    O6: "img/day-bag61.png",
    Y6: "img/night-bag61.png",
    J6: "img/day-bag62.png",
    K6: "img/night-bag62.png",
    X6: "img/day-bag63.png",
    V6: "img/night-bag63.png",
    Z6: "img/day-bag64.png",
    i8: "img/night-bag64.png",
    t8: "img/day-bag65.png",
    e8: "img/night-bag65.png",
    n8: "img/day-bag66.png",
    a8: "img/night-bag66.png",
    s8: "img/day-bag67.png",
    r8: "img/night-bag67.png",
    o8: "img/day-bag68.png",
    h8: "img/night-bag68.png",
    g8: "img/day-accessory0.png",
    c8: "img/day-accessory0-pacques.png",
    d8: "img/night-accessory0-pacques.png",
    m8: "img/day-accessory13.png",
    u8: "img/night-accessory13.png",
    f8: "img/day-accessory14.png",
    p8: "img/night-accessory14.png",
    l8: "img/day-accessory15.png",
    b8: "img/night-accessory15.png",
    v8: "img/day-accessory16.png",
    y8: "img/night-accessory16.png",
    k8: "img/day-accessory17.png",
    A8: "img/day-accessory17.png",
    w8: "img/day-accessory19.png",
    M8: "img/night-accessory19.png",
    B8: "img/day-accessory20.png",
    D8: "img/night-accessory20.png",
    E8: "img/day-accessory21.png",
    C8: "img/night-accessory21.png",
    z8: "img/day-accessory22.png",
    x8: "img/night-accessory22.png",
    Q8: "img/day-accessory23.png",
    S8: "img/night-accessory23.png",
    I8: "img/day-accessory24.png",
    _8: "img/night-accessory24.png",
    F8: "img/day-accessory25.png",
    P8: "img/night-accessory25.png",
    T8: "img/day-accessory26.png",
    j8: "img/night-accessory26.png",
    L8: "img/day-accessory27.png",
    G8: "img/night-accessory27.png",
    q8: "img/day-accessory18.png",
    W8: "img/night-accessory18.png",
    N8: "img/day-accessory29.png",
    H8: "img/night-accessory29.png",
    U8: "img/day-accessory30.png",
    O8: "img/night-accessory30.png",
    Y8: "img/day-accessory31.png",
    J8: "img/night-accessory31.png",
    K8: "img/day-accessory32.png",
    X8: "img/night-accessory32.png",
    V8: "img/day-accessory33.png",
    Z8: "img/night-accessory33.png",
    iii: "img/day-accessory34.png",
    tii: "img/night-accessory34.png",
    eii: "img/day-accessory35.png",
    nii: "img/night-accessory35.png",
    aii: "img/day-accessory28.png",
    sii: "img/night-accessory28.png",
    rii: "img/day-accessory36.png",
    oii: "img/night-accessory36.png",
    hii: "img/day-accessory37.png",
    gii: "img/night-accessory37.png",
    cii: "img/day-accessory39.png",
    dii: "img/night-accessory39.png",
    mii: "img/day-accessory40.png",
    uii: "img/night-accessory40.png",
    fii: "img/day-accessory41.png",
    pii: "img/night-accessory41.png",
    lii: "img/day-accessory42.png",
    bii: "img/night-accessory42.png",
    vii: "img/day-accessory43.png",
    yii: "img/night-accessory43.png",
    kii: "img/day-accessory44.png",
    Aii: "img/night-accessory44.png",
    wii: "img/day-accessory38.png",
    Mii: "img/night-accessory38.png",
    Bii: "img/day-accessory46.png",
    Dii: "img/night-accessory46.png",
    Eii: "img/day-accessory47.png",
    Cii: "img/night-accessory47.png",
    zii: "img/day-accessory48.png",
    xii: "img/night-accessory48.png",
    Qii: "img/day-accessory49.png",
    Sii: "img/night-accessory49.png",
    Iii: "img/day-accessory45.png",
    _ii: "img/night-accessory45.png",
    Fii: "img/day-accessory50.png",
    Pii: "img/night-accessory50.png",
    Tii: "img/day-accessory51.png",
    jii: "img/night-accessory51.png",
    Rii: "img/day-accessory52.png",
    Lii: "img/night-accessory52.png",
    Gii: "img/day-accessory53.png",
    qii: "img/night-accessory53.png",
    Wii: "img/day-accessory54.png",
    Nii: "img/night-accessory54.png",
    Hii: "img/day-accessory55.png",
    Uii: "img/night-accessory55.png",
    Oii: "img/day-accessory56.png",
    Yii: "img/night-accessory56.png",
    Jii: "img/day-accessory57.png",
    Kii: "img/night-accessory57.png",
    Xii: "img/day-accessory58.png",
    Vii: "img/night-accessory58.png",
    Zii: "img/day-accessory59.png",
    $ii: "img/night-accessory59.png",
    iti: "img/day-accessory60.png",
    tti: "img/night-accessory60.png",
    eti: "img/day-accessory61.png",
    nti: "img/night-accessory61.png",
    ati: "img/day-accessory62.png",
    sti: "img/night-accessory62.png",
    rti: "img/day-accessory63.png",
    oti: "img/night-accessory63.png",
    hti: "img/day-accessory64.png",
    gti: "img/night-accessory64.png",
    cti: "img/day-accessory65.png",
    dti: "img/night-accessory65.png",
    mti: "img/day-accessory66.png",
    uti: "img/night-accessory66.png",
    fti: "img/day-accessory67.png",
    pti: "img/night-accessory67.png",
    lti: "img/day-accessory68.png",
    bti: "img/night-accessory68.png",
    vti: "img/day-accessory69.png",
    yti: "img/night-accessory69.png",
    kti: "img/day-accessory70.png",
    Ati: "img/night-accessory70.png",
    wti: "img/day-accessory71.png",
    Mti: "img/night-accessory71.png",
    Bti: "img/day-accessory72.png",
    Dti: "img/night-accessory72.png",
    Eti: "img/day-accessory73.png",
    Cti: "img/night-accessory73.png",
    zti: "img/day-accessory74.png",
    xti: "img/night-accessory74.png",
    Qti: "img/day-accessory75.png",
    Sti: "img/night-accessory75.png",
    Iti: "img/day-accessory76.png",
    _ti: "img/night-accessory76.png",
    Fti: "img/day-accessory77.png",
    Pti: "img/night-accessory77.png",
    Tti: "img/day-accessory78.png",
    jti: "img/night-accessory78.png",
    Rti: "img/day-accessory79.png",
    Lti: "img/night-accessory79.png",
    Gti: "img/day-accessory80.png",
    qti: "img/night-accessory80.png",
    Wti: "img/day-accessory81.png",
    Nti: "img/night-accessory81.png",
    Hti: "img/day-book0.png",
    Uti: "img/night-book0.png",
    Oti: "img/day-book1.png",
    Yti: "img/night-book1.png",
    Jti: "img/day-book2.png",
    Kti: "img/night-book2.png",
    Xti: "img/day-book3.png",
    Vti: "img/night-book3.png",
    Zti: "img/day-book4.png",
    $ti: "img/night-book4.png",
    iei: "img/day-book5.png",
    tei: "img/night-book5.png",
    eei: "img/day-book6.png",
    nei: "img/night-book6.png",
    aei: "img/day-book7.png",
    sei: "img/night-book7.png",
    rei: "img/day-book8.png",
    oei: "img/night-book8.png",
    hei: "img/day-book9.png",
    gei: "img/night-book9.png",
    cei: "img/day-book10.png",
    dei: "img/night-book10.png",
    mei: "img/day-book11.png",
    uei: "img/night-book11.png",
    fei: "img/day-book12.png",
    pei: "img/night-book12.png",
    lei: "img/day-book13.png",
    bei: "img/night-book13.png",
    vei: "img/day-book14.png",
    yei: "img/night-book14.png",
    kei: "img/day-book15.png",
    Aei: "img/night-book15.png",
    wei: "img/day-book16.png",
    Mei: "img/night-book16.png",
    Bei: "img/day-book17.png",
    Dei: "img/night-book17.png",
    Eei: "img/day-book18.png",
    Cei: "img/night-book18.png",
    zei: "img/day-book19.png",
    xei: "img/night-book19.png",
    Qei: "img/day-book20.png",
    Sei: "img/night-book20.png",
    Iei: "img/day-book21.png",
    _ei: "img/night-book21.png",
    Fei: "img/day-book22.png",
    Pei: "img/night-book22.png",
    Tei: "img/day-book23.png",
    jei: "img/night-book23.png",
    Rei: "img/day-book24.png",
    Lei: "img/night-book24.png",
    Gei: "img/day-book25.png",
    qei: "img/night-book25.png",
    Wei: "img/day-book26.png",
    Nei: "img/night-book26.png",
    Hei: "img/day-book27.png",
    Uei: "img/night-book27.png",
    Oei: "img/day-book28.png",
    Yei: "img/night-book28.png",
    Jei: "img/day-book29.png",
    Kei: "img/night-book29.png",
    Xei: "img/day-book30.png",
    Vei: "img/night-book30.png",
    Zei: "img/day-book31.png",
    $ei: "img/night-book31.png",
    ini: "img/day-book32.png",
    tni: "img/night-book32.png",
    eni: "img/day-book33.png",
    nni: "img/night-book33.png",
    ani: "img/day-book34.png",
    sni: "img/night-book34.png",
    rni: "img/day-book35.png",
    oni: "img/night-book35.png",
    hni: "img/day-book36.png",
    gni: "img/night-book36.png",
    cni: "img/day-book37.png",
    dni: "img/night-book37.png",
    mni: "img/day-book38.png",
    uni: "img/night-book38.png",
    fni: "img/day-book39.png",
    pni: "img/night-book39.png",
    lni: "img/day-book40.png",
    bni: "img/night-book40.png",
    vni: "img/day-book41.png",
    yni: "img/night-book41.png",
    kni: "img/day-book42.png",
    Ani: "img/night-book42.png",
    wni: "img/day-book43.png",
    Mni: "img/night-book43.png",
    Bni: "img/day-book44.png",
    Dni: "img/night-book44.png",
    Eni: "img/day-book45.png",
    Cni: "img/night-book45.png",
    zni: "img/day-crate1.png",
    xni: "img/night-crate1.png",
    Qni: "img/day-crate2.png",
    Sni: "img/night-crate2.png",
    Ini: "img/day-crate3.png",
    _ni: "img/night-crate3.png",
    Fni: "img/day-crate4.png",
    Pni: "img/night-crate4.png",
    Tni: "img/day-crate5.png",
    jni: "img/night-crate5.png",
    Rni: "img/day-crate6.png",
    Lni: "img/night-crate6.png",
    Gni: "img/day-crate7.png",
    qni: "img/night-crate7.png",
    Wni: "img/day-crate8.png",
    Nni: "img/night-crate8.png",
    Hni: "img/day-crate9.png",
    Uni: "img/night-crate9.png",
    Oni: "img/day-crate10.png",
    Yni: "img/night-crate10.png",
    Jni: "img/day-crate11.png",
    Kni: "img/night-crate11.png",
    Xni: "img/day-crate12.png",
    Vni: "img/night-crate12.png",
    Zni: "img/day-crate13.png",
    $ni: "img/night-crate13.png",
    iai: "img/day-crate14.png",
    tai: "img/night-crate14.png",
    eai: "img/day-crate15.png",
    nai: "img/night-crate15.png",
    aai: "img/day-crate16.png",
    sai: "img/night-crate16.png",
    rai: "img/day-crate17.png",
    oai: "img/night-crate17.png",
    hai: "img/day-crate18.png",
    gai: "img/night-crate18.png",
    cai: "img/day-crate19.png",
    dai: "img/night-crate19.png",
    mai: "img/day-crate20.png",
    uai: "img/night-crate20.png",
    fai: "img/day-crate21.png",
    pai: "img/night-crate21.png",
    lai: "img/day-crate22.png",
    bai: "img/night-crate22.png",
    vai: "img/day-crate23.png",
    yai: "img/night-crate23.png",
    kai: "img/day-crate24.png",
    Aai: "img/night-crate24.png",
    wai: "img/day-crate25.png",
    Mai: "img/night-crate25.png",
    Bai: "img/day-crate26.png",
    Dai: "img/night-crate26.png",
    Eai: "img/day-crate27.png",
    Cai: "img/night-crate27.png",
    zai: "img/day-crate28.png",
    xai: "img/night-crate28.png",
    Qai: "img/day-crate29.png",
    Sai: "img/night-crate29.png",
    Iai: "img/day-crate30.png",
    _ai: "img/night-crate30.png",
    Fai: "img/day-crate31.png",
    Pai: "img/night-crate31.png",
    Tai: "img/day-crate32.png",
    jai: "img/night-crate32.png",
    Rai: "img/day-crate33.png",
    Lai: "img/night-crate33.png",
    Gai: "img/day-crate34.png",
    qai: "img/night-crate34.png",
    Wai: "img/day-crate35.png",
    Nai: "img/night-crate35.png",
    Hai: "img/day-crate36.png",
    Uai: "img/night-crate36.png",
    Oai: "img/day-crate37.png",
    Yai: "img/night-crate37.png",
    Jai: "img/day-crate38.png",
    Kai: "img/night-crate38.png",
    Xai: "img/day-crate39.png",
    Vai: "img/night-crate39.png",
    Zai: "img/day-crate40.png",
    $ai: "img/night-crate40.png",
    isi: "img/day-crate41.png",
    tsi: "img/night-crate41.png",
    esi: "img/day-crate42.png",
    nsi: "img/night-crate42.png",
    asi: "img/day-crate43.png",
    ssi: "img/night-crate43.png",
    rsi: "img/day-crate44.png",
    osi: "img/night-crate44.png",
    hsi: "img/day-crate45.png",
    gsi: "img/night-crate45.png",
    dsi: "img/day-crate46.png",
    msi: "img/night-crate46.png",
    usi: "img/day-crate47.png",
    fsi: "img/night-crate47.png",
    psi: "img/day-crate48.png",
    lsi: "img/night-crate48.png",
    bsi: "img/day-crate49.png",
    vsi: "img/night-crate49.png",
    ysi: "img/day-crate50.png",
    ksi: "img/night-crate50.png",
    Asi: "img/day-crate51.png",
    wsi: "img/night-crate51.png",
    Msi: "img/day-crate52.png",
    Bsi: "img/night-crate52.png",
    Dsi: "img/day-crate53.png",
    Esi: "img/night-crate53.png",
    Csi: "img/day-crate54.png",
    zsi: "img/night-crate54.png",
    xsi: "img/day-crate55.png",
    Qsi: "img/night-crate55.png",
    Ssi: "img/day-crate56.png",
    Isi: "img/night-crate56.png",
    _si: "img/day-crate57.png",
    Fsi: "img/night-crate57.png",
    Psi: "img/day-crate58.png",
    Tsi: "img/night-crate58.png",
    jsi: "img/day-crate59.png",
    Rsi: "img/night-crate59.png",
    Lsi: "img/day-crate60.png",
    Gsi: "img/night-crate60.png",
    qsi: "img/day-crate61.png",
    Wsi: "img/night-crate61.png",
    Nsi: "img/day-crate62.png",
    Hsi: "img/night-crate62.png",
    Usi: "img/day-crate63.png",
    Osi: "img/night-crate63.png",
    Ysi: "img/day-crate64.png",
    Jsi: "img/night-crate64.png",
    Ksi: "img/day-crate65.png",
    Xsi: "img/night-crate65.png",
    Vsi: "img/day-crate66.png",
    Zsi: "img/night-crate66.png",
    $si: "img/day-crate67.png",
    iri: "img/night-crate67.png",
    tri: "img/day-crate68.png",
    eri: "img/night-crate68.png",
    nri: "img/day-crate69.png",
    ari: "img/night-crate69.png",
    sri: "img/day-crate70.png",
    rri: "img/night-crate70.png",
    ori: "img/day-crate71.png",
    hri: "img/night-crate71.png",
    gri: "img/day-crate72.png",
    cri: "img/night-crate72.png",
    dri: "img/day-herb0.png",
    mri: "img/day-herb1.png",
    fri: "img/day-herb2.png",
    pri: "img/day-herb3.png",
    lri: "img/day-herb4.png",
    bri: "img/day-herb5.png",
    vri: "img/day-herb6.png",
    yri: "img/day-herb7.png",
    kri: "img/day-herb8.png",
    Ari: "img/day-herb9.png",
    wri: "img/day-herb10.png",
    Mri: "img/day-herb11.png",
    Bri: "img/day-herb12.png",
    Dri: "img/day-herb13.png",
    Eri: "img/day-herb14.png",
    Cri: "img/day-herb15.png",
    zri: "img/day-shell0.png",
    xri: "img/day-shell1.png",
    Qri: "img/day-shell2.png",
    Sri: "img/day-leaf1.png",
    Iri: "img/day-leaf2.png",
    _ri: "img/day-leaf3.png",
    Fri: "img/day-leaf4.png",
    Pri: "img/day-leaf5.png",
    Tri: "img/day-leaf6.png",
    jri: "img/day-leaf7.png",
    Rri: "img/day-leaf8.png",
    Lri: "img/day-rock0.png",
    Gri: "img/day-rock1.png",
    qri: "img/day-rock2.png",
    Wri: "img/day-rock3.png",
    Nri: "img/day-rock4.png",
    Hri: "img/day-rock5.png",
    Uri: "img/day-rock6.png",
    Ori: "img/day-rock7.png",
    Yri: "img/day-rock8.png",
    Jri: "img/day-rock9.png",
    Kri: "img/day-rock10.png",
    Xri: "img/day-rock11.png",
    Vri: "img/day-rock12.png",
    Zri: "img/day-rock13.png",
    $ri: "img/day-flower1.png",
    ioi: "img/day-flower2.png",
    toi: "img/day-flower3.png",
    eoi: "img/day-flower4.png",
    noi: "img/day-flower5.png",
    aoi: "img/day-flower6.png",
    soi: "img/day-flower7.png",
    roi: "img/day-flower8.png",
    ooi: "img/day-flower9.png",
    hoi: "img/day-herb16.png",
    goi: "img/day-herb17.png",
    coi: "img/day-herb18.png",
    doi: "img/day-herb19.png",
    moi: "img/day-herb20.png",
    uoi: "img/day-herb21.png",
    foi: "img/night-herb0.png",
    poi: "img/night-herb1.png",
    loi: "img/night-herb2.png",
    boi: "img/night-herb3.png",
    voi: "img/night-herb4.png",
    yoi: "img/night-herb5.png",
    koi: "img/night-herb6.png",
    Aoi: "img/night-herb7.png",
    woi: "img/night-herb8.png",
    Moi: "img/night-herb9.png",
    Boi: "img/night-herb10.png",
    Doi: "img/night-herb11.png",
    Eoi: "img/night-herb12.png",
    Coi: "img/night-herb13.png",
    zoi: "img/night-herb14.png",
    xoi: "img/night-herb15.png",
    Qoi: "img/night-shell0.png",
    Soi: "img/night-shell1.png",
    Ioi: "img/night-shell2.png",
    _oi: "img/night-leaf1.png",
    Foi: "img/night-leaf2.png",
    Poi: "img/night-leaf3.png",
    Toi: "img/night-leaf4.png",
    joi: "img/night-leaf5.png",
    Roi: "img/night-leaf6.png",
    Loi: "img/night-leaf7.png",
    Goi: "img/night-leaf8.png",
    qoi: "img/night-rock0.png",
    Woi: "img/night-rock1.png",
    Noi: "img/night-rock2.png",
    Hoi: "img/night-rock3.png",
    Uoi: "img/night-rock4.png",
    Ooi: "img/night-rock5.png",
    Yoi: "img/night-rock6.png",
    Joi: "img/night-rock7.png",
    Koi: "img/night-rock8.png",
    Xoi: "img/night-rock9.png",
    Voi: "img/night-rock10.png",
    Zoi: "img/night-rock11.png",
    $oi: "img/night-rock12.png",
    ihi: "img/night-rock13.png",
    thi: "img/night-flower1.png",
    ehi: "img/night-flower2.png",
    nhi: "img/night-flower3.png",
    ahi: "img/night-flower4.png",
    shi: "img/night-flower5.png",
    rhi: "img/night-flower6.png",
    ohi: "img/night-flower7.png",
    hhi: "img/night-flower8.png",
    ghi: "img/night-flower9.png",
    chi: "img/night-herb16.png",
    dhi: "img/night-herb17.png",
    mhi: "img/night-herb18.png",
    uhi: "img/night-herb19.png",
    fhi: "img/night-herb20.png",
    phi: "img/night-herb21.png",
    lhi: "img/day-river000-010-000.png",
    bhi: "img/day-river000-010-010.png",
    vhi: "img/day-river000-011-000.png",
    yhi: "img/day-river000-011-010.png",
    khi: "img/day-river000-011-011.png",
    Ahi: "img/day-river000-110-000.png",
    whi: "img/day-river000-110-010.png",
    Mhi: "img/day-river000-110-110.png",
    Bhi: "img/day-river000-111-000.png",
    Dhi: "img/day-river000-111-010.png",
    Ehi: "img/day-river000-111-011.png",
    Chi: "img/day-river000-111-110.png",
    zhi: "img/day-river000-111-111.png",
    xhi: "img/day-river010-010-000.png",
    Qhi: "img/day-river010-010-010.png",
    Shi: "img/day-river010-011-000.png",
    Ihi: "img/day-river010-011-010.png",
    _hi: "img/day-river010-011-011.png",
    Fhi: "img/day-river010-110-000.png",
    Phi: "img/day-river010-110-010.png",
    Thi: "img/day-river010-110-110.png",
    jhi: "img/day-river010-111-000.png",
    Rhi: "img/day-river010-111-010.png",
    Lhi: "img/day-river010-111-011.png",
    Ghi: "img/day-river010-111-110.png",
    qhi: "img/day-river010-111-111.png",
    Whi: "img/day-river011-011-000.png",
    Nhi: "img/day-river011-011-010.png",
    Hhi: "img/day-river011-011-011.png",
    Uhi: "img/day-river011-111-000.png",
    Ohi: "img/day-river011-111-010.png",
    Yhi: "img/day-river011-111-011.png",
    Jhi: "img/day-river011-111-110.png",
    Khi: "img/day-river011-111-111.png",
    Xhi: "img/day-river110-110-000.png",
    Vhi: "img/day-river110-110-010.png",
    Zhi: "img/day-river110-110-110.png",
    $hi: "img/day-river110-111-000.png",
    igi: "img/day-river110-111-010.png",
    tgi: "img/day-river110-111-011.png",
    egi: "img/day-river110-111-110.png",
    ngi: "img/day-river110-111-111.png",
    agi: "img/day-river111-111-011.png",
    sgi: "img/day-river111-111-110.png",
    agi: "img/day-river111-111-011.png",
    rgi: "img/day-river111-111-000.png",
    ogi: "img/day-river111-111-111.png",
    hgi: "img/day-river111-111-010.png",
    ggi: "img/night-river000-010-000.png",
    cgi: "img/night-river000-010-010.png",
    dgi: "img/night-river000-011-000.png",
    mgi: "img/night-river000-011-010.png",
    ugi: "img/night-river000-011-011.png",
    fgi: "img/night-river000-110-000.png",
    pgi: "img/night-river000-110-010.png",
    lgi: "img/night-river000-110-110.png",
    bgi: "img/night-river000-111-000.png",
    vgi: "img/night-river000-111-010.png",
    ygi: "img/night-river000-111-011.png",
    kgi: "img/night-river000-111-110.png",
    Agi: "img/night-river000-111-111.png",
    wgi: "img/night-river010-010-000.png",
    Mgi: "img/night-river010-010-010.png",
    Bgi: "img/night-river010-011-000.png",
    Dgi: "img/night-river010-011-010.png",
    Egi: "img/night-river010-011-011.png",
    Cgi: "img/night-river010-110-000.png",
    zgi: "img/night-river010-110-010.png",
    xgi: "img/night-river010-110-110.png",
    Qgi: "img/night-river010-111-000.png",
    Sgi: "img/night-river010-111-010.png",
    Igi: "img/night-river010-111-011.png",
    _gi: "img/night-river010-111-110.png",
    Fgi: "img/night-river010-111-111.png",
    Pgi: "img/night-river011-011-000.png",
    Tgi: "img/night-river011-011-010.png",
    jgi: "img/night-river011-011-011.png",
    Rgi: "img/night-river011-111-000.png",
    Lgi: "img/night-river011-111-010.png",
    Ggi: "img/night-river011-111-011.png",
    qgi: "img/night-river011-111-110.png",
    Wgi: "img/night-river011-111-111.png",
    Ngi: "img/night-river110-110-000.png",
    Hgi: "img/night-river110-110-010.png",
    Ugi: "img/night-river110-110-110.png",
    Ogi: "img/night-river110-111-000.png",
    Ygi: "img/night-river110-111-010.png",
    Jgi: "img/night-river110-111-011.png",
    Kgi: "img/night-river110-111-110.png",
    Xgi: "img/night-river110-111-111.png",
    Vgi: "img/night-river111-111-011.png",
    Zgi: "img/night-river111-111-110.png",
    Vgi: "img/night-river111-111-011.png",
    $gi: "img/night-river111-111-000.png",
    ici: "img/night-river111-111-111.png",
    tci: "img/night-river111-111-010.png",
    eci: "img/day-pebblecompo1.png",
    nci: "img/day-pebblecompo2.png",
    aci: "img/day-pebblecompo3.png",
    sci: "img/day-pebblecompo4.png",
    rci: "img/day-pebblecompo5.png",
    oci: "img/day-pebblecompo6.png",
    hci: "img/day-pebblecompo7.png",
    gci: "img/day-pebblecompo8.png",
    cci: "img/day-pebblecompo9.png",
    dci: "img/day-pebblecompo10.png",
    mci: "img/day-pebblecompo11.png",
    uci: "img/day-pebblecompo12.png",
    fci: "img/day-pebblecompo13.png",
    pci: "img/day-pebblecompo14.png",
    lci: "img/day-pebblecompo15.png",
    bci: "img/day-pebblecompo16.png",
    vci: "img/day-pebblecompo17.png",
    yci: "img/day-pebblecompo18.png",
    kci: "img/day-pebblecompo19.png",
    Aci: "img/day-pebblecompo20.png",
    wci: "img/day-pebblecompo21.png",
    Mci: "img/day-pebblecompo22.png",
    Bci: "img/day-pebblecompo23.png",
    Dci: "img/day-pebblecompo24.png",
    Eci: "img/day-pebblecompo25.png",
    Cci: "img/day-pebblecompo26.png",
    zci: "img/day-pebblecompo27.png",
    xci: "img/day-pebblecompo28.png",
    Qci: "img/night-pebblecompo1.png",
    Sci: "img/night-pebblecompo2.png",
    Ici: "img/night-pebblecompo3.png",
    _ci: "img/night-pebblecompo4.png",
    Fci: "img/night-pebblecompo5.png",
    Pci: "img/night-pebblecompo6.png",
    Tci: "img/night-pebblecompo7.png",
    jci: "img/night-pebblecompo8.png",
    Rci: "img/night-pebblecompo9.png",
    Lci: "img/night-pebblecompo10.png",
    Gci: "img/night-pebblecompo11.png",
    qci: "img/night-pebblecompo12.png",
    Wci: "img/night-pebblecompo13.png",
    Nci: "img/night-pebblecompo14.png",
    Hci: "img/night-pebblecompo15.png",
    Uci: "img/night-pebblecompo16.png",
    Oci: "img/night-pebblecompo17.png",
    Yci: "img/night-pebblecompo18.png",
    Jci: "img/night-pebblecompo19.png",
    Kci: "img/night-pebblecompo20.png",
    Xci: "img/night-pebblecompo21.png",
    Vci: "img/night-pebblecompo22.png",
    Zci: "img/night-pebblecompo23.png",
    $ci: "img/night-pebblecompo24.png",
    idi: "img/night-pebblecompo25.png",
    tdi: "img/night-pebblecompo26.png",
    edi: "img/night-pebblecompo27.png",
    ndi: "img/night-pebblecompo28.png",
    adi: "img/day-baby-mammoth.png",
    sdi: "img/day-baby-mammoth-tamed.png",
    rdi: "img/day-baby-mammoth-angry.png",
    odi: "img/night-baby-mammoth.png",
    hdi: "img/night-baby-mammoth-tamed.png",
    gdi: "img/night-baby-mammoth-angry.png",
    cdi: "img/inv-mammoth-out.png",
    ddi: "img/inv-mammoth-in.png",
    mdi: "img/inv-mammoth-click.png",
    RB: "img/hurt-baby-mammoth.png",
    kr: "img/baby-mammoth-step.png",
    udi: "img/day-flower-hat.png",
    fdi: "img/night-flower-hat.png",
    pdi: "img/inv-flower-hat-out.png",
    ldi: "img/inv-flower-hat-in.png",
    bdi: "img/inv-flower-hat-click.png",
    vdi: "img/day-fur-hat.png",
    ydi: "img/night-fur-hat.png",
    kdi: "img/inv-fur-hat-out.png",
    Adi: "img/inv-fur-hat-in.png",
    wdi: "img/inv-fur-hat-click.png",
    Mdi: "img/day-mammoth.png",
    Bdi: "img/night-mammoth.png",
    PB: "img/hurt-mammoth.png",
    Ddi: "img/inv-mammoth-fur-out.png",
    Edi: "img/inv-mammoth-fur-in.png",
    Cdi: "img/inv-mammoth-fur-click.png",
    zdi: "img/inv-wood-bow-out.png",
    xdi: "img/inv-wood-bow-in.png",
    Qdi: "img/inv-wood-bow-click.png",
    Sdi: "img/inv-wood-arrow-out.png",
    Idi: "img/inv-wood-arrow-in.png",
    _di: "img/inv-wood-arrow-click.png",
    Fdi: "img/day-wood-bow2.png",
    Pdi: "img/night-wood-bow2.png",
    Tdi: "img/day-wood-arrow.png",
    jdi: "img/night-wood-arrow.png",
    Rdi: "img/inv-stone-bow-out.png",
    Ldi: "img/inv-stone-bow-in.png",
    Gdi: "img/inv-stone-bow-click.png",
    qdi: "img/inv-stone-arrow-out.png",
    Wdi: "img/inv-stone-arrow-in.png",
    Ndi: "img/inv-stone-arrow-click.png",
    Hdi: "img/day-stone-bow.png",
    Udi: "img/night-stone-bow.png",
    Odi: "img/day-stone-arrow.png",
    Ydi: "img/night-stone-arrow.png",
    Jdi: "img/inv-gold-bow-out.png",
    Kdi: "img/inv-gold-bow-in.png",
    Xdi: "img/inv-gold-bow-click.png",
    Vdi: "img/inv-gold-arrow-out.png",
    Zdi: "img/inv-gold-arrow-in.png",
    $di: "img/inv-gold-arrow-click.png",
    imi: "img/day-gold-bow.png",
    tmi: "img/night-gold-bow.png",
    emi: "img/day-gold-arrow.png",
    nmi: "img/night-gold-arrow.png",
    ami: "img/inv-diamond-bow-out.png",
    smi: "img/inv-diamond-bow-in.png",
    rmi: "img/inv-diamond-bow-click.png",
    omi: "img/inv-diamond-arrow-out.png",
    hmi: "img/inv-diamond-arrow-in.png",
    gmi: "img/inv-diamond-arrow-click.png",
    cmi: "img/day-diamond-bow.png",
    dmi: "img/night-diamond-bow.png",
    mmi: "img/day-diamond-arrow.png",
    umi: "img/night-diamond-arrow.png",
    fmi: "img/inv-amethyst-bow-out.png",
    pmi: "img/inv-amethyst-bow-in.png",
    lmi: "img/inv-amethyst-bow-click.png",
    bmi: "img/inv-amethyst-arrow-out.png",
    vmi: "img/inv-amethyst-arrow-in.png",
    ymi: "img/inv-amethyst-arrow-click.png",
    kmi: "img/day-amethyst-bow.png",
    Ami: "img/night-amethyst-bow.png",
    wmi: "img/day-amethyst-arrow.png",
    Mmi: "img/night-amethyst-arrow.png",
    Bmi: "img/inv-dragon-bow-out.png",
    Dmi: "img/inv-dragon-bow-in.png",
    Emi: "img/inv-dragon-bow-click.png",
    Cmi: "img/inv-dragon-arrow-out.png",
    zmi: "img/inv-dragon-arrow-in.png",
    xmi: "img/inv-dragon-arrow-click.png",
    Qmi: "img/day-dragon-bow.png",
    Smi: "img/night-dragon-bow.png",
    Imi: "img/day-dragon-arrow.png",
    _mi: "img/night-dragon-arrow.png",
    Fmi: "img/inv-reidite-bow-out.png",
    Pmi: "img/inv-reidite-bow-in.png",
    Tmi: "img/inv-reidite-bow-click.png",
    jmi: "img/inv-reidite-arrow-out.png",
    Rmi: "img/inv-reidite-arrow-in.png",
    Lmi: "img/inv-reidite-arrow-click.png",
    Gmi: "img/day-reidite-bow.png",
    qmi: "img/night-reidite-bow.png",
    Wmi: "img/day-reidite-arrow.png",
    Nmi: "img/night-reidite-arrow.png",
    Hmi: "img/inv-wooden-axe-out.png",
    Umi: "img/inv-wooden-axe-in.png",
    Omi: "img/inv-wooden-axe-click.png",
    Ymi: "img/day-wooden-axe.png",
    Jmi: "img/night-wooden-axe.png",
    Kmi: "img/inv-stone-axe-out.png",
    Xmi: "img/inv-stone-axe-in.png",
    Vmi: "img/inv-stone-axe-click.png",
    Zmi: "img/day-stone-axe.png",
    $mi: "img/night-stone-axe.png",
    iui: "img/inv-golden-axe-out.png",
    tui: "img/inv-golden-axe-in.png",
    eui: "img/inv-golden-axe-click.png",
    nui: "img/day-golden-axe.png",
    aui: "img/night-golden-axe.png",
    sui: "img/inv-diamond-axe-out.png",
    rui: "img/inv-diamond-axe-in.png",
    oui: "img/inv-diamond-axe-click.png",
    hui: "img/day-diamond-axe.png",
    gui: "img/night-diamond-axe.png",
    cui: "img/inv-amethyst-axe-out.png",
    dui: "img/inv-amethyst-axe-in.png",
    mui: "img/inv-amethyst-axe-click.png",
    uui: "img/day-amethyst-axe.png",
    fui: "img/night-amethyst-axe.png",
    pui: "img/inv-reidite-axe-out.png",
    lui: "img/inv-reidite-axe-in.png",
    bui: "img/inv-reidite-axe-click.png",
    vui: "img/day-reidite-axe.png",
    yui: "img/night-reidite-axe.png",
    nm: "img/bandage-activated.png",
    tm: "img/auto-feed.png",
    sm: "img/stop-regeneration.png",
    am: "img/stop-regeneration2.png",
    kui: "img/day-wood-platform.png",
    Aui: "img/night-wood-platform.png",
    wui: "img/inv-wood-platform-in.png",
    Mui: "img/inv-wood-platform-out.png",
    Bui: "img/inv-wood-platform-click.png",
    Dui: "img/day-wood-shield.png",
    Eui: "img/night-wood-shield.png",
    Cui: "img/day-stone-shield.png",
    zui: "img/night-stone-shield.png",
    xui: "img/day-gold-shield.png",
    Qui: "img/night-gold-shield.png",
    Sui: "img/day-diamond-shield.png",
    Iui: "img/night-diamond-shield.png",
    _ui: "img/day-amethyst-shield.png",
    Fui: "img/night-amethyst-shield.png",
    Pui: "img/day-reidite-shield.png",
    Tui: "img/night-reidite-shield.png",
    jui: "img/inv-wood-shield-in.png",
    Rui: "img/inv-wood-shield-out.png",
    Lui: "img/inv-wood-shield-click.png",
    Gui: "img/inv-stone-shield-in.png",
    qui: "img/inv-stone-shield-out.png",
    Wui: "img/inv-stone-shield-click.png",
    Nui: "img/inv-gold-shield-in.png",
    Hui: "img/inv-gold-shield-out.png",
    Uui: "img/inv-gold-shield-click.png",
    Oui: "img/inv-diamond-shield-in.png",
    Yui: "img/inv-diamond-shield-out.png",
    Jui: "img/inv-diamond-shield-click.png",
    Kui: "img/inv-amethyst-shield-in.png",
    Xui: "img/inv-amethyst-shield-out.png",
    Vui: "img/inv-amethyst-shield-click.png",
    Zui: "img/inv-reidite-shield-in.png",
    $ui: "img/inv-reidite-shield-out.png",
    ifi: "img/inv-reidite-shield-click.png",
    tfi: "img/day-machete.png",
    efi: "img/night-machete.png",
    nfi: "img/inv-machete-in.png",
    afi: "img/inv-machete-out.png",
    sfi: "img/inv-machete-click.png"
  };
  ⲆΔᐃᐃⵠⲆΔ = [{}];
  ⲆΔᐃᐃⵠⲆΔ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = Ng; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const Gt = en;
  const Wd = gr;
  ⵠⲆⵠⵠᐃᐃΔ = {};
  ⲆΔᐃᐃΔⲆⲆⵠⵠ = {};
  for (var Td in Δᐃ) {
    ⵠⲆⵠⵠᐃᐃΔ[Td] = Δᐃ[Td];
  }
  const Nd = lc;
  ΔΔ = [];
  ᐃΔⲆ = {};
  ᐃΔⲆ.ⵠⲆΔᐃⵠ = 0;
  const Hd = Xo;
  ᐃΔⲆ.aE = 1;
  ᐃΔⲆ.nE = 2;
  ᐃΔⲆ.Ln = Lc;
  const Ud = Jn;
  ᐃΔⲆ.Gn = _g;
  const Od = og;
  const Yd = q;
  ᐃΔⲆ.Kn = yh;
  ᐃΔⲆ.Ds = 6;
  ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ = 7;
  ᐃΔⲆ.ΔⵠᐃⲆΔ = tq;
  const Jd = aq;
  ⲆⲆⵠⲆ = {};
  ⲆⲆΔⲆ = [];
  ΔⵠΔⵠᐃᐃⵠ = function (a, b) {
    for (var c = Ka; a.length > c; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -Ps;
  };
  var Kd = [];
  function Ht(a, b) {
    for (var c = Ka; Kd.length > c; c += b) {
      var d = Kd[c];
      if (a === d[sh]) {
        im(d[0], d[fo], d[Vn], d[fa]);
      }
    }
  }
  const Vd = Ka;
  const Zd = Ch;
  const $d = Ja;
  function im(b, d, f, e) {
    var i = ⲆⲆΔⲆ[b];
    if (Z !== i) {
      for (var a = Ka; a < 2; a++) {
        var j = i[d][a];
        var k = e * 193 / ck.rfi;
        var l = f * 193 / ck.ofi;
        var m = j.width / 3.5;
        var n = j.height / 3.5;
        ΔΔ[rt.ob][a].drawImage(j, k - m / mj, l - n / Cs, m, n);
        k = e * 600 / ck.rfi;
        l = f * 600 / ck.ofi;
        m = j.width / 1.5;
        n = j.height / 1.5;
        ΔΔ[rt.hb][a].drawImage(j, k - m / mj, l - n / 2, m, n);
      }
    }
  }
  ⵠᐃᐃⵠΔΔΔ = function () {
    for (var b = so; b < 2; b++) {
      ΔΔ[rt.ob][b].clearRect(nj, Sh, 193, 193);
      ΔΔ[rt.ob][b].drawImage(ⲆⲆΔⲆ.MAP[b], Oq, Ng, 193, 193);
      ΔΔ[rt.hb][b].clearRect(Ka, Js, 600, 600);
      ΔΔ[rt.hb][b].drawImage(ⲆⲆΔⲆ.MAP[b], so, Ea, 600, 600);
      for (var d = ck.hfi.length - fo; d >= 0; d--) {
        var f = ck.hfi[d];
        var j = f.x1 * 193 / (ck.rfi * Kn);
        var k = f.y1 * 193 / (ck.ofi * 100);
        var l = f.w * 193 / (ck.rfi * Qg);
        var m = f.K * 193 / (ck.ofi * Vs);
        var p = f.x1 * 600 / (wr * ck.rfi);
        var q = f.y1 * 600 / (ck.ofi * yq);
        var u = f.w * 600 / (kh * ck.rfi);
        var v = f.K * 600 / (ck.ofi * 100);
        if (ck.gfi === f.xE) {
          ΔΔ[rt.ob][b].drawImage(ⲆⲆΔⲆ.FOREST[b], j, k, l, m);
          ΔΔ[rt.hb][b].drawImage(ⲆⲆΔⲆ.FOREST[b], p, q, u, v);
        }
        if (ck.cfi === f.xE) {
          ΔΔ[rt.ob][b].drawImage(ⲆⲆΔⲆ.WINTER[b], j, k, l, m);
          ΔΔ[rt.hb][b].drawImage(ⲆⲆΔⲆ.WINTER[b], p, q, u, v);
        }
        if (f.xE === ck.dfi) {
          ΔΔ[rt.ob][b].drawImage(ⲆⲆΔⲆ.LAVA[b], j, k, l, m);
          ΔΔ[rt.hb][b].drawImage(ⲆⲆΔⲆ.LAVA[b], p, q, u, v);
        }
        if (f.xE === ck.mfi) {
          ΔΔ[rt.ob][b].drawImage(ⲆⲆΔⲆ.CAVE[b], j, k, l, m);
          ΔΔ[rt.hb][b].drawImage(ⲆⲆΔⲆ.CAVE[b], p, q, u, v);
        }
        if (ck.ufi === f.xE) {
          ΔΔ[rt.ob][b].drawImage(ⲆⲆΔⲆ.DESERT[b], j, k, l, m);
          ΔΔ[rt.hb][b].drawImage(ⲆⲆΔⲆ[lj[Mc]][b], p, q, u, v);
        }
      }
    }
  };
  ᐃⵠⲆⵠⵠΔᐃ = function () {
    ⲆⲆⵠⲆ = {
      ffi: [{
        id: xn,
        pfi: Δᐃ.YS,
        lfi: Δᐃ.JS,
        bfi: Δᐃ._I,
        vfi: Δᐃ.FI,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        pfi: Δᐃ.$S,
        lfi: Δᐃ.iI,
        bfi: Δᐃ.GI,
        vfi: Δᐃ.qI,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        pfi: Δᐃ.VS,
        lfi: Δᐃ.ZS,
        bfi: Δᐃ.RI,
        vfi: Δᐃ.LI,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        pfi: Δᐃ.dI,
        lfi: Δᐃ.mI,
        bfi: Δᐃ.ZI,
        vfi: Δᐃ.$I,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Happy 1"
      }, {
        id: fn,
        pfi: Δᐃ.KS,
        lfi: Δᐃ.XS,
        bfi: Δᐃ.TI,
        vfi: Δᐃ.jI,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        pfi: Δᐃ.tI,
        lfi: Δᐃ.eI,
        bfi: Δᐃ.WI,
        vfi: Δᐃ.NI,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        pfi: Δᐃ.nI,
        lfi: Δᐃ.aI,
        bfi: Δᐃ.HI,
        vfi: Δᐃ.UI,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        pfi: Δᐃ.sI,
        lfi: Δᐃ.rI,
        bfi: Δᐃ.OI,
        vfi: Δᐃ.YI,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        pfi: Δᐃ.oI,
        lfi: Δᐃ.hI,
        bfi: Δᐃ.JI,
        vfi: Δᐃ.KI,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Cute"
      }, {
        id: tq,
        pfi: Δᐃ.gI,
        lfi: Δᐃ.cI,
        bfi: Δᐃ.XI,
        vfi: Δᐃ.VI,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        pfi: Δᐃ.uI,
        lfi: Δᐃ.fI,
        bfi: Δᐃ.i_,
        vfi: Δᐃ.t_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        pfi: Δᐃ.pI,
        lfi: Δᐃ.lI,
        bfi: Δᐃ.e_,
        vfi: Δᐃ.n_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Crazy"
      }, {
        id: Dh,
        pfi: Δᐃ.bI,
        lfi: Δᐃ.vI,
        bfi: Δᐃ.a_,
        vfi: Δᐃ.s_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Happy 3"
      }, {
        id: fh,
        pfi: Δᐃ.yI,
        lfi: Δᐃ.kI,
        bfi: Δᐃ.r_,
        vfi: Δᐃ.o_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Very Cute"
      }, {
        id: ng,
        pfi: Δᐃ.AI,
        lfi: Δᐃ.wI,
        bfi: Δᐃ.h_,
        vfi: Δᐃ.g_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Curious"
      }, {
        id: Ss,
        pfi: Δᐃ.MI,
        lfi: Δᐃ.BI,
        bfi: Δᐃ.c_,
        vfi: Δᐃ.d_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        pfi: Δᐃ.DI,
        lfi: Δᐃ.EI,
        bfi: Δᐃ.m_,
        vfi: Δᐃ.u_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        pfi: Δᐃ.CI,
        lfi: Δᐃ.zI,
        bfi: Δᐃ.f_,
        vfi: Δᐃ.p_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        pfi: Δᐃ.xI,
        lfi: Δᐃ.QI,
        bfi: Δᐃ.l_,
        vfi: Δᐃ.b_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Sick"
      }, {
        id: Io,
        pfi: Δᐃ.SI,
        lfi: Δᐃ.II,
        bfi: Δᐃ.v_,
        vfi: Δᐃ.y_,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        pfi: Δᐃ.lK,
        lfi: Δᐃ.bK,
        bfi: Δᐃ.t2,
        vfi: Δᐃ.e2,
        yfi: ᐃΔⲆ.aE,
        kfi: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        pfi: Δᐃ.eK,
        lfi: Δᐃ.nK,
        bfi: Δᐃ.G1,
        vfi: Δᐃ.q1,
        yfi: ᐃΔⲆ.aE,
        kfi: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        pfi: Δᐃ.VV,
        lfi: Δᐃ.ZV,
        bfi: Δᐃ.W0,
        vfi: Δᐃ.N0,
        yfi: ᐃΔⲆ.aE,
        kfi: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        pfi: Δᐃ.tZ,
        lfi: Δᐃ.eZ,
        bfi: Δᐃ.O0,
        vfi: Δᐃ.Y0,
        yfi: ᐃΔⲆ.aE,
        kfi: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        pfi: Δᐃ.nZ,
        lfi: Δᐃ.aZ,
        bfi: Δᐃ.J0,
        vfi: Δᐃ.K0,
        yfi: ᐃΔⲆ.aE,
        kfi: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        pfi: Δᐃ.$V,
        lfi: Δᐃ.iZ,
        bfi: Δᐃ.H0,
        vfi: Δᐃ.U0,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Scared at night"
      }, {
        id: Ji,
        pfi: Δᐃ.HJ,
        lfi: Δᐃ.UJ,
        bfi: Δᐃ.OJ,
        vfi: Δᐃ.YJ,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        pfi: Δᐃ.JJ,
        lfi: Δᐃ.KJ,
        bfi: Δᐃ.XJ,
        vfi: Δᐃ.VJ,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        pfi: Δᐃ.TJ,
        lfi: Δᐃ.jJ,
        bfi: Δᐃ.RJ,
        vfi: Δᐃ.LJ,
        yfi: ᐃΔⲆ.nE,
        kfi: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        pfi: Δᐃ.MZ,
        lfi: Δᐃ.BZ,
        bfi: Δᐃ.f3,
        vfi: Δᐃ.l3,
        yfi: ᐃΔⲆ.nE,
        kfi: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        pfi: Δᐃ.GK,
        lfi: Δᐃ.qK,
        bfi: Δᐃ.Q2,
        vfi: Δᐃ.S2,
        yfi: ᐃΔⲆ.nE,
        kfi: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        pfi: Δᐃ.WK,
        lfi: Δᐃ.NK,
        bfi: Δᐃ.I2,
        vfi: Δᐃ._2,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        pfi: Δᐃ.VK,
        lfi: Δᐃ.ZK,
        bfi: Δᐃ.G2,
        vfi: Δᐃ.q2,
        yfi: ᐃΔⲆ.nE,
        kfi: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        pfi: Δᐃ.bX,
        lfi: Δᐃ.vX,
        bfi: Δᐃ.o5,
        vfi: Δᐃ.h5,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        pfi: Δᐃ.pX,
        lfi: Δᐃ.lX,
        bfi: Δᐃ.s5,
        vfi: Δᐃ.r5,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        pfi: Δᐃ._V,
        lfi: Δᐃ.FV,
        bfi: Δᐃ.B0,
        vfi: Δᐃ.D0,
        yfi: ᐃΔⲆ.nE,
        kfi: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        pfi: Δᐃ.gZ,
        lfi: Δᐃ.cZ,
        bfi: Δᐃ.i3,
        vfi: Δᐃ.t3,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        pfi: Δᐃ.yZ,
        lfi: Δᐃ.kZ,
        bfi: Δᐃ.c3,
        vfi: Δᐃ.d3,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        pfi: Δᐃ.SZ,
        lfi: Δᐃ.IZ,
        bfi: Δᐃ.B3,
        vfi: Δᐃ.D3,
        yfi: ᐃΔⲆ.nE,
        kfi: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        pfi: Δᐃ.s$,
        lfi: Δᐃ.r$,
        bfi: Δᐃ.Z3,
        vfi: Δᐃ.i9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        pfi: Δᐃ.o$,
        lfi: Δᐃ.h$,
        bfi: Δᐃ.t9,
        vfi: Δᐃ.e9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        pfi: Δᐃ.g$,
        lfi: Δᐃ.c$,
        bfi: Δᐃ.n9,
        vfi: Δᐃ.a9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        pfi: Δᐃ.d$,
        lfi: Δᐃ.m$,
        bfi: Δᐃ.s9,
        vfi: Δᐃ.r9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        pfi: Δᐃ.p$,
        lfi: Δᐃ.l$,
        bfi: Δᐃ.g9,
        vfi: Δᐃ.c9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        pfi: Δᐃ.b$,
        lfi: Δᐃ.v$,
        bfi: Δᐃ.d9,
        vfi: Δᐃ.m9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        pfi: Δᐃ.y$,
        lfi: Δᐃ.k$,
        bfi: Δᐃ.u9,
        vfi: Δᐃ.f9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        pfi: Δᐃ.A$,
        lfi: Δᐃ.w$,
        bfi: Δᐃ.p9,
        vfi: Δᐃ.l9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        pfi: Δᐃ.M$,
        lfi: Δᐃ.B$,
        bfi: Δᐃ.b9,
        vfi: Δᐃ.v9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        pfi: Δᐃ.P$,
        lfi: Δᐃ.T$,
        bfi: Δᐃ.x9,
        vfi: Δᐃ.Q9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        pfi: Δᐃ.j$,
        lfi: Δᐃ.R$,
        bfi: Δᐃ.S9,
        vfi: Δᐃ.I9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        pfi: Δᐃ.L$,
        lfi: Δᐃ.G$,
        bfi: Δᐃ._9,
        vfi: Δᐃ.F9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        pfi: Δᐃ.q$,
        lfi: Δᐃ.W$,
        bfi: Δᐃ.P9,
        vfi: Δᐃ.T9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        pfi: Δᐃ.N$,
        lfi: Δᐃ.H$,
        bfi: Δᐃ.j9,
        vfi: Δᐃ.R9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        pfi: Δᐃ.U$,
        lfi: Δᐃ.O$,
        bfi: Δᐃ.L9,
        vfi: Δᐃ.G9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        pfi: Δᐃ.Y$,
        lfi: Δᐃ.J$,
        bfi: Δᐃ.q9,
        vfi: Δᐃ.W9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        pfi: Δᐃ.K$,
        lfi: Δᐃ.X$,
        bfi: Δᐃ.N9,
        vfi: Δᐃ.H9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        pfi: Δᐃ.V$,
        lfi: Δᐃ.Z$,
        bfi: Δᐃ.U9,
        vfi: Δᐃ.O9,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        pfi: Δᐃ.n1,
        lfi: Δᐃ.a1,
        bfi: Δᐃ.V9,
        vfi: Δᐃ.Z9,
        yfi: ᐃΔⲆ.nE,
        kfi: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        pfi: Δᐃ.M1,
        lfi: Δᐃ.B1,
        bfi: Δᐃ.f4,
        vfi: Δᐃ.l4,
        yfi: ᐃΔⲆ.nE,
        kfi: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        pfi: Δᐃ.Q1,
        lfi: Δᐃ.S1,
        bfi: Δᐃ.w4,
        vfi: Δᐃ.M4,
        yfi: ᐃΔⲆ.nE,
        kfi: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        pfi: Δᐃ.I1,
        lfi: Δᐃ._1,
        bfi: Δᐃ.B4,
        vfi: Δᐃ.D4,
        yfi: ᐃΔⲆ.nE,
        kfi: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        pfi: Δᐃ.T1,
        lfi: Δᐃ.j1,
        bfi: Δᐃ.z4,
        vfi: Δᐃ.x4,
        yfi: ᐃΔⲆ.nE,
        kfi: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        pfi: Δᐃ.rK,
        lfi: Δᐃ.oK,
        bfi: Δᐃ.H1,
        vfi: Δᐃ.U1,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        pfi: Δᐃ.hK,
        lfi: Δᐃ.gK,
        bfi: Δᐃ.O1,
        vfi: Δᐃ.Y1,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        pfi: Δᐃ.cK,
        lfi: Δᐃ.dK,
        bfi: Δᐃ.J1,
        vfi: Δᐃ.K1,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        pfi: Δᐃ.mK,
        lfi: Δᐃ.uK,
        bfi: Δᐃ.X1,
        vfi: Δᐃ.V1,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        pfi: Δᐃ.vK,
        lfi: Δᐃ.yK,
        bfi: Δᐃ.n2,
        vfi: Δᐃ.a2,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        pfi: Δᐃ.kK,
        lfi: Δᐃ.AK,
        bfi: Δᐃ.s2,
        vfi: Δᐃ.o2,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        pfi: Δᐃ.wK,
        lfi: Δᐃ.MK,
        bfi: Δᐃ.h2,
        vfi: Δᐃ.g2,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        pfi: Δᐃ.TK,
        lfi: Δᐃ.jK,
        bfi: Δᐃ.D2,
        vfi: Δᐃ.E2,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Winter",
        name: "Owl"
      }, {
        id: 52,
        pfi: Δᐃ.nX,
        lfi: Δᐃ.aX,
        bfi: Δᐃ.O2,
        vfi: Δᐃ.Y2,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        pfi: Δᐃ.sX,
        lfi: Δᐃ.rX,
        bfi: Δᐃ.J2,
        vfi: Δᐃ.K2,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        pfi: Δᐃ.YX,
        lfi: Δᐃ.JX,
        bfi: Δᐃ.j5,
        vfi: Δᐃ.R5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        pfi: Δᐃ.KX,
        lfi: Δᐃ.XX,
        bfi: Δᐃ.L5,
        vfi: Δᐃ.G5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        pfi: Δᐃ.yX,
        lfi: Δᐃ.kX,
        bfi: Δᐃ.g5,
        vfi: Δᐃ.c5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        pfi: Δᐃ.AX,
        lfi: Δᐃ.wX,
        bfi: Δᐃ.d5,
        vfi: Δᐃ.m5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        pfi: Δᐃ.LX,
        lfi: Δᐃ.GX,
        bfi: Δᐃ.x5,
        vfi: Δᐃ.Q5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Cake"
      }, {
        id: 71,
        pfi: Δᐃ.qX,
        lfi: Δᐃ.WX,
        bfi: Δᐃ.S5,
        vfi: Δᐃ.I5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        pfi: Δᐃ.$X,
        lfi: Δᐃ.iV,
        bfi: Δᐃ.N5,
        vfi: Δᐃ.H5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        pfi: Δᐃ.yV,
        lfi: Δᐃ.kV,
        bfi: Δᐃ.c0,
        vfi: Δᐃ.d0,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        pfi: Δᐃ.tV,
        lfi: Δᐃ.eV,
        bfi: Δᐃ.U5,
        vfi: Δᐃ.O5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        pfi: Δᐃ.nV,
        lfi: Δᐃ.aV,
        bfi: Δᐃ.Y5,
        vfi: Δᐃ.J5,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        pfi: Δᐃ.jV,
        lfi: Δᐃ.RV,
        bfi: Δᐃ.z0,
        vfi: Δᐃ.x0,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        pfi: Δᐃ.KV,
        lfi: Δᐃ.XV,
        bfi: Δᐃ.G0,
        vfi: Δᐃ.q0,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        pfi: Δᐃ.sZ,
        lfi: Δᐃ.rZ,
        bfi: Δᐃ.X0,
        vfi: Δᐃ.V0,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Fox"
      }, {
        id: 132,
        pfi: Δᐃ.t$,
        lfi: Δᐃ.e$,
        bfi: Δᐃ.J3,
        vfi: Δᐃ.K3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        pfi: Δᐃ.uZ,
        lfi: Δᐃ.fZ,
        bfi: Δᐃ.a3,
        vfi: Δᐃ.s3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        pfi: Δᐃ.bZ,
        lfi: Δᐃ.vZ,
        bfi: Δᐃ.h3,
        vfi: Δᐃ.g3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        pfi: Δᐃ.DZ,
        lfi: Δᐃ.EZ,
        bfi: Δᐃ.b3,
        vfi: Δᐃ.v3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        pfi: Δᐃ.CZ,
        lfi: Δᐃ.zZ,
        bfi: Δᐃ.y3,
        vfi: Δᐃ.A3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        pfi: Δᐃ.xZ,
        lfi: Δᐃ.QZ,
        bfi: Δᐃ.w3,
        vfi: Δᐃ.M3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        pfi: Δᐃ.PZ,
        lfi: Δᐃ.TZ,
        bfi: Δᐃ.z3,
        vfi: Δᐃ.x3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        pfi: Δᐃ.UZ,
        lfi: Δᐃ.OZ,
        bfi: Δᐃ.R3,
        vfi: Δᐃ.L3,
        yfi: ᐃΔⲆ.Ln,
        kfi: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        pfi: Δᐃ.s1,
        lfi: Δᐃ.o1,
        bfi: Δᐃ.i4,
        vfi: Δᐃ.t4,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        pfi: Δᐃ.c1,
        lfi: Δᐃ.d1,
        bfi: Δᐃ.a4,
        vfi: Δᐃ.s4,
        yfi: ᐃΔⲆ.Ln,
        kfi: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        pfi: Δᐃ.A1,
        lfi: Δᐃ.w1,
        bfi: Δᐃ.m4,
        vfi: Δᐃ.u4,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        pfi: Δᐃ.C1,
        lfi: Δᐃ.z1,
        bfi: Δᐃ.y4,
        vfi: Δᐃ.A4,
        yfi: ᐃΔⲆ.Ln,
        kfi: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        pfi: Δᐃ.F1,
        lfi: Δᐃ.P1,
        bfi: Δᐃ.E4,
        vfi: Δᐃ.C4,
        yfi: ᐃΔⲆ.Ln,
        kfi: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        pfi: Δᐃ.fK,
        lfi: Δᐃ.pK,
        bfi: Δᐃ.Z1,
        vfi: Δᐃ.q1,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        pfi: Δᐃ.GJ,
        lfi: Δᐃ.qJ,
        bfi: Δᐃ.WJ,
        vfi: Δᐃ.NJ,
        yfi: ᐃΔⲆ.Gn,
        kfi: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        pfi: Δᐃ.BK,
        lfi: Δᐃ.DK,
        bfi: Δᐃ.c2,
        vfi: Δᐃ.d2,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        pfi: Δᐃ.AV,
        lfi: Δᐃ.wV,
        bfi: Δᐃ.m0,
        vfi: Δᐃ.u0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        pfi: Δᐃ._Z,
        lfi: Δᐃ.FZ,
        bfi: Δᐃ.E3,
        vfi: Δᐃ.C3,
        yfi: ᐃΔⲆ.Gn,
        kfi: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        pfi: Δᐃ.YK,
        lfi: Δᐃ.JK,
        bfi: Δᐃ.T2,
        vfi: Δᐃ.j2,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        pfi: Δᐃ.KK,
        lfi: Δᐃ.XK,
        bfi: Δᐃ.R2,
        vfi: Δᐃ.L2,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        pfi: Δᐃ.FK,
        lfi: Δᐃ.PK,
        bfi: Δᐃ.M2,
        vfi: Δᐃ.B2,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        pfi: Δᐃ.jX,
        lfi: Δᐃ.RX,
        bfi: Δᐃ.C5,
        vfi: Δᐃ.z5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        pfi: Δᐃ.tX,
        lfi: Δᐃ.eX,
        bfi: Δᐃ.H2,
        vfi: Δᐃ.U2,
        yfi: ᐃΔⲆ.Gn,
        kfi: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        pfi: Δᐃ.n$,
        lfi: Δᐃ.a$,
        bfi: Δᐃ.X3,
        vfi: Δᐃ.V3,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        pfi: Δᐃ.gX,
        lfi: Δᐃ.cX,
        bfi: Δᐃ.Z2,
        vfi: Δᐃ.i5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        pfi: Δᐃ.PX,
        lfi: Δᐃ.TX,
        bfi: Δᐃ.D5,
        vfi: Δᐃ.E5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        pfi: Δᐃ.MX,
        lfi: Δᐃ.BX,
        bfi: Δᐃ.u5,
        vfi: Δᐃ.f5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        pfi: Δᐃ.dX,
        lfi: Δᐃ.mX,
        bfi: Δᐃ.t5,
        vfi: Δᐃ.e5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        pfi: Δᐃ.NX,
        lfi: Δᐃ.HX,
        bfi: Δᐃ._5,
        vfi: Δᐃ.F5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        pfi: Δᐃ.UX,
        lfi: Δᐃ.OX,
        bfi: Δᐃ.P5,
        vfi: Δᐃ.T5,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        pfi: Δᐃ.SV,
        lfi: Δᐃ.IV,
        bfi: Δᐃ.w0,
        vfi: Δᐃ.M0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        pfi: Δᐃ.gV,
        lfi: Δᐃ.cV,
        bfi: Δᐃ.i0,
        vfi: Δᐃ.t0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        pfi: Δᐃ.dV,
        lfi: Δᐃ.mV,
        bfi: Δᐃ.e0,
        vfi: Δᐃ.n0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        pfi: Δᐃ.uV,
        lfi: Δᐃ.fV,
        bfi: Δᐃ.a0,
        vfi: Δᐃ.s0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        pfi: Δᐃ.pV,
        lfi: Δᐃ.lV,
        bfi: Δᐃ.r0,
        vfi: Δᐃ.o0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        pfi: Δᐃ.bV,
        lfi: Δᐃ.vV,
        bfi: Δᐃ.h0,
        vfi: Δᐃ.g0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        pfi: Δᐃ.LV,
        lfi: Δᐃ.GV,
        bfi: Δᐃ.Q0,
        vfi: Δᐃ.S0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        pfi: Δᐃ.qV,
        lfi: Δᐃ.WV,
        bfi: Δᐃ.I0,
        vfi: Δᐃ._0,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        pfi: Δᐃ.NZ,
        lfi: Δᐃ.HZ,
        bfi: Δᐃ.T3,
        vfi: Δᐃ.j3,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        pfi: Δᐃ.x$,
        lfi: Δᐃ.Q$,
        bfi: Δᐃ.M9,
        vfi: Δᐃ.B9,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        pfi: Δᐃ.S$,
        lfi: Δᐃ.I$,
        bfi: Δᐃ.D9,
        vfi: Δᐃ.E9,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        pfi: Δᐃ._$,
        lfi: Δᐃ.F$,
        bfi: Δᐃ.C9,
        vfi: Δᐃ.z9,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        pfi: Δᐃ.t1,
        lfi: Δᐃ.e1,
        bfi: Δᐃ.K9,
        vfi: Δᐃ.X9,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        pfi: Δᐃ.m1,
        lfi: Δᐃ.u1,
        bfi: Δᐃ.r4,
        vfi: Δᐃ.o4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        pfi: Δᐃ.f1,
        lfi: Δᐃ.l1,
        bfi: Δᐃ.h4,
        vfi: Δᐃ.g4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        pfi: Δᐃ.h1,
        lfi: Δᐃ.g1,
        bfi: Δᐃ.e4,
        vfi: Δᐃ.n4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        pfi: Δᐃ.D1,
        lfi: Δᐃ.E1,
        bfi: Δᐃ.b4,
        vfi: Δᐃ.v4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        pfi: Δᐃ.R1,
        lfi: Δᐃ.L1,
        bfi: Δᐃ.Q4,
        vfi: Δᐃ.S4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        pfi: Δᐃ.QK,
        lfi: Δᐃ.SK,
        bfi: Δᐃ.b2,
        vfi: Δᐃ.v2,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        pfi: Δᐃ.CV,
        lfi: Δᐃ.zV,
        bfi: Δᐃ.v0,
        vfi: Δᐃ.y0,
        yfi: ᐃΔⲆ.Kn,
        kfi: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        pfi: Δᐃ.IK,
        lfi: Δᐃ._K,
        bfi: Δᐃ.A2,
        vfi: Δᐃ.w2,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        pfi: Δᐃ.RK,
        lfi: Δᐃ.LK,
        bfi: Δᐃ.C2,
        vfi: Δᐃ.z2,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        pfi: Δᐃ.$K,
        lfi: Δᐃ.iX,
        bfi: Δᐃ.W2,
        vfi: Δᐃ.N2,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        pfi: Δᐃ.oX,
        lfi: Δᐃ.hX,
        bfi: Δᐃ.X2,
        vfi: Δᐃ.V2,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        pfi: Δᐃ.uX,
        lfi: Δᐃ.fX,
        bfi: Δᐃ.n5,
        vfi: Δᐃ.a5,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        pfi: Δᐃ.CX,
        lfi: Δᐃ.zX,
        bfi: Δᐃ.b5,
        vfi: Δᐃ.v5,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        pfi: Δᐃ.xX,
        lfi: Δᐃ.QX,
        bfi: Δᐃ.y5,
        vfi: Δᐃ.k5,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        pfi: Δᐃ.xV,
        lfi: Δᐃ.QV,
        bfi: Δᐃ.k0,
        vfi: Δᐃ.A0,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        pfi: Δᐃ.SX,
        lfi: Δᐃ.IX,
        bfi: Δᐃ.A5,
        vfi: Δᐃ.w5,
        yfi: ᐃΔⲆ.Kn,
        kfi: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        pfi: Δᐃ.sV,
        lfi: Δᐃ.rV,
        bfi: Δᐃ.K5,
        vfi: Δᐃ.X5,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        pfi: Δᐃ.oV,
        lfi: Δᐃ.hV,
        bfi: Δᐃ.V5,
        vfi: Δᐃ.Z5,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        pfi: Δᐃ.NV,
        lfi: Δᐃ.HV,
        bfi: Δᐃ.F0,
        vfi: Δᐃ.P0,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        pfi: Δᐃ.UV,
        lfi: Δᐃ.OV,
        bfi: Δᐃ.T0,
        vfi: Δᐃ.j0,
        yfi: ᐃΔⲆ.Kn,
        kfi: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        pfi: Δᐃ.AZ,
        lfi: Δᐃ.wZ,
        bfi: Δᐃ.m3,
        vfi: Δᐃ.u3,
        yfi: ᐃΔⲆ.Kn,
        kfi: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        pfi: Δᐃ.YV,
        lfi: Δᐃ.JV,
        bfi: Δᐃ.R0,
        vfi: Δᐃ.L0,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        pfi: Δᐃ.$Z,
        lfi: Δᐃ.i$,
        bfi: Δᐃ.O3,
        vfi: Δᐃ.Y3,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        pfi: Δᐃ.D$,
        lfi: Δᐃ.E$,
        bfi: Δᐃ.y9,
        vfi: Δᐃ.k9,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        pfi: Δᐃ.C$,
        lfi: Δᐃ.z$,
        bfi: Δᐃ.A9,
        vfi: Δᐃ.w9,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Momo"
      }, {
        id: 95,
        pfi: Δᐃ.PV,
        lfi: Δᐃ.TV,
        bfi: Δᐃ.E0,
        vfi: Δᐃ.C0,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        pfi: Δᐃ.VX,
        lfi: Δᐃ.ZX,
        bfi: Δᐃ.q5,
        vfi: Δᐃ.W5,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        pfi: Δᐃ.aK,
        lfi: Δᐃ.sK,
        bfi: Δᐃ.W1,
        vfi: Δᐃ.N1,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        pfi: Δᐃ.DV,
        lfi: Δᐃ.EV,
        bfi: Δᐃ.l0,
        vfi: Δᐃ.b0,
        yfi: ᐃΔⲆ.Ds,
        kfi: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        pfi: Δᐃ.LZ,
        lfi: Δᐃ.GZ,
        bfi: Δᐃ.I3,
        vfi: Δᐃ._3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        pfi: Δᐃ.EK,
        lfi: Δᐃ.CK,
        bfi: Δᐃ.m2,
        vfi: Δᐃ.u2,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        pfi: Δᐃ.zK,
        lfi: Δᐃ.xK,
        bfi: Δᐃ.f2,
        vfi: Δᐃ.l2,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        pfi: Δᐃ.oZ,
        lfi: Δᐃ.hZ,
        bfi: Δᐃ.Z0,
        vfi: Δᐃ.$0,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        pfi: Δᐃ.jZ,
        lfi: Δᐃ.RZ,
        bfi: Δᐃ.Q3,
        vfi: Δᐃ.S3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        pfi: Δᐃ.YZ,
        lfi: Δᐃ.JZ,
        bfi: Δᐃ.G3,
        vfi: Δᐃ.q3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        pfi: Δᐃ.qZ,
        lfi: Δᐃ.WZ,
        bfi: Δᐃ.F3,
        vfi: Δᐃ.P3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        pfi: Δᐃ.HK,
        lfi: Δᐃ.UK,
        bfi: Δᐃ.F2,
        vfi: Δᐃ.P2,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        pfi: Δᐃ.KZ,
        lfi: Δᐃ.XZ,
        bfi: Δᐃ.W3,
        vfi: Δᐃ.N3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        pfi: Δᐃ.DX,
        lfi: Δᐃ.EX,
        bfi: Δᐃ.p5,
        vfi: Δᐃ.l5,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        pfi: Δᐃ._X,
        lfi: Δᐃ.FX,
        bfi: Δᐃ.M5,
        vfi: Δᐃ.B5,
        yfi: ᐃΔⲆ.Ds,
        kfi: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        pfi: Δᐃ.VZ,
        lfi: Δᐃ.ZZ,
        bfi: Δᐃ.H3,
        vfi: Δᐃ.U3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        pfi: Δᐃ.MV,
        lfi: Δᐃ.BV,
        bfi: Δᐃ.f0,
        vfi: Δᐃ.p0,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        pfi: Δᐃ.pZ,
        lfi: Δᐃ.lZ,
        bfi: Δᐃ.r3,
        vfi: Δᐃ.o3,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        pfi: Δᐃ.ZJ,
        lfi: Δᐃ.$J,
        bfi: Δᐃ.iK,
        vfi: Δᐃ.tK,
        yfi: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        kfi: "eogito",
        name: "Robot"
      }, {
        id: 110,
        pfi: Δᐃ.dZ,
        lfi: Δᐃ.mZ,
        bfi: Δᐃ.e3,
        vfi: Δᐃ.n3,
        yfi: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        kfi: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        pfi: Δᐃ.$$,
        lfi: Δᐃ.i1,
        bfi: Δᐃ.Y9,
        vfi: Δᐃ.J9,
        yfi: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        kfi: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        pfi: Δᐃ.b1,
        lfi: Δᐃ.v1,
        bfi: Δᐃ.c4,
        vfi: Δᐃ.d4,
        yfi: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        kfi: "OmarJr13",
        name: "Blob Skin"
      }],
      ge: [{
        id: 0,
        pfi: Δᐃ.Q_,
        lfi: Δᐃ.S_,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Bag 1"
      }, {
        id: yd,
        pfi: Δᐃ.F4,
        lfi: Δᐃ.P4,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Old Bag"
      }, {
        id: Vn,
        pfi: Δᐃ.W4,
        lfi: Δᐃ.N4,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bag 2"
      }, {
        id: Xg,
        pfi: Δᐃ.H4,
        lfi: Δᐃ.U4,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bag 3"
      }, {
        id: bq,
        pfi: Δᐃ.O4,
        lfi: Δᐃ.Y4,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bag 4"
      }, {
        id: Jd,
        pfi: Δᐃ.J4,
        lfi: Δᐃ.K4,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        pfi: Δᐃ.M7,
        lfi: Δᐃ.B7,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: Rq,
        pfi: Δᐃ.g7,
        lfi: Δᐃ.c7,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        pfi: Δᐃ.K7,
        lfi: Δᐃ.X7,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        pfi: Δᐃ.i6,
        lfi: Δᐃ.t6,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        pfi: Δᐃ.c6,
        lfi: Δᐃ.d6,
        yfi: ᐃΔⲆ.aE,
        kfi: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        pfi: Δᐃ.o7,
        lfi: Δᐃ.h7,
        yfi: ᐃΔⲆ.nE,
        kfi: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        pfi: Δᐃ.xS,
        lfi: Δᐃ.QS,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Easter Bag"
      }, {
        id: dc,
        pfi: Δᐃ.I4,
        lfi: Δᐃ._4,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        pfi: Δᐃ.Z4,
        lfi: Δᐃ.i7,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Winter Bag"
      }, {
        id: jg,
        pfi: Δᐃ.d7,
        lfi: Δᐃ.m7,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        pfi: Δᐃ.D7,
        lfi: Δᐃ.E7,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: Ae,
        pfi: Δᐃ.s7,
        lfi: Δᐃ.r7,
        yfi: ᐃΔⲆ.nE,
        kfi: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        pfi: Δᐃ.V7,
        lfi: Δᐃ.Z7,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        pfi: Δᐃ.Q6,
        lfi: Δᐃ.S6,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        pfi: Δᐃ.G6,
        lfi: Δᐃ.q6,
        yfi: ᐃΔⲆ.nE,
        kfi: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        pfi: Δᐃ.O6,
        lfi: Δᐃ.Y6,
        yfi: ᐃΔⲆ.nE,
        kfi: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: Ph,
        pfi: Δᐃ.t7,
        lfi: Δᐃ.e7,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        pfi: Δᐃ.u7,
        lfi: Δᐃ.f7,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        pfi: Δᐃ.C7,
        lfi: Δᐃ.z7,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        pfi: Δᐃ.L7,
        lfi: Δᐃ.G7,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        pfi: Δᐃ.a6,
        lfi: Δᐃ.s6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        pfi: Δᐃ.l6,
        lfi: Δᐃ.b6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        pfi: Δᐃ.B6,
        lfi: Δᐃ.D6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        pfi: Δᐃ.z6,
        lfi: Δᐃ.x6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        pfi: Δᐃ.R6,
        lfi: Δᐃ.L6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        pfi: Δᐃ.W6,
        lfi: Δᐃ.U6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        pfi: Δᐃ.H6,
        lfi: Δᐃ.N6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        pfi: Δᐃ.X6,
        lfi: Δᐃ.V6,
        yfi: ᐃΔⲆ.Ln,
        kfi: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        pfi: Δᐃ.o8,
        lfi: Δᐃ.h8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Tree Bag"
      }, {
        id: Xo,
        pfi: Δᐃ.T4,
        lfi: Δᐃ.j4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        pfi: Δᐃ.R4,
        lfi: Δᐃ.L4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Bird's nest"
      }, {
        id: Uj,
        pfi: Δᐃ.G4,
        lfi: Δᐃ.q4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        pfi: Δᐃ.X4,
        lfi: Δᐃ.V4,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        pfi: Δᐃ.p7,
        lfi: Δᐃ.l7,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: Ta,
        pfi: Δᐃ.A7,
        lfi: Δᐃ.w7,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        pfi: Δᐃ.x7,
        lfi: Δᐃ.Q7,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        pfi: Δᐃ.e6,
        lfi: Δᐃ.n6,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        pfi: Δᐃ.m6,
        lfi: Δᐃ.u6,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        pfi: Δᐃ.f6,
        lfi: Δᐃ.p6,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        pfi: Δᐃ.E6,
        lfi: Δᐃ.C6,
        yfi: ᐃΔⲆ.Gn,
        kfi: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        pfi: Δᐃ.Z6,
        lfi: Δᐃ.i8,
        yfi: ᐃΔⲆ.Gn,
        kfi: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        pfi: Δᐃ.n8,
        lfi: Δᐃ.a8,
        yfi: ᐃΔⲆ.Gn,
        kfi: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        pfi: Δᐃ.v6,
        lfi: Δᐃ.y6,
        yfi: ᐃΔⲆ.Kn,
        kfi: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        pfi: Δᐃ.b7,
        lfi: Δᐃ.v7,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        pfi: Δᐃ.S7,
        lfi: Δᐃ.I7,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        pfi: Δᐃ.j7,
        lfi: Δᐃ.R7,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        pfi: Δᐃ.q7,
        lfi: Δᐃ.W7,
        yfi: ᐃΔⲆ.Kn,
        kfi: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        pfi: Δᐃ.h6,
        lfi: Δᐃ.g6,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        pfi: Δᐃ.U7,
        lfi: Δᐃ.O7,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        pfi: Δᐃ.w6,
        lfi: Δᐃ.M6,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        pfi: Δᐃ.F6,
        lfi: Δᐃ.P6,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        pfi: Δᐃ.T6,
        lfi: Δᐃ.j6,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        pfi: Δᐃ.t8,
        lfi: Δᐃ.e8,
        yfi: ᐃΔⲆ.Kn,
        kfi: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        pfi: Δᐃ.s8,
        lfi: Δᐃ.r8,
        yfi: ᐃΔⲆ.Kn,
        kfi: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        pfi: Δᐃ.y7,
        lfi: Δᐃ.k7,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        pfi: Δᐃ.n7,
        lfi: Δᐃ.a7,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        pfi: Δᐃ.k6,
        lfi: Δᐃ.A6,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        pfi: Δᐃ.Y7,
        lfi: Δᐃ.J7,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        pfi: Δᐃ.I6,
        lfi: Δᐃ._6,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        pfi: Δᐃ._7,
        lfi: Δᐃ.F7,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        pfi: Δᐃ.P7,
        lfi: Δᐃ.T7,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        pfi: Δᐃ.N7,
        lfi: Δᐃ.H7,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        pfi: Δᐃ.r6,
        lfi: Δᐃ.o6,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        pfi: Δᐃ.J6,
        lfi: Δᐃ.K6,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Engineer Bag"
      }],
      Ar: [{
        id: bd,
        pfi: Δᐃ.Gni,
        lfi: Δᐃ.qni,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: ja,
        pfi: Δᐃ.Rni,
        lfi: Δᐃ.Lni,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "eogito",
        name: "Hidden item"
      }, {
        id: Cs,
        pfi: Δᐃ.zni,
        lfi: Δᐃ.xni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box 1"
      }, {
        id: Xg,
        pfi: Δᐃ.Qni,
        lfi: Δᐃ.Sni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        pfi: Δᐃ.Ini,
        lfi: Δᐃ._ni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box 3"
      }, {
        id: Wg,
        pfi: Δᐃ.Fni,
        lfi: Δᐃ.Pni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: Gg,
        pfi: Δᐃ.Tni,
        lfi: Δᐃ.jni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box"
      }, {
        id: xr,
        pfi: Δᐃ.Wni,
        lfi: Δᐃ.Nni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        pfi: Δᐃ.Hni,
        lfi: Δᐃ.Uni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: uo,
        pfi: Δᐃ.Oni,
        lfi: Δᐃ.Yni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        pfi: Δᐃ.Jni,
        lfi: Δᐃ.Kni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: Fh,
        pfi: Δᐃ.Xni,
        lfi: Δᐃ.Vni,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        pfi: Δᐃ.Xai,
        lfi: Δᐃ.Vai,
        yfi: ᐃΔⲆ.aE,
        kfi: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        pfi: Δᐃ.Zni,
        lfi: Δᐃ.$ni,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: he,
        pfi: Δᐃ.cai,
        lfi: Δᐃ.dai,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        pfi: Δᐃ.mai,
        lfi: Δᐃ.uai,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        pfi: Δᐃ.Qai,
        lfi: Δᐃ.Sai,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        pfi: Δᐃ.usi,
        lfi: Δᐃ.fsi,
        yfi: ᐃΔⲆ.nE,
        kfi: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: eg,
        pfi: Δᐃ.fai,
        lfi: Δᐃ.pai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Beehive"
      }, {
        id: Ph,
        pfi: Δᐃ.iai,
        lfi: Δᐃ.tai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        pfi: Δᐃ.lai,
        lfi: Δᐃ.bai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        pfi: Δᐃ.Bai,
        lfi: Δᐃ.Dai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        pfi: Δᐃ.Iai,
        lfi: Δᐃ._ai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        pfi: Δᐃ.Wai,
        lfi: Δᐃ.Nai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        pfi: Δᐃ.Hai,
        lfi: Δᐃ.Uai,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Communist",
        name: "Glass Crate"
      }, {
        id: ci,
        pfi: Δᐃ.eai,
        lfi: Δᐃ.nai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: an,
        pfi: Δᐃ.hai,
        lfi: Δᐃ.gai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        pfi: Δᐃ.Eai,
        lfi: Δᐃ.Cai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        pfi: Δᐃ.Tai,
        lfi: Δᐃ.jai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        pfi: Δᐃ.Rai,
        lfi: Δᐃ.Lai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        pfi: Δᐃ.Gai,
        lfi: Δᐃ.qai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        pfi: Δᐃ.Oai,
        lfi: Δᐃ.Yai,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        pfi: Δᐃ.asi,
        lfi: Δᐃ.ssi,
        yfi: ᐃΔⲆ.Gn,
        kfi: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        pfi: Δᐃ.vai,
        lfi: Δᐃ.yai,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        pfi: Δᐃ.aai,
        lfi: Δᐃ.sai,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        pfi: Δᐃ.wai,
        lfi: Δᐃ.Mai,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        pfi: Δᐃ.zai,
        lfi: Δᐃ.xai,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        pfi: Δᐃ.isi,
        lfi: Δᐃ.tsi,
        yfi: ᐃΔⲆ.Kn,
        kfi: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        pfi: Δᐃ.esi,
        lfi: Δᐃ.nsi,
        yfi: ᐃΔⲆ.Kn,
        kfi: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        pfi: Δᐃ.Zai,
        lfi: Δᐃ.$ai,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        pfi: Δᐃ.rsi,
        lfi: Δᐃ.osi,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        pfi: Δᐃ.psi,
        lfi: Δᐃ.lsi,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        pfi: Δᐃ.bsi,
        lfi: Δᐃ.vsi,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        pfi: Δᐃ.dsi,
        lfi: Δᐃ.msi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        pfi: Δᐃ.hsi,
        lfi: Δᐃ.gsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        pfi: Δᐃ.rai,
        lfi: Δᐃ.oai,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        pfi: Δᐃ.kai,
        lfi: Δᐃ.Aai,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        pfi: Δᐃ.Fai,
        lfi: Δᐃ.Pai,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        pfi: Δᐃ.Jai,
        lfi: Δᐃ.Kai,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        pfi: Δᐃ.ysi,
        lfi: Δᐃ.ksi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        pfi: Δᐃ.Asi,
        lfi: Δᐃ.wsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        pfi: Δᐃ.Msi,
        lfi: Δᐃ.Bsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        pfi: Δᐃ.Dsi,
        lfi: Δᐃ.Esi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        pfi: Δᐃ.Csi,
        lfi: Δᐃ.zsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        pfi: Δᐃ.xsi,
        lfi: Δᐃ.Qsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        pfi: Δᐃ.Ssi,
        lfi: Δᐃ.Isi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        pfi: Δᐃ._si,
        lfi: Δᐃ.Fsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        pfi: Δᐃ.Psi,
        lfi: Δᐃ.Tsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        pfi: Δᐃ.jsi,
        lfi: Δᐃ.Rsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        pfi: Δᐃ.Lsi,
        lfi: Δᐃ.Gsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        pfi: Δᐃ.qsi,
        lfi: Δᐃ.Wsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        pfi: Δᐃ.Nsi,
        lfi: Δᐃ.Hsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        pfi: Δᐃ.Usi,
        lfi: Δᐃ.Osi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        pfi: Δᐃ.Ysi,
        lfi: Δᐃ.Jsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        pfi: Δᐃ.Ksi,
        lfi: Δᐃ.Xsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        pfi: Δᐃ.Vsi,
        lfi: Δᐃ.Zsi,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        pfi: Δᐃ.$si,
        lfi: Δᐃ.iri,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        pfi: Δᐃ.tri,
        lfi: Δᐃ.eri,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        pfi: Δᐃ.nri,
        lfi: Δᐃ.ari,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        pfi: Δᐃ.sri,
        lfi: Δᐃ.rri,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 70,
        pfi: Δᐃ.ori,
        lfi: Δᐃ.hri,
        yfi: ᐃΔⲆ.Ln,
        kfi: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        pfi: Δᐃ.gri,
        lfi: Δᐃ.cri,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Dragon Box"
      }],
      he: [{
        id: 0,
        pfi: Δᐃ.Hti,
        lfi: Δᐃ.Uti,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Book 1"
      }, {
        id: Ic,
        pfi: Δᐃ.Xti,
        lfi: Δᐃ.Vti,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Book 2"
      }, {
        id: rd,
        pfi: Δᐃ.Zti,
        lfi: Δᐃ.$ti,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Book 3"
      }, {
        id: yr,
        pfi: Δᐃ.iei,
        lfi: Δᐃ.tei,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Book 4"
      }, {
        id: Ld,
        pfi: Δᐃ.eei,
        lfi: Δᐃ.nei,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Damaged Book 1"
      }, {
        id: kq,
        pfi: Δᐃ.Eei,
        lfi: Δᐃ.Cei,
        yfi: ᐃΔⲆ.aE,
        kfi: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: Cd,
        pfi: Δᐃ.Oti,
        lfi: Δᐃ.Yti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Doctorpus",
        name: "Scroll"
      }, {
        id: Qj,
        pfi: Δᐃ.Jti,
        lfi: Δᐃ.Kti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Doctorpus",
        name: "Clipboard"
      }, {
        id: bh,
        pfi: Δᐃ.aei,
        lfi: Δᐃ.sei,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        pfi: Δᐃ.Qei,
        lfi: Δᐃ.Sei,
        yfi: ᐃΔⲆ.nE,
        kfi: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        pfi: Δᐃ.Rei,
        lfi: Δᐃ.Lei,
        yfi: ᐃΔⲆ.nE,
        kfi: "Communist",
        name: "Stone Tablet"
      }, {
        id: ar,
        pfi: Δᐃ.lei,
        lfi: Δᐃ.bei,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Star Book"
      }, {
        id: An,
        pfi: Δᐃ.hei,
        lfi: Δᐃ.gei,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Gold Book"
      }, {
        id: Od,
        pfi: Δᐃ.kei,
        lfi: Δᐃ.Aei,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: j,
        pfi: Δᐃ.Bei,
        lfi: Δᐃ.Dei,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        pfi: Δᐃ.Gei,
        lfi: Δᐃ.qei,
        yfi: ᐃΔⲆ.Ln,
        kfi: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        pfi: Δᐃ.ini,
        lfi: Δᐃ.tni,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        pfi: Δᐃ.fni,
        lfi: Δᐃ.pni,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        pfi: Δᐃ.mni,
        lfi: Δᐃ.uni,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        pfi: Δᐃ.lni,
        lfi: Δᐃ.bni,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        pfi: Δᐃ.cei,
        lfi: Δᐃ.dei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        pfi: Δᐃ.rei,
        lfi: Δᐃ.oei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        pfi: Δᐃ.wei,
        lfi: Δᐃ.Mei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        pfi: Δᐃ.Fei,
        lfi: Δᐃ.Pei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        pfi: Δᐃ.Tei,
        lfi: Δᐃ.jei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        pfi: Δᐃ.Xei,
        lfi: Δᐃ.Vei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        pfi: Δᐃ.Zei,
        lfi: Δᐃ.$ei,
        yfi: ᐃΔⲆ.Gn,
        kfi: "CrysTal",
        name: "Once upon a time"
      }, {
        id: fh,
        pfi: Δᐃ.mei,
        lfi: Δᐃ.uei,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        pfi: Δᐃ.Oei,
        lfi: Δᐃ.Yei,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        pfi: Δᐃ.Jei,
        lfi: Δᐃ.Kei,
        yfi: ᐃΔⲆ.Kn,
        kfi: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        pfi: Δᐃ.Hei,
        lfi: Δᐃ.Uei,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        pfi: Δᐃ.rni,
        lfi: Δᐃ.oni,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        pfi: Δᐃ.hni,
        lfi: Δᐃ.gni,
        yfi: ᐃΔⲆ.Kn,
        kfi: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        pfi: Δᐃ.vni,
        lfi: Δᐃ.yni,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        pfi: Δᐃ.kni,
        lfi: Δᐃ.Ani,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        pfi: Δᐃ.eni,
        lfi: Δᐃ.nni,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        pfi: Δᐃ.ani,
        lfi: Δᐃ.sni,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Autumn Book"
      }, {
        id: pc,
        pfi: Δᐃ.fei,
        lfi: Δᐃ.pei,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Reidite Book"
      }, {
        id: Pg,
        pfi: Δᐃ.vei,
        lfi: Δᐃ.yei,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        pfi: Δᐃ.Wei,
        lfi: Δᐃ.Nei,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        pfi: Δᐃ.zei,
        lfi: Δᐃ.xei,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        pfi: Δᐃ.Iei,
        lfi: Δᐃ._ei,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        pfi: Δᐃ.wni,
        lfi: Δᐃ.Mni,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        pfi: Δᐃ.Bni,
        lfi: Δᐃ.Dni,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        pfi: Δᐃ.Eni,
        lfi: Δᐃ.Cni,
        yfi: ᐃΔⲆ.Ds,
        kfi: "aloner",
        name: "Mystery Book"
      }],
      Ll: [{
        id: Gc,
        pfi: Δᐃ.g8,
        lfi: Δᐃ.g8,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Nothing"
      }, {
        id: ec,
        pfi: Δᐃ.k_,
        lfi: Δᐃ.A_,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: yr,
        pfi: Δᐃ.AS,
        lfi: Δᐃ.wS,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        pfi: Δᐃ.yS,
        lfi: Δᐃ.kS,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Bandage 1"
      }, {
        id: Nr,
        pfi: Δᐃ.MS,
        lfi: Δᐃ.BS,
        yfi: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        kfi: "Starve.io",
        name: "Flower 1"
      }, {
        id: bg,
        pfi: Δᐃ.CS,
        lfi: Δᐃ.zS,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        pfi: Δᐃ.w_,
        lfi: Δᐃ.M_,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Bandage 2"
      }, {
        id: Kr,
        pfi: Δᐃ.l8,
        lfi: Δᐃ.b8,
        yfi: ᐃΔⲆ.aE,
        kfi: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        pfi: Δᐃ.B_,
        lfi: Δᐃ.D_,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        pfi: Δᐃ.aii,
        lfi: Δᐃ.sii,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        pfi: Δᐃ.Eii,
        lfi: Δᐃ.Cii,
        yfi: ᐃΔⲆ.aE,
        kfi: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        pfi: Δᐃ.Wii,
        lfi: Δᐃ.Nii,
        yfi: ᐃΔⲆ.aE,
        kfi: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        pfi: Δᐃ.Hii,
        lfi: Δᐃ.Uii,
        yfi: ᐃΔⲆ.aE,
        kfi: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        pfi: Δᐃ.Oii,
        lfi: Δᐃ.Yii,
        yfi: ᐃΔⲆ.aE,
        kfi: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: mh,
        pfi: Δᐃ.c8,
        lfi: Δᐃ.d8,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Glasses 1"
      }, {
        id: rs,
        pfi: Δᐃ.DS,
        lfi: Δᐃ.ES,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        pfi: Δᐃ.m8,
        lfi: Δᐃ.u8,
        yfi: ᐃΔⲆ.nE,
        kfi: "pizza wa",
        name: "Little Stars"
      }, {
        id: bs,
        pfi: Δᐃ.E_,
        lfi: Δᐃ.C_,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        pfi: Δᐃ.kii,
        lfi: Δᐃ.Aii,
        yfi: ᐃΔⲆ.nE,
        kfi: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        pfi: Δᐃ.Q8,
        lfi: Δᐃ.S8,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Clown nose"
      }, {
        id: xo,
        pfi: Δᐃ.bS,
        lfi: Δᐃ.vS,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        pfi: Δᐃ.U8,
        lfi: Δᐃ.O8,
        yfi: ᐃΔⲆ.nE,
        kfi: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        pfi: Δᐃ.hii,
        lfi: Δᐃ.gii,
        yfi: ᐃΔⲆ.nE,
        kfi: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        pfi: Δᐃ.eti,
        lfi: Δᐃ.nti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        pfi: Δᐃ.ati,
        lfi: Δᐃ.sti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        pfi: Δᐃ.mti,
        lfi: Δᐃ.uti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        pfi: Δᐃ.Iti,
        lfi: Δᐃ._ti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        pfi: Δᐃ.Fti,
        lfi: Δᐃ.Pti,
        yfi: ᐃΔⲆ.nE,
        kfi: "Ant",
        name: "Hero Mask"
      }, {
        id: 15,
        pfi: Δᐃ.v8,
        lfi: Δᐃ.y8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        pfi: Δᐃ.E8,
        lfi: Δᐃ.C8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        pfi: Δᐃ.I8,
        lfi: Δᐃ._8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        pfi: Δᐃ.z8,
        lfi: Δᐃ.x8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Little Glasses"
      }, {
        id: Iq,
        pfi: Δᐃ.f8,
        lfi: Δᐃ.p8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        pfi: Δᐃ.N8,
        lfi: Δᐃ.H8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Horns"
      }, {
        id: 31,
        pfi: Δᐃ.Y8,
        lfi: Δᐃ.J8,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        pfi: Δᐃ.mii,
        lfi: Δᐃ.uii,
        yfi: ᐃΔⲆ.Ln,
        kfi: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        pfi: Δᐃ.Iii,
        lfi: Δᐃ._ii,
        yfi: ᐃΔⲆ.Ln,
        kfi: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        pfi: Δᐃ.Bii,
        lfi: Δᐃ.Dii,
        yfi: ᐃΔⲆ.Ln,
        kfi: "eogito",
        name: "Rose"
      }, {
        id: 91,
        pfi: Δᐃ.Rti,
        lfi: Δᐃ.Lti,
        yfi: ᐃΔⲆ.Ln,
        kfi: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        pfi: Δᐃ.Gti,
        lfi: Δᐃ.qti,
        yfi: ᐃΔⲆ.Ln,
        kfi: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        pfi: Δᐃ.Wti,
        lfi: Δᐃ.Nti,
        yfi: ᐃΔⲆ.Ln,
        kfi: "upfiz",
        name: "Skull Mask"
      }, {
        id: 9,
        pfi: Δᐃ.pS,
        lfi: Δᐃ.lS,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        pfi: Δᐃ.F8,
        lfi: Δᐃ.P8,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        pfi: Δᐃ.z_,
        lfi: Δᐃ.x_,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: Aq,
        pfi: Δᐃ.w8,
        lfi: Δᐃ.M8,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        pfi: Δᐃ.q8,
        lfi: Δᐃ.W8,
        yfi: ᐃΔⲆ.Gn,
        kfi: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        pfi: Δᐃ.rii,
        lfi: Δᐃ.oii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Berry"
      }, {
        id: 39,
        pfi: Δᐃ.cii,
        lfi: Δᐃ.dii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Flake"
      }, {
        id: 43,
        pfi: Δᐃ.vii,
        lfi: Δᐃ.yii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        pfi: Δᐃ.Qii,
        lfi: Δᐃ.Sii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        pfi: Δᐃ.Fii,
        lfi: Δᐃ.Pii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        pfi: Δᐃ.Rii,
        lfi: Δᐃ.Lii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        pfi: Δᐃ.Gii,
        lfi: Δᐃ.qii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        pfi: Δᐃ.Jii,
        lfi: Δᐃ.Kii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        pfi: Δᐃ.Xii,
        lfi: Δᐃ.Vii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        pfi: Δᐃ.Zii,
        lfi: Δᐃ.$ii,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        pfi: Δᐃ.iti,
        lfi: Δᐃ.tti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        pfi: Δᐃ.rti,
        lfi: Δᐃ.oti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        pfi: Δᐃ.hti,
        lfi: Δᐃ.gti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        pfi: Δᐃ.cti,
        lfi: Δᐃ.dti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        pfi: Δᐃ.fti,
        lfi: Δᐃ.pti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        pfi: Δᐃ.lti,
        lfi: Δᐃ.bti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        pfi: Δᐃ.vti,
        lfi: Δᐃ.yti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        pfi: Δᐃ.kti,
        lfi: Δᐃ.Ati,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        pfi: Δᐃ.wti,
        lfi: Δᐃ.Mti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        pfi: Δᐃ.Tti,
        lfi: Δᐃ.jti,
        yfi: ᐃΔⲆ.Gn,
        kfi: "aloner",
        name: "Blood"
      }, {
        id: 27,
        pfi: Δᐃ.L8,
        lfi: Δᐃ.G8,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        pfi: Δᐃ.B8,
        lfi: Δᐃ.D8,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        pfi: Δᐃ.K8,
        lfi: Δᐃ.X8,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        pfi: Δᐃ.V8,
        lfi: Δᐃ.Z8,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        pfi: Δᐃ.iii,
        lfi: Δᐃ.tii,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        pfi: Δᐃ.fii,
        lfi: Δᐃ.pii,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        pfi: Δᐃ.lii,
        lfi: Δᐃ.bii,
        yfi: ᐃΔⲆ.Kn,
        kfi: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        pfi: Δᐃ.Bti,
        lfi: Δᐃ.Dti,
        yfi: ᐃΔⲆ.Kn,
        kfi: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 60,
        pfi: Δᐃ.zii,
        lfi: Δᐃ.xii,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        pfi: Δᐃ.T8,
        lfi: Δᐃ.j8,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Devil Horns"
      }, {
        id: Ah,
        pfi: Δᐃ.k8,
        lfi: Δᐃ.A8,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        pfi: Δᐃ.eii,
        lfi: Δᐃ.nii,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        pfi: Δᐃ.Tii,
        lfi: Δᐃ.jii,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        pfi: Δᐃ.wii,
        lfi: Δᐃ.Mii,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        pfi: Δᐃ.Eti,
        lfi: Δᐃ.Cti,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        pfi: Δᐃ.zti,
        lfi: Δᐃ.xti,
        yfi: ᐃΔⲆ.Ds,
        kfi: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        pfi: Δᐃ.Qti,
        lfi: Δᐃ.Sti,
        yfi: ᐃΔⲆ.Ds,
        kfi: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        pfi: Δᐃ.mJ,
        lfi: Δᐃ.uJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        pfi: Δᐃ.fJ,
        lfi: Δᐃ.pJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        pfi: Δᐃ.lJ,
        lfi: Δᐃ.bJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        pfi: Δᐃ.vJ,
        lfi: Δᐃ.yJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 20",
        level: xc
      }, {
        id: 49,
        pfi: Δᐃ.kJ,
        lfi: Δᐃ.AJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        pfi: Δᐃ.wJ,
        lfi: Δᐃ.MJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        pfi: Δᐃ.BJ,
        lfi: Δᐃ.DJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        pfi: Δᐃ.EJ,
        lfi: Δᐃ.CJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        pfi: Δᐃ.zJ,
        lfi: Δᐃ.xJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        pfi: Δᐃ.QJ,
        lfi: Δᐃ.SJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        pfi: Δᐃ.IJ,
        lfi: Δᐃ._J,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        pfi: Δᐃ.FJ,
        lfi: Δᐃ.PJ,
        yfi: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        kfi: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    iw.Afi = ΔⵠΔⵠᐃᐃⵠ(ⲆⲆⵠⲆ.ffi, 21);
    iw.wfi = ΔⵠΔⵠᐃᐃⵠ(ⲆⲆⵠⲆ.ffi, Hg);
    ΔΔ[rt.Er] = [];
    ΔΔ[rt.qt] = [];
    ΔΔ[rt.Ar] = [];
    ΔΔ[rt.he] = [];
    ΔΔ[rt.ge] = [];
    ΔΔ[rt.Ll] = [];
    for (var a = Jj; a < ⲆⲆⵠⲆ.ffi.length; a++) {
      ΔΔ[rt.Er][a] = [ⲆⲆⵠⲆ.ffi[a].pfi, ⲆⲆⵠⲆ.ffi[a].lfi];
      ΔΔ[rt.qt][a] = [ⲆⲆⵠⲆ.ffi[a].bfi, ⲆⲆⵠⲆ.ffi[a].vfi];
    }
    for (a = 0; a < ⲆⲆⵠⲆ.he.length; a++) {
      ΔΔ[rt.he][a] = [ⲆⲆⵠⲆ.he[a].pfi, ⲆⲆⵠⲆ.he[a].lfi];
    }
    for (a = sh; a < ⲆⲆⵠⲆ.Ar.length; a++) {
      ΔΔ[rt.Ar][a] = [ⲆⲆⵠⲆ.Ar[a].pfi, ⲆⲆⵠⲆ.Ar[a].lfi];
    }
    for (a = bd; a < ⲆⲆⵠⲆ.ge.length; a++) {
      ΔΔ[rt.ge][a] = [ⲆⲆⵠⲆ.ge[a].pfi, ⲆⲆⵠⲆ.ge[a].lfi];
    }
    for (a = Ng; a < ⲆⲆⵠⲆ.Ll.length; a++) {
      ΔΔ[rt.Ll][a] = [ⲆⲆⵠⲆ.Ll[a].pfi, ⲆⲆⵠⲆ.Ll[a].lfi];
    }
  };
  const tm = z;
  function em(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function nm(b, c, d, e, f, a) {
    if (e < lr * a) {
      a = e / ih;
    }
    if (f < Te * a) {
      a = f / yo;
    }
    if (a < Gc) {
      a = nj;
    }
    b.beginPath();
    b.moveTo(c + a, d);
    b.arcTo(c + e, d, c + e, d + f, a);
    b.arcTo(c + e, d + f, c, d + f, a);
    b.arcTo(c, d + f, c, d, a);
    b.arcTo(c, d, c + e, d, a);
    b.closePath();
  }
  const am = q;
  const sm = dc;
  function rm(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, Oq, wh * Math.PI);
  }
  const om = Pj;
  function hm(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.sqrt(c.width * c.width + c.height * c.height);
    d2 = f / 2;
    d.width = f;
    d.height = f;
    e.translate(d2, d2);
    e.rotate(b);
    e.drawImage(c, -c.width / 2, -c.height / wc);
    return d;
  }
  function gm(b, c, d, e, f) {
    b.beginPath();
    b.lineCap = "round";
    b.arc(c, d, e, 0, f * (Math.PI * z));
  }
  function cm(b, c, d, e) {
    var f = Cs * Math.PI / c;
    b.beginPath();
    var a = [{
      x: d,
      y: Ea
    }];
    var i = [];
    for (var j = X; c > j; j++) {
      a.push({
        x: d * Math.sin(j * f),
        y: d * Math.cos(j * f)
      });
      var k = a.length;
      i.push(ⵠⵠⵠⲆ.U(a[k - Gi], a[k - lt]));
    }
    i.push(ⵠⵠⵠⲆ.U(a[a.length - fo], a[0]));
    var l = i[i.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; j < c; j++) {
      b.arcTo(a[j].x, a[j].y, i[j].x, i[j].y, e);
    }
    b.closePath();
  }
  const dm = fo;
  const mm = hg;
  function um(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var a = Math.floor(b * 20);
    e.font = a + "px Baloo Paaji";
    var g = b * q;
    var h = e.measureText(c).width + g * 2;
    d.width = h;
    d.height = f;
    nm(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    em(e, "#000");
    e.globalAlpha = fo;
    e.textBaseline = "middle";
    e.font = a + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = lj[ih];
    e.fillText(c, g, f / 2);
    return d;
  }
  const fm = hd;
  function pm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 248;
    e.height = b * 247;
    f.save();
    f.translate(b * 183, b * 107);
    nm(f, b * -8, b * -70.5, b * _r, b * 141, b * Lh);
    f.restore();
    em(f, d[Ka]);
    f.save();
    f.translate(b * 69.5, b * 110);
    nm(f, b * -8.5, b * -71, b * $h, b * 143, b * X);
    f.restore();
    em(f, d[Vd]);
    f.save();
    f.translate(b * 123.5, b * 181);
    nm(f, b * -84.5, b * -26, b * 169, b * 52, b * Gj);
    f.restore();
    em(f, d[2], d[1], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41, b * 95);
    f.bezierCurveTo(b * 105, b * 96, b * 113, b * 99, b * 134, b * 102);
    f.bezierCurveTo(b * 147, b * 106, b * 173, b * 100, b * 207, b * 105);
    f.bezierCurveTo(b * 210, b * 105, b * 207, b * 140, b * 207, b * 154);
    f.bezierCurveTo(b * 123.5, b * 151.5, b * 123.5, b * 151.5, b * 40, b * 149);
    f.bezierCurveTo(b * 37, b * 145, b * 39, b * 95, b * 41, b * 96);
    f.closePath();
    em(f, d[ih], d[wg], hn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 68, b * 75);
    f.bezierCurveTo(b * 54, b * 72.5, b * 54, b * 72.5, b * 40, b * 70);
    f.bezierCurveTo(b * 38, b * 46, b * 40, b * 46, b * 53, b * 46);
    f.bezierCurveTo(b * 201, b * 41, b * 201, b * 41, b * 201, b * 42);
    f.bezierCurveTo(b * 211, b * 40, b * 208, b * 53, b * 208, b * 72);
    f.bezierCurveTo(b * 209, b * 91, b * 210, b * 96, b * 194, b * 94);
    f.bezierCurveTo(b * 119, b * 97, b * 119, b * 97, b * 44, b * 100);
    f.bezierCurveTo(b * 39, b * 99, b * 40, b * 96, b * 40, b * 80);
    f.bezierCurveTo(b * 54, b * 77.5, b * 54, b * 77.5, b * 68, b * 75);
    f.closePath();
    em(f, d[3], d[1], b * mc);
    return e;
  }
  function lm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 264;
    e.height = b * 246;
    f.translate(Vd, b * jc);
    f.globalAlpha = c ? 0.5 : Lo;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 75, b * 54);
    f.bezierCurveTo(b * 79, b * 21, b * 131, L * b, b * 153, b * 36);
    f.bezierCurveTo(b * 204, b * 27, b * 221, b * 52, b * 216, b * 83);
    f.bezierCurveTo(b * 241, b * 103, b * 232, b * 138, b * 214, b * 147);
    f.bezierCurveTo(b * 223, b * 184, b * 201, b * 200, b * 175, b * 199);
    f.bezierCurveTo(b * 156, b * 218, b * 135, b * 222, b * 114, b * 203);
    f.bezierCurveTo(b * 62, b * 213, b * 66, b * 189, b * 59, b * 170);
    f.bezierCurveTo(b * 27, b * 164, b * 31, b * 134, b * 38, b * 123);
    f.bezierCurveTo(ta * b, b * 80, b * 51, b * 52, b * 75, b * 54);
    f.closePath();
    em(f, d[0]);
    f.translate(0, b * -10);
    f.globalAlpha = Mc;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 75, b * 54);
    f.bezierCurveTo(b * 79, b * 21, b * 131, Dg * b, b * 153, b * 36);
    f.bezierCurveTo(b * 204, b * 27, b * 221, b * 52, b * 216, b * 83);
    f.bezierCurveTo(b * 241, b * 103, b * 232, b * 138, b * 214, b * 147);
    f.bezierCurveTo(b * 223, b * 184, b * 201, b * 200, b * 175, b * 199);
    f.bezierCurveTo(b * 156, b * 218, b * 135, b * 222, b * 114, b * 203);
    f.bezierCurveTo(b * 62, b * 213, b * 66, b * 189, b * 59, b * 170);
    f.bezierCurveTo(b * 27, b * 164, b * 31, b * 134, b * 38, b * 123);
    f.bezierCurveTo(b * zo, b * 80, b * 51, b * 52, b * 75, b * 54);
    f.closePath();
    em(f, d[1], d[2], Yd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 121, b * 102);
    f.bezierCurveTo(b * 111, b * 80, b * 110, b * 66, b * 108, b * 51);
    f.bezierCurveTo(b * 119, b * 65, b * 129, b * 85, b * 135, b * 99);
    f.bezierCurveTo(b * 142, b * 67, b * 146, b * 60, b * 152, b * 50);
    f.bezierCurveTo(b * 154, b * 71, b * 152, b * 85, b * 149, b * 104);
    f.bezierCurveTo(b * 166, b * 88, b * 175, b * 83, b * 188, b * 78);
    f.bezierCurveTo(b * 179, b * 91, b * 170, b * 103, b * 160, b * 112);
    f.bezierCurveTo(b * 186, b * 107, b * 191, b * 107, b * 204, b * 108);
    f.bezierCurveTo(b * 195, b * 114, b * 179, b * 120, b * 163, b * 123);
    f.bezierCurveTo(b * 183, b * 130, b * 186, b * 135, b * 192, b * 140);
    f.bezierCurveTo(b * 179, b * 141, b * 164, b * 139, b * 153, b * 135);
    f.bezierCurveTo(b * 158, b * 145, b * 163, b * 159, b * 165, b * 177);
    f.bezierCurveTo(b * 154, b * 166, b * 145, b * 153, b * 138, b * 139);
    f.bezierCurveTo(b * 133, b * 155, b * 125, b * 170, b * 117, b * 182);
    f.bezierCurveTo(b * 116, b * 160, b * 119, b * 151, b * 124, b * 138);
    f.bezierCurveTo(b * 107, b * 150, b * 95, b * 156, b * 82, b * 159);
    f.bezierCurveTo(b * 94, b * 140, b * 101, b * 136, b * 113, b * 128);
    f.bezierCurveTo(b * 78, b * 123, b * 75, b * 121, b * 67, b * 118);
    f.bezierCurveTo(b * 85, b * 112, b * 94, b * 112, b * 111, b * 113);
    f.bezierCurveTo(b * 89, b * 97, b * 85, b * 93, b * 78, b * 82);
    f.bezierCurveTo(b * 92, b * 85, b * 101, b * 90, b * 121, b * 102);
    f.closePath();
    em(f, d[mj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 128, b * 103);
    f.bezierCurveTo(b * 111, b * 112, b * 117, b * 136, b * 140, b * 130);
    f.bezierCurveTo(b * 151, b * 126, b * 156, b * 115, b * 155, b * 107);
    f.bezierCurveTo(b * 155, b * 96, b * 154, b * 94, b * 148, b * 94);
    f.bezierCurveTo(b * 141, b * 94, b * 146, b * 104, b * 136, b * 104);
    f.closePath();
    em(f, d[Sr], d[_g], Ha * b);
    return e;
  }
  function bm(b, f) {
    var i = document.createElement("canvas");
    var e = i.getContext("2d");
    var j = b * 120;
    var a = b * 110;
    var k = j / Te;
    var l = a / Te;
    var n = b * 20;
    var h = b * 112;
    var g = b * 82;
    var c = h / 2;
    var d = g / Cg;
    var m = b * Jn;
    i.width = j;
    i.height = a;
    e.globalAlpha = Ic;
    e.translate(k, l);
    nm(e, -c, -d, h, g, n);
    em(e, f, f, m);
    return i;
  }
  function vm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 22;
    e.height = b * 22;
    f.globalAlpha = 0.4;
    rm(f, b * 11, b * 11, b * 10);
    em(f, d[Jj]);
    f.globalAlpha = 0.7;
    rm(f, b * 11, b * 11, b * Mj);
    em(f, d[Jj]);
    f.globalAlpha = fn;
    rm(f, b * Cc, Fh * b, b * 4);
    em(f, d[sh]);
    return e;
  }
  function ym(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 248;
    e.height = b * 247;
    f.save();
    f.translate(b * 182, b * 120);
    nm(f, -Ca * b, b * -67, b * rh, b * 134, b * Ps);
    f.restore();
    em(f, d[sh]);
    f.save();
    f.translate(b * 68.5, b * 127.5);
    nm(f, b * -8.5, b * -70.5, mh * b, b * 141, b * 1);
    f.restore();
    em(f, d[Ka]);
    f.save();
    f.translate(b * 123.5, b * 68);
    nm(f, b * -82.5, b * -24, b * 165, b * 48, b * 4);
    f.restore();
    em(f, d[wc], d[1], Fa * b);
    f.save();
    f.translate(b * 123, b * 179.5);
    nm(f, b * -83, b * -24.5, b * 166, b * 49, b * Ha);
    f.restore();
    em(f, d[Cg], d[lt], b * 6);
    f.save();
    f.translate(b * 123.5, b * 123.5);
    f.rotate(6.24);
    nm(f, b * -82.5, b * -24.5, b * 165, b * 49, b * 4);
    f.restore();
    em(f, d[3], d[fn], Th * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 204, b * 112);
    f.bezierCurveTo(b * 149, b * 121.5, b * 96, b * 130, b * 94, b * 131);
    f.bezierCurveTo(b * 149.5, b * 127.5, b * 149.5, b * 127.5, b * 205, b * 124);
    f.closePath();
    em(f, d[1]);
    return e;
  }
  function km(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 248;
    e.height = b * 247;
    f.save();
    f.translate(b * 69.5, b * 145);
    nm(f, b * -8.5, b * -63, b * 17, b * 127, b * Mc);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 183, b * 145);
    nm(f, b * -Ca, b * -63, b * 16, b * 126, b * 1);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 123.5, b * 62.5);
    f.rotate(6.28);
    nm(f, b * -84.5, b * -25.5, b * 169, b * 51, b * 5);
    f.restore();
    em(f, d[2], d[wg], kr * b);
    f.save();
    f.translate(b * 123.5, b * 118);
    f.rotate(6.24);
    nm(f, b * -85.5, b * -24, b * 169, b * 48, b * Gj);
    f.restore();
    em(f, d[pg], d[1], b * 6);
    f.save();
    f.translate(b * 122, b * 177.5);
    f.rotate(6.32);
    nm(f, b * -84, b * -23.5, b * 169, b * 47, b * 5);
    f.restore();
    em(f, d[2], d[Mc], Th * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 37, b * 157);
    f.bezierCurveTo(b * 49, b * 160, b * 49, b * 160, b * 61, b * 163);
    f.bezierCurveTo(b * 49.5, b * 165.5, b * 49.5, b * 165.5, b * 38, b * 168);
    f.closePath();
    em(f, d[ae]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 205, b * 175);
    f.bezierCurveTo(b * 192.5, b * 180, b * 192.5, b * 180, b * 180, b * 185);
    f.bezierCurveTo(b * 193, b * 188, b * 193, b * 188, b * 206, b * 191);
    f.closePath();
    em(f, d[1]);
    return e;
  }
  function Am(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 70;
    e.height = b * 70;
    f.globalAlpha = 0.5;
    rm(f, b * 26, b * 26, b * Mg);
    em(f, d[0]);
    rm(f, b * 56, b * 36, Qo * b);
    em(f, d[1]);
    rm(f, b * 40, b * 50, b * bc);
    em(f, d[ec]);
    f.globalAlpha = ja;
    rm(f, b * 26, b * 26, Me * b);
    em(f, d[0]);
    rm(f, b * 56, b * 36, b * 5);
    em(f, d[fi]);
    rm(f, b * 40, b * 50, Wg * b);
    em(f, d[Gi]);
    return e;
  }
  const wm = hd;
  function Mm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    nm(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    em(d, b[0], b[0], a * 4);
    d.translate(a * mj, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, za * a);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * Gr, a * 74, Be * a, a * 78, a * Po, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * rh, a * 42);
    d.bezierCurveTo(a * Bh, a * 39, a * 14, a * 39, Dh * a, a * 36);
    d.bezierCurveTo(fe * a, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, Qs * a, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, Ja * a);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    em(d, b[bd], b[so], a * cn);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    nm(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    em(d, b[Ka], b[xn], _g * a);
    return c;
  }
  function Bm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 191;
    e.height = b * 153;
    f.globalAlpha = 0.5;
    f.translate(0, jn * b);
    f.save();
    f.translate(b * 96.49996948242188, b * 66.79510498046875);
    f.rotate(Ka);
    nm(f, b * -79.5, b * -48.5, b * 159, b * 97, b * 22);
    f.restore();
    em(f, d[sh], d[0], b * 4);
    f.globalAlpha = 1;
    f.translate(Ka, b * -10);
    f.save();
    f.translate(b * 96.49996948242188, b * 66.79510498046875);
    f.rotate(0);
    nm(f, b * -79.5, b * -48.5, b * 159, b * 97, b * 22);
    f.restore();
    em(f, d[1], d[ih], b * 4);
    f.translate(b * yo, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 119, b * 28);
    f.bezierCurveTo(b * 119, b * 22, b * 119, b * 20, b * 122, Tr * b);
    f.bezierCurveTo(b * 149, b * 39, b * 149, b * 39, b * 176, b * 63);
    f.bezierCurveTo(b * 176, b * 75, b * 176, b * 75, b * 175, b * 88);
    f.bezierCurveTo(b * 174, b * 90, b * 174, b * 90, b * 172, b * 93);
    f.bezierCurveTo(b * 171, b * 101, b * 169, b * 109, b * 164, b * 113);
    f.bezierCurveTo(b * 163, b * 104, b * 163, b * 104, b * 162, b * 95);
    f.bezierCurveTo(b * 155, b * 105, b * 155, b * 105, b * 147, b * 116);
    f.bezierCurveTo(b * 87, b * 114, b * 87, b * 114, b * 26, b * 112);
    f.bezierCurveTo(b * 27, b * 106, b * 27, b * 106, b * 27, b * 101);
    f.bezierCurveTo(b * 24, b * 104, b * 24, b * 104, b * 20, b * 108);
    f.bezierCurveTo(b * 17, b * 103, b * 20, b * 86, b * 23, b * 72);
    f.bezierCurveTo(tg * b, b * 74, b * 14, b * 78, b * 12, b * 83);
    f.bezierCurveTo(b * 12, b * 65, b * m, b * 54, b * 16, b * 42);
    f.bezierCurveTo(Xc * b, b * 39, Ag * b, b * 39, b * dg, b * 36);
    f.bezierCurveTo(b * 16, b * 33, b * Oo, b * 33, b * 19, b * 30);
    f.bezierCurveTo(an * b, b * 27, b * 18, b * 27, ce * b, b * 25);
    f.bezierCurveTo(b * 24, b * 24, b * 31, b * 21, b * 29, b * 19);
    f.bezierCurveTo(b * 37, b * 25, b * 37, b * 25, b * 45, b * 31);
    f.bezierCurveTo(b * 40, b * 23, b * 40, b * 21, b * 42, b * 16);
    f.bezierCurveTo(b * 74, b * 16, b * 74, b * Oo, b * 106, gc * b);
    f.bezierCurveTo(b * 113, b * 21, b * 113, b * 21, b * 119, b * 26);
    f.closePath();
    em(f, d[Sn], d[4], cn * b);
    return e;
  }
  function Dm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 191;
    e.height = b * 153;
    f.globalAlpha = 0.5;
    f.translate(0, ic * b);
    f.save();
    f.translate(b * 97.49996948242188, b * 95.12844848632812);
    nm(f, b * -62.5, b * -41.5, b * 125, b * 83, b * Ji);
    f.restore();
    em(f, d[so], d[0], b * 4);
    f.globalAlpha = yd;
    f.translate(0, b * -10);
    f.save();
    f.translate(b * 97.49996948242188, b * 95.12844848632812);
    nm(f, b * -62.5, b * -41.5, b * 125, b * 83, b * 20);
    f.restore();
    em(f, d[Ic], d[z], b * cn);
    f.globalCompositeOperation = "destination-out";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 26.999969482421875, b * 50.850677490234375);
    f.bezierCurveTo(b * 46.499969482421875, b * 64.85067749023438, b * 46.499969482421875, b * 64.85067749023438, b * 65.99996948242188, b * 78.85067749023438);
    f.bezierCurveTo(b * 80.99996948242188, b * 87.85067749023438, b * 105.99996948242188, b * 82.85067749023438, b * 114.99996948242188, b * 80.85067749023438);
    f.bezierCurveTo(b * 130.99996948242188, b * 69.85067749023438, b * 152.99996948242188, b * 70.85067749023438, b * 166.99996948242188, b * 67.85067749023438);
    f.bezierCurveTo(b * 156.99996948242188, b * 52.850677490234375, b * 156.99996948242188, b * 52.850677490234375, b * 146.99996948242188, b * 37.850677490234375);
    f.bezierCurveTo(b * 101.49996948242188, b * 37.350677490234375, b * 101.49996948242188, b * 37.350677490234375, b * 55.999969482421875, b * 36.850677490234375);
    f.closePath();
    em(f, d[2], d[xa], b * 4);
    f.globalCompositeOperation = "source-over";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 40.999969482421875, b * 59.850677490234375);
    f.bezierCurveTo(b * 41.999969482421875, b * 50.850677490234375, b * 47.999969482421875, b * 47.850677490234375, b * 56.999969482421875, b * 49.850677490234375);
    f.bezierCurveTo(b * 65.99996948242188, b * 41.850677490234375, b * 76.99996948242188, b * 42.850677490234375, b * 90.99996948242188, b * 47.850677490234375);
    f.bezierCurveTo(b * 94.99996948242188, b * 42.850677490234375, b * 104.99996948242188, b * 42.850677490234375, b * 114.99996948242188, b * 47.850677490234375);
    f.bezierCurveTo(b * 131.99996948242188, b * 42.850677490234375, b * 142.99996948242188, b * 48.850677490234375, b * 145.99996948242188, b * 56.850677490234375);
    f.bezierCurveTo(b * 160.99996948242188, b * 63.850677490234375, b * 154.99996948242188, b * 69.85067749023438, b * 155.99996948242188, b * 70.85067749023438);
    f.bezierCurveTo(b * 141.99996948242188, b * 71.85067749023438, b * 141.99996948242188, b * 71.85067749023438, b * 127.99996948242188, b * 72.85067749023438);
    f.bezierCurveTo(b * 110.99996948242188, b * 83.85067749023438, b * 107.99996948242188, b * 82.85067749023438, b * 90.99996948242188, b * 85.85067749023438);
    f.bezierCurveTo(b * 70.99996948242188, b * 83.85067749023438, b * 64.99996948242188, b * 79.85067749023438, b * 53.999969482421875, b * 70.85067749023438);
    f.closePath();
    em(f, d[3], d[4], b * Jn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.999969482421875, b * 65.85067749023438);
    f.bezierCurveTo(b * 36.999969482421875, b * 59.850677490234375, b * 34.999969482421875, b * 60.850677490234375, b * 39.999969482421875, b * 59.850677490234375);
    f.bezierCurveTo(b * 47.999969482421875, b * 61.850677490234375, b * 62.999969482421875, b * 76.85067749023438, b * 74.99996948242188, b * 79.85067749023438);
    f.bezierCurveTo(b * 93.99996948242188, b * 85.85067749023438, b * 111.99996948242188, b * 83.85067749023438, b * 124.99996948242188, b * 70.85067749023438);
    f.bezierCurveTo(b * 129.99996948242188, b * 67.85067749023438, b * 145.99996948242188, b * 65.85067749023438, b * 159.99996948242188, b * 67.85067749023438);
    f.bezierCurveTo(b * 159.99996948242188, b * 71.85067749023438, b * 159.99996948242188, b * 71.85067749023438, b * 159.99996948242188, b * 75.85067749023438);
    f.bezierCurveTo(b * 146.99996948242188, b * 72.85067749023438, b * 144.99996948242188, b * 75.85067749023438, b * 143.99996948242188, b * 82.85067749023438);
    f.bezierCurveTo(b * 144.99996948242188, b * 86.85067749023438, b * 140.99996948242188, b * 90.85067749023438, b * 137.99996948242188, b * 86.85067749023438);
    f.bezierCurveTo(b * 139.99996948242188, b * 72.85067749023438, b * 135.99996948242188, b * 72.85067749023438, b * 133.99996948242188, b * 82.85067749023438);
    f.bezierCurveTo(b * 127.99996948242188, b * 88.85067749023438, b * 124.99996948242188, b * 70.85067749023438, b * 116.99996948242188, b * 86.85067749023438);
    f.bezierCurveTo(b * 110.99996948242188, b * 91.85067749023438, b * 96.99996948242188, b * 81.85067749023438, b * 89.99996948242188, b * 90.85067749023438);
    f.bezierCurveTo(b * 85.99996948242188, b * 92.85067749023438, b * 81.99996948242188, b * 95.85067749023438, b * 76.99996948242188, b * 86.85067749023438);
    f.bezierCurveTo(b * 67.99996948242188, b * 93.85067749023438, b * 67.99996948242188, b * 91.85067749023438, b * 60.999969482421875, b * 79.85067749023438);
    f.bezierCurveTo(b * 53.999969482421875, b * 71.85067749023438, b * 52.999969482421875, b * 72.85067749023438, b * 46.999969482421875, b * 77.85067749023438);
    f.bezierCurveTo(b * 41.999969482421875, b * 78.85067749023438, b * 42.999969482421875, b * 69.85067749023438, b * 33.999969482421875, b * 65.85067749023438);
    f.closePath();
    em(f, d[bg], d[Ae], b * Gs);
    rm(f, b * 68, b * 111.29513549804688, uh * b);
    em(f, d[7], d[An], b * 4);
    rm(f, b * 123, b * 111.29510498046875, b * 15);
    em(f, d[Pj], d[th], b * pj);
    rm(f, b * 63, b * 106, b * 5);
    em(f, d[dc]);
    rm(f, b * 118, b * 106, aq * b);
    em(f, d[sm]);
    return e;
  }
  function Em(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 40;
    var i = b * 40;
    e.width = a;
    e.height = i;
    var j = b * a / Te;
    var k = b * i / mj;
    var l = nd * b;
    f.save();
    f.translate(j, k);
    f.globalAlpha = Ps;
    rm(f, 0, Sh, l);
    em(f, d[Ka]);
    l = yh * b;
    j = b * Tg;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = lt;
    rm(f, 0, 0, l);
    em(f, d[Mc]);
    f.restore();
    return e;
  }
  const Cm = xn;
  function zm(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    a.globalAlpha = 0.5;
    a.translate(0, b * 10);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 44, b * 137);
    a.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    a.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    a.closePath();
    em(a, d[0]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 53, b * 181);
    a.bezierCurveTo(b * 30, b * 164, b * tc, b * 150, b * 11, b * 136);
    a.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    a.closePath();
    em(a, d[Js]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 63, b * 208);
    a.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    a.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    a.closePath();
    em(a, d[Jj]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 130, b * 170);
    a.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    a.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    a.closePath();
    em(a, d[bd]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 39, b * 140);
    a.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    a.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    a.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    a.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    a.closePath();
    em(a, d[0]);
    a.globalAlpha = fn;
    a.translate(0, b * -10);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 44, b * 137);
    a.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    a.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    a.closePath();
    em(a, d[fn], d[2], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 53, b * 181);
    a.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    a.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    a.closePath();
    em(a, d[1], d[2], b * mn);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 63, b * 208);
    a.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    a.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    a.closePath();
    em(a, d[Ej], d[yo], eh * b);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 130, b * 170);
    a.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    a.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    a.closePath();
    em(a, d[1], d[yo], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 39, b * 140);
    a.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    a.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    a.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    a.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    a.closePath();
    em(a, d[1], d[Te], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 59, b * 99);
    a.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    a.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    a.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    a.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    a.closePath();
    em(a, d[Wc], d[2], b * Nr);
    if (e === nj) {
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 47, b * 149);
      a.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      a.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      a.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      a.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      a.closePath();
      em(a, d[1]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 40, b * 139);
      a.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      a.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      a.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      a.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      a.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      a.closePath();
      em(a, d[Qe], d[2], b * 4);
    } else {
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 41, b * 139);
      a.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      a.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      a.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      a.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      a.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      a.closePath();
      em(a, d[3], d[2], Ha * b);
    }
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 90, b * 95);
    a.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    a.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * Vo);
    a.bezierCurveTo(b * 92, b * Gj, b * 83, b * 16, b * 78, b * 29);
    a.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    a.closePath();
    em(a, d[1], d[Cs], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 90, b * 86);
    a.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    a.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * gc);
    a.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    a.closePath();
    em(a, d[ja], d[3], b * Dd);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 92, b * 117);
    a.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    a.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    a.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    a.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    a.closePath();
    em(a, d[fi], d[Wc], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 92, b * 175);
    a.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    a.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    a.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    a.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    a.closePath();
    em(a, d[yd], d[uc], b * Jr);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 48, b * 169);
    a.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    a.closePath();
    em(a, yc, d[2], br * b);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 136, b * 171);
    a.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    a.closePath();
    em(a, Lr, d[Yh], b * eh);
    rm(a, b * 63, b * 180, b * 15.231546211727817);
    em(a, d[Ld]);
    rm(a, b * 121, b * 181, b * 15.652475842498529);
    em(a, d[Nr]);
    rm(a, b * 58, b * 175, b * 5.656854249492381);
    em(a, d[2]);
    rm(a, b * 116, b * 175, b * 5.656854249492381);
    em(a, d[wh]);
    return f;
  }
  function xm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, qg * a, a * 150, a * zo, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    em(d, b[Jj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, Vo * a);
    d.bezierCurveTo(a * 92, a * dh, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    em(d, b[Ng]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    em(d, b[0]);
    return c;
  }
  const Qm = lh;
  const Sm = q;
  function Im(b, f) {
    var i = document.createElement("canvas");
    var e = i.getContext("2d");
    var j = b * Jo;
    var a = b * _j;
    var k = j / 2;
    var l = a / 2;
    i.width = j;
    i.height = a;
    var n = b * 5;
    var h = b * 28;
    var g = n / wc;
    var c = h / 2;
    e.translate(k, l);
    for (var d = 0; d < 4; d++) {
      nm(e, -g, -c, n, h, b * z);
      e.rotate(Math.PI / _g);
      em(e, f);
    }
    e.arc(sh, 0, b * mm, Vd, Math.PI * 2);
    em(e, f);
    e.globalCompositeOperation = "destination-out";
    rm(e, 0, ke, b * 4);
    e.fill();
    return i;
  }
  function _m(b, f, i) {
    var e = document.createElement("canvas");
    var j = e.getContext("2d");
    var a = b * 32;
    var k = b * 32;
    var l = a / Te;
    var n = k / 2;
    e.width = a;
    e.height = k;
    var h = b * 5;
    var g = b * 28;
    var c = h / wc;
    var d = g / 2;
    j.translate(b * Jj, b * 0);
    j.translate(l, n);
    if (wg == i) {
      rm(j, 0, ke, b * 10);
      em(j, f[tm], f[2], b * 3);
      for (var m = 0; Dd > m; m++) {
        nm(j, -c, -d, h, g, b * 2);
        j.rotate(Math.PI / Jn);
        em(j, f[2], f[Vn], b * 4);
      }
    }
    rm(j, Ng, 0, gg * b);
    em(j, f[0], f[fo], b * 1.5);
    for (m = nj; mn > m; m++) {
      nm(j, -c, -d, h, g, b * yo);
      j.rotate(Math.PI / 4);
      em(j, f[0], f[Lo], b * 1.5);
    }
    rm(j, 0, 0, b * 10);
    em(j, f[0]);
    rm(j, Oq, 0, b * mn);
    em(j, f[2], f[ja], b * 1.5);
    j.globalCompositeOperation = "destination-out";
    rm(j, 0, 0, Jr * b);
    em(j, f[Ka], f[yd], b * rd);
    j.globalCompositeOperation = "source-over";
    rm(j, 0, ke, b * cn);
    em(j, undefined, f[1], b * mj);
    return e;
  }
  function Fm(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var a = Iu(0.35, rr, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(a, 10, 10);
    a = Gu(0.9, oj, ["#3d2a6e", "#8255b5"]);
    d.drawImage(a, 21, jg);
    a = Gu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(a, 38, 28);
    a = Gu(0.9, false, ["#3d2a6e", "#8255b5"]);
    d.drawImage(a, 15, 37);
    a = Gu(0.9, rr, ["#3d2a6e", "#8255b5"]);
    d.drawImage(a, 32, 45);
    return c;
  }
  const Pm = Fh;
  function Tm(b, i, j) {
    var e = document.createElement("canvas");
    var k = e.getContext("2d");
    var a = (s = b * 125) / Te;
    var n = (t = b * 95) / 2;
    var q = b * 10;
    var r = b * th;
    var h = b * 112;
    var g = b * 82;
    var c = h / tm;
    var d = g / 2;
    var m = b * 4;
    e.width = s;
    e.height = t;
    k.translate(a - b * Gs, n + b * 4);
    k.globalAlpha = i ? 0.5 : 1;
    nm(k, -c, -d, h, g, q);
    em(k, j[0]);
    k.globalAlpha = 1;
    k.translate(0, -r);
    nm(k, -c, -d, h, g, q);
    em(k, j[1], j[tm], m);
    var s = b * 55;
    var t = b * 45;
    q = 5;
    k.translate(b * -40, b * -30);
    nm(k, sh, 0, s, t, q);
    em(k, j[xa]);
    var u = Im(b * 0.7, j[3]);
    k.drawImage(u, b * 45, b * -25);
    u = Im(b * 0.7, j[3]);
    k.drawImage(u, b * 45, b * $o);
    u = Im(b * 1.2, j[jh]);
    k.drawImage(u, b * 28, b * -30);
    s = b * 15;
    t = b * 70;
    q = aq * b;
    k.translate(b * 78, -Y * b);
    nm(k, 0, 0, s, t, q);
    em(k, j[4]);
    s = b * 9;
    t = b * 50;
    q = b * 3;
    k.translate(b * -yg, b * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    nm(k, 0, 0, s, t, q);
    em(k, j[5]);
    k.translate(b * -20, b * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, nj);
    k.lineTo(0, b * 30);
    k.lineTo(b * 30, b * 30);
    k.closePath();
    em(k, null, j[Me], b * qs);
    return e;
  }
  function jm(b, f) {
    var i = document.createElement("canvas");
    var e = i.getContext("2d");
    var j = b * 85;
    var a = b * 115;
    var k = b * 6;
    i.width = j;
    i.height = a;
    e.translate(b * -130, b * -60 + k);
    e.globalAlpha = 0.5;
    e.beginPath();
    e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
    e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
    e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
    e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
    e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
    e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
    e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
    e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
    e.closePath();
    em(e, f[0]);
    e.translate(0, -k);
    e.globalAlpha = 1;
    e.beginPath();
    e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
    e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
    e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
    e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
    e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
    e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
    e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
    e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
    e.closePath();
    em(e, f[1], f[2], 4);
    var l = b * 155;
    var n = b * 133;
    var h = b * jc;
    var g = b * Ie;
    var c = l + b * -Lc;
    var d = n + b * -5;
    e.save();
    e.translate(l, n);
    e.globalAlpha = Mc;
    rm(e, 0, Ea, h);
    em(e, f[jh]);
    e.restore();
    e.save();
    e.translate(c, d);
    e.globalAlpha = 1;
    rm(e, nj, 0, g);
    em(e, f[_n]);
    e.restore();
    e.save();
    e.translate(l + b * 27, n);
    e.globalAlpha = dm;
    rm(e, 0, 0, h);
    em(e, f[Qe]);
    e.restore();
    e.save();
    e.translate(b * 27 + c, d);
    e.globalAlpha = ae;
    rm(e, 0, 0, g);
    em(e, f[Jr]);
    return i;
  }
  const Rm = Gg;
  function Lm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(Oq, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    em(d, b[0], b[0], cn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    em(d, b[0], b[Ea], lr * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    em(d, b[0], b[so], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    em(d, b[0], b[Gc], Te * a);
    d.globalAlpha = 1;
    d.translate(0, a * -yh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    em(d, b[fi], b[Vn], a * E);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    em(d, b[Lc]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    em(d, undefined, b[Cg], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    em(d, b[1], b[2], a * Xg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    em(d, b[Mc], b[wh], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    em(d, b[Vr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    em(d, b[E]);
    rm(d, a * 77, a * 107, a * 6);
    em(d, b[2]);
    rm(d, a * 110, a * 107, a * 6);
    em(d, b[Te]);
    rm(d, a * 75, a * 105, er * a);
    em(d, b[Dd]);
    rm(d, a * 108, a * 105, a * 3);
    em(d, b[Nr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    em(d, b[ae]);
    return c;
  }
  const Gm = sj;
  function qm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 55;
    var g = b * 55;
    var h = fm * b;
    e.width = a;
    e.height = g;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    em(f, d[xn], d[lt], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, Jo * b, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * Re, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    em(f, d[2], d[3], 3);
    return e;
  }
  const Wm = Pd;
  function Nm(b, i, j, e, k) {
    var a = document.createElement("canvas");
    var n = a.getContext("2d");
    var q = b * 70;
    var o = b * 70;
    var h = co * b;
    var g = b * Y;
    a.width = q;
    a.height = o + g;
    for (var c = Cm; i.length > c; c++) {
      var r = i[c];
      n.globalAlpha = r.a;
      var s = r.f(j, Bi, r.c);
      n.save();
      n.translate(q / ih + r.x * b, o / Gi + b * r.y);
      n.rotate(r.r);
      n.drawImage(s, -s.width / Tg, -s.height / Cs);
      n.restore();
    }
    var t = [];
    for (c = 0; c < e.length; c++) {
      var f = document.createElement("canvas");
      var v = f.getContext("2d");
      f.width = q;
      f.height = o + g;
      v.globalAlpha = k / wh;
      if (c == Cg) {
        nm(v, Cm, g, q, o, h);
      } else {
        nm(v, Sh, 0, q, o + g, h);
      }
      em(v, "#081a19");
      v.globalAlpha = k;
      if (c == 2) {
        nm(v, Sh, g, q, o, h);
      } else {
        nm(v, 0, ke, q, o, h);
      }
      em(v, e[c]);
      v.globalAlpha = 1;
      if (En == c) {
        v.drawImage(a, Sh, g);
      } else {
        v.drawImage(a, bd, 0);
      }
      t.push(Ks(f));
    }
    return t;
  }
  function Hm(b, i, j) {
    var e = document.createElement("canvas");
    var k = e.getContext("2d");
    var a = b * 193;
    var l = b * 198;
    var n = b * 140;
    var o = b * 90;
    e.width = a;
    e.height = l;
    var h = b * ic;
    var g = b * 25;
    var c = b * 180;
    var d = g / 2;
    var m = c / mj;
    var p = b * 4;
    k.translate(b * -25, b * 1);
    k.translate(n, o);
    k.rotate(-Math.PI / br);
    nm(k, -d, -m, g, c, h);
    em(k, j[0], j[Ej], p);
    k.translate(b * -30, b * -25);
    k.rotate(Math.PI / 3);
    nm(k, -d, -m, g, c, h);
    em(k, j[0], j[Ko], p);
    k.translate(b * 35, b * 30);
    k.rotate(Math.PI / jh);
    nm(k, -d, -m, g, c, h);
    em(k, j[0], j[1], p);
    return e;
  }
  function Um(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.save();
    f.translate(b * 202.5, b * 147.5);
    nm(f, b * -96.5, b * -21.5, b * 193, b * 193, b * qh);
    f.restore();
    em(f, c[Jj], c[Lo], b * 12);
    f.save();
    f.translate(b * 202.5, b * 190.5);
    nm(f, b * 96.5, b * -21.5, b * -193, b * 43, b * 0);
    f.restore();
    em(f, c[yo], c[1], b * 12);
    f.save();
    f.save();
    f.translate(b * 202.5, b * 233.5);
    nm(f, b * -96.5, b * -20.5, b * 193, b * 41, b * 0);
    f.restore();
    em(f, c[3], c[1], b * 12);
    f.save();
    f.translate(b * 202.5, b * 275);
    nm(f, b * 96.5, b * -21, b * -193, b * 42, b * 0);
    f.restore();
    em(f, c[Js], c[Ic], b * 12);
    f.save();
    f.translate(b * 201, b * 212);
    f.rotate(8.64);
    nm(f, b * -116, b * -22, b * 232, b * 44, b * 10);
    f.restore();
    em(f, c[on], c[Lo], b * pa);
    f.save();
    f.translate(b * 203.5, b * 121.5);
    nm(f, b * -115.5, b * -20.5, b * 231, b * 41, b * ic);
    f.restore();
    em(f, c[3], c[fi], b * 12);
    f.save();
    f.translate(b * 203.5, b * 299);
    nm(f, b * -115.5, b * -20, b * 231, b * 40, b * 10);
    f.restore();
    em(f, c[3], c[Ko], Dh * b);
    f.save();
    f.translate(b * 298.5, b * 210);
    nm(f, b * -20.5, b * -109, b * 41, b * 218, Mh * b);
    f.restore();
    em(f, c[mq], c[1], b * 12);
    f.save();
    f.translate(b * 108.5, b * 210);
    nm(f, b * -20.5, b * -109, b * 41, b * 218, Ki * b);
    f.restore();
    em(f, c[Sr], c[1], b * 12);
    f.save();
    f.translate(b * 204, b * 121.5);
    nm(f, b * -92, b * -9.5, b * 184, b * 19, Sg * b);
    f.restore();
    em(f, c[nh], c[nh], b * 10);
    f.save();
    f.translate(b * 197, b * 299);
    nm(f, b * 85, -Qo * b, b * -170, b * 18, b * 10);
    f.restore();
    em(f, c[3], c[Sn], Ki * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 94, b * 317);
    f.bezierCurveTo(b * 110.5, b * 299.5, b * 110.5, b * 299.5, b * 127, b * 282);
    f.closePath();
    em(f, A, c[1], b * _c);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 279, b * 142);
    f.bezierCurveTo(b * 296.5, b * 125.5, b * 296.5, b * 125.5, b * 314, b * 109);
    f.closePath();
    em(f, _e, c[1], b * Gt);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 93, b * 106);
    f.bezierCurveTo(b * 110.5, b * 124, b * 110.5, b * 124, b * 128, b * 142);
    f.closePath();
    em(f, undefined, c[1], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 281, b * 282);
    f.bezierCurveTo(b * 296, b * 297.5, b * 296, b * 297.5, b * 311, b * 313);
    f.closePath();
    em(f, Ls, c[yd], b * 12);
    if (d == 0) {
      f.scale(2, Te);
      f.translate(b * -7, b * 55);
      f.rotate(-0.5);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 60, b * 47);
      f.bezierCurveTo(b * 81, b * 46, b * 85, b * 47, b * 83, b * 63);
      f.bezierCurveTo(b * 83, b * 72, b * 83, b * 75, b * 72, b * 73);
      f.bezierCurveTo(b * 68, b * 80, b * 69, b * 82, b * 66, b * 73);
      f.bezierCurveTo(b * 62, b * 81, b * 61, b * 82, b * 59, b * 73);
      f.bezierCurveTo(b * 54, b * 81, b * 55, b * 81, b * 52, b * 74);
      f.bezierCurveTo(b * 38, b * 76, b * 41, b * 74, b * 40, b * 66);
      f.bezierCurveTo(b * 38, b * 45, b * 39, b * 49, b * 59, b * 47);
      f.closePath();
      em(f, c[4], c[4], aq * b);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 68, b * 54);
      f.bezierCurveTo(b * 75, b * 54, b * 77, b * 62, b * 71, b * 64);
      f.bezierCurveTo(b * 62, b * 65, b * 63, b * 54, b * 68, b * 54);
      f.closePath();
      em(f, c[3]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 50, b * 55);
      f.bezierCurveTo(b * 57, b * 55, b * 58, b * 65, b * 52, b * 65);
      f.bezierCurveTo(b * 44, b * 66, b * 44, b * 54, b * 50, b * 55);
      f.closePath();
      em(f, c[xa]);
    } else if (d == 1) {
      f.scale(0.6, 0.6);
      f.translate(b * 185, b * 165);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 108, b * 56);
      f.bezierCurveTo(b * 136, b * 58, b * 203, b * 69, b * 234, b * 75);
      f.bezierCurveTo(b * 246, b * 77, b * 247, b * 78, b * 245, b * 90);
      f.bezierCurveTo(b * 238, b * 143, b * 228, b * 197, b * 214, b * 259);
      f.bezierCurveTo(b * 212, b * 267, b * 209, b * 270, b * 189, b * 268);
      f.bezierCurveTo(b * 142, b * 264, b * 106, b * 260, b * 75, b * 253);
      f.bezierCurveTo(b * 60, b * 250, b * 64, b * 250, b * 66, b * 221);
      f.bezierCurveTo(b * 71, b * 168, b * 87, b * 95, b * 98, b * 67);
      f.bezierCurveTo(b * 101, b * 57, b * 103, b * 56, b * 106, b * 56);
      f.closePath();
      em(f, c[Ha], c[eh], yg * b);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 112, b * 72);
      f.bezierCurveTo(b * 132, b * 73, b * 227, b * 85, b * 226, b * 91);
      f.bezierCurveTo(b * 231, b * 89, b * 217, b * 196, b * 200, b * 250);
      f.bezierCurveTo(b * 196, b * 254, b * 175, b * 249, b * 166, b * 249);
      f.bezierCurveTo(b * 91, b * 241, b * 82, b * 236, b * 83, b * 232);
      f.bezierCurveTo(b * 90, b * 144, b * 108, b * 71, b * 111, b * 72);
      f.closePath();
      em(f, undefined, c[bd], b * 13);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 132, b * 117);
      f.bezierCurveTo(b * 171, b * 86, b * 191, b * 101, b * 188, b * 134);
      f.bezierCurveTo(b * 185, b * 154, b * 170, b * 158, b * 153, b * 158);
      f.bezierCurveTo(b * 143, b * 172, b * 146, b * 180, b * 147, b * 193);
      em(f, undefined, c[0], b * 20);
      rm(f, b * 142, b * 221, b * 16.1245154965971);
      em(f, c[0]);
    }
    return e;
  }
  function Om(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.save();
    f.translate(b * 85, b * 237);
    f.rotate(1.5707963267948966);
    cm(f, 6, b * 54.585977194239184, b * ja);
    f.restore();
    em(f, d[ja], d[2], en * b);
    f.save();
    f.translate(b * 178, b * 238);
    f.rotate(1.5707963267948966);
    cm(f, 6, b * 52.53573932334064, b * X);
    f.restore();
    em(f, d[Lo], d[yo], b * 12);
    f.save();
    f.translate(b * 270, b * 239);
    f.rotate(1.5707963267948966);
    cm(f, Fa, b * 53.58058329516393, fn * b);
    f.restore();
    em(f, d[Lh], d[2], b * 12);
    f.save();
    f.translate(b * 222, b * 312);
    f.rotate(1.5707963267948966);
    cm(f, kr, b * 52.53573932334064, b * 1);
    f.restore();
    em(f, d[fi], d[mj], b * bs);
    f.save();
    f.translate(b * 317, b * 159);
    f.rotate(1.5707963267948966);
    cm(f, 6, b * 57.63465889766331, Lo * b);
    f.restore();
    em(f, d[1], d[wh], b * 12);
    f.save();
    f.translate(b * 223.5, b * 139.0625);
    f.rotate(1.5707963267948966);
    cm(f, ei, b * 51.66236541235796, b * Lh);
    f.restore();
    em(f, d[1], d[2], b * 12);
    f.save();
    f.translate(b * 132.5, b * 137.0625);
    f.rotate(1.5707963267948966);
    cm(f, 6, b * 52.009614495783374, b * ae);
    f.restore();
    em(f, d[X], d[Tg], b * 12);
    f.save();
    f.translate(b * 178.5, b * 58.0625);
    f.rotate(1.5707963267948966);
    cm(f, Gg, b * 53.16013544000805, b * 1);
    f.restore();
    em(f, d[X], d[2], b * 12);
    f.save();
    f.translate(b * 177.5, b * 216.0625);
    f.rotate(1.5707963267948966);
    cm(f, Ae, b * 50, b * 1);
    f.restore();
    em(f, d[fo], d[2], fg * b);
    f.save();
    f.translate(b * 84.5, b * 215.0625);
    f.rotate(1.5707963267948966);
    cm(f, oo, b * 54, b * 1);
    f.restore();
    em(f, d[1], d[2], b * 12);
    f.save();
    f.translate(b * 319.5, b * 138.0625);
    f.rotate(1.5707963267948966);
    cm(f, 6, b * 55.08175741568164, b * 1);
    f.restore();
    em(f, d[1], d[2], b * 12);
    f.save();
    f.translate(b * 269.5, b * 216.0625);
    f.rotate(1.5707963267948966);
    cm(f, 6, b * 54.589376255824725, b * Ej);
    f.restore();
    em(f, d[wg], d[tm], b * 12);
    f.save();
    f.translate(b * 221.5, b * 293.0625);
    f.rotate(0.5235987755982988);
    cm(f, 6, b * 49.49747468305833, b * Lh);
    f.restore();
    em(f, d[1], d[tm], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 221.5, b * 342.0625);
    f.bezierCurveTo(b * 221.5, b * 350.5625, b * 221.5, b * 350.5625, b * 221.5, b * 359.0625);
    f.closePath();
    em(f, undefined, d[En], en * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84.5, b * 270.0625);
    f.bezierCurveTo(b * 84.5, b * 277.0625, b * 84.5, b * 277.0625, b * 84.5, b * 284.0625);
    f.closePath();
    em(f, Pq, d[Gi], Eo * b);
    f.save();
    f.translate(b * 84.5, b * 215.0625);
    f.rotate(0.5235987755982988);
    cm(f, Ae, b * 30, b * 15);
    f.restore();
    em(f, d[3]);
    f.save();
    f.translate(b * 177.5, b * 215.0625);
    f.rotate(0.5235987755982988);
    cm(f, Xa, b * 30, b * Od);
    f.restore();
    em(f, d[mq]);
    f.save();
    f.translate(b * 222.5, b * 294.0625);
    f.rotate(0.5235987755982988);
    cm(f, Fa, b * 30, Ss * b);
    f.restore();
    em(f, d[3]);
    f.save();
    f.translate(b * 270.5, b * 216.0625);
    f.rotate(0.5235987755982988);
    cm(f, Gg, b * 30, uh * b);
    f.restore();
    em(f, d[mq]);
    f.save();
    f.translate(b * 320.5, b * 134.0625);
    f.rotate(0.5235987755982988);
    cm(f, ag, b * 30, b * 15);
    f.restore();
    em(f, d[er]);
    f.save();
    f.translate(b * 224.5, b * 138.0625);
    f.rotate(0.5235987755982988);
    cm(f, 6, b * 30, b * Gr);
    f.restore();
    em(f, d[3]);
    f.save();
    f.translate(b * 133.5, b * 137.0625);
    f.rotate(0.5235987755982988);
    cm(f, 6, b * 30, b * nc);
    f.restore();
    em(f, d[Qe]);
    f.save();
    f.translate(b * 178.5, b * 56.0625);
    f.rotate(0.5235987755982988);
    cm(f, 6, b * 30, b * 15);
    f.restore();
    em(f, d[3]);
    return e;
  }
  function Ym(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 173;
    f.globalAlpha = c ? 0.5 : Ej;
    f.translate(Y * b, b * Y);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 85.25, b * 82.953125);
    f.bezierCurveTo(b * 98.25, b * 46.453125, b * 98.25, b * 46.453125, b * 111.25, b * 9.953125);
    f.closePath();
    em(f, undefined, d[Sh], Ha * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111.25, b * 8.953125);
    f.bezierCurveTo(b * 117.75, b * 12.453125, b * 117.75, b * 12.453125, b * 124.25, b * 15.953125);
    f.bezierCurveTo(b * 113.75, b * 39.953125, b * 113.75, b * 39.953125, b * 103.25, b * 63.953125);
    f.bezierCurveTo(b * 97.75, b * 64.953125, b * 97.75, b * 64.953125, b * 92.25, b * 65.953125);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * -5, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111.25, b * 8.953125);
    f.bezierCurveTo(b * 117.75, b * 12.453125, b * 117.75, b * 12.453125, b * 124.25, b * 15.953125);
    f.bezierCurveTo(b * 113.75, b * 39.953125, b * 113.75, b * 39.953125, b * 103.25, b * 63.953125);
    f.bezierCurveTo(b * 97.75, b * 64.953125, b * 97.75, b * 64.953125, b * 92.25, b * 65.953125);
    f.closePath();
    em(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 85.25, b * 82.953125);
    f.bezierCurveTo(b * 98.25, b * 46.453125, b * 98.25, b * 46.453125, b * 111.25, b * 9.953125);
    f.closePath();
    em(f, undefined, d[6], b * Gs);
    f.globalAlpha = c ? 0.5 : Ko;
    f.translate(b * Co, b * qn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.25, b * 84.953125);
    f.bezierCurveTo(b * 123.75, b * 100.453125, b * 123.75, b * 100.453125, b * 160.25, b * 115.953125);
    f.closePath();
    em(f, Rc, d[0], Ac * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 160.25, b * 114.953125);
    f.bezierCurveTo(b * 156.25, b * 122.453125, b * 156.25, b * 122.453125, b * 152.25, b * 129.953125);
    f.bezierCurveTo(b * 130.25, b * 117.953125, b * 130.25, b * 117.953125, b * 108.25, b * 105.953125);
    f.bezierCurveTo(b * 107.25, b * 98.953125, b * 107.25, b * 98.953125, b * 106.25, b * 91.953125);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = Ko;
    f.translate(b * -5, -Qm * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 160.25, b * 114.953125);
    f.bezierCurveTo(b * 156.25, b * 122.453125, b * 156.25, b * 122.453125, b * 152.25, b * 129.953125);
    f.bezierCurveTo(b * 130.25, b * 117.953125, b * 130.25, b * 117.953125, b * 108.25, b * 105.953125);
    f.bezierCurveTo(b * 107.25, b * 98.953125, b * 107.25, b * 98.953125, b * 106.25, b * 91.953125);
    f.closePath();
    em(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.25, b * 84.953125);
    f.bezierCurveTo(b * 123.75, b * 100.453125, b * 123.75, b * 100.453125, b * 160.25, b * 115.953125);
    f.closePath();
    em(f, undefined, d[6], Dd * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * 5, b * Tc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 83.25, b * 83.953125);
    f.bezierCurveTo(b * 47.75, b * 68.453125, b * 47.75, b * 68.453125, b * 12.25, b * 52.953125);
    f.closePath();
    em(f, undefined, d[Js], cn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.25, b * 53.953125);
    f.bezierCurveTo(b * 17.25, b * 46.953125, b * 17.25, b * 46.953125, b * 21.25, b * 39.953125);
    f.bezierCurveTo(b * 42.75, b * 52.453125, b * 42.75, b * 52.453125, b * 64.25, b * 64.953125);
    f.bezierCurveTo(b * 64.25, b * 70.953125, b * 64.25, b * 70.953125, b * 64.25, b * 76.953125);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = dm;
    f.translate(-yh * b, b * -et);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.25, b * 53.953125);
    f.bezierCurveTo(b * 17.25, b * 46.953125, b * 17.25, b * 46.953125, b * 21.25, b * 39.953125);
    f.bezierCurveTo(b * 42.75, b * 52.453125, b * 42.75, b * 52.453125, b * 64.25, b * 64.953125);
    f.bezierCurveTo(b * 64.25, b * 70.953125, b * 64.25, b * 70.953125, b * 64.25, b * 76.953125);
    f.closePath();
    em(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 83.25, b * 83.953125);
    f.bezierCurveTo(b * 47.75, b * 68.453125, b * 47.75, b * 68.453125, b * 12.25, b * 52.953125);
    f.closePath();
    em(f, ug, d[Ad], b * 4);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * bg, b * Me);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84.25, b * 86.953125);
    f.bezierCurveTo(b * 70.25, b * 123.953125, b * 70.25, b * 123.953125, b * 56.25, b * 160.953125);
    f.closePath();
    em(f, undefined, d[so], b * Jr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56.25, b * 159.953125);
    f.bezierCurveTo(b * 49.25, b * 155.453125, b * 49.25, b * 155.453125, b * 42.25, b * 150.953125);
    f.bezierCurveTo(b * 54.25, b * 127.953125, b * 54.25, b * 127.953125, b * 66.25, b * 104.953125);
    f.bezierCurveTo(b * 71.25, b * 104.953125, b * 71.25, b * 104.953125, b * 76.25, b * 104.953125);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = fi;
    f.translate(-aq * b, -lh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56.25, b * 159.953125);
    f.bezierCurveTo(b * 49.25, b * 155.453125, b * 49.25, b * 155.453125, b * 42.25, b * 150.953125);
    f.bezierCurveTo(b * 54.25, b * 127.953125, b * 54.25, b * 127.953125, b * 66.25, b * 104.953125);
    f.bezierCurveTo(b * 71.25, b * 104.953125, b * 71.25, b * 104.953125, b * 76.25, b * 104.953125);
    f.closePath();
    em(f, d[Bo]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84.25, b * 86.953125);
    f.bezierCurveTo(b * 70.25, b * 123.953125, b * 70.25, b * 123.953125, b * 56.25, b * 160.953125);
    f.closePath();
    em(f, Rj, d[oo], b * _g);
    return e;
  }
  function Jm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    rm(d, a * 213.5, a * 256.75, a * 75);
    em(d, b[5]);
    rm(d, a * 213.5, a * 175.75, a * 25);
    em(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Qm];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Tc];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * pd;
    d.strokeStyle = b[Tc];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Jd];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = pd * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Co];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = wj * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(Sh, -Qm);
    d.globalAlpha = dm;
    rm(d, a * 213.5, a * 256.75, a * 75);
    em(d, b[fa]);
    rm(d, a * 213.5, a * 175.75, a * 25);
    em(d, b[jh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = rs * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[ke];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Sr];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = js * a;
    d.strokeStyle = b[xa];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = Vo * a;
    d.strokeStyle = b[oe];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = Ne * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = bo * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Lc];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Qe];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = An * a;
    d.strokeStyle = b[qh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[bd];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * Yd;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * V;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = hd * a;
    d.strokeStyle = b[Sh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = am * a;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[Oq];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    rm(d, a * 213.5, a * 256.75, a * 70);
    em(d, b[ke]);
    rm(d, a * 213.5, a * 175.75, xc * a);
    em(d, b[0]);
    rm(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[lr];
    d.fill();
    rm(d, a * 205, a * 166, lh * a);
    d.fillStyle = b[Cg];
    d.fill();
    rm(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[Gm];
    d.fill();
    rm(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    nm(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    nm(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Km(b, i, j) {
    var e = document.createElement("canvas");
    var k = e.getContext("2d");
    var a = b * 195;
    var l = b * 190;
    var n = a / 2;
    var o = l / ec;
    e.width = a;
    e.height = l;
    var h = b * 10;
    var g = b * 35;
    var c = b * 150;
    var d = g / En;
    var m = c / Cs;
    var p = b * 4;
    k.translate(n - b * Co, o - b * 5);
    k.rotate(-Math.PI / 1.25);
    k.globalAlpha = X;
    nm(k, -d, -m, g, c, h);
    em(k, j[0], j[1], p);
    k.translate(ke, qh);
    k.rotate(Math.PI / Wc);
    k.globalAlpha = dm;
    nm(k, -d, -m, g, c, h);
    em(k, j[Cm], j[1], p);
    k.translate(Cm, br);
    nm(k, -d / Gi, -m / tm, g / 2, c / jh, h - 2);
    em(k, j[Lo]);
    return e;
  }
  function Xm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 101, b * 255);
    f.bezierCurveTo(b * 113, b * 243, b * 179, b * 210, b * 219, b * 196);
    f.bezierCurveTo(b * 252, b * 203, b * 288, b * 215, b * 318, b * 233);
    f.bezierCurveTo(b * 304, b * 254, b * 258, b * 273, b * 215, b * 296);
    f.bezierCurveTo(b * 161, b * 287, b * 119, b * 270, b * 102, b * 257);
    f.closePath();
    em(f, d[0], d[1], b * qj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 99, b * 258);
    f.bezierCurveTo(b * 99, b * 272.5, b * 99, b * 272.5, b * 99, b * 287);
    f.bezierCurveTo(b * 166, b * 319, b * 193, b * 320, b * 212, b * 324);
    f.bezierCurveTo(b * 292, b * 286, b * 312, b * 271, b * 319, b * 263);
    f.bezierCurveTo(b * 320, b * 249, b * 320, b * 241, b * 318, b * 234);
    f.bezierCurveTo(b * 300, b * 254, b * 254, b * 277, b * 216, b * 294);
    f.bezierCurveTo(b * 190, b * 296, b * 135, b * 276, b * 102, b * 258);
    f.closePath();
    em(f, d[2], d[1], b * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 212, b * 323);
    f.bezierCurveTo(b * 211.5, b * 310.5, b * 211.5, b * 310.5, b * 211, b * 298);
    f.closePath();
    em(f, lq, d[lt], $s * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 212, b * 210);
    f.bezierCurveTo(b * 286, b * 210, b * 331, b * 254, b * 212, b * 276);
    f.bezierCurveTo(b * 108, b * 276, b * 112, b * 222, b * 213, b * 208);
    f.closePath();
    em(f, d[3], d[4], b * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98, b * 200);
    f.bezierCurveTo(b * 126, b * 216, b * 177, b * 232, b * 213, b * 237);
    f.bezierCurveTo(b * 266, b * 218, b * 288, b * 209, b * 318, b * 190);
    f.bezierCurveTo(b * 269, b * 164, b * 239, b * 158, b * 214, b * 153);
    f.bezierCurveTo(b * 148, b * 172, b * 131, b * 182, b * 98, b * 200);
    f.closePath();
    em(f, d[Vd], d[1], xs * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97, b * 204);
    f.bezierCurveTo(b * 97, b * 215.5, b * 97, b * 215.5, b * 97, b * 227);
    f.bezierCurveTo(b * 148, b * 250, b * 179, wq * b, b * 212, b * 262);
    f.bezierCurveTo(b * 268, b * 244, b * 281, b * 233, b * 318, b * 214);
    f.bezierCurveTo(b * 318, b * 203, b * 318, b * 203, b * 318, b * 192);
    f.bezierCurveTo(b * 250, b * 225, b * 236, b * 231, b * 214, b * 239);
    f.bezierCurveTo(b * 158, b * 228, b * 126, b * 215, b * 99, b * 201);
    f.closePath();
    em(f, d[2], d[Ko], b * 14);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 212, b * 260);
    f.bezierCurveTo(b * 212, b * 251.5, b * 212, b * 251.5, b * 212, b * 243);
    f.closePath();
    em(f, undefined, d[1], b * Bh);
    rm(f, b * 161, b * 201, b * 13);
    em(f, d[5]);
    rm(f, b * 216, b * 205, b * 8.06225774829855);
    em(f, d[Tc]);
    rm(f, b * 216, b * 175, b * 6.708203932499369);
    em(f, d[5]);
    rm(f, b * 271, b * 191, b * 5.0990195135927845);
    em(f, d[5]);
    rm(f, b * 206, b * 180, b * 11.180339887498949);
    em(f, d[qn]);
    return e;
  }
  function Vm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 52;
    e.height = b * 65;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 9.833328247070312, b * 12.078125);
    f.bezierCurveTo(b * 15.333328247070312, b * 28.078125, b * 15.333328247070312, b * 28.078125, b * 20.833328247070312, b * 44.078125);
    f.closePath();
    em(f, undefined, d[ja], b * ec);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 7.8333282470703125, b * 20.078125);
    f.bezierCurveTo(b * 16.833328247070312, b * 32.578125, b * 16.833328247070312, b * 32.578125, b * 25.833328247070312, b * 45.078125);
    f.closePath();
    em(f, undefined, d[1], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 23.833328247070312, b * 26.078125);
    f.bezierCurveTo(b * 25.833328247070312, b * 11.078125, b * 16.833328247070312, b * 8.078125, b * 14.833328247070312, b * 7.078125);
    f.bezierCurveTo(b * 11.833328247070312, b * 17.078125, b * 13.833328247070312, b * 22.078125, b * 23.833328247070312, b * 27.078125);
    f.closePath();
    em(f, d[0], d[1], Cg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35.83332824707031, b * 8.078125);
    f.bezierCurveTo(b * 34.83332824707031, b * 27.078125, b * 28.833328247070312, b * 27.078125, b * 23.833328247070312, b * 28.078125);
    f.bezierCurveTo(b * 21.833328247070312, b * 14.078125, b * 26.833328247070312, b * 11.078125, b * 35.83332824707031, b * 8.078125);
    f.closePath();
    em(f, d[0], d[1], yo * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 25.833328247070312, b * 39.078125);
    f.bezierCurveTo(b * 20.833328247070312, b * 29.078125, b * 14.833328247070312, b * 27.078125, b * 5.8333282470703125, b * 29.078125);
    f.bezierCurveTo(b * 9.833328247070312, b * 39.078125, b * 16.833328247070312, b * 42.078125, b * 25.833328247070312, b * 40.078125);
    f.closePath();
    em(f, d[0], d[Lh], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.83332824707031, b * 23.078125);
    f.bezierCurveTo(b * 35.83332824707031, b * 35.078125, b * 31.833328247070312, b * 37.078125, b * 25.833328247070312, b * 36.078125);
    f.bezierCurveTo(b * 25.833328247070312, b * 24.078125, b * 33.83332824707031, b * 21.078125, b * 42.83332824707031, b * 23.078125);
    f.closePath();
    em(f, d[0], d[wg], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 23.833328247070312, b * 24.078125);
    f.bezierCurveTo(b * 20.833328247070312, b * 34.078125, b * 23.833328247070312, b * 40.078125, b * 27.833328247070312, b * 43.078125);
    f.bezierCurveTo(b * 37.33332824707031, b * 28.078125, b * 37.33332824707031, b * 28.078125, b * 46.83332824707031, b * 13.078125);
    em(f, Ds, d[Ic], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 38.83332824707031, b * 14.078125);
    f.bezierCurveTo(b * 34.83332824707031, b * 24.078125, b * 34.83332824707031, b * 24.078125, b * 30.833328247070312, b * 34.078125);
    em(f, Yr, d[wg], b * 2);
    return e;
  }
  function Zm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 173;
    f.translate(bg * b, Cd * b);
    f.globalAlpha = c ? 0.5 : fo;
    f.save();
    f.translate(b * 86.25, b * 84.953125);
    f.rotate(0.32);
    cm(f, 7, b * 42.15447781671598, b * 10);
    f.restore();
    em(f, d[Jj]);
    f.globalAlpha = 1;
    f.translate(b * -5, -aq * b);
    f.save();
    f.translate(b * 86.25, b * 84.953125);
    f.rotate(0.32);
    cm(f, Ig, b * 42.15447781671598, b * Ki);
    f.restore();
    em(f, d[1], d[2], b * 4);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * 5, Y * b);
    f.save();
    f.translate(b * 86.25, b * 84.953125);
    f.rotate(0.28);
    cm(f, 7, b * 30.463092423455635, b * jn);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * -Y, -Gj * b);
    f.save();
    f.translate(b * 86.25, b * 84.953125);
    f.rotate(0.28);
    cm(f, om, b * 30.463092423455635, jn * b);
    f.restore();
    em(f, d[3], d[4], b * 4);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Tc * b, b * 5);
    rm(f, b * 86.25, b * 84.953125, b * 18.867962264113206);
    em(f, d[bd]);
    f.globalAlpha = 1;
    f.translate(b * -bg, b * -5);
    rm(f, b * 86.25, b * 84.953125, b * 18.867962264113206);
    em(f, d[5], d[kr], b * 4);
    return e;
  }
  function $m(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 173;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * lh, b * Tc);
    f.save();
    f.translate(b * 86.25, b * 84.953125);
    cm(f, 7, b * 9.848857801796104, b * 5);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = fo;
    f.translate(b * -5, b * -yh);
    f.save();
    f.translate(b * 86.25, b * 84.953125);
    cm(f, bh, b * 9.848857801796104, b * 5);
    f.restore();
    em(f, d[8], d[ph], b * Ac);
    return e;
  }
  function Jt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 75;
    var g = b * 55;
    e.width = a;
    e.height = g;
    f.translate(b * -30, b * -40);
    f.globalAlpha = Lo;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    em(f, d[Gc]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    em(f, d[Lo]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    em(f, Bi, d[fi], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    em(f, d[2]);
    return e;
  }
  const Kt = Jg;
  function Nt(b, i, j) {
    var e = document.createElement("canvas");
    var k = e.getContext("2d");
    var a = b * 135;
    var l = b * 190;
    var n = a / 2;
    var o = l / ec;
    e.width = a;
    e.height = l;
    var h = b * ue;
    var g = b * 25;
    var c = b * 180;
    var d = g / Gi;
    var m = c / 2;
    var p = b * 4;
    k.translate(n, o);
    k.rotate(-Math.PI / 5);
    k.globalAlpha = 1;
    nm(k, -d, -m, g, c, h);
    em(k, j[0], j[1], p);
    k.translate(0, 0);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 1;
    nm(k, -d, -m, g, c, h);
    em(k, j[nj], j[1], p);
    return e;
  }
  function Pt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 145;
    var i = b * 145;
    var j = a / 2;
    var k = i / 2;
    e.width = a;
    e.height = i;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    rm(f, so, 0, h);
    em(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    rm(f, 0, so, h);
    em(f, d[0]);
    h = b * 35;
    f.translate(nj, Jj);
    f.globalAlpha = 0.8;
    rm(f, so, 0, h);
    em(f, d[1]);
    h = b * xc;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    rm(f, Ea, 0, h);
    em(f, d[En]);
    return e;
  }
  function St(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 205;
    var i = b * 205;
    var j = a / 2;
    var k = i / Cg;
    e.width = a;
    e.height = i;
    var h = fc * b;
    f.translate(j, k);
    f.globalAlpha = 1;
    rm(f, 0, 0, h);
    em(f, d[0]);
    return e;
  }
  const Tt = jc;
  function Ut(b, c, f) {
    var e = document.createElement("canvas");
    var g = e.getContext("2d");
    e.width = b * 155;
    e.height = b * 127;
    g.globalAlpha = 0.5;
    g.translate(bd, lo * b);
    g.translate(b * -I, b * -ur);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 55, b * 68);
    g.bezierCurveTo(b * 86, b * 64, b * 117, b * 66, b * 134, b * 68);
    g.bezierCurveTo(b * 152, b * 69, b * 165, b * 86, b * 152, b * 104);
    g.bezierCurveTo(b * 146, b * 87, b * 122, b * 89, b * 98, b * 90);
    g.bezierCurveTo(b * 64, b * 89, b * 41, b * 91, b * 36, b * 106);
    g.bezierCurveTo(b * 19, b * 92, b * 31, b * 71, b * 54, b * 69);
    g.closePath();
    em(g, f[Vd]);
    g.globalAlpha = 1;
    g.translate(0, b * -8);
    g.translate(Kr * b, b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 24, b * 28);
    g.bezierCurveTo(b * 39, b * 30, b * 37, b * 31, b * 40, b * 32);
    g.bezierCurveTo(b * 22, b * 45, b * 26, b * 58, b * 29, b * 66);
    g.bezierCurveTo(b * 86.5, b * 65, b * 86.5, b * 65, b * 144, b * 64);
    g.bezierCurveTo(b * 151, b * 42, b * 132, b * d, b * 120, rn * b);
    g.bezierCurveTo(b * 106, b * 12, b * 89, b * qh, b * 73, b * Sr);
    g.bezierCurveTo(b * 51, b * 5, b * 36, b * 20, b * 25, b * 28);
    g.closePath();
    em(g, f[1], f[z], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 30, b * 41);
    g.bezierCurveTo(b * 49, b * 31, b * 53, b * 29, b * 62, b * 27);
    g.bezierCurveTo(b * 59, b * 24, b * 56, b * 25, b * 53, b * 24);
    g.bezierCurveTo(b * 67, b * Eh, b * 84, b * 12, b * 120, Tr * b);
    g.bezierCurveTo(b * 107, b * Kc, b * 96, b * 6, b * 85, b * 2);
    g.bezierCurveTo(b * 59, on * b, b * 54, b * 7, b * 40, b * 17);
    g.bezierCurveTo(b * 32.5, b * 22.5, b * 32.5, b * 22.5, b * 25, b * 28);
    g.bezierCurveTo(b * 32, b * 30, b * 32, b * 30, b * 39, b * 32);
    g.closePath();
    em(g, f[3]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 24, b * 28);
    g.bezierCurveTo(b * 39, b * 30, b * 37, b * 31, b * 40, b * 32);
    g.bezierCurveTo(b * 22, b * 45, b * 26, b * 58, b * 29, b * 66);
    g.bezierCurveTo(b * 86.5, b * 65, b * 86.5, b * 65, b * 144, b * 64);
    g.bezierCurveTo(b * 151, b * 42, b * 132, b * 20, b * 120, b * 16);
    g.bezierCurveTo(b * 106, b * 12, b * 89, nj * b, b * 73, b * 3);
    g.bezierCurveTo(b * 51, b * 5, b * 36, b * 20, b * 25, b * 28);
    g.closePath();
    em(g, Ds, f[2], Jr * b);
    rm(g, b * 18, b * 38, b * 14.866068747318506);
    em(g, f[4], f[et], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 30);
    g.bezierCurveTo(b * 27, b * 38, b * 25, b * 50, b * 26, b * 60);
    g.bezierCurveTo(b * 36.5, b * 58.5, b * 36.5, b * 58.5, b * 47, b * 57);
    em(g, f[lt], f[wc], _n * b);
    g.translate(b * -7, b * -20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 27, b * 74);
    g.bezierCurveTo(b * 38, b * 77.5, b * 38, b * 77.5, b * 49, b * 81);
    g.bezierCurveTo(b * 54.5, b * 75.5, b * 54.5, b * 75.5, b * 60, b * 70);
    g.bezierCurveTo(b * 64, b * 72, b * 64, b * 72, b * 68, b * 74);
    g.bezierCurveTo(b * 80.5, b * 67.5, b * 80.5, b * 67.5, b * 93, b * 61);
    g.bezierCurveTo(b * 104.5, b * 68, b * 104.5, b * 68, b * 116, b * 75);
    g.bezierCurveTo(b * 120.5, b * 72.5, b * 120.5, b * 72.5, b * 125, b * 70);
    g.bezierCurveTo(b * 129, b * 75, b * 129, b * 75, b * 133, b * 80);
    g.bezierCurveTo(b * 145.5, b * 76.5, b * 145.5, b * 76.5, b * 158, b * 73);
    g.bezierCurveTo(b * 158, b * 87, b * 158, b * 93, b * 155, b * 95);
    g.bezierCurveTo(b * 152.5, b * 96, b * 152.5, b * 96, b * 150, b * 97);
    g.bezierCurveTo(b * 121, b * 85, b * 108, b * 86, b * 93, b * 85);
    g.bezierCurveTo(b * 64, b * 85, b * 52, b * 95, b * 38, b * 99);
    g.bezierCurveTo(b * 36, b * 98.5, b * 36, b * 98.5, b * 34, b * 98);
    g.bezierCurveTo(b * 25, b * 98, b * 27, b * 91, b * 27, b * 76);
    g.closePath();
    em(g, f[kr], f[Kr], b * 6);
    return e;
  }
  function Vt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 370;
    var i = b * 370;
    var j = a / 2;
    var k = i / 2;
    e.width = a;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    rm(f, j, k, h);
    em(f, d[qh]);
    return e;
  }
  function Wt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 155;
    e.height = b * 127;
    f.globalAlpha = 0.5;
    f.translate(ke, b * 8);
    f.translate(b * -7, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 68);
    f.bezierCurveTo(b * 86, b * 64, b * 117, b * 66, b * 134, b * 68);
    f.bezierCurveTo(b * 152, b * 69, b * 165, b * 86, b * 152, b * 104);
    f.bezierCurveTo(b * 146, b * 87, b * 122, b * 89, b * 98, b * 90);
    f.bezierCurveTo(b * 64, b * 89, b * 41, b * 91, b * 36, b * 106);
    f.bezierCurveTo(b * 19, b * 92, b * 31, b * 71, b * 54, b * 69);
    f.closePath();
    em(f, d[Jj]);
    f.globalAlpha = Ko;
    f.translate(0, b * -8);
    f.translate($q * b, Wh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 24, b * 28);
    f.bezierCurveTo(b * 39, b * 30, b * 37, b * 31, b * 40, b * 32);
    f.bezierCurveTo(b * 22, b * 45, b * 26, b * 58, b * 29, b * 66);
    f.bezierCurveTo(b * 86.5, b * 65, b * 86.5, b * 65, b * 144, b * 64);
    f.bezierCurveTo(b * 151, b * 42, b * 132, Wh * b, b * 120, b * 16);
    f.bezierCurveTo(b * 106, b * Qr, b * 89, b * Ng, b * 73, b * on);
    f.bezierCurveTo(b * 51, b * 5, b * 36, b * 20, b * 25, b * 28);
    f.closePath();
    em(f, d[wg], d[wc], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 41);
    f.bezierCurveTo(b * 49, b * 31, b * 53, b * 29, b * 62, b * 27);
    f.bezierCurveTo(b * 59, b * 24, b * 56, b * 25, b * 53, b * 24);
    f.bezierCurveTo(b * 67, nc * b, b * 84, b * 12, b * 120, b * 16);
    f.bezierCurveTo(b * 107, b * 11, b * 96, b * Xa, b * 85, b * mj);
    f.bezierCurveTo(b * 59, b * 3, b * 54, b * 7, b * 40, js * b);
    f.bezierCurveTo(b * 32.5, b * 22.5, b * 32.5, b * 22.5, b * 25, b * 28);
    f.bezierCurveTo(b * 32, b * 30, b * 32, b * 30, b * 39, b * 32);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 24, b * 28);
    f.bezierCurveTo(b * 39, b * 30, b * 37, b * 31, b * 40, b * 32);
    f.bezierCurveTo(b * 22, b * 45, b * 26, b * 58, b * 29, b * 66);
    f.bezierCurveTo(b * 86.5, b * 65, b * 86.5, b * 65, b * 144, b * 64);
    f.bezierCurveTo(b * 151, b * 42, b * 132, b * yg, b * 120, b * Hh);
    f.bezierCurveTo(b * 106, b * 12, b * 89, b * 0, b * 73, Xg * b);
    f.bezierCurveTo(b * 51, Me * b, b * 36, xh * b, b * 25, b * 28);
    f.closePath();
    em(f, Ls, d[yo], _n * b);
    rm(f, b * 18, b * 38, b * 14.866068747318506);
    em(f, d[4], d[5], Rh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39, b * 30);
    f.bezierCurveTo(b * 27, b * 38, b * 25, b * 50, b * 26, b * 60);
    f.bezierCurveTo(b * 36.5, b * 58.5, b * 36.5, b * 58.5, b * 47, b * 57);
    em(f, d[lt], d[2], b * 4);
    f.translate(-Oi * b, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 68);
    f.bezierCurveTo(b * 86, b * 64, b * 117, b * 66, b * 134, b * 68);
    f.bezierCurveTo(b * 152, b * 69, b * 165, b * 86, b * 152, b * 104);
    f.bezierCurveTo(b * 146, b * 87, b * 122, b * 89, b * 98, b * 90);
    f.bezierCurveTo(b * 64, b * 89, b * 41, b * 91, b * 36, b * 106);
    f.bezierCurveTo(b * Oe, b * 92, b * 31, b * 71, b * 54, b * 69);
    f.closePath();
    em(f, d[cn], d[5], b * 4);
    return e;
  }
  function Yt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var a = b * 220;
    var g = b * 32;
    var h = bq * b;
    d.width = f;
    d.height = a;
    e.translate(f / 2, a / 2 + b * 10);
    e.globalAlpha = 0.5;
    rm(e, Ka, 0, g);
    em(e, c[0], c[Oq]);
    e.translate(Ea, -wm * b);
    e.globalAlpha = Lo;
    rm(e, Vd, 0, g);
    em(e, c[1], c[2], h);
    return d;
  }
  const au = fo;
  function cu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var a = b * 40;
    var g = b * 16;
    var h = Ha * b;
    d.width = f;
    d.height = a;
    e.translate(f / rd, a / rd);
    e.globalAlpha = 1;
    rm(e, Ng, nj, g);
    em(e, c[0], c[1], h);
    return d;
  }
  const du = nj;
  const eu = rd;
  function fu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var a = b * 220;
    var g = b * 16;
    d.width = f;
    d.height = a;
    e.translate(f / 2, a / 2);
    e.globalAlpha = 0.5;
    rm(e, qh, Oq, g);
    em(e, c[0]);
    e.globalAlpha = wg;
    return d;
  }
  function gu(b, f, i, e) {
    var j = document.createElement("canvas");
    var a = j.getContext("2d");
    var l = b * 210;
    var n = b * 205;
    var o = b * 30;
    var h = Jq * b;
    var g = b * 200;
    var c = b * 180;
    var d = g / 2;
    var m = c / Cg;
    j.width = l;
    j.height = n;
    j.width = b * 419;
    j.height = b * 412;
    if (X == e) {
      a.save();
      a.translate(Mh * b, nj * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 117.99996948242188, b * 216.40621948242188);
      a.bezierCurveTo(b * 86.99996948242188, b * 221.40621948242188, b * 74.99996948242188, b * 217.40621948242188, b * 60.999969482421875, b * 205.40621948242188);
      em(a, Ds, f[4], on * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 114.99996948242188, b * 227.40621948242188);
      a.bezierCurveTo(b * 90.99996948242188, b * 233.40621948242188, b * 66.99996948242188, b * 228.40621948242188, b * 43.999969482421875, b * 225.40621948242188);
      em(a, undefined, f[k], b * 3);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 110.99996948242188, b * 236.40621948242188);
      a.bezierCurveTo(b * 94.99996948242188, b * 244.40621948242188, b * 79.99996948242188, b * 249.40621948242188, b * 60.999969482421875, b * 249.40621948242188);
      em(a, Ug, f[_n], oe * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 111.99996948242188, b * 206.29513549804688);
      a.bezierCurveTo(b * 91.99996948242188, b * 206.29513549804688, b * 87.99996948242188, b * 201.29513549804688, b * 79.99996948242188, b * 192.29513549804688);
      em(a, undefined, f[4], Vr * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 109.99996948242188, b * 249.18402099609375);
      a.bezierCurveTo(b * 97.99996948242188, b * 263.18402099609375, b * 85.99996948242188, b * 271.18402099609375, b * 65.99996948242188, b * 277.18402099609375);
      em(a, undefined, f[k], b * 3);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 105.99996948242188, b * 192.18402099609375);
      a.bezierCurveTo(b * 99.49996948242188, b * 197.68402099609375, b * 99.49996948242188, b * 197.68402099609375, b * 92.99996948242188, b * 203.18402099609375);
      a.bezierCurveTo(b * 95.99996948242188, b * 213.18402099609375, b * 95.99996948242188, b * 215.18402099609375, b * 89.99996948242188, b * 219.18402099609375);
      a.bezierCurveTo(b * 91.99996948242188, b * 223.18402099609375, b * 91.99996948242188, b * 226.18402099609375, b * 87.99996948242188, b * 230.18402099609375);
      a.bezierCurveTo(b * 89.99996948242188, b * 234.18402099609375, b * 91.99996948242188, b * 237.18402099609375, b * 90.99996948242188, b * 244.18402099609375);
      a.bezierCurveTo(b * 96.99996948242188, b * 252.18402099609375, b * 96.99996948242188, b * 256.18402099609375, b * 95.99996948242188, b * 262.18402099609375);
      a.bezierCurveTo(b * 106.49996948242188, b * 264.18402099609375, b * 106.49996948242188, b * 264.18402099609375, b * 116.99996948242188, b * 266.18402099609375);
      em(a, undefined, f[4], b * 3);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 104.99996948242188, b * 183.29513549804688);
      a.bezierCurveTo(b * 99.99996948242188, b * 193.29513549804688, b * 93.99996948242188, b * 195.29513549804688, b * 89.99996948242188, b * 201.29513549804688);
      a.bezierCurveTo(b * 86.99996948242188, b * 212.29513549804688, b * 85.99996948242188, b * 214.29513549804688, b * 81.99996948242188, b * 215.29513549804688);
      a.bezierCurveTo(b * 83.99996948242188, b * 223.29513549804688, b * 83.99996948242188, b * 227.29513549804688, b * 79.99996948242188, b * 230.29513549804688);
      a.bezierCurveTo(b * 83.99996948242188, b * 235.29513549804688, b * 84.99996948242188, b * 240.29513549804688, b * 79.99996948242188, b * 246.29513549804688);
      a.bezierCurveTo(b * 86.99996948242188, b * 251.29513549804688, b * 91.99996948242188, b * 256.2951354980469, b * 89.99996948242188, b * 266.2951354980469);
      a.bezierCurveTo(b * 102.99996948242188, b * 269.2951354980469, b * 102.99996948242188, b * 269.2951354980469, b * 115.99996948242188, b * 272.2951354980469);
      em(a, Rj, f[pj], b * 3);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 107.99996948242188, b * 177.85067749023438);
      a.bezierCurveTo(b * 95.99996948242188, b * 187.35067749023438, b * 95.99996948242188, b * 187.35067749023438, b * 83.99996948242188, b * 196.85067749023438);
      a.bezierCurveTo(b * 82.99996948242188, b * 203.85067749023438, b * 80.99996948242188, b * 209.85067749023438, b * 72.99996948242188, b * 210.85067749023438);
      a.bezierCurveTo(b * 73.99996948242188, b * 220.85067749023438, b * 73.99996948242188, b * 221.85067749023438, b * 66.99996948242188, b * 227.85067749023438);
      a.bezierCurveTo(b * 71.99996948242188, b * 235.85067749023438, b * 73.99996948242188, b * 239.85067749023438, b * 71.99996948242188, b * 247.85067749023438);
      a.bezierCurveTo(b * 80.99996948242188, b * 257.8506774902344, b * 81.99996948242188, b * 263.8506774902344, b * 77.99996948242188, b * 271.8506774902344);
      a.bezierCurveTo(b * 95.49996948242188, b * 272.8506774902344, b * 95.49996948242188, b * 272.8506774902344, b * 112.99996948242188, b * 273.8506774902344);
      em(a, undefined, f[_n], b * er);
      a.restore();
    } else if (e == 2) {
      a.save();
      a.translate(b * 130, b * 35);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 170.99996948242188, b * 133.85067749023438);
      a.bezierCurveTo(b * 195.99996948242188, b * 129.85067749023438, b * 196.99996948242188, b * 111.85067749023438, b * 200.99996948242188, b * 88.85067749023438);
      em(a, undefined, f[4], b * jh);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 169.99996948242188, b * 143.85067749023438);
      a.bezierCurveTo(b * 189.99996948242188, b * 145.85067749023438, b * 207.99996948242188, b * 126.85067749023438, b * 222.99996948242188, b * 100.85067749023438);
      em(a, undefined, f[sj], b * Sr);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 170.99996948242188, b * 157.85067749023438);
      a.bezierCurveTo(b * 193.99996948242188, b * 160.85067749023438, b * 210.99996948242188, b * 151.85067749023438, b * 232.99996948242188, b * 139.85067749023438);
      em(a, undefined, f[sj], b * 3);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 169.99996948242188, b * 168.85067749023438);
      a.bezierCurveTo(b * 192.99996948242188, b * 175.85067749023438, b * 203.99996948242188, b * 177.85067749023438, b * 245.99996948242188, b * 168.85067749023438);
      em(a, undefined, f[_g], b * xa);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 167.99996948242188, b * 168.85067749023438);
      a.bezierCurveTo(b * 183.99996948242188, b * 189.85067749023438, b * 191.99996948242188, b * 193.85067749023438, b * 220.99996948242188, b * 196.85067749023438);
      em(a, undefined, f[4], b * Wc);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 176.99996948242188, b * 117.85067749023438);
      a.bezierCurveTo(b * 181.99996948242188, b * 120.85067749023438, b * 181.99996948242188, b * 120.85067749023438, b * 186.99996948242188, b * 123.85067749023438);
      a.bezierCurveTo(b * 183.99996948242188, b * 137.85067749023438, b * 185.99996948242188, b * 136.85067749023438, b * 190.99996948242188, b * 136.85067749023438);
      a.bezierCurveTo(b * 186.99996948242188, b * 147.85067749023438, b * 189.99996948242188, b * 152.85067749023438, b * 193.99996948242188, b * 155.85067749023438);
      a.bezierCurveTo(b * 187.99996948242188, b * 165.85067749023438, b * 190.99996948242188, b * 169.85067749023438, b * 190.99996948242188, b * 172.85067749023438);
      a.bezierCurveTo(b * 186.99996948242188, b * 183.85067749023438, b * 186.99996948242188, b * 185.85067749023438, b * 189.99996948242188, b * 188.85067749023438);
      a.bezierCurveTo(b * 182.49996948242188, b * 195.35067749023438, b * 182.49996948242188, b * 195.35067749023438, b * 174.99996948242188, b * 201.85067749023438);
      em(a, undefined, f[4], oe * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 176.99996948242188, b * 112.18402099609375);
      a.bezierCurveTo(b * 183.99996948242188, b * 119.18402099609375, b * 186.99996948242188, b * 117.18402099609375, b * 192.99996948242188, b * 116.18402099609375);
      a.bezierCurveTo(b * 191.99996948242188, b * 126.18402099609375, b * 193.99996948242188, b * 130.18402099609375, b * 199.99996948242188, b * 130.18402099609375);
      a.bezierCurveTo(b * 194.99996948242188, b * 145.18402099609375, b * 197.99996948242188, b * 147.18402099609375, b * 201.99996948242188, b * 153.18402099609375);
      a.bezierCurveTo(b * 196.99996948242188, b * 164.18402099609375, b * 197.99996948242188, b * 169.18402099609375, b * 201.99996948242188, b * 174.18402099609375);
      a.bezierCurveTo(b * 194.99996948242188, b * 184.18402099609375, b * 196.99996948242188, b * 187.18402099609375, b * 200.99996948242188, b * 193.18402099609375);
      a.bezierCurveTo(b * 185.99996948242188, b * 195.18402099609375, b * 181.99996948242188, b * 201.18402099609375, b * 174.99996948242188, b * 210.18402099609375);
      em(a, undefined, f[4], jh * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 176.99996948242188, b * 101.29513549804688);
      a.bezierCurveTo(b * 181.99996948242188, b * 108.29513549804688, b * 189.99996948242188, b * 110.29513549804688, b * 195.99996948242188, b * 107.29513549804688);
      a.bezierCurveTo(b * 197.99996948242188, b * 121.29513549804688, b * 200.99996948242188, b * 122.29513549804688, b * 206.99996948242188, b * 122.29513549804688);
      a.bezierCurveTo(b * 201.99996948242188, b * 138.29513549804688, b * 204.99996948242188, b * 142.29513549804688, b * 211.99996948242188, b * 148.29513549804688);
      a.bezierCurveTo(b * 201.99996948242188, b * 156.29513549804688, b * 205.99996948242188, b * 167.29513549804688, b * 213.99996948242188, b * 173.29513549804688);
      a.bezierCurveTo(b * 204.99996948242188, b * 181.29513549804688, b * 204.99996948242188, b * 187.29513549804688, b * 205.99996948242188, b * 193.29513549804688);
      a.bezierCurveTo(b * 190.99996948242188, b * 198.29513549804688, b * 181.99996948242188, b * 205.29513549804688, b * 174.99996948242188, b * 214.29513549804688);
      em(a, Ds, f[Jn], b * 3);
      a.restore();
    }
    a.translate(j.width / 2, j.height / En);
    if (!e) {
      a.globalAlpha = 0.5;
      nm(a, -d, -m, g, c + h, o);
      em(a, f[0]);
      if (i) {
        a.rotate(Math.PI);
      }
      a.globalAlpha = 1;
      nm(a, -d, -m, g, c, o);
      em(a, f[1], f[2], 4);
      a.globalAlpha = Mc;
      nm(a, b * 35 - d, _o * b - m, g - b * 50, c - b * 50, o - Ki * b);
      em(a, f[3]);
    }
    if (e == 3) {
      a.translate(-j.width / wc, -j.height / Gi);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 121, b * 190);
      a.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
      a.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
      a.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
      a.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
      a.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
      a.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
      a.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
      a.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
      a.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
      a.closePath();
      em(a, f[4]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 219, b * 144);
      a.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
      a.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
      a.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
      a.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
      a.closePath();
      em(a, f[5]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 123, b * 214);
      a.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
      a.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
      a.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
      a.closePath();
      em(a, f[dh]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 257, b * 199);
      a.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
      a.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
      a.closePath();
      em(a, f[Jd]);
      a.translate(b * -5, b * 55);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 186, b * 123);
      a.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
      a.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
      a.closePath();
      em(a, f[5]);
      a.translate(b * 5, b * -55);
      a.translate(b * -Wg, b * 15);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 171, b * 241);
      a.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
      a.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
      a.closePath();
      em(a, f[Tc]);
    } else if (e == 4) {
      a.translate(-j.width / Cs, -j.height / Yh);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 30, b * 167);
      a.bezierCurveTo(b * 47, b * 144, b * 64, b * 140, b * 80, b * 147);
      a.bezierCurveTo(b * 95, b * 154, b * 95, b * 159, b * Us, b * 179);
      a.bezierCurveTo(b * 105, b * 202, b * 95, b * 218, b * 69, b * 218);
      a.bezierCurveTo(b * 48, b * 236, b * 26, b * 223, b * 28, b * 213);
      a.bezierCurveTo(b * 28, b * 205, b * 29, b * 199, b * 32, b * 195);
      a.bezierCurveTo(b * 21, b * 183, b * 27, b * 173, b * 30, b * 167);
      a.closePath();
      em(a, f[4]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 26, b * 145);
      a.bezierCurveTo(b * 32, b * 138, b * 37, b * 137, b * 40, b * 139);
      a.bezierCurveTo(b * 43, b * 140, b * 41, b * 150, b * 31, b * 159);
      a.bezierCurveTo(b * 23, b * 166, b * 17, b * 158, b * 26, b * 145);
      a.closePath();
      em(a, f[4]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 13, b * 193);
      a.bezierCurveTo(b * 21, b * 187, b * 30, b * 190, b * 20, b * 202);
      a.bezierCurveTo(b * uj, b * 208, b * 7, b * 202, b * 13, b * 193);
      a.closePath();
      em(a, f[_n]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 121, b * 190);
      a.bezierCurveTo(b * 129, b * 186, b * 137, b * 183, b * 135, b * 163);
      a.bezierCurveTo(b * 131, b * 135, b * 153, b * 127, b * 177, b * 124);
      a.bezierCurveTo(b * 198, b * 120, b * 208, b * 122, b * 226, b * 128);
      a.bezierCurveTo(b * 261, b * 112, b * 271, b * 126, b * 287, b * 147);
      a.bezierCurveTo(b * 310, b * 163, b * 304, b * 183, b * 283, b * 196);
      a.bezierCurveTo(b * 296, b * 249, b * 278, b * 262, b * 253, b * 263);
      a.bezierCurveTo(b * 210, b * 264, b * 188, b * 252, b * 177, b * 234);
      a.bezierCurveTo(b * 133, b * 242, b * 123, b * 241, b * 115, b * 225);
      a.bezierCurveTo(b * 109, b * 206, b * 115, b * 193, b * 121, b * 190);
      a.closePath();
      em(a, f[Ud]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 335, b * 196);
      a.bezierCurveTo(b * 312, b * 208, b * 300, b * 185, b * 309, b * 167);
      a.bezierCurveTo(b * 314, b * 141, b * 339, b * 127, b * 359, b * 144);
      a.bezierCurveTo(b * 363, b * 148, b * 364, b * 150, b * 364, b * 150);
      a.bezierCurveTo(b * 392, b * 143, b * 396, b * 183, b * 378, b * 204);
      a.bezierCurveTo(b * 367, b * 215, b * 339, b * 208, b * 335, b * 196);
      a.closePath();
      em(a, f[Ha]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 349, b * 212);
      a.bezierCurveTo(b * 339, b * 216, b * 334, b * 208, b * 341, b * 203);
      a.bezierCurveTo(b * 353, b * 198, b * 361, b * 205, b * 349, b * 212);
      a.closePath();
      em(a, f[4]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 46, b * 165);
      a.bezierCurveTo(b * 55, b * 148, b * 85, b * 157, b * 83, b * 175);
      a.bezierCurveTo(b * 99, b * 185, b * 89, b * 212, b * 66, b * 204);
      a.bezierCurveTo(b * 55, b * 212, b * 43, b * 212, b * 41, b * 202);
      a.bezierCurveTo(b * 39, b * 194, b * 42, b * 187, b * 49, b * 185);
      a.bezierCurveTo(b * 44, b * 175, b * 45, b * 172, b * 46, b * 165);
      a.closePath();
      em(a, f[mn]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 219, b * 144);
      a.bezierCurveTo(b * 251, b * 121, b * 277, b * 136, b * 276, b * 159);
      a.bezierCurveTo(b * 276, b * 176, b * 273, b * 191, b * 242, b * 193);
      a.bezierCurveTo(b * 226, b * 228, b * 155, b * 219, b * 150, b * 183);
      a.bezierCurveTo(b * 142, b * 144, b * 174, b * 127, b * 219, b * 144);
      a.closePath();
      em(a, f[Wg]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 123, b * 214);
      a.bezierCurveTo(b * 119, b * 198, b * 129, b * 189, b * 146, b * 194);
      a.bezierCurveTo(b * 158, b * 201, b * 165, b * 218, b * 147, b * 226);
      a.bezierCurveTo(b * 135, b * 230, b * 125, b * 222, b * 123, b * 214);
      a.closePath();
      em(a, f[5]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 257, b * 199);
      a.bezierCurveTo(b * 264, b * 199, b * 275, b * 213, b * 261, b * 220);
      a.bezierCurveTo(b * 246, b * 225, b * 235, b * 200, b * 257, b * 199);
      a.closePath();
      em(a, f[5]);
      a.translate(b * -5, b * 55);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 186, b * 123);
      a.bezierCurveTo(b * 198, b * 115, b * 219, b * 110, b * 219, b * 123);
      a.bezierCurveTo(b * 216, b * 135, b * 171, b * 143, b * 186, b * 123);
      a.closePath();
      em(a, f[Me]);
      a.translate(Co * b, b * -55);
      a.translate(b * -5, nd * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 171, b * 241);
      a.bezierCurveTo(b * 189, b * 234, b * 200, b * 248, b * 189, b * 254);
      a.bezierCurveTo(b * 179, b * 260, b * 158, b * 246, b * 171, b * 241);
      a.closePath();
      em(a, f[aq]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 367, b * 164);
      a.bezierCurveTo(b * 380, b * 160, b * 391, b * 185, b * 371, b * 189);
      a.bezierCurveTo(b * 362, b * 192, b * 354, b * 191, b * 350, b * 185);
      a.bezierCurveTo(b * 326, b * 205, b * 314, b * 182, b * 316, b * 171);
      a.bezierCurveTo(b * 317, b * 150, b * 332, b * 143, b * 347, b * 147);
      a.bezierCurveTo(b * 361, b * 151, b * 366, b * 158, b * 367, b * 164);
      a.closePath();
      em(a, f[Dd]);
    }
    return j;
  }
  const hu = Cg;
  function bu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 290;
    e.height = b * 525;
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(jg * b, b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111, b * 351);
    f.bezierCurveTo(b * 128.5, b * 218.5, b * 128.5, b * 218.5, b * 146, b * 86);
    f.bezierCurveTo(b * 166.5, b * 66.5, b * 166.5, b * 66.5, b * 187, b * 47);
    f.bezierCurveTo(b * 201, b * 71.5, b * 201, b * 71.5, b * 215, b * 96);
    f.bezierCurveTo(b * 193, b * 228.5, b * 193, b * 228.5, b * 171, b * 361);
    f.closePath();
    em(f, d[0]);
    f.save();
    f.translate(b * 129.5, b * 424);
    f.rotate(0.16);
    nm(f, b * -15.5, b * -63, b * 31, b * 126, b * 10);
    f.restore();
    em(f, d[Ng]);
    rm(f, b * 121, b * 480, b * 20.396078054371138);
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 90, b * 311);
    f.bezierCurveTo(b * 95, b * 324, b * 95, b * 324, b * 100, b * 337);
    f.bezierCurveTo(b * 141.5, b * 345.5, b * 141.5, b * 345.5, b * 183, b * 354);
    f.bezierCurveTo(b * 193.5, b * 342.5, b * 193.5, b * 342.5, b * 204, b * 331);
    f.bezierCurveTo(b * 202, b * 354, b * 202, b * 354, b * 200, b * 377);
    f.bezierCurveTo(b * 147, b * 388, b * 106, b * 371, b * 79, b * 356);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(-rq * b, -ur * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111, b * 351);
    f.bezierCurveTo(b * 128.5, b * 218.5, b * 128.5, b * 218.5, b * 146, b * 86);
    f.bezierCurveTo(b * 166.5, b * 66.5, b * 166.5, b * 66.5, b * 187, b * 47);
    f.bezierCurveTo(b * 201, b * 71.5, b * 201, b * 71.5, b * 215, b * 96);
    f.bezierCurveTo(b * 193, b * 228.5, b * 193, b * 228.5, b * 171, b * 361);
    f.closePath();
    em(f, d[1], d[2], b * 12.5);
    f.save();
    f.translate(b * 129.5, b * 424);
    f.rotate(0.16);
    nm(f, b * -15.5, b * -63, b * 31, b * 126, b * 10);
    f.restore();
    em(f, d[4], d[et], b * 12.5);
    rm(f, b * 121, b * 480, b * 20.396078054371138);
    em(f, d[4], d[dh], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 90, b * 311);
    f.bezierCurveTo(b * 95, b * 324, b * 95, b * 324, Us * b, b * 337);
    f.bezierCurveTo(b * 141.5, b * 345.5, b * 141.5, b * 345.5, b * 183, b * 354);
    f.bezierCurveTo(b * 193.5, b * 342.5, b * 193.5, b * 342.5, b * 204, b * 331);
    f.bezierCurveTo(b * 202, b * 354, b * 202, b * 354, b * 200, b * 377);
    f.bezierCurveTo(b * 147, b * 388, b * 106, b * 371, b * 79, b * 356);
    f.closePath();
    em(f, d[lt], d[tm], b * 12.5);
    return e;
  }
  function iu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    em(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    em(d, undefined, b[Sh], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    em(d, undefined, b[Oq], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    em(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    em(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    em(d, Pq, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    em(d, b[so]);
    return c;
  }
  function lu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 131;
    e.height = b * 121;
    f.translate(0, b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 110, b * 59);
    f.bezierCurveTo(b * 93, b * 61.5, b * 93, b * 61.5, b * 76, b * 64);
    f.bezierCurveTo(b * 84.5, b * 78.5, b * 84.5, b * 78.5, b * 93, b * 93);
    f.bezierCurveTo(b * 70, b * 111, b * 43, b * 103, b * 30, b * 82);
    f.bezierCurveTo(bo * b, b * 61, b * 25, b * 30, b * 51, b * 21);
    f.bezierCurveTo(b * 66, b * uh, b * 83, b * 18, b * 96, b * 29);
    f.bezierCurveTo(b * 104, b * 35, b * 109, b * 47, b * 110, b * 58);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = Lh;
    f.translate(Cm, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 110, b * 59);
    f.bezierCurveTo(b * 93, b * 61.5, b * 93, b * 61.5, b * 76, b * 64);
    f.bezierCurveTo(b * 84.5, b * 78.5, b * 84.5, b * 78.5, b * 93, b * 93);
    f.bezierCurveTo(b * 70, b * 111, b * 43, b * 103, b * 30, b * 82);
    f.bezierCurveTo(b * or, b * 61, b * 25, b * 30, b * 51, b * 21);
    f.bezierCurveTo(b * 66, b * 15, b * 83, b * 18, b * 96, b * 29);
    f.bezierCurveTo(b * 104, b * 35, b * 109, b * 47, b * 110, b * 58);
    f.closePath();
    em(f, d[fo], d[wc], Mh * b);
    return e;
  }
  function ku(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    a.translate(Ka, b * 20);
    if (d == 1) {
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(oo * b, b * 23);
      a.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      a.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      a.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      a.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, xa * b);
      a.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      a.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * Ae, b * 23);
      a.closePath();
      em(a, Nn, c[3], b * Ph);
    }
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(Xa * b, b * 23);
    a.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    a.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    a.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    a.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    a.bezierCurveTo(b * 47, b * 14, b * 47, b * Bh, b * 38, b * 25);
    a.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * ag, b * 23);
    a.closePath();
    em(a, c[ja], c[mj], b * Jn);
    if (e == 1) {
      a.translate(Oq, b * Y);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 67, b * 30);
      a.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      em(a, Nn, c[0], b * 10);
      a.translate(3, b * 0);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 70, Ne * b);
      a.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      em(a, undefined, c[0], b * 10);
      a.translate(oe, b * 0);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 76, b * 8);
      a.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      em(a, ch, c[du], b * no);
      if (d == Lo) {
        a.translate(b * -6, b * -5);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 67, b * 30);
        a.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        em(a, undefined, c[3], b * 18);
        a.translate(3, nj * b);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 70, b * Xj);
        a.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        em(a, undefined, c[3], b * R);
        a.translate(3, Jj * b);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 76, b * 8);
        a.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        em(a, Pq, c[Sr], b * 18);
        a.translate(-6, b * 0);
      } else {
        a.translate(b * -6, b * -5);
      }
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 67, b * 30);
      a.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      em(a, Ls, c[2], b * 10);
      a.translate(Sr, b * 0);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 70, pd * b);
      a.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      em(a, undefined, c[2], b * 10);
      a.translate(fa, b * 0);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 76, Yd * b);
      a.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      em(a, undefined, c[2], b * Mh);
    } else {
      if (d == ja) {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 108, b * 27);
        a.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        a.closePath();
        em(a, undefined, c[fa], b * 18);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 79, b * 30);
        a.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        a.closePath();
        em(a, Ug, c[mq], b * Bs);
      } else {
        a.translate(0, b * -yh);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 108, b * 27);
        a.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        a.closePath();
        em(a, undefined, c[0], b * 7);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(b * 79, b * 30);
        a.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        a.closePath();
        em(a, undefined, c[Jj], I * b);
        a.translate(Js, b * bg);
      }
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 108, b * 27);
      a.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      a.closePath();
      em(a, lq, c[2], b * xr);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 79, b * 30);
      a.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      a.closePath();
      em(a, undefined, c[2], Pj * b);
    }
    return f;
  }
  function mu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 321;
    e.height = b * 284;
    f.translate(b * yq, b * 30);
    f.translate(yh * b, b * jc);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58, b * 33);
    f.bezierCurveTo(b * 81, b * 22, b * 93, b * 26, b * 123, b * 47);
    f.bezierCurveTo(b * 160, b * 73, b * 169, b * 80, b * 191, b * 99);
    f.bezierCurveTo(b * 202, b * 107, b * 211, b * 118, b * 195, b * 151);
    f.bezierCurveTo(b * 181, b * 183, b * 157, b * 192, b * 129, b * 174);
    f.bezierCurveTo(b * 78, b * 140, b * 68, b * 129, b * 37, b * 94);
    f.bezierCurveTo(b * 15, b * 68, b * 25, b * 52, b * 56, b * 34);
    f.closePath();
    em(f, d[bd]);
    f.globalAlpha = fi;
    f.translate(-lh * b, b * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58, b * 33);
    f.bezierCurveTo(b * 81, b * 22, b * 93, b * 26, b * 123, b * 47);
    f.bezierCurveTo(b * 160, b * 73, b * 169, b * 80, b * 191, b * 99);
    f.bezierCurveTo(b * 202, b * 107, b * 211, b * 118, b * 195, b * 151);
    f.bezierCurveTo(b * 181, b * 183, b * 157, b * 192, b * 129, b * 174);
    f.bezierCurveTo(b * 78, b * 140, b * 68, b * 129, b * 37, b * 94);
    f.bezierCurveTo(tg * b, b * 68, b * 25, b * 52, b * 56, b * 34);
    f.closePath();
    em(f, d[1], d[Vn], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 167, b * 120);
    f.bezierCurveTo(b * 196, b * 106, b * 207, b * 111, b * 199, b * 135);
    f.bezierCurveTo(b * 185, b * 172, b * 166, b * 187, b * 145, b * 179);
    f.bezierCurveTo(b * 118, b * 166, b * 127, b * 139, b * 166, b * 121);
    f.closePath();
    em(f, d[Vr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 25, b * 64);
    f.bezierCurveTo(b * 59, b * 96, b * 97, b * 128, b * 129, b * 151);
    f.bezierCurveTo(b * 126, b * 163, b * 134, b * 174, b * 142, b * 180);
    f.bezierCurveTo(b * 114, b * 170, b * 68, b * 134, b * 31, b * 85);
    f.bezierCurveTo(b * 24, b * 71, b * 24, b * 70, b * 25, b * 65);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 141);
    f.bezierCurveTo(b * 181, b * 131, b * 186, b * 135, b * 173, b * 152);
    f.bezierCurveTo(b * 163, b * 163, b * 155, b * 161, b * 151, b * 150);
    f.bezierCurveTo(b * 147, b * 140, b * 155, b * 131, b * 175, b * 125);
    f.bezierCurveTo(b * 190, b * 120, b * 196, b * 121, b * 189, b * 143);
    f.bezierCurveTo(b * 182, b * 167, b * 169, b * 174, b * 157, b * 174);
    f.bezierCurveTo(b * 138, b * 172, b * 139, b * 162, b * 140, b * 156);
    em(f, undefined, d[4], b * 4);
    f.translate(b * -100, b * -30);
    f.translate(b * 10, b * 70);
    f.translate(b * 5, Mh * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58, b * 33);
    f.bezierCurveTo(b * 81, b * 22, b * 93, b * 26, b * 123, b * 47);
    f.bezierCurveTo(b * 160, b * 73, b * 169, b * 80, b * 191, b * 99);
    f.bezierCurveTo(b * 202, b * 107, b * 211, b * 118, b * 195, b * 151);
    f.bezierCurveTo(b * 181, b * 183, b * 157, b * 192, b * 129, b * 174);
    f.bezierCurveTo(b * 78, b * 140, b * 68, b * 129, b * 37, b * 94);
    f.bezierCurveTo(b * ao, b * 68, b * 25, b * 52, b * 56, b * 34);
    f.closePath();
    em(f, d[nj]);
    f.globalAlpha = 1;
    f.translate(-Y * b, b * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58, b * 33);
    f.bezierCurveTo(b * 81, b * 22, b * 93, b * 26, b * 123, b * 47);
    f.bezierCurveTo(b * 160, b * 73, b * 169, b * 80, b * 191, b * 99);
    f.bezierCurveTo(b * 202, b * 107, b * 211, b * 118, b * 195, b * 151);
    f.bezierCurveTo(b * 181, b * 183, b * 157, b * 192, b * 129, b * 174);
    f.bezierCurveTo(b * 78, b * 140, b * 68, b * 129, b * 37, b * 94);
    f.bezierCurveTo(b * 15, b * 68, b * 25, b * 52, b * 56, b * 34);
    f.closePath();
    em(f, d[au], d[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 167, b * 120);
    f.bezierCurveTo(b * 196, b * 106, b * 207, b * 111, b * 199, b * 135);
    f.bezierCurveTo(b * 185, b * 172, b * 166, b * 187, b * 145, b * 179);
    f.bezierCurveTo(b * 118, b * 166, b * 127, b * 139, b * 166, b * 121);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 25, b * 64);
    f.bezierCurveTo(b * 59, b * 96, b * 97, b * 128, b * 129, b * 151);
    f.bezierCurveTo(b * 126, b * 163, b * 134, b * 174, b * 142, b * 180);
    f.bezierCurveTo(b * 114, b * 170, b * 68, b * 134, b * 31, b * 85);
    f.bezierCurveTo(b * 24, b * 71, b * 24, b * 70, b * 25, b * 65);
    f.closePath();
    em(f, d[Cs]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 141);
    f.bezierCurveTo(b * 181, b * 131, b * 186, b * 135, b * 173, b * 152);
    f.bezierCurveTo(b * 163, b * 163, b * 155, b * 161, b * 151, b * 150);
    f.bezierCurveTo(b * 147, b * 140, b * 155, b * 131, b * 175, b * 125);
    f.bezierCurveTo(b * 190, b * 120, b * 196, b * 121, b * 189, b * 143);
    f.bezierCurveTo(b * 182, b * 167, b * 169, b * 174, b * 157, b * 174);
    f.bezierCurveTo(b * 138, b * 172, b * 139, b * 162, b * 140, b * 156);
    em(f, S, d[eh], b * k);
    f.translate(b * rq, b * -80);
    f.translate(b * 5, Tt * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58, b * 33);
    f.bezierCurveTo(b * 81, b * 22, b * 93, b * 26, b * 123, b * 47);
    f.bezierCurveTo(b * 160, b * 73, b * 169, b * 80, b * 191, b * 99);
    f.bezierCurveTo(b * 202, b * 107, b * 211, b * 118, b * 195, b * 151);
    f.bezierCurveTo(b * 181, b * 183, b * 157, b * 192, b * 129, b * 174);
    f.bezierCurveTo(b * 78, b * 140, b * 68, b * 129, b * 37, b * 94);
    f.bezierCurveTo(b * 15, b * 68, b * 25, b * 52, b * 56, b * 34);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = Ic;
    f.translate(-Me * b, b * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58, b * 33);
    f.bezierCurveTo(b * 81, b * 22, b * 93, b * 26, b * 123, b * 47);
    f.bezierCurveTo(b * 160, b * 73, b * 169, b * 80, b * 191, b * 99);
    f.bezierCurveTo(b * 202, b * 107, b * 211, b * 118, b * 195, b * 151);
    f.bezierCurveTo(b * 181, b * 183, b * 157, b * 192, b * 129, b * 174);
    f.bezierCurveTo(b * 78, b * 140, b * 68, b * 129, b * 37, b * 94);
    f.bezierCurveTo(b * 15, b * 68, b * 25, b * 52, b * 56, b * 34);
    f.closePath();
    em(f, d[1], d[Tg], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 167, b * 120);
    f.bezierCurveTo(b * 196, b * 106, b * 207, b * 111, b * 199, b * 135);
    f.bezierCurveTo(b * 185, b * 172, b * 166, b * 187, b * 145, b * 179);
    f.bezierCurveTo(b * 118, b * 166, b * 127, b * 139, b * 166, b * 121);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 25, b * 64);
    f.bezierCurveTo(b * 59, b * 96, b * 97, b * 128, b * 129, b * 151);
    f.bezierCurveTo(b * 126, b * 163, b * 134, b * 174, b * 142, b * 180);
    f.bezierCurveTo(b * 114, b * 170, b * 68, b * 134, b * 31, b * 85);
    f.bezierCurveTo(b * 24, b * 71, b * 24, b * 70, b * 25, b * 65);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 141);
    f.bezierCurveTo(b * 181, b * 131, b * 186, b * 135, b * 173, b * 152);
    f.bezierCurveTo(b * 163, b * 163, b * 155, b * 161, b * 151, b * 150);
    f.bezierCurveTo(b * 147, b * 140, b * 155, b * 131, b * 175, b * 125);
    f.bezierCurveTo(b * 190, b * 120, b * 196, b * 121, b * 189, b * 143);
    f.bezierCurveTo(b * 182, b * 167, b * 169, b * 174, b * 157, b * 174);
    f.bezierCurveTo(b * 138, b * 172, b * 139, b * 162, b * 140, b * 156);
    em(f, undefined, d[Gm], bq * b);
    return e;
  }
  function nu(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    a.translate(xn, b * Dc);
    a.globalAlpha = 0.5;
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 93, b * 55);
    a.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    a.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    a.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    a.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    a.closePath();
    em(a, d[0]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 100, b * 33);
    a.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    a.closePath();
    em(a, d[0]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 181, b * 32);
    a.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    em(a, d[0]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 225, b * 52);
    a.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    em(a, d[0]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 34, b * 134);
    a.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    em(a, d[0]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 249, b * 135);
    a.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    em(a, d[du]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 56, b * 50);
    a.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    em(a, d[sh]);
    a.translate(so, -Eh * b);
    a.globalAlpha = 1;
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(B * b, b * 33);
    a.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    em(a, _e, d[2], b * 40);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 181, b * 32);
    a.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    em(a, undefined, d[2], b * 40);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 225, b * 52);
    a.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    em(a, Rc, d[2], b * 40);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 34, b * 134);
    a.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    em(a, yc, d[Cg], b * 40);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 249, b * 135);
    a.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    em(a, Lr, d[Te], b * 40);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 56, b * 50);
    a.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    em(a, ug, d[Te], b * 40);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 93, b * 55);
    a.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    a.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    a.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    a.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    a.closePath();
    em(a, d[1], d[eu], b * 10);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(oc * b, b * 33);
    a.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    em(a, Rc, d[dm], b * Wh);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 181, b * 32);
    a.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    em(a, A, d[Lh], b * 20);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 225, b * 52);
    a.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    em(a, undefined, d[1], b * 20);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 34, b * 134);
    a.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    em(a, undefined, d[1], Wh * b);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 249, b * 135);
    a.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    em(a, undefined, d[1], b * 20);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 56, b * 50);
    a.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    em(a, undefined, d[1], b * 20);
    rm(a, b * 101, b * 155, b * 20.591260281974);
    em(a, d[oe]);
    rm(a, b * 180, b * 155, b * 20.591260281974);
    em(a, d[yr]);
    rm(a, b * 95, b * 148, b * 7.211102550927978);
    em(a, d[4]);
    rm(a, b * 173, b * 148, b * 7.211102550927978);
    em(a, d[Ud]);
    if (e === 1) {
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 191, b * 107);
      a.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      a.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      a.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      a.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      a.closePath();
      em(a, d[Cs]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 206, b * 98);
      a.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      a.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      a.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      a.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      a.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      a.closePath();
      em(a, d[2]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 172, b * 111);
      a.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      a.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      a.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      a.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      a.closePath();
      em(a, d[wh]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 202, b * 125);
      a.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      a.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      a.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      a.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      a.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      a.closePath();
      em(a, d[ec]);
    }
    return f;
  }
  function ou(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 424;
    e.height = b * 788;
    f.translate(b * 25, b * 25);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 193.5, b * 602.5);
    f.rotate(-0.12);
    nm(f, b * -26.5, b * -97.5, b * 53, b * 195, b * 25);
    f.restore();
    em(f, d[xn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 137, b * 519);
    f.bezierCurveTo(b * 182, b * 513, b * 182, b * 513, b * 227, b * 507);
    f.bezierCurveTo(b * 214, b * 417, b * 189, b * 304, b * 221, b * 180);
    f.bezierCurveTo(b * 191, b * 126, b * 192, b * 105, b * 198, b * 64);
    f.bezierCurveTo(b * 123, b * 102, b * 99, b * 285, b * 137, b * 517);
    f.closePath();
    em(f, d[ke]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 175, b * 119);
    f.bezierCurveTo(b * 176, b * 142, b * 184, b * 165, b * 197, b * 183);
    f.bezierCurveTo(b * 167, b * 325, b * 191, b * 405, b * 202, b * 502);
    f.bezierCurveTo(b * 180, b * 503, b * 180, b * 503, b * 158, b * 504);
    f.bezierCurveTo(b * 135, b * 396, b * 134, b * 185, b * 175, b * 119);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 110, b * 518);
    f.bezierCurveTo(b * 111.5, b * 533, b * 111.5, b * 533, b * 113, b * 548);
    f.bezierCurveTo(b * 162.5, b * 544, b * 162.5, b * 544, b * 212, b * 540);
    f.bezierCurveTo(b * 312, b * 535, b * 281, b * 665, b * 225, b * 665);
    f.bezierCurveTo(b * 227, b * 686.5, b * 227, b * 686.5, b * 229, b * 708);
    f.bezierCurveTo(b * 343, b * 684, b * 354, b * 496, b * 222, b * 498);
    f.bezierCurveTo(b * 165.5, b * 503, b * 165.5, b * 503, b * 109, b * 508);
    f.closePath();
    em(f, d[ke]);
    rm(f, b * 204, b * 693, b * 36.013886210738214);
    em(f, d[xn]);
    rm(f, b * 105, b * 518, b * 30);
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 171, b * 535);
    f.bezierCurveTo(b * 139.5, b * 537.5, b * 139.5, b * 537.5, b * 108, b * 540);
    f.bezierCurveTo(b * 110, b * 527.5, b * 110, b * 527.5, b * 112, b * 515);
    f.bezierCurveTo(b * 148, b * 513, b * 148, b * 513, b * 184, b * 511);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 244, b * 669);
    f.bezierCurveTo(b * 248.5, b * 680, b * 248.5, b * 680, b * 253, b * 691);
    f.bezierCurveTo(b * 239.5, b * 697, b * 239.5, b * 697, b * 226, b * 703);
    f.bezierCurveTo(b * 223, b * 691.5, b * 223, b * 691.5, b * 220, b * 680);
    f.closePath();
    em(f, d[Ng]);
    f.translate(b * -25, b * -25);
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 193.5, b * 602.5);
    f.rotate(-0.12);
    nm(f, b * -26.5, b * -97.5, b * 53, b * 195, b * 25);
    f.restore();
    em(f, d[1], d[z], ci * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 137, b * 519);
    f.bezierCurveTo(b * 182, b * 513, b * 182, b * 513, b * 227, b * 507);
    f.bezierCurveTo(b * 214, b * 417, b * 189, b * 304, b * 221, b * 180);
    f.bezierCurveTo(b * 191, b * 126, b * 192, b * 105, b * 198, b * 64);
    f.bezierCurveTo(b * 123, b * 102, b * 99, b * 285, b * 137, b * 517);
    f.closePath();
    em(f, d[Ie], d[_g], b * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 175, b * 119);
    f.bezierCurveTo(b * 176, b * 142, b * 184, b * 165, b * 197, b * 183);
    f.bezierCurveTo(b * 167, b * 325, b * 191, b * 405, b * 202, b * 502);
    f.bezierCurveTo(b * 180, b * 503, b * 180, b * 503, b * 158, b * 504);
    f.bezierCurveTo(b * 135, b * 396, b * 134, b * 185, b * 175, b * 119);
    f.closePath();
    em(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 110, b * 518);
    f.bezierCurveTo(b * 111.5, b * 533, b * 111.5, b * 533, b * 113, b * 548);
    f.bezierCurveTo(b * 162.5, b * 544, b * 162.5, b * 544, b * 212, b * 540);
    f.bezierCurveTo(b * 312, b * 535, b * 281, b * 665, b * 225, b * 665);
    f.bezierCurveTo(b * 227, b * 686.5, b * 227, b * 686.5, b * 229, b * 708);
    f.bezierCurveTo(b * 343, b * 684, b * 354, b * 496, b * 222, b * 498);
    f.bezierCurveTo(b * 165.5, b * 503, b * 165.5, b * 503, b * 109, b * 508);
    f.closePath();
    em(f, d[6], d[Rh], Bg * b);
    rm(f, b * 204, b * 693, b * 36.013886210738214);
    em(f, d[6], d[4], Oo * b);
    rm(f, b * 105, b * 518, b * 30);
    em(f, d[ss], d[Rh], b * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 171, b * 535);
    f.bezierCurveTo(b * 139.5, b * 537.5, b * 139.5, b * 537.5, b * 108, b * 540);
    f.bezierCurveTo(b * 110, b * 527.5, b * 110, b * 527.5, b * 112, b * 515);
    f.bezierCurveTo(b * 148, b * 513, b * 148, b * 513, b * 184, b * 511);
    f.closePath();
    em(f, d[Qj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 244, b * 669);
    f.bezierCurveTo(b * 248.5, b * 680, b * 248.5, b * 680, b * 253, b * 691);
    f.bezierCurveTo(b * 239.5, b * 697, b * 239.5, b * 697, b * 226, b * 703);
    f.bezierCurveTo(b * 223, b * 691.5, b * 223, b * 691.5, b * 220, b * 680);
    f.closePath();
    em(f, d[Gg]);
    rm(f, b * 204, b * 693, b * 17.029386365926403);
    em(f, d[7]);
    rm(f, b * 106, b * 518, b * 12);
    em(f, d[Oi]);
    return e;
  }
  function pu(b, f, i) {
    var e = document.createElement("canvas");
    var j = e.getContext("2d");
    var a = (d = b * 450) / 2;
    var k = (o = b * 145) / 2;
    var l = mm * b;
    var n = b * 300;
    var h = b * 30;
    var g = n / hu;
    var c = h / eu;
    if (i) {
      var d = b * 145;
      var o = b * 450;
      e.width = d;
      e.height = o;
      j.rotate(Math.PI / Gi);
      j.save();
      j.globalAlpha = 0.5;
      nm(j, _j * b, b * -110, n, h, l);
      em(j, f[sh]);
      j.translate(b * 178, b * -98);
      nm(j, -g, -c - jo * b, b * yq, b * 100, l);
      em(j, f[Gc]);
      j.translate(b * -50, Cd * b);
      nm(j, b * 220, b * -15, b * 90, b * 90, l);
      em(j, f[bd]);
      j.restore();
      j.save();
      j.globalAlpha = X;
      j.translate(b * 250, b * -63);
      nm(j, -g - b * 20, -c, n, h, l);
      em(j, f[Ko], f[2], 4);
      j.translate(b * -70, b * -40);
      nm(j, -g - b * Xe, -c, kh * b, b * 100, l);
      em(j, f[Sr], f[4], 4);
      j.translate(b * -70, b * 15);
      nm(j, b * 220, b * -22, b * 90, b * 90, l);
      em(j, f[Sr], f[4], 4);
      nm(j, b * 230, b * -12, b * 55, b * 55, l);
      em(j, f[Gj]);
      j.translate(b * -70, Vd);
      nm(j, b * -15, b * -2, b * 60, b * 60, l);
      em(j, f[dh]);
      j.restore();
    } else {
      e.width = d;
      e.height = o;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(a, k + b * 10);
      nm(j, -g, -c, n, h, l);
      em(j, f[0]);
      j.translate(b * -65, b * -25);
      nm(j, -g, -c - Th * b, b * 100, b * wr, $n * b);
      em(j, f[du]);
      j.translate(b * -35, b * -5);
      nm(j, b * 220, -Eh * b, b * 90, b * 90, b * 15);
      em(j, f[ke]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(b * 240, b * 70);
      nm(j, -g, -c, n, h, l);
      em(j, f[Ic], f[2], 4);
      j.translate(b * -60, b * -40);
      nm(j, -g - b * 20, -c, b * Us, To * b, b * 15);
      em(j, f[3], f[4], 4);
      j.translate(b * -55, mm * b);
      nm(j, b * 220, b * -22, b * 90, b * 90, b * 15);
      em(j, f[oe], f[4], 4);
      nm(j, b * 240, -bs * b, b * 55, b * 55, b * 12);
      em(j, f[Gj]);
      j.translate(b * 45, b * 0);
      nm(j, b * -145, b * -wh, b * 60, b * 60, b * 12);
      em(j, f[5]);
      j.restore();
    }
    return e;
  }
  function ru(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 104;
    e.height = b * 112;
    f.translate(ke, b * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * zh, b * 44);
    f.bezierCurveTo(b * 30.5, b * 48, b * 30.5, b * 48, b * 45, b * 52);
    f.bezierCurveTo(b * 36.5, b * 63, b * 36.5, b * 63, b * 28, b * 74);
    f.bezierCurveTo(b * 32, b * 86, b * 61, b * 92, b * 78, b * 76);
    f.bezierCurveTo(b * 93, b * 62, b * 92, b * 40, b * 80, b * 26);
    f.bezierCurveTo(b * 65, b * 11, b * 42, b * 16, b * 34, b * 21);
    f.bezierCurveTo(b * 22, b * 27, Hh * b, b * 39, b * 16, b * 44);
    f.closePath();
    em(f, d[nj]);
    f.globalAlpha = wg;
    f.translate(0, b * -nc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(we * b, b * 44);
    f.bezierCurveTo(b * 30.5, b * 48, b * 30.5, b * 48, b * 45, b * 52);
    f.bezierCurveTo(b * 36.5, b * 63, b * 36.5, b * 63, b * 28, b * 74);
    f.bezierCurveTo(b * 32, b * 86, b * 61, b * 92, b * 78, b * 76);
    f.bezierCurveTo(b * 93, b * 62, b * 92, b * 40, b * 80, b * 26);
    f.bezierCurveTo(b * 65, b * Ws, b * 42, b * fe, b * 34, b * 21);
    f.bezierCurveTo(b * 22, b * 27, b * Tr, b * 39, b * 16, b * 44);
    f.closePath();
    em(f, d[X], d[2], b * Ca);
    return e;
  }
  function su(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 290;
    e.height = b * 525;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(xc * b, Hg * b);
    f.translate(b * -20, b * -20);
    f.save();
    f.translate(b * 132, b * 423);
    f.rotate(0.16);
    nm(f, b * -14, b * -61, b * 28, b * 122, b * 10);
    f.restore();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 100, b * 344);
    f.bezierCurveTo(b * 123, b * 214, b * 123, b * 214, b * 146, b * 84);
    f.bezierCurveTo(b * 166.5, b * 65, b * 166.5, b * 65, b * 187, b * 46);
    f.bezierCurveTo(b * 201, b * 71, b * 201, b * 71, b * 215, b * 96);
    f.bezierCurveTo(b * 199.5, b * 226.5, b * 199.5, b * 226.5, b * 184, b * 357);
    f.bezierCurveTo(b * 162.5, b * 362.5, b * 162.5, b * 362.5, b * 141, b * 368);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 75, b * 328);
    f.bezierCurveTo(b * 88, b * 336.5, b * 88, b * 336.5, b * 101, b * 345);
    f.bezierCurveTo(b * 123.5, b * 337.5, b * 123.5, b * 337.5, b * 146, b * 330);
    f.bezierCurveTo(b * 165, b * 343.5, b * 165, b * 343.5, b * 184, b * 357);
    f.bezierCurveTo(b * 198.5, b * 353, b * 198.5, b * 353, b * 213, b * 349);
    f.bezierCurveTo(b * 200.5, b * 364.5, b * 200.5, b * 364.5, b * 188, b * 380);
    f.bezierCurveTo(b * 163, b * 380.5, b * 163, b * 380.5, b * 138, b * 381);
    f.bezierCurveTo(b * 112, b * 373.5, b * 112, b * 373.5, b * 86, b * 366);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 121, b * 332);
    f.bezierCurveTo(b * 133.5, b * 327.5, b * 133.5, b * 327.5, b * 146, b * 323);
    f.bezierCurveTo(b * 157, b * 330.5, b * 157, b * 330.5, b * 168, b * 338);
    f.bezierCurveTo(b * 182.5, b * 219.5, b * 182.5, b * 219.5, b * 197, b * 101);
    f.bezierCurveTo(b * 190, b * 84.5, b * 190, b * 84.5, b * 183, b * 68);
    f.bezierCurveTo(b * 172.5, b * 81, b * 172.5, b * 81, b * 162, b * 94);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105, b * 463);
    f.bezierCurveTo(b * 124.5, b * 466, b * 124.5, b * 466, b * 144, b * 469);
    f.bezierCurveTo(b * 145.5, b * 478.5, b * 145.5, b * 478.5, b * 147, b * 488);
    f.bezierCurveTo(b * 133.5, b * 495.5, b * 133.5, b * 495.5, b * 120, b * 503);
    f.bezierCurveTo(b * 108.5, b * 492, b * 108.5, b * 492, b * 97, b * 481);
    f.closePath();
    em(f, d[Oq]);
    f.globalAlpha = Ps;
    f.translate(b * -20, b * -20);
    f.save();
    f.translate(b * 132, b * 423);
    f.rotate(0.16);
    nm(f, b * -14, b * -61, b * 28, b * 122, b * 10);
    f.restore();
    em(f, d[4], d[lh], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(bi * b, b * 344);
    f.bezierCurveTo(b * 123, b * 214, b * 123, b * 214, b * 146, b * 84);
    f.bezierCurveTo(b * 166.5, b * 65, b * 166.5, b * 65, b * 187, b * 46);
    f.bezierCurveTo(b * 201, b * 71, b * 201, b * 71, b * 215, b * 96);
    f.bezierCurveTo(b * 199.5, b * 226.5, b * 199.5, b * 226.5, b * 184, b * 357);
    f.bezierCurveTo(b * 162.5, b * 362.5, b * 162.5, b * 362.5, b * 141, b * 368);
    f.closePath();
    em(f, d[Mc], d[2], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 75, b * 328);
    f.bezierCurveTo(b * 88, b * 336.5, b * 88, b * 336.5, b * 101, b * 345);
    f.bezierCurveTo(b * 123.5, b * 337.5, b * 123.5, b * 337.5, b * 146, b * 330);
    f.bezierCurveTo(b * 165, b * 343.5, b * 165, b * 343.5, b * 184, b * 357);
    f.bezierCurveTo(b * 198.5, b * 353, b * 198.5, b * 353, b * 213, b * 349);
    f.bezierCurveTo(b * 200.5, b * 364.5, b * 200.5, b * 364.5, b * 188, b * 380);
    f.bezierCurveTo(b * 163, b * 380.5, b * 163, b * 380.5, b * 138, b * 381);
    f.bezierCurveTo(b * 112, b * 373.5, b * 112, b * 373.5, b * 86, b * 366);
    f.closePath();
    em(f, d[wg], d[2], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 121, b * 332);
    f.bezierCurveTo(b * 133.5, b * 327.5, b * 133.5, b * 327.5, b * 146, b * 323);
    f.bezierCurveTo(b * 157, b * 330.5, b * 157, b * 330.5, b * 168, b * 338);
    f.bezierCurveTo(b * 182.5, b * 219.5, b * 182.5, b * 219.5, b * 197, b * 101);
    f.bezierCurveTo(b * 190, b * 84.5, b * 190, b * 84.5, b * 183, b * 68);
    f.bezierCurveTo(b * 172.5, b * 81, b * 172.5, b * 81, b * 162, b * 94);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105, b * 463);
    f.bezierCurveTo(b * 124.5, b * 466, b * 124.5, b * 466, b * 144, b * 469);
    f.bezierCurveTo(b * 145.5, b * 478.5, b * 145.5, b * 478.5, b * 147, b * 488);
    f.bezierCurveTo(b * 133.5, b * 495.5, b * 133.5, b * 495.5, b * 120, b * 503);
    f.bezierCurveTo(b * 108.5, b * 492, b * 108.5, b * 492, b * 97, b * 481);
    f.closePath();
    em(f, d[1], d[2], b * 12.5);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 143, b * 346);
    f.bezierCurveTo(b * 125, b * 352, b * 125, b * 352, b * 107, b * 358);
    f.bezierCurveTo(b * 124, b * 363, b * 140, b * 368, b * 141, b * 368);
    f.bezierCurveTo(b * 156.5, b * 367, b * 156.5, b * 367, b * 172, b * 366);
    f.closePath();
    em(f, d[pg]);
    return e;
  }
  function tu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 469;
    f.globalAlpha = c ? 0.5 : Lh;
    f.translate(b * 20, b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 88, b * 30);
    f.bezierCurveTo(b * 96, b * 49.5, b * 96, b * 49.5, b * 104, b * 69);
    f.bezierCurveTo(b * 105.5, b * 41.5, b * 105.5, b * 41.5, b * 107, b * 14);
    f.bezierCurveTo(b * 114, b * 9.5, b * 114, b * 9.5, b * 121, b * lh);
    f.bezierCurveTo(b * 135.5, b * 27.5, b * 135.5, b * 27.5, b * 150, b * 50);
    f.bezierCurveTo(b * 110.5, b * 286, b * 110.5, b * 286, b * 103, b * 331);
    f.bezierCurveTo(b * 69.5, b * 325, b * 69.5, b * 325, b * 36, b * 319);
    f.bezierCurveTo(b * 56.5, b * 180, b * 56.5, b * 180, b * 77, b * 41);
    f.closePath();
    em(f, d[bd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, b * 31);
    f.bezierCurveTo(b * 125, b * 43, b * 125, b * 43, b * 132, b * 55);
    f.bezierCurveTo(b * 109.5, b * 185.5, b * 109.5, b * 185.5, b * 87, b * 316);
    f.bezierCurveTo(b * 72, b * 313.5, b * 72, b * 313.5, b * 57, b * 311);
    f.bezierCurveTo(b * 76.5, b * 181, b * 76.5, b * 181, b * 96, b * 51);
    f.closePath();
    em(f, d[bd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56, b * 328);
    f.bezierCurveTo(b * 47, b * 385.5, b * 47, b * 385.5, b * 38, b * 443);
    f.bezierCurveTo(b * 52, b * 446, b * 52, b * 446, b * 66, b * 449);
    f.bezierCurveTo(b * 76.5, b * 388.5, b * 76.5, b * 388.5, b * 87, b * 328);
    f.closePath();
    em(f, d[Ea]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 74, b * 302);
    f.bezierCurveTo(b * 104, b * 316.5, b * 104, b * 316.5, b * 134, b * 331);
    f.bezierCurveTo(b * 133, b * 341, b * 133, b * 341, b * 132, b * 351);
    f.bezierCurveTo(b * 69.5, b * 342, b * 69.5, b * 342, b * 7, b * 333);
    f.bezierCurveTo(b * 8, b * 323, b * 8, b * 323, b * Zi, b * 313);
    f.closePath();
    em(f, d[bd]);
    f.save();
    f.translate(b * 51.5, b * 440.5);
    f.rotate(0.2);
    nm(f, b * -20.5, b * -18.5, b * 41, b * 37, b * 10);
    f.restore();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 73, b * 316);
    f.bezierCurveTo(b * 90, b * 324.5, b * 90, b * 324.5, b * 107, b * 333);
    f.bezierCurveTo(b * 70, b * 327.5, b * 70, b * 327.5, b * 33, b * 322);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = fn;
    f.translate(b * -20, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 88, b * 30);
    f.bezierCurveTo(b * 96, b * 49.5, b * 96, b * 49.5, b * 104, b * 69);
    f.bezierCurveTo(b * 105.5, b * 41.5, b * 105.5, b * 41.5, b * 107, Jc * b);
    f.bezierCurveTo(b * 114, b * 9.5, b * 114, b * 9.5, b * 121, b * 5);
    f.bezierCurveTo(b * 135.5, b * 27.5, b * 135.5, b * 27.5, b * 150, b * 50);
    f.bezierCurveTo(b * 110.5, b * 286, b * 110.5, b * 286, b * 103, b * 331);
    f.bezierCurveTo(b * 69.5, b * 325, b * 69.5, b * 325, b * 36, b * 319);
    f.bezierCurveTo(b * 56.5, b * 180, b * 56.5, b * 180, b * 77, b * 41);
    f.closePath();
    em(f, d[wg], d[2], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, b * 31);
    f.bezierCurveTo(b * 125, b * 43, b * 125, b * 43, b * 132, b * 55);
    f.bezierCurveTo(b * 109.5, b * 185.5, b * 109.5, b * 185.5, b * 87, b * 316);
    f.bezierCurveTo(b * 72, b * 313.5, b * 72, b * 313.5, b * 57, b * 311);
    f.bezierCurveTo(b * 76.5, b * 181, b * 76.5, b * 181, b * 96, b * 51);
    f.closePath();
    em(f, d[er]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 88, b * 30);
    f.bezierCurveTo(b * 96, b * 49.5, b * 96, b * 49.5, b * 104, b * 69);
    f.bezierCurveTo(b * 105.5, b * 41.5, b * 105.5, b * 41.5, b * 107, Xc * b);
    f.bezierCurveTo(b * 114, b * 9.5, b * 114, b * 9.5, b * 121, Me * b);
    f.bezierCurveTo(b * 135.5, b * 27.5, b * 135.5, b * 27.5, b * 150, b * 50);
    f.bezierCurveTo(b * 110.5, b * 286, b * 110.5, b * 286, b * 103, b * 331);
    f.bezierCurveTo(b * 69.5, b * 325, b * 69.5, b * 325, b * 36, b * 319);
    f.bezierCurveTo(b * 56.5, b * 180, b * 56.5, b * 180, b * 77, b * 41);
    f.closePath();
    em(f, Z, d[2], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56, b * 328);
    f.bezierCurveTo(b * 47, b * 385.5, b * 47, b * 385.5, b * 38, b * 443);
    f.bezierCurveTo(b * 52, b * 446, b * 52, b * 446, b * 66, b * 449);
    f.bezierCurveTo(b * 76.5, b * 388.5, b * 76.5, b * 388.5, b * 87, b * 328);
    f.closePath();
    em(f, d[4], d[5], b * Bo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 74, b * 302);
    f.bezierCurveTo(b * 104, b * 316.5, b * 104, b * 316.5, b * 134, b * 331);
    f.bezierCurveTo(b * 133, b * 341, b * 133, b * 341, b * 132, b * 351);
    f.bezierCurveTo(b * 69.5, b * 342, b * 69.5, b * 342, Bo * b, b * 333);
    f.bezierCurveTo(b * kc, b * 323, b * 8, b * 323, Zi * b, b * 313);
    f.closePath();
    em(f, d[_n], d[Qm], b * 7);
    f.save();
    f.translate(b * 51.5, b * 440.5);
    f.rotate(0.2);
    nm(f, b * -20.5, b * -18.5, b * 41, b * 37, b * _);
    f.restore();
    em(f, d[Ld], d[Qm], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 73, b * 316);
    f.bezierCurveTo(b * 90, b * 324.5, b * 90, b * 324.5, b * 107, b * 333);
    f.bezierCurveTo(b * 70, b * 327.5, b * 70, b * 327.5, b * 33, b * 322);
    f.closePath();
    em(f, d[hn]);
    return e;
  }
  function uu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 290;
    e.height = b * 525;
    f.globalAlpha = c ? 0.5 : lt;
    f.translate(b * 20, yg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111, b * 351);
    f.bezierCurveTo(b * 129, b * 218, b * 129, b * 218, b * 147, b * 85);
    f.bezierCurveTo(b * 167, b * 65.5, b * 167, b * 65.5, b * 187, b * 46);
    f.bezierCurveTo(b * 201.5, b * 70.5, b * 201.5, b * 70.5, b * 216, b * 95);
    f.bezierCurveTo(b * 194.5, b * 227.5, b * 194.5, b * 227.5, b * 173, b * 360);
    f.closePath();
    em(f, d[0]);
    f.save();
    f.translate(b * 131, b * 425.5);
    f.rotate(0.16);
    nm(f, b * -14, b * -56.5, b * 28, b * 113, b * kc);
    f.restore();
    em(f, d[qh]);
    rm(f, b * 122, b * 480, b * 18.439088914585774);
    em(f, d[ke]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79, b * 371);
    f.bezierCurveTo(b * 131, b * 373, b * 145, b * 378, b * 197, b * 388);
    f.bezierCurveTo(b * 205, b * 382.5, b * 205, b * 382.5, b * 213, b * 377);
    f.bezierCurveTo(b * 167, b * 352, b * 117, b * 345, b * 69, b * 355);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = yd;
    f.translate(-Jq * b, -Ji * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111, b * 351);
    f.bezierCurveTo(b * 129, b * 218, b * 129, b * 218, b * 147, b * 85);
    f.bezierCurveTo(b * 167, b * 65.5, b * 167, b * 65.5, b * 187, b * 46);
    f.bezierCurveTo(b * 201.5, b * 70.5, b * 201.5, b * 70.5, b * 216, b * 95);
    f.bezierCurveTo(b * 194.5, b * 227.5, b * 194.5, b * 227.5, b * 173, b * 360);
    f.closePath();
    em(f, d[1], d[wh], b * 12.5);
    f.save();
    f.translate(b * 131, b * 425.5);
    f.rotate(0.16);
    nm(f, b * -14, b * -56.5, b * 28, b * 113, b * 8);
    f.restore();
    em(f, d[Jn], d[Cd], b * 12.5);
    rm(f, b * 122, b * 480, b * 18.439088914585774);
    em(f, d[Ha], d[br], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79, b * 371);
    f.bezierCurveTo(b * 131, b * 373, b * 145, b * 378, b * 197, b * 388);
    f.bezierCurveTo(b * 205, b * 382.5, b * 205, b * 382.5, b * 213, b * 377);
    f.bezierCurveTo(b * 167, b * 352, b * 117, b * 345, b * 69, b * 355);
    f.closePath();
    em(f, d[4], d[dh], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 128, b * 345);
    f.bezierCurveTo(b * 142, b * 345, b * 147, b * 346, b * 158, b * 349);
    f.bezierCurveTo(b * 177.5, b * 224.5, b * 177.5, b * 224.5, b * 197, b * 100);
    f.bezierCurveTo(b * 190.5, b * 84.5, b * 190.5, b * 84.5, b * 184, b * 69);
    f.bezierCurveTo(b * 173.5, b * 82, b * 173.5, b * 82, b * 163, b * 95);
    f.closePath();
    em(f, d[er]);
    return e;
  }
  function vu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var a = Math.max(c.height, b.height);
    d.width = f;
    d.height = a;
    e.drawImage(b, (f - b.width) / wc, (a - b.height) / Cs);
    e.drawImage(c, (f - c.width) / ih, (a - c.height) / z);
    return d;
  }
  function wu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = Us * b;
    e.height = b * 250;
    f.translate(b * -135, b * -75);
    f.globalAlpha = c ? 0.8 : Lo;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 178.5, b * 238.03125);
    f.bezierCurveTo(b * 177, b * 175.03125, b * 177, b * 175.03125, b * 175.5, b * 112.03125);
    f.bezierCurveTo(b * 184.5, b * 100.53125, b * 184.5, b * 100.53125, b * 193.5, b * 89.03125);
    f.bezierCurveTo(b * 202, b * 100.03125, b * 202, b * 100.03125, b * 210.5, b * 111.03125);
    f.bezierCurveTo(b * 209.5, b * 174.03125, b * 209.5, b * 174.03125, b * 208.5, b * 237.03125);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 155.5, b * 239.03125);
    f.bezierCurveTo(b * 194, b * 238.53125, b * 194, b * 238.53125, b * 232.5, b * 238.03125);
    f.bezierCurveTo(b * 232.5, b * 243.03125, b * 232.5, b * 243.03125, b * 232.5, b * 248.03125);
    f.bezierCurveTo(b * 194, b * 248.53125, b * 194, b * 248.53125, b * 155.5, b * 249.03125);
    f.closePath();
    em(f, d[0]);
    rm(f, b * 160.5, b * 243.03125, b * 7);
    em(f, d[bd]);
    rm(f, b * 227.5, b * 242.03125, b * 7);
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 185.5, b * 253.03125);
    f.bezierCurveTo(b * 193.5, b * 253.03125, b * 193.5, b * 253.03125, b * 201.5, b * 253.03125);
    f.bezierCurveTo(b * 201.5, b * 276.03125, b * 201.5, b * 276.03125, b * 201.5, b * 299.03125);
    f.bezierCurveTo(b * 194.5, b * 299.03125, b * 194.5, b * 299.03125, b * 187.5, b * 299.03125);
    f.closePath();
    em(f, d[0], d[0], b * 5);
    rm(f, b * 194, b * 298, b * 9);
    em(f, d[Ea], d[0], Gj * b);
    f.globalAlpha = 1;
    f.translate(-co * b, Sg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 178.5, b * 238.03125);
    f.bezierCurveTo(b * 177, b * 175.03125, b * 177, b * 175.03125, b * 175.5, b * 112.03125);
    f.bezierCurveTo(b * 184.5, b * 100.53125, b * 184.5, b * 100.53125, b * 193.5, b * 89.03125);
    f.bezierCurveTo(b * 202, b * 100.03125, b * 202, b * 100.03125, b * 210.5, b * 111.03125);
    f.bezierCurveTo(b * 209.5, b * 174.03125, b * 209.5, b * 174.03125, b * 208.5, b * 237.03125);
    f.closePath();
    em(f, d[E], d[4], br * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 155.5, b * 239.03125);
    f.bezierCurveTo(b * 194, b * 238.53125, b * 194, b * 238.53125, b * 232.5, b * 238.03125);
    f.bezierCurveTo(b * 232.5, b * 243.03125, b * 232.5, b * 243.03125, b * 232.5, b * 248.03125);
    f.bezierCurveTo(b * 194, b * 248.53125, b * 194, b * 248.53125, b * 155.5, b * 249.03125);
    f.closePath();
    em(f, d[1], d[Te], b * 5);
    rm(f, b * 160.5, b * 243.03125, b * $q);
    em(f, d[1], d[Tg], Gj * b);
    rm(f, b * 227.5, b * 242.03125, b * 7);
    em(f, d[Ps], d[Tg], b * qn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 185.5, b * 253.03125);
    f.bezierCurveTo(b * 193.5, b * 253.03125, b * 193.5, b * 253.03125, b * 201.5, b * 253.03125);
    f.bezierCurveTo(b * 201.5, b * 276.03125, b * 201.5, b * 276.03125, b * 201.5, b * 299.03125);
    f.bezierCurveTo(b * 194.5, b * 299.03125, b * 194.5, b * 299.03125, b * 187.5, b * 299.03125);
    f.closePath();
    em(f, d[1], d[eu], b * 7);
    rm(f, b * 194, b * 298, Zi * b);
    em(f, d[fo], d[ih], Bo * b);
    return e;
  }
  function xu(b, f, i) {
    var e = document.createElement("canvas");
    var j = e.getContext("2d");
    var a = b * 105;
    var k = b * 125;
    var l = b * 4;
    var n = b * 10;
    var h = b * Me;
    var g = b * co;
    var c = b * 110;
    var d = g / 2;
    var m = c / wh;
    e.width = a;
    e.height = k;
    j.save();
    j.globalAlpha = f ? 0.5 : Ic;
    j.translate(a / 2 + b * V, k / z + h);
    nm(j, -d, -m, g, c, n);
    em(j, f ? i[0] : i[1]);
    j.translate(b * -130 + h, b * -128 + h);
    j.beginPath();
    j.bezierCurveTo(b * 159, b * 93, b * 156, b * 99, b * 154, b * 102);
    j.bezierCurveTo(b * 128, b * 92, b * 90, b * 93, b * 72, b * 96);
    j.bezierCurveTo(b * 68, b * 84, b * 143, b * 73, b * 162, b * 86);
    j.closePath();
    em(j, i[2]);
    j.restore();
    j.translate(a / 2 + 8, k / ih);
    j.globalAlpha = 1;
    nm(j, -d, -m, g, c, n);
    em(j, i[3], i[4], l);
    j.translate(b * -130, b * -125);
    j.beginPath();
    j.bezierCurveTo(b * 159, b * 93, b * 156, b * 99, b * 154, b * 102);
    j.bezierCurveTo(b * 128, b * 92, b * 90, b * 93, b * 72, b * 96);
    j.bezierCurveTo(b * 68, b * 84, b * 143, b * 73, b * 162, b * 86);
    j.closePath();
    em(j, i[5], i[ei], l);
    return e;
  }
  function yu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 290;
    e.height = b * 525;
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(po * b, b * ur);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 112, b * 356);
    f.bezierCurveTo(b * 124, b * 220.5, b * 124, b * 220.5, b * 136, b * 85);
    f.bezierCurveTo(b * 162.5, b * 65.5, b * 162.5, b * 65.5, b * 189, b * 46);
    f.bezierCurveTo(b * 208.5, b * 72.5, b * 208.5, b * 72.5, b * 228, b * 99);
    f.bezierCurveTo(b * 200, b * 232, b * 200, b * 232, b * 172, b * 365);
    f.closePath();
    em(f, d[0]);
    f.save();
    f.translate(b * 131, b * 423);
    f.rotate(0.16);
    nm(f, b * -14, b * -53, b * 28, b * 106, b * 10);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 122, b * 480);
    f.rotate(1.72);
    cm(f, cn, b * 26.476404589747453, b * gg);
    f.restore();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 210, b * 387);
    f.bezierCurveTo(b * 138, b * 376, b * 138, b * 376, b * 66, b * 365);
    f.bezierCurveTo(b * 76, b * 355, b * 76, b * 355, b * 86, b * 345);
    f.bezierCurveTo(b * 99, b * 346.5, b * 99, b * 346.5, b * 112, b * 348);
    f.bezierCurveTo(b * 128.5, b * 344, b * 128.5, b * 344, b * 145, b * 340);
    f.bezierCurveTo(b * 158, b * 348, b * 158, b * 348, b * 171, b * 356);
    f.bezierCurveTo(b * 184, b * 358, b * 184, b * 358, b * 197, b * 360);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 129, b * 338);
    f.bezierCurveTo(b * 137, b * 336, b * 137, b * 336, b * 145, b * 334);
    f.bezierCurveTo(b * 152.5, b * 338, b * 152.5, b * 338, b * 160, b * 342);
    f.bezierCurveTo(b * 184, b * 224, b * 184, b * 224, b * 208, b * 106);
    f.bezierCurveTo(b * 197, b * 88, b * 187, b * 70, b * 186, b * 70);
    f.bezierCurveTo(b * 169.5, b * 83, b * 169.5, b * 83, b * 153, b * 96);
    f.closePath();
    em(f, d[xn]);
    f.globalAlpha = 1;
    f.translate(b * -20, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 112, b * 356);
    f.bezierCurveTo(b * 124, b * 220.5, b * 124, b * 220.5, b * 136, b * 85);
    f.bezierCurveTo(b * 162.5, b * 65.5, b * 162.5, b * 65.5, b * 189, b * 46);
    f.bezierCurveTo(b * 208.5, b * 72.5, b * 208.5, b * 72.5, b * 228, b * 99);
    f.bezierCurveTo(b * 200, b * 232, b * 200, b * 232, b * 172, b * 365);
    f.closePath();
    em(f, d[1], d[2], b * 12.5);
    f.save();
    f.translate(b * 131, b * 423);
    f.rotate(0.16);
    nm(f, b * -14, b * -53, b * 28, b * 106, b * Zo);
    f.restore();
    em(f, d[4], d[qn], b * 12.5);
    f.save();
    f.translate(b * 122, b * 480);
    f.rotate(1.72);
    cm(f, eh, b * 26.476404589747453, jc * b);
    f.restore();
    em(f, d[fi], d[2], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 210, b * 387);
    f.bezierCurveTo(b * 138, b * 376, b * 138, b * 376, b * 66, b * 365);
    f.bezierCurveTo(b * 76, b * 355, b * 76, b * 355, b * 86, b * 345);
    f.bezierCurveTo(b * 99, b * 346.5, b * 99, b * 346.5, b * 112, b * 348);
    f.bezierCurveTo(b * 128.5, b * 344, b * 128.5, b * 344, b * 145, b * 340);
    f.bezierCurveTo(b * 158, b * 348, b * 158, b * 348, b * 171, b * 356);
    f.bezierCurveTo(b * 184, b * 358, b * 184, b * 358, b * 197, b * 360);
    f.closePath();
    em(f, d[dm], d[2], b * 12.5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 129, b * 338);
    f.bezierCurveTo(b * 137, b * 336, b * 137, b * 336, b * 145, b * 334);
    f.bezierCurveTo(b * 152.5, b * 338, b * 152.5, b * 338, b * 160, b * 342);
    f.bezierCurveTo(b * 184, b * 224, b * 184, b * 224, b * 208, b * 106);
    f.bezierCurveTo(b * 197, b * 88, b * 187, b * 70, b * 186, b * 70);
    f.bezierCurveTo(b * 169.5, b * 83, b * 169.5, b * 83, b * 153, b * 96);
    f.closePath();
    em(f, d[oe]);
    return e;
  }
  function zu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 154;
    e.height = b * 261;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(qh, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 125, b * 69);
    f.bezierCurveTo(b * 123.5, b * 141.5, b * 123.5, b * 141.5, b * 122, b * 214);
    f.bezierCurveTo(b * 123, b * 228, b * 119, b * 239, b * 102, b * 239);
    f.bezierCurveTo(b * 90, b * 238, b * 86, b * 225, b * 89, b * 197);
    f.bezierCurveTo(b * 92, b * 159, b * 92, b * 141, b * 94, b * 84);
    f.bezierCurveTo(b * 94, b * 58, b * 87, b * 50, b * 73, b * 52);
    f.bezierCurveTo(b * 53, b * 54, b * 54, b * 92, b * 34, b * 87);
    f.bezierCurveTo(b * fd, b * 85, b * 22, b * 58, b * 34, b * 40);
    f.bezierCurveTo(b * 44, b * 24, b * 68, b * 17, b * 86, b * 21);
    f.bezierCurveTo(b * 111, b * 23, b * 123, b * 39, b * 125, b * 67);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -as * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 125, b * 69);
    f.bezierCurveTo(b * 123.5, b * 141.5, b * 123.5, b * 141.5, b * 122, b * 214);
    f.bezierCurveTo(b * 123, b * 228, b * 119, b * 239, b * 102, b * 239);
    f.bezierCurveTo(b * 90, b * 238, b * 86, b * 225, b * 89, b * 197);
    f.bezierCurveTo(b * 92, b * 159, b * 92, b * 141, b * 94, b * 84);
    f.bezierCurveTo(b * 94, b * 58, b * 87, b * 50, b * 73, b * 52);
    f.bezierCurveTo(b * 53, b * 54, b * 54, b * 92, b * 34, b * 87);
    f.bezierCurveTo(b * 13, b * 85, b * 22, b * 58, b * 34, b * 40);
    f.bezierCurveTo(b * 44, b * 24, b * 68, b * 17, b * 86, b * 21);
    f.bezierCurveTo(b * 111, b * 23, b * 123, b * 39, b * 125, b * 67);
    f.closePath();
    em(f, d[1], d[2], sj * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 43);
    f.bezierCurveTo(b * 31, b * 61, b * 43, b * 70, b * 51, b * 75);
    f.bezierCurveTo(b * 48, b * 84, b * 41, b * 89, b * 33, b * 86);
    f.bezierCurveTo(b * 23, b * 88, b * 20, b * 76, b * 23, b * 62);
    f.closePath();
    em(f, d[mq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 45, b * 29);
    f.bezierCurveTo(b * 49, b * 45, b * 61, b * 54, b * 64, b * 55);
    f.bezierCurveTo(b * 67.5, b * 53, b * 67.5, b * 53, b * 71, b * 51);
    f.bezierCurveTo(b * 80, b * 44, b * 83, b * 33, b * 82, b * 20);
    f.bezierCurveTo(b * 59, b * gq, b * 51, b * 23, b * 45, b * 30);
    f.closePath();
    em(f, d[jh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 86, b * 56);
    f.bezierCurveTo(b * 90, b * 33, b * 103, b * 25, b * 105, b * 27);
    f.bezierCurveTo(b * 116, b * 31, b * 121, b * 45, b * 122, b * 50);
    f.bezierCurveTo(b * 112, b * 62, b * 103, b * 63, b * 91, b * 62);
    f.bezierCurveTo(b * 89, b * 59.5, b * 89, b * 59.5, b * 87, b * 57);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 93, b * 81);
    f.bezierCurveTo(b * 109, b * 82, b * 123, b * 70, b * 124, b * 63);
    f.bezierCurveTo(b * 124, b * 75.5, b * 124, b * 75.5, b * 124, b * 88);
    f.bezierCurveTo(b * 119, b * 99, b * 103, b * 103, b * 94, b * 103);
    f.closePath();
    em(f, d[mq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 93, b * 124);
    f.bezierCurveTo(b * 108, b * 125, b * 122, b * 113, b * 124, b * 106);
    f.bezierCurveTo(b * 124, b * 119, b * 124, b * 129, b * 124, b * 132);
    f.bezierCurveTo(b * 110, b * 147, b * 94, b * 148, b * 90, b * 147);
    f.closePath();
    em(f, d[uc]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 90, b * 170);
    f.bezierCurveTo(b * 104, b * 166, b * 122, b * 158, b * 122, b * 151);
    f.bezierCurveTo(b * 122, b * 162.5, b * 122, b * 162.5, b * 122, b * 174);
    f.bezierCurveTo(b * 111, b * 191, b * 97, b * 191, b * 89, b * 191);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 88, b * 208);
    f.bezierCurveTo(b * kh, b * 209, b * 115, b * 205, b * 122, b * 193);
    f.bezierCurveTo(b * 122, b * 205.5, b * 122, b * 205.5, b * 122, b * 218);
    f.bezierCurveTo(b * 115, b * 229, b * 103, b * 235, b * 90, b * 228);
    f.bezierCurveTo(b * 88, b * 224, b * 88, b * 217, b * 88, b * 211);
    f.closePath();
    em(f, d[fa]);
    f.globalAlpha = 0.4;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 22, b * 81);
    f.bezierCurveTo(b * 32, b * 84, b * 41, b * 81, b * 45, b * 68);
    f.bezierCurveTo(b * 50, b * 50, b * 62, b * 40, b * 79, b * 43);
    f.bezierCurveTo(b * 95, b * 45, b * 102, b * 58, b * 101, b * 81);
    f.bezierCurveTo(b * 99.5, b * 120.5, b * 99.5, b * 120.5, b * 98, b * 160);
    f.bezierCurveTo(b * 96.5, b * 191.5, b * 96.5, b * 191.5, b * 95, b * 223);
    f.bezierCurveTo(b * 93, b * 232, b * 101, b * 235, b * 108, b * 238);
    f.bezierCurveTo(Jo * b, b * 240, b * 90, b * 233, b * 90, b * 224);
    f.bezierCurveTo(b * 92, b * 157, b * 92, b * 157, b * 94, b * 90);
    f.bezierCurveTo(b * 94, b * 56, b * 89, b * 53, b * 77, b * 51);
    f.bezierCurveTo(b * 58, b * 50, b * 54, b * 59, b * 49, b * 75);
    f.bezierCurveTo(b * 44, b * 91, b * 28, b * 90, b * 23, b * 81);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = dm;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 82, b * 123);
    f.bezierCurveTo(b * 88, b * 130, b * 88, b * 127, b * 94, b * 128);
    f.bezierCurveTo(b * 91, b * 136, b * 94, b * 137, b * 99, b * 142);
    f.bezierCurveTo(b * 97, b * 149, b * 99, b * 152, b * 105, b * 155);
    f.bezierCurveTo(b * 107, b * 159, b * 113, b * 159, b * 120, b * 158);
    f.bezierCurveTo(b * 121, b * 160, b * 125, b * 163, b * 132, b * 163);
    f.bezierCurveTo(b * 133, b * 166, b * 136, b * 169, b * 138, b * 170);
    f.bezierCurveTo(b * 133, b * 171, b * 132, b * 172, b * 129, b * 174);
    f.bezierCurveTo(b * 122, b * 170, b * 120, b * 170, b * 116, b * 174);
    f.bezierCurveTo(b * 108, b * 170.5, b * 108, b * 170.5, b * Re, b * 167);
    f.bezierCurveTo(b * 95, b * 172, b * 94, b * 179, b * 95, b * 184);
    f.bezierCurveTo(b * 87, b * 185, b * 87, b * 189, b * 88, b * 194);
    f.bezierCurveTo(b * 82, b * 194, b * 81, b * 195, b * 79, b * 197);
    f.bezierCurveTo(b * 78, b * 192, b * 78, b * 191, b * 77, b * 189);
    f.bezierCurveTo(b * 81, b * 185, b * 82, b * 183, b * 80, b * 176);
    f.bezierCurveTo(b * 89, b * 170, b * 92, b * 168, b * 95, b * 163);
    f.bezierCurveTo(b * 91, b * 151, b * 88, b * 151, b * 82, b * 147);
    f.bezierCurveTo(b * 85, b * 142, b * 85, b * 137, b * 81, b * 133);
    f.bezierCurveTo(b * 84, b * 127, b * 84, b * 125, b * 82, b * 124);
    f.closePath();
    em(f, d[sj], d[5], b * 4);
    rm(f, b * 107, b * 152, b * 9);
    em(f, d[mc]);
    rm(f, b * 105, b * 173, b * 9);
    em(f, d[6]);
    rm(f, b * 87, b * 161, b * 9);
    em(f, d[6]);
    rm(f, b * 106, b * 147, b * 4);
    em(f, d[7]);
    rm(f, b * 104, b * 167, Jr * b);
    em(f, d[7]);
    rm(f, b * 86, b * 154, b * 4);
    em(f, d[Bo]);
    return e;
  }
  const Au = Jd;
  function Bu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 350;
    e.height = b * 140;
    f.translate(b * -50, b * -150);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 184.5, b * 222.0625);
    f.bezierCurveTo(b * 185.5, b * 184.0625, b * 302.5, b * 171.0625, b * 313.5, b * 222.0625);
    f.bezierCurveTo(b * 330.5, b * 263.0625, b * 181.5, b * 274.0625, b * 184.5, b * 223.0625);
    f.closePath();
    em(f, d[Oq], d[1], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131.5, b * 241.0625);
    f.bezierCurveTo(b * 144.5, b * 278.0625, b * 270.5, b * 209.0625, b * 228.5, b * 174.0625);
    f.bezierCurveTo(b * 196.5, b * 147.0625, b * 117.5, b * 196.0625, b * 131.5, b * 240.0625);
    f.closePath();
    em(f, d[Jj], d[1], b * kc);
    rm(f, b * 270.5, b * 225.0625, b * 15.811388300841896);
    em(f, d[2]);
    rm(f, b * 243.5, b * 225.0625, b * 6.082762530298219);
    em(f, d[2]);
    rm(f, b * 255.5, b * 210.0625, b * 10.816653826391969);
    em(f, d[tm]);
    rm(f, b * 167.5, b * 215.0625, b * 15.297058540778355);
    em(f, d[2]);
    rm(f, b * 176.5, b * 204.0625, b * 7.280109889280518);
    em(f, d[wc]);
    rm(f, b * 206.5, b * 189.0625, b * 7.280109889280518);
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 151.5, b * 212.0625);
    f.bezierCurveTo(b * 161.5, b * 204.0625, b * 173.5, b * 214.0625, b * 158.5, b * 221.0625);
    f.bezierCurveTo(b * 145.5, b * 228.0625, b * 144.5, b * 216.0625, b * 151.5, b * 212.0625);
    f.closePath();
    em(f, d[E], d[pj], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 194.5, b * 209.0625);
    f.bezierCurveTo(b * 205.5, b * 202.0625, b * 215.5, b * 207.0625, b * 199.5, b * 217.0625);
    f.bezierCurveTo(b * 187.5, b * 224.0625, b * 182.5, b * 217.0625, b * 194.5, b * 209.0625);
    f.closePath();
    em(f, d[oe], d[4], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 188.5, b * 183.0625);
    f.bezierCurveTo(b * 201.5, b * 176.0625, b * 213.5, b * 187.0625, b * 193.5, b * 193.0625);
    f.bezierCurveTo(b * 185.5, b * 194.0625, b * 175.5, b * 189.0625, b * 188.5, b * 183.0625);
    f.closePath();
    em(f, d[Vr], d[4], b * mn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 261.5, b * 202.0625);
    f.bezierCurveTo(b * 274.5, b * 201.0625, b * 282.5, b * 214.0625, b * 261.5, b * 215.0625);
    f.bezierCurveTo(b * 246.5, b * 214.0625, b * 248.5, b * 203.0625, b * 261.5, b * 202.0625);
    f.closePath();
    em(f, d[Xg], d[4], b * k);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 240.5, b * 231.0625);
    f.bezierCurveTo(b * 255.5, b * 231.0625, b * 254.5, b * 243.0625, b * 240.5, b * 242.0625);
    f.bezierCurveTo(b * 225.5, b * 239.0625, b * 225.5, b * 232.0625, b * 240.5, b * 231.0625);
    f.closePath();
    em(f, d[3], d[Gs], Dd * b);
    return e;
  }
  const Cu = ss;
  function ju(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 118;
    e.height = b * 114;
    f.translate(xn, b * co);
    rm(f, b * 42, b * 43, b * 24.758836806279895);
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65, b * 90);
    f.bezierCurveTo(b * 72, b * 91, b * 75, b * 92, b * 71, b * 96);
    f.bezierCurveTo(b * 65, b * 98, b * 65, b * 94, b * 65, b * 91);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87, b * 45);
    f.bezierCurveTo(b * 108, b * 59, b * yq, b * 86, b * 85, b * 91);
    f.bezierCurveTo(b * 80, b * 96, b * 68, b * 95, b * 58, b * 87);
    f.bezierCurveTo(b * 53, b * 80, b * 61, b * 64, b * 66, b * 58);
    f.bezierCurveTo(b * 73, b * 48, b * 78, b * 44, b * 87, b * 45);
    f.closePath();
    em(f, d[0]);
    f.translate(sh, b * -10);
    rm(f, b * 42, b * 43, b * 24.758836806279895);
    em(f, d[Ej], d[2], dh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65, b * 90);
    f.bezierCurveTo(b * 72, b * 91, b * 75, b * 92, b * 71, b * 96);
    f.bezierCurveTo(b * 65, b * 98, b * 65, b * 94, b * 65, b * 91);
    f.closePath();
    em(f, d[1], d[tm], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87, b * 45);
    f.bezierCurveTo(b * 108, b * 59, b * 100, b * 86, b * 85, b * 91);
    f.bezierCurveTo(b * 80, b * 96, b * 68, b * 95, b * 58, b * 87);
    f.bezierCurveTo(b * 53, b * 80, b * 61, b * 64, b * 66, b * 58);
    f.bezierCurveTo(b * 73, b * 48, b * 78, b * 44, b * 87, b * 45);
    f.closePath();
    em(f, d[wg], d[hu], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 16);
    f.bezierCurveTo(b * 55, Rq * b, b * 54, b * 20, b * 55, b * 22);
    f.bezierCurveTo(b * 52, b * 24.5, b * 52, b * 24.5, b * 49, b * 27);
    f.bezierCurveTo(b * 45, b * 25, b * 45, b * 25, b * 41, b * 23);
    f.bezierCurveTo(b * 45, Fc * b, b * 48, b * rh, b * 52, za * b);
    f.closePath();
    em(f, d[3], d[_g], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 62, b * 30);
    f.bezierCurveTo(b * 66, b * 29, b * 64, b * 30, b * 66, b * 30);
    f.bezierCurveTo(b * 67, b * 31, b * 67, b * 31, b * 68, b * 32);
    f.bezierCurveTo(b * 66.5, b * 33.5, b * 66.5, b * 33.5, b * 65, b * 35);
    f.bezierCurveTo(b * 63.5, b * 32.5, b * 63.5, b * 32.5, b * 62, b * 30);
    f.closePath();
    em(f, d[on], d[sj], b * Co);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 29, b * 21);
    f.bezierCurveTo(b * 31, b * 22, b * 31, b * 26, b * 29, b * 29);
    f.bezierCurveTo(b * 26, b * 28.5, b * 26, b * 28.5, b * 23, b * 28);
    f.bezierCurveTo(b * 23, b * 26.5, b * 23, b * 26.5, b * 23, b * 25);
    f.bezierCurveTo(b * 25, b * 23, b * 25, b * 23, b * 27, b * 21);
    f.closePath();
    em(f, d[fa], d[sj], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * vr, b * 36);
    f.bezierCurveTo(b * 23, b * 36, b * 24, b * 42, b * 19, b * 46);
    f.bezierCurveTo(b * 12, b * 39, Ui * b, b * 38, Ah * b, b * 37);
    f.closePath();
    em(f, d[oe], d[pj], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 34);
    f.bezierCurveTo(b * 35, b * 36, b * 36, b * 39, b * 32, b * 45);
    f.bezierCurveTo(b * 25, b * 46, b * 25, b * 44, b * 30, b * 34);
    f.closePath();
    em(f, d[3], d[Jr], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 59, b * 35);
    f.bezierCurveTo(b * 58, b * 27, b * 57, b * 27, b * 52, b * 31);
    f.bezierCurveTo(b * 50, b * 36, b * 53, b * 38, b * 58, b * 36);
    f.closePath();
    em(f, d[E], d[_g], Jd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 63, b * 46);
    f.bezierCurveTo(b * 64.5, b * 46.5, b * 64.5, b * 46.5, b * 66, b * 47);
    f.bezierCurveTo(b * 70, b * 50, b * 70, b * 53, b * 61, b * 55);
    f.bezierCurveTo(b * 62, b * 50.5, b * 62, b * 50.5, b * 63, b * 46);
    f.closePath();
    em(f, d[3], d[cn], Qm * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41, b * 42);
    f.bezierCurveTo(b * 47, b * 41, b * 53, b * 47, b * 46, b * 51);
    f.bezierCurveTo(b * 38, b * 49, b * 39, b * 46, b * 41, b * 43);
    f.closePath();
    em(f, d[3], d[4], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 44, b * 57);
    f.bezierCurveTo(b * 54, b * 57, b * 54, b * 58, b * 55, b * 61);
    f.bezierCurveTo(b * 54, b * 63, b * 52, b * 64, b * 48, b * 65);
    f.closePath();
    em(f, d[3], d[4], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * rq, b * 52);
    f.bezierCurveTo(b * 25, b * 51, b * 27, b * 50, b * 28, b * 54);
    f.bezierCurveTo(b * 27, b * 58, b * 24, b * 58, b * 22, b * 58);
    f.bezierCurveTo(b * 21, b * 55.5, b * 21, b * 55.5, b * 20, b * 53);
    f.closePath();
    em(f, d[3], d[bq], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 61);
    f.bezierCurveTo(b * 37, b * 61, b * 39, b * 63, b * 39, b * 68);
    f.bezierCurveTo(b * 36, b * 68.5, b * 36, b * 68.5, b * 33, b * 69);
    f.bezierCurveTo(b * 30.5, b * 67.5, b * 30.5, b * 67.5, b * 28, b * 66);
    f.closePath();
    em(f, d[3], d[Gs], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 88, b * 45);
    f.bezierCurveTo(b * 90, b * 46.5, b * 90, b * 46.5, b * 92, b * 48);
    f.bezierCurveTo(b * 92, b * 50, b * 92, b * 50, b * 92, b * 52);
    f.closePath();
    em(f, d[yr], d[4], b * bg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 96, b * 53);
    f.bezierCurveTo(b * 97.5, b * 55, b * 97.5, b * 55, b * 99, b * 57);
    f.bezierCurveTo(b * 97.5, b * 59.5, b * 97.5, b * 59.5, b * 96, b * 62);
    f.bezierCurveTo(b * 93.5, b * 60.5, b * 93.5, b * 60.5, b * 91, b * 59);
    f.bezierCurveTo(b * 91.5, b * 57, b * 91.5, b * 57, b * 92, b * 55);
    f.closePath();
    em(f, d[3], d[4], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 92, b * 71);
    f.bezierCurveTo(b * 94.5, b * 70.5, b * 94.5, b * 70.5, b * 97, b * 70);
    f.bezierCurveTo(b * 98.5, b * 72.5, b * 98.5, b * 72.5, b * 100, b * 75);
    f.bezierCurveTo(b * 97, b * 76.5, b * 97, b * 76.5, b * 94, b * 78);
    f.closePath();
    em(f, d[Lc], d[4], b * br);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 95, b * 82);
    f.bezierCurveTo(b * 96, b * 83, b * 96, b * 83, b * 97, b * 84);
    f.bezierCurveTo(b * 97, b * 85.5, b * 97, b * 85.5, b * 97, b * 87);
    f.bezierCurveTo(b * 93.5, b * 87.5, b * 93.5, b * 87.5, b * 90, b * 88);
    f.closePath();
    em(f, d[pg], d[4], b * Tc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 86, b * 72);
    f.bezierCurveTo(b * 89, b * 76, b * 88, b * 81, b * 85, b * 82);
    f.bezierCurveTo(b * 80, b * 80, b * 82, b * 78, b * 85, b * 72);
    f.closePath();
    em(f, d[3], d[4], b * Qm);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80, b * 86);
    f.bezierCurveTo(b * 84, b * 88, b * 86, b * 88, b * 85, b * 93);
    f.bezierCurveTo(b * 80, b * 96, b * 79, b * 96, b * 76, b * 91);
    f.closePath();
    em(f, d[uc], d[k], qn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84, b * 46);
    f.bezierCurveTo(b * 93, b * 51, b * 91, b * 62, b * 80, b * 78);
    f.bezierCurveTo(b * 74, b * 86, b * 66, b * 90, b * 60, b * 86);
    f.bezierCurveTo(b * 55, b * 79, b * 57, b * 73, b * 67, b * 57);
    f.bezierCurveTo(b * 71, b * 51, b * 79, b * 44, b * 84, b * 46);
    f.closePath();
    em(f, d[dh], d[6], Qm * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 76, b * 60);
    f.bezierCurveTo(b * 80, b * 66, b * 75, b * 74, b * 68, b * 74);
    f.bezierCurveTo(b * 60, b * 64, b * 68, b * 59, b * 76, b * 59);
    f.closePath();
    em(f, d[Pd], d[8], b * 5);
    return e;
  }
  function Du(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    var i = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / Rh;
    f.width = i;
    f.height = j;
    a.translate(i / yo, j / 2);
    a.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      a.translate(b * 0, b * -hd);
    }
    cm(a, 7, k, h);
    em(a, c ? d[0] : d[X]);
    a.globalAlpha = ae;
    if (e == Ng) {
      cm(a, ag, k * 0.65, h * 0.65);
      em(a, d[2]);
    } else if (Lh == e) {
      a.translate(b * 20, b * 20);
      cm(a, Ad, k * 0.45, h * 0.4);
      em(a, d[wc]);
    }
    return f;
  }
  function Eu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 120;
    var i = b * 150;
    var j = b * 60;
    var k = j / Gs;
    var h = b * 15;
    e.width = a;
    e.height = i;
    f.save();
    f.translate(a / Gi + b * 0, i / Tg + Ea * b + h);
    f.rotate(Math.PI / Sn);
    f.globalAlpha = 0.5;
    cm(f, q, j, k);
    em(f, d[0]);
    f.restore();
    f.save();
    f.translate(a / Tg - b * me, i / 2 + b * xg);
    f.globalAlpha = wg;
    f.rotate(Math.PI / 3);
    f.translate(Vd, -h);
    cm(f, 8, j, k);
    em(f, d[Ko]);
    f.restore();
    f.save();
    f.translate(a / rd - b * F, i / z - b * 12);
    f.rotate(Math.PI / 2.8);
    cm(f, 5, j * 0.5, k * 0.4);
    em(f, d[Vn]);
    f.restore();
    f.save();
    f.translate(a / Vn + Fc * b, i / En + b * 5);
    f.rotate(Math.PI / 1);
    cm(f, Au, j * 0.5, k * 0.4);
    em(f, d[ih]);
    f.restore();
    f.save();
    f.translate(a / hu - b * 8, i / ec + b * Jh);
    f.rotate(Math.PI / 2.25);
    cm(f, 5, j * 0.5, k * 0.4);
    em(f, d[z]);
    f.restore();
    return e;
  }
  function Fu(b, i, j, e, k, a, l, n, q, h, g = undefined) {
    if (g === undefined) g = Cm;
    var r = document.createElement("canvas");
    var d = r.getContext("2d");
    a = a ? b * a : sh;
    var m = Math.floor(b * j);
    d.font = m + "px Baloo Paaji";
    d.lineJoin = "round";
    n *= b;
    var t = l ? n * wc : 0;
    if (q) {
      var f = Math.min(d.measureText(i).width + Cg * b + t, q);
    } else {
      f = d.measureText(i).width + z * b + t + g * b * 2;
    }
    m = (m + a + g) * b + t;
    r.width = f;
    r.height = m;
    if (l) {
      d.fillStyle = l;
      nm(d, Ka, 0, f, m, n * 2);
      d.fill();
      d.translate(n, n);
    }
    d.textBaseline = "middle";
    d.font = j + "px Baloo Paaji";
    d.lineJoin = "round";
    if (k) {
      d.beginPath();
      d.fillStyle = k;
      d.fillText(i, 0, m / En + a - t / 2, f);
    }
    d.beginPath();
    if (h) {
      d.strokeStyle = h;
      d.lineWidth = g;
      d.strokeText(i, g, (m - t) / 2, f);
    }
    d.fillStyle = e;
    d.fillText(i, g, (m - t) / yo, f);
    return r;
  }
  function qu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 220;
    var i = b * 230;
    var j = wr * b;
    var k = j / bq;
    var h = b * to;
    e.width = a;
    e.height = i;
    f.translate(a / 2, i / 2 + h);
    f.globalAlpha = 0.5;
    cm(f, Kr, j, k);
    em(f, d[Ng]);
    f.globalAlpha = 1;
    f.translate(Gc, -h);
    cm(f, 7, j, k);
    em(f, d[ae]);
    cm(f, ss, j * 0.65, k * 0.65);
    em(f, d[2]);
    return e;
  }
  function Gu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = Fo * b;
    var i = b * Zd;
    e.width = a;
    e.height = i;
    var j = Vq * b;
    var k = Mg * b;
    var l = b * wm;
    f.save();
    f.translate(j, k);
    f.globalAlpha = Lh;
    rm(f, qh, 0, l);
    em(f, d[Vd]);
    l = b * 3;
    j = Ka;
    k = b * -Xg;
    f.translate(j, k);
    f.globalAlpha = lt;
    rm(f, 0, Oq, l);
    em(f, d[Ic]);
    f.restore();
    return e;
  }
  function Iu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 140;
    var g = b * 150;
    var i = mm * b;
    var j = b * 4;
    e.width = a;
    e.height = g;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    em(f, d[bd]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    em(f, d[Ko], d[2], j);
    return e;
  }
  function Hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 217;
    e.height = b * 215;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79, b * 113);
    f.bezierCurveTo(b * 135, b * 98, b * 136, b * 96, b * 142, b * 97);
    f.bezierCurveTo(b * 167, b * 106, b * 167, b * 106, b * 171, b * 109);
    f.bezierCurveTo(b * 173, b * 120, b * 173, b * 134, b * 169, b * 141);
    f.bezierCurveTo(b * 140, b * 149.5, b * 140, b * 149.5, b * 111, b * 158);
    f.closePath();
    em(f, d[Ps], d[2], b * Ha);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 154, b * 103);
    f.bezierCurveTo(b * 167, b * 91, b * 175, b * 87, b * 176, b * 94);
    f.bezierCurveTo(b * 175, b * 102, b * 176, b * 102, b * 186, b * 103);
    f.bezierCurveTo(b * 191, b * 104, b * 192, b * 105, b * 185, b * 116);
    f.bezierCurveTo(b * 183, b * 120, b * 191, b * 124, b * 189, b * 129);
    f.bezierCurveTo(b * 185, b * 139, b * 178, b * 134, b * 166, b * 131);
    f.closePath();
    em(f, d[1], d[mj], b * pj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 60, b * 46);
    f.bezierCurveTo(b * 60, b * 34, b * 60, b * 29, b * 56, uq * b);
    f.bezierCurveTo(b * 52, b * 12, b * 52, b * pq, b * 49, b * 24);
    f.bezierCurveTo(b * 48, b * 27, b * 46, b * 28, b * 39, b * 27);
    f.bezierCurveTo(b * 33, b * 26, b * 34, b * 31, b * 35, b * 37);
    f.bezierCurveTo(b * 36, b * 41, b * 27, b * 46, b * 29, b * 52);
    f.bezierCurveTo(b * 36, b * 55, b * 35, b * 56, b * 31, b * 59);
    f.bezierCurveTo(b * 27, b * 65, b * 32, b * 64, b * 35, b * 62);
    f.closePath();
    em(f, d[4], d[5], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 46, b * 50);
    f.bezierCurveTo(b * 51, b * 35, b * 70, b * 32, b * 78, b * 29);
    f.bezierCurveTo(b * 84, b * 27, b * 113, b * 36, b * 127, b * 41);
    f.bezierCurveTo(b * 140, b * 47, b * 147, b * 69, b * 137, b * 73);
    f.bezierCurveTo(b * 124, b * 92, b * 117, b * 92, b * 109, b * 94);
    f.bezierCurveTo(b * 101, b * 96, b * 89, b * 92, b * 65, b * 83);
    f.bezierCurveTo(b * 54, b * 80, b * 46, b * 58, b * 46, b * 51);
    f.closePath();
    em(f, d[sj], d[5], Jr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 51, b * 40);
    f.bezierCurveTo(b * 49, b * 34, b * 49, b * 34, b * 47, b * 28);
    f.bezierCurveTo(b * 38, b * 28, b * 34, b * 27, b * 37, b * 37);
    f.bezierCurveTo(b * 43, b * 40.5, b * 43, b * 40.5, b * 49, b * 44);
    f.closePath();
    em(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 29, b * 48);
    f.bezierCurveTo(b * 38, b * 49, b * 38, b * 49, b * 47, b * 50);
    f.bezierCurveTo(b * 46.5, b * 51.5, b * 46.5, b * 51.5, b * 46, b * 53);
    f.bezierCurveTo(b * 40, b * 53.5, b * 40, b * 53.5, b * 34, b * 54);
    f.bezierCurveTo(b * 29, b * 51, b * 32, b * 51.5, b * 30, b * 49);
    f.closePath();
    em(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 89, b * 61);
    f.bezierCurveTo(b * 101, b * 70, b * 109, b * 90, b * 102, b * 90);
    f.bezierCurveTo(b * 97, b * 91, b * 87, b * 91, b * 60, b * 80);
    f.bezierCurveTo(b * 48, b * 65, b * 46, b * 56, b * 48, b * 53);
    f.bezierCurveTo(b * 50, b * 52, b * 66, b * 56, b * 89, b * 61);
    f.closePath();
    em(f, d[Bo]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 99, b * 59);
    f.bezierCurveTo(b * 115, b * 45, b * 125, b * 42, b * 129, b * 47);
    f.bezierCurveTo(b * 138, b * 56, b * 140, b * 63, b * 138, b * 67);
    f.bezierCurveTo(b * 131, b * 80, b * 122, b * 87, b * 114, b * 90);
    f.bezierCurveTo(b * 105, b * 80, b * 95, b * 62, b * 98, b * 61);
    f.closePath();
    em(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, b * 62);
    f.bezierCurveTo(b * 139, b * 45, b * 153, b * 40, b * 150, b * 48);
    f.bezierCurveTo(b * 145, b * 57, b * 157, b * 63, b * 157, b * 70);
    f.bezierCurveTo(b * 157, b * 74, b * 142, b * 77, b * 142, b * 85);
    f.bezierCurveTo(b * 143, b * 91, b * 141, b * 92, b * 135, b * 90);
    f.bezierCurveTo(b * 132, b * 90, b * 132, b * 96, b * 124, b * 99);
    f.bezierCurveTo(b * 118, b * 93, b * 116, b * 77, b * 116, b * 64);
    f.closePath();
    em(f, d[Dd], d[5], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 90, b * 130);
    f.bezierCurveTo(b * 157, b * 115, b * 165, b * 111, b * 167, b * 115);
    f.bezierCurveTo(b * 170, b * 117, b * 171, b * 135, b * 167, b * 141);
    f.bezierCurveTo(b * 135.5, b * 149.5, b * 135.5, b * 149.5, b * 104, b * 158);
    f.closePath();
    em(f, d[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 53, b * 119);
    f.bezierCurveTo(b * 46, b * 120, b * 40, b * 118, b * 34, b * 116);
    f.bezierCurveTo(b * 28, b * 111, b * 41, b * 112, b * 39, b * 108);
    f.bezierCurveTo(b * 36, b * 100, b * 49, b * 102, b * 53, b * 95);
    f.bezierCurveTo(b * 57, b * 84, b * 58, b * 85, b * 63, b * 93);
    f.bezierCurveTo(b * 68, b * 96, b * 72, b * 94, b * 80, b * 88);
    f.bezierCurveTo(b * 80, b * 96, b * 78, b * 107, b * 66, b * 115);
    f.closePath();
    em(f, d[Zs], d[10], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, b * 64);
    f.bezierCurveTo(b * 133.5, b * 57, b * 133.5, b * 57, b * 149, b * 50);
    f.bezierCurveTo(b * 145, b * 54, b * 154, b * 65, b * 157, b * 68);
    f.bezierCurveTo(b * 138.5, b * 66.5, b * 138.5, b * 66.5, b * 120, b * 65);
    f.closePath();
    em(f, d[lo]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, b * 65);
    f.bezierCurveTo(b * 129, b * 77, b * 129, b * 77, b * 140, b * 89);
    f.bezierCurveTo(b * 131, b * 89, b * 130, b * 92, b * 128, b * 96);
    f.bezierCurveTo(b * 123.5, b * 82, b * 123.5, b * 82, b * 119, b * 68);
    f.closePath();
    em(f, d[Fg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 51, b * 112);
    f.bezierCurveTo(b * 63, b * 108, b * 78, b * 111, b * 88, b * 112);
    f.bezierCurveTo(b * 98, b * 122, b * 117, b * 136, b * 125, b * 157);
    f.bezierCurveTo(b * 123, b * 180, b * 123, b * 185, b * 118, b * 186);
    f.bezierCurveTo(b * 101, b * 190, b * 89, b * 191, b * 79, b * 187);
    f.bezierCurveTo(b * 53, b * 165, b * 50, b * 153, b * 47, b * 144);
    f.bezierCurveTo(b * 46, b * 128, b * 46, b * 124, b * 50, b * 112);
    f.closePath();
    em(f, d[9], d[10], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 50, b * 114);
    f.bezierCurveTo(b * 81, b * 149, b * 80, b * 147, b * 80, b * 149);
    f.bezierCurveTo(b * 82, b * 155, b * 80, b * 182, b * 74, b * 182);
    f.bezierCurveTo(b * 60, b * 172, b * 52, b * 157, b * 47, b * 144);
    f.closePath();
    em(f, d[Cc], d[zo], _n * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 85, b * 152);
    f.bezierCurveTo(b * 99, b * 150, b * 109, b * 152, b * 119, b * 156);
    f.bezierCurveTo(b * 122, b * 163, b * 122, b * 174, b * 117, b * 182);
    f.closePath();
    f.bezierCurveTo(b * 93, b * 188, b * 82, b * 187, b * 83, b * 179);
    em(f, d[Xk], d[gr], b * Rh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 104, b * 166);
    f.bezierCurveTo(b * 133, b * 165, b * 142, b * 168, b * 137, b * 173);
    f.bezierCurveTo(b * 127, b * 177, b * 137, b * 195, b * 126, b * 196);
    f.bezierCurveTo(b * 112, b * 195, b * 112, b * 194, b * 109, b * 199);
    f.bezierCurveTo(b * 105, b * 205, b * 102, b * 195, b * 96, b * 197);
    f.bezierCurveTo(b * 84, b * 201, b * 88, b * 198, b * 90, b * 187);
    f.bezierCurveTo(b * 96, b * 171, b * 97, b * 170, b * 103, b * 167);
    f.closePath();
    em(f, d[Vq], d[10], Nr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105, b * 168);
    f.bezierCurveTo(b * 118, b * 172.5, b * 118, b * 172.5, b * 131, b * 177);
    f.bezierCurveTo(b * 133, b * 190, b * 132, b * 199, b * 116, b * 194);
    f.bezierCurveTo(b * 110, b * 182, b * 110, b * 182, b * 104, b * 170);
    f.closePath();
    em(f, d[Mh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 169);
    f.bezierCurveTo(b * 100.5, b * 182, b * 100.5, b * 182, b * 99, b * 195);
    f.bezierCurveTo(b * 93.5, b * 196.5, b * 93.5, b * 196.5, b * 88, b * 198);
    f.bezierCurveTo(b * 94, b * 176, b * 96, b * 174, b * 101, b * 168);
    f.closePath();
    em(f, d[G], d[uo], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 64, b * 107);
    f.bezierCurveTo(b * 64, b * 101, b * 64, b * 101, b * 64, b * 95);
    f.bezierCurveTo(b * 57, b * 86, b * 57, b * 84, b * 53, b * 97);
    f.bezierCurveTo(b * 55, b * 103.5, b * 55, b * 103.5, b * 57, b * 110);
    f.closePath();
    em(f, d[Kc], d[Pm], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 40, b * 108);
    f.bezierCurveTo(b * 46.5, b * 111, b * 46.5, b * 111, b * 53, b * 114);
    f.bezierCurveTo(b * 50.5, b * 117, b * 50.5, b * 117, b * 48, b * 120);
    f.bezierCurveTo(b * 40.5, b * 117.5, b * 40.5, b * 117.5, b * 33, b * 115);
    f.bezierCurveTo(b * 36, b * 112, b * 36, b * 112, b * 39, b * 109);
    f.closePath();
    em(f, d[zo], d[Eg], Dd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 189, b * 106);
    f.bezierCurveTo(b * 178.5, b * 110.5, b * 178.5, b * 110.5, b * 168, b * 115);
    f.bezierCurveTo(b * 168.5, b * 119, b * 168.5, b * 119, b * 169, b * 123);
    f.bezierCurveTo(b * 179, b * 124.5, b * 179, b * 124.5, b * 189, b * 126);
    f.bezierCurveTo(b * 182, b * 118, b * 183, b * 115, b * 188, b * 106);
    f.closePath();
    em(f, d[8]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 69, b * 178);
    f.bezierCurveTo(b * 69, b * 141, b * 70, b * 136, b * 77, b * 137);
    f.bezierCurveTo(b * 88, b * 133, b * 101, b * 134, b * 108, b * 137);
    em(f, undefined, d[3], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 161);
    f.bezierCurveTo(b * 54, b * 124, b * 55, b * 119, b * 62, b * 119);
    f.bezierCurveTo(b * 74, b * 117, b * 85, b * 117, b * 93, b * 119);
    em(f, undefined, d[3], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 91, b * 29);
    f.bezierCurveTo(b * 74, b * 33, b * 62, b * 46, b * 57, b * 54);
    f.bezierCurveTo(b * 57, b * 63, b * 68, b * 76, b * 77, b * 87);
    em(f, undefined, d[6], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 107, b * 33);
    f.bezierCurveTo(b * 82, b * 51, b * 80, b * 52, b * 79, b * 59);
    f.bezierCurveTo(b * 78, b * 65, b * 93, b * 86, b * 101, b * 93);
    em(f, lq, d[ss], bq * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130, b * 98);
    f.bezierCurveTo(b * 126.5, b * 103, b * 126.5, b * 103, b * 123, b * 108);
    f.bezierCurveTo(b * 133.5, b * 107, b * 133.5, b * 107, b * 144, b * 106);
    f.bezierCurveTo(b * 138.5, b * 110, b * 138.5, b * 110, b * 133, b * 114);
    f.bezierCurveTo(b * 142, b * 114, b * 142, b * 114, b * 151, b * 114);
    f.bezierCurveTo(b * 146.5, b * 119.5, b * 146.5, b * 119.5, b * 142, b * 125);
    f.bezierCurveTo(b * 146.5, b * 127, b * 146.5, b * 127, b * 151, b * 129);
    f.bezierCurveTo(b * 147.5, b * 132, b * 147.5, b * 132, b * 144, b * 135);
    f.bezierCurveTo(b * 148, b * 137, b * 148, b * 137, b * 152, b * 139);
    f.bezierCurveTo(b * 149, b * 142.5, b * 149, b * 142.5, b * 146, b * 146);
    em(f, undefined, d[nh], b * 4);
    return e;
  }
  function Lu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 180;
    var i = b * 210;
    var j = (h = b * 60) / sj;
    var k = b * Wo;
    e.width = a;
    e.height = i;
    f.save();
    f.translate(a / Cs - Oq * b, i / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -to);
    cm(f, 5, h, j);
    em(f, d[Vd]);
    f.restore();
    f.save();
    f.translate(a / 2 + jc * b, i / 2 + nc * b + k);
    f.rotate(Math.PI / Tg);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    cm(f, 5, h, j);
    em(f, d[0]);
    f.restore();
    f.save();
    f.translate(a / 2 - b * 50, i / eu + b * 40 + k);
    f.rotate(Math.PI / on);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    cm(f, 5, h, j);
    em(f, d[ke]);
    f.restore();
    f.save();
    f.translate(a / Cg - bd * b, i / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, -Wo * b);
    cm(f, 5, h, j);
    em(f, d[1]);
    f.restore();
    f.save();
    f.translate(a / yo + b * 10, i / 2 + b * Ui);
    f.rotate(Math.PI / Te);
    f.globalAlpha = ja;
    f.translate(0, b * -20);
    cm(f, bg, h, j);
    em(f, d[1]);
    f.restore();
    f.save();
    f.translate(a / 2 - b * 50, i / 2 + b * 40);
    f.rotate(Math.PI / er);
    f.globalAlpha = wg;
    f.translate(xn, b * -xc);
    cm(f, 5, h, j);
    em(f, d[Mc]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(a / 2 + b * 5, i / Yh - to * b);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(qh, b * -jg);
    cm(f, Tc, h, j);
    em(f, d[hu]);
    f.restore();
    f.save();
    f.translate(a / rd + b * Cm, i / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = Mc;
    f.translate(0, -yg * b);
    cm(f, Cd, h, j);
    em(f, d[2]);
    f.restore();
    f.save();
    f.translate(a / 2 - b * 45, i / Cs + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(ke, b * -20);
    cm(f, 5, h, j);
    em(f, d[2]);
    f.restore();
    rm(f, a / 2 - b * 7, i / Vn + bh * b, Jd);
    em(f, d[2]);
    return e;
  }
  function Mu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 70;
    var g = b * 90;
    var i = b * _g;
    var j = b * 5;
    e.width = a;
    e.height = g;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    em(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * Vs, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    em(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    em(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(nh * b, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    em(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = lt;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, oc * b, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    em(f, d[0], d[Lh], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * To, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    em(f, d[0], d[wg], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, wr * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    em(f, d[Vd], d[1], i);
    f.restore();
    f.save();
    f.translate(oe * b, b * -93);
    f.rotate(Math.PI / Cd);
    f.globalAlpha = Ps;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    em(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  const Nu = Tc;
  function Ju(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(hg, $n);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * Gj);
    d.bezierCurveTo(a * 19, a * 30, a * Ta, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, Vq * a, a * 48, a * 6);
    d.closePath();
    em(d, b[xn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(K * a, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * jn, a * 83, a * 4, a * 87);
    em(d, undefined, b[qh], a * ic);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * lh);
    d.bezierCurveTo(a * Ao, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * Cc, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * Xc, a * 50, Dt * a, a * 48, a * 6);
    d.closePath();
    em(d, b[1], b[2], am * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, Zo * a, a * 83, a * 4, a * 87);
    em(d, undefined, b[Gi], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * zg, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * Ig);
    em(d, Ds, b[2], a * 8);
    return c;
  }
  const Ou = nj;
  function Ju(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(qg * a, a * 148, jo * a, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    em(d, b[0], b[du], a * 4);
    return c;
  }
  function Pu(b, c, d, e, f) {
    var a = document.createElement("canvas");
    var g = a.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      a.width = i;
      a.height = j;
      g.beginPath();
      g.moveTo(b * 140, b * 3);
      g.translate(b * -25, b * -20);
      g.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      g.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      g.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      g.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      g.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      g.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      g.closePath();
      em(g, d[Sh]);
    } else if (Lo == e) {
      i = b * 430;
      j = b * 350;
      a.width = i;
      a.height = j;
      g.beginPath();
      g.moveTo(b * 180, b * 5);
      g.translate(b * -30, b * -60);
      g.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      g.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      g.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, cr * b, b * 386);
      g.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      g.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      g.closePath();
      em(g, d[nj]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      a.width = i;
      a.height = j;
      g.beginPath();
      g.moveTo(b * 80, b * 52);
      g.translate(b * -40, b * -30);
      g.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      g.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      g.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      g.bezierCurveTo(b * 108, b * 282, Vs * b, b * 239, b * 63, b * 205);
      g.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      g.closePath();
      em(g, d[0]);
    }
    return a;
  }
  function Qu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 96.5, b * 277.34375);
    f.bezierCurveTo(b * 197.5, b * 259.84375, b * 197.5, b * 259.84375, b * 298.5, b * 242.34375);
    f.bezierCurveTo(b * 311.5, b * 231.34375, b * 307.5, b * 168.34375, b * 298.5, b * 150.34375);
    f.bezierCurveTo(b * 198, b * 170.34375, b * 198, b * 170.34375, b * 97.5, b * 190.34375);
    f.closePath();
    em(f, d[1], d[yo], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98.5, b * 214.34375);
    f.bezierCurveTo(b * 199, b * 196.34375, b * 199, b * 196.34375, b * 299.5, b * 178.34375);
    f.closePath();
    em(f, Oh, d[2], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98.5, b * 247.34375);
    f.bezierCurveTo(b * 201.5, b * 229.34375, b * 201.5, b * 229.34375, b * 304.5, b * 211.34375);
    f.closePath();
    em(f, undefined, d[Tg], dg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.5, b * 189.34375);
    f.bezierCurveTo(b * 97, b * 199.84375, b * 97, b * 199.84375, b * 96.5, b * 210.34375);
    f.bezierCurveTo(b * 110.5, b * 204.34375, b * 110.5, b * 204.34375, b * 124.5, b * 198.34375);
    f.bezierCurveTo(b * 137.5, b * 203.84375, b * 137.5, b * 203.84375, b * 150.5, b * 209.34375);
    f.bezierCurveTo(b * 172, b * 197.84375, b * 172, b * 197.84375, b * 193.5, b * 186.34375);
    f.bezierCurveTo(b * 211.5, b * 189.84375, b * 211.5, b * 189.84375, b * 229.5, b * 193.34375);
    f.bezierCurveTo(b * 240.5, b * 193.34375, b * 240.5, b * 193.34375, b * 251.5, b * 193.34375);
    f.bezierCurveTo(b * 261, b * 182.84375, b * 261, b * 182.84375, b * 270.5, b * 172.34375);
    f.bezierCurveTo(b * 287.5, b * 169.34375, b * 287.5, b * 169.34375, b * 304.5, b * 166.34375);
    f.bezierCurveTo(b * 304.5, b * 156.34375, b * 300.5, b * 145.34375, b * 298.5, b * 147.34375);
    f.closePath();
    em(f, d[3], d[4], b * Uh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 300.5, b * 147.34375);
    f.bezierCurveTo(b * 293.5, b * 121.34375, b * 278.5, b * 106.34375, b * 256.5, b * 101.34375);
    f.bezierCurveTo(b * 176.5, b * 145.34375, b * 176.5, b * 145.34375, b * 96.5, b * 189.34375);
    f.closePath();
    em(f, d[5], d[O], b * pa);
    rm(f, b * 252.5, b * 129.34375, b * 18.027756377319946);
    em(f, d[7]);
    rm(f, b * 248.5, b * 121.34375, b * 8.246211251235321);
    em(f, d[wm]);
    return e;
  }
  function Ru(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * c * 2;
    var g = c * b * lr;
    var i = a / ih;
    var j = g / 2;
    e.width = a;
    e.height = g;
    f.translate(i, j);
    rm(f, 0, 0, b * c);
    em(f, d);
    return e;
  }
  function Su(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 220;
    e.height = b * 180;
    f.globalAlpha = c ? 0.5 : X;
    f.translate(b * -90, b * -150);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 104, b * 237.8000030517578);
    f.bezierCurveTo(b * 110, b * 237.8000030517578, b * 110, b * 237.8000030517578, b * 116, b * 237.8000030517578);
    f.bezierCurveTo(b * 116, b * 241.8000030517578, b * 116, b * 241.8000030517578, b * 116, b * 245.8000030517578);
    f.bezierCurveTo(b * 115, b * 245.3000030517578, b * 115, b * 245.3000030517578, b * 114, b * 244.8000030517578);
    f.bezierCurveTo(b * 109.5, b * 244.8000030517578, b * 109.5, b * 244.8000030517578, b * 105, b * 244.8000030517578);
    f.closePath();
    em(f, d[5], d[5], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 211.20000457763672);
    f.bezierCurveTo(b * 106, b * 216.20000457763672, b * 101, b * 234.20000457763672, b * 102, b * 241.20000457763672);
    f.bezierCurveTo(b * 102, b * 260.2000045776367, b * 115, b * 269.2000045776367, b * 115, b * 269.2000045776367);
    f.bezierCurveTo(b * 116, b * 265.2000045776367, b * 115.5, b * 265.2000045776367, b * 116, b * 261.2000045776367);
    f.bezierCurveTo(b * 112, b * 264, b * 108, b * 254, b * 106, b * 242);
    f.bezierCurveTo(b * 105, b * 232, b * 110, b * 222, b * 115, b * 218);
    f.bezierCurveTo(b * 116, b * 216.75, b * 115.5, b * 217.375, b * 116, b * 216.75);
    f.closePath();
    em(f, d[5], d[Tc], Cs * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 120, b * 207);
    f.bezierCurveTo(b * 115, b * 206, b * 114, b * 209, b * 114, b * 211);
    f.bezierCurveTo(b * 114, b * 268, b * 114, b * 241, b * 114, b * 271);
    f.bezierCurveTo(b * 115, b * 276, b * 118, b * 276, b * 120, b * 276);
    f.bezierCurveTo(b * 122, b * 273, b * 120.5, b * 274.5, b * 121, b * 273);
    f.bezierCurveTo(b * 121, b * 241, b * 121, b * 241, b * 121, b * 209);
    f.closePath();
    em(f, d[4], d[4], b * lr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 284, b * 238);
    f.bezierCurveTo(b * 289.5, b * 238, b * 289.5, b * 238, b * 295, b * 238);
    f.bezierCurveTo(b * 295, b * 241.5, b * 295, b * 241.5, b * 295, b * 245);
    f.bezierCurveTo(b * 289.5, b * 245, b * 289.5, b * 245, b * 284, b * 245);
    f.closePath();
    em(f, d[Ac], d[k], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 283, b * 211);
    f.bezierCurveTo(b * 293, b * 216, b * 297, b * 231, b * 297, b * 241);
    f.bezierCurveTo(b * 298, b * 254, b * 290, b * 265, b * 284, b * 269);
    f.bezierCurveTo(b * 283, b * 266, b * 283.5, b * 266, b * 283, b * 263);
    f.bezierCurveTo(b * 290, b * 260, b * 292, b * 251, b * 293, b * 242);
    f.bezierCurveTo(b * 292, b * 223, b * 289, b * 224, b * 284, b * 218);
    f.closePath();
    em(f, d[4], d[Ld], Tg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 280, b * 206);
    f.bezierCurveTo(b * 284, b * 206, b * 285, b * 208, b * 285, b * 211);
    f.bezierCurveTo(b * 285, b * 241.5, b * 285, b * 241.5, b * 285, b * 272);
    f.bezierCurveTo(b * 284, b * 275, b * 284, b * 275, b * 280, b * 275);
    f.bezierCurveTo(b * 279, b * 273.5, b * 279, b * 273.5, b * 278, b * 272);
    f.bezierCurveTo(b * 278, b * 240.5, b * 278, b * 240.5, b * 278, b * 209);
    f.closePath();
    em(f, d[_n], d[4], b * lr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 138, b * 298.40000915527344);
    f.bezierCurveTo(b * 141, b * 311.40000915527344, b * 151, b * 314.40000915527344, b * 162, b * 316.40000915527344);
    f.bezierCurveTo(b * 224, b * 316.40000915527344, b * 200, b * 315.90000915527344, b * 238, b * 315.40000915527344);
    f.bezierCurveTo(b * 254, b * 316.40000915527344, b * 261, b * 306.40000915527344, b * 264, b * 298.40000915527344);
    f.bezierCurveTo(b * 255, b * 304.40000915527344, b * 250, b * 306.40000915527344, b * 244, b * 306.40000915527344);
    f.bezierCurveTo(b * 201, b * 306.90000915527344, b * 201, b * 306.90000915527344, b * 158, b * 307.40000915527344);
    f.bezierCurveTo(b * 150, b * 306.40000915527344, b * 148, b * 306.40000915527344, b * 139, b * 300.40000915527344);
    f.closePath();
    em(f, d[4], d[Ud], b * mj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 177.5999984741211);
    f.bezierCurveTo(b * 130, b * 175.5999984741211, b * 123, b * 190.5999984741211, b * 122, b * 205.5999984741211);
    f.bezierCurveTo(b * 121, b * 277.5999984741211, b * 122, b * 242.5999984741211, b * 122, b * 279.5999984741211);
    f.bezierCurveTo(b * 128, b * 297.5999984741211, b * 137, b * 299.5999984741211, b * 143, b * 300.5999984741211);
    f.bezierCurveTo(b * 163, b * 301.0999984741211, b * 163, b * 301.0999984741211, b * 183, b * 301.5999984741211);
    f.bezierCurveTo(b * 150, b * 300.5999984741211, b * 135, b * 290.5999984741211, b * 134, b * 267.5999984741211);
    f.bezierCurveTo(b * 133, b * 245.5999984741211, b * 146, b * 235.5999984741211, b * 164, b * 235.5999984741211);
    f.bezierCurveTo(b * 206, b * 236.0999984741211, b * 206, b * 236.0999984741211, b * 248, b * 236.5999984741211);
    f.bezierCurveTo(b * 266, b * 243.5999984741211, b * 268, b * 259.5999984741211, b * 267, b * 266.5999984741211);
    f.bezierCurveTo(b * 266, b * 288.5999984741211, b * 251, b * 294.5999984741211, b * 244, b * 297.5999984741211);
    f.bezierCurveTo(b * 228.5, b * 299.5999984741211, b * 228.5, b * 299.5999984741211, b * 213, b * 301.5999984741211);
    f.bezierCurveTo(b * 236, b * 301.0999984741211, b * 236, b * 301.0999984741211, b * 259, b * 300.5999984741211);
    f.bezierCurveTo(b * 272, b * 295.5999984741211, b * 277, b * 288.5999984741211, b * 278, b * 271.5999984741211);
    f.bezierCurveTo(b * 277.5, b * 236.5999984741211, b * 277.5, b * 236.5999984741211, b * 277, b * 201.5999984741211);
    f.bezierCurveTo(b * 276, b * 186.5999984741211, b * 265, b * 178.5999984741211, b * 254, b * 177.5999984741211);
    f.bezierCurveTo(b * 247.5, b * 177.5999984741211, b * 247.5, b * 177.5999984741211, b * 241, b * 177.5999984741211);
    f.bezierCurveTo(b * 255, b * 202.5999984741211, b * 214, b * 217.5999984741211, b * 201, b * 215.5999984741211);
    f.bezierCurveTo(b * 170, b * 215.5999984741211, b * 152, b * 197.5999984741211, b * 161, b * 178.5999984741211);
    f.closePath();
    em(f, d[Jr], d[4], b * En);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 162, b * 175.5999984741211);
    f.bezierCurveTo(b * 153, b * 176.0999984741211, b * 153, b * 176.0999984741211, b * 144, b * 176.5999984741211);
    f.bezierCurveTo(b * 125, b * 178.5999984741211, b * 121, b * 196.5999984741211, b * 121, b * 207.5999984741211);
    f.bezierCurveTo(b * 121, b * 243.20000076293945, b * 121, b * 243.20000076293945, b * 121, b * 278.8000030517578);
    f.bezierCurveTo(b * 126, b * 298.8000030517578, b * 137, b * 300.8000030517578, b * 146, b * 302.8000030517578);
    f.bezierCurveTo(b * 200.5, b * 302.8000030517578, b * 200.5, b * 302.8000030517578, b * 255, b * 302.8000030517578);
    f.bezierCurveTo(b * 271, b * 301.8000030517578, b * 279, b * 288.8000030517578, b * 279, b * 273.8000030517578);
    f.bezierCurveTo(b * 279, b * 236.8000030517578, b * 279, b * 236.8000030517578, b * 279, b * 199.8000030517578);
    f.bezierCurveTo(b * 274, b * 178.8000030517578, b * 263, b * 177.8000030517578, b * 255, b * 175.8000030517578);
    f.bezierCurveTo(b * 248, b * 175.8000030517578, b * 248, b * 175.8000030517578, b * 241, b * 175.8000030517578);
    f.bezierCurveTo(b * 240, b * 175.8000030517578, b * 240, b * 175.8000030517578, b * 239, b * 175.8000030517578);
    f.bezierCurveTo(b * 254, b * 200.8000030517578, b * 222, b * 211.8000030517578, b * 202, b * 212.8000030517578);
    f.bezierCurveTo(b * 168, b * 213.8000030517578, b * 151, b * 190.8000030517578, b * 163, b * 176.8000030517578);
    f.closePath();
    em(f, undefined, d[Ha], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 198, b * 161.4000015258789);
    f.bezierCurveTo(b * 198, b * 186.9000015258789, b * 198, b * 186.9000015258789, b * 198, b * 212.4000015258789);
    f.bezierCurveTo(b * 201, b * 212.4000015258789, b * 201, b * 212.4000015258789, b * 204, b * 212.4000015258789);
    f.bezierCurveTo(b * 204, b * 186.9000015258789, b * 204, b * 186.9000015258789, b * 204, b * 161.4000015258789);
    f.closePath();
    em(f, d[4], d[Nr], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 194);
    f.bezierCurveTo(b * 188, b * 169, b * 231, b * 179, b * 241, b * 194);
    f.bezierCurveTo(b * 239.5, b * 196, b * 239.5, b * 196, b * 238, b * 198);
    f.bezierCurveTo(b * 221, b * 179, b * 182, b * 182, b * 165, b * 198);
    f.closePath();
    em(f, d[sj], d[4], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157, b * 188.80000019073486);
    f.bezierCurveTo(b * 162, b * 150.80000019073486, b * 241, b * 150.80000019073486, b * 245, b * 188.80000019073486);
    f.bezierCurveTo(b * 242, b * 224.80000019073486, b * 162, b * 228.80000019073486, b * 157, b * 188.80000019073486);
    f.bezierCurveTo(b * 159, b * 188.80000019073486, b * 159, b * 188.80000019073486, b * 161, b * 188.80000019073486);
    f.bezierCurveTo(b * 168, b * 216.80000019073486, b * 231, b * 218.80000019073486, b * 241, b * 188.80000019073486);
    f.bezierCurveTo(b * 236, b * 156.80000019073486, b * 169, b * 152.80000019073486, b * 161, b * 188.80000019073486);
    f.closePath();
    em(f, d[4], d[4], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 156, b * 188);
    f.bezierCurveTo(b * 160, b * 164, b * 183, b * 159, b * 201, b * 158);
    f.bezierCurveTo(b * 232, b * 159, b * 244, b * 174, b * 246, b * 188);
    f.bezierCurveTo(b * 245, b * 212, b * 213, b * 219, b * 201, b * 218);
    f.bezierCurveTo(b * 181, b * 221, b * 158, b * 207, b * 156, b * 190);
    f.closePath();
    em(f, undefined, d[bq], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 162, b * 189);
    f.bezierCurveTo(b * 166, b * 170, b * 185, b * 165, b * 201, b * 164);
    f.bezierCurveTo(b * 227, b * 165, b * 240, b * 178, b * 239, b * 188);
    f.bezierCurveTo(b * 239, b * 204, b * 210, b * 210, b * 201, b * 210);
    f.bezierCurveTo(b * 182, b * 211, b * 166, b * 200, b * 162, b * 190);
    f.closePath();
    em(f, Nn, d[_g], b * Cu);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131, b * 262);
    f.bezierCurveTo(b * 136, b * 241, b * 144, b * 236, b * 158, b * 233);
    f.bezierCurveTo(b * 200.5, b * 233, b * 229, b * 232, b * 243, b * 233);
    f.bezierCurveTo(b * 259, b * 235, b * 267, b * 248, b * 269, b * 260);
    f.bezierCurveTo(b * 269, b * 266.5, b * 269, b * 266.5, b * 269, b * 273);
    f.bezierCurveTo(b * 265, b * 290, b * 251, b * 297, b * 242, b * 298);
    f.bezierCurveTo(b * 202, b * 298, b * 202, b * 298, b * 162, b * 298);
    f.bezierCurveTo(b * 148, b * 298, b * 136, b * 289, b * 132, b * 273);
    f.bezierCurveTo(b * 131.5, b * 268, b * 131.5, b * 268, b * 131, b * 263);
    f.bezierCurveTo(b * 135, b * 263, b * 135, b * 263, b * 139, b * 263);
    f.bezierCurveTo(b * 139, b * 281, b * 151, b * 287, b * 160, b * 290);
    f.bezierCurveTo(b * 200.5, b * 290, b * 200.5, b * 290, b * 241, b * 290);
    f.bezierCurveTo(b * 252, b * 290, b * 257, b * 281, b * 262, b * 271);
    f.bezierCurveTo(b * 261.5, b * 267, b * 261.5, b * 267, b * 261, b * 263);
    f.bezierCurveTo(b * 260, b * 249, b * 251, b * 242, b * 241, b * 241);
    f.bezierCurveTo(b * 240.5, b * 240.5, b * 240.5, b * 240.5, b * 240, b * 240);
    f.bezierCurveTo(b * 200, b * 240, b * 200, b * 240, b * 160, b * 240);
    f.bezierCurveTo(b * 145, b * 244, b * 142, b * 250, b * 139, b * 264);
    f.closePath();
    em(f, d[Jn], d[4], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130, b * 264);
    f.bezierCurveTo(b * 132, b * 244, b * 144, b * 235, b * 157, b * 232);
    f.bezierCurveTo(b * 245, b * 232, b * 201, b * 232, b * 245, b * 232);
    f.bezierCurveTo(b * 264, b * 235, b * 269, b * 251, b * 270, b * 264);
    f.bezierCurveTo(b * 272, b * 291, b * 248, b * 299, b * 242, b * 299);
    f.bezierCurveTo(b * 200, b * 299, b * 200, b * 299, b * 158, b * 299);
    f.bezierCurveTo(b * 139, b * 298, b * 130, b * 276, b * 130, b * 265);
    f.closePath();
    em(f, A, d[bq], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 140, b * 265.33333587646484);
    f.bezierCurveTo(b * 141, b * 250.33333587646484, b * 148, b * 244.33333587646484, b * 160, b * 241.33333587646484);
    f.bezierCurveTo(b * 200, b * 241.33333587646484, b * 200, b * 241.33333587646484, b * 240, b * 241.33333587646484);
    f.bezierCurveTo(b * 256, b * 243.33333587646484, b * 260, b * 255.33333587646484, b * 260, b * 265.33333587646484);
    f.bezierCurveTo(b * 261, b * 281.33333587646484, b * 247, b * 289.33333587646484, b * 240, b * 289.33333587646484);
    f.bezierCurveTo(b * 161, b * 289.33333587646484, b * 200.5, b * 289.33333587646484, b * 161, b * 289.33333587646484);
    f.bezierCurveTo(b * 149, b * 288.33333587646484, b * 142, b * 278.33333587646484, b * 140, b * 266.33333587646484);
    f.closePath();
    em(f, undefined, d[sj], b * 6);
    f.globalAlpha = 0.5;
    f.scale(1, dm);
    f.translate(b * 105, b * 155);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 59.27557373046875, b * 20.406280517578125);
    f.bezierCurveTo(b * 74.27557373046875, b * 5.406280517578125, b * 90.27557373046875, b * 6.406280517578125, b * 99.27557373046875, b * 5.406280517578125);
    f.bezierCurveTo(b * 120.27557373046875, b * 5.406280517578125, b * 126.27557373046875, b * 10.406280517578125, b * 136.27557373046875, b * 20.406280517578125);
    f.bezierCurveTo(b * 157.77557373046875, b * 37.906280517578125, b * 157.77557373046875, b * 37.906280517578125, b * 179.27557373046875, b * 55.406280517578125);
    f.bezierCurveTo(b * 190.27557373046875, b * 63.406280517578125, b * 192.27557373046875, b * 77.40628051757812, b * 189.27557373046875, b * 91.40628051757812);
    f.bezierCurveTo(b * 183.27557373046875, b * 108.40628051757812, b * 176.27557373046875, b * 110.40628051757812, b * 169.27557373046875, b * 118.40628051757812);
    f.bezierCurveTo(b * 152.27557373046875, b * 133.40628051757812, b * 152.27557373046875, b * 133.40628051757812, b * 135.27557373046875, b * 148.40628051757812);
    f.bezierCurveTo(b * 87.27557373046875, b * 143.40628051757812, b * 87.27557373046875, b * 143.40628051757812, b * 39.27557373046875, b * 138.40628051757812);
    f.bezierCurveTo(b * 26.77557373046875, b * 123.40628051757812, b * 26.77557373046875, b * 123.40628051757812, b * 14.27557373046875, b * 108.40628051757812);
    f.bezierCurveTo(b * 2.27557373046875, b * 95.40628051757812, b * 2.27557373046875, b * 92.40628051757812, b * 3.27557373046875, b * 83.40628051757812);
    f.bezierCurveTo(b * 4.27557373046875, b * 63.406280517578125, b * 12.27557373046875, b * 60.406280517578125, b * 24.27557373046875, b * 40.406280517578125);
    f.closePath();
    em(f, d[5], d[5], b * 4);
    f.globalAlpha = 1;
    f.translate(b * -110, b * -155);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 104, b * 237.8000030517578);
    f.bezierCurveTo(b * 110, b * 237.8000030517578, b * 110, b * 237.8000030517578, b * 116, b * 237.8000030517578);
    f.bezierCurveTo(b * 116, b * 241.8000030517578, b * 116, b * 241.8000030517578, b * 116, b * 245.8000030517578);
    f.bezierCurveTo(b * 115, b * 245.3000030517578, b * 115, b * 245.3000030517578, b * 114, b * 244.8000030517578);
    f.bezierCurveTo(b * 109.5, b * 244.8000030517578, b * 109.5, b * 244.8000030517578, b * 105, b * 244.8000030517578);
    f.closePath();
    em(f, d[Cm], d[1], z * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 211.20000457763672);
    f.bezierCurveTo(b * 106, b * 216.20000457763672, b * 101, b * 234.20000457763672, b * 102, b * 241.20000457763672);
    f.bezierCurveTo(b * 102, b * 260.2000045776367, b * 115, b * 269.2000045776367, b * 115, b * 269.2000045776367);
    f.bezierCurveTo(b * 116, b * 265.2000045776367, b * 115.5, b * 265.2000045776367, b * 116, b * 261.2000045776367);
    f.bezierCurveTo(b * 112, b * 264, b * 108, b * 254, b * 106, b * 242);
    f.bezierCurveTo(b * 105, b * 232, b * 110, b * 222, b * 115, b * 218);
    f.bezierCurveTo(b * 116, b * 216.75, b * 115.5, b * 217.375, b * 116, b * 216.75);
    f.closePath();
    em(f, d[0], d[1], ec * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 120, b * 207);
    f.bezierCurveTo(b * 115, b * 206, b * 114, b * 209, b * 114, b * 211);
    f.bezierCurveTo(b * 114, b * 268, b * 114, b * 241, b * 114, b * 271);
    f.bezierCurveTo(b * 115, b * 276, b * 118, b * 276, b * 120, b * 276);
    f.bezierCurveTo(b * 122, b * 273, b * 120.5, b * 274.5, b * 121, b * 273);
    f.bezierCurveTo(b * 121, b * 241, b * 121, b * 241, b * 121, b * 209);
    f.closePath();
    em(f, d[0], d[1], b * ih);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 284, b * 238);
    f.bezierCurveTo(b * 289.5, b * 238, b * 289.5, b * 238, b * 295, b * 238);
    f.bezierCurveTo(b * 295, b * 241.5, b * 295, b * 241.5, b * 295, b * 245);
    f.bezierCurveTo(b * 289.5, b * 245, b * 289.5, b * 245, b * 284, b * 245);
    f.closePath();
    em(f, d[0], d[1], Gi * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 283, b * 211);
    f.bezierCurveTo(b * 293, b * 216, b * 297, b * 231, b * 297, b * 241);
    f.bezierCurveTo(b * 298, b * 254, b * 290, b * 265, b * 284, b * 269);
    f.bezierCurveTo(b * 283, b * 266, b * 283.5, b * 266, b * 283, b * 263);
    f.bezierCurveTo(b * 290, b * 260, b * 292, b * 251, b * 293, b * 242);
    f.bezierCurveTo(b * 292, b * 223, b * 289, b * 224, b * 284, b * 218);
    f.closePath();
    em(f, d[du], d[Ic], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 280, b * 206);
    f.bezierCurveTo(b * 284, b * 206, b * 285, b * 208, b * 285, b * 211);
    f.bezierCurveTo(b * 285, b * 241.5, b * 285, b * 241.5, b * 285, b * 272);
    f.bezierCurveTo(b * 284, b * 275, b * 284, b * 275, b * 280, b * 275);
    f.bezierCurveTo(b * 279, b * 273.5, b * 279, b * 273.5, b * 278, b * 272);
    f.bezierCurveTo(b * 278, b * 240.5, b * 278, b * 240.5, b * 278, b * 209);
    f.closePath();
    em(f, d[0], d[Ko], b * Tg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 138, b * 298.40000915527344);
    f.bezierCurveTo(b * 141, b * 311.40000915527344, b * 151, b * 314.40000915527344, b * 162, b * 316.40000915527344);
    f.bezierCurveTo(b * 224, b * 316.40000915527344, b * 200, b * 315.90000915527344, b * 238, b * 315.40000915527344);
    f.bezierCurveTo(b * 254, b * 316.40000915527344, b * 261, b * 306.40000915527344, b * 264, b * 298.40000915527344);
    f.bezierCurveTo(b * 255, b * 304.40000915527344, b * 250, b * 306.40000915527344, b * 244, b * 306.40000915527344);
    f.bezierCurveTo(b * 201, b * 306.90000915527344, b * 201, b * 306.90000915527344, b * 158, b * 307.40000915527344);
    f.bezierCurveTo(b * 150, b * 306.40000915527344, b * 148, b * 306.40000915527344, b * 139, b * 300.40000915527344);
    f.closePath();
    em(f, d[0], d[Lo], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 177.5999984741211);
    f.bezierCurveTo(b * 130, b * 175.5999984741211, b * 123, b * 190.5999984741211, b * 122, b * 205.5999984741211);
    f.bezierCurveTo(b * 121, b * 277.5999984741211, b * 122, b * 242.5999984741211, b * 122, b * 279.5999984741211);
    f.bezierCurveTo(b * 128, b * 297.5999984741211, b * 137, b * 299.5999984741211, b * 143, b * 300.5999984741211);
    f.bezierCurveTo(b * 163, b * 301.0999984741211, b * 163, b * 301.0999984741211, b * 183, b * 301.5999984741211);
    f.bezierCurveTo(b * 150, b * 300.5999984741211, b * 135, b * 290.5999984741211, b * 134, b * 267.5999984741211);
    f.bezierCurveTo(b * 133, b * 245.5999984741211, b * 146, b * 235.5999984741211, b * 164, b * 235.5999984741211);
    f.bezierCurveTo(b * 206, b * 236.0999984741211, b * 206, b * 236.0999984741211, b * 248, b * 236.5999984741211);
    f.bezierCurveTo(b * 266, b * 243.5999984741211, b * 268, b * 259.5999984741211, b * 267, b * 266.5999984741211);
    f.bezierCurveTo(b * 266, b * 288.5999984741211, b * 251, b * 294.5999984741211, b * 244, b * 297.5999984741211);
    f.bezierCurveTo(b * 228.5, b * 299.5999984741211, b * 228.5, b * 299.5999984741211, b * 213, b * 301.5999984741211);
    f.bezierCurveTo(b * 236, b * 301.0999984741211, b * 236, b * 301.0999984741211, b * 259, b * 300.5999984741211);
    f.bezierCurveTo(b * 272, b * 295.5999984741211, b * 277, b * 288.5999984741211, b * 278, b * 271.5999984741211);
    f.bezierCurveTo(b * 277.5, b * 236.5999984741211, b * 277.5, b * 236.5999984741211, b * 277, b * 201.5999984741211);
    f.bezierCurveTo(b * 276, b * 186.5999984741211, b * 265, b * 178.5999984741211, b * 254, b * 177.5999984741211);
    f.bezierCurveTo(b * 247.5, b * 177.5999984741211, b * 247.5, b * 177.5999984741211, b * 241, b * 177.5999984741211);
    f.bezierCurveTo(b * No, b * 202.5999984741211, b * 214, b * 217.5999984741211, b * 201, b * 215.5999984741211);
    f.bezierCurveTo(b * 170, b * 215.5999984741211, b * 152, b * 197.5999984741211, b * 161, b * 178.5999984741211);
    f.closePath();
    em(f, d[Vn], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 162, b * 175.5999984741211);
    f.bezierCurveTo(b * 153, b * 176.0999984741211, b * 153, b * 176.0999984741211, b * 144, b * 176.5999984741211);
    f.bezierCurveTo(b * 125, b * 178.5999984741211, b * 121, b * 196.5999984741211, b * 121, b * 207.5999984741211);
    f.bezierCurveTo(b * 121, b * 243.20000076293945, b * 121, b * 243.20000076293945, b * 121, b * 278.8000030517578);
    f.bezierCurveTo(b * 126, b * 298.8000030517578, b * 137, b * 300.8000030517578, b * 146, b * 302.8000030517578);
    f.bezierCurveTo(b * 200.5, b * 302.8000030517578, b * 200.5, b * 302.8000030517578, b * sc, b * 302.8000030517578);
    f.bezierCurveTo(b * 271, b * 301.8000030517578, b * 279, b * 288.8000030517578, b * 279, b * 273.8000030517578);
    f.bezierCurveTo(b * 279, b * 236.8000030517578, b * 279, b * 236.8000030517578, b * 279, b * 199.8000030517578);
    f.bezierCurveTo(b * 274, b * 178.8000030517578, b * 263, b * 177.8000030517578, b * 255, b * 175.8000030517578);
    f.bezierCurveTo(b * 248, b * 175.8000030517578, b * 248, b * 175.8000030517578, b * 241, b * 175.8000030517578);
    f.bezierCurveTo(b * 240, b * 175.8000030517578, b * 240, b * 175.8000030517578, b * 239, b * 175.8000030517578);
    f.bezierCurveTo(b * 254, b * 200.8000030517578, b * 222, b * 211.8000030517578, b * 202, b * 212.8000030517578);
    f.bezierCurveTo(b * 168, b * 213.8000030517578, b * 151, b * 190.8000030517578, b * 163, b * 176.8000030517578);
    f.closePath();
    em(f, A, d[oe], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 198, b * 161.4000015258789);
    f.bezierCurveTo(b * 198, b * 186.9000015258789, b * 198, b * 186.9000015258789, b * 198, b * 212.4000015258789);
    f.bezierCurveTo(b * 201, b * 212.4000015258789, b * 201, b * 212.4000015258789, b * 204, b * 212.4000015258789);
    f.bezierCurveTo(b * 204, b * 186.9000015258789, b * 204, b * 186.9000015258789, b * 204, b * 161.4000015258789);
    f.closePath();
    em(f, d[0], d[wg], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 161, b * 194);
    f.bezierCurveTo(b * 188, b * 169, b * 231, b * 179, b * 241, b * 194);
    f.bezierCurveTo(b * 239.5, b * 196, b * 239.5, b * 196, b * 238, b * 198);
    f.bezierCurveTo(b * 221, b * 179, b * 182, b * 182, b * 165, b * 198);
    f.closePath();
    em(f, d[0], d[Ps], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157, b * 188.80000019073486);
    f.bezierCurveTo(b * 162, b * 150.80000019073486, b * 241, b * 150.80000019073486, b * 245, b * 188.80000019073486);
    f.bezierCurveTo(b * 242, b * 224.80000019073486, b * 162, b * 228.80000019073486, b * 157, b * 188.80000019073486);
    f.bezierCurveTo(b * 159, b * 188.80000019073486, b * 159, b * 188.80000019073486, b * 161, b * 188.80000019073486);
    f.bezierCurveTo(b * 168, b * 216.80000019073486, b * 231, b * 218.80000019073486, b * 241, b * 188.80000019073486);
    f.bezierCurveTo(b * 236, b * 156.80000019073486, b * 169, b * 152.80000019073486, b * 161, b * 188.80000019073486);
    f.closePath();
    em(f, d[bd], d[lt], wc * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 156, b * 188);
    f.bezierCurveTo(b * 160, b * 164, b * 183, b * 159, b * 201, b * 158);
    f.bezierCurveTo(b * 232, b * 159, b * 244, b * 174, b * 246, b * 188);
    f.bezierCurveTo(b * 245, b * 212, b * 213, b * 219, b * 201, b * 218);
    f.bezierCurveTo(b * 181, b * 221, b * 158, b * 207, b * 156, b * 190);
    f.closePath();
    em(f, undefined, d[1], b * Gi);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 162, b * 189);
    f.bezierCurveTo(b * 166, b * 170, b * 185, b * 165, b * 201, b * 164);
    f.bezierCurveTo(b * 227, b * 165, b * 240, b * 178, b * 239, b * 188);
    f.bezierCurveTo(b * 239, b * 204, b * 210, b * 210, b * 201, b * 210);
    f.bezierCurveTo(b * 182, b * 211, b * 166, b * 200, b * 162, b * 190);
    f.closePath();
    em(f, Z, d[fi], eu * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131, b * 262);
    f.bezierCurveTo(b * 136, b * 241, b * 144, b * 236, b * 158, b * 233);
    f.bezierCurveTo(b * 200.5, b * 233, b * 229, b * 232, b * 243, b * 233);
    f.bezierCurveTo(b * 259, b * 235, b * 267, b * 248, b * 269, b * 260);
    f.bezierCurveTo(b * 269, b * 266.5, b * 269, b * 266.5, b * 269, b * 273);
    f.bezierCurveTo(b * 265, b * 290, b * 251, b * 297, b * 242, b * 298);
    f.bezierCurveTo(b * 202, b * 298, b * 202, b * 298, b * 162, b * 298);
    f.bezierCurveTo(b * 148, b * 298, b * 136, b * 289, b * 132, b * 273);
    f.bezierCurveTo(b * 131.5, b * 268, b * 131.5, b * 268, b * 131, b * 263);
    f.bezierCurveTo(b * 135, b * 263, b * 135, b * 263, b * 139, b * 263);
    f.bezierCurveTo(b * 139, b * 281, b * 151, b * 287, b * 160, b * 290);
    f.bezierCurveTo(b * 200.5, b * 290, b * 200.5, b * 290, b * 241, b * 290);
    f.bezierCurveTo(b * 252, b * 290, b * 257, b * 281, b * 262, b * 271);
    f.bezierCurveTo(b * 261.5, b * 267, b * 261.5, b * 267, b * 261, b * 263);
    f.bezierCurveTo(b * 260, b * 249, b * 251, b * 242, b * 241, b * 241);
    f.bezierCurveTo(b * 240.5, b * 240.5, b * 240.5, b * 240.5, b * 240, b * 240);
    f.bezierCurveTo(b * 200, b * 240, b * 200, b * 240, b * 160, b * 240);
    f.bezierCurveTo(b * 145, b * 244, b * 142, b * 250, b * 139, b * 264);
    f.closePath();
    em(f, d[0], d[0], b * hu);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130, b * 264);
    f.bezierCurveTo(b * 132, b * 244, b * 144, b * 235, b * 157, b * 232);
    f.bezierCurveTo(b * 245, b * 232, b * 201, b * 232, b * 245, b * 232);
    f.bezierCurveTo(b * 264, b * 235, b * 269, b * 251, b * 270, b * 264);
    f.bezierCurveTo(b * 272, b * 291, b * 248, b * 299, b * 242, b * 299);
    f.bezierCurveTo(b * 200, b * 299, b * 200, b * 299, b * 158, b * 299);
    f.bezierCurveTo(b * 139, b * 298, b * 130, b * 276, b * 130, b * 265);
    f.closePath();
    em(f, Rc, d[Lo], b * ec);
    return e;
  }
  function tf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 373;
    e.height = b * 314;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Me * b, b * qn);
    f.save();
    f.translate(b * 184.048583984375, b * 69.1805419921875);
    nm(f, b * -40, b * -28.5, b * 80, b * 57, b * 10);
    f.restore();
    em(f, d[1], d[Gi], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 185.048583984375, b * 61.6805419921875);
    f.bezierCurveTo(b * 145.048583984375, b * 59.6805419921875, b * 138.048583984375, b * 41.6805419921875, b * 148.048583984375, b * 33.6805419921875);
    f.bezierCurveTo(b * 169.048583984375, b * 17.6805419921875, b * 194.048583984375, b * 20.6805419921875, b * 210.048583984375, b * 27.6805419921875);
    f.bezierCurveTo(b * 234.048583984375, b * 40.6805419921875, b * 225.048583984375, b * 57.6805419921875, b * 186.048583984375, b * 61.6805419921875);
    f.closePath();
    em(f, d[0], d[0], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 224.048583984375, b * 56.6805419921875);
    f.bezierCurveTo(b * 326.048583984375, b * 69.6805419921875, b * 363.048583984375, b * 148.6805419921875, b * 349.048583984375, b * 206.6805419921875);
    f.bezierCurveTo(b * 329.048583984375, b * 278.6805419921875, b * 252.048583984375, b * 283.6805419921875, b * 206.048583984375, b * 275.6805419921875);
    f.bezierCurveTo(b * 206.548583984375, b * 266.6805419921875, b * 206.548583984375, b * 266.6805419921875, b * 207.048583984375, b * 257.6805419921875);
    f.bezierCurveTo(b * 276.048583984375, b * 268.6805419921875, b * 308.048583984375, b * 239.6805419921875, b * 323.048583984375, b * 208.6805419921875);
    f.bezierCurveTo(b * 352.048583984375, b * 145.6805419921875, b * 292.048583984375, b * 86.6805419921875, b * 223.048583984375, b * 74.6805419921875);
    f.closePath();
    em(f, d[0], d[0], b * 6);
    f.save();
    f.translate(b * 183.548583984375, b * 119.6805419921875);
    nm(f, b * -121.5, b * -45, b * 243, b * 90, b * 40);
    f.restore();
    em(f, d[Cm], d[Gc], b * 6);
    f.save();
    f.translate(b * 183.048583984375, b * 155.6805419921875);
    nm(f, b * -121, b * -52, b * 242, b * 104, b * 40);
    f.restore();
    em(f, d[ke], d[Cm], b * 6);
    f.save();
    f.translate(b * 183.048583984375, b * 205.1805419921875);
    nm(f, b * -121, b * -50.5, b * 242, b * 101, b * 40);
    f.restore();
    em(f, d[Ng], d[0], b * Cu);
    f.save();
    f.translate(b * 185.048583984375, b * 204.1805419921875);
    nm(f, -Vs * b, b * -34.5, b * 200, b * 69, b * 40);
    f.restore();
    em(f, d[0], d[0], b * 6);
    rm(f, b * 185.048583984375, b * 257.6805419921875, b * 27.018512172212592);
    em(f, d[Jj], d[0], b * 6);
    f.globalAlpha = fo;
    f.translate(b * -5, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 224.048583984375, b * 56.6805419921875);
    f.bezierCurveTo(b * 326.048583984375, b * 69.6805419921875, b * 363.048583984375, b * 148.6805419921875, b * 349.048583984375, b * 206.6805419921875);
    f.bezierCurveTo(b * 329.048583984375, b * 278.6805419921875, b * 252.048583984375, b * 283.6805419921875, b * 206.048583984375, b * 275.6805419921875);
    f.bezierCurveTo(b * 206.548583984375, b * 266.6805419921875, b * 206.548583984375, b * 266.6805419921875, b * 207.048583984375, b * 257.6805419921875);
    f.bezierCurveTo(b * 276.048583984375, b * 268.6805419921875, b * 308.048583984375, b * 239.6805419921875, b * 323.048583984375, b * 208.6805419921875);
    f.bezierCurveTo(b * 352.048583984375, b * 145.6805419921875, b * 292.048583984375, b * 86.6805419921875, b * 223.048583984375, b * 74.6805419921875);
    f.closePath();
    em(f, d[3], d[Nr], b * 6);
    f.save();
    f.translate(b * 184.048583984375, b * 69.1805419921875);
    nm(f, b * -40, b * -28.5, b * 80, b * 57, b * 10);
    f.restore();
    em(f, d[yd], d[2], b * sj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 185.048583984375, b * 61.6805419921875);
    f.bezierCurveTo(b * 145.048583984375, b * 59.6805419921875, b * 138.048583984375, b * 41.6805419921875, b * 148.048583984375, b * 33.6805419921875);
    f.bezierCurveTo(b * 169.048583984375, b * 17.6805419921875, b * 194.048583984375, b * 20.6805419921875, b * 210.048583984375, b * 27.6805419921875);
    f.bezierCurveTo(b * 234.048583984375, b * 40.6805419921875, b * 225.048583984375, b * 57.6805419921875, b * 186.048583984375, b * 61.6805419921875);
    f.closePath();
    em(f, d[1], d[wc], Fa * b);
    f.save();
    f.translate(b * 183.548583984375, b * 119.6805419921875);
    nm(f, b * -121.5, b * -45, b * 243, b * 90, b * 40);
    f.restore();
    em(f, d[Co], d[bq], b * 6);
    f.save();
    f.translate(b * 183.048583984375, b * 155.6805419921875);
    nm(f, b * -121, b * -52, b * 242, b * 104, b * 40);
    f.restore();
    em(f, d[mq], d[_n], b * Ae);
    f.save();
    f.translate(b * 183.048583984375, b * 205.1805419921875);
    nm(f, b * -121, b * -50.5, b * 242, b * 101, b * 40);
    f.restore();
    em(f, d[lc], d[_g], b * 6);
    f.globalCompositeOperation = "destination-out";
    f.save();
    f.translate(b * 185.048583984375, b * 204.1805419921875);
    nm(f, b * -Kn, b * -34.5, b * 200, b * 69, b * 40);
    f.restore();
    em(f, d[7], d[qs], lc * b);
    f.globalCompositeOperation = "source-over";
    f.globalAlpha = 0.5;
    f.save();
    f.translate(b * 185.048583984375, b * 204.1805419921875);
    nm(f, -Gh * b, b * -34.5, b * 200, b * 69, b * 40);
    f.restore();
    em(f, d[7], d[rg], b * 6);
    f.globalAlpha = 1;
    f.save();
    rm(f, b * 185.048583984375, b * 257.6805419921875, b * 27.018512172212592);
    em(f, d[jh], d[_n], b * 6);
    f.restore();
    return e;
  }
  const ef = om;
  function nf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * 10, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 100.5, b * 126.34375);
    f.bezierCurveTo(b * 151.5, b * 104.34375, b * 279.5, b * 188.34375, b * 297.5, b * 292.34375);
    f.bezierCurveTo(b * 222.5, b * 307.34375, b * 106.5, b * 196.34375, b * 100.5, b * 127.34375);
    f.closePath();
    em(f, d[0], d[0], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 106.5, b * 131.34375);
    f.bezierCurveTo(b * 140.5, b * 142.34375, b * 225.5, b * 184.34375, b * 290.5, b * 287.34375);
    f.bezierCurveTo(b * 270.5, b * 188.34375, b * 152.5, b * 118.34375, b * 107.5, b * 131.34375);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157.5, b * 137.34375);
    f.bezierCurveTo(b * 161.5, b * 138.34375, b * 164.5, b * 140.34375, b * 168.5, b * 142.34375);
    f.bezierCurveTo(b * 165.5, b * 156.34375, b * 141.5, b * 176.34375, b * 126.5, b * 179.34375);
    f.bezierCurveTo(b * 123.5, b * 173.34375, b * 120.5, b * 169.34375, b * 120.5, b * 169.34375);
    f.bezierCurveTo(b * 141.5, b * 161.34375, b * 156.5, b * 145.34375, b * 155.5, b * 136.34375);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 196.5, b * 151.34375);
    f.bezierCurveTo(b * 211.5, b * 158.34375, b * 224.5, b * 171.34375, b * 229.5, b * 176.34375);
    f.bezierCurveTo(b * 246.5, b * 163.34375, b * 259.5, b * 166.34375, b * 272.5, b * 168.34375);
    f.bezierCurveTo(b * 254.5, b * 146.34375, b * 214.5, b * 145.34375, b * 198.5, b * 151.34375);
    f.closePath();
    em(f, d[0], d[0], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 154.5, b * 222.34375);
    f.bezierCurveTo(b * 164.5, b * 234.34375, b * 173.5, b * 242.34375, b * 178.5, b * 245.34375);
    f.bezierCurveTo(b * 174.5, b * 265.34375, b * 180.5, b * 274.34375, b * 186.5, b * 283.34375);
    f.bezierCurveTo(b * 165.5, b * 277.34375, b * 151.5, b * 245.34375, b * 155.5, b * 224.34375);
    f.closePath();
    em(f, d[0], d[sh], li * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 279.5, b * 294.34375);
    f.bezierCurveTo(b * 286.5, b * 285.84375, b * 286.5, b * 285.84375, b * 293.5, b * 277.34375);
    f.bezierCurveTo(b * 315.5, b * 280.34375, b * 315.5, b * 280.34375, b * 337.5, b * 283.34375);
    f.bezierCurveTo(b * 340.5, b * 311.34375, b * 317.5, b * 326.34375, b * 307.5, b * 331.34375);
    f.closePath();
    em(f, d[0], d[so], b * 12);
    f.globalAlpha = 1;
    f.translate(b * -rs, b * -Gj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 100.5, b * 126.34375);
    f.bezierCurveTo(b * 151.5, b * 104.34375, b * 279.5, b * 188.34375, b * 297.5, b * 292.34375);
    f.bezierCurveTo(b * 222.5, b * 307.34375, b * 106.5, b * 196.34375, b * 100.5, b * 127.34375);
    f.closePath();
    em(f, d[1], d[Gi], Uh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 106.5, b * 131.34375);
    f.bezierCurveTo(b * 140.5, b * 142.34375, b * 225.5, b * 184.34375, b * 290.5, b * 287.34375);
    f.bezierCurveTo(b * 270.5, b * 188.34375, b * 152.5, b * 118.34375, b * 107.5, b * 131.34375);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157.5, b * 137.34375);
    f.bezierCurveTo(b * 161.5, b * 138.34375, b * 164.5, b * 140.34375, b * 168.5, b * 142.34375);
    f.bezierCurveTo(b * 165.5, b * 156.34375, b * 141.5, b * 176.34375, b * 126.5, b * 179.34375);
    f.bezierCurveTo(b * 123.5, b * 173.34375, b * 120.5, b * 169.34375, b * 120.5, b * 169.34375);
    f.bezierCurveTo(b * 141.5, b * 161.34375, b * 156.5, b * 145.34375, b * 155.5, b * 136.34375);
    f.closePath();
    em(f, d[Ha]);
    rm(f, b * 125.5, b * 140.34375, b * 11.180339887498949);
    em(f, d[bg]);
    rm(f, b * 122.5, b * 135.34375, b * 5.0990195135927845);
    em(f, d[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 196.5, b * 151.34375);
    f.bezierCurveTo(b * 211.5, b * 158.34375, b * 224.5, b * 171.34375, b * 229.5, b * 176.34375);
    f.bezierCurveTo(b * 246.5, b * 163.34375, b * 259.5, b * 166.34375, b * 272.5, b * 168.34375);
    f.bezierCurveTo(b * 254.5, b * 146.34375, b * 214.5, b * 145.34375, b * 198.5, b * 151.34375);
    f.closePath();
    em(f, d[7], d[kc], Eo * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 154.5, b * 222.34375);
    f.bezierCurveTo(b * 164.5, b * 234.34375, b * 173.5, b * 242.34375, b * 178.5, b * 245.34375);
    f.bezierCurveTo(b * 174.5, b * 265.34375, b * 180.5, b * 274.34375, b * 186.5, b * 283.34375);
    f.bezierCurveTo(b * 165.5, b * 277.34375, b * 151.5, b * 245.34375, b * 155.5, b * 224.34375);
    f.closePath();
    em(f, d[Wm], d[8], de * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 279.5, b * 294.34375);
    f.bezierCurveTo(b * 286.5, b * 285.84375, b * 286.5, b * 285.84375, b * 293.5, b * 277.34375);
    f.bezierCurveTo(b * 315.5, b * 280.34375, b * 315.5, b * 280.34375, b * 337.5, b * 283.34375);
    f.bezierCurveTo(b * 340.5, b * 311.34375, b * 317.5, b * 326.34375, b * 307.5, b * 331.34375);
    f.closePath();
    em(f, d[7], d[8], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 296.5, b * 287.34375);
    f.bezierCurveTo(b * 311.5, b * 291.34375, b * 311.5, b * 291.34375, b * 326.5, b * 295.34375);
    f.closePath();
    em(f, undefined, d[9], ss * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 294.5, b * 289.34375);
    f.bezierCurveTo(b * 308.5, b * 297.34375, b * 308.5, b * 297.34375, b * 322.5, b * 305.34375);
    f.closePath();
    em(f, undefined, d[9], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 294.5, b * 291.34375);
    f.bezierCurveTo(b * 304, b * 303.34375, b * 304, b * 303.34375, b * 313.5, b * 315.34375);
    f.closePath();
    em(f, undefined, d[F], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 226.5, b * 161.34375);
    f.bezierCurveTo(b * 230.5, b * 160.34375, b * 236.5, b * 158.34375, b * 238.5, b * 161.34375);
    f.bezierCurveTo(b * 238.5, b * 157.34375, b * 228.5, b * 159.34375, b * 227.5, b * 161.34375);
    f.closePath();
    em(f, Ls, d[9], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 167.5, b * 248.34375);
    f.bezierCurveTo(b * 165.5, b * 251.34375, b * 168.5, b * 256.34375, b * 168.5, b * 253.34375);
    f.bezierCurveTo(b * 166.5, b * 252.34375, b * 168.5, b * 246.34375, b * 166.5, b * 247.34375);
    f.closePath();
    em(f, Lr, d[Lg], b * 3);
    return e;
  }
  function af(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 309;
    e.height = b * 287;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * co, b * Tc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 34.5, b * 38.53125);
    f.bezierCurveTo(b * 91.5, b * 30.53125, b * 138.5, b * 68.53125, b * 169.5, b * 93.53125);
    f.bezierCurveTo(b * 208.5, b * 128.53125, b * 226.5, b * 157.53125, b * 233.5, b * 209.53125);
    f.bezierCurveTo(b * 195.5, b * 218.53125, b * 138.5, b * 191.53125, b * 105.5, b * 157.53125);
    f.bezierCurveTo(b * 54.5, b * 112.53125, b * 41.5, b * 80.53125, b * 33.5, b * 38.53125);
    f.closePath();
    em(f, d[0], d[0], co * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 143.5, b * 74.53125);
    f.bezierCurveTo(b * 164.5, b * 73.53125, b * 159, b * 74.53125, b * 174.5, b * 74.53125);
    f.bezierCurveTo(b * 186, b * 86.53125, b * 186, b * 86.53125, b * 197.5, b * 98.53125);
    f.bezierCurveTo(b * 186, b * 97.03125, b * 186, b * 97.03125, b * 174.5, b * 95.53125);
    f.closePath();
    em(f, d[ke], d[0], Ki * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.5, b * 142.53125);
    f.bezierCurveTo(b * 92, b * 160.03125, b * 92, b * 160.03125, b * 96.5, b * 177.53125);
    f.bezierCurveTo(b * 108, b * 181.53125, b * 108, b * 181.53125, b * 119.5, b * 185.53125);
    f.bezierCurveTo(b * 116.5, b * 175.53125, b * 116.5, b * 175.53125, b * 113.5, b * 165.53125);
    f.closePath();
    em(f, d[0], d[0], co * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 236.5, b * 189.53125);
    f.bezierCurveTo(b * 274.5, b * 197.53125, b * 255.5, b * 194.03125, b * 274.5, b * 198.53125);
    f.bezierCurveTo(b * 272.5, b * 236.53125, b * 261.5, b * 237.53125, b * 242.5, b * 248.53125);
    f.bezierCurveTo(b * 230.5, b * 231.03125, b * 230.5, b * 231.03125, b * 218.5, b * 213.53125);
    f.closePath();
    em(f, d[0], d[Ng], ue * b);
    f.globalAlpha = Lh;
    f.translate(-mm * b, b * -Wg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 34.5, b * 38.53125);
    f.bezierCurveTo(b * 91.5, b * 30.53125, b * 138.5, b * 68.53125, b * 169.5, b * 93.53125);
    f.bezierCurveTo(b * 208.5, b * 128.53125, b * 226.5, b * 157.53125, b * 233.5, b * 209.53125);
    f.bezierCurveTo(b * 195.5, b * 218.53125, b * 138.5, b * 191.53125, b * 105.5, b * 157.53125);
    f.bezierCurveTo(b * 54.5, b * 112.53125, b * 41.5, b * 80.53125, b * 33.5, b * 38.53125);
    f.closePath();
    em(f, d[fn], d[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 143.5, b * 74.53125);
    f.bezierCurveTo(b * 164.5, b * 73.53125, b * 159, b * 74.53125, b * 174.5, b * 74.53125);
    f.bezierCurveTo(b * 186, b * 86.53125, b * 186, b * 86.53125, b * 197.5, b * 98.53125);
    f.bezierCurveTo(b * 186, b * 97.03125, b * 186, b * 97.03125, b * 174.5, b * 95.53125);
    f.closePath();
    em(f, d[fn], d[Te], ar * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.5, b * 142.53125);
    f.bezierCurveTo(b * 92, b * 160.03125, b * 92, b * 160.03125, b * 96.5, b * 177.53125);
    f.bezierCurveTo(b * 108, b * 181.53125, b * 108, b * 181.53125, b * 119.5, b * 185.53125);
    f.bezierCurveTo(b * 116.5, b * 175.53125, b * 116.5, b * 175.53125, b * 113.5, b * 165.53125);
    f.closePath();
    em(f, d[1], d[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 236.5, b * 189.53125);
    f.bezierCurveTo(b * 274.5, b * 197.53125, b * 255.5, b * 194.03125, b * 274.5, b * 198.53125);
    f.bezierCurveTo(b * 272.5, b * 236.53125, b * 261.5, b * 237.53125, b * 242.5, b * 248.53125);
    f.bezierCurveTo(b * 230.5, b * 231.03125, b * 230.5, b * 231.03125, b * 218.5, b * 213.53125);
    f.closePath();
    em(f, d[1], d[ih], ue * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 109.5, b * 51.53125);
    f.bezierCurveTo(b * 107.5, b * 92.53125, b * 91.5, b * 95.53125, b * 59.5, b * 101.53125);
    em(f, d[1], d[ih], Oi * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 51.53125);
    f.bezierCurveTo(b * 71, b * 64.53125, b * 69.5, b * 76.53125, b * 69.5, b * 77.53125);
    f.closePath();
    em(f, d[1], d[2], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84.5, b * 63.53125);
    f.bezierCurveTo(b * 70.5, b * 65.03125, b * 70.5, b * 65.03125, b * 56.5, b * 66.53125);
    f.closePath();
    em(f, d[Mc], d[Vn], b * Ke);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 125.5, b * 84.53125);
    f.bezierCurveTo(b * 125.5, b * 110.03125, b * 125.5, b * 110.03125, b * 125.5, b * 135.53125);
    f.closePath();
    em(f, d[1], d[2], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 149.5, b * 108.53125);
    f.bezierCurveTo(b * 150, b * 137.03125, b * 150, b * 137.03125, b * 150.5, b * 165.53125);
    f.closePath();
    em(f, d[Ps], d[ih], Mj * b);
    return e;
  }
  function sf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 130;
    var g = b * 142;
    var i = a / 2;
    var j = g / 2;
    e.width = a;
    e.height = g;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    rm(f, 0, du, b * 60);
    em(f, d[0]);
    f.translate(Jj, b * -7);
    f.globalAlpha = fo;
    rm(f, Ea, 0, b * 60);
    em(f, d[1], d[2], bq * b);
    rm(f, 0, 0, b * 40);
    em(f, d[E]);
    rm(f, 0, sh, b * 25);
    em(f, d[4], d[5], b * 8);
    return e;
  }
  const rf = ue;
  function of(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 130;
    e.height = b * 142;
    f.globalAlpha = c ? 0.5 : yd;
    f.save();
    f.translate(b * 65, b * 80);
    f.rotate(0.2);
    cm(f, 9, b * 60, co * b);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = yd;
    f.save();
    f.translate(b * 65, b * 71);
    f.rotate(0.2);
    cm(f, 9, b * 60, b * 10);
    em(f, d[Lo], d[wc], Jn);
    f.rotate(-0.32);
    cm(f, sm, b * 38, ue * b);
    em(f, d[3], d[Gs], 4);
    f.rotate(0.68);
    cm(f, 9, b * 20, b * 8);
    em(f, d[5], d[Th], 6);
    f.restore();
    return e;
  }
  const hf = Ps;
  function gf(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(wt * a, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    em(d, b[0]);
    d.globalAlpha = 1;
    d.translate(-tg * a, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    em(d, b[X], b[ec], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    em(d, b[3], b[Xg], a * yo);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    em(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    em(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    em(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    em(d, b[jh], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    em(d, b[Ie], b[3], Gi * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    em(d, undefined, b[2], a * 4);
    return c;
  }
  function cf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 125;
    e.height = b * 139;
    f.globalAlpha = c ? 0.5 : ae;
    f.save();
    f.translate(b * 63, b * 79);
    f.rotate(dm);
    cm(f, 8, b * 60, b * 10);
    em(f, d[0]);
    f.restore();
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 63, b * 69);
    f.rotate(Ej);
    cm(f, 8, b * 60, b * 10);
    em(f, d[au], d[2], Gs);
    f.rotate(0.56);
    cm(f, q, b * 40, b * 10);
    em(f, d[Lc], d[4], cn);
    f.rotate(0.28);
    cm(f, 8, b * 28, b * 8);
    em(f, d[et]);
    f.restore();
    return e;
  }
  function df(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 248;
    e.height = b * 128;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 137, b * 7);
    f.bezierCurveTo(b * 169, b * 14, b * 212, Lg * b, b * 241, b * 5);
    f.bezierCurveTo(b * 211, b * 63, b * 158, b * 92, b * 103, b * 109);
    f.bezierCurveTo(b * 73, b * 126, b * 54, b * 124, lc * b, b * 99);
    f.bezierCurveTo(b * 82, b * 63, b * 113, b * 35, b * 137, b * 8);
    f.closePath();
    em(f, d[bd], d[1], b * qj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 73, b * 124);
    f.bezierCurveTo(b * 111, b * 126, b * 162, b * 97, b * 203, b * 61);
    f.bezierCurveTo(b * 156, b * 98, b * 131, b * 106, b * 105, b * 109);
    f.bezierCurveTo(b * 99, b * 121, b * 87, b * 124, b * 72, b * 124);
    f.closePath();
    em(f, d[2], d[3], b * 1);
    return e;
  }
  function mf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 90;
    e.height = b * 98;
    f.translate(nj, b * Gm);
    if (Td === 0) {
      f.globalAlpha = c ? 0.5 : Ej;
      f.save();
      f.translate(b * 44, b * 50);
      f.rotate(lt);
      cm(f, 8, b * 41, b * _);
      em(f, d[0]);
      f.restore();
    }
    f.globalAlpha = hf;
    f.save();
    f.translate(b * 44, b * 44);
    f.rotate(1);
    cm(f, 8, b * 41, rs * b);
    em(f, d[Ps], d[2], b * 4);
    f.rotate(0.56);
    cm(f, 8, b * 33, b * 10);
    em(f, d[Wc], d[Jn], b * _g);
    f.rotate(0.28);
    cm(f, 8, b * 24, b * 8);
    em(f, d[5]);
    f.restore();
    f.save();
    f.translate(b * 45, b * 45);
    f.rotate(sh);
    nm(f, b * -9, b * -25.5, b * 18, b * 51, b * 30);
    f.restore();
    em(f, d[4], d[Ac], Gi * b);
    f.save();
    f.translate(b * 45, b * 45);
    f.rotate(0);
    nm(f, b * -26, -G * b, b * 52, b * Zd, b * 30);
    f.restore();
    em(f, d[_n], d[4], b * 2);
    rm(f, b * 45, b * 29, I * b);
    em(f, d[5]);
    rm(f, b * 45, b * 61, Ih * b);
    em(f, d[Y]);
    rm(f, b * 28, b * 45, b * 7);
    em(f, d[dh]);
    rm(f, b * 62, b * 45, Ke * b);
    em(f, d[5]);
    return e;
  }
  function uf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 90;
    e.height = b * 98;
    f.translate(sh, b * 4);
    if (Td === 0) {
      f.globalAlpha = c ? 0.5 : 1;
      f.save();
      f.translate(b * 44, b * 50);
      f.rotate(1.4);
      cm(f, $q, b * 41, b * 10);
      f.restore();
      em(f, d[0]);
    }
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 44, b * 44);
    f.rotate(1.4);
    cm(f, 7, b * 41, b * 10);
    em(f, d[Ej], d[En], b * 4);
    cm(f, 7, b * 35, b * rs);
    em(f, d[Qe], d[4], b * 4);
    cm(f, ef, b * 23, b * 5);
    f.restore();
    em(f, d[5]);
    f.save();
    f.translate(b * 45, b * 45);
    f.rotate(Vd);
    nm(f, b * -Pc, b * -25.5, b * 18, b * 51, b * 30);
    f.restore();
    em(f, d[4], d[sj], b * 2);
    f.save();
    f.translate(b * 45, b * 45);
    f.rotate(Ou);
    nm(f, b * -26, -dc * b, b * 52, b * 18, b * 30);
    f.restore();
    em(f, d[Dd], d[Ac], b * En);
    rm(f, b * 45, b * 29, b * 7);
    em(f, d[5]);
    rm(f, b * 45, b * 61, b * 7);
    em(f, d[5]);
    rm(f, b * 28, b * 45, Ig * b);
    em(f, d[5]);
    rm(f, b * 62, b * 45, b * 7);
    em(f, d[5]);
    return e;
  }
  function ff(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 90;
    e.height = b * 101;
    f.translate(b * sh, b * 5);
    if (Td === Ka) {
      f.globalAlpha = c ? 0.5 : 1;
      rm(f, b * 44, b * 55, b * 41);
      em(f, d[sh]);
    }
    f.globalAlpha = 1;
    rm(f, b * 44, b * 45, b * 41);
    em(f, d[1], d[lr], b * Rh);
    rm(f, b * 44, b * 45, b * 31);
    em(f, d[3]);
    f.save();
    f.translate(b * 45, b * 45);
    nm(f, b * -9, b * -25.5, b * 18, b * 51, b * 30);
    f.restore();
    em(f, d[Jn], d[4], b * 2);
    f.save();
    f.translate(b * 45, b * 45);
    nm(f, b * -26, b * -dc, b * 52, b * 18, b * 30);
    f.restore();
    em(f, d[4], d[4], b * 2);
    rm(f, b * 45, b * 29, b * 7);
    em(f, d[5]);
    rm(f, b * 45, b * 61, b * Mq);
    em(f, d[Au]);
    rm(f, b * 28, b * 45, b * 7);
    em(f, d[Au]);
    rm(f, b * 62, b * 45, b * 7);
    em(f, d[Wg]);
    return e;
  }
  function pf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 130;
    e.height = b * 148;
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 65, b * 85);
    f.rotate(1.4);
    cm(f, ls, b * 60, b * 10);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 65, b * 74);
    f.rotate(1.4);
    cm(f, Pj, b * 60, b * ic);
    em(f, d[1], d[2], 4);
    f.rotate(0.64);
    cm(f, 7, b * 40, b * 10);
    em(f, d[3], d[4], 4);
    f.rotate(0.12);
    cm(f, Bo, b * 23, bg * b);
    f.restore();
    em(f, d[Qm]);
    return e;
  }
  const lf = Co;
  function bf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : fi;
    f.translate(0, b * Nu);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    cm(f, 7, b * 60, b * jn);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var a = 0; a < mm; a++) {
      f.rotate(Math.PI / Au);
      f.save();
      f.translate(b * 65, Cm);
      cm(f, Vr, b * 21, Rh * b);
      em(f, d[1], d[z], b * Gm);
      f.restore();
    }
    f.save();
    f.translate(b * Ou, b * 0);
    f.rotate(1.4);
    cm(f, 7, b * 60, b * ic);
    em(f, d[Xg], d[4], b * 4);
    f.rotate(0.64);
    cm(f, I, b * 40, b * 10);
    em(f, d[5], d[6], eh * b);
    f.rotate(0.12);
    cm(f, Ig, b * 23, b * lh);
    f.restore();
    em(f, d[7]);
    return e;
  }
  function vf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(Gc, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    cm(f, 7, b * 60, b * ue);
    f.restore();
    em(f, d[ke]);
    f.globalAlpha = ja;
    f.translate(b * 85, b * 82);
    for (var a = 0; ic > a; a++) {
      f.rotate(Math.PI / Wg);
      f.save();
      f.translate(b * 65, Cm);
      cm(f, xa, b * 21, _g * b);
      em(f, d[ja], d[hu], k * b);
      f.restore();
    }
    f.save();
    f.translate(Ka * b, b * 0);
    f.rotate(0.2);
    cm(f, 9, b * 60, b * rf);
    em(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    cm(f, dc, b * 38, b * 10);
    em(f, d[5], d[6], Ac * b);
    f.rotate(0.68);
    cm(f, Lg, b * 20, wm * b);
    em(f, d[xr], d[Yd], b * Rm);
    f.restore();
    return e;
  }
  function yf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : ae;
    f.translate(sh, jh * b);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    cm(f, Mj, b * 60, b * 10);
    f.restore();
    em(f, d[Ng]);
    f.globalAlpha = yd;
    f.translate(b * 85, b * 82);
    for (var a = nj; a < 10; a++) {
      f.rotate(Math.PI / lf);
      f.save();
      f.translate(b * 65, Oq);
      cm(f, 3, b * 21, Gm * b);
      em(f, d[1], d[ec], Rh * b);
      f.restore();
    }
    f.save();
    f.translate(qh * b, bd * b);
    f.rotate(1);
    cm(f, Ca, b * 60, b * 10);
    em(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    cm(f, 8, b * 40, b * 10);
    em(f, d[5], d[Ad], b * 4);
    f.rotate(0.28);
    cm(f, 8, b * 28, b * 8);
    em(f, d[7]);
    f.restore();
    return e;
  }
  function kf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 175;
    e.height = b * 169;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * mh, b * 112);
    f.bezierCurveTo(b * 14, b * 146, b * 27, b * 152, b * 37, b * 149);
    f.bezierCurveTo(b * 78, b * 155, b * 128, b * 150, b * 146, b * 150);
    f.bezierCurveTo(b * 158, b * 144, b * 158, b * 121, b * 153, b * 114);
    f.closePath();
    em(f, d[8], d[9], b * Qm);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 127, b * 111);
    f.bezierCurveTo(b * 133, b * 136, b * 115, b * 149, b * 88, b * 150);
    f.bezierCurveTo(b * 119.5, b * 151, b * 119.5, b * 151, b * 151, b * 152);
    f.bezierCurveTo(b * 159, b * 136, b * 155, b * 126, b * 154, b * 113);
    f.closePath();
    em(f, d[9]);
    f.globalAlpha = 0.5;
    f.translate(Ng, b * er);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 15, b * 117);
    f.bezierCurveTo(b * 34, b * 109, b * 61, b * 106, b * 94, b * 109);
    f.bezierCurveTo(b * 126, b * 110, b * 142, b * 113, b * 154, b * 119);
    f.bezierCurveTo(b * 154, b * 123, b * 154, b * 123, b * 154, b * 127);
    f.bezierCurveTo(b * 127, b * 118, b * Dc, b * 122, b * 18, b * 129);
    f.closePath();
    em(f, d[so]);
    f.globalAlpha = 1;
    f.translate(sh, b * -pg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(ng * b, b * 127);
    f.bezierCurveTo(b * 13, b * 117, b * Po, b * 109, Ui * b, b * 103);
    f.bezierCurveTo(b * 16, b * 95, b * 21, b * 92, b * 60, b * 93);
    f.bezierCurveTo(b * 91, b * 93, b * 118, b * 93, b * 143, b * 96);
    f.bezierCurveTo(b * 151, b * 96, b * 155, b * 99, b * 156, b * 112);
    f.bezierCurveTo(b * 157, b * 124, b * 157, b * 127, b * 156, b * 128);
    f.bezierCurveTo(b * 138, b * 112, b * 100, b * 118, b * 84, b * 118);
    f.bezierCurveTo(b * 28, b * 118, b * 20, b * 120, b * fe, b * 127);
    f.closePath();
    em(f, d[4], d[Nu], b * Au);
    f.save();
    f.translate(b * 27.5, b * 138.5);
    nm(f, b * -13.5, b * -14.5, b * 27, b * 29, b * 4);
    f.restore();
    em(f, d[1], d[eu], b * 5);
    f.save();
    f.translate(b * 143.5, b * 137);
    nm(f, b * -13.5, -$s * b, b * 27, b * 28, b * sj);
    f.restore();
    em(f, d[1], d[Vn], b * Gj);
    return e;
  }
  function Af(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 165;
    e.height = b * 123;
    f.save();
    f.translate(b * 81, b * 65);
    nm(f, b * -78, b * -54.5, b * 156, b * 109, to * b);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 81, b * 58);
    nm(f, b * -78, b * -54.5, b * 156, b * 109, b * 20);
    f.restore();
    em(f, d[1], d[En], 4);
    f.save();
    f.translate(b * 81, b * 58);
    nm(f, b * -69, b * -47, b * 138, b * 93, b * 15);
    f.restore();
    em(f, d[nh], d[4], Ud);
    f.save();
    f.translate(b * 79, b * 54);
    nm(f, b * -34, b * -40, b * 68, b * 88, b * 13);
    f.restore();
    em(f, undefined, d[bg], Rh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 44, b * 13);
    f.bezierCurveTo(b * 43.5, b * 55, b * 43.5, b * 55, b * 43, b * 101);
    f.closePath();
    em(f, S, d[6], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, qo * b);
    f.bezierCurveTo(b * 115, b * 56, b * 115, b * 56, b * 115, b * 101);
    f.closePath();
    em(f, Lr, d[Cu], mn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * Ae);
    f.bezierCurveTo(b * 35, b * 56, b * 36, b * 109, b * 35, b * 110);
    f.closePath();
    em(f, undefined, d[Ec], eh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 123, b * mc);
    f.bezierCurveTo(b * 123, b * 56, b * 123, b * 56, b * 123, b * 110);
    f.closePath();
    em(f, Nn, d[7], 4);
    f.save();
    f.translate(b * 79, b * 113);
    nm(f, -Jg * b, -Vn * b, b * 36, b * 4, b * Jh);
    f.restore();
    em(f, Nn, d[hd], Ac);
    f.save();
    f.translate(b * 75, b * 118);
    nm(f, b * -6, b * -2.5, b * 20, lf * b, b * 20);
    f.restore();
    em(f, d[Fg]);
    return e;
  }
  function wf(c, d, f) {
    var e = document.createElement("canvas");
    var g = e.getContext("2d");
    e.width = c * 304;
    e.height = c * 278;
    g.translate(c * 10, c * 25);
    g.globalAlpha = d ? 0.5 : 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(c * 128, c * 137);
    g.bezierCurveTo(c * 155, c * 144, c * 223, c * 143, c * Sc, c * 122);
    g.bezierCurveTo(c * 249, c * 180, c * 210, c * 227, c * 164, c * 242);
    g.bezierCurveTo(c * 74, c * 213, c * 99, c * 166, c * 127, c * 138);
    g.closePath();
    em(g, f[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(c * 284, c * 52);
    g.bezierCurveTo(c * 126, c * 112, c * 89, c * 177, c * 170, c * 241);
    g.bezierCurveTo(c * 103, c * 275, c * 20, c * 239, Pg * c, c * 159);
    g.bezierCurveTo(c * dh, c * 76, c * 75, c * 4, c * 165, xq * c);
    g.bezierCurveTo(c * 233, c * b, c * 260, c * 33, c * 284, c * 52);
    g.closePath();
    em(g, f[0]);
    g.translate(-ue * c, c * -25);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(c * 128, c * 137);
    g.bezierCurveTo(c * 155, c * 144, c * 223, c * 143, c * 256, c * 122);
    g.bezierCurveTo(c * 249, c * 180, c * 210, c * 227, c * 164, c * 242);
    g.bezierCurveTo(c * 74, c * 213, c * 99, c * 166, c * 127, c * 138);
    g.closePath();
    em(g, f[Ko], f[En], ge * c);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(c * 284, c * 52);
    g.bezierCurveTo(c * 126, c * 112, c * 89, c * 177, c * 170, c * 241);
    g.bezierCurveTo(c * 103, c * 275, c * 20, c * 239, Uh * c, c * 159);
    g.bezierCurveTo(Y * c, c * 76, c * 75, c * 4, c * 165, c * 13);
    g.bezierCurveTo(c * 233, c * 15, c * 260, c * 33, c * 284, c * 52);
    g.closePath();
    em(g, f[Xg], f[4], Oc * c);
    return e;
  }
  function Mf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 300;
    e.height = b * 300;
    f.globalAlpha = c ? 0.5 : au;
    f.save();
    f.translate(b * 150, b * 160);
    f.rotate(6.28);
    cm(f, 6, b * 146, b * 30);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = hf;
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(6.28);
    cm(f, 6, b * 146, b * 30);
    f.restore();
    em(f, d[1], d[z], am * b);
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(0);
    cm(f, jo, b * 105, b * 30);
    f.restore();
    em(f, d[3], d[fa], b * 8);
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(Ea);
    cm(f, 6, b * 66, b * 30);
    f.restore();
    em(f, d[4], d[Vn], b * Yd);
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(ke);
    cm(f, 6, b * 31, b * 30);
    f.restore();
    em(f, d[5], d[6], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 150, b * 207);
    f.bezierCurveTo(b * 150, b * 151, b * 150, b * 101, b * 150, b * 94);
    f.closePath();
    em(f, Ls, d[Cs], b * fm);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, b * 100);
    f.bezierCurveTo(b * 118, b * 205, b * 118, b * 207, b * 118, b * 200);
    f.closePath();
    em(f, undefined, d[2], tq * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 183, b * Jo);
    f.bezierCurveTo(b * 183, b * 203, b * 183, b * 203, b * 183, b * 200);
    f.closePath();
    em(f, undefined, d[tm], b * rg);
    return e;
  }
  function Bf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 501;
    e.height = b * 309;
    f.translate(0, b * 6);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 126, b * 184);
    f.bezierCurveTo(b * 169, b * 196, b * 194, b * 198, b * 227, b * 198);
    f.bezierCurveTo(b * 235, b * 222, b * 236, b * 223, b * 241, b * 226);
    f.bezierCurveTo(b * 245, b * 228, b * 257, b * 228, b * 263, b * 226);
    f.bezierCurveTo(b * 267, b * 225, b * 270, b * 211, b * 275, b * 198);
    f.bezierCurveTo(b * 332, b * 194, b * 347, b * 192, b * 372, b * 188);
    f.bezierCurveTo(b * 366, b * 174.5, b * 366, b * 174.5, b * 360, b * 161);
    f.bezierCurveTo(b * 253.5, b * 162, b * 253.5, b * 162, b * 147, b * 163);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = ja;
    f.translate(nj, b * -6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 100, b * 116);
    f.bezierCurveTo(b * 90, b * 101, b * 96, b * 89, b * 106, b * 83);
    f.bezierCurveTo(b * 86, b * 79, b * 86, b * 52, b * 93, b * 38);
    f.bezierCurveTo(b * 99, b * 51, b * 107, b * 57, b * 122, b * 63);
    f.bezierCurveTo(b * 130, b * 53, b * 141, b * 46, b * 161, b * 46);
    f.bezierCurveTo(b * 157, b * 31, b * 158, b * 20, b * 169, ss * b);
    f.bezierCurveTo(b * 171, b * 24, b * 186, b * 33, b * 198, b * 45);
    f.bezierCurveTo(b * 252, b * 45, b * 252, b * 45, b * 306, b * 45);
    f.bezierCurveTo(b * 323, b * 33, b * 332, b * 21, b * 335, ef * b);
    f.bezierCurveTo(b * 349, b * 21, b * 347, b * 36, b * 345, b * 46);
    f.bezierCurveTo(b * 364, b * 46, b * 369, b * 48, b * 377, b * 63);
    f.bezierCurveTo(b * 398, b * 58, b * 403, b * 49, b * 409, b * 40);
    f.bezierCurveTo(b * 419, b * 57, b * 411, b * 79, b * 398, b * 85);
    f.bezierCurveTo(b * 405, b * 100, b * 405, b * 106, b * 401, b * 118);
    f.bezierCurveTo(b * 332.5, b * 128.5, b * 332.5, b * 128.5, b * 264, b * 139);
    f.closePath();
    em(f, d[au], d[En], b * Tt);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 122, b * 191);
    f.bezierCurveTo(b * 123, b * 237, b * 135, b * 245, b * 153, b * 259);
    f.bezierCurveTo(b * 167, b * 269, b * 158, b * 281, b * 118, b * 276);
    f.bezierCurveTo(b * 104, b * 273, b * 98, b * 268, b * 93, b * 242);
    f.bezierCurveTo(b * 89, b * 220, b * 92, b * 201, b * 102, b * 179);
    f.closePath();
    em(f, d[pg], d[yo], b * gg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403, b * 182);
    f.bezierCurveTo(b * 414, b * 215, b * 412, b * 232, b * 403, b * 260);
    f.bezierCurveTo(b * 395, b * 274, b * 375, b * 272, b * 356, b * 270);
    f.bezierCurveTo(b * 345, b * 268, b * 339, b * 262, b * 354, b * 252);
    f.bezierCurveTo(b * 370, b * 242, b * 380, b * 225, b * 384, b * 184);
    f.closePath();
    em(f, d[Xg], d[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 155, b * 157);
    f.bezierCurveTo(b * 146, b * 189, b * 137, b * 198, b * 114, b * 219);
    f.bezierCurveTo(b * 104, b * 212, b * 98, b * 203, b * 89, b * 189);
    f.bezierCurveTo(b * 82, b * 178, b * 91, b * 164, b * 93, b * 136);
    f.closePath();
    em(f, d[Ld], d[hu], Zo * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 347, b * 162);
    f.bezierCurveTo(b * 357, b * 195, b * 376, b * 209, b * 387, b * 217);
    f.bezierCurveTo(b * 409, b * 201, b * 420, b * 181, b * 416, b * 166);
    f.bezierCurveTo(b * 410, b * 150, b * 412, b * 149, b * 408, b * 130);
    f.closePath();
    em(f, d[4], d[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 86, b * 134);
    f.bezierCurveTo(b * 79, b * 102, b * 92, b * 84, b * 108, b * 92);
    f.bezierCurveTo(b * 149, b * 108, b * 184, b * 111, b * 242, b * 111);
    f.bezierCurveTo(b * 294, b * 108, b * 341, b * 105, b * 386, b * 98);
    f.bezierCurveTo(b * 412, b * 91, b * 417, b * 86, b * 415, b * 133);
    f.bezierCurveTo(b * 413, b * 160, b * 413, b * 160, b * 368, b * 174);
    f.bezierCurveTo(b * 308, b * 184, b * 291, b * 185, b * 270, b * 186);
    f.bezierCurveTo(b * 264, b * 206, b * 262, b * 215, b * 253, b * 215);
    f.bezierCurveTo(b * 239, b * 217, b * 239, b * 211, b * 231, b * 186);
    f.bezierCurveTo(b * 178, b * 184, b * 156, b * 179, b * 112, b * 162);
    f.bezierCurveTo(b * 87, b * 151, b * 90, b * 144, b * 87, b * 137);
    f.closePath();
    em(f, d[_g], d[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 63, b * 98);
    f.bezierCurveTo(b * 84, b * 121, b * 109, b * 102, b * 124, b * 117);
    f.bezierCurveTo(b * 138, b * 136, b * 123, b * 165, b * 94, b * 150);
    f.bezierCurveTo(b * 66, b * 131, b * 64, b * 115, b * 63, b * 99);
    f.closePath();
    em(f, d[3], d[Vn], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 449, b * 97);
    f.bezierCurveTo(b * 446, b * 143, b * 415, b * 151, b * 402, b * 155);
    f.bezierCurveTo(b * 386, b * 157, b * 373, b * 133, b * 391, b * 116);
    f.bezierCurveTo(b * 402, b * 106, b * 432, b * 124, b * 449, b * 97);
    f.closePath();
    em(f, d[3], d[tm], b * 10);
    return e;
  }
  function Df(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 106;
    e.height = b * 681;
    f.translate(b * 20, b * xc);
    f.globalAlpha = c ? 0.5 : fi;
    f.save();
    f.translate(b * 52.5, b * 395);
    f.rotate(0);
    nm(f, b * -11.5, b * -226, b * 23, b * 452, b * 10);
    f.restore();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 588);
    f.bezierCurveTo(b * 47, b * 596, b * 61, b * 594, b * 69, b * 588);
    f.bezierCurveTo(b * 79, b * 615, b * 78, b * 632, b * 59, b * 643);
    f.bezierCurveTo(b * 41, b * 650, b * 27, b * 632, b * 30, b * 610);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 135);
    f.bezierCurveTo(b * 61.5, b * 142, b * 61.5, b * 142, b * 71, b * 149);
    f.bezierCurveTo(b * 69.5, b * 166, b * 69.5, b * 166, b * 68, b * 183);
    f.bezierCurveTo(b * 60.5, b * 187.5, b * 60.5, b * 187.5, b * 53, b * 192);
    f.bezierCurveTo(b * 45, b * 187.5, b * 45, b * 187.5, b * 37, b * 183);
    f.bezierCurveTo(b * 35.5, b * 167, b * 35.5, b * 167, b * 34, b * 151);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 64, b * 150);
    f.bezierCurveTo(b * 63, b * 164, b * 63, b * 164, b * 62, b * 178);
    f.bezierCurveTo(b * 58, b * 181, b * 58, b * 181, b * 54, b * 184);
    f.bezierCurveTo(b * 48.5, b * 181.5, b * 48.5, b * 181.5, b * 43, b * 179);
    f.bezierCurveTo(b * 42, b * 164.5, b * 42, b * 164.5, b * 41, b * 150);
    f.bezierCurveTo(b * 46, b * 152.5, b * 46, b * 152.5, b * 51, b * 155);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 39);
    f.bezierCurveTo(b * 65.5, b * 82, b * 65.5, b * 82, b * 79, b * 125);
    f.bezierCurveTo(b * 66, b * 137.5, b * 66, b * 137.5, b * 53, b * 150);
    f.bezierCurveTo(b * 39, b * 138, b * 39, b * 138, b * 25, b * 126);
    f.closePath();
    em(f, d[Cm]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 64);
    f.bezierCurveTo(b * 60, b * 92.5, b * 60, b * 92.5, b * 68, b * 121);
    f.bezierCurveTo(b * 61, b * 127.5, b * 61, b * 127.5, b * 54, b * 134);
    f.bezierCurveTo(b * 46.5, b * 127.5, b * 46.5, b * 127.5, b * 39, b * 121);
    f.closePath();
    em(f, d[0]);
    f.translate(b * -20, b * -zd);
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 52.5, b * 395);
    f.rotate(0);
    nm(f, b * -11.5, b * -226, b * 23, b * 452, b * rs);
    f.restore();
    em(f, d[1], d[wc], b * Yd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 588);
    f.bezierCurveTo(b * 47, b * 596, b * 61, b * 594, b * 69, b * 588);
    f.bezierCurveTo(b * 79, b * 615, b * 78, b * 632, b * 59, b * 643);
    f.bezierCurveTo(b * 41, b * 650, b * 27, b * 632, b * 30, b * 610);
    f.closePath();
    em(f, d[jh], d[k], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 135);
    f.bezierCurveTo(b * 61.5, b * 142, b * 61.5, b * 142, b * 71, b * 149);
    f.bezierCurveTo(b * 69.5, b * 166, b * 69.5, b * 166, b * 68, b * 183);
    f.bezierCurveTo(b * 60.5, b * 187.5, b * 60.5, b * 187.5, b * 53, b * 192);
    f.bezierCurveTo(b * 45, b * 187.5, b * 45, b * 187.5, b * 37, b * 183);
    f.bezierCurveTo(b * 35.5, b * 167, b * 35.5, b * 167, b * 34, b * 151);
    f.closePath();
    em(f, d[fa], d[Nr], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 64, b * 150);
    f.bezierCurveTo(b * 63, b * 164, b * 63, b * 164, b * 62, b * 178);
    f.bezierCurveTo(b * 58, b * 181, b * 58, b * 181, b * 54, b * 184);
    f.bezierCurveTo(b * 48.5, b * 181.5, b * 48.5, b * 181.5, b * 43, b * 179);
    f.bezierCurveTo(b * 42, b * 164.5, b * 42, b * 164.5, b * 41, b * 150);
    f.bezierCurveTo(b * 46, b * 152.5, b * 46, b * 152.5, b * 51, b * 155);
    f.closePath();
    em(f, d[et]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 39);
    f.bezierCurveTo(b * 65.5, b * 82, b * 65.5, b * 82, b * 79, b * 125);
    f.bezierCurveTo(b * 66, b * 137.5, b * 66, b * 137.5, b * 53, b * 150);
    f.bezierCurveTo(b * 39, b * 138, b * 39, b * 138, b * 25, b * 126);
    f.closePath();
    em(f, d[lc], d[bh], Yd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 64);
    f.bezierCurveTo(b * 60, b * 92.5, b * 60, b * 92.5, b * 68, b * 121);
    f.bezierCurveTo(b * 61, b * 127.5, b * 61, b * 127.5, b * 54, b * 134);
    f.bezierCurveTo(b * 46.5, b * 127.5, b * 46.5, b * 127.5, b * 39, b * 121);
    f.closePath();
    em(f, d[8]);
    return e;
  }
  function Ef(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 69;
    e.height = b * 120;
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 30, b * 84);
    nm(f, -hn * b, b * -66.5, b * 8, vo * b, b * rf);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 30, b * 45);
    nm(f, b * -9.5, b * -6.5, b * 16, b * 13, b * Tt);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 30, b * 17);
    nm(f, b * -7.5, b * -5.5, b * 12, b * 11, b * 10);
    f.restore();
    em(f, d[bd]);
    f.save();
    f.translate(b * 30, b * 31);
    nm(f, b * -26, b * -14.5, b * 52, b * 29, Wg * b);
    f.restore();
    em(f, d[Sh]);
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 36, b * 79.140625);
    nm(f, b * -Ad, b * -66.5, b * 8, b * 100, b * 10);
    f.restore();
    em(f, d[dm], d[2], b * 3);
    f.save();
    f.translate(b * 35, b * 40.140625);
    nm(f, b * -9.5, b * -6.5, b * 16, b * 13, b * ue);
    f.restore();
    em(f, d[3], d[Jr], b * 3);
    f.save();
    f.translate(b * 35, b * 12.140625);
    nm(f, b * -7.5, b * -5.5, b * 12, b * me, Ki * b);
    f.restore();
    em(f, d[3], d[4], b * 3);
    f.save();
    f.translate(b * 34.5, b * 26.140625);
    nm(f, b * -26, b * -14.5, b * 52, b * 29, b * aq);
    f.restore();
    em(f, d[3], d[4], on * b);
    return e;
  }
  function Cf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 100;
    e.height = b * 648;
    f.translate(to * b, b * 20);
    f.globalAlpha = c ? 0.5 : dm;
    f.save();
    f.translate(b * 50.5, b * 349.5);
    nm(f, b * -13.5, b * -249.5, b * 27, b * 499, b * Sg);
    f.restore();
    em(f, d[ke]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 538);
    f.bezierCurveTo(b * 49.5, b * 538, b * 49.5, b * 538, b * 63, b * 538);
    f.bezierCurveTo(b * 63.5, b * 568, b * 63.5, b * 568, b * 64, b * 598);
    f.bezierCurveTo(b * 50, b * 598, b * 50, b * 598, b * 36, b * 598);
    f.bezierCurveTo(b * 36, b * 568.5, b * 36, b * 568.5, b * 36, b * 539);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 554);
    f.bezierCurveTo(b * 45, b * 561, b * 56, b * 558, b * 63, b * 554);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 569);
    f.bezierCurveTo(b * 44, b * 576, b * 58, b * 574, b * 68, b * 569);
    f.bezierCurveTo(b * 68, b * 584, b * 68, b * 584, b * 68, b * 599);
    f.bezierCurveTo(b * 68, b * 608, b * 65, b * 618, b * 49, b * 617);
    f.bezierCurveTo(b * 34, b * 617, b * 32, b * 610, b * 32, b * 598);
    f.closePath();
    em(f, d[Ng]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41, b * 581);
    f.bezierCurveTo(b * 48, b * 584, b * 55, b * 583, b * 60, b * 581);
    f.bezierCurveTo(b * 60, b * 589.5, b * 60, b * 589.5, b * 60, b * 598);
    f.bezierCurveTo(b * 60, b * 604, b * 59, b * 609, b * 48, b * 608);
    f.bezierCurveTo(b * 40, b * 607, b * 40, b * 606, b * 41, b * 581);
    f.closePath();
    em(f, d[Jj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 106);
    f.bezierCurveTo(b * 31, b * 124.5, b * 31, b * 124.5, b * 31, b * 143);
    f.bezierCurveTo(b * 31, b * 163, b * 38, b * 169, b * 48, b * 168);
    f.bezierCurveTo(b * 57, b * 168, b * 67, b * 165, b * 67, b * 148);
    f.bezierCurveTo(b * 67, b * 123.5, b * 67, b * 123.5, b * 67, b * 99);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 49, b * 27);
    f.bezierCurveTo(b * 64, b * 62.5, b * 64, b * 62.5, b * 79, b * 98);
    f.bezierCurveTo(b * 74, b * 113, b * 63, b * 121, b * 50, b * 122);
    f.bezierCurveTo(b * 35, b * 123, b * 22, b * 109, b * 20, b * 98);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 49, b * 43);
    f.bezierCurveTo(b * 61, b * 70, b * 61, b * 70, b * 73, b * 97);
    f.bezierCurveTo(b * 66, b * 116, b * 43, b * 122, b * 26, b * 99);
    f.closePath();
    em(f, d[ke]);
    f.translate(b * -20, b * -20);
    f.globalAlpha = Lh;
    f.save();
    f.translate(b * 50.5, b * 349.5);
    nm(f, b * -13.5, b * -249.5, b * 27, b * 499, b * 10);
    f.restore();
    em(f, d[1], d[2], fm * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 538);
    f.bezierCurveTo(b * 49.5, b * 538, b * 49.5, b * 538, b * 63, b * 538);
    f.bezierCurveTo(b * 63.5, b * 568, b * 63.5, b * 568, b * 64, b * 598);
    f.bezierCurveTo(b * 50, b * 598, b * 50, b * 598, b * 36, b * 598);
    f.bezierCurveTo(b * 36, b * 568.5, b * 36, b * 568.5, b * 36, b * 539);
    f.closePath();
    em(f, d[3], d[4], b * Sm);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 554);
    f.bezierCurveTo(b * 45, b * 561, b * 56, b * 558, b * 63, b * 554);
    f.closePath();
    em(f, undefined, d[cn], lo * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 569);
    f.bezierCurveTo(b * 44, b * 576, b * 58, b * 574, b * 68, b * 569);
    f.bezierCurveTo(b * 68, b * 584, b * 68, b * 584, b * 68, b * 599);
    f.bezierCurveTo(b * 68, b * 608, b * 65, b * 618, b * 49, b * 617);
    f.bezierCurveTo(b * 34, b * 617, b * 32, b * 610, b * 32, b * 598);
    f.closePath();
    em(f, d[lh], d[6], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41, b * 581);
    f.bezierCurveTo(b * 48, b * 584, b * 55, b * 583, b * 60, b * 581);
    f.bezierCurveTo(b * 60, b * 589.5, b * 60, b * 589.5, b * 60, b * 598);
    f.bezierCurveTo(b * 60, b * 604, b * 59, b * 609, b * 48, b * 608);
    f.bezierCurveTo(b * 40, b * 607, b * 40, b * 606, b * 41, b * 581);
    f.closePath();
    em(f, d[om]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 106);
    f.bezierCurveTo(b * 31, b * 124.5, b * 31, b * 124.5, b * 31, b * 143);
    f.bezierCurveTo(b * 31, b * 163, b * 38, b * 169, b * 48, b * 168);
    f.bezierCurveTo(b * 57, b * 168, b * 67, b * 165, b * 67, b * 148);
    f.bezierCurveTo(b * 67, b * 123.5, b * 67, b * 123.5, b * 67, b * 99);
    f.closePath();
    em(f, d[5], d[Xa], th * b);
    f.save();
    f.translate(b * -46, b * -50);
    f.scale(Vn, z);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 51, b * 80);
    f.bezierCurveTo(b * 51, b * 89.5, b * 51, b * 89.5, b * 51, b * 99);
    f.bezierCurveTo(b * 49, b * 103, b * 46, b * 105, b * 44, b * 99);
    f.bezierCurveTo(b * 44, b * 88.5, b * 44, b * 88.5, b * 44, b * 78);
    f.closePath();
    em(f, d[8]);
    f.restore();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 49, b * 27);
    f.bezierCurveTo(b * 64, b * 62.5, b * 64, b * 62.5, b * 79, b * 98);
    f.bezierCurveTo(b * 74, b * 113, b * 63, b * 121, b * 50, b * 122);
    f.bezierCurveTo(b * 35, b * 123, b * 22, b * 109, b * 20, b * 98);
    f.closePath();
    em(f, d[q], d[9], b * V);
    f.scale(ih, 2);
    f.translate(b * -23, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 57, b * 69);
    f.bezierCurveTo(b * 50, b * 76, b * 43, b * 75, b * 38, b * 69);
    f.bezierCurveTo(b * 43, b * 57, b * 43, b * 57, b * 48, b * 45);
    f.closePath();
    em(f, d[gg]);
    return e;
  }
  function zf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var a = b * 170;
    var i = b * 172;
    var j = a / Cs;
    var k = i / 2;
    e.width = a;
    e.height = i;
    f.translate(j, k + Le * b);
    f.globalAlpha = c ? 0.5 : Ka;
    rm(f, 0, 0, b * 60);
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / lh);
      f.save();
      f.translate(b * 65, nj);
      cm(f, E, b * 20, _n * b);
      em(f, d[1], d[Yh], b * bq);
      f.restore();
    }
    f.restore();
    rm(f, 0, du, b * 60);
    em(f, d[on], d[Gm], b * 4);
    rm(f, 0, 0, b * 40);
    em(f, d[dh]);
    rm(f, 0, qh, b * 25);
    em(f, d[Xa], d[Pd], b * hd);
    return e;
  }
  function xf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 88;
    e.height = b * 647;
    f.translate(b * 20, b * Ji);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 45, b * 384.5);
    nm(f, b * -15, b * -216.5, b * 30, b * 433, b * 10);
    f.restore();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 27, b * 572);
    f.bezierCurveTo(b * 44, b * 580, b * 55, b * 576, b * 62, b * 572);
    f.bezierCurveTo(b * 65, b * 585.5, b * 65, b * 585.5, b * 68, b * 599);
    f.bezierCurveTo(b * 71, b * 612, b * 68, b * 618, b * 34, b * 616);
    f.bezierCurveTo(os * b, b * 615, b * Rq, b * 607, b * 27, b * 573);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 587);
    f.bezierCurveTo(b * 39, b * 590, b * 48, b * 588, b * 54, b * 587);
    f.bezierCurveTo(b * 57, b * 604, b * 59, b * 609, b * 46, b * 609);
    f.bezierCurveTo(b * 27, b * 609, b * 28, b * 605, b * 33, b * 588);
    f.closePath();
    em(f, d[xn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 113);
    f.bezierCurveTo(b * 27, b * 139, b * 27, b * 139, b * 23, b * 165);
    f.bezierCurveTo(b * 18, b * 187, b * 39, b * 195, b * 57, b * 186);
    f.bezierCurveTo(b * 68, b * 180, b * 65, b * 171, b * 62, b * 153);
    f.bezierCurveTo(b * 58.5, b * 131, b * 58.5, b * 131, b * 55, b * 109);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39, b * 139);
    f.bezierCurveTo(b * 43, b * 139, b * 43, b * 139, b * 47, b * 139);
    f.bezierCurveTo(b * 51, b * 158, b * 56, b * 176, b * 44, b * 175);
    f.bezierCurveTo(b * 33, b * 177, b * 34, b * 167, b * 39, b * 140);
    f.closePath();
    em(f, d[Jj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 44, b * 29);
    f.bezierCurveTo(b * 57, b * 63, b * 57, b * 63, b * 70, b * 97);
    f.bezierCurveTo(b * 60, b * 111, b * 60, b * 111, b * 50, b * 125);
    f.bezierCurveTo(b * 45, b * 128, b * 41, b * 128, b * 35, b * 124);
    f.bezierCurveTo(b * 26.5, b * 110, b * 26.5, b * 110, Ch * b, b * 96);
    f.closePath();
    em(f, d[bd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 44, b * 54);
    f.bezierCurveTo(b * 50, b * 72, b * 50, b * 72, b * 56, b * 90);
    f.bezierCurveTo(b * 58, b * 94, b * 59, b * 98, b * 53, b * 105);
    f.bezierCurveTo(b * 47, b * 113, b * 43, b * 113, b * 36, b * 103);
    f.bezierCurveTo(b * 29, b * 96, b * 31, b * 94, b * 35, b * 83);
    f.closePath();
    em(f, d[nj]);
    f.translate(-Ji * b, b * -to);
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 45, b * 384.5);
    nm(f, -nc * b, b * -216.5, b * 30, b * 433, b * 10);
    f.restore();
    em(f, d[1], d[z], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 27, b * 572);
    f.bezierCurveTo(b * 44, b * 580, b * 55, b * 576, b * 62, b * 572);
    f.bezierCurveTo(b * 65, b * 585.5, b * 65, b * 585.5, b * 68, b * 599);
    f.bezierCurveTo(b * 71, b * 612, b * 68, b * 618, b * 34, b * 616);
    f.bezierCurveTo(b * Be, b * 615, b * ig, b * 607, b * 27, b * 573);
    f.closePath();
    em(f, d[nh], d[4], Yd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 587);
    f.bezierCurveTo(b * 39, b * 590, b * 48, b * 588, b * 54, b * 587);
    f.bezierCurveTo(b * 57, b * 604, b * 59, b * 609, b * 46, b * 609);
    f.bezierCurveTo(b * 27, b * 609, b * 28, b * 605, b * 33, b * 588);
    f.closePath();
    em(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 113);
    f.bezierCurveTo(b * 27, b * 139, b * 27, b * 139, b * 23, b * 165);
    f.bezierCurveTo(b * 18, b * 187, b * 39, b * 195, b * 57, b * 186);
    f.bezierCurveTo(b * 68, b * 180, b * 65, b * 171, b * 62, b * 153);
    f.bezierCurveTo(b * 58.5, b * 131, b * 58.5, b * 131, b * 55, b * 109);
    f.closePath();
    em(f, d[3], d[Jn], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39, b * 139);
    f.bezierCurveTo(b * 43, b * 139, b * 43, b * 139, b * 47, b * 139);
    f.bezierCurveTo(b * 51, b * 158, b * 56, b * 176, b * 44, b * 175);
    f.bezierCurveTo(b * 33, b * 177, b * 34, b * 167, b * 39, b * 140);
    f.closePath();
    em(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 44, b * 29);
    f.bezierCurveTo(b * 57, b * 63, b * 57, b * 63, b * 70, b * 97);
    f.bezierCurveTo(b * 60, b * 111, b * 60, b * 111, b * 50, b * 125);
    f.bezierCurveTo(b * 45, b * 128, b * 41, b * 128, b * 35, b * 124);
    f.bezierCurveTo(b * 26.5, b * 110, b * 26.5, b * 110, b * kq, b * 96);
    f.closePath();
    em(f, d[6], d[Ke], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 44, b * 54);
    f.bezierCurveTo(b * 50, b * 72, b * 50, b * 72, b * 56, b * 90);
    f.bezierCurveTo(b * 58, b * 94, b * 59, b * 98, b * 53, b * 105);
    f.bezierCurveTo(b * 47, b * 113, b * 43, b * 113, b * 36, b * 103);
    f.bezierCurveTo(b * 29, b * 96, b * 31, b * 94, b * 35, b * 83);
    f.closePath();
    em(f, d[8]);
    return e;
  }
  function Qf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 175;
    e.height = b * 169;
    f.globalAlpha = 0.5;
    f.translate(bd, b * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19, b * 139);
    f.bezierCurveTo(b * Og, b * 163, b * 22, b * 156, b * 53, b * 157);
    f.bezierCurveTo(b * 97.5, b * 157, b * 97.5, b * 157, b * 142, b * 157);
    f.bezierCurveTo(b * 150, b * 157, b * 153, b * 156, b * 154, b * 142);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = Lh;
    f.translate(0, -jh * b);
    f.save();
    f.translate(b * 86.5, b * 81.5);
    nm(f, b * -66.5, b * -65.5, b * 133, b * 131, b * 10);
    f.restore();
    em(f, d[1], d[2], b * 5);
    f.save();
    f.translate(b * 84.5, b * 79);
    nm(f, b * -50.5, b * -49, b * 101, b * 98, b * wd);
    f.restore();
    em(f, d[3], d[En], Qm * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42, b * 54);
    f.bezierCurveTo(b * 37, b * 48, b * 39, b * 44, b * 38, b * 41);
    f.bezierCurveTo(b * 42, b * 40, b * 45, b * 40, b * 50, b * 41);
    f.bezierCurveTo(b * 85, b * 36, b * 98, b * 37, b * 116, b * 42);
    f.bezierCurveTo(b * 132, b * 39, b * 132, b * 39, b * 133, b * 56);
    f.bezierCurveTo(b * 136, b * 73, b * 136, b * 84, b * 132, b * 106);
    f.bezierCurveTo(b * 47, b * 113, b * 85.5, b * 106, b * 39, b * 106);
    f.bezierCurveTo(b * 32, b * 81, b * 38, b * 60, b * 42, b * 55);
    f.closePath();
    em(f, d[4], d[5], Gj * b);
    f.save();
    f.translate(b * 28, b * 24);
    f.rotate(0);
    nm(f, b * -$s, b * -qj, b * 28, b * 28, b * Ac);
    f.restore();
    em(f, d[1], d[hu], b * 5);
    f.save();
    f.translate(b * 143, b * 23);
    f.rotate(ke);
    nm(f, -Xo * b, -Xo * b, b * 28, b * 28, Ha * b);
    f.restore();
    em(f, d[yd], d[2], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 80);
    f.bezierCurveTo(b * 73, b * 78, b * 84, b * 74, b * To, b * 64);
    f.bezierCurveTo(b * 111, b * 57, b * 125, b * 67, b * 108, b * 84);
    f.bezierCurveTo(b * 96, b * 95, b * 86, b * 96, b * 70, b * 88);
    f.bezierCurveTo(b * 62.5, b * 84, b * 62.5, b * 84, b * 55, b * 80);
    f.closePath();
    em(f, d[et]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(ce * b, b * 112);
    f.bezierCurveTo(b * 14, b * 146, b * 27, b * 152, b * 37, b * 149);
    f.bezierCurveTo(b * 78, b * 155, b * 128, b * 150, b * 146, b * 150);
    f.bezierCurveTo(b * 158, b * 144, b * 158, b * 121, b * 153, b * 114);
    f.closePath();
    em(f, d[tq], d[ph], Wg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 127, b * 111);
    f.bezierCurveTo(b * 133, b * 136, b * 115, b * 149, b * 88, b * 150);
    f.bezierCurveTo(b * 119.5, b * 151, b * 119.5, b * 151, b * 151, b * 152);
    f.bezierCurveTo(b * 159, b * 136, b * 155, b * 126, b * 154, b * 113);
    f.closePath();
    em(f, d[ad]);
    f.globalAlpha = 0.5;
    f.translate(Jj, b * xa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 15, b * 117);
    f.bezierCurveTo(b * 34, b * 109, b * 61, b * 106, b * 94, b * 109);
    f.bezierCurveTo(b * 126, b * 110, b * 142, b * 113, b * 154, b * 119);
    f.bezierCurveTo(b * 154, b * 123, b * 154, b * 123, b * 154, b * 127);
    f.bezierCurveTo(b * 127, b * 118, b * 15, b * 122, b * hc, b * 129);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = Ko;
    f.translate(0, b * -Sr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 14, b * 127);
    f.bezierCurveTo(Ph * b, b * 117, b * 12, b * 109, b * 15, b * 103);
    f.bezierCurveTo(b * 16, b * 95, b * 21, b * 92, b * 60, b * 93);
    f.bezierCurveTo(b * 91, b * 93, b * 118, b * 93, b * 143, b * 96);
    f.bezierCurveTo(b * 151, b * 96, b * 155, b * 99, b * 156, b * 112);
    f.bezierCurveTo(b * 157, b * 124, b * 157, b * 127, b * 156, b * 128);
    f.bezierCurveTo(b * 138, b * 112, b * 100, b * 118, b * 84, b * 118);
    f.bezierCurveTo(b * 28, b * 118, b * 20, b * 120, Tr * b, b * 127);
    f.closePath();
    em(f, d[Ld], d[Cd], et * b);
    f.save();
    f.translate(b * 27.5, b * 138.5);
    nm(f, b * -13.5, b * -14.5, b * 27, b * 29, b * _n);
    f.restore();
    em(f, d[1], d[2], b * 5);
    f.save();
    f.translate(b * 143.5, b * 137);
    nm(f, b * -13.5, b * -Hd, b * 27, b * 28, b * 4);
    f.restore();
    em(f, d[au], d[2], yh * b);
    return e;
  }
  function Sf(b, c, d) {
    var e = (f = document.createElement("canvas")).getContext("2d");
    if (d == 0) {
      f.width = b * 566;
      f.height = b * 429;
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(b * 312.625, b * 39.046875);
      e.bezierCurveTo(b * 456.625, b * 60.046875, b * 521.625, b * 134.046875, b * 528.625, b * 199.046875);
      e.bezierCurveTo(b * 540.625, b * 298.046875, b * 491.625, b * 364.046875, b * 405.625, b * 394.046875);
      e.bezierCurveTo(b * 270.625, b * 429.046875, b * 182.625, b * 395.046875, b * 100.625, b * 344.046875);
      e.bezierCurveTo(b * 15.625, b * 283.046875, b * 20.625, b * 195.046875, b * 33.625, b * 158.046875);
      e.bezierCurveTo(b * 56.625, b * 80.046875, b * 102.625, b * 46.046875, b * 183.625, b * 33.046875);
      e.bezierCurveTo(b * 225.625, b * 25.046875, b * 270.625, b * 30.046875, b * 312.625, b * 39.046875);
      e.closePath();
      em(e, c[0]);
    } else if (X == d) {
      e = (f = document.createElement("canvas")).getContext("2d");
      f.width = b * 511;
      f.height = b * 408;
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(b * 141.625, b * 49.296875);
      e.bezierCurveTo(b * 225.625, b * 10.296875, b * 320.625, b * 16.296875, b * 390.625, b * 39.296875);
      e.bezierCurveTo(b * 476.625, b * 71.296875, b * 483.625, b * 142.296875, b * 486.625, b * 197.296875);
      e.bezierCurveTo(b * 491.625, b * 289.296875, b * 462.625, b * 317.296875, b * 417.625, b * 351.296875);
      e.bezierCurveTo(b * 367.625, b * 385.296875, b * 313.625, b * 404.296875, b * 218.625, b * 395.296875);
      e.bezierCurveTo(b * 108.625, b * 381.296875, b * 81.625, b * 350.296875, b * 52.625, b * 305.296875);
      e.bezierCurveTo(b * 16.625, b * 244.296875, b * 23.625, b * 171.296875, b * 37.625, b * 145.296875);
      e.bezierCurveTo(b * 65.625, b * 84.296875, b * 97.625, b * 74.296875, b * 141.625, b * 49.296875);
      e.closePath();
      em(e, c[du]);
    } else if (d == 2) {
      var f;
      e = (f = document.createElement("canvas")).getContext("2d");
      f.width = b * 504;
      f.height = b * 408;
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(b * 153.625, b * 46.296875);
      e.bezierCurveTo(b * 271.625, b * 17.296875, b * 345.625, b * 35.296875, b * 410.625, b * 71.296875);
      e.bezierCurveTo(b * 473.625, b * 109.296875, b * 478.625, b * 167.296875, b * 473.625, b * 205.296875);
      e.bezierCurveTo(b * 462.625, b * 295.296875, b * 438.625, b * 316.296875, b * 388.625, b * 345.296875);
      e.bezierCurveTo(b * 331.625, b * 374.296875, b * 273.625, b * 392.296875, b * 180.625, b * 387.296875);
      e.bezierCurveTo(b * 111.625, b * 380.296875, b * 86.625, b * 360.296875, b * 51.625, b * 309.296875);
      e.bezierCurveTo(b * 23.625, b * 267.296875, b * 25.625, b * 226.296875, b * 27.625, b * 175.296875);
      e.bezierCurveTo(b * 37.625, b * 99.296875, b * 88.625, b * 57.296875, b * 153.625, b * 46.296875);
      e.closePath();
      em(e, c[0]);
    }
    return f;
  }
  function If(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 138;
    e.height = b * 133;
    f.globalAlpha = c ? 0.3 : Lo;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 26, b * 79.640625);
    f.bezierCurveTo(b * 13, b * 84.640625, b * sm, b * 86.640625, b * 7, b * 78.640625);
    f.bezierCurveTo(b * 6, b * 69.640625, b * 15, b * 67.640625, b * 31, b * 62.640625);
    f.bezierCurveTo(b * 63, b * 55.640625, b * 85, b * 57.640625, b * 104, b * 63.640625);
    f.bezierCurveTo(b * 131, b * 69.640625, b * 132, b * 71.640625, b * 131, b * 78.640625);
    f.bezierCurveTo(b * 131, b * 91.640625, b * 112, b * 80.640625, b * 91, b * 75.640625);
    f.bezierCurveTo(b * 51, b * 70.640625, b * 45, b * 74.640625, b * 28, b * 78.640625);
    f.closePath();
    em(f, d[qh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Fg * b, b * 82.640625);
    f.bezierCurveTo(b * 40, b * 107.640625, b * 53, b * 104.640625, b * 67, b * 106.640625);
    f.bezierCurveTo(b * 101, b * 103.640625, b * 117, b * 93.640625, b * 127, b * 84.640625);
    f.bezierCurveTo(b * 135, b * 95.640625, b * 131, b * 107.640625, b * 110, b * 118.640625);
    f.bezierCurveTo(b * 78, b * 129.640625, b * 67, b * 130.640625, b * 27, b * 119.640625);
    f.bezierCurveTo(b * 0, b * 105.640625, b * 8, b * 83.640625, b * wd, b * 84.640625);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = fo;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 8, b * 73.640625);
    f.bezierCurveTo(b * 7, b * 23.640625, b * 33, b * 19.640625, b * 71, b * 17.640625);
    f.bezierCurveTo(b * 129, b * 19.640625, b * 130, b * 45.640625, b * 130, b * 76.640625);
    f.bezierCurveTo(b * 90, b * 63.640625, b * 85, b * 63.640625, b * 73, b * 63.640625);
    f.bezierCurveTo(b * 38, b * 63.640625, b * 33, b * 66.640625, b * vg, b * 73.640625);
    f.closePath();
    em(f, d[1], d[lr], Nr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72, b * 28.640625);
    f.bezierCurveTo(b * 51, b * 25.640625, b * 56, b * 7.640625, b * 70, b * 5.640625);
    f.bezierCurveTo(b * 94, b * 7.640625, b * 87, b * 29.640625, b * 72, b * 28.640625);
    f.closePath();
    em(f, d[3], d[2], b * k);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 51, b * 26.640625);
    f.bezierCurveTo(b * 42, b * 29.640625, b * 43, b * 31.640625, b * 42, b * 37.640625);
    em(f, Ug, d[Tg], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 90, b * 26.640625);
    f.bezierCurveTo(Us * b, b * 28.640625, b * 98, b * 34.640625, b * 99, b * 38.640625);
    em(f, undefined, d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 26, b * 79.640625);
    f.bezierCurveTo(W * b, b * 84.640625, b * 9, b * 86.640625, Pj * b, b * 78.640625);
    f.bezierCurveTo(b * Rm, b * 69.640625, b * Gr, b * 67.640625, b * 31, b * 62.640625);
    f.bezierCurveTo(b * 63, b * 55.640625, b * 85, b * 57.640625, b * 104, b * 63.640625);
    f.bezierCurveTo(b * 131, b * 69.640625, b * 132, b * 71.640625, b * 131, b * 78.640625);
    f.bezierCurveTo(b * 131, b * 91.640625, b * 112, b * 80.640625, b * 91, b * 75.640625);
    f.bezierCurveTo(b * 51, b * 70.640625, b * 45, b * 74.640625, b * 28, b * 78.640625);
    f.closePath();
    em(f, d[on], d[4], b * pj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 8, b * 82.640625);
    f.bezierCurveTo(b * 40, b * 107.640625, b * 53, b * 104.640625, b * 67, b * 106.640625);
    f.bezierCurveTo(b * 101, b * 103.640625, b * 117, b * 93.640625, b * 127, b * 84.640625);
    f.bezierCurveTo(b * 135, b * 95.640625, b * 131, b * 107.640625, b * 110, b * 118.640625);
    f.bezierCurveTo(b * 78, b * 129.640625, b * 67, b * 130.640625, b * 27, b * 119.640625);
    f.bezierCurveTo(b * 0, b * 105.640625, b * hd, b * 83.640625, Ki * b, b * 84.640625);
    f.closePath();
    em(f, d[fa], d[4], b * 4);
    return e;
  }
  function _f(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 135;
    e.height = b * 120;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 3.5, b * 55.25);
    f.bezierCurveTo(b * 3.5, b * 114.25, b * 2.5, b * 109.25, b * 3.5, b * 112.25);
    f.bezierCurveTo(b * 5.5, b * 119.25, b * 8.5, b * 119.25, b * 11.5, b * 119.25);
    f.bezierCurveTo(b * 15.5, b * 114.25, b * 13.5, b * 95.25, b * 14.5, b * 82.25);
    f.closePath();
    em(f, d[so], d[dm], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 6.5, b * 43.25);
    f.bezierCurveTo(b * 3.5, b * 27.25, b * 7.5, b * 20.25, b * 25.5, b * 11.25);
    f.bezierCurveTo(b * 45.5, b * -0.75, b * 73.5, b * 1.25, b * 107.5, b * 10.25);
    f.bezierCurveTo(b * 131.5, b * 21.25, b * 125.5, b * 34.25, b * 125.5, b * 36.25);
    f.closePath();
    em(f, d[Sh], d[1], b * Kr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 120.5, b * 62.25);
    f.bezierCurveTo(b * 121.5, b * 95.25, b * 120.5, b * 80.25, b * 120.5, b * 100.25);
    f.bezierCurveTo(b * 118.5, b * 119.25, b * 123.5, b * 118.25, b * 129.5, b * 113.25);
    f.bezierCurveTo(b * 133.5, b * 107.25, b * 130.5, b * 97.25, b * 130.5, b * 87.25);
    f.bezierCurveTo(b * 129.5, b * 56.25, b * 130, b * 70.75, b * 129.5, b * 54.25);
    f.closePath();
    em(f, d[Ng], d[1], b * 7);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 17.5, b * 27);
    f.bezierCurveTo(b * 48.5, lf * b, b * 93.5, xs * b, b * 118.5, b * 26);
    f.bezierCurveTo(b * 132.5, b * 35, b * 133.5, b * 52, b * 132.5, b * 68);
    f.bezierCurveTo(b * 125.5, b * 87, b * 116.5, b * 84, b * 96.5, b * 75);
    f.bezierCurveTo(b * 60.5, b * 66, b * 52.5, b * 74, b * 37.5, b * 78);
    f.bezierCurveTo(b * 2.5, b * 86, b * 3.5, b * 78, b * 1.5, b * 61);
    f.bezierCurveTo(b * 1.5, b * 37, b * 9.5, b * 32, b * 15.5, b * 28);
    f.closePath();
    em(f, d[2], d[xa], b * 7);
    return e;
  }
  function Ff(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 43;
    e.height = b * 209;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Ng, b * 10);
    f.translate(b * 5, lh * b);
    f.save();
    f.translate(b * 21, b * 102.5);
    nm(f, b * -bq, b * -76.5, b * 8, b * 163, b * 10);
    f.restore();
    em(f, d[Sh]);
    f.translate(Oq, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * Hg, gg * b);
    f.bezierCurveTo(b * 25, b * 25.5, b * 25, b * 25.5, b * 30, b * 41);
    f.bezierCurveTo(b * 25.5, b * 38.5, b * 25.5, b * 38.5, b * 21, b * 36);
    f.bezierCurveTo(b * 16, b * 38.5, b * 16, b * 38.5, b * We, b * 41);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 21, b * 1);
    f.bezierCurveTo(b * 28, an * b, b * 28, Ch * b, b * 35, b * 35);
    f.bezierCurveTo(b * 28.5, b * 32, b * 28.5, b * 32, b * 22, b * 29);
    f.bezierCurveTo(b * 14.5, b * 32.5, b * 14.5, b * 32.5, b * Mq, b * 36);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 14, b * 146);
    f.bezierCurveTo(b * 21, b * 146, b * 21, b * 146, b * 28, b * 146);
    f.bezierCurveTo(b * 27.5, b * 147.5, b * 27.5, b * 147.5, b * 27, b * 149);
    f.bezierCurveTo(b * 27, b * 160, b * 27, b * 160, b * 27, b * 171);
    f.bezierCurveTo(b * 27.5, b * 171.5, b * 27.5, b * 171.5, b * 28, b * 172);
    f.bezierCurveTo(b * 21, b * 172, b * 21, b * 172, b * 14, b * 172);
    f.bezierCurveTo(b * he, b * 171.5, b * 14, b * 171.5, b * 14, b * 171);
    f.bezierCurveTo(b * 14.5, b * 171.5, b * 14.5, b * 171.5, b * ao, b * 172);
    f.bezierCurveTo(b * 15, b * 160.5, b * Dc, b * 160.5, b * 15, b * 149);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 21, b * 6);
    f.bezierCurveTo(b * 26.5, b * 18.5, b * 26.5, b * 18.5, b * 32, b * 31);
    f.bezierCurveTo(b * 27, b * 29, b * 27, b * 29, b * 22, b * 27);
    f.closePath();
    em(f, d[0]);
    f.translate(Sh, b * -20);
    f.globalAlpha = ja;
    f.translate(Ng, b * mm);
    f.translate(b * -bg, -Au * b);
    f.save();
    f.translate(b * 21, b * 102.5);
    nm(f, b * -4, b * -76.5, b * 8, b * 163, b * 10);
    f.restore();
    em(f, d[1], d[yo], b * 4);
    f.translate(0, co * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(zj * b, no * b);
    f.bezierCurveTo(b * 25, b * 25.5, b * 25, b * 25.5, b * 30, b * 41);
    f.bezierCurveTo(b * 25.5, b * 38.5, b * 25.5, b * 38.5, b * 21, b * 36);
    f.bezierCurveTo(b * 16, b * 38.5, b * 16, b * 38.5, b * 11, b * 41);
    f.closePath();
    em(f, d[3], d[4], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 21, b * wg);
    f.bezierCurveTo(b * 28, b * 18, b * 28, b * kq, b * 35, b * 35);
    f.bezierCurveTo(b * 28.5, b * 32, b * 28.5, b * 32, b * 22, b * 29);
    f.bezierCurveTo(b * 14.5, b * 32.5, b * 14.5, b * 32.5, b * 7, b * 36);
    f.closePath();
    em(f, d[Y], d[Ae], Ha * b);
    f.translate(Oq, nj * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 14, b * 146);
    f.bezierCurveTo(b * 21, b * 146, b * 21, b * 146, b * 28, b * 146);
    f.bezierCurveTo(b * 27.5, b * 147.5, b * 27.5, b * 147.5, b * 27, b * 149);
    f.bezierCurveTo(b * 27, b * 160, b * 27, b * 160, b * 27, b * 171);
    f.bezierCurveTo(b * 27.5, b * 171.5, b * 27.5, b * 171.5, b * 28, b * 172);
    f.bezierCurveTo(b * 21, b * 172, b * 21, b * 172, xs * b, b * 172);
    f.bezierCurveTo(b * mo, b * 171.5, pc * b, b * 171.5, b * $s, b * 171);
    f.bezierCurveTo(b * 14.5, b * 171.5, b * 14.5, b * 171.5, b * 15, b * 172);
    f.bezierCurveTo(b * 15, b * 160.5, nd * b, b * 160.5, b * 15, b * 149);
    f.closePath();
    em(f, d[Ic], d[2], Jn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 21, b * Gg);
    f.bezierCurveTo(b * 26.5, b * 18.5, b * 26.5, b * 18.5, b * 32, b * 31);
    f.bezierCurveTo(b * 27, b * 29, b * 27, b * 29, b * 22, b * 27);
    f.closePath();
    em(f, d[_h]);
    return e;
  }
  function Pf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 92;
    e.height = b * 108;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * ue);
    f.bezierCurveTo(b * 37, b * 2, b * 49, b * 0, b * 61, b * 15);
    f.bezierCurveTo(b * 81, b * 31, b * 78, b * 25, b * 79, b * 37);
    f.bezierCurveTo(b * 76, b * 44, b * 81, b * 56, b * 85, b * 63);
    f.bezierCurveTo(b * 91, b * 71, b * 90, b * 78, b * 83, b * 84);
    f.bezierCurveTo(b * 60, b * 98, b * 67, b * 95, b * 57, b * 102);
    f.bezierCurveTo(b * 47, b * 106, b * 43, b * 106, b * 31, b * 98);
    f.bezierCurveTo(b * 22, b * 91, b * 17, b * 89, b * xr, b * 84);
    f.bezierCurveTo(b * Mc, b * 77, b * Nr, b * 73, b * 7, b * 60);
    f.bezierCurveTo(b * 11, b * 50, b * 5, b * 32, b * 15, b * 27);
    f.bezierCurveTo(b * 26, an * b, b * 26, b * 24, b * 31, b * _);
    f.closePath();
    em(f, d[Ka], d[lt], sj);
    return e;
  }
  function Tf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 81;
    e.height = b * 626;
    f.translate(b * zd, Hg * b);
    f.globalAlpha = c ? 0.5 : fi;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 565);
    f.bezierCurveTo(b * 56, b * 586, b * 53, b * 591, b * 40, b * 592);
    f.bezierCurveTo(b * 28, b * 591, b * 27, b * 583, b * 28, b * 557);
    f.bezierCurveTo(b * 27.5, b * 346, b * 27.5, b * 346, b * 27, b * 135);
    f.bezierCurveTo(b * 26, b * 74, b * 36, b * 26, b * 41, b * 15);
    f.bezierCurveTo(b * 54, b * 51, b * 54, b * 81, b * 55, b * 128);
    f.closePath();
    em(f, d[0]);
    f.translate(b * -Xe, b * -Wh);
    f.globalAlpha = Ej;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 565);
    f.bezierCurveTo(b * 56, b * 586, b * 53, b * 591, b * 40, b * 592);
    f.bezierCurveTo(b * 28, b * 591, b * 27, b * 583, b * 28, b * 557);
    f.bezierCurveTo(b * 27.5, b * 346, b * 27.5, b * 346, b * 27, b * 135);
    f.bezierCurveTo(b * 26, b * 74, b * 36, b * 26, b * 41, b * 15);
    f.bezierCurveTo(b * 54, b * 51, b * 54, b * 81, b * 55, b * 128);
    f.closePath();
    em(f, d[Lh], d[lr], th * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 27, b * 129);
    f.bezierCurveTo(b * 32, b * 135, b * 48, b * 136, b * 53, b * 129);
    f.bezierCurveTo(b * 56, b * 97, b * 53, b * 82, b * 52, b * 64);
    f.bezierCurveTo(b * 49, b * 33, b * 44, b * 27, b * 41, b * 21);
    f.bezierCurveTo(b * 31, b * 40, b * 28, b * 84, b * 27, b * 127);
    f.closePath();
    em(f, d[E]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 565);
    f.bezierCurveTo(b * 56, b * 586, b * 53, b * 591, b * 40, b * 592);
    f.bezierCurveTo(b * 28, b * 591, b * 27, b * 583, b * 28, b * 557);
    f.bezierCurveTo(b * 27.5, b * 346, b * 27.5, b * 346, b * 27, b * 135);
    f.bezierCurveTo(b * 26, b * 74, b * 36, b * 26, b * 41, b * nc);
    f.bezierCurveTo(b * 54, b * 51, b * 54, b * 81, b * 55, b * 128);
    f.closePath();
    em(f, undefined, d[wc], tq * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 475);
    f.bezierCurveTo(b * 38, b * 482, b * 48, b * 480, b * 54, b * 474);
    f.bezierCurveTo(b * 54, b * 509.5, b * 54, b * 509.5, b * 54, b * 545);
    f.bezierCurveTo(b * 46, b * 554, b * 36, b * 552, b * 28, b * 545);
    f.closePath();
    em(f, d[Jn], d[5], _h * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 496);
    f.bezierCurveTo(b * 39, b * 506, b * 49, b * 503, b * 54, b * 496);
    em(f, yc, d[5], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 521);
    f.bezierCurveTo(b * 41, b * 529, b * 49, b * 524, b * 54, b * 520);
    em(f, A, d[5], b * 8);
    return e;
  }
  function jf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 200;
    e.height = b * 200;
    f.save();
    f.translate(b * 112, b * 158);
    nm(f, b * -86.5, b * -86, b * 150, b * 35, b * 20);
    f.restore();
    em(f, d[0]);
    f.save();
    f.translate(b * 170, b * _j);
    nm(f, b * -86.5, b * -86, b * 35, b * 150, b * 20);
    f.restore();
    em(f, d[Ka]);
    return e;
  }
  function Rf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 300;
    e.height = b * 300;
    f.globalAlpha = c ? 0.5 : Ps;
    f.save();
    f.translate(b * 150, b * 160);
    f.rotate(6.28);
    cm(f, 6, b * 146, b * 30);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = ja;
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(6.28);
    cm(f, 6, b * 146, b * 30);
    f.restore();
    em(f, d[1], d[2], b * 8);
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(sh);
    cm(f, 6, b * 105, b * 30);
    f.restore();
    em(f, d[3], d[Sn], b * 8);
    f.save();
    f.translate(b * 150, b * 150);
    f.rotate(0);
    cm(f, Th, b * 66, b * 30);
    f.restore();
    em(f, d[Gm], d[ec], b * 8);
    f.save();
    f.translate(b * 131, b * 116);
    cm(f, 7, b * 17, b * 8);
    f.restore();
    em(f, d[6]);
    f.save();
    f.translate(b * 163, b * 168);
    cm(f, Ih, b * 25, hd * b);
    f.restore();
    em(f, d[Gg]);
    f.save();
    f.translate(b * 117, b * 151);
    cm(f, 7, b * 11, b * 8);
    f.restore();
    em(f, d[6]);
    f.save();
    f.translate(b * 167, b * 122);
    cm(f, bh, md * b, b * 8);
    f.restore();
    em(f, d[mc]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 150, b * 207);
    f.bezierCurveTo(b * 150, b * 151, b * 150, b * 101, b * 150, b * 94);
    f.closePath();
    em(f, undefined, d[Gi], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 118, Qg * b);
    f.bezierCurveTo(b * 118, b * 205, b * 118, b * 207, b * 118, b * 200);
    f.closePath();
    em(f, lq, d[2], b * Ca);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 183, b * 100);
    f.bezierCurveTo(b * 183, b * 203, b * 183, b * 203, b * 183, b * 200);
    f.closePath();
    em(f, undefined, d[2], b * ir);
    return e;
  }
  function Lf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 151;
    e.height = b * 80;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 133, b * 54);
    f.bezierCurveTo(b * 136, Kt * b, b * 129, b * 18, b * 114, fd * b);
    f.bezierCurveTo(b * 51, Cm * b, b * 36, _r * b, b * 34, b * 16);
    f.bezierCurveTo(b * 8, b * 28, b * 22, b * 56, b * 21, b * 57);
    f.closePath();
    em(f, d[2], d[3], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130, b * 40);
    f.bezierCurveTo(b * 132, b * 35, b * 132, b * 30, b * 132, b * 29);
    f.bezierCurveTo(b * 145, b * 38, b * 144, b * 43, b * 137, b * 54);
    f.closePath();
    em(f, d[0], d[ae], 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Ji * b, b * 33);
    f.bezierCurveTo(b * 24, b * 44, b * 215, b * 39, b * 23, b * 44);
    f.bezierCurveTo(b * 19, b * 49, b * Ed, b * 49, zs * b, b * 54);
    f.bezierCurveTo(b * Gm, b * 43, b * no, b * 35, b * 20, b * 32);
    f.closePath();
    em(f, d[0], d[X], Nr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * hc, b * 52);
    f.bezierCurveTo(b * 24, b * 31, b * 34, b * 25, b * 75, b * 23);
    f.bezierCurveTo(b * 130, b * 24, b * 129, b * 32, b * 134, b * 51);
    f.bezierCurveTo(b * 138, b * 70, b * 126, b * 72, b * 90, b * 73);
    f.bezierCurveTo(b * 18, b * 72, b * 15, b * 68, an * b, b * 54);
    f.closePath();
    em(f, d[0], d[Ko], 4);
    return e;
  }
  function Gf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 90;
    e.height = b * 98;
    f.translate(Ea, Nr * b);
    if (Td === so) {
      f.globalAlpha = c ? 0.5 : 1;
      f.save();
      f.translate(b * 44, b * 50);
      f.rotate(0.2);
      cm(f, F, b * 41, Ki * b);
      f.restore();
      em(f, d[Ka]);
    }
    f.globalAlpha = fo;
    f.save();
    f.translate(b * 44, b * 44);
    f.rotate(0.2);
    cm(f, 9, b * 41, b * 10);
    em(f, d[Ej], d[wh], b * Jn);
    f.rotate(-0.32);
    cm(f, Qo, b * 32, b * _);
    em(f, d[fa], d[Jr], b * 4);
    f.rotate(0.68);
    cm(f, Gq, b * 23, b * 8);
    em(f, d[yh], d[ss], b * 6);
    f.restore();
    f.save();
    f.translate(b * 45, b * 45);
    f.rotate(0);
    nm(f, b * -G, b * -25.5, hc * b, b * 51, b * 30);
    f.restore();
    em(f, d[4], d[pj], b * eu);
    f.save();
    f.translate(b * 45, b * 45);
    f.rotate(Ou);
    nm(f, b * -26, b * -9, b * 52, b * 18, b * 30);
    f.restore();
    em(f, d[4], d[Gm], b * 2);
    rm(f, b * 45, b * 29, b * 7);
    em(f, d[5]);
    rm(f, b * 45, b * 61, b * Bo);
    em(f, d[Wg]);
    rm(f, b * 28, b * 45, b * 7);
    em(f, d[5]);
    rm(f, b * 62, b * 45, b * $q);
    em(f, d[Cd]);
    return e;
  }
  function qf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 115;
    e.height = b * 585;
    f.scale(-1, Ko);
    f.translate(b * -110, Ka);
    f.translate(b * wd, b * Ki);
    f.globalAlpha = c ? 0.5 : yd;
    f.save();
    f.translate(b * 51.5, b * 342);
    nm(f, b * -14.5, b * -225, b * 29, b * 450, Wo * b);
    f.restore();
    em(f, d[nj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 54, b * 83);
    f.bezierCurveTo(b * 70, b * 69, b * 78, b * 62, b * 82, b * 40);
    f.bezierCurveTo(b * 93, b * 48, b * 103, b * 64, b * 95, b * 102);
    f.bezierCurveTo(b * 60, b * 114, b * 53, b * 103, b * 54, b * 85);
    f.closePath();
    em(f, d[Ka]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 95, b * 97);
    f.bezierCurveTo(b * 56, b * 102, b * 43, b * 77, b * 71, b * Cu);
    f.bezierCurveTo(b * 34, b * 10, b * 6, b * 43, yh * b, b * 76);
    f.bezierCurveTo(b * 4, b * 98, ao * b, b * 130, b * 64, b * 130);
    f.bezierCurveTo(b * 76, b * 129, b * 95, b * 113, b * 97, b * 97);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 176);
    f.bezierCurveTo(b * 74, b * 175, b * 82, b * 169, b * 96, b * 155);
    f.bezierCurveTo(b * 103, b * 183, b * 95, b * 214, b * 54, b * 219);
    f.closePath();
    em(f, d[Oq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 50, b * 176);
    f.bezierCurveTo(b * 25, b * 177, b * 16, b * 164, b * Oi, b * 156);
    f.bezierCurveTo(Ka * b, b * 186, b * 10, b * 201, b * 43, b * 220);
    f.closePath();
    em(f, d[Vd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 403);
    f.bezierCurveTo(b * 47, b * 412, b * 58, b * 412, b * 67, b * 403);
    f.bezierCurveTo(b * 66.5, b * 434, b * 66.5, b * 434, b * 66, b * 465);
    f.bezierCurveTo(b * 56, b * 480, b * 40, b * 472, b * 36, b * 465);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 59, b * 67);
    f.bezierCurveTo(b * 47, b * 97, P * b, b * 117, b * 11, b * 110);
    f.bezierCurveTo(Ws * b, b * 115, $n * b, b * 122, b * 23, b * 124);
    f.bezierCurveTo(b * 46, b * 118, b * 52, b * 113, b * 62, b * 86);
    f.closePath();
    em(f, d[ke]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 125);
    f.bezierCurveTo(b * 47, b * 136, b * 57, b * 134, b * 77, b * 127);
    f.bezierCurveTo(b * 71, b * 158, b * 71, b * 159, b * 66, b * 159);
    f.bezierCurveTo(b * 50.5, b * 156.5, b * 50.5, b * 156.5, b * 35, b * 154);
    f.bezierCurveTo(b * 31, b * 145, b * 31, b * 136, b * 31, b * 125);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 171);
    f.bezierCurveTo(b * 32, b * 221, b * 43, b * 233, b * 70, b * 247);
    f.bezierCurveTo(b * 75, b * 234, b * 75, b * 230, b * 72, b * 221);
    f.bezierCurveTo(b * 48, b * 206, b * 54, b * 188, b * 50, b * 176);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 60, b * 68);
    f.bezierCurveTo(b * 63, b * 69, b * 65, b * 71, b * 67, b * 77);
    f.bezierCurveTo(b * 61, b * 123, b * 52, b * 137, b * 42, b * 150);
    f.bezierCurveTo(b * 38, b * 151, b * 38, b * 151, b * 34, b * 152);
    f.bezierCurveTo(b * 33, b * 146.5, b * 33, b * 146.5, b * 32, b * 141);
    f.bezierCurveTo(b * 49, b * 118, b * 63, b * 87, b * 59, b * 68);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 71, b * 172);
    f.bezierCurveTo(b * 56, b * 222, b * 49, b * 234, b * 35, b * 248);
    f.bezierCurveTo(b * 30, b * 236, b * 30, b * 230, b * 31, b * 217);
    f.bezierCurveTo(b * 44, b * 202, b * 49, b * 191, b * 52, b * 172);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 151);
    f.bezierCurveTo(b * 27, b * 165, b * 31, b * 173, b * 36, b * 178);
    f.bezierCurveTo(b * 56, b * 185, b * 73, b * 184, b * 71, b * 170);
    f.bezierCurveTo(b * 72, b * 154, b * 71, b * 154, b * 63, b * 155);
    f.closePath();
    em(f, d[0]);
    f.translate(b * -10, b * -10);
    f.globalAlpha = 1;
    f.save();
    f.translate(b * 51.5, b * 342);
    nm(f, b * -14.5, b * -225, b * 29, b * 450, b * xh);
    f.restore();
    em(f, d[Mc], d[2], Tc * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 54, b * 83);
    f.bezierCurveTo(b * 70, b * 69, b * 78, b * 62, b * 82, b * 40);
    f.bezierCurveTo(b * 93, b * 48, b * 103, b * 64, b * 95, b * 102);
    f.bezierCurveTo(b * 60, b * 114, b * 53, b * 103, b * 54, b * 85);
    f.closePath();
    em(f, d[E], d[bq], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 95, b * 97);
    f.bezierCurveTo(b * 56, b * 102, b * 43, b * 77, b * 71, b * oo);
    f.bezierCurveTo(b * 34, Sg * b, b * mc, b * 43, b * 5, b * 76);
    f.bezierCurveTo(b * 4, b * 98, b * Oc, b * 130, b * 64, b * 130);
    f.bezierCurveTo(b * 76, b * 129, b * 95, b * 113, b * 97, b * 97);
    f.closePath();
    em(f, d[Au], d[Ae], ss * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 403);
    f.bezierCurveTo(b * 47, b * 412, b * 58, b * 412, b * 67, b * 403);
    f.bezierCurveTo(b * 66.5, b * 434, b * 66.5, b * 434, b * 66, b * 465);
    f.bezierCurveTo(b * 56, b * 480, b * 40, b * 472, b * 36, b * 465);
    f.closePath();
    em(f, d[Wm], d[8], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 37, b * 427);
    f.bezierCurveTo(b * 47, b * 435, b * 55, b * 435, b * 67, b * 427);
    em(f, Rc, d[lo], b * ss);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 448);
    f.bezierCurveTo(b * 46, b * 454, b * 54, b * 457, b * 65, b * 449);
    em(f, undefined, d[8], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55, b * 176);
    f.bezierCurveTo(b * 74, b * 175, b * 82, b * 169, b * 96, b * 155);
    f.bezierCurveTo(b * 103, b * 183, b * 95, b * 214, b * 54, b * 219);
    f.closePath();
    em(f, d[3], d[4], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 50, b * 176);
    f.bezierCurveTo(b * 25, b * 177, b * 16, b * 164, b * ls, b * 156);
    f.bezierCurveTo(b * 0, b * 186, b * Ki, b * 201, b * 43, b * 220);
    f.closePath();
    em(f, d[3], d[4], b * oo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 59, b * 67);
    f.bezierCurveTo(b * 47, b * 97, b * 18, b * 117, b * 11, b * 110);
    f.bezierCurveTo(b * 11, b * 115, b * 15, b * 122, b * 23, b * 124);
    f.bezierCurveTo(b * 46, b * 118, b * 52, b * 113, b * 62, b * 86);
    f.closePath();
    em(f, d[Mq], d[8], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 125);
    f.bezierCurveTo(b * 47, b * 136, b * 57, b * 134, b * 77, b * 127);
    f.bezierCurveTo(b * 71, b * 158, b * 71, b * 159, b * 66, b * 159);
    f.bezierCurveTo(b * 50.5, b * 156.5, b * 50.5, b * 156.5, b * 35, b * 154);
    f.bezierCurveTo(b * 31, b * 145, b * 31, b * 136, b * 31, b * 125);
    f.closePath();
    em(f, d[Ig], d[8], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 171);
    f.bezierCurveTo(b * 32, b * 221, b * 43, b * 233, b * 70, b * 247);
    f.bezierCurveTo(b * 75, b * 234, b * 75, b * 230, b * 72, b * 221);
    f.bezierCurveTo(b * 48, b * 206, b * 54, b * 188, b * 50, b * 176);
    f.closePath();
    em(f, d[I], d[kc], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 60, b * 68);
    f.bezierCurveTo(b * 63, b * 69, b * 65, b * 71, b * 67, b * 77);
    f.bezierCurveTo(b * 61, b * 123, b * 52, b * 137, b * 42, b * 150);
    f.bezierCurveTo(b * 38, b * 151, b * 38, b * 151, b * 34, b * 152);
    f.bezierCurveTo(b * 33, b * 146.5, b * 33, b * 146.5, b * 32, b * 141);
    f.bezierCurveTo(b * 49, b * 118, b * 63, b * 87, b * 59, b * 68);
    f.closePath();
    em(f, d[7], d[8], b * ss);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 71, b * 172);
    f.bezierCurveTo(b * 56, b * 222, b * 49, b * 234, b * 35, b * 248);
    f.bezierCurveTo(b * 30, b * 236, b * 30, b * 230, b * 31, b * 217);
    f.bezierCurveTo(b * 44, b * 202, b * 49, b * 191, b * 52, b * 172);
    f.closePath();
    em(f, d[Le], d[8], b * Ae);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 151);
    f.bezierCurveTo(b * 27, b * 165, b * 31, b * 173, b * 36, b * 178);
    f.bezierCurveTo(b * 56, b * 185, b * 73, b * 184, b * 71, b * 170);
    f.bezierCurveTo(b * 72, b * 154, b * 71, b * 154, b * 63, b * 155);
    f.closePath();
    em(f, d[7], d[Yd], O * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 53, b * 113);
    f.bezierCurveTo(b * 65, b * 140, b * 75, b * 166, b * 52, b * 169);
    f.bezierCurveTo(b * 29, b * 168, b * 41, b * 143, b * 53, b * 112);
    f.closePath();
    em(f, d[uc], d[4], b * Ae);
    return e;
  }
  function Wf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 108;
    e.height = b * 669;
    f.translate(zj * b, b * 20);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 54, b * 389.5);
    nm(f, -Ss * b, b * -228.5, b * 30, b * 457, b * Zo);
    f.restore();
    em(f, d[Ea]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 579);
    f.bezierCurveTo(b * 47, b * 587, b * 61, b * 584, b * 71, b * 579);
    f.bezierCurveTo(b * 75, b * 597.5, b * 75, b * 597.5, b * 79, b * 616);
    f.bezierCurveTo(b * 66.5, b * 628, b * 66.5, b * 628, b * 54, b * 640);
    f.bezierCurveTo(b * 41, b * 628.5, b * 41, b * 628.5, b * 28, b * 617);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 141);
    f.bezierCurveTo(b * 40, b * 136, b * 40, b * 136, b * 50, b * 131);
    f.bezierCurveTo(b * 63, b * 136, b * 63, b * 136, b * 76, b * 141);
    f.bezierCurveTo(b * 72.5, b * 161.5, b * 72.5, b * 161.5, b * 69, b * 182);
    f.bezierCurveTo(b * 61.5, b * 186.5, b * 61.5, b * 186.5, b * 54, b * 191);
    f.bezierCurveTo(b * 45, b * 186.5, b * 45, b * 186.5, b * 36, b * 182);
    f.closePath();
    em(f, d[sh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42, b * 152);
    f.bezierCurveTo(b * 53, b * 152, b * 53, b * 152, b * 64, b * 152);
    f.bezierCurveTo(b * 62, b * 171, b * 62, b * 176, b * 55, b * 177);
    f.bezierCurveTo(b * 42, b * 176, b * 45, b * 174, b * 42, b * 152);
    f.closePath();
    em(f, d[so]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 28);
    f.bezierCurveTo(b * 67.5, b * 55, b * 67.5, b * 55, b * 83, b * 82);
    f.bezierCurveTo(b * 80, b * 106.5, b * 80, b * 106.5, b * 77, b * 131);
    f.bezierCurveTo(b * 58, b * 147, b * 44, b * 141, b * 29, b * 131);
    f.bezierCurveTo(b * 26.5, b * 106.5, b * 26.5, b * 106.5, b * 24, b * 82);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 53, b * 53);
    f.bezierCurveTo(b * 61, b * 70, b * 61, b * 70, b * 69, b * 87);
    f.bezierCurveTo(b * 67, b * 106, b * 67, b * 106, b * 65, b * 125);
    f.bezierCurveTo(b * 54, b * 130, b * 51, b * 130, b * 41, b * 125);
    f.bezierCurveTo(b * 39, b * 105, b * 39, b * 105, b * 37, b * 85);
    f.closePath();
    em(f, d[nj]);
    f.translate(b * -Jq, b * -zj);
    f.globalAlpha = Lh;
    f.save();
    f.translate(b * 54, b * 389.5);
    f.rotate(0);
    nm(f, -Eh * b, b * -228.5, b * 30, b * 457, b * 10);
    f.restore();
    em(f, d[1], d[2], Yd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 579);
    f.bezierCurveTo(b * 47, b * 587, b * 61, b * 584, b * 71, b * 579);
    f.bezierCurveTo(b * 75, b * 597.5, b * 75, b * 597.5, b * 79, b * 616);
    f.bezierCurveTo(b * 66.5, b * 628, b * 66.5, b * 628, b * 54, b * 640);
    f.bezierCurveTo(b * 41, b * 628.5, b * 41, b * 628.5, b * 28, b * 617);
    f.closePath();
    em(f, d[3], d[Jn], ir * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 141);
    f.bezierCurveTo(b * 40, b * 136, b * 40, b * 136, b * 50, b * 131);
    f.bezierCurveTo(b * 63, b * 136, b * 63, b * 136, b * 76, b * 141);
    f.bezierCurveTo(b * 72.5, b * 161.5, b * 72.5, b * 161.5, b * 69, b * 182);
    f.bezierCurveTo(b * 61.5, b * 186.5, b * 61.5, b * 186.5, b * 54, b * 191);
    f.bezierCurveTo(b * 45, b * 186.5, b * 45, b * 186.5, b * 36, b * 182);
    f.closePath();
    em(f, d[3], d[_n], rg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42, b * 152);
    f.bezierCurveTo(b * 53, b * 152, b * 53, b * 152, b * 64, b * 152);
    f.bezierCurveTo(b * 62, b * 171, b * 62, b * 176, b * 55, b * 177);
    f.bezierCurveTo(b * 42, b * 176, b * 45, b * 174, b * 42, b * 152);
    f.closePath();
    em(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 28);
    f.bezierCurveTo(b * 67.5, b * 55, b * 67.5, b * 55, b * 83, b * 82);
    f.bezierCurveTo(b * 80, b * 106.5, b * 80, b * 106.5, b * 77, b * 131);
    f.bezierCurveTo(b * 58, b * 147, b * 44, b * 141, b * 29, b * 131);
    f.bezierCurveTo(b * 26.5, b * 106.5, b * 26.5, b * 106.5, b * 24, b * 82);
    f.closePath();
    em(f, d[6], d[7], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 53, b * 53);
    f.bezierCurveTo(b * 61, b * 70, b * 61, b * 70, b * 69, b * 87);
    f.bezierCurveTo(b * 67, b * 106, b * 67, b * 106, b * 65, b * 125);
    f.bezierCurveTo(b * 54, b * 130, b * 51, b * 130, b * 41, b * 125);
    f.bezierCurveTo(b * 39, b * 105, b * 39, b * 105, b * 37, b * 85);
    f.closePath();
    em(f, d[8]);
    return e;
  }
  const Nf = nj;
  function Hf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 345;
    e.height = b * 250;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105, b * 58);
    f.bezierCurveTo(b * 100.5, b * 43, b * 100.5, b * 43, b * 96, b * 28);
    f.bezierCurveTo(b * 119.5, b * 33.5, b * 119.5, b * 33.5, b * 143, b * 39);
    f.bezierCurveTo(b * 170, b * 37, b * 177, b * 37, b * 188, b * 40);
    f.bezierCurveTo(b * 213, b * 33.5, b * 213, b * 33.5, b * 238, b * 27);
    f.bezierCurveTo(b * 231, b * 52, b * 234, b * 42.5, b * 230, b * 58);
    f.closePath();
    em(f, d[1], d[mj], b * th);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 108, b * 51);
    f.bezierCurveTo(b * 91, b * 55, b * 85, b * 44, b * 86, b * 29);
    f.bezierCurveTo(b * 62, b * 50, b * 78, b * 69, b * 92, b * 75);
    f.closePath();
    em(f, d[3], d[cn], b * An);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 249, b * 27);
    f.bezierCurveTo(b * 273, b * 49, b * 262, b * 68, b * 246, b * 77);
    f.bezierCurveTo(b * 231, b * 59, b * 236, b * 66.5, b * 226, b * 56);
    f.bezierCurveTo(b * 243, b * 53, b * 252, b * 43, b * 249, b * 28);
    f.closePath();
    em(f, d[yr], d[4], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87, b * 78);
    f.bezierCurveTo(b * 87, b * 59, b * 98, b * 46, b * 127, b * 48);
    f.bezierCurveTo(b * 176, b * 48.5, b * 176, b * 48.5, b * 225, b * 49);
    f.bezierCurveTo(b * 243, b * 49, b * 253, b * 59, b * 253, b * 76);
    f.bezierCurveTo(b * 211, b * 85.5, b * 211, b * 85.5, b * 169, b * 95);
    f.closePath();
    em(f, d[5], d[6], b * rg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56, b * 105);
    f.bezierCurveTo(b * 56, b * 92, b * 59, b * 86, b * 65, b * 73);
    f.bezierCurveTo(b * 62.5, b * 61.5, b * 62.5, b * 61.5, b * 60, b * 50);
    f.bezierCurveTo(b * 99.5, b * 64.5, b * 99.5, b * 64.5, b * 139, b * 79);
    f.bezierCurveTo(b * 164, b * 77, b * 177, b * 76, b * 203, b * 78);
    f.bezierCurveTo(b * 242, b * 63.5, b * 242, b * 63.5, b * 281, b * 49);
    f.bezierCurveTo(b * 279, b * 60.5, b * 279, b * 60.5, b * 277, b * 72);
    f.bezierCurveTo(b * 286, b * 88, b * 286, b * 96, b * 287, b * 104);
    f.bezierCurveTo(b * 228.5, b * 127, b * 228.5, b * 127, b * 170, b * 150);
    f.closePath();
    em(f, d[ja], d[2], b * th);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 48, b * 130);
    f.bezierCurveTo(b * 61, b * 155, b * 63, b * 165, b * 56, b * 171);
    f.bezierCurveTo(b * 48, b * 177, b * 40, b * 171, b * 38, b * 178);
    f.bezierCurveTo(b * 33, b * 180, b * 37, b * 188, b * 47, b * 208);
    f.bezierCurveTo(b * 52, b * 221, b * 55, b * 222, b * 75, b * 229);
    f.bezierCurveTo(b * 91, b * 213, b * 98, b * 212, b * 112, b * 219);
    f.bezierCurveTo(b * 167, b * 225, b * 187, b * 224, b * 222, b * 220);
    f.bezierCurveTo(b * 244, b * 214, b * 247, b * 213, b * 263, b * 229);
    f.bezierCurveTo(b * 295, b * 220, b * 291, b * 215, b * 301, b * 194);
    f.bezierCurveTo(b * 308, b * 178, b * 309, b * 176, b * 302, b * 173);
    f.bezierCurveTo(b * 290, b * 177, b * 289, b * 177, b * 283, b * 169);
    f.bezierCurveTo(b * 279, b * 163, b * 279, b * 161, b * 290, b * 130);
    f.bezierCurveTo(b * 270, b * 127, b * 270, b * 127, b * 250, b * 124);
    f.bezierCurveTo(b * 209, b * 137.5, b * 209, b * 137.5, b * 168, b * 151);
    f.bezierCurveTo(b * 121, b * 135, b * 121, b * 135, b * 74, b * 119);
    f.closePath();
    em(f, d[1], d[2], q * b);
    f.globalCompositeOperation = "destination-out";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 133, b * 158);
    f.bezierCurveTo(b * 152, b * 193, b * 158, b * 205, b * 140, b * 203);
    f.bezierCurveTo(b * 99, b * 195, b * 96, b * 189, b * 86, b * 173);
    f.bezierCurveTo(b * 80, b * 159, b * 88, b * 145, b * 104, b * 141);
    f.closePath();
    em(f, d[xr], d[8], _h * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 215, b * 146);
    f.bezierCurveTo(b * 204, b * 167, b * 204, b * 167, b * 193, b * 188);
    f.bezierCurveTo(b * 187, b * 201, b * 191, b * 209, b * 213, b * 201);
    f.bezierCurveTo(b * 247, b * 192, b * 253, b * 181, b * 257, b * 169);
    f.bezierCurveTo(b * 260, b * 157, b * 254, b * 149, b * 243, b * 141);
    f.closePath();
    em(f, d[Oi], d[8], b * 8);
    f.globalCompositeOperation = "source-over";
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 133, b * 158);
    f.bezierCurveTo(b * 152, b * 193, b * 158, b * 205, b * 140, b * 203);
    f.bezierCurveTo(b * 99, b * 195, b * 96, b * 189, b * 86, b * 173);
    f.bezierCurveTo(b * 80, b * 159, b * 88, b * 145, b * 104, b * 141);
    f.closePath();
    em(f, Pq, d[am], b * Sm);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 215, b * 146);
    f.bezierCurveTo(b * 204, b * 167, b * 204, b * 167, b * 193, b * 188);
    f.bezierCurveTo(b * 187, b * 201, b * 191, b * 209, b * 213, b * 201);
    f.bezierCurveTo(b * 247, b * 192, b * 253, b * 181, b * 257, b * 169);
    f.bezierCurveTo(b * 260, b * 157, b * 254, b * 149, b * 243, b * 141);
    f.closePath();
    em(f, Ds, d[Yd], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39, b * 66);
    f.bezierCurveTo(b * 57, b * 107, b * 63, b * 96, b * 120, b * 106);
    f.bezierCurveTo(b * 154, b * 112, b * 163, b * 116, b * 174, b * 135);
    f.bezierCurveTo(b * 180, b * 109, b * 191, b * 113, b * 237, b * 103);
    f.bezierCurveTo(b * 276, b * 100, b * 289, b * 94, b * 301, b * 67);
    f.bezierCurveTo(b * 317, b * 112, b * 301, b * 141, b * 274, b * 139);
    f.bezierCurveTo(b * 204, b * 166, b * 197, b * 169, b * 173, b * 183);
    f.bezierCurveTo(b * 170, b * 183, b * 170, b * 183, b * 167, b * 183);
    f.bezierCurveTo(b * 132, b * 160, b * 112, b * 156, b * 73, b * 141);
    f.bezierCurveTo(b * 43, b * 146, b * 27, b * 120, b * 39, b * 66);
    f.closePath();
    em(f, d[7], d[th], b * vg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 185);
    f.bezierCurveTo(b * 115, b * 200, b * 118, b * 206, b * 124, b * 212);
    f.bezierCurveTo(b * 133, b * 223, b * 132, b * 231, b * 121, b * 230);
    f.bezierCurveTo(b * 108, b * 226, b * 108, b * 215, b * 107, b * 209);
    f.bezierCurveTo(b * 106, b * 201, b * 110, b * 196, b * 114, b * 185);
    f.closePath();
    em(f, d[3], d[4], Yd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 226, b * 186);
    f.bezierCurveTo(b * 234, b * 201, b * 238, b * 209, b * 228, b * 225);
    f.bezierCurveTo(b * 223, b * 233, b * 213, b * 233, b * 211, b * 226);
    f.bezierCurveTo(b * 206, b * 219, b * 217, b * 216, b * 221, b * 207);
    f.bezierCurveTo(b * 225, b * 196, b * 225, b * 191, b * 226, b * 186);
    f.closePath();
    em(f, d[3], d[4], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 172, b * 110);
    f.bezierCurveTo(b * 189, b * 153, b * 192, b * 160, b * 188, b * 175);
    f.bezierCurveTo(b * 183, b * 190, b * 176, b * 197, b * 165, b * 191);
    f.bezierCurveTo(b * 153, b * 181, b * 152, b * 166, b * 157, b * 151);
    f.bezierCurveTo(b * 164.5, b * 131, b * 164.5, b * 131, b * 172, b * 111);
    f.closePath();
    em(f, d[3], d[4], b * hd);
    return e;
  }
  function Uf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 450;
    e.height = b * 260;
    f.translate(jc * b, b * ic);
    if (d == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 9, b * 5);
      f.bezierCurveTo(b * 381, b * 2, b * 197, b * 4.5, b * 385, b * 4);
      f.bezierCurveTo(b * 397, Jn * b, b * 401, bq * b, b * 399, b * 23);
      f.bezierCurveTo(b * 367, b * 27, b * 367, b * 27, b * 335, b * 31);
      f.bezierCurveTo(b * 366.5, b * 33.5, b * 366.5, b * 33.5, b * 398, b * 36);
      f.bezierCurveTo(b * 398, b * 41.5, b * 398, b * 41.5, b * 398, b * 47);
      f.bezierCurveTo(b * 398, b * 56, b * 399, b * 56, b * 386, b * 56);
      f.bezierCurveTo(b * 200.5, b * 56.5, b * 200.5, b * 56.5, $n * b, b * 57);
      f.bezierCurveTo(ec * b, b * 55, b * 4, b * 52, _n * b, b * 43);
      f.bezierCurveTo(b * Jn, b * 30.5, b * 4, b * 30.5, b * 4, cg * b);
      f.bezierCurveTo(b * 16, b * 18.5, ci * b, b * 18.5, b * 28, b * 19);
      f.bezierCurveTo(b * 18.5, li * b, b * 18.5, b * 12, b * G, b * 5);
      f.closePath();
      em(f, c[3], c[3], b * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 5, b * 70);
      f.bezierCurveTo(b * Tc, b * 58, b * 5, b * 55, b * 17, b * 57);
      f.bezierCurveTo(b * 203, b * 57, b * 203, b * 57, b * 389, b * 57);
      f.bezierCurveTo(b * 400, b * 57, b * 400, b * 59, b * 400, b * 69);
      f.bezierCurveTo(b * 400.5, b * 83.5, b * 400.5, b * 83.5, b * 401, b * 98);
      f.bezierCurveTo(b * 402, b * 108, b * 401, b * 108, b * 388, b * 108);
      f.bezierCurveTo(b * 201.5, b * 108, b * 201.5, b * 108, b * 15, b * 108);
      f.bezierCurveTo(b * au, b * 106, b * 5, b * 106, Qm * b, b * 87);
      f.bezierCurveTo(b * 33, b * 84.5, b * 33, b * 84.5, b * 61, b * 82);
      f.bezierCurveTo(b * 33.5, b * 76.5, b * 33.5, b * 76.5, jo * b, b * 71);
      f.closePath();
      em(f, c[3], c[mq], b * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 19, b * 158);
      f.bezierCurveTo(b * 2, b * 159, b * 4, b * 156, b * 5, b * 118);
      f.bezierCurveTo(b * Ac, b * 110, b * O, b * 107, b * 26, b * 109);
      f.bezierCurveTo(b * 206.5, b * 109, b * 206.5, b * 109, b * 387, b * 109);
      f.bezierCurveTo(b * 400, b * 108, b * 400, b * 108, b * 398, b * 127);
      f.bezierCurveTo(b * 384.5, b * 130, b * 384.5, b * 130, b * 371, b * 133);
      f.bezierCurveTo(b * 385.5, b * 138, b * 385.5, b * 138, b * 400, b * 143);
      f.bezierCurveTo(b * 402, b * 156, b * 402, b * 162, b * 385, b * 160);
      f.closePath();
      em(f, c[Xg], c[Ie], b * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(Rh * b, b * 183);
      f.bezierCurveTo(au * b, b * 163, b * 4, b * 158, b * 28, b * 161);
      f.bezierCurveTo(b * 207.5, b * 161, b * 207.5, b * 161, b * 387, b * 161);
      f.bezierCurveTo(b * 401, b * 159, b * 400, b * 164, b * 400, b * 177);
      f.bezierCurveTo(b * 364.5, b * 184, b * 364.5, b * 184, b * 329, b * 191);
      f.bezierCurveTo(b * 364.5, b * 192.5, b * 364.5, b * 192.5, b * 400, b * 194);
      f.bezierCurveTo(b * 403, b * 209, b * 401, b * 214, b * 385, b * 213);
      f.bezierCurveTo(b * 201.5, b * 213, b * 201.5, b * 213, b * Ah, b * 213);
      f.bezierCurveTo(b * 3, b * 213, b * eu, b * 213, b * Dd, b * 198);
      f.bezierCurveTo(b * 12.5, b * 193, b * 12.5, b * 193, b * 21, b * 188);
      f.closePath();
      em(f, c[3], c[Sn], b * 32);
      rm(f, b * 41, b * 30, b * 14.7648230602334);
      em(f, c[xa], c[3], b * 32);
      rm(f, b * 369, b * 30, b * 15.556349186104045);
      em(f, c[Xg], c[jh], b * 32);
      rm(f, b * 364, b * 190, b * 15.620499351813308);
      em(f, c[E], c[pg], b * 32);
      rm(f, b * 41, b * 186, b * 15.556349186104045);
      em(f, c[3], c[er], b * 32);
    } else if (d == 2) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 9, b * 5);
      f.bezierCurveTo(b * 381, b * 2, b * 197, b * 4.5, b * 385, b * 4);
      f.bezierCurveTo(b * 397, b * 4, b * 401, b * 4, b * 399, b * 23);
      f.bezierCurveTo(b * 367, b * 27, b * 367, b * 27, b * 335, b * 31);
      f.bezierCurveTo(b * 366.5, b * 33.5, b * 366.5, b * 33.5, b * 398, b * 36);
      f.bezierCurveTo(b * 398, b * 41.5, b * 398, b * 41.5, b * 398, b * 47);
      f.bezierCurveTo(b * 398, b * 56, b * 399, b * 56, b * 386, b * 56);
      f.bezierCurveTo(b * 200.5, b * 56.5, b * 200.5, b * 56.5, b * zs, b * 57);
      f.bezierCurveTo(b * 2, b * 55, b * 4, b * 52, Jn * b, b * 43);
      f.bezierCurveTo(b * Gm, b * 30.5, b * 4, b * 30.5, b * 4, b * 18);
      f.bezierCurveTo(b * 16, b * 18.5, Uj * b, b * 18.5, b * 28, b * 19);
      f.bezierCurveTo(b * 18.5, b * fg, b * 18.5, b * 12, b * Pc, b * 5);
      f.closePath();
      em(f, c[nh], c[xa], b * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(lh * b, b * 70);
      f.bezierCurveTo(Wg * b, b * 58, Y * b, b * 55, b * gq, b * 57);
      f.bezierCurveTo(b * 203, b * 57, b * 203, b * 57, b * 389, b * 57);
      f.bezierCurveTo(b * 400, b * 57, b * 400, b * 59, b * 400, b * 69);
      f.bezierCurveTo(b * 400.5, b * 83.5, b * 400.5, b * 83.5, b * 401, b * 98);
      f.bezierCurveTo(b * 402, b * 108, b * 401, b * 108, b * 388, b * 108);
      f.bezierCurveTo(b * 201.5, b * 108, b * 201.5, b * 108, b * 15, b * 108);
      f.bezierCurveTo(b * 1, b * 106, b * Qm, b * 106, b * lf, b * 87);
      f.bezierCurveTo(b * 33, b * 84.5, b * 33, b * 84.5, b * 61, b * 82);
      f.bezierCurveTo(b * 33.5, b * 76.5, b * 33.5, b * 76.5, b * 6, b * 71);
      f.closePath();
      em(f, c[3], c[3], b * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 19, b * 158);
      f.bezierCurveTo(b * lr, b * 159, sj * b, b * 156, b * Gj, b * 118);
      f.bezierCurveTo(b * Gm, b * 110, b * 6, b * 107, b * 26, b * 109);
      f.bezierCurveTo(b * 206.5, b * 109, b * 206.5, b * 109, b * 387, b * 109);
      f.bezierCurveTo(b * 400, b * 108, b * 400, b * 108, b * 398, b * 127);
      f.bezierCurveTo(b * 384.5, b * 130, b * 384.5, b * 130, b * 371, b * 133);
      f.bezierCurveTo(b * 385.5, b * 138, b * 385.5, b * 138, b * 400, b * 143);
      f.bezierCurveTo(b * 402, b * 156, b * 402, b * 162, b * 385, b * 160);
      f.closePath();
      em(f, c[3], c[xa], b * 32);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * pj, b * 183);
      f.bezierCurveTo(b * Mc, b * 163, b * 4, b * 158, b * 28, b * 161);
      f.bezierCurveTo(b * 207.5, b * 161, b * 207.5, b * 161, b * 387, b * 161);
      f.bezierCurveTo(b * 401, b * 159, b * 400, b * 164, b * 400, b * 177);
      f.bezierCurveTo(b * 364.5, b * 184, b * 364.5, b * 184, b * 329, b * 191);
      f.bezierCurveTo(b * 364.5, b * 192.5, b * 364.5, b * 192.5, b * 400, b * 194);
      f.bezierCurveTo(b * 403, b * 209, b * 401, b * 214, b * 385, b * 213);
      f.bezierCurveTo(b * 201.5, b * 213, b * 201.5, b * 213, b * 18, b * 213);
      f.bezierCurveTo(b * 3, b * 213, b * 2, b * 213, b * 4, b * 198);
      f.bezierCurveTo(b * 12.5, b * 193, b * 12.5, b * 193, b * 21, b * 188);
      f.closePath();
      em(f, c[3], c[3], b * 32);
      rm(f, b * 41, b * 30, b * 14.7648230602334);
      em(f, c[Xg], c[3], b * 32);
      rm(f, b * 369, b * 30, b * 15.556349186104045);
      em(f, c[3], c[yr], b * 32);
      rm(f, b * 364, b * 190, b * 15.620499351813308);
      em(f, c[3], c[3], b * 32);
      rm(f, b * 41, b * 186, b * 15.556349186104045);
      em(f, c[3], c[Sr], b * 32);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 9, b * 5);
    f.bezierCurveTo(b * 381, b * 2, b * 197, b * 4.5, b * 385, b * 4);
    f.bezierCurveTo(b * 397, b * 4, b * 401, bq * b, b * 399, b * 23);
    f.bezierCurveTo(b * 367, b * 27, b * 367, b * 27, b * 335, b * 31);
    f.bezierCurveTo(b * 366.5, b * 33.5, b * 366.5, b * 33.5, b * 398, b * 36);
    f.bezierCurveTo(b * 398, b * 41.5, b * 398, b * 41.5, b * 398, b * 47);
    f.bezierCurveTo(b * 398, b * 56, b * 399, b * 56, b * 386, b * 56);
    f.bezierCurveTo(b * 200.5, b * 56.5, b * 200.5, b * 56.5, b * 15, b * 57);
    f.bezierCurveTo(b * 2, b * 55, Gs * b, b * 52, b * 4, b * 43);
    f.bezierCurveTo(b * 4, b * 30.5, b * Ac, b * 30.5, b * 4, Ah * b);
    f.bezierCurveTo(b * 16, b * 18.5, b * 16, b * 18.5, b * 28, b * 19);
    f.bezierCurveTo(b * 18.5, md * b, b * 18.5, C * b, b * Pc, lf * b);
    f.closePath();
    em(f, c[1], c[Ng], Qr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * aq, b * 70);
    f.bezierCurveTo(Tc * b, b * 58, b * 5, b * 55, $h * b, b * 57);
    f.bezierCurveTo(b * 203, b * 57, b * 203, b * 57, b * 389, b * 57);
    f.bezierCurveTo(b * 400, b * 57, b * 400, b * 59, b * 400, b * 69);
    f.bezierCurveTo(b * 400.5, b * 83.5, b * 400.5, b * 83.5, b * 401, b * 98);
    f.bezierCurveTo(b * 402, b * 108, b * 401, b * 108, b * 388, b * 108);
    f.bezierCurveTo(b * 201.5, b * 108, b * 201.5, b * 108, nd * b, b * 108);
    f.bezierCurveTo(lt * b, b * 106, b * 5, b * 106, Y * b, b * 87);
    f.bezierCurveTo(b * 33, b * 84.5, b * 33, b * 84.5, b * 61, b * 82);
    f.bezierCurveTo(b * 33.5, b * 76.5, b * 33.5, b * 76.5, b * 6, b * 71);
    f.closePath();
    em(f, c[ih], c[0], b * Eo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19, b * 158);
    f.bezierCurveTo(b * En, b * 159, b * 4, b * 156, b * bg, b * 118);
    f.bezierCurveTo(b * 4, b * 110, b * 6, b * 107, b * 26, b * 109);
    f.bezierCurveTo(b * 206.5, b * 109, b * 206.5, b * 109, b * 387, b * 109);
    f.bezierCurveTo(b * 400, b * 108, b * 400, b * 108, b * 398, b * 127);
    f.bezierCurveTo(b * 384.5, b * 130, b * 384.5, b * 130, b * 371, b * 133);
    f.bezierCurveTo(b * 385.5, b * 138, b * 385.5, b * 138, b * 400, b * 143);
    f.bezierCurveTo(b * 402, b * 156, b * 402, b * 162, b * 385, b * 160);
    f.closePath();
    em(f, c[1], c[Ka], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * pj, b * 183);
    f.bezierCurveTo(b * 1, b * 163, k * b, b * 158, b * 28, b * 161);
    f.bezierCurveTo(b * 207.5, b * 161, b * 207.5, b * 161, b * 387, b * 161);
    f.bezierCurveTo(b * 401, b * 159, b * 400, b * 164, b * 400, b * 177);
    f.bezierCurveTo(b * 364.5, b * 184, b * 364.5, b * 184, b * 329, b * 191);
    f.bezierCurveTo(b * 364.5, b * 192.5, b * 364.5, b * 192.5, b * 400, b * 194);
    f.bezierCurveTo(b * 403, b * 209, b * 401, b * 214, b * 385, b * 213);
    f.bezierCurveTo(b * 201.5, b * 213, b * 201.5, b * 213, R * b, b * 213);
    f.bezierCurveTo(Sn * b, b * 213, b * Te, b * 213, b * 4, b * 198);
    f.bezierCurveTo(b * 12.5, b * 193, b * 12.5, b * 193, b * 21, b * 188);
    f.closePath();
    em(f, c[ih], c[Cm], b * de);
    rm(f, b * 41, b * 30, b * 14.7648230602334);
    em(f, c[yo], c[0], b * 12);
    rm(f, b * 369, b * 30, b * 15.556349186104045);
    em(f, c[ec], c[qh], en * b);
    rm(f, b * 364, b * 190, b * 15.620499351813308);
    em(f, c[Gi], c[0], b * Ta);
    rm(f, b * 41, b * 186, b * 15.556349186104045);
    em(f, c[2], c[0], b * Qr);
    return e;
  }
  function Of(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var g = Yf(b * 1, oh, d);
    a.drawImage(g, b * 0, b * Ka);
    if (e == 1) {
      a.translate(b * 100, b * 0);
      rm(a, b * 113, b * 120, b * 66);
      em(a, Ug, d[4], b * uj);
      g = wu(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      a.rotate(0.7);
      a.drawImage(g, b * 133, b * -64);
      a.rotate(-0.7);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 70, b * 70);
      a.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      a.closePath();
      em(a, A, d[4], b * 13);
    } else if (e == 2) {
      a.translate(b * wr, b * Ng);
      rm(a, b * 113, b * 120, b * 66);
      em(a, Oh, d[4], b * 13);
      a.translate(b * 30, b * 40);
      a.save();
      a.translate(b * 83.5, b * 66.5);
      nm(a, b * -40.5, b * -29.5, b * 81, b * 59, b * Ui);
      a.restore();
      em(a, "#dff2f7", "#187484", b * 7);
      rm(a, b * 22, b * 82, b * li);
      em(a, "#dff2f7", "#187484", b * Le);
      rm(a, b * 145, b * 82, b * 12);
      em(a, "#dff2f7", "#187484", b * 7);
      g = Iu(b * 0.5, true, ["#80500b", "#7c4908"]);
      a.drawImage(g, b * Mh, b * 85);
      g = Iu(b * 0.5, true, ["#80500b", "#7c4908"]);
      a.drawImage(g, b * 50, b * 85);
      g = Iu(b * 0.5, Nh, ["#80500b", "#7c4908"]);
      a.drawImage(g, b * 90, b * 85);
      g = Gu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 90, b * 105);
      g = Gu(b * Ic, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 90, b * 105);
      g = Gu(yd * b, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 30, b * 125);
      g = Gu(b * ae, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 50, b * 115);
      g = Gu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 30, b * 100);
      g = Gu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 80, b * 120);
      g = Gu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 110, b * 125);
      g = Gu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      a.drawImage(g, b * 120, b * 105);
    } else if (e == 3) {
      a.translate(b * 100, b * Ea);
      rm(a, b * 113, b * 120, b * 66);
      em(a, Lr, d[4], b * 13);
      a.translate(b * 40, b * 50);
      a.save();
      a.translate(b * 71, b * 69);
      nm(a, b * -30, b * -42, b * 60, b * 84, b * mm);
      a.restore();
      em(a, undefined, d[lf], _g * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 42, b * 28);
      a.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      a.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      a.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      a.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      a.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      a.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      a.closePath();
      em(a, d[5], d[5], Jr * b);
      a.translate(b * -40, b * -50);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 70, b * 70);
      a.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      a.closePath();
      em(a, undefined, d[bq], b * 13);
    } else if (e == 4) {
      a.scale(Lh, fn);
      a.translate(b * 70, b * 50);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 23, b * 6);
      a.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      em(a, _e, d[5], Xc * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 59, b * 10);
      a.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      em(a, undefined, d[5], pc * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 7, b * 55);
      a.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      em(a, Ds, d[et], b * kj);
      a.translate(b * Mh, Oq * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 123, xo * b);
      a.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * K);
      a.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      a.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      em(a, Ug, d[Jd], Hd * b);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 72, b * 63);
      a.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      em(a, undefined, d[Tc], Be * b);
      a.translate(b * 10, b * 10);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 141, Yd * b);
      a.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      a.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      em(a, Go, d[Au], b * 14);
      a.translate(b * no, b * -10);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 205, b * 124);
      a.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      a.bezierCurveTo(b * 239, Eh * b, b * 250, b * 37, b * 249, b * 49);
      a.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      em(a, undefined, d[et], b * he);
    }
    return f;
  }
  function Yf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 450;
    e.height = b * 260;
    f.translate(Zo * b, no * b);
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(b * 20, b * Xe);
    nm(f, 0, 0, b * 400, b * 220, b * 30);
    em(f, d[Sh]);
    f.globalAlpha = 1;
    f.translate(b * -Jh, b * -20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * G, b * br);
    f.bezierCurveTo(b * 381, b * 2, b * 197, b * 4.5, b * 385, b * 4);
    f.bezierCurveTo(b * 397, b * 4, b * 401, b * Jn, b * 399, b * 23);
    f.bezierCurveTo(b * 367, b * 27, b * 367, b * 27, b * 335, b * 31);
    f.bezierCurveTo(b * 366.5, b * 33.5, b * 366.5, b * 33.5, b * 398, b * 36);
    f.bezierCurveTo(b * 398, b * 41.5, b * 398, b * 41.5, b * 398, b * 47);
    f.bezierCurveTo(b * 398, b * 56, b * 399, b * 56, b * 386, b * 56);
    f.bezierCurveTo(b * 200.5, b * 56.5, b * 200.5, b * 56.5, b * 15, b * 57);
    f.bezierCurveTo(z * b, b * 55, b * 4, b * 52, b * 4, b * 43);
    f.bezierCurveTo(b * Ld, b * 30.5, b * Ud, b * 30.5, b * 4, vr * b);
    f.bezierCurveTo(b * 16, b * 18.5, b * 16, b * 18.5, b * 28, b * 19);
    f.bezierCurveTo(b * 18.5, b * Dh, b * 18.5, C * b, Mg * b, b * 5);
    f.closePath();
    em(f, d[2], d[fi], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * et, b * 70);
    f.bezierCurveTo(b * 5, b * 58, b * aq, b * 55, js * b, b * 57);
    f.bezierCurveTo(b * 203, b * 57, b * 203, b * 57, b * 389, b * 57);
    f.bezierCurveTo(b * 400, b * 57, b * 400, b * 59, b * 400, b * 69);
    f.bezierCurveTo(b * 400.5, b * 83.5, b * 400.5, b * 83.5, b * 401, b * 98);
    f.bezierCurveTo(b * 402, b * 108, b * 401, b * 108, b * 388, b * 108);
    f.bezierCurveTo(b * 201.5, b * 108, b * 201.5, b * 108, Od * b, b * 108);
    f.bezierCurveTo(b * 1, b * 106, b * 5, b * 106, b * 5, b * 87);
    f.bezierCurveTo(b * 33, b * 84.5, b * 33, b * 84.5, b * 61, b * 82);
    f.bezierCurveTo(b * 33.5, b * 76.5, b * 33.5, b * 76.5, b * 6, b * 71);
    f.closePath();
    em(f, d[3], d[1], Ta * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19, b * 158);
    f.bezierCurveTo(tm * b, b * 159, b * _n, b * 156, b * yh, b * 118);
    f.bezierCurveTo(b * Nr, b * 110, b * Ad, b * 107, b * 26, b * 109);
    f.bezierCurveTo(b * 206.5, b * 109, b * 206.5, b * 109, b * 387, b * 109);
    f.bezierCurveTo(b * 400, b * 108, b * 400, b * 108, b * 398, b * 127);
    f.bezierCurveTo(b * 384.5, b * 130, b * 384.5, b * 130, b * 371, b * 133);
    f.bezierCurveTo(b * 385.5, b * 138, b * 385.5, b * 138, b * 400, b * 143);
    f.bezierCurveTo(b * 402, b * 156, b * 402, b * 162, b * 385, b * 160);
    f.closePath();
    em(f, d[2], d[X], b * Po);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(_n * b, b * 183);
    f.bezierCurveTo(au * b, b * 163, b * 4, b * 158, b * 28, b * 161);
    f.bezierCurveTo(b * 207.5, b * 161, b * 207.5, b * 161, b * 387, b * 161);
    f.bezierCurveTo(b * 401, b * 159, b * 400, b * 164, b * 400, b * 177);
    f.bezierCurveTo(b * 364.5, b * 184, b * 364.5, b * 184, b * 329, b * 191);
    f.bezierCurveTo(b * 364.5, b * 192.5, b * 364.5, b * 192.5, b * 400, b * 194);
    f.bezierCurveTo(b * 403, b * 209, b * 401, b * 214, b * 385, b * 213);
    f.bezierCurveTo(b * 201.5, b * 213, b * 201.5, b * 213, R * b, b * 213);
    f.bezierCurveTo(b * 3, b * 213, b * Te, b * 213, b * 4, b * 198);
    f.bezierCurveTo(b * 12.5, b * 193, b * 12.5, b * 193, b * 21, b * 188);
    f.closePath();
    em(f, d[3], d[Lh], b * li);
    rm(f, b * 41, b * 30, b * 14.7648230602334);
    em(f, d[3], d[lt], b * Gt);
    rm(f, b * 369, b * 30, b * 15.556349186104045);
    em(f, d[3], d[ja], dg * b);
    rm(f, b * 364, b * 190, b * 15.620499351813308);
    em(f, d[3], d[Lo], de * b);
    rm(f, b * 41, b * 186, b * 15.556349186104045);
    em(f, d[3], d[X], b * 12);
    return e;
  }
  const Jf = dm;
  function Kf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 187;
    e.height = b * 119;
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, 3);
    f.moveTo(b * 53, b * 45);
    f.bezierCurveTo(b * 3, b * 60, b * 11, b * 72, b * 19, b * 81);
    f.bezierCurveTo(b * 28, b * 82, b * 24, b * 81, b * 29, b * 82);
    f.bezierCurveTo(b * 26, b * 87, b * 28, b * 84, b * 28, b * 87);
    f.bezierCurveTo(b * 63, b * 101, b * 92, b * yq, b * 138, b * 93);
    f.bezierCurveTo(b * 172, b * 87, b * 180, b * 72, b * 168, b * 62);
    f.bezierCurveTo(b * 154, b * 51, b * 150, b * 50, b * 148, b * 49);
    f.bezierCurveTo(b * 132, b * 42, b * 90, b * 40, b * 55, b * 45);
    f.closePath();
    em(f, d[5]);
    f.globalAlpha = fi;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, -on);
    f.moveTo(b * 53, b * 45);
    f.bezierCurveTo(b * mq, b * 60, b * 11, b * 72, b * 19, b * 81);
    f.bezierCurveTo(b * 28, b * 82, b * 24, b * 81, b * 29, b * 82);
    f.bezierCurveTo(b * 26, b * 87, b * 28, b * 84, b * 28, b * 87);
    f.bezierCurveTo(b * 63, b * 101, b * 92, Re * b, b * 138, b * 93);
    f.bezierCurveTo(b * 172, b * 87, b * 180, b * 72, b * 168, b * 62);
    f.bezierCurveTo(b * 154, b * 51, b * 150, b * 50, b * 148, b * 49);
    f.bezierCurveTo(b * 132, b * 42, b * 90, b * 40, b * 55, b * 45);
    f.closePath();
    em(f, d[0], d[fo], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 151, b * 60);
    f.bezierCurveTo(b * 140, b * 36, b * 137, b * 32, b * 124, b * 29);
    f.bezierCurveTo(b * 98, b * 22, b * 80, b * 24, b * 62, b * 28);
    f.bezierCurveTo(b * 42, b * 35, b * 38, b * 46, b * 34, b * 58);
    f.bezierCurveTo(b * 53, b * 74, b * 76, b * 76, b * 91, b * 78);
    f.closePath();
    em(f, d[Ka], d[hf], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 37, b * 53);
    f.bezierCurveTo(b * 30, b * 56, b * 29, b * 67, b * 30, b * 68);
    f.bezierCurveTo(b * 94, b * 108, b * 150, b * 76, b * 155, b * 70);
    f.bezierCurveTo(b * 154, b * 60, b * 151, b * 54, b * 149, b * 53);
    f.bezierCurveTo(b * 101, b * 74, b * 66, b * 66, b * 37, b * 53);
    f.closePath();
    em(f, d[2], d[3], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 100, b * 36);
    f.bezierCurveTo(b * 92, b * 25, b * 86, b * 28, b * 82, b * 34);
    f.bezierCurveTo(b * 88, b * 40, b * 93, b * 40, b * 98, b * 36);
    f.closePath();
    em(f, d[0], d[1], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80, b * 43);
    f.bezierCurveTo(b * 69, b * 46, b * 67, b * 52, b * 69, b * 58);
    em(f, undefined, d[Mc], b * 4);
    rm(f, b * 58, b * 50, yh * b);
    em(f, d[4]);
    rm(f, b * 43, b * 65, Co * b);
    em(f, d[4]);
    rm(f, b * 58, b * 73, Jd * b);
    em(f, d[Jn]);
    rm(f, b * 58, b * 50, b * Cs);
    em(f, d[Nu]);
    rm(f, b * 43, b * 65, b * 2);
    em(f, d[Gj]);
    rm(f, b * 58, b * 73, b * 2);
    em(f, d[5]);
    return e;
  }
  function Xf(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : hf;
    f.translate(Sh, ic * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    em(f, d[Js]);
    f.globalAlpha = 1;
    f.translate(Ng, b * -10);
    rm(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    em(f, d[et], undefined, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    em(f, d[Jj]);
    f.globalAlpha = ae;
    var a = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = dm;
      d.translate(0, a * -co);
      rm(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      em(d, b[au], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      rm(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      em(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(a, 0, Ka);
    f.translate(0, b * -10);
    rm(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    em(f, Ls, d[Te], li * b);
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(so, b * Wg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    em(f, d[0], d[0], b * 12);
    f.globalAlpha = dm;
    f.translate(Vd, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    em(f, d[3], d[En], b * Qr);
    f.globalAlpha = c ? 0.5 : lt;
    f.translate(0, b * br);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    em(f, d[0], d[0], b * Uh);
    f.globalAlpha = 1;
    f.translate(0, b * -Jd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    em(f, d[Ha], d[wh], b * 12);
    f.globalAlpha = c ? 0.5 : Mc;
    f.translate(so, b * Jd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    em(f, d[0], d[0], b * 12);
    f.globalAlpha = Lh;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    em(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : Ko;
    f.translate(ke, dh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    em(f, d[Ou], d[0], b * 12);
    f.globalAlpha = lt;
    f.translate(du, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    em(f, d[eh], d[2], Uh * b);
    f.globalAlpha = c ? 0.5 : Ko;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    em(f, d[0], d[Cm], Po * b);
    f.globalAlpha = 1;
    f.translate(0, -Cd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    em(f, d[4], d[lr], b * 12);
    f.globalAlpha = c ? 0.5 : X;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    em(f, d[ke], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(Ng, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    em(f, d[Wc], d[lr], Eo * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, bg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    em(f, d[nj], d[ke], b * 12);
    f.globalAlpha = 1;
    f.translate(nj, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    em(f, d[4], d[Gi], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Ea, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    em(f, d[0], d[0], b * 12);
    f.globalAlpha = ja;
    f.translate(0, -Y * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    em(f, d[4], d[tm], Qr * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(qh, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    em(f, d[du], d[Js], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    em(f, d[pj], d[lr], C * b);
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    em(f, d[bd], d[Gc], b * 12);
    f.globalAlpha = 1;
    f.translate(Jj, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    em(f, d[_n], d[Cg], b * dg);
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    em(f, d[0], d[Nf], b * md);
    f.globalAlpha = 1;
    f.translate(Nf, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    em(f, d[jh], d[2], Po * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Js, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    em(f, d[Ou], d[sh], md * b);
    f.globalAlpha = 1;
    f.translate(qh, b * -Me);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    em(f, d[4], d[Te], b * 12);
    f.globalAlpha = c ? 0.5 : fo;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    em(f, d[0], d[0], Uh * b);
    f.globalAlpha = Lo;
    f.translate(bd, -aq * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    em(f, d[Jn], d[2], Pg * b);
    f.globalAlpha = c ? 0.5 : yd;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    em(f, d[0], d[sh], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    em(f, d[4], d[wh], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(bd, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    em(f, d[0], d[0], b * 12);
    f.globalAlpha = X;
    f.translate(Sh, b * -lf);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    em(f, d[3], d[hu], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Ea, b * yh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    em(f, d[xn], d[Ka], Ta * b);
    f.globalAlpha = 1;
    f.translate(Jj, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    em(f, d[4], d[En], b * 12);
    return e;
  }
  function Vf(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    em(d, b[0]);
    return c;
  }
  function Zf(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    em(d, b[Ng]);
    return c;
  }
  function $f(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    rm(d, a * 126.5, a * 134, a * 119);
    em(d, b[0]);
    d.globalAlpha = 1;
    rm(d, a * 126.5, a * 124, a * 119);
    em(d, b[1], b[Tg], a * cn);
    rm(d, a * 126.5, a * 127, B * a);
    em(d, b[Ie]);
    d.globalAlpha = 0.5;
    rm(d, a * 126.5, a * 135, a * 81);
    em(d, b[0]);
    d.globalAlpha = dm;
    rm(d, a * 126.5, a * 125, a * 84);
    em(d, b[cn], b[5], a * 4);
    rm(d, a * 126.5, a * 125, a * 61);
    em(d, b[Rm], b[7], a * 4);
    d.globalAlpha = 0.5;
    rm(d, a * 126.5, a * 134, a * 40);
    em(d, b[8]);
    d.globalAlpha = 1;
    rm(d, a * 126.5, a * 125, a * 40);
    em(d, b[9]);
    return c;
  }
  function ip(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 450;
    e.height = b * 790;
    f.translate(b * 5, dh * b);
    f.globalAlpha = c ? 0 : Vd;
    rm(f, b * 178.5, b * 172.828125, b * 150);
    em(f, _e, d[ke], b * 65);
    rm(f, b * 178.5, b * 172.828125, b * 150);
    em(f, undefined, d[bd], b * 55);
    f.closePath();
    f.save();
    f.translate(b * 177, b * 512.328125);
    nm(f, b * -25, b * -202.5, b * 65, b * 405, b * 25);
    f.restore();
    em(f, d[Sh]);
    f.save();
    f.translate(b * 136, b * 581.828125);
    nm(f, b * -39, b * -23, b * 78, b * 46, b * 25);
    f.restore();
    em(f, d[sh]);
    f.save();
    f.translate(b * 135.5, b * 663.828125);
    nm(f, b * -39.5, b * -22, b * 79, b * 44, b * 25);
    f.restore();
    em(f, d[Sh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 114, b * 594.828125);
    f.bezierCurveTo(b * 175, b * 596.828125, b * 163, b * 596.828125, b * 172, b * 594.828125);
    f.bezierCurveTo(b * 171.5, b * 633.828125, b * 171.5, b * 633.828125, b * 171, b * 672.828125);
    f.bezierCurveTo(b * 110, b * 673.828125, b * 140.5, b * 673.328125, b * 110, b * 673.828125);
    f.bezierCurveTo(b * 110.5, b * 661.828125, b * 110.5, b * 661.828125, b * 111, b * 649.828125);
    f.bezierCurveTo(b * 157, b * 633.828125, b * 134, b * 607.828125, b * 114, b * 594.828125);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, b * 5);
    f.moveTo(b * 140, b * 294.828125);
    f.bezierCurveTo(b * 212, b * 295.828125, b * 176.5, b * 295.328125, b * 213, b * 295.828125);
    f.bezierCurveTo(b * 201.5, b * 325.328125, b * 201.5, b * 325.328125, b * 190, b * 354.828125);
    f.bezierCurveTo(b * 175.5, b * 355.828125, b * 175.5, b * 355.828125, b * 161, b * 356.828125);
    f.bezierCurveTo(b * 154.5, b * 328.828125, b * 154.5, b * 328.828125, b * 148, b * 300.828125);
    f.closePath();
    em(f, d[Ka]);
    f.translate(3, b * -Gj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 159, b * 679.828125);
    f.bezierCurveTo(b * 180, b * 665.828125, b * 155, b * 675.828125, b * 151, b * 671.828125);
    f.bezierCurveTo(b * 154.5, b * 685.328125, b * 154.5, b * 685.328125, b * 158, b * 698.828125);
    f.bezierCurveTo(b * 171, b * 699.828125, b * 171, b * 699.828125, b * 184, b * 700.828125);
    f.closePath();
    em(f, d[0]);
    f.save();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157, b * 548.828125);
    f.bezierCurveTo(b * 157, b * 561.828125, b * 157, b * 561.828125, b * 157, b * 574.828125);
    f.bezierCurveTo(b * 132.5, b * 580.828125, b * 132.5, b * 580.828125, b * 108, b * 586.828125);
    f.bezierCurveTo(b * 112, b * 599.828125, b * 111, b * 593.828125, b * 112, b * 599.828125);
    f.bezierCurveTo(b * 159, b * 603.828125, b * 126.5, b * 601.328125, b * 141, b * 602.828125);
    f.bezierCurveTo(b * 145, b * 641.828125, b * 143.5, b * 623.828125, b * 146, b * 644.828125);
    f.bezierCurveTo(b * 129.5, b * 645.328125, b * 129.5, b * 645.328125, b * 113, b * 645.828125);
    f.bezierCurveTo(b * 107.5, b * 652.828125, b * 107.5, b * 652.828125, b * 102, b * 659.828125);
    f.bezierCurveTo(b * 104, b * 669.328125, b * 104, b * 669.328125, b * 106, b * 678.828125);
    f.bezierCurveTo(b * 145, b * 679.328125, b * 145, b * 679.328125, b * 184, b * 679.828125);
    f.bezierCurveTo(b * 185, b * 615.828125, b * 185, b * 615.828125, b * 186, b * 551.828125);
    f.bezierCurveTo(b * 172.5, b * 551.328125, b * 172.5, b * 551.328125, b * 159, b * 550.828125);
    f.closePath();
    em(f, d[Gc], d[0], b * Bo);
    f.restore();
    f.globalAlpha = 1;
    f.translate(og * b, b * 35);
    rm(f, b * 178.5, b * 172.828125, b * 150);
    em(f, undefined, d[En], b * 95);
    rm(f, b * 178.5, b * 172.828125, b * 150);
    em(f, Rc, d[wg], b * 55);
    f.closePath();
    f.save();
    f.translate(b * 177, b * 512.328125);
    nm(f, b * -25, b * -202.5, b * 65, b * 405, b * 25);
    f.restore();
    em(f, d[1], d[2], b * 20);
    f.save();
    f.translate(b * 136, b * 581.828125);
    nm(f, b * -39, b * -23, b * 78, b * 46, b * 25);
    f.restore();
    em(f, d[1], d[Tg], b * 20);
    f.save();
    f.translate(b * 135.5, b * 663.828125);
    nm(f, b * -39.5, b * -22, b * 79, b * 44, b * 25);
    f.restore();
    em(f, d[1], d[2], b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 114, b * 594.828125);
    f.bezierCurveTo(b * 175, b * 596.828125, b * 163, b * 596.828125, b * 172, b * 594.828125);
    f.bezierCurveTo(b * 171.5, b * 633.828125, b * 171.5, b * 633.828125, b * 171, b * 672.828125);
    f.bezierCurveTo(b * 110, b * 673.828125, b * 140.5, b * 673.328125, b * 110, b * 673.828125);
    f.bezierCurveTo(b * 110.5, b * 661.828125, b * 110.5, b * 661.828125, b * 111, b * 649.828125);
    f.bezierCurveTo(b * 157, b * 633.828125, b * 134, b * 607.828125, b * 114, b * 594.828125);
    f.closePath();
    em(f, d[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(0, b * 5);
    f.moveTo(b * 123, b * 294.828125);
    f.bezierCurveTo(b * 212, b * 295.828125, b * 190.5, b * 295.328125, b * 250, b * 295.828125);
    f.bezierCurveTo(b * 231.5, b * 325.328125, b * 231.5, b * 325.328125, b * 220, b * 354.828125);
    f.bezierCurveTo(b * 175.5, b * 355.828125, b * 175.5, b * 355.828125, b * 140, b * 356.828125);
    f.bezierCurveTo(b * 123.5, b * 328.828125, b * 123.5, b * 328.828125, b * 123, b * 294.828125);
    f.closePath();
    em(f, d[1]);
    f.translate(0, b * -Tc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 159, b * 679.828125);
    f.bezierCurveTo(b * 180, b * 665.828125, b * 155, b * 675.828125, b * 151, b * 671.828125);
    f.bezierCurveTo(b * 154.5, b * 685.328125, b * 154.5, b * 685.328125, b * 158, b * 698.828125);
    f.bezierCurveTo(b * 171, b * 699.828125, b * 171, b * 699.828125, b * 184, b * 700.828125);
    f.closePath();
    em(f, d[hf]);
    f.save();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157, b * 548.828125);
    f.bezierCurveTo(b * 157, b * 561.828125, b * 157, b * 561.828125, b * 157, b * 574.828125);
    f.bezierCurveTo(b * 132.5, b * 580.828125, b * 132.5, b * 580.828125, b * 108, b * 586.828125);
    f.bezierCurveTo(b * 112, b * 599.828125, b * 111, b * 593.828125, b * 112, b * 599.828125);
    f.bezierCurveTo(b * 159, b * 603.828125, b * 126.5, b * 601.328125, b * 141, b * 602.828125);
    f.bezierCurveTo(b * 145, b * 641.828125, b * 143.5, b * 623.828125, b * 146, b * 644.828125);
    f.bezierCurveTo(b * 129.5, b * 645.328125, b * 129.5, b * 645.328125, b * 113, b * 645.828125);
    f.bezierCurveTo(b * 107.5, b * 652.828125, b * 107.5, b * 652.828125, b * 102, b * 659.828125);
    f.bezierCurveTo(b * 104, b * 669.328125, b * 104, b * 669.328125, b * 106, b * 678.828125);
    f.bezierCurveTo(b * 145, b * 679.328125, b * 145, b * 679.328125, b * 184, b * 679.828125);
    f.bezierCurveTo(b * 185, b * 615.828125, b * 185, b * 615.828125, b * 186, b * 551.828125);
    f.bezierCurveTo(b * 172.5, b * 551.328125, b * 172.5, b * 551.328125, b * 159, b * 550.828125);
    f.closePath();
    em(f, d[Ej], d[1], b * 7);
    f.restore();
    return e;
  }
  function tp(c, d, f) {
    var e = document.createElement("canvas");
    var g = e.getContext("2d");
    e.width = c * 95;
    e.height = c * 85;
    if (f == sh) {
      g.translate(c * Ec, c * 15);
      g.scale(0.9, 0.9);
      g.save();
      nm(g, Ou * c, c * Au, c * 90, c * 60, ue);
      em(g, d[Jj]);
      g.globalCompositeOperation = "destination-out";
      rm(g, c * 25, c * 40, c * Sg);
      g.fill();
      rm(g, c * 65, c * 40, jn * c);
      g.fill();
      g.restore();
      g.save();
      nm(g, bd, Ou, c * 90, c * 60, c * as);
      em(g, d[hf]);
      g.globalCompositeOperation = "destination-out";
      rm(g, c * 25, c * 40, c * 10);
      g.fill();
      rm(g, c * 65, c * 40, c * rs);
      g.fill();
      g.restore();
    } else if (f == 1) {
      g.scale(0.8, 0.8);
      g.translate(b * c, c * 33);
      g.save();
      g.scale(0.56, 0.56);
      g.translate(c * -39, c * -60);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(c * 32.5, c * 50.642852783203125);
      g.bezierCurveTo(c * 83, c * 69.64285278320312, c * 83, c * 69.64285278320312, c * 133.5, c * 88.64285278320312);
      g.bezierCurveTo(c * 93, c * 92.64285278320312, c * 93, c * 92.64285278320312, c * 52.5, c * 96.64285278320312);
      g.bezierCurveTo(c * 30.5, c * 100.64285278320312, c * 36.5, c * 94.64285278320312, c * 32.5, c * 84.64285278320312);
      g.bezierCurveTo(c * 21.5, c * 45.642852783203125, c * 24.5, c * 48.642852783203125, c * 31.5, c * 50.642852783203125);
      g.closePath();
      em(g, d[Ko]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(c * 116.5, c * 85.64285278320312);
      g.bezierCurveTo(c * 160.5, c * 67.14285278320312, c * 160.5, c * 67.14285278320312, c * 204.5, c * 48.642852783203125);
      g.bezierCurveTo(c * 220.5, c * 42.642852783203125, c * 208.5, c * 68.64285278320312, c * 205.5, c * 85.64285278320312);
      g.bezierCurveTo(c * 202.5, c * 98.64285278320312, c * 199.5, c * 98.64285278320312, c * 188.5, c * 100.64285278320312);
      g.closePath();
      em(g, d[X]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(c * 166.5, c * 68.64285278320312);
      g.bezierCurveTo(c * 147.5, c * 72.64285278320312, c * 145.5, c * 73.64285278320312, c * 142.5, c * 62.642852783203125);
      g.bezierCurveTo(c * 121.5, c * 12.642852783203125, c * 122.5, c * 5.642852783203125, c * 117.5, c * 15.642852783203125);
      g.bezierCurveTo(c * 105.5, c * 40.642852783203125, c * 105.5, c * 40.642852783203125, c * 93.5, c * 65.64285278320312);
      g.bezierCurveTo(c * 89.5, c * 74.64285278320312, c * 84.5, c * 72.64285278320312, c * 73.5, c * 74.64285278320312);
      g.bezierCurveTo(c * 98, c * 87.64285278320312, c * 98, c * 87.64285278320312, c * 122.5, c * 100.64285278320312);
      g.closePath();
      em(g, d[Jf]);
      g.restore();
      g.save();
      nm(g, 0, c * 15, c * 90, c * 50, Tt * c);
      em(g, d[Ou]);
      nm(g, 0, hg * c, c * 90, c * 50, co * c);
      em(g, d[1]);
      g.globalCompositeOperation = "destination-out";
      rm(g, c * 25, c * 40, ic * c);
      g.fill();
      rm(g, c * 65, c * 40, c * rf);
      g.fill();
      g.restore();
    }
    return e;
  }
  function ep(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 272;
    e.height = b * 264;
    f.translate(0, b * 20);
    f.globalAlpha = c ? 0.5 : yd;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56.999969482421875, b * 84.517333984375);
    f.bezierCurveTo(b * 61.999969482421875, b * 58.517333984375, b * 79.99996948242188, b * 50.517333984375, b * 102.99996948242188, b * 50.517333984375);
    f.bezierCurveTo(b * 119.99996948242188, b * 26.517333984375, b * 137.99996948242188, b * 32.517333984375, b * 156.99996948242188, b * 44.517333984375);
    f.bezierCurveTo(b * 187.99996948242188, b * 42.517333984375, b * 195.99996948242188, b * 50.517333984375, b * 202.99996948242188, b * 77.517333984375);
    f.bezierCurveTo(b * 229.99996948242188, b * 80.517333984375, b * 231.99996948242188, b * 96.517333984375, b * 229.99996948242188, b * 118.517333984375);
    f.bezierCurveTo(b * 241.99996948242188, b * 147.517333984375, b * 236.99996948242188, b * 148.517333984375, b * 220.99996948242188, b * 165.517333984375);
    f.bezierCurveTo(b * 222.99996948242188, b * 192.517333984375, b * 209.99996948242188, b * 212.517333984375, b * 177.99996948242188, b * 213.517333984375);
    f.bezierCurveTo(b * 159.99996948242188, b * 234.517333984375, b * 141.99996948242188, b * 234.517333984375, b * 116.99996948242188, b * 222.517333984375);
    f.bezierCurveTo(b * 72.99996948242188, b * 226.517333984375, b * 66.99996948242188, b * 207.517333984375, b * 65.99996948242188, b * 190.517333984375);
    f.bezierCurveTo(b * 35.999969482421875, b * 180.517333984375, b * 30.999969482421875, b * 162.517333984375, b * 39.999969482421875, b * 135.517333984375);
    f.bezierCurveTo(b * 23.999969482421875, b * 110.517333984375, b * 43.999969482421875, b * 90.517333984375, b * 55.999969482421875, b * 85.517333984375);
    f.closePath();
    em(f, d[Vd]);
    f.translate(0, -rq * b);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56.999969482421875, b * 84.517333984375);
    f.bezierCurveTo(b * 61.999969482421875, b * 58.517333984375, b * 79.99996948242188, b * 50.517333984375, b * 102.99996948242188, b * 50.517333984375);
    f.bezierCurveTo(b * 119.99996948242188, b * 26.517333984375, b * 137.99996948242188, b * 32.517333984375, b * 156.99996948242188, b * 44.517333984375);
    f.bezierCurveTo(b * 187.99996948242188, b * 42.517333984375, b * 195.99996948242188, b * 50.517333984375, b * 202.99996948242188, b * 77.517333984375);
    f.bezierCurveTo(b * 229.99996948242188, b * 80.517333984375, b * 231.99996948242188, b * 96.517333984375, b * 229.99996948242188, b * 118.517333984375);
    f.bezierCurveTo(b * 241.99996948242188, b * 147.517333984375, b * 236.99996948242188, b * 148.517333984375, b * 220.99996948242188, b * 165.517333984375);
    f.bezierCurveTo(b * 222.99996948242188, b * 192.517333984375, b * 209.99996948242188, b * 212.517333984375, b * 177.99996948242188, b * 213.517333984375);
    f.bezierCurveTo(b * 159.99996948242188, b * 234.517333984375, b * 141.99996948242188, b * 234.517333984375, b * 116.99996948242188, b * 222.517333984375);
    f.bezierCurveTo(b * 72.99996948242188, b * 226.517333984375, b * 66.99996948242188, b * 207.517333984375, b * 65.99996948242188, b * 190.517333984375);
    f.bezierCurveTo(b * 35.999969482421875, b * 180.517333984375, b * 30.999969482421875, b * 162.517333984375, b * 39.999969482421875, b * 135.517333984375);
    f.bezierCurveTo(b * 23.999969482421875, b * 110.517333984375, b * 43.999969482421875, b * 90.517333984375, b * 55.999969482421875, b * 85.517333984375);
    f.closePath();
    em(f, d[hf], d[2], vg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 123.99996948242188, b * 116.18402099609375);
    f.bezierCurveTo(b * 115.99996948242188, b * 99.18402099609375, b * 109.99996948242188, b * 74.18402099609375, b * 109.99996948242188, b * 63.18402099609375);
    f.bezierCurveTo(b * 115.99996948242188, b * 69.18402099609375, b * 125.99996948242188, b * 87.18402099609375, b * 137.99996948242188, b * 112.18402099609375);
    f.bezierCurveTo(b * 142.99996948242188, b * 84.18402099609375, b * 143.99996948242188, b * 76.18402099609375, b * 153.99996948242188, b * 62.18402099609375);
    f.bezierCurveTo(b * 155.99996948242188, b * 79.18402099609375, b * 149.99996948242188, b * 110.18402099609375, b * 151.99996948242188, b * 117.18402099609375);
    f.bezierCurveTo(b * 162.99996948242188, b * 104.18402099609375, b * 180.99996948242188, b * 91.18402099609375, b * 191.99996948242188, b * 91.18402099609375);
    f.bezierCurveTo(b * 185.99996948242188, b * 102.18402099609375, b * 180.99996948242188, b * 106.18402099609375, b * 160.99996948242188, b * 124.18402099609375);
    f.bezierCurveTo(b * 190.99996948242188, b * 121.18402099609375, b * 199.99996948242188, b * 120.18402099609375, b * 207.99996948242188, b * 123.18402099609375);
    f.bezierCurveTo(b * 199.99996948242188, b * 129.18402099609375, b * 181.99996948242188, b * 132.18402099609375, b * 160.99996948242188, b * 135.18402099609375);
    f.bezierCurveTo(b * 179.99996948242188, b * 142.18402099609375, b * 193.99996948242188, b * 151.18402099609375, b * 196.99996948242188, b * 156.18402099609375);
    f.bezierCurveTo(b * 185.99996948242188, b * 156.18402099609375, b * 163.99996948242188, b * 149.18402099609375, b * 152.99996948242188, b * 147.18402099609375);
    f.bezierCurveTo(b * 157.99996948242188, b * 155.18402099609375, b * 165.99996948242188, b * 176.18402099609375, b * 169.99996948242188, b * 195.18402099609375);
    f.bezierCurveTo(b * 162.99996948242188, b * 190.18402099609375, b * 147.99996948242188, b * 167.18402099609375, b * 139.99996948242188, b * 153.18402099609375);
    f.bezierCurveTo(b * 137.99996948242188, b * 167.18402099609375, b * 126.99996948242188, b * 194.18402099609375, b * 119.99996948242188, b * 204.18402099609375);
    f.bezierCurveTo(b * 117.99996948242188, b * 186.18402099609375, b * 123.99996948242188, b * 165.18402099609375, b * 126.99996948242188, b * 149.18402099609375);
    f.bezierCurveTo(b * 110.99996948242188, b * 163.18402099609375, b * 103.99996948242188, b * 170.18402099609375, b * 82.99996948242188, b * 177.18402099609375);
    f.bezierCurveTo(b * 90.99996948242188, b * 162.18402099609375, b * 99.99996948242188, b * 153.18402099609375, b * 117.99996948242188, b * 140.18402099609375);
    f.bezierCurveTo(b * 97.99996948242188, b * 140.18402099609375, b * 83.99996948242188, b * 139.18402099609375, b * 65.99996948242188, b * 132.18402099609375);
    f.bezierCurveTo(b * 77.99996948242188, b * 127.18402099609375, b * 95.99996948242188, b * 127.18402099609375, b * 115.99996948242188, b * 127.18402099609375);
    f.bezierCurveTo(b * 91.99996948242188, b * 113.18402099609375, b * 84.99996948242188, b * 107.18402099609375, b * 76.99996948242188, b * 96.18402099609375);
    f.bezierCurveTo(b * 94.99996948242188, b * 99.18402099609375, b * 109.99996948242188, b * 109.18402099609375, b * 123.99996948242188, b * 116.18402099609375);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131.99996948242188, b * 119.18402099609375);
    f.bezierCurveTo(b * 141.99996948242188, b * 119.18402099609375, b * 145.99996948242188, b * 116.18402099609375, b * 147.99996948242188, b * 109.18402099609375);
    f.bezierCurveTo(b * 151.99996948242188, b * 107.18402099609375, b * 159.99996948242188, b * 107.18402099609375, b * 156.99996948242188, b * 123.18402099609375);
    f.bezierCurveTo(b * 155.99996948242188, b * 140.18402099609375, b * 142.99996948242188, b * 149.18402099609375, b * 132.99996948242188, b * 147.18402099609375);
    f.bezierCurveTo(b * 119.99996948242188, b * 144.18402099609375, b * 113.99996948242188, b * 122.18402099609375, b * 131.99996948242188, b * 119.18402099609375);
    f.closePath();
    em(f, d[_n], d[5], ei * b);
    return e;
  }
  function np() {
    new Date().getTime();
    Yp();
    (function () {
      ΔΔ[rt.nb] = Nm(1, [{
        f: ep,
        x: 0,
        y: bd,
        a: 1,
        r: 0,
        c: [lj[Cd], "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.ab] = ΔΔ[rt.nb];
      ΔΔ[rt.Ny] = [];
      ΔΔ[rt.Ny][Js] = Δᐃ.qS;
      ΔΔ[rt.Ny][hf] = Δᐃ.WS;
      ΔΔ[rt.Ny][2] = Δᐃ.NS;
      ΔΔ[rt.Hy] = ΔΔ[rt.Ny];
      ΔΔ[rt.rk] = [];
      ΔΔ[rt.rk][0] = Δᐃ.OF;
      ΔΔ[rt.rk][Lo] = Δᐃ.YF;
      ΔΔ[rt.rk][2] = Δᐃ.JF;
      ΔΔ[rt.hk] = ΔΔ[rt.rk];
      ΔΔ[rt.wk] = [];
      ΔΔ[rt.wk][ke] = Δᐃ.pR;
      ΔΔ[rt.wk][Lh] = Δᐃ.lR;
      ΔΔ[rt.wk][2] = Δᐃ.bR;
      ΔΔ[rt.Mk] = ΔΔ[rt.wk];
      ΔΔ[rt.BM] = [];
      ΔΔ[rt.BM][0] = Δᐃ.Tj;
      ΔΔ[rt.BM][1] = Δᐃ.jj;
      ΔΔ[rt.BM][Vn] = Δᐃ.Rj;
      ΔΔ[rt.DM] = ΔΔ[rt.BM];
      ΔΔ[rt.$y] = [];
      ΔΔ[rt.$y][0] = Δᐃ.HS;
      ΔΔ[rt.$y][1] = Δᐃ.US;
      ΔΔ[rt.$y][2] = Δᐃ.OS;
      ΔΔ[rt.gk] = ΔΔ[rt.$y];
      ΔΔ[rt.gA] = [];
      ΔΔ[rt.gA][ke] = Δᐃ.$F;
      ΔΔ[rt.gA][1] = Δᐃ.iP;
      ΔΔ[rt.gA][Gi] = Δᐃ.tP;
      ΔΔ[rt.cA] = ΔΔ[rt.gA];
      ΔΔ[rt.hA] = ΔΔ[rt.gA];
      ΔΔ[rt.gp] = [];
      ΔΔ[rt.gp][0] = Δᐃ.afi;
      ΔΔ[rt.gp][Jf] = Δᐃ.nfi;
      ΔΔ[rt.gp][2] = Δᐃ.sfi;
      ΔΔ[rt.cp] = ΔΔ[rt.gp];
      ΔΔ[rt.dp] = ΔΔ[rt.gp];
      ΔΔ[rt.mA] = [];
      ΔΔ[rt.mA][0] = Δᐃ.dP;
      ΔΔ[rt.mA][1] = Δᐃ.mP;
      ΔΔ[rt.mA][2] = Δᐃ.uP;
      ΔΔ[rt.uA] = ΔΔ[rt.mA];
      ΔΔ[rt.dA] = ΔΔ[rt.mA];
      ΔΔ[rt.Rg] = [];
      ΔΔ[rt.Rg][Ng] = Δᐃ.lP;
      ΔΔ[rt.Rg][ae] = Δᐃ.bP;
      ΔΔ[rt.Rg][Tg] = Δᐃ.vP;
      ΔΔ[rt.Gg] = ΔΔ[rt.Rg];
      ΔΔ[rt.Lg] = ΔΔ[rt.Rg];
      ΔΔ[rt.JB] = [];
      ΔΔ[rt.JB][0] = Δᐃ.Ddi;
      ΔΔ[rt.JB][1] = Δᐃ.Edi;
      ΔΔ[rt.JB][wc] = Δᐃ.Cdi;
      ΔΔ[rt.KB] = ΔΔ[rt.JB];
      ΔΔ[rt.UB] = [];
      ΔΔ[rt.UB][Gc] = Δᐃ.kdi;
      ΔΔ[rt.UB][fo] = Δᐃ.Adi;
      ΔΔ[rt.UB][ec] = Δᐃ.wdi;
      ΔΔ[rt.YB] = ΔΔ[rt.UB];
      ΔΔ[rt.OB] = ΔΔ[rt.UB];
      ΔΔ[rt.Cm] = [];
      ΔΔ[rt.Cm][ke] = Δᐃ.zdi;
      ΔΔ[rt.Cm][1] = Δᐃ.xdi;
      ΔΔ[rt.Cm][2] = Δᐃ.Qdi;
      ΔΔ[rt.xm] = ΔΔ[rt.Cm];
      ΔΔ[rt.zm] = ΔΔ[rt.Cm];
      ΔΔ[rt.TM] = [];
      ΔΔ[rt.TM][qh] = Δᐃ.Sdi;
      ΔΔ[rt.TM][Ps] = Δᐃ.Idi;
      ΔΔ[rt.TM][rd] = Δᐃ._di;
      ΔΔ[rt.jM] = ΔΔ[rt.TM];
      ΔΔ[rt.RM] = ΔΔ[rt.TM];
      ΔΔ[rt.Qm] = [];
      ΔΔ[rt.Qm][Ea] = Δᐃ.Rdi;
      ΔΔ[rt.Qm][1] = Δᐃ.Ldi;
      ΔΔ[rt.Qm][2] = Δᐃ.Gdi;
      ΔΔ[rt.Im] = ΔΔ[rt.Qm];
      ΔΔ[rt.Sm] = ΔΔ[rt.Qm];
      ΔΔ[rt.LM] = [];
      ΔΔ[rt.LM][0] = Δᐃ.qdi;
      ΔΔ[rt.LM][fn] = Δᐃ.Wdi;
      ΔΔ[rt.LM][2] = Δᐃ.Ndi;
      ΔΔ[rt.GM] = ΔΔ[rt.LM];
      ΔΔ[rt.qM] = ΔΔ[rt.LM];
      ΔΔ[rt._m] = [];
      ΔΔ[rt._m][Ka] = Δᐃ.Jdi;
      ΔΔ[rt._m][hf] = Δᐃ.Kdi;
      ΔΔ[rt._m][2] = Δᐃ.Xdi;
      ΔΔ[rt.Pm] = ΔΔ[rt._m];
      ΔΔ[rt.Fm] = ΔΔ[rt._m];
      ΔΔ[rt.WM] = [];
      ΔΔ[rt.WM][bd] = Δᐃ.Vdi;
      ΔΔ[rt.WM][ae] = Δᐃ.Zdi;
      ΔΔ[rt.WM][2] = Δᐃ.$di;
      ΔΔ[rt.NM] = ΔΔ[rt.WM];
      ΔΔ[rt.HM] = ΔΔ[rt.WM];
      ΔΔ[rt.Tm] = [];
      ΔΔ[rt.Tm][Nf] = Δᐃ.ami;
      ΔΔ[rt.Tm][Lo] = Δᐃ.smi;
      ΔΔ[rt.Tm][tm] = Δᐃ.rmi;
      ΔΔ[rt.Rm] = ΔΔ[rt.Tm];
      ΔΔ[rt.jm] = ΔΔ[rt.Tm];
      ΔΔ[rt.UM] = [];
      ΔΔ[rt.UM][0] = Δᐃ.omi;
      ΔΔ[rt.UM][1] = Δᐃ.hmi;
      ΔΔ[rt.UM][rd] = Δᐃ.gmi;
      ΔΔ[rt.OM] = ΔΔ[rt.UM];
      ΔΔ[rt.YM] = ΔΔ[rt.UM];
      ΔΔ[rt.Lm] = [];
      ΔΔ[rt.Lm][Vd] = Δᐃ.fmi;
      ΔΔ[rt.Lm][1] = Δᐃ.pmi;
      ΔΔ[rt.Lm][2] = Δᐃ.lmi;
      ΔΔ[rt.qm] = ΔΔ[rt.Lm];
      ΔΔ[rt.Gm] = ΔΔ[rt.Lm];
      ΔΔ[rt.JM] = [];
      ΔΔ[rt.JM][0] = Δᐃ.bmi;
      ΔΔ[rt.JM][1] = Δᐃ.vmi;
      ΔΔ[rt.JM][2] = Δᐃ.ymi;
      ΔΔ[rt.KM] = ΔΔ[rt.JM];
      ΔΔ[rt.XM] = ΔΔ[rt.JM];
      ΔΔ[rt.Wm] = [];
      ΔΔ[rt.Wm][0] = Δᐃ.Fmi;
      ΔΔ[rt.Wm][ja] = Δᐃ.Pmi;
      ΔΔ[rt.Wm][yo] = Δᐃ.Tmi;
      ΔΔ[rt.Hm] = ΔΔ[rt.Wm];
      ΔΔ[rt.Nm] = ΔΔ[rt.Wm];
      ΔΔ[rt.VM] = [];
      ΔΔ[rt.VM][0] = Δᐃ.jmi;
      ΔΔ[rt.VM][1] = Δᐃ.Rmi;
      ΔΔ[rt.VM][Tg] = Δᐃ.Lmi;
      ΔΔ[rt.ZM] = ΔΔ[rt.VM];
      ΔΔ[rt.$M] = ΔΔ[rt.VM];
      ΔΔ[rt.Um] = [];
      ΔΔ[rt.Um][0] = Δᐃ.Bmi;
      ΔΔ[rt.Um][lt] = Δᐃ.Dmi;
      ΔΔ[rt.Um][2] = Δᐃ.Emi;
      ΔΔ[rt.Ym] = ΔΔ[rt.Um];
      ΔΔ[rt.Om] = ΔΔ[rt.Um];
      ΔΔ[rt.iB] = [];
      ΔΔ[rt.iB][so] = Δᐃ.Cmi;
      ΔΔ[rt.iB][1] = Δᐃ.zmi;
      ΔΔ[rt.iB][2] = Δᐃ.xmi;
      ΔΔ[rt.tB] = ΔΔ[rt.iB];
      ΔΔ[rt.eB] = ΔΔ[rt.iB];
      ΔΔ[rt.vD] = [];
      ΔΔ[rt.vD][0] = Δᐃ.Hmi;
      ΔΔ[rt.vD][Ej] = Δᐃ.Umi;
      ΔΔ[rt.vD][2] = Δᐃ.Omi;
      ΔΔ[rt.yD] = ΔΔ[rt.vD];
      ΔΔ[rt.bD] = ΔΔ[rt.vD];
      ΔΔ[rt.AD] = [];
      ΔΔ[rt.AD][Js] = Δᐃ.Kmi;
      ΔΔ[rt.AD][1] = Δᐃ.Xmi;
      ΔΔ[rt.AD][yo] = Δᐃ.Vmi;
      ΔΔ[rt.wD] = ΔΔ[rt.AD];
      ΔΔ[rt.kD] = ΔΔ[rt.AD];
      ΔΔ[rt.BD] = [];
      ΔΔ[rt.BD][0] = Δᐃ.iui;
      ΔΔ[rt.BD][1] = Δᐃ.tui;
      ΔΔ[rt.BD][2] = Δᐃ.eui;
      ΔΔ[rt.DD] = ΔΔ[rt.BD];
      ΔΔ[rt.MD] = ΔΔ[rt.BD];
      ΔΔ[rt.CD] = [];
      ΔΔ[rt.CD][0] = Δᐃ.sui;
      ΔΔ[rt.CD][1] = Δᐃ.rui;
      ΔΔ[rt.CD][2] = Δᐃ.oui;
      ΔΔ[rt.zD] = ΔΔ[rt.CD];
      ΔΔ[rt.ED] = ΔΔ[rt.CD];
      ΔΔ[rt.QD] = [];
      ΔΔ[rt.QD][ke] = Δᐃ.cui;
      ΔΔ[rt.QD][X] = Δᐃ.dui;
      ΔΔ[rt.QD][2] = Δᐃ.mui;
      ΔΔ[rt.SD] = ΔΔ[rt.QD];
      ΔΔ[rt.xD] = ΔΔ[rt.QD];
      ΔΔ[rt._D] = [];
      ΔΔ[rt._D][bd] = Δᐃ.pui;
      ΔΔ[rt._D][1] = Δᐃ.lui;
      ΔΔ[rt._D][wc] = Δᐃ.bui;
      ΔΔ[rt.FD] = ΔΔ[rt._D];
      ΔΔ[rt.ID] = ΔΔ[rt._D];
      ΔΔ[rt.iD] = [];
      ΔΔ[rt.iD][0] = Δᐃ.Rui;
      ΔΔ[rt.iD][1] = Δᐃ.jui;
      ΔΔ[rt.iD][Tg] = Δᐃ.Lui;
      ΔΔ[rt.tD] = ΔΔ[rt.iD];
      ΔΔ[rt.$B] = ΔΔ[rt.iD];
      ΔΔ[rt.nD] = [];
      ΔΔ[rt.nD][Jj] = Δᐃ.qui;
      ΔΔ[rt.nD][Ej] = Δᐃ.Gui;
      ΔΔ[rt.nD][2] = Δᐃ.Wui;
      ΔΔ[rt.aD] = ΔΔ[rt.nD];
      ΔΔ[rt.eD] = ΔΔ[rt.nD];
      ΔΔ[rt.rD] = [];
      ΔΔ[rt.rD][0] = Δᐃ.Hui;
      ΔΔ[rt.rD][1] = Δᐃ.Nui;
      ΔΔ[rt.rD][2] = Δᐃ.Uui;
      ΔΔ[rt.oD] = ΔΔ[rt.rD];
      ΔΔ[rt.sD] = ΔΔ[rt.rD];
      ΔΔ[rt.gD] = [];
      ΔΔ[rt.gD][0] = Δᐃ.Yui;
      ΔΔ[rt.gD][lt] = Δᐃ.Oui;
      ΔΔ[rt.gD][mj] = Δᐃ.Jui;
      ΔΔ[rt.cD] = ΔΔ[rt.gD];
      ΔΔ[rt.hD] = ΔΔ[rt.gD];
      ΔΔ[rt.mD] = [];
      ΔΔ[rt.mD][0] = Δᐃ.Xui;
      ΔΔ[rt.mD][wg] = Δᐃ.Kui;
      ΔΔ[rt.mD][2] = Δᐃ.Vui;
      ΔΔ[rt.uD] = ΔΔ[rt.mD];
      ΔΔ[rt.dD] = ΔΔ[rt.mD];
      ΔΔ[rt.pD] = [];
      ΔΔ[rt.pD][0] = Δᐃ.$ui;
      ΔΔ[rt.pD][Ps] = Δᐃ.Zui;
      ΔΔ[rt.pD][rd] = Δᐃ.ifi;
      ΔΔ[rt.lD] = ΔΔ[rt.pD];
      ΔΔ[rt.fD] = ΔΔ[rt.pD];
      ΔΔ[rt.WB] = [];
      ΔΔ[rt.WB][Cm] = Δᐃ.pdi;
      ΔΔ[rt.WB][hf] = Δᐃ.ldi;
      ΔΔ[rt.WB][Yh] = Δᐃ.bdi;
      ΔΔ[rt.HB] = ΔΔ[rt.WB];
      ΔΔ[rt.NB] = ΔΔ[rt.WB];
      ΔΔ[rt.nB] = [];
      ΔΔ[rt.nB][0] = Δᐃ.eL;
      ΔΔ[rt.nB][Ko] = Δᐃ.nL;
      ΔΔ[rt.nB][2] = Δᐃ.aL;
      ΔΔ[rt.aB] = ΔΔ[rt.nB];
      ΔΔ[rt.Mfi] = ΔΔ[rt.nB];
      ΔΔ[rt.Sb] = Nm(Lo, [{
        f: lm,
        x: Nf,
        y: Nf,
        a: 1,
        r: 0,
        c: ["#352b10", lj[Yg], "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Ib] = ΔΔ[rt.Sb];
      ΔΔ[rt.qb] = Nm(1, [{
        f: Bp,
        x: 0,
        y: Sh,
        a: Jf,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", lj[sn], "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Wb] = ΔΔ[rt.qb];
      ΔΔ[rt.Ju] = Nm(1, [{
        f: Zm,
        x: -Ic,
        y: 0,
        a: hf,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Ym,
        x: -1,
        y: ke,
        a: 1,
        r: xn,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: $m,
        x: -yd,
        y: 0,
        a: Mc,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Yu] = ΔΔ[rt.Ju];
      ΔΔ[rt.Nu] = Nm(dm, [{
        f: Vm,
        x: nj,
        y: xn,
        a: Jf,
        r: Ea,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Nl] = Nm(1, [{
        f: Yf,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", lj[rc], "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Wl] = ΔΔ[rt.Nl];
      ΔΔ[rt.Pu] = Nm(Mc, [{
        f: Mu,
        x: 0,
        y: so,
        a: X,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Tu] = ΔΔ[rt.Pu];
      ΔΔ[rt.So] = Nm(1, [{
        f: Mu,
        x: 0,
        y: Ou,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.no] = ΔΔ[rt.So];
      ΔΔ[rt.Vl] = Nm(1, [{
        f: Mu,
        x: 0,
        y: 0,
        a: 1,
        r: du,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Zl] = ΔΔ[rt.Vl];
      ΔΔ[rt.Db] = Nm(Lh, [{
        f: Mu,
        x: 0,
        y: Cm,
        a: 1,
        r: Vd,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Eb] = ΔΔ[rt.Db];
      ΔΔ[rt.Tb] = Nm(1, [{
        f: Mu,
        x: Vd,
        y: 0,
        a: lt,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.jb] = ΔΔ[rt.Tb];
      ΔΔ[rt.jy] = Nm(1, [{
        f: Mu,
        x: 0,
        y: 0,
        a: 1,
        r: Oq,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Ry] = ΔΔ[rt.jy];
      ΔΔ[rt.Ly] = ΔΔ[rt.jy];
      ΔΔ[rt.ik] = Nm(1, [{
        f: Mu,
        x: Jj,
        y: 0,
        a: 1,
        r: so,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.tk] = ΔΔ[rt.ik];
      ΔΔ[rt.ek] = ΔΔ[rt.ik];
      ΔΔ[rt.lk] = Nm(ae, [{
        f: Mu,
        x: 0,
        y: 0,
        a: fo,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.bk] = ΔΔ[rt.lk];
      ΔΔ[rt.vk] = ΔΔ[rt.lk];
      ΔΔ[rt.Yy] = Nm(1, [{
        f: Mu,
        x: qh,
        y: so,
        a: 1,
        r: du,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Jy] = ΔΔ[rt.Yy];
      ΔΔ[rt.Ky] = ΔΔ[rt.Yy];
      ΔΔ[rt.xo] = Nm(Ic, [{
        f: Nt,
        x: -2,
        y: -tm,
        a: Lo,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Pt,
        x: -2,
        y: -lr,
        a: lt,
        r: -Math.PI / $q,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.wo] = ΔΔ[rt.xo];
      ΔΔ[rt.Jo] = Nm(fn, [{
        f: Hm,
        x: -wc,
        y: -yd,
        a: 1,
        r: -Math.PI / Ke,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Pt,
        x: -hu,
        y: -1,
        a: au,
        r: -Math.PI / Ke,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Yo] = ΔΔ[rt.Jo];
      ΔΔ[rt.Vb] = Nm(Ej, [{
        f: ou,
        x: z,
        y: bd,
        a: Ej,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.ev] = Nm(Jf, [{
        f: zu,
        x: 2,
        y: Sh,
        a: dm,
        r: Math.PI / lf,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.kb] = Nm(1, [{
        f: tu,
        x: En,
        y: 0,
        a: hf,
        r: Math.PI / lf,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt._r] = Nm(1, [{
        f: uu,
        x: hu,
        y: Oq,
        a: fo,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.mo] = Nm(1, [{
        f: bu,
        x: 2,
        y: Vd,
        a: 1,
        r: Math.PI / lh,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.uo] = Nm(1, [{
        f: yu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.vc] = Nm(1, [{
        f: su,
        x: yo,
        y: xn,
        a: 1,
        r: Math.PI / lf,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt._o] = Nm(fi, [{
        f: xu,
        x: -eu,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Io] = Nm(ja, [{
        f: xu,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Qr] = Nm(au, [{
        f: xu,
        x: -2,
        y: bg,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", lj[Kt]]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.lo] = Nm(hf, [{
        f: xu,
        x: -ih,
        y: Wg,
        a: Jf,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Ac] = Nm(Ic, [{
        f: xu,
        x: -lr,
        y: Co,
        a: Ps,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Zk] = [];
      ΔΔ[rt.Zk][Ou] = Δᐃ.IF;
      ΔΔ[rt.Zk][1] = Δᐃ._F;
      ΔΔ[rt.Zk][Cg] = Δᐃ.FF;
      ΔΔ[rt.iA] = ΔΔ[rt.Zk];
      ΔΔ[rt.$k] = ΔΔ[rt.Zk];
      ΔΔ[rt.Po] = Nm(yd, [{
        f: qu,
        x: -dh,
        y: -Me,
        a: fo,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.bo] = Nm(Ic, [{
        f: Eu,
        x: -Wg,
        y: -Au,
        a: fn,
        r: nj,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.vo] = Nm(Jf, [{
        f: Lu,
        x: -5,
        y: -5,
        a: 1,
        r: Cm,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.To] = Nm(1, [{
        f: Nt,
        x: sh,
        y: -Me,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Ab] = ΔΔ[rt.kb];
      ΔΔ[rt.Dr] = ΔΔ[rt._r];
      ΔΔ[rt.co] = ΔΔ[rt.mo];
      ΔΔ[rt.do] = ΔΔ[rt.uo];
      ΔΔ[rt.yc] = ΔΔ[rt.vc];
      ΔΔ[rt.Fo] = ΔΔ[rt._o];
      ΔΔ[rt.Cr] = ΔΔ[rt.Io];
      ΔΔ[rt.po] = ΔΔ[rt.Qr];
      ΔΔ[rt.zr] = ΔΔ[rt.lo];
      ΔΔ[rt.Mc] = ΔΔ[rt.Ac];
      ΔΔ[rt.Kr] = Nm(Ej, [{
        f: Fm,
        x: 0,
        y: 0,
        a: Mc,
        r: Ou
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Qo] = Nm(Lh, [{
        f: Tm,
        x: 0,
        y: 0,
        a: 1,
        r: Ka,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Fr] = ΔΔ[rt.Qo];
      ΔΔ[rt.Ko] = Nm(1, [{
        f: pf,
        x: -2,
        y: -2,
        a: 1,
        r: xn,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Pr] = ΔΔ[rt.Ko];
      ΔΔ[rt.Vo] = Nm(1, [{
        f: of,
        x: 0,
        y: 0,
        a: ae,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Zo] = ΔΔ[rt.Vo];
      ΔΔ[rt.ed] = Nm(1, [{
        f: pf,
        x: so,
        y: Oq,
        a: ae,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.nd] = ΔΔ[rt.ed];
      ΔΔ[rt.Xo] = Nm(lt, [{
        f: cf,
        x: ke,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.jr] = ΔΔ[rt.Xo];
      ΔΔ[rt.jo] = Nm(fi, [{
        f: sf,
        x: xn,
        y: 0,
        a: fn,
        r: nj,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Ro] = ΔΔ[rt.jo];
      ΔΔ[rt.Lo] = Nm(1, [{
        f: zf,
        x: 0,
        y: du,
        a: dm,
        r: Ka,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Go] = ΔΔ[rt.Lo];
      ΔΔ[rt.Sh] = Nm(Lh, [{
        f: yf,
        x: Ka,
        y: nj,
        a: ja,
        r: du,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Ih] = ΔΔ[rt.Sh];
      ΔΔ[rt._h] = Nm(1, [{
        f: yf,
        x: Jj,
        y: 0,
        a: 1,
        r: Oq,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Fh] = ΔΔ[rt._h];
      ΔΔ[rt.Qh] = Nm(au, [{
        f: bf,
        x: 0,
        y: Js,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.xh] = ΔΔ[rt.Qh];
      ΔΔ[rt.sd] = Nm(1, [{
        f: bf,
        x: du,
        y: Ka,
        a: Lh,
        r: Ng,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", lj[md]]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.rd] = ΔΔ[rt.sd];
      ΔΔ[rt.th] = Nm(ja, [{
        f: ff,
        x: Js,
        y: Ka,
        a: 1,
        r: Nf,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Gr] = ΔΔ[rt.th];
      ΔΔ[rt.qh] = Nm(1, [{
        f: uf,
        x: 0,
        y: 0,
        a: fn,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Gh] = ΔΔ[rt.qh];
      ΔΔ[rt.gd] = Nm(1, [{
        f: uf,
        x: 0,
        y: 0,
        a: Ej,
        r: xn,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.hd] = ΔΔ[rt.gd];
      ΔΔ[rt.Hh] = Nm(Lh, [{
        f: mf,
        x: Vd,
        y: 0,
        a: Ko,
        r: Jj,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Nh] = ΔΔ[rt.Hh];
      ΔΔ[rt.Yh] = Nm(1, [{
        f: Gf,
        x: 0,
        y: 0,
        a: wg,
        r: du,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Oh] = ΔΔ[rt.Yh];
      ΔΔ[rt.nh] = Nm(fo, [{
        f: Af,
        x: 0,
        y: lr,
        a: 1,
        r: ke,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.ah] = ΔΔ[rt.nh];
      ΔΔ[rt.ko] = Nm(1, [{
        f: qm,
        x: Oq,
        y: -E,
        a: 1,
        r: Js,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.No] = Nm(1, [{
        f: qm,
        x: Gc,
        y: -3,
        a: Lh,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Uo] = ΔΔ[rt.No];
      ΔΔ[rt.Do] = Nm(Ic, [{
        f: Jt,
        x: -Qe,
        y: -3,
        a: au,
        r: Cm,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Md] = Nm(1, [{
        f: Jt,
        x: -3,
        y: -Wc,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Dd] = ΔΔ[rt.Md];
      ΔΔ[rt.jh] = Nm(fi, [{
        f: Pf,
        x: -Lc,
        y: -Sr,
        a: Ej,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.IM] = Nm(Lh, [{
        f: Pf,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Za] = Nm(hf, [{
        f: df,
        x: Js,
        y: sh,
        a: Mc,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.$a] = Nm(1, [{
        f: df,
        x: Ea,
        y: 0,
        a: Ps,
        r: Nf,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.zu] = Nm(1, [{
        f: Pf,
        x: Cm,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.hg] = Nm(1, [{
        f: Pf,
        x: -mq,
        y: -jh,
        a: hf,
        r: Ou,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.ld] = Nm(1, [{
        f: Pf,
        x: -yr,
        y: -3,
        a: Ic,
        r: Cm,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Rh] = Nm(1, [{
        f: Lf,
        x: Ka,
        y: Ea,
        a: 1,
        r: ke,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Lh] = ΔΔ[rt.Rh];
      ΔΔ[rt.Xh] = Nm(yd, [{
        f: _f,
        x: 0,
        y: sh,
        a: Lo,
        r: Ea,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Kh] = ΔΔ[rt.Xh];
      ΔΔ[rt.ud] = Nm(ja, [{
        f: If,
        x: Ou,
        y: 0,
        a: lt,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.fd] = ΔΔ[rt.ud];
      ΔΔ[rt.bv] = Nm(1, [{
        f: Wt,
        x: 0,
        y: yh,
        a: 1,
        r: Ou,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.vv] = ΔΔ[rt.bv];
      ΔΔ[rt.yv] = Nm(1, [{
        f: Ut,
        x: 0,
        y: Y,
        a: lt,
        r: nj,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.kv] = ΔΔ[rt.yv];
      ΔΔ[rt.Mo] = Nm(1, [{
        f: Km,
        x: -tm,
        y: -yo,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Bo] = ΔΔ[rt.Mo];
      ΔΔ[rt.og] = [];
      ΔΔ[rt.og][Vd] = Δᐃ.I_;
      ΔΔ[rt.og][1] = Δᐃ.__;
      ΔΔ[rt.og][2] = Δᐃ.F_;
      ΔΔ[rt.Th] = ΔΔ[rt.og];
      ΔΔ[rt.ck] = [];
      ΔΔ[rt.ck][0] = Δᐃ.j_;
      ΔΔ[rt.ck][Ko] = Δᐃ.R_;
      ΔΔ[rt.ck][2] = Δᐃ.L_;
      ΔΔ[rt.mk] = ΔΔ[rt.ck];
      ΔΔ[rt.dk] = ΔΔ[rt.ck];
      ΔΔ[rt.uk] = [];
      ΔΔ[rt.uk][0] = Δᐃ.FR;
      ΔΔ[rt.uk][1] = Δᐃ.PR;
      ΔΔ[rt.uk][2] = Δᐃ.TR;
      ΔΔ[rt.pk] = ΔΔ[rt.uk];
      ΔΔ[rt.fk] = ΔΔ[rt.uk];
      ΔΔ[rt.zM] = [];
      ΔΔ[rt.zM][Oq] = Δᐃ.jR;
      ΔΔ[rt.zM][1] = Δᐃ.jR;
      ΔΔ[rt.zM][ec] = Δᐃ.jR;
      ΔΔ[rt.xM] = ΔΔ[rt.zM];
      ΔΔ[rt.qg] = [];
      ΔΔ[rt.qg][Ng] = Δᐃ.qR;
      ΔΔ[rt.qg][1] = Δᐃ.WR;
      ΔΔ[rt.qg][En] = Δᐃ.NR;
      ΔΔ[rt.Wg] = ΔΔ[rt.qg];
      ΔΔ[rt.Ng] = ΔΔ[rt.qg];
      ΔΔ[rt.QM] = [];
      ΔΔ[rt.QM][Ka] = Δᐃ.RR;
      ΔΔ[rt.QM][1] = Δᐃ.RR;
      ΔΔ[rt.QM][2] = Δᐃ.RR;
      ΔΔ[rt.SM] = ΔΔ[rt.QM];
      ΔΔ[rt.VB] = [];
      ΔΔ[rt.VB][sh] = Δᐃ.Mui;
      ΔΔ[rt.VB][Ej] = Δᐃ.wui;
      ΔΔ[rt.VB][Te] = Δᐃ.Bui;
      ΔΔ[rt.XB] = ΔΔ[rt.VB];
      ΔΔ[rt.ZB] = ΔΔ[rt.VB];
      ΔΔ[rt.Ek] = [];
      ΔΔ[rt.Ek][Oq] = Δᐃ.G_;
      ΔΔ[rt.Ek][yd] = Δᐃ.q_;
      ΔΔ[rt.Ek][2] = Δᐃ.W_;
      ΔΔ[rt.Dk] = ΔΔ[rt.Ek];
      ΔΔ[rt.Ck] = ΔΔ[rt.Ek];
      ΔΔ[rt.xk] = [];
      ΔΔ[rt.xk][0] = Δᐃ.N_;
      ΔΔ[rt.xk][1] = Δᐃ.H_;
      ΔΔ[rt.xk][2] = Δᐃ.U_;
      ΔΔ[rt.zk] = ΔΔ[rt.xk];
      ΔΔ[rt.Qk] = ΔΔ[rt.xk];
      ΔΔ[rt.Ik] = [];
      ΔΔ[rt.Ik][0] = Δᐃ.O_;
      ΔΔ[rt.Ik][1] = Δᐃ.Y_;
      ΔΔ[rt.Ik][Gi] = Δᐃ.J_;
      ΔΔ[rt.Sk] = ΔΔ[rt.Ik];
      ΔΔ[rt._k] = ΔΔ[rt.Ik];
      ΔΔ[rt.Pk] = [];
      ΔΔ[rt.Pk][0] = Δᐃ.K_;
      ΔΔ[rt.Pk][Ko] = Δᐃ.X_;
      ΔΔ[rt.Pk][2] = Δᐃ.V_;
      ΔΔ[rt.Fk] = ΔΔ[rt.Pk];
      ΔΔ[rt.Tk] = ΔΔ[rt.Pk];
      ΔΔ[rt.Rk] = [];
      ΔΔ[rt.Rk][du] = Δᐃ.Z_;
      ΔΔ[rt.Rk][Ej] = Δᐃ.iF;
      ΔΔ[rt.Rk][2] = Δᐃ.tF;
      ΔΔ[rt.jk] = ΔΔ[rt.Rk];
      ΔΔ[rt.Lk] = ΔΔ[rt.Rk];
      ΔΔ[rt.qk] = [];
      ΔΔ[rt.qk][0] = Δᐃ.mF;
      ΔΔ[rt.qk][Ko] = Δᐃ.uF;
      ΔΔ[rt.qk][Yh] = Δᐃ.fF;
      ΔΔ[rt.Gk] = ΔΔ[rt.qk];
      ΔΔ[rt.Wk] = ΔΔ[rt.qk];
      ΔΔ[rt.Hk] = [];
      ΔΔ[rt.Hk][so] = Δᐃ.pF;
      ΔΔ[rt.Hk][lt] = Δᐃ.lF;
      ΔΔ[rt.Hk][yo] = Δᐃ.bF;
      ΔΔ[rt.Nk] = ΔΔ[rt.Hk];
      ΔΔ[rt.Uk] = ΔΔ[rt.Hk];
      ΔΔ[rt.Yk] = [];
      ΔΔ[rt.Yk][ke] = Δᐃ.vF;
      ΔΔ[rt.Yk][Lh] = Δᐃ.yF;
      ΔΔ[rt.Yk][Tg] = Δᐃ.kF;
      ΔΔ[rt.Ok] = ΔΔ[rt.Yk];
      ΔΔ[rt.Jk] = ΔΔ[rt.Yk];
      ΔΔ[rt.Xk] = [];
      ΔΔ[rt.Xk][Ea] = Δᐃ.AF;
      ΔΔ[rt.Xk][1] = Δᐃ.wF;
      ΔΔ[rt.Xk][2] = Δᐃ.MF;
      ΔΔ[rt.Kk] = ΔΔ[rt.Xk];
      ΔΔ[rt.Vk] = ΔΔ[rt.Xk];
      ΔΔ[rt.lA] = [];
      ΔΔ[rt.lA][Sh] = Δᐃ.lA;
      ΔΔ[rt.lA][fo] = Δᐃ.lA;
      ΔΔ[rt.lA][2] = Δᐃ.lA;
      ΔΔ[rt.Bfi] = ΔΔ[rt.lA];
      ΔΔ[rt.bA] = ΔΔ[rt.lA];
      ΔΔ[rt.vA] = [];
      ΔΔ[rt.vA][Vd] = Δᐃ.vA;
      ΔΔ[rt.vA][au] = Δᐃ.vA;
      ΔΔ[rt.vA][2] = Δᐃ.vA;
      ΔΔ[rt.Dfi] = ΔΔ[rt.vA];
      ΔΔ[rt.yA] = ΔΔ[rt.vA];
      ΔΔ[rt.kA] = [];
      ΔΔ[rt.kA][0] = Δᐃ.kA;
      ΔΔ[rt.kA][1] = Δᐃ.kA;
      ΔΔ[rt.kA][2] = Δᐃ.kA;
      ΔΔ[rt.Efi] = ΔΔ[rt.kA];
      ΔΔ[rt.AA] = ΔΔ[rt.kA];
      ΔΔ[rt.EM] = [];
      ΔΔ[rt.EM][0] = Δᐃ.EM;
      ΔΔ[rt.EM][1] = Δᐃ.EM;
      ΔΔ[rt.EM][2] = Δᐃ.EM;
      ΔΔ[rt.CM] = ΔΔ[rt.EM];
      ΔΔ[rt.CA] = [];
      ΔΔ[rt.CA][nj] = Δᐃ.IP;
      ΔΔ[rt.CA][fi] = Δᐃ._P;
      ΔΔ[rt.CA][2] = Δᐃ.FP;
      ΔΔ[rt.xA] = ΔΔ[rt.CA];
      ΔΔ[rt.zA] = ΔΔ[rt.CA];
      ΔΔ[rt.qp] = [];
      ΔΔ[rt.qp][0] = Δᐃ.LP;
      ΔΔ[rt.qp][au] = Δᐃ.GP;
      ΔΔ[rt.qp][2] = Δᐃ.qP;
      ΔΔ[rt.Np] = ΔΔ[rt.qp];
      ΔΔ[rt.Wp] = ΔΔ[rt.qp];
      ΔΔ[rt.Hp] = [];
      ΔΔ[rt.Hp][0] = Δᐃ.OP;
      ΔΔ[rt.Hp][ja] = Δᐃ.YP;
      ΔΔ[rt.Hp][2] = Δᐃ.JP;
      ΔΔ[rt.Op] = ΔΔ[rt.Hp];
      ΔΔ[rt.Up] = ΔΔ[rt.Hp];
      ΔΔ[rt.QA] = [];
      ΔΔ[rt.QA][0] = Δᐃ.CP;
      ΔΔ[rt.QA][1] = Δᐃ.zP;
      ΔΔ[rt.QA][2] = Δᐃ.xP;
      ΔΔ[rt.IA] = ΔΔ[rt.QA];
      ΔΔ[rt.SA] = ΔΔ[rt.QA];
      ΔΔ[rt.sB] = [];
      ΔΔ[rt.sB][0] = Δᐃ.Sj;
      ΔΔ[rt.sB][wg] = Δᐃ.Ij;
      ΔΔ[rt.sB][2] = Δᐃ._j;
      ΔΔ[rt.oB] = ΔΔ[rt.sB];
      ΔΔ[rt.rB] = ΔΔ[rt.sB];
      ΔΔ[rt.Fw] = [];
      ΔΔ[rt.Fw][0] = Δᐃ.cj;
      ΔΔ[rt.Fw][Lo] = Δᐃ.dj;
      ΔΔ[rt.Fw][yo] = Δᐃ.mj;
      ΔΔ[rt.Tw] = ΔΔ[rt.Fw];
      ΔΔ[rt.Pw] = ΔΔ[rt.Fw];
      ΔΔ[rt.iM] = [];
      ΔΔ[rt.iM][Sh] = Δᐃ.ᐃᐃⵠΔᐃᐃᐃᐃⵠ;
      ΔΔ[rt.iM][X] = Δᐃ.ΔⵠⵠⲆᐃⲆΔᐃⵠ;
      ΔΔ[rt.iM][ih] = Δᐃ.ΔⵠⵠᐃⵠΔⲆΔⲆ;
      ΔΔ[rt.eM] = ΔΔ[rt.iM];
      ΔΔ[rt.tM] = ΔΔ[rt.iM];
      ΔΔ[rt.rM] = [];
      ΔΔ[rt.rM][0] = Δᐃ.xR;
      ΔΔ[rt.rM][1] = Δᐃ.QR;
      ΔΔ[rt.rM][Te] = Δᐃ.SR;
      ΔΔ[rt.oM] = ΔΔ[rt.rM];
      ΔΔ[rt.hM] = ΔΔ[rt.rM];
      ΔΔ[rt.gM] = [];
      ΔΔ[rt.gM][0] = Δᐃ.ER;
      ΔΔ[rt.gM][1] = Δᐃ.CR;
      ΔΔ[rt.gM][2] = Δᐃ.zR;
      ΔΔ[rt.cM] = ΔΔ[rt.gM];
      ΔΔ[rt.dM] = ΔΔ[rt.gM];
      ΔΔ[rt.qw] = [];
      ΔΔ[rt.qw][nj] = Δᐃ.aP;
      ΔΔ[rt.qw][hf] = Δᐃ.sP;
      ΔΔ[rt.qw][2] = Δᐃ.rP;
      ΔΔ[rt.Gw] = ΔΔ[rt.qw];
      ΔΔ[rt.Ww] = ΔΔ[rt.qw];
      ΔΔ[rt.sw] = [];
      ΔΔ[rt.sw][0] = Δᐃ.vT;
      ΔΔ[rt.sw][1] = Δᐃ.yT;
      ΔΔ[rt.sw][2] = Δᐃ.kT;
      ΔΔ[rt.ow] = ΔΔ[rt.sw];
      ΔΔ[rt.rw] = ΔΔ[rt.sw];
      ΔΔ[rt.LB] = [];
      ΔΔ[rt.LB][0] = Δᐃ.cdi;
      ΔΔ[rt.LB][1] = Δᐃ.ddi;
      ΔΔ[rt.LB][2] = Δᐃ.mdi;
      ΔΔ[rt.qB] = ΔΔ[rt.LB];
      ΔΔ[rt.GB] = ΔΔ[rt.LB];
      ΔΔ[rt.kw] = [];
      ΔΔ[rt.kw][so] = Δᐃ.LT;
      ΔΔ[rt.kw][1] = Δᐃ.GT;
      ΔΔ[rt.kw][z] = Δᐃ.qT;
      ΔΔ[rt.ww] = ΔΔ[rt.kw];
      ΔΔ[rt.Aw] = ΔΔ[rt.kw];
      ΔΔ[rt.fp] = Nm(Ko, [{
        f: wp,
        x: Sh,
        y: ke,
        a: 1,
        r: Oq,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Rp,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.pp] = ΔΔ[rt.fp];
      ΔΔ[rt.Mg] = Nm(hf, [{
        f: Mf,
        x: 0,
        y: Ea,
        a: Ko,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Bg] = ΔΔ[rt.Mg];
      ΔΔ[rt.Hv] = Nm(ae, [{
        f: Qf,
        x: 0,
        y: Cm,
        a: 1,
        r: Ou,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Ov] = ΔΔ[rt.Hv];
      ΔΔ[rt.Uv] = ΔΔ[rt.Hv];
      ΔΔ[rt.ks] = Nm(1, [{
        f: wf,
        x: Gc,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Nv] = ΔΔ[rt.ks];
      ΔΔ[rt.Rv] = Nm(1, [{
        f: qf,
        x: wh,
        y: Nf,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.jv] = ΔΔ[rt.Rv];
      ΔΔ[rt.Tv] = ΔΔ[rt.Rv];
      ΔΔ[rt.lg] = Nm(1, [{
        f: Tf,
        x: Cs,
        y: du,
        a: 1,
        r: Math.PI / bg,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.bg] = ΔΔ[rt.lg];
      ΔΔ[rt.cg] = Nm(1, [{
        f: Cf,
        x: Cs,
        y: 0,
        a: fi,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.dg] = ΔΔ[rt.cg];
      ΔΔ[rt.ug] = Nm(1, [{
        f: xf,
        x: 2,
        y: 0,
        a: wg,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", lj[vr], "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.fg] = ΔΔ[rt.ug];
      ΔΔ[rt.yg] = Nm(1, [{
        f: Df,
        x: wh,
        y: 0,
        a: hf,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.kg] = ΔΔ[rt.yg];
      ΔΔ[rt.Pc] = Nm(1, [{
        f: Wf,
        x: 2,
        y: du,
        a: Jf,
        r: Math.PI / aq,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Tc] = ΔΔ[rt.Pc];
      ΔΔ[rt.dv] = Nm(hf, [{
        f: Ff,
        x: hu,
        y: 0,
        a: ja,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.uv] = ΔΔ[rt.dv];
      ΔΔ[rt.mv] = ΔΔ[rt.dv];
      ΔΔ[rt.Gc] = Nm(1, [{
        f: Ef,
        x: z,
        y: 0,
        a: X,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.qc] = ΔΔ[rt.Gc];
      ΔΔ[rt.rp] = Nm(Mc, [{
        f: Ep,
        x: 0,
        y: qh,
        a: 1,
        r: Math.PI / Gj,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.hp] = ΔΔ[rt.rp];
      ΔΔ[rt.rm] = Nm(1, [{
        f: hl,
        x: 2,
        y: Vd,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.om] = ΔΔ[rt.rm];
      ΔΔ[rt.Nc] = Nm(1, [{
        f: Ef,
        x: 2,
        y: 0,
        a: Jf,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", lj[Ch]]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Hc] = ΔΔ[rt.Nc];
      ΔΔ[rt.Oc] = Nm(1, [{
        f: Ef,
        x: Vn,
        y: 0,
        a: Ko,
        r: Math.PI / et,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Yc] = ΔΔ[rt.Oc];
      ΔΔ[rt.Kc] = Nm(1, [{
        f: Ef,
        x: eu,
        y: 0,
        a: dm,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Xc] = ΔΔ[rt.Kc];
      ΔΔ[rt.Zc] = [];
      ΔΔ[rt.Zc][sh] = Δᐃ.jF;
      ΔΔ[rt.Zc][au] = Δᐃ.RF;
      ΔΔ[rt.Zc][2] = Δᐃ.LF;
      ΔΔ[rt.td] = ΔΔ[rt.Zc];
      ΔΔ[rt.$c] = ΔΔ[rt.Zc];
      ΔΔ[rt.dB] = [];
      ΔΔ[rt.dB][Vd] = Δᐃ.uL;
      ΔΔ[rt.dB][1] = Δᐃ.fL;
      ΔΔ[rt.dB][2] = Δᐃ.pL;
      ΔΔ[rt.uB] = ΔΔ[rt.dB];
      ΔΔ[rt.mB] = ΔΔ[rt.dB];
      ΔΔ[rt.pB] = [];
      ΔΔ[rt.pB][0] = Δᐃ.kL;
      ΔΔ[rt.pB][1] = Δᐃ.AL;
      ΔΔ[rt.pB][2] = Δᐃ.wL;
      ΔΔ[rt.bB] = ΔΔ[rt.pB];
      ΔΔ[rt.lB] = ΔΔ[rt.pB];
      ΔΔ[rt.yB] = [];
      ΔΔ[rt.yB][0] = Δᐃ.CL;
      ΔΔ[rt.yB][1] = Δᐃ.zL;
      ΔΔ[rt.yB][2] = Δᐃ.xL;
      ΔΔ[rt.AB] = ΔΔ[rt.yB];
      ΔΔ[rt.kB] = ΔΔ[rt.yB];
      ΔΔ[rt.MB] = [];
      ΔΔ[rt.MB][Sh] = Δᐃ.FL;
      ΔΔ[rt.MB][1] = Δᐃ.PL;
      ΔΔ[rt.MB][hu] = Δᐃ.TL;
      ΔΔ[rt.DB] = ΔΔ[rt.MB];
      ΔΔ[rt.BB] = ΔΔ[rt.MB];
      ΔΔ[rt.CB] = [];
      ΔΔ[rt.CB][0] = Δᐃ.qL;
      ΔΔ[rt.CB][1] = Δᐃ.WL;
      ΔΔ[rt.CB][2] = Δᐃ.NL;
      ΔΔ[rt.xB] = ΔΔ[rt.CB];
      ΔΔ[rt.zB] = ΔΔ[rt.CB];
      ΔΔ[rt.SB] = [];
      ΔΔ[rt.SB][bd] = Δᐃ.JL;
      ΔΔ[rt.SB][fo] = Δᐃ.KL;
      ΔΔ[rt.SB][rd] = Δᐃ.XL;
      ΔΔ[rt._B] = ΔΔ[rt.SB];
      ΔΔ[rt.IB] = ΔΔ[rt.SB];
      ΔΔ[rt.zd] = Nm(1, [{
        f: $p,
        x: -tm,
        y: -z,
        a: wg,
        r: so,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.xd] = ΔΔ[rt.zd];
      ΔΔ[rt.Wd] = Nm(1, [{
        f: ip,
        x: -Yh,
        y: -2,
        a: au,
        r: -Math.PI / Nu,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Nd] = ΔΔ[rt.Wd];
      ΔΔ[rt.Sd] = Nm(1, [{
        f: cl,
        x: -wc,
        y: -2,
        a: 1,
        r: Jj,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[rt._d] = Nm(1, [{
        f: cl,
        x: -wc,
        y: -Cg,
        a: Mc,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[rt.Ld] = Nm(1, [{
        f: ll,
        x: 0,
        y: 0,
        a: fo,
        r: xn,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: Op,
        x: 0,
        y: 0,
        a: X,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: bl,
        x: Ea,
        y: du,
        a: 1,
        r: so,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: fl,
        x: Js,
        y: du,
        a: Ic,
        r: Jj,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Gd] = ΔΔ[rt.Ld];
      ΔΔ[rt.gm] = Nm(hf, [{
        f: gl,
        x: 45,
        y: 70,
        a: lt,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.um] = ΔΔ[rt.gm];
      ΔΔ[rt.Vd] = Nm(1, [{
        f: al,
        x: 0,
        y: 0,
        a: 1,
        r: Vd,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Zd] = ΔΔ[rt.Vd];
      ΔΔ[rt.wl] = Nm(Lh, [{
        f: pp,
        x: 0,
        y: 0,
        a: ja,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Ml] = ΔΔ[rt.wl];
      ΔΔ[rt.cl] = Nm(wg, [{
        f: Hp,
        x: Gc,
        y: 0,
        a: 1,
        r: qh,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.dl] = ΔΔ[rt.cl];
      ΔΔ[rt.yl] = Nm(1, [{
        f: kp,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.kl] = ΔΔ[rt.yl];
      ΔΔ[rt.fl] = Nm(fn, [{
        f: kp,
        x: Cm,
        y: Qe,
        a: fo,
        r: Gc,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.pl] = ΔΔ[rt.fl];
      ΔΔ[rt.$p] = Nm(1, [{
        f: gp,
        x: 0,
        y: ue,
        a: 1,
        r: Sh,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.tl] = ΔΔ[rt.$p];
      ΔΔ[rt.nl] = Nm(yd, [{
        f: gp,
        x: sh,
        y: 10,
        a: lt,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.sl] = ΔΔ[rt.nl];
      ΔΔ[rt.ol] = Nm(ja, [{
        f: gp,
        x: 0,
        y: _,
        a: 1,
        r: nj,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.ul] = ΔΔ[rt.ol];
      ΔΔ[rt.Yv] = Nm(X, [{
        f: Bf,
        x: -1,
        y: 0,
        a: ae,
        r: Ng,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Kv] = ΔΔ[rt.Yv];
      ΔΔ[rt.Jv] = ΔΔ[rt.Yv];
      ΔΔ[rt.xp] = Nm(1, [{
        f: Hf,
        x: Js,
        y: xn,
        a: Ps,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Sp] = ΔΔ[rt.xp];
      ΔΔ[rt.Am] = Nm(fi, [{
        f: vp,
        x: Cm,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.wm] = ΔΔ[rt.Am];
      ΔΔ[rt.Jp] = Nm(Lo, [{
        f: Ip,
        x: 0,
        y: Ng,
        a: ae,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Mr] = Nm(1, [{
        f: sp,
        x: sh,
        y: du,
        a: 1,
        r: Ea,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Xp] = Nm(ae, [{
        f: Ip,
        x: nj,
        y: 0,
        a: Jf,
        r: qh,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Br] = Nm(hf, [{
        f: sp,
        x: 0,
        y: 0,
        a: 1,
        r: Ka,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Xa] = Nm(hf, [{
        f: Np,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Va] = Nm(1, [{
        f: Np,
        x: bd,
        y: Cm,
        a: Mc,
        r: Js,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Ka] = Nm(Jf, [{
        f: Np,
        x: Ng,
        y: ke,
        a: 1,
        r: Ea,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.ku] = Nm(1, [{
        f: ul,
        x: Oq,
        y: 0,
        a: 1,
        r: Math.PI / yh,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.wu] = ΔΔ[rt.ku];
      ΔΔ[rt.Xf] = Nm(Mc, [{
        f: ul,
        x: 0,
        y: Oq,
        a: Lo,
        r: Math.PI / Co,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Vf] = ΔΔ[rt.Xf];
      ΔΔ[rt.$f] = Nm(1, [{
        f: ul,
        x: ke,
        y: Gc,
        a: hf,
        r: Math.PI / Jd,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.tp] = ΔΔ[rt.$f];
      ΔΔ[rt.ep] = Nm(Lh, [{
        f: ul,
        x: 0,
        y: Vd,
        a: Ps,
        r: Math.PI / Au,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.np] = ΔΔ[rt.ep];
      ΔΔ[rt.Pg] = Nm(Lo, [{
        f: Kf,
        x: 0,
        y: so,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Tg] = ΔΔ[rt.Pg];
      ΔΔ[rt.lb] = Nm(1, [{
        f: sl,
        x: 0,
        y: Vd,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.bb] = ΔΔ[rt.lb];
      ΔΔ[rt.Hg] = Nm(1, [{
        f: Lp,
        x: 0,
        y: -2,
        a: fo,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Ug] = ΔΔ[rt.Hg];
      ΔΔ[rt.Yg] = Nm(1, [{
        f: bp,
        x: 0,
        y: Jj,
        a: Ej,
        r: qh,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Jg] = ΔΔ[rt.Yg];
      ΔΔ[rt.Xg] = Nm(1, [{
        f: Kp,
        x: Ea,
        y: Ou,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Vg] = ΔΔ[rt.Xg];
      ΔΔ[rt.$g] = Nm(1, [{
        f: vl,
        x: Nf,
        y: 0,
        a: 1,
        r: Ou,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.tc] = ΔΔ[rt.$g];
      ΔΔ[rt.nc] = Nm(1, [{
        f: Sp,
        x: 0,
        y: Ou,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.ac] = ΔΔ[rt.nc];
      ΔΔ[rt._g] = Nm(1, [{
        f: Jp,
        x: -5,
        y: -Qm,
        a: 1,
        r: so,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.uu] = Nm(1, [{
        f: cp,
        x: 0,
        y: 0,
        a: lt,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.la] = Nm(wg, [{
        f: xp,
        x: 0,
        y: Cm,
        a: wg,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.fa] = Nm(1, [{
        f: cp,
        x: Ea,
        y: 0,
        a: fi,
        r: ke,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.ts] = Nm(1, [{
        f: Zp,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.es] = Nm(1, [{
        f: nl,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Cl] = ΔΔ[rt.ts];
      ΔΔ[rt.zl] = ΔΔ[rt.es];
      ΔΔ[rt.Il] = Nm(1, [{
        f: Xf,
        x: nj,
        y: 0,
        a: Ps,
        r: Ka,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Fl] = ΔΔ[rt.Il];
      ΔΔ[rt.bu] = Nm(1, [{
        f: rl,
        x: Ng,
        y: 0,
        a: 1,
        r: Math.PI / Nu,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.lu] = Nm(fo, [{
        f: dl,
        x: 0,
        y: Ea,
        a: 1,
        r: Math.PI / Au,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.mp] = ΔΔ[rt.bu];
      ΔΔ[rt.pu] = ΔΔ[rt.lu];
      ΔΔ[rt.Ru] = Nm(Mc, [{
        f: Bu,
        x: so,
        y: 0,
        a: Lo,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Lu] = ΔΔ[rt.Ru];
      ΔΔ[rt.Ms] = Nm(1, [{
        f: Hu,
        x: 0,
        y: Ea,
        a: 1,
        r: bd,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.nv] = Nm(Ps, [{
        f: ju,
        x: Ka,
        y: Oq,
        a: fi,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.ba] = Nm(1, [{
        f: Tp,
        x: 0,
        y: -2,
        a: wg,
        r: Vd,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.qf] = ΔΔ[rt.ba];
      ΔΔ[rt.uf] = Nm(1, [{
        f: nf,
        x: -fa,
        y: -5,
        a: ja,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.pf] = Nm(ja, [{
        f: af,
        x: Ng,
        y: Ea,
        a: ae,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.bf] = ΔΔ[rt.pf];
      ΔΔ[rt.$u] = Nm(X, [{
        f: tf,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.if] = ΔΔ[rt.$u];
      ΔΔ[rt.Df] = Nm(1, [{
        f: Om,
        x: nj,
        y: Ea,
        a: au,
        r: Nf,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Xu] = Nm(1, [{
        f: Su,
        x: 0,
        y: xn,
        a: 1,
        r: Jj,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[rt.Vu] = ΔΔ[rt.Xu];
      ΔΔ[rt.Tf] = Nm(1, [{
        f: mp,
        x: 0,
        y: 0,
        a: 1,
        r: Cm,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Pf] = ΔΔ[rt.Tf];
      ΔΔ[rt.ov] = Nm(1, [{
        f: Am,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.hv] = ΔΔ[rt.ov];
      ΔΔ[rt.gu] = Nm(1, [{
        f: qp,
        x: ke,
        y: 0,
        a: yd,
        r: Js,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.hu] = ΔΔ[rt.gu];
      ΔΔ[rt._b] = Nm(1, [{
        f: km,
        x: 0,
        y: Jj,
        a: 1,
        r: Ka,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Fb] = ΔΔ[rt._b];
      ΔΔ[rt.ef] = Nm(fi, [{
        f: Wp,
        x: -ja,
        y: nj,
        a: dm,
        r: -Math.PI / Nu,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ΔΔ[rt.af] = ΔΔ[rt.ef];
      ΔΔ[rt.Qu] = Nm(1, [{
        f: Wp,
        x: -1,
        y: du,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.Su] = ΔΔ[rt.Qu];
      ΔΔ[rt._u] = Nm(fi, [{
        f: yp,
        x: Sh,
        y: 0,
        a: 1,
        r: Ka,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[rt.ys] = Nm(1, [{
        f: mu,
        x: 0,
        y: Nf,
        a: wg,
        r: qh,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Pv] = ΔΔ[rt.ys];
      ΔΔ[rt.cf] = Nm(1, [{
        f: Qu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.df] = ΔΔ[rt.cf];
      ΔΔ[rt.ya] = Nm(yd, [{
        f: Xm,
        x: -2,
        y: -rg,
        a: Lo,
        r: Sh,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[rt.Cp] = ΔΔ[rt.ya];
      ΔΔ[rt.Bm] = [];
      ΔΔ[rt.Bm][bd] = Δᐃ.OQ;
      ΔΔ[rt.Bm][1] = Δᐃ.YQ;
      ΔΔ[rt.Bm][eu] = Δᐃ.JQ;
      ΔΔ[rt.Dm] = ΔΔ[rt.Bm];
      ΔΔ[rt.Em] = ΔΔ[rt.Bm];
      ΔΔ[rt.fv] = [];
      ΔΔ[rt.fv][qh] = Δᐃ.VQ;
      ΔΔ[rt.fv][1] = Δᐃ.ZQ;
      ΔΔ[rt.fv][Cs] = Δᐃ.$Q;
      ΔΔ[rt.lv] = ΔΔ[rt.fv];
      ΔΔ[rt.pv] = ΔΔ[rt.fv];
      ΔΔ[rt.Ay] = ΔΔ[rt.ky];
      ΔΔ[rt.wy] = ΔΔ[rt.ky];
      ΔΔ[rt.ky] = [];
      ΔΔ[rt.ky][Nf] = Δᐃ.aQ;
      ΔΔ[rt.ky][1] = Δᐃ.sQ;
      ΔΔ[rt.ky][En] = Δᐃ.rQ;
      ΔΔ[rt.Ay] = ΔΔ[rt.ky];
      ΔΔ[rt.wy] = ΔΔ[rt.ky];
      ΔΔ[rt.Sy] = [];
      ΔΔ[rt.Sy][0] = Δᐃ.xQ;
      ΔΔ[rt.Sy][fi] = Δᐃ.QQ;
      ΔΔ[rt.Sy][2] = Δᐃ.SQ;
      ΔΔ[rt.Iy] = ΔΔ[rt.Sy];
      ΔΔ[rt._y] = ΔΔ[rt.Sy];
      ΔΔ[rt.sy] = [];
      ΔΔ[rt.sy][Cm] = Δᐃ.Ox;
      ΔΔ[rt.sy][1] = Δᐃ.Yx;
      ΔΔ[rt.sy][2] = Δᐃ.Jx;
      ΔΔ[rt.oy] = ΔΔ[rt.sy];
      ΔΔ[rt.hy] = ΔΔ[rt.sy];
      ΔΔ[rt.my] = [];
      ΔΔ[rt.my][0] = Δᐃ.$x;
      ΔΔ[rt.my][1] = Δᐃ.iQ;
      ΔΔ[rt.my][ih] = Δᐃ.tQ;
      ΔΔ[rt.uy] = ΔΔ[rt.my];
      ΔΔ[rt.py] = ΔΔ[rt.my];
      ΔΔ[rt.by] = [];
      ΔΔ[rt.by][0] = Δᐃ.qQ;
      ΔΔ[rt.by][Ej] = Δᐃ.WQ;
      ΔΔ[rt.by][2] = Δᐃ.NQ;
      ΔΔ[rt.vy] = ΔΔ[rt.by];
      ΔΔ[rt.yy] = ΔΔ[rt.by];
      ΔΔ[rt.Fy] = [];
      ΔΔ[rt.Fy][Vd] = Δᐃ.FQ;
      ΔΔ[rt.Fy][1] = Δᐃ.PQ;
      ΔΔ[rt.Fy][wh] = Δᐃ.TQ;
      ΔΔ[rt.Py] = ΔΔ[rt.Fy];
      ΔΔ[rt.Ty] = ΔΔ[rt.Fy];
      ΔΔ[rt.Ip] = [];
      ΔΔ[rt.Ip][Vd] = Δᐃ.eS;
      ΔΔ[rt.Ip][Ej] = Δᐃ.nS;
      ΔΔ[rt.Ip][2] = Δᐃ.aS;
      ΔΔ[rt.Fp] = ΔΔ[rt.Ip];
      ΔΔ[rt._p] = ΔΔ[rt.Ip];
      ΔΔ[rt.FM] = [];
      ΔΔ[rt.FM][0] = Δᐃ.VP;
      ΔΔ[rt.FM][X] = Δᐃ.ZP;
      ΔΔ[rt.FM][2] = Δᐃ.$P;
      ΔΔ[rt.Cfi] = ΔΔ[rt.FM];
      ΔΔ[rt.PM] = ΔΔ[rt.FM];
      ΔΔ[rt.Pp] = [];
      ΔΔ[rt.Pp][Js] = Δᐃ.oS;
      ΔΔ[rt.Pp][Mc] = Δᐃ.hS;
      ΔΔ[rt.Pp][Cs] = Δᐃ.gS;
      ΔΔ[rt.jp] = ΔΔ[rt.Pp];
      ΔΔ[rt.Tp] = ΔΔ[rt.Pp];
      ΔΔ[rt.Rp] = [];
      ΔΔ[rt.Rp][Ou] = Δᐃ.mS;
      ΔΔ[rt.Rp][1] = Δᐃ.uS;
      ΔΔ[rt.Rp][Yh] = Δᐃ.fS;
      ΔΔ[rt.Gp] = ΔΔ[rt.Rp];
      ΔΔ[rt.Lp] = ΔΔ[rt.Rp];
      ΔΔ[rt.Ey] = [];
      ΔΔ[rt.Ey][0] = Δᐃ.oQ;
      ΔΔ[rt.Ey][fn] = Δᐃ.hQ;
      ΔΔ[rt.Ey][wc] = Δᐃ.gQ;
      ΔΔ[rt.Cy] = ΔΔ[rt.Ey];
      ΔΔ[rt.By] = [];
      ΔΔ[rt.By][Ea] = Δᐃ.cQ;
      ΔΔ[rt.By][1] = Δᐃ.dQ;
      ΔΔ[rt.By][En] = Δᐃ.mQ;
      ΔΔ[rt.Dy] = ΔΔ[rt.By];
      ΔΔ[rt.Au] = ΔΔ[rt.ku];
      ΔΔ[rt.Zf] = ΔΔ[rt.Xf];
      ΔΔ[rt.ip] = ΔΔ[rt.$f];
      ΔΔ[rt.ap] = ΔΔ[rt.ep];
      ΔΔ[rt.ph] = ΔΔ[rt.So];
      ΔΔ[rt.ju] = ΔΔ[rt.Pu];
      ΔΔ[rt.Ku] = ΔΔ[rt.Ju];
      ΔΔ[rt.Hu] = ΔΔ[rt.Nu];
      ΔΔ[rt.Ur] = ΔΔ[rt.xo];
      ΔΔ[rt.Jm] = ΔΔ[rt.Mr];
      ΔΔ[rt.Kp] = ΔΔ[rt.Jp];
      ΔΔ[rt.Km] = ΔΔ[rt.Br];
      ΔΔ[rt.Vp] = ΔΔ[rt.Xp];
      ΔΔ[rt.Jr] = ΔΔ[rt.Jo];
      ΔΔ[rt.iv] = ΔΔ[rt.ev];
      ΔΔ[rt.$b] = ΔΔ[rt.Vb];
      ΔΔ[rt.wb] = ΔΔ[rt.kb];
      ΔΔ[rt.rh] = ΔΔ[rt._r];
      ΔΔ[rt.iu] = ΔΔ[rt.Zm];
      ΔΔ[rt.mh] = ΔΔ[rt.mo];
      ΔΔ[rt.uh] = ΔΔ[rt.uo];
      ΔΔ[rt.kc] = ΔΔ[rt.vc];
      ΔΔ[rt.Or] = ΔΔ[rt._o];
      ΔΔ[rt.oh] = ΔΔ[rt.Io];
      ΔΔ[rt.Hr] = ΔΔ[rt.Qr];
      ΔΔ[rt.dh] = ΔΔ[rt.lo];
      ΔΔ[rt.wc] = ΔΔ[rt.Ac];
      ΔΔ[rt.hh] = ΔΔ[rt.Po];
      ΔΔ[rt.Wr] = ΔΔ[rt.bo];
      ΔΔ[rt.Nr] = ΔΔ[rt.vo];
      ΔΔ[rt.gh] = ΔΔ[rt.To];
      ΔΔ[rt.qr] = ΔΔ[rt.Kr];
      ΔΔ[rt.Ch] = ΔΔ[rt.Qo];
      ΔΔ[rt.Mh] = ΔΔ[rt.Ko];
      ΔΔ[rt.Dh] = ΔΔ[rt.Vo];
      ΔΔ[rt.Bh] = ΔΔ[rt.Xo];
      ΔΔ[rt.ad] = ΔΔ[rt.ed];
      ΔΔ[rt.bh] = ΔΔ[rt.jo];
      ΔΔ[rt.yh] = ΔΔ[rt.Lo];
      ΔΔ[rt.Yr] = ΔΔ[rt.ko];
      ΔΔ[rt.kh] = ΔΔ[rt.No];
      ΔΔ[rt.wh] = ΔΔ[rt.Do];
      ΔΔ[rt.Bd] = ΔΔ[rt.Md];
      ΔΔ[rt.Ah] = ΔΔ[rt.Mo];
      ΔΔ[rt.Qd] = ΔΔ[rt.zd];
      ΔΔ[rt.Hd] = ΔΔ[rt.Wd];
      ΔΔ[rt.qd] = ΔΔ[rt.Ld];
      ΔΔ[rt.Id] = ΔΔ[rt.Sd];
      ΔΔ[rt.Fd] = ΔΔ[rt._d];
      ΔΔ[rt.Mm] = ΔΔ[rt.Am];
      ΔΔ[rt.dm] = ΔΔ[rt.gm];
      ΔΔ[rt.Eh] = ΔΔ[rt.th];
      ΔΔ[rt.zh] = ΔΔ[rt.nh];
      ΔΔ[rt.sh] = Ks(function (b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 118;
        e.height = b * 129;
        f.save();
        f.translate(b * 90, b * 90);
        nm(f, b * -86.5, b * -86, b * 110, b * 110, b * 15);
        f.restore();
        em(f, d[Ka], d[1], cn);
        f.save();
        nm(f, b * 30, b * 115, b * 60, b * yh, b * 15);
        f.restore();
        em(f, d[2], d[3], Dd);
        f.save();
        nm(f, b * 50, b * 117, b * 20, Tt * b, b * 15);
        f.restore();
        em(f, d[wh]);
        return e;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ΔΔ[rt.Ph] = Nm(0.5, [{
        f: jf,
        x: 0,
        y: ih,
        a: 1,
        r: Gc,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ΔΔ[rt.Vh] = ΔΔ[rt.Qh];
      ΔΔ[rt.Zh] = ΔΔ[rt.Sh];
      ΔΔ[rt.$h] = ΔΔ[rt._h];
      ΔΔ[rt.od] = ΔΔ[rt.sd];
      ΔΔ[rt.ig] = ΔΔ[rt.og];
      ΔΔ[rt.bl] = ΔΔ[rt.Za];
      ΔΔ[rt.vl] = ΔΔ[rt.$a];
      ΔΔ[rt.tg] = ΔΔ[rt.jh];
      ΔΔ[rt.xu] = ΔΔ[rt.zu];
      ΔΔ[rt.gg] = ΔΔ[rt.hg];
      ΔΔ[rt._M] = ΔΔ[rt.IM];
      ΔΔ[rt.bd] = ΔΔ[rt.ld];
      ΔΔ[rt.eg] = ΔΔ[rt.Rh];
      ΔΔ[rt.pd] = ΔΔ[rt.ud];
      ΔΔ[rt.ng] = ΔΔ[rt.qh];
      ΔΔ[rt.ag] = ΔΔ[rt.Hh];
      ΔΔ[rt.sg] = ΔΔ[rt.Yh];
      ΔΔ[rt.md] = ΔΔ[rt.gd];
      ΔΔ[rt.rg] = ΔΔ[rt.Xh];
      ΔΔ[rt.vg] = ΔΔ[rt.lg];
      ΔΔ[rt.mg] = ΔΔ[rt.cg];
      ΔΔ[rt.pg] = ΔΔ[rt.ug];
      ΔΔ[rt.Ag] = ΔΔ[rt.yg];
      ΔΔ[rt.jc] = ΔΔ[rt.Pc];
      ΔΔ[rt.mv] = ΔΔ[rt.dv];
      ΔΔ[rt.hm] = ΔΔ[rt.rm];
      ΔΔ[rt.op] = ΔΔ[rt.rp];
      ΔΔ[rt.Wc] = ΔΔ[rt.Gc];
      ΔΔ[rt.Uc] = ΔΔ[rt.Nc];
      ΔΔ[rt.Jc] = ΔΔ[rt.Oc];
      ΔΔ[rt.Vc] = ΔΔ[rt.Kc];
      ΔΔ[rt.Dg] = ΔΔ[rt.Mg];
      ΔΔ[rt.lp] = ΔΔ[rt.fp];
      ΔΔ[rt.jg] = ΔΔ[rt.Pg];
      ΔΔ[rt.Og] = ΔΔ[rt.Hg];
      ΔΔ[rt.Kg] = ΔΔ[rt.Yg];
      ΔΔ[rt.Zg] = ΔΔ[rt.Xg];
      ΔΔ[rt.$d] = ΔΔ[rt.Vd];
      ΔΔ[rt.Qp] = ΔΔ[rt.xp];
      ΔΔ[rt.ec] = ΔΔ[rt.$g];
      ΔΔ[rt.sc] = ΔΔ[rt.nc];
      ΔΔ[rt.hc] = ΔΔ[rt._g];
      ΔΔ[rt.cu] = ΔΔ[rt.gu];
      ΔΔ[rt.Pb] = ΔΔ[rt._b];
      ΔΔ[rt.Ff] = ΔΔ[rt.Tf];
      ΔΔ[rt.fu] = ΔΔ[rt.uu];
      ΔΔ[rt.Gf] = ΔΔ[rt.ba];
      ΔΔ[rt.jf] = ΔΔ[rt.la];
      ΔΔ[rt._f] = ΔΔ[rt.fa];
      ΔΔ[rt.yu] = ΔΔ[rt.bu];
      ΔΔ[rt.vu] = ΔΔ[rt.lu];
      ΔΔ[rt.Iu] = ΔΔ[rt.Qu];
      ΔΔ[rt.Fu] = ΔΔ[rt._u];
      ΔΔ[rt.Gu] = ΔΔ[rt.Ru];
      ΔΔ[rt.sv] = ΔΔ[rt.Ms];
      ΔΔ[rt.av] = ΔΔ[rt.nv];
      ΔΔ[rt.Zu] = ΔΔ[rt.Xu];
      ΔΔ[rt.tf] = ΔΔ[rt.$u];
      ΔΔ[rt.nf] = ΔΔ[rt.ef];
      ΔΔ[rt.mf] = ΔΔ[rt.cf];
      ΔΔ[rt.Pv] = ΔΔ[rt.ys];
      ΔΔ[rt.ff] = ΔΔ[rt.uf];
      ΔΔ[rt.lf] = ΔΔ[rt.pf];
      ΔΔ[rt.Ef] = ΔΔ[rt.Df];
      ΔΔ[rt.zp] = ΔΔ[rt.ya];
      ΔΔ[rt.il] = ΔΔ[rt.$p];
      ΔΔ[rt.el] = ΔΔ[rt.Xa];
      ΔΔ[rt.al] = ΔΔ[rt.nl];
      ΔΔ[rt.rl] = ΔΔ[rt.Va];
      ΔΔ[rt.hl] = ΔΔ[rt.ol];
      ΔΔ[rt.gl] = ΔΔ[rt.Ka];
      ΔΔ[rt.ml] = ΔΔ[rt.cl];
      ΔΔ[rt.ll] = ΔΔ[rt.fl];
      ΔΔ[rt.Al] = ΔΔ[rt.yl];
      ΔΔ[rt.Bl] = ΔΔ[rt.wl];
      ΔΔ[rt.Ql] = ΔΔ[rt.es];
      ΔΔ[rt.xl] = ΔΔ[rt.ts];
      ΔΔ[rt._l] = ΔΔ[rt.Il];
      ΔΔ[rt.Hl] = ΔΔ[rt.Nl];
      ΔΔ[rt.$l] = ΔΔ[rt.Vl];
      ΔΔ[rt.Cb] = ΔΔ[rt.Db];
      ΔΔ[rt.Rb] = ΔΔ[rt.Tb];
      ΔΔ[rt.yb] = ΔΔ[rt.lb];
    })();
    ΔΔ[rt.Xd] = [];
    ΔΔ[rt.Xd][rt.bt] = [];
    ΔΔ[rt.Xd][rt.vt] = [];
    for (var a = 0; a < rt._t; a++) {
      ΔΔ[rt.Xd][rt.bt].push(Ks(Ru(1, 4 + a, "#59B8CE")));
      ΔΔ[rt.Xd][rt.vt].push(Ks(Ru(1, Gs + a, "#90DDD9")));
    }
    ΔΔ[rt._c] = [];
    ΔΔ[rt._c][rt.bt] = [];
    ΔΔ[rt._c][rt.vt] = [];
    for (a = 0; a < rt.wt; a++) {
      ΔΔ[rt._c][rt.bt].push(Ks(Ru(1, 4 + a, "#fff")));
      ΔΔ[rt._c][rt.vt].push(Ks(Ru(1, 4 + a, "#fff")));
    }
    ΔΔ[rt.Fc] = [];
    ΔΔ[rt.Fc][rt.bt] = [];
    ΔΔ[rt.Fc][rt.vt] = [];
    for (a = du; rt.wt > a; a++) {
      ΔΔ[rt.Fc][rt.bt].push(Ks(Ru(1, 6 + a, "#DDCD8A")));
      ΔΔ[rt.Fc][rt.vt].push(Ks(Ru(1, 6 + a, "#155E57")));
    }
    ΔΔ[rt.Qy] = [];
    ΔΔ[rt.Qy][rt.bt] = [];
    ΔΔ[rt.Qy][rt.vt] = [];
    for (a = Ou; a < rt.Dt; a++) {
      ΔΔ[rt.Qy][rt.bt].push(Ks(Ru(1, Ud + a, "#353326")));
      ΔΔ[rt.Qy][rt.vt].push(Ks(Ru(1, eh + a, "#1D2526")));
    }
    ΔΔ[rt.Bs] = [];
    ΔΔ[rt.Bs][rt.bt] = Ks(vm(1.5, 0, ["#ee71a9"]));
    ΔΔ[rt.Bs][rt.vt] = Ks(vm(1.5, 0, ["#ee71a9"]));
    ΔΔ[rt.gv] = [ΔΔ[rt.Bs]];
    ΔΔ[rt.gv][Lh] = [];
    ΔΔ[rt.gv][hu] = [];
    ΔΔ[rt.gv][3] = [];
    ΔΔ[rt.gv][cn] = [];
    ΔΔ[rt.gv][1][rt.bt] = Ks(vm(1.5, 0, ["#e2d63b"]));
    ΔΔ[rt.gv][Ko][rt.vt] = Ks(vm(1.5, 0, ["#e2d63b"]));
    ΔΔ[rt.gv][Tg][rt.bt] = Ks(vm(1.5, 0, ["#309cbd"]));
    ΔΔ[rt.gv][2][rt.vt] = Ks(vm(1.5, 0, ["#309cbd"]));
    ΔΔ[rt.gv][3][rt.bt] = Ks(vm(1.5, 0, ["#cd232d"]));
    ΔΔ[rt.gv][3][rt.vt] = Ks(vm(1.5, 0, ["#cd232d"]));
    ΔΔ[rt.gv][4][rt.bt] = Ks(vm(1.5, 0, ["#42b672"]));
    ΔΔ[rt.gv][Jn][rt.vt] = Ks(vm(1.5, 0, ["#42b672"]));
    if (ⵠⵠⵠⲆ.Ci("cti", aj.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Ks = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ΔΔ[rt.Gl] = Ks(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(bd, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += rq) {
        b.moveTo(Oq, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ΔΔ[rt.Tn] = [];
    ΔΔ[rt.Tn][rt.bt] = [];
    ΔΔ[rt.Tn][rt.vt] = [];
    ΔΔ[rt.Tn][rt.bt].push(Ks(qu(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[rt.Tn][rt.bt].push(Ks(qu(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[rt.Tn][rt.bt].push(Ks(qu(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[rt.Tn][rt.vt].push(Ks(qu(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[rt.Tn][rt.vt].push(Ks(qu(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[rt.Tn][rt.vt].push(Ks(qu(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[rt.Ln] = [];
    ΔΔ[rt.Ln][rt.bt] = [];
    ΔΔ[rt.Ln][rt.vt] = [];
    ΔΔ[rt.Ln][rt.bt].push(Ks(Eu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[rt.Ln][rt.bt].push(Ks(Eu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[rt.Ln][rt.bt].push(Ks(Eu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[rt.Ln][rt.vt].push(Ks(Eu(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[rt.Ln][rt.vt].push(Ks(Eu(1.3, 0, [lj[Xc], "#1b4444", "#16605a"])));
    ΔΔ[rt.Ln][rt.vt].push(Ks(Eu(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[rt.Gn] = [];
    ΔΔ[rt.Gn][rt.bt] = [];
    ΔΔ[rt.Gn][rt.vt] = [];
    ΔΔ[rt.Gn][rt.bt].push(Ks(Lu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[rt.Gn][rt.bt].push(Ks(Lu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[rt.Gn][rt.bt].push(Ks(Lu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[rt.Gn][rt.vt].push(Ks(Lu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[rt.Gn][rt.vt].push(Ks(Lu(0.9, 0, [lj[Ag], "#2b9390", "#57bcb5"])));
    ΔΔ[rt.Gn][rt.vt].push(Ks(Lu(0.7, 0, [lj[Yn], "#2b9390", "#57bcb5"])));
    ΔΔ[rt.gr] = [];
    ΔΔ[rt.gr][rt.bt] = Δᐃ.uR;
    ΔΔ[rt.gr][rt.vt] = Δᐃ.fR;
    ΔΔ[rt.so] = [];
    ΔΔ[rt.so][rt.bt] = Ks(fu(0.6, ["#0d1b1c"]));
    ΔΔ[rt.so][rt.vt] = Ks(fu(0.6, ["#030d14"]));
    ΔΔ[rt.Tl] = [];
    ΔΔ[rt.Tl][rt.bt] = Ks(cu(0.6, ["#2a2938", "#242330"]));
    ΔΔ[rt.Tl][rt.vt] = Ks(cu(0.6, ["#1b1e30", "#161921"]));
    ΔΔ[rt.gb] = [];
    ΔΔ[rt.gb][rt.bt] = Ks(Bm(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ΔΔ[rt.gb][rt.vt] = Ks(Bm(0.6, 0, [lj[he], "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ΔΔ[rt.cb] = [];
    ΔΔ[rt.cb][rt.bt] = Ks(Dm(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ΔΔ[rt.cb][rt.vt] = Ks(Dm(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ΔΔ[rt.mb] = [];
    ΔΔ[rt.mb][rt.bt] = Ks(Yt(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ΔΔ[rt.mb][rt.vt] = Ks(Yt(0.4, [lj[$s], "#11635e", "#02373e"]));
    ΔΔ[rt.ub] = Ks(Mm(0.6, ["#BB0000"]));
    ΔΔ[rt.fb] = Ks(Mm(0.6, ["#DBE71C"]));
    ΔΔ[rt.pb] = Ks(Mm(0.6, ["#00BB00"]));
    ΔΔ[rt.jn] = [];
    ΔΔ[rt.jn][rt.bt] = [];
    ΔΔ[rt.jn][rt.vt] = [];
    ΔΔ[rt.jn][rt.bt].push(gu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
    ΔΔ[rt.jn][rt.bt].push(gu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, xn));
    ΔΔ[rt.jn][rt.bt].push(gu(0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], Ys, Ka));
    ΔΔ[rt.jn][rt.bt].push(gu(0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], true, Js));
    ΔΔ[rt.jn][rt.bt].push(gu(0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, nj));
    ΔΔ[rt.jn][rt.bt].push(gu(0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], true, 0));
    ΔΔ[rt.jn][rt.vt].push(gu(1.1, [lj[kj], "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], wo, Vd));
    ΔΔ[rt.jn][rt.vt].push(gu(1.1, [lj[Be], "#12493d", "#0e3831", "#155247", "#16695f"], true, Ou));
    ΔΔ[rt.jn][rt.vt].push(gu(0.9, [lj[Yn], "#0b3629", "#144437", "#174235", "#16695f"], u, Vd));
    ΔΔ[rt.jn][rt.vt].push(gu(0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 0));
    ΔΔ[rt.jn][rt.vt].push(gu(0.7, [lj[pc], "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    ΔΔ[rt.jn][rt.vt].push(gu(0.7, [lj[Be], "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], jt, Vd));
    ΔΔ[rt.Co] = [];
    ΔΔ[rt.Co][rt.bt] = [];
    ΔΔ[rt.Co][rt.vt] = [];
    ΔΔ[rt.Co][rt.bt].push(Ks(vu(pu(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], cc), ΔΔ[rt.jn][rt.bt][Gc])));
    ΔΔ[rt.Co][rt.bt].push(Ks(vu(pu(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], Kh), ΔΔ[rt.jn][rt.bt][fn])));
    ΔΔ[rt.Co][rt.vt].push(Ks(vu(pu(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], Uo), ΔΔ[rt.jn][rt.vt][0])));
    ΔΔ[rt.Co][rt.vt].push(Ks(vu(pu(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], hr), ΔΔ[rt.jn][rt.vt][lt])));
    ΔΔ[rt.Co][rt.bt].push(Ks(vu(pu(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], ks), ΔΔ[rt.jn][rt.bt][2])));
    ΔΔ[rt.Co][rt.bt].push(Ks(vu(pu(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], Kh), ΔΔ[rt.jn][rt.bt][2])));
    ΔΔ[rt.Co][rt.vt].push(Ks(vu(pu(0.9, [lj[Bh], lj[eg], "#041c21", "#0d2522", "#0c2821", "#0d2a28"], Ys), ΔΔ[rt.jn][rt.vt][2])));
    ΔΔ[rt.Co][rt.vt].push(Ks(vu(pu(0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], hr), ΔΔ[rt.jn][rt.vt][3])));
    ΔΔ[rt.jn][rt.bt][qn] = Ks(ΔΔ[rt.jn][rt.bt][5]);
    ΔΔ[rt.jn][rt.bt][4] = Ks(ΔΔ[rt.jn][rt.bt][4]);
    ΔΔ[rt.jn][rt.bt][3] = Ks(ΔΔ[rt.jn][rt.bt][3]);
    ΔΔ[rt.jn][rt.bt][lr] = Ks(ΔΔ[rt.jn][rt.bt][Cs]);
    ΔΔ[rt.jn][rt.bt][fn] = Ks(ΔΔ[rt.jn][rt.bt][Ej]);
    ΔΔ[rt.jn][rt.bt][0] = Ks(ΔΔ[rt.jn][rt.bt][0]);
    ΔΔ[rt.jn][rt.vt][5] = Ks(ΔΔ[rt.jn][rt.vt][5]);
    ΔΔ[rt.jn][rt.vt][Gs] = Ks(ΔΔ[rt.jn][rt.vt][Ud]);
    ΔΔ[rt.jn][rt.vt][3] = Ks(ΔΔ[rt.jn][rt.vt][3]);
    ΔΔ[rt.jn][rt.vt][2] = Ks(ΔΔ[rt.jn][rt.vt][2]);
    ΔΔ[rt.jn][rt.vt][yd] = Ks(ΔΔ[rt.jn][rt.vt][1]);
    ΔΔ[rt.jn][rt.vt][Jj] = Ks(ΔΔ[rt.jn][rt.vt][0]);
    ΔΔ[rt.Wt] = [];
    ΔΔ[rt.Wt][rt.bt] = Ks(hm(Ac, xu(0.75, Rg, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ΔΔ[rt.Wt][rt.vt] = Ks(hm(Jr, xu(0.75, true, [lj[Xc], "#000000", lj[Bh], "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ΔΔ[rt.Pt] = [];
    ΔΔ[rt.Pt][rt.bt] = Ks(hm(Nr, xu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[rt.Pt][rt.vt] = Ks(hm(Dd, xu(0.75, true, [lj[Zn], "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ΔΔ[rt.jt] = [];
    ΔΔ[rt.jt][rt.bt] = Ks(hm(4, xu(0.75, So, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[rt.jt][rt.vt] = Ks(hm(4, xu(0.75, Xn, [lj[Bh], "#000000", lj[xs], "#263947", "#263947", "#43aa82", "#29997c"])));
    ΔΔ[rt.Rt] = [];
    ΔΔ[rt.Rt][rt.bt] = Ks(hm(mn, xu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[rt.Rt][rt.vt] = Ks(hm(Jr, xu(0.75, true, ["#030d14", "#000000", lj[Be], "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[rt.de] = [];
    ΔΔ[rt.de][rt.bt] = Ks(hm(Jn, xu(0.75, jt, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[rt.de][rt.vt] = Ks(hm(Nr, xu(0.75, ud, [lj[Yn], "#000000", lj[ti], "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[rt.Nt] = [];
    ΔΔ[rt.Nt][rt.bt] = Ks(hm(er, ou(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ΔΔ[rt.Nt][rt.vt] = Ks(hm(on, ou(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ΔΔ[rt.ws] = [];
    ΔΔ[rt.ws][rt.bt] = Ks(hm(3, zu(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ΔΔ[rt.ws][rt.vt] = Ks(hm(3, zu(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ΔΔ[rt.je] = [];
    ΔΔ[rt.je][rt.bt] = Ks(hm(3, tu(0.4, ud, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ΔΔ[rt.je][rt.vt] = Ks(hm(oe, tu(0.4, Vj, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ΔΔ[rt.Ft] = [];
    ΔΔ[rt.Ft][rt.bt] = Ks(hm(Xg, uu(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ΔΔ[rt.Ft][rt.vt] = Ks(hm(on, uu(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ΔΔ[rt.Lt] = [];
    ΔΔ[rt.Lt][rt.bt] = Ks(hm(Xg, bu(0.4, ho, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ΔΔ[rt.Lt][rt.vt] = Ks(hm(3, bu(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ΔΔ[rt.Gt] = [];
    ΔΔ[rt.Gt][rt.bt] = Ks(hm(er, yu(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ΔΔ[rt.Gt][rt.vt] = Ks(hm(3, yu(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ΔΔ[rt.ce] = [];
    ΔΔ[rt.ce][rt.bt] = Ks(hm(3, su(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ΔΔ[rt.ce][rt.vt] = Ks(hm(Ie, su(0.4, Un, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ΔΔ[rt.ao] = [];
    ΔΔ[rt.ao][rt.bt] = [];
    ΔΔ[rt.ao][rt.vt] = [];
    ΔΔ[rt.ao][rt.bt].push(Ks(Pu(0.9, 0, ["#0d4f35"], Sh)));
    ΔΔ[rt.ao][rt.bt].push(Ks(Pu(0.9, 0, ["#0d4f35"], Mc)));
    ΔΔ[rt.ao][rt.bt].push(Ks(Pu(0.9, 0, ["#0d4f35"], 2)));
    ΔΔ[rt.ao][rt.vt].push(Ks(Pu(0.9, 0, ["#053339"], 0)));
    ΔΔ[rt.ao][rt.vt].push(Ks(Pu(0.9, 0, ["#053339"], 1)));
    ΔΔ[rt.ao][rt.vt].push(Ks(Pu(0.9, 0, ["#053339"], 2)));
    ΔΔ[rt.ao][rt.bt].push(Ks(Ju(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ΔΔ[rt.ao][rt.bt].push(Ks(Ju(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ΔΔ[rt.ao][rt.vt].push(Ks(Ju(0.9, ["#052919", "#0a4738", "#06321f"])));
    ΔΔ[rt.ao][rt.vt].push(Ks(Ju(0.8, ["#052918", "#08491c", "#063417"])));
    ΔΔ[rt.ss] = [];
    ΔΔ[rt.ss][rt.bt] = Ks(hm(Math.PI / 2, Yf(0.25, true, ["#0d1b1c", "#44301b", lj[Yc], "#523e26"])));
    ΔΔ[rt.ss][rt.vt] = Ks(hm(Math.PI / mj, Yf(0.25, true, [lj[xs], "#082b22", "#0a2f2b", "#072824"])));
    ΔΔ[rt.Ol] = [];
    ΔΔ[rt.Ol].push(Ks(Uf(0.25, ["#44301b", "#57442a", "#523e26"], du)));
    ΔΔ[rt.Ol].push(Ks(Uf(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ΔΔ[rt.Ol].push(Ks(Uf(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], tm)));
    ΔΔ[rt.Ul] = [];
    ΔΔ[rt.Ul][rt.bt] = [];
    ΔΔ[rt.Ul][rt.vt] = [];
    ΔΔ[rt.Ul][rt.bt].push(Ks(hm(Math.PI / wc, Of(0.25, 0, ["#0d1b1c", "#44301b", lj[$h], "#523e26", "#9b2b25"], 1))));
    ΔΔ[rt.Ul][rt.vt].push(Ks(hm(Math.PI / Gi, Of(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ΔΔ[rt.Ul][rt.bt].push(Ks(hm(Math.PI / 2, Of(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ΔΔ[rt.Ul][rt.vt].push(Ks(hm(Math.PI / 2, Of(0.25, 0, ["#030d14", lj[hs], "#0a2f2b", "#072824", "#4f9246"], 2))));
    ΔΔ[rt.Ul][rt.bt].push(Ks(hm(Math.PI / 2, Of(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ΔΔ[rt.Ul][rt.vt].push(Ks(hm(Math.PI / Gi, Of(0.25, 0, ["#030d14", lj[fc], "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], xa))));
    ΔΔ[rt.Ul][rt.bt].push(Ks(hm(Math.PI / Cs, Of(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], mn))));
    ΔΔ[rt.Ul][rt.vt].push(Ks(hm(Math.PI / 2, Of(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ΔΔ[rt.Rn] = [];
    ΔΔ[rt.Rn][rt.bt] = [Ks(Iu(1.2, Vj, ["#352b10", "#80500b", "#7c4908"]))];
    ΔΔ[rt.Rn][rt.vt] = [Ks(Iu(1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ΔΔ[rt.Cu] = [];
    ΔΔ[rt.Cu][rt.bt] = Ks(Iu(0.8, Hs, ["#0e3022", "#68622D", "#665329"]));
    ΔΔ[rt.Cu][rt.vt] = Ks(Iu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ΔΔ[rt.ds] = [];
    ΔΔ[rt.ds][rt.bt] = Ks(ep(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ΔΔ[rt.ds][rt.vt] = Ks(ep(0.5, gi, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ΔΔ[rt.ps] = [];
    ΔΔ[rt.ps][rt.bt] = Ks(lm(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ΔΔ[rt.ps][rt.vt] = Ks(lm(0.5, Rg, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ΔΔ[rt.bs] = [];
    ΔΔ[rt.bs][rt.bt] = Ks(Bp(0.5, ln, ["#1b170c", "#349970", "#245c45", "#348361", lj[tr], "#bbbbbb"]));
    ΔΔ[rt.bs][rt.vt] = Ks(Bp(0.5, jt, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ΔΔ[rt.ro] = [];
    ΔΔ[rt.ro][rt.bt] = Ks(Iu(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ΔΔ[rt.ro][rt.vt] = Ks(Iu(0.8, true, [lj[Bh], "#084442", "#0a4049"]));
    ΔΔ[rt.eb] = [];
    ΔΔ[rt.eb][rt.bt] = Ks(ep(0.5, Rg, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ΔΔ[rt.eb][rt.vt] = Ks(ep(0.5, oh, [lj[he], "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ΔΔ[rt.Qb] = [];
    ΔΔ[rt.Qb][rt.bt] = Ks(lm(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ΔΔ[rt.Qb][rt.vt] = Ks(lm(0.5, f, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ΔΔ[rt.rv] = [];
    ΔΔ[rt.rv][rt.bt] = Ks(Bp(0.5, Va, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ΔΔ[rt.rv][rt.vt] = Ks(Bp(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ΔΔ[rt.Ub] = [];
    ΔΔ[rt.Ub][rt.bt] = Ks(Pp(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ΔΔ[rt.Ub][rt.vt] = Ks(Pp(0.45, Va, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ΔΔ[rt.Xb] = Ks(Pp(0.65, Xn, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ΔΔ[rt.fo] = [];
    ΔΔ[rt.fo][rt.bt] = Ks(Gu(1.4, 0, ["#3d2a6e", "#8255b5"]));
    ΔΔ[rt.fo][rt.vt] = Ks(Gu(1.4, 0, ["#26124f", "#524082"]));
    ΔΔ[rt.oo] = [];
    ΔΔ[rt.oo][rt.bt] = Ks(Pt(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ΔΔ[rt.oo][rt.vt] = Ks(Pt(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ΔΔ[rt.On] = [];
    ΔΔ[rt.On][rt.bt] = Ks(Hm(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[rt.On][rt.vt] = Ks(Hm(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[rt.qn] = [];
    ΔΔ[rt.qn][rt.bt] = Ks(Nt(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[rt.qn][rt.vt] = Ks(Nt(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[rt.ho] = [];
    ΔΔ[rt.ho][rt.bt] = Ks(Vt(0.9, 0, ["#efd435"]));
    ΔΔ[rt.ho][rt.vt] = Ks(Vt(0.9, 0, ["#fffabb"]));
    ΔΔ[rt.io] = [];
    ΔΔ[rt.io][rt.bt] = Ks(St(0.9, 0, ["#efd435"]));
    ΔΔ[rt.io][rt.vt] = Ks(St(0.9, 0, ["#fffabb"]));
    ΔΔ[rt.sb] = [];
    ΔΔ[rt.sb][rt.bt] = Ks(Vt(0.9, 0, ["#efd435"]));
    ΔΔ[rt.sb][rt.vt] = Ks(Vt(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ΔΔ[rt.rb] = [];
    ΔΔ[rt.rb][rt.bt] = Ks(St(0.9, 0, ["#efd435"]));
    ΔΔ[rt.rb][rt.vt] = Ks(St(0.9, 0, ["#ff5704"]));
    ΔΔ[rt.Ho] = Ks(Im(1, "#ffffff"));
    ΔΔ[rt.Ao] = Ks(Im(1.5, "#ffffff"));
    ΔΔ[rt.Eo] = Ks(Fu(1, "Your score:", Gr * 1, "#FFF"));
    ΔΔ[rt.sf] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      rm(d, a * 119.5, a * 140.125, Dn * a);
      em(d, ch, b[1], a * qn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      em(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      em(d, undefined, b[Te], a * as);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      em(d, undefined, b[3], a * Zo);
      rm(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      em(d, b[4], b[Wg], k * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      em(d, b[O], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      em(d, Pq, b[8], Tc * a);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      nm(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      em(d, b[Vq]);
      d.save();
      d.translate(a * 167, a * 80.125);
      nm(d, a * -38.5, a * -39, a * 78, a * 78, no * a);
      d.restore();
      em(d, b[G]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ΔΔ[rt.rf] = Δᐃ.rf;
    ΔΔ[rt.ga] = [];
    ΔΔ[rt.ga][rt.bt] = Ks(Zm(1.5, So, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[rt.ga][rt.vt] = Ks(Zm(1.5, true, [lj[pc], "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[rt.Uu] = [];
    ΔΔ[rt.Uu][rt.bt] = Ks(Ym(wc * 1, Hs, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[rt.Uu][rt.vt] = Ks(Ym(2, Hs, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[rt.Ou] = [];
    ΔΔ[rt.Ou][rt.bt] = Ks($m(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[rt.Ou][rt.vt] = Ks($m(1.5, Va, [lj[Ag], "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[rt.ha] = [];
    ΔΔ[rt.ha][rt.bt] = Ks(Vm(2.2, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[rt.ha][rt.vt] = Ks(Vm(2.2, 0, ["#0B4049", "#08383D"]));
    ΔΔ[rt.Wu] = [];
    ΔΔ[rt.Wu][rt.bt] = Ks(Vm(2.2, 0, ["#68622D", "#665329"]));
    ΔΔ[rt.Wu][rt.vt] = Ks(Vm(2.2, 0, ["#0F3A24", "#083326"]));
    ΔΔ[rt.qo] = [];
    ΔΔ[rt.qo][rt.bt] = Ks(Mu(0.8, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[rt.qo][rt.vt] = Ks(Mu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ΔΔ[rt.ib] = [];
    ΔΔ[rt.ib][rt.bt] = Ks(Mu(0.8, 0, ["#c67933", "#b17238"]));
    ΔΔ[rt.ib][rt.vt] = Ks(Mu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[rt.yk] = [];
    ΔΔ[rt.yk][rt.bt] = Ks(Mu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ΔΔ[rt.yk][rt.vt] = Ks(Mu(0.8, 0, ["#032d29", "#044640"]));
    ΔΔ[rt.zb] = [];
    ΔΔ[rt.zb][rt.bt] = Ks(Mu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ΔΔ[rt.zb][rt.vt] = Ks(Mu(0.8, 0, ["#1c6161", "#07413f"]));
    ΔΔ[rt.Lb] = [];
    ΔΔ[rt.Lb][rt.bt] = Ks(Mu(0.8, 0, ["#328a56", "#449573"]));
    ΔΔ[rt.Lb][rt.vt] = Ks(Mu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[rt.Gy] = [];
    ΔΔ[rt.Gy][rt.bt] = Ks(Mu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ΔΔ[rt.Gy][rt.vt] = Ks(Mu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[rt.Xy] = [];
    ΔΔ[rt.Xy][rt.bt] = Ks(Mu(0.8, 0, ["#b22419", "#99110e"]));
    ΔΔ[rt.Xy][rt.vt] = Ks(Mu(0.8, 0, ["#04323c", "#03222b"]));
    ΔΔ[rt.nk] = [];
    ΔΔ[rt.nk][rt.bt] = Ks(Mu(0.8, 0, ["#13a56d", "#098a58"]));
    ΔΔ[rt.nk][rt.vt] = Ks(Mu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[rt.hf] = Nm(Mc, [{
      f: Vm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[rt.kp] = Nm(fo, [{
      f: Nt,
      x: Ka,
      y: 0,
      a: 1,
      r: -Math.PI / Y,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[rt.Ap] = Nm(1, [{
      f: Tp,
      x: 0,
      y: -Tc,
      a: lt,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[rt.ih] = Nm(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[rt.Nn] = [];
    ΔΔ[rt.Nn][rt.bt] = Ks(Em(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ΔΔ[rt.Nn][rt.vt] = Ks(Em(0.9, 0, ["#084442", "#125e5a"]));
    ΔΔ[rt.ra] = [];
    ΔΔ[rt.ra][rt.bt] = Ks(Em(0.9, 0, ["#9E8456", "#A89F67"]));
    ΔΔ[rt.ra][rt.vt] = Ks(Em(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ΔΔ[rt.yf] = [];
    ΔΔ[rt.yf][rt.bt] = Ks(Em(0.9, 0, ["#665329", "#68622D"]));
    ΔΔ[rt.yf][rt.vt] = Ks(Em(0.9, 0, ["#083326", "#0F3A24"]));
    ΔΔ[rt.cs] = [];
    ΔΔ[rt.cs][rt.bt] = Ks(Em(0.9, 0, ["#c67933", "#ec952d"]));
    ΔΔ[rt.cs][rt.vt] = Ks(Em(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[rt._s] = [];
    ΔΔ[rt._s][rt.bt] = Ks(Em(0.9, 0, ["#375809", "#4b770e"]));
    ΔΔ[rt._s][rt.vt] = Ks(Em(0.9, 0, ["#09542d", "#0d5d2f"]));
    ΔΔ[rt.kk] = [];
    ΔΔ[rt.kk][rt.bt] = Ks(Em(0.9, 0, ["#585809", "#72770e"]));
    ΔΔ[rt.kk][rt.vt] = Ks(Em(0.9, 0, ["#295209", "#305d0d"]));
    ΔΔ[rt.fs] = [];
    ΔΔ[rt.fs][rt.bt] = Ks(Em(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ΔΔ[rt.fs][rt.vt] = Ks(Em(0.9, 0, ["#126366", "#0d484b"]));
    ΔΔ[rt.ls] = [];
    ΔΔ[rt.ls][rt.bt] = Ks(Em(0.9, 0, ["#3f8662", "#30915d"]));
    ΔΔ[rt.ls][rt.vt] = Ks(Em(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[rt.tb] = [];
    ΔΔ[rt.tb][rt.bt] = Ks(Em(0.9, 0, ["#c79153", "#dfa868"]));
    ΔΔ[rt.tb][rt.vt] = Ks(Em(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[rt.xb] = [];
    ΔΔ[rt.xb][rt.bt] = Ks(Em(0.9, 0, ["#768b5b", "#819984"]));
    ΔΔ[rt.xb][rt.vt] = Ks(Em(0.9, 0, ["#0c4540", "#0e5153"]));
    ΔΔ[rt.Gb] = [];
    ΔΔ[rt.Gb][rt.bt] = Ks(Em(0.9, 0, ["#567465", "#627c6e"]));
    ΔΔ[rt.Gb][rt.vt] = Ks(Em(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[rt.Cs] = [];
    ΔΔ[rt.Cs][rt.bt] = Ks(Em(0.9, 0, ["#996b3a", "#bf956b"]));
    ΔΔ[rt.Cs][rt.vt] = Ks(Em(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[rt.qy] = [];
    ΔΔ[rt.qy][rt.bt] = Ks(Em(0.9, 0, ["#7a634a", "#a68f77"]));
    ΔΔ[rt.qy][rt.vt] = Ks(Em(0.9, 0, ["#1e4d43", "#113c32"]));
    ΔΔ[rt.xs] = [];
    ΔΔ[rt.xs][rt.bt] = Ks(Em(0.9, 0, ["#99403c", "#bc796c"]));
    ΔΔ[rt.xs][rt.vt] = Ks(Em(0.9, 0, ["#1e434d", "#11303c"]));
    ΔΔ[rt.Vy] = [];
    ΔΔ[rt.Vy][rt.bt] = Ks(Em(0.9, 0, ["#88504e", "#b3857c"]));
    ΔΔ[rt.Vy][rt.vt] = Ks(Em(0.9, 0, ["#253b41", "#162930"]));
    ΔΔ[rt.Ss] = [];
    ΔΔ[rt.Ss][rt.bt] = Ks(Em(0.9, 0, ["#0f8870", "#23af93"]));
    ΔΔ[rt.Ss][rt.vt] = Ks(Em(0.9, 0, ["#032829", "#083233"]));
    ΔΔ[rt.ak] = [];
    ΔΔ[rt.ak][rt.bt] = Ks(Em(0.9, 0, ["#618a20", "#84a74e"]));
    ΔΔ[rt.ak][rt.vt] = Ks(Em(0.9, 0, ["#1f4632", "#335d47"]));
    ΔΔ[rt.Wn] = [];
    ΔΔ[rt.Wn][rt.bt] = Ks(Tm(1.2, pe, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ΔΔ[rt.Wn][rt.vt] = Ks(Tm(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ΔΔ[rt.Ta] = [];
    ΔΔ[rt.Ta][rt.bt] = Ks(sf(dm * 1, Kh, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[rt.Ta][rt.vt] = Ks(sf(1, true, [lj[pc], "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[rt.La] = [];
    ΔΔ[rt.La][rt.bt] = Ks(of(fo * 1, Nh, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[rt.La][rt.vt] = Ks(of(1, Bc, [lj[mo], "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[rt.Xn] = [];
    ΔΔ[rt.Xn][rt.bt] = Ks(pf(dm * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", lj[C]]));
    ΔΔ[rt.Xn][rt.vt] = Ks(pf(ae * 1, Xn, [lj[kj], "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[rt.ja] = [];
    ΔΔ[rt.ja][rt.bt] = Ks(pf(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[rt.ja][rt.vt] = Ks(pf(1, hr, [lj[Xo], "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[rt.Ra] = [];
    ΔΔ[rt.Ra][rt.bt] = Ks(cf(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[rt.Ra][rt.vt] = Ks(cf(1, oh, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[rt.Fa] = [];
    ΔΔ[rt.Fa][rt.bt] = Ks(zf(0.8, So, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[rt.Fa][rt.vt] = Ks(zf(0.8, jt, [lj[sr], "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[rt.Na] = [];
    ΔΔ[rt.Na][rt.bt] = Ks(yf(0.8, Xn, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[rt.Na][rt.vt] = Ks(yf(0.8, true, [lj[xs], "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[rt.Ha] = [];
    ΔΔ[rt.Ha][rt.bt] = Ks(vf(0.8, Xn, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[rt.Ha][rt.vt] = Ks(vf(0.8, jt, [lj[$s], "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[rt.Wa] = [];
    ΔΔ[rt.Wa][rt.bt] = Ks(bf(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[rt.Wa][rt.vt] = Ks(bf(0.8, true, [lj[Bh], "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[rt.Vn] = [];
    ΔΔ[rt.Vn][rt.bt] = Ks(bf(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", lj[dg]]));
    ΔΔ[rt.Vn][rt.vt] = Ks(bf(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[rt.Ga] = [];
    ΔΔ[rt.Ga][rt.bt] = Ks(ff(1.5, gi, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ΔΔ[rt.Ga][rt.vt] = Ks(ff(1.5, Xn, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[rt.eh] = [];
    ΔΔ[rt.eh][rt.bt] = Ks(ff(wg * 1, ui, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[rt.eh][rt.vt] = Ks(ff(Ic * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ΔΔ[rt.Ua] = [];
    ΔΔ[rt.Ua][rt.bt] = Ks(uf(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ΔΔ[rt.Ua][rt.vt] = Ks(uf(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ΔΔ[rt.Wh] = [];
    ΔΔ[rt.Wh][rt.bt] = Ks(uf(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[rt.Wh][rt.vt] = Ks(uf(Ps * 1, Fj, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[rt.Zn] = [];
    ΔΔ[rt.Zn][rt.bt] = Ks(uf(1.5, hr, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[rt.Zn][rt.vt] = Ks(uf(1.5, Vj, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[rt.dd] = [];
    ΔΔ[rt.dd][rt.bt] = Ks(uf(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[rt.dd][rt.vt] = Ks(uf(1, re, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[rt.Oa] = [];
    ΔΔ[rt.Oa][rt.bt] = Ks(mf(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ΔΔ[rt.Oa][rt.vt] = Ks(mf(1.5, true, [lj[qj], "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ΔΔ[rt.Uh] = [];
    ΔΔ[rt.Uh][rt.bt] = Ks(mf(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[rt.Uh][rt.vt] = Ks(mf(1, Xq, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[rt.Ya] = [];
    ΔΔ[rt.Ya][rt.bt] = Ks(Gf(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[rt.Ya][rt.vt] = Ks(Gf(1.5, Un, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[rt.Jh] = [];
    ΔΔ[rt.Jh][rt.bt] = Ks(Gf(fn * 1, zn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[rt.Jh][rt.vt] = Ks(Gf(fi * 1, re, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[rt.qa] = [];
    ΔΔ[rt.qa][rt.bt] = Ks(Af(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ΔΔ[rt.qa][rt.vt] = Ks(Af(0.5, 0, ["#032428", "#266161", lj[Lg], "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", lj[dc], lj[Zs]]));
    ΔΔ[rt.Wf] = [];
    ΔΔ[rt.Wf][rt.bt] = Ks(hp(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ΔΔ[rt.Wf][rt.vt] = Ks(hp(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ΔΔ[rt.Tr] = [];
    ΔΔ[rt.Tr][rt.bt] = Ks(jm(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ΔΔ[rt.Tr][rt.vt] = Ks(jm(0.9, [lj[he], "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ΔΔ[rt.Ir] = [];
    ΔΔ[rt.Ir][rt.bt] = Ks(hm(Math.PI, Jm(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ΔΔ[rt.Ir][rt.vt] = Ks(hm(Math.PI, Jm(0.9, [lj[ti], "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ΔΔ[rt.Rr] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      em(d, Go, b[Sh], _n);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      em(d, undefined, b[0], Jn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      em(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      em(d, S, b[0], Rh);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      em(d, yc, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      em(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      em(d, undefined, b[Oq], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      em(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      em(d, undefined, b[Js], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      em(d, undefined, b[sh], Gm);
      return c;
    }(0.6, ["#FFFFFF"]));
    ΔΔ[rt.yo] = [];
    ΔΔ[rt.yo][rt.bt] = Ks(Lm(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ΔΔ[rt.yo][rt.vt] = Ks(Lm(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ΔΔ[rt.Ht] = [];
    ΔΔ[rt.Ht][rt.bt] = Ks(Lf(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ΔΔ[rt.Ht][rt.vt] = Ks(Lf(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ΔΔ[rt.Ut] = [];
    ΔΔ[rt.Ut][rt.bt] = Ks(_f(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ΔΔ[rt.Ut][rt.vt] = Ks(_f(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ΔΔ[rt.ke] = [];
    ΔΔ[rt.ke][rt.bt] = Ks(If(0.63, So, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ΔΔ[rt.ke][rt.vt] = Ks(If(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ΔΔ[rt.Ae] = [];
    ΔΔ[rt.Ae][rt.bt] = Ks(Wt(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ΔΔ[rt.Ae][rt.vt] = Ks(Wt(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ΔΔ[rt.we] = [];
    ΔΔ[rt.we][rt.bt] = Ks(Ut(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ΔΔ[rt.we][rt.vt] = Ks(Ut(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ΔΔ[rt.up] = [];
    ΔΔ[rt.up][rt.bt] = Ks(wp(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ΔΔ[rt.up][rt.vt] = Ks(wp(0.42, f, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ΔΔ[rt.bp] = [];
    ΔΔ[rt.bp][rt.bt] = Ks(Rp(0.9, ["#e4c027"]));
    ΔΔ[rt.bp][rt.vt] = Ks(Rp(0.9, ["#D8E57F"]));
    ΔΔ[rt.va] = [];
    ΔΔ[rt.va][rt.bt] = Ks(jp(0.42, Va, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ΔΔ[rt.va][rt.vt] = Ks(jp(0.42, Un, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ΔΔ[rt.yp] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      nm(d, a * -57.5, a * -161.5, a * Qg, a * 323, a * 10);
      d.restore();
      em(d, b[Ng], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      nm(d, a * -57.5, a * 50.5, a * 100, a * 105, a * jc);
      d.restore();
      em(d, b[Qj], b[fi], Ld * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      em(d, b[2], b[Gi], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      em(d, b[3], b[Wc], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      em(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      em(d, b[3], b[Xg], no * a);
      d.save();
      d.translate(a * 72, a * 68.5);
      nm(d, a * -41.5, a * -36.5, a * 73, a * 73, W * a);
      d.restore();
      em(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      nm(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      em(d, b[Gm]);
      d.save();
      d.translate(a * 72, a * 279.5);
      nm(d, a * -41.5, a * -40.5, a * 73, a * 73, a * Iq);
      d.restore();
      em(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(_r * a, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      em(d, b[z], b[2], a * Zo);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(_r * a, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      em(d, b[oe], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ΔΔ[rt.wg] = [];
    ΔΔ[rt.wg][rt.bt] = Ks(Mf(0.5, f, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ΔΔ[rt.wg][rt.vt] = Ks(Mf(0.5, Kh, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ΔΔ[rt.Yn] = [];
    ΔΔ[rt.Yn][rt.bt] = Ks(Rf(0.5, oh, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ΔΔ[rt.Yn][rt.vt] = Ks(Rf(0.5, oh, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ΔΔ[rt.Eg] = Ks(function (b, c, d) {
      var e = document.createElement("canvas");
      var f = e.getContext("2d");
      e.width = b * 118;
      e.height = b * 129;
      f.save();
      f.translate(b * 90, b * 90);
      nm(f, b * -86.5, b * -86, b * 110, b * 110, b * Od);
      f.restore();
      em(f, d[0], d[1], Gs);
      return e;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ΔΔ[rt.Cg] = Nm(yd, [{
      f: Nt,
      x: Sh,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ΔΔ[rt.As] = [];
    ΔΔ[rt.As][rt.bt] = Ks(Qf(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[rt.As][rt.vt] = Ks(Qf(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[rt.Xv] = [];
    ΔΔ[rt.Xv][rt.bt] = Ks(kf(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[rt.Xv][rt.vt] = Ks(kf(Ic * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[rt.Zt] = [];
    ΔΔ[rt.Zt][rt.bt] = Ks(hm(3, qf(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ΔΔ[rt.Zt][rt.vt] = Ks(hm(3, qf(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ΔΔ[rt.Ot] = [];
    ΔΔ[rt.Ot][rt.bt] = Ks(hm(3, Tf(0.7, Xn, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ΔΔ[rt.Ot][rt.vt] = Ks(hm(3, Tf(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ΔΔ[rt.Yt] = [];
    ΔΔ[rt.Yt][rt.bt] = Ks(hm(3, Cf(0.65, ud, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ΔΔ[rt.Yt][rt.vt] = Ks(hm(3, Cf(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ΔΔ[rt.Jt] = [];
    ΔΔ[rt.Jt][rt.bt] = Ks(hm(3, xf(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ΔΔ[rt.Jt][rt.vt] = Ks(hm(Qe, xf(0.67, true, [lj[xs], "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ΔΔ[rt.Kt] = [];
    ΔΔ[rt.Kt][rt.bt] = Ks(hm(Sn, Df(0.67, f, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ΔΔ[rt.Kt][rt.vt] = Ks(hm(3, Df(0.67, ud, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ΔΔ[rt.ue] = [];
    ΔΔ[rt.ue][rt.bt] = Ks(hm(Sn, Wf(0.67, So, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ΔΔ[rt.ue][rt.vt] = Ks(hm(3, Wf(0.67, oh, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ΔΔ[rt.Xt] = [];
    ΔΔ[rt.Xt][rt.bt] = Ks(hm(Sr, Ff(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ΔΔ[rt.Xt][rt.vt] = Ks(hm(yr, Ff(X * 1, pe, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ΔΔ[rt.pe] = [];
    ΔΔ[rt.pe][rt.bt] = Ks(hm(Lc, Ef(dm * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[rt.pe][rt.vt] = Ks(hm(3, Ef(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ΔΔ[rt.Pe] = [];
    ΔΔ[rt.Pe][rt.bt] = Ks(hm(uc, Ep(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ΔΔ[rt.Pe][rt.vt] = Ks(hm(jh, Ep(0.5, Rg, ["#030d14", "#485e66", "#1f343f"])));
    ΔΔ[rt.De] = [];
    ΔΔ[rt.De][rt.bt] = Ks(hm(3, hl(Ps * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ΔΔ[rt.De][rt.vt] = Ks(hm(mq, hl(ja * 1, oh, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ΔΔ[rt.le] = [];
    ΔΔ[rt.le][rt.bt] = Ks(hm(3, Ef(1, Xn, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[rt.le][rt.vt] = Ks(hm(3, Ef(hf * 1, Nh, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ΔΔ[rt.be] = [];
    ΔΔ[rt.be][rt.bt] = Ks(hm(3, Ef(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[rt.be][rt.vt] = Ks(hm(3, Ef(Ej * 1, Un, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[rt.ve] = [];
    ΔΔ[rt.ve][rt.bt] = Ks(hm(3, Ef(dm * 1, hr, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[rt.ve][rt.vt] = Ks(hm(Xg, Ef(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[rt.wa] = [];
    ΔΔ[rt.wa][rt.bt] = Ks($p(0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ΔΔ[rt.wa][rt.vt] = Ks($p(0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ΔΔ[rt.Od] = [];
    ΔΔ[rt.Od].push(Ks($p(0.8, re, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ΔΔ[rt.Od].push(Ks($p(0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ΔΔ[rt.Od].push(Ks($p(0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ΔΔ[rt.Jd] = [];
    ΔΔ[rt.Jd].push(ΔΔ[rt.Od][0]);
    ΔΔ[rt.Jd].push(ΔΔ[rt.Od][0]);
    ΔΔ[rt.Jd].push(ΔΔ[rt.Od][0]);
    ΔΔ[rt.Ia] = [];
    ΔΔ[rt.Ia][rt.bt] = Ks(ip(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ΔΔ[rt.Ia][rt.vt] = Ks(ip(0.06, Fj, ["#030d14", "#2b6664", "#133d3c"]));
    ΔΔ[rt.Ud] = [];
    ΔΔ[rt.Ud].push(Ks(ip(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ΔΔ[rt.Ud].push(Ks(ip(0.08, u, ["#141414", "#e2bd4e", "#a38018"])));
    ΔΔ[rt.Ud].push(Ks(ip(0.08, Qh, ["#141414", "#b0902e", "#634d09"])));
    ΔΔ[rt.Ma] = Nm(1.5, [{
      f: cl,
      x: Ka,
      y: 0,
      a: 1,
      r: Js,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[rt.Td] = [];
    ΔΔ[rt.Td][rt.bt] = Ks(ll(0.8, true, ["#347f93", "#54a4ba"]));
    ΔΔ[rt.Td][rt.vt] = Ks(ll(0.8, true, ["#98ede3", "#94f2e7"]));
    ΔΔ[rt.jd] = [];
    ΔΔ[rt.jd][rt.bt] = Ks(fl(0.8, ho, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ΔΔ[rt.jd][rt.vt] = Ks(fl(0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ΔΔ[rt.Rd] = [];
    ΔΔ[rt.Rd][rt.bt] = Ks(bl(0.8, Vj, ["#a9e4ed", "#86d4e0"]));
    ΔΔ[rt.Rd][rt.vt] = Ks(bl(0.8, true, ["#83ddd4", "#485e66"]));
    ΔΔ[rt.Da] = [];
    ΔΔ[rt.Da][rt.bt] = Ks(Op(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ΔΔ[rt.Da][rt.vt] = Ks(Op(0.8, Nh, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ΔΔ[rt.hB] = [];
    ΔΔ[rt.hB][rt.bt] = Δᐃ.gL;
    ΔΔ[rt.hB][rt.vt] = Δᐃ.cL;
    ΔΔ[rt.gB] = [];
    ΔΔ[rt.gB][rt.bt] = Δᐃ.oL;
    ΔΔ[rt.gB][rt.vt] = Δᐃ.hL;
    ΔΔ[rt.cB] = [];
    ΔΔ[rt.cB][rt.bt] = Δᐃ.dL;
    ΔΔ[rt.cB][rt.vt] = Δᐃ.mL;
    ΔΔ[rt.Ea] = [];
    ΔΔ[rt.Ea][rt.bt] = Δᐃ.sL;
    ΔΔ[rt.Ea][rt.vt] = Δᐃ.rL;
    ΔΔ[rt.fB] = [];
    ΔΔ[rt.fB][rt.bt] = Δᐃ.lL;
    ΔΔ[rt.fB][rt.vt] = Δᐃ.bL;
    ΔΔ[rt.Ca] = [];
    ΔΔ[rt.Ca][rt.bt] = Δᐃ.vL;
    ΔΔ[rt.Ca][rt.vt] = Δᐃ.yL;
    ΔΔ[rt.vB] = [];
    ΔΔ[rt.vB][rt.bt] = Δᐃ.ML;
    ΔΔ[rt.vB][rt.vt] = Δᐃ.BL;
    ΔΔ[rt.za] = [];
    ΔΔ[rt.za][rt.bt] = Δᐃ.DL;
    ΔΔ[rt.za][rt.vt] = Δᐃ.EL;
    ΔΔ[rt.wB] = [];
    ΔΔ[rt.wB][rt.bt] = Δᐃ.QL;
    ΔΔ[rt.wB][rt.vt] = Δᐃ.SL;
    ΔΔ[rt.xa] = [];
    ΔΔ[rt.xa][rt.bt] = Δᐃ.IL;
    ΔΔ[rt.xa][rt.vt] = Δᐃ._L;
    ΔΔ[rt.EB] = [];
    ΔΔ[rt.EB][rt.bt] = Δᐃ.jL;
    ΔΔ[rt.EB][rt.vt] = Δᐃ.RL;
    ΔΔ[rt.Qa] = [];
    ΔΔ[rt.Qa][rt.bt] = Δᐃ.LL;
    ΔΔ[rt.Qa][rt.vt] = Δᐃ.GL;
    ΔΔ[rt.QB] = [];
    ΔΔ[rt.QB][rt.bt] = Δᐃ.HL;
    ΔΔ[rt.QB][rt.vt] = Δᐃ.UL;
    ΔΔ[rt.Sa] = [];
    ΔΔ[rt.Sa][rt.bt] = Δᐃ.OL;
    ΔΔ[rt.Sa][rt.vt] = Δᐃ.YL;
    ΔΔ[rt.lr] = [];
    ΔΔ[rt.lr][rt.bt] = Δᐃ.KP;
    ΔΔ[rt.lr][rt.vt] = Δᐃ.XP;
    ΔΔ[rt.br] = Δᐃ.br;
    ΔΔ[rt._a] = [];
    ΔΔ[rt._a][rt.bt] = Ks(el(0.75, Rg, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ΔΔ[rt._a][rt.vt] = Ks(el(0.75, gi, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ΔΔ[rt.lm] = Ks(tp(0.3, ["#092813", "#1f773d"], 0));
    ΔΔ[rt.bm] = Ks(tp(0.3, ["#092813", "#1f773d"], Jf));
    ΔΔ[rt.wv] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(Ou, lh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      em(d, b[0]);
      d.translate(Sh, -Gj * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      em(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ΔΔ[rt.fm] = [];
    ΔΔ[rt.fm].push(Ks(Xp(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ΔΔ[rt.fm].push(Ks(Xp(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], du)));
    ΔΔ[rt.fm].push(Ks(Xp(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ΔΔ[rt.vm] = [];
    var b = Ks(Xp(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ΔΔ[rt.vm].push(b);
    ΔΔ[rt.vm].push(b);
    ΔΔ[rt.vm].push(b);
    ΔΔ[rt.pm] = [];
    ΔΔ[rt.pm].push(Ks(Xp(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], ae)));
    ΔΔ[rt.pm].push(Ks(Xp(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], fn)));
    ΔΔ[rt.pm].push(Ks(Xp(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], dm)));
    ΔΔ[rt.If] = Ks(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var a = b * 172;
      var g = f / Cs;
      var i = a / 2;
      d.width = f;
      d.height = a;
      e.translate(g, i);
      e.save();
      for (var j = qh; j < 10; j++) {
        e.rotate(Math.PI / br);
        e.save();
        e.translate(b * 65, 0);
        cm(e, 3, hc * b, b * 4);
        em(e, c[so]);
        e.restore();
      }
      e.restore();
      rm(e, 0, 0, b * 40);
      em(e, undefined, c[Ou], Th * b);
      rm(e, sh, so, b * 20);
      em(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[rt.jl] = Ks(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var a = b * 142;
      var g = f / 2;
      var h = a / 2;
      d.width = f;
      d.height = a;
      rm(e, g, h, b * 40);
      em(e, undefined, c[0], b * Ec);
      rm(e, g, h, b * 30);
      em(e, undefined, c[ke], b * 7);
      rm(e, g, h, b * 20);
      em(e, c[Jj]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[rt.km] = Ks(tp(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], Gc));
    ΔΔ[rt.vf] = Ks(hm(Math.PI / lf, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      nm(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      em(d, b[0], b[0], a * Oc);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      em(d, b[Jj], b[Ng], a * nc);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      em(d, b[Gc], b[du], Ss * a);
      return c;
    }(0.2, ["#FFFFFF"])));
    ΔΔ[rt.Me] = [];
    ΔΔ[rt.Me][rt.bt] = Ks(al(0.85, true, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ΔΔ[rt.Me][rt.vt] = Ks(al(0.85, Va, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ΔΔ[rt.ym] = [];
    ΔΔ[rt.ym].push(Ks(Xp(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ΔΔ[rt.ym].push(Ks(Xp(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], X)));
    ΔΔ[rt.ym].push(Ks(Xp(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ΔΔ[rt.dn] = [];
    ΔΔ[rt.dn][rt.bt] = Ks(Hp(0.37, jt, ["#2a2938", "#242330", "#313041"]));
    ΔΔ[rt.dn][rt.vt] = Ks(Hp(0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
    ΔΔ[rt.un] = [];
    ΔΔ[rt.un][rt.bt] = Ks(pp(0.17, f, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ΔΔ[rt.un][rt.vt] = Ks(pp(0.17, Hs, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ΔΔ[rt.fn] = [];
    ΔΔ[rt.fn][rt.bt] = Ks(kp(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ΔΔ[rt.fn][rt.vt] = Ks(kp(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ΔΔ[rt.mn] = [];
    ΔΔ[rt.mn][rt.bt] = Ks(kp(0.55, ho, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ΔΔ[rt.mn][rt.vt] = Ks(kp(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ΔΔ[rt.an] = [];
    ΔΔ[rt.an][rt.bt] = Ks(gp(0.2, Va, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ΔΔ[rt.an][rt.vt] = Ks(gp(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ΔΔ[rt.sn] = [];
    ΔΔ[rt.sn][rt.bt] = Ks(gp(0.2, Va, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ΔΔ[rt.sn][rt.vt] = Ks(gp(0.2, Xn, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ΔΔ[rt.rn] = [];
    ΔΔ[rt.rn][rt.bt] = Ks(gp(0.2, Vj, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ΔΔ[rt.rn][rt.vt] = Ks(gp(0.2, Va, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ΔΔ[rt.qe] = [];
    ΔΔ[rt.qe][rt.bt] = Ks(Bf(0.24, ud, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ΔΔ[rt.qe][rt.vt] = Ks(Bf(0.24, Kh, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ΔΔ[rt.Le] = [];
    ΔΔ[rt.Le][rt.bt] = Ks(Hf(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ΔΔ[rt.Le][rt.vt] = Ks(Hf(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ΔΔ[rt.We] = [];
    ΔΔ[rt.We][rt.bt] = Ks(hm(3, vp(0.9, pe, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ΔΔ[rt.We][rt.vt] = Ks(hm(oe, vp(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ΔΔ[rt.Yp] = [];
    ΔΔ[rt.Yp][rt.bt] = Ks(hm(yr, vp(fi * 1, hr, [yc, Rj, undefined, "#c8efef", "#c8efef"])));
    ΔΔ[rt.Yp][rt.vt] = Ks(hm(3, vp(1, true, [Yr, lq, Go, "#87d2e6", "#87d2e6"])));
    ΔΔ[rt.Zp] = [];
    ΔΔ[rt.Zp].push(Ks(il(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], nj)));
    ΔΔ[rt.Zp].push(Ks(il(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], hf)));
    ΔΔ[rt.Zp].push(Ks(il(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ΔΔ[rt.Rl] = [];
    ΔΔ[rt.Rl].push(Ks(Vp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ΔΔ[rt.Rl].push(Ks(Vp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[rt.Rl].push(Ks(Vp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], Ps)));
    ΔΔ[rt.Dl] = [];
    ΔΔ[rt.Dl].push(Ks(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Ka, 1)));
    ΔΔ[rt.Dl].push(Ks(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Lh, 1)));
    ΔΔ[rt.Dl].push(Ks(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], fi, 1)));
    ΔΔ[rt.El] = [];
    ΔΔ[rt.El].push(Ks(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, so)));
    ΔΔ[rt.El].push(Ks(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], au, so)));
    ΔΔ[rt.El].push(Ks(ku(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], Ej, 0)));
    ΔΔ[rt.Ee] = [];
    ΔΔ[rt.Ee][rt.bt] = Ks(hm(Ie, ul(0.7, ud, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ΔΔ[rt.Ee][rt.vt] = Ks(hm(E, ul(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ΔΔ[rt.Qe] = [];
    ΔΔ[rt.Qe][rt.bt] = Ks(hm(3, ul(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ΔΔ[rt.Qe][rt.vt] = Ks(hm(3, ul(0.7, Kh, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ΔΔ[rt.Se] = [];
    ΔΔ[rt.Se][rt.bt] = Ks(hm(3, ul(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ΔΔ[rt.Se][rt.vt] = Ks(hm(3, ul(0.7, Bc, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ΔΔ[rt.Ie] = [];
    ΔΔ[rt.Ie][rt.bt] = Ks(hm(Xg, ul(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ΔΔ[rt.Ie][rt.vt] = Ks(hm(3, ul(0.7, pe, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ΔΔ[rt.Xm] = [];
    ΔΔ[rt.Xm].push(Ks(ap(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ΔΔ[rt.Xm].push(Ks(ap(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ΔΔ[rt.Xm].push(Ks(ap(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ΔΔ[rt.Oo] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      em(d, b[0], b[nj], Ac * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      em(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      em(d, b[Oq], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ΔΔ[rt.$o] = Ks(hm(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      rm(d, a * 213.5, a * 256.75, a * 75);
      em(d, b);
      rm(d, a * 213.5, a * 175.75, a * 25);
      em(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = Yc * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = Nq * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = Qs * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * rs;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = Ki * a;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ΔΔ[rt.ne] = [];
    ΔΔ[rt.ne][rt.bt] = Ks(Kf(0.55, hr, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ΔΔ[rt.ne][rt.vt] = Ks(Kf(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", lj[sg], "#070d16"]));
    ΔΔ[rt.Re] = [];
    ΔΔ[rt.Re][rt.bt] = Ks(sl(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ΔΔ[rt.Re][rt.vt] = Ks(sl(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ΔΔ[rt.se] = [];
    ΔΔ[rt.se][rt.bt] = Ks(Lp(0.6, jt, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ΔΔ[rt.se][rt.vt] = Ks(Lp(0.6, Nh, [lj[pc], "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ΔΔ[rt.re] = [];
    ΔΔ[rt.re][rt.bt] = Ks(bp(0.58, Xn, ["#dbce71", lj[zc], "#c4bc51"]));
    ΔΔ[rt.re][rt.vt] = Ks(bp(0.58, Hs, ["#2b7c57", "#15543c", "#1a7961"]));
    ΔΔ[rt.oe] = [];
    ΔΔ[rt.oe][rt.bt] = Ks(Kp(0.69, ud, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ΔΔ[rt.oe][rt.vt] = Ks(Kp(0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ΔΔ[rt.zg] = [];
    ΔΔ[rt.zg][rt.bt] = [];
    ΔΔ[rt.zg][rt.vt] = [];
    ΔΔ[rt.zg][rt.bt].push(Ks($f(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ΔΔ[rt.zg][rt.bt].push(Ks(_p(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ΔΔ[rt.zg][rt.bt].push(Ks(rp(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ΔΔ[rt.zg][rt.vt].push(Ks($f(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ΔΔ[rt.zg][rt.vt].push(Ks(_p(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ΔΔ[rt.zg][rt.vt].push(Ks(rp(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ΔΔ[rt.dc] = [];
    ΔΔ[rt.dc][rt.bt] = Ks(Qp(Mc * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ΔΔ[rt.dc][rt.vt] = Ks(Qp(Ic * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ΔΔ[rt.uc] = [];
    ΔΔ[rt.uc][rt.bt] = Ks(lp(dm * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[rt.uc][rt.vt] = Ks(lp(X * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[rt.fc] = [];
    ΔΔ[rt.fc][rt.bt] = Ks(fp(Mc * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[rt.fc][rt.vt] = Ks(fp(1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[rt.ur] = [];
    ΔΔ[rt.ur][rt.bt] = [];
    ΔΔ[rt.ur][rt.vt] = [];
    ΔΔ[rt.ur][rt.bt] = [Δᐃ.dri, Δᐃ.mri, Δᐃ.fri, Δᐃ.pri, Δᐃ.lri, Δᐃ.bri, Δᐃ.vri, Δᐃ.yri, Δᐃ.kri, Δᐃ.Ari, Δᐃ.wri, Δᐃ.Mri, Δᐃ.Bri, Δᐃ.Dri, Δᐃ.Eri, Δᐃ.Cri, Δᐃ.zri, Δᐃ.xri, Δᐃ.Qri, Δᐃ.Sri, Δᐃ.Iri, Δᐃ._ri, Δᐃ.Fri, Δᐃ.Pri, Δᐃ.Tri, Δᐃ.jri, Δᐃ.Rri, Δᐃ.Lri, Δᐃ.Gri, Δᐃ.qri, Δᐃ.Wri, Δᐃ.Nri, Δᐃ.Hri, Δᐃ.Uri, Δᐃ.Ori, Δᐃ.Yri, Δᐃ.Jri, Δᐃ.Kri, Δᐃ.Xri, Δᐃ.Vri, Δᐃ.Zri, Δᐃ.$ri, Δᐃ.ioi, Δᐃ.toi, Δᐃ.eoi, Δᐃ.noi, Δᐃ.aoi, Δᐃ.soi, Δᐃ.roi, Δᐃ.ooi, Δᐃ.hoi, Δᐃ.goi, Δᐃ.coi, Δᐃ.doi, Δᐃ.moi, Δᐃ.uoi];
    ΔΔ[rt.ur][rt.vt] = [Δᐃ.foi, Δᐃ.poi, Δᐃ.loi, Δᐃ.boi, Δᐃ.voi, Δᐃ.yoi, Δᐃ.koi, Δᐃ.Aoi, Δᐃ.woi, Δᐃ.Moi, Δᐃ.Boi, Δᐃ.Doi, Δᐃ.Eoi, Δᐃ.Coi, Δᐃ.zoi, Δᐃ.xoi, Δᐃ.Qoi, Δᐃ.Soi, Δᐃ.Ioi, Δᐃ._oi, Δᐃ.Foi, Δᐃ.Poi, Δᐃ.Toi, Δᐃ.joi, Δᐃ.Roi, Δᐃ.Loi, Δᐃ.Goi, Δᐃ.qoi, Δᐃ.Woi, Δᐃ.Noi, Δᐃ.Hoi, Δᐃ.Uoi, Δᐃ.Ooi, Δᐃ.Yoi, Δᐃ.Joi, Δᐃ.Koi, Δᐃ.Xoi, Δᐃ.Voi, Δᐃ.Zoi, Δᐃ.$oi, Δᐃ.ihi, Δᐃ.thi, Δᐃ.ehi, Δᐃ.nhi, Δᐃ.ahi, Δᐃ.shi, Δᐃ.rhi, Δᐃ.ohi, Δᐃ.hhi, Δᐃ.ghi, Δᐃ.chi, Δᐃ.dhi, Δᐃ.mhi, Δᐃ.uhi, Δᐃ.fhi, Δᐃ.phi];
    ΔΔ[rt.Cf] = [];
    ΔΔ[rt.Cf][rt.bt] = [];
    ΔΔ[rt.Cf][rt.vt] = [];
    ΔΔ[rt.Cf][rt.bt].push(Ks(Du(1.1, Fj, ["#252B28", "#747471", "#83827e"], Ka)));
    ΔΔ[rt.Cf][rt.bt].push(Ks(Du(0.9, rr, ["#252B28", "#747471", "#83827e"], Ic)));
    ΔΔ[rt.Cf][rt.bt].push(Ks(Du(1, false, ["#252B28", "#747471", "#83827e"], 2)));
    ΔΔ[rt.Cf][rt.bt].push(Ks(Du(0.9, wo, ["#252B28", "#747471", "#83827e"], eu)));
    ΔΔ[rt.Cf][rt.vt].push(Ks(Du(1.1, wo, ["#030d14", "#123335", "#183f3f"], Ng)));
    ΔΔ[rt.Cf][rt.vt].push(Ks(Du(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ΔΔ[rt.Cf][rt.vt].push(Ks(Du(X * 1, Uo, [lj[Xo], "#123335", "#183f3f"], 2)));
    ΔΔ[rt.Cf][rt.vt].push(Ks(Du(0.9, je, [lj[Jc], "#123335", "#183f3f"], mj)));
    ΔΔ[rt.Qf] = [];
    ΔΔ[rt.Qf][rt.bt] = [];
    ΔΔ[rt.Qf][rt.vt] = [];
    ΔΔ[rt.Qf][rt.bt].push(Ks(Du(1.1, true, ["#252B28", "#58645F", "#75827D"], ec)));
    ΔΔ[rt.Qf][rt.bt].push(Ks(Du(0.9, Va, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[rt.Qf][rt.bt].push(Ks(Du(1, Vj, ["#252B28", "#58645F", "#75827D"], yo)));
    ΔΔ[rt.Qf][rt.bt].push(Ks(Du(0.9, true, ["#252B28", "#58645F", "#75827D"], Gi)));
    ΔΔ[rt.Qf][rt.vt].push(Ks(Du(1.1, true, [lj[he], "#123335", "#183f3f"], 2)));
    ΔΔ[rt.Qf][rt.vt].push(Ks(Du(0.9, hr, [lj[os], "#123335", "#183f3f"], ih)));
    ΔΔ[rt.Qf][rt.vt].push(Ks(Du(1, ud, ["#030d14", "#123335", "#183f3f"], wh)));
    ΔΔ[rt.Qf][rt.vt].push(Ks(Du(0.9, Bc, [lj[os], "#123335", "#183f3f"], 2)));
    ΔΔ[rt.Qg] = [];
    ΔΔ[rt.Qg][rt.bt] = [];
    ΔΔ[rt.Qg][rt.vt] = [];
    ΔΔ[rt.Qg][rt.bt].push(Ks(Eu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[rt.Qg][rt.bt].push(Ks(Eu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[rt.Qg][rt.bt].push(Ks(Eu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[rt.Qg][rt.vt].push(Ks(Eu(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[rt.Qg][rt.vt].push(Ks(Eu(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[rt.Qg][rt.vt].push(Ks(Eu(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[rt.Sg] = [];
    ΔΔ[rt.Sg][rt.bt] = [];
    ΔΔ[rt.Sg][rt.vt] = [];
    ΔΔ[rt.Sg][rt.bt].push(Ks(Lu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[rt.Sg][rt.bt].push(Ks(Lu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[rt.Sg][rt.bt].push(Ks(Lu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[rt.Sg][rt.vt].push(Ks(Lu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[rt.Sg][rt.vt].push(Ks(Lu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[rt.Sg][rt.vt].push(Ks(Lu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[rt.Kn] = [];
    ΔΔ[rt.Kn][rt.bt] = [];
    ΔΔ[rt.Kn][rt.vt] = [];
    ΔΔ[rt.Kn][rt.bt].push(Ks(Jp(1.7, So, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[rt.Kn][rt.bt].push(Ks(Jp(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[rt.Kn][rt.bt].push(Ks(Jp(1.3, Rd, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[rt.Kn][rt.vt].push(Ks(Jp(1.7, Xn, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[rt.Kn][rt.vt].push(Ks(Jp(1.5, Xn, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[rt.Kn][rt.vt].push(Ks(Jp(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[rt.xf] = [];
    ΔΔ[rt.xf][rt.bt] = [];
    ΔΔ[rt.xf][rt.vt] = [];
    ΔΔ[rt.xf][rt.bt].push(Ks(dp(1, ["#2d53c4"])));
    ΔΔ[rt.xf][rt.vt].push(Ks(dp(1, ["#2d53c4"])));
    ΔΔ[rt.Yf] = [];
    ΔΔ[rt.Yf][rt.bt] = [];
    ΔΔ[rt.Yf][rt.vt] = [];
    ΔΔ[rt.Yf][rt.bt].push(Ks(dp(1, ["#c4912d"])));
    ΔΔ[rt.Yf][rt.vt].push(Ks(dp(1, ["#c4912d"])));
    ΔΔ[rt.Sf] = [];
    ΔΔ[rt.Sf][rt.bt] = Ks(ml(1, ["#414040"]));
    ΔΔ[rt.Sf][rt.vt] = Ks(ml(1, ["#153635"]));
    ΔΔ[rt.vd] = [];
    ΔΔ[rt.vd][rt.bt] = Ks(ff(1, Bi, [lj[ao], "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[rt.vd][rt.vt] = Ks(ff(dm * 1, Xq, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[rt.yd] = [];
    ΔΔ[rt.yd][rt.bt] = Ks(uf(au * 1, false, [lj[uh], "#EBF2F0", "#b2d4d1", "#b2d4d1", lj[Oc], "#b2d4d1"]));
    ΔΔ[rt.yd][rt.vt] = Ks(uf(1, je, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[rt.wd] = [];
    ΔΔ[rt.wd][rt.bt] = Ks(uf(1, Xq, ["#EBF2F0", lj[Ss], "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[rt.wd][rt.vt] = Ks(uf(1, u, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[rt.Ad] = [];
    ΔΔ[rt.Ad][rt.bt] = Ks(Gf(Ko * 1, u, [lj[$o], "#EBF2F0", "#b2d4d1", "#b2d4d1", lj[wt], "#b2d4d1"]));
    ΔΔ[rt.Ad][rt.vt] = Ks(Gf(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[rt.kd] = [];
    ΔΔ[rt.kd][rt.bt] = Ks(mf(lt * 1, false, ["#EBF2F0", lj[Oc], "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[rt.kd][rt.vt] = Ks(mf(ja * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[rt.Fg] = [];
    ΔΔ[rt.Fg][rt.bt] = Ks(Ap(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ΔΔ[rt.Fg][rt.vt] = Ks(Ap(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ΔΔ[rt.oc] = [];
    ΔΔ[rt.oc][rt.bt] = Ks(Gp(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ΔΔ[rt.oc][rt.vt] = Ks(Gp(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ΔΔ[rt.Sr] = [];
    ΔΔ[rt.ob] = [];
    ΔΔ[rt.Ed] = [];
    ΔΔ[rt.hb] = [];
    for (a = Ea; Te > a; a++) {
      ΔΔ[rt.Sr][a] = document.createElement("canvas");
      ΔΔ[rt.Sr][a].width = 193;
      ΔΔ[rt.Sr][a].height = 193;
      ΔΔ[rt.ob][a] = ΔΔ[rt.Sr][a].getContext("2d");
      ΔΔ[rt.Ed][a] = document.createElement("canvas");
      ΔΔ[rt.Ed][a].width = 600;
      ΔΔ[rt.Ed][a].height = 600;
      ΔΔ[rt.hb][a] = ΔΔ[rt.Ed][a].getContext("2d");
    }
    ΔΔ[rt.Rc] = [];
    ΔΔ[rt.Rc][rt.bt] = Ks(ml(1, ["#c8e0de"]));
    ΔΔ[rt.Rc][rt.vt] = Ks(ml(1, ["#147071"]));
    ΔΔ[rt.Lc] = [];
    ΔΔ[rt.Lc][rt.bt] = Ks(ml(1, ["#231912"]));
    ΔΔ[rt.Lc][rt.vt] = Ks(ml(1, ["#021719"]));
    ΔΔ[rt.Jf] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      nm(d, a * -7, -po * a, a * 14, a * 37, zd * a);
      d.restore();
      em(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      nm(d, a * -84, a * -67, a * 168, a * 134, a * _o);
      d.restore();
      em(d, b[0], b[Oq], a * xq);
      d.save();
      d.translate(a * 223, a * 94.5);
      nm(d, -Jd * a, a * -18.5, as * a, a * 37, Xe * a);
      d.restore();
      em(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      nm(d, a * -22.5, a * -6.5, a * 45, vc * a, a * Ji);
      d.restore();
      em(d, b[sh]);
      return c;
    }(0.5, ["#BB0000"]));
    ΔΔ[rt.Bc] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * qg, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * Vh, a * 67, W * a, a * 67, Bo * a, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * os, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * we);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * Xk, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * Uh, a * 84, na * a, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, Ca * a, a * 93);
      d.closePath();
      em(d, b, b, Rh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * Vo, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * $h);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      em(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * fg, a * 137, zh * a, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      em(d, b, b, Jn * a);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[rt.Dc] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(vg * a, a * 50);
      d.bezierCurveTo(Dc * a, a * pq, a * 49, kr * a, a * 67, a * ag);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      em(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Ag * a, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      em(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      em(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[rt.Ec] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      em(d, b[Gc]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * oc, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      em(d, b[bd]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      em(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      em(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      em(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      em(d, b[Jj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      em(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      em(d, b[Sh]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      em(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      em(d, b[du]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      em(d, b[Oq]);
      return c;
    }(fn * 1, ["#BB0000"]));
    ΔΔ[rt.xc] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      em(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      em(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      em(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[rt.Qc] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      em(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      em(d, b, b, Ud * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      em(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[rt.Wo] = Ks(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var a = b * 115;
      var g = b * 4;
      d.width = f;
      d.height = a;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      em(e, c, c, g);
      return d;
    }(0.9, "#BB0000"));
    ΔΔ[rt.Vr] = Ks(bm(0.6, "#BB0000"));
    ΔΔ[rt.Zr] = Ks(bm(0.6, "#1CE7E0"));
    ΔΔ[rt.$r] = Ks(bm(0.6, "#DBE71C"));
    ΔΔ[rt.zo] = Ks(bm(0.6, "#00BB00"));
    ΔΔ[rt.ru] = [];
    ΔΔ[rt.ru][rt.bt] = Ks(ml(1, ["#dac291"]));
    ΔΔ[rt.ru][rt.vt] = Ks(ml(1, ["#0D423D"]));
    ΔΔ[rt.Kf] = [];
    ΔΔ[rt.Kf][rt.bt] = Ks(ml(1, ["#dac291"]));
    ΔΔ[rt.Kf][rt.vt] = Ks(ml(1, ["#0D423D"]));
    ΔΔ[rt.Sl] = [];
    ΔΔ[rt.Sl][rt.bt] = Ks(Xf(0.3, Hs, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ΔΔ[rt.Sl][rt.vt] = Ks(Xf(0.3, Rd, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ΔΔ[rt.ns] = [];
    ΔΔ[rt.ns][rt.bt] = Ks(Xf(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ΔΔ[rt.ns][rt.vt] = Ks(Xf(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ΔΔ[rt.ta] = [Ks(rl(1, gi, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[rt.ea] = [Ks(rl(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[rt.ou] = [];
    ΔΔ[rt.ou][rt.bt] = [];
    ΔΔ[rt.ou][rt.vt] = [];
    ΔΔ[rt.ou][rt.bt].push(Ks(Dp(1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.bt].push(Ks(up(1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.bt].push(Ks(op(X * 1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.bt].push(Ks(Zf(1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.bt].push(Ks(Cp(fn * 1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.bt].push(Ks(ol(Ps * 1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.bt].push(Ks(Vf(1, ["#0B6A84"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(Dp(wg * 1, ["#09373F"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(up(1, ["#09373F"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(op(dm * 1, ["#09373F"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(Zf(1, ["#09373F"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(Cp(Jf * 1, ["#09373F"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(ol(Mc * 1, ["#09373F"])));
    ΔΔ[rt.ou][rt.vt].push(Ks(Vf(ae * 1, ["#09373F"])));
    ΔΔ[rt.Nf] = [];
    ΔΔ[rt.Nf][rt.bt] = [];
    ΔΔ[rt.Nf][rt.vt] = [];
    ΔΔ[rt.Nf][rt.bt].push(Ks(Sf(1.7, ["#FBEFBC"], 0)));
    ΔΔ[rt.Nf][rt.bt].push(Ks(Sf(1.9, ["#FBEFBC"], dm)));
    ΔΔ[rt.Nf][rt.bt].push(Ks(Sf(1.7, ["#FBEFBC"], 2)));
    ΔΔ[rt.Nf][rt.vt].push(Ks(Sf(1.7, ["#0F4C48"], 0)));
    ΔΔ[rt.Nf][rt.vt].push(Ks(Sf(1.9, ["#0F4C48"], 1)));
    ΔΔ[rt.Nf][rt.vt].push(Ks(Sf(1.7, ["#0F4C48"], Yh)));
    ΔΔ[rt.Uf] = [];
    ΔΔ[rt.Uf][rt.bt] = [];
    ΔΔ[rt.Uf][rt.vt] = [];
    ΔΔ[rt.Uf][rt.bt].push(Ks(Sf(1.8, ["#A9D6D3"], 0)));
    ΔΔ[rt.Uf][rt.bt].push(Ks(Sf(2, ["#A9D6D3"], Lh)));
    ΔΔ[rt.Uf][rt.bt].push(Ks(Sf(1.8, ["#A9D6D3"], 2)));
    ΔΔ[rt.Uf][rt.vt].push(Ks(Sf(1.8, ["#115E60"], 0)));
    ΔΔ[rt.Uf][rt.vt].push(Ks(Sf(2, ["#115E60"], au)));
    ΔΔ[rt.Uf][rt.vt].push(Ks(Sf(1.8, ["#115E60"], 2)));
    ΔΔ[rt.Of] = [];
    ΔΔ[rt.Of][rt.bt] = [];
    ΔΔ[rt.Of][rt.vt] = [];
    ΔΔ[rt.Of][rt.bt].push(Ks(Sf(1.9, ["#2A8B9B"], 0)));
    ΔΔ[rt.Of][rt.bt].push(Ks(Sf(2.1, ["#2A8B9B"], Lh)));
    ΔΔ[rt.Of][rt.bt].push(Ks(Sf(1.9, ["#2A8B9B"], 2)));
    ΔΔ[rt.Of][rt.vt].push(Ks(Sf(1.9, ["#0F464C"], 0)));
    ΔΔ[rt.Of][rt.vt].push(Ks(Sf(2.1, ["#0F464C"], 1)));
    ΔΔ[rt.Of][rt.vt].push(Ks(Sf(1.9, ["#0F464C"], rd)));
    ΔΔ[rt.Hf] = [];
    ΔΔ[rt.Hf][rt.bt] = [];
    ΔΔ[rt.Hf][rt.vt] = [];
    ΔΔ[rt.Hf][rt.bt].push(Ks(gf(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[rt.Hf][rt.bt].push(Ks(gf(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[rt.Hf][rt.bt].push(Ks(gf(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[rt.Hf][rt.vt].push(Ks(gf(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[rt.Hf][rt.vt].push(Ks(gf(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[rt.Hf][rt.vt].push(Ks(gf(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[rt.qu] = [];
    ΔΔ[rt.qu][rt.bt] = Ks(pl(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ΔΔ[rt.qu][rt.vt] = Ks(pl(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ΔΔ[rt.Rf] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      em(d, b[du], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[rt.Bf] = [];
    ΔΔ[rt.Bf][rt.bt] = Ks(tl(0.8, Rg, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ΔΔ[rt.Bf][rt.vt] = Ks(tl(0.8, Rd, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ΔΔ[rt.Lf] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      em(d, b[0], b[Gc], Tt * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      em(d, b[Vd], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      em(d, b[bd], b[0], Sg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      em(d, b[0], b[ke], rs * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      em(d, b[0], b[0], a * Zo);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      em(d, b[0], b[qh], Ki * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      em(d, b[qh], b[Ou], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      em(d, b[0], b[so], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      em(d, b[nj], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[rt.Lv] = [];
    ΔΔ[rt.Lv][rt.bt] = Ks(zm(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], Ng));
    ΔΔ[rt.Lv][rt.vt] = Ks(zm(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], Oq));
    ΔΔ[rt.Gv] = [];
    ΔΔ[rt.Gv][rt.bt] = Ks(zm(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ΔΔ[rt.Gv][rt.vt] = Ks(zm(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ΔΔ[rt.zfi] = [];
    ΔΔ[rt.zfi][rt.bt] = Ks(zm(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ΔΔ[rt.zfi][rt.vt] = Ks(zm(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], xn));
    ΔΔ[rt.qv] = Ks(xm(0.4, ["#B6222A"]));
    ΔΔ[rt.Wv] = Ks(xm(0.4, ["#B6222A"]));
    ΔΔ[rt.xfi] = Ks(xm(0.4, ["#B6222A"]));
    ΔΔ[rt.$s] = Ks(wf(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ΔΔ[rt.Zs] = Ks(mu(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ΔΔ[rt.Mv] = [];
    ΔΔ[rt.Mv][rt.bt] = Ks(nu(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ΔΔ[rt.Mv][rt.vt] = Ks(nu(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], Jf));
    ΔΔ[rt.Bv] = [];
    ΔΔ[rt.Bv][rt.bt] = Ks(nu(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ΔΔ[rt.Bv][rt.vt] = Ks(nu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], Jj));
    ΔΔ[rt.Sv] = [];
    ΔΔ[rt.Sv][rt.bt] = Ks(lu(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[rt.Sv][rt.vt] = Ks(lu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[rt.Iv] = [];
    ΔΔ[rt.Iv][rt.bt] = Ks(ru(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[rt.Iv][rt.vt] = Ks(ru(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[rt._v] = [];
    ΔΔ[rt._v][rt.bt] = Ks(lu(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[rt._v][rt.vt] = Ks(lu(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[rt.Fv] = [];
    ΔΔ[rt.Fv][rt.bt] = Ks(ru(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[rt.Fv][rt.vt] = Ks(ru(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[rt.Dv] = Ks(iu(0.35, ["#B6222A"]));
    ΔΔ[rt.Ev] = Ks(lu(0.35, 0, [undefined, "#B6222A"]));
    ΔΔ[rt.Cv] = Ks(ru(0.35, 0, [Zg, "#B6222A"]));
    ΔΔ[rt.zv] = Ks(iu(0.35, ["#22E066"]));
    ΔΔ[rt.xv] = Ks(lu(0.35, 0, [Lr, "#22E066"]));
    ΔΔ[rt.Qv] = Ks(ru(0.35, 0, [Zg, "#22E066"]));
    ΔΔ[rt.ze] = [];
    ΔΔ[rt.ze][rt.bt] = Ks(tf(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ΔΔ[rt.ze][rt.vt] = Ks(tf(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ΔΔ[rt.Ce] = [];
    ΔΔ[rt.Ce][rt.bt] = Ks(Su(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ΔΔ[rt.Ce][rt.vt] = Ks(Su(0.45, ln, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ΔΔ[rt.pa] = [];
    ΔΔ[rt.pa][rt.bt] = Ks(mp(0.63, Un, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ΔΔ[rt.pa][rt.vt] = Ks(mp(0.63, Rg, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[rt.$n] = [];
    ΔΔ[rt.$n][rt.bt] = Ks(qp(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ΔΔ[rt.$n][rt.vt] = Ks(qp(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[rt.Hs] = [];
    ΔΔ[rt.Hs][rt.bt] = Δᐃ.kui;
    ΔΔ[rt.Hs][rt.vt] = Δᐃ.Aui;
    ΔΔ[rt.us] = [];
    ΔΔ[rt.us][rt.bt] = Ks(km(0.59, 0, ["#0d1b1c", "#44301b", lj[rc], "#523e26"]));
    ΔΔ[rt.us][rt.vt] = Ks(km(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[rt.Hb] = [ΔΔ[rt.us]];
    ΔΔ[rt.Hb][1] = [];
    ΔΔ[rt.Hb][2] = [];
    ΔΔ[rt.Hb][1][rt.bt] = Ks(ym(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[rt.Hb][1][rt.vt] = Ks(ym(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[rt.Hb][2][rt.bt] = Ks(pm(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[rt.Hb][2][rt.vt] = Ks(pm(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[rt.xe] = [];
    ΔΔ[rt.xe][rt.bt] = Ks(hm(jh - Math.PI / 2, Wp(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ΔΔ[rt.xe][rt.vt] = Ks(hm(oe - Math.PI / mj, Wp(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ΔΔ[rt.Dp] = [];
    ΔΔ[rt.Dp][rt.bt] = Ks(Um(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ΔΔ[rt.Dp][rt.vt] = Ks(Um(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], Gc));
    ΔΔ[rt.ql] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      nm(d, a * -96.5, a * -21.5, a * 193, a * 193, a * nj);
      d.restore();
      em(d, b[Ha], b[1], de * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      nm(d, a * -115.5, a * -20.5, a * 231, a * 41, Mh * a);
      d.restore();
      em(d, b[3], b[Mc], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      nm(d, a * -115.5, a * -Wo, a * 231, a * 40, a * ar);
      d.restore();
      em(d, b[3], b[Ps], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      nm(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      em(d, b[Ie], b[dm], a * md);
      d.save();
      d.translate(a * 108.5, a * 210);
      nm(d, a * -20.5, a * -109, a * 41, a * 218, a * Sg);
      d.restore();
      em(d, b[Sn], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      nm(d, a * -92, a * -9.5, a * 184, uq * a, a * 10);
      d.restore();
      em(d, b[nh], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      nm(d, a * 85, a * -9, a * -170, Bs * a, a * 10);
      d.restore();
      em(d, b[3], b[3], a * Ki);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      em(d, undefined, b[fo], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      em(d, undefined, b[Ej], md * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      em(d, undefined, b[Ej], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      em(d, undefined, b[ae], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ΔΔ[rt.Ep] = Ks(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      nm(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      em(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      nm(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      em(d, b[0], b[0], a * bs);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      nm(d, a * -96.5, a * -20.5, a * 193, a * 41, a * xn);
      d.restore();
      em(d, b[bd], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      nm(d, a * 96.5, a * -21, a * -193, a * 42, Oq * a);
      d.restore();
      em(d, b[0], b[Cm], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      nm(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      em(d, b[qh], b[Cm], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      nm(d, a * -115.5, a * -20, a * 231, a * 40, a * gg);
      d.restore();
      em(d, b[Sh], b[nj], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      nm(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      em(d, b[Jj], b[Ng], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      nm(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      em(d, b[0], b[nj], fg * a);
      return c;
    }(0.3, ["#BB0000"]));
    ΔΔ[rt.gf] = Nm(Lh, [{
      f: yp,
      x: Vd,
      y: so,
      a: 1,
      r: Js,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[rt.Ba] = Nm(1.5, [{
      f: cl,
      x: 0,
      y: Nf,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[rt.kf] = Mp(0.35, ["#072428", "#67A242", "#67A242"], bd);
    ΔΔ[rt.Af] = Mp(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], dm);
    ΔΔ[rt.wf] = Mp(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ΔΔ[rt.Mf] = Mp(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], fa);
    if (ⵠⵠΔⵠΔⵠᐃ) {
      ΔΔ[rt.Xr] = Ks(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var a = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        nm(d, nj, Sh, e, f - a, a);
        d.globalAlpha = 0.8;
        em(d, "#1D6055");
        d.globalAlpha = Lh;
        var g = Fu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(g, (e - g.width) / 2, b * Me);
        return c;
      }(1));
    } else {
      ΔΔ[rt.Xr] = Ks(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var a = b * 8;
        c.width = e;
        c.height = f + xc;
        d.beginPath();
        nm(d, Nf, Ka, e, f - a, a);
        d.globalAlpha = 0.5;
        em(d, "#1D6055");
        d.globalAlpha = 1;
        var g = Fu(b, "Leaderboard", 25, lj[hu]);
        d.drawImage(g, (e - g.width) / Yh, aq * b);
        return c;
      }(1));
    }
    if (ⵠⵠΔⵠΔⵠᐃ) {
      ΔΔ[rt.Lr] = Ks(function (b) {
        var d = document.createElement("canvas");
        var f = d.getContext("2d");
        var e = b * 335;
        var i = b * 250;
        var a = b * 120;
        var j = b * 20;
        var k = b * 35;
        var l = b * 65;
        var h = En * b;
        var g = b * 4;
        d.width = e;
        d.height = a;
        f.beginPath();
        f.translate(Js, b * 15);
        nm(f, l, 0, i, j, h);
        em(f, null, "#69A148", g);
        f.translate(Js, k);
        nm(f, l, 0, i, j, h);
        em(f, null, "#AF352A", g);
        f.translate(0, k);
        nm(f, l, 0, i, j, h);
        em(f, null, "#669BB1", g);
        return d;
      }(0.75));
    } else {
      ΔΔ[rt.Lr] = Ks(function (b) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var e = b * 950;
        var j = b * 180;
        var a = b * 50;
        var k = b * Wh;
        var l = b * 240;
        var n = b * 35;
        var h = Ps * b;
        var g = b * 4;
        var c = b * Ha;
        f.width = e;
        f.height = a;
        i.translate(0, $o * b);
        nm(i, n, h, j, k, g);
        em(i, null, "#69A148", c);
        var d = ΔΔ[rt.kf];
        i.drawImage(d, K, -Ca);
        i.translate(l, Cm);
        nm(i, n, h, j, k, g);
        em(i, null, "#AF352A", c);
        d = ΔΔ[rt.wf];
        i.drawImage(d, ce, -bc);
        i.translate(l, 0);
        nm(i, n, h, j, k, g);
        em(i, null, "#669BB1", c);
        d = ΔΔ[rt.Af];
        i.drawImage(d, mh, -8);
        i.translate(l, 0);
        nm(i, n, h, j, k, g);
        em(i, null, "#074A87", c);
        d = ΔΔ[rt.Mf];
        i.drawImage(d, pd, -Ca);
        return f;
      }(1));
    }
    if (ⵠⵠΔⵠΔⵠᐃ) {
      ΔΔ[rt.mu] = Ks(Up(0.75));
    } else {
      ΔΔ[rt.mu] = Ks(Up(1));
    }
    ΔΔ[rt.Pl] = Ks(Lp(0.16, Rd, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ΔΔ[rt.Yd] = Ks(hm(5.8, wu(0.15, oh, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ΔΔ[rt.eo] = [];
    ΔΔ[rt.zc] = [];
    for (a = nj; a < iw.Qfi + 2; a++) {
      ΔΔ[rt.zc][a] = Fu(1, "" + (a + 1), m, "#FFF");
    }
    ΔΔ[rt.sp] = [];
    ΔΔ[rt.sp].push(Ks(zp(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ΔΔ[rt.sp].push(Ks(zp(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], ae)));
    ΔΔ[rt.sp].push(Ks(zp(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], Ej)));
    ΔΔ[rt.wp] = [];
    ΔΔ[rt.wp].push(Ks(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(Jj, lf * a);
      c.translate(qh, Ji * a);
      rm(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      em(c, "#322413", "#322413", a * 4);
      c.translate(nj, a * -20);
      rm(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      em(c, "#392C16", "#5E3E1A", Mh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      em(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      em(c, "#3A2A0D");
      rm(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      em(c, lq, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      em(c, Rj, "#5E3E1A", Gt * a);
      c.translate(Ng, a * am);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      em(c, Ls, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      em(c, yc, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      em(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      em(c, _e, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      em(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      em(c, Lr, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      em(c, Rj, "#c7a726", en * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      em(c, Ug, "#c7a726", a * Po);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      em(c, S, "#c7a726", a * pa);
      c.translate(nj, a * -am);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      em(c, ug, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      em(c, Ds, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      em(c, undefined, "#EDCE4F", pa * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      em(c, undefined, "#EDCE4F", dg * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      em(c, yc, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      em(c, Rj, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      em(c, undefined, "#EDCE4F", a * Uh);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      em(c, S, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      em(c, undefined, "#EDCE4F", a * dg);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      em(c, "#704618", "#5D3D1A", am * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      em(c, "#ECBE35", "#EDCE4F", a * 8);
      rm(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      em(c, "#392C16", "#5E3E1A", a * ue);
      return b;
    }(0.22)));
    ΔΔ[rt.wp].push(Ks(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, po * a);
      rm(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      em(c, "#322413", "#322413", _n * a);
      c.translate(bd, -rq * a);
      rm(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      em(c, "#392C16", "#5E3E1A", a * gg);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      em(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      em(c, "#071A1B");
      rm(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      em(c, Ug, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      em(c, undefined, "#5E3E1A", xg * a);
      c.translate(0, a * Sm);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      em(c, ug, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      em(c, Yr, "#281C08", a * Eo);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      em(c, Oh, "#281C08", Uh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      em(c, Go, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      em(c, Ug, "#281C08", bs * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      em(c, undefined, "#281C08", md * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      em(c, undefined, "#281C08", a * Qr);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      em(c, ch, "#281C08", m * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      em(c, undefined, "#281C08", a * Dh);
      c.translate(Ka, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      em(c, Nn, "#5E3C10", a * pa);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      em(c, Zg, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      em(c, Nn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      em(c, undefined, "#5E3C10", a * pa);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      em(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      em(c, Pq, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      em(c, Ug, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      em(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      em(c, undefined, "#5E3C10", a * de);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      em(c, "#704618", "#5D3D1A", Ca * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      em(c, "#E1DDD5", "#EAE7E4", a * An);
      rm(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      em(c, "#392C16", "#5E3E1A", a * ue);
      return b;
    }(0.22)));
    ΔΔ[rt.Mp] = Ks(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, Qm * a);
      rm(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      em(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      em(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      nm(c, a * -5.5, a * -37.5, a * 11, a * 75, Sg * a);
      c.restore();
      em(c, "#C09D6F", "#A37943", a * Tt);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      nm(c, a * -10, a * -5.5, a * 20, a * 11, fo * a);
      c.restore();
      em(c, "#C09D6F");
      rm(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      em(c, "#C09D6F");
      return b;
    }(0.22));
    ΔΔ[rt.Bp] = [];
    ΔΔ[rt.Bp].push(Ks(_m(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ΔΔ[rt.Bp].push(Ks(_m(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], hf)));
    ΔΔ[rt.Bp].push(Ks(_m(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ΔΔ[rt.tm] = Δᐃ.tm;
    ΔΔ[rt.nm] = Δᐃ.nm;
    ΔΔ[rt.am] = Δᐃ.am;
    ΔΔ[rt.sm] = Δᐃ.sm;
    ΔΔ[rt.Cd] = Fu(1, "Show spectators", 25, "#FFF", Ds, undefined, "#000", 5, 220);
    ΔΔ[rt.Pd] = Fu(1, "Reconnecting...", 30, "#FFF");
    console.log(undefined, yc);
  }
  function ap(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var a = b * 140;
    d.width = f;
    d.height = a;
    d.width = b * 130;
    d.height = b * 120;
    nm(e, rf * b, b * 12, b * 110, b * 90, b * 10);
    em(e, c[0]);
    nm(e, ue * b, b * 5, b * 110, b * 90, b * 10);
    em(e, c[1], c[yo], Ac * b);
    var g = hm(-Math.PI / yh, xu(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", lj[ih], lj[rd], lj[eu], lj[Te]]));
    e.drawImage(g, Ta * b, b * 18);
    g = hm(Math.PI / 4, Ef(b * 0.55, true, ["rgba(255, 255, 255, 0)", lj[yo], lj[Cg], lj[Cs], "#FFF"]));
    e.drawImage(g, b * 36, b * fe);
    return d;
  }
  function sp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 137;
    e.height = b * 129;
    f.globalAlpha = 0.5;
    rm(f, b * 69, b * 64, b * 48.16637831516918);
    em(f, d[1]);
    f.globalAlpha = 0.7;
    rm(f, b * 69, b * 64, b * 38.23105625617661);
    em(f, d[2]);
    f.globalAlpha = 0.7;
    rm(f, b * 69, b * 64, b * 32.01562118716424);
    em(f, d[tm], d[3], b * eh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72, b * 41);
    f.bezierCurveTo(b * 52, b * 41, b * 48, b * 50, b * 45, b * 58);
    f.bezierCurveTo(b * 43, b * 67, b * 45, b * 68, b * 46, b * 72);
    f.bezierCurveTo(b * 52, b * 53, b * 60, b * 48, b * 72, b * 42);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 93, b * 62);
    f.bezierCurveTo(b * 95, b * 72, b * 90, b * 81, b * 81, b * 87);
    f.bezierCurveTo(b * 74, b * 91, b * 69, b * 89, b * 64, b * 88);
    f.bezierCurveTo(b * 77, b * 83, b * 84, b * 82, b * 92, b * 62);
    f.closePath();
    em(f, d[3]);
    return e;
  }
  function rp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    rm(d, a * 74.5, a * 85, a * 66);
    em(d, b[so]);
    d.globalAlpha = Ps;
    rm(d, a * 75.5, a * 72.5, a * 67);
    em(d, b[fo], b[ih], a * 4);
    rm(d, a * 75.5, a * 73.5, a * 54);
    em(d, b[3]);
    d.globalAlpha = 0.5;
    rm(d, a * 74.5, a * 80.5, a * 39);
    em(d, b[4]);
    d.globalAlpha = Lh;
    rm(d, a * 74.5, a * 74.5, a * 37);
    em(d, b[Cd]);
    return c;
  }
  function op(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -Oc);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    em(d, b[nj]);
    return c;
  }
  function hp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    nm(d, a * -7, -po * a, a * 14, a * 39, a * 20);
    d.restore();
    em(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    nm(d, a * -7, a * -20, a * 14, a * 37, a * zj);
    d.restore();
    em(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    nm(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    em(d, b[0], b[bd], is * a);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    nm(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    em(d, b[2], b[Yh], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    nm(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    em(d, b[3], b[hf], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    nm(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    em(d, b[Lc], b[mn], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    nm(d, a * -32, a * -59.5, a * 59, a * 119, a * Hg);
    d.restore();
    em(d, b[3], b[Ha], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    nm(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    em(d, b[3], b[ec], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    nm(d, a * -83, a * -12, a * 160, a * 24, a * Gc);
    d.restore();
    em(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    nm(d, a * -83, a * -12, a * 160, a * 24, bd * a);
    d.restore();
    em(d, b[wc]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    nm(d, a * -5, a * -18.5, gg * a, a * 37, a * 20);
    d.restore();
    em(d, b[0]);
    d.globalAlpha = Lh;
    d.save();
    d.translate(a * 223, a * 94.5);
    nm(d, -lf * a, a * -18.5, a * 10, a * 37, Hg * a);
    d.restore();
    em(d, b[ec]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    nm(d, a * -22.5, a * -6.5, a * 45, a * 13, a * Ji);
    d.restore();
    em(d, b[Nf]);
    d.globalAlpha = Ko;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    nm(d, a * -22.5, a * -6.5, a * 45, Iq * a, a * po);
    d.restore();
    em(d, b[eu]);
    return c;
  }
  function gp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 372;
    e.height = b * 358;
    f.translate(b * 0, co * b);
    f.globalAlpha = c ? 0.2 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 247.00003051757812, b * 115.76704406738281);
    f.bezierCurveTo(b * 305.0000305175781, b * 124.76704406738281, b * 335.0000305175781, b * 112.76704406738281, b * 359.0000305175781, b * 93.76704406738281);
    f.bezierCurveTo(b * 359.5000305175781, b * 113.26704406738281, b * 359.5000305175781, b * 113.26704406738281, b * 360.0000305175781, b * 132.7670440673828);
    f.bezierCurveTo(b * 339.0000305175781, b * 177.7670440673828, b * 281.0000305175781, b * 178.7670440673828, b * 243.00003051757812, b * 183.7670440673828);
    f.bezierCurveTo(b * 214.50003051757812, b * 214.2670440673828, b * 214.50003051757812, b * 214.2670440673828, b * 186.00003051757812, b * 244.7670440673828);
    f.bezierCurveTo(b * 155.00003051757812, b * 214.2670440673828, b * 155.00003051757812, b * 214.2670440673828, b * 124.00003051757812, b * 183.7670440673828);
    f.bezierCurveTo(b * 51.000030517578125, b * 180.7670440673828, b * 21.000030517578125, b * 161.7670440673828, b * 9.000030517578125, b * 129.7670440673828);
    f.bezierCurveTo(b * 8.500030517578125, b * 110.76704406738281, b * 8.500030517578125, b * 110.76704406738281, b * 8.000030517578125, b * 91.76704406738281);
    f.bezierCurveTo(b * 31.000030517578125, b * 112.76704406738281, b * 87.00003051757812, b * 119.76704406738281, b * 116.00003051757812, b * 117.76704406738281);
    f.bezierCurveTo(b * 175.00003051757812, b * 18.767044067382812, b * 170.00003051757812, b * 23.767044067382812, b * 181.00003051757812, b * 14.767044067382812);
    f.bezierCurveTo(b * 199.00003051757812, b * 34.76704406738281, b * 203.00003051757812, b * 54.76704406738281, b * 247.00003051757812, b * 115.76704406738281);
    f.closePath();
    em(f, d[0], d[Oq], jc * b);
    f.translate(b * 0, b * -ar);
    f.globalAlpha = lt;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 107.00003051757812, b * 54.13069152832031);
    f.bezierCurveTo(b * 106.50003051757812, b * 38.63069152832031, b * 106.50003051757812, b * 38.63069152832031, b * 106.00003051757812, b * 23.130691528320312);
    f.bezierCurveTo(b * 121.50003051757812, b * 38.13069152832031, b * 121.50003051757812, b * 38.13069152832031, b * 137.00003051757812, b * 53.13069152832031);
    f.closePath();
    em(f, d[wc], d[xa], b * Zo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 233.00003051757812, b * 53.6761474609375);
    f.bezierCurveTo(b * 247.00003051757812, b * 37.1761474609375, b * 247.00003051757812, b * 37.1761474609375, b * 261.0000305175781, b * 20.6761474609375);
    f.bezierCurveTo(b * 261.0000305175781, b * 36.1761474609375, b * 261.0000305175781, b * 36.1761474609375, b * 261.0000305175781, b * 51.6761474609375);
    f.closePath();
    em(f, d[rd], d[3], b * rf);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 293.0000305175781, b * 54.403411865234375);
    f.bezierCurveTo(b * 300.0000305175781, b * 49.903411865234375, b * 300.0000305175781, b * 49.903411865234375, b * 307.0000305175781, b * 45.403411865234375);
    f.bezierCurveTo(b * 307.0000305175781, b * 49.903411865234375, b * 307.0000305175781, b * 49.903411865234375, b * 307.0000305175781, b * 54.403411865234375);
    f.closePath();
    em(f, d[Yh], d[3], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 77.00003051757812, b * 54.403411865234375);
    f.bezierCurveTo(b * 70.00003051757812, b * 50.403411865234375, b * 70.00003051757812, b * 50.403411865234375, b * 63.000030517578125, b * 46.403411865234375);
    f.bezierCurveTo(b * 62.500030517578125, b * 50.903411865234375, b * 62.500030517578125, b * 50.903411865234375, b * 62.000030517578125, b * 55.403411865234375);
    f.closePath();
    em(f, d[2], d[Sr], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58.000030517578125, b * 122.3125);
    f.bezierCurveTo(b * 59.500030517578125, b * 97.3125, b * 59.500030517578125, b * 97.3125, b * 61.000030517578125, b * 72.3125);
    f.bezierCurveTo(b * 91.00003051757812, b * 89.3125, b * 91.00003051757812, b * 89.3125, b * 121.00003051757812, b * 106.3125);
    f.closePath();
    em(f, d[1], d[Ej], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 310.0000305175781, b * 127.3125);
    f.bezierCurveTo(b * 308.0000305175781, b * 98.3125, b * 308.0000305175781, b * 98.3125, b * 306.0000305175781, b * 69.3125);
    f.bezierCurveTo(b * 274.5000305175781, b * 88.8125, b * 274.5000305175781, b * 88.8125, b * 243.00003051757812, b * 108.3125);
    f.closePath();
    em(f, d[1], d[1], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 226.00003051757812, b * 87.85795593261719);
    f.bezierCurveTo(b * 243.50003051757812, b * 66.85795593261719, b * 243.50003051757812, b * 66.85795593261719, b * 261.0000305175781, b * 45.85795593261719);
    f.bezierCurveTo(b * 265.0000305175781, b * 83.85795593261719, b * 265.0000305175781, b * 83.85795593261719, b * 269.0000305175781, b * 121.85795593261719);
    f.bezierCurveTo(b * 235.00003051757812, b * 122.85795593261719, b * 233.00003051757812, b * 107.85795593261719, b * 228.00003051757812, b * 90.85795593261719);
    f.closePath();
    em(f, d[2], d[xa], b * Zo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105.00003051757812, b * 128.8579559326172);
    f.bezierCurveTo(b * 104.50003051757812, b * 87.85795593261719, b * 104.50003051757812, b * 87.85795593261719, b * 104.00003051757812, b * 46.85795593261719);
    f.bezierCurveTo(b * 126.50003051757812, b * 69.35795593261719, b * 126.50003051757812, b * 69.35795593261719, b * 149.00003051757812, b * 91.85795593261719);
    f.bezierCurveTo(b * 130.00003051757812, b * 123.85795593261719, b * 123.00003051757812, b * 132.8579559326172, b * 107.00003051757812, b * 130.8579559326172);
    f.closePath();
    em(f, d[1], d[au], no * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 59.000030517578125, b * 121.85795593261719);
    f.bezierCurveTo(b * 59.500030517578125, b * 99.35795593261719, b * 59.500030517578125, b * 99.35795593261719, b * 60.000030517578125, b * 76.85795593261719);
    f.bezierCurveTo(b * 84.00003051757812, b * 92.35795593261719, b * 84.00003051757812, b * 92.35795593261719, b * 108.00003051757812, b * 107.85795593261719);
    f.bezierCurveTo(b * 106.00003051757812, b * 148.8579559326172, b * 86.00003051757812, b * 148.8579559326172, b * 62.000030517578125, b * 123.85795593261719);
    f.closePath();
    em(f, d[rd], d[3], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105.00003051757812, b * 132.8579559326172);
    f.bezierCurveTo(b * 104.50003051757812, b * 93.35795593261719, b * 104.50003051757812, b * 93.35795593261719, b * 104.00003051757812, b * 53.85795593261719);
    f.bezierCurveTo(b * 126.50003051757812, b * 75.85795593261719, b * 126.50003051757812, b * 75.85795593261719, b * 149.00003051757812, b * 97.85795593261719);
    f.closePath();
    em(f, d[2], d[3], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 311.0000305175781, b * 126.85795593261719);
    f.bezierCurveTo(b * 309.0000305175781, b * 101.35795593261719, b * 309.0000305175781, b * 101.35795593261719, b * 307.0000305175781, b * 75.85795593261719);
    f.bezierCurveTo(b * 271.0000305175781, b * 96.85795593261719, b * 271.0000305175781, b * 96.85795593261719, b * 235.00003051757812, b * 117.85795593261719);
    f.closePath();
    em(f, d[2], d[oe], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.00003051757812, b * 96.85795593261719);
    f.bezierCurveTo(b * 244.50003051757812, b * 74.85795593261719, b * 244.50003051757812, b * 74.85795593261719, b * 261.0000305175781, b * 52.85795593261719);
    f.bezierCurveTo(b * 265.5000305175781, b * 89.85795593261719, b * 265.5000305175781, b * 89.85795593261719, b * 270.0000305175781, b * 126.85795593261719);
    f.closePath();
    em(f, d[Yh], d[3], b * jc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 12.000030517578125, b * 86.13069152832031);
    f.bezierCurveTo(b * 36.000030517578125, b * 113.13069152832031, b * 84.00003051757812, b * 111.13069152832031, b * 116.00003051757812, b * 113.13069152832031);
    f.bezierCurveTo(b * 164.00003051757812, b * 23.130691528320312, b * 172.00003051757812, b * 18.130691528320312, b * 181.00003051757812, b * 9.130691528320312);
    f.bezierCurveTo(b * 199.00003051757812, b * 29.130691528320312, b * 221.00003051757812, b * 78.13069152832031, b * 247.00003051757812, b * 112.13069152832031);
    f.bezierCurveTo(b * 301.0000305175781, b * 122.13069152832031, b * 338.0000305175781, b * 111.13069152832031, b * 359.0000305175781, b * 94.13069152832031);
    f.bezierCurveTo(b * 359.0000305175781, b * 113.13069152832031, b * 358.5000305175781, b * 105.13069152832031, b * 358.0000305175781, b * 116.13069152832031);
    f.bezierCurveTo(b * 270.5000305175781, b * 130.1306915283203, b * 270.5000305175781, b * 130.1306915283203, b * 183.00003051757812, b * 144.1306915283203);
    f.bezierCurveTo(b * 98.00003051757812, b * 128.6306915283203, b * 98.00003051757812, b * 128.6306915283203, b * 13.000030517578125, b * 113.13069152832031);
    f.closePath();
    em(f, d[1], d[Ko], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 247.00003051757812, b * 115.76704406738281);
    f.bezierCurveTo(b * 305.0000305175781, b * 124.76704406738281, b * 335.0000305175781, b * 112.76704406738281, b * 359.0000305175781, b * 93.76704406738281);
    f.bezierCurveTo(b * 359.5000305175781, b * 113.26704406738281, b * 359.5000305175781, b * 113.26704406738281, b * 360.0000305175781, b * 132.7670440673828);
    f.bezierCurveTo(b * 339.0000305175781, b * 177.7670440673828, b * 281.0000305175781, b * 178.7670440673828, b * 243.00003051757812, b * 183.7670440673828);
    f.bezierCurveTo(b * 214.50003051757812, b * 214.2670440673828, b * 214.50003051757812, b * 214.2670440673828, b * 186.00003051757812, b * 244.7670440673828);
    f.bezierCurveTo(b * 155.00003051757812, b * 214.2670440673828, b * 155.00003051757812, b * 214.2670440673828, b * 124.00003051757812, b * 183.7670440673828);
    f.bezierCurveTo(b * 51.000030517578125, b * 180.7670440673828, b * 21.000030517578125, b * 161.7670440673828, b * 9.000030517578125, b * 129.7670440673828);
    f.bezierCurveTo(b * 8.500030517578125, b * 110.76704406738281, b * 8.500030517578125, b * 110.76704406738281, b * 8.000030517578125, b * 91.76704406738281);
    f.bezierCurveTo(b * 31.000030517578125, b * 112.76704406738281, b * 87.00003051757812, b * 119.76704406738281, b * 116.00003051757812, b * 117.76704406738281);
    f.bezierCurveTo(b * 175.00003051757812, b * 18.767044067382812, b * 170.00003051757812, b * 23.767044067382812, b * 181.00003051757812, b * 14.767044067382812);
    f.bezierCurveTo(b * 199.00003051757812, b * 34.76704406738281, b * 203.00003051757812, b * 54.76704406738281, b * 247.00003051757812, b * 115.76704406738281);
    f.closePath();
    em(f, d[2], d[mq], jc * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 27.000030517578125, b * 94.76704406738281);
    f.bezierCurveTo(b * 11.000030517578125, b * 81.76704406738281, b * 31.000030517578125, b * 72.76704406738281, b * 44.000030517578125, b * 59.76704406738281);
    f.bezierCurveTo(b * 9.000030517578125, b * 65.76704406738281, b * 4.000030517578125, b * 78.76704406738281, b * 9.000030517578125, b * 89.76704406738281);
    f.closePath();
    em(f, d[mj], d[uc], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 352.0000305175781, b * 100.76705932617188);
    f.bezierCurveTo(b * 362.0000305175781, b * 92.76705932617188, b * 352.0000305175781, b * 84.76705932617188, b * 340.0000305175781, b * 68.76705932617188);
    f.bezierCurveTo(b * 360.0000305175781, b * 69.76705932617188, b * 364.0000305175781, b * 79.76705932617188, b * 364.0000305175781, b * 94.76705932617188);
    f.closePath();
    em(f, d[wg], d[1], b * 1);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 25.000030517578125, b * 97.94886779785156);
    f.bezierCurveTo(b * 2.000030517578125, b * 76.94886779785156, b * 29.000030517578125, b * 62.94886779785156, b * 44.000030517578125, b * 59.94886779785156);
    f.bezierCurveTo(b * 8.000030517578125, b * 59.94886779785156, b * -0.999969482421875, b * 81.94886779785156, b * 4.000030517578125, b * 92.94886779785156);
    f.closePath();
    em(f, d[jh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 349.0000305175781, b * 100.94886779785156);
    f.bezierCurveTo(b * 366.0000305175781, b * 82.94886779785156, b * 353.0000305175781, b * 76.94886779785156, b * 337.0000305175781, b * 67.94886779785156);
    f.bezierCurveTo(b * 366.0000305175781, b * 69.94886779785156, b * 366.0000305175781, b * 83.94886779785156, b * 363.0000305175781, b * 101.94886779785156);
    f.closePath();
    em(f, d[Gi], d[3], wd * b);
    rm(f, b * 46.000030517578125, b * 137.5852279663086, b * 9.219544457292887);
    em(f, d[4], d[Tc], b * ja);
    rm(f, b * 308.0000305175781, b * 141.5852279663086, b * 8.54400374531753);
    em(f, d[Ha], d[5], b * 1);
    rm(f, b * 92.00003051757812, b * 149.58523559570312, b * 14.866068747318506);
    em(f, d[4], d[br], fo * b);
    rm(f, b * 262.0000305175781, b * 148.8579559326172, b * 15.620499351813308);
    em(f, d[Dd], d[Tc], b * fo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 184.00003051757812, b * 68.85795593261719);
    f.bezierCurveTo(b * 203.00003051757812, b * 108.85795593261719, b * 203.00003051757812, b * 108.85795593261719, b * 222.00003051757812, b * 148.8579559326172);
    f.bezierCurveTo(b * 202.50003051757812, b * 177.8579559326172, b * 202.50003051757812, b * 177.8579559326172, b * 183.00003051757812, b * 206.8579559326172);
    f.bezierCurveTo(b * 162.00003051757812, b * 178.8579559326172, b * 162.00003051757812, b * 178.8579559326172, b * 141.00003051757812, b * 150.8579559326172);
    f.closePath();
    em(f, d[4], d[5], b * wd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 183.00003051757812, b * 104.94886779785156);
    f.bezierCurveTo(b * 192.50003051757812, b * 125.44886779785156, b * 192.50003051757812, b * 125.44886779785156, b * 202.00003051757812, b * 145.94886779785156);
    f.bezierCurveTo(b * 192.00003051757812, b * 163.94886779785156, b * 192.00003051757812, b * 163.94886779785156, b * 182.00003051757812, b * 181.94886779785156);
    f.bezierCurveTo(b * 172.50003051757812, b * 164.44886779785156, b * 172.50003051757812, b * 164.44886779785156, b * 163.00003051757812, b * 146.94886779785156);
    f.closePath();
    em(f, d[6]);
    return e;
  }
  function cp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 218;
    e.height = b * 185;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 64, b * 53.135406494140625);
    f.bezierCurveTo(b * 92, b * 17.135406494140625, b * 116, b * 11.135406494140625, b * 158, b * 53.135406494140625);
    f.bezierCurveTo(b * 178, b * 74.13540649414062, b * 181, b * 81.13540649414062, b * 196, b * 101.13540649414062);
    f.bezierCurveTo(b * 214, b * 127.13540649414062, b * 192, b * 138.13540649414062, b * 173, b * 149.13540649414062);
    f.bezierCurveTo(b * 137, b * 166.13540649414062, b * 74, b * 170.13540649414062, b * 36, b * 141.13540649414062);
    f.bezierCurveTo(b * xq, b * 127.13540649414062, b * 20, b * 119.13540649414062, b * 30, b * 103.13540649414062);
    f.bezierCurveTo(b * 48, b * 71.13540649414062, b * 54, b * 67.13540649414062, b * 63, b * 54.135406494140625);
    f.closePath();
    em(f, d[bd], d[fo], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 107, b * 25.135406494140625);
    f.bezierCurveTo(b * 62, b * 90.13540649414062, b * 54, b * 129.13540649414062, b * 53, b * 151.13540649414062);
    f.bezierCurveTo(b * 39.5, b * 142.13540649414062, b * 39.5, b * 142.13540649414062, b * 26, b * 133.13540649414062);
    f.bezierCurveTo(b * 23.5, b * 128.63540649414062, b * 23.5, b * 128.63540649414062, b * 21, b * 124.13540649414062);
    f.bezierCurveTo(b * 22, b * 113.13540649414062, b * 31, b * 99.13540649414062, b * 40, b * 88.13540649414062);
    f.bezierCurveTo(b * 54.5, b * 67.13540649414062, b * 54.5, b * 67.13540649414062, b * 69, b * 46.135406494140625);
    f.bezierCurveTo(b * 80.5, b * 36.635406494140625, b * 80.5, b * 36.635406494140625, b * 92, b * 27.135406494140625);
    f.closePath();
    em(f, d[Ps]);
    return e;
  }
  function dp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * Kn;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, xn, c.width, c.height);
    return c;
  }
  function mp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 163;
    e.height = b * 163;
    f.save();
    f.translate(b * 82.5, b * 81.1015625);
    f.rotate(xn);
    nm(f, b * -65.5, b * -66, b * 131, b * 131, b * Me);
    f.restore();
    em(f, d[Ko]);
    f.globalAlpha = c ? 0.5 : Lh;
    f.translate(et * b, b * 5);
    f.save();
    f.translate(b * 80, b * 17.1015625);
    nm(f, b * -64, b * -4.5, b * 129, b * Qo, b * 5);
    f.restore();
    em(f, d[Vd]);
    f.globalAlpha = 1;
    f.translate(-Nu * b, b * -5);
    f.save();
    f.translate(b * 80, b * 17.1015625);
    nm(f, b * -64, b * -4.5, b * 129, sg * b, b * 5);
    f.restore();
    em(f, d[2], d[3], b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * 5, Qm * b);
    f.save();
    f.translate(b * 145.5, b * 83.6015625);
    nm(f, b * -4.5, b * -61, wn * b, b * 129, b * 5);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = X;
    f.translate(b * -Jd, -Y * b);
    f.save();
    f.translate(b * 145.5, b * 83.6015625);
    nm(f, b * -4.5, b * -61, b * 9, b * 129, b * 5);
    f.restore();
    em(f, d[2], d[3], b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * 5, b * Gj);
    f.save();
    f.translate(b * 17.5, b * 82.6015625);
    nm(f, b * -4.5, b * -65, b * 9, b * 129, b * Cd);
    f.restore();
    em(f, d[Ng]);
    f.globalAlpha = 1;
    f.translate(b * -Me, -lh * b);
    f.save();
    f.translate(b * 17.5, b * 82.6015625);
    nm(f, b * -4.5, b * -65, Gq * b, b * 129, Y * b);
    f.restore();
    em(f, d[2], d[pg], b * jh);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * Qm, Gj * b);
    f.save();
    f.translate(b * 80.5, b * 145.6015625);
    nm(f, b * -65.5, b * -eh, b * 129, b * 9, b * dh);
    f.restore();
    em(f, d[ke]);
    f.globalAlpha = 1;
    f.translate(b * -5, -lh * b);
    f.save();
    f.translate(b * 80.5, b * 145.6015625);
    nm(f, b * -65.5, -Jr * b, b * 129, b * 9, b * Tc);
    f.restore();
    em(f, d[Yh], d[3], b * Ie);
    f.globalAlpha = c ? 0.5 : au;
    f.translate(b * aq, b * 5);
    f.save();
    f.translate(b * 17, b * 18.1015625);
    nm(f, b * -11, b * -11.5, b * 22, b * 22, qn * b);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * -5, -et * b);
    f.save();
    f.translate(b * Xj, b * 18.1015625);
    nm(f, b * -11, b * -11.5, b * 22, b * 22, b * 5);
    f.restore();
    em(f, d[Te], d[Sr], b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * aq, b * 5);
    f.save();
    f.translate(b * 145.5, b * 16.6015625);
    nm(f, b * -10.5, b * -11.5, b * 21, b * 22, b * 5);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = Ko;
    f.translate(b * -5, b * -dh);
    f.save();
    f.translate(b * 145.5, b * 16.6015625);
    nm(f, b * -10.5, b * -11.5, b * 21, b * 22, b * 5);
    f.restore();
    em(f, d[hu], d[3], Wc * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * 5, b * 5);
    f.save();
    f.translate(b * 145.5, b * 144.1015625);
    nm(f, b * -10.5, -Wd * b, b * 22, b * 22, b * 5);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * -5, b * -5);
    f.save();
    f.translate(b * 145.5, b * 144.1015625);
    nm(f, b * -10.5, -Kc * b, b * 22, b * 22, Qm * b);
    f.restore();
    em(f, d[2], d[on], pg * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * lh, b * 5);
    f.save();
    f.translate(b * 17.5, b * 145.1015625);
    nm(f, b * -11.5, b * -Pg, b * 22, b * 22, b * 5);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = Mc;
    f.translate(b * -lh, -aq * b);
    f.save();
    f.translate(b * 17.5, b * 145.1015625);
    nm(f, b * -11.5, b * -C, b * 22, b * 22, b * 5);
    f.restore();
    em(f, d[wc], d[3], b * Ie);
    return e;
  }
  function up(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    em(d, b[0]);
    return c;
  }
  function fp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    em(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    em(d, b[Gi], b[yr], Jr * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    em(d, b[2]);
    return c;
  }
  function pp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 465;
    e.height = b * 405;
    f.globalAlpha = 1;
    f.translate(ei * b, b * Gc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39.000030517578125, b * 162.03977966308594);
    f.bezierCurveTo(b * 125.00003051757812, b * 84.03977966308594, b * 108.50003051757812, b * 115.03977966308594, b * 178.00003051757812, b * 68.03977966308594);
    f.bezierCurveTo(b * 299.0000305175781, b * 146.53977966308594, b * 299.0000305175781, b * 146.53977966308594, b * 420.0000305175781, b * 225.03977966308594);
    f.bezierCurveTo(b * 400.0000305175781, b * 288.53977966308594, b * 400.0000305175781, b * 288.53977966308594, b * 380.0000305175781, b * 352.03977966308594);
    f.bezierCurveTo(b * 216.50003051757812, b * 345.53977966308594, b * 216.50003051757812, b * 345.53977966308594, b * 53.000030517578125, b * 339.03977966308594);
    f.closePath();
    em(f, d[Sr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 23.000030517578125, b * 306.94886779785156);
    f.bezierCurveTo(b * 5.000030517578125, b * 275.94886779785156, b * 6.000030517578125, b * 201.94886779785156, b * 14.000030517578125, b * 150.94886779785156);
    f.bezierCurveTo(b * 40.000030517578125, b * 34.94886779785156, b * 157.00003051757812, b * 14.948867797851562, b * 199.00003051757812, b * 11.948867797851562);
    f.bezierCurveTo(b * 331.0000305175781, b * 0.9488677978515625, b * 409.0000305175781, b * 61.94886779785156, b * 428.0000305175781, b * 133.94886779785156);
    f.bezierCurveTo(b * 445.0000305175781, b * 207.94886779785156, b * 439.0000305175781, b * 274.94886779785156, b * 426.0000305175781, b * 342.94886779785156);
    f.bezierCurveTo(b * 355.0000305175781, b * 207.94886779785156, b * 345.0000305175781, b * 208.94886779785156, b * 333.0000305175781, b * 202.94886779785156);
    f.bezierCurveTo(b * 262.0000305175781, b * 143.94886779785156, b * 236.00003051757812, b * 148.94886779785156, b * 189.00003051757812, b * 162.94886779785156);
    f.bezierCurveTo(b * 82.00003051757812, b * 190.94886779785156, b * 78.00003051757812, b * 235.94886779785156, b * 62.000030517578125, b * 279.94886779785156);
    f.closePath();
    em(f, d[ke], d[ja], b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 17.000030517578125, b * 149.94886779785156);
    f.bezierCurveTo(b * 76.00003051757812, b * 67.94886779785156, b * 177.00003051757812, b * 40.94886779785156, b * 232.00003051757812, b * 45.94886779785156);
    f.bezierCurveTo(b * 316.0000305175781, b * 46.94886779785156, b * 359.0000305175781, b * 74.94886779785156, b * 428.0000305175781, b * 145.94886779785156);
    f.bezierCurveTo(b * 414.0000305175781, b * 73.94886779785156, b * 386.0000305175781, b * 68.94886779785156, b * 359.0000305175781, b * 43.94886779785156);
    f.bezierCurveTo(b * 295.0000305175781, b * 5.9488677978515625, b * 239.00003051757812, b * 10.948867797851562, b * 207.00003051757812, b * 10.948867797851562);
    f.bezierCurveTo(b * 121.00003051757812, b * 20.948867797851562, b * 104.00003051757812, b * 34.94886779785156, b * 45.000030517578125, b * 84.94886779785156);
    f.bezierCurveTo(b * 14.000030517578125, b * 128.94886779785156, b * 18.000030517578125, b * 142.94886779785156, b * 16.000030517578125, b * 151.94886779785156);
    f.closePath();
    em(f, d[tm]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 23.000030517578125, b * 306.94886779785156);
    f.bezierCurveTo(b * 5.000030517578125, b * 275.94886779785156, b * 6.000030517578125, b * 201.94886779785156, b * 14.000030517578125, b * 150.94886779785156);
    f.bezierCurveTo(b * 40.000030517578125, b * 34.94886779785156, b * 157.00003051757812, b * 14.948867797851562, b * 199.00003051757812, b * 11.948867797851562);
    f.bezierCurveTo(b * 331.0000305175781, b * 0.9488677978515625, b * 409.0000305175781, b * 61.94886779785156, b * 428.0000305175781, b * 133.94886779785156);
    f.bezierCurveTo(b * 445.0000305175781, b * 207.94886779785156, b * 439.0000305175781, b * 274.94886779785156, b * 426.0000305175781, b * 342.94886779785156);
    f.bezierCurveTo(b * 355.0000305175781, b * 207.94886779785156, b * 345.0000305175781, b * 208.94886779785156, b * 333.0000305175781, b * 202.94886779785156);
    f.bezierCurveTo(b * 262.0000305175781, b * 143.94886779785156, b * 236.00003051757812, b * 148.94886779785156, b * 189.00003051757812, b * 162.94886779785156);
    f.bezierCurveTo(b * 82.00003051757812, b * 190.94886779785156, b * 78.00003051757812, b * 235.94886779785156, b * 62.000030517578125, b * 279.94886779785156);
    f.closePath();
    em(f, undefined, d[1], b * 16);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 60.000030517578125, b * 288.03977966308594);
    f.bezierCurveTo(b * 183.00003051757812, b * 320.03977966308594, b * 342.0000305175781, b * 306.03977966308594, b * 399.0000305175781, b * 286.03977966308594);
    f.bezierCurveTo(b * 420.0000305175781, b * 345.03977966308594, b * 410.0000305175781, b * 335.03977966308594, b * 415.0000305175781, b * 362.03977966308594);
    f.bezierCurveTo(b * 351.0000305175781, b * 384.03977966308594, b * 299.0000305175781, b * 389.03977966308594, b * 215.00003051757812, b * 391.03977966308594);
    f.bezierCurveTo(b * 128.00003051757812, b * 388.03977966308594, b * 69.00003051757812, b * 373.03977966308594, b * 39.000030517578125, b * 359.03977966308594);
    f.closePath();
    em(f, d[0], d[Ps], b * 13);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 47.000030517578125, b * 327.03977966308594);
    f.bezierCurveTo(b * 203.00003051757812, b * 377.03977966308594, b * 331.0000305175781, b * 349.03977966308594, b * 410.0000305175781, b * 330.03977966308594);
    f.closePath();
    em(f, d[Sh], d[Lh], b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 9.000030517578125, b * 339.1306915283203);
    f.bezierCurveTo(b * 2.000030517578125, b * 280.1306915283203, b * 30.000030517578125, b * 219.1306915283203, b * 85.00003051757812, b * 167.1306915283203);
    f.bezierCurveTo(b * 174.00003051757812, b * 82.13069152832031, b * 241.00003051757812, b * 101.13069152832031, b * 284.0000305175781, b * 115.13069152832031);
    f.bezierCurveTo(b * 333.0000305175781, b * 134.1306915283203, b * 376.0000305175781, b * 177.1306915283203, b * 410.0000305175781, b * 247.1306915283203);
    f.bezierCurveTo(b * 439.0000305175781, b * 300.1306915283203, b * 442.0000305175781, b * 346.1306915283203, b * 430.0000305175781, b * 363.1306915283203);
    f.bezierCurveTo(b * 418.0000305175781, b * 366.1306915283203, b * 395.0000305175781, b * 295.1306915283203, b * 355.0000305175781, b * 223.1306915283203);
    f.bezierCurveTo(b * 299.0000305175781, b * 156.1306915283203, b * 262.0000305175781, b * 155.1306915283203, b * 215.00003051757812, b * 159.1306915283203);
    f.bezierCurveTo(b * 133.00003051757812, b * 171.1306915283203, b * 120.00003051757812, b * 193.1306915283203, b * 96.00003051757812, b * 221.1306915283203);
    f.bezierCurveTo(b * 49.000030517578125, b * 262.1306915283203, b * 47.000030517578125, b * 306.1306915283203, b * 38.000030517578125, b * 336.1306915283203);
    f.bezierCurveTo(b * 30.000030517578125, b * 349.1306915283203, b * 30.000030517578125, b * 349.1306915283203, b * 22.000030517578125, b * 362.1306915283203);
    f.closePath();
    em(f, d[2], d[1], b * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.00003051757812, b * 128.03977966308594);
    f.bezierCurveTo(b * 315.0000305175781, b * 131.03977966308594, b * 349.0000305175781, b * 178.03977966308594, b * 386.0000305175781, b * 234.03977966308594);
    f.bezierCurveTo(b * 444.0000305175781, b * 329.03977966308594, b * 446.0000305175781, b * 354.03977966308594, b * 427.0000305175781, b * 373.03977966308594);
    f.bezierCurveTo(b * 389.0000305175781, b * 389.03977966308594, b * 399.0000305175781, b * 329.03977966308594, b * 361.0000305175781, b * 277.03977966308594);
    f.bezierCurveTo(b * 306.0000305175781, b * 191.03977966308594, b * 266.0000305175781, b * 183.03977966308594, b * 220.00003051757812, b * 181.03977966308594);
    f.bezierCurveTo(b * 138.00003051757812, b * 184.03977966308594, b * 123.00003051757812, b * 212.03977966308594, b * 89.00003051757812, b * 271.03977966308594);
    f.bezierCurveTo(b * 52.000030517578125, b * 349.03977966308594, b * 68.00003051757812, b * 364.03977966308594, b * 33.000030517578125, b * 369.03977966308594);
    f.bezierCurveTo(b * 6.000030517578125, b * 366.03977966308594, b * 5.000030517578125, b * 341.03977966308594, b * 26.000030517578125, b * 288.03977966308594);
    f.bezierCurveTo(b * 60.000030517578125, b * 207.03977966308594, b * 100.00003051757812, b * 180.03977966308594, b * 113.00003051757812, b * 170.03977966308594);
    f.bezierCurveTo(b * 159.00003051757812, b * 132.03977966308594, b * 196.00003051757812, b * 133.03977966308594, b * 226.00003051757812, b * 129.03977966308594);
    f.closePath();
    em(f, d[Jj], d[au], b * Wh);
    return e;
  }
  function lp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    em(d, b[X]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    em(d, b[2], b[3], _g * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    em(d, b[lr]);
    return c;
  }
  function bp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 142;
    e.height = b * 118;
    f.save();
    f.translate(b * 70.16665649414062, b * 38.20831298828125);
    nm(f, b * -58.5, b * -27.5, b * 117, b * 55, b * 20);
    f.restore();
    em(f, d[0], d[fi], bq * b);
    f.save();
    f.translate(b * 70, b * 42.70831298828125);
    nm(f, b * -61, b * -yg, b * 122, b * 40, to * b);
    f.restore();
    em(f, d[2], d[1], Ha * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 123, b * 70.375);
    f.bezierCurveTo(b * 115, b * 99.375, b * 119, b * 85.375, b * 115, b * 100.375);
    f.bezierCurveTo(b * 112, b * 116.375, b * 117, b * 109.375, b * 131, b * 100.375);
    f.bezierCurveTo(b * 131, b * 83.375, b * 131, b * 83.375, b * 131, b * 66.375);
    f.closePath();
    em(f, d[2], d[yd], Ha * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 11, b * 68.375);
    f.bezierCurveTo(b * 11.166656494140625, b * 84.375, b * 9, b * 99.375, b * Mh, b * 100.375);
    f.bezierCurveTo(b * 35, b * 113.375, b * 27, b * 110.375, b * 25, b * 95.375);
    f.bezierCurveTo(b * 16, b * 68.375, b * 17, b * 69.375, ce * b, b * 68.375);
    f.closePath();
    em(f, d[2], d[hf], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 46, b * 32.375);
    f.bezierCurveTo(b * 43, b * 8.375, b * 45, b * 7.375, b * 56, b * 6.375);
    f.bezierCurveTo(b * 105, b * 4.375, b * 102, b * 6.375, b * 97, b * 32.375);
    f.bezierCurveTo(b * 138, b * 43.375, b * 133, b * 45.375, b * 133, b * 58.375);
    f.bezierCurveTo(b * 133, b * 85.375, b * 125, b * 74.375, b * 111, b * 70.375);
    f.bezierCurveTo(b * 70, b * 69.875, b * 29, b * 69.375, b * 29, b * 69.375);
    f.bezierCurveTo(b * Kr, b * 84.375, b * 7, b * 70.375, om * b, b * 59.375);
    f.bezierCurveTo(b * Ae, b * 28.375, b * 32, b * 39.375, b * 44, b * 32.375);
    f.closePath();
    em(f, d[tm], d[Ic], Ld * b);
    rm(f, b * 71, b * 44.375, b * 16.55294535724685);
    em(f, d[Vn], d[1], b * 4);
    rm(f, b * 71, b * 43.70831298828125, b * 8.94427190999916);
    em(f, d[Gi], d[1], b * 4);
    return e;
  }
  function vp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 46;
    e.height = b * 140;
    f.scale(-fn * b, b * 1);
    f.translate(b * -50, b * 40);
    f.translate(b * -20, Js);
    f.globalAlpha = c ? 0.5 : ae;
    f.translate(rf * b, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 22.599990844726562, b * 85.94999694824219);
    f.bezierCurveTo(b * 17.599990844726562, b * 83.94999694824219, b * 17.599990844726562, b * 83.94999694824219, b * 12.599990844726562, b * 81.94999694824219);
    f.bezierCurveTo(b * 19.599990844726562, b * 73.94999694824219, b * 2.5999908447265625, b * 22.949996948242188, b * 33.59999084472656, b * 7.9499969482421875);
    f.bezierCurveTo(b * 27.599990844726562, b * 28.949996948242188, b * 33.59999084472656, b * 26.949996948242188, b * 35.59999084472656, b * 32.94999694824219);
    f.bezierCurveTo(b * 25.599990844726562, b * 59.94999694824219, b * 26.599990844726562, b * 69.94999694824219, b * 29.599990844726562, b * 82.94999694824219);
    f.closePath();
    em(f, d[qh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * -1, 0);
    f.moveTo(b * 17.599990844726562, b * 89.75);
    f.bezierCurveTo(b * 24.599990844726562, b * 99.75, b * 24.599990844726562, b * 101.75, b * 20.599990844726562, b * 111.75);
    f.bezierCurveTo(b * 28.599990844726562, b * 110.75, b * 26.599990844726562, b * 112.75, b * 28.599990844726562, b * 111.75);
    f.bezierCurveTo(b * 30.599990844726562, b * 96.75, b * 32.59999084472656, b * 96.75, b * 30.599990844726562, b * 87.75);
    f.closePath();
    em(f, d[Sh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * Jf, 0);
    f.moveTo(b * 7.5999908447265625, b * 86.34999084472656);
    f.bezierCurveTo(b * 12.599990844726562, b * 85.34999084472656, b * 14.599990844726562, b * 84.34999084472656, b * 13.599990844726562, b * 84.34999084472656);
    f.bezierCurveTo(b * 21.599990844726562, b * 83.34999084472656, b * 21.599990844726562, b * 83.34999084472656, b * 29.599990844726562, b * 82.34999084472656);
    f.bezierCurveTo(b * 33.59999084472656, b * 85.84999084472656, b * 33.59999084472656, b * 85.84999084472656, b * 37.59999084472656, b * 89.34999084472656);
    f.bezierCurveTo(b * 34.09999084472656, b * 91.84999084472656, b * 34.09999084472656, b * 91.84999084472656, b * 30.599990844726562, b * 94.34999084472656);
    f.bezierCurveTo(b * 21.099990844726562, b * 93.34999084472656, b * 21.099990844726562, b * 93.34999084472656, b * 11.599990844726562, b * 92.34999084472656);
    f.closePath();
    em(f, d[0]);
    f.save();
    f.translate(b * 23.599990844726562, b * 110.94999694824219);
    f.rotate(Nf);
    nm(f, b * -Ih, -Gs * b, b * 14, b * Fg, b * 10);
    f.restore();
    em(f, d[0]);
    f.translate(Gc * b, 0);
    f.globalAlpha = Ko;
    f.translate(b * 10, xn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 22.599990844726562, b * 85.94999694824219);
    f.bezierCurveTo(b * 17.599990844726562, b * 83.94999694824219, b * 17.599990844726562, b * 83.94999694824219, b * 12.599990844726562, b * 81.94999694824219);
    f.bezierCurveTo(b * 19.599990844726562, b * 73.94999694824219, b * 2.5999908447265625, b * 22.949996948242188, b * 33.59999084472656, b * 7.9499969482421875);
    f.bezierCurveTo(b * 27.599990844726562, b * 28.949996948242188, b * 33.59999084472656, b * 26.949996948242188, b * 35.59999084472656, b * 32.94999694824219);
    f.bezierCurveTo(b * 25.599990844726562, b * 59.94999694824219, b * 26.599990844726562, b * 69.94999694824219, b * 29.599990844726562, b * 82.94999694824219);
    f.closePath();
    em(f, d[E], d[4], b * Lc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * -1, Ng);
    f.moveTo(b * 17.599990844726562, b * 89.75);
    f.bezierCurveTo(b * 24.599990844726562, b * 99.75, b * 24.599990844726562, b * 101.75, b * 20.599990844726562, b * 111.75);
    f.bezierCurveTo(b * 28.599990844726562, b * 110.75, b * 26.599990844726562, b * 112.75, b * 28.599990844726562, b * 111.75);
    f.bezierCurveTo(b * 30.599990844726562, b * 96.75, b * 32.59999084472656, b * 96.75, b * 30.599990844726562, b * 87.75);
    f.closePath();
    em(f, d[1], d[2], b * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * Ps, Ou);
    f.moveTo(b * 7.5999908447265625, b * 86.34999084472656);
    f.bezierCurveTo(b * 12.599990844726562, b * 85.34999084472656, b * 14.599990844726562, b * 84.34999084472656, b * 13.599990844726562, b * 84.34999084472656);
    f.bezierCurveTo(b * 21.599990844726562, b * 83.34999084472656, b * 21.599990844726562, b * 83.34999084472656, b * 29.599990844726562, b * 82.34999084472656);
    f.bezierCurveTo(b * 33.59999084472656, b * 85.84999084472656, b * 33.59999084472656, b * 85.84999084472656, b * 37.59999084472656, b * 89.34999084472656);
    f.bezierCurveTo(b * 34.09999084472656, b * 91.84999084472656, b * 34.09999084472656, b * 91.84999084472656, b * 30.599990844726562, b * 94.34999084472656);
    f.bezierCurveTo(b * 21.099990844726562, b * 93.34999084472656, b * 21.099990844726562, b * 93.34999084472656, b * 11.599990844726562, b * 92.34999084472656);
    f.closePath();
    em(f, d[1], d[ih], Wc * b);
    f.save();
    f.translate(b * 23.599990844726562, b * 110.94999694824219);
    f.rotate(0);
    nm(f, b * -7, b * -4, b * 14, b * 8, b * Tt);
    f.restore();
    em(f, d[dm], d[2], b * Wc);
    return e;
  }
  function yp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 170;
    f.translate(0, b * -170);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 159.5, b * 322.0625);
    f.bezierCurveTo(b * 240.5, b * 293.0625, b * 240.5, b * 293.0625, b * 321.5, b * 264.0625);
    f.bezierCurveTo(b * 276.5, b * 230.0625, b * 276.5, b * 230.0625, b * 231.5, b * 196.0625);
    f.bezierCurveTo(b * 158.5, b * 221.5625, b * 158.5, b * 221.5625, b * 85.5, b * 247.0625);
    f.closePath();
    em(f, d[Sh], d[1], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 212.5, b * 270.0625);
    f.bezierCurveTo(b * 235, b * 261.5625, b * 235, b * 261.5625, b * 257.5, b * 253.0625);
    f.closePath();
    em(f, Ds, d[0], en * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 193.5, b * 226.0625);
    f.bezierCurveTo(b * 204.5, b * 242.0625, b * 242.5, b * 237.0625, b * 251.5, b * 225.0625);
    f.bezierCurveTo(b * 246.5, b * 195.0625, b * 205.5, b * 190.0625, b * 193.5, b * 227.0625);
    f.closePath();
    em(f, d[Cs], d[Sn], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 164.5, b * 245.0625);
    f.bezierCurveTo(b * 182.5, b * 264.0625, b * 252.5, b * 258.0625, b * 276.5, b * 244.0625);
    f.bezierCurveTo(b * 265.5, b * 226.0625, b * 244.5, b * 231.0625, b * 229.5, b * 230.0625);
    f.bezierCurveTo(b * 205.5, b * 227.0625, b * 175.5, b * 202.0625, b * 162.5, b * 244.0625);
    f.closePath();
    em(f, d[ec], d[uc], b * fg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115.5, b * 260.0625);
    f.bezierCurveTo(b * 134.5, b * 279.0625, b * 170.5, b * 275.0625, b * 191.5, b * 257.0625);
    f.bezierCurveTo(b * 174.5, b * 208.0625, b * 142.5, b * 197.0625, b * 116.5, b * 259.0625);
    f.closePath();
    em(f, d[2], d[3], md * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 152.5, b * 278.0625);
    f.bezierCurveTo(b * 165.5, b * 294.0625, b * 200.5, b * 287.0625, b * 216.5, b * 278.0625);
    f.bezierCurveTo(b * 206.5, b * 247.0625, b * 173.5, b * 233.0625, b * 153.5, b * 276.0625);
    f.closePath();
    em(f, d[eu], d[xa], b * 12);
    return e;
  }
  function kp(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    a.globalAlpha = c ? 0.5 : 1;
    a.translate(0, b * 6);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 44, b * 76);
    a.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    a.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    a.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    a.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    a.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    a.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    a.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    a.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    a.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    a.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    a.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    a.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    a.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    a.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    a.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    a.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    a.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    a.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    a.closePath();
    em(a, d[Oq]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 36, b * 80);
    a.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, io * b);
    a.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    a.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    a.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    a.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    a.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    a.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    a.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    a.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    a.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    a.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    a.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    a.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    a.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    a.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    a.bezierCurveTo(b * 168, Jo * b, b * 170, b * 92, b * 169, b * 85);
    a.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    a.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    a.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    a.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    a.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, oc * b);
    a.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    a.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    a.closePath();
    em(a, d[0]);
    a.globalAlpha = 1;
    a.translate(Ea, b * -6);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 36, b * 80);
    a.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * B);
    a.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    a.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    a.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    a.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    a.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    a.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    a.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    a.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    a.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    a.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    a.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    a.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    a.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    a.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    a.bezierCurveTo(b * 168, b * wr, b * 170, b * 92, b * 169, b * 85);
    a.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    a.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    a.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    a.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    a.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, fc * b);
    a.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    a.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    a.closePath();
    em(a, d[Lo], d[Cg], Rh * b);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 49, b * 98);
    a.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    a.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    a.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    a.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    a.closePath();
    em(a, d[1]);
    a.globalAlpha = 0.5;
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 54, b * 98);
    a.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    a.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    a.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    a.closePath();
    em(a, d[Ka]);
    a.globalAlpha = ae;
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 118, b * 47);
    a.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    a.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    a.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    a.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    a.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    a.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    a.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    a.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    a.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * sj);
    a.bezierCurveTo(b * 44, b * Nf, b * 35, b * 20, b * 33, b * 37);
    a.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    a.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    a.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    a.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    a.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    a.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    a.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    a.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    a.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    a.closePath();
    em(a, d[lt], d[2], b * 6);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 62, b * 21);
    a.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    a.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    a.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    a.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    a.closePath();
    em(a, d[bq]);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 60, b * 29);
    a.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    em(a, Zg, d[3], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 61, b * 37);
    a.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    em(a, ug, d[Lc], b * _n);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 52, b * 31);
    a.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    em(a, lq, d[oe], b * _g);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 46, b * 35);
    a.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    em(a, Yr, d[3], b * Gm);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 58, b * 44);
    a.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    em(a, Ls, d[3], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 53, b * 48);
    a.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    em(a, undefined, d[nh], Dd * b);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 46, b * 41);
    a.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    em(a, undefined, d[3], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 48, b * 48);
    a.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    em(a, undefined, d[Qe], b * 4);
    if (e == 0) {
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 99, b * 101);
      a.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      a.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      em(a, undefined, d[5], b * 6);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      a.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      a.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      em(a, Ls, d[aq], b * 6);
    } else {
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 103, b * 100.39999389648438);
      a.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      em(a, lq, d[5], b * 6);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(b * 103, b * 100.39999389648438);
      a.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      em(a, A, d[aq], b * 6);
      rm(a, b * 86, b * 114.39999389648438, b * 4.5);
      em(a, d[1], d[5], Nd * b);
      rm(a, b * 121, b * 114.39999389648438, b * 4.5);
      em(a, d[Ic], d[Au], b * 6);
    }
    return f;
  }
  function Ap(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(du, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, aa * a, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * vc, a * 67, a * Iq, a * 67, xr * a, a * 59);
    d.bezierCurveTo(Zn * a, a * 59, Yn * a, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * bs, a * 84, a * Fo, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * rh, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    em(d, b[0]);
    d.globalAlpha = fn;
    d.translate(Jj, -_h);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(F * a, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * Ja, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, js * a, a * 93, Gs * a, a * 76);
    d.bezierCurveTo(Pn * a, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(Xo * a, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * zh);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, dg * a, a * 84, $a * a, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, Ms * a, a * 105, a * Xc);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, Vh * a, a * 99, rg * a, a * 93);
    d.closePath();
    em(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    em(d, b[oe]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    em(d, b[3]);
    rm(d, a * 103, a * 110, a * Eg);
    em(d, b[mn]);
    rm(d, a * 55, a * 111, a * 11);
    em(d, b[4]);
    rm(d, a * 99, a * 107, a * 5);
    em(d, b[1]);
    rm(d, a * 51, a * 108, a * yh);
    em(d, b[yd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    em(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-Vn, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    em(d, b[3]);
    d.translate(Cs, Ng);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Lg * a, a * 93);
    d.bezierCurveTo(bo * a, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, wj * a, a * 93, a * _g, a * 76);
    d.bezierCurveTo(Pm * a, a * 75, a * 11, a * 75, cg * a, a * 75);
    d.bezierCurveTo(a * Fe, a * 67, a * 13, a * 67, a * xr, a * 59);
    d.bezierCurveTo(a * Be, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * Ms);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, Cc * a, a * 76, a * Ad);
    d.bezierCurveTo(a * 81, a * 12, a * 84, Fo * a, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * qj);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(Bs * a, a * 95, qc * a, a * 99, a * 8, a * 93);
    d.closePath();
    em(d, lq, b[eu], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * we, a * 58, or * a, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * eg, m * a, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    em(d, b[Lh], b[mj], Gm * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, fg * a, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    em(d, b[Lh], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    em(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    em(d, b[3]);
    return c;
  }
  function wp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 440;
    e.height = b * 388;
    f.globalAlpha = c ? 0.5 : Ps;
    f.translate(b * 5, b * 5);
    rm(f, b * 220, b * 201, b * 170.41713528867922);
    em(f, d[0], d[Vd], b * mc);
    f.globalAlpha = ja;
    f.translate(b * -5, b * -5);
    rm(f, b * 220, b * 201, b * 170.41713528867922);
    em(f, d[dm], d[rd], b * Nd);
    rm(f, b * 220, b * 201, b * 130);
    em(f, d[11], d[2], Nd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 218, b * 97);
    f.bezierCurveTo(b * 219, b * 163, b * 201, b * 176, b * 191, b * 175);
    f.bezierCurveTo(b * 176, b * 177, b * 168, b * 167, b * 160, b * 115);
    f.closePath();
    em(f, d[5], d[Rm], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 224, b * 181);
    f.bezierCurveTo(b * 225, b * 138, b * 246, b * 115, b * 263, b * 137);
    f.bezierCurveTo(b * 282, b * 174, b * 279, b * 217, b * 265, b * 243);
    f.bezierCurveTo(b * 253, b * 264, b * 240, b * 256, b * 233, b * 238);
    f.bezierCurveTo(b * 221, b * 212, b * 225, b * 198, b * 224, b * 184);
    f.closePath();
    em(f, d[br], d[jo], Gm * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 169, b * 289);
    f.bezierCurveTo(b * 161, b * 234, b * 168, b * 197, b * 187, b * 195);
    f.bezierCurveTo(b * 219, b * 189, b * 222, b * 256, b * 216, b * 307);
    f.closePath();
    em(f, d[yh], d[6], b * Ha);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 143, b * 146);
    f.bezierCurveTo(b * 161, b * 199, b * 151, b * 245, b * 138, b * 266);
    f.bezierCurveTo(b * 120.5, b * 239.5, b * 120.5, b * 239.5, b * 103, b * 213);
    f.closePath();
    em(f, d[aq], d[6], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 283, b * 135);
    f.bezierCurveTo(b * 277, b * 176, b * 298, b * 194, b * 315, b * 205);
    f.bezierCurveTo(b * 323.5, b * 175, b * 323.5, b * 175, b * 332, b * 145);
    f.closePath();
    em(f, d[5], d[Fa], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 318, b * 223);
    f.bezierCurveTo(b * 290, b * 195, b * 271, b * 256, b * 283, b * 281);
    f.bezierCurveTo(b * 303.5, b * 267, b * 303.5, b * 267, b * 324, b * 253);
    f.closePath();
    em(f, d[Qm], d[Th], _n * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142, b * 223);
    f.bezierCurveTo(b * 128, b * 213, b * 123, b * 214, b * 111, b * 223);
    f.closePath();
    em(f, d[ic], d[10], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 251, b * 133);
    f.bezierCurveTo(b * 269, b * 188, b * 262, b * 229, b * 251, b * 253);
    f.bezierCurveTo(b * 288, b * 224, b * 273, b * 139, b * 252, b * 133);
    f.closePath();
    em(f, d[10], d[_], b * Dd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 203, b * 102);
    f.bezierCurveTo(b * 204, b * 136, b * 200, b * 159, b * 189, b * 174);
    f.bezierCurveTo(b * 223, b * 164, b * 219, b * 87, b * 205, b * 83);
    f.closePath();
    em(f, d[ar], d[gg], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 196, b * 324);
    f.bezierCurveTo(b * 209, b * 239, b * 200, b * 219, b * 192, b * 196);
    f.bezierCurveTo(b * 229, b * 216, b * 219, b * 316, b * 198, b * 325);
    f.closePath();
    em(f, d[mm], d[Mh], Jn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 266, b * 166);
    f.bezierCurveTo(b * 249, b * 154, b * 243, b * 161, b * 233, b * 167);
    em(f, undefined, d[6], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 269, b * 192);
    f.bezierCurveTo(b * 256, b * 183, b * 241, b * 186, b * 233, b * 192);
    em(f, Nn, d[6], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 263, b * 217);
    f.bezierCurveTo(b * 251, b * 211, b * 242, b * 213, b * 236, b * 218);
    em(f, undefined, d[6], oo * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 204, b * 141);
    f.bezierCurveTo(b * 191, b * 131, b * 187, b * 133, b * 176, b * 141);
    em(f, undefined, d[6], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207, b * 230);
    f.bezierCurveTo(b * 193, b * 222, b * 185, b * 224, b * 177, b * 231);
    em(f, undefined, d[Ae], b * Ad);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 210, b * 258);
    f.bezierCurveTo(b * 196, b * 247, b * 191, b * 250, b * 177, b * 259);
    em(f, undefined, d[Qj], b * ei);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 145, b * 196);
    f.bezierCurveTo(b * 130, b * 186, b * 124, b * 187, b * 114, b * 195);
    em(f, Nn, d[6], b * ag);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 218, b * 97);
    f.bezierCurveTo(b * 219, b * 163, b * 201, b * 176, b * 191, b * 175);
    f.bezierCurveTo(b * 176, b * 177, b * 168, b * 167, b * 160, b * 115);
    f.closePath();
    em(f, undefined, d[Nd], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 224, b * 181);
    f.bezierCurveTo(b * 225, b * 138, b * 246, b * 115, b * 263, b * 137);
    f.bezierCurveTo(b * 282, b * 174, b * 279, b * 217, b * 265, b * 243);
    f.bezierCurveTo(b * 253, b * 264, b * 240, Ho * b, b * 233, b * 238);
    f.bezierCurveTo(b * 221, b * 212, b * 225, b * 198, b * 224, b * 184);
    f.closePath();
    em(f, undefined, d[Xa], b * Nd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 169, b * 289);
    f.bezierCurveTo(b * 161, b * 234, b * 168, b * 197, b * 187, b * 195);
    f.bezierCurveTo(b * 219, b * 189, b * 222, b * ko, b * 216, b * 307);
    f.closePath();
    em(f, undefined, d[lc], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 143, b * 146);
    f.bezierCurveTo(b * 161, b * 199, b * 151, b * 245, b * 138, b * 266);
    f.bezierCurveTo(b * 120.5, b * 239.5, b * 120.5, b * 239.5, b * 103, b * 213);
    f.closePath();
    em(f, undefined, d[6], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 283, b * 135);
    f.bezierCurveTo(b * 277, b * 176, b * 298, b * 194, b * 315, b * 205);
    f.bezierCurveTo(b * 323.5, b * 175, b * 323.5, b * 175, b * 332, b * 145);
    f.closePath();
    em(f, Yr, d[6], b * Th);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 318, b * 223);
    f.bezierCurveTo(b * 290, b * 195, b * 271, sn * b, b * 283, b * 281);
    f.bezierCurveTo(b * 303.5, b * 267, b * 303.5, b * 267, b * 324, b * 253);
    f.closePath();
    em(f, undefined, d[Ae], b * 6);
    rm(f, b * 222, b * 199, b * 120.74767078498864);
    em(f, undefined, d[Sn], b * 40);
    rm(f, b * 220, b * 200, b * 95.44108130150245);
    em(f, undefined, d[2], b * wt);
    rm(f, b * 220, b * 201, b * 85);
    em(f, lq, d[4], b * 10);
    f.globalAlpha = 0.5;
    rm(f, b * 220, b * 201, b * 82);
    em(f, d[9]);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * aq, b * Me);
    rm(f, b * 63, b * 136, b * 49.193495504995376);
    em(f, d[Nf], d[xn], b * 4);
    f.globalAlpha = fi;
    f.translate(-lf * b, b * -5);
    rm(f, b * 63, b * 136, b * 49.193495504995376);
    em(f, d[8], d[2], b * mn);
    rm(f, b * 63, b * 137, b * 25.632011235952593);
    em(f, d[Ig], d[2], b * 4);
    return e;
  }
  function Mp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 109;
    e.height = b * 110;
    rm(f, b * 54.5, b * 55, b * 48.038209575038294);
    em(f, c[0], c[1], b * 8);
    if (d == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 54.928558349609375, b * 43.72320556640625);
      f.bezierCurveTo(b * 66.92855834960938, b * 31.72320556640625, b * 69.92855834960938, b * 29.72320556640625, b * 74.92855834960938, b * 29.72320556640625);
      f.bezierCurveTo(b * 86.92855834960938, b * 28.72320556640625, b * 91.92855834960938, b * 42.72320556640625, b * 89.92855834960938, b * 52.72320556640625);
      f.bezierCurveTo(b * 88.92855834960938, b * 63.72320556640625, b * 73.92855834960938, b * 75.72320556640625, b * 55.928558349609375, b * 87.72320556640625);
      f.bezierCurveTo(b * 37.928558349609375, b * 78.72320556640625, b * 26.928558349609375, b * 65.72320556640625, b * 19.928558349609375, b * 54.72320556640625);
      f.bezierCurveTo(b * 13.928558349609375, b * 42.72320556640625, b * 21.928558349609375, b * 28.72320556640625, b * 35.928558349609375, b * 29.72320556640625);
      f.bezierCurveTo(b * 45.928558349609375, b * 31.72320556640625, b * 51.928558349609375, b * 40.72320556640625, b * 53.928558349609375, b * 44.72320556640625);
      f.closePath();
      em(f, c[Te]);
    } else if (d == 1) {
      f.save();
      f.translate(b * 55, b * 39.48748779296875);
      nm(f, b * -11.5, b * -36, b * 23, b * 72, b * 10);
      f.restore();
      em(f, c[rd], c[3], b * 4);
      rm(f, b * 54.5, b * 78.48748779296875, b * 22.02271554554524);
      em(f, c[4], c[3], b * 4);
      f.save();
      f.translate(b * 55.5, b * 57.287506103515625);
      nm(f, b * -9, b * -16, b * 18, b * 32, b * ue);
      f.restore();
      em(f, c[4]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 66.5, b * 25.287506103515625);
      f.bezierCurveTo(b * 60.5, b * 25.287506103515625, b * 63.5, b * 25.287506103515625, b * 54.5, b * 25.287506103515625);
      f.closePath();
      em(f, A, c[aq], b * 4);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 66.5, b * 37.287506103515625);
      f.bezierCurveTo(b * 60.5, b * 37.287506103515625, b * 60.5, b * 37.287506103515625, b * 54.5, b * 37.287506103515625);
      f.closePath();
      em(f, lq, c[5], b * sj);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 66.5, b * 50.287506103515625);
      f.bezierCurveTo(b * 61, b * 50.287506103515625, b * 61, b * 50.287506103515625, b * 55.5, b * 50.287506103515625);
      f.closePath();
      em(f, undefined, c[Wg], b * bq);
    } else if (d == wh) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 45.928558349609375, b * 55.29463195800781);
      f.bezierCurveTo(b * 38.928558349609375, b * 67.29463195800781, b * 38.928558349609375, b * 67.29463195800781, b * 31.928558349609375, b * 79.29463195800781);
      f.bezierCurveTo(b * 15.928558349609375, b * 85.29463195800781, b * 17.928558349609375, b * 86.29463195800781, b * 17.928558349609375, b * 90.29463195800781);
      f.bezierCurveTo(b * 19.928558349609375, b * 94.29463195800781, b * 21.928558349609375, b * 94.29463195800781, b * 27.928558349609375, b * 92.29463195800781);
      f.bezierCurveTo(b * 29.928558349609375, b * 98.29463195800781, b * 30.928558349609375, b * 99.29463195800781, b * 33.928558349609375, b * 99.29463195800781);
      f.bezierCurveTo(b * 38.928558349609375, b * 97.29463195800781, b * 38.928558349609375, b * 93.29463195800781, b * 37.928558349609375, b * 86.29463195800781);
      f.bezierCurveTo(b * 45.428558349609375, b * 73.29463195800781, b * 51.928558349609375, b * 64.29463195800781, b * 52.928558349609375, b * 60.29463195800781);
      f.closePath();
      em(f, c[z]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 55.928558349609375, b * 8.866058349609375);
      f.bezierCurveTo(b * 35.928558349609375, b * 35.866058349609375, b * 37.928558349609375, b * 48.866058349609375, b * 46.928558349609375, b * 62.866058349609375);
      f.bezierCurveTo(b * 65.92855834960938, b * 72.86605834960938, b * 80.92855834960938, b * 55.866058349609375, b * 93.92855834960938, b * 36.866058349609375);
      f.closePath();
      em(f, c[E], c[_n], ag * b);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 93.92855834960938, b * 36.866058349609375);
      f.bezierCurveTo(b * 82.92855834960938, b * 37.866058349609375, b * 77.92855834960938, b * 36.866058349609375, b * 67.92855834960938, b * 28.866058349609375);
      f.bezierCurveTo(b * 53.928558349609375, b * 16.866058349609375, b * 53.928558349609375, b * 14.866058349609375, b * 55.928558349609375, b * 7.866058349609375);
      f.bezierCurveTo(b * 65.92855834960938, b * 4.866058349609375, b * 71.92855834960938, b * 7.866058349609375, b * 83.92855834960938, b * 13.866058349609375);
      f.bezierCurveTo(b * 96.92855834960938, b * 21.866058349609375, b * 95.92855834960938, b * 31.866058349609375, b * 92.92855834960938, b * 36.866058349609375);
      f.closePath();
      em(f, c[3], c[bq], b * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 68.92855834960938, b * 16.866058349609375);
      f.bezierCurveTo(b * 71.92855834960938, b * 13.866058349609375, b * 76.92855834960938, b * 16.866058349609375, b * 79.92855834960938, b * 21.866058349609375);
      f.bezierCurveTo(b * 82.92855834960938, b * 24.866058349609375, b * 81.92855834960938, b * 27.866058349609375, b * 73.92855834960938, b * 24.866058349609375);
      f.bezierCurveTo(b * 67.92855834960938, b * 20.866058349609375, b * 66.92855834960938, b * 19.866058349609375, b * 67.92855834960938, b * 17.866058349609375);
      f.closePath();
      em(f, c[2]);
    } else if (Ie == d) {
      f.scale(0.9, 0.9);
      f.translate(b * lc, 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 54, b * 0.421875);
      f.bezierCurveTo(b * 84, b * 45.421875, b * 89, b * 51.421875, b * 83, b * 74.421875);
      f.bezierCurveTo(b * 74, b * 95.421875, b * 46, b * 98.421875, b * 30, b * 78.421875);
      f.bezierCurveTo(b * 22, b * 59.421875, b * 27, b * 49.421875, b * 34, b * 36.421875);
      f.closePath();
      em(f, c[lr], c[3], b * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 74, b * 52.421875);
      f.bezierCurveTo(b * 77, b * 73.421875, b * 69, b * 81.421875, b * 58, b * 81.421875);
      f.bezierCurveTo(b * 66, b * 71.421875, b * 70, b * 66.421875, b * 74, b * 52.421875);
      f.closePath();
      em(f, c[3]);
    }
    return e;
  }
  function Bp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 247;
    e.height = b * 247;
    f.translate(0, b * 10);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 150, b * 62);
    f.bezierCurveTo(b * 151.5, b * 71.5, b * 149, b * 70, b * 153, b * 81);
    f.bezierCurveTo(b * 158, b * 73.5, b * 158, b * 73.5, b * 163, b * 66);
    f.closePath();
    em(f, d[ke]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 164, b * 171);
    f.bezierCurveTo(b * 149, b * 159, b * 156.5, b * 165, b * 149, b * 159);
    f.bezierCurveTo(b * 149, b * 167, b * 149, b * 170, b * 152, b * 178);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 132, b * 95);
    f.bezierCurveTo(b * 154, b * 102, b * 154, b * 126, b * 137, b * 139);
    f.bezierCurveTo(b * 113, b * 152, b * 89, b * 136, b * 80, b * 121);
    f.bezierCurveTo(b * 57, b * 89, b * 69, b * 63, b * 79, b * 52);
    f.bezierCurveTo(b * 110, b * to, b * 139, b * 21, b * 150, b * 25);
    f.bezierCurveTo(b * 197, b * 36, b * 221, b * 67, b * 226, b * 90);
    f.bezierCurveTo(b * 234, b * 134, b * 214, b * 177, b * 195, b * 197);
    f.bezierCurveTo(b * 144, b * 242, b * 79, b * 216, b * 58, b * 206);
    f.bezierCurveTo(fd * b, b * 174, b * to, b * 134, b * 23, b * 107);
    f.bezierCurveTo(b * 26, b * 78, b * 33, b * 60, b * 38, b * 43);
    f.bezierCurveTo(b * 42, b * 32, b * 47, b * 32, b * 50, b * 36);
    f.bezierCurveTo(b * 54, b * 37, b * 50, b * 52, b * 44, b * 87);
    f.bezierCurveTo(b * 40, b * 115, b * 46, b * 142, b * 57, b * 158);
    f.bezierCurveTo(b * 76, b * 189, b * 129, b * 182, b * 152, b * 173);
    f.bezierCurveTo(b * 186, b * 156, b * 191, b * 106, b * 176, b * 85);
    f.bezierCurveTo(b * 159, b * 61, b * 132, b * 62, b * 122, b * 66);
    f.bezierCurveTo(b * 108, b * 74, b * 108, b * 89, b * 116, b * 90);
    f.bezierCurveTo(b * 123, b * 92, b * 130, b * 93, b * 131, b * 94);
    f.closePath();
    em(f, d[0]);
    f.translate(Cm, b * -10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 150, b * 62);
    f.bezierCurveTo(b * 151.5, b * 71.5, b * 149, b * 70, b * 153, b * 81);
    f.bezierCurveTo(b * 158, b * 73.5, b * 158, b * 73.5, b * 163, b * 66);
    f.closePath();
    em(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 164, b * 171);
    f.bezierCurveTo(b * 149, b * 159, b * 156.5, b * 165, b * 149, b * 159);
    f.bezierCurveTo(b * 149, b * 167, b * 149, b * 170, b * 152, b * 178);
    f.closePath();
    em(f, d[5]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 132, b * 95);
    f.bezierCurveTo(b * 154, b * 102, b * 154, b * 126, b * 137, b * 139);
    f.bezierCurveTo(b * 113, b * 152, b * 89, b * 136, b * 80, b * 121);
    f.bezierCurveTo(b * 57, b * 89, b * 69, b * 63, b * 79, b * 52);
    f.bezierCurveTo(b * 110, b * _o, b * 139, b * 21, b * 150, b * 25);
    f.bezierCurveTo(b * 197, b * 36, b * 221, b * 67, b * 226, b * 90);
    f.bezierCurveTo(b * 234, b * 134, b * 214, b * 177, b * 195, b * 197);
    f.bezierCurveTo(b * 144, b * 242, b * 79, b * 216, b * 58, b * 206);
    f.bezierCurveTo(b * 13, b * 174, b * 20, b * 134, b * 23, b * 107);
    f.bezierCurveTo(b * 26, b * 78, b * 33, b * 60, b * 38, b * 43);
    f.bezierCurveTo(b * 42, b * 32, b * 47, b * 32, b * 50, b * 36);
    f.bezierCurveTo(b * 54, b * 37, b * 50, b * 52, b * 44, b * 87);
    f.bezierCurveTo(b * 40, b * 115, b * 46, b * 142, b * 57, b * 158);
    f.bezierCurveTo(b * 76, b * 189, b * 129, b * 182, b * 152, b * 173);
    f.bezierCurveTo(b * 186, b * 156, b * 191, b * 106, b * 176, b * 85);
    f.bezierCurveTo(b * 159, b * 61, b * 132, b * 62, b * 122, b * 66);
    f.bezierCurveTo(b * 108, b * 74, b * 108, b * 89, b * 116, b * 90);
    f.bezierCurveTo(b * 123, b * 92, b * 130, b * 93, b * 131, b * 94);
    f.closePath();
    em(f, d[1], d[Tg], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 137, b * 137);
    f.bezierCurveTo(b * 145, b * 125, b * 138, b * 108, b * 123, b * 104);
    f.bezierCurveTo(b * 81, b * 101, b * 88, b * 77, b * 98, b * 65);
    f.bezierCurveTo(b * 117, b * 38, b * 138, b * 39, b * 165, b * 52);
    f.bezierCurveTo(b * 197, b * 72, b * 207, b * 111, b * 197, b * 140);
    f.bezierCurveTo(b * 182, b * 180, b * 161, b * 197, b * 112, b * 194);
    f.bezierCurveTo(b * 58, b * 194, b * 37, b * 170, b * 34, b * 142);
    f.bezierCurveTo(b * 29, b * 102, b * 40, b * 63, b * 51, b * 45);
    f.bezierCurveTo(b * 43, b * 78, b * 41, b * 103, b * 43, b * 122);
    f.bezierCurveTo(b * 51, b * 158, b * 63, b * 174, b * 95, b * 179);
    f.bezierCurveTo(b * 129, b * 186, b * 169, b * 172, b * 177, b * 144);
    f.bezierCurveTo(b * 197, b * 105, b * 172, b * 76, b * 160, b * 71);
    f.bezierCurveTo(b * 125, b * 52, b * 111, b * 73, b * 111, b * 81);
    f.bezierCurveTo(b * 106, b * 93, b * 140, b * 92, b * 147, b * 107);
    f.bezierCurveTo(b * 153, b * 128, b * 140, b * 135, b * 137, b * 139);
    f.closePath();
    em(f, d[uc]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 132, b * 95);
    f.bezierCurveTo(b * 154, b * 102, b * 154, b * 126, b * 137, b * 139);
    f.bezierCurveTo(b * 113, b * 152, b * 89, b * 136, b * 80, b * 121);
    f.bezierCurveTo(b * 57, b * 89, b * 69, b * 63, b * 79, b * 52);
    f.bezierCurveTo(b * 110, b * 20, b * 139, b * 21, b * 150, b * 25);
    f.bezierCurveTo(b * 197, b * 36, b * 221, b * 67, b * 226, b * 90);
    f.bezierCurveTo(b * 234, b * 134, b * 214, b * 177, b * 195, b * 197);
    f.bezierCurveTo(b * 144, b * 242, b * 79, b * 216, b * 58, b * 206);
    f.bezierCurveTo(b * 13, b * 174, b * 20, b * 134, b * 23, b * 107);
    f.bezierCurveTo(b * 26, b * 78, b * 33, b * 60, b * 38, b * 43);
    f.bezierCurveTo(b * 42, b * 32, b * 47, b * 32, b * 50, b * 36);
    f.bezierCurveTo(b * 54, b * 37, b * 50, b * 52, b * 44, b * 87);
    f.bezierCurveTo(b * 40, b * 115, b * 46, b * 142, b * 57, b * 158);
    f.bezierCurveTo(b * 76, b * 189, b * 129, b * 182, b * 152, b * 173);
    f.bezierCurveTo(b * 186, b * 156, b * 191, b * 106, b * 176, b * 85);
    f.bezierCurveTo(b * 159, b * 61, b * 132, b * 62, b * 122, b * 66);
    f.bezierCurveTo(b * 108, b * 74, b * 108, b * 89, b * 116, b * 90);
    f.bezierCurveTo(b * 123, b * 92, b * 130, b * 93, b * 131, b * 94);
    f.closePath();
    em(f, lq, d[ec], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 82, b * 63);
    f.bezierCurveTo(b * 91, b * 64, b * 96, b * 62, b * 98, b * 53);
    f.bezierCurveTo(b * 91, b * 45, b * 85, b * 42, b * 78, b * 41);
    f.bezierCurveTo(b * 81, b * 51, b * 82, b * 57, b * 82, b * 63);
    f.closePath();
    em(f, d[4], d[Tc], Tc * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 148, b * 40);
    f.bezierCurveTo(b * 140, b * 52, b * 131, b * 51, b * 123, b * 43);
    f.bezierCurveTo(b * 123, b * 25, b * 129, b * js, b * 134, b * 12);
    f.bezierCurveTo(b * 138, b * 35, b * 142, b * 31, b * 148, b * 40);
    f.closePath();
    em(f, d[k], d[Co], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 189, b * 43);
    f.bezierCurveTo(b * 191, b * 54, b * 196, b * 58, b * 205, b * 59);
    f.bezierCurveTo(b * 211, b * 42, b * 214, b * 37, b * 216, b * 31);
    f.bezierCurveTo(b * 202, b * 34, b * 195, b * 39, b * 190, b * 43);
    f.closePath();
    em(f, d[4], d[5], Cd * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 216, b * 98);
    f.bezierCurveTo(b * 219, b * 105, b * 225, b * 107, b * 230, b * 109);
    f.bezierCurveTo(b * 227, b * 113, b * 221, b * 115, b * 215, b * 115);
    f.bezierCurveTo(b * 208, b * 109, b * 211, b * 101, b * 216, b * 98);
    f.closePath();
    em(f, d[4], d[dh], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 180, b * 85);
    f.bezierCurveTo(b * 193, b * 86, b * 196, b * 98, b * 191, b * 108);
    f.bezierCurveTo(b * 179, b * 112, b * 167, b * 113, b * 155, b * 111);
    f.bezierCurveTo(b * 169, b * Vs, b * 176, b * 96, b * 180, b * 85);
    f.closePath();
    em(f, d[4], d[Co], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 96, b * 114);
    f.bezierCurveTo(b * 102, b * 109, b * 112, b * 110, b * 114, b * 118);
    f.bezierCurveTo(b * 111, b * 134, b * 102, b * 143, b * 95, b * 147);
    f.bezierCurveTo(b * 98, b * 123, b * 97, b * 119, b * 96, b * 115);
    f.closePath();
    em(f, d[mn], d[5], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79, b * 92);
    f.bezierCurveTo(b * 86, b * 95, b * 89, b * 102, b * 83, b * 111);
    f.bezierCurveTo(b * 70, b * 110, b * 61, b * 107, b * 54, b * 100);
    f.bezierCurveTo(b * 70, b * 97, b * 70, b * 95, b * 78, b * 92);
    f.closePath();
    em(f, d[4], d[lh], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39, b * 130);
    f.bezierCurveTo(b * 37, b * 141, b * 41, b * 143, b * 48, b * 144);
    f.bezierCurveTo(b * 54, b * 134, b * 55, b * 131, b * 56, b * 123);
    f.bezierCurveTo(b * 47, b * 129, b * 43, b * 129, b * 39, b * 129);
    f.closePath();
    em(f, d[4], d[5], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 113, b * 189);
    f.bezierCurveTo(b * 119, b * 201, b * 127, b * 198, b * 134, b * 192);
    f.bezierCurveTo(b * 128, b * 175, b * 128, b * 173, b * 128, b * 165);
    f.bezierCurveTo(b * 117, b * 176, b * 116, b * 182, b * 113, b * 187);
    f.closePath();
    em(f, d[_n], d[bg], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 74, b * 154);
    f.bezierCurveTo(b * 76, b * 163, b * 76, b * 170, b * 75, b * 177);
    f.bezierCurveTo(b * 68, b * 179, b * 66, b * 176, b * 63, b * 171);
    f.bezierCurveTo(b * 69, b * 164, b * 72, b * 159, b * 74, b * 154);
    f.closePath();
    em(f, d[4], d[et], Gj * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 206, b * 152);
    f.bezierCurveTo(b * 198, b * 158, b * 198, b * 166, b * 201, b * 171);
    f.bezierCurveTo(b * 209, b * 170, b * 221, b * 170, b * 226, b * 172);
    f.bezierCurveTo(b * 219, b * 159, b * 210, b * 155, b * 207, b * 153);
    f.closePath();
    em(f, d[4], d[5], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 181, b * 184);
    f.bezierCurveTo(b * 170, b * 184, b * 167, b * 187, b * 163, b * 195);
    f.bezierCurveTo(b * 171, b * 207, b * 183, b * 214, b * 191, b * 217);
    f.bezierCurveTo(b * 183, b * 204, b * 184, b * 196, b * 181, b * 184);
    f.closePath();
    em(f, d[Ac], d[Tc], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 66, b * 199);
    f.bezierCurveTo(b * 73, b * 197, b * 78, b * 199, b * 79, b * 206);
    f.bezierCurveTo(b * 71, b * 216, b * 67, b * 221, b * 57, b * 223);
    f.closePath();
    em(f, d[4], d[Jd], b * lh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 182, b * 143);
    f.bezierCurveTo(b * 183, b * 146, b * 183, b * 149, b * 179, b * 152);
    f.bezierCurveTo(b * 174, b * 146, b * 174, b * 146, b * 169, b * 140);
    f.closePath();
    em(f, d[Ld], d[5], b * et);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 159);
    f.bezierCurveTo(b * 45, b * 160, b * 48, b * 164, b * 45, b * 175);
    f.bezierCurveTo(b * 28, b * 183, b * 25, b * 184, b * 19, b * 184);
    f.bezierCurveTo(b * 30, b * 170, b * 29, b * 164, b * 31, b * 160);
    f.closePath();
    em(f, d[bq], d[Co], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 110, b * 214);
    f.bezierCurveTo(b * 106, b * 212, b * 104, b * 213, b * 102, b * 218);
    f.bezierCurveTo(b * 104, b * 220, b * 107, b * 222, b * 110, b * 224);
    f.bezierCurveTo(b * 110.5, b * 219, b * 110.5, b * 219, b * 111, b * 214);
    f.closePath();
    em(f, d[4], d[5], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 40, b * 52);
    f.bezierCurveTo(b * 41, b * 57, b * 40, b * 61, b * 34, b * 60);
    f.bezierCurveTo(b * 31.5, b * 55, b * 31.5, b * 55, b * 29, b * 50);
    f.bezierCurveTo(b * 34, b * 50.5, b * 34, b * 50.5, b * 39, b * 51);
    f.closePath();
    em(f, d[mn], d[et], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 81);
    f.bezierCurveTo(b * 37, b * 84, b * 38, b * 90, b * 34, b * 99);
    f.bezierCurveTo(b * 23, b * 97, b * Ed, b * 96, b * 16, b * 93);
    f.bezierCurveTo(b * 24, b * 88, b * 28, b * 85, b * 30, b * 81);
    f.closePath();
    em(f, d[eh], d[br], b * Qm);
    return e;
  }
  function Dp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -po);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    em(d, b[Vd]);
    return c;
  }
  function Ep(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 144;
    e.height = b * 280;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Y * b, b * bg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 62, b * 103.79999542236328);
    f.bezierCurveTo(b * 62.5, b * 148.79999542236328, b * 62.5, b * 148.79999542236328, b * 63, b * 193.79999542236328);
    f.bezierCurveTo(b * 63, b * 219.79999542236328, b * 47, b * 217.79999542236328, b * 51, b * 230.79999542236328);
    f.bezierCurveTo(b * 62, b * 255.79999542236328, b * 74, b * 260.7999954223633, b * 72, b * 248.79999542236328);
    f.bezierCurveTo(b * 65, b * 226.79999542236328, b * 71, b * 229.79999542236328, b * 76, b * 225.79999542236328);
    f.bezierCurveTo(b * 90, b * 224.79999542236328, b * 89, b * 232.79999542236328, b * 90, b * 243.79999542236328);
    f.bezierCurveTo(b * 95, b * 253.79999542236328, b * 99, b * 249.79999542236328, b * oc, b * 229.79999542236328);
    f.bezierCurveTo(b * 102, b * 213.79999542236328, b * 98, b * 214.79999542236328, b * 90, b * 205.79999542236328);
    f.bezierCurveTo(b * 82, b * 201.79999542236328, b * 82, b * 185.79999542236328, b * 82, b * 114.79999542236328);
    f.bezierCurveTo(b * 80, b * 73, b * 82, b * 68, b * 93, b * 53);
    f.bezierCurveTo(b * 98, b * 37, b * 65, b * 14, b * 74, b * 33);
    f.bezierCurveTo(b * 82, b * 56, b * 77, b * 52, b * 69, b * 54);
    f.bezierCurveTo(b * 55, b * 57, b * 57, b * 53, b * 54, b * 39);
    f.bezierCurveTo(b * 46, b * 20, b * 37, b * 61, b * 50, b * 68);
    f.bezierCurveTo(b * 65, b * 81, b * 60, b * 89, b * 62, b * 102);
    f.closePath();
    em(f, d[Oq]);
    f.globalAlpha = 1;
    f.translate(b * -Gj, b * -lh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 62, b * 103.79999542236328);
    f.bezierCurveTo(b * 62.5, b * 148.79999542236328, b * 62.5, b * 148.79999542236328, b * 63, b * 193.79999542236328);
    f.bezierCurveTo(b * 63, b * 219.79999542236328, b * 47, b * 217.79999542236328, b * 51, b * 230.79999542236328);
    f.bezierCurveTo(b * 62, b * 255.79999542236328, b * 74, b * 260.7999954223633, b * 72, b * 248.79999542236328);
    f.bezierCurveTo(b * 65, b * 226.79999542236328, b * 71, b * 229.79999542236328, b * 76, b * 225.79999542236328);
    f.bezierCurveTo(b * 90, b * 224.79999542236328, b * 89, b * 232.79999542236328, b * 90, b * 243.79999542236328);
    f.bezierCurveTo(b * 95, b * 253.79999542236328, b * 99, b * 249.79999542236328, b * bi, b * 229.79999542236328);
    f.bezierCurveTo(b * 102, b * 213.79999542236328, b * 98, b * 214.79999542236328, b * 90, b * 205.79999542236328);
    f.bezierCurveTo(b * 82, b * 201.79999542236328, b * 82, b * 185.79999542236328, b * 82, b * 114.79999542236328);
    f.bezierCurveTo(b * 80, b * 73, b * 82, b * 68, b * 93, b * 53);
    f.bezierCurveTo(b * 98, b * 37, b * 65, qj * b, b * 74, b * 33);
    f.bezierCurveTo(b * 82, b * 56, b * 77, b * 52, b * 69, b * 54);
    f.bezierCurveTo(b * 55, b * 57, b * 57, b * 53, b * 54, b * 39);
    f.bezierCurveTo(b * 46, yg * b, b * 37, b * 61, b * 50, b * 68);
    f.bezierCurveTo(b * 65, b * 81, b * 60, b * 89, b * 62, b * 102);
    f.closePath();
    em(f, d[1], d[wh], Gg * b);
    return e;
  }
  function Cp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    em(d, b[0]);
    return c;
  }
  function zp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 573;
    e.height = b * 350;
    if (d == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 336, b * 72);
      f.bezierCurveTo(b * 366, b * 15, b * 426, b * 36, b * 497, b * 83);
      f.bezierCurveTo(b * 522, b * 85, b * 522, b * 85, b * 547, b * 87);
      f.bezierCurveTo(b * 476.5, b * 205, b * 476.5, b * 205, b * 406, b * 323);
      f.bezierCurveTo(b * 297.5, b * 319, b * 297.5, b * 319, b * 189, b * 315);
      f.bezierCurveTo(b * 105.5, b * 279, b * 105.5, b * 279, b * 22, b * 243);
      f.bezierCurveTo(b * 92, b * 140, b * 92, b * 140, b * 162, b * 37);
      f.bezierCurveTo(b * 173, b * 39, b * 173, b * 39, b * 184, b * 41);
      f.bezierCurveTo(b * 185, b * 38.5, b * 185, b * 38.5, b * 186, b * 36);
      f.bezierCurveTo(b * 323, b * qo, b * 322, b * 25, b * 337, b * 74);
      f.closePath();
      em(f, c[4], c[4], b * 35);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 168, b * 42);
    f.bezierCurveTo(b * 255, b * 60, $g * b, b * 60, b * 342, b * 78);
    f.bezierCurveTo(b * 443, b * 81.5, b * 443, b * 81.5, b * 544, b * 85);
    f.bezierCurveTo(b * 475, b * 204.5, b * 475, b * 204.5, b * 406, b * 324);
    f.bezierCurveTo(b * 297.5, b * 320, b * 297.5, b * 320, b * 189, b * 316);
    f.bezierCurveTo(b * 105.5, b * 279, b * 105.5, b * 279, b * 22, b * 242);
    f.closePath();
    em(f, c[Jj], c[fo], b * Dh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 188, b * 41);
    f.bezierCurveTo(b * 308, Eh * b, b * 325, b * Ah, b * 337, b * 66);
    f.bezierCurveTo(b * 191, b * 305, b * 196, b * 286, b * 184, b * 307);
    f.bezierCurveTo(b * 175, b * 250, b * 90, b * 254, b * 52, b * 241);
    f.closePath();
    em(f, c[Gi], c[3], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 336, b * 71);
    f.bezierCurveTo(b * 375, Ca * b, b * 429, b * 50, b * 518, b * 92);
    f.bezierCurveTo(b * 455, b * 199.5, b * 455, b * 199.5, b * 392, b * 307);
    f.bezierCurveTo(b * 227, b * 301, b * 261, Ze * b, b * 188, b * 308);
    f.closePath();
    em(f, c[2], c[3], b * _c);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 357, b * 76);
    f.bezierCurveTo(b * 390, b * 67, b * 414, b * 86, b * 435, b * 104);
    f.bezierCurveTo(b * 417, b * 135, b * 417, b * 135, b * 399, b * 166);
    f.bezierCurveTo(b * 352, b * 140, b * 345, b * 139, b * 319, b * 142);
    f.closePath();
    em(f, c[nh], c[3], b * Pg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 309, b * 168);
    f.bezierCurveTo(b * 345, b * 163, b * 372, b * 180, b * 412, b * 203);
    em(f, c[wh], c[Ie], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 263, b * 54);
    f.bezierCurveTo(b * 305, b * 44, b * 307, b * 51, b * 311, b * 64);
    f.bezierCurveTo(b * 270.5, b * 129.5, b * 270.5, b * 129.5, b * 230, b * 195);
    f.bezierCurveTo(b * 221, b * 175, b * 203, b * 171, b * 186, b * 172);
    f.closePath();
    em(f, c[3], c[3], xg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 292, b * 198);
    f.bezierCurveTo(b * 328, b * 191, b * 364, b * 211, b * 401, b * 237);
    em(f, c[2], c[3], C * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 245, b * 68);
    f.bezierCurveTo(b * 210, b * 72, b * 210, b * 72, b * 189, b * 69);
    em(f, c[2], c[3], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 222, b * 96);
    f.bezierCurveTo(b * 196, b * 97, b * 193, b * 97, b * 177, b * 92);
    em(f, c[2], c[Ie], b * fg);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207, b * 124);
    f.bezierCurveTo(b * 179, b * 123, b * 177, b * 124, b * 161, b * 119);
    em(f, c[2], c[Ie], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 183);
    f.bezierCurveTo(b * 184, b * 185, b * 203, b * 198, b * 219, b * 221);
    em(f, c[2], c[3], _c * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98, b * 213);
    f.bezierCurveTo(b * 161, b * 214, b * 193, b * 227, b * 201, b * 249);
    em(f, c[2], c[xa], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 399, b * 257);
    f.bezierCurveTo(b * 287, b * 215, b * 280, b * 215, b * 263, b * 222);
    f.bezierCurveTo(b * 253, b * 238, b * 247, b * 245, b * 243, b * 254);
    f.bezierCurveTo(b * 267, b * 236, b * 292, b * 263, b * 377, b * 284);
    em(f, c[3], c[Ie], b * 12);
    return e;
  }
  function xp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 167;
    e.height = b * 136;
    f.globalAlpha = 0.5;
    f.save();
    f.translate(b * 76.71426391601562, b * 67.85713195800781);
    nm(f, b * -57.5, b * -54.5, b * 115, b * 109, b * 15);
    f.restore();
    em(f, d[nj]);
    f.globalAlpha = 0.8;
    f.save();
    f.translate(b * 76.71426391601562, b * 67.85713195800781);
    nm(f, b * -57.5, b * -54.5, b * 115, b * 109, b * Gr);
    f.restore();
    em(f, undefined, d[1], Mq * b);
    f.globalAlpha = 0.5;
    f.save();
    f.translate(b * 91.21426391601562, b * 67.35713195800781);
    nm(f, b * -56, b * -55, b * 115, b * 109, b * 15);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = Jf;
    f.save();
    f.translate(b * 91.21426391601562, b * 67.35713195800781);
    nm(f, b * -56, b * -55, b * 115, b * 109, b * 15);
    f.restore();
    em(f, undefined, d[Lh], Mq * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131.21426391601562, b * 70.35713195800781);
    f.bezierCurveTo(b * 133.21426391601562, b * 95.35713195800781, b * 128.21426391601562, b * 109.35713195800781, b * 108.21426391601562, b * 108.35713195800781);
    em(f, undefined, d[1], b * 10);
    return e;
  }
  function Qp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    em(d, b[Js]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * Xh);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * Ns, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    em(d, b[Nf]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    em(d, b[Ng]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    em(d, b[Jj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    em(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    em(d, b[Jj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    em(d, b[so]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    em(d, b[Ng]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    em(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    em(d, b[Sr], b[er], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * sn);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    em(d, b[er], b[3], a * tq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * Kn, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    em(d, b[3], b[E], th * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    em(d, b[Wc], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    em(d, b[3], b[jh], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    em(d, b[3], b[fa], a * Sm);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    em(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    em(d, b[3], b[er], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    em(d, b[xa], b[Wc], a * vg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    em(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    em(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    em(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, ac * a);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    em(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, Kn * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    em(d, b[1]);
    rm(d, a * 102, a * 269, a * Kg);
    em(d, b[mq]);
    rm(d, a * 98, a * 266, a * 5);
    em(d, b[ag]);
    rm(d, a * 168, a * 269, a * 11);
    em(d, b[Sr]);
    rm(d, a * 164, a * 266, a * 5);
    em(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    em(d, b[Cs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    em(d, b[pj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    em(d, b[lo]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    em(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    em(d, b[_h]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    em(d, b[hd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    em(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    em(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    em(d, b[Sm]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    em(d, b[Yd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    em(d, b[lo]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    em(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    em(d, b[An]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    em(d, b[qs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    em(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    em(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    em(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    em(d, b[xr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    em(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    em(d, b[Pd]);
    return c;
  }
  function Sp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : au;
    f.translate(b * -10, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 4.109375);
    f.bezierCurveTo(b * 117, b * 9.609375, b * 117, b * 9.609375, b * 161.5, b * 15.109375);
    f.bezierCurveTo(b * 134.5, b * 106.109375, b * 110.5, b * 130.109375, b * 63.5, b * 145.109375);
    f.bezierCurveTo(b * 33.5, b * 120.609375, b * 33.5, b * 120.609375, b * 3.5, b * 96.109375);
    f.bezierCurveTo(b * 82.5, b * 75.109375, b * 69.5, b * 29.109375, b * 71.5, b * 6.109375);
    f.closePath();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 10, b * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 4.109375);
    f.bezierCurveTo(b * 117, b * 9.609375, b * 117, b * 9.609375, b * 161.5, b * 15.109375);
    f.bezierCurveTo(b * 134.5, b * 106.109375, b * 110.5, b * 130.109375, b * 63.5, b * 145.109375);
    f.bezierCurveTo(b * 33.5, b * 120.609375, b * 33.5, b * 120.609375, b * 3.5, b * 96.109375);
    f.bezierCurveTo(b * 82.5, b * 75.109375, b * 69.5, b * 29.109375, b * 71.5, b * 6.109375);
    f.closePath();
    em(f, d[Ic], d[2], no * b);
    return e;
  }
  function Ip(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 137;
    e.height = b * 129;
    f.globalAlpha = 0.4;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.000030517578125, b * 41.17047119140625);
    f.bezierCurveTo(b * 45.000030517578125, b * 38.17047119140625, b * 49.000030517578125, b * 37.17047119140625, b * 62.000030517578125, b * 38.17047119140625);
    f.bezierCurveTo(b * 78.00003051757812, b * 38.17047119140625, b * 78.00003051757812, b * 38.17047119140625, b * 94.00003051757812, b * 38.17047119140625);
    f.bezierCurveTo(b * 100.00003051757812, b * 38.17047119140625, b * 102.00003051757812, b * 38.17047119140625, b * 101.00003051757812, b * 47.17047119140625);
    f.bezierCurveTo(b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 80.17047119140625);
    f.bezierCurveTo(b * 102.00003051757812, b * 84.17047119140625, b * 100.00003051757812, b * 86.17047119140625, b * 95.00003051757812, b * 88.17047119140625);
    f.bezierCurveTo(b * 84.00003051757812, b * 94.17047119140625, b * 89.00003051757812, b * 94.17047119140625, b * 79.00003051757812, b * 94.17047119140625);
    f.bezierCurveTo(b * 59.500030517578125, b * 94.17047119140625, b * 59.500030517578125, b * 94.17047119140625, b * 40.000030517578125, b * 94.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 86.17047119140625);
    f.bezierCurveTo(b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 53.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 47.17047119140625, b * 34.000030517578125, b * 47.17047119140625, b * 40.000030517578125, b * 42.17047119140625);
    f.closePath();
    em(f, undefined, d[2], b * 40);
    f.globalAlpha = 0.4;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.000030517578125, b * 41.17047119140625);
    f.bezierCurveTo(b * 45.000030517578125, b * 38.17047119140625, b * 49.000030517578125, b * 37.17047119140625, b * 62.000030517578125, b * 38.17047119140625);
    f.bezierCurveTo(b * 78.00003051757812, b * 38.17047119140625, b * 78.00003051757812, b * 38.17047119140625, b * 94.00003051757812, b * 38.17047119140625);
    f.bezierCurveTo(b * 100.00003051757812, b * 38.17047119140625, b * 102.00003051757812, b * 38.17047119140625, b * 101.00003051757812, b * 47.17047119140625);
    f.bezierCurveTo(b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 80.17047119140625);
    f.bezierCurveTo(b * 102.00003051757812, b * 84.17047119140625, b * 100.00003051757812, b * 86.17047119140625, b * 95.00003051757812, b * 88.17047119140625);
    f.bezierCurveTo(b * 84.00003051757812, b * 94.17047119140625, b * 89.00003051757812, b * 94.17047119140625, b * 79.00003051757812, b * 94.17047119140625);
    f.bezierCurveTo(b * 59.500030517578125, b * 94.17047119140625, b * 59.500030517578125, b * 94.17047119140625, b * 40.000030517578125, b * 94.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 86.17047119140625);
    f.bezierCurveTo(b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 53.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 47.17047119140625, b * 34.000030517578125, b * 47.17047119140625, b * 40.000030517578125, b * 42.17047119140625);
    f.closePath();
    em(f, undefined, d[1], b * Jq);
    f.globalAlpha = 0.8;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.000030517578125, b * 41.17047119140625);
    f.bezierCurveTo(b * 45.000030517578125, b * 38.17047119140625, b * 49.000030517578125, b * 37.17047119140625, b * 62.000030517578125, b * 38.17047119140625);
    f.bezierCurveTo(b * 78.00003051757812, b * 38.17047119140625, b * 78.00003051757812, b * 38.17047119140625, b * 94.00003051757812, b * 38.17047119140625);
    f.bezierCurveTo(b * 100.00003051757812, b * 38.17047119140625, b * 102.00003051757812, b * 38.17047119140625, b * 101.00003051757812, b * 47.17047119140625);
    f.bezierCurveTo(b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 80.17047119140625);
    f.bezierCurveTo(b * 102.00003051757812, b * 84.17047119140625, b * 100.00003051757812, b * 86.17047119140625, b * 95.00003051757812, b * 88.17047119140625);
    f.bezierCurveTo(b * 84.00003051757812, b * 94.17047119140625, b * 89.00003051757812, b * 94.17047119140625, b * 79.00003051757812, b * 94.17047119140625);
    f.bezierCurveTo(b * 59.500030517578125, b * 94.17047119140625, b * 59.500030517578125, b * 94.17047119140625, b * 40.000030517578125, b * 94.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 86.17047119140625);
    f.bezierCurveTo(b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 53.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 47.17047119140625, b * 34.000030517578125, b * 47.17047119140625, b * 40.000030517578125, b * 42.17047119140625);
    f.closePath();
    em(f, d[0], d[1], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 51.000030517578125, b * 37.9886474609375);
    f.bezierCurveTo(b * 51.000030517578125, b * 61.9886474609375, b * 51.000030517578125, b * 61.9886474609375, b * 51.000030517578125, b * 85.9886474609375);
    f.bezierCurveTo(b * 75.50003051757812, b * 85.9886474609375, b * 75.50003051757812, b * 85.9886474609375, b * 100.00003051757812, b * 85.9886474609375);
    f.bezierCurveTo(b * 100.00003051757812, b * 61.9886474609375, b * 100.00003051757812, b * 61.9886474609375, b * 100.00003051757812, b * 37.9886474609375);
    f.bezierCurveTo(b * 76.00003051757812, b * 37.9886474609375, b * 76.00003051757812, b * 37.9886474609375, b * 52.000030517578125, b * 37.9886474609375);
    f.closePath();
    em(f, d[1], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 99.00003051757812, b * 38.9886474609375);
    f.bezierCurveTo(b * 93.50003051757812, b * 44.9886474609375, b * 93.50003051757812, b * 44.9886474609375, b * 88.00003051757812, b * 50.9886474609375);
    f.bezierCurveTo(b * 88.00003051757812, b * 72.4886474609375, b * 88.00003051757812, b * 72.4886474609375, b * 88.00003051757812, b * 93.9886474609375);
    f.bezierCurveTo(b * 94.00003051757812, b * 90.4886474609375, b * 94.00003051757812, b * 90.4886474609375, b * 100.00003051757812, b * 86.9886474609375);
    f.closePath();
    em(f, d[1], d[Gi], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.00003051757812, b * 49.625);
    f.bezierCurveTo(b * 61.000030517578125, b * 49.625, b * 61.000030517578125, b * 49.625, b * 35.000030517578125, b * 49.625);
    f.bezierCurveTo(b * 35.000030517578125, b * 70.625, b * 35.000030517578125, b * 70.625, b * 35.000030517578125, b * 91.625);
    f.bezierCurveTo(b * 60.500030517578125, b * 91.625, b * 60.500030517578125, b * 91.625, b * 86.00003051757812, b * 91.625);
    f.bezierCurveTo(b * 86.50003051757812, b * 70.625, b * 86.50003051757812, b * 70.625, b * 87.00003051757812, b * 49.625);
    f.closePath();
    em(f, d[Lo], d[mq], b * Ld);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 47.000030517578125, b * 36.625);
    f.bezierCurveTo(b * 73.00003051757812, b * 37.125, b * 73.00003051757812, b * 37.125, b * 99.00003051757812, b * 37.625);
    f.bezierCurveTo(b * 93.50003051757812, b * 44.125, b * 93.50003051757812, b * 44.125, b * 88.00003051757812, b * 50.625);
    f.bezierCurveTo(b * 60.500030517578125, b * 50.125, b * 60.500030517578125, b * 50.125, b * 33.000030517578125, b * 49.625);
    f.closePath();
    em(f, d[Jf], d[er], Ld * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 53.000030517578125, b * 52.625);
    f.bezierCurveTo(b * 40.000030517578125, b * 54.625, b * 39.000030517578125, b * 59.625, b * 40.000030517578125, b * 67.625);
    f.bezierCurveTo(b * 45.000030517578125, b * 59.625, b * 48.000030517578125, b * 58.625, b * 54.000030517578125, b * 53.625);
    f.closePath();
    em(f, d[3]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.000030517578125, b * 41.17047119140625);
    f.bezierCurveTo(b * 45.000030517578125, b * 38.17047119140625, b * 49.000030517578125, b * 37.17047119140625, b * 62.000030517578125, b * 38.17047119140625);
    f.bezierCurveTo(b * 78.00003051757812, b * 38.17047119140625, b * 78.00003051757812, b * 38.17047119140625, b * 94.00003051757812, b * 38.17047119140625);
    f.bezierCurveTo(b * 100.00003051757812, b * 38.17047119140625, b * 102.00003051757812, b * 38.17047119140625, b * 101.00003051757812, b * 47.17047119140625);
    f.bezierCurveTo(b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 63.67047119140625, b * 101.00003051757812, b * 80.17047119140625);
    f.bezierCurveTo(b * 102.00003051757812, b * 84.17047119140625, b * 100.00003051757812, b * 86.17047119140625, b * 95.00003051757812, b * 88.17047119140625);
    f.bezierCurveTo(b * 84.00003051757812, b * 94.17047119140625, b * 89.00003051757812, b * 94.17047119140625, b * 79.00003051757812, b * 94.17047119140625);
    f.bezierCurveTo(b * 59.500030517578125, b * 94.17047119140625, b * 59.500030517578125, b * 94.17047119140625, b * 40.000030517578125, b * 94.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 94.17047119140625, b * 34.000030517578125, b * 86.17047119140625);
    f.bezierCurveTo(b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 69.67047119140625, b * 34.000030517578125, b * 53.17047119140625);
    f.bezierCurveTo(b * 33.000030517578125, b * 47.17047119140625, b * 34.000030517578125, b * 47.17047119140625, b * 40.000030517578125, b * 42.17047119140625);
    f.closePath();
    em(f, Ds, d[jh], b * Gm);
    return e;
  }
  function _p(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    rm(d, a * 86.5, a * 98, a * 80);
    em(d, b[Oq]);
    d.globalAlpha = Lh;
    rm(d, a * 86.5, a * 89, a * 81);
    em(d, b[Ic], b[2], a * 4);
    rm(d, a * 86.5, a * 86, a * 59);
    em(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    rm(d, a * 86.5, a * 95, a * 34);
    em(d, b[so]);
    d.globalAlpha = 1;
    rm(d, a * 86.5, a * 89, a * 34);
    em(d, b[dh]);
    return c;
  }
  function Fp() {
    var b = _w.time;
    if (ΔΔ[rt.ao]) {
      ea.drawImage(ΔΔ[rt.ao][b][ae], ca + 480, Kq + 190);
      ea.drawImage(ΔΔ[rt.ao][b][2], ca + 180, Kq - 430);
      ea.drawImage(ΔΔ[rt.ao][b][fi], ca - 855, Kq + 100);
      ea.drawImage(ΔΔ[rt.ao][b][Ea], ca - 550, Kq - 300);
      ea.drawImage(ΔΔ[rt.ao][b][bd], ca - 1020, Kq - 520);
    }
    if (ΔΔ[rt.Tn]) {
      ea.drawImage(ΔΔ[rt.Tn][b][yd], ca - 80, Kq - 640);
      ea.drawImage(ΔΔ[rt.Tn][b][1], ca + 80, Kq + 490);
      ea.drawImage(ΔΔ[rt.Tn][b][Vn], ca - 180, Kq - 700);
      ea.drawImage(ΔΔ[rt.Tn][b][0], ca + 550, Kq + 100);
      ea.drawImage(ΔΔ[rt.Tn][b][1], ca + 450, Kq + 300);
      ea.drawImage(ΔΔ[rt.Tn][b][Lo], ca + 780, Kq + 300);
      ea.drawImage(ΔΔ[rt.Tn][b][Cs], ca + 980, Kq + 200);
      ea.drawImage(ΔΔ[rt.Tn][b][Vn], ca + 680, Kq + 600);
      ea.drawImage(ΔΔ[rt.Tn][b][Vn], ca - 380, Kq + 100);
      ea.drawImage(ΔΔ[rt.Tn][b][Tg], ca + 280, Kq + 250);
    }
    if (ΔΔ[rt.Rn]) {
      ea.drawImage(ΔΔ[rt.Rn][b][Ea], ca - 590, Kq);
      ea.drawImage(ΔΔ[rt.Rn][b][Ka], ca + 120, Kq - 390);
      ea.drawImage(ΔΔ[rt.Rn][b][0], ca - 270, Kq + 340);
    }
    if (ΔΔ[rt.jn]) {
      ea.drawImage(ΔΔ[rt.jn][b][4], ca - 700, Kq - 600);
      ea.drawImage(ΔΔ[rt.jn][b][eu], ca - 970, Kq - 250);
      ea.drawImage(ΔΔ[rt.jn][b][Au], ca - 720, Kq - 200);
      ea.drawImage(ΔΔ[rt.jn][b][2], ca - 1020, Kq + 340);
      ea.drawImage(ΔΔ[rt.jn][b][Vd], ca - 1120, Kq - Ka);
      ea.drawImage(ΔΔ[rt.jn][b][ja], ca - 650, Kq - 330);
      ea.drawImage(ΔΔ[rt.jn][b][4], ca - 495, Kq - 90);
      ea.drawImage(ΔΔ[rt.jn][b][uc], ca - 520, Kq + 340);
      ea.drawImage(ΔΔ[rt.jn][b][eu], ca + 830, Kq - 520);
    }
    ΔΔ[rt.zg];
    if (ax && ck) {
      var c = ax.Oi.x;
      var d = ax.Oi.y;
      ax.Oi.x = ca;
      ax.Oi.y = Kq;
      var e = ck.time;
      ck.time = _w.time;
      var f;
      var g = _w.items;
      g[2].x = 400;
      g[lr].y = 100;
      g[2].Sfi(rt.Wn);
      (f = g[1]).x = -500;
      f.y = 100;
      f.Ifi[0].x = f.x - 20.5;
      f.Ifi[0].y = f.y - 22.5;
      f.Ifi[Ko].x = f.x - 35.5;
      f.Ifi[1].y = f.y + 7.5;
      f.Ifi[2].x = f.x + 7.5;
      f.Ifi[2].y = f.y - 30;
      f.Ifi[pg].x = f.x + 22.5;
      f.Ifi[er].y = f.y;
      f.Ifi[bq].x = f.x - 7.5;
      f.Ifi[4].y = f.y + 14.5;
      for (var h = Nf; f.info > h; h++) {
        f.Ifi[h].Sfi(rt.fo);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.Ifi[0].x = f.x - 20.5;
      f.Ifi[xn].y = f.y - 22.5;
      f.Ifi[1].x = f.x - 35.5;
      f.Ifi[1].y = f.y + 7.5;
      f.Ifi[hu].x = f.x + 7.5;
      f.Ifi[2].y = f.y - 30;
      f.Ifi[3].x = f.x + 22.5;
      f.Ifi[er].y = f.y;
      f.Ifi[4].x = f.x - 7.5;
      f.Ifi[4].y = f.y + 14.5;
      for (h = 0; h < f.info; h++) {
        f.Ifi[h].Sfi(rt.fo);
      }
      g[Oq].x = 450;
      g[0].y = -To;
      g[qh]._fi(rt.qn);
      g[Vd].Ffi();
      ax.Oi.x = c;
      ax.Oi.y = d;
      ck.time = e;
    }
  }
  function Pp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 160;
    e.height = b * 161;
    f.globalAlpha = c ? 0.5 : yd;
    f.translate(0, b * 10);
    f.save();
    f.translate(b * 80.5, b * 78);
    nm(f, b * -71.5, b * -71, b * 143, b * 143, Zo * b);
    f.restore();
    em(f, d[so]);
    f.globalAlpha = dm;
    f.translate(Jj, b * -10);
    f.save();
    f.translate(b * 80.5, b * 78);
    nm(f, b * -71.5, b * -71, b * 143, b * 143, b * wd);
    f.restore();
    em(f, d[ae], d[Tg], b * 6);
    f.save();
    f.translate(b * 80, b * 78.5);
    nm(f, b * -17, b * -72.5, b * 34, b * 145, b * rs);
    f.restore();
    em(f, d[3], d[4], b * Xa);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, as * b);
    f.save();
    f.translate(b * 80, b * 79.5);
    nm(f, b * -73, b * -16.5, b * 145, b * 34, b * 10);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -mm * b);
    f.save();
    f.translate(b * 80, b * 79.5);
    nm(f, b * -73, b * -16.5, b * 145, b * 34, b * Ki);
    f.restore();
    em(f, d[3], d[4], b * Cu);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79, b * 71);
    f.bezierCurveTo(b * 90, b * 42, b * 98, b * 36, b * 109, b * 43);
    f.bezierCurveTo(b * 119, b * 47, b * 128, b * 62, b * 107, b * 72);
    f.bezierCurveTo(b * 96, b * 78.5, b * 96, b * 78.5, b * 85, b * 85);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84, b * 78);
    f.bezierCurveTo(b * 113, b * 82, b * 123, b * 97, b * 115, b * 108);
    f.bezierCurveTo(b * 110, b * 119, b * 98, b * 124, b * 87, b * 107);
    f.bezierCurveTo(b * 81.5, b * 94.5, b * 81.5, b * 94.5, b * 76, b * 82);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80, b * 73);
    f.bezierCurveTo(b * 64, b * 37, b * 55, b * 34, b * 45, b * 42);
    f.bezierCurveTo(b * 30, b * 54, b * 36, b * 65, b * 51, b * 72);
    f.bezierCurveTo(b * 62.5, b * 77, b * 62.5, b * 77, b * 74, b * 82);
    f.closePath();
    em(f, d[Vd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 82, b * 83);
    f.bezierCurveTo(b * 73, b * 107, b * 60, b * 123, b * 47, b * 113);
    f.bezierCurveTo(b * 33, b * 105, b * 33, b * 92, b * 52, b * 85);
    f.bezierCurveTo(b * 74, b * 73, b * 77, b * 76, b * 76, b * 75);
    f.closePath();
    em(f, d[so]);
    f.globalAlpha = 1;
    f.translate(qh, b * -ue);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79, b * 71);
    f.bezierCurveTo(b * 90, b * 42, b * 98, b * 36, b * 109, b * 43);
    f.bezierCurveTo(b * 119, b * 47, b * 128, b * 62, b * 107, b * 72);
    f.bezierCurveTo(b * 96, b * 78.5, b * 96, b * 78.5, b * 85, b * 85);
    f.closePath();
    em(f, d[Ie], d[4], oo * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84, b * 78);
    f.bezierCurveTo(b * 113, b * 82, b * 123, b * 97, b * 115, b * 108);
    f.bezierCurveTo(b * 110, b * 119, b * 98, b * 124, b * 87, b * 107);
    f.bezierCurveTo(b * 81.5, b * 94.5, b * 81.5, b * 94.5, b * 76, b * 82);
    f.closePath();
    em(f, d[3], d[4], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80, b * 73);
    f.bezierCurveTo(b * 64, b * 37, b * 55, b * 34, b * 45, b * 42);
    f.bezierCurveTo(b * 30, b * 54, b * 36, b * 65, b * 51, b * 72);
    f.bezierCurveTo(b * 62.5, b * 77, b * 62.5, b * 77, b * 74, b * 82);
    f.closePath();
    em(f, d[3], d[k], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 82, b * 83);
    f.bezierCurveTo(b * 73, b * 107, b * 60, b * 123, b * 47, b * 113);
    f.bezierCurveTo(b * 33, b * 105, b * 33, b * 92, b * 52, b * 85);
    f.bezierCurveTo(b * 74, b * 73, b * 77, b * 76, b * 76, b * 75);
    f.closePath();
    em(f, d[on], d[4], Fa * b);
    f.globalAlpha = c ? 0.5 : au;
    f.translate(0, b * ic);
    f.save();
    f.translate(b * 78.5, b * 78);
    nm(f, b * -13.5, b * -14, b * 27, b * 27, b * 6);
    f.restore();
    em(f, d[ke]);
    f.globalAlpha = 1;
    f.translate(0, b * -rf);
    f.save();
    f.translate(b * 78.5, b * 78);
    nm(f, b * -13.5, -mo * b, b * 27, b * 27, b * hn);
    f.restore();
    em(f, d[E], d[Jn], b * 6);
    return e;
  }
  function Tp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.globalAlpha = 1;
    f.translate(b * yg, b * po);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36.5, b * 278.0625);
    f.bezierCurveTo(b * 67.5, b * 316.0625, b * 134.5, b * 334.0625, b * 199.5, b * 319.0625);
    f.bezierCurveTo(b * 254.5, b * 304.0625, b * 346.5, b * 270.0625, b * 348.5, b * 237.0625);
    f.bezierCurveTo(b * 359.5, b * 206.0625, b * 318.5, b * 129.0625, b * 262.5, b * 122.0625);
    f.bezierCurveTo(b * 213.5, b * 115.0625, b * 166.5, b * 133.0625, b * 104.5, b * 166.0625);
    f.bezierCurveTo(b * 54.5, b * 194.0625, b * 23.5, b * 241.0625, b * 36.5, b * 277.0625);
    f.closePath();
    em(f, d[0]);
    f.translate(b * -20, b * -zd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36.5, b * 278.0625);
    f.bezierCurveTo(b * 67.5, b * 316.0625, b * 134.5, b * 334.0625, b * 199.5, b * 319.0625);
    f.bezierCurveTo(b * 254.5, b * 304.0625, b * 346.5, b * 270.0625, b * 348.5, b * 237.0625);
    f.bezierCurveTo(b * 359.5, b * 206.0625, b * 318.5, b * 129.0625, b * 262.5, b * 122.0625);
    f.bezierCurveTo(b * 213.5, b * 115.0625, b * 166.5, b * 133.0625, b * 104.5, b * 166.0625);
    f.bezierCurveTo(b * 54.5, b * 194.0625, b * 23.5, b * 241.0625, b * 36.5, b * 277.0625);
    f.closePath();
    em(f, d[1], d[ih], b * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 214.5, b * 124.0625);
    f.bezierCurveTo(b * 242.5, b * 125.0625, b * 272.5, b * 159.0625, b * 283.5, b * 184.0625);
    f.bezierCurveTo(b * 277.5, b * 161.0625, b * 233.5, b * 128.0625, b * 219.5, b * 122.0625);
    f.closePath();
    em(f, Ds, d[ih], b * Aq);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157.5, b * 145.0625);
    f.bezierCurveTo(b * 176.5, b * 148.0625, b * 205.5, b * 176.0625, b * 212.5, b * 197.0625);
    f.bezierCurveTo(b * 205.5, b * 178.0625, b * 177.5, b * 152.0625, b * 156.5, b * 142.0625);
    f.closePath();
    em(f, _e, d[wh], vh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 103.5, b * 169.0625);
    f.bezierCurveTo(b * 160.5, b * 166.0625, b * 228.5, b * 312.0625, b * 162.5, b * 323.0625);
    f.bezierCurveTo(b * 128.5, b * 330.0625, b * 45.5, b * 312.0625, b * 34.5, b * 268.0625);
    f.bezierCurveTo(b * 30.5, b * 238.0625, b * 44.5, b * 222.0625, b * 52.5, b * 211.0625);
    f.bezierCurveTo(b * 82.5, b * 174.0625, b * 104.5, b * 166.0625, b * 119.5, b * 172.0625);
    f.closePath();
    em(f, d[3], d[hu], Aq * b);
    rm(f, b * 92.5, b * 216.0625, b * 13.892443989449804);
    em(f, d[pj]);
    rm(f, b * 68.5, b * 227.0625, b * 8.06225774829855);
    em(f, d[_g]);
    rm(f, b * 85.5, b * 240.0625, b * 6.708203932499369);
    em(f, d[sj]);
    rm(f, b * 147.5, b * 294.0625, b * 17.46424919657298);
    em(f, d[4]);
    rm(f, b * 166.5, b * 273.0625, b * 6.708203932499369);
    em(f, d[k]);
    rm(f, b * 114.5, b * 294.0625, b * 12.36931687685298);
    em(f, d[4]);
    rm(f, b * 123.5, b * 220.0625, b * 5.830951894845301);
    em(f, d[mn]);
    rm(f, b * 114.5, b * 259.0625, b * 4.123105625617661);
    em(f, d[eh]);
    rm(f, b * 63.5, b * 265.0625, b * 5.385164807134504);
    em(f, d[4]);
    rm(f, b * 148.5, b * 235.0625, b * 4.47213595499958);
    em(f, d[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 194.5, b * 313.0625);
    f.bezierCurveTo(b * 222.5, b * 306.0625, b * 319.5, b * 271.0625, b * 337.5, b * 241.0625);
    f.bezierCurveTo(b * 274.5, b * 270.0625, b * 216.5, b * 288.0625, b * 199.5, b * 287.0625);
    f.bezierCurveTo(b * 198.5, b * 302.0625, b * 195.5, b * 311.0625, b * 193.5, b * 312.0625);
    f.closePath();
    em(f, d[5]);
    return e;
  }
  function jp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 440;
    e.height = b * 388;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(bg * b, b * 5);
    rm(f, b * 220, b * 201, b * 170.41713528867922);
    em(f, d[0], d[0], b * 6);
    f.globalAlpha = Mc;
    f.translate(b * -5, b * -5);
    rm(f, b * 220, b * 201, b * 170.41713528867922);
    em(f, d[Ej], d[yo], b * ag);
    rm(f, b * 220, b * 201, b * 130);
    em(f, d[ta], d[Cg], b * ei);
    rm(f, b * 222, b * 199, b * 120.74767078498864);
    em(f, Oh, d[Xg], b * 40);
    rm(f, b * 220, b * 200, b * 95.44108130150245);
    em(f, undefined, d[2], b * 15);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(b * yh, b * dh);
    rm(f, b * 63, b * 136, b * 49.193495504995376);
    em(f, d[Oq], d[0], b * _g);
    f.globalAlpha = 1;
    f.translate(b * -5, b * -5);
    rm(f, b * 63, b * 136, b * 49.193495504995376);
    em(f, d[8], d[2], b * 4);
    rm(f, b * 63, b * 137, b * 25.632011235952593);
    em(f, d[7], d[z], sj * b);
    return e;
  }
  function Rp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    rm(d, a * 55, a * 55, a * 55);
    em(d, b[sh]);
    return c;
  }
  function Lp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 175;
    e.height = b * 106;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Vd, b * Ca);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 67);
    f.bezierCurveTo(b * 55, b * 80, b * 126, b * 74, b * 144, b * 68);
    f.bezierCurveTo(b * 144.5, b * 75, b * 144.5, b * 75, b * 145, b * 82);
    f.bezierCurveTo(b * 114, b * 94, b * 47, b * 91, b * 28, b * 82);
    f.closePath();
    em(f, d[Ou]);
    f.globalAlpha = X;
    f.translate(0, b * -An);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 145, b * 75);
    f.bezierCurveTo(b * 143, b * 51, b * 133, b * 29, oc * b, b * 27);
    f.bezierCurveTo(b * 52, b * 21, b * 37, b * 37, b * 31, b * 54);
    f.bezierCurveTo(b * 23, b * 78, b * 28, b * 77, b * 36, b * 79);
    f.bezierCurveTo(b * 80, b * 87, b * 120, b * 81, b * 145, b * 76);
    f.closePath();
    em(f, d[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 38, b * 46);
    f.bezierCurveTo(b * 52, b * 37, b * 69, b * 36, b * 85, b * 36);
    f.bezierCurveTo(b * 118, b * 38, b * 129, b * 42, b * 137, b * 48);
    f.bezierCurveTo(b * 135, b * 45, b * 135, b * 45, b * 133, b * 42);
    f.bezierCurveTo(b * 124, b * 32, b * 116, b * 28, b * 88, b * 25);
    f.bezierCurveTo(b * 47, b * 28, b * 40, b * 32, b * 36, b * 44);
    f.closePath();
    em(f, d[aq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 145, b * 75);
    f.bezierCurveTo(b * 143, b * 51, b * 133, b * 29, b * Jo, b * 27);
    f.bezierCurveTo(b * 52, b * 21, b * 37, b * 37, b * 31, b * 54);
    f.bezierCurveTo(b * 23, b * 78, b * 28, b * 77, b * 36, b * 79);
    f.bezierCurveTo(b * 80, b * 87, b * 120, b * 81, b * 145, b * 76);
    f.closePath();
    em(f, Go, d[2], b * _g);
    f.translate(0, -yr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 67);
    f.bezierCurveTo(b * 55, b * 80, b * 126, b * 74, b * 144, b * 68);
    f.bezierCurveTo(b * 144.5, b * 75, b * 144.5, b * 75, b * 145, b * 82);
    f.bezierCurveTo(b * 114, b * 94, b * 47, b * 91, b * 28, b * 82);
    f.closePath();
    em(f, d[Mh], d[10], Rh * b);
    f.translate(0, b * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131, b * 43);
    f.bezierCurveTo(b * 145, b * 40, b * 148, b * 32, b * 147, b * j);
    f.bezierCurveTo(b * 166, b * 39, b * 155, b * 62, b * 140, b * 67);
    f.bezierCurveTo(b * 128, b * 65, b * 128, b * 52, b * 131, b * 45);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41, b * 43);
    f.bezierCurveTo(b * 30, b * 42, b * 24, b * 33, b * 25, b * wj);
    f.bezierCurveTo(b * 7, b * 34, j * b, b * 63, b * 33, b * 66);
    f.bezierCurveTo(b * 45, b * 59, b * 44, b * 53, b * 42, b * 44);
    f.closePath();
    em(f, d[Vr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 24, b * 19);
    f.bezierCurveTo(b * 24, b * 35, b * 35, b * 42, b * 42, b * 44);
    f.bezierCurveTo(b * 43, b * 51, b * 43, b * 48, b * 43, b * 56);
    f.bezierCurveTo(b * 25, b * 47, b * 17, b * 36, b * 23, b * 20);
    f.closePath();
    em(f, d[Qj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 148, Jg * b);
    f.bezierCurveTo(b * 159, b * 44, b * 139, b * 52, b * 130, b * 55);
    f.bezierCurveTo(b * 129, b * 48, b * 129, b * 46, b * 131, b * 43);
    f.bezierCurveTo(b * 144, b * 37, b * 148, b * 35, b * 147, b * Kt);
    f.closePath();
    em(f, d[lc]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 131, b * 43);
    f.bezierCurveTo(b * 145, b * 40, b * 148, b * 32, b * 147, b * 17);
    f.bezierCurveTo(b * 166, b * 39, b * 155, b * 62, b * 140, b * 67);
    f.bezierCurveTo(b * 128, b * 65, b * 128, b * 52, b * 131, b * 45);
    f.closePath();
    em(f, undefined, d[Ha], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41, b * 43);
    f.bezierCurveTo(b * 30, b * 42, b * 24, b * 33, b * 25, b * 17);
    f.bezierCurveTo(b * 7, b * 34, b * zg, b * 63, b * 33, b * 66);
    f.bezierCurveTo(b * 45, b * 59, b * 44, b * 53, b * 42, b * 44);
    f.closePath();
    em(f, Yr, d[4], b * 4);
    f.save();
    f.translate(b * 87, b * 34.5);
    f.rotate(Sh);
    nm(f, b * -8, b * -10.5, b * 16, b * 21, b * 10);
    f.restore();
    em(f, d[7], d[2], b * bq);
    f.save();
    f.translate(b * 87, b * 57);
    f.rotate(0);
    nm(f, -An * b, b * -23, b * 16, b * 46, b * 10);
    f.restore();
    em(f, d[vg], d[2], Ud * b);
    rm(f, b * 87, b * 39, b * 4.123105625617661);
    em(f, d[9], d[2], b * 4);
    rm(f, b * 87, b * 60, b * 4.242640687119285);
    em(f, d[ph], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 67);
    f.bezierCurveTo(b * 55, b * 80, b * 126, b * 74, b * 144, b * 68);
    f.bezierCurveTo(b * 144.5, b * 75, b * 144.5, b * 75, b * 145, b * 82);
    f.bezierCurveTo(b * 114, b * 94, b * 47, b * 91, b * 28, b * 82);
    f.closePath();
    em(f, d[8], d[wc], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 27, b * 69);
    f.bezierCurveTo(b * L, b * 77, b * pq, b * 74, b * 27, b * 80);
    f.closePath();
    em(f, d[9], d[wc], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 145, b * 70);
    f.bezierCurveTo(b * 149.5, b * 72, b * 149.5, b * 72, b * 154, b * 74);
    f.bezierCurveTo(b * 150, b * 77, b * 150, b * 77, b * 146, b * 80);
    f.closePath();
    em(f, d[Gq], d[2], b * 4);
    rm(f, b * 50, b * 80, Gj * b);
    em(f, d[uo], d[mj], sj * b);
    rm(f, b * 86.01141357421875, b * 81.76705932617188, b * 5);
    em(f, d[9], d[Cg], _n * b);
    rm(f, b * 119.01141357421875, b * 80.13069152832031, b * 5);
    em(f, d[dc], d[2], b * 4);
    return e;
  }
  function Gp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(Ea, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Fg * a, a * 50);
    d.bezierCurveTo(a * 15, Oo * a, a * 49, a * 6, a * 67, ss * a);
    d.bezierCurveTo(a * 121, a * Ie, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, yr * a, a * 87, a * 8, a * 50);
    d.closePath();
    em(d, b[0]);
    d.translate(Js, a * -8);
    d.globalAlpha = fn;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(uh * a, zh * a, a * 49, mc * a, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(wc * a, a * 127, Xg * a, a * 87, a * qs, a * 50);
    d.closePath();
    em(d, b[1], b[ih], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo($s * a, a * 57);
    d.bezierCurveTo(wh * a, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    em(d, b[au], b[Cs], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, yg * a);
    d.bezierCurveTo(a * 144, bo * a, a * 146, a * 52, a * 133, a * 58);
    em(d, b[lt], b[ec], a * 4);
    rm(d, a * 51, a * 91, a * sm);
    em(d, b[uc]);
    rm(d, a * 95, a * 91, a * 9);
    em(d, b[er]);
    rm(d, a * 91, a * 89, a * _g);
    em(d, b[4]);
    rm(d, a * 47, a * 89, a * Ha);
    em(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    em(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    em(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    em(d, undefined, b[Xa], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Dn, a * 58);
    d.bezierCurveTo(wd * a, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    em(d, b[Fa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * To, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    em(d, b[6]);
    return c;
  }
  function qp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 102;
    e.height = b * 102;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(3, 3);
    nm(f, b * 24, b * 26, b * 70, b * 9, b * 10);
    em(f, d[0]);
    nm(f, b * 26, b * 70, b * 70, b * 9, b * _);
    em(f, d[Ea]);
    nm(f, b * Me, b * 3, b * 22, b * 94, b * 5);
    em(f, d[0]);
    nm(f, b * 40, b * 3, b * 22, b * 94, b * 5);
    em(f, d[sh]);
    nm(f, b * 75, b * xa, b * 22, b * 94, Tc * b);
    em(f, d[ke]);
    f.globalAlpha = Jf;
    f.translate(-on, -3);
    nm(f, b * 24, b * 26, b * 70, b * 9, b * Zo);
    em(f, d[X]);
    nm(f, b * 26, b * 70, b * 70, Zi * b, b * co);
    em(f, d[Ps]);
    nm(f, b * 5, b * Sr, b * 22, b * 94, Co * b);
    em(f, d[2], d[3], b * 4);
    nm(f, b * 40, b * Ie, b * 22, b * 94, b * Cd);
    em(f, d[2], d[3], b * sj);
    nm(f, b * 75, yr * b, b * 22, b * 94, b * 5);
    em(f, d[2], d[Ie], b * k);
    return e;
  }
  function Wp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 168;
    e.height = Gh * b;
    f.globalAlpha = c ? 0.5 : hf;
    f.translate(b * 10, Tc * b);
    f.save();
    f.translate(b * 24.5, b * 44.30000305175781);
    nm(f, b * -19.5, b * -8.5, b * 39, b * 17, b * 10);
    f.restore();
    em(f, d[Ka]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 37.80000305175781);
    f.bezierCurveTo(b * 142, b * 37.80000305175781, b * 140, b * 37.80000305175781, b * 141, b * 37.80000305175781);
    f.bezierCurveTo(b * 147, b * 28.800003051757812, b * 149, b * 26.800003051757812, b * 153, b * 32.80000305175781);
    f.bezierCurveTo(b * 160, b * 42.80000305175781, b * 157, b * 50.80000305175781, b * 153, b * 58.80000305175781);
    f.bezierCurveTo(b * 148, b * 62.80000305175781, b * 147, b * 59.80000305175781, b * 143, b * 52.80000305175781);
    f.bezierCurveTo(b * 129, b * 52.80000305175781, b * 129, b * 52.80000305175781, b * 115, b * 52.80000305175781);
    f.closePath();
    em(f, d[0]);
    rm(f, b * 78, b * 44.80000305175781, b * 39.44616584663204);
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * -10, -Gj * b);
    f.save();
    f.translate(b * 24.5, b * 44.30000305175781);
    nm(f, b * -19.5, b * -8.5, b * 39, ce * b, b * 10);
    f.restore();
    em(f, undefined, d[oe], b * Nd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 37.80000305175781);
    f.bezierCurveTo(b * 142, b * 37.80000305175781, b * 140, b * 37.80000305175781, b * 141, b * 37.80000305175781);
    f.bezierCurveTo(b * 147, b * 28.800003051757812, b * 149, b * 26.800003051757812, b * 153, b * 32.80000305175781);
    f.bezierCurveTo(b * 160, b * 42.80000305175781, b * 157, b * 50.80000305175781, b * 153, b * 58.80000305175781);
    f.bezierCurveTo(b * 148, b * 62.80000305175781, b * 147, b * 59.80000305175781, b * 143, b * 52.80000305175781);
    f.bezierCurveTo(b * 129, b * 52.80000305175781, b * 129, b * 52.80000305175781, b * 115, b * 52.80000305175781);
    f.closePath();
    em(f, S, d[3], b * lc);
    rm(f, b * 78, b * 44.80000305175781, b * 42.44616584663204);
    em(f, undefined, d[3], b * Rm);
    f.save();
    f.translate(b * 24.5, b * 44.30000305175781);
    nm(f, b * -19.5, b * -8.5, b * 39, Nq * b, b * jc);
    f.restore();
    em(f, d[fn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115, b * 37.80000305175781);
    f.bezierCurveTo(b * 142, b * 37.80000305175781, b * 140, b * 37.80000305175781, b * 141, b * 37.80000305175781);
    f.bezierCurveTo(b * 147, b * 28.800003051757812, b * 149, b * 26.800003051757812, b * 153, b * 32.80000305175781);
    f.bezierCurveTo(b * 160, b * 42.80000305175781, b * 157, b * 50.80000305175781, b * 153, b * 58.80000305175781);
    f.bezierCurveTo(b * 148, b * 62.80000305175781, b * 147, b * 59.80000305175781, b * 143, b * 52.80000305175781);
    f.bezierCurveTo(b * 129, b * 52.80000305175781, b * 129, b * 52.80000305175781, b * 115, b * 52.80000305175781);
    f.closePath();
    em(f, d[1]);
    rm(f, b * 78, b * 44.80000305175781, b * 39.44616584663204);
    em(f, d[ec], d[1], Ld * b);
    rm(f, b * 78, b * 44.80000305175781, b * 29.68164415931166);
    em(f, d[fa], d[X], b * 4);
    rm(f, b * 78, b * 44, b * Ji);
    em(f, d[Jn]);
    return e;
  }
  function Np(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 104;
    e.height = b * 117;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * Ac, b * 90);
    f.bezierCurveTo(b * zd, b * 99.5, b * 20, b * 99.5, b * 36, b * 109);
    f.bezierCurveTo(b * 67, b * 92, b * 67, b * 92, b * 98, b * 75);
    f.bezierCurveTo(b * 91, b * 27, b * 91, b * 27, b * 91, b * 28);
    f.bezierCurveTo(b * 72.5, b * 16, b * 72.5, b * 16, b * 54, Nr * b);
    f.bezierCurveTo(b * 33.5, b * 10, b * 33.5, hg * b, b * 13, b * 16);
    f.closePath();
    em(f, d[Ea]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 6, b * 76);
    f.bezierCurveTo(b * 13.5, b * 51.5, b * 13.5, b * 51.5, b * 21, b * 27);
    f.bezierCurveTo(b * 37.5, b * Vo, b * 37.5, b * 17, b * 54, b * ef);
    f.bezierCurveTo(b * 33.5, b * 12.5, b * 33.5, b * 12.5, b * Ph, b * 18);
    f.closePath();
    em(f, d[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 24, b * 62);
    f.bezierCurveTo(b * 28.5, b * 53, b * 28.5, b * 53, b * 33, b * 44);
    f.bezierCurveTo(b * 41.5, b * 41, b * 41.5, b * 41, b * 50, b * 38);
    f.bezierCurveTo(b * 52.5, b * 35, b * 52.5, b * 35, b * 55, b * 32);
    f.bezierCurveTo(b * 52, b * 30, b * 52, b * 30, b * 49, b * 28);
    f.bezierCurveTo(b * 38, b * 31.5, b * 38, b * 31.5, b * 27, b * 35);
    f.closePath();
    em(f, d[1]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 107);
    f.bezierCurveTo(b * 66, b * 90.5, b * 66, b * 90.5, b * 96, b * 74);
    f.bezierCurveTo(b * 93, b * 52.5, b * 93, b * 52.5, b * 90, b * 31);
    f.bezierCurveTo(b * 87, b * 48, b * 87, b * 48, b * 84, b * 65);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * yd, b * 89);
    f.bezierCurveTo(b * kq, _j * b, b * 34, b * 110, b * 35, b * 111);
    f.bezierCurveTo(b * 67, b * 93, b * 67, b * 93, b * 99, b * 75);
    f.bezierCurveTo(b * 100, b * 78.5, b * 100, b * 78.5, b * 101, b * 82);
    f.bezierCurveTo(b * 68, b * 99, b * 68, b * 99, b * 35, b * 116);
    f.bezierCurveTo(b * 18, b * 106.5, b * 18, b * 106.5, fo * b, b * 97);
    f.closePath();
    em(f, d[Sn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36, b * 107);
    f.bezierCurveTo(b * 66.5, b * 91.5, b * 66.5, b * 91.5, b * 97, b * 76);
    f.bezierCurveTo(b * 94.5, b * 52, b * 94.5, b * 52, b * 92, b * 28);
    f.bezierCurveTo(b * 73, b * 15.5, b * 73, b * 15.5, b * 54, b * yr);
    f.bezierCurveTo(b * 33, b * 9.5, b * 33, b * 9.5, b * 12, b * Tr);
    f.bezierCurveTo(rg * b, b * 53, b * tq, b * 53, b * eh, b * 90);
    f.bezierCurveTo(b * 18.5, b * 99, b * 18.5, b * 99, b * 33, b * 108);
    f.closePath();
    em(f, ch, d[4], b * Xa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 22, b * 71);
    f.bezierCurveTo(b * 30, b * 76.5, b * 30, b * 76.5, b * 38, b * 82);
    f.bezierCurveTo(b * 53, b * 72, b * 53, b * 72, b * 68, b * 62);
    f.bezierCurveTo(b * 68, b * 52, b * 68, b * 52, b * 68, b * 42);
    f.bezierCurveTo(b * 59.5, b * 35.5, b * 59.5, b * 35.5, b * 51, b * 29);
    f.bezierCurveTo(b * 39.5, b * 32, b * 39.5, b * 32, b * 28, b * 35);
    f.bezierCurveTo(b * 25, b * 52, b * 25, b * 52, b * 22, b * 69);
    f.closePath();
    em(f, undefined, d[mn], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Tc * b, b * 89);
    f.bezierCurveTo(b * to, b * 73, b * 12.5, b * 80.5, jg * b, b * 72);
    f.closePath();
    em(f, yc, d[Nr], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35, b * 102);
    f.bezierCurveTo(b * 36, b * 92.5, b * 36, b * 92.5, b * 37, b * 83);
    f.closePath();
    em(f, undefined, d[4], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 68, b * 62);
    f.bezierCurveTo(b * 81, b * 67.5, b * 81, b * 67.5, b * 94, b * 73);
    f.closePath();
    em(f, undefined, d[4], O * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70, b * 41);
    f.bezierCurveTo(b * 80, b * 35.5, b * 80, b * 35.5, b * 90, b * 30);
    f.closePath();
    em(f, yc, d[4], Ae * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 28, b * 33);
    f.bezierCurveTo(b * 21.5, b * 26.5, b * 21.5, b * 26.5, b * 15, b * 20);
    f.closePath();
    em(f, Rj, d[Jr], b * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 51, b * 28);
    f.bezierCurveTo(b * 53, b * 17, b * 53, b * Ne, b * 55, b * 6);
    f.closePath();
    em(f, undefined, d[_g], Fa * b);
    return e;
  }
  function Hp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 465;
    e.height = b * 310;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 126, b * 192);
    f.bezierCurveTo(b * 198, b * 202, b * 245, b * 203, b * 335, b * 194);
    f.bezierCurveTo(b * 336, b * 232, b * 326, b * 235, b * 232, b * 237);
    f.bezierCurveTo(b * 161, b * 235, b * 122, b * 235, b * 126, b * 193);
    f.closePath();
    em(f, d[xn], d[1], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 146, b * 239);
    f.bezierCurveTo(b * 174, b * 74, b * 287, b * 88, b * 320, b * 240);
    f.bezierCurveTo(b * 329, b * 231, b * 340, b * 219, b * 332, b * 115);
    f.bezierCurveTo(b * 330, b * 40, b * 144, b * 30, b * 129, b * 116);
    f.bezierCurveTo(b * 124, b * 217, b * 124, b * 228, b * 143, b * 237);
    f.closePath();
    em(f, d[so], d[1], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 126, b * 193);
    f.bezierCurveTo(b * 173, b * 94, b * 209, b * Vs, b * 228, b * 57);
    f.bezierCurveTo(b * 190, b * 112, b * 165, b * 115, b * 127, b * 184);
    f.closePath();
    em(f, Pq, d[1], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 230, b * 57);
    f.bezierCurveTo(b * 266, b * 117, b * 310, b * 130, b * 332, b * 183);
    f.bezierCurveTo(b * 290, b * 112, b * 262, b * 109, b * 230, b * 56);
    f.closePath();
    em(f, undefined, d[Mc], Gs * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 154, b * 212);
    f.bezierCurveTo(b * 208, b * 224, b * 252, b * 219, b * 305, b * 212);
    f.bezierCurveTo(b * 267, b * 219, b * 204, b * 222, b * 155, b * 212);
    f.closePath();
    em(f, Rj, d[ae], b * Gs);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 239, b * 59);
    f.bezierCurveTo(b * 302, b * 72, b * 325, b * 84, b * 326, b * 115);
    f.bezierCurveTo(b * 289, b * 80, b * 270, b * 88, b * 253, b * 78);
    f.closePath();
    em(f, d[Vn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 216, b * 61);
    f.bezierCurveTo(b * 209, b * 70, b * 209, b * 70, b * 202, b * 79);
    f.bezierCurveTo(b * 173, b * 87, b * 162, b * 91, b * 137, b * 107);
    f.bezierCurveTo(b * 153, b * 78, b * 174, b * 67, b * 212, b * 62);
    f.closePath();
    em(f, d[ec]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 175, b * 125);
    f.bezierCurveTo(b * 218, b * 94, b * 238, b * 90, b * 281, b * 125);
    f.bezierCurveTo(b * 245, b * 89, b * 240, b * 80, b * 228, b * 67);
    f.bezierCurveTo(b * 207, b * vo, b * 192, b * 104, b * 177, b * 123);
    f.closePath();
    em(f, d[2]);
    return e;
  }
  function Up(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var a = Dd * b;
    var g = b * 4;
    c.width = e;
    c.height = f;
    nm(d, b * 5, Tc * b, e - b * 10, f - rf * b, a);
    em(d, null, "#BBE8EF", g);
    return c;
  }
  function Op(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 202;
    e.height = b * 202;
    f.translate(b * 2, b * au);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.save();
    f.translate(b * 98, b * 41.15177917480469);
    f.rotate(0.8);
    nm(f, -we * b, b * -16.5, b * 32, b * 33, b * Bo);
    f.restore();
    em(f, d[rd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98, b * 22.5089111328125);
    f.bezierCurveTo(b * 97.5, b * 41.5089111328125, b * 97.5, b * 41.5089111328125, b * 97, b * 60.5089111328125);
    em(f, d[2]);
    f.save();
    f.translate(b * 147.5, b * 69.5089111328125);
    f.rotate(0.2);
    nm(f, b * -15.5, -Ms * b, b * 31, b * 32, ls * b);
    f.restore();
    em(f, d[mj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 163, b * 59.50892639160156);
    f.bezierCurveTo(b * 147, b * 69.50892639160156, b * 127, b * 82.50892639160156, b * 131, b * 79.50892639160156);
    em(f, d[rd]);
    f.save();
    f.translate(b * 143.5, b * 128.2946319580078);
    f.rotate(1.24);
    nm(f, b * -16.5, b * -17.5, b * 33, b * 35, bh * b);
    f.restore();
    em(f, d[rd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 162, b * 135.93748474121094);
    f.bezierCurveTo(b * 143.5, b * 128.43748474121094, b * 129, b * 120.93748474121094, b * 125, b * 120.93748474121094);
    em(f, d[Cg]);
    f.save();
    f.translate(b * 99, b * 156.08035278320312);
    f.rotate(0.84);
    nm(f, b * -18, b * -18, b * 36, b * 36, xr * b);
    f.restore();
    em(f, d[Gi]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98, b * 136.08035278320312);
    f.bezierCurveTo(b * 98, b * 156.08035278320312, b * 98, b * 156.08035278320312, b * 98, b * 176.08035278320312);
    em(f, d[2]);
    f.save();
    f.translate(b * 54, b * 72.22320556640625);
    f.rotate(1.32);
    nm(f, b * -dd, b * -$d, b * 36, b * 38, b * Kr);
    f.restore();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 34, b * 60.79463195800781);
    f.bezierCurveTo(b * 53.5, b * 72.29463195800781, b * 69, b * 79.79463195800781, b * 73, b * 83.79463195800781);
    em(f, d[mj]);
    f.save();
    f.translate(b * 49, b * 127.29463195800781);
    f.rotate(1.76);
    nm(f, -Jh * b, b * -17.5, b * 40, b * 35, b * 7);
    f.restore();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 141.7946319580078);
    f.bezierCurveTo(b * 47, b * 130.2946319580078, b * 64, b * 119.79463195800781, b * 64, b * 118.79463195800781);
    em(f, d[2]);
    f.globalAlpha = fo;
    f.translate(bd, b * -10);
    f.save();
    f.translate(b * 98, b * 41.15177917480469);
    f.rotate(0.8);
    nm(f, b * -16, b * -16.5, b * 32, b * 33, b * 7);
    f.restore();
    em(f, d[3], d[Dd], b * aq);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98, b * 22.5089111328125);
    f.bezierCurveTo(b * 97.5, b * 41.5089111328125, b * 97.5, b * 41.5089111328125, b * 97, b * 60.5089111328125);
    em(f, undefined, d[4], b * 5);
    f.save();
    f.translate(b * 147.5, b * 69.5089111328125);
    f.rotate(0.2);
    nm(f, b * -15.5, b * -16, b * 31, b * 32, b * 7);
    f.restore();
    em(f, d[3], d[4], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 163, b * 59.50892639160156);
    f.bezierCurveTo(b * 147, b * 69.50892639160156, b * 127, b * 82.50892639160156, b * 131, b * 79.50892639160156);
    em(f, undefined, d[4], b * 5);
    f.save();
    f.translate(b * 143.5, b * 128.2946319580078);
    f.rotate(1.24);
    nm(f, b * -16.5, b * -17.5, b * 33, b * 35, Pj * b);
    f.restore();
    em(f, d[Wc], d[Nr], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 162, b * 135.93748474121094);
    f.bezierCurveTo(b * 143.5, b * 128.43748474121094, b * 129, b * 120.93748474121094, b * 125, b * 120.93748474121094);
    em(f, Nn, d[4], lh * b);
    f.save();
    f.translate(b * 99, b * 156.08035278320312);
    f.rotate(0.84);
    nm(f, b * -$a, -Ch * b, b * 36, b * 36, b * 7);
    f.restore();
    em(f, d[3], d[4], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 98, b * 136.08035278320312);
    f.bezierCurveTo(b * 98, b * 156.08035278320312, b * 98, b * 156.08035278320312, b * 98, b * 176.08035278320312);
    em(f, Go, d[Ha], b * 5);
    f.save();
    f.translate(b * 54, b * 72.22320556640625);
    f.rotate(1.32);
    nm(f, b * -18, -ft * b, b * 36, b * 38, b * Kr);
    f.restore();
    em(f, d[Xg], d[cn], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 34, b * 60.79463195800781);
    f.bezierCurveTo(b * 53.5, b * 72.29463195800781, b * 69, b * 79.79463195800781, b * 73, b * 83.79463195800781);
    em(f, Rj, d[4], b * 5);
    f.save();
    f.translate(b * 49, b * 127.29463195800781);
    f.rotate(1.76);
    nm(f, b * -Xe, b * -17.5, b * 40, b * 35, Mq * b);
    f.restore();
    em(f, d[Vr], d[4], b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 141.7946319580078);
    f.bezierCurveTo(b * 47, b * 130.2946319580078, b * 64, b * 119.79463195800781, b * 64, b * 118.79463195800781);
    em(f, Pq, d[4], bg * b);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(Oq, Ki * b);
    f.save();
    f.translate(b * 98, b * 99);
    cm(f, 6, b * 70.28669492273468, b * 10);
    f.restore();
    em(f, d[2]);
    f.save();
    f.translate(b * 98, b * 99);
    cm(f, ss, b * 56.455940020351264, b * Zo);
    f.restore();
    em(f, d[z]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    f.save();
    f.translate(b * 98, b * 99);
    cm(f, Ad, b * 70.28669492273468, b * 10);
    f.restore();
    em(f, d[Y], d[6], b * 5);
    f.save();
    f.translate(b * 98, b * 99);
    cm(f, 6, b * 56.455940020351264, b * 10);
    f.restore();
    em(f, d[ef], d[am], Pd * b);
    return e;
  }
  function Yp() {
    new Date().getTime();
    function b(b) {
      var c = Js;
      for (var d = 0, f = Nf; d < b.length; d++) {
        var g = b.charAt(d);
        if (g !== "_" && d !== 5) {
          if (g === "1") {
            c += Math.pow(2, f);
          }
          f++;
        }
      }
      return c;
    }
    ᐃⵠⲆⵠⵠΔᐃ();
    ΔΔ[rt.oA] = [Δᐃ.Sz, Δᐃ.Iz];
    ΔΔ[rt.rA] = [];
    ΔΔ[rt.rA][rt.bt] = [];
    ΔΔ[rt.rA][rt.bt][b("000_010_000")] = [Δᐃ.wci, Δᐃ.Aci];
    ΔΔ[rt.rA][rt.bt][b("000_010_010")] = ΔΔ[rt.rA][rt.bt][b("000_010_000")];
    ΔΔ[rt.rA][rt.bt][b(lj[Ji])] = ΔΔ[rt.rA][rt.bt][b("000_010_000")];
    ΔΔ[rt.rA][rt.bt][b("000_011_010")] = [Δᐃ.rci, Δᐃ.oci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci];
    ΔΔ[rt.rA][rt.bt][b("000_011_011")] = [Δᐃ.sci, Δᐃ.rci, Δᐃ.oci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci, Δᐃ.Eci];
    ΔΔ[rt.rA][rt.bt][b("000_110_000")] = [Δᐃ.mci, Δᐃ.Aci];
    ΔΔ[rt.rA][rt.bt][b("000_110_010")] = [Δᐃ.hci, Δᐃ.mci, Δᐃ.vci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.zci];
    ΔΔ[rt.rA][rt.bt][b("000_110_110")] = [Δᐃ.hci, Δᐃ.gci, Δᐃ.cci, Δᐃ.mci, Δᐃ.vci, Δᐃ.Aci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.zci];
    ΔΔ[rt.rA][rt.bt][b("000_111_000")] = [Δᐃ.mci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci];
    ΔΔ[rt.rA][rt.bt][b("000_111_111")] = [Δᐃ.mci, Δᐃ.cci, Δᐃ.hci, Δᐃ.oci, Δᐃ.rci, Δᐃ.sci, Δᐃ.fci];
    ΔΔ[rt.rA][rt.bt][b("010_010_000")] = [Δᐃ.Aci];
    ΔΔ[rt.rA][rt.bt][b("010_010_010")] = [Δᐃ.bci, Δᐃ.Aci, Δᐃ.wci];
    ΔΔ[rt.rA][rt.bt][b("010_011_000")] = [Δᐃ.aci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Cci];
    ΔΔ[rt.rA][rt.bt][b("010_110_000")] = [Δᐃ.mci, Δᐃ.vci, Δᐃ.Aci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("010_110_110")] = [Δᐃ.nci, Δᐃ.aci, Δᐃ.rci, Δᐃ.oci, Δᐃ.hci, Δᐃ.cci, Δᐃ.mci, Δᐃ.fci, Δᐃ.lci, Δᐃ.bci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("010_011_010")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_011_011")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("000_111_011")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_110_010")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_111_000")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_111_010")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_111_011")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_111_110")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("010_111_111")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("000_111_110")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("000_111_010")] = ΔΔ[rt.rA][rt.bt][b("010_110_110")];
    ΔΔ[rt.rA][rt.bt][b("011_011_000")] = [Δᐃ.eci, Δᐃ.nci, Δᐃ.aci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Cci];
    ΔΔ[rt.rA][rt.bt][b("011_011_010")] = [Δᐃ.eci, Δᐃ.nci, Δᐃ.aci, Δᐃ.mci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("011_011_011")] = [Δᐃ.oci, Δᐃ.rci, Δᐃ.sci, Δᐃ.aci, Δᐃ.nci, Δᐃ.eci, Δᐃ.lci];
    ΔΔ[rt.rA][rt.bt][b("011_111_000")] = ΔΔ[rt.rA][rt.bt][b("011_011_010")];
    ΔΔ[rt.rA][rt.bt][b("011_111_010")] = [Δᐃ.eci, Δᐃ.nci, Δᐃ.aci, Δᐃ.rci, Δᐃ.oci, Δᐃ.hci, Δᐃ.mci, Δᐃ.fci, Δᐃ.lci, Δᐃ.bci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("011_111_011")] = ΔΔ[rt.rA][rt.bt][b("011_111_010")];
    ΔΔ[rt.rA][rt.bt][b("011_111_110")] = ΔΔ[rt.rA][rt.bt][b("011_111_010")];
    ΔΔ[rt.rA][rt.bt][b("011_111_111")] = [Δᐃ.eci, Δᐃ.nci, Δᐃ.aci, Δᐃ.sci, Δᐃ.rci, Δᐃ.oci, Δᐃ.hci, Δᐃ.cci, Δᐃ.mci, Δᐃ.fci, Δᐃ.lci, Δᐃ.bci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("110_110_000")] = [Δᐃ.dci, Δᐃ.mci, Δᐃ.uci, Δᐃ.vci, Δᐃ.Aci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("110_110_010")] = [Δᐃ.hci, Δᐃ.dci, Δᐃ.mci, Δᐃ.bci, Δᐃ.vci, Δᐃ.Aci, Δᐃ.Eci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("110_110_110")] = [Δᐃ.hci, Δᐃ.cci, Δᐃ.dci, Δᐃ.mci, Δᐃ.bci, Δᐃ.vci, Δᐃ.Aci, Δᐃ.Eci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("110_111_000")] = [Δᐃ.nci, Δᐃ.aci, Δᐃ.dci, Δᐃ.mci, Δᐃ.uci, Δᐃ.pci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("110_111_110")] = [Δᐃ.nci, Δᐃ.aci, Δᐃ.rci, Δᐃ.oci, Δᐃ.hci, Δᐃ.cci, Δᐃ.dci, Δᐃ.mci, Δᐃ.fci, Δᐃ.pci, Δᐃ.lci, Δᐃ.bci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("110_111_111")] = ΔΔ[rt.rA][rt.bt][b("110_111_110")];
    ΔΔ[rt.rA][rt.bt][b("110_111_011")] = ΔΔ[rt.rA][rt.bt][b("110_111_110")];
    ΔΔ[rt.rA][rt.bt][b("110_111_010")] = ΔΔ[rt.rA][rt.bt][b("110_111_110")];
    ΔΔ[rt.rA][rt.bt][b(lj[Dd])] = [Δᐃ.xci, Δᐃ.Cci, Δᐃ.Eci, Δᐃ.Dci, Δᐃ.Bci, Δᐃ.Mci, Δᐃ.wci, Δᐃ.Aci, Δᐃ.kci, Δᐃ.yci, Δᐃ.vci, Δᐃ.bci, Δᐃ.lci, Δᐃ.pci, Δᐃ.fci, Δᐃ.mci, Δᐃ.dci, Δᐃ.hci, Δᐃ.oci, Δᐃ.rci, Δᐃ.aci, Δᐃ.nci, Δᐃ.eci];
    ΔΔ[rt.rA][rt.bt][b(lj[er])] = ΔΔ[rt.rA][rt.bt][b(lj[Ac])];
    ΔΔ[rt.rA][rt.bt][b("111_111_000")] = [Δᐃ.uci, Δᐃ.mci, Δᐃ.dci, Δᐃ.aci, Δᐃ.nci, Δᐃ.eci, Δᐃ.pci];
    ΔΔ[rt.rA][rt.bt][b("111_111_111")] = [Δᐃ.eci, Δᐃ.nci, Δᐃ.aci, Δᐃ.sci, Δᐃ.rci, Δᐃ.oci, Δᐃ.hci, Δᐃ.cci, Δᐃ.dci, Δᐃ.mci, Δᐃ.fci, Δᐃ.lci, Δᐃ.bci, Δᐃ.vci, Δᐃ.yci, Δᐃ.kci, Δᐃ.Aci, Δᐃ.wci, Δᐃ.Mci, Δᐃ.Bci, Δᐃ.Dci, Δᐃ.Eci, Δᐃ.Cci, Δᐃ.xci];
    ΔΔ[rt.rA][rt.bt][b("111_111_010")] = ΔΔ[rt.rA][rt.bt][b("111_111_110")];
    ΔΔ[rt.rA][rt.vt] = [];
    ΔΔ[rt.rA][rt.vt][b("000_010_000")] = [Δᐃ.Xci, Δᐃ.Kci];
    ΔΔ[rt.rA][rt.vt][b("000_010_010")] = ΔΔ[rt.rA][rt.vt][b("000_010_000")];
    ΔΔ[rt.rA][rt.vt][b(lj[ur])] = ΔΔ[rt.rA][rt.vt][b("000_010_000")];
    ΔΔ[rt.rA][rt.vt][b("000_011_010")] = [Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci];
    ΔΔ[rt.rA][rt.vt][b("000_011_011")] = [Δᐃ._ci, Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci, Δᐃ.idi];
    ΔΔ[rt.rA][rt.vt][b("000_110_000")] = [Δᐃ.Gci, Δᐃ.Kci];
    ΔΔ[rt.rA][rt.vt][b("000_110_010")] = [Δᐃ.Tci, Δᐃ.Gci, Δᐃ.Oci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.edi];
    ΔΔ[rt.rA][rt.vt][b("000_110_110")] = [Δᐃ.Tci, Δᐃ.jci, Δᐃ.Rci, Δᐃ.Gci, Δᐃ.Oci, Δᐃ.Kci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.edi];
    ΔΔ[rt.rA][rt.vt][b("000_111_000")] = [Δᐃ.Gci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci];
    ΔΔ[rt.rA][rt.vt][b("000_111_111")] = [Δᐃ.Gci, Δᐃ.Rci, Δᐃ.Tci, Δᐃ.Pci, Δᐃ.Fci, Δᐃ._ci, Δᐃ.Wci];
    ΔΔ[rt.rA][rt.vt][b("010_010_000")] = [Δᐃ.Kci];
    ΔΔ[rt.rA][rt.vt][b("010_010_010")] = [Δᐃ.Uci, Δᐃ.Kci, Δᐃ.Xci];
    ΔΔ[rt.rA][rt.vt][b("010_011_000")] = [Δᐃ.Ici, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.tdi];
    ΔΔ[rt.rA][rt.vt][b("010_110_000")] = [Δᐃ.Gci, Δᐃ.Oci, Δᐃ.Kci, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("010_110_110")] = [Δᐃ.Sci, Δᐃ.Ici, Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Tci, Δᐃ.Rci, Δᐃ.Gci, Δᐃ.Wci, Δᐃ.Hci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("010_011_010")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_011_011")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("000_111_011")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_110_010")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_111_000")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_111_010")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_111_011")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_111_110")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("010_111_111")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("000_111_110")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("000_111_010")] = ΔΔ[rt.rA][rt.vt][b("010_110_110")];
    ΔΔ[rt.rA][rt.vt][b("011_011_000")] = [Δᐃ.Qci, Δᐃ.Sci, Δᐃ.Ici, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.tdi];
    ΔΔ[rt.rA][rt.vt][b("011_011_010")] = [Δᐃ.Qci, Δᐃ.Sci, Δᐃ.Ici, Δᐃ.Gci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("011_011_011")] = [Δᐃ.Pci, Δᐃ.Fci, Δᐃ._ci, Δᐃ.Ici, Δᐃ.Sci, Δᐃ.Qci, Δᐃ.Hci];
    ΔΔ[rt.rA][rt.vt][b("011_111_000")] = ΔΔ[rt.rA][rt.vt][b("011_011_010")];
    ΔΔ[rt.rA][rt.vt][b("011_111_010")] = [Δᐃ.Qci, Δᐃ.Sci, Δᐃ.Ici, Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Tci, Δᐃ.Gci, Δᐃ.Wci, Δᐃ.Hci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("011_111_011")] = ΔΔ[rt.rA][rt.vt][b("011_111_010")];
    ΔΔ[rt.rA][rt.vt][b("011_111_110")] = ΔΔ[rt.rA][rt.vt][b("011_111_010")];
    ΔΔ[rt.rA][rt.vt][b("011_111_111")] = [Δᐃ.Qci, Δᐃ.Sci, Δᐃ.Ici, Δᐃ._ci, Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Tci, Δᐃ.Rci, Δᐃ.Gci, Δᐃ.Wci, Δᐃ.Hci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("110_110_000")] = [Δᐃ.Lci, Δᐃ.Gci, Δᐃ.qci, Δᐃ.Oci, Δᐃ.Kci, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("110_110_010")] = [Δᐃ.Tci, Δᐃ.Lci, Δᐃ.Gci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Kci, Δᐃ.idi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("110_110_110")] = [Δᐃ.Tci, Δᐃ.Rci, Δᐃ.Lci, Δᐃ.Gci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Kci, Δᐃ.idi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("110_111_000")] = [Δᐃ.Sci, Δᐃ.Ici, Δᐃ.Lci, Δᐃ.Gci, Δᐃ.qci, Δᐃ.Nci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("110_111_110")] = [Δᐃ.Sci, Δᐃ.Ici, Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Tci, Δᐃ.Rci, Δᐃ.Lci, Δᐃ.Gci, Δᐃ.Wci, Δᐃ.Nci, Δᐃ.Hci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("110_111_111")] = ΔΔ[rt.rA][rt.vt][b("110_111_110")];
    ΔΔ[rt.rA][rt.vt][b("110_111_011")] = ΔΔ[rt.rA][rt.vt][b("110_111_110")];
    ΔΔ[rt.rA][rt.vt][b("110_111_010")] = ΔΔ[rt.rA][rt.vt][b("110_111_110")];
    ΔΔ[rt.rA][rt.vt][b("111_111_110")] = [Δᐃ.ndi, Δᐃ.tdi, Δᐃ.idi, Δᐃ.$ci, Δᐃ.Zci, Δᐃ.Vci, Δᐃ.Xci, Δᐃ.Kci, Δᐃ.Jci, Δᐃ.Yci, Δᐃ.Oci, Δᐃ.Uci, Δᐃ.Hci, Δᐃ.Nci, Δᐃ.Wci, Δᐃ.Gci, Δᐃ.Lci, Δᐃ.Tci, Δᐃ.Pci, Δᐃ.Fci, Δᐃ.Ici, Δᐃ.Sci, Δᐃ.Qci];
    ΔΔ[rt.rA][rt.vt][b(lj[nh])] = ΔΔ[rt.rA][rt.vt][b("111_111_110")];
    ΔΔ[rt.rA][rt.vt][b("111_111_000")] = [Δᐃ.qci, Δᐃ.Gci, Δᐃ.Lci, Δᐃ.Ici, Δᐃ.Sci, Δᐃ.Qci, Δᐃ.Nci];
    ΔΔ[rt.rA][rt.vt][b("111_111_111")] = [Δᐃ.Qci, Δᐃ.Sci, Δᐃ.Ici, Δᐃ._ci, Δᐃ.Fci, Δᐃ.Pci, Δᐃ.Tci, Δᐃ.Rci, Δᐃ.Lci, Δᐃ.Gci, Δᐃ.Wci, Δᐃ.Hci, Δᐃ.Uci, Δᐃ.Oci, Δᐃ.Yci, Δᐃ.Jci, Δᐃ.Kci, Δᐃ.Xci, Δᐃ.Vci, Δᐃ.Zci, Δᐃ.$ci, Δᐃ.idi, Δᐃ.tdi, Δᐃ.ndi];
    ΔΔ[rt.rA][rt.vt][b("111_111_010")] = ΔΔ[rt.rA][rt.vt][b(lj[eh])];
    ΔΔ[rt.sA] = [];
    ΔΔ[rt.sA][rt.bt] = [];
    ΔΔ[rt.sA][rt.bt][b("000_010_000")] = Δᐃ.lhi;
    ΔΔ[rt.sA][rt.bt][b("000_010_010")] = Δᐃ.bhi;
    ΔΔ[rt.sA][rt.bt][b("000_011_000")] = Δᐃ.vhi;
    ΔΔ[rt.sA][rt.bt][b("000_011_010")] = Δᐃ.yhi;
    ΔΔ[rt.sA][rt.bt][b("000_011_011")] = Δᐃ.khi;
    ΔΔ[rt.sA][rt.bt][b("000_110_000")] = Δᐃ.Ahi;
    ΔΔ[rt.sA][rt.bt][b("000_110_010")] = Δᐃ.whi;
    ΔΔ[rt.sA][rt.bt][b("000_110_110")] = Δᐃ.Mhi;
    ΔΔ[rt.sA][rt.bt][b("000_111_000")] = Δᐃ.Bhi;
    ΔΔ[rt.sA][rt.bt][b("000_111_010")] = Δᐃ.Dhi;
    ΔΔ[rt.sA][rt.bt][b("000_111_011")] = Δᐃ.Ehi;
    ΔΔ[rt.sA][rt.bt][b("000_111_110")] = Δᐃ.Chi;
    ΔΔ[rt.sA][rt.bt][b("000_111_111")] = Δᐃ.zhi;
    ΔΔ[rt.sA][rt.bt][b("010_010_000")] = Δᐃ.xhi;
    ΔΔ[rt.sA][rt.bt][b("010_010_010")] = Δᐃ.Qhi;
    ΔΔ[rt.sA][rt.bt][b("010_011_000")] = Δᐃ.Shi;
    ΔΔ[rt.sA][rt.bt][b("010_011_010")] = Δᐃ.Ihi;
    ΔΔ[rt.sA][rt.bt][b("010_011_011")] = Δᐃ._hi;
    ΔΔ[rt.sA][rt.bt][b("010_110_000")] = Δᐃ.Fhi;
    ΔΔ[rt.sA][rt.bt][b("010_110_010")] = Δᐃ.Phi;
    ΔΔ[rt.sA][rt.bt][b("010_110_110")] = Δᐃ.Thi;
    ΔΔ[rt.sA][rt.bt][b("010_111_000")] = Δᐃ.jhi;
    ΔΔ[rt.sA][rt.bt][b("010_111_010")] = Δᐃ.Rhi;
    ΔΔ[rt.sA][rt.bt][b("010_111_011")] = Δᐃ.Lhi;
    ΔΔ[rt.sA][rt.bt][b("010_111_110")] = Δᐃ.Ghi;
    ΔΔ[rt.sA][rt.bt][b("010_111_111")] = Δᐃ.qhi;
    ΔΔ[rt.sA][rt.bt][b("011_011_000")] = Δᐃ.Whi;
    ΔΔ[rt.sA][rt.bt][b("011_011_010")] = Δᐃ.Nhi;
    ΔΔ[rt.sA][rt.bt][b("011_011_011")] = Δᐃ.Hhi;
    ΔΔ[rt.sA][rt.bt][b("011_111_000")] = Δᐃ.Uhi;
    ΔΔ[rt.sA][rt.bt][b("011_111_010")] = Δᐃ.Ohi;
    ΔΔ[rt.sA][rt.bt][b("011_111_011")] = Δᐃ.Yhi;
    ΔΔ[rt.sA][rt.bt][b("011_111_110")] = Δᐃ.Jhi;
    ΔΔ[rt.sA][rt.bt][b("011_111_111")] = Δᐃ.Khi;
    ΔΔ[rt.sA][rt.bt][b("110_110_000")] = Δᐃ.Xhi;
    ΔΔ[rt.sA][rt.bt][b("110_110_010")] = Δᐃ.Vhi;
    ΔΔ[rt.sA][rt.bt][b("110_110_110")] = Δᐃ.Zhi;
    ΔΔ[rt.sA][rt.bt][b("110_111_000")] = Δᐃ.$hi;
    ΔΔ[rt.sA][rt.bt][b("110_111_010")] = Δᐃ.igi;
    ΔΔ[rt.sA][rt.bt][b("110_111_011")] = Δᐃ.tgi;
    ΔΔ[rt.sA][rt.bt][b("110_111_110")] = Δᐃ.egi;
    ΔΔ[rt.sA][rt.bt][b("110_111_111")] = Δᐃ.ngi;
    ΔΔ[rt.sA][rt.bt][b("111_111_011")] = Δᐃ.agi;
    ΔΔ[rt.sA][rt.bt][b(lj[Ac])] = Δᐃ.sgi;
    ΔΔ[rt.sA][rt.bt][b(lj[E])] = Δᐃ.agi;
    ΔΔ[rt.sA][rt.bt][b("111_111_000")] = Δᐃ.rgi;
    ΔΔ[rt.sA][rt.bt][b("111_111_111")] = Δᐃ.ogi;
    ΔΔ[rt.sA][rt.bt][b("111_111_010")] = Δᐃ.hgi;
    ΔΔ[rt.sA][rt.vt] = [];
    ΔΔ[rt.sA][rt.vt][b("000_010_000")] = Δᐃ.ggi;
    ΔΔ[rt.sA][rt.vt][b("000_010_010")] = Δᐃ.cgi;
    ΔΔ[rt.sA][rt.vt][b(lj[xh])] = Δᐃ.dgi;
    ΔΔ[rt.sA][rt.vt][b("000_011_010")] = Δᐃ.mgi;
    ΔΔ[rt.sA][rt.vt][b("000_011_011")] = Δᐃ.ugi;
    ΔΔ[rt.sA][rt.vt][b("000_110_000")] = Δᐃ.fgi;
    ΔΔ[rt.sA][rt.vt][b("000_110_010")] = Δᐃ.pgi;
    ΔΔ[rt.sA][rt.vt][b("000_110_110")] = Δᐃ.lgi;
    ΔΔ[rt.sA][rt.vt][b("000_111_000")] = Δᐃ.bgi;
    ΔΔ[rt.sA][rt.vt][b("000_111_010")] = Δᐃ.vgi;
    ΔΔ[rt.sA][rt.vt][b("000_111_011")] = Δᐃ.ygi;
    ΔΔ[rt.sA][rt.vt][b("000_111_110")] = Δᐃ.kgi;
    ΔΔ[rt.sA][rt.vt][b("000_111_111")] = Δᐃ.Agi;
    ΔΔ[rt.sA][rt.vt][b("010_010_000")] = Δᐃ.wgi;
    ΔΔ[rt.sA][rt.vt][b("010_010_010")] = Δᐃ.Mgi;
    ΔΔ[rt.sA][rt.vt][b("010_011_000")] = Δᐃ.Bgi;
    ΔΔ[rt.sA][rt.vt][b("010_011_010")] = Δᐃ.Dgi;
    ΔΔ[rt.sA][rt.vt][b("010_011_011")] = Δᐃ.Egi;
    ΔΔ[rt.sA][rt.vt][b("010_110_000")] = Δᐃ.Cgi;
    ΔΔ[rt.sA][rt.vt][b("010_110_010")] = Δᐃ.zgi;
    ΔΔ[rt.sA][rt.vt][b("010_110_110")] = Δᐃ.xgi;
    ΔΔ[rt.sA][rt.vt][b("010_111_000")] = Δᐃ.Qgi;
    ΔΔ[rt.sA][rt.vt][b("010_111_010")] = Δᐃ.Sgi;
    ΔΔ[rt.sA][rt.vt][b("010_111_011")] = Δᐃ.Igi;
    ΔΔ[rt.sA][rt.vt][b("010_111_110")] = Δᐃ._gi;
    ΔΔ[rt.sA][rt.vt][b("010_111_111")] = Δᐃ.Fgi;
    ΔΔ[rt.sA][rt.vt][b("011_011_000")] = Δᐃ.Pgi;
    ΔΔ[rt.sA][rt.vt][b("011_011_010")] = Δᐃ.Tgi;
    ΔΔ[rt.sA][rt.vt][b("011_011_011")] = Δᐃ.jgi;
    ΔΔ[rt.sA][rt.vt][b("011_111_000")] = Δᐃ.Rgi;
    ΔΔ[rt.sA][rt.vt][b("011_111_010")] = Δᐃ.Lgi;
    ΔΔ[rt.sA][rt.vt][b("011_111_011")] = Δᐃ.Ggi;
    ΔΔ[rt.sA][rt.vt][b("011_111_110")] = Δᐃ.qgi;
    ΔΔ[rt.sA][rt.vt][b("011_111_111")] = Δᐃ.Wgi;
    ΔΔ[rt.sA][rt.vt][b("110_110_000")] = Δᐃ.Ngi;
    ΔΔ[rt.sA][rt.vt][b("110_110_010")] = Δᐃ.Hgi;
    ΔΔ[rt.sA][rt.vt][b("110_110_110")] = Δᐃ.Ugi;
    ΔΔ[rt.sA][rt.vt][b("110_111_000")] = Δᐃ.Ogi;
    ΔΔ[rt.sA][rt.vt][b("110_111_010")] = Δᐃ.Ygi;
    ΔΔ[rt.sA][rt.vt][b("110_111_011")] = Δᐃ.Jgi;
    ΔΔ[rt.sA][rt.vt][b("110_111_110")] = Δᐃ.Kgi;
    ΔΔ[rt.sA][rt.vt][b("110_111_111")] = Δᐃ.Xgi;
    ΔΔ[rt.sA][rt.vt][b(lj[er])] = Δᐃ.Vgi;
    ΔΔ[rt.sA][rt.vt][b(lj[_n])] = Δᐃ.Zgi;
    ΔΔ[rt.sA][rt.vt][b("111_111_011")] = Δᐃ.Vgi;
    ΔΔ[rt.sA][rt.vt][b("111_111_000")] = Δᐃ.$gi;
    ΔΔ[rt.sA][rt.vt][b("111_111_111")] = Δᐃ.ici;
    ΔΔ[rt.sA][rt.vt][b("111_111_010")] = Δᐃ.tci;
    ΔΔ[rt.me] = [];
    ΔΔ[rt.me][rt.bt] = Δᐃ.PF;
    ΔΔ[rt.me][rt.vt] = Δᐃ.TF;
    ΔΔ[rt.zs] = [];
    ΔΔ[rt.zs][rt.bt] = Δᐃ.SS;
    ΔΔ[rt.zs][rt.vt] = Δᐃ.IS;
    ΔΔ[rt.Uy] = [];
    ΔΔ[rt.Uy][rt.bt] = Δᐃ.PS;
    ΔΔ[rt.Uy][rt.vt] = Δᐃ.TS;
    ΔΔ[rt.Qs] = [];
    ΔΔ[rt.Qs][rt.bt] = Δᐃ.LS;
    ΔΔ[rt.Qs][rt.vt] = Δᐃ.GS;
    ΔΔ[rt.Wy] = [];
    ΔΔ[rt.Wy][rt.bt] = Δᐃ._S;
    ΔΔ[rt.Wy][rt.vt] = Δᐃ.FS;
    ΔΔ[rt.Oy] = [];
    ΔΔ[rt.Oy][rt.bt] = Δᐃ.jS;
    ΔΔ[rt.Oy][rt.vt] = Δᐃ.RS;
    ΔΔ[rt.Is] = [];
    ΔΔ[rt.Is][rt.bt] = Δᐃ.WF;
    ΔΔ[rt.Is][rt.vt] = Δᐃ.NF;
    ΔΔ[rt.sk] = [];
    ΔΔ[rt.sk][rt.bt] = Δᐃ.HF;
    ΔΔ[rt.sk][rt.vt] = Δᐃ.UF;
    ΔΔ[rt.Fs] = [];
    ΔΔ[rt.Fs][rt.bt] = Δᐃ.vR;
    ΔΔ[rt.Fs][rt.vt] = Δᐃ.yR;
    ΔΔ[rt.Ak] = [];
    ΔΔ[rt.Ak][rt.bt] = Δᐃ.kR;
    ΔΔ[rt.Ak][rt.vt] = Δᐃ.AR;
    ΔΔ[rt.Bk] = [];
    ΔΔ[rt.Bk][rt.bt] = [Δᐃ.Fj];
    ΔΔ[rt.Bk][rt.vt] = [Δᐃ.Pj];
    ΔΔ[rt.Gs] = [];
    ΔΔ[rt.Gs][rt.bt] = Δᐃ.BF;
    ΔΔ[rt.Gs][rt.vt] = Δᐃ.DF;
    ΔΔ[rt.Ws] = [];
    ΔΔ[rt.Ws][rt.bt] = Δᐃ.zF;
    ΔΔ[rt.Ws][rt.vt] = Δᐃ.xF;
    ΔΔ[rt.qs] = [];
    ΔΔ[rt.qs][rt.bt] = Δᐃ.EF;
    ΔΔ[rt.qs][rt.vt] = Δᐃ.CF;
    ΔΔ[rt.Ps] = [];
    ΔΔ[rt.Ps][rt.bt] = Δᐃ.eF;
    ΔΔ[rt.Ps][rt.vt] = Δᐃ.nF;
    ΔΔ[rt.Ts] = [];
    ΔΔ[rt.Ts][rt.bt] = Δᐃ.aF;
    ΔΔ[rt.Ts][rt.vt] = Δᐃ.sF;
    ΔΔ[rt.js] = [];
    ΔΔ[rt.js][rt.bt] = Δᐃ.rF;
    ΔΔ[rt.js][rt.vt] = Δᐃ.oF;
    ΔΔ[rt.Rs] = [];
    ΔΔ[rt.Rs][rt.bt] = Δᐃ.hF;
    ΔΔ[rt.Rs][rt.vt] = Δᐃ.gF;
    ΔΔ[rt.Ls] = [];
    ΔΔ[rt.Ls][rt.bt] = Δᐃ.cF;
    ΔΔ[rt.Ls][rt.vt] = Δᐃ.dF;
    ΔΔ[rt.Ns] = [];
    ΔΔ[rt.Ns][rt.bt] = Δᐃ.QF;
    ΔΔ[rt.Ns][rt.vt] = Δᐃ.SF;
    ΔΔ[rt.tA] = [];
    ΔΔ[rt.tA][rt.bt] = Δᐃ.VL;
    ΔΔ[rt.tA][rt.vt] = Δᐃ.ZL;
    ΔΔ[rt.eA] = [];
    ΔΔ[rt.eA][rt.bt] = Δᐃ.$L;
    ΔΔ[rt.eA][rt.vt] = Δᐃ.iG;
    ΔΔ[rt.ye] = [];
    ΔΔ[rt.ye][rt.bt] = Δᐃ.GF;
    ΔΔ[rt.ye][rt.vt] = Δᐃ.qF;
    ΔΔ[rt.nA] = Δᐃ.nA;
    ΔΔ[rt.aA] = Δᐃ.aA;
    ΔΔ[rt.wA] = [];
    ΔΔ[rt.wA][rt.bt] = [];
    ΔΔ[rt.wA][rt.vt] = [];
    ΔΔ[rt.wA][rt.bt].push(Δᐃ._z);
    ΔΔ[rt.wA][rt.bt].push(Δᐃ.Fz);
    ΔΔ[rt.wA][rt.bt].push(Δᐃ.Pz);
    ΔΔ[rt.wA][rt.vt].push(Δᐃ.Tz);
    ΔΔ[rt.wA][rt.vt].push(Δᐃ.jz);
    ΔΔ[rt.wA][rt.vt].push(Δᐃ.Rz);
    ΔΔ[rt.pr] = [];
    ΔΔ[rt.pr][rt.bt] = [];
    ΔΔ[rt.pr][rt.vt] = [];
    ΔΔ[rt.pr][rt.bt].push(Δᐃ.Lz);
    ΔΔ[rt.pr][rt.bt].push(Δᐃ.Gz);
    ΔΔ[rt.pr][rt.bt].push(Δᐃ.qz);
    ΔΔ[rt.pr][rt.vt].push(Δᐃ.Wz);
    ΔΔ[rt.pr][rt.vt].push(Δᐃ.Nz);
    ΔΔ[rt.pr][rt.vt].push(Δᐃ.Uz);
    ΔΔ[rt._A] = [];
    ΔΔ[rt._A][rt.bt] = [];
    ΔΔ[rt._A][rt.vt] = [];
    ΔΔ[rt._A][rt.bt].push(Δᐃ.Oz);
    ΔΔ[rt._A][rt.bt].push(Δᐃ.Yz);
    ΔΔ[rt._A][rt.bt].push(Δᐃ.Jz);
    ΔΔ[rt._A][rt.bt].push(Δᐃ.Kz);
    ΔΔ[rt._A][rt.bt].push(Δᐃ.Xz);
    ΔΔ[rt._A][rt.vt].push(Δᐃ.Vz);
    ΔΔ[rt._A][rt.vt].push(Δᐃ.Zz);
    ΔΔ[rt._A][rt.vt].push(Δᐃ.$z);
    ΔΔ[rt._A][rt.vt].push(Δᐃ.ix);
    ΔΔ[rt._A][rt.vt].push(Δᐃ.tx);
    ΔΔ[rt.mc] = [];
    ΔΔ[rt.mc][rt.bt] = Δᐃ.yQ;
    ΔΔ[rt.mc][rt.vt] = Δᐃ.kQ;
    ΔΔ[rt.lc] = [];
    ΔΔ[rt.lc][rt.bt] = Δᐃ.MQ;
    ΔΔ[rt.lc][rt.vt] = Δᐃ.BQ;
    ΔΔ[rt.bc] = [];
    ΔΔ[rt.bc][rt.bt] = Δᐃ.DQ;
    ΔΔ[rt.bc][rt.vt] = Δᐃ.EQ;
    ΔΔ[rt.Cc] = Δᐃ.Cc;
    ΔΔ[rt.Sc] = Δᐃ.Sc;
    ΔΔ[rt.Ic] = Δᐃ.Ic;
    ΔΔ[rt.ie] = [];
    ΔΔ[rt.ie][rt.bt] = Δᐃ.Wx;
    ΔΔ[rt.ie][rt.vt] = Δᐃ.Nx;
    ΔΔ[rt.ny] = [];
    ΔΔ[rt.ny][rt.bt] = Δᐃ.Hx;
    ΔΔ[rt.ny][rt.vt] = Δᐃ.Ux;
    ΔΔ[rt.te] = [];
    ΔΔ[rt.te][rt.bt] = Δᐃ.Kx;
    ΔΔ[rt.te][rt.vt] = Δᐃ.Xx;
    ΔΔ[rt.gy] = [];
    ΔΔ[rt.gy][rt.bt] = Δᐃ.Hx;
    ΔΔ[rt.gy][rt.vt] = Δᐃ.Ux;
    ΔΔ[rt.Be] = [];
    ΔΔ[rt.Be][rt.bt] = Δᐃ.IQ;
    ΔΔ[rt.Be][rt.vt] = Δᐃ._Q;
    ΔΔ[rt.$t] = [];
    ΔΔ[rt.$t][rt.bt] = Δᐃ.eQ;
    ΔΔ[rt.$t][rt.vt] = Δᐃ.nQ;
    ΔΔ[rt.fe] = [];
    ΔΔ[rt.fe][rt.bt] = Δᐃ.CQ;
    ΔΔ[rt.fe][rt.vt] = Δᐃ.zQ;
    ΔΔ[rt.Vt] = [];
    ΔΔ[rt.Vt][rt.bt] = Δᐃ.KQ;
    ΔΔ[rt.Vt][rt.vt] = Δᐃ.XQ;
    ΔΔ[rt.Ne] = [];
    ΔΔ[rt.Ne][rt.bt] = Δᐃ.HQ;
    ΔΔ[rt.Ne][rt.vt] = Δᐃ.UQ;
    ΔΔ[rt.Ge] = [];
    ΔΔ[rt.Ge][rt.bt] = Δᐃ.iS;
    ΔΔ[rt.Ge][rt.vt] = Δᐃ.tS;
    ΔΔ[rt.wn] = [];
    ΔΔ[rt.wn][rt.bt] = Δᐃ.Ymi;
    ΔΔ[rt.wn][rt.vt] = Δᐃ.Jmi;
    ΔΔ[rt.Mn] = [];
    ΔΔ[rt.Mn][rt.bt] = Δᐃ.Zmi;
    ΔΔ[rt.Mn][rt.vt] = Δᐃ.$mi;
    ΔΔ[rt.Bn] = [];
    ΔΔ[rt.Bn][rt.bt] = Δᐃ.nui;
    ΔΔ[rt.Bn][rt.vt] = Δᐃ.aui;
    ΔΔ[rt.Dn] = [];
    ΔΔ[rt.Dn][rt.bt] = Δᐃ.hui;
    ΔΔ[rt.Dn][rt.vt] = Δᐃ.gui;
    ΔΔ[rt.En] = [];
    ΔΔ[rt.En][rt.bt] = Δᐃ.uui;
    ΔΔ[rt.En][rt.vt] = Δᐃ.fui;
    ΔΔ[rt.Cn] = [];
    ΔΔ[rt.Cn][rt.bt] = Δᐃ.vui;
    ΔΔ[rt.Cn][rt.vt] = Δᐃ.yui;
    ΔΔ[rt.vn] = [];
    ΔΔ[rt.vn][rt.bt] = Δᐃ.sS;
    ΔΔ[rt.vn][rt.vt] = Δᐃ.rS;
    ΔΔ[rt.yn] = [];
    ΔΔ[rt.yn][rt.bt] = Δᐃ.cS;
    ΔΔ[rt.yn][rt.vt] = Δᐃ.dS;
    ΔΔ[rt.Ve] = [];
    ΔΔ[rt.Ve][rt.bt] = Δᐃ.Dui;
    ΔΔ[rt.Ve][rt.vt] = Δᐃ.Eui;
    ΔΔ[rt.Ze] = [];
    ΔΔ[rt.Ze][rt.bt] = Δᐃ.Cui;
    ΔΔ[rt.Ze][rt.vt] = Δᐃ.zui;
    ΔΔ[rt.$e] = [];
    ΔΔ[rt.$e][rt.bt] = Δᐃ.xui;
    ΔΔ[rt.$e][rt.vt] = Δᐃ.Qui;
    ΔΔ[rt.tn] = [];
    ΔΔ[rt.tn][rt.bt] = Δᐃ.Sui;
    ΔΔ[rt.tn][rt.vt] = Δᐃ.Iui;
    ΔΔ[rt.en] = [];
    ΔΔ[rt.en][rt.bt] = Δᐃ._ui;
    ΔΔ[rt.en][rt.vt] = Δᐃ.Fui;
    ΔΔ[rt.nn] = [];
    ΔΔ[rt.nn][rt.bt] = Δᐃ.Pui;
    ΔΔ[rt.nn][rt.vt] = Δᐃ.Tui;
    ΔΔ[rt.xn] = [];
    ΔΔ[rt.xn][rt.bt] = Δᐃ.Tdi;
    ΔΔ[rt.xn][rt.vt] = Δᐃ.jdi;
    ΔΔ[rt.He] = [];
    ΔΔ[rt.He][rt.bt] = Δᐃ.Fdi;
    ΔΔ[rt.He][rt.vt] = Δᐃ.Pdi;
    ΔΔ[rt.Qn] = [];
    ΔΔ[rt.Qn][rt.bt] = Δᐃ.Odi;
    ΔΔ[rt.Qn][rt.vt] = Δᐃ.Ydi;
    ΔΔ[rt.Ue] = [];
    ΔΔ[rt.Ue][rt.bt] = Δᐃ.Hdi;
    ΔΔ[rt.Ue][rt.vt] = Δᐃ.Udi;
    ΔΔ[rt.Sn] = [];
    ΔΔ[rt.Sn][rt.bt] = Δᐃ.emi;
    ΔΔ[rt.Sn][rt.vt] = Δᐃ.nmi;
    ΔΔ[rt.Oe] = [];
    ΔΔ[rt.Oe][rt.bt] = Δᐃ.imi;
    ΔΔ[rt.Oe][rt.vt] = Δᐃ.tmi;
    ΔΔ[rt.In] = [];
    ΔΔ[rt.In][rt.bt] = Δᐃ.mmi;
    ΔΔ[rt.In][rt.vt] = Δᐃ.umi;
    ΔΔ[rt.Ye] = [];
    ΔΔ[rt.Ye][rt.bt] = Δᐃ.cmi;
    ΔΔ[rt.Ye][rt.vt] = Δᐃ.dmi;
    ΔΔ[rt._n] = [];
    ΔΔ[rt._n][rt.bt] = Δᐃ.wmi;
    ΔΔ[rt._n][rt.vt] = Δᐃ.Mmi;
    ΔΔ[rt.Je] = [];
    ΔΔ[rt.Je][rt.bt] = Δᐃ.kmi;
    ΔΔ[rt.Je][rt.vt] = Δᐃ.Ami;
    ΔΔ[rt.Fn] = [];
    ΔΔ[rt.Fn][rt.bt] = Δᐃ.Wmi;
    ΔΔ[rt.Fn][rt.vt] = Δᐃ.Nmi;
    ΔΔ[rt.Ke] = [];
    ΔΔ[rt.Ke][rt.bt] = Δᐃ.Gmi;
    ΔΔ[rt.Ke][rt.vt] = Δᐃ.qmi;
    ΔΔ[rt.Pn] = [];
    ΔΔ[rt.Pn][rt.bt] = Δᐃ.Imi;
    ΔΔ[rt.Pn][rt.vt] = Δᐃ._mi;
    ΔΔ[rt.Xe] = [];
    ΔΔ[rt.Xe][rt.bt] = Δᐃ.Qmi;
    ΔΔ[rt.Xe][rt.vt] = Δᐃ.Smi;
    ΔΔ[rt.hn] = [];
    ΔΔ[rt.hn][rt.bt] = Δᐃ.wR;
    ΔΔ[rt.hn][rt.vt] = Δᐃ.MR;
    ΔΔ[rt.gn] = [];
    ΔΔ[rt.gn][rt.bt] = Δᐃ.BR;
    ΔΔ[rt.gn][rt.vt] = Δᐃ.DR;
    ΔΔ[rt.ee] = [];
    ΔΔ[rt.ee][rt.bt] = Δᐃ.LQ;
    ΔΔ[rt.ee][rt.vt] = Δᐃ.GQ;
    ΔΔ[rt.ly] = [];
    ΔΔ[rt.ly][rt.bt] = Δᐃ.jQ;
    ΔΔ[rt.ly][rt.vt] = Δᐃ.RQ;
    ΔΔ[rt.My] = [];
    ΔΔ[rt.My][rt.bt] = [];
    ΔΔ[rt.My][rt.vt] = [];
    ΔΔ[rt.My][rt.bt].push(Δᐃ.ⵠⵠⵠⲆᐃΔΔⲆⲆ);
    ΔΔ[rt.My][rt.bt].push(Δᐃ.ⲆⵠᐃΔᐃᐃΔΔᐃ);
    ΔΔ[rt.My][rt.vt].push(Δᐃ.ⲆⵠᐃΔᐃᐃΔΔᐃ);
    ΔΔ[rt.My][rt.vt].push(Δᐃ.ΔᐃᐃⵠⵠᐃᐃΔΔ);
    ΔΔ[rt.xy] = [];
    ΔΔ[rt.xy][rt.bt] = [];
    ΔΔ[rt.xy][rt.vt] = [];
    ΔΔ[rt.xy][rt.bt].push(Δᐃ.uQ);
    ΔΔ[rt.xy][rt.bt].push(Δᐃ.pQ);
    ΔΔ[rt.xy][rt.bt].push(Δᐃ.bQ);
    ΔΔ[rt.xy][rt.vt].push(Δᐃ.fQ);
    ΔΔ[rt.xy][rt.vt].push(Δᐃ.lQ);
    ΔΔ[rt.xy][rt.vt].push(Δᐃ.vQ);
    ΔΔ[rt._e] = [];
    ΔΔ[rt._e][rt.bt] = Δᐃ.P_;
    ΔΔ[rt._e][rt.vt] = Δᐃ.T_;
    ΔΔ[rt.Fe] = [];
    ΔΔ[rt.Fe][rt.bt] = Δᐃ.IR;
    ΔΔ[rt.Fe][rt.vt] = Δᐃ._R;
    ΔΔ[rt.dr] = [];
    ΔΔ[rt.dr][rt.bt] = [];
    ΔΔ[rt.dr][rt.vt] = [];
    ΔΔ[rt.dr][rt.bt].push(Δᐃ.XR);
    ΔΔ[rt.dr][rt.bt].push(Δᐃ.ZR);
    ΔΔ[rt.dr][rt.bt].push(Δᐃ.iL);
    ΔΔ[rt.dr][rt.vt].push(Δᐃ.VR);
    ΔΔ[rt.dr][rt.vt].push(Δᐃ.$R);
    ΔΔ[rt.dr][rt.vt].push(Δᐃ.tL);
    ΔΔ[rt.Ds] = [];
    ΔΔ[rt.Ds][rt.bt] = [];
    ΔΔ[rt.Ds][rt.vt] = [];
    ΔΔ[rt.Ds][rt.bt].push(Δᐃ.nx);
    ΔΔ[rt.Ds][rt.bt].push(Δᐃ.ox);
    ΔΔ[rt.Ds][rt.bt].push(Δᐃ.gx);
    ΔΔ[rt.Ds][rt.vt].push(Δᐃ.sx);
    ΔΔ[rt.Ds][rt.vt].push(Δᐃ.hx);
    ΔΔ[rt.Ds][rt.vt].push(Δᐃ.mx);
    ΔΔ[rt.Es] = [];
    ΔΔ[rt.Es][rt.bt] = [];
    ΔΔ[rt.Es][rt.vt] = [];
    ΔΔ[rt.Es][rt.bt].push(Δᐃ.ux);
    ΔΔ[rt.Es][rt.bt].push(Δᐃ.bx);
    ΔΔ[rt.Es][rt.bt].push(Δᐃ.yx);
    ΔΔ[rt.Es][rt.bt].push(Δᐃ.Ax);
    ΔΔ[rt.Es][rt.bt].push(Δᐃ.Mx);
    ΔΔ[rt.Es][rt.bt].push(Δᐃ.Dx);
    ΔΔ[rt.Es][rt.vt].push(Δᐃ.lx);
    ΔΔ[rt.Es][rt.vt].push(Δᐃ.vx);
    ΔΔ[rt.Es][rt.vt].push(Δᐃ.kx);
    ΔΔ[rt.Es][rt.vt].push(Δᐃ.wx);
    ΔΔ[rt.Es][rt.vt].push(Δᐃ.Bx);
    ΔΔ[rt.Es][rt.vt].push(Δᐃ.Ex);
    ΔΔ[rt.lt] = [];
    ΔΔ[rt.lt][rt.bt] = [];
    ΔΔ[rt.lt][rt.vt] = [];
    ΔΔ[rt.lt][rt.bt].push(Δᐃ.Cx);
    ΔΔ[rt.lt][rt.bt].push(Δᐃ.xx);
    ΔΔ[rt.lt][rt.bt].push(Δᐃ.Sx);
    ΔΔ[rt.lt][rt.bt].push(Δᐃ._x);
    ΔΔ[rt.lt][rt.bt].push(Δᐃ.Px);
    ΔΔ[rt.lt][rt.bt].push(Δᐃ.jx);
    ΔΔ[rt.lt][rt.vt].push(Δᐃ.zx);
    ΔΔ[rt.lt][rt.vt].push(Δᐃ.Qx);
    ΔΔ[rt.lt][rt.vt].push(Δᐃ.Ix);
    ΔΔ[rt.lt][rt.vt].push(Δᐃ.Fx);
    ΔΔ[rt.lt][rt.vt].push(Δᐃ.Tx);
    ΔΔ[rt.lt][rt.vt].push(Δᐃ.Rx);
    ΔΔ[rt.ty] = [];
    ΔΔ[rt.ty][rt.bt] = Δᐃ.Lx;
    ΔΔ[rt.ty][rt.vt] = Δᐃ.Gx;
    ΔΔ[rt.ey] = Δᐃ.qx;
    ΔΔ[rt.Te] = [];
    ΔΔ[rt.Te][rt.bt] = Δᐃ.tfi;
    ΔΔ[rt.Te][rt.vt] = Δᐃ.efi;
    ΔΔ[rt.Os] = [];
    ΔΔ[rt.Os][rt.bt] = Δᐃ.KF;
    ΔΔ[rt.Os][rt.vt] = Δᐃ.XF;
    ΔΔ[rt.Ys] = [];
    ΔΔ[rt.Ys][rt.bt] = Δᐃ.oP;
    ΔΔ[rt.Ys][rt.vt] = Δᐃ.hP;
    ΔΔ[rt.sr] = [];
    ΔΔ[rt.sr][rt.bt] = Δᐃ.eP;
    ΔΔ[rt.sr][rt.vt] = Δᐃ.nP;
    ΔΔ[rt.fA] = [];
    ΔΔ[rt.fA][rt.bt] = Δᐃ.yP;
    ΔΔ[rt.fA][rt.vt] = Δᐃ.kP;
    ΔΔ[rt.pA] = Δᐃ.pA;
    ΔΔ[rt.kM] = [];
    ΔΔ[rt.kM][rt.bt] = Δᐃ.UR;
    ΔΔ[rt.kM][rt.vt] = Δᐃ.JR;
    ΔΔ[rt.wM] = [];
    ΔΔ[rt.wM][rt.bt] = Δᐃ.OR;
    ΔΔ[rt.wM][rt.vt] = Δᐃ.KR;
    ΔΔ[rt.yM] = Δᐃ.yM;
    ΔΔ[rt.AM] = Δᐃ.AM;
    ΔΔ[rt.MM] = Δᐃ.MM;
    ΔΔ[rt.mM] = [];
    ΔΔ[rt.mM][rt.bt] = Δᐃ.Lj;
    ΔΔ[rt.mM][rt.vt] = Δᐃ.Gj;
    ΔΔ[rt.fM] = [];
    ΔΔ[rt.fM][rt.bt] = Δᐃ.qj;
    ΔΔ[rt.fM][rt.vt] = Δᐃ.Wj;
    ΔΔ[rt.pM] = [];
    ΔΔ[rt.pM][rt.bt] = Δᐃ.Nj;
    ΔΔ[rt.pM][rt.vt] = Δᐃ.Hj;
    ΔΔ[rt.uM] = Δᐃ.uM;
    ΔΔ[rt.bM] = Δᐃ.bM;
    ΔΔ[rt.lM] = Δᐃ.lM;
    ΔΔ[rt.FA] = [];
    ΔΔ[rt.FA][rt.bt] = Δᐃ.pj;
    ΔΔ[rt.FA][rt.vt] = Δᐃ.lj;
    ΔΔ[rt.PA] = [];
    ΔΔ[rt.PA][rt.bt] = Δᐃ.bj;
    ΔΔ[rt.PA][rt.vt] = Δᐃ.vj;
    ΔΔ[rt.ir] = [];
    ΔΔ[rt.ir][rt.bt] = Δᐃ.uj;
    ΔΔ[rt.ir][rt.vt] = Δᐃ.fj;
    ΔΔ[rt.GA] = [];
    ΔΔ[rt.GA][rt.bt] = Δᐃ.Cj;
    ΔΔ[rt.GA][rt.vt] = Δᐃ.zj;
    ΔΔ[rt.NA] = [];
    ΔΔ[rt.NA][rt.bt] = Δᐃ.xj;
    ΔΔ[rt.NA][rt.vt] = Δᐃ.Qj;
    ΔΔ[rt.LA] = [];
    ΔΔ[rt.LA][rt.bt] = Δᐃ.yj;
    ΔΔ[rt.LA][rt.vt] = Δᐃ.kj;
    ΔΔ[rt.WA] = [];
    ΔΔ[rt.WA][rt.bt] = Δᐃ.Aj;
    ΔΔ[rt.WA][rt.vt] = Δᐃ.wj;
    ΔΔ[rt.TA] = Δᐃ.TA;
    ΔΔ[rt.jA] = Δᐃ.jA;
    ΔΔ[rt.RA] = Δᐃ.RA;
    ΔΔ[rt.UA] = Δᐃ.UA;
    ΔΔ[rt.OA] = Δᐃ.OA;
    ΔΔ[rt.YA] = Δᐃ.YA;
    ΔΔ[rt.jB] = [];
    ΔΔ[rt.jB][rt.bt] = Δᐃ.rdi;
    ΔΔ[rt.jB][rt.vt] = Δᐃ.gdi;
    ΔΔ[rt.yr] = [];
    ΔΔ[rt.yr][rt.bt] = Δᐃ.adi;
    ΔΔ[rt.yr][rt.vt] = Δᐃ.odi;
    ΔΔ[rt.FB] = [];
    ΔΔ[rt.FB][rt.bt] = Δᐃ.Mdi;
    ΔΔ[rt.FB][rt.vt] = Δᐃ.Bdi;
    ΔΔ[rt.TB] = [];
    ΔΔ[rt.TB][rt.bt] = Δᐃ.sdi;
    ΔΔ[rt.TB][rt.vt] = Δᐃ.hdi;
    ΔΔ[rt.RB] = Δᐃ.RB;
    ΔΔ[rt.PB] = Δᐃ.PB;
    ΔΔ[rt.JA] = [];
    ΔΔ[rt.JA][rt.bt] = Δᐃ.eT;
    ΔΔ[rt.JA][rt.vt] = Δᐃ.nT;
    ΔΔ[rt.tr] = [];
    ΔΔ[rt.tr][rt.bt] = Δᐃ.iT;
    ΔΔ[rt.tr][rt.vt] = Δᐃ.tT;
    ΔΔ[rt.KA] = [];
    ΔΔ[rt.KA][rt.bt] = Δᐃ.aT;
    ΔΔ[rt.KA][rt.vt] = Δᐃ.sT;
    ΔΔ[rt.VA] = [];
    ΔΔ[rt.VA][rt.bt] = Δᐃ.fT;
    ΔΔ[rt.VA][rt.vt] = Δᐃ.pT;
    ΔΔ[rt.iw] = [];
    ΔΔ[rt.iw][rt.bt] = Δᐃ.lT;
    ΔΔ[rt.iw][rt.vt] = Δᐃ.bT;
    ΔΔ[rt.XA] = [];
    ΔΔ[rt.XA][rt.bt] = Δᐃ.rT;
    ΔΔ[rt.XA][rt.vt] = Δᐃ.oT;
    ΔΔ[rt.$A] = [];
    ΔΔ[rt.$A][rt.bt] = Δᐃ.hT;
    ΔΔ[rt.$A][rt.vt] = Δᐃ.gT;
    ΔΔ[rt.ZA] = [];
    ΔΔ[rt.ZA][rt.bt] = Δᐃ.cT;
    ΔΔ[rt.ZA][rt.vt] = Δᐃ.dT;
    ΔΔ[rt.tw] = [];
    ΔΔ[rt.tw][rt.bt] = Δᐃ.mT;
    ΔΔ[rt.tw][rt.vt] = Δᐃ.uT;
    ΔΔ[rt.ew] = Δᐃ.ew;
    ΔΔ[rt.nw] = Δᐃ.nw;
    ΔΔ[rt.aw] = Δᐃ.aw;
    ΔΔ[rt.hw] = [];
    ΔΔ[rt.hw][rt.bt] = Δᐃ.MT;
    ΔΔ[rt.hw][rt.vt] = Δᐃ.BT;
    ΔΔ[rt.er] = [];
    ΔΔ[rt.er][rt.bt] = Δᐃ.AT;
    ΔΔ[rt.er][rt.vt] = Δᐃ.wT;
    ΔΔ[rt.gw] = [];
    ΔΔ[rt.gw][rt.bt] = Δᐃ.DT;
    ΔΔ[rt.gw][rt.vt] = Δᐃ.ET;
    ΔΔ[rt.dw] = [];
    ΔΔ[rt.dw][rt.bt] = Δᐃ.PT;
    ΔΔ[rt.dw][rt.vt] = Δᐃ.TT;
    ΔΔ[rt.fw] = [];
    ΔΔ[rt.fw][rt.bt] = Δᐃ.jT;
    ΔΔ[rt.fw][rt.vt] = Δᐃ.RT;
    ΔΔ[rt.cw] = [];
    ΔΔ[rt.cw][rt.bt] = Δᐃ.CT;
    ΔΔ[rt.cw][rt.vt] = Δᐃ.zT;
    ΔΔ[rt.uw] = [];
    ΔΔ[rt.uw][rt.bt] = Δᐃ.xT;
    ΔΔ[rt.uw][rt.vt] = Δᐃ.QT;
    ΔΔ[rt.mw] = [];
    ΔΔ[rt.mw][rt.bt] = Δᐃ.ST;
    ΔΔ[rt.mw][rt.vt] = Δᐃ.IT;
    ΔΔ[rt.pw] = [];
    ΔΔ[rt.pw][rt.bt] = Δᐃ._T;
    ΔΔ[rt.pw][rt.vt] = Δᐃ.FT;
    ΔΔ[rt.lw] = Δᐃ.lw;
    ΔΔ[rt.bw] = Δᐃ.bw;
    ΔΔ[rt.yw] = Δᐃ.yw;
    ΔΔ[rt.Mw] = [];
    ΔΔ[rt.Mw][rt.bt] = Δᐃ.HT;
    ΔΔ[rt.Mw][rt.vt] = Δᐃ.UT;
    ΔΔ[rt.ar] = [];
    ΔΔ[rt.ar][rt.bt] = Δᐃ.WT;
    ΔΔ[rt.ar][rt.vt] = Δᐃ.NT;
    ΔΔ[rt.Lw] = Δᐃ.Lw;
    ΔΔ[rt.jw] = [];
    ΔΔ[rt.jw][rt.bt] = Δᐃ.OT;
    ΔΔ[rt.jw][rt.vt] = Δᐃ.YT;
    ΔΔ[rt.Rw] = [];
    ΔΔ[rt.Rw][rt.bt] = Δᐃ.JT;
    ΔΔ[rt.Rw][rt.vt] = Δᐃ.KT;
    ΔΔ[rt.Bw] = [];
    ΔΔ[rt.Bw][rt.bt] = Δᐃ.hj;
    ΔΔ[rt.Bw][rt.vt] = Δᐃ.gj;
    ΔΔ[rt.Ew] = [];
    ΔΔ[rt.Ew][rt.bt] = Δᐃ.XT;
    ΔΔ[rt.Ew][rt.vt] = Δᐃ.VT;
    ΔΔ[rt.xw] = [];
    ΔΔ[rt.xw][rt.bt] = Δᐃ.ZT;
    ΔΔ[rt.xw][rt.vt] = Δᐃ.$T;
    ΔΔ[rt.Dw] = [];
    ΔΔ[rt.Dw][rt.bt] = Δᐃ.ij;
    ΔΔ[rt.Dw][rt.vt] = Δᐃ.tj;
    ΔΔ[rt.zw] = [];
    ΔΔ[rt.zw][rt.bt] = Δᐃ.ej;
    ΔΔ[rt.zw][rt.vt] = Δᐃ.nj;
    ΔΔ[rt.Cw] = [];
    ΔΔ[rt.Cw][rt.bt] = Δᐃ.aj;
    ΔΔ[rt.Cw][rt.vt] = Δᐃ.sj;
    ΔΔ[rt.Qw] = [];
    ΔΔ[rt.Qw][rt.bt] = Δᐃ.rj;
    ΔΔ[rt.Qw][rt.vt] = Δᐃ.oj;
    ΔΔ[rt.Sw] = Δᐃ.Sw;
    ΔΔ[rt.Iw] = Δᐃ.Iw;
    ΔΔ[rt._w] = Δᐃ._w;
    ΔΔ[rt.Nw] = [];
    ΔΔ[rt.Nw][rt.bt] = Δᐃ.Yj;
    ΔΔ[rt.Nw][rt.vt] = Δᐃ.Jj;
    ΔΔ[rt.hr] = [];
    ΔΔ[rt.hr][rt.bt] = Δᐃ.Uj;
    ΔΔ[rt.hr][rt.vt] = Δᐃ.Oj;
    ΔΔ[rt.sM] = Δᐃ.sM;
    ΔΔ[rt.nM] = [];
    ΔΔ[rt.nM][rt.bt] = Δᐃ.Kj;
    ΔΔ[rt.nM][rt.vt] = Δᐃ.Xj;
    ΔΔ[rt.aM] = [];
    ΔΔ[rt.aM][rt.bt] = Δᐃ.Vj;
    ΔΔ[rt.aM][rt.vt] = Δᐃ.Zj;
    ΔΔ[rt.Hw] = [];
    ΔΔ[rt.Hw][rt.bt] = Δᐃ.dR;
    ΔΔ[rt.Hw][rt.vt] = Δᐃ.mR;
    ΔΔ[rt.Ow] = [];
    ΔΔ[rt.Ow][rt.bt] = Δᐃ.$j;
    ΔΔ[rt.Ow][rt.vt] = Δᐃ.iR;
    ΔΔ[rt.Kw] = [];
    ΔΔ[rt.Kw][rt.bt] = Δᐃ.tR;
    ΔΔ[rt.Kw][rt.vt] = Δᐃ.eR;
    ΔΔ[rt.Uw] = [];
    ΔΔ[rt.Uw][rt.bt] = Δᐃ.nR;
    ΔΔ[rt.Uw][rt.vt] = Δᐃ.aR;
    ΔΔ[rt.Jw] = [];
    ΔΔ[rt.Jw][rt.bt] = Δᐃ.sR;
    ΔΔ[rt.Jw][rt.vt] = Δᐃ.rR;
    ΔΔ[rt.Yw] = [];
    ΔΔ[rt.Yw][rt.bt] = Δᐃ.oR;
    ΔΔ[rt.Yw][rt.vt] = Δᐃ.hR;
    ΔΔ[rt.Xw] = [];
    ΔΔ[rt.Xw][rt.bt] = Δᐃ.gR;
    ΔΔ[rt.Xw][rt.vt] = Δᐃ.cR;
    ΔΔ[rt.Vw] = Δᐃ.Vw;
    ΔΔ[rt.Zw] = Δᐃ.Zw;
    ΔΔ[rt.$w] = Δᐃ.$w;
    ΔΔ[rt.MA] = [];
    ΔΔ[rt.MA][rt.bt] = Δᐃ.AP;
    ΔΔ[rt.MA][rt.vt] = Δᐃ.BP;
    ΔΔ[rt.BA] = [];
    ΔΔ[rt.BA][rt.bt] = Δᐃ.wP;
    ΔΔ[rt.BA][rt.vt] = Δᐃ.DP;
    ΔΔ[rt.DA] = [];
    ΔΔ[rt.DA][rt.bt] = Δᐃ.MP;
    ΔΔ[rt.DA][rt.vt] = Δᐃ.EP;
    ΔΔ[rt.Vs] = [];
    ΔΔ[rt.Vs][rt.bt] = Δᐃ.Vs;
    ΔΔ[rt.Vs][rt.vt] = Δᐃ.Vs;
    ΔΔ[rt.nr] = [];
    ΔΔ[rt.nr][rt.bt] = Δᐃ.nr;
    ΔΔ[rt.nr][rt.vt] = Δᐃ.nr;
    ΔΔ[rt.kr] = [];
    ΔΔ[rt.kr][rt.bt] = Δᐃ.kr;
    ΔΔ[rt.kr][rt.vt] = Δᐃ.kr;
    ΔΔ[rt.EA] = Δᐃ.EA;
    ΔΔ[rt.bn] = [];
    ΔΔ[rt.bn][rt.bt] = Δᐃ.QP;
    ΔΔ[rt.bn][rt.vt] = Δᐃ.SP;
    ΔΔ[rt.kn] = [];
    ΔΔ[rt.kn][rt.bt] = Δᐃ.PP;
    ΔΔ[rt.kn][rt.vt] = Δᐃ.TP;
    ΔΔ[rt.vr] = [];
    ΔΔ[rt.vr][rt.bt] = [Δᐃ.HP, Δᐃ.jP, Δᐃ.Tdi, Δᐃ.Odi, Δᐃ.emi, Δᐃ.mmi, Δᐃ.wmi, Δᐃ.Wmi, Δᐃ.Imi];
    ΔΔ[rt.vr][rt.vt] = [Δᐃ.UP, Δᐃ.RP, Δᐃ.jdi, Δᐃ.Ydi, Δᐃ.nmi, Δᐃ.umi, Δᐃ.Mmi, Δᐃ.Wmi, Δᐃ._mi];
    ΔΔ[rt.An] = [];
    ΔΔ[rt.An][rt.bt] = Δᐃ.WP;
    ΔΔ[rt.An][rt.vt] = Δᐃ.NP;
    ΔΔ[rt.Js] = [];
    ΔΔ[rt.Js][rt.bt] = Δᐃ.VF;
    ΔΔ[rt.Js][rt.vt] = Δᐃ.ZF;
    ΔΔ[rt.Ks] = [];
    ΔΔ[rt.Ks][rt.bt] = Δᐃ.gP;
    ΔΔ[rt.Ks][rt.vt] = Δᐃ.cP;
    ΔΔ[rt.ae] = [];
    ΔΔ[rt.ae][rt.bt] = Δᐃ.fP;
    ΔΔ[rt.ae][rt.vt] = Δᐃ.pP;
    ΔΔ[rt.ln] = [];
    ΔΔ[rt.ln][rt.bt] = Δᐃ.vdi;
    ΔΔ[rt.ln][rt.vt] = Δᐃ.ydi;
    ΔΔ[rt.pn] = [];
    ΔΔ[rt.pn][rt.bt] = Δᐃ.udi;
    ΔΔ[rt.pn][rt.vt] = Δᐃ.fdi;
    ΔΔ[rt.cn] = [];
    ΔΔ[rt.cn][rt.bt] = Δᐃ.LR;
    ΔΔ[rt.cn][rt.vt] = Δᐃ.GR;
    ΔΔ[rt.Du] = [];
    ΔΔ[rt.Du][rt.bt] = [];
    ΔΔ[rt.Du][rt.vt] = [];
    ΔΔ[rt.Du][rt.bt].push(Δᐃ.ⲆΔΔΔⵠⵠⲆⵠΔ);
    ΔΔ[rt.Du][rt.bt].push(Δᐃ.ᐃⲆⲆⵠⵠⵠⲆⲆᐃ);
    ΔΔ[rt.Du][rt.bt].push(Δᐃ.ⲆᐃⲆⲆⵠΔⵠΔⵠ);
    ΔΔ[rt.Du][rt.vt].push(Δᐃ.ΔΔᐃᐃΔⵠⵠⵠⲆ);
    ΔΔ[rt.Du][rt.vt].push(Δᐃ.ΔᐃⵠⵠᐃⵠΔᐃᐃ);
    ΔΔ[rt.Du][rt.vt].push(Δᐃ.ᐃΔⲆⲆΔᐃᐃΔΔ);
    ΔΔ[rt.Mu] = [];
    ΔΔ[rt.Mu][rt.bt] = [];
    ΔΔ[rt.Mu][rt.vt] = [];
    ΔΔ[rt.Mu][rt.bt].push(Δᐃ.ⲆᐃᐃⲆⵠⲆⵠⵠⵠ);
    ΔΔ[rt.Mu][rt.bt].push(Δᐃ.ⲆᐃᐃⲆᐃⲆⲆΔΔ);
    ΔΔ[rt.Mu][rt.bt].push(Δᐃ.ⲆΔᐃⵠⵠΔΔᐃⵠ);
    ΔΔ[rt.Mu][rt.vt].push(Δᐃ.ΔⲆᐃΔⵠⲆᐃᐃΔ);
    ΔΔ[rt.Mu][rt.vt].push(Δᐃ.ⵠⵠⵠⲆᐃⲆΔⵠᐃ);
    ΔΔ[rt.Mu][rt.vt].push(Δᐃ.ⵠⵠᐃⲆⲆⵠᐃⵠΔ);
    ΔΔ[rt.Bu] = [];
    ΔΔ[rt.Bu][rt.bt] = [];
    ΔΔ[rt.Bu][rt.vt] = [];
    ΔΔ[rt.Bu][rt.bt].push(Δᐃ.ᐃᐃΔⵠⲆⵠⵠΔⵠ);
    ΔΔ[rt.Bu][rt.bt].push(Δᐃ.ΔᐃⵠⲆⲆᐃᐃⵠᐃ);
    ΔΔ[rt.Bu][rt.bt].push(Δᐃ.ⲆⵠᐃⲆⵠΔᐃᐃⲆ);
    ΔΔ[rt.Bu][rt.vt].push(Δᐃ.ⲆⵠΔⲆⲆΔΔⵠΔ);
    ΔΔ[rt.Bu][rt.vt].push(Δᐃ.ΔΔⵠⵠⲆⵠᐃⵠⲆ);
    ΔΔ[rt.Bu][rt.vt].push(Δᐃ.ᐃⲆⵠᐃⵠⲆⲆⵠΔ);
    ⲆⲆΔⲆ.g = [];
    ⲆⲆΔⲆ.g[Gc] = [Δᐃ.TC, Δᐃ.sz];
    ⲆⲆΔⲆ.g[Ej] = ⲆⲆΔⲆ.g[0];
    ⲆⲆΔⲆ.g[2] = [Δᐃ.jC, Δᐃ.rz];
    ⲆⲆΔⲆ.Pfi = [];
    ⲆⲆΔⲆ.Pfi[0] = [Δᐃ.RC, Δᐃ.oz];
    ⲆⲆΔⲆ.Pfi[wg] = ⲆⲆΔⲆ.Pfi[Ea];
    ⲆⲆΔⲆ.Pfi[Tg] = [Δᐃ.LC, Δᐃ.hz];
    ⲆⲆΔⲆ.la = [];
    ⲆⲆΔⲆ.la[Sh] = [Δᐃ.$C, Δᐃ.wz];
    ⲆⲆΔⲆ.la[1] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[2] = ⲆⲆΔⲆ.la[sh];
    ⲆⲆΔⲆ.la[xa] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[Ha] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[5] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.s = [];
    ⲆⲆΔⲆ.s[0] = [Δᐃ.FC, Δᐃ.nz];
    ⲆⲆΔⲆ.s[au] = ⲆⲆΔⲆ.s[0];
    ⲆⲆΔⲆ.s[Cg] = [Δᐃ.PC, Δᐃ.az];
    ⲆⲆΔⲆ.Tfi = [];
    ⲆⲆΔⲆ.Tfi[0] = [Δᐃ._C, Δᐃ._C];
    ⲆⲆΔⲆ.a = [];
    ⲆⲆΔⲆ.a[0] = [Δᐃ.GC, Δᐃ.gz];
    ⲆⲆΔⲆ.a[1] = ⲆⲆΔⲆ.a[0];
    ⲆⲆΔⲆ.a[2] = ⲆⲆΔⲆ.a[Gc];
    ⲆⲆΔⲆ.d = [];
    ⲆⲆΔⲆ.d[0] = [Δᐃ.NC, Δᐃ.mz];
    ⲆⲆΔⲆ.d[ae] = ⲆⲆΔⲆ.d[Vd];
    ⲆⲆΔⲆ.d[hu] = ⲆⲆΔⲆ.d[0];
    ⲆⲆΔⲆ.re = [];
    ⲆⲆΔⲆ.re[0] = [Δᐃ.UC, Δᐃ.fz];
    ⲆⲆΔⲆ.re[fi] = ⲆⲆΔⲆ.re[bd];
    ⲆⲆΔⲆ.re[lr] = ⲆⲆΔⲆ.re[0];
    ⲆⲆΔⲆ.f = [];
    ⲆⲆΔⲆ.f[Ea] = [Δᐃ.JC, Δᐃ.bz];
    ⲆⲆΔⲆ.f[yd] = ⲆⲆΔⲆ.f[Jj];
    ⲆⲆΔⲆ.f[Cg] = ⲆⲆΔⲆ.f[0];
    ⲆⲆΔⲆ.isl = [];
    ⲆⲆΔⲆ.isl[Oq] = [Δᐃ.HC, Δᐃ.uz];
    ⲆⲆΔⲆ.isl[1] = ⲆⲆΔⲆ.isl[qh];
    ⲆⲆΔⲆ.isl[2] = ⲆⲆΔⲆ.isl[Vd];
    ⲆⲆΔⲆ.c = [];
    ⲆⲆΔⲆ.c[0] = [Δᐃ.ZC, Δᐃ.Az];
    ⲆⲆΔⲆ.c[lt] = ⲆⲆΔⲆ.c[0];
    ⲆⲆΔⲆ.c[2] = ⲆⲆΔⲆ.c[Ka];
    ⲆⲆΔⲆ.wtb = [];
    ⲆⲆΔⲆ.wtb[0] = [Δᐃ.SC, Δᐃ.iz];
    ⲆⲆΔⲆ.PIRANHA = [Δᐃ.VC, Δᐃ.kz];
    ⲆⲆΔⲆ.KRAKEN = [Δᐃ.XC, Δᐃ.yz];
    ⲆⲆΔⲆ.FOX = [Δᐃ.KC, Δᐃ.vz];
    ⲆⲆΔⲆ.WOLF = [Δᐃ.YC, Δᐃ.lz];
    ⲆⲆΔⲆ.SPIDER = [Δᐃ.OC, Δᐃ.pz];
    ⲆⲆΔⲆ.BEAR = [Δᐃ.qC, Δᐃ.cz];
    ⲆⲆΔⲆ.CAVE = [Δᐃ.WC, Δᐃ.dz];
    ⲆⲆΔⲆ.MAP = [Δᐃ.CC, Δᐃ.zC];
    ⲆⲆΔⲆ.FOREST = [Δᐃ.Ez, Δᐃ.Qz];
    ⲆⲆΔⲆ.WINTER = [Δᐃ.Bz, Δᐃ.zz];
    ⲆⲆΔⲆ[lj[au]] = [Δᐃ.Mz, Δᐃ.Cz];
    ⲆⲆΔⲆ.LAVA = [Δᐃ.Dz, Δᐃ.xz];
    for (var c in ⲆⲆΔⲆ) {
      for (var d = ⲆⲆΔⲆ[c], f = Js; f < d.length; f++) {
        var g = d[f];
        if (g.jfi !== _e) {
          g.jfi();
        } else if (g.length > Ea) {
          for (var h = so; h < g.length; h++) {
            if (g[h].jfi !== yc) {
              g[h].jfi();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function Jp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 139;
    e.height = b * 135;
    f.translate(0, b * hg);
    f.globalAlpha = c ? 0.5 : fn;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 77);
    f.bezierCurveTo(b * 6, b * 41, b * Rm, b * 33, b * 12, b * 27);
    f.bezierCurveTo(b * 27, b * 6, b * 28, b * Xa, b * 37, ei * b);
    f.bezierCurveTo(b * 62, b * 3, b * 64, b * 5, b * 67, b * uj);
    f.bezierCurveTo(b * 80, b * 36, b * 73.5, b * 25, b * 80, b * 37);
    f.bezierCurveTo(b * 73.5, b * 54, b * 65, b * 74, b * 67, b * 71);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65, b * 37);
    f.bezierCurveTo(b * 105, b * 40, b * 113, b * 39, b * 117, b * 48);
    f.bezierCurveTo(b * 126, b * 70, b * 128, b * 72, b * 124, b * 80);
    f.bezierCurveTo(b * 112, b * 101, b * 110, b * 104, b * 99, b * 104);
    f.bezierCurveTo(b * 59, kh * b, b * 55, b * 99, b * 56, b * 99);
    f.bezierCurveTo(b * 47.5, b * 79, b * 45, b * 66, b * 39, b * 59);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 63);
    f.bezierCurveTo(b * 5, b * 99, Nu * b, b * 101, b * 8, b * 103);
    f.bezierCurveTo(b * 19, b * 123, b * 22, b * 125, b * 28, b * 126);
    f.bezierCurveTo(b * 57, b * 127, b * 55, b * 127, b * 58, b * 120);
    f.bezierCurveTo(b * 82, b * 86, b * 83, b * 78, b * 82, b * 87);
    f.closePath();
    em(f, d[0]);
    f.translate(Ou, b * -10);
    f.globalAlpha = au;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 32, b * 77);
    f.bezierCurveTo(b * 6, b * 41, b * lc, b * 33, b * 12, b * 27);
    f.bezierCurveTo(b * 27, b * Rm, b * 28, b * 6, b * 37, Rm * b);
    f.bezierCurveTo(b * 62, b * fa, b * 64, b * 5, b * 67, b * 13);
    f.bezierCurveTo(b * 80, b * 36, b * 73.5, b * 25, b * 80, b * 37);
    f.bezierCurveTo(b * 73.5, b * 54, b * 65, b * 74, b * 67, b * 71);
    f.closePath();
    em(f, d[X]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65, b * 37);
    f.bezierCurveTo(b * 105, b * 40, b * 113, b * 39, b * 117, b * 48);
    f.bezierCurveTo(b * 126, b * 70, b * 128, b * 72, b * 124, b * 80);
    f.bezierCurveTo(b * 112, b * 101, b * 110, b * 104, b * 99, b * 104);
    f.bezierCurveTo(b * 59, b * 100, b * 55, b * 99, b * 56, b * 99);
    f.bezierCurveTo(b * 47.5, b * 79, b * 45, b * 66, b * 39, b * 59);
    f.closePath();
    em(f, d[yd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 30, b * 63);
    f.bezierCurveTo(b * Wg, b * 99, Au * b, b * 101, rg * b, b * 103);
    f.bezierCurveTo(b * 19, b * 123, b * 22, b * 125, b * 28, b * 126);
    f.bezierCurveTo(b * 57, b * 127, b * 55, b * 127, b * 58, b * 120);
    f.bezierCurveTo(b * 82, b * 86, b * 83, b * 78, b * 82, b * 87);
    f.closePath();
    em(f, d[ae]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80, b * 38);
    f.bezierCurveTo(b * 72.5, b * 52, b * 72.5, b * 52, b * 65, b * 66);
    f.bezierCurveTo(b * 47.5, b * 37, b * 47.5, b * 37, b * 30, $q * b);
    f.bezierCurveTo(b * 48, b * 4, b * 57, b * 4, b * 64, b * Ki);
    f.closePath();
    em(f, d[Cg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65, b * 65);
    f.bezierCurveTo(b * 125, b * 73, b * 95.5, b * 69, b * 126, b * 73);
    f.bezierCurveTo(b * 119, b * 98, b * 106, b * 104, b * 98, b * 103);
    f.bezierCurveTo(b * 84.5, b * 102, b * 84.5, b * 102, b * 71, b * 101);
    f.bezierCurveTo(b * 64, b * 86, b * 64, b * 86, b * 57, b * 70);
    f.closePath();
    em(f, d[eu]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 27, b * 69);
    f.bezierCurveTo(b * 64, b * 65, b * 46, b * 67, b * 65, b * 65);
    f.bezierCurveTo(b * 43.5, b * 94, b * 43.5, b * 94, b * 22, b * 123);
    f.bezierCurveTo(b * 8, b * 103, An * b, b * 103, dc * b, b * 103);
    f.bezierCurveTo(b * lf, b * 98, Pm * b, b * 89, b * 26, b * 70);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 26, b * 69);
    f.bezierCurveTo(b * 65, b * 60, b * 45, b * 65, b * 64, b * 60);
    f.bezierCurveTo(b * 63, b * 65, b * 63, b * 65, b * 62, b * 70);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80, b * 38);
    f.bezierCurveTo(b * 68, b * 70, b * 75, b * 53, b * 70, b * 68);
    f.bezierCurveTo(b * 65, b * 67, b * 65, b * 67, b * 60, b * 65);
    f.closePath();
    em(f, d[En]);
    return e;
  }
  function Kp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 142;
    e.height = b * 118;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 111, b * 27.3671875);
    f.bezierCurveTo(b * 128, b * 9.3671875, b * 125, b * 13.3671875, b * 126, b * 21.3671875);
    f.bezierCurveTo(b * 126, b * 33.3671875, b * 119, b * 43.3671875, b * 118, b * 42.3671875);
    f.closePath();
    em(f, d[pg], d[4], Ld * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 31, b * 23.3671875);
    f.bezierCurveTo(b * Yc, b * 15.3671875, b * 16, b * 14.3671875, b * Vo, b * 20.3671875);
    f.bezierCurveTo(b * 22, b * 33.3671875, b * 20, b * 27.3671875, b * 24, b * 34.3671875);
    f.closePath();
    em(f, d[3], d[4], b * 4);
    f.save();
    f.translate(b * 70.5, b * 34.8671875);
    f.rotate(Sh);
    nm(f, b * -49.5, b * -21.5, b * 99, b * 43, b * 15);
    f.restore();
    em(f, d[du], d[1], pj * b);
    f.save();
    f.translate(b * 71, b * 40.8671875);
    f.rotate(Jj);
    nm(f, b * -49, b * -12.5, b * 98, b * 25, ao * b);
    f.restore();
    em(f, d[Tg], d[1], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.800003051757812, b * 75.95625305175781);
    f.bezierCurveTo(b * 19.300003051757812, b * 82.95625305175781, b * 19.300003051757812, b * 82.95625305175781, b * 18.800003051757812, b * 89.95625305175781);
    f.bezierCurveTo(b * 38.80000305175781, b * 115.95625305175781, b * 37.80000305175781, b * 104.95625305175781, b * 31.800003051757812, b * 91.95625305175781);
    f.closePath();
    em(f, d[eu], d[Ps], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 119.80000305175781, b * 75.95625305175781);
    f.bezierCurveTo(b * 120.80000305175781, b * 82.95625305175781, b * 120.80000305175781, b * 82.95625305175781, b * 121.80000305175781, b * 89.95625305175781);
    f.bezierCurveTo(b * 101.80000305175781, b * 111.95625305175781, b * 99.80000305175781, b * 111.95625305175781, b * 112.80000305175781, b * 81.95625305175781);
    f.closePath();
    em(f, d[2], d[1], Jr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 17.800003051757812, b * 49.15625);
    f.bezierCurveTo(b * 17.800003051757812, b * 64.15625, b * 17.800003051757812, b * 64.15625, b * 17.800003051757812, b * 79.15625);
    f.bezierCurveTo(b * 23.300003051757812, b * 85.15625, b * 23.300003051757812, b * 85.15625, b * 28.800003051757812, b * 91.15625);
    f.bezierCurveTo(b * 36.80000305175781, b * 96.15625, b * 32.80000305175781, b * 91.15625, b * 28.800003051757812, b * 77.15625);
    f.bezierCurveTo(b * 33.80000305175781, b * 65.15625, b * 33.80000305175781, b * 65.15625, b * 38.80000305175781, b * 53.15625);
    f.closePath();
    em(f, d[Ie], d[pj], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 123.80000305175781, b * 53.95625305175781);
    f.bezierCurveTo(b * 121.80000305175781, b * 77.95625305175781, b * 121.80000305175781, b * 74.95625305175781, b * 121.80000305175781, b * 78.95625305175781);
    f.bezierCurveTo(b * 115.80000305175781, b * 84.95625305175781, b * 115.80000305175781, b * 84.95625305175781, b * 109.80000305175781, b * 90.95625305175781);
    f.bezierCurveTo(b * 102.80000305175781, b * 93.95625305175781, b * 105.80000305175781, b * 86.95625305175781, b * 110.80000305175781, b * 76.95625305175781);
    f.bezierCurveTo(b * 107.30000305175781, b * 65.45625305175781, b * 103.80000305175781, b * 53.95625305175781, b * 103.80000305175781, b * 53.95625305175781);
    f.closePath();
    em(f, d[3], d[bq], b * Jr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * P, b * 56.3671875);
    f.bezierCurveTo(b * 70, b * 56.8671875, b * 70, b * 56.8671875, b * 122, b * 57.3671875);
    f.bezierCurveTo(b * 137, b * 20.3671875, b * 137, b * 16.3671875, b * 126, b * 22.3671875);
    f.bezierCurveTo(b * 115.5, b * 34.3671875, b * 115.5, b * 34.3671875, b * 105, b * 46.3671875);
    f.bezierCurveTo(b * 70.5, b * 46.3671875, b * 70.5, b * 46.3671875, b * 36, b * 46.3671875);
    f.bezierCurveTo(Ha * b, b * 14.3671875, b * Ke, b * 18.3671875, b * 8, b * 27.3671875);
    f.bezierCurveTo(b * 12.5, b * 41.8671875, b * 12.5, b * 41.8671875, b * Xj, b * 56.3671875);
    f.closePath();
    em(f, d[Qe], d[4], b * bq);
    f.save();
    f.translate(b * 68.30000305175781, b * 41.45625305175781);
    f.rotate(0.76);
    nm(f, b * -20.5, b * -20.5, b * 41, b * 41, as * b);
    f.restore();
    em(f, undefined, d[5], mn * b);
    f.save();
    f.translate(b * 68.80000305175781, b * 44.45625305175781);
    f.rotate(0.76);
    nm(f, b * -21, b * -20.5, b * 42, b * 41, b * rs);
    f.restore();
    em(f, d[3], d[_g], b * 4);
    f.save();
    f.translate(b * 69.80000305175781, b * 44.556243896484375);
    f.rotate(0.76);
    nm(f, b * -10, b * -jc, b * 20, b * 20, b * 5);
    f.restore();
    em(f, d[6], d[ls], b * 4);
    return e;
  }
  function Xp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    nm(f, b * 10, b * 10, b * 95, b * 80, b * rf);
    em(f, c[2]);
    nm(f, ic * b, b * 5, b * 95, b * 80, _ * b);
    em(f, c[3], c[4], Gm * b);
    if (ke == d) {
      var a = tp(b * 0.75, c, sh);
      f.drawImage(a, b * 22, b * 18);
    } else if (Ko == d) {
      a = tp(b * 0.75, c, 1);
      f.drawImage(a, b * 22, Bs * b);
    }
    return e;
  }
  function Vp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 81;
    e.height = b * 77;
    f.translate(0, b * no);
    f.scale(0.2, 0.2);
    f.translate(Ka, b * -30);
    if (d == Lo) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 36.5, b * 278.0625);
      f.bezierCurveTo(b * 67.5, b * 316.0625, b * 134.5, b * 334.0625, b * 199.5, b * 319.0625);
      f.bezierCurveTo(b * 254.5, b * 304.0625, b * 346.5, b * 270.0625, b * 348.5, b * 237.0625);
      f.bezierCurveTo(b * 359.5, b * 206.0625, b * 318.5, b * 129.0625, b * 262.5, b * 122.0625);
      f.bezierCurveTo(b * 213.5, b * 115.0625, b * 166.5, b * 133.0625, b * 104.5, b * 166.0625);
      f.bezierCurveTo(b * 54.5, b * 194.0625, b * 23.5, b * 241.0625, b * 36.5, b * 277.0625);
      f.closePath();
      em(f, c[bd], c[oe], b * 50);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 36.5, b * 278.0625);
    f.bezierCurveTo(b * 67.5, b * 316.0625, b * 134.5, b * 334.0625, b * 199.5, b * 319.0625);
    f.bezierCurveTo(b * 254.5, b * 304.0625, b * 346.5, b * 270.0625, b * 348.5, b * 237.0625);
    f.bezierCurveTo(b * 359.5, b * 206.0625, b * 318.5, b * 129.0625, b * 262.5, b * 122.0625);
    f.bezierCurveTo(b * 213.5, b * 115.0625, b * 166.5, b * 133.0625, b * 104.5, b * 166.0625);
    f.bezierCurveTo(b * 54.5, b * 194.0625, b * 23.5, b * 241.0625, b * 36.5, b * 277.0625);
    f.closePath();
    em(f, c[Sh], c[Jf], b * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 214.5, b * 124.0625);
    f.bezierCurveTo(b * 242.5, b * 125.0625, b * 272.5, b * 159.0625, b * 283.5, b * 184.0625);
    f.bezierCurveTo(b * 277.5, b * 161.0625, b * 233.5, b * 128.0625, b * 219.5, b * 122.0625);
    f.closePath();
    em(f, c[0], c[Ps], b * Ao);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 157.5, b * 145.0625);
    f.bezierCurveTo(b * 176.5, b * 148.0625, b * 205.5, b * 176.0625, b * 212.5, b * 197.0625);
    f.bezierCurveTo(b * 205.5, b * 178.0625, b * 177.5, b * 152.0625, b * 156.5, b * 142.0625);
    f.closePath();
    em(f, c[0], c[X], b * tc);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 103.5, b * 169.0625);
    f.bezierCurveTo(b * 160.5, b * 166.0625, b * 228.5, b * 312.0625, b * 162.5, b * 323.0625);
    f.bezierCurveTo(b * 128.5, b * 330.0625, b * 45.5, b * 312.0625, b * 34.5, b * 268.0625);
    f.bezierCurveTo(b * 30.5, b * 238.0625, b * 44.5, b * 222.0625, b * 52.5, b * 211.0625);
    f.bezierCurveTo(b * 82.5, b * 174.0625, b * 104.5, b * 166.0625, b * 119.5, b * 172.0625);
    f.closePath();
    em(f, c[Vn], c[1], b * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 194.5, b * 313.0625);
    f.bezierCurveTo(b * 222.5, b * 306.0625, b * 319.5, b * 271.0625, b * 337.5, b * 241.0625);
    f.bezierCurveTo(b * 274.5, b * 270.0625, b * 216.5, b * 288.0625, b * 199.5, b * 287.0625);
    f.bezierCurveTo(b * 198.5, b * 302.0625, b * 195.5, b * 311.0625, b * 193.5, b * 312.0625);
    f.closePath();
    em(f, c[ja]);
    f.scale(3, 3);
    f.translate(nc, hg * b);
    if (d == X) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * Jr, b * 32);
      f.bezierCurveTo(D * b, b * 25, b * 19, b * 25, b * 34, b * zc);
      f.bezierCurveTo(b * 41.5, b * 23.5, b * 41.5, b * 23.5, b * 49, b * 29);
      f.bezierCurveTo(b * 59.5, b * 20, b * 59.5, xh * b, b * 70, b * 11);
      em(f, Nn, c[3], b * 28);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(b * 56, b * 6);
      f.bezierCurveTo(b * 63.5, b * 13.5, b * 63.5, b * 13.5, b * 71, b * 21);
      f.bezierCurveTo(b * 74.5, b * 11.5, b * 74.5, b * 11.5, b * 78, b * eu);
      f.closePath();
      em(f, c[3], c[3], b * 28);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * Dd, b * 32);
    f.bezierCurveTo(Io * b, b * 25, b * 19, b * 25, b * 34, b * 18);
    f.bezierCurveTo(b * 41.5, b * 23.5, b * 41.5, b * 23.5, b * 49, b * 29);
    f.bezierCurveTo(b * 59.5, b * 20, b * 59.5, Wo * b, b * 70, Fh * b);
    em(f, ch, c[ae], b * pd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56, b * 6);
    f.bezierCurveTo(b * 63.5, b * 13.5, b * 63.5, b * 13.5, b * 71, b * 21);
    f.bezierCurveTo(b * 74.5, b * 11.5, b * 74.5, b * 11.5, b * 78, En * b);
    f.closePath();
    em(f, c[Ko], c[1], b * 17);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 4, b * 32);
    f.bezierCurveTo(b * 19, b * 25, b * 19, b * 25, b * 34, b * 18);
    f.bezierCurveTo(b * 41.5, b * 23.5, b * 41.5, b * 23.5, b * 49, b * 29);
    f.bezierCurveTo(b * 59.5, Wh * b, b * 59.5, b * 20, b * 70, b * 11);
    em(f, undefined, c[2], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 56, b * 6);
    f.bezierCurveTo(b * 63.5, b * 13.5, b * 63.5, b * 13.5, b * 71, b * 21);
    f.bezierCurveTo(b * 74.5, b * 11.5, b * 74.5, b * 11.5, b * 78, b * 2);
    f.closePath();
    em(f, c[2], c[2], b * hg);
    return e;
  }
  function Zp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.translate(0, b * 15);
    f.globalAlpha = c ? 0.5 : fn;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 108, b * 216.5, b * 108, b * 216.5, b * 114, b * 279);
    f.bezierCurveTo(b * 124, b * 300, b * 237, b * 299, b * 251, b * 279);
    f.bezierCurveTo(b * 257, b * 217, b * 257, b * 217, b * 263, b * 155);
    f.bezierCurveTo(b * 248, b * 194, b * 91, b * 180, b * 103, b * 156);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 106, b * 53, ee * b, b * 53, b * 263, b * 154);
    f.bezierCurveTo(b * 248, b * 38, b * 99, b * 69, b * 103, b * 154);
    f.closePath();
    em(f, undefined, d[0], b * Ra);
    f.translate(xn, b * -5);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 103, b * 154);
    f.bezierCurveTo(b * 98, b * 119, b * 264, b * 119, b * 264, b * 154);
    f.bezierCurveTo(b * 271, b * 189, b * 94, b * 188, b * 103, b * 154);
    f.closePath();
    em(f, d[xa], d[2], b * Uh);
    f.translate(Oq, b * 25);
    f.globalAlpha = Lo;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 103, b * 154);
    f.bezierCurveTo(b * 98, b * 119, b * 264, b * 119, b * 264, b * 154);
    f.bezierCurveTo(b * 271, b * 189, b * 94, b * 188, b * 103, b * 154);
    f.closePath();
    em(f, d[yh]);
    f.translate(Js, b * -25);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 108, b * 216.5, b * 108, b * 216.5, b * 114, b * 279);
    f.bezierCurveTo(b * 124, b * 300, b * 237, b * 299, b * 251, b * 279);
    f.bezierCurveTo(b * 257, b * 217, b * 257, b * 217, b * 263, b * 155);
    f.bezierCurveTo(b * 248, b * 194, b * 91, b * 180, b * 103, b * 156);
    f.closePath();
    em(f, d[1], d[z], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 182, b * 185);
    f.bezierCurveTo(b * 182.5, b * 237.5, b * 182.5, b * 237.5, b * 183, b * 290);
    f.closePath();
    em(f, undefined, d[lr], de * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 222, b * 287);
    f.bezierCurveTo(b * 226, b * 233.5, b * 226, b * 233.5, b * 230, b * 180);
    f.closePath();
    em(f, undefined, d[2], Qr * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 145, b * 290);
    f.bezierCurveTo(b * 140.5, b * 237, b * 140.5, b * 237, b * 136, b * 184);
    f.closePath();
    em(f, d[1], d[2], b * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105, b * 184);
    f.bezierCurveTo(b * 148, b * 205, b * 231, b * 202, b * 260, b * 182);
    f.bezierCurveTo(b * 259, b * 195.5, b * 259, b * 195.5, b * 258, b * 209);
    f.bezierCurveTo(b * 217, b * 218, b * 163, b * 225, b * 108, b * 207);
    f.closePath();
    em(f, d[Gm], d[mj], b * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 251, b * 276);
    f.bezierCurveTo(b * 251.5, b * 267.5, b * 251.5, b * 267.5, b * 252, b * 259);
    f.bezierCurveTo(b * 212, b * 272, b * 156, b * 275, b * 112, b * 260);
    f.bezierCurveTo(b * 112.5, b * 269, b * 112.5, b * 269, b * 113, b * 278);
    f.bezierCurveTo(b * 155, b * 306, b * 253, b * 286, b * 250, b * 276);
    f.closePath();
    em(f, d[4], d[yo], b * zo);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 106, b * 53, b * 255, b * 53, b * 263, b * 154);
    f.bezierCurveTo(b * 248, b * 38, b * 99, b * 69, b * 103, b * 154);
    f.closePath();
    em(f, Ls, d[2], b * Pn);
    return e;
  }
  function $p(b, c, d) {
    var e = (f = document.createElement("canvas")).getContext("2d");
    f.width = b * 47;
    f.height = b * 60;
    var f;
    e = (f = document.createElement("canvas")).getContext("2d");
    f.width = b * 47;
    f.height = b * 60;
    rm(e, b * 23.5, b * 20.734375, b * 15.132745950421556);
    em(e, undefined, d[2], b * sj);
    rm(e, b * 23.5, b * 20.734375, b * 18.601075237738275);
    em(e, Yr, d[dm], b * cn);
    rm(e, b * 23.5, b * 20.734375, b * 11.40175425099138);
    em(e, Rj, d[1], b * 4);
    e.save();
    e.translate(b * 23, b * 38.734375);
    e.rotate(Nf);
    nm(e, b * -21.5, -Ja * b, b * 43, b * 38, Sg * b);
    e.restore();
    em(e, d[Gi], d[lt], b * 4);
    e.save();
    e.translate(b * 23.5, b * 43.734375);
    e.rotate(0.5235987755982988);
    cm(e, 3, b * 8.06225774829855, b * 0);
    e.restore();
    em(e, d[3]);
    rm(e, b * 23.5, b * 35.734375, b * 7.0710678118654755);
    em(e, d[3]);
    return f;
  }
  function il(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    a.translate(b * 5, b * 15);
    if (e == 1) {
      a.translate(Ou, b * -dh);
      rm(a, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      em(a, d[au], d[Nu], b * 20);
      rm(a, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      em(a, d[Ps], d[Nu], ur * b);
      a.save();
      a.translate(b * 77.00003051757812, b * 31.267044067382812);
      nm(a, b * -6, b * -12.5, b * 12, b * 25, wd * b);
      a.restore();
      em(a, d[hf], d[Qm], b * yg);
      a.save();
      a.translate(b * 77.00003051757812, b * 13.267044067382812);
      nm(a, -$n * b, b * -10.5, b * 30, b * 21, b * 10);
      a.restore();
      em(a, d[Ic], d[Co], b * Xe);
    }
    rm(a, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    em(a, d[ja], d[Te], b * Mq);
    rm(a, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    em(a, d[1], d[2], b * Wm);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    a.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    a.closePath();
    em(a, d[yd], d[2], q * b);
    rm(a, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    em(a, d[Jf], d[2], b * 8);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    a.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    a.closePath();
    em(a, d[3], d[eu], b * Yd);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    a.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    a.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    a.closePath();
    em(a, d[3], d[yo], b * 4);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    a.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    a.closePath();
    em(a, d[E], d[Gi], b * 8);
    a.beginPath();
    a.lineCap = "round";
    a.lineJoin = "round";
    a.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    a.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    a.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    a.closePath();
    em(a, d[nh], d[mj], Ha * b);
    rm(a, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    em(a, d[3], d[2], b * 4);
    a.save();
    a.translate(b * 77.00003051757812, b * 31.267044067382812);
    a.rotate(0);
    nm(a, -oo * b, b * -12.5, b * 12, b * 25, b * 10);
    a.restore();
    em(a, d[Lo], d[2], b * 7);
    a.save();
    a.translate(b * 77.00003051757812, b * 13.267044067382812);
    a.rotate(Nf);
    nm(a, b * -15, b * -10.5, b * 30, b * 21, Zo * b);
    a.restore();
    em(a, d[1], d[2], b * 7);
    return f;
  }
  function tl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 158;
    e.height = b * 201;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 96.5, b * 76.421875);
    f.bezierCurveTo(b * 100.5, b * 64.421875, b * 103.5, b * 62.421875, b * 110.5, b * 65.421875);
    f.bezierCurveTo(b * 116.5, b * 66.421875, b * 117.5, b * 67.421875, b * 112.5, b * 73.421875);
    f.bezierCurveTo(b * 107, b * 79.921875, b * 107, b * 79.921875, b * 101.5, b * 86.421875);
    f.closePath();
    em(f, d[q], d[8], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 61.5, b * 78.421875);
    f.bezierCurveTo(b * 57.5, b * 73.421875, b * 51.5, b * 66.421875, b * 45.5, b * 68.421875);
    f.bezierCurveTo(b * 32.5, b * 73.421875, b * 38.5, b * 75.421875, b * 46.5, b * 81.421875);
    f.bezierCurveTo(b * 51.5, b * 84.921875, b * 51.5, b * 84.921875, b * 56.5, b * 88.421875);
    f.closePath();
    em(f, d[rg], d[8], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 116.5, b * 127.421875);
    f.bezierCurveTo(b * 124.5, b * 108.421875, b * 129.5, b * 104.421875, b * 141.5, b * 107.421875);
    f.bezierCurveTo(b * 156.5, b * 112.421875, b * 153.5, b * 113.421875, b * 132.5, b * 134.421875);
    f.bezierCurveTo(b * 123.5, b * 141.921875, b * 123.5, b * 141.921875, b * 114.5, b * 149.421875);
    f.closePath();
    em(f, d[fm], d[Ca], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41.5, b * 134.421875);
    f.bezierCurveTo(b * 30.5, b * 119.421875, b * 25.5, b * 111.421875, b * 12.5, b * 115.421875);
    f.bezierCurveTo(b * 4.5, b * 120.421875, b * 4.5, b * 121.421875, b * 26.5, b * 142.421875);
    f.bezierCurveTo(b * 35, b * 149.921875, b * 35, b * 149.921875, b * 43.5, b * 157.421875);
    f.closePath();
    em(f, d[qs], d[8], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 78.5, b * 51.921875);
    f.bezierCurveTo(b * 99.5, b * 75.921875, b * 110.5, b * 96.921875, b * 118.5, b * 120.921875);
    f.bezierCurveTo(b * 121.5, b * 140.921875, b * 107.5, b * 179.921875, b * 75.5, b * 183.921875);
    f.bezierCurveTo(b * 30.5, b * 169.921875, b * 37.5, b * 131.921875, b * 34.5, b * 120.921875);
    f.bezierCurveTo(b * 41.5, b * 89.921875, b * 61.5, b * 67.921875, b * 78.5, b * 51.921875);
    f.closePath();
    em(f, d[8], d[ir], b * jn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 72.421875);
    f.bezierCurveTo(b * 76.5, b * 79.421875, b * 79.5, b * 80.421875, b * 83.5, b * 73.421875);
    f.bezierCurveTo(b * 80.5, b * 96.921875, b * 79.5, b * 114.421875, b * 77.5, b * 120.421875);
    f.closePath();
    em(f, d[fm], d[8], b * Mh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.5, b * 163.421875);
    f.bezierCurveTo(b * 62.5, b * 185.421875, b * 86.5, b * 186.421875, b * 111.5, b * 165.421875);
    f.bezierCurveTo(b * 107.5, b * 176.421875, b * 95.5, b * 187.421875, b * 75.5, b * 188.421875);
    f.bezierCurveTo(b * 53.5, b * 188.421875, b * 43.5, b * 171.421875, b * 42.5, b * 164.421875);
    f.closePath();
    em(f, d[kc], d[Fg], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79.5, b * 61.421875);
    f.bezierCurveTo(b * 88.5, b * 31.421875, b * 81.5, b * 16.421875, b * 75.5, b * 7.421875);
    f.bezierCurveTo(b * 77.5, b * 28.421875, b * 77.5, b * 37.421875, b * 68.5, b * 42.421875);
    f.bezierCurveTo(b * 79.5, b * 57.421875, b * 79.5, b * 58.421875, b * 80.5, b * 61.421875);
    f.closePath();
    em(f, d[8], d[hd], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 72.421875);
    f.bezierCurveTo(b * 76.5, b * 79.421875, b * 79.5, b * 80.421875, b * 83.5, b * 73.421875);
    f.bezierCurveTo(b * 80.5, b * 96.921875, b * 79.5, b * 114.421875, b * 77.5, b * 120.421875);
    f.closePath();
    em(f, d[8], d[8], b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 96.5, b * 76.421875);
    f.bezierCurveTo(b * 100.5, b * 64.421875, b * 103.5, b * 62.421875, b * 110.5, b * 65.421875);
    f.bezierCurveTo(b * 116.5, b * 66.421875, b * 117.5, b * 67.421875, b * 112.5, b * 73.421875);
    f.bezierCurveTo(b * 107, b * 79.921875, b * 107, b * 79.921875, b * 101.5, b * 86.421875);
    f.closePath();
    em(f, d[dm], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 61.5, b * 78.421875);
    f.bezierCurveTo(b * 57.5, b * 73.421875, b * 51.5, b * 66.421875, b * 45.5, b * 68.421875);
    f.bezierCurveTo(b * 32.5, b * 73.421875, b * 38.5, b * 75.421875, b * 46.5, b * 81.421875);
    f.bezierCurveTo(b * 51.5, b * 84.921875, b * 51.5, b * 84.921875, b * 56.5, b * 88.421875);
    f.closePath();
    em(f, d[1], d[2], b * eh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 116.5, b * 127.421875);
    f.bezierCurveTo(b * 124.5, b * 108.421875, b * 129.5, b * 104.421875, b * 141.5, b * 107.421875);
    f.bezierCurveTo(b * 156.5, b * 112.421875, b * 153.5, b * 113.421875, b * 132.5, b * 134.421875);
    f.bezierCurveTo(b * 123.5, b * 141.921875, b * 123.5, b * 141.921875, b * 114.5, b * 149.421875);
    f.closePath();
    em(f, d[1], d[tm], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 41.5, b * 134.421875);
    f.bezierCurveTo(b * 30.5, b * 119.421875, b * 25.5, b * 111.421875, b * 12.5, b * 115.421875);
    f.bezierCurveTo(b * 4.5, b * 120.421875, b * 4.5, b * 121.421875, b * 26.5, b * 142.421875);
    f.bezierCurveTo(b * 35, b * 149.921875, b * 35, b * 149.921875, b * 43.5, b * 157.421875);
    f.closePath();
    em(f, d[dm], d[ec], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 78.5, b * 51.921875);
    f.bezierCurveTo(b * 99.5, b * 75.921875, b * 110.5, b * 96.921875, b * 118.5, b * 120.921875);
    f.bezierCurveTo(b * 121.5, b * 140.921875, b * 107.5, b * 179.921875, b * 75.5, b * 183.921875);
    f.bezierCurveTo(b * 30.5, b * 169.921875, b * 37.5, b * 131.921875, b * 34.5, b * 120.921875);
    f.bezierCurveTo(b * 41.5, b * 89.921875, b * 61.5, b * 67.921875, b * 78.5, b * 51.921875);
    f.closePath();
    em(f, d[oe], d[Vn], b * 4);
    rm(f, b * 108.5, b * 148.421875, b * 9);
    em(f, d[Gj]);
    rm(f, b * 106.5, b * 144.421875, b * 3);
    em(f, d[Rm]);
    rm(f, b * 46.5, b * 148.421875, b * 9);
    em(f, d[5]);
    rm(f, b * 44.5, b * 144.421875, b * 3);
    em(f, d[6]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 116.5, b * 114.421875);
    f.bezierCurveTo(b * 121.5, b * 137.421875, b * 118.5, b * 133.421875, b * 108.5, b * 139.421875);
    f.bezierCurveTo(b * 94.5, b * 146.421875, b * 96.5, b * 148.421875, b * 95.5, b * 152.421875);
    em(f, d[mq], d[2], b * Gs);
    f.beginPath();
    f.translate(Cm, -ec * b);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 35.5, b * 131.421875);
    f.bezierCurveTo(b * 36.5, b * 140.421875, b * 39.5, b * 140.421875, b * 49.5, b * 143.421875);
    f.bezierCurveTo(b * 59.5, b * 149.421875, b * 57.5, b * 151.421875, b * 59.5, b * 155.421875);
    em(f, d[Vr], d[2], b * cn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84.5, b * 57.421875);
    f.bezierCurveTo(b * 101.5, b * 120.421875, b * 92.5, b * 127.421875, b * 78.5, b * 134.421875);
    f.bezierCurveTo(b * 51.5, b * 131.421875, b * 63.5, b * 102.421875, b * 70.5, b * 59.421875);
    f.bezierCurveTo(b * 75, b * 55.421875, b * 78.5, b * 52.421875, b * 79.5, b * 51.421875);
    f.closePath();
    em(f, d[Dd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 79.5, b * 61.421875);
    f.bezierCurveTo(b * 88.5, b * 31.421875, b * 81.5, b * 16.421875, b * 75.5, b * 7.421875);
    f.bezierCurveTo(b * 77.5, b * 28.421875, b * 77.5, b * 37.421875, b * 68.5, b * 42.421875);
    f.bezierCurveTo(b * 79.5, b * 57.421875, b * 79.5, b * 58.421875, b * 80.5, b * 61.421875);
    f.closePath();
    em(f, d[yr], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 72.421875);
    f.bezierCurveTo(b * 76.5, b * 79.421875, b * 79.5, b * 80.421875, b * 83.5, b * 73.421875);
    f.bezierCurveTo(b * 80.5, b * 96.921875, b * 79.5, b * 114.421875, b * 77.5, b * 120.421875);
    f.closePath();
    em(f, d[Lc], d[rd], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.5, b * 154.421875);
    f.bezierCurveTo(b * 93.5, b * 163.921875, b * 93.5, b * 163.921875, b * 99.5, b * 173.421875);
    f.bezierCurveTo(b * 95, b * 177.421875, b * 95, b * 177.421875, b * 90.5, b * 181.421875);
    f.bezierCurveTo(b * 89, b * 167.921875, b * 89, b * 167.921875, b * 87.5, b * 154.421875);
    f.closePath();
    em(f, d[6], d[Ig], b * ec);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 81.5, b * 164.421875);
    f.bezierCurveTo(b * 84, b * 172.921875, b * 84, b * 172.921875, b * 86.5, b * 181.421875);
    f.bezierCurveTo(b * 82.5, b * 182.421875, b * 82.5, b * 182.421875, b * 78.5, b * 183.421875);
    f.closePath();
    em(f, d[6], d[ef], b * 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 72.5, b * 164.421875);
    f.bezierCurveTo(b * 73.5, b * 173.921875, b * 73.5, b * 173.921875, b * 74.5, b * 183.421875);
    f.bezierCurveTo(b * 70.5, b * 182.921875, b * 70.5, b * 182.921875, b * 66.5, b * 182.421875);
    f.closePath();
    em(f, d[Th], d[om], z * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.5, b * 156.421875);
    f.bezierCurveTo(b * 65, b * 168.421875, b * 65, b * 168.421875, b * 64.5, b * 180.421875);
    f.bezierCurveTo(b * 58.5, b * 177.421875, b * 58.5, b * 177.421875, b * 52.5, b * 174.421875);
    f.closePath();
    em(f, d[6], d[7], ec * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 42.5, b * 163.421875);
    f.bezierCurveTo(b * 62.5, b * 185.421875, b * 86.5, b * 186.421875, b * 111.5, b * 165.421875);
    f.bezierCurveTo(b * 107.5, b * 176.421875, b * 95.5, b * 187.421875, b * 75.5, b * 188.421875);
    f.bezierCurveTo(b * 53.5, b * 188.421875, b * 43.5, b * 171.421875, b * 42.5, b * 164.421875);
    f.closePath();
    em(f, d[3], d[2], b * 4);
    return e;
  }
  function el(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(Ea, 0);
    var a = function (b, c, d) {
      var e = document.createElement("canvas");
      var f = e.getContext("2d");
      e.width = b * 201;
      e.height = b * 164;
      f.translate(0, b * 5);
      f.globalAlpha = c ? 0.5 : dm;
      rm(f, b * 100.5, b * 82, b * 74.92746655359852);
      em(f, d[Sh], d[0], b * bq);
      rm(f, b * 100.5, b * 82, b * 65.9417374971317);
      em(f, d[sh], d[0], b * 4);
      f.translate(0, -Gj);
      f.globalAlpha = Ko;
      rm(f, b * 100.5, b * 82, b * 74.92746655359852);
      em(f, d[Mc], d[er], b * 4);
      rm(f, b * 100.5, b * 82, b * 65.9417374971317);
      em(f, d[yd], d[rd], b * 4);
      rm(f, b * 100.5, b * 82, b * 35.9417374971317);
      em(f, d[1], d[ih], b * 20);
      rm(f, b * 100.5, b * 82, b * 15.9417374971317);
      em(f, d[Mc], d[tm], b * 6);
      return e;
    }(b, c, d);
    f.drawImage(a, b * -10, b * 0);
    a = gl(b, c, d, 0);
    f.drawImage(a, b * -83, b * -40);
    a = gl(b, c, d, Math.PI / 1.4);
    f.drawImage(a, b * -15, b * -88);
    a = gl(b, c, d, Math.PI / -1.4);
    f.drawImage(a, b * 15, b * -8);
    return e;
  }
  function nl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.translate(0, b * 15);
    f.globalAlpha = c ? 0.5 : Jf;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 108, b * 216.5, b * 108, b * 216.5, b * 114, b * 279);
    f.bezierCurveTo(b * 124, b * 300, b * 237, b * 299, b * 251, b * 279);
    f.bezierCurveTo(b * 257, b * 217, b * 257, b * 217, b * 263, b * 155);
    f.bezierCurveTo(b * 248, b * 194, b * 91, b * 180, b * 103, b * 156);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 106, b * 53, b * ee, b * 53, b * 263, b * 154);
    f.bezierCurveTo(b * 248, b * 38, b * 99, b * 69, b * 103, b * 154);
    f.closePath();
    em(f, undefined, d[Js], b * 11);
    f.translate(0, -Tc * b);
    f.globalAlpha = fi;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 103, b * 154);
    f.bezierCurveTo(b * 98, b * 119, b * 264, b * 119, b * 264, b * 154);
    f.bezierCurveTo(b * 271, b * 189, b * 94, b * 188, b * 103, b * 154);
    f.closePath();
    em(f, d[3], d[2], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 108, b * 216.5, b * 108, b * 216.5, b * 114, b * 279);
    f.bezierCurveTo(b * 124, b * 300, b * 237, b * 299, b * 251, b * 279);
    f.bezierCurveTo(b * 257, b * 217, b * 257, b * 217, b * 263, b * 155);
    f.bezierCurveTo(b * 248, b * 194, b * 91, b * 180, b * 103, b * 156);
    f.closePath();
    em(f, d[Ej], d[wh], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 182, b * 185);
    f.bezierCurveTo(b * 182.5, b * 237.5, b * 182.5, b * 237.5, b * 183, b * 290);
    f.closePath();
    em(f, undefined, d[2], b * 12);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 222, b * 287);
    f.bezierCurveTo(b * 226, b * 233.5, b * 226, b * 233.5, b * 230, b * 180);
    f.closePath();
    em(f, undefined, d[2], b * li);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 145, b * 290);
    f.bezierCurveTo(b * 140.5, b * 237, b * 140.5, b * 237, b * 136, b * 184);
    f.closePath();
    em(f, d[Ko], d[yo], b * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105, b * 184);
    f.bezierCurveTo(b * 148, b * 205, b * 231, b * 202, b * 260, b * 182);
    f.bezierCurveTo(b * 259, b * 195.5, b * 259, b * 195.5, b * 258, b * 209);
    f.bezierCurveTo(b * 217, b * 218, b * 163, b * 225, b * 108, b * 207);
    f.closePath();
    em(f, d[4], d[2], b * 11);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 251, b * 276);
    f.bezierCurveTo(b * 251.5, b * 267.5, b * 251.5, b * 267.5, b * 252, b * 259);
    f.bezierCurveTo(b * 212, b * 272, b * 156, b * 275, b * 112, b * 260);
    f.bezierCurveTo(b * 112.5, b * 269, b * 112.5, b * 269, b * 113, b * 278);
    f.bezierCurveTo(b * 155, b * 306, b * 253, b * 286, b * 250, b * 276);
    f.closePath();
    em(f, d[k], d[2], Ra * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 102, b * 154);
    f.bezierCurveTo(b * 106, b * 53, ah * b, b * 53, b * 263, b * 154);
    f.bezierCurveTo(b * 248, b * 38, b * 99, b * 69, b * 103, b * 154);
    f.closePath();
    em(f, undefined, d[Gi], Kg * b);
    return e;
  }
  function al(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 145;
    e.height = b * 120;
    f.beginPath();
    f.scale(0.6, 0.6);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * 18, b * -8);
    f.moveTo(b * 101, b * 72);
    f.bezierCurveTo(b * 144, b * 69, b * 149, b * 58, b * 162, b * 49);
    f.bezierCurveTo(b * 174, b * 31, b * 173, b * 38, b * 172, b * 45);
    f.bezierCurveTo(b * 168, b * 73, b * 158, b * 75, b * 152, b * 78);
    f.bezierCurveTo(b * 106, b * 89, b * 107, b * 91, b * 107, b * 94);
    f.bezierCurveTo(b * 107, b * 100, b * 107, b * 107, b * 107, b * 107);
    f.bezierCurveTo(b * 99, b * 112, b * 98, b * 110, b * 93, b * 107);
    f.bezierCurveTo(b * 94, b * 107, b * 93, b * 107, b * 93, b * 107);
    f.bezierCurveTo(b * 93, b * 100, b * 93, hs * b, b * 92, b * 94);
    f.bezierCurveTo(b * 92, b * 89, b * 90, b * 90, b * 73, b * 86);
    f.bezierCurveTo(b * 45, b * 81, b * 40, b * 77, b * 35, b * 68);
    f.bezierCurveTo(b * 23, b * 36, b * 28, b * 34, b * 36, b * 46);
    f.bezierCurveTo(b * 45, b * 58, b * 83, b * 72, b * 98, b * 72);
    f.closePath();
    em(f, d[4], d[5], b * Gm);
    f.beginPath();
    f.scale(1.1, 1.1);
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * -9, b * 4);
    f.moveTo(b * 101, b * 72);
    f.bezierCurveTo(b * 144, b * 69, b * 149, b * 58, b * 162, b * 49);
    f.bezierCurveTo(b * 174, b * 31, b * 173, b * 38, b * 172, b * 45);
    f.bezierCurveTo(b * 168, b * 73, b * 158, b * 75, b * 152, b * 78);
    f.bezierCurveTo(b * 106, b * 89, b * 107, b * 91, b * 107, b * 94);
    f.bezierCurveTo(b * 107, Kn * b, b * 107, b * 107, b * 107, b * 107);
    f.bezierCurveTo(b * 99, b * 112, b * 98, b * 110, b * 93, b * 107);
    f.bezierCurveTo(b * 94, b * 107, b * 93, b * 107, b * 93, b * 107);
    f.bezierCurveTo(b * 93, fc * b, b * 93, b * 100, b * 92, b * 94);
    f.bezierCurveTo(b * 92, b * 89, b * 90, b * 90, b * 73, b * 86);
    f.bezierCurveTo(b * 45, b * 81, b * 40, b * 77, b * 35, b * 68);
    f.bezierCurveTo(b * 23, b * 36, b * 28, b * 34, b * 36, b * 46);
    f.bezierCurveTo(b * 45, b * 58, b * 83, b * 72, b * 98, b * 72);
    f.closePath();
    em(f, d[4], d[lh], b * Gs);
    f.scale(1.1, 1.1);
    f.translate(b * -9, b * 4);
    f.save();
    f.translate(b * 100, b * 73.06874084472656);
    f.rotate(0);
    nm(f, b * -61, b * -38.5, b * 122, b * 40, rq * b);
    f.restore();
    em(f, d[1], d[En], b * 4);
    f.save();
    f.translate(b * 100, b * 71.36874389648438);
    f.rotate(0);
    nm(f, b * -60.5, b * -$a, b * 121, b * 30, b * 20);
    f.restore();
    em(f, d[oe], d[Vn], b * Nr);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 144, b * 80);
    f.bezierCurveTo(b * 152, b * 100, b * 152, b * 101, b * 153, b * 102);
    f.bezierCurveTo(b * 159, To * b, b * 159, Ns * b, b * 160, b * yq);
    f.bezierCurveTo(b * 161, b * 84, b * 161, b * 84, b * 162, b * 68);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 57, b * 75);
    f.bezierCurveTo(b * 48, b * 101, b * 53, b * 89, b * 48, b * 102);
    f.bezierCurveTo(b * 44, b * 100, b * 44, Re * b, b * 39, b * 97);
    f.bezierCurveTo(b * 39, b * 83, b * 39, b * 83, b * 39, b * 69);
    f.closePath();
    em(f, d[Tg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 101, b * 72);
    f.bezierCurveTo(b * 144, b * 69, b * 149, b * 58, b * 162, b * 49);
    f.bezierCurveTo(b * 174, b * 31, b * 173, b * 38, b * 172, b * 45);
    f.bezierCurveTo(b * 168, b * 73, b * 158, b * 75, b * 152, b * 78);
    f.bezierCurveTo(b * 106, b * 89, b * 107, b * 91, b * 107, b * 94);
    f.bezierCurveTo(b * 107, b * 100, b * 107, b * 107, b * 107, b * 107);
    f.bezierCurveTo(b * 99, b * 112, b * 98, b * 110, b * 93, b * 107);
    f.bezierCurveTo(b * 94, b * 107, b * 93, b * 107, b * 93, b * 107);
    f.bezierCurveTo(b * 93, Qg * b, b * 93, b * 100, b * 92, b * 94);
    f.bezierCurveTo(b * 92, b * 89, b * 90, b * 90, b * 73, b * 86);
    f.bezierCurveTo(b * 45, b * 81, b * 40, b * 77, b * 35, b * 68);
    f.bezierCurveTo(b * 23, b * 36, b * 28, b * 34, b * 36, b * 46);
    f.bezierCurveTo(b * 45, b * 58, b * 83, b * 72, b * 98, b * 72);
    f.closePath();
    em(f, d[4], d[Tc], b * 4);
    f.translate(0, bd);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 115.5, b * 116.07290649414062);
    f.bezierCurveTo(b * 159.5, b * 99.07290649414062, b * 159.5, b * 98.07290649414062, b * 159.5, b * 98.07290649414062);
    f.bezierCurveTo(b * 155.5, b * 116.07290649414062, b * 159.5, b * 116.07290649414062, b * 159.5, b * 118.07290649414062);
    f.bezierCurveTo(b * 147.5, b * 130.07290649414062, b * 136.5, b * 132.07290649414062, b * 115.5, b * 138.07290649414062);
    f.closePath();
    em(f, d[xa], d[2], Ac * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 39.5, b * 96.07290649414062);
    f.bezierCurveTo(b * 85.5, b * 114.07290649414062, b * 62.5, b * 105.57290649414062, b * 85.5, b * 115.07290649414062);
    f.bezierCurveTo(b * 85.5, b * 125.57290649414062, b * 85.5, b * 125.57290649414062, b * 85.5, b * 136.07290649414062);
    f.bezierCurveTo(b * 51.5, b * 129.07290649414062, b * 51.5, b * 125.07290649414062, b * 41.5, b * 118.07290649414062);
    f.bezierCurveTo(b * 44.5, b * 106.07290649414062, b * 42.5, b * 103.07290649414062, b * 40.5, b * 96.07290649414062);
    f.closePath();
    em(f, d[Vr], d[2], b * Jn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 86, b * 80);
    f.bezierCurveTo(b * 97, b * 88, b * 106, b * 84, b * 112, b * 80);
    f.bezierCurveTo(b * 112, b * 62, b * 106, b * 59, b * 99, b * 54);
    f.bezierCurveTo(b * 86, b * 62, b * 86, b * 73, b * 86, b * 80);
    f.closePath();
    em(f, d[3], d[2], bq * b);
    f.scale(0.5, 0.5);
    f.translate(b * yq, b * 71);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 86, b * 80);
    f.bezierCurveTo(b * 97, b * 88, b * 106, b * 84, b * 112, b * 80);
    f.bezierCurveTo(b * 112, b * 62, b * 106, b * 59, b * 99, b * 54);
    f.bezierCurveTo(b * 86, b * 62, b * 86, b * 73, b * 86, b * 80);
    f.closePath();
    em(f, d[6], d[Yh], b * 4);
    return e;
  }
  function sl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 180;
    e.height = b * 120;
    f.translate(b * -65, b * -35);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.save();
    f.translate(b * 150.5, b * 63.84375);
    nm(f, b * -67, b * -16.5, b * 134, b * 33, b * Y);
    f.restore();
    em(f, d[Ea]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80.5, b * 75.34375);
    f.bezierCurveTo(b * 83, b * 106.34375, b * 83, b * 106.34375, b * 85.5, b * 137.34375);
    f.bezierCurveTo(b * 93, b * 135.84375, b * 93, b * 135.84375, b * 100.5, b * 134.34375);
    f.bezierCurveTo(b * 99.5, b * 100.84375, b * 99.5, b * 100.84375, b * 98.5, b * 67.34375);
    f.closePath();
    em(f, d[xn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 206.5, b * 71.34375);
    f.bezierCurveTo(b * 203.5, b * 104.34375, b * 203.5, b * 104.34375, b * 200.5, b * 137.34375);
    f.bezierCurveTo(b * 208.5, b * 137.34375, b * 208.5, b * 137.34375, b * 216.5, b * 137.34375);
    f.bezierCurveTo(b * 219, b * 102.84375, b * 219, b * 102.84375, b * 221.5, b * 68.34375);
    f.closePath();
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 136.5, b * 75.34375);
    f.bezierCurveTo(b * 139, b * 94.34375, b * 139, b * 94.34375, b * 141.5, b * 113.34375);
    f.bezierCurveTo(b * 149.5, b * 115.34375, b * 149.5, b * 115.34375, b * 157.5, b * 117.34375);
    f.bezierCurveTo(b * 162, b * 97.34375, b * 162, b * 97.34375, b * 166.5, b * 77.34375);
    f.closePath();
    em(f, d[0]);
    f.save();
    f.translate(b * 152.5, b * 80.84375);
    f.rotate(3.12);
    nm(f, b * -73, b * -20.5, b * 146, b * 41, b * et);
    f.restore();
    em(f, d[0]);
    f.globalAlpha = 1;
    f.translate(Js, b * -10);
    f.save();
    f.translate(b * 150.5, b * 63.84375);
    nm(f, b * -67, b * -16.5, b * 134, b * 33, b * 5);
    f.restore();
    em(f, d[yd], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80.5, b * 75.34375);
    f.bezierCurveTo(b * 83, b * 106.34375, b * 83, b * 106.34375, b * 85.5, b * 137.34375);
    f.bezierCurveTo(b * 93, b * 135.84375, b * 93, b * 135.84375, b * 100.5, b * 134.34375);
    f.bezierCurveTo(b * 99.5, b * 100.84375, b * 99.5, b * 100.84375, b * 98.5, b * 67.34375);
    f.closePath();
    em(f, d[ja], d[2], mn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 206.5, b * 71.34375);
    f.bezierCurveTo(b * 203.5, b * 104.34375, b * 203.5, b * 104.34375, b * 200.5, b * 137.34375);
    f.bezierCurveTo(b * 208.5, b * 137.34375, b * 208.5, b * 137.34375, b * 216.5, b * 137.34375);
    f.bezierCurveTo(b * 219, b * 102.84375, b * 219, b * 102.84375, b * 221.5, b * 68.34375);
    f.closePath();
    em(f, d[Ps], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 136.5, b * 75.34375);
    f.bezierCurveTo(b * 139, b * 94.34375, b * 139, b * 94.34375, b * 141.5, b * 113.34375);
    f.bezierCurveTo(b * 149.5, b * 115.34375, b * 149.5, b * 115.34375, b * 157.5, b * 117.34375);
    f.bezierCurveTo(b * 162, b * 97.34375, b * 162, b * 97.34375, b * 166.5, b * 77.34375);
    f.closePath();
    em(f, d[lt], d[Te], b * 4);
    f.save();
    f.translate(b * 152.5, b * 80.84375);
    f.rotate(3.12);
    nm(f, b * -73, b * -20.5, b * 146, b * 41, b * 5);
    f.restore();
    em(f, d[yd], d[2], b * bq);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 83.5, b * 73.34375);
    f.bezierCurveTo(b * 93.5, b * 70.34375, b * 105.5, b * 70.34375, b * 124.5, b * 72.34375);
    f.bezierCurveTo(b * 132.5, b * 78.34375, b * 162.5, b * 80.34375, b * 176.5, b * 76.34375);
    f.bezierCurveTo(b * 194.5, b * 69.34375, b * 192.5, b * 68.34375, b * 199.5, b * 63.34375);
    f.bezierCurveTo(b * 204.5, b * 63.34375, b * 204.5, b * 63.34375, b * 209.5, b * 63.34375);
    f.bezierCurveTo(b * 153.5, b * 82.34375, b * 157.5, b * 85.34375, b * 209.5, b * 63.34375);
    f.bezierCurveTo(b * 194.5, b * 88.34375, b * 162.5, b * 87.34375, b * 149.5, b * 88.34375);
    f.bezierCurveTo(b * 129.5, b * 81.34375, b * 103.5, b * 75.34375, b * 83.5, b * 82.34375);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 137.5, b * 65.34375);
    f.bezierCurveTo(b * 150.5, b * 76.34375, b * 170.5, b * 71.34375, b * 174.5, b * 65.34375);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 221.5, b * 85.34375);
    f.bezierCurveTo(b * 211.5, b * 79.34375, b * 191.5, b * 88.34375, b * 181.5, b * 96.34375);
    f.bezierCurveTo(b * 201.5, b * 96.34375, b * 201.5, b * 96.34375, b * 221.5, b * 96.34375);
    f.closePath();
    em(f, d[pg]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 84.5, b * 89.34375);
    f.bezierCurveTo(b * 102.5, b * 87.34375, b * 112.5, b * 88.34375, b * 119.5, b * 97.34375);
    f.bezierCurveTo(b * 102, b * 98.34375, b * 102, b * 98.34375, b * 84.5, b * 99.34375);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 208.5, b * 104.34375);
    f.bezierCurveTo(b * 208.5, b * 110.34375, b * 208.5, b * 110.34375, b * 208.5, b * 116.34375);
    f.bezierCurveTo(b * 211.5, b * 110.34375, b * 211.5, b * 110.34375, b * 214.5, b * 104.34375);
    f.closePath();
    em(f, d[E]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 87.5, b * 117.34375);
    f.bezierCurveTo(b * 92, b * 118.84375, b * 92, b * 118.84375, b * 96.5, b * 120.34375);
    f.bezierCurveTo(b * 93, b * 123.84375, b * 93, b * 123.84375, b * 89.5, b * 127.34375);
    f.closePath();
    em(f, d[nh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 107.5, b * 51.34375);
    f.bezierCurveTo(b * 122.5, b * 54.34375, b * 122.5, b * 54.34375, b * 137.5, b * 57.34375);
    f.bezierCurveTo(b * 118, b * 57.34375, b * 118, b * 57.34375, b * 98.5, b * 57.34375);
    f.bezierCurveTo(b * 94.5, b * 54.84375, b * 94.5, b * 54.84375, b * 90.5, b * 52.34375);
    f.closePath();
    em(f, d[xa]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 170.5, b * 52.34375);
    f.bezierCurveTo(b * 179.5, b * 51.84375, b * 179.5, b * 51.84375, b * 188.5, b * 51.34375);
    f.bezierCurveTo(b * 187.5, b * 53.84375, b * 187.5, b * 53.84375, b * 186.5, b * 56.34375);
    f.bezierCurveTo(b * 177, b * 56.34375, b * 177, b * 56.34375, b * 167.5, b * 56.34375);
    f.closePath();
    em(f, d[nh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 80.5, b * 69.34375);
    f.bezierCurveTo(b * 86.5, b * 70.34375, b * 86.5, b * 70.34375, b * 92.5, b * 71.34375);
    f.bezierCurveTo(b * 86, b * 73.34375, b * 86, b * 73.34375, b * 79.5, b * 75.34375);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 222.5, b * 75.34375);
    f.bezierCurveTo(b * 214.5, b * 76.34375, b * 214.5, b * 76.34375, b * 206.5, b * 77.34375);
    f.bezierCurveTo(b * 216.5, b * 79.34375, b * 216.5, b * 79.34375, b * 226.5, b * 81.34375);
    f.closePath();
    em(f, d[rd]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 116.5, b * 100.34375);
    f.bezierCurveTo(b * 128, b * 97.34375, b * 128, b * 97.34375, b * 139.5, b * 94.34375);
    f.bezierCurveTo(b * 140, b * 96.84375, b * 140, b * 96.84375, b * 140.5, b * 99.34375);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 112.5, b * 48.34375);
    f.bezierCurveTo(b * 115.5, b * 50.84375, b * 115.5, b * 50.84375, b * 118.5, b * 53.34375);
    f.bezierCurveTo(b * 131, b * 50.84375, b * 131, b * 50.84375, b * 143.5, b * 48.34375);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 216.5, b * 109.34375);
    f.bezierCurveTo(b * 213, b * 114.84375, b * 213, b * 114.84375, b * 209.5, b * 120.34375);
    f.bezierCurveTo(b * 212, b * 118.84375, b * 212, b * 118.84375, b * 214.5, b * 117.34375);
    f.closePath();
    em(f, d[2]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 86.5, b * 133.34375);
    f.bezierCurveTo(b * 89, b * 127.34375, b * 89, b * 127.34375, b * 91.5, b * 121.34375);
    f.bezierCurveTo(b * 92.5, b * 127.34375, b * 92.5, b * 127.34375, b * 93.5, b * 133.34375);
    f.closePath();
    em(f, d[2]);
    return e;
  }
  function rl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 316;
    e.height = b * 365;
    f.save();
    f.translate(b * 156.07142639160156, b * 51.81248474121094);
    f.rotate(Vd);
    nm(f, b * -21.5, b * -34, b * 43, b * 68, rg * b);
    f.restore();
    em(f, d[Ic], d[2], b * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 110.57142639160156, b * 197.09820556640625);
    f.bezierCurveTo(b * 158.07142639160156, b * 179.09820556640625, b * 158.07142639160156, b * 179.09820556640625, b * 205.57142639160156, b * 161.09820556640625);
    f.bezierCurveTo(b * 205.57142639160156, b * 235.45535278320312, b * 205.57142639160156, b * 235.45535278320312, b * 205.57142639160156, b * 309.8125);
    f.bezierCurveTo(b * 205.57142639160156, b * 323.8125, b * 200.57142639160156, b * 325.8125, b * 187.57142639160156, b * 326.8125);
    f.bezierCurveTo(b * 155.57142639160156, b * 326.3125, b * 155.57142639160156, b * 326.3125, b * 123.57142639160156, b * 325.8125);
    f.bezierCurveTo(b * 111.57142639160156, b * 326.8125, b * 109.57142639160156, b * 321.8125, b * 110.57142639160156, b * 312.8125);
    f.closePath();
    em(f, d[3], d[4], b * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 126.57142639160156, b * 67.38392639160156);
    f.bezierCurveTo(b * 126.57142639160156, b * 57.38392639160156, b * 132.57142639160156, b * 54.38392639160156, b * 140.57142639160156, b * 54.38392639160156);
    f.bezierCurveTo(b * 177.57142639160156, b * 55.38392639160156, b * 158.07142639160156, b * 54.38392639160156, b * 175.57142639160156, b * 54.38392639160156);
    f.bezierCurveTo(b * 185.57142639160156, b * 56.38392639160156, b * 185.57142639160156, b * 57.38392639160156, b * 184.57142639160156, b * 66.38392639160156);
    f.bezierCurveTo(b * 184.57142639160156, b * 78.38392639160156, b * 184.57142639160156, b * 89.38392639160156, b * 184.57142639160156, b * 90.38392639160156);
    f.bezierCurveTo(b * 177.57142639160156, b * 107.38392639160156, b * 180.57142639160156, b * 112.38392639160156, b * 189.57142639160156, b * 116.38392639160156);
    f.bezierCurveTo(b * 212.57142639160156, b * 127.38392639160156, b * 212.57142639160156, b * 132.38392639160156, b * 211.57142639160156, b * 150.38392639160156);
    f.bezierCurveTo(b * 211.57142639160156, b * 227.59821128845215, b * 211.57142639160156, b * 227.59821128845215, b * 211.57142639160156, b * 304.81249618530273);
    f.bezierCurveTo(b * 212.57142639160156, b * 328.81249618530273, b * 209.57142639160156, b * 330.81249618530273, b * 188.57142639160156, b * 333.81249618530273);
    f.bezierCurveTo(b * 155.07142639160156, b * 333.31249618530273, b * 155.07142639160156, b * 333.31249618530273, b * 121.57142639160156, b * 332.81249618530273);
    f.bezierCurveTo(b * 104.57142639160156, b * 327.81249618530273, b * 105.57142639160156, b * 328.81249618530273, b * 104.57142639160156, b * 312.81249618530273);
    f.bezierCurveTo(b * 104.57142639160156, b * 228.16963958740234, b * 104.57142639160156, b * 228.16963958740234, b * 104.57142639160156, b * 143.52678298950195);
    f.bezierCurveTo(b * 106.57142639160156, b * 124.52678298950195, b * 110.57142639160156, b * 123.52678298950195, b * 123.57142639160156, b * 116.52678298950195);
    f.bezierCurveTo(b * 136.57142639160156, b * 110.52678298950195, b * 130.57142639160156, b * 106.52678298950195, b * 126.57142639160156, b * 98.52678298950195);
    f.closePath();
    em(f, undefined, d[Cd], ge * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 125.57142639160156, b * 156.66963958740234);
    f.bezierCurveTo(b * 125.57142639160156, b * 182.66963958740234, b * 125.57142639160156, b * 182.66963958740234, b * 125.57142639160156, b * 208.66963958740234);
    f.closePath();
    em(f, undefined, d[Qj], b * 15);
    return e;
  }
  function ol(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    em(d, b[0]);
    return c;
  }
  function hl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 105;
    e.height = b * 144;
    f.globalAlpha = c ? 0.5 : ja;
    f.translate(b * -5, b * 0);
    f.save();
    f.translate(b * 52.5, b * 91.5);
    nm(f, b * -4.5, b * -39, Zi * b, b * 78, b * 5);
    f.restore();
    em(f, d[0], d[xn], b * 3);
    f.save();
    f.translate(b * 53, b * 36);
    nm(f, b * -29, b * -17.5, b * 58, b * 35, b * 5);
    f.restore();
    em(f, d[0], d[Cm], b * 4);
    f.save();
    f.translate(b * 53.5, b * 35.5);
    nm(f, b * -26.5, b * -15, b * 53, b * 30, Me * b);
    f.restore();
    em(f, d[Jj], d[0], mn * b);
    f.translate(b * 5, Vd * b);
    f.globalAlpha = wg;
    f.save();
    f.translate(b * 52.5, b * 91.5);
    nm(f, b * -4.5, b * -39, b * 9, b * 78, b * 5);
    f.restore();
    em(f, d[1], d[2], Vr * b);
    f.save();
    f.translate(b * 53, b * 36);
    nm(f, b * -29, b * -17.5, b * 58, b * 35, b * 5);
    f.restore();
    em(f, d[3], d[4], Gm * b);
    f.save();
    f.translate(b * 53.5, b * 35.5);
    nm(f, b * -26.5, b * -nd, b * 53, b * 30, b * 5);
    f.restore();
    em(f, d[br], d[hn], b * Ha);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 49, b * 60.5);
    f.bezierCurveTo(b * 44, b * 56.5, b * 44, b * 56.5, b * 39, b * 52.5);
    f.bezierCurveTo(b * 39, b * 46.5, b * 39, b * 46.5, b * 39, b * 40.5);
    f.bezierCurveTo(b * 44, b * 44, b * 44, b * 44, b * 49, b * 47.5);
    f.bezierCurveTo(b * 49, b * 54, b * 49, b * 54, b * 49, b * 60.5);
    f.closePath();
    em(f, d[7], d[6], b * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 66, b * 40.5);
    f.bezierCurveTo(b * 66, b * 46.5, b * 66, b * 46.5, b * 66, b * 52.5);
    f.bezierCurveTo(b * 60.5, b * 56.5, b * 60.5, b * 56.5, b * 55, b * 60.5);
    f.bezierCurveTo(b * 56, b * 53, b * 56, b * 53, b * 57, b * 45.5);
    f.bezierCurveTo(b * 61.5, b * 43, b * 61.5, b * 43, b * 66, b * 40.5);
    f.closePath();
    em(f, d[ef], d[Fa], b * xa);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 33.5);
    f.bezierCurveTo(b * 55.5, b * 41, b * 55.5, b * 41, b * 59, b * 48.5);
    f.bezierCurveTo(b * 56, b * 58, b * 56, b * 58, b * 53, b * 67.5);
    f.bezierCurveTo(b * 49, b * 58, b * 49, b * 58, b * 45, b * 48.5);
    f.bezierCurveTo(b * 48.5, b * 41, b * 48.5, b * 41, b * 52, b * 33.5);
    f.closePath();
    em(f, d[Gq], d[th], b * 3);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 52, b * 47.5);
    f.bezierCurveTo(b * 54.5, b * 50.5, b * 54.5, b * 50.5, b * 57, b * 53.5);
    f.bezierCurveTo(b * 55, b * 60, b * 55, b * 60, b * 53, b * 66.5);
    f.bezierCurveTo(b * 50.5, b * 61, b * 50.5, b * 61, b * 48, b * 55.5);
    f.bezierCurveTo(b * 50, b * 52, b * 50, b * 52, b * 52, b * 48.5);
    f.closePath();
    em(f, d[11], d[10], b * 3);
    return e;
  }
  function gl(b, c, d, e) {
    var f = document.createElement("canvas");
    var a = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    a.scale(0.5, 0.5);
    a.translate(b * 240, b * Hn);
    a.rotate(e);
    a.globalAlpha = c ? 0.5 : 0.2;
    rm(a, b * 174, b * 87.984375, b * 20.8806130178211);
    em(a, d[0], d[0], hd * b);
    rm(a, b * 174, b * 87.984375, b * 12.165525060596439);
    em(a, d[Cm], d[0], b * An);
    rm(a, b * 174, b * 87.484375, b * 6);
    em(a, d[0]);
    rm(a, b * 30, b * 87.984375, b * 20.8806130178211);
    em(a, d[0], d[0], Rh * b);
    rm(a, b * 30, b * 87.984375, b * 12.165525060596439);
    em(a, d[0], d[0], b * 4);
    rm(a, b * 30, b * 87.484375, b * Gg);
    em(a, d[qh]);
    rm(a, b * 100, b * 30, b * 20.8806130178211);
    em(a, d[0], d[Ng], b * 4);
    rm(a, b * 100, b * 30, b * 12.165525060596439);
    em(a, d[Vd], d[0], b * 4);
    rm(a, b * 100, b * 30, b * 6);
    em(a, d[Gc]);
    rm(a, b * 100, b * 130, b * 20.8806130178211);
    em(a, d[ke], d[0], b * cn);
    rm(a, b * 100, b * 130, b * 12.165525060596439);
    em(a, d[0], d[0], b * 4);
    rm(a, oc * b, b * 130, b * 6);
    em(a, d[0]);
    a.save();
    a.translate(b * 102, b * 81.984375);
    a.rotate(ke);
    nm(a, b * -74, b * -57, b * 148, b * 114, b * 23);
    a.restore();
    em(a, d[0], d[0], b * 4);
    a.save();
    a.translate(b * 101, b * 64.984375);
    a.rotate(0);
    nm(a, b * -33, b * -10, b * 66, rq * b, b * uh);
    a.restore();
    em(a, d[0], d[Sh], b * 4);
    a.save();
    a.translate(b * 102, b * 63.484375);
    a.rotate(0);
    nm(a, b * -F, b * -27.5, b * 18, b * 55, b * Od);
    a.restore();
    a.translate(5, -Qm);
    a.globalAlpha = dm;
    rm(a, b * 174, b * 87.984375, b * 20.8806130178211);
    em(a, d[wg], d[3], b * vg);
    rm(a, b * 174, b * 87.984375, b * 12.165525060596439);
    em(a, d[1], d[pg], b * 8);
    rm(a, b * 174, b * 87.484375, lc * b);
    em(a, d[2]);
    rm(a, b * 30, b * 87.984375, b * 20.8806130178211);
    em(a, d[ja], d[Sn], b * An);
    rm(a, b * 30, b * 87.984375, b * 12.165525060596439);
    em(a, d[1], d[yr], b * fm);
    rm(a, b * 30, b * 87.484375, Fa * b);
    em(a, d[eu]);
    rm(a, b * 102, b * 30, b * 20.8806130178211);
    em(a, d[lt], d[3], b * 8);
    rm(a, b * 102, b * 30, b * 12.165525060596439);
    em(a, d[fn], d[3], b * wm);
    rm(a, b * 102, b * 30, b * Cu);
    em(a, d[1]);
    rm(a, b * 102, b * 130, b * 20.8806130178211);
    em(a, d[1], d[3], b * 8);
    rm(a, b * 102, b * 130, b * 12.165525060596439);
    em(a, d[fi], d[3], b * th);
    rm(a, b * 102, b * 130, b * 6);
    em(a, d[1]);
    a.save();
    a.translate(b * 102, b * 81.984375);
    nm(a, b * -74, b * -57, b * 148, b * 114, b * 23);
    a.restore();
    em(a, d[dm], d[3], Fg * b);
    a.save();
    a.translate(b * 101, b * 64.984375);
    nm(a, b * -33, b * -10, b * 66, b * 20, b * Eh);
    a.restore();
    em(a, d[wc], d[1], b * 8);
    a.save();
    a.translate(b * 102, b * 63.484375);
    nm(a, b * -Vq, b * -27.5, b * hc, b * 55, ge * b);
    a.restore();
    em(a, d[lr], d[dm], b * hd);
    rm(a, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    em(a, d[1], d[uc], rg * b);
    rm(a, b * 135, b * 107.36605834960938, vc * b);
    em(a, d[Lo], d[fa], b * th);
    rm(a, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    em(a, d[Cg]);
    rm(a, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    em(a, d[Lh], d[Wc], b * Sm);
    rm(a, b * 70, b * 107.36605834960938, b * Dg);
    em(a, d[1], d[er], b * 8);
    rm(a, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    em(a, d[Te]);
    return f;
  }
  function cl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 161;
    e.height = b * 184;
    f.translate(qh, b * 10);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105.5, b * 34.609375);
    f.bezierCurveTo(b * 48.5, b * 7.609375, b * 11.5, b * 58.609375, b * 20.5, b * 97.609375);
    f.bezierCurveTo(b * 44.5, b * 161.609375, b * 70.5, b * 171.609375, b * 88.5, b * 156.609375);
    f.bezierCurveTo(b * 120.5, b * 129.609375, b * 123.5, b * 105.609375, b * 128.5, b * 83.609375);
    f.bezierCurveTo(b * 137.5, b * 79.609375, b * 141.5, b * 79.609375, b * 146.5, b * 81.609375);
    f.bezierCurveTo(b * 153.5, b * 70.609375, b * 151.5, b * 65.609375, b * 148.5, b * 61.609375);
    f.bezierCurveTo(b * 134.5, b * 60.609375, b * 131.5, b * 63.609375, b * 127.5, b * 66.609375);
    f.bezierCurveTo(b * 127.5, b * 55.609375, b * 125.5, b * 54.609375, b * 120.5, b * 51.609375);
    f.bezierCurveTo(b * 128.5, b * 42.609375, b * 136.5, b * 38.609375, b * 147.5, b * 39.609375);
    f.bezierCurveTo(b * 152.5, b * 23.609375, b * 147.5, b * 21.609375, b * 140.5, b * 17.609375);
    f.bezierCurveTo(b * 120.5, b * 17.609375, b * 114.5, b * 27.609375, b * 106.5, b * 35.609375);
    f.closePath();
    em(f, d[sh]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 45.5, b * 144.609375);
    f.bezierCurveTo(b * 35.5, b * 155.609375, b * 37, b * 152.109375, b * 28.5, b * 159.609375);
    f.bezierCurveTo(b * 16.5, b * 154.609375, b * 16.5, b * 151.609375, b * 17.5, b * 141.609375);
    f.bezierCurveTo(b * 25.5, b * 134.109375, b * 25.5, b * 134.109375, b * 33.5, b * 126.609375);
    em(f, d[0]);
    f.translate(0, -Sg * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 45.5, b * 144.609375);
    f.bezierCurveTo(b * 35.5, b * 155.609375, b * 37, b * 152.109375, b * 28.5, b * 159.609375);
    f.bezierCurveTo(b * 16.5, b * 154.609375, b * 16.5, b * 151.609375, b * 17.5, b * 141.609375);
    f.bezierCurveTo(b * 25.5, b * 134.109375, b * 25.5, b * 134.109375, b * 33.5, b * 126.609375);
    em(f, d[Ic], d[hu], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 105.5, b * 34.609375);
    f.bezierCurveTo(b * 48.5, b * 7.609375, b * 11.5, b * 58.609375, b * 20.5, b * 97.609375);
    f.bezierCurveTo(b * 44.5, b * 161.609375, b * 70.5, b * 171.609375, b * 88.5, b * 156.609375);
    f.bezierCurveTo(b * 120.5, b * 129.609375, b * 123.5, b * 105.609375, b * 128.5, b * 83.609375);
    f.bezierCurveTo(b * 137.5, b * 79.609375, b * 141.5, b * 79.609375, b * 146.5, b * 81.609375);
    f.bezierCurveTo(b * 153.5, b * 70.609375, b * 151.5, b * 65.609375, b * 148.5, b * 61.609375);
    f.bezierCurveTo(b * 134.5, b * 60.609375, b * 131.5, b * 63.609375, b * 127.5, b * 66.609375);
    f.bezierCurveTo(b * 127.5, b * 55.609375, b * 125.5, b * 54.609375, b * 120.5, b * 51.609375);
    f.bezierCurveTo(b * 128.5, b * 42.609375, b * 136.5, b * 38.609375, b * 147.5, b * 39.609375);
    f.bezierCurveTo(b * 152.5, b * 23.609375, b * 147.5, b * 21.609375, b * 140.5, b * 17.609375);
    f.bezierCurveTo(b * 120.5, b * 17.609375, b * 114.5, b * 27.609375, b * 106.5, b * 35.609375);
    f.closePath();
    em(f, d[fi], d[2], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 104.5, b * 35.609375);
    f.bezierCurveTo(b * 71.5, b * 36.609375, b * 57.5, b * 52.609375, b * 58.5, b * 81.609375);
    f.bezierCurveTo(b * 59.5, b * 103.609375, b * 66.5, b * 107.609375, b * 66.5, b * 116.609375);
    f.bezierCurveTo(b * 67.5, b * 128.609375, b * 65.5, b * 131.609375, b * 63.5, b * 137.609375);
    em(f, undefined, d[2], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 59.5, b * 72.609375);
    f.bezierCurveTo(b * 38.5, b * 80.609375, b * 43.5, b * 81.609375, b * 37.5, b * 89.609375);
    em(f, undefined, d[2], Rh * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 60.5, b * 85.609375);
    f.bezierCurveTo(b * 75.5, b * 91.609375, b * 76.5, b * 96.609375, b * 81.5, b * 104.609375);
    em(f, undefined, d[2], b * pj);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 68.5, b * 122.609375);
    f.bezierCurveTo(b * 79.5, b * 130.609375, b * 74.5, b * 128.609375, b * 80.5, b * 134.609375);
    em(f, d[Jf], d[2], Jn * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.5, b * 18.609375);
    f.bezierCurveTo(b * 151.5, b * 28.609375, b * 151.5, b * 32.609375, b * 146.5, b * 40.609375);
    f.bezierCurveTo(b * 137.5, b * 26.609375, b * 138.5, b * 24.609375, b * 142.5, b * 19.609375);
    f.closePath();
    em(f, d[3]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 146.5, b * 61.50892639160156);
    f.bezierCurveTo(b * 157.5, b * 69.50892639160156, b * 150.5, b * 79.50892639160156, b * 145.5, b * 81.50892639160156);
    f.bezierCurveTo(b * 140.5, b * 65.50892639160156, b * 144.5, b * 64.50892639160156, b * 146.5, b * 62.50892639160156);
    f.closePath();
    em(f, d[oe]);
    return e;
  }
  function dl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 316;
    e.height = b * 365;
    f.save();
    f.translate(b * 156.07142639160156, b * 51.81248474121094);
    f.rotate(0);
    nm(f, b * -21.5, b * -34, b * 43, b * 68, b * 8);
    f.restore();
    em(f, d[1], d[Cg], b * Od);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 126.57142639160156, b * 67.38392639160156);
    f.bezierCurveTo(b * 126.57142639160156, b * 57.38392639160156, b * 132.57142639160156, b * 54.38392639160156, b * 140.57142639160156, b * 54.38392639160156);
    f.bezierCurveTo(b * 177.57142639160156, b * 55.38392639160156, b * 158.07142639160156, b * 54.38392639160156, b * 175.57142639160156, b * 54.38392639160156);
    f.bezierCurveTo(b * 185.57142639160156, b * 56.38392639160156, b * 185.57142639160156, b * 57.38392639160156, b * 184.57142639160156, b * 66.38392639160156);
    f.bezierCurveTo(b * 184.57142639160156, b * 78.38392639160156, b * 184.57142639160156, b * 89.38392639160156, b * 184.57142639160156, b * 90.38392639160156);
    f.bezierCurveTo(b * 177.57142639160156, b * 107.38392639160156, b * 180.57142639160156, b * 112.38392639160156, b * 189.57142639160156, b * 116.38392639160156);
    f.bezierCurveTo(b * 212.57142639160156, b * 127.38392639160156, b * 212.57142639160156, b * 132.38392639160156, b * 211.57142639160156, b * 150.38392639160156);
    f.bezierCurveTo(b * 211.57142639160156, b * 227.59821128845215, b * 211.57142639160156, b * 227.59821128845215, b * 211.57142639160156, b * 304.81249618530273);
    f.bezierCurveTo(b * 212.57142639160156, b * 328.81249618530273, b * 209.57142639160156, b * 330.81249618530273, b * 188.57142639160156, b * 333.81249618530273);
    f.bezierCurveTo(b * 155.07142639160156, b * 333.31249618530273, b * 155.07142639160156, b * 333.31249618530273, b * 121.57142639160156, b * 332.81249618530273);
    f.bezierCurveTo(b * 104.57142639160156, b * 327.81249618530273, b * 105.57142639160156, b * 328.81249618530273, b * 104.57142639160156, b * 312.81249618530273);
    f.bezierCurveTo(b * 104.57142639160156, b * 228.16963958740234, b * 104.57142639160156, b * 228.16963958740234, b * 104.57142639160156, b * 143.52678298950195);
    f.bezierCurveTo(b * 106.57142639160156, b * 124.52678298950195, b * 110.57142639160156, b * 123.52678298950195, b * 123.57142639160156, b * 116.52678298950195);
    f.bezierCurveTo(b * 136.57142639160156, b * 110.52678298950195, b * 130.57142639160156, b * 106.52678298950195, b * 126.57142639160156, b * 98.52678298950195);
    f.closePath();
    em(f, undefined, d[lf], b * 15);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 125.57142639160156, b * 156.66963958740234);
    f.bezierCurveTo(b * 125.57142639160156, b * 182.66963958740234, b * 125.57142639160156, b * 182.66963958740234, b * 125.57142639160156, b * 208.66963958740234);
    f.closePath();
    em(f, ch, d[Ad], b * 15);
    return e;
  }
  function ml(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = to * a;
    c.height = a * 35;
    nm(d, 0, sh, Es, 35, Ec);
    em(d, b[Ou]);
    return c;
  }
  function ul(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 80;
    e.height = b * 160;
    f.globalAlpha = c ? 0.5 : fo;
    f.translate(b * 5, b * Qm);
    f.save();
    nm(f, b * 33, b * 53, b * 10, b * 98, b * 10);
    em(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * -150, b * -100);
    f.moveTo(b * 167.5, b * 171.0625);
    f.bezierCurveTo(b * 188, b * 171.0625, b * 188, b * 171.0625, b * 208.5, b * 171.0625);
    f.bezierCurveTo(b * 208.5, b * 156.0625, b * 208.5, b * 156.0625, b * 208.5, b * 141.0625);
    f.bezierCurveTo(b * 203.5, b * 113.0625, b * 179.5, b * 96.0625, b * 167.5, b * 141.0625);
    f.closePath();
    em(f, d[0]);
    f.restore();
    f.globalAlpha = 1;
    f.translate(b * -5, b * -5);
    f.save();
    nm(f, b * 33, b * 53, b * 10, b * 98, rs * b);
    em(f, d[1], d[2], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * -150, b * -100);
    f.moveTo(b * 167.5, b * 171.0625);
    f.bezierCurveTo(b * 188, b * 171.0625, b * 188, b * 171.0625, b * 208.5, b * 171.0625);
    f.bezierCurveTo(b * 208.5, b * 156.0625, b * 208.5, b * 156.0625, b * 208.5, b * 141.0625);
    f.bezierCurveTo(b * 203.5, b * 113.0625, b * 179.5, b * 96.0625, b * 167.5, b * 141.0625);
    f.closePath();
    em(f, d[3], d[4], b * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.translate(b * 0, b * Lh);
    f.moveTo(b * 180.5, b * 169.0625);
    f.bezierCurveTo(b * 180.5, b * 157.5625, b * 180.5, b * 157.5625, b * 180.5, b * 146.0625);
    f.bezierCurveTo(b * 181.5, b * 134.0625, b * 193.5, b * 129.0625, b * 196.5, b * 146.0625);
    f.bezierCurveTo(b * 196.5, b * 157.5625, b * 196.5, b * 157.5625, b * 196.5, b * 169.0625);
    f.closePath();
    em(f, d[5]);
    f.restore();
    return e;
  }
  function fl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 89;
    e.height = b * 89;
    f.save();
    f.translate(b * 44.5, b * 44.5);
    cm(f, Ad, b * 40, b * ar);
    f.restore();
    em(f, d[0], d[1], b * 5);
    f.save();
    f.translate(b * 44.5, b * 44.5);
    cm(f, 6, b * 25.11521001172521, Zo * b);
    f.restore();
    em(f, d[2], d[fa], lf * b);
    return e;
  }
  function pl(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(Cd * a, Wg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    em(d, b[Vd]);
    d.globalAlpha = Mc;
    d.translate(-Ha * a, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    em(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * du);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    em(d, b[Gs], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    em(d, b[Jr], b[5], Gm * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    em(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    em(d, b[4], b[Jd], a * Rh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    em(d, b[2], b[3], yh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    em(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    em(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    em(d, b[fa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    em(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    em(d, b[yr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    em(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    em(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    em(d, b[er]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    em(d, b[Ad], b[bh], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    em(d, b[kr], b[Kr], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    em(d, b[mc], b[ef], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    em(d, b[ag], b[Pj], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    em(d, b[O], b[7], a * k);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    em(d, b[kr], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    em(d, b[Ad], b[ls], a * pj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    em(d, b[6], b[om], a * cn);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    em(d, b[Qj], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    em(d, b[6], b[Mj], Ha * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    em(d, b[Nd], b[7], Ac * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    em(d, b[Fa], b[Bo], a * Rh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    em(d, b[6], b[7], a * bq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    em(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    em(d, b[6], b[Mq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    em(d, b[6], b[ls], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    em(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    em(d, b[Th], b[xr], sj * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    em(d, b[Fa], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    em(d, b[6], b[Pd], Ld * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    em(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    em(d, b[rf]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    em(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    em(d, b[w]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    em(d, b[ta]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    em(d, b[Wd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    em(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    em(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    em(d, b[Pm]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    em(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    em(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    em(d, b[gr]);
    rm(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    em(d, b[bs]);
    rm(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    em(d, b[fh]);
    rm(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    em(d, b[12]);
    rm(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    em(d, b[qc]);
    return c;
  }
  function ll(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 202;
    e.height = b * 202;
    f.translate(b * 2, b * 1);
    f.globalAlpha = 0.3;
    rm(f, b * 98, b * 99, b * B);
    em(f, d[Ou]);
    f.globalAlpha = 0.5;
    rm(f, b * 98, b * 99, b * 90);
    em(f, d[1]);
    return e;
  }
  function bl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 88;
    e.height = b * 88;
    f.save();
    f.translate(b * 44, b * 44);
    f.rotate(0.52);
    cm(f, 6, b * 43, b * 10);
    f.restore();
    em(f, d[0], d[1], nh * b);
    return e;
  }
  function vl(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 400;
    e.height = b * 400;
    f.save();
    f.translate(b * 204, b * 195.0833282470703);
    f.rotate(10.16);
    nm(f, b * -97.5, b * -134.5, b * 195, b * 269, b * 10);
    f.restore();
    em(f, d[so], d[Ps], b * _h);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 58.5, b * 226.5833282470703);
    f.bezierCurveTo(b * 120.5, b * 281.5833282470703, b * 120.5, b * 281.5833282470703, b * 182.5, b * 336.5833282470703);
    f.bezierCurveTo(b * 263, b * 248.5833282470703, b * 263, b * 248.5833282470703, b * 343.5, b * 160.5833282470703);
    f.bezierCurveTo(b * 280.5, b * 104.58332824707031, b * 280.5, b * 104.58332824707031, b * 217.5, b * 48.58332824707031);
    f.closePath();
    em(f, d[2], d[jh], b * 4);
    f.save();
    f.translate(b * 197, b * 169.0833282470703);
    f.rotate(10.16);
    nm(f, b * -93.5, b * -126.5, b * 187, b * 253, b * 10);
    f.restore();
    em(f, d[eh], d[Jf], b * V);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 226.5, b * 24.583328247070312);
    f.bezierCurveTo(b * 58.5, b * 207.5833282470703, b * 143, b * 116.58332824707031, b * 59.5, b * 208.5833282470703);
    f.closePath();
    em(f, Pq, d[lt], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 46.133331298828125, b * 202.64999389648438);
    f.bezierCurveTo(b * 46.133331298828125, b * 215.64999389648438, b * 46.133331298828125, b * 215.64999389648438, b * 46.133331298828125, b * 228.64999389648438);
    f.closePath();
    em(f, d[4], d[Ko], qs * b);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 55.133331298828125, b * 211.64999389648438);
    f.bezierCurveTo(b * 55.133331298828125, b * 225.14999389648438, b * 55.133331298828125, b * 225.14999389648438, b * 55.133331298828125, b * 238.64999389648438);
    f.bezierCurveTo(b * 50.133331298828125, b * 235.64999389648438, b * 50.133331298828125, b * 235.64999389648438, b * 45.133331298828125, b * 232.64999389648438);
    f.bezierCurveTo(b * 45.133331298828125, b * 216.64999389648438, b * 45.133331298828125, b * 216.64999389648438, b * 45.133331298828125, b * 200.64999389648438);
    f.closePath();
    em(f, d[k], d[1], b * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 46.133331298828125, b * 198.39999389648438);
    f.bezierCurveTo(b * 46.133331298828125, b * 199.89999389648438, b * 46.133331298828125, b * 199.89999389648438, b * 46.133331298828125, b * 201.39999389648438);
    f.closePath();
    em(f, d[Ud], d[1], b * 8);
    f.save();
    f.translate(b * 249.63333129882812, b * 120.89999389648438);
    f.rotate(7.04);
    nm(f, b * -58.5, b * -32, b * 117, b * 64, b * as);
    f.restore();
    em(f, d[5]);
    return e;
  }
  function yl() {
    if (qh < ax.Lfi.Rfi.length) {
      var b = {
        x: cx.Gfi.translate.x,
        y: cx.Gfi.translate.y - la * 120
      };
    } else {
      b = {
        x: cx.Gfi.translate.x,
        y: cx.Gfi.translate.y - la * 50
      };
    }
    ea.globalAlpha = 0.8;
    var c = ΔΔ[rt.Sr][ck.time];
    _l(ea, c, b.x, b.y);
    ea.globalAlpha = Ej;
    if (-Jf < cx.Gfi.qfi.x) {
      ea.fillStyle = "#660000";
      rm(ea, b.x + la * cx.Gfi.qfi.x, b.y + la * cx.Gfi.qfi.y, la * 5);
      ea.fill();
    }
    var d = la;
    for (var e = cx.Gfi.Wfi, f = Nf; e.length > f; f++) {
      var g = e[f];
      ck.time;
      ea.fillStyle = "#ff0000";
      rm(ea, b.x + g.x / (ck.rfi * 100) * 193 * la, b.y + g.y / (Gh * ck.ofi) * 193 * la, la * En);
      ea.fill();
    }
    var h = ck.Nfi[ax.Hfi];
    if (h) {
      ea.fillStyle = ck.time ? "#fff" : "#e39716";
      rm(ea, b.x + la * (h.x / (ck.rfi * 100) * 193), b.y + la * (h.y / (ck.ofi * 100) * 193), la * 4);
      ea.fill();
    }
    la = d;
  }
  function kl() {
    if (!ax.Ufi.open && !ax.Ofi.open) {
      ax.Yfi.open = Ys;
      var b = ck.Nfi[ax.Hfi];
      var f = iw.Jfi;
      if (b) {
        for (var i = Oq; i < mw.length; i++) {
          for (var j = mw[i][0], k = mw[i][hf], l = 0; l < ck.Kfi[j].length; l++) {
            var m = ck.Kfi[j][l];
            var p = ⵠⵠⵠⲆ.j(m, b);
            if (f > p) {
              f = p;
              ax.Yfi.Xfi = k;
              ax.Yfi.type = j;
              ax.Yfi.open = true;
              ax.Yfi.Vfi = m.info & 255;
              ax.Yfi.Zfi = (m.info & 65280) >> 8;
              ax.Yfi.$fi = m.$fi;
              ax.Yfi.ipi = m.id;
            }
          }
        }
        if (iw.Jfi > f) {
          var q;
          var u = ΔΔ[rt.rf];
          var g = (c = cx.tpi).info.translate.x - 33;
          _l(ea, u, g, 0);
          if (xn < ax.Yfi.Vfi) {
            c.Sfi(ea);
            if ((q = ax.Yfi.Vfi) > 1) {
              Cl(q, c);
            }
          }
          switch (ax.Yfi.Xfi) {
            case $r.nE:
              var c = cx.epi;
              break;
            case $r.Ln:
              c = cx.npi;
              break;
            case $r.Gn:
              c = cx.api;
              break;
            case $r.Kn:
              c = cx.spi;
              break;
            case $r.Ds:
              c = cx.rpi;
          }
          if (ax.Yfi.Zfi > 0) {
            c.Sfi(ea);
            if ((q = ax.Yfi.Zfi) > yd) {
              Cl(q, c);
            }
          }
        }
      }
    }
  }
  function Al() {
    if (!ax.Ufi.open && !ax.Ofi.open && !ax.opi.open && !ax.hpi.open && !ax.Yfi.open) {
      ax.sign.open = false;
      var b = ck.Nfi[ax.Hfi];
      var c = iw.gpi;
      if (b) {
        for (var d = Sh; d < ck.Kfi[lw.ss].length; d++) {
          var f = ck.Kfi[lw.ss][d];
          var g = ⵠⵠⵠⲆ.j(f, b);
          if (c > g && f.info === 0 && f.$fi === ax.id) {
            ax.sign.open = true;
            c = g;
            ax.sign.ipi = f.id;
          }
        }
        if (iw.gpi > c) {
          cx.sign.button.Sfi(ea);
        }
      }
    }
  }
  function wl(b, c, d) {
    var e = ΔΔ[rt.zc][b];
    var f = c.info.translate.x + Y * la;
    var a = c.info.translate.y + Tc * la;
    if (Xv == c.info.state || d) {
      a += la * 5;
    }
    _l(ea, e, f, a);
  }
  function Ml() {
    ax.Ufi.id = -1;
    ax.Ufi.lock = ks;
    ax.Ufi.locked = Fj;
    ax.Ufi.cpi = kg;
    ax.Ufi.mpi = false;
    ax.Ufi.open = false;
    var b = ck.Nfi[ax.Hfi];
    var c = iw.upi;
    if (b) {
      for (var d = 0; ck.Kfi[lw.qa].length > d; d++) {
        var f = ck.Kfi[lw.qa][d];
        var i = ⵠⵠⵠⲆ.j(f, b);
        if (c > i) {
          c = i;
          ax.Ufi.open = true;
          ax.Ufi.id = f.action < 2 ? -Lh : Math.floor((f.action - 1) / En);
          ax.Ufi.fpi = f.info;
          ax.Ufi.$fi = f.$fi;
          ax.Ufi.ipi = f.id;
          ax.Ufi.locked = f.lock;
          ax.Ufi.lock = !!f.lock && ax.id != f.$fi && !ax.ppi(f.$fi) && oh;
          ax.Ufi.mpi = ax.id === f.$fi && !ax.Ufi.locked && ax.Lfi.lpi($r.wa) != -1 && oh;
          if (ax.Ufi.locked && -Jf != ax.Lfi.lpi($r.Ia)) {
            ax.Ufi.cpi = true;
          }
        }
      }
      if (c < iw.upi) {
        var j = ΔΔ[rt.sh];
        var k = cx.bpi[bd];
        var l = Math.floor(k.info.translate.x + (k.info.ME[0].width - j.width) / 2);
        var m = Math.floor(k.info.translate.y + (k.info.ME[0].height - j.height) / Te) + Wc;
        _l(ea, j, l, m);
        if ((!ax.Ufi.lock || ax.id === ax.Ufi.$fi) && ax.Ufi.id >= 0) {
          (k = cx.bpi[ax.Ufi.id]).Sfi(ea);
          var h = ax.Ufi.fpi;
          if (Jf < h) {
            Cl(h, k);
          }
        }
        if (ax.Ufi.lock) {
          cx.vpi.Sfi(ea);
        } else if (ax.Ufi.mpi) {
          cx.ypi.Sfi(ea);
        }
        if (ax.Ufi.cpi) {
          cx.kpi.Sfi(ea);
        }
      }
    }
  }
  function Bl() {
    if (!ax.Ufi.open) {
      ax.Ofi.fpi = 0;
      ax.Ofi.open = false;
      var b = ck.Nfi[ax.Hfi];
      var c = iw.Api;
      if (b) {
        for (var d = 0; d < ck.Kfi[lw.TD].length; d++) {
          var f = ck.Kfi[lw.TD][d];
          var i = ⵠⵠⵠⲆ.j(f, b);
          if (i < c) {
            c = i;
            ax.Ofi.open = true;
            ax.Ofi.fpi = f.info;
            ax.Ofi.$fi = f.$fi;
            ax.Ofi.ipi = f.id;
          }
        }
        if (c < iw.Api) {
          var j = ΔΔ[rt.Eg];
          var k = cx.wpi;
          var l = Math.floor(k.info.translate.x + (k.info.ME[0].width - j.width) / 2);
          var m = Math.floor(k.info.translate.y + (k.info.ME[Nf].height - j.height) / 2) + er;
          _l(ea, j, l, m);
          if (ax.Ofi.fpi > 0) {
            k.Sfi(ea);
            var h = ax.Ofi.fpi;
            if (Ic < h) {
              Cl(h, k);
            }
          }
        }
      }
    }
  }
  function Dl() {
    if (!ax.Ufi.open && !ax.Ofi.open) {
      ax.opi.open = false;
      var b = ck.Nfi[ax.Hfi];
      var c = iw.Mpi;
      if (b) {
        for (var d = 0; d < ck.Kfi[lw.ga].length; d++) {
          var f = ck.Kfi[lw.ga][d];
          var g = ⵠⵠⵠⲆ.j(f, b);
          if (g < c) {
            c = g;
            ax.opi.open = jt;
            ax.opi.Bpi = f.info & 255;
            ax.opi.Dpi = (f.info & 65280) >> fm;
            ax.opi.$fi = f.$fi;
            ax.opi.ipi = f.id;
          }
        }
        if (iw.Mpi > c) {
          var i = ΔΔ[rt.sf];
          var j = (l = cx.Epi).info.translate.x - 33;
          _l(ea, i, j, 0);
          if (ax.opi.Bpi > 0) {
            l.Sfi(ea);
            if ((k = ax.opi.Bpi) > 1) {
              Cl(k, l);
            }
          }
          var k;
          var l = cx.Cpi;
          if (sh < ax.opi.Dpi) {
            l.Sfi(ea);
            if ((k = ax.opi.Dpi) > 1) {
              Cl(k, l);
            }
          }
        }
      }
    }
  }
  function El() {
    if (ax.reconnect.enabled) {
      ea.globalAlpha = 0.9;
      ea.fillStyle = "#000";
      nm(ea, ca - 150, Kq - 90, 300, 180, Gr);
      ea.fill();
      ea.globalAlpha = lt;
      var a = ΔΔ[rt.Ao];
      ea.save();
      ax.reconnect.rotate = (ax.reconnect.rotate + bk * 2) % (Cg * Math.PI);
      ea.translate(sa / Tg, oa / Yh - 25);
      ea.rotate(ax.reconnect.rotate);
      _l(ea, a, -a.width / 2, -a.height / 2);
      ea.restore();
      a = ΔΔ[rt.Pd];
      _l(ea, a, (sa - a.width) / 2, (oa - a.height) / wh + 25);
    }
  }
  function Cl(b, c) {
    ΔΔ[rt.eo][b] ||= Fu(la, "x" + b, Yo, "#FFF");
    var d = ΔΔ[rt.eo][b];
    var e = c.info.translate.x + c.info.ME[xn].width - d.width - la * Xc;
    var f = c.info.translate.y + c.info.ME[Nf].height - d.height - la * vh;
    if (c.info.state == Xv) {
      f += la * Qm;
    }
    _l(ea, d, e, f);
  }
  function zl() {
    ax.zpi.id = -1;
    ax.zpi.$fi = -1;
    if (!ax.xpi && !ax.zpi.wait && !ax.Qpi) {
      var b = ck.Nfi[ax.Hfi];
      var c = iw.Spi;
      if (b) {
        for (var d = 0; ck.Kfi[lw._a].length > d; d++) {
          var f = ck.Kfi[lw._a][d];
          var g = ⵠⵠⵠⲆ.j(f, b);
          if (g < c) {
            c = g;
            ax.zpi.id = f.id;
            ax.zpi.$fi = f.$fi;
            ax.zpi.info = f.info;
            ax.zpi.lock = (f.info & fe) >> 4;
          }
        }
      }
      var h = cx.Ipi;
      cx.Ipi = -1;
      if (ax.zpi.$fi == -ja || ax._pi.length != 0 && ax.id != ax.zpi.$fi) {
        if (Js != ax._pi.length && ax._pi[Jj] != ax.id) {
          cx.Ipi = hw.Fpi;
        } else if (ax._pi.length != 0 && ax.id == ax._pi[0]) {
          cx.Ipi = hw.Ppi;
        } else if (Cm != ax._pi.length) {
          cx.Ipi = hw.Tpi;
        }
      } else if (Cm == ax._pi.length && ax.zpi.info >= Fg) {
        cx.Ipi = hw.jpi;
      } else if (ax._pi.length == Gc) {
        cx.Ipi = hw.Tpi;
      } else {
        cx.Ipi = hw.Rpi;
      }
      if (cx.Ipi != -1) {
        cx.Lpi[cx.Ipi].button.Sfi(ea);
      }
      var i = document.getElementById("team_box").style;
      if (cx.Ipi != -Ps && h != cx.Ipi && i.display == "inline-block") {
        cx.Lpi[cx.Ipi].action();
      }
    }
  }
  function xl() {
    if (ax.Gpi) {
      ea.globalAlpha = 0.5;
      ea.fillStyle = "#000";
      ea.fillRect(Nf, Jj, sa, oa);
      ea.globalAlpha = 0.8;
      var b = ΔΔ[rt.Ed][ck.time];
      var c = ca - b.width / 2;
      var d = Kq - b.height / 2;
      _l(ea, b, c, d);
      ea.globalAlpha = Ic;
      if (cx.Gfi.qfi.x > -fo) {
        ea.fillStyle = "#660000";
        rm(ea, c + la * (cx.Gfi.qfi.x * Ie), d + cx.Gfi.qfi.y * E * la, pc * la);
        ea.fill();
      }
      for (var e = cx.Gfi.Wfi, f = 0; e.length > f; f++) {
        var g = e[f];
        ck.time;
        ea.fillStyle = "#ff0000";
        rm(ea, c + la * (g.x / (ck.rfi * 100) * 600), d + g.y / (_j * ck.ofi) * 600 * la, la * 6);
        ea.fill();
      }
      var h = ck.Nfi[ax.Hfi];
      if (h) {
        ea.fillStyle = ck.time ? "#fff" : "#e39716";
        rm(ea, c + h.x / (ck.rfi * Ns) * 600 * la, d + h.y / (ck.ofi * bi) * 600 * la, la * Eo);
        ea.fill();
      }
    }
  }
  function Ql() {
    var a = cx.qpi;
    var b = a.id;
    if (a.Wpi === fn && a.display === yd) {
      if (ᐃΔⵠΔΔ[b] === undefined) {
        ᐃΔⵠΔΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Fd[b];
          d.font = "20px Baloo Paaji";
          var f = Ka;
          if (e.length >= 1) {
            f = Math.max(Gc, d.measureText(e[xn]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[dm]).width);
          }
          d.font = "14px Baloo Paaji";
          Td = 2;
          for (; Td < e.length; Td++) {
            f = Math.max(f, d.measureText(e[Td]).width);
          }
          var g = f + 35;
          var h = 0;
          h = Ej === e.length ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = h;
          nm(d, Sh, 0, g, h, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (ja <= e.length) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = au;
            d.fillStyle = "#e2c340";
            d.fillText(e[Gc], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[ae], 15, 55);
            h = 55;
          }
          if (e.length >= Ie) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Td = lr;
            for (; Td < e.length; Td++) {
              d.fillText(e[Td], 15, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.DC === Ic) {
        _l(ea, ᐃΔⵠΔΔ[b], a.x, a.y);
      } else if (sa < a.x - 80 + ᐃΔⵠΔΔ[b].width) {
        _l(ea, ᐃΔⵠΔΔ[b], sa - ᐃΔⵠΔΔ[b].width - 10, a.y - ᐃΔⵠΔΔ[b].height - 10);
      } else {
        _l(ea, ᐃΔⵠΔΔ[b], a.x - 80, a.y - ᐃΔⵠΔΔ[b].height - gg);
      }
    }
  }
  function Sl() {
    ax.Npi.open = false;
    var b = ck.Nfi[ax.Hfi];
    var c = iw.Hpi;
    if (b) {
      for (var d = 0; d < ck.Kfi[lw.Da].length; d++) {
        var f = ck.Kfi[lw.Da][d];
        var g = ⵠⵠⵠⲆ.j(f, b);
        if (c > g) {
          c = g;
          ax.Npi.open = true;
          ax.Npi.$fi = f.$fi;
          ax.Npi.ipi = f.id;
        }
      }
      if (c < iw.Hpi) {
        cx.Npi.Sfi(ea);
      }
    }
  }
  function Il() {
    if (!ax.Ufi.open && !ax.Ofi.open && !ax.opi.open && !ax.Yfi.open) {
      ax.hpi.open = Qc;
      var b = ck.Nfi[ax.Hfi];
      var c = iw.Upi;
      if (b) {
        for (var d = Ka; ck.Kfi[lw.ZD].length > d; d++) {
          var f = ck.Kfi[lw.ZD][d];
          var g = ⵠⵠⵠⲆ.j(f, b);
          if (g < c) {
            c = g;
            ax.hpi.open = true;
            ax.hpi.Vfi = f.info & 31;
            ax.hpi.Dpi = (f.info & 992) >> 5;
            ax.hpi.Opi = (f.info & 31744) >> Sg;
            ax.hpi.$fi = f.$fi;
            ax.hpi.ipi = f.id;
          }
        }
        if (iw.Upi > c) {
          var i = ΔΔ[rt.yp];
          var j = (k = cx.Ypi).info.translate.x - 32;
          _l(ea, i, j, 0);
          if (ax.hpi.Vfi > Vd) {
            k.Sfi(ea);
            if ((l = ax.hpi.Vfi) > Ko) {
              Cl(l, k);
            }
          }
          var k = cx.Jpi;
          if (ax.hpi.Opi > 0) {
            k.Sfi(ea);
            if ((l = ax.hpi.Opi) > ae) {
              Cl(l, k);
            }
          }
          var l;
          k = cx.Kpi;
          if (Vd < ax.hpi.Dpi) {
            k.Sfi(ea);
            if ((l = ax.hpi.Dpi) > 1) {
              Cl(l, k);
            }
          }
        }
      }
    }
  }
  function _l(b, c, d, e, f, a, i, j, k, h) {
    if (ug === c.jfi || c.jfi() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(ae, f), Math.max(1, a), i, j, k, h);
      } else if (a !== undefined) {
        b.drawImage(c, d, e, f, a);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  ᐃΔⵠΔΔ = [];
  ᐃⵠΔᐃΔΔⵠ = [];
  var Fl = [];
  function Pl() {
    var a = ck.Xpi;
    var b = ΔΔ[rt.wp][ck.time];
    _l(ea, b, a.translate.x, a.translate.y);
    ea.save();
    ea.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    ck.Xpi.now = (new Date().getTime() - a.Vi + a.Vpi) % iw.bt;
    var c = Math.PI * rd * ck.Xpi.now / iw.bt - Math.PI / 2;
    ea.rotate(c);
    _l(ea, ΔΔ[rt.Mp], -b.width / 2, -b.height / ih);
    ea.restore();
  }
  function Tl() {
    var a = -ir;
    if (ax.Zpi.enabled) {
      var b = ΔΔ[rt.tm];
      _l(ea, b, ax.Zpi.translate.x, ax.Zpi.translate.y + a);
      a += 70;
    }
    if (ax.$pi === 1) {
      b = ΔΔ[rt.sm];
      _l(ea, b, ax.Zpi.translate.x, ax.Zpi.translate.y + a);
      a += 70;
    } else if (ax.tli.ili.x < 0.25 || ax.tli.eli.x < 0.25 || ax.tli.nli.x < 0.25 || ax.tli.ali.x < 0.25 || ax.tli.sli.x < 0.25) {
      b = ΔΔ[rt.am];
      _l(ea, b, ax.Zpi.translate.x, ax.Zpi.translate.y + a);
      a += 70;
    }
    if (nj < ax.rli) {
      b = ΔΔ[rt.nm];
      _l(ea, b, ax.Zpi.translate.x, ax.Zpi.translate.y + a);
      var c = Fl[ax.rli];
      if (c === A) {
        c = Fu(la, ax.rli + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", jo);
        Fl[ax.rli] = c;
      }
      if (ph > ax.rli) {
        _l(ea, c, ax.Zpi.translate.x - 39, ax.Zpi.translate.y + a + 20);
      } else {
        _l(ea, c, ax.Zpi.translate.x - 46, ax.Zpi.translate.y + a + 20);
      }
    }
  }
  function jl(a) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && Xq == this.oli.hli.oi) {
        this.oli.mi = Ys;
      }
      var b = la * ((au - this.oli.hli.hi) * bk * 600);
      var c = Math.sin(this.oli.angle - this.angle) * b;
      var d = b * Math.cos(this.oli.angle - this.angle);
    } else {
      c = Js;
      d = 0;
    }
    if (this.gli.mi()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    Ⲇⵠ = ΔΔ[rt.gv][Math.floor(this.id + this.color) % 5][ck.time];
    ⵠΔΔ = this.gli.hi * -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.gli.hi;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2 + c, -ᐃⵠⲆ / 2 + d, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Rl(a) {
    if ((a = a / 100) <= 0.8) {
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.angle);
      if (this.oli.mi) {
        if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
          this.oli.mi = rr;
        }
        var b = (fn - this.oli.hli.hi) * bk * 600 * la;
        var c = Math.sin(this.oli.angle - this.angle) * b;
        var d = b * Math.cos(this.oli.angle - this.angle);
      } else {
        c = 0;
        d = Sh;
      }
      ea.globalAlpha = 0.5;
      gm(ea, c, d, la * 18, a);
      em(ea, null, "#000000", la * 18);
      ea.globalAlpha = X;
      gm(ea, c, d, la * 18, a);
      em(ea, null, rt.tt[ck.time], la * 6);
      ea.restore();
    }
  }
  function Ll() {
    var b = ax.DC;
    if (b.cli) {
      var c = ck.Nfi[ax.Hfi];
      ea.save();
      ea.translate(ax.Oi.x + c.x, ax.Oi.y + c.y);
      var d = ΔΔ[rt.Ho];
      var e = -d.width / Yh;
      var f = -d.height / 2 - la * 125;
      _l(ea, d, e, f);
      ea.beginPath();
      ea.lineWidth = la * lh;
      ea.strokeStyle = rt.it[ck.time];
      ea.lineCap = "round";
      ea.arc(Ka, f + d.height / Tg, la * 25, 0, b.timeout.hi * (yo * Math.PI));
      ea.stroke();
      ea.restore();
    }
  }
  function Gl() {
    for (var b = ax.Lfi, c = ck.Nfi[ax.Hfi], d = 0; d < b.Rfi.length; d++) {
      var f = b.Rfi[d];
      var g = false;
      if ((c = ck.Nfi[ax.Hfi]) && (f.id == c.right || c.dli == f.id && c.dli > 0)) {
        g = true;
        _l(ea, f.info.ME[Cg], f.info.translate.x, f.info.translate.y, f.info.width, f.info.height);
      } else {
        f.Sfi(ea);
      }
      var h = ax.Lfi.mli[f.id];
      if (Ps < h) {
        Cl(h, f);
      }
      if (qh < h) {
        wl(d, f, g);
      }
      var i = ax.Ufi;
      if (!!i.open && (i.id < 0 || i.id == f.id) && (!i.lock || i.$fi == ax.id)) {
        cx.uli[f.id].Sfi(ea);
      }
      if (ax.Ofi.open && $r.aE == f.id) {
        cx.uli[f.id].Sfi(ea);
      }
      if (ax.fli.open && f.id == $r.iE) {
        cx.uli[f.id].Sfi(ea);
      }
      if (ax.opi.open && $r.ha == f.id) {
        cx.uli[f.id].Sfi(ea);
      }
      if (ax.Yfi.open && $r.aE == f.id) {
        cx.uli[f.id].Sfi(ea);
      }
      if (!!ax.hpi.open && ($r.aE == f.id || f.id == $r.sa)) {
        cx.uli[f.id].Sfi(ea);
      }
    }
    if (f && b.max > d) {
      var j = ΔΔ[rt.ih][tm];
      ᐃⵠ = f.info.translate.x;
      ᐃⲆⲆ = f.info.translate.y;
      Δⵠᐃⵠ = au;
      for (; d < b.max; d++, Δⵠᐃⵠ++) {
        _l(ea, j, ᐃⵠ + Δⵠᐃⵠ * (j.width + 5), ᐃⲆⲆ);
      }
    }
  }
  function ql(a) {
    if ((a = a / 100) <= 0.95) {
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.angle);
      if (this.oli.mi) {
        if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
          this.oli.mi = false;
        }
        var b = bk * (1 - this.oli.hli.hi) * 600 * la;
        var c = b * Math.sin(this.oli.angle - this.angle);
        var d = b * Math.cos(this.oli.angle - this.angle);
      } else {
        c = Nf;
        d = 0;
      }
      ea.globalAlpha = 0.5;
      gm(ea, c, d, la * 28, a);
      em(ea, null, "#000000", la * na);
      ea.globalAlpha = 1;
      gm(ea, c, d, la * 28, a);
      em(ea, null, rt.it[ck.time], ag * la);
      ea.restore();
    }
  }
  function Wl() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == Qh) {
        this.oli.mi = ui;
      }
      var a = la * ((hf - this.oli.hli.hi) * bk * 600);
      var b = a * Math.sin(this.oli.angle - this.angle);
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = 0;
      c = Oq;
    }
    Ⲇⵠ = ΔΔ[rt.qa][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2 + b, -ᐃⵠⲆ / eu + c, ⵠΔΔ, ᐃⵠⲆ);
    if (this.lock) {
      Ⲇⵠ = ΔΔ[rt.wa][ck.time];
      ⵠΔΔ = -Ⲇⵠ.width;
      ᐃⵠⲆ = -Ⲇⵠ.height;
      _l(ea, Ⲇⵠ, -ⵠΔΔ / 2 + b - la * 1, -ᐃⵠⲆ / Vn + c, ⵠΔΔ, ᐃⵠⲆ);
    }
    ea.restore();
  }
  function Nl() {
    var b = ax.pli;
    var c = cx.lli;
    if (b.mi) {
      b.mi = Zh;
      var d = b.bli;
      var e = c.vli.width;
      var f = c.vli.height;
      var a = c.yli;
      var i = ck.Wfi;
      var j = re;
      a.clearRect(0, 0, e, f);
      a.drawImage(c.ME, 0, 0);
      for (var k = 0; d.length > k; k++) {
        var l = i[d[k]];
        if ((iw.kli !== ck.mode || l.Ali !== "spectator") && (iw.wli !== ck.mode || l.Mli !== iw.Afi)) {
          if (d[k] == ax.id) {
            j = true;
            if (ck.mode === iw.Bli && iw.wfi === l.Mli) {
              ⵠⲆ = "#FF0000";
            } else {
              ⵠⲆ = lj[Te];
            }
          } else if (iw.Bli === ck.mode && l.Mli === iw.wfi) {
            ⵠⲆ = "#990000";
          } else {
            ⵠⲆ = "#A1BDCD";
          }
          a.drawImage(Fu(la, "" + (k + Lo), la * Oc, ⵠⲆ), la * Ji, la * (40 + k * 22));
          if (!l.Dli) {
            l.Dli = Fu(la, l.Ali, la * 15, ⵠⲆ, undefined, undefined, Nn, ug, la * 110);
          }
          a.drawImage(l.Dli, la * 39, la * (40 + k * 22));
          a.drawImage(Fu(la, ⵠⵠⵠⲆ.Z(l.Eli), la * 15, ⵠⲆ), la * 156, la * (40 + k * 22));
        }
      }
      if (!j) {
        if (ck.mode === iw.Cli || iw.Bli === ck.mode || ck.mode === iw.zli || ck.mode === iw.xli || iw.Qli === ck.mode || iw.kli === ck.mode && !ax.xpi || iw.wli === ck.mode && !ax.Qpi) {
          a.drawImage(ΔΔ[rt.Eo], la * 15, (46 + k * 22) * la);
          a.drawImage(Fu(la, ⵠⵠⵠⲆ.Z(ck.Wfi[ax.id].Eli), la * 15, "#FFF"), la * 100, (46 + k * 22) * la);
        }
      }
    }
    _l(ea, c.vli, c.translate.x, c.translate.y);
  }
  function Hl() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.ib][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Te, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Ul() {
    var b = ax.DC;
    if (!b.cli && b.Sli > 0) {
      var c = ck.Nfi[ax.Hfi];
      if (!c) {
        return;
      }
      ea.save();
      if (go[b.Sli].BE === 0 && b.mode === Jj) {
        ea.translate(ax.Oi.x + c.x, ax.Oi.y + c.y);
        ea.rotate(c.angle);
        ea.translate(120, Ka);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var f = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = ax.Oi.x + (d - d % oc + 50);
        f = ax.Oi.y + (f - f % 100 + 50);
        ea.translate(d, f);
      }
      var i = ΔΔ[b.Sli][ck.time];
      ea.globalAlpha = 0.5;
      _l(ea, i, -i.width / 2, -i.height / 2);
      ea.globalAlpha = 1;
      ea.restore();
      if (du === go[b.Sli].BE) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = Fu(la, Fd[ΔⵠᐃΔ.cC], zd, "#e2c340");
          } else {
            b.label[1] = Fu(la, Fd[ΔⵠᐃΔ.dC], rq, "#e2c340");
          }
        }
        i = b.label[b.mode];
        _l(ea, i, ca + -i.width / 2, cx.tli.y - 26);
      }
    }
    if (b.cli) {
      var j = b.timeout.mi();
      for (var k = 0; b.Ili.length > k; k++) {
        var l = b.Ili[k];
        if (b.id == l.id) {
          var m = la * 42;
          var p = bo * la;
          nm(ea, l.info.translate.x, l.info.translate.y + m * (1 - b.timeout.hi), l.info.width, b.timeout.hi * m + p, la * ue);
          ea.fillStyle = "#55B973";
          ea.fill();
          ea.globalAlpha = 0.8;
          l.Sfi(ea);
        } else {
          ea.globalAlpha = 0.5;
          l.Sfi(ea);
        }
        ea.globalAlpha = Ej;
      }
      if (j) {
        b.cli = false;
        b.timeout.hi = Js;
        b.timeout.oi = false;
      }
      return true;
    }
    for (k = 0; b.Ili.length > k; k++) {
      b.Ili[k].Sfi(ea);
    }
    return false;
  }
  function Ol() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.gr][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Cs, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Yl() {
    ea.save();
    var a = la;
    if (ax.tli._li.x < 0.25) {
      ea.globalAlpha = ax.tli.Fli.hi;
    }
    var b = ax.Lfi.Rfi.length > 0 ? -70 : 0;
    if (ax.Ufi.open || ax.Ofi.open && ax.Lfi.lpi($r.aE) != -1 || ax.opi.open && ax.Lfi.lpi($r.ha) != -1 || ax.Yfi.open && ax.Lfi.lpi($r.aE) != -au || ax.fli.open && ax.Lfi.lpi($r.iE) != -1 || ax.hpi.open && (ax.Lfi.lpi($r.aE) != -Ko || ax.Lfi.lpi($r.sa) != -1)) {
      b -= la * 50;
    }
    ea.translate((sa - la * 950) / z, b);
    ea.fillStyle = "#69A148";
    ea.fillRect(this.translate.x + la * 37, this.translate.y + la * 17, la * (ax.tli._li.x * 178), la * an);
    ea.globalAlpha = 1;
    if (ax.tli.eli.x < 0.35) {
      ea.fillStyle = "#8F050A";
      ea.globalAlpha = ax.tli.Pli.hi;
      ea.fillRect(this.translate.x + la * 277, this.translate.y + la * K, la * 178, la * 18);
      ea.globalAlpha = Mc;
    }
    ea.fillStyle = "#AF352A";
    ea.fillRect(this.translate.x + la * 277, this.translate.y + la * 17, la * (ax.tli.eli.x * 178), la * 18);
    if (ax.tli.ili.x < 0.35) {
      ea.fillStyle = "#366B91";
      ea.globalAlpha = ax.tli.Tli.hi;
      ea.fillRect(this.translate.x + la * 517, this.translate.y + la * 17, la * 178, la * dd);
      ea.globalAlpha = 1;
    }
    ea.fillStyle = "#669BB1";
    ea.fillRect(this.translate.x + la * 517, this.translate.y + la * 17, ax.tli.ili.x * 178 * la, la * 18);
    if (ax.tli.ili.x > 0.99) {
      if (ax.tli.sli.x < 0.35) {
        ea.fillStyle = "#6C4036";
        ea.globalAlpha = ax.tli.jli.hi;
        ea.fillRect(this.translate.x + la * 517, this.translate.y + la * Nq, la * 178, la * 18);
        ea.globalAlpha = 1;
      }
      ea.fillStyle = "#9C4036";
      ea.fillRect(this.translate.x + la * 517, this.translate.y + j * la, (yd - ax.tli.sli.x) * 178 * la, la * 18);
    }
    if (ax.tli.nli.x < 0.35) {
      ea.fillStyle = "#001A57";
      ea.globalAlpha = ax.tli.Rli.hi;
      ea.fillRect(this.translate.x + la * 757, this.translate.y + la * 17, la * 178, la * Ah);
      ea.globalAlpha = 1;
    }
    ea.fillStyle = "#074A87";
    ea.fillRect(this.translate.x + la * 757, this.translate.y + la * $h, ax.tli.nli.x * 178 * la, la * 18);
    la = a;
    _l(ea, this.ME, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    ea.restore();
    if (ax.tli.ali.x < 0.99) {
      var c = Math.floor(ca - ΔΔ[rt.mu].width / 2);
      b += this.translate.y - ΔΔ[rt.mu].height - la * 5;
      ea.fillStyle = "#BBE8EF";
      ea.fillRect(c + yh, b + la * 5, la * 588 * ax.tli.ali.x, no * la);
      if (ax.tli.ali.x < 0.35) {
        ea.fillStyle = "#9BA8AF";
        ea.globalAlpha = ax.tli.Lli.hi;
        ea.fillRect(c + Au, b + br, la * 588, jn * la);
        ea.globalAlpha = Ko;
      }
      _l(ea, ΔΔ[rt.mu], c, b);
      this.y = b;
    }
  }
  function Jl() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.qo][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Gi, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Kl(b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var c = bk * (1 - this.oli.hli.hi) * 600 * la;
      var d = c * Math.sin(this.oli.angle - this.angle);
      var f = c * Math.cos(this.oli.angle - this.angle);
    } else {
      d = Ea;
      f = 0;
    }
    var g = ΔΔ[rt.Hb].length;
    Ⲇⵠ = ΔΔ[rt.Hb][(this.Gli + this.qli % 2) % g][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    var a = ck.Nfi[ax.Hfi];
    if (a && (this.$fi === ax.id || ax.ppi(this.$fi))) {
      if (ⵠⵠⵠⲆ.j(this, a) < 550) {
        this.opacity = Math.max(this.opacity - bk, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + bk, 1);
      }
    } else if (a && ⵠⵠⵠⲆ.j(this, ck.Nfi[ax.Hfi]) < 150) {
      this.opacity = Math.max(this.opacity - bk, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + bk, Mc);
    }
    var h = ea.globalAlpha;
    ea.globalAlpha *= this.opacity;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2 + d, -ᐃⵠⲆ / 2 + f, ⵠΔΔ, ᐃⵠⲆ);
    ea.globalAlpha = h;
    ea.restore();
  }
  function Xl() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.Lb][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Vl() {
    var b = ax.zpi;
    if (b.wait) {
      var c = b.timeout.mi();
      ea.save();
      var d = ΔΔ[rt.km];
      var e = ΔΔ[rt.Yd].height + la * 25;
      ea.translate(d.width, cx.tli.translate.y - la * 188 - e);
      var f = -d.width / yo - tm;
      var a = -d.height / 2 - Jr;
      _l(ea, d, f + ih, a);
      ea.beginPath();
      ea.lineWidth = la * 5;
      ea.strokeStyle = rt.dt[ck.time];
      ea.lineCap = "round";
      ea.arc(0, a + d.height / En, la * 25, qh, b.timeout.hi * (Math.PI * 2));
      ea.stroke();
      ea.restore();
      if (c) {
        b.wait = ks;
        b.timeout.hi = 0;
        b.timeout.oi = Mr;
      }
    }
  }
  function Zl() {
    var b = ax.Wli;
    if (b.wait) {
      var c = b.timeout.mi();
      ea.save();
      var d = ΔΔ[rt.Pl];
      ea.translate(d.width - la * 2, cx.tli.translate.y - la * 125);
      var e = -d.width / 2 + _;
      var f = -d.height / 2 - Ld;
      _l(ea, d, e, f);
      ea.beginPath();
      ea.lineWidth = la * 5;
      ea.strokeStyle = rt.ut[ck.time];
      ea.lineCap = "round";
      ea.arc(9, f + d.height / Gi, la * 25, 0, b.timeout.hi * (Math.PI * 2));
      ea.stroke();
      ea.restore();
      if (c) {
        b.wait = false;
        b.timeout.hi = 0;
        b.timeout.oi = false;
      }
    }
  }
  function $l() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.zb][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / Cg, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function ib(b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var c = (ae - this.oli.hli.hi) * bk * 600 * la;
      var d = c * Math.sin(this.oli.angle - this.angle);
      var f = Math.cos(this.oli.angle - this.angle) * c;
    } else {
      d = 0;
      f = 0;
    }
    var g = ΔΔ[b][ck.time];
    ⵠΔΔ = -g.width;
    ᐃⵠⲆ = -g.height;
    _l(ea, g, -ⵠΔΔ / En + d, -ᐃⵠⲆ / Yh + f, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function tb() {
    var b = ax.Nli;
    if (b.wait) {
      var c = b.timeout.mi();
      ea.save();
      var d = ΔΔ[rt.Yd];
      ea.translate(d.width - wc * la, cx.tli.translate.y - la * 60);
      var e = -d.width / 2 - ec;
      var f = -d.height / eu - Dd;
      _l(ea, d, e, f);
      ea.beginPath();
      ea.lineWidth = dh * la;
      ea.strokeStyle = rt.dt[ck.time];
      ea.lineCap = "round";
      ea.arc(0, f + d.height / hu, la * 25, xn, b.timeout.hi * (Math.PI * tm));
      ea.stroke();
      ea.restore();
      if (c) {
        b.wait = Xq;
        b.timeout.hi = du;
        b.timeout.oi = false;
      }
    }
  }
  function eb() {
    var b = ax.Hli;
    if (b.wait) {
      var c = b.timeout.mi();
      ea.save();
      var d = ΔΔ[rt.jl];
      ea.translate(d.width - la * 12, cx.tli.translate.y - la * 190);
      var e = -d.width / 2 + 9;
      var f = -d.height / 2 - cn;
      _l(ea, d, e, f);
      ea.beginPath();
      ea.lineWidth = la * 5;
      ea.strokeStyle = rt.ut[ck.time];
      ea.lineCap = "round";
      ea.arc(dc, f + d.height / 2, la * 25, 0, Math.PI * 2 * b.timeout.hi);
      ea.stroke();
      ea.restore();
      if (c) {
        b.wait = ui;
        b.timeout.hi = Js;
        b.timeout.oi = ks;
      }
    }
  }
  function nb(a) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == Bi) {
        this.oli.mi = false;
      }
      var b = la * ((1 - this.oli.hli.hi) * bk * 600);
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = Math.cos(this.oli.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    Ⲇⵠ = ΔΔ[a][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2 + c, -ᐃⵠⲆ / ih + d, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function ab(b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = u;
      }
      var c = (1 - this.oli.hli.hi) * bk * 600 * la;
      var d = c * Math.sin(this.oli.angle - this.angle);
      var f = c * Math.cos(this.oli.angle - this.angle);
    } else {
      d = 0;
      f = 0;
    }
    if (b === rt.Xv && !ck.transition) {
      var g = sh;
      for (var h = ck.Kfi[lw.$E], i = 0; i < h.length; i++) {
        var j = ⵠⵠⵠⲆ.j(h[i], this);
        if (j < 140 && j > 35) {
          g = Ka;
          break;
        }
        if (j <= 35) {
          g = ae;
        }
      }
      this.opacity = g === 0 ? Math.max(0.5, this.opacity - bk / 1.5) : Math.min(1, this.opacity + bk / 1.5);
      ea.globalAlpha = this.opacity;
    }
    Ⲇⵠ = ΔΔ[b][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2 + d, -ᐃⵠⲆ / 2 + f, ⵠΔΔ, ᐃⵠⲆ);
    ea.globalAlpha = 1;
    ea.restore();
  }
  var sb = Gc;
  function Tu() {
    if (ue <= this.info) {
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.angle);
      if (this.oli.mi) {
        if (this.oli.hli.mi() && Mr == this.oli.hli.oi) {
          this.oli.mi = zn;
        }
        var b = bk * (1 - this.oli.hli.hi) * 600 * la;
        var c = Math.sin(this.oli.angle - this.angle) * b;
        var d = Math.cos(this.oli.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      this.Uli.mi();
      var f = ΔΔ[rt.Nn][ck.time];
      var g = -f.width * this.Uli.hi;
      var a = -f.height * this.Uli.hi;
      _l(ea, f, -g / rd + c, -a / wh + d, g, a);
      ea.restore();
    }
  }
  function ob() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var a = bk * (hf - this.oli.hli.hi) * 600 * la;
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = Ka;
      c = 0;
    }
    this.Oli = (this.Oli + bk * uc) % (Math.PI * 2);
    this.Yli = (this.Yli - bk * 3) % (Math.PI * 2);
    ea.save();
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.save();
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.Da][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / Cg, -Ⲇⵠ.height / 2);
    ea.restore();
    ea.save();
    ea.rotate(this.Oli);
    Ⲇⵠ = ΔΔ[rt.Rd][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / Cg, -Ⲇⵠ.height / 2);
    ea.restore();
    ea.save();
    ea.rotate(this.Yli);
    Ⲇⵠ = ΔΔ[rt.jd][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / Yh, -Ⲇⵠ.height / Gi);
    ea.restore();
    ea.restore();
  }
  function hb() {
    if (this.info !== 10) {
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.angle);
      if (this.oli.mi) {
        if (this.oli.hli.mi() && this.oli.hli.oi == Qh) {
          this.oli.mi = u;
        }
        var b = (Jf - this.oli.hli.hi) * bk * 600 * la;
        var c = Math.sin(this.oli.angle - this.angle) * b;
        var d = b * Math.cos(this.oli.angle - this.angle);
      } else {
        c = 0;
        d = Ea;
      }
      if (this.info & 16) {
        var f = ΔΔ[rt.Cu][ck.time];
      } else {
        f = ΔΔ[rt.ro][ck.time];
      }
      _l(ea, f, -f.width / 2 + c, -f.width / ih + d);
      ea.restore();
      for (var g = this.info & 15, a = 0; a < g; a++) {
        this.Ifi[a].Sfi(rt.fo);
      }
    }
  }
  function gb() {
    if (this.info !== jc) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.Ifi[c].Sfi(rt.Qs, this.x, this.y);
      }
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.angle);
      if (this.oli.mi) {
        if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
          this.oli.mi = Xq;
        }
        var d = (1 - this.oli.hli.hi) * bk * 600 * la;
        var e = d * Math.sin(this.oli.angle - this.angle);
        var f = d * Math.cos(this.oli.angle - this.angle);
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ΔΔ[rt.Oy][ck.time];
      } else {
        g = ΔΔ[rt.Uy][ck.time];
      }
      _l(ea, g, -g.width / 2 + e, -g.width / 2 + f);
      ea.restore();
    }
  }
  function cb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    var a = ⵠⵠⵠⲆ.j(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + bk / yo, 1.8) : Math.max(this.scale - bk, 1);
    this.Jli.mi();
    this.rotate.mi();
    this.Kli = a < 350 ? Math.max(0, this.Kli - bk * 2.2) : Math.min(1, this.Kli + bk * 2.2);
    b = sh === (this.info & 1) ? ΔΔ[rt.jw][ck.time] : ΔΔ[rt.Rw][ck.time];
    ⵠΔΔ = this.Jli.hi * -b.width * this.scale;
    ᐃⵠⲆ = this.scale * (this.Jli.hi * -b.height);
    ea.globalAlpha = lt - this.Kli;
    _l(ea, b, -ⵠΔΔ / pj, -ᐃⵠⲆ / Gs, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    b = this.info & Ko ? ΔΔ[rt.Mw][ck.time] : ΔΔ[rt.ar][ck.time];
    ⵠΔΔ = this.Jli.hi * -b.width * this.scale;
    ᐃⵠⲆ = this.scale * (this.Jli.hi * -b.height);
    ea.globalAlpha = this.Kli;
    _l(ea, b, -ⵠΔΔ / Gm, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / eu);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == je) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = (1 - this.Kli) * (0.6 - this.oli.hi);
      var b = ΔΔ[rt.Lw];
      ⵠΔΔ = this.scale * (this.Jli.hi * -b.width);
      ᐃⵠⲆ = this.scale * (this.Jli.hi * -b.height);
      _l(ea, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / yo, ᐃⵠⲆ / 2);
      ea.globalAlpha = this.Kli * (0.6 - this.oli.hi);
      b = ΔΔ[rt.Sw];
      ⵠΔΔ = this.scale * (this.Jli.hi * -b.width);
      ᐃⵠⲆ = this.Jli.hi * -b.height * this.scale;
      _l(ea, b, -ⵠΔΔ / Ac, -ᐃⵠⲆ / 4, ⵠΔΔ / Tg, ᐃⵠⲆ / 2);
      ea.globalAlpha = ja;
    }
    b = (this.info & Lh) === Sh ? ΔΔ[rt.Ew][ck.time] : ΔΔ[rt.Dw][ck.time];
    ⵠΔΔ = this.Jli.hi * -b.width * this.scale;
    ᐃⵠⲆ = this.Jli.hi * -b.height * this.scale;
    ea.save();
    ea.translate(la * -Wo, la * Js);
    ea.rotate(this.rotate.hi);
    ea.globalAlpha = this.Kli;
    _l(ea, b, -ⵠΔΔ * la / Jn, -ᐃⵠⲆ * la / 4, ⵠΔΔ / 2, ᐃⵠⲆ / hu);
    if (this.action & fw.Vr) {
      ea.globalAlpha = (0.6 - this.oli.hi) * this.Kli;
      b = ΔΔ[rt.Iw];
      _l(ea, b, -ⵠΔΔ * la / 4, la * -ᐃⵠⲆ / Rh, ⵠΔΔ / 2, ᐃⵠⲆ / lr);
      ea.globalAlpha = Lh;
    }
    ea.restore();
    b = this.info & wg ? ΔΔ[rt.zw][ck.time] : ΔΔ[rt.xw][ck.time];
    ea.save();
    ea.translate(la * _o, la * Sh);
    ea.rotate(-this.rotate.hi);
    ea.globalAlpha = this.Kli;
    _l(ea, b, -ⵠΔΔ * la / 4, -ᐃⵠⲆ * la / mn, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      ea.globalAlpha = this.Kli * (0.6 - this.oli.hi);
      b = ΔΔ[rt._w];
      _l(ea, b, la * -ⵠΔΔ / sj, la * -ᐃⵠⲆ / k, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      ea.globalAlpha = 1;
    }
    ea.globalAlpha = 1;
    ea.restore();
    ea.restore();
  }
  function db(a, b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.Jli.mi();
    c = ΔΔ[a][ck.time];
    ⵠΔΔ = this.Jli.hi * -c.width;
    ᐃⵠⲆ = this.Jli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / En, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == 0) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var c = ΔΔ[b];
      _l(ea, c, -ⵠΔΔ / z, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = fi;
    }
    ea.restore();
  }
  function mb(b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.Uli.mi();
    ea.globalAlpha = 0.3;
    var c = ΔΔ[rt.io][ck.time];
    var d = -c.width * this.Uli.hi;
    var e = -c.height * this.Uli.hi;
    _l(ea, c, -d / Cg, -e / 2, d, e);
    ea.globalAlpha = 1;
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == cc) {
        this.oli.mi = cc;
      }
      var f = la * (bk * (1 - this.oli.hli.hi) * 600);
      var a = f * Math.sin(this.oli.angle - this.angle);
      var g = Math.cos(this.oli.angle - this.angle) * f;
    } else {
      a = 0;
      g = sh;
    }
    c = ΔΔ[b][ck.time];
    _l(ea, c, -c.width / ih + a, -c.height / Te + g);
    ea.restore();
  }
  function ub() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = Qc;
      }
      var b = la * (bk * (1 - this.oli.hli.hi) * 600);
      var c = Math.sin(this.oli.angle - this.angle) * b;
      var d = Math.cos(this.oli.angle - this.angle) * b;
    } else {
      c = bd;
      d = Vd;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      f = ΔΔ[rt.up][ck.time];
      _l(ea, f, -f.width / rd + c, -f.height / 2 + d);
      this.Xli.mi();
      var f = ΔΔ[rt.bp][ck.time];
      var g = -f.width * this.Xli.hi;
      var a = -f.height * this.Xli.hi;
      _l(ea, f, -g / Gi + la * 1, -a / z + Vr * la, g, a);
    } else {
      f = ΔΔ[rt.va][ck.time];
      _l(ea, f, -f.width / hu + c, -f.height / 2 + d);
    }
    ea.restore();
  }
  function fb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == je) {
        this.oli.mi = u;
      }
      var a = la * ((dm - this.oli.hli.hi) * bk * 600);
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = Math.cos(this.oli.angle - this.angle) * a;
    } else {
      b = 0;
      c = Ka;
    }
    ea.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - dm;
      c += Math.random() * hu - Ej;
    }
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.Ca][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / lr);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + bk * 3) % (Math.PI * 2);
    }
    ea.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[rt.fB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / z, -Ⲇⵠ.height / Gi);
    ea.restore();
  }
  function pb(a, b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    c = ΔΔ[a][ck.time];
    ⵠΔΔ = -c.width;
    ᐃⵠⲆ = -c.height;
    _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == 0) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var c = ΔΔ[b];
      _l(ea, c, -ⵠΔΔ / eu, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = Lh;
    }
    ea.restore();
  }
  function lb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var a = bk * (1 - this.oli.hli.hi) * 600 * la;
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = Math.cos(this.oli.angle - this.angle) * a;
    } else {
      b = du;
      c = ke;
    }
    ea.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - ja;
      c += Math.random() * Yh - 1;
    }
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.Sa][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / eu);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + bk * 3) % (Math.PI * 2);
    }
    ea.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[rt.QB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / ih, -Ⲇⵠ.height / 2);
    ea.restore();
  }
  function bb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == zn) {
        this.oli.mi = oj;
      }
      var a = bk * (1 - this.oli.hli.hi) * 600 * la;
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = sh;
      c = Sh;
    }
    this.Oli = (this.Oli + bk * 3) % (lr * Math.PI);
    this.Yli = (this.Yli - bk * Lc) % (Math.PI * Cs);
    ea.save();
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.save();
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.Ea][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / Cs, -Ⲇⵠ.height / Cs);
    ea.restore();
    ea.save();
    ea.rotate(this.Oli);
    Ⲇⵠ = ΔΔ[rt.cB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / z, -Ⲇⵠ.height / Gi);
    ea.restore();
    ea.save();
    ea.rotate(this.Yli);
    Ⲇⵠ = ΔΔ[rt.gB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Vn);
    ea.restore();
    ea.restore();
  }
  function vb() {
    var a = Math.PI / eu;
    var b = Math.PI / 4;
    this.Jli.mi();
    this.Vli.mi();
    this.Zli.mi();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    c = bd === this.info ? ΔΔ[rt.ir][ck.time] : ΔΔ[rt.FA][ck.time];
    ⵠΔΔ = this.Jli.hi * -c.width;
    ᐃⵠⲆ = this.Jli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == 0) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var c = ΔΔ[rt.TA];
      _l(ea, c, -ⵠΔΔ / wc, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    if (this.action & fw.Zr) {
      if (this.$li.mi() && this.$li.oi == 0) {
        this.action -= fw.Zr;
      }
      ea.globalAlpha = 0.6 - this.$li.hi;
      c = ΔΔ[rt.UA];
      _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    ea.restore();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle + b);
    ea.translate(oc, 0);
    ea.rotate(a);
    c = xn === this.info ? ΔΔ[rt.GA][ck.time] : ΔΔ[rt.LA][ck.time];
    ⵠΔΔ = this.Vli.hi * -c.width;
    ᐃⵠⲆ = this.Vli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / ih, -ᐃⵠⲆ / Cs, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      c = ΔΔ[rt.jA];
      _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / En, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = Ic;
    }
    if (this.action & fw.Zr) {
      ea.globalAlpha = 0.6 - this.$li.hi;
      c = ΔΔ[rt.OA];
      _l(ea, c, -ⵠΔΔ / wh, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = yd;
    }
    ea.restore();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle + a + b);
    ea.translate(vo, 0);
    ea.rotate(a);
    c = this.info === 0 ? ΔΔ[rt.NA][ck.time] : ΔΔ[rt.WA][ck.time];
    ⵠΔΔ = this.Zli.hi * -c.width;
    ᐃⵠⲆ = this.Zli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / tm, -ᐃⵠⲆ / Cg, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      c = ΔΔ[rt.RA];
      _l(ea, c, -ⵠΔΔ / Tg, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = fn;
    }
    if (this.action & fw.Zr) {
      ea.globalAlpha = 0.6 - this.$li.hi;
      c = ΔΔ[rt.YA];
      _l(ea, c, -ⵠΔΔ / wh, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    ea.restore();
  }
  function yb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    var a = ⵠⵠⵠⲆ.j(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + bk / ec, 1.8) : Math.max(this.scale - bk, 1);
    this.Jli.mi();
    this.rotate.mi();
    this.Kli = a < 350 ? Math.max(0, this.Kli - bk * 2.2) : Math.min(Ic, this.Kli + bk * 2.2);
    b = ΔΔ[rt.aM][ck.time];
    ⵠΔΔ = this.Jli.hi * -b.width * this.scale;
    ᐃⵠⲆ = this.scale * (this.Jli.hi * -b.height);
    ea.globalAlpha = 1 - this.Kli;
    _l(ea, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / mj, ᐃⵠⲆ / 2);
    b = ΔΔ[rt.Nw][ck.time];
    ⵠΔΔ = -b.width * this.Jli.hi * this.scale;
    ᐃⵠⲆ = -b.height * this.Jli.hi * this.scale;
    ea.globalAlpha = this.Kli;
    _l(ea, b, -ⵠΔΔ / bq, -ᐃⵠⲆ / Ud, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && u == this.oli.oi) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = (0.6 - this.oli.hi) * (1 - this.Kli);
      var b = ΔΔ[rt.sM];
      ⵠΔΔ = this.scale * (-b.width * this.Jli.hi);
      ᐃⵠⲆ = this.scale * (this.Jli.hi * -b.height);
      _l(ea, b, -ⵠΔΔ / mn, -ᐃⵠⲆ / bq, ⵠΔΔ / 2, ᐃⵠⲆ / Cs);
      ea.globalAlpha = this.Kli * (0.6 - this.oli.hi);
      b = ΔΔ[rt.Vw];
      ⵠΔΔ = this.Jli.hi * -b.width * this.scale;
      ᐃⵠⲆ = -b.height * this.Jli.hi * this.scale;
      _l(ea, b, -ⵠΔΔ / cn, -ᐃⵠⲆ / _n, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      ea.globalAlpha = au;
    }
    b = ΔΔ[rt.Uw][ck.time];
    ⵠΔΔ = this.scale * (this.Jli.hi * -b.width);
    ᐃⵠⲆ = this.Jli.hi * -b.height * this.scale;
    ea.save();
    ea.translate(la * -40, la * 80);
    ea.rotate(this.rotate.hi);
    ea.globalAlpha = this.Kli;
    _l(ea, b, la * -ⵠΔΔ / 4, -ᐃⵠⲆ * la / mn, ⵠΔΔ / 2, ᐃⵠⲆ / Yh);
    if (this.action & fw.Vr) {
      ea.globalAlpha = this.Kli * (0.6 - this.oli.hi);
      b = ΔΔ[rt.Zw];
      _l(ea, b, -ⵠΔΔ * la / eh, la * -ᐃⵠⲆ / 4, ⵠΔΔ / wh, ᐃⵠⲆ / wc);
      ea.globalAlpha = Jf;
    }
    ea.restore();
    b = ΔΔ[rt.Jw][ck.time];
    ea.save();
    ea.translate(la * 40, la * 80);
    ea.rotate(-this.rotate.hi);
    ea.globalAlpha = this.Kli;
    _l(ea, b, -ⵠΔΔ * la / Jn, la * -ᐃⵠⲆ / Dd, ⵠΔΔ / Te, ᐃⵠⲆ / En);
    if (this.action & fw.Vr) {
      ea.globalAlpha = (0.6 - this.oli.hi) * this.Kli;
      b = ΔΔ[rt.$w];
      _l(ea, b, -ⵠΔΔ * la / 4, la * -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      ea.globalAlpha = Ko;
    }
    ea.globalAlpha = Lh;
    ea.restore();
    ea.restore();
  }
  function kb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var a = (fn - this.oli.hli.hi) * bk * 600 * la;
      var b = a * Math.sin(this.oli.angle - this.angle);
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = 0;
      c = Ka;
    }
    ea.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - Ic;
    }
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.Qa][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / rd);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + bk * er) % (Math.PI * Te);
    }
    ea.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[rt.EB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    ea.restore();
  }
  function Ab() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var b = bk * (1 - this.oli.hli.hi) * 600 * la;
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = b * Math.cos(this.oli.angle - this.angle);
    } else {
      c = 0;
      d = Sh;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.yf][ck.time];
      } else {
        g = ΔΔ[rt.ra][ck.time];
      }
      var h = -g.width * this.Uli.hi;
      var i = -g.height * this.Uli.hi;
      _l(ea, g, -h / En + c, -i / eu + d, h, i);
    } else {
      this.ibi.mi();
      if (this.info & 16) {
        g = ΔΔ[rt.Wu][ck.time];
      } else {
        g = ΔΔ[rt.ha][ck.time];
      }
      ea.translate(0, g.height / z);
      ea.rotate(this.ibi.hi);
      _l(ea, g, c - g.width / 2, -g.height + d);
    }
    ea.restore();
  }
  function wb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (ⵠⵠⵠⲆ.j(this, this.r) > 300) {
      this.scale = Math.min(this.scale + bk / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - bk, 1);
    }
    this.Jli.mi();
    this.rotate.mi();
    a = this.info === Jj ? ΔΔ[rt.tr][ck.time] : ΔΔ[rt.JA][ck.time];
    ⵠΔΔ = this.Jli.hi * -a.width * this.scale;
    ᐃⵠⲆ = -a.height * this.Jli.hi * this.scale;
    _l(ea, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / Nr, ⵠΔΔ / lr, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == 0) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var a = ΔΔ[rt.ew];
      _l(ea, a, -ⵠΔΔ / _n, -ᐃⵠⲆ / 4, ⵠΔΔ / wh, ᐃⵠⲆ / ih);
      ea.globalAlpha = 1;
    }
    a = this.info === Gc ? ΔΔ[rt.VA][ck.time] : ΔΔ[rt.XA][ck.time];
    ⵠΔΔ = -a.width * this.Jli.hi * this.scale;
    ᐃⵠⲆ = this.Jli.hi * -a.height * this.scale;
    ea.save();
    ea.translate(la * -40, jc * la);
    ea.rotate(this.rotate.hi);
    _l(ea, a, -ⵠΔΔ * la / 4, -ᐃⵠⲆ * la / Jr, ⵠΔΔ / Cs, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.nw];
      _l(ea, a, -ⵠΔΔ * la / Jr, -ᐃⵠⲆ * la / sj, ⵠΔΔ / 2, ᐃⵠⲆ / Cg);
      ea.globalAlpha = yd;
    }
    ea.restore();
    a = Cm === this.info ? ΔΔ[rt.iw][ck.time] : ΔΔ[rt.$A][ck.time];
    ea.save();
    ea.translate(la * 40, mm * la);
    ea.rotate(-this.rotate.hi);
    _l(ea, a, la * -ⵠΔΔ / 4, la * -ᐃⵠⲆ / 4, ⵠΔΔ / z, ᐃⵠⲆ / rd);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.aw];
      _l(ea, a, -ⵠΔΔ * la / 4, -ᐃⵠⲆ * la / k, ⵠΔΔ / Tg, ᐃⵠⲆ / ih);
      ea.globalAlpha = Lh;
    }
    ea.restore();
    ea.restore();
  }
  function Mb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && cc == this.oli.hli.oi) {
        this.oli.mi = false;
      }
      var b = (Lh - this.oli.hli.hi) * bk * 600 * la;
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = Math.cos(this.oli.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === hg || f === 0) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.ak][ck.time];
      } else {
        g = ΔΔ[rt.Ss][ck.time];
      }
      var h = -g.width * this.Uli.hi;
      var i = -g.height * this.Uli.hi;
      _l(ea, g, -h / 2 + c, -i / 2 + d, h, i);
    } else {
      if (this.info & 16) {
        g = ΔΔ[rt.sk][ck.time];
      } else {
        g = ΔΔ[rt.Is][ck.time];
      }
      ea.translate(Gc, g.height / eu);
      _l(ea, g, c - g.width / yo, -g.height + d);
    }
    ea.restore();
  }
  function Bb() {
    var a = Math.PI / 2;
    var b = Math.PI / Jn;
    this.Jli.mi();
    this.Vli.mi();
    this.Zli.mi();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    c = Oq === this.info ? ΔΔ[rt.Bv][ck.time] : ΔΔ[rt.Mv][ck.time];
    ⵠΔΔ = this.Jli.hi * -c.width;
    ᐃⵠⲆ = this.Jli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / z, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == 0) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var c = ΔΔ[rt.Dv];
      _l(ea, c, -ⵠΔΔ / hu, -ᐃⵠⲆ / mj, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    if (this.action & fw.Zr) {
      if (this.$li.mi() && this.$li.oi == 0) {
        this.action -= fw.Zr;
      }
      ea.globalAlpha = 0.6 - this.$li.hi;
      c = ΔΔ[rt.zv];
      _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / Gi, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    ea.restore();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle + b);
    ea.translate(55, 0);
    ea.rotate(a);
    c = Ng === this.info ? ΔΔ[rt.Sv][ck.time] : ΔΔ[rt._v][ck.time];
    ⵠΔΔ = this.Vli.hi * -c.width;
    ᐃⵠⲆ = this.Vli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      c = ΔΔ[rt.Ev];
      _l(ea, c, -ⵠΔΔ / Cg, -ᐃⵠⲆ / wc, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = fi;
    }
    if (this.action & fw.Zr) {
      ea.globalAlpha = 0.6 - this.$li.hi;
      c = ΔΔ[rt.xv];
      _l(ea, c, -ⵠΔΔ / z, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    ea.restore();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle + a + b);
    ea.translate(55, du);
    ea.rotate(a);
    c = this.info === 0 ? ΔΔ[rt.Iv][ck.time] : ΔΔ[rt.Fv][ck.time];
    ⵠΔΔ = this.Zli.hi * -c.width;
    ᐃⵠⲆ = this.Zli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / z, -ᐃⵠⲆ / Vn, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      c = ΔΔ[rt.Cv];
      _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = Mc;
    }
    if (this.action & fw.Zr) {
      ea.globalAlpha = 0.6 - this.$li.hi;
      c = ΔΔ[rt.Qv];
      _l(ea, c, -ⵠΔΔ / hu, -ᐃⵠⲆ / Tg, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = Jf;
    }
    ea.restore();
  }
  function Db() {
    if (this.info >= 10) {
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.angle);
      if (this.oli.mi) {
        if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
          this.oli.mi = re;
        }
        var b = la * (bk * (1 - this.oli.hli.hi) * 600);
        var c = Math.sin(this.oli.angle - this.angle) * b;
        var d = Math.cos(this.oli.angle - this.angle) * b;
      } else {
        c = Ng;
        d = ke;
      }
      this.Uli.mi();
      var f = ΔΔ[rt.xs][ck.time];
      var g = this.Uli.hi * -f.width;
      var a = -f.height * this.Uli.hi;
      _l(ea, f, -g / 2 + c, -a / 2 + d, g, a);
      ea.restore();
    }
  }
  function Eb(a, b, c) {
    ea.save();
    ea.translate(ax.Oi.x + b, ax.Oi.y + c);
    ea.rotate(this.angle);
    ea.translate(this.x - b, this.y - c);
    this.Jli.mi();
    Ⲇⵠ = ΔΔ[a][ck.time];
    ⵠΔΔ = this.Jli.hi * -Ⲇⵠ.width;
    ᐃⵠⲆ = this.Jli.hi * -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / rd, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Cb(a, b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (a === rt.Ub) {
      a = rt.Ar;
      this.info = 36;
    }
    Ⲇⵠ = ΔΔ[a][this.info][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width / 2;
    ᐃⵠⲆ = -Ⲇⵠ.height / 2;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == Bi) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var c = $u(this.info, Ⲇⵠ, ᐃΔⵠⲆⲆΔᐃᐃᐃ);
      _l(ea, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = X;
    }
    ea.restore();
  }
  function zb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.gli.mi();
    Ⲇⵠ = ΔΔ[rt.ho][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width * this.gli.hi;
    ᐃⵠⲆ = this.gli.hi * -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Vn, -ᐃⵠⲆ / z, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function xb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (ⵠⵠⵠⲆ.j(this, this.r) > 300) {
      this.scale = Math.min(this.scale + bk / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - bk, X);
    }
    this.Jli.mi();
    this.rotate.mi();
    a = Ea === this.info ? ΔΔ[rt.er][ck.time] : ΔΔ[rt.hw][ck.time];
    ⵠΔΔ = -a.width * this.Jli.hi * this.scale;
    ᐃⵠⲆ = this.scale * (-a.height * this.Jli.hi);
    _l(ea, a, -ⵠΔΔ / Gm, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / ih);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == re) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var a = ΔΔ[rt.lw];
      _l(ea, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      ea.globalAlpha = 1;
    }
    a = this.info === Sh ? ΔΔ[rt.dw][ck.time] : ΔΔ[rt.cw][ck.time];
    ⵠΔΔ = -a.width * this.Jli.hi * this.scale;
    ᐃⵠⲆ = this.scale * (this.Jli.hi * -a.height);
    ea.save();
    ea.translate(la * -40, la * 10);
    ea.rotate(this.rotate.hi);
    _l(ea, a, la * -ⵠΔΔ / 4, -ᐃⵠⲆ * la / 4, ⵠΔΔ / En, ᐃⵠⲆ / Cs);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.bw];
      _l(ea, a, -ⵠΔΔ * la / 4, la * -ᐃⵠⲆ / 4, ⵠΔΔ / rd, ᐃⵠⲆ / Cg);
      ea.globalAlpha = Jf;
    }
    ea.restore();
    a = this.info === du ? ΔΔ[rt.fw][ck.time] : ΔΔ[rt.uw][ck.time];
    ea.save();
    ea.translate(la * 40, la * 10);
    ea.rotate(-this.rotate.hi);
    _l(ea, a, -ⵠΔΔ * la / eh, la * -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.yw];
      _l(ea, a, la * -ⵠΔΔ / 4, la * -ᐃⵠⲆ / Ha, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      ea.globalAlpha = 1;
    }
    ea.restore();
    ea.restore();
  }
  function Qb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.gli.mi();
    Ⲇⵠ = ΔΔ[rt.hB][ck.time];
    ⵠΔΔ = this.gli.hi * -Ⲇⵠ.width;
    ᐃⵠⲆ = this.gli.hi * -Ⲇⵠ.height;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Tg, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Sb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.tbi.mi();
    Ⲇⵠ = ΔΔ[rt.oo][ck.time];
    ⵠΔΔ = this.tbi.hi * -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.tbi.hi;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Vn, -ᐃⵠⲆ / z, ⵠΔΔ, ᐃⵠⲆ);
    this.gli.mi();
    Ⲇⵠ = ΔΔ[rt.ho][ck.time];
    ⵠΔΔ = this.gli.hi * -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.gli.hi;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / z, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Ib(b, i, j, e, k, a, n, q, r) {
    if (ug === q) {
      q = Ea;
    }
    for (var h = b; i >= h; h++) {
      for (var s = j; e >= s; s++) {
        var t = $w.ebi[h][s];
        if (t !== Ds && t[a] !== undefined) {
          var v = t[a];
          var w = ΔΔ[k][ck.time][v.nbi];
          _l(ea, w, ax.Oi.x + v.x - w.width / (ⵠᐃΔΔⵠ * 4), ax.Oi.y + v.y - w.height / (ⵠᐃΔΔⵠ * sj), w.width / (ⵠᐃΔΔⵠ * Cs), w.height / (ⵠᐃΔΔⵠ * 2));
          if (ok.abi) {
            var x = 2147483648;
            var y = ((h * 1000 + s) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(ΔΔ[rt.rA][ck.time][v.nbi].length * (y * 5));
              w = ΔΔ[rt.rA][ck.time][v.nbi][y];
              _l(ea, w, ax.Oi.x + v.x - w.width / (ⵠᐃΔΔⵠ * 4), ax.Oi.y + v.y - w.height / (ⵠᐃΔΔⵠ * 4), w.width / (ⵠᐃΔΔⵠ * 2), w.height / (ⵠᐃΔΔⵠ * 2));
            } else if (Js !== v.sbi) {
              w = ΔΔ[rt.oA][ck.time];
              var z = (sb + h % eu * 30) % 60;
              ea.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              _l(ea, w, ax.Oi.x + v.x - w.width / (ⵠᐃΔΔⵠ * 4), ax.Oi.y + v.y - w.height / (ⵠᐃΔΔⵠ * Rh) - 30 + z, w.width / (ⵠᐃΔΔⵠ * wc), w.height / (wh * ⵠᐃΔΔⵠ));
              ea.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function _b() {
    this.Jli.mi();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    a = this.info === 0 ? ΔΔ[rt.MA][ck.time] : ΔΔ[rt.DA][ck.time];
    ⵠΔΔ = this.Jli.hi * -a.width;
    ᐃⵠⲆ = this.Jli.hi * -a.height;
    _l(ea, a, -ⵠΔΔ / Cg, -ᐃⵠⲆ / wc, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && oj == this.oli.oi) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var a = ΔΔ[rt.EA];
      _l(ea, a, -ⵠΔΔ / 2, -ᐃⵠⲆ / Tg, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = Jf;
    }
    ea.restore();
  }
  function Fb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var b = (1 - this.oli.hli.hi) * bk * 600 * la;
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = b * Math.cos(this.oli.angle - this.angle);
    } else {
      c = Js;
      d = Cm;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === 0) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.tb][ck.time];
      } else {
        g = ΔΔ[rt.cs][ck.time];
      }
      var h = -g.width * this.Uli.hi;
      var i = this.Uli.hi * -g.height;
      _l(ea, g, -h / 2 + c, -i / En + d, h, i);
    } else {
      if (this.info & 16) {
        g = ΔΔ[rt.eb][ck.time];
      } else {
        g = ΔΔ[rt.ds][ck.time];
      }
      ea.translate(0, g.height / 2);
      _l(ea, g, c - g.width / En, -g.height + d);
    }
    ea.restore();
  }
  function Pb() {
    this.Jli.mi();
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    a = this.info === Ka ? ΔΔ[rt.yr][ck.time] : ΔΔ[rt.jB][ck.time];
    ⵠΔΔ = this.Jli.hi * -a.width;
    ᐃⵠⲆ = this.Jli.hi * -a.height;
    _l(ea, a, -ⵠΔΔ / Te, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == Fj) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var a = ΔΔ[rt.RB];
      _l(ea, a, -ⵠΔΔ / 2, -ᐃⵠⲆ / lr, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = Ps;
    }
    ea.restore();
  }
  function Tb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (ⵠⵠⵠⲆ.j(this, this.r) > 300) {
      this.scale = Math.min(this.scale + bk / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - bk, 1);
    }
    this.Jli.mi();
    this.rotate.mi();
    a = ΔΔ[rt.dc][ck.time];
    ⵠΔΔ = this.Jli.hi * -a.width * this.scale;
    ᐃⵠⲆ = -a.height * this.Jli.hi * this.scale;
    _l(ea, a, -ⵠΔΔ / ec, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && u == this.oli.oi) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var a = ΔΔ[rt.Ec];
      _l(ea, a, -ⵠΔΔ / Tg, -ᐃⵠⲆ / Gi, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    a = ΔΔ[rt.uc][ck.time];
    ⵠΔΔ = this.scale * (-a.width * this.Jli.hi);
    ᐃⵠⲆ = this.scale * (-a.height * this.Jli.hi);
    ea.save();
    ea.translate(la * -30, la * 70);
    ea.rotate(this.rotate.hi);
    _l(ea, a, la * -10, la * -40, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.xc];
      _l(ea, a, -jn * la, la * -40, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = fn;
    }
    ea.restore();
    a = ΔΔ[rt.fc][ck.time];
    ea.save();
    ea.translate(la * 30, la * 70);
    ea.rotate(-this.rotate.hi);
    _l(ea, a, la * 10 - ⵠΔΔ, la * -40, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.Qc];
      _l(ea, a, la * jn - ⵠΔΔ, la * -40, ⵠΔΔ, ᐃⵠⲆ);
      ea.globalAlpha = 1;
    }
    ea.restore();
    ea.restore();
  }
  function jb() {
    var a = undefined;
    var b = undefined;
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.Jli.mi();
    this.rotate.mi();
    if (this.rbi >= 0.1 && this.rbi <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.rbi - 0.1))) < 0.2) {
        c *= Au;
      } else {
        c = c > 0.8 ? (Lh - c) * Jd : fn;
      }
      a = ΔΔ[rt.kM][ck.time];
      ⵠΔΔ = -a.width * this.Jli.hi;
      ᐃⵠⲆ = -a.height * this.Jli.hi;
      ea.globalAlpha = c;
      _l(ea, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / En, ᐃⵠⲆ / wh);
      b = ΔΔ[rt.AM];
    }
    if (this.rbi >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(X, this.rbi - 0.9))) < 0.2) {
        c *= aq;
      } else {
        c = 1;
      }
      a = ΔΔ[rt.wM][ck.time];
      ⵠΔΔ = this.Jli.hi * -a.width;
      ᐃⵠⲆ = -a.height * this.Jli.hi;
      ea.globalAlpha = c;
      _l(ea, a, -ⵠΔΔ / Ha, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      b = ΔΔ[rt.MM];
    }
    if (this.action & fw.Vr && b !== undefined) {
      if (this.oli.mi() && this.oli.oi == ui) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = c * (0.6 - this.oli.hi);
      ⵠΔΔ = this.Jli.hi * -b.width;
      ᐃⵠⲆ = -b.height * this.Jli.hi;
      _l(ea, b, -ⵠΔΔ / Ha, -ᐃⵠⲆ / bq, ⵠΔΔ / Vn, ᐃⵠⲆ / ec);
    }
    ea.globalAlpha = 1;
    ea.restore();
  }
  function Rb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (ⵠⵠⵠⲆ.j(this, this.r) > 300) {
      this.scale = Math.min(this.scale + bk / Gi, 1.8);
    } else {
      this.scale = Math.max(this.scale - bk, yd);
    }
    this.Jli.mi();
    this.rotate.mi();
    a = ΔΔ[rt.mc][ck.time];
    ⵠΔΔ = this.scale * (this.Jli.hi * -a.width);
    ᐃⵠⲆ = this.scale * (this.Jli.hi * -a.height);
    _l(ea, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / k, ⵠΔΔ / z, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == 0) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var a = ΔΔ[rt.Cc];
      _l(ea, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / mj, ᐃⵠⲆ / Gi);
      ea.globalAlpha = 1;
    }
    a = ΔΔ[rt.lc][ck.time];
    ⵠΔΔ = -a.width * this.Jli.hi * this.scale;
    ᐃⵠⲆ = this.scale * (this.Jli.hi * -a.height);
    ea.save();
    ea.translate(la * -60, la * 20);
    ea.rotate(this.rotate.hi);
    _l(ea, a, -ⵠΔΔ * la / cn, -ᐃⵠⲆ * la / bq, ⵠΔΔ / 2, ᐃⵠⲆ / ih);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.Sc];
      _l(ea, a, -ⵠΔΔ * la / 4, -ᐃⵠⲆ * la / Gs, ⵠΔΔ / tm, ᐃⵠⲆ / 2);
      ea.globalAlpha = 1;
    }
    ea.restore();
    a = ΔΔ[rt.bc][ck.time];
    ea.save();
    ea.translate(la * 60, la * 20);
    ea.rotate(-this.rotate.hi);
    _l(ea, a, -ⵠΔΔ * la / Gm, -ᐃⵠⲆ * la / Rh, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      ea.globalAlpha = 0.6 - this.oli.hi;
      a = ΔΔ[rt.Ic];
      _l(ea, a, -ⵠΔΔ * la / 4, la * -ᐃⵠⲆ / bq, ⵠΔΔ / 2, ᐃⵠⲆ / Gi);
      ea.globalAlpha = X;
    }
    ea.restore();
    ea.restore();
  }
  function Lb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == ui) {
        this.oli.mi = false;
      }
      var b = (Ej - this.oli.hli.hi) * bk * 600 * la;
      var c = Math.sin(this.oli.angle - this.angle) * b;
      var d = Math.cos(this.oli.angle - this.angle) * b;
    } else {
      c = Cm;
      d = Cm;
    }
    var f = this.info & 15;
    if (this.info === 10 || f === qh) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.Gb][ck.time];
      } else {
        g = ΔΔ[rt.ls][ck.time];
      }
      var h = this.Uli.hi * -g.width;
      var i = -g.height * this.Uli.hi;
      _l(ea, g, -h / 2 + c, -i / 2 + d, h, i);
    } else {
      if (this.info & 16) {
        g = ΔΔ[rt.rv][ck.time];
      } else {
        g = ΔΔ[rt.bs][ck.time];
      }
      ea.translate(bd, g.height / 2);
      _l(ea, g, c - g.width / mj, -g.height + d);
    }
    ea.restore();
  }
  function Gb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = je;
      }
      var a = bk * (1 - this.oli.hli.hi) * 600 * la;
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = 0;
      c = Ea;
    }
    ea.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - Jf;
      c += Math.random() * rd - 1;
    }
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.xa][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + bk * 3) % (Math.PI * 2);
    }
    ea.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[rt.wB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / mj, -Ⲇⵠ.height / eu);
    ea.restore();
  }
  function qb(a, b, c) {
    if (a >= Sh) {
      Ⲇⵠ = ΔΔ[a][ck.time];
      switch (a) {
        case rt.Ve:
        case rt.Ze:
        case rt.$e:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / Jr - la * (0 + b), -Ⲇⵠ.height / 4 + (c + 35) * la);
          break;
        case rt.tn:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (Mc + b), -Ⲇⵠ.height / eh + (c + 45) * la);
          break;
        case rt.en:
        case rt.nn:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (1 + b) * la, -Ⲇⵠ.height / pj + (c + 40) * la);
      }
    }
  }
  function Wb(a) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.Jli.mi();
    Ⲇⵠ = ΔΔ[a][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width * this.Jli.hi;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.Jli.hi;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / wc, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Nb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.gli.mi();
    Ⲇⵠ = ΔΔ[rt.Td][ck.time];
    ⵠΔΔ = -Ⲇⵠ.width * this.gli.hi;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.gli.hi;
    _l(ea, Ⲇⵠ, -ⵠΔΔ / Cs, -ᐃⵠⲆ / z, ⵠΔΔ, ᐃⵠⲆ);
    ea.restore();
  }
  function Hb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == Zh) {
        this.oli.mi = false;
      }
      var b = bk * (1 - this.oli.hli.hi) * 600 * la;
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = b * Math.cos(this.oli.angle - this.angle);
    } else {
      c = sh;
      d = 0;
    }
    var f = this.info & 15;
    if (this.info === 10 || Ka === f) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.qy][ck.time];
      } else {
        g = ΔΔ[rt.Cs][ck.time];
      }
      var h = -g.width * this.Uli.hi;
      var i = this.Uli.hi * -g.height;
      _l(ea, g, -h / Cs + c, -i / 2 + d, h, i);
    } else {
      if (this.info & 16) {
        g = ΔΔ[rt.Wy][ck.time];
      } else {
        g = ΔΔ[rt.zs][ck.time];
      }
      ea.translate(Cm, g.height / yo);
      _l(ea, g, c - g.width / 2, -g.height + d);
    }
    ea.restore();
  }
  function Ub() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == Qc) {
        this.oli.mi = false;
      }
      var b = la * ((1 - this.oli.hli.hi) * bk * 600);
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = b * Math.cos(this.oli.angle - this.angle);
    } else {
      c = qh;
      d = nj;
    }
    var f = this.info & 15;
    if (this.info === Zo || f === 0) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.kk][ck.time];
      } else {
        g = ΔΔ[rt._s][ck.time];
      }
      var h = -g.width * this.Uli.hi;
      var i = -g.height * this.Uli.hi;
      _l(ea, g, -h / lr + c, -i / 2 + d, h, i);
    } else {
      if (this.info & 16) {
        g = ΔΔ[rt.Ak][ck.time];
      } else {
        g = ΔΔ[rt.Fs][ck.time];
      }
      ea.translate(0, g.height / Gi);
      _l(ea, g, c - g.width / 2, -g.height + d);
    }
    ea.restore();
  }
  function Ob() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.obi = Math.min(Lo, this.obi + bk * z);
    ea.globalAlpha = this.obi * Math.min(fn, Math.max(0, ⵠⵠⵠⲆ.j(this, this.r) / 80));
    this.Jli.mi();
    Ⲇⵠ = ΔΔ[rt.vr][ck.time][this.hbi];
    if (ih > this.hbi) {
      ⵠΔΔ = -Ⲇⵠ.width * this.Jli.hi;
      ᐃⵠⲆ = this.Jli.hi * -Ⲇⵠ.height;
    } else if (this.gbi === 0) {
      ⵠΔΔ = -Ⲇⵠ.width;
      ᐃⵠⲆ = -Ⲇⵠ.height;
    } else {
      ⵠΔΔ = -Ⲇⵠ.width * 1.35;
      ᐃⵠⲆ = -Ⲇⵠ.height * 1.35;
    }
    _l(ea, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    ea.globalAlpha = 1;
    ea.restore();
  }
  function Yb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = Qc;
      }
      var a = bk * (X - this.oli.hli.hi) * 600 * la;
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = Math.cos(this.oli.angle - this.angle) * a;
    } else {
      b = Ka;
      c = qh;
    }
    ea.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Cs * Math.random() - Mc;
      c += Math.random() * 2 - 1;
    }
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.za][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / ih);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + bk * 3) % (Math.PI * 2);
    }
    ea.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[rt.vB][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Cs);
    ea.restore();
  }
  function Jb() {
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = Mr;
      }
      var a = la * (bk * (Ic - this.oli.hli.hi) * 600);
      var b = a * Math.sin(this.oli.angle - this.angle);
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = Ou;
      c = xn;
    }
    ea.save();
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.rotate(this.angle);
    Ⲇⵠ = ΔΔ[rt.ga][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    ea.restore();
  }
  function Kb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && this.oli.hli.oi == 0) {
        this.oli.mi = false;
      }
      var a = bk * (1 - this.oli.hli.hi) * 600 * la;
      var b = Math.sin(this.oli.angle - this.angle) * a;
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = sh;
      c = 0;
    }
    if (yo == this.action) {
      Ⲇⵠ = ΔΔ[rt.wg][ck.time];
    } else {
      Ⲇⵠ = ΔΔ[rt.Yn][ck.time];
    }
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2 + b, -Ⲇⵠ.height / 2 + c);
    ea.restore();
  }
  function Xb(a, b, c) {
    if (Cm <= a) {
      Ⲇⵠ = ΔΔ[a][ck.time];
      switch (a) {
        case rt.Pt:
        case rt.jt:
        case rt.Rt:
        case rt.Wt:
        case rt.de:
        case rt.me:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / Te - la * (45 + b), -Ⲇⵠ.height / Cg + (c + 22) * la);
          break;
        case rt.wn:
        case rt.Mn:
        case rt.Bn:
        case rt.Dn:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / Jn - la * (52 + b), -Ⲇⵠ.height / 4 + (c + Wo) * la);
          break;
        case rt.En:
        case rt.Cn:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (57 + b) * la, -Ⲇⵠ.height / 4 + (c + Es) * la);
          break;
        case rt.je:
        case rt.Ft:
        case rt.Lt:
        case rt.Gt:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (47 + b), -Ⲇⵠ.height / 4 + la * (c + 45));
          break;
        case rt.ce:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / Ld - (52 + b) * la, -Ⲇⵠ.height / 4 + (c + 45) * la);
          break;
        case rt.$t:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (47 + b), -Ⲇⵠ.height / 4 + (c + 44) * la);
          break;
        case rt.Nt:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - (47 + b) * la, -Ⲇⵠ.height / 2 + (c + 44) * la);
          break;
        case rt.We:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / Tg - la * (40 + b), -Ⲇⵠ.height / ec + (c + 65) * la);
          break;
        case rt.Ot:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (37 + b), -Ⲇⵠ.height / 4 + la * (c + 85));
          break;
        case rt.fe:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / sj - (37 + b) * la, -Ⲇⵠ.height / 4 + la * (c + 85));
          break;
        case rt.Fe:
        case rt._e:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (26 + b), -Ⲇⵠ.height / mn + (c + 77) * la);
          break;
        case rt.Vt:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (37 + b), -Ⲇⵠ.height / 4 + (c + 85) * la);
          break;
        case rt.Ne:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / mn - (47 + b) * la, -Ⲇⵠ.height / 4 + la * (c + 44));
          break;
        case rt.He:
        case rt.Ue:
        case rt.Oe:
        case rt.Ye:
        case rt.Je:
        case rt.Ke:
        case rt.Xe:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (37 + b), -Ⲇⵠ.height / Gs + (c + 30) * la);
          break;
        case rt.Te:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / _n - la * (47 + b), -Ⲇⵠ.height / 4 + (c + 35) * la);
          break;
        case rt.kn:
        case rt.An:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (47 + b) * la, -Ⲇⵠ.height / Ac + (c + 40) * la);
          break;
        case rt.bn:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / Jr - la * (47 + b), -Ⲇⵠ.height / Jr + la * (c + 34));
          break;
        case rt.Yt:
        case rt.Jt:
        case rt.Kt:
        case rt.ue:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - la * (37 + b), -Ⲇⵠ.height / eh + la * (c + 90));
          break;
        case rt.Zt:
          Tv(a, Ⲇⵠ, -Ⲇⵠ.width / pj - la * (40 + b), -Ⲇⵠ.height / mn + (c + 85) * la);
          break;
        case rt.Xt:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - la * (39 + b), -Ⲇⵠ.height / 2 + la * (c + 90));
          break;
        case rt.pe:
        case rt.le:
        case rt.be:
        case rt.ve:
        case rt.ye:
        case rt.De:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - la * (46 + b), -Ⲇⵠ.height / hu + (c + 35) * la);
          break;
        case rt.xe:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / mj - la * (47 + b), -Ⲇⵠ.height / 2 + (c + 54) * la);
          break;
        case rt.Ee:
        case rt.Qe:
        case rt.Se:
        case rt.Ie:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - la * (46 + b), -Ⲇⵠ.height / 2 + (c + 35) * la);
          break;
        case rt.Pe:
          zv(a, Ⲇⵠ, -Ⲇⵠ.width / ih - (47 + b) * la, -Ⲇⵠ.height / 2 + la * (c + 20));
      }
    }
  }
  function Vb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.cbi.length == 0 || rt.Ct >= this.cbi[this.cbi.length - au])) {
      this.cbi.push(rt.Et);
    }
    for (var a = sh; this.cbi.length > a; a++) {
      this.cbi[a] = Math.max(0, this.cbi[a] - rt.zt * bk);
      ea.globalAlpha = this.cbi[a] / 1.3;
      var b = (Ps - this.cbi[a]) * 40;
      var c = (Lh - this.cbi[a]) * 35 + 10;
      rm(ea, la * -68 + Math.sin(-this.angle - Math.PI / 2) * b, la * -Hg + b * Math.cos(-this.angle - Math.PI / yo), c);
      em(ea, "#333333");
    }
    ea.globalAlpha = lt;
    if (du < this.cbi.length && this.cbi[0] === so) {
      this.cbi.shift();
    }
    ea.restore();
  }
  function Zb() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.Uli.mi();
    ea.globalAlpha = 0.3;
    var a = ΔΔ[rt.io][ck.time];
    var b = -a.width * this.Uli.hi;
    var c = this.Uli.hi * -a.height;
    _l(ea, a, -b / 2, -c / rd, b, c);
    ea.globalAlpha = ja;
    ea.restore();
  }
  function $b() {
    if (this.oli.mi) {
      var a = la * ((au - this.oli.hli.hi) * bk * 600);
      var b = a * Math.sin(this.oli.angle - this.angle);
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = ke;
      c = Jj;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + bk * 0.5) % (Math.PI * z);
    }
    ea.save();
    ea.translate(ax.Oi.x + this.x + b, ax.Oi.y + this.y + c);
    ea.save();
    ea.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[rt.Uu][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    ea.restore();
    ea.save();
    ea.rotate(this.dbi);
    Ⲇⵠ = ΔΔ[rt.Ou][ck.time];
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Yh);
    ea.restore();
    ea.restore();
  }
  function Uu() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && oj == this.oli.hli.oi) {
        this.oli.mi = false;
      }
      var b = la * (bk * (wg - this.oli.hli.hi) * 600);
      var c = b * Math.sin(this.oli.angle - this.angle);
      var d = b * Math.cos(this.oli.angle - this.angle);
    } else {
      c = 0;
      d = so;
    }
    var f = this.info & 15;
    if (ic === this.info || Sh === f) {
      ea.rotate(this.angle);
      this.Uli.mi();
      if (this.info & 16) {
        var g = ΔΔ[rt.xb][ck.time];
      } else {
        g = ΔΔ[rt.fs][ck.time];
      }
      var h = -g.width * this.Uli.hi;
      var i = -g.height * this.Uli.hi;
      _l(ea, g, -h / ec + c, -i / Tg + d, h, i);
    } else {
      if (this.info & 16) {
        g = ΔΔ[rt.Qb][ck.time];
      } else {
        g = ΔΔ[rt.ps][ck.time];
      }
      ea.translate(0, g.height / 2);
      _l(ea, g, c - g.width / Te, -g.height + d);
    }
    ea.restore();
  }
  function Vu() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    if (this.oli.mi) {
      if (this.oli.hli.mi() && Qh == this.oli.hli.oi) {
        this.oli.mi = wo;
      }
      var a = la * ((ja - this.oli.hli.hi) * bk * 600);
      var b = a * Math.sin(this.oli.angle - this.angle);
      var c = a * Math.cos(this.oli.angle - this.angle);
    } else {
      b = Oq;
      c = 0;
    }
    if (this.info === 0) {
      Ⲇⵠ = ΔΔ[rt.ss][ck.time];
    } else {
      Ⲇⵠ = ΔΔ[rt.Ul][ck.time][this.info - au];
    }
    _l(ea, Ⲇⵠ, -Ⲇⵠ.width / wc + b, -Ⲇⵠ.height / tm + c);
    ea.restore();
  }
  function Wu() {
    if ((this.info & Ej) === fo) {
      this.rbi = Math.min(this.rbi + bk, 2.2);
    } else {
      this.rbi = Math.max(this.rbi - bk, 0);
      this.mbi += bk;
      if (this.mbi > 0.1) {
        this.mbi = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.Uli.push(a);
      }
    }
    for (var b = 0; b < this.Uli.length; b++) {
      a = this.Uli[b];
      ea.save();
      ea.translate(ax.Oi.x + a.x, ax.Oi.y + a.y);
      a.a = Math.min(1, a.a + bk / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (Jf - c) * et : 1;
      }
      ea.globalAlpha = c * 0.8;
      rm(ea, Js, Js, a.r);
      em(ea, rt.vM[ck.time]);
      ea.restore();
      if (yd === a.a) {
        this.Uli.splice(b, wg);
        b--;
      }
    }
  }
  function Xu(a, b) {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    ea.rotate(this.angle);
    this.Jli.mi();
    c = ΔΔ[a][ck.time];
    ⵠΔΔ = -c.width * this.Jli.hi;
    ᐃⵠⲆ = this.Jli.hi * -c.height;
    _l(ea, c, -ⵠΔΔ / Jn, -ᐃⵠⲆ / Ud, ⵠΔΔ / eu, ᐃⵠⲆ / 2);
    if (this.action & fw.Vr) {
      if (this.oli.mi() && this.oli.oi == Ys) {
        this.action -= fw.Vr;
      }
      ea.globalAlpha = 0.6 - this.oli.hi;
      var c = ΔΔ[b];
      _l(ea, c, -ⵠΔΔ / 4, -ᐃⵠⲆ / k, ⵠΔΔ / Tg, ᐃⵠⲆ / lr);
      ea.globalAlpha = 1;
    }
    ea.restore();
  }
  function Yu(a) {
    if (a > Vd) {
      var b = ΔΔ[a][ck.time];
      switch (a) {
        case rt.Re:
          zv(a, b, -b.width / 2 + la * yo, -b.height / wh - la * 5);
          break;
        case rt.Ht:
          zv(a, b, -b.width / 2, -b.height / Gi - la * P);
          break;
        case rt.Ut:
          zv(a, b, -b.width / z, -b.height / Yh - la * 10);
          break;
        case rt.ne:
          zv(a, b, -b.width / 2, -b.height / yo - la * 19);
          break;
        case rt.ae:
          Tv(a, b, -b.width / 4, -b.height / k - la * 20);
          break;
        case rt.se:
          zv(a, b, -b.width / rd - la * 1, -b.height / Yh - la * 23);
          break;
        case rt.re:
          zv(a, b, -b.width / Tg, -b.height / 2 - bg * la);
          break;
        case rt.oe:
          zv(a, b, -b.width / yo, -b.height / yo - la * 2);
          break;
        case rt.Me:
          zv(a, b, -b.width / wh + la * 1.5, -b.height / Gi - wg * la);
          break;
        case rt.Be:
        case rt.ie:
        case rt.te:
        case rt.ee:
        case rt.hn:
        case rt.gn:
        case rt.cn:
        case rt.Ge:
        case rt.vn:
        case rt.ln:
        case rt.pn:
          Tv(a, b, -b.width / 4, -b.height / 4 + la * 2);
          break;
        case rt.Ae:
        case rt.we:
          zv(a, b, -b.width / 2 - et * la, -b.height / 2 - la * lr);
          break;
        case rt.ke:
          zv(a, b, -b.width / Gi, -b.height / Vn - Te * la);
          break;
        case rt.un:
          zv(a, b, -b.width / 2, -b.height / Vn - la * eu);
          break;
        case rt.ze:
          zv(a, b, -b.width / 2, -b.height / tm - la * Yh);
          break;
        case rt.Ce:
          zv(a, b, -b.width / 2 + Tg * la, -b.height / 2);
          break;
        case rt.Le:
          zv(a, b, -b.width / 2, -b.height / rd - la * 5);
          break;
        case rt.an:
        case rt.sn:
        case rt.rn:
          zv(a, b, -b.width / 2 - la * 1, -b.height / 2);
          break;
        case rt.dn:
          zv(a, b, -b.width / mj, -b.height / z + la * 2);
          break;
        case rt.mn:
        case rt.fn:
          zv(a, b, -b.width / 2, -b.height / 2 + fm * la);
          break;
        case rt.qe:
          zv(a, b, -b.width / 2, -b.height / 2 - la * 4);
      }
    }
  }
  function Zu() {
    if (!this.ubi && this.fbi !== 0) {
      if (this.r.x != this.x || this.y != this.r.y) {
        var b = (ⵠⵠⵠⲆ.I(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.pbi = ⵠⵠⵠⲆ.P(b, this.pbi);
        this.pbi = ⵠⵠⵠⲆ.Si(this.pbi, b, 0.018);
      }
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ea.rotate(this.pbi);
      if (this.fbi === $r.Os) {
        if (this.lbi > 50 || this.bbi > xn) {
          if (this.lbi > 50) {
            this.bbi = Math.min(1, this.bbi + bk);
          } else {
            this.bbi = Math.max(Js, this.bbi - bk);
          }
          ea.globalAlpha = this.bbi;
          var c = ΔΔ[rt.Js][ck.time];
          Tv(rt.Js, c, -c.width / cn, -c.height / Gs);
          ea.globalAlpha = 1;
        }
        c = ΔΔ[rt.Os][ck.time];
        Tv(rt.Os, c, -c.width / _n, -c.height / Ac);
      } else if ($r.ar === this.fbi) {
        this.vbi = ⵠⵠⵠⲆ.Si(this.vbi, this.lbi, 0.018);
        this.ybi.mi();
        if (this.lbi > 85) {
          this.bbi = Math.min(1, this.bbi + bk / Jr);
        } else {
          this.bbi = Math.max(0.1, this.bbi - bk);
        }
        c = ΔΔ[rt.Bw][ck.time];
        Tv(rt.Bw, c, -c.width / Jn, -c.height / 4);
        c = ΔΔ[rt.Cw][ck.time];
        ⵠΔΔ = -c.width;
        ᐃⵠⲆ = -c.height;
        ea.save();
        ea.translate(-d * la, -_o * la);
        ea.rotate(this.ybi.hi * this.bbi);
        _l(ea, c, -ⵠΔΔ / 4, -ᐃⵠⲆ / pj, ⵠΔΔ / lr, ᐃⵠⲆ / 2);
        ea.restore();
        c = ΔΔ[rt.Qw][ck.time];
        ea.save();
        ea.translate(la * 20, la * -20);
        ea.rotate(this.bbi * -this.ybi.hi);
        _l(ea, c, -ⵠΔΔ / 4, -ᐃⵠⲆ / _n, ⵠΔΔ / Cs, ᐃⵠⲆ / yo);
        ea.restore();
      } else if ($r.er === this.fbi) {
        this.vbi = ⵠⵠⵠⲆ.Si(this.vbi, this.lbi, 0.018);
        this.ybi.mi();
        if (this.lbi > 85) {
          this.bbi = Math.min(Ko, this.bbi + bk / 4);
        } else {
          this.bbi = Math.max(0.1, this.bbi - bk);
        }
        c = ΔΔ[rt.gw][ck.time];
        Tv(rt.gw, c, -c.width / k, -c.height / cn);
        c = ΔΔ[rt.mw][ck.time];
        ⵠΔΔ = -c.width;
        ᐃⵠⲆ = -c.height;
        ea.save();
        ea.translate(la * -40, la * -45);
        ea.rotate(this.ybi.hi * this.bbi);
        _l(ea, c, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
        ea.restore();
        c = ΔΔ[rt.pw][ck.time];
        ea.save();
        ea.translate(la * 40, la * -45);
        ea.rotate(this.bbi * -this.ybi.hi);
        _l(ea, c, -ⵠΔΔ / Gs, -ᐃⵠⲆ / Gm, ⵠΔΔ / ec, ᐃⵠⲆ / Tg);
        ea.restore();
      } else if ($r.tr === this.fbi) {
        this.vbi = ⵠⵠⵠⲆ.Si(this.vbi, this.lbi, 0.018);
        this.ybi.mi();
        if (this.lbi > 85) {
          this.bbi = Math.min(lt, this.bbi + bk / _g);
        } else {
          this.bbi = Math.max(0.1, this.bbi - bk);
        }
        c = ΔΔ[rt.KA][ck.time];
        Tv(rt.KA, c, -c.width / Ha, -c.height / 4);
        c = ΔΔ[rt.ZA][ck.time];
        ⵠΔΔ = -c.width;
        ᐃⵠⲆ = -c.height;
        ea.save();
        ea.translate(la * -40, la * -45);
        ea.rotate(this.ybi.hi * this.bbi);
        _l(ea, c, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / rd);
        ea.restore();
        c = ΔΔ[rt.tw][ck.time];
        ea.save();
        ea.translate(la * 40, la * -45);
        ea.rotate(-this.ybi.hi * this.bbi);
        _l(ea, c, -ⵠΔΔ / Ud, -ᐃⵠⲆ / sj, ⵠΔΔ / mj, ᐃⵠⲆ / Cg);
        ea.restore();
      } else if ($r.yn === this.fbi) {
        this.vbi = ⵠⵠⵠⲆ.Si(this.vbi, this.lbi, 0.018);
        c = ΔΔ[rt.yn][ck.time];
        Tv(rt.yn, c, -c.width / Rh, -c.height / _n);
      } else if ($r.sr === this.fbi) {
        this.vbi = ⵠⵠⵠⲆ.Si(this.vbi, this.lbi, 0.018);
        c = ΔΔ[rt.sr][ck.time];
        Tv(rt.sr, c, -c.width / 4, -c.height / 4);
      } else if (this.fbi === $r.Ys) {
        c = ΔΔ[rt.Ys][ck.time];
        Tv(rt.Ys, c, -c.width / 4, -c.height / _g);
      } else if (this.fbi === $r.yr) {
        c = ΔΔ[rt.TB][ck.time];
        if (this.lbi > 85) {
          this.bbi = Math.min(1, this.bbi + bk / pj);
        } else {
          this.bbi = Math.max(0, this.bbi - bk);
        }
        this.kbi += bk * 60;
        if (this.kbi > 60) {
          this.kbi -= 60;
        }
        var f = ((this.kbi < 30 ? this.kbi / 30 : Ej - (this.kbi - 30) / 30) * 12 - 6) * this.bbi;
        Tv(rt.TB, c, -c.width / 4, -c.height / Ha + f);
      } else if (this.fbi === $r.Xs) {
        c = ΔΔ[rt.BA][ck.time];
        if (this.lbi > 85) {
          this.bbi = Math.min(dm, this.bbi + bk / 4);
        } else {
          this.bbi = Math.max(nj, this.bbi - bk);
        }
        this.kbi += bk * 60;
        if (this.kbi > 60) {
          this.kbi -= 60;
        }
        f = (-Gg + (this.kbi < 30 ? this.kbi / 30 : 1 - (this.kbi - 30) / 30) * 12) * this.bbi;
        Tv(rt.BA, c, -c.width / _g, -c.height / 4 + f);
      } else if (this.fbi === $r.ir) {
        var g = Math.PI / lr;
        var h = Math.PI / Nr;
        c = ΔΔ[rt.PA][ck.time];
        if (this.lbi > 85) {
          this.bbi = Math.min(ja, this.bbi + bk / bq);
        } else {
          this.bbi = Math.max(0, this.bbi - bk);
        }
        this.kbi += bk * 60;
        if (this.kbi > 60) {
          this.kbi -= 60;
        }
        f = this.bbi * (-hn + (this.kbi < 30 ? this.kbi / 30 : X - (this.kbi - 30) / 30) * 12);
        Tv(rt.PA, c, -c.width / Gm + f, -c.height / _n);
        ea.restore();
        ea.save();
        ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
        ea.rotate(Math.PI + this.pbi + h);
        ea.translate(120, f);
        ea.rotate(g);
        c = ΔΔ[rt.GA][ck.time];
        ⵠΔΔ = -c.width;
        ᐃⵠⲆ = -c.height;
        _l(ea, c, -ⵠΔΔ / Gi, -ᐃⵠⲆ / z, ⵠΔΔ, ᐃⵠⲆ);
        ea.restore();
        ea.save();
        ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
        ea.rotate(Math.PI + this.pbi + g + h);
        ea.translate(120, f);
        ea.rotate(g);
        c = ΔΔ[rt.NA][ck.time];
        ⵠΔΔ = -c.width;
        ᐃⵠⲆ = -c.height;
        _l(ea, c, -ⵠΔΔ / ih, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      }
      ea.restore();
    }
  }
  function $u(b, c, d) {
    if (c.jfi() !== wg) {
      return c;
    }
    var e = ⵠΔᐃⵠΔᐃΔ[d][b];
    if (Z === e) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var a = c.width;
      var g = c.height;
      e.width = a;
      e.height = g;
      f.drawImage(c, Oq, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ΔᐃⲆⲆᐃⲆᐃᐃᐃ[d];
      f.fillRect(0, 0, a, g);
      ⵠΔᐃⵠΔᐃΔ[d][b] = e;
    }
    return e;
  }
  function _u() {
    var f = Gc;
    switch (this.right) {
      case rt.Ve:
      case rt.Ze:
      case rt.$e:
      case rt.tn:
      case rt.en:
      case rt.nn:
        f = Ic;
    }
    if (this.ubi) {
      for (var j = 0; this.bubbles.length > j; j++) {
        var k = this.bubbles[j];
        if (k._li > 0.5) {
          var l = 1 - (k._li - 0.5) * 2;
        } else {
          l = k._li * 2;
        }
        ea.globalAlpha = l;
        var p = ΔΔ[rt.Xd][ck.time][k.id];
        _l(ea, p, ax.Oi.x + k.x - p.width / 2, ax.Oi.y + k.y - p.height / Gi);
        ea.globalAlpha = Ej;
      }
    } else {
      ea.save();
      ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
      ck.Abi(this);
      if (this.action & fw.wbi) {
        (function (c) {
          if (c.right >= sh) {
            switch (c.right) {
              case rt.xe:
                ea.save();
                var d = c.attack.hi * -Xg / Math.PI;
                if (c.attack.oi) {
                  var f = -Math.PI / Xg - (Math.PI / 3 + c.attack.hi) / xa;
                } else {
                  f = c.attack.hi;
                }
                ea.rotate(c.angle - Math.PI / Gi + f);
                ea.globalAlpha = d / 1.2;
                rm(ea, la * -40, la * 90, la * qn);
                em(ea, "#0B6A84");
                ea.globalAlpha = d / 1.2;
                rm(ea, la * -52, yq * la, kc * la);
                em(ea, "#0B6A84");
                ea.globalAlpha = d / 1.2;
                rm(ea, la * -30, la * 95, Gm * la);
                em(ea, "#0B6A84");
                ea.globalAlpha = 1;
                ea.restore();
                break;
              case rt.Ee:
              case rt.Qe:
              case rt.Se:
              case rt.Ie:
                if (c.gbi === 1) {
                  break;
                }
                if (c.Mbi > sh) {
                  var g = rt.rt[ck.time];
                } else {
                  g = c.Bbi > Nf || c.Dbi > 0 ? rt.nt[ck.time] : rt.st[ck.time];
                }
                d = c.attack.hi * -3 / Math.PI;
                f = c.attack.oi ? Math.max(0.5 - d / 2 + 0.5, 0) : Math.max(d / Gi, 0);
                if (Ng === f) {
                  c.Ebi = c.angle;
                }
                ea.save();
                ea.rotate(c.Ebi - Math.PI / wc);
                ea.globalAlpha = d;
                var h = la * 25 + f * 25;
                rm(ea, h, la * 80, la * 15);
                em(ea, g);
                rm(ea, -h, la * 80, b * la);
                em(ea, g);
                ea.globalAlpha = Lh;
                ea.restore();
            }
          }
        })(this);
      }
      ea.save();
      ea.rotate(this.angle - Math.PI / Tg);
      if (!(this.action & fw.wbi)) {
        if (this.action & fw.IDLE || Gc !== this.fbi) {
          this.Cbi.mi();
        } else if (this.action & fw.zbi) {
          this.xbi.mi();
        }
      }
      var q;
      var v = this.Cbi.hi;
      var w = this.xbi.hi;
      if (rt.un === this.dli) {
        p = ΔΔ[rt.Tl][ck.time];
        q = rt.Tl;
      } else if (rt.ie === this.dli) {
        p = ΔΔ[rt.ny][ck.time];
        q = rt.ny;
      } else if (this.dli === rt.te) {
        p = ΔΔ[rt.gy][ck.time];
        q = rt.gy;
      } else if (this.dli === rt.ee) {
        p = ΔΔ[rt.ly][ck.time];
        q = rt.ly;
      } else if (this.Qbi) {
        p = ΔΔ[rt.mb][ck.time];
        q = rt.mb;
      } else {
        p = ΔΔ[rt.qt][this.Mli][ck.time];
        q = rt.qt;
      }
      ᐃᐃΔⲆ = ΔΔ[rt.so][ck.time];
      var x = p;
      var h = q;
      if (this.action & fw.wbi) {
        if (this.attack.mi() && this.attack.oi == 0) {
          this.Sbi = !this.Sbi;
          this.action -= fw.wbi;
          if (ax.Hfi == this.Hfi) {
            ax.control.Ibi = 0;
          }
        }
        if (Ea <= this.right) {
          this.Sbi = gi;
        }
        var g = this.Sbi ? this.attack.hi : -this.attack.hi / 3;
        var y = this.Sbi ? this.attack.hi / Vr : -this.attack.hi;
        if (this.Qbi) {
          ea.save();
          ea.rotate(g);
          zv(q, p, -p.width / wh - (66 + v) * la, -p.height / ec + (5 + w) * la);
          ea.restore();
          ea.save();
          ea.rotate(y);
          zv(q, p, -p.width / 2 + (66 + v) * la, -p.height / 2 + (5 + w) * la);
          ea.restore();
        } else if (f === 0) {
          if (rt.He === this.right) {
            g = -ⵠⵠⵠⲆ.$(-g);
          }
          ea.save();
          ea.rotate(g);
          zv(rt.so, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / 2 - (49 + v) * la, -ᐃᐃΔⲆ.height / lr + la * (Dc + w));
          if (this.right === rt.he) {
            var d = ΔΔ[this.right][this._bi][ck.time];
            qv(this.right, this._bi, d, -d.width / Gs - la * (62 + v), -d.height / 4 + (w + R) * la);
          } else {
            Xb(this.right, v, w);
          }
          if (rt.ny <= q) {
            Tv(q, p, -p.width / Rh - (49 + v) * la, -p.height / Jr + la * (Cc + w));
          } else if (q !== rt.Tl) {
            qv(q, this.Mli, p, -p.width / Nr - la * (49 + v), -p.height / sj + la * (11 + w));
          } else {
            zv(q, p, -p.width / 2 - (49 + v) * la, -p.height / 2 + (aa + w) * la);
          }
          ea.restore();
          ea.save();
          ea.rotate(y);
          zv(rt.so, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / lr + la * (49 + v), -ᐃᐃΔⲆ.height / 2 + la * (uh + w));
          if (rt.ny <= q) {
            Tv(q, p, -p.width / Gm + (49 + v) * la, -p.height / Nr + la * (11 + w));
          } else if (q !== rt.Tl) {
            qv(q, this.Mli, p, -p.width / Jr + la * (49 + v), -p.height / 4 + (11 + w) * la);
          } else {
            zv(q, p, -p.width / 2 + la * (49 + v), -p.height / Gi + (ro + w) * la);
          }
          ea.restore();
        }
      } else if (this.Qbi) {
        zv(q, p, -p.width / ih - (66 + v) * la, -p.height / 2 + (Au + w) * la);
        zv(q, p, -p.width / 2 + (66 + v) * la, -p.height / En + (5 + w) * la);
      } else if (f === so) {
        zv(rt.so, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / 2 - la * (49 + v), -ᐃᐃΔⲆ.height / 2 + (15 + w) * la);
        if (rt.he === this.right) {
          d = ΔΔ[this.right][this._bi][ck.time];
          qv(this.right, this._bi, d, -d.width / 4 - la * (62 + v), -d.height / bq + la * (w + Zr));
        } else {
          Xb(this.right, v, w);
        }
        if (q >= rt.ny) {
          Tv(q, p, -p.width / Jn - la * (49 + v), -p.height / 4 + la * (11 + w));
        } else if (rt.Tl !== q) {
          qv(q, this.Mli, p, -p.width / 4 - la * (49 + v), -p.height / 4 + (11 + w) * la);
        } else {
          zv(q, p, -p.width / 2 - la * (49 + v), -p.height / Cg + (11 + w) * la);
        }
        zv(rt.so, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / 2 + la * (49 + v), -ᐃᐃΔⲆ.height / ih + la * (15 + w));
        if (q >= rt.ny) {
          Tv(q, p, -p.width / Gs + la * (49 + v), -p.height / sj + (11 + w) * la);
        } else if (q !== rt.Tl) {
          qv(q, this.Mli, p, -p.width / 4 + la * (49 + v), -p.height / 4 + (Kc + w) * la);
        } else {
          zv(q, p, -p.width / Cg + la * (49 + v), -p.height / rd + la * (11 + w));
        }
      }
      if (this.Fbi && this.dli < 1) {
        p = ΔΔ[rt.ge][this.Pbi][ck.time];
        qv(rt.ge, this.Pbi, p, -p.width / 4, -p.height / 4 - la * 39);
      }
      if (this.Qbi) {
        p = ΔΔ[rt.gb][ck.time];
        zv(rt.gb, p, -p.width / eu, -p.height / lr);
        this.Tbi.mi();
        p = ΔΔ[rt.cb][ck.time];
        zv(rt.cb, p, -p.width / 2, -p.height / 2 + this.Tbi.hi);
      } else {
        p = ΔΔ[rt.Er][this.Mli][ck.time];
        if (rt.un !== this.dli && (qv(rt.Er, this.Mli, p, -p.width / Jn, -p.height / 4), this.jbi > xn)) {
          p = ΔΔ[rt.Ll][this.jbi][ck.time];
          qv(rt.Ll, this.jbi, p, -p.width / Ha, -p.height / Jn);
        }
      }
      if (this.action & fw.zo) {
        if (this.$li.mi() && this.$li.oi == Uo) {
          this.action -= fw.zo;
        }
        ea.globalAlpha = 0.6 - this.$li.hi;
        if (this.Qbi) {
          p = ΔΔ[rt.pb];
          _l(ea, p, -p.width / 2, -p.height / 2);
        } else {
          p = $u(this.Mli, ΔΔ[rt.Er][this.Mli][Ng], ⲆᐃᐃⲆⵠΔΔᐃⲆ);
          _l(ea, p, p.width / 4, p.height / 4, -p.width / 2, -p.height / Yh);
        }
        ea.globalAlpha = 1;
      }
      if (this.action & fw.Rr) {
        if (this.Rbi.mi() && this.Rbi.oi == 0) {
          this.action -= fw.Rr;
        }
        ea.globalAlpha = 0.6 - this.Rbi.hi;
        p = ΔΔ[rt.Rr];
        _l(ea, p, -p.width / 2, -p.height / 2);
        ea.globalAlpha = 1;
      }
      if (this.action & fw.Vr) {
        if (this.oli.mi() && ui == this.oli.oi) {
          this.action -= fw.Vr;
        }
        ea.globalAlpha = 0.6 - this.oli.hi;
        if (this.Qbi) {
          p = ΔΔ[rt.ub];
          _l(ea, p, -p.width / Cg, -p.height / 2);
        } else {
          p = $u(this.Mli, ΔΔ[rt.Er][this.Mli][0], ᐃⲆⵠΔⵠⲆⲆⲆᐃ);
          _l(ea, p, p.width / cn, p.height / Jr, -p.width / hu, -p.height / Cs);
        }
        ea.globalAlpha = fi;
      }
      if (this.action & fw.Zr) {
        if (this.freeze.mi() && this.freeze.oi == 0) {
          this.action -= fw.Zr;
        }
        ea.globalAlpha = 0.6 - this.freeze.hi;
        p = $u(this.Mli, ΔΔ[rt.Er][this.Mli][Jj], ᐃⵠⲆⲆΔⵠⲆΔⲆ);
        _l(ea, p, p.width / mn, p.height / Rh, -p.width / eu, -p.height / 2);
        ea.globalAlpha = 1;
      }
      if (this.action & fw.$r) {
        if (this.Lbi.mi() && Ys == this.Lbi.oi) {
          this.action -= fw.$r;
        }
        ea.globalAlpha = 0.6 - this.Lbi.hi;
        if (this.Qbi) {
          p = ΔΔ[rt.fb];
          _l(ea, p, -p.width / 2, -p.height / 2);
        } else {
          p = $u(this.Mli, ΔΔ[rt.Er][this.Mli][0], ⲆΔᐃΔᐃΔᐃᐃⲆ);
          _l(ea, p, p.width / 4, p.height / mn, -p.width / Vn, -p.height / wc);
        }
        ea.globalAlpha = 1;
      }
      Yu(this.dli);
      if (f === 1) {
        if (this.action & fw.wbi) {
          v += ao * this.attack.hi;
        }
        zv(rt.so, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / ih - la * 26, -ᐃᐃΔⲆ.height / wh + (31 + w + v) * la);
        if (h >= rt.ny) {
          Tv(h, x, -x.width / 4 - la * 26, -x.height / mn + (27 + w + v) * la);
        } else if (h !== rt.Tl) {
          qv(h, this.Mli, x, -x.width / 4 - la * 26, -x.height / pj + la * (27 + w + v));
        } else {
          zv(h, x, -x.width / ec - la * 26, -x.height / 2 + (27 + w + v) * la);
        }
        zv(rt.so, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / mj + la * 26, -ᐃᐃΔⲆ.height / Vn + la * (31 + w + v));
        if (h >= rt.ny) {
          Tv(h, x, -x.width / 4 + la * 26, -x.height / 4 + (27 + w + v) * la);
        } else if (rt.Tl !== h) {
          qv(h, this.Mli, x, -x.width / 4 + la * 26, -x.height / Jn + la * (27 + w + v));
        } else {
          zv(h, x, -x.width / lr + la * 26, -x.height / 2 + (27 + w + v) * la);
        }
        qb(this.right, 0, w + v);
      }
      ea.restore();
      if (rt.dn !== this.dli && rt.un !== this.dli) {
        if (Ou < this.Mbi) {
          if (!this.qbi.Gbi) {
            this.qbi.Gbi = Fu(la, this.qbi.Ali, 20, "#187484", "#000", 2, null, null, la * 300);
          }
          p = this.qbi.Gbi;
        } else {
          if (!this.qbi.label) {
            this.qbi.label = Fu(la, this.qbi.Ali, zj, "#FFF", "#000", 2, null, null, la * 300);
          }
          p = this.qbi.label;
        }
        if (rt.vt == ck.pfi) {
          ea.globalAlpha = 0.5;
        }
        v = Math.floor(-p.width / 2);
        w = Math.floor(-p.height / lr - la * 70);
        _l(ea, p, v, w);
        if (Ea < this.qbi.level) {
          var z = v + p.width + yh;
          p = ΔΔ[rt.wv];
          if (ᐃⵠΔᐃΔΔⵠ[this.qbi.level] === Ug) {
            ᐃⵠΔᐃΔΔⵠ[this.qbi.level] = Fu(la, "[" + this.qbi.level + "]", 20, "#F9E8A2", "#000", ec, null, null, la * 50);
          }
          _l(ea, ᐃⵠΔᐃΔΔⵠ[this.qbi.level], z, w);
        }
        ea.globalAlpha = dm;
      } else {
        w = Math.floor(la * -70);
        v = Math.floor(ΔΔ[rt.lm].width / 1.5);
      }
      if (ax.ppi(this.$fi)) {
        if (this.$fi == ax._pi[0]) {
          p = ΔΔ[rt.bm];
        } else {
          p = ΔΔ[rt.lm];
        }
        _l(ea, p, v - p.width - 5, w - Qj);
      }
      ea.restore();
    }
  }
  function av() {
    ea.save();
    ea.translate(ax.Oi.x + this.x, ax.Oi.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = um(la, this.text[a]);
          this.Wbi[a] = Ng;
          this.Nbi[a] = Ou;
        }
        if (fo === a) {
          this.Nbi[xn] = ⵠⵠⵠⲆ.ti(this.Hbi) * 30;
        }
      }
      this.Wbi[0] += bk;
      if (this.text.length > 1) {
        this.Hbi = Math.min(this.Hbi + bk, 1);
        if (this.Wbi[Cm] > 1 && this.Hbi > 0.5) {
          this.Wbi[Ps] += bk;
        }
      }
      for (a = Js; this.text.length > a && yo > a; a++) {
        var b = this.Wbi[a];
        if (b > 0) {
          ea.globalAlpha = b < 0.25 ? b * Ld : b > 3.75 ? Math.max((4 - b) * 4, Nf) : 1;
          _l(ea, this.label[a], -this.label[a].width / 2, -this.Nbi[a] + -this.label[a].height / ih - la * 110);
        }
      }
      if (Gm < this.Wbi[0]) {
        this.Wbi.shift();
        this.text.shift();
        this.Nbi.shift();
        this.label.shift();
        this.Hbi = bd;
      }
    }
    ea.restore();
  }
  function ev() {
    if (_e !== this.message) {
      var a = ax.Lfi.Rfi.length > 0 ? -95 : 0;
      _l(ea, this.message, 0, oa - this.message.height + a);
    }
  }
  function cv() {
    if (this.enabled && this.Ubi >= 0) {
      var a = new Date().getTime() - this.Ubi;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * En;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (iw.Obi > a) {
        a = iw.Obi - a;
        if (!this.label) {
          this.label = Fu(la, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        if (a != this.now || !this.Ybi) {
          this.now = a;
          this.Ybi = Fu(la, "" + a, 40, "#660000", null, null, null, null, null, "#000", ar);
        }
        _l(ea, this.label, (sa - this.label.width) / 2, la * 100);
        ea.globalAlpha = b;
        _l(ea, this.Ybi, (sa - this.label.width) / 2 - this.Ybi.width + la * 15, la * 100);
        ea.globalAlpha = Ko;
      }
    }
  }
  function dv(a, b) {
    if (this.text) {
      if (this.timeout.oi) {
        ea.globalAlpha = 1 - this.timeout.hi;
      } else {
        ea.globalAlpha = 1;
      }
      this.label ||= Fu(la, this.text, 40, a, null, null, null, null, null, b, 10);
      _l(ea, this.label, (sa - this.label.width) / 2, la * 50);
      ea.globalAlpha = fo;
      if (this.timeout.mi() && u == this.timeout.oi) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  ᐃⲆⵠΔⵠⲆⲆⲆᐃ = 0;
  ⲆᐃᐃⲆⵠΔΔᐃⲆ = 1;
  ᐃⵠⲆⲆΔⵠⲆΔⲆ = 2;
  ⲆΔᐃΔᐃΔᐃᐃⲆ = xa;
  ᐃΔⵠⲆⲆΔᐃᐃᐃ = Gm;
  ⵠΔᐃⵠΔᐃΔ = [[], [], [], [], []];
  ΔᐃⲆⲆᐃⲆᐃᐃᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var gv = 0;
  function hv(j, i, q, e, n, a, s, r) {
    if (r === Ls) {
      r = 0;
    }
    for (var t = s; r <= t; t--) {
      for (var w = j; i >= w; w++) {
        for (var x = q; x <= e; x++) {
          var z = $w.ebi[w][x];
          if (z && z[a]) {
            var A = z[a][t];
            if (A !== Yr) {
              for (var B = Ea; B < A.length; B++) {
                var C = A[B];
                var D = ΔΔ[n][ck.time][t];
                var E = (gv + pg * (w + x)) % 60;
                var F = E < 30 ? E / 30 : lt - (E - 30) / 30;
                var G = -D.width * (hf + F * 0.9 / 30);
                var H = (ae + F * 0.9 / 30) * -D.height;
                F = (E = (gv + (w + x) * 7) % 60) < 30 ? E / 30 : 1 - (E - 30) / 30;
                var I = ea.globalAlpha;
                ea.globalAlpha = I * (0.9 + F * 0.1);
                _l(ea, D, ax.Oi.x + C.x - G / 2, ax.Oi.y + C.y - H / 2, G, H);
                ea.globalAlpha = I;
              }
            }
          }
        }
      }
    }
  }
  function fv(j, i, q, e, n, a, s, r) {
    if (lq === r) {
      r = Sh;
    }
    ck.Jli[n].mi();
    for (var t = s; r <= t; t--) {
      for (var w = j; w <= i; w++) {
        for (var x = q; x <= e; x++) {
          var z = $w.ebi[w][x];
          if (z && z[a]) {
            var A = z[a][t];
            if (ch !== A) {
              for (var B = 0; A.length > B; B++) {
                var C = A[B];
                if (C.mi) {
                  if (C.oli.mi() && ks == C.oli.oi) {
                    C.mi = false;
                  }
                  var D = la * ((hf - C.oli.hi) * bk * 600);
                  var E = Math.sin(C.angle) * D;
                  var F = Math.cos(C.angle) * D;
                } else {
                  E = 0;
                  F = Vd;
                }
                var G = ΔΔ[n][ck.time][t];
                var H = -G.width * ck.Jli[n].hi;
                var I = ck.Jli[n].hi * -G.height;
                _l(ea, G, ax.Oi.x + C.x - H / yo + E, ax.Oi.y + C.y - I / 2 + F, H, I);
              }
            }
          }
        }
      }
    }
  }
  var iv = [];
  for (Td = qh; Td < 100; Td++) {
    var lv = au;
    if (Math.random() < 0.25) {
      lv = Sh;
    }
    iv.push(lv);
  }
  function mv(j, i, q, e, n, a, s, r = 0, o) {
    for (var h = s; r <= h; h--) {
      for (var t = j; i >= t; t++) {
        for (var x = q; x <= e; x++) {
          var z = $w.ebi[t][x];
          if (z !== yc && S !== z[a]) {
            var B = z[a][h];
            if (B !== ug) {
              for (var C = 0; C < B.length; C++) {
                var D = B[C];
                if (D.mi) {
                  if (D.oli.mi() && D.oli.oi == 0) {
                    D.mi = false;
                  }
                  var E = la * (bk * (au - D.oli.hi) * 600);
                  var F = Math.sin(D.angle) * E;
                  var G = Math.cos(D.angle) * E;
                } else {
                  F = bd;
                  G = Ea;
                }
                for (var H = 0; ΔΔᐃᐃⵠⵠⵠ[h].fpi > H; H++) {
                  if (ck.Jbi[H].di !== ex) {
                    ck.Jbi[H].mi();
                    ck.Jbi[H].di = ex;
                  }
                  var I = ΔΔ[rt.xy][ck.time][ΔΔᐃᐃⵠⵠⵠ[h].Kbi[H].xE];
                  var J = -I.width * ck.Jbi[H].hi;
                  var K = -I.height * ck.Jbi[H].hi;
                  _l(ea, I, ax.Oi.x + D.x - J / 4 + F + ΔΔᐃᐃⵠⵠⵠ[h].Kbi[H].x, ax.Oi.y + D.y - K / Ud + G + ΔΔᐃᐃⵠⵠⵠ[h].Kbi[H].y, J / 2, K / hu);
                }
              }
            }
          }
        }
      }
    }
  }
  function nv(j, i, k, e, n, a, q, r, s) {
    if (r === lq) {
      r = 0;
    }
    for (var h = q; h >= r; h--) {
      for (var t = j; t <= i; t++) {
        for (var w = k; e >= w; w++) {
          if (s <= 0 || iv[(t + w * s) % iv.length] !== 1) {
            var x = $w.ebi[t][w];
            if (x !== undefined && x[a] !== Oh) {
              var z = x[a][h];
              if (z !== Nn) {
                for (var A = 0; z.length > A; A++) {
                  var B = z[A];
                  if (B.mi) {
                    if (B.oli.mi() && B.oli.oi == 0) {
                      B.mi = false;
                    }
                    var C = la * (bk * (1 - B.oli.hi) * 600);
                    var D = C * Math.sin(B.angle);
                    var E = Math.cos(B.angle) * C;
                  } else {
                    D = 0;
                    E = 0;
                  }
                  var F = ΔΔ[n][ck.time][h];
                  _l(ea, F, ax.Oi.x + B.x - F.width / (ⵠᐃΔΔⵠ * 2) + D, ax.Oi.y + B.y - F.height / (ⵠᐃΔΔⵠ * Cs) + E, F.width / ⵠᐃΔΔⵠ, F.height / ⵠᐃΔΔⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  function ov(b, i, j, e, k, a, l, n, p) {
    if (n === Ls) {
      n = 0;
    }
    for (var h = b; i >= h; h++) {
      for (var q = j; q <= e; q++) {
        var r = $w.ebi[h][q];
        if (r !== undefined && r[a] !== Ls) {
          var s = r[a];
          if (ug !== s) {
            if (s.scale === 1) {
              var t = ΔΔ[k][ck.time][s.Xbi];
              ea.save();
              ea.translate(ax.Oi.x + s.x, ax.Oi.y + s.y);
              ea.rotate(s.angle);
              _l(ea, t, -t.width / 4, -t.height / 4, t.width / 2, t.height / 2);
              ea.restore();
            } else if (s.scale === 3) {
              for (var v = Ea; v < s.Vbi.length; v++) {
                ea.save();
                ea.translate(ax.Oi.x + s.x, ax.Oi.y + s.y);
                ea.rotate(s.Vbi[v].angle);
                t = ΔΔ[k][ck.time][s.Vbi[v].Xbi];
                _l(ea, t, -t.width / Xg + s.Vbi[v].x, -t.height / nh + s.Vbi[v].y, t.width / 1.5, t.height / 1.5);
                ea.restore();
              }
            } else {
              t = ΔΔ[k][ck.time][s.Xbi];
              ea.save();
              ea.translate(ax.Oi.x + s.x, ax.Oi.y + s.y);
              ea.rotate(s.angle);
              _l(ea, t, -t.width / Yh, -t.height / 2, t.width, t.height);
              ea.restore();
            }
          }
        }
      }
    }
  }
  ⵠᐃΔΔⵠ = 1;
  ΔΔᐃᐃⵠⵠⵠ = [{
    fpi: ar,
    Kbi: [{
      x: -128,
      y: -Ji,
      xE: 0
    }, {
      x: -86,
      y: -Jn,
      xE: 1
    }, {
      y: -74,
      x: -60,
      xE: ih
    }, {
      y: -144,
      xE: Ng,
      x: -22
    }, {
      x: -58,
      xE: sh,
      y: 86
    }, {
      y: -30,
      xE: Vd,
      x: 3
    }, {
      y: -115,
      x: 65,
      xE: X
    }, {
      y: -50,
      xE: 0,
      x: 118
    }, {
      xE: Ic,
      x: 73,
      y: $o
    }, {
      y: 79,
      x: 67,
      xE: 0
    }]
  }, {
    fpi: Qm,
    Kbi: [{
      x: -45,
      xE: nj,
      y: -26
    }, {
      y: rq,
      xE: wh,
      x: -45
    }, {
      xE: 1,
      y: -60,
      x: mm
    }, {
      x: 52,
      y: -$h,
      xE: 1
    }, {
      x: 14,
      xE: 0,
      y: 45
    }]
  }, {
    fpi: nh,
    Kbi: [{
      x: -30,
      y: 3,
      xE: eu
    }, {
      x: 7,
      xE: 2,
      y: -38
    }, {
      xE: 2,
      x: 37,
      y: 5
    }]
  }, {
    fpi: 11,
    Kbi: [{
      xE: yo,
      x: -74,
      y: -87
    }, {
      x: -11,
      y: -gg,
      xE: 1
    }, {
      xE: 1,
      x: -99,
      y: 17
    }, {
      x: -66,
      y: 84,
      xE: 0
    }, {
      y: 123,
      x: -55,
      xE: 1
    }, {
      x: rf,
      xE: 2,
      y: 81
    }, {
      xE: 0,
      x: 52,
      y: 50
    }, {
      x: 138,
      y: sm,
      xE: 1
    }, {
      xE: 0,
      y: -28,
      x: 104
    }, {
      xE: 2,
      y: -56,
      x: 67
    }, {
      y: -112,
      x: 5,
      xE: 0
    }]
  }, {
    Kbi: [{
      x: -33,
      y: -66,
      xE: 2
    }, {
      xE: 0,
      x: -58,
      y: Sg
    }, {
      y: 44,
      x: -19,
      xE: dm
    }, {
      y: jg,
      xE: Ka,
      x: 44
    }, {
      y: -36,
      x: 53,
      xE: hu
    }, {
      xE: Oq,
      y: -62,
      x: xr
    }],
    fpi: Fa
  }, {
    Kbi: [{
      y: -25,
      x: -19,
      xE: ae
    }, {
      xE: eu,
      x: -29,
      y: 13
    }, {
      xE: 0,
      x: 12,
      y: 12
    }],
    fpi: 3
  }];
  var kv = 0;
  var pv = 0;
  var rv = 0;
  var sv = 0;
  function tv(b, c, d, e, f, a, g) {
    var i;
    var j = "#";
    j += (i = Math.floor(g * e + (ae - g) * b)) < 16 ? "0" + i.toString(we) : i.toString(zh);
    j += (i = Math.floor(f * g + c * (fi - g))) < 16 ? "0" + i.toString(zh) : i.toString(pq);
    return j += (i = Math.floor(a * g + (au - g) * d)) < 16 ? "0" + i.toString(Do) : i.toString(Tr);
  }
  function vv(b, c, d, e, f) {
    if (ck.transition && f == 1) {
      ea.globalAlpha = 1;
      _l(ea, ΔΔ[b][ck.time][c], d, e);
      ck.time = ck.time ? ke : fo;
      ea.globalAlpha = fo - ck.Zbi.hi;
      _l(ea, ΔΔ[b][ck.time][c], d, e);
      ck.time = ck.time ? 0 : Ps;
      ea.globalAlpha = 1;
    } else {
      ea.globalAlpha = f;
      _l(ea, ΔΔ[b][ck.time][c], d, e);
      ea.globalAlpha = yd;
    }
  }
  function yv(j, i, q, e, n, a) {
    var s = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.y + j + 710;
    var g = Math.max(ax.Oi.x + i, 0);
    var c = Math.max(-ax.Oi.x + sa - q - 100, 0);
    var d = g;
    var m = sa - g - c;
    if (a) {
      var t = e.xE(s);
    } else {
      t = s.r;
    }
    var u = h + iw.evi;
    var F = u;
    var l = d;
    var b = -t.x + iw.nvi;
    var v = m;
    var y = u += -t.x + iw.nvi + 2;
    if (a) {
      t = e.xE(r);
    } else {
      t = r.r;
    }
    var k = h - iw.avi - u - t.x;
    var G = u;
    var w = d;
    var H = k;
    var B = m;
    var D = (u += k + tm) - Yh;
    if (a) {
      t = e.xE(o);
    } else {
      t = o.r;
    }
    if (u + (k = h - iw.rvi - u - t.x) < D) {
      var E = true;
      var J = u;
      var z = d;
      var x = k;
      var K = m;
      var L = u += k + 2;
    } else {
      E = false;
      u = D;
      L = -Ps;
    }
    k = h - iw.ovi - u;
    if (ck.transition) {
      var M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(l, F, v, b);
    if (a) {
      if (ck.transition) {
        M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 70, 76, 42, 139, 155, M);
      } else {
        ea.fillStyle = rt.ht[ck.time];
      }
    } else if (ck.transition) {
      M = ck.time ? yd - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(w, G, B, H);
    if (E) {
      if (a) {
        if (ck.transition) {
          M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
          ea.fillStyle = tv(17, 94, 96, 169, 214, 211, M);
        } else {
          ea.fillStyle = rt.gt[ck.time];
        }
      } else if (ck.transition) {
        M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
      } else {
        ea.fillStyle = rt.ot[ck.time];
      }
      ea.fillRect(z, J, K, x);
    }
    if (ok.abi && a) {
      e.hvi(D, L, y, h, -ax.Oi.x + l, -ax.Oi.x + l + v);
    }
  }
  function Cv(a, b) {
    if (ck.transition) {
      ea.globalAlpha = fi;
      a._fi(b);
      ck.time = ck.time ? 0 : fo;
      ea.globalAlpha = 1 - ck.Zbi.hi;
      a._fi(b);
      ck.time = ck.time ? 0 : Ko;
      ea.globalAlpha = Lh;
    } else {
      a._fi(b);
    }
  }
  function zv(a, b, c, d) {
    if (ck.transition) {
      ea.globalAlpha = 1;
      _l(ea, ΔΔ[a][ck.time], c, d);
      ck.time = ck.time ? 0 : 1;
      ea.globalAlpha = 1 - ck.Zbi.hi;
      _l(ea, ΔΔ[a][ck.time], c, d);
      ck.time = ck.time ? 0 : Jf;
      ea.globalAlpha = Jf;
    } else {
      _l(ea, b, c, d);
    }
  }
  function xv(j, i, q, e, n, a) {
    var s = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.x + j + 820;
    var g = Math.max(ax.Oi.y + i, Oq);
    var c = Math.max(-ax.Oi.y + oa - q - io, Ou);
    var d = g;
    var m = oa - g - c;
    if (a) {
      var t = e.xE(s);
    } else {
      t = s.r;
    }
    var u = h + iw.evi;
    var x = u;
    var l = d;
    var b = -t.x + iw.nvi;
    var v = m;
    var y = u += -t.x + iw.nvi + 2;
    if (a) {
      t = e.xE(r);
    } else {
      t = r.r;
    }
    var k = h - iw.avi - u - t.x;
    var G = u;
    var w = d;
    var H = k;
    var B = m;
    var D = (u += k + 2) - 2;
    if (a) {
      t = e.xE(o);
    } else {
      t = o.r;
    }
    if (D > u + (k = h - iw.rvi - u - t.x)) {
      var E = true;
      var J = u;
      var K = d;
      var L = k;
      var M = m;
      var I = u += k + z;
    } else {
      E = Qc;
      u = D;
      I = -Ko;
    }
    k = h - iw.ovi - u;
    if (ck.transition) {
      var N = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(x, l, b, v);
    if (a) {
      if (ck.transition) {
        N = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 70, 76, 42, 139, 155, N);
      } else {
        ea.fillStyle = rt.ht[ck.time];
      }
    } else if (ck.transition) {
      N = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(G, w, H, B);
    if (E) {
      if (a) {
        if (ck.transition) {
          N = ck.time ? Ej - ck.Zbi.hi : ck.Zbi.hi;
          ea.fillStyle = tv(17, 94, 96, 169, 214, 211, N);
        } else {
          ea.fillStyle = rt.gt[ck.time];
        }
      } else if (ck.transition) {
        N = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
      } else {
        ea.fillStyle = rt.ot[ck.time];
      }
      ea.fillRect(J, K, L, M);
    }
    if (ok.abi && a) {
      e.gvi(D, I, y, h, -ax.Oi.y + l, -ax.Oi.y + l + v);
    }
  }
  function Dv(j, i, k, e, n, a) {
    var q = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.x + j - 700;
    var g = Math.max(ax.Oi.y + i, Ka);
    var c = Math.max(-ax.Oi.y + oa - k - 100, Cm);
    var d = g;
    var m = oa - g - c;
    if (a) {
      var s = e.xE(q).x;
    } else {
      s = q.r.x;
    }
    var t = h + iw.evi;
    iw.nvi;
    t += s + iw.nvi - Cs;
    if (a) {
      s = e.xE(r).x;
    } else {
      s = r.r.x;
    }
    var u = h + iw.avi - t + s;
    var w = (t += u - 2) - 2;
    if (a) {
      s = e.xE(o).x;
    } else {
      s = o.r.x;
    }
    if (w < t + (u = h + iw.rvi - t + s) - 3) {
      t += u - 2;
    } else {
      t = w;
    }
    u = h + iw.ovi - t;
    if (a > 0 && n.cvi === 1) {
      if (ck.transition) {
        var b = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 77, 72, 252, 239, 187, b);
      } else {
        ea.fillStyle = rt.et[ck.time];
      }
      ea.fillRect(t, d, u, m);
    } else {
      if (ck.transition) {
        b = ck.time ? Lo - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(n.lfi[0], n.lfi[ae], n.lfi[2], n.pfi[bd], n.pfi[ja], n.pfi[2], b);
      } else {
        ea.fillStyle = n.mvi[ck.time];
      }
      ea.fillRect(t, d, u, m);
    }
  }
  function Ev(a, b) {
    if (ck.transition) {
      ea.globalAlpha = Lo;
      a.Ffi(b);
      ck.time = ck.time ? du : 1;
      ea.globalAlpha = hf - ck.Zbi.hi;
      a.Ffi(b);
      ck.time = ck.time ? Nf : wg;
      ea.globalAlpha = 1;
    } else {
      a.Ffi(b);
    }
  }
  function Iv(a, b, c) {
    if (ck.transition) {
      ea.globalAlpha = Ko;
      a.Sfi(b, c);
      ck.time = ck.time ? ke : Mc;
      ea.globalAlpha = 1 - ck.Zbi.hi;
      a.Sfi(b, c);
      ck.time = ck.time ? Ng : Ic;
      ea.globalAlpha = hf;
    } else {
      a.Sfi(b, c);
    }
  }
  function Qv() {
    ea.globalAlpha = Ps;
    if (ck.transition) {
      var a = ck.Zbi.mi();
    }
    ck.uvi(-ax.Oi.x, -ax.Oi.y);
    kv = Math.max(Math.floor(-ax.Oi.x / ck.fvi) - 5, 0);
    pv = Math.min(Math.floor((-ax.Oi.x + ax.Oi.w) / ck.fvi) + Jn, ck.rfi - Ps);
    rv = Math.max(Math.floor(-ax.Oi.y / ck.pvi) - fa, Oq);
    sv = Math.min(Math.floor((-ax.Oi.y + ax.Oi.K) / ck.pvi) + E, ck.ofi - Ps);
    (function () {
      for (var b = ck.hfi.length - 1; b >= Ng; b--) {
        var j = ck.hfi[b];
        if (ck.bvi === j.xE) {
          var k = ck.vvi[j.xE];
          if (j.x1 - 230 - sa <= -ax.Oi.x && -ax.Oi.x <= j.x2 + 330 && j.y1 - oa <= -ax.Oi.y && -ax.Oi.y <= j.y2 + 100) {
            var l = j.x2;
            if (ck.bvi !== j.xE) {
              l -= 610;
            }
            var p = j.x1;
            if (ck.bvi !== j.xE) {
              p += 610;
            }
            var q = j.y2;
            if (ck.bvi !== j.xE) {
              q -= 610;
            }
            var v = j.y1;
            if (ck.bvi !== j.xE) {
              v += 610;
            }
            if (ck.transition) {
              var w = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
              ea.fillStyle = tv(k.lfi[0], k.lfi[wg], k.lfi[mj], k.pfi[Ea], k.pfi[fo], k.pfi[Lo], w);
            } else {
              ea.fillStyle = k.mvi[ck.time];
            }
            var x = Math.max(ax.Oi.x + p - 2 - 230, 0);
            var y = Math.max(-ax.Oi.x + sa - l - 330 - En, 0);
            var A = Math.max(ax.Oi.y + v - 2, Sh);
            var B = Math.max(-ax.Oi.y + oa - q - 100 - Gi, 0);
            ea.beginPath();
            ea.fillRect(x, A, sa - y - x, oa - A - B);
          }
        }
      }
      for (b = ck.hfi.length - Lo; b >= 0; b--) {
        if ((j = ck.hfi[b]).xE !== ck.bvi) {
          l = j.x2;
          if (ck.bvi !== j.xE) {
            l -= 400;
          }
          p = j.x1;
          if (j.xE !== ck.bvi) {
            p += 400;
          }
          q = j.y2;
          if (j.xE !== ck.bvi) {
            q -= 300;
          }
          v = j.y1;
          if (ck.bvi !== j.xE) {
            v += 300;
          }
          if (Ng === (j.hi & iw.yvi) && -ax.Oi.x >= l - sa + 120 && -ax.Oi.x <= l + 820 && -ax.Oi.y >= v + 88 - oa && q + 50 >= -ax.Oi.y) {
            Rv(l, v + 88, q - 88, ax.kvi[0], ck.vvi[j.xE], j.hi & iw.yvi);
            xv(l, v + 88, q - 88, ax.kvi[0], ck.vvi[j.xE], j.hi & iw.yvi);
          }
          if (!(j.hi & iw.Avi) && p - sa - 700 <= -ax.Oi.x && p - 20 >= -ax.Oi.x && -ax.Oi.y >= v + 88 - oa && -ax.Oi.y <= q + 50) {
            Dv(p, v + 88, q - 88, ax.kvi[fo], ck.vvi[j.xE], j.hi & iw.Avi);
            Nv(p, v + 88, q - 88, ax.kvi[Lo], ck.vvi[j.xE], j.hi & iw.Avi);
          }
          if ((j.hi & iw.wvi) === Jj && p - 235 - sa <= -ax.Oi.x && -ax.Oi.x <= l + 350 && q - oa - 275 <= -ax.Oi.y && -ax.Oi.y <= q + 490) {
            Sv(q - 230, p - 230, l + 230, ax.kvi[2], ck.vvi[j.xE], j.hi & iw.wvi);
            yv(q - 230, p - 230, l + 230, ax.kvi[2], ck.vvi[j.xE], j.hi & iw.wvi);
          }
          if ((j.hi & iw.Mvi) === sh && p - 235 - sa <= -ax.Oi.x && -ax.Oi.x <= l + 350 && v - oa - 390 <= -ax.Oi.y && v + 315 >= -ax.Oi.y) {
            Lv(v + 310, p - 230, l + 230, ax.kvi[3], ck.vvi[j.xE], j.hi & iw.Mvi);
            jv(v + 310, p - 230, l + 230, ax.kvi[fa], ck.vvi[j.xE], j.hi & iw.Mvi);
          }
        }
      }
      for (b = ck.hfi.length - 1; b >= Ea; b--) {
        j = ck.hfi[b];
        if (ck.bvi !== j.xE) {
          l = j.x2;
          if (ck.bvi !== j.xE) {
            l -= 400;
          }
          p = j.x1;
          if (j.xE !== ck.bvi) {
            p += 400;
          }
          q = j.y2;
          if (ck.bvi !== j.xE) {
            q -= 300;
          }
          v = j.y1;
          if (j.xE !== ck.bvi) {
            v += 300;
          }
          if (j.hi & iw.yvi && -ax.Oi.x >= l - sa + 120 && -ax.Oi.x <= l + 820 && -ax.Oi.y >= v + 88 - oa && q + 50 >= -ax.Oi.y) {
            Rv(l, v + 88, q - 88, ax.kvi[0], ck.vvi[j.xE], j.hi & iw.yvi);
          }
          if (j.hi & iw.Avi && -ax.Oi.x >= p - sa - 700 && p - 20 >= -ax.Oi.x && v + 88 - oa <= -ax.Oi.y && -ax.Oi.y <= q + 50) {
            Dv(p, v + 88, q - 88, ax.kvi[1], ck.vvi[j.xE], j.hi & iw.Avi);
          }
          if (j.hi & iw.wvi && -ax.Oi.x >= p - 235 - sa && l + 350 >= -ax.Oi.x && q - oa - 275 <= -ax.Oi.y && -ax.Oi.y <= q + 490) {
            Sv(q - 230, p - 230, l + 230, ax.kvi[2], ck.vvi[j.xE], j.hi & iw.wvi);
          }
          if (Nf !== (j.hi & iw.Mvi) && -ax.Oi.x >= p - 235 - sa && l + 350 >= -ax.Oi.x && v - oa - 390 <= -ax.Oi.y && -ax.Oi.y <= v + 315) {
            Lv(v + 310, p - 230, l + 230, ax.kvi[3], ck.vvi[j.xE], j.hi & iw.Mvi);
          }
        }
      }
      for (b = ck.hfi.length - Lh; xn <= b; b--) {
        j = ck.hfi[b];
        if (ck.bvi !== j.xE) {
          k = ck.vvi[j.xE];
          if (-ax.Oi.x >= j.x1 - 230 - sa && j.x2 + 330 >= -ax.Oi.x && -ax.Oi.y >= j.y1 - oa && -ax.Oi.y <= j.y2 + 100) {
            l = j.x2;
            if (ck.bvi !== j.xE) {
              if (so === (j.hi & iw.yvi)) {
                l -= 414;
              } else {
                l -= 610;
              }
            }
            p = j.x1;
            if (ck.bvi !== j.xE) {
              if (j.hi & iw.Avi) {
                p += 610;
              } else {
                p += 414;
              }
            }
            q = j.y2;
            if (j.xE !== ck.bvi) {
              if (j.hi & iw.wvi) {
                q -= 610;
              } else {
                q -= 414;
              }
            }
            v = j.y1;
            if (j.xE !== ck.bvi) {
              if (sh === (j.hi & iw.Mvi)) {
                v += 414;
              } else {
                v += 610;
              }
            }
            if (ck.transition) {
              w = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
              ea.fillStyle = tv(k.lfi[Nf], k.lfi[wg], k.lfi[2], k.pfi[0], k.pfi[Lo], k.pfi[2], w);
            } else {
              ea.fillStyle = k.mvi[ck.time];
            }
            x = Math.max(ax.Oi.x + p - 2 - 230, Cm);
            y = Math.max(-ax.Oi.x + sa - l - 330 - 2, 0);
            A = Math.max(ax.Oi.y + v - Vn, 0);
            B = Math.max(-ax.Oi.y + oa - q - Re - z, Vd);
            ea.beginPath();
            ea.fillRect(x, A, sa - y - x, oa - A - B);
          }
        }
      }
      if (ok.abi) {
        Hv(fv, rv, sv, kv, pv, rt.Of, "isl", 2);
        Hv(fv, rv, sv, kv, pv, rt.Uf, "isl", lr);
      }
      Hv(nv, rv, sv, kv, pv, rt.Nf, "isl", Te);
      if (ok.abi) {
        Hv(ov, rv, sv, kv, pv, rt.ur, "de");
      }
      var C = ck.Kfi[lw.$E];
      for (b = du; C.length > b; b++) {
        for (var m = C[b], D = 0; D < m.Bvi.length; D++) {
          Fv(m.Bvi[D]);
        }
      }
      if ((sb += bk * 40) > 60) {
        sb -= 60;
      }
      Hv(Ib, rv, sv, kv, pv, rt.sA, "r", Ou);
      b = 0;
      for (; ck.hfi.length > b; b++) {
        if ((j = ck.hfi[b]).xE !== ck.bvi) {
          l = j.x2;
          if (ck.bvi !== j.xE) {
            l -= 400;
          }
          p = j.x1;
          if (j.xE !== ck.bvi) {
            p += 400;
          }
          q = j.y2;
          if (j.xE !== ck.bvi) {
            q -= 300;
          }
          v = j.y1;
          if (j.xE !== ck.bvi) {
            v += 300;
          }
          if (nj < (j.hi & iw.yvi) && l - sa + 120 <= -ax.Oi.x && -ax.Oi.x <= l + 820 && v + 88 - oa <= -ax.Oi.y && -ax.Oi.y <= q + 50) {
            xv(l, v + 88, q - 88, ax.kvi[0], ck.vvi[j.xE], j.hi & iw.yvi);
          }
          if ((j.hi & iw.Avi) > Gc && p - sa - 700 <= -ax.Oi.x && p - 20 >= -ax.Oi.x && -ax.Oi.y >= v + 88 - oa && q + 50 >= -ax.Oi.y) {
            Nv(p, v + 88, q - 88, ax.kvi[Mc], ck.vvi[j.xE], j.hi & iw.Avi);
          }
          if ((j.hi & iw.wvi) > 0 && -ax.Oi.x >= p - 235 - sa && l + 350 >= -ax.Oi.x && q - oa - 275 <= -ax.Oi.y && q + 490 >= -ax.Oi.y) {
            yv(q - 230, p - 230, l + 230, ax.kvi[En], ck.vvi[j.xE], j.hi & iw.wvi);
          }
          if ((j.hi & iw.Mvi) > 0 && p - 235 - sa <= -ax.Oi.x && -ax.Oi.x <= l + 350 && -ax.Oi.y >= v - oa - 390 && v + 315 >= -ax.Oi.y) {
            jv(v + 310, p - 230, l + 230, ax.kvi[Ie], ck.vvi[j.xE], j.hi & iw.Mvi);
          }
        }
      }
    })();
    (function () {
      var k = kv;
      var i = pv;
      var t = rv;
      var e = sv;
      if (ok.abi) {
        Hv(nv, t, e, k, i, rt.Du, "l", 2);
      }
      if (ok.abi) {
        Hv(nv, t, e, k, i, rt.lt, "la", 5);
      }
      Hv(nv, t, e, k, i, rt.Es, "la", 5);
      Hv(fv, t, e, k, i, rt.Bu, "l", Cg);
      if (ok.abi) {
        Hv(mv, t, e, k, i, rt.Es, "la", lh);
        Hv(fv, t, e, k, i, rt.Mu, "l", rd);
      }
      Hv(nv, t, e, k, i, rt._A, "ma", eh);
      for (var n = ck.Kfi[lw.Dvi], aa = nj; n.length > aa; aa++) {
        n[aa].Evi();
      }
      var ba = ck.Kfi[lw.$E];
      for (aa = Nf; ba.length > aa; aa++) {
        for (var ca = ba[aa], da = 0; ca.Cvi.length > da; da++) {
          Gv(ca.Cvi[da]);
        }
      }
      var fa = ck.Kfi[lw.$n];
      for (aa = 0; aa < fa.length; aa++) {
        Iv(fa[aa], rt.$n);
        fa[aa].zvi(fa[aa].info);
      }
      var g = ck.Kfi[lw.TD];
      for (aa = 0; g.length > aa; aa++) {
        if (g[aa].action == wc) {
          Cv(g[aa]);
        }
      }
      var ha = ck.Kfi[lw.oo];
      for (aa = Js; aa < ha.length; aa++) {
        Cv(ha[aa], rt.qn);
      }
      var ia = ck.Kfi[lw.Da];
      for (aa = sh; aa < ia.length; aa++) {
        Cv(ia[aa]);
      }
      var ja = ck.Kfi[lw.Ea];
      for (aa = 0; ja.length > aa; aa++) {
        Cv(ja[aa]);
      }
      var ka = ck.Kfi[lw.PD];
      for (aa = 0; aa < ka.length; aa++) {
        Cv(ka[aa], rt.On);
      }
      var f = ck.Kfi[lw.ss];
      for (aa = 0; f.length > aa; aa++) {
        Iv(f[aa]);
      }
      var p = ck.Kfi[lw.pa];
      for (aa = 0; aa < p.length; aa++) {
        Iv(p[aa], rt.pa);
      }
      var l = ck.Kfi[lw.wr];
      for (aa = 0; aa < l.length; aa++) {
        Cv(l[aa]);
      }
      l = ck.Kfi[lw.qD];
      aa = sh;
      for (; aa < l.length; aa++) {
        Cv(l[aa]);
      }
      l = ck.Kfi[lw.wr];
      aa = bd;
      for (; aa < l.length; aa++) {
        Ev(l[aa]);
      }
      var la = ck.Kfi[lw.GD];
      for (aa = du; aa < la.length; aa++) {
        if (!(la[aa].info & 15) || la[aa].info === 10) {
          Iv(la[aa]);
        }
      }
      var ma = ck.Kfi[lw.WD];
      for (aa = Sh; ma.length > aa; aa++) {
        if (!(ma[aa].info & 15) || ue === ma[aa].info) {
          Iv(ma[aa]);
        }
      }
      var na = ck.Kfi[lw.ND];
      for (aa = 0; aa < na.length; aa++) {
        if (!(na[aa].info & 15) || Ki === na[aa].info) {
          Iv(na[aa]);
        }
      }
      var oa = ck.Kfi[lw.qo];
      for (aa = so; aa < oa.length; aa++) {
        Iv(oa[aa], rt.ra);
      }
      var pa = ck.Kfi[lw.RD];
      for (aa = 0; aa < pa.length; aa++) {
        if (Sh === (pa[aa].info & 15) || mm === pa[aa].info) {
          Iv(pa[aa]);
        }
      }
      var qa = ck.Kfi[lw.LD];
      for (aa = so; aa < qa.length; aa++) {
        if (!(qa[aa].info & 15) || qa[aa].info === gg) {
          Iv(qa[aa]);
        }
      }
      var ra = ck.Kfi[lw.jD];
      for (aa = 0; aa < ra.length; aa++) {
        if (!(ra[aa].info & 15) || ra[aa].info === 10) {
          Iv(ra[aa]);
        }
      }
      oa = ck.Kfi[lw.ra];
      aa = Js;
      for (; aa < oa.length; aa++) {
        Iv(oa[aa]);
      }
      var sa = ck.Kfi[lw.Ar];
      for (aa = bd; sa.length > aa; aa++) {
        Iv(sa[aa], rt.Ar, rt.Ep);
      }
      var E = ck.Kfi[lw.Dp];
      for (aa = Ea; aa < E.length; aa++) {
        Iv(E[aa], rt.Ar, rt.Ep);
      }
      var C = ck.Kfi[lw.Ub];
      for (aa = 0; aa < C.length; aa++) {
        Iv(C[aa], rt.Ub, rt.Xb);
      }
      var z = ck.Kfi[lw.Ps];
      for (aa = Oq; z.length > aa; aa++) {
        if (z[aa].info & 1) {
          Iv(z[aa], rt.eh);
        }
      }
      z = ck.Kfi[lw.Ts];
      aa = Ka;
      for (; z.length > aa; aa++) {
        if (z[aa].info & Lo) {
          Iv(z[aa], rt.Wh);
        }
      }
      z = ck.Kfi[lw.js];
      aa = Cm;
      for (; z.length > aa; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.Uh);
        }
      }
      z = ck.Kfi[lw.Rs];
      aa = Gc;
      for (; aa < z.length; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.Jh);
        }
      }
      z = ck.Kfi[lw.Ls];
      aa = 0;
      for (; aa < z.length; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.dd);
        }
      }
      z = ck.Kfi[lw.Ns];
      aa = Cm;
      for (; aa < z.length; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.Uh);
        }
      }
      z = ck.Kfi[lw.UD];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (z[aa].info & Ko) {
          Iv(z[aa], rt.eh);
        }
      }
      z = ck.Kfi[lw.OD];
      aa = 0;
      for (; aa < z.length; aa++) {
        if (z[aa].info & 1) {
          Iv(z[aa], rt.Wh);
        }
      }
      z = ck.Kfi[lw.YD];
      aa = 0;
      for (; aa < z.length; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.Uh);
        }
      }
      z = ck.Kfi[lw.JD];
      aa = Gc;
      for (; z.length > aa; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.Jh);
        }
      }
      z = ck.Kfi[lw.KD];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.dd);
        }
      }
      z = ck.Kfi[lw.qs];
      aa = sh;
      for (; z.length > aa; aa++) {
        if (z[aa].info) {
          Iv(z[aa], rt.Uh);
        }
      }
      var ta = ck.Kfi[lw.Tr];
      for (aa = 0; aa < ta.length; aa++) {
        Iv(ta[aa], rt.Tr, rt.Wo);
      }
      var Q = ck.Kfi[lw.As];
      for (aa = 0; aa < Q.length; aa++) {
        Iv(Q[aa], rt.As);
      }
      n = ck.Kfi[lw.Dvi];
      aa = Oq;
      for (; n.length > aa; aa++) {
        Iv(n[aa], rt.Dvi, rt.xvi);
      }
      var ua = ck.Kfi[lw.vr];
      for (aa = xn; aa < ua.length; aa++) {
        if (ua[aa].gbi === 0) {
          Iv(ua[aa]);
        }
      }
      ba = ck.Kfi[lw.$E];
      aa = 0;
      for (; aa < ba.length; aa++) {
        ca = ba[aa];
        if ($r.tr !== ba[aa].fbi && $r.er !== ba[aa].fbi && $r.ar !== ba[aa].fbi && ba[aa].fbi !== $r.sr && ba[aa].fbi !== $r.yn) {
          if (so === ca.Qvi) {
            if (ca.Svi > 0.001) {
              ca.Svi = ⵠⵠⵠⲆ.Si(ca.Svi, 0, 0.018);
              var va = Ic + Math.min(1, Math.max(ca.Svi, 0) / Qg) * 0.18;
              ea.save();
              ea.scale(va, va);
              ax.Oi.x /= va;
              ax.Oi.y /= va;
              ca.x /= va;
              ca.y /= va;
              ca.r.x /= va;
              ca.r.y /= va;
              ca.Ivi();
              ca.Sfi();
              ax.Oi.x *= va;
              ax.Oi.y *= va;
              ca.x *= va;
              ca.y *= va;
              ca.r.x *= va;
              ca.r.y *= va;
              ea.restore();
            } else {
              ca.gbi = Ou;
              ca.Ivi();
              ca.Sfi();
            }
          }
        } else if (ca.lbi <= 180) {
          ea.save();
          va = Mc + Math.min(1, Math.max(ca.vbi - 30, 0) / 180) * 0.35;
          ea.scale(va, va);
          ax.Oi.x /= va;
          ax.Oi.y /= va;
          ca.x /= va;
          ca.y /= va;
          ca.r.x /= va;
          ca.r.y /= va;
          ca.gbi = 0;
          ca.Ivi();
          ca.Sfi();
          ax.Oi.x *= va;
          ax.Oi.y *= va;
          ca.x *= va;
          ca.y *= va;
          ca.r.x *= va;
          ca.r.y *= va;
          ea.restore();
        }
      }
      Q = ck.Kfi[lw.As];
      aa = 0;
      for (; Q.length > aa; aa++) {
        Iv(Q[aa], rt.Xv);
      }
      var wa = ck.Kfi[lw.Bv];
      for (aa = so; wa.length > aa; aa++) {
        Iv(wa[aa]);
      }
      var F = ck.Kfi[lw.Fg];
      for (aa = Js; aa < F.length; aa++) {
        Iv(F[aa], rt.Fg, rt.Bc);
      }
      var P = ck.Kfi[lw.MA];
      for (aa = 0; aa < P.length; aa++) {
        Iv(P[aa]);
      }
      var T = ck.Kfi[lw.yo];
      for (aa = 0; aa < T.length; aa++) {
        Iv(T[aa], rt.yo, rt.Oo);
      }
      var j = ck.Kfi[lw.tr];
      for (aa = 0; j.length > aa; aa++) {
        Iv(j[aa], rt.tr, rt.ew);
      }
      var R = ck.Kfi[lw.er];
      for (aa = Gc; aa < R.length; aa++) {
        Iv(R[aa], rt.er, rt.lw);
      }
      la = ck.Kfi[lw.GD];
      aa = du;
      for (; aa < la.length; aa++) {
        if (qh !== (la[aa].info & 15) && la[aa].info !== hg) {
          Iv(la[aa]);
        }
      }
      ma = ck.Kfi[lw.WD];
      aa = 0;
      for (; aa < ma.length; aa++) {
        if (sh !== (ma[aa].info & 15) && ma[aa].info !== 10) {
          Iv(ma[aa]);
        }
      }
      na = ck.Kfi[lw._vi];
      aa = Gc;
      for (; na.length > aa; aa++) {
        Iv(na[aa], rt.gr);
      }
      na = ck.Kfi[lw.ND];
      aa = so;
      for (; aa < na.length; aa++) {
        if (na[aa].info & 15 && na[aa].info !== jn) {
          Iv(na[aa]);
        }
      }
      l = ck.Kfi[lw.qD];
      aa = qh;
      for (; l.length > aa; aa++) {
        Ev(l[aa]);
      }
      pa = ck.Kfi[lw.RD];
      aa = Oq;
      for (; pa.length > aa; aa++) {
        if (Jj !== (pa[aa].info & 15) && pa[aa].info !== 10) {
          Iv(pa[aa]);
        }
      }
      qa = ck.Kfi[lw.LD];
      aa = 0;
      for (; qa.length > aa; aa++) {
        if (du !== (qa[aa].info & 15) && qa[aa].info !== 10) {
          Iv(qa[aa]);
        }
      }
      ra = ck.Kfi[lw.jD];
      aa = 0;
      for (; aa < ra.length; aa++) {
        if (ra[aa].info & 15 && ra[aa].info !== hg) {
          Iv(ra[aa]);
        }
      }
      var L = ck.Kfi[lw.Wf];
      for (aa = 0; aa < L.length; aa++) {
        Iv(L[aa], rt.Wf, rt.Jf);
      }
      var G = ck.Kfi[lw.qu];
      for (aa = Nf; aa < G.length; aa++) {
        Iv(G[aa], rt.qu, rt.Rf);
      }
      var q = ck.Kfi[lw.Bf];
      for (aa = Ou; q.length > aa; aa++) {
        Iv(q[aa], rt.Bf, rt.Lf);
      }
      var W = ck.Kfi[lw.Ir];
      for (aa = 0; aa < W.length; aa++) {
        Iv(W[aa], rt.Ir, rt.$o);
      }
      var N = ck.Kfi[lw.fA];
      for (aa = 0; aa < N.length; aa++) {
        Iv(N[aa], rt.fA, rt.pA);
      }
      var H = ck.Kfi[lw.oc];
      for (aa = Jj; aa < H.length; aa++) {
        Iv(H[aa], rt.oc, rt.Dc);
      }
      var U = ck.Kfi[lw.yr];
      for (aa = 0; aa < U.length; aa++) {
        Iv(U[aa]);
      }
      var O = ck.Kfi[lw.mE];
      for (aa = xn; O.length > aa; aa++) {
        Iv(O[aa], rt.ty, rt.ey);
      }
      var Y = ck.Kfi[lw.ir];
      for (aa = Vd; aa < Y.length; aa++) {
        Iv(Y[aa]);
      }
      var J = ck.Kfi[lw.FB];
      for (aa = 0; aa < J.length; aa++) {
        Iv(J[aa], rt.FB, rt.PB);
      }
      var K = ck.Kfi[lw.dc];
      for (aa = 0; aa < K.length; aa++) {
        if (K[aa].scale === 1) {
          Iv(K[aa], rt.dc, rt.Ec);
        }
      }
      K = ck.Kfi[lw.mc];
      aa = Ka;
      for (; K.length > aa; aa++) {
        if (fi === K[aa].scale) {
          Iv(K[aa], rt.mc, rt.Cc);
        }
      }
      var xa = ck.Kfi[lw.qa];
      for (aa = 0; xa.length > aa; aa++) {
        Iv(xa[aa]);
      }
      var V = ck.Kfi[lw.Wn];
      for (aa = 0; aa < V.length; aa++) {
        Iv(V[aa], rt.Wn);
      }
      g = ck.Kfi[lw.TD];
      aa = 0;
      for (; aa < g.length; aa++) {
        Iv(g[aa]);
      }
      var Z = ck.Kfi[lw.ZD];
      for (aa = Vd; Z.length > aa; aa++) {
        Iv(Z[aa]);
      }
      z = ck.Kfi[lw.UD];
      aa = 0;
      for (; aa < z.length; aa++) {
        if (!(z[aa].info & 1)) {
          Iv(z[aa], rt.Ga);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      z = ck.Kfi[lw.OD];
      aa = 0;
      for (; aa < z.length; aa++) {
        if (!(z[aa].info & 1)) {
          Iv(z[aa], rt.Ua);
        }
        z[aa].zvi(z[aa].info >> wg);
      }
      z = ck.Kfi[lw.YD];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & 1)) {
          Iv(z[aa], rt.Oa);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      z = ck.Kfi[lw.JD];
      aa = so;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & Ej)) {
          Iv(z[aa], rt.Ya);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      z = ck.Kfi[lw.KD];
      aa = Jj;
      for (; aa < z.length; aa++) {
        if (!(z[aa].info & hf)) {
          Iv(z[aa], rt.Zn);
        }
        z[aa].zvi(z[aa].info >> au);
      }
      z = ck.Kfi[lw.qs];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & Ic)) {
          Iv(z[aa], rt.qs);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      z = ck.Kfi[lw.Ps];
      aa = Ea;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & 1)) {
          Iv(z[aa], rt.Ps);
        }
        z[aa].zvi(z[aa].info >> au);
      }
      z = ck.Kfi[lw.Ts];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & 1)) {
          Iv(z[aa], rt.Ts);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      z = ck.Kfi[lw.js];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & Ic)) {
          Iv(z[aa], rt.js);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      z = ck.Kfi[lw.Rs];
      aa = 0;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & Mc)) {
          Iv(z[aa], rt.Rs);
        }
        z[aa].zvi(z[aa].info >> fi);
      }
      z = ck.Kfi[lw.Ls];
      aa = qh;
      for (; z.length > aa; aa++) {
        if (!(z[aa].info & lt)) {
          Iv(z[aa], rt.Ls);
        }
        z[aa].zvi(z[aa].info >> fn);
      }
      z = ck.Kfi[lw.Ns];
      aa = 0;
      for (; aa < z.length; aa++) {
        if (!(z[aa].info & lt)) {
          Iv(z[aa], rt.Ns);
        }
        z[aa].zvi(z[aa].info >> 1);
      }
      var ya = ck.Kfi[lw.Ta];
      for (aa = 0; aa < ya.length; aa++) {
        Iv(ya[aa], rt.Ta);
        ya[aa].zvi(ya[aa].info);
      }
      ya = ck.Kfi[lw.ja];
      aa = 0;
      for (; aa < ya.length; aa++) {
        Iv(ya[aa], rt.ja);
        ya[aa].zvi(ya[aa].info);
      }
      ya = ck.Kfi[lw.Ra];
      aa = 0;
      for (; ya.length > aa; aa++) {
        Iv(ya[aa], rt.Ra);
        ya[aa].zvi(ya[aa].info);
      }
      ya = ck.Kfi[lw.La];
      aa = nj;
      for (; aa < ya.length; aa++) {
        Iv(ya[aa], rt.La);
        ya[aa].zvi(ya[aa].info);
      }
      ya = ck.Kfi[lw.Xn];
      aa = 0;
      for (; ya.length > aa; aa++) {
        Iv(ya[aa], rt.Xn);
        ya[aa].zvi(ya[aa].info);
      }
      ya = ck.Kfi[lw.Gs];
      aa = ke;
      for (; ya.length > aa; aa++) {
        Iv(ya[aa], rt.Gs);
        ya[aa].zvi(ya[aa].info);
      }
      var za = ck.Kfi[lw.Fa];
      for (aa = 0; aa < za.length; aa++) {
        Iv(za[aa], rt.Fa);
        za[aa].zvi(za[aa].info);
      }
      za = ck.Kfi[lw.Wa];
      aa = 0;
      for (; za.length > aa; aa++) {
        Iv(za[aa], rt.Wa);
        za[aa].zvi(za[aa].info);
      }
      za = ck.Kfi[lw.Na];
      aa = 0;
      for (; za.length > aa; aa++) {
        Iv(za[aa], rt.Na);
        za[aa].zvi(za[aa].info);
      }
      za = ck.Kfi[lw.Ha];
      aa = xn;
      for (; za.length > aa; aa++) {
        Iv(za[aa], rt.Ha);
        za[aa].zvi(za[aa].info);
      }
      za = ck.Kfi[lw.Vn];
      aa = 0;
      for (; aa < za.length; aa++) {
        Iv(za[aa], rt.Vn);
        za[aa].zvi(za[aa].info);
      }
      za = ck.Kfi[lw.Ws];
      aa = Sh;
      for (; za.length > aa; aa++) {
        Iv(za[aa], rt.Ws);
        za[aa].zvi(za[aa].info);
      }
      var Aa = ck.Kfi[lw.eE];
      for (aa = Ea; aa < Aa.length; aa++) {
        var Ba = Aa[aa];
        if (Ba.info > 0) {
          Iv(Ba, rt.Sl);
        } else {
          Iv(Ba, rt.ns);
        }
      }
      var Ca = ck.Kfi[lw._a];
      for (aa = Js; Ca.length > aa; aa++) {
        Iv(Ca[aa], rt._a);
      }
      Hv(nv, t, e, k, i, rt.Ln, "g", Cs);
      Hv(nv, t, e, k, i, rt.Qg, "gw", rd);
      Hv(nv, t, e, k, i, rt.Gn, "d", 2);
      Hv(nv, t, e, k, i, rt.Sg, "dw", 2);
      Hv(nv, t, e, k, i, rt.Rn, "p", qh);
      Hv(nv, t, e, k, i, rt.dr, "m", 2);
      Hv(nv, t, e, k, i, rt.Kn, "a", 2);
      Hv(nv, t, e, k, i, rt.Ds, "re", 2);
      Hv(nv, t, e, k, i, rt.Qf, "cs", 3, Wc);
      Hv(nv, t, e, k, i, rt.Qf, "cs", 2, 2);
      Hv(nv, t, e, k, i, rt.Qf, "cs", yd, 1);
      Hv(nv, t, e, k, i, rt.Qf, "cs", 0, 0);
      Hv(nv, t, e, k, i, rt.Cf, "cs", 3, 3);
      Hv(nv, t, e, k, i, rt.Cf, "cs", 2, 2);
      Hv(nv, t, e, k, i, rt.Cf, "cs", Jf, lt);
      Hv(nv, t, e, k, i, rt.Cf, "cs", 0, 0);
      var Da = ck.Kfi[lw.fo];
      for (aa = 0; Da.length > aa; aa++) {
        for (da = du; Da[aa].info > da; da++) {
          Iv(Da[aa].Ifi[da], rt.fo);
        }
      }
      Hv(nv, t, e, k, i, rt.Tn, "s", 2);
      var Fa = ck.Kfi[lw.Ca];
      for (aa = 0; aa < Fa.length; aa++) {
        Iv(Fa[aa]);
      }
      Fa = ck.Kfi[lw.za];
      aa = ke;
      for (; aa < Fa.length; aa++) {
        Iv(Fa[aa]);
      }
      Fa = ck.Kfi[lw.xa];
      aa = du;
      for (; aa < Fa.length; aa++) {
        Iv(Fa[aa]);
      }
      Fa = ck.Kfi[lw.Qa];
      aa = 0;
      for (; aa < Fa.length; aa++) {
        Iv(Fa[aa]);
      }
      Fa = ck.Kfi[lw.Sa];
      aa = 0;
      for (; Fa.length > aa; aa++) {
        Iv(Fa[aa]);
      }
      var Ga = ck.Kfi[lw.ga];
      for (aa = 0; aa < Ga.length; aa++) {
        Cv(Ga[aa]);
      }
      ha = ck.Kfi[lw.oo];
      aa = xn;
      for (; aa < ha.length; aa++) {
        Ev(ha[aa]);
      }
      ha = ck.Kfi[lw.PD];
      aa = Ou;
      for (; ha.length > aa; aa++) {
        Ev(ha[aa]);
      }
      g = ck.Kfi[lw.TD];
      aa = 0;
      for (; aa < g.length; aa++) {
        if (En == g[aa].action) {
          Ev(g[aa]);
        }
      }
      Z = ck.Kfi[lw.ZD];
      aa = 0;
      for (; aa < Z.length; aa++) {
        Ev(Z[aa]);
      }
      ia = ck.Kfi[lw.Da];
      aa = 0;
      for (; aa < ia.length; aa++) {
        Ev(ia[aa]);
      }
      ja = ck.Kfi[lw.Ea];
      aa = Gc;
      for (; aa < ja.length; aa++) {
        Ev(ja[aa]);
        ja[aa].zvi(ja[aa].info);
      }
      Hv(nv, t, e, k, i, rt.Bk, "c", Cm);
      Hv(nv, t, e, k, i, rt.jn, "t", Co, _g);
      Hv(nv, t, e, k, i, rt.zg, "f", Yh, 2);
      Hv(nv, t, e, k, i, rt.Hf, "plm", 0, 0);
      Hv(nv, t, e, k, i, rt.Co, "b", 3, Te);
      Hv(nv, t, e, k, i, rt.jn, "t", 3, 2);
      Hv(nv, t, e, k, i, rt.Co, "b", Ko, Nf);
      Hv(nv, t, e, k, i, rt.zg, "f", 1, 1);
      Hv(nv, t, e, k, i, rt.Hf, "plm", Ic, 1);
      Hv(nv, t, e, k, i, rt.jn, "t", Ic, du);
      Hv(nv, t, e, k, i, rt.zg, "f", Cm, qh);
      Hv(nv, t, e, k, i, rt.Hf, "plm", Tg, 2);
      Ga = ck.Kfi[lw.ga];
      aa = 0;
      for (; aa < Ga.length; aa++) {
        Ev(Ga[aa]);
      }
      var Ha = ck.Kfi[lw.Hs];
      for (aa = 0; aa < Ha.length; aa++) {
        Iv(Ha[aa], rt.Hs);
      }
      ba = ck.Kfi[lw.$E];
      aa = 0;
      for (; ba.length > aa; aa++) {
        if ((ca = ba[aa]).Qvi === 1 && (ca.lbi < 180 || $r.tr !== ca.fbi && ca.fbi !== $r.er && ca.fbi !== $r.yn && ca.fbi !== $r.ar && $r.sr !== ca.fbi)) {
          ca.Svi = ⵠⵠⵠⲆ.Si(ca.Svi, kh, 0.018);
          va = 1 + Math.min(ae, Math.max(ca.Svi, 0) / Re) * 0.18;
          ea.save();
          ea.scale(va, va);
          ax.Oi.x /= va;
          ax.Oi.y /= va;
          ca.x /= va;
          ca.y /= va;
          ca.r.x /= va;
          ca.r.y /= va;
          ca.Ivi();
          ca.Sfi();
          ax.Oi.x *= va;
          ax.Oi.y *= va;
          ca.x *= va;
          ca.y *= va;
          ca.r.x *= va;
          ca.r.y *= va;
          ea.restore();
        }
      }
      var Ia = ck.Kfi[lw.us];
      for (aa = Vd; Ia.length > aa; aa++) {
        Iv(Ia[aa], rt.us);
        Ia[aa].zvi(Ia[aa].info);
      }
      var Ja = ck.Kfi[lw.lr];
      for (aa = Ea; aa < Ja.length; aa++) {
        Iv(Ja[aa], rt.lr, rt.br);
      }
      var La = ck.Kfi[lw.Bs];
      for (aa = 0; aa < La.length; aa++) {
        Iv(La[aa], rt.Bs);
      }
      ba = ck.Kfi[lw.$E];
      aa = qh;
      for (; ba.length > aa; aa++) {
        ca = ba[aa];
        if (($r.tr === ca.fbi || ca.fbi === $r.er || ca.fbi === $r.yn || ca.fbi === $r.ar || $r.sr === ca.fbi) && ca.lbi > 180) {
          ca.gbi = 1;
          ea.save();
          va = fo + Math.min(Ps, Math.max(ca.vbi - 30, Ou) / 180) * 0.35;
          ea.scale(va, va);
          ax.Oi.x /= va;
          ax.Oi.y /= va;
          ca.x /= va;
          ca.y /= va;
          ca.r.x /= va;
          ca.r.y /= va;
          ca.Ivi();
          ca.Sfi();
          ax.Oi.x *= va;
          ax.Oi.y *= va;
          ca.x *= va;
          ca.y *= va;
          ca.r.x *= va;
          ca.r.y *= va;
          ea.restore();
        }
      }
      ua = ck.Kfi[lw.vr];
      aa = 0;
      for (; ua.length > aa; aa++) {
        if (ua[aa].gbi === 1) {
          Iv(ua[aa]);
        }
      }
      K = ck.Kfi[lw.dc];
      aa = 0;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          Iv(K[aa], rt.dc, rt.Ec);
        }
      }
      K = ck.Kfi[lw.mc];
      aa = Oq;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          Iv(K[aa], rt.mc, rt.Cc);
        }
      }
      var Ma = ck.Kfi[lw.ar];
      for (aa = Cm; Ma.length > aa; aa++) {
        Iv(Ma[aa], rt.ar, rt.Sw);
      }
      var Na = ck.Kfi[lw.hr];
      for (aa = Ka; aa < Na.length; aa++) {
        Iv(Na[aa], rt.hr, rt.Vw);
      }
      if ((gv += bk * 15) > 60) {
        gv -= 60;
      }
      Hv(hv, t, e, k, i, rt.wA, "fo", 2);
      Hv(hv, t, e, k, i, rt.pr, "fod", rd);
    })();
    if (ok.abi && ck.mode !== iw.wli && ck.mode !== iw.zli && ck.mode !== iw.xli) {
      (function () {
        var b = ax.Fvi;
        if (Nf === b.Pvi) {
          b.Tvi = Math.max(sh, b.Tvi - bk / 10);
        } else {
          b.Tvi = Math.min(1, b.Tvi + bk / 10);
        }
        for (var c = b.jvi, d = Cm; d < c.length; d++) {
          var f = c[d];
          b.mi(f);
          vv(rt.Fc, f.id, ax.Oi.x + f.x, ax.Oi.y + f.y, f.alpha);
        }
        for (d = so; c.length > d; d++) {
          if ((f = c[d])._li <= 0 || f.x > -ax.Oi.x + sa || -ax.Oi.x - ax.Oi.w / hu > f.x || -ax.Oi.y + oa < f.y) {
            c.splice(d, ae);
          }
        }
        var g = -ax.Oi.y;
        if (ck.Dbi > -1000) {
          b.add(g);
        }
      })();
      (function () {
        var b = ax.Rvi;
        if (b.Pvi === ke) {
          b.Tvi = Math.max(0, b.Tvi - bk / co);
        } else {
          b.Tvi = Math.min(au, b.Tvi + bk / Ki);
        }
        for (var c = b.jvi, d = sh; c.length > d; d++) {
          var f = c[d];
          b.mi(f);
          vv(rt._c, f.id, ax.Oi.x + f.x, ax.Oi.y + f.y, f.alpha);
        }
        for (d = sh; d < c.length; d++) {
          if ((f = c[d])._li <= 0 || f.x > -ax.Oi.x + sa || -ax.Oi.x > f.x || -ax.Oi.y + oa < f.y) {
            c.splice(d, fi);
          }
        }
        var g = -ax.Oi.y;
        if (ck.Mbi > -1000) {
          b.add(g);
        }
      })();
      (function () {
        var b = ax.Lvi;
        for (var c = b.jvi, d = Gc; d < c.length; d++) {
          var f = c[d];
          b.mi(f);
          vv(rt.Qy, f.id, ax.Oi.x + f.x, ax.Oi.y + f.y, f.alpha);
        }
        for (d = ke; d < c.length; d++) {
          if ((f = c[d])._li <= 0 || f.x > -ax.Oi.x + sa || -ax.Oi.x > f.x || -ax.Oi.y + oa < f.y) {
            c.splice(d, yd);
          }
        }
        var g = -ax.Oi.y;
        if (ck.Gvi > -1000) {
          b.add(g);
        }
      })();
    }
    if (ck.transition && a) {
      ck.transition = false;
      ck.Zbi.hi = 0;
      ck.Zbi.oi = ui;
    }
  }
  function Fv(a) {
    ea.save();
    ea.translate(ax.Oi.x + a.x, ax.Oi.y + a.y);
    ea.rotate(a.angle);
    ea.globalAlpha = a.alpha;
    var b = ΔΔ[a.id][ck.time];
    _l(ea, b, -b.width / ih, -b.height / 2);
    ea.globalAlpha = dm;
    ea.restore();
  }
  var Pv = aj.console;
  function Sv(j, i, k, e, n, a) {
    var q = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.y + j + 710;
    var g = Math.max(ax.Oi.x + i, 0);
    var c = Math.max(-ax.Oi.x + sa - k - _j, so);
    var d = g;
    var m = sa - g - c;
    if (a) {
      var s = e.xE(q).x;
    } else {
      s = q.r.x;
    }
    var t = h + iw.evi;
    iw.nvi;
    t += -s + iw.nvi + Vn;
    if (a) {
      s = e.xE(r).x;
    } else {
      s = r.r.x;
    }
    var u = h - iw.avi - t - s;
    var w = (t += u + ec) - Tg;
    if (a) {
      s = e.xE(o).x;
    } else {
      s = o.r.x;
    }
    if (t + (u = h - iw.rvi - t - s) < w) {
      t += u + ec;
    } else {
      t = w;
    }
    u = h - iw.ovi - t;
    if (a > xn && X === n.cvi) {
      if (ck.transition) {
        var b = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 77, 72, 252, 239, 187, b);
      } else {
        ea.fillStyle = rt.et[ck.time];
      }
      ea.fillRect(d, t, m, u);
    } else {
      if (ck.transition) {
        b = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(n.lfi[0], n.lfi[1], n.lfi[2], n.pfi[Oq], n.pfi[1], n.pfi[eu], b);
      } else {
        ea.fillStyle = n.mvi[ck.time];
      }
      ea.fillRect(d, t, m, u);
    }
  }
  function jv(j, i, q, e, n, a) {
    var s = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.y + j - 700;
    var g = Math.max(ax.Oi.x + i, 0);
    var c = Math.max(-ax.Oi.x + sa - q - Qg, du);
    var d = g;
    var m = sa - g - c;
    if (a) {
      var t = e.xE(s);
    } else {
      t = s.r;
    }
    var u = h + iw.evi;
    var F = d;
    var l = u;
    var b = t.x + iw.nvi;
    var v = m;
    var y = u += t.x + iw.nvi - 2;
    if (a) {
      t = e.xE(r);
    } else {
      t = r.r;
    }
    var k = h + iw.avi - u + t.x;
    var G = u;
    var w = d;
    var H = k;
    var B = m;
    var D = (u += k - 2) - 2;
    if (a) {
      t = e.xE(o);
    } else {
      t = o.r;
    }
    if (D < u + (k = h + iw.rvi - u + t.x) - 3) {
      var E = Rg;
      var J = u;
      var z = d;
      var x = k;
      var K = m;
      var L = u += k - lr;
    } else {
      E = false;
      u = D;
      L = -1;
    }
    k = h + iw.ovi - u;
    if (ck.transition) {
      var M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(F, l, v, b);
    if (a) {
      if (ck.transition) {
        M = ck.time ? ae - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 70, 76, 42, 139, 155, M);
      } else {
        ea.fillStyle = rt.ht[ck.time];
      }
    } else if (ck.transition) {
      M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(w, G, B, H);
    if (E) {
      if (a) {
        if (ck.transition) {
          M = ck.time ? Mc - ck.Zbi.hi : ck.Zbi.hi;
          ea.fillStyle = tv(17, 94, 96, 169, 214, 211, M);
        } else {
          ea.fillStyle = rt.gt[ck.time];
        }
      } else if (ck.transition) {
        M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
      } else {
        ea.fillStyle = rt.ot[ck.time];
      }
      ea.fillRect(z, J, K, x);
    }
    if (ok.abi && a) {
      e.qvi(D, L, y, h, -ax.Oi.x + F, -ax.Oi.x + F + v);
    }
  }
  function Rv(j, i, k, e, n, a) {
    var q = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.x + j + 820;
    var g = Math.max(ax.Oi.y + i, ke);
    var c = Math.max(-ax.Oi.y + oa - k - Qg, Sh);
    var d = g;
    var m = oa - g - c;
    if (a) {
      var s = e.xE(q).x;
    } else {
      s = q.r.x;
    }
    var t = h + iw.evi;
    iw.nvi;
    t += -s + iw.nvi + Te;
    if (a) {
      s = e.xE(r).x;
    } else {
      s = r.r.x;
    }
    var u = h - iw.avi - t - s;
    var w = (t += u + wh) - 2;
    if (a) {
      s = e.xE(o).x;
    } else {
      s = o.r.x;
    }
    if (w > t + (u = h - iw.rvi - t - s)) {
      t += u + 2;
    } else {
      t = w;
    }
    u = h - iw.ovi - t;
    if (a > Nf && n.cvi === 1) {
      if (ck.transition) {
        var b = ck.time ? Lo - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 77, 72, 252, 239, 187, b);
      } else {
        ea.fillStyle = rt.et[ck.time];
      }
      ea.fillRect(t, d, u, m);
    } else {
      if (ck.transition) {
        b = ck.time ? Jf - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(n.lfi[0], n.lfi[1], n.lfi[2], n.pfi[Nf], n.pfi[1], n.pfi[ih], b);
      } else {
        ea.fillStyle = n.mvi[ck.time];
      }
      ea.fillRect(t, d, u, m);
    }
  }
  function Lv(j, i, k, e, n, a) {
    var q = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.y + j - 700;
    var g = Math.max(ax.Oi.x + i, sh);
    var c = Math.max(-ax.Oi.x + sa - k - 100, 0);
    var d = g;
    var m = sa - g - c;
    if (a) {
      var s = e.xE(q).x;
    } else {
      s = q.r.x;
    }
    var t = h + iw.evi;
    iw.nvi;
    t += s + iw.nvi - Vn;
    if (a) {
      s = e.xE(r).x;
    } else {
      s = r.r.x;
    }
    var u = h + iw.avi - t + s;
    var w = (t += u - 2) - 2;
    if (a) {
      s = e.xE(o).x;
    } else {
      s = o.r.x;
    }
    if (w < t + (u = h + iw.rvi - t + s) - nh) {
      t += u - Gi;
    } else {
      t = w;
    }
    u = h + iw.ovi - t;
    if (a > 0 && n.cvi === lt) {
      if (ck.transition) {
        var b = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 77, 72, 252, 239, 187, b);
      } else {
        ea.fillStyle = rt.et[ck.time];
      }
      ea.fillRect(d, t, m, u);
    } else {
      if (ck.transition) {
        b = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(n.lfi[0], n.lfi[hf], n.lfi[2], n.pfi[0], n.pfi[fo], n.pfi[2], b);
      } else {
        ea.fillStyle = n.mvi[ck.time];
      }
      ea.fillRect(d, t, m, u);
    }
  }
  function Gv(a) {
    ea.globalAlpha = a.alpha;
    rm(ea, a.x + ax.Oi.x, a.y + ax.Oi.y, a.r);
    em(ea, rt.ft[ck.time]);
    ea.globalAlpha = Mc;
  }
  function qv(b, c, d, e, f) {
    var a = d.width;
    var g = d.height;
    var i = Math.floor(a / Tg);
    var j = Math.floor(g / rd);
    if (ck.transition) {
      ea.globalAlpha = au;
      _l(ea, ΔΔ[b][c][ck.time], 0, 0, a, g, e, f, i, j);
      ck.time = ck.time ? 0 : 1;
      ea.globalAlpha = dm - ck.Zbi.hi;
      _l(ea, ΔΔ[b][c][ck.time], 0, Vd, a, g, e, f, i, j);
      ck.time = ck.time ? Ou : Lh;
      ea.globalAlpha = 1;
    } else {
      _l(ea, ΔΔ[b][c][ck.time], Ng, 0, a, g, e, f, i, j);
    }
  }
  function Tv(b, c, d, e) {
    var f = c.width;
    var a = c.height;
    var g = Math.floor(f / 2);
    var h = Math.floor(a / ih);
    if (ck.transition) {
      ea.globalAlpha = 1;
      _l(ea, ΔΔ[b][ck.time], Sh, Vd, f, a, d, e, g, h);
      ck.time = ck.time ? nj : yd;
      ea.globalAlpha = Lo - ck.Zbi.hi;
      _l(ea, ΔΔ[b][ck.time], 0, Gc, f, a, d, e, g, h);
      ck.time = ck.time ? Jj : 1;
      ea.globalAlpha = 1;
    } else {
      _l(ea, c, Gc, 0, f, a, d, e, g, h);
    }
  }
  function Nv(j, i, q, e, n, a) {
    var s = e.$bi;
    var r = e.ivi;
    var o = e.tvi;
    var h = ax.Oi.x + j - 700;
    var g = Math.max(ax.Oi.y + i, Cm);
    var c = Math.max(-ax.Oi.y + oa - q - vo, 0);
    var d = g;
    var m = oa - g - c;
    if (a) {
      var t = e.xE(s);
    } else {
      t = s.r;
    }
    var u = h + iw.evi;
    var F = u;
    var l = d;
    var b = t.x + iw.nvi;
    var v = m;
    var y = u += t.x + iw.nvi - yo;
    if (a) {
      t = e.xE(r);
    } else {
      t = r.r;
    }
    var k = h + iw.avi - u + t.x;
    var G = u;
    var w = d;
    var H = k;
    var B = m;
    var D = (u += k - wc) - 2;
    if (a) {
      t = e.xE(o);
    } else {
      t = o.r;
    }
    if (D < u + (k = h + iw.rvi - u + t.x) - Sn) {
      var E = true;
      var J = u;
      var z = d;
      var x = k;
      var K = m;
      var L = u += k - 2;
    } else {
      E = ui;
      u = D;
      L = -1;
    }
    k = h + iw.ovi - u;
    if (ck.transition) {
      var M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(F, l, b, v);
    if (a) {
      if (ck.transition) {
        M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(15, 70, 76, 42, 139, 155, M);
      } else {
        ea.fillStyle = rt.ht[ck.time];
      }
    } else if (ck.transition) {
      M = ck.time ? 1 - ck.Zbi.hi : ck.Zbi.hi;
      ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
    } else {
      ea.fillStyle = rt.ot[ck.time];
    }
    ea.fillRect(G, w, H, B);
    if (E) {
      if (a) {
        if (ck.transition) {
          M = ck.time ? wg - ck.Zbi.hi : ck.Zbi.hi;
          ea.fillStyle = tv(17, 94, 96, 169, 214, 211, M);
        } else {
          ea.fillStyle = rt.gt[ck.time];
        }
      } else if (ck.transition) {
        M = ck.time ? Ej - ck.Zbi.hi : ck.Zbi.hi;
        ea.fillStyle = tv(9, 55, 63, 11, 106, 132, M);
      } else {
        ea.fillStyle = rt.ot[ck.time];
      }
      ea.fillRect(J, z, x, K);
    }
    if (ok.abi && a) {
      e.Wvi(D, L, y, h, -ax.Oi.y + l, -ax.Oi.y + l + v);
    }
  }
  function Hv(b, c, d, e, f, a, i, j, k, h) {
    if (ck.transition) {
      ea.globalAlpha = wg;
      b(c, d, e, f, a, i, j, k, h);
      ck.time = ck.time ? Js : Ps;
      ea.globalAlpha = 1 - ck.Zbi.hi;
      b(c, d, e, f, a, i, j, k, h);
      ck.time = ck.time ? sh : 1;
      ea.globalAlpha = 1;
    } else {
      b(c, d, e, f, a, i, j, k, h);
    }
  }
  Pv.log = Pv.info = Pv.error = Pv.warn = Pv.debug = Pv.Nvi = Pv.trace = Pv.time = Pv.timeEnd = function () {};
  var Uv = Sh;
  var Ov = Ps;
  var Wv = 2;
  var Jv = bd;
  var Kv = 1;
  var Xv = 2;
  function Vv(b, i, j, e, k, l, n, q = undefined, r = 0, h, t) {
    if (q === undefined) q = xn;
    if (Ls === h) {
      h = 0;
    }
    if (A === t) {
      t = 1;
    }
    if (l !== 1) {
      l = Ea;
    }
    if (e) {
      var v = e;
    }
    var d;
    var w = {
      width: b,
      height: i,
      ME: v,
      state: Jv,
      translate: {
        x: q,
        y: r,
        Hvi: q,
        Uvi: r
      },
      Ovi: l,
      Jli: 0,
      Yvi: n,
      position: h,
      active: t
    };
    function u() {
      return w.ME[w.state];
    }
    function f(a) {
      var b = w.translate;
      if (Jj === w.width || w.height === 0) {
        w.width = w.ME[Sh].width;
        w.height = w.ME[ke].height;
      }
      return a.x > b.x && a.x < b.x + w.width / k && a.y > b.y && a.y < b.y + w.height / k;
    }
    l = function () {
      var a = Js;
      if (w.Ovi === 1) {
        if (w.state === Kv || w.state === Xv) {
          w.Jli = (w.Jli + bk * 1000) % 1000;
        } else if (w.Jli > Ng) {
          w.Jli = w.Jli > 500 ? w.Jli + bk * 1000 : w.Jli - bk * 1000;
          if (w.Jli < 0 || w.Jli > 1000) {
            w.Jli = 0;
          }
        }
        a = ⵠⵠⵠⲆ.ti(w.Jli > 500 ? (1000 - w.Jli) / 500 : w.Jli / 500) * 0.2;
      }
      return a;
    };
    if (rd === (k = k === er ? pg : k === Ko ? 2 : fo)) {
      d = function (b) {
        var c = 1 + l();
        var d = u();
        var e = w.width * c / 2;
        var f = c * w.height / Te;
        var a = (e - w.width / 2) / 2;
        var g = (f - w.height / 2) / Yh;
        _l(b, d, w.translate.x - a, w.translate.y - g, e, f);
      };
    } else if (k === 3) {
      d = function (b) {
        var c = u();
        var d = w.width;
        var e = w.height;
        var f = (d - w.width) / 2;
        var a = (e - w.height) / Cs;
        _l(b, c, w.translate.x - f, w.translate.y - a, d, e);
      };
      k = 1;
    } else {
      d = function (a) {
        _l(a, u(), w.translate.x, w.translate.y);
      };
    }
    return {
      info: w,
      Jvi: function (a, b, c) {
        if (f(b)) {
          if (c == Ov) {
            w.state = Xv;
          } else if (Wv == c || c == Uv && w.state != Xv) {
            w.state = Kv;
          }
          return hr;
        } else {
          w.state = Jv;
          return false;
        }
      },
      Sfi: d,
      Kvi: f
    };
  }
  function Yv(b, c) {
    const d = b ^ 13261;
    const e = (24 << (c >> Vd & 255)) + (0 << (c >> 24 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 16 & 255));
    const f = xd(d, e);
    const a = Ue(d, e, d, e, d);
    return (0 << ((f ^ a) & 255)) + (24 << ((f ^ a) >> 24 & 255)) + (8 << ((f ^ a) >> ci & 255)) + (16 << ((f ^ a) >> 8 & 255));
  }
  function Zv(b, j, k, e, n, q, s, t, v, w, g, c, d, m, x) {
    if (b.length === 0) {
      b = " ";
    }
    if (Yr === s) {
      s = 0;
    }
    if (t === undefined) {
      t = Ka;
    }
    if (v === Go) {
      v = 0;
    }
    if (m === undefined) {
      m = Jj;
    }
    var f = document.createElement("canvas");
    var p = f.getContext("2d");
    p.textBaseline = "middle";
    p.font = (x !== ug ? x + " " : "") + e + "px " + j;
    n = n !== Nn ? Math.min(p.measureText(b).width, n) : p.measureText(b).width;
    f.width = n + s;
    f.height = e + t;
    if (q !== undefined) {
      if (Zg !== g) {
        p.globalAlpha = g;
      }
      p.fillStyle = q;
      if (c !== lq) {
        ⵠⵠΔⵠΔΔⵠⵠᐃ(p, v + 2, v, n + s - v * 2 - 4, e + t - v * 2, c);
        p.fill();
      } else {
        p.fillRect(v, v, n + s - wc * v, e + t - v * 2);
      }
      p.globalAlpha = 1;
      if (v !== 0) {
        p.lineWidth = v;
        p.strokeStyle = w;
        p.stroke();
      }
    }
    p.textBaseline = "middle";
    p.font = (x !== undefined ? x + " " : "") + e + "px " + j;
    if (d !== undefined) {
      p.strokeStyle = d;
      p.lineWidth = m;
      p.lineJoin = "miter";
      p.miterLimit = yo;
      p.strokeText(b, Math.floor(s / 2), Math.floor(t / 2) + Math.floor(e / 2), n);
    }
    p.fillStyle = k;
    p.fillText(b, Math.floor(s / Gi), Math.floor(t / 2) + Math.floor(e / wh), n);
    f.ivi = f.width / hu;
    f.Xvi = f.height / Vn;
    return f;
  }
  function $v(b, c, d, e, f) {
    var a = {
      x: d,
      y: e,
      Hvi: d,
      Uvi: e
    };
    return {
      translate: a,
      Sfi: function (c) {
        _l(c, b, a.x, a.y, b.width / 2, b.height / Gi);
      },
      active: c,
      position: f
    };
  }
  function _v(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  var aw = "send";
  var bw = ⵠⵠⵠⲆ.F("id") === "1" ? 1 : Gc;
  var cw = ⵠⵠⵠⲆ.F("password");
  var dw = ⵠⵠⵠⲆ.F("debug") || Ds;
  if (Oh !== dw) {
    dw = JSON.parse(aj.decodeURIComponent(dw));
  }
  var ew = "https://api.eg.rivet.gg";
  var fw = {
    Zr: eh,
    Rr: Ho,
    $r: 8,
    wbi: Bg,
    zo: 128,
    Vr: rd,
    Vvi: X,
    IDLE: 64,
    zbi: 32
  };
  var gw = [{
    Zvi: 1000,
    items: [[ih, $r.oo], [Mc, $r.Un], [lo, $r.Rn], [1, $r.HD]]
  }, {
    Zvi: 2000,
    items: [[wh, $r.PD], [fn, $r.Wt], [2, $r.Un], [Hh, $r.Rn], [lr, $r.HD]]
  }, {
    Zvi: 4000,
    items: [[3, $r.PD], [1, $r.Pt], [k, $r.Un], [20, $r.Rn], [Ac, $r.HD], [1, $r.Wn], [80, $r.nE], [140, $r.aE]]
  }, {
    Zvi: 8000,
    items: [[fi, $r.ge], [4, $r.PD], [1, $r.jt], [Gg, $r.Un], [30, $r.Rn], [Fa, $r.HD], [1, $r.Wn], [150, $r.nE], [200, $r.aE], [60, $r.Ln], [Te, $r.ta]]
  }, {
    Zvi: 16000,
    items: [[1, $r.ge], [ja, $r.Rt], [ja, $r.As], [Ih, $r.ca], [2, $r.ta], [Gi, $r.PD], [1, $r.TD], [15, $r.ja], [wh, $r.OD], [1, $r._a], [Jf, $r.Pe], [200, $r.nE], [300, $r.aE]]
  }, {
    Zvi: 16000,
    items: [[1, $r.ge], [Ko, $r.Ut], [yd, $r.Qe], [1, $r.jt], [as, $r.ca], [_n, $r.ta], [Th, $r.PD], [3, $r.vs], [1, $r.he], [200, $r.nE], [300, $r.aE]]
  }, {
    Zvi: 16000,
    items: [[fn, $r.ge], [hf, $r.dn], [1, $r.le], [Wc, $r.vs], [ae, 0], [1, $r.jt], [7, $r.ca], [2, $r.ta], [4, $r.PD], [150, $r.nE], [200, $r.aE], [fn, $r.Ia]]
  }, {
    Zvi: 16000,
    items: [[Ko, $r.ge], [1, $r.mn], [1, $r.jt], [7, $r.ca], [2, $r.ta], [4, $r.PD], [2, $r.ga], [4, $r.ZD], [10, $r.pa], [ei, $r.ra], [Ld, $r.wr], [Jf, $r.xe], [500, $r.aE]]
  }, {
    Zvi: 16000,
    items: [[1, $r.ge], [1, $r.jt], [v, $r.ma], [yd, $r.ta], [6, $r.PD], [xa, $r.vs], [1, $r.ze], [1, $r.Ft], [16, $r.$n], [150, $r.nE], [200, $r.aE]]
  }, {
    Zvi: 20000,
    items: [[Ps, $r.ge], [1, $r.jt], [Ps, $r.ca], [Ej, $r.ta], [Sr, $r.PD], [3, $r.vs], [Mc, $r.re], [1, $r.Lt], [Ps, $r.Kt], [2, $r.Na], [50, $r.nE], [100, $r.aE]]
  }];
  var hw = {
    $vi: 60000,
    wbi: 0.2,
    iyi: 600000,
    tyi: Zn,
    eyi: 14,
    nyi: 15,
    ayi: 8000,
    jpi: 4,
    syi: 2000,
    ryi: nh,
    oyi: 52,
    Ppi: Mc,
    hyi: 4,
    gyi: 15,
    cyi: 20,
    dyi: 200,
    Tpi: 3,
    myi: 125000,
    uyi: 0.2,
    Fpi: hu,
    Rpi: 0,
    fyi: 0.58,
    pyi: "[25]",
    lyi: 50,
    byi: Qm
  };
  var iw = {
    bt: 480000,
    vyi: 10,
    Qfi: 16,
    yyi: 6,
    Obi: 60,
    Mvi: 1,
    wvi: 2,
    Avi: 4,
    yvi: 8,
    uyi: 10,
    upi: io,
    Api: 100,
    Mpi: 100,
    kyi: vo,
    Upi: 100,
    gpi: 100,
    Spi: yq,
    gpi: 100,
    Hpi: Qg,
    Jfi: kh,
    Cli: 0,
    kli: 1,
    wli: rd,
    Bli: 3,
    zli: 4,
    xli: 5,
    Ayi: 6,
    Qli: 7,
    wyi: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    Afi: 0,
    wfi: ke,
    Av: 30,
    Myi: Gi,
    Obi: 60000,
    Byi: 0,
    Dyi: bd,
    Eyi: 50,
    Cyi: Ea,
    zyi: 40,
    xyi: 39,
    Qyi: 830,
    Syi: 25,
    Iyi: fm,
    nvi: Ea,
    evi: Vd,
    _yi: 200,
    Fyi: xn,
    avi: 250,
    Pyi: 150,
    Tyi: Ka,
    rvi: 350,
    jyi: hs,
    ovi: 700,
    wr: 39879
  };
  var jw = [];
  for (Td = nj; Td < 500; Td++) {
    jw[Td] = Ou;
  }
  jw[rt.Ce] = 1;
  jw[rt.je] = 1;
  jw[rt.Ft] = 1;
  jw[rt.Lt] = Ic;
  jw[rt.Gt] = Ic;
  jw[rt.ce] = lt;
  jw[rt.$t] = Ej;
  jw[rt.Nt] = fn;
  jw[rt.We] = 1;
  jw[rt.Ne] = 1;
  jw[rt.Yt] = Lh;
  jw[rt.Jt] = 1;
  jw[rt.Kt] = 1;
  jw[rt.ue] = Ej;
  jw[rt.fe] = 1;
  jw[rt.Xt] = yd;
  jw[rt.Vt] = 1;
  jw[rt.Ot] = 1;
  jw[rt.Zt] = 1;
  var kw = [{
    time: 2880000
  }, {
    time: An * 60000 * oe
  }, {
    time: mn * 480000
  }, {
    time: fm * 60000 * 3
  }, {
    time: ag * (Fg * 60000)
  }, {
    time: Au * (am * 60000)
  }, {
    time: Jd * 480000
  }, {
    time: rf * (wm * 60000)
  }, {
    time: Qj * 480000
  }, {
    time: Ca * 60000 * 7
  }, {
    time: kr * 480000
  }, {
    time: hd * 480000
  }, {
    time: V * 60000 * 7
  }];
  var lw = {
    JD: Yc,
    Vn: 20,
    ZD: 34,
    Ryi: 83,
    vr: 91,
    ss: 36,
    oo: 1,
    Dvi: 76,
    dc: 64,
    Da: 22,
    _a: 29,
    Ub: 87,
    Ps: 45,
    qu: 66,
    Wf: 81,
    Na: 13,
    Ir: 61,
    Bf: 65,
    Sa: 28,
    ar: 74,
    Dp: 82,
    lr: 90,
    fA: 88,
    js: 47,
    Ea: 23,
    $E: 0,
    Rs: 48,
    Fg: 62,
    RD: 39,
    OD: 15,
    _vi: 89,
    Ra: 8,
    WD: 54,
    Bv: 67,
    eE: 35,
    tr: 72,
    GD: 44,
    ra: 31,
    yr: 77,
    $n: 30,
    ja: 7,
    Ca: 24,
    hr: 75,
    xa: 26,
    wr: 3,
    Ls: 49,
    PD: lc,
    Gs: 50,
    KD: 21,
    Hs: 56,
    YD: 16,
    oc: 63,
    Ws: 52,
    yo: 60,
    jD: 37,
    Lyi: 85,
    qs: 51,
    qD: 43,
    Wa: 12,
    za: 25,
    ir: 71,
    Qa: 27,
    MA: 70,
    TD: 18,
    mE: 68,
    Ta: Dd,
    Ns: 53,
    qa: Fh,
    Tr: 80,
    ND: 55,
    Wn: Cg,
    mc: 69,
    Ha: $s,
    Ts: 46,
    pa: 33,
    Xn: qg,
    Fa: 5,
    As: 41,
    ga: 32,
    Ar: 86,
    UD: co,
    FB: 78,
    LD: 40,
    us: 38,
    Bs: 42,
    Gyi: 84,
    fo: 100,
    qo: 79,
    er: 73,
    La: Mg
  };
  var mw = [[lw.Ca, $r.nE], [lw.za, $r.Ln], [lw.xa, $r.Gn], [lw.Qa, $r.Kn], [lw.Sa, $r.Ds]];
  function nw(a, b, c, d) {
    this.id = a;
    this.lbi = vg * (a + 5);
    this._li = sa / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.qyi = Math.cos(d);
    this.alpha = bd;
  }
  function ow(b, f, i, e, j, a, k, l, m, h) {
    this.type = b;
    this.$fi = f;
    this.id = i;
    this.x = e;
    this.y = j;
    this.angle = a;
    this.Wyi = a;
    this.action = k;
    this.info = l;
    this.Nyi = h;
    this.r = {
      x: e,
      y: j
    };
    this.lbi = m;
    if (ck) {
      this.Hfi = ck.Hyi * f + i;
    }
    switch (b) {
      case lw.$E:
        this.qbi = ck.Wfi[this.$fi];
        this.Mli = this.qbi.Mli;
        this.Pbi = this.qbi.Pbi;
        this._bi = this.qbi._bi;
        this.jbi = this.qbi.jbi;
        this.Uyi = -1000000;
        this.Gvi = -1000000;
        this.Mbi = -1000000;
        this.Dbi = -1000000;
        this.Oyi = -1000000;
        this.Bbi = -1000000;
        this.Yyi = -1000000;
        this.Qpi = iw.wli === ck.mode && iw.Afi === this.Mli ? Bc : Ys;
        this.Jyi = iw.Bli === ck.mode && this.Mli === iw.wfi && Nh;
        this.Qbi = !!this.Qpi && this.qbi.Ali === "  " || Qh;
        this.Bvi = [];
        this.Qvi = 0;
        this.Kyi = pe;
        this.Xyi = qh;
        this.gbi = 0;
        this.Cvi = [];
        this.r = {
          x: e,
          y: j
        };
        this.Sfi = _u;
        this.Ivi = Zu;
        this.bbi = 0;
        this.pbi = Nf;
        this.kbi = 0;
        this.ybi = new ⵠⵠⵠⲆ.ri(false, 0, 0, -Math.PI / oo, 0.5, 1);
        this.vbi = 0;
        this.Svi = 0;
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, 0, dh, 3);
        this.$li = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, Vd, 5, Xg);
        this.freeze = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, 0, lh, 3);
        this.Lbi = new ⵠⵠⵠⲆ.ri(Bi, 0.6, 0.6, 0, 5, 3);
        this.Cbi = new ⵠⵠⵠⲆ.ri(jt, 0, 2.25, -1.5, 3.75, 7.5);
        this.xbi = new ⵠⵠⵠⲆ.ri(true, sh, 7.5, -3, 22.5, 33.75);
        this.attack = new ⵠⵠⵠⲆ.ri(false, 0, Ka, -Math.PI / 3, 6, 9);
        this.Vyi = Ng;
        this.Rbi = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, 0, Ej, jh);
        this.Tbi = this.Qbi ? new ⵠⵠⵠⲆ.ri(hr, Ea, 2.25, -1.5, 2.75, 5.5) : xn;
        this.Ebi = 0;
        this.Hbi = 0;
        this.Wbi = [];
        this.Nbi = [];
        this.text = [];
        this.label = [];
        this.Zyi = av;
        this.Sbi = Va;
        this.right = -Lo;
        this.fbi = -Lh;
        this.action = fw.IDLE;
        this.$yi = Xq;
        this.dli = Jj;
        this.ubi = false;
        this.bubbles = [];
        this.Fbi = 0;
        this.iki = -Ej;
        this.mi = function (a) {
          if (this.info & 32768) {
            this.$yi = Hs;
            this.info = this.info & -32769;
          } else {
            this.$yi = cc;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.Fbi = 1;
          } else {
            this.Fbi = 0;
          }
          this.dli = Math.floor(this.info / 128);
          this.info -= this.dli * 128;
          if (this.info === $r.qt || this.Qbi) {
            this.right = -fn;
          } else {
            this.right = this.info;
          }
          this.Qvi = ck.tki(Math.floor(this.r.y / 100), Math.floor(this.r.x / Vs));
          this.fbi = this.Nyi & 255;
          if (this.right === iw.Myi) {
            this.ubi = Rd;
          } else {
            this.ubi = false;
          }
          if (jw[this.right]) {
            this.Nli = Vj;
          } else {
            this.Nli = false;
          }
          if (a & fw.Rr) {
            this.Rbi.oi = ks;
            this.Rbi.hi = 0.6;
          } else if (a & fw.Zr) {
            this.freeze.oi = ui;
            this.freeze.hi = 0.6;
          } else if (a & fw.zo) {
            this.$li.oi = Fj;
            this.$li.hi = 0.6;
          }
          if (a & fw.$r) {
            this.Lbi.oi = Xq;
            this.Lbi.hi = 0.6;
          }
          if (a & fw.Vr) {
            this.oli.oi = Qc;
            this.oli.hi = 0.6;
          }
          if (a & fw.wbi) {
            this.Vyi = hw.fyi;
            if (dx.eki && this.iki !== -Ic) {
              dx.Wfi[this.iki].nki(Ww[this.right]);
            }
          }
        };
        this.mi();
        break;
      case lw.Ea:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, Ps, X, 0, 10, jc),
          mi: false,
          angle: 0
        };
        this._fi = Qb;
        this.Ffi = bb;
        this.gli = new ⵠⵠⵠⲆ.ri(re, Lo, 1.23, 1.18, 0.01, 0.01);
        this.Oli = 0;
        this.Yli = nj;
        this.zvi = ql;
        break;
      case lw.Da:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, 1, 0, 10, 10),
          mi: false,
          angle: 0
        };
        this._fi = Nb;
        this.Ffi = ob;
        this.gli = new ⵠⵠⵠⲆ.ri(false, fi, 1.23, 1.18, 0.01, 0.01);
        this.Oli = bd;
        this.Yli = sh;
        break;
      case lw.oo:
      case lw.PD:
        this._fi = mb;
        this.Ffi = Sb;
        this.tbi = new ⵠⵠⵠⲆ.ri(ui, 1, 1.03, 0.98, 0.3, 0.3);
        this.Uli = new ⵠⵠⵠⲆ.ri(je, Lh, 1.23, 1.18, 0.01, 0.01);
        this.gli = new ⵠⵠⵠⲆ.ri(zn, yd, 1.23, 1.18, 0.01, 0.01);
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Mr, ae, Mc, Cm, 10, ar),
          mi: false,
          angle: Sh
        };
        break;
      case lw.qD:
        this._fi = Db;
        this.Ffi = gb;
        this.Uli = new ⵠⵠⵠⲆ.ri(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(ks, au, 1, 0, 10, Mh),
          mi: Qc,
          angle: 0
        };
        this.Ifi = [];
        for (var g = Gc; g < jh; g++) {
          this.Ifi.push({
            Sfi: Eb,
            Jli: new ⵠⵠⵠⲆ.ri(re, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Ifi[0].x = this.x - 16.5;
        this.Ifi[0].y = this.y - 15.5;
        this.Ifi[Gc].angle = this.angle;
        this.Ifi[au].x = this.x + 36;
        this.Ifi[yd].y = this.y + ce;
        this.Ifi[1].angle = this.angle;
        this.Ifi[z].x = this.x - 18.5;
        this.Ifi[2].y = this.y + 39;
        this.Ifi[Te].angle = this.angle;
        break;
      case lw.wr:
        this._fi = Tu;
        this.Ffi = hb;
        this.Uli = new ⵠⵠⵠⲆ.ri(cc, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, fo, 0, 10, ic),
          mi: false,
          angle: Ea
        };
        this.Ifi = [];
        for (g = 0; g < 3; g++) {
          this.Ifi.push({
            Sfi: Wb,
            Jli: new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.Ifi[so].x = this.x - 16.5;
        this.Ifi[Ka].y = this.y - 15.5;
        this.Ifi[dm].x = this.x - 5.5;
        this.Ifi[1].y = this.y + 7.5;
        this.Ifi[2].x = this.x + 18;
        this.Ifi[2].y = this.y - dh;
        break;
      case lw.yr:
        this.Sfi = Pb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.oli = new ⵠⵠⵠⲆ.ri(kg, 0.6, 0.6, Sh, lh, 3);
        break;
      case lw.MA:
        this.Sfi = _b;
        this.Jli = new ⵠⵠⵠⲆ.ri(Ys, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.oli = new ⵠⵠⵠⲆ.ri(cc, 0.6, 0.6, Cm, bg, 3);
        break;
      case lw.ir:
        this.Sfi = vb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Vli = new ⵠⵠⵠⲆ.ri(Zh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Zli = new ⵠⵠⵠⲆ.ri(re, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, so, 5, mq);
        this.$li = new ⵠⵠⵠⲆ.ri(Fj, 0.6, 0.6, Cm, 5, Wc);
        break;
      case lw.Bv:
        this.Sfi = Bb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Vli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.Zli = new ⵠⵠⵠⲆ.ri(je, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, du, 5, mq);
        this.$li = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, Ou, Gj, 3);
        break;
      case lw.mE:
        this.Sfi = Xu;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.oli = new ⵠⵠⵠⲆ.ri(re, 0.6, 0.6, nj, 5, mq);
        break;
      case lw.lr:
        this.Sfi = db;
        this.Jli = new ⵠⵠⵠⲆ.ri(zn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, Jj, 5, mq);
        break;
      case lw.vr:
        this.hbi = this.info & 15;
        this.gbi = this.Nyi & Ej;
        this.obi = 0;
        this.x = this.info;
        this.y = this.Nyi;
        this.Sfi = Ob;
        this.Jli = new ⵠⵠⵠⲆ.ri(Fj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case lw.Tr:
      case lw.yo:
      case lw.Ir:
      case lw.Fg:
      case lw.oc:
      case lw.FB:
      case lw.Bf:
      case lw.qu:
      case lw.fA:
        this.Sfi = db;
        this.Jli = new ⵠⵠⵠⲆ.ri(cc, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, sh, 5, Qe);
        break;
      case lw.ss:
        this.Sfi = Vu;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Qc, 1, Ko, 0, ue, 10),
          mi: oj,
          angle: 0
        };
        break;
      case lw.ZD:
        this.Ffi = Vb;
        this.Sfi = ub;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, 1, 0, 10, no),
          mi: false,
          angle: Vd
        };
        this.Xli = new ⵠⵠⵠⲆ.ri(false, Ej, 1.03, 0.98, 0.1, 0.1);
        this.cbi = [];
        break;
      case lw.Ub:
        this.angle = Math.PI * Math.random() / 2;
      case lw.Ar:
      case lw.Dp:
        this.Sfi = Cb;
        this.oli = new ⵠⵠⵠⲆ.ri(cc, 0.6, 0.6, so, lf, yr);
        break;
      case lw.Wf:
        this.Sfi = pb;
        this.oli = new ⵠⵠⵠⲆ.ri(Mr, 0.6, 0.6, Oq, Gj, 3);
        break;
      case lw.mc:
        this.scale = au;
        this.Sfi = Rb;
        this.Jli = new ⵠⵠⵠⲆ.ri(wo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(false, Js, bd, -Math.PI / 6, 0.5, ja);
        this.oli = new ⵠⵠⵠⲆ.ri(Bi, 0.6, 0.6, 0, Wg, er);
        break;
      case lw.Dvi:
        this.rbi = 0;
        this.Uli = [];
        this.mbi = du;
        this.Evi = Wu;
        this.Sfi = jb;
        this.Jli = new ⵠⵠⵠⲆ.ri(ks, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(cc, du, 0, -Math.PI / 6, 0.5, Mc);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, 0, lf, 3);
        break;
      case lw.hr:
        this.x = this.info;
        this.y = this.Nyi;
        this.scale = 1;
        this.Kli = 0;
        this.Sfi = yb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(oj, bd, Ou, -Math.PI / 6, 0.5, 1);
        this.oli = new ⵠⵠⵠⲆ.ri(Qc, 0.6, 0.6, 0, yh, Ie);
        break;
      case lw.ar:
        this.x = this.info;
        this.y = this.Nyi;
        this.scale = 1;
        this.Kli = 0;
        this.Sfi = cb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(false, 0, Cm, -Math.PI / O, 0.5, fn);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, Sh, Co, Wc);
        break;
      case lw.er:
        this.scale = hf;
        this.Sfi = xb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(false, xn, 0, -Math.PI / 6, 0.5, Mc);
        this.oli = new ⵠⵠⵠⲆ.ri(false, 0.6, 0.6, 0, 5, nh);
        break;
      case lw.tr:
        this.scale = Lh;
        this.Sfi = wb;
        this.Jli = new ⵠⵠⵠⲆ.ri(Qc, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(false, Jj, 0, -Math.PI / 6, 0.5, ja);
        this.oli = new ⵠⵠⵠⲆ.ri(Zh, 0.6, 0.6, 0, 5, E);
        break;
      case lw.dc:
        this.scale = fn;
        this.Sfi = Tb;
        this.Jli = new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ri(false, 0, 0, -Math.PI / jo, 0.5, 1);
        this.oli = new ⵠⵠⵠⲆ.ri(cc, 0.6, 0.6, 0, Me, 3);
        break;
      case lw.fo:
        this.Ifi = [];
        for (g = 0; g < et; g++) {
          this.Ifi.push({
            Sfi: Wb,
            Jli: new ⵠⵠⵠⲆ.ri(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.Ifi[0].x = this.x - 20.5;
            this.Ifi[Ng].y = this.y - 22.5;
            this.Ifi[Ko].x = this.x - 35.5;
            this.Ifi[1].y = this.y + 7.5;
            this.Ifi[2].x = this.x + 7.5;
            this.Ifi[yo].y = this.y - 30;
            this.Ifi[3].x = this.x + 22.5;
            this.Ifi[Wc].y = this.y;
            this.Ifi[Dd].x = this.x - 7.5;
            this.Ifi[Ha].y = this.y + 14.5;
            break;
          case Mc:
            this.Ifi[Ng].x = this.x - 30.5;
            this.Ifi[Cm].y = this.y - 22.5;
            this.Ifi[fn].x = this.x - 15.5;
            this.Ifi[au].y = this.y + 7.5;
            this.Ifi[Gi].x = this.x + 15.5;
            this.Ifi[2].y = this.y - 30;
            this.Ifi[3].x = this.x + 12.5;
            this.Ifi[er].y = this.y + yh;
            this.Ifi[Gs].x = this.x - 40.5;
            this.Ifi[4].y = this.y + 14.5;
            break;
          case Vn:
            this.Ifi[Gc].x = this.x - 20.5;
            this.Ifi[Ou].y = this.y - 20.5;
            this.Ifi[1].x = this.x - 35.5;
            this.Ifi[wg].y = this.y + 15.5;
            this.Ifi[ec].x = this.x + 7.5;
            this.Ifi[2].y = this.y - Yc;
            this.Ifi[3].x = this.x + 22.5;
            this.Ifi[3].y = this.y + Cd;
            this.Ifi[Ha].x = this.x - 7.5;
            this.Ifi[Jn].y = this.y + 1.5;
        }
        break;
      case lw.ra:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(wo, 1, ja, 0, as, gg),
          mi: false,
          angle: 0
        };
        this.Sfi = Ab;
        this.Uli = new ⵠⵠⵠⲆ.ri(cc, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ibi = new ⵠⵠⵠⲆ.ri(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case lw.LD:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, dm, Ic, bd, as, 10),
          mi: false,
          angle: qh
        };
        this.Sfi = Lb;
        this.Uli = new ⵠⵠⵠⲆ.ri(wo, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case lw.RD:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, X, 0, 10, 10),
          mi: Xq,
          angle: 0
        };
        this.Sfi = Uu;
        this.Uli = new ⵠⵠⵠⲆ.ri(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case lw.GD:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Qh, fo, 1, 0, 10, 10),
          mi: oj,
          angle: 0
        };
        this.Sfi = Hb;
        this.Uli = new ⵠⵠⵠⲆ.ri(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case lw.ND:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(zn, 1, 1, nj, 10, 10),
          mi: ui,
          angle: 0
        };
        this.Sfi = Ub;
        this.Uli = new ⵠⵠⵠⲆ.ri(ks, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case lw.WD:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Qc, ae, X, Ng, co, _),
          mi: false,
          angle: 0
        };
        this.Sfi = Mb;
        this.Uli = new ⵠⵠⵠⲆ.ri(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case lw.jD:
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, yd, 0, 10, Sg),
          mi: false,
          angle: nj
        };
        this.Sfi = Fb;
        this.Uli = new ⵠⵠⵠⲆ.ri(Qh, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case lw.Ca:
        this.Sfi = fb;
        this.rotate = 0;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(ui, 1, fo, 0, no, 10),
          mi: false,
          angle: 0
        };
        break;
      case lw.za:
        this.Sfi = Yb;
        this.rotate = Vd;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, 1, Js, 10, 10),
          mi: false,
          angle: 0
        };
        break;
      case lw.xa:
        this.Sfi = Gb;
        this.rotate = Ou;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Ys, 1, Lh, Js, jn, wd),
          mi: Ys,
          angle: Ea
        };
        break;
      case lw.Qa:
        this.Sfi = kb;
        this.rotate = 0;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, au, xn, gg, co),
          mi: false,
          angle: Vd
        };
        break;
      case lw.Sa:
        this.Sfi = lb;
        this.rotate = 0;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Ys, Jf, wg, qh, ic, 10),
          mi: re,
          angle: 0
        };
        break;
      case lw.ga:
        this._fi = Jb;
        this.Ffi = $b;
        this.rotate = xn;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, ae, 1, Cm, 10, 10),
          mi: Qh,
          angle: so
        };
        break;
      case lw.us:
        this.Sfi = Kl;
        this.Gli = Math.floor(this.x / 100);
        this.qli = Math.floor(this.y / Kn);
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, Jf, 0, rs, 10),
          mi: ks,
          angle: 0
        };
        this.opacity = Lo;
        this.zvi = Rl;
        break;
      case lw.Bs:
        this.Sfi = jl;
        this.gli = new ⵠⵠⵠⲆ.ri(Uo, ae, 1.15, au, 0.3, 0.3);
        this.color = Nf;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(kg, 1, 1, 0, 10, mm),
          mi: false,
          angle: 0
        };
        break;
      case lw.pa:
      case lw.Wn:
      case lw.Hs:
      case lw.eE:
      case lw._a:
        this.Sfi = nb;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(ui, 1, 1, 0, hg, 10),
          mi: Ys,
          angle: Ea
        };
        break;
      case lw.$n:
        this.Sfi = nb;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Ys, fo, 1, Gc, Ki, 10),
          mi: oj,
          angle: 0
        };
        this.zvi = Rl;
        break;
      case lw.Ta:
      case lw.ja:
      case lw.Ra:
      case lw.La:
      case lw.Xn:
      case lw.Gs:
      case lw.Fa:
      case lw.Wa:
      case lw.Na:
      case lw.Ha:
      case lw.Vn:
      case lw.Ws:
        this.Sfi = nb;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Uo, 1, yd, Jj, Ki, 10),
          mi: false,
          angle: 0
        };
        this.zvi = ql;
        break;
      case lw.As:
        this.Sfi = ab;
        this.opacity = Jf;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(wo, Lo, 1, Js, 10, mm),
          mi: false,
          angle: Nf
        };
        var n = this.angle % (Math.PI / z);
        if (n < Math.PI / 4) {
          this.angle -= n;
        } else {
          this.angle += Math.PI / z - n;
        }
        break;
      case lw.qo:
        this.Sfi = Jl;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case lw._vi:
        this.Sfi = Ol;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case lw.Ryi:
        this.Sfi = Hl;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case lw.Gyi:
        this.Sfi = $l;
        this.angle = Vn * (Math.PI * Math.random());
        break;
      case lw.Lyi:
        this.Sfi = Xl;
        this.angle = Math.random() * Math.PI * z;
        break;
      case lw.qa:
        this.mi = function (a) {
          this.lock = this.info & 8192 ? 1 : Ea;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.Sfi = Wl;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(Uo, 1, 1, Ea, 10, gg),
          mi: u,
          angle: 0
        };
        this.lock = 0;
        this.mi(this.action);
        break;
      case lw.Ps:
      case lw.Ts:
      case lw.js:
      case lw.Rs:
      case lw.Ls:
      case lw.Ns:
      case lw.UD:
      case lw.OD:
      case lw.YD:
      case lw.JD:
      case lw.KD:
      case lw.qs:
        this.Sfi = ib;
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(false, 1, Lo, du, rs, 10),
          mi: false,
          angle: 0
        };
        this.zvi = ql;
        break;
      case lw.TD:
        this._fi = Zb;
        this.Sfi = Kb;
        this.Ffi = zb;
        this.Uli = new ⵠⵠⵠⲆ.ri(oj, ja, 1.23, 1.18, 0.02, 0.02);
        this.gli = new ⵠⵠⵠⲆ.ri(false, ae, 1.23, 1.18, 0.04, 0.04);
        this.oli = {
          hli: new ⵠⵠⵠⲆ.ri(u, 1, hf, qh, 10, 10),
          mi: false,
          angle: Ng
        };
        this.mi = function (a) {
          this.action = a;
        };
    }
  }
  function pw(b, f, i, e, j, a) {
    const k = ((b + 16631) * 214013 + 2531011) % 4294967296;
    const l = ((f + 38140) * 2147483629 + 2147483587) % 2147483647;
    const m = ~(i & 9232) & 9232 | ~(i & 9232) & i;
    const h = e ^ 59044;
    const g = (0 << (a >> 16 & 255)) + (8 << (a & 255)) + (Wn << (a >> 24 & 255)) + (24 << (a >> 8 & 255));
    const c = ak(k, l, m, h, (V << (j >> 16 & 255)) + (0 << (j >> 8 & 255)) + (24 << (j >> 24 & 255)) + (16 << (j & 255)));
    ak(g, k, l, m, h);
    return (c | 29500) & ~(c & 29500);
  }
  function qw(b) {
    function i(b, c, d, e, a) {
      for (var f = Vd; f < a && yd !== j(b, c, d, e, hd); f++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function j(b, f, i, e, j) {
      var a = f + Math.floor(ck.aki.get() * e);
      var k = i + Math.floor(e * ck.aki.get());
      var l = 10 + Math.floor((ck.rfi - a - rq) * ck.aki.get());
      var n = jc + Math.floor((ck.ofi - k - 20) * ck.aki.get());
      var h = l + a;
      var g = n + k;
      for (var c = 0; ck.hfi.length > c; c++) {
        var o = ck.hfi[c];
        if (ⵠⵠⵠⲆ.Qi(l, h, n, g, o.x1 / Kn - j, o.x2 / 100 + j, o.y1 / 100 - j, o.y2 / 100 + j) === 1) {
          return 0;
        }
      }
      ck.hfi.push(new ck.ski(b, l, n, a, k, 15));
      return 1;
    }
    function e(b, c, d) {
      var e = c;
      for (var f = d; f < ck.ofi; f++) {
        for (var g = c; ck.rfi > g && (f === d && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
          b[f][g] = hf;
        }
        if (e > g) {
          break;
        }
      }
      ck.hfi.push(new ck.ski(ck.bvi, c, d, e - c + fn, f - d, 15));
    }
    function n(b, d, j, e, k, a, l, n) {
      var o = Math.floor(l / 2);
      var h = Math.max(1, Math.floor(l / 2));
      var g = Math.floor(n / eu);
      var c = Math.max(Lo, Math.floor(n / 2));
      for (var m = 0; m < j; m++) {
        for (var q = b - g; q < b + c; q++) {
          for (var r = d - o; r < d + h; r++) {
            if (w(q, r, "wtb", Nf, au) === 1) {
              a.push([q, r, 1]);
            }
          }
        }
        b += e;
        d += k;
      }
    }
    function a(a, d) {
      var i = ck.hfi[a];
      var e = Math.floor(i.y1 / Qg);
      var j = Math.floor(i.x1 / 100);
      var k = Math.floor(i.K / 100);
      var q = j + (B = Math.floor(i.w / Qg));
      var o = Cg;
      var r = k;
      var s = e;
      for (var t = j + 10 + Math.floor(ck.aki.get() * (B - 20)), x = t - 4; t + Gs > x; x++) {
        w(e - fi, x, "wtb", Gc, 1);
      }
      while (r > nj) {
        if (o !== Cs) {
          if (Ki > r) {
            for (C = ja; Ng < r; C++) {
              n(s, t, dm, 1, ke, d, C, 1);
              r -= ja;
              s += 1;
            }
          } else if (o !== hf) {
            o = Jf;
            var y = Math.floor(1 + ck.aki.get() * 2);
            var z = 1 + Math.floor(ck.aki.get() * 4);
            if (j + Ms > t) {
              n(s, t, y, Js, 1, d, z, z);
              t += y;
            } else if (t > q - 16) {
              n(s, t, y, Vd, -Jf, d, z, z);
              t -= y;
            } else if (ck.aki.get() > 0.5) {
              n(s, t, y, Ea, 1, d, z, z);
              t += y;
            } else {
              n(s, t, y, Js, -dm, d, z, z);
              t -= y;
            }
          } else {
            var A = Math.min(r, Math.floor(Ej + ck.aki.get() * 4));
            var B = 1 + Math.floor(ck.aki.get() * 4);
            n(s, t, A, hf, 0, d, B, B);
            o = Nf;
            r -= A;
            s += A;
          }
        } else {
          for (var C = 10; au < C; C--) {
            n(s, t, 1, Jf, qh, d, C, 1);
            r -= 1;
            s += Lo;
          }
          o = 0;
        }
      }
      for (x = t - hf; t + 2 > x; x++) {
        w(s, x, "wtb", Cm, fi);
      }
    }
    function q(a, b) {
      for (var c = 0; b.length > c; c++) {
        r(b[c][Ka], b[c][Mc], a, b[c][Te]);
      }
    }
    function r(b, c, d, e) {
      if (m(b, c) && (ⲆⲆⲆᐃ = $w.ebi, Ug === ⲆⲆⲆᐃ[b][c] && (ⲆⲆⲆᐃ[b][c] = {}), ⲆⲆⲆᐃ[b][c].r === undefined)) {
        var f = Cm;
        if (m(b - wg, c) && ⲆⲆⲆᐃ[b - Ej][c] !== Ls && lq !== ⲆⲆⲆᐃ[b - Mc][c].wtb) {
          f += Cg;
        }
        if (m(b, c - 1) && ⲆⲆⲆᐃ[b][c - 1] !== undefined && ⲆⲆⲆᐃ[b][c - 1].wtb !== undefined) {
          f += Fg;
        }
        if (m(b, c + 1) && ⲆⲆⲆᐃ[b][c + 1] !== undefined && ⲆⲆⲆᐃ[b][c + fi].wtb !== undefined) {
          f += Tr;
        }
        if (m(b + au, c) && ⲆⲆⲆᐃ[b + 1][c] !== undefined && Pq !== ⲆⲆⲆᐃ[b + Ko][c].wtb) {
          f += 64;
        }
        if (m(b - 1, c - yd) && (f & fm + 2) === 8 + Cg && ⲆⲆⲆᐃ[b - Ej][c - Lo] !== lq && _e !== ⲆⲆⲆᐃ[b - dm][c - ja].wtb) {
          f += 1;
        }
        if (m(b - 1, c + 1) && (f & _r + 2) == 18 && ⲆⲆⲆᐃ[b - Lo][c + yd] !== _e && ⲆⲆⲆᐃ[b - 1][c + Ko].wtb !== undefined) {
          f += 4;
        }
        if (m(b + 1, c - 1) && (f & 72) === ir + 64 && A !== ⲆⲆⲆᐃ[b + 1][c - Lo] && ⲆⲆⲆᐃ[b + Lo][c - 1].wtb !== undefined) {
          f += 32;
        }
        if (m(b + 1, c + yd) && (f & Hh + 64) == 80 && ⲆⲆⲆᐃ[b + Mc][c + 1] !== undefined && ⲆⲆⲆᐃ[b + 1][c + ja].wtb !== undefined) {
          f += 128;
        }
        ⲆⲆⲆᐃ[b][c].r = {};
        ⲆⲆⲆᐃ[b][c].r.nbi = f;
        ⲆⲆⲆᐃ[b][c].r.sbi = e;
        ⲆⲆⲆᐃ[b][c].r.j = ck.rki(d, oc * c + 50, b * 100 + 50) - 400;
        ⲆⲆⲆᐃ[b][c].r.x = c * To + 50;
        ⲆⲆⲆᐃ[b][c].r.y = oc * b + 50;
      }
    }
    function o(a, b) {
      for (var c = 0; c < 3; c++) {
        p(a, "s", c, Math.floor(b * Ch));
      }
      for (c = 0; c < 3; c++) {
        p(a, "f", c, Math.floor(b * 24));
      }
      for (c = 0; c < yr; c++) {
        p(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (c = xn; Xg > c; c++) {
        p(a, "g", c, Math.floor(b * Qj));
      }
      f(a);
    }
    function h(a) {
      for (var b = 0; b < xa; b++) {
        p(a, "s", b, ge);
      }
      for (b = sh; b < 3; b++) {
        p(a, "a", b, Ps);
      }
      for (b = Ka; E > b; b++) {
        p(a, "d", b, 1);
      }
      f(a);
    }
    function g(b, c) {
      for (var d = 0; d < 6; d++) {
        p(b, "t", d, Math.floor(c * 20));
      }
      for (d = 0; d < 4; d++) {
        p(b, "b", d, Math.floor(c * 20));
      }
      for (d = xn; d < Xg; d++) {
        p(b, "s", d, Math.floor(c * 20));
      }
      var g = [];
      a(b, g);
      q(b, g);
      g = [];
      p(b, "p", Ka, Math.floor(c * 24));
      for (d = 0; d < 3; d++) {
        p(b, "g", d, Math.floor(lh * c));
      }
      if (iw.wli === ck.mode) {
        for (d = Sh; d < 3; d++) {
          p(b, "d", d, Math.floor(c * E));
        }
        for (d = 0; d < 3; d++) {
          p(b, "a", d, Math.floor(c * 2));
        }
      }
      f(b);
    }
    function w(b, c, d, e, f) {
      if (b >= qh && c >= 0 && ck.ofi > b && ck.rfi > c) {
        ⲆⲆⲆᐃ = $w.ebi;
        if (ⲆⲆⲆᐃ[b][c] === Z) {
          ⲆⲆⲆᐃ[b][c] = {};
        }
        if (ⲆⲆⲆᐃ[b][c][d] !== ug) {
          return ke;
        } else {
          ⲆⲆⲆᐃ[b][c][d] = [];
          ⲆⲆⲆᐃ[b][c][d][e] = [{
            x: c * 100 + 50,
            y: b * Kn + 50
          }];
          if (f === Jf) {
            (function (a, b, c, d) {
              Kd.push([a, b, c, d]);
            })(d, e, b, c);
          }
          return 1;
        }
      }
    }
    function c(b, c) {
      for (var d = sh; d < 6; d++) {
        p(b, "t", d, Math.floor(c * 80));
      }
      for (d = 0; d < 4; d++) {
        p(b, "b", d, Math.floor(c * 80));
      }
      for (d = 0; E > d; d++) {
        p(b, "s", d, Math.floor(c * 50));
      }
      var g = [];
      for (d = Ou; d < Th; d++) {
        a(b, g);
      }
      q(b, g);
      g = [];
      p(b, "p", so, Math.floor(c * 28));
      for (d = 0; d < fa; d++) {
        p(b, "g", d, Math.floor(c * 7));
      }
      for (d = 0; d < 3; d++) {
        p(b, "d", d, Math.floor(c * 2));
      }
      for (d = 0; d < Ie; d++) {
        p(b, "a", d, Math.floor(fo * c));
      }
      for (d = 0; d < 3; d++) {
        p(b, "m", d, Math.floor(c * 1));
      }
      p(b, "a", 0, Math.floor(c * Mc));
      f(b);
    }
    function d(a, b) {
      (function (b, d) {
        var f = ck.hfi[d];
        for (var e = 0, i = Cm; i < b && e < 10000; e++) {
          var j = f.y1 + f.K * ck.aki.get();
          var k = f.x1 + ck.aki.get() * f.w;
          var l = Math.floor(j / 100);
          var p = Math.floor(k / hs);
          if (ck.rki(d, p * 100 + 50, l * Gh + 50) >= 600) {
            for (var q = 1, t = l - mn; q === 1 && l + 4 >= t; t++) {
              for (var u = p - 4; q === fo && p + mn >= u; u++) {
                if ($w.ebi[t][u] !== undefined) {
                  q = Oq;
                }
              }
            }
            if (Ng !== q) {
              w(l, p, "la", i % Th, 0);
              i++;
            }
          }
        }
      })(b * 80, a);
      for (var c = 0; c < Vr; c++) {
        p(a, "s", c, Math.floor(b * 12));
      }
      for (c = xn; c < 3; c++) {
        p(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; Sr > c; c++) {
        p(a, "re", c, Math.max(yd, Math.floor(b * 1)), 0.2);
      }
      for (c = bd; c < Qe; c++) {
        p(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      f(a);
    }
    function m(a, b) {
      return a >= so && b >= 0 && a < ck.ofi && b < ck.rfi;
    }
    function f(a) {
      var b = ck.hfi[a];
      w(-3 + Math.floor(b.y2 / yq), -X + Math.floor(b.x2 / 100), "s", so, 0);
      w(jh + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / Kn), "s", Ou, Cm);
      w(-3 + Math.floor(b.y2 / Re), Lh + Math.floor(b.x1 / _j), "s", Oq, 0);
      w(yr + Math.floor(b.y1 / hs), fn + Math.floor(b.x1 / io), "s", 0, 0);
    }
    function p(b, d, i, e, j) {
      var k = ck.hfi[b];
      var n = Math.floor(k.x1 / 100);
      var q = Math.floor(k.y1 / oc);
      var s = Math.floor(k.w / 100);
      var t = Math.floor(k.K / 100);
      if (_e !== j) {
        j = X - j;
        n += Math.floor(s * j / 2);
        q += Math.floor(j * t / 2);
        s -= Math.floor(s * j);
        t -= Math.floor(t * j);
      }
      var v = $w.ebi;
      for (var c = 0, x = 0; e > c && x <= 50000; x++) {
        var y = q + Math.floor(ck.aki.get() * t);
        var z = n + Math.floor(s * ck.aki.get());
        if (ck.rki(b, z * 100 + 50, y * io + 50) >= 400 && ((B = v[y][z + 1]) === undefined || B[d] === undefined || B[d][i] === ug) && ((B = v[y][z - 1]) === undefined || B[d] === undefined || B[d][i] === undefined) && ((B = v[y + 1][z]) === lq || B[d] === Go || B[d][i] === undefined) && ((B = v[y - fo][z]) === undefined || B[d] === ch || B[d][i] === undefined) && ((B = v[y + Lh][z - 1]) === undefined || Rj === B[d] || B[d][i] === undefined) && ((B = v[y - ja][z + yd]) === undefined || B[d] === undefined || B[d][i] === undefined)) {
          var B = v[y + 1][z + 1];
          if (Pq === B || B[d] === Oh || A === B[d][i]) {
            if ((B = v[y - 1][z - Lh]) === ug || ch === B[d] || yc === B[d][i]) {
              if (v[y][z] === undefined) {
                w(y, z, d, i, 1);
                c++;
              }
            }
          }
        }
      }
    }
    function s(a, b) {
      for (var c = Sh; c < 3; c++) {
        p(a, "s", c, Math.floor(b * de));
      }
      for (c = Ng; c < Vr; c++) {
        p(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      p(a, "c", du, Math.floor(b * 36));
      var d = [];
      (function (b, d) {
        var f = ck.hfi[b];
        var e = Math.floor(f.y1 / kh);
        var i = Math.floor(f.x1 / fc);
        var a = Math.floor(f.K / vo);
        var j = Math.floor(f.w / Kn);
        var k = e + Math.floor(a / 2);
        var l = i + Math.floor(j / 2);
        for (var h = 0; h < 3; h++) {
          w(n = Math.floor(k - 3 + ck.aki.get() * 6), o = Math.floor(l - 3 + ck.aki.get() * 6), "plm", h, fi);
        }
        for (h = sh; h < 80; h++) {
          var n;
          var o;
          if (w(n = Math.floor(k - 3 + ck.aki.get() * 6), o = Math.floor(l - 3 + Th * ck.aki.get()), "wtb", Js, yd) === wg) {
            d.push([n, o, 0]);
          }
        }
      })(a, d);
      q(a, d);
      d = [];
    }
    function l(a, b, c) {
      if (a[b]) {
        for (Ge = sh; a[b].length > Ge; Ge++) {
          if (a[b][Ge]) {
            for (ⵠΔⲆΔ = 0; ⵠΔⲆΔ < a[b][Ge].length; ⵠΔⲆΔ++) {
              a[b][Ge][ⵠΔⲆΔ].oli = c;
              a[b][Ge][ⵠΔⲆΔ].mi = false;
              a[b][Ge][ⵠΔⲆΔ].time = 0;
              a[b][Ge][ⵠΔⲆΔ].angle = Jj;
            }
          }
        }
      }
    }
    this.mode = iw.Cli;
    this.Hyi = b;
    this.oki = 0;
    this.hki = Xa;
    this.Wfi = [];
    this.Kfi = [];
    this.Kfi[lw.$E] = [];
    this.Kfi[lw.fo] = [];
    this.Kfi[lw.Tr] = [];
    this.Kfi[lw.yo] = [];
    this.Kfi[lw.Bv] = [];
    this.Kfi[lw.MA] = [];
    this.Kfi[lw.yr] = [];
    this.Kfi[lw.ir] = [];
    this.Kfi[lw.tr] = [];
    this.Kfi[lw.er] = [];
    this.Kfi[lw.ar] = [];
    this.Kfi[lw.Bf] = [];
    this.Kfi[lw.qu] = [];
    this.Kfi[lw.Fg] = [];
    this.Kfi[lw.fA] = [];
    this.Kfi[lw.vr] = [];
    this.Kfi[lw.lr] = [];
    this.Kfi[lw.oc] = [];
    this.Kfi[lw.FB] = [];
    this.Kfi[lw.dc] = [];
    this.Kfi[lw.mc] = [];
    this.Kfi[lw.mE] = [];
    this.Kfi[lw.qo] = [];
    this.Kfi[lw._vi] = [];
    this.Kfi[lw.Ryi] = [];
    this.Kfi[lw.Gyi] = [];
    this.Kfi[lw.Lyi] = [];
    this.Kfi[lw.Wf] = [];
    this.Kfi[lw.Dp] = [];
    this.Kfi[lw.Ar] = [];
    this.Kfi[lw.ZD] = [];
    this.Kfi[lw.ss] = [];
    this.Kfi[lw.Ir] = [];
    this.Kfi[lw.Wn] = [];
    this.Kfi[lw.oo] = [];
    this.Kfi[lw.PD] = [];
    this.Kfi[lw.wr] = [];
    this.Kfi[lw.Fa] = [];
    this.Kfi[lw.Wa] = [];
    this.Kfi[lw.Na] = [];
    this.Kfi[lw.Ha] = [];
    this.Kfi[lw.Vn] = [];
    this.Kfi[lw.Ws] = [];
    this.Kfi[lw.Ta] = [];
    this.Kfi[lw.ja] = [];
    this.Kfi[lw.Ra] = [];
    this.Kfi[lw.La] = [];
    this.Kfi[lw.Xn] = [];
    this.Kfi[lw.Gs] = [];
    this.Kfi[lw.As] = [];
    this.Kfi[lw.UD] = [];
    this.Kfi[lw.OD] = [];
    this.Kfi[lw.YD] = [];
    this.Kfi[lw.JD] = [];
    this.Kfi[lw.KD] = [];
    this.Kfi[lw.qs] = [];
    this.Kfi[lw.Ps] = [];
    this.Kfi[lw.Ts] = [];
    this.Kfi[lw.js] = [];
    this.Kfi[lw.Rs] = [];
    this.Kfi[lw.Ls] = [];
    this.Kfi[lw.Ns] = [];
    this.Kfi[lw.TD] = [];
    this.Kfi[lw._a] = [];
    this.Kfi[lw.Hs] = [];
    this.Kfi[lw.qa] = [];
    this.Kfi[lw.Da] = [];
    this.Kfi[lw.Ea] = [];
    this.Kfi[lw.$n] = [];
    this.Kfi[lw.us] = [];
    this.Kfi[lw.pa] = [];
    this.Kfi[lw.ra] = [];
    this.Kfi[lw.ND] = [];
    this.Kfi[lw.jD] = [];
    this.Kfi[lw.qD] = [];
    this.Kfi[lw.GD] = [];
    this.Kfi[lw.WD] = [];
    this.Kfi[lw.RD] = [];
    this.Kfi[lw.LD] = [];
    this.Kfi[lw.ga] = [];
    this.Kfi[lw.Ca] = [];
    this.Kfi[lw.za] = [];
    this.Kfi[lw.xa] = [];
    this.Kfi[lw.Qa] = [];
    this.Kfi[lw.Sa] = [];
    this.Kfi[lw.eE] = [];
    this.Kfi[lw.Ub] = [];
    this.Kfi[lw.Bs] = [];
    this.Nfi = [];
    this.rfi = 260;
    this.ofi = 260;
    this.fvi = 100;
    this.pvi = 100;
    this.w = this.fvi * this.rfi;
    this.K = this.ofi * this.pvi;
    this.aki = new ze.Xi();
    this.hfi = [];
    this.Zbi = new ⵠⵠⵠⲆ.ri(ks, Oq, Lh, 0, hf, fi);
    this.transition = Ys;
    this.vvi = [];
    this.gfi = 0;
    this.cfi = fi;
    this.dfi = 2;
    this.mfi = 3;
    this.bvi = 4;
    this.ufi = jn;
    this.vvi[this.gfi] = {
      cvi: 1,
      pfi: [19, 58, 43],
      lfi: [4, 43, 48],
      mvi: ["#133a2b", "#042b30"]
    };
    this.vvi[this.bvi] = {
      cvi: 0,
      pfi: [11, 106, 132],
      lfi: [9, 55, 63],
      mvi: ["#0B6A84", "#09373F"]
    };
    this.vvi[this.cfi] = {
      cvi: 0,
      pfi: [235, 242, 240],
      lfi: [19, 97, 103],
      mvi: [lj[Oc], "#136167"]
    };
    this.vvi[this.dfi] = {
      cvi: Jj,
      pfi: [45, 32, 23],
      mvi: ["#2D2017", "#031C1E"],
      lfi: [3, 28, 30]
    };
    this.vvi[this.mfi] = {
      lfi: [24, 61, 60],
      pfi: [74, 74, 74],
      mvi: ["#4A4A4A", "#183D3C"],
      cvi: 0
    };
    this.vvi[this.ufi] = {
      pfi: [235, 216, 166],
      lfi: [9, 61, 56],
      cvi: 0,
      mvi: ["#EBD8A6", "#093D38"]
    };
    this.ski = function (b, c, d, e, f, a) {
      this.x1 = c * 100;
      this.y1 = Gh * d;
      this.w = B * e;
      this.K = bi * f;
      this.x2 = (c + e) * Jo;
      this.y2 = (d + f) * 100;
      this.xE = b;
      this.hi = a === Rc ? 15 : a;
    };
    this.gki = -1000000;
    this.Mbi = this.gki;
    this.Dbi = this.gki;
    this.Gvi = this.gki;
    this.Uyi = this.gki;
    this.Oyi = this.gki;
    this.Yyi = this.gki;
    this.Abi = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / Qg);
      var f = Math.floor(c / B);
      b.Mbi = ck.gki;
      b.Dbi = ck.gki;
      b.Gvi = ck.gki;
      b.Uyi = ck.gki;
      b.Yyi = ck.gki;
      b.Bbi = ck.gki;
      for (var a = 0; ck.bvi !== ck.hfi[a].xE; a++) {
        if (ck.gfi === ck.hfi[a].xE) {
          var g = ck.rki(a, c, d);
          b.Uyi = Math.max(b.Uyi, g);
          if (g > ke && ck.cki(a, c, d) === 1) {
            b.Bbi = 1;
          }
        } else if (ck.cfi === ck.hfi[a].xE) {
          b.Mbi = Math.max(b.Mbi, ck.rki(a, c, d));
        } else if (ck.ufi === ck.hfi[a].xE) {
          b.Dbi = Math.max(b.Dbi, ck.rki(a, c, d));
        } else if (ck.hfi[a].xE === ck.dfi) {
          b.Gvi = Math.max(b.Gvi, ck.rki(a, c, d));
        } else if (ck.hfi[a].xE === ck.mfi) {
          b.Yyi = Math.max(b.Yyi, ck.rki(a, c, d));
        }
      }
      if ($w.ebi[e][f].iblk) {
        b.Bbi = 1;
      }
      if (ck.dki(f, e)) {
        b.Oyi = b.gki;
      } else if ($w.ebi[e][f].wtb || b.Mbi < 0 && Js > b.Gvi && b.Uyi < 0 && b.Bbi < 0 && b.Yyi < Ng && b.Dbi < 0) {
        b.Oyi = ja;
      } else {
        b.Oyi = b.gki;
      }
    };
    this.uvi = function (a, b) {
      ck.Mbi = ck.gki;
      ck.Dbi = ck.gki;
      ck.Gvi = ck.gki;
      ck.Yyi = ck.gki;
      ck.Uyi = ck.gki;
      for (var c = 0; ck.bvi !== ck.hfi[c].xE; c++) {
        if (ck.gfi === ck.hfi[c].xE) {
          ck.Uyi = Math.max(ck.Uyi, ck.rki(c, a, b));
        } else if (ck.hfi[c].xE === ck.cfi) {
          ck.Mbi = Math.max(ck.Mbi, ck.rki(c, a, b));
        } else if (ck.ufi === ck.hfi[c].xE) {
          ck.Dbi = Math.max(ck.Dbi, ck.rki(c, a, b));
        } else if (ck.dfi === ck.hfi[c].xE) {
          ck.Gvi = Math.max(ck.Gvi, ck.rki(c, a, b));
        } else if (ck.mfi === ck.hfi[c].xE) {
          ck.Yyi = Math.max(ck.Yyi, ck.rki(c, a, b));
        }
      }
      if (ck.Mbi < 0 && ck.Yyi < Sh && ck.Uyi < Oq && ck.Yyi < 0 && ck.Dbi < Nf) {
        ck.Oyi = wg;
      } else {
        ck.Oyi = ck.gki;
      }
    };
    this.cki = function (b, c, d) {
      var e = ck.hfi[b];
      var f = Gc;
      ⵠⲆⵠᐃ = e.x1 + 30 + ((e.hi & iw.Avi) === so ? 150 : du);
      var g = c - ⵠⲆⵠᐃ;
      if ((e.hi & iw.Avi) > 0 && g > 0 && g < 320) {
        f = Lo;
      }
      ⲆΔⲆᐃ = e.y1 + 250 + (e.hi & iw.Mvi ? 0 : 150);
      g = d - ⲆΔⲆᐃ;
      if ((e.hi & iw.Mvi) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ᐃⵠⵠⵠ = e.x2 + 80 + (e.hi & iw.yvi ? Nf : -200);
      g = ᐃⵠⵠⵠ - c;
      if ((e.hi & iw.yvi) > 0 && g > 0 && g < 320) {
        f = Ps;
      }
      ΔᐃΔⲆ = e.y2 - 200 + (Vd === (e.hi & iw.wvi) ? -200 : bd);
      g = ΔᐃΔⲆ - d;
      if (qh < (e.hi & iw.wvi) && xn < g && g < 320) {
        f = Jf;
      }
      if (ⵠⲆⵠᐃ <= c && c <= ᐃⵠⵠⵠ && d >= ⲆΔⲆᐃ && ΔᐃΔⲆ >= d) {
        return f;
      } else {
        return 0;
      }
    };
    this.rki = function (b, c, d) {
      var e = ck.hfi[b];
      ⵠⲆⵠᐃ = e.x1 + 30;
      ⲆΔⲆᐃ = e.y1 + 250;
      ᐃⵠⵠⵠ = e.x2 + 80;
      ΔᐃΔⲆ = e.y2 - 200;
      if (ⵠⲆⵠᐃ <= c && ᐃⵠⵠⵠ >= c && d >= ⲆΔⲆᐃ && ΔᐃΔⲆ >= d) {
        return Math.min(c - ⵠⲆⵠᐃ, ᐃⵠⵠⵠ - c, d - ⲆΔⲆᐃ, ΔᐃΔⲆ - d);
      }
      var f = -1000000;
      if (c - ⵠⲆⵠᐃ < 0) {
        f = Math.max(f, c - ⵠⲆⵠᐃ);
      } else if (ᐃⵠⵠⵠ - c < 0) {
        f = Math.max(f, ᐃⵠⵠⵠ - c);
      }
      ᐃᐃᐃⵠΔΔⲆ = -1000000;
      if (ⲆΔⲆᐃ > d || ΔᐃΔⲆ < d) {
        if (d - ⲆΔⲆᐃ < 0) {
          ᐃᐃᐃⵠΔΔⲆ = Math.max(ᐃᐃᐃⵠΔΔⲆ, d - ⲆΔⲆᐃ);
        } else {
          ᐃᐃᐃⵠΔΔⲆ = Math.max(ᐃᐃᐃⵠΔΔⲆ, ΔᐃΔⲆ - d);
        }
        f = f !== -1000000 && ᐃᐃᐃⵠΔΔⲆ !== -1000000 ? Math.min(f, ᐃᐃᐃⵠΔΔⲆ) : ᐃᐃᐃⵠΔΔⲆ;
      }
      return f;
    };
    this.mki = function (b, c, d) {
      var e = d;
      var f = c;
      w(e, f, "isl", b, 1);
      for (var a = 0; a < 4; a++) {
        for (var g = 0; g < 3; g++) {
          w(e - g, f - a, "iblk", 0);
          w(e + g, f - a, "iblk", 0);
          w(e + g, f + a, "iblk", bd);
          w(e - g, f + a, "iblk", Jj);
        }
      }
      if (b === 0) {
        for (a = 0; a < 2; a++) {
          w(e - a, f - 4, "iblk", 0);
          w(e + a, f - 4, "iblk", Sh);
          w(e - a, f + 4, "iblk", 0);
          w(e + a, f + 4, "iblk", xn);
        }
        for (a = du; er > a; a++) {
          w(e - fa, f + a, "iblk", 0);
          w(e + 3, f + a, "iblk", 0);
          w(e - 3, f - a, "iblk", 0);
          w(e + 3, f - a, "iblk", Cm);
        }
        w(e - yo, f - k, "iblk", Oq);
        w(e - Xg, f - E, "iblk", 0);
        w(e + wc, f + 4, "iblk", Vd);
        w(e + 3, f + oe, "iblk", ke);
      } else if (ae === b) {
        for (a = xn; a < 3; a++) {
          w(e - a, f - 4, "iblk", Cm);
          w(e + a, f - 4, "iblk", ke);
          w(e - a, f + pj, "iblk", nj);
          w(e + a, f + k, "iblk", nj);
        }
        for (a = sh; a < 4; a++) {
          w(e - 3, f + a, "iblk", 0);
          w(e + 3, f + a, "iblk", 0);
          w(e - Xg, f - a, "iblk", nj);
          w(e + 3, f - a, "iblk", 0);
        }
      } else if (b === 2) {
        for (a = 0; a < 2; a++) {
          w(e - a, f - 4, "iblk", 0);
          w(e + a, f - Jn, "iblk", 0);
          w(e - a, f + Jr, "iblk", 0);
          w(e + a, f + eh, "iblk", 0);
        }
        for (a = sh; Lc > a; a++) {
          w(e - 3, f + a, "iblk", 0);
          w(e + 3, f + a, "iblk", du);
          w(e - 3, f - a, "iblk", 0);
          w(e + 3, f - a, "iblk", 0);
        }
      }
    };
    this.uki = function (b) {
      for (var c = 0; c < ck.hfi.length && b > 0; c++) {
        var d = ck.hfi[c];
        if (d.xE === ck.bvi && d.w > 1800 && d.K > 1000) {
          var f = Math.floor((d.x1 + d.w / Cg) / 100);
          var g = Math.floor((d.y1 + d.K / 2) / _j);
          ck.mki(b % 3, f, g);
          for (var h = 0; mq > h; h++) {
            var j = g - 2 + Math.floor(eh * ck.aki.get());
            var k = f - fa + Math.floor(ck.aki.get() * 6);
            if ($w.ebi[j][k].s === undefined) {
              w(j, k, "plm", h);
            }
            j = g - Te + Math.floor(ck.aki.get() * 4);
            k = f - xa + Math.floor(ei * ck.aki.get());
            if (yc === $w.ebi[j][k].plm) {
              w(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(Gs * ck.aki.get());
          k = f - fa + Math.floor(ck.aki.get() * 6);
          if ($w.ebi[j][k].plm === undefined && Lr === $w.ebi[j][k].s) {
            w(j, k, "p", 0, fn);
          }
          b--;
        }
      }
    };
    this.fki = function (j) {
      ck.aki.Vi(j);
      var m = Jj;
      while (fn) {
        if (++m > 10000) {
          return;
        }
        ck.hfi = [];
        if (ck.oki === 0 && (ck.mode === iw.Bli || iw.Qli === ck.mode || ck.mode === iw.Cli)) {
          ck.oki = Hr;
        }
        if (ck.mode === iw.wli) {
          ck.hfi.push(new ck.ski(ck.gfi, 2, 2, 80, 80, 15));
        } else if (iw.zli === ck.mode) {
          ck.hfi.push(new ck.ski(ck.gfi, 2, z, 150, 150, 15));
        } else if (ck.oki !== Js && Vd < ck.oki.length && Sr < ck.oki[0].length) {
          for (var n = Nf; ck.oki.length > n; n++) {
            var r = ck.oki[n];
            if (Ou !== r[0]) {
              break;
            }
            var t = iw.gfi;
            switch (r[1]) {
              case "FOREST":
                t = ck.gfi;
                break;
              case "WINTER":
                t = ck.cfi;
                break;
              case "DESERT":
                t = ck.ufi;
                break;
              case "LAVA":
                t = ck.dfi;
                break;
              case "DRAGON":
                t = ck.mfi;
            }
            ck.hfi.push(new ck.ski(t, r[tm], r[xa], r[Jr], r[5], r[6], r[7]));
          }
        } else if (ke !== ck.oki) {
          for (n = Ng; ck.oki.length > n; n++) {
            var u = ck.oki[n];
            t = iw.gfi;
            switch (u[0]) {
              case "FOREST":
                t = ck.gfi;
                break;
              case "WINTER":
                t = ck.cfi;
                break;
              case "DESERT":
                t = ck.ufi;
                break;
              case "LAVA":
                t = ck.dfi;
                break;
              case "DRAGON":
                t = ck.mfi;
            }
            if (i(t, u[Ej], u[2], 0, (n + 1) * Tt) === so) {
              break;
            }
          }
          if (n !== ck.oki.length) {
            continue;
          }
        }
        break;
      }
      ⵠᐃᐃⵠΔΔΔ();
      var v = [];
      for (var p = du; ck.ofi > p; p++) {
        v[p] = new Array(ck.rfi);
        for (var x = 0; x < ck.rfi; x++) {
          v[p][x] = Sh;
        }
      }
      for (p = 0; ck.hfi.length > p; p++) {
        for (var B = (u = ck.hfi[p]).x2 / 100, C = u.y2 / Kn, D = u.x1 / Vs; D <= B; D++) {
          for (var E = u.y1 / 100; E <= C; E++) {
            v[E][D] = Lh;
          }
        }
      }
      for (E = 0; E < ck.ofi; E++) {
        for (D = Gc; D < ck.rfi; D++) {
          if (so === v[E][D]) {
            e(v, D, E);
          }
        }
      }
      $w = {
        w: ck.rfi,
        K: ck.ofi,
        ebi: []
      };
      for (p = Ka; ck.ofi > p; p++) {
        $w.ebi[p] = [];
      }
      if (ck.oki !== 0 && ck.oki.length > 0 && ck.oki[Oq].length > on) {
        for (n = 0; ck.oki.length > n; n++) {
          r = ck.oki[n];
          if (r[wg] === "isl") {
            ck.mki(r[Gi], r[Wc], r[Nr]);
          }
        }
      } else {
        ck.uki(ck.hki);
      }
      if (ck.oki !== Vd && ck.oki.length > 0 && ck.oki[qh].length > yr) {
        var F = [];
        for (n = qh; n < ck.oki.length; n++) {
          if ((r = ck.oki[n])[Gc] === 1) {
            if (r[1] === "r") {
              w(r[xa], r[2], "wtb", 0, 1);
              F.push([r[yr], r[2], r[mn]]);
            } else {
              w(r[4], r[3], r[Ic], r[En], r[5]);
            }
          }
        }
        q(0, F);
        F = [];
      } else {
        for (p = Sh; p < ck.hfi.length; p++) {
          u = ck.hfi[p];
          if (iw.zli === ck.mode) {
            if (ck.gfi === u.xE) {
              c(p, u.w / (bi * oc));
            }
          } else {
            if (ck.gfi === u.xE) {
              g(p, u.w / (wr * vo));
            }
            if (u.xE === ck.dfi) {
              d(p, u.w / (_j * 100));
            }
            if (u.xE === ck.cfi) {
              o(p, u.w / (oc * Ns));
            }
            if (u.xE === ck.ufi) {
              s(p, u.w / (vo * 100));
            }
            if (u.xE === ck.mfi) {
              h(p);
            }
          }
        }
      }
      Ht("isl", Mc);
      Ht("wtb", Xe);
      Ht("la", Ko);
      Ht("c", 1);
      Ht("s", 1);
      Ht("f", Ps);
      Ht("p", ae);
      Ht("g", 1);
      Ht("d", 1);
      Ht("a", 1);
      Ht("re", 1);
      Ht("m", 1);
      Kd = [];
      ck.pki($w);
    };
    this.lki = w;
    this.pki = function (b) {
      for (var c = 0; this.ofi > c; c++) {
        for (var d = Sh; this.rfi > d; d++) {
          b.ebi[c] ||= [];
          if (b.ebi[c][d]) {
            var f = b.ebi[c][d];
            if (f.de && bd < f.de.length) {
              for (var g = 0; g < f.de.length; g++) {
                if (f.de[g] && f.de[g].length > 0) {
                  f.de = f.de[g][0];
                  if (g >= 41 && g <= 49) {
                    f.de.scale = 3;
                    var h = Math.floor(Math.random() * 3 + 1);
                    f.de.Vbi = [];
                    for (var i = xn; i < h; i++) {
                      f.de.Vbi.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        Xbi: 41 + Math.floor(Math.random() * F)
                      });
                    }
                  } else if (Rq <= g && g <= 26) {
                    f.de.scale = Wc;
                    h = Math.floor(Math.random() * 3 + dm);
                    f.de.Vbi = [];
                    for (i = 0; i < h; i++) {
                      f.de.Vbi.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        Xbi: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (g <= 15 || g >= 27 && g <= 40) {
                    f.de.angle = 0;
                    f.de.scale = Te;
                    f.de.Xbi = g;
                  } else {
                    f.de.angle = Math.random() * Math.PI * wh;
                    f.de.scale = 1;
                    f.de.Xbi = g;
                  }
                }
              }
            }
            l(f, "p", new ⵠⵠⵠⲆ.ri(false, 1, 1, 0, 10, ue));
            l(f, "t", new ⵠⵠⵠⲆ.ri(Xq, dm, ja, Ng, Ki, ic));
            l(f, "s", new ⵠⵠⵠⲆ.ri(Fj, Ko, 1, sh, ar, wd));
            l(f, "g", new ⵠⵠⵠⲆ.ri(wo, 1, ja, xn, jc, Tt));
            l(f, "d", new ⵠⵠⵠⲆ.ri(Fj, Lh, fo, sh, mm, Mh));
            l(f, "b", new ⵠⵠⵠⲆ.ri(cc, lt, 1, Js, _, 10));
            l(f, "f", new ⵠⵠⵠⲆ.ri(false, Ej, 1, xn, 10, 10));
            l(f, "sw", new ⵠⵠⵠⲆ.ri(false, 1, 1, bd, ic, no));
            l(f, "gw", new ⵠⵠⵠⲆ.ri(Ys, 1, 1, Cm, 10, mm));
            l(f, "dw", new ⵠⵠⵠⲆ.ri(rr, Lh, Lo, Ea, 10, 10));
            l(f, "a", new ⵠⵠⵠⲆ.ri(Bi, wg, 1, 0, Mh, 10));
            l(f, "cs", new ⵠⵠⵠⲆ.ri(false, 1, Lh, 0, jn, jn));
            l(f, "plm", new ⵠⵠⵠⲆ.ri(Zh, ja, dm, 0, as, 10));
            l(f, "re", new ⵠⵠⵠⲆ.ri(false, 1, 1, 0, jc, rf));
            l(f, "c", new ⵠⵠⵠⲆ.ri(false, 1, lt, Nf, rf, ar));
            l(f, "m", new ⵠⵠⵠⲆ.ri(Fj, 1, Jf, 0, ar, Zo));
          } else {
            b.ebi[c][d] = [];
          }
        }
      }
    };
    this.time = rt.bt;
    this.Xpi = {
      Vpi: 0,
      now: Ng,
      Vi: Ea,
      translate: {
        x: 0,
        y: 0
      }
    };
    this.bki = function () {
      this.Nfi = [];
      this.Kfi[lw.$E] = [];
      this.Kfi[lw.Wn] = [];
      this.Kfi[lw.oo] = [];
      this.Kfi[lw.PD] = [];
      this.Kfi[lw.wr] = [];
      this.Kfi[lw.Fa] = [];
      this.Kfi[lw.Wa] = [];
      this.Kfi[lw.Na] = [];
      this.Kfi[lw.Ha] = [];
      this.Kfi[lw.Vn] = [];
      this.Kfi[lw.Ws] = [];
      this.Kfi[lw.$n] = [];
      this.Kfi[lw.Hs] = [];
      this.Kfi[lw.us] = [];
      this.Kfi[lw.pa] = [];
      this.Kfi[lw.ra] = [];
      this.Kfi[lw.ND] = [];
      this.Kfi[lw.jD] = [];
      this.Kfi[lw.qD] = [];
      this.Kfi[lw.GD] = [];
      this.Kfi[lw.WD] = [];
      this.Kfi[lw.RD] = [];
      this.Kfi[lw.LD] = [];
      this.Kfi[lw.ga] = [];
      this.Kfi[lw.Ca] = [];
      this.Kfi[lw.za] = [];
      this.Kfi[lw.xa] = [];
      this.Kfi[lw.Qa] = [];
      this.Kfi[lw.Sa] = [];
      this.Kfi[lw.eE] = [];
      this.Kfi[lw.Ta] = [];
      this.Kfi[lw.ja] = [];
      this.Kfi[lw.Ra] = [];
      this.Kfi[lw.La] = [];
      this.Kfi[lw.Xn] = [];
      this.Kfi[lw.Gs] = [];
      this.Kfi[lw.As] = [];
      this.Kfi[lw.UD] = [];
      this.Kfi[lw.OD] = [];
      this.Kfi[lw.YD] = [];
      this.Kfi[lw.JD] = [];
      this.Kfi[lw.KD] = [];
      this.Kfi[lw.qs] = [];
      this.Kfi[lw.Ps] = [];
      this.Kfi[lw.Ts] = [];
      this.Kfi[lw.js] = [];
      this.Kfi[lw.Rs] = [];
      this.Kfi[lw.Ls] = [];
      this.Kfi[lw.Ns] = [];
      this.Kfi[lw.TD] = [];
      this.Kfi[lw._a] = [];
      this.Kfi[lw.Hs] = [];
      this.Kfi[lw.qa] = [];
      this.Kfi[lw.Da] = [];
      this.Kfi[lw.Ea] = [];
      this.Kfi[lw.fo] = [];
      this.Kfi[lw.Tr] = [];
      this.Kfi[lw.yo] = [];
      this.Kfi[lw.Bv] = [];
      this.Kfi[lw.MA] = [];
      this.Kfi[lw.yr] = [];
      this.Kfi[lw.ir] = [];
      this.Kfi[lw.tr] = [];
      this.Kfi[lw.er] = [];
      this.Kfi[lw.ar] = [];
      this.Kfi[lw.Bf] = [];
      this.Kfi[lw.qu] = [];
      this.Kfi[lw.Fg] = [];
      this.Kfi[lw.fA] = [];
      this.Kfi[lw.vr] = [];
      this.Kfi[lw.lr] = [];
      this.Kfi[lw.oc] = [];
      this.Kfi[lw.FB] = [];
      this.Kfi[lw.hr] = [];
      this.Kfi[lw.Dvi] = [];
      this.Kfi[lw.dc] = [];
      this.Kfi[lw.mc] = [];
      this.Kfi[lw.mE] = [];
      this.Kfi[lw.qo] = [];
      this.Kfi[lw._vi] = [];
      this.Kfi[lw.Ryi] = [];
      this.Kfi[lw.Gyi] = [];
      this.Kfi[lw.Lyi] = [];
      this.Kfi[lw.Wf] = [];
      this.Kfi[lw.Dp] = [];
      this.Kfi[lw.Ar] = [];
      this.Kfi[lw.ZD] = [];
      this.Kfi[lw.ss] = [];
      this.Kfi[lw.Ir] = [];
      this.Kfi[lw.Ub] = [];
      this.Kfi[lw.Bs] = [];
    };
    this.vki = function (a) {
      if (this.Nfi[a]) {
        ⵠΔᐃΔ = this.Nfi[a].type;
        this.Nfi[a] = null;
        for (var b = this.Kfi[ⵠΔᐃΔ], c = 0; c < b.length; c++) {
          if (b[c].Hfi == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.tki = function (a, b) {
      for (var c = Jj; c < this.Kfi[lw.Hs].length; c++) {
        var d = this.Kfi[lw.Hs][c];
        if (Math.floor(d.x / Vs) === b && a === Math.floor(d.y / Re)) {
          return ja;
        }
      }
      return Jj;
    };
    this.dki = function (a, b) {
      for (var c = Cm; c < this.Kfi[lw.$n].length; c++) {
        var d = this.Kfi[lw.$n][c];
        if (a == Math.floor(d.x / kh) && b == Math.floor(d.y / Re)) {
          return Rd;
        }
      }
      return re;
    };
    this.yki = function (b) {
      for (var i = Oq; b.length > i; i++) {
        ⵠΔⲆᐃ = b[i];
        if (ⵠΔⲆᐃ.Wyi != ⵠΔⲆᐃ.angle) {
          var j = Math.PI * 2;
          ⵠΔⲆᐃ.angle = (ⵠΔⲆᐃ.angle + j) % j;
          ⵠΔⲆᐃ.Wyi = (ⵠΔⲆᐃ.Wyi + j) % j;
          if (ⵠΔⲆᐃ.Wyi != ⵠΔⲆᐃ.angle) {
            var q = ⵠΔⲆᐃ.Wyi - ⵠΔⲆᐃ.angle;
            var x = Math.abs(q);
            if (x > Math.PI) {
              x = Vn * Math.PI - x;
            }
            var F = bk * (Qe * (x / Math.PI) * iw.uyi);
            if (q > Math.PI) {
              ⵠΔⲆᐃ.angle -= F;
            } else if (q < -Math.PI) {
              ⵠΔⲆᐃ.angle += F;
            } else if (q < 0) {
              ⵠΔⲆᐃ.angle -= F;
            } else {
              ⵠΔⲆᐃ.angle += F;
            }
            ⵠΔⲆᐃ.angle = (ⵠΔⲆᐃ.angle + j) % j;
            if (Math.abs(ⵠΔⲆᐃ.angle - ⵠΔⲆᐃ.Wyi) < F) {
              ⵠΔⲆᐃ.angle = ⵠΔⲆᐃ.Wyi;
            }
          }
        }
        Math.floor(ⵠΔⲆᐃ.r.y / 100);
        Math.floor(ⵠΔⲆᐃ.r.x / 100);
        if (ⵠΔⲆᐃ.x != ⵠΔⲆᐃ.r.x || ⵠΔⲆᐃ.r.y != ⵠΔⲆᐃ.y) {
          if (ⵠΔⲆᐃ.action & fw.IDLE) {
            ⵠΔⲆᐃ.action -= fw.IDLE;
          }
          ⵠΔⲆᐃ.action |= fw.zbi;
          var G = ⵠⵠⵠⲆ.T(ⵠΔⲆᐃ, ⵠΔⲆᐃ.r) + Math.PI;
          var H = ⵠΔⲆᐃ.lbi * bk;
          var I = ⵠⵠⵠⲆ.R(H, G);
          if (ⵠⵠⵠⲆ.C(ⵠⵠⵠⲆ.M(ⵠΔⲆᐃ, ⵠΔⲆᐃ.r)) > ⵠⵠⵠⲆ.C(I)) {
            ⵠⵠⵠⲆ.L(ⵠΔⲆᐃ, I);
          } else {
            if (ⵠΔⲆᐃ.action & fw.zbi) {
              ⵠΔⲆᐃ.action -= fw.zbi;
            }
            ⵠΔⲆᐃ.action |= fw.IDLE;
            ⵠⵠⵠⲆ.A(ⵠΔⲆᐃ.r, ⵠΔⲆᐃ);
          }
        }
        if (ⵠΔⲆᐃ.ubi) {
          var J = ⵠΔⲆᐃ.bubbles;
          if ((O = J.length) === 0 || rt.It > O && J[O - 1]._li < 0.95) {
            J.push({
              id: Math.floor(Math.random() * ΔΔ[rt.Xd][0].length),
              x: Math.floor(ⵠΔⲆᐃ.x + Math.random() * 80 - 40),
              y: Math.floor(ⵠΔⲆᐃ.y + Math.random() * 80 - 40),
              _li: 1
            });
          }
          for (var K = 0; K < O; K++) {
            J[K]._li = Math.max(bd, J[K]._li - bk);
          }
          for (K = 0; K < O; K++) {
            if (J[K]._li === 0) {
              J.splice(K, Lh);
              break;
            }
          }
        }
        var L = 0;
        if (ⵠΔⲆᐃ.Kyi && ok.abi) {
          var N = ⵠΔⲆᐃ.Cvi;
          var O = N.length;
          if (ⵠΔⲆᐃ.Oyi > 0 && $r.tr !== ⵠΔⲆᐃ.fbi && $r.er !== ⵠΔⲆᐃ.fbi && $r.sr !== ⵠΔⲆᐃ.fbi && ⵠΔⲆᐃ.fbi !== $r.ar && ⵠΔⲆᐃ.fbi !== $r.yn && !ⵠΔⲆᐃ.ubi && (L = Ko, O === bd || rt.St < ⵠⵠⵠⲆ.j(N[O - ae], ⵠΔⲆᐃ))) {
            var P = -ⵠΔⲆᐃ.angle;
            var Q = Math.cos(P) * 45 * la;
            var R = la * (Math.sin(P) * 45);
            N.push({
              x: ⵠΔⲆᐃ.x + Q,
              y: ⵠΔⲆᐃ.y + R,
              r: kc,
              alpha: 0.8
            });
            N.push({
              x: ⵠΔⲆᐃ.x - Q,
              y: ⵠΔⲆᐃ.y - R,
              r: 8,
              alpha: 0.8
            });
            N.push({
              x: ⵠΔⲆᐃ.x,
              y: ⵠΔⲆᐃ.y,
              r: 24,
              alpha: Ko
            });
          }
          for (K = 0; O > K; K++) {
            N[K].alpha = Math.max(xn, N[K].alpha - bk / 2.2);
            N[K].r += Ji * bk;
          }
          if (N.length > 0 && N[Oq].alpha === Ea) {
            N.splice(0, wg);
          }
          var S = ⵠΔⲆᐃ.Bvi;
          O = S.length;
          var T = -fo;
          var U = Math.max(sh, Math.sign(ⵠΔⲆᐃ.Bbi));
          var V = Math.max(0, Math.sign(ⵠΔⲆᐃ.Mbi));
          Math.max(sh, Math.sign(ⵠΔⲆᐃ.Dbi));
          var W = Math.max(Gc, Math.sign(ⵠΔⲆᐃ.Gvi));
          var X = Math.max(0, Math.sign(ⵠΔⲆᐃ.Yyi));
          if (ⵠΔⲆᐃ.Bbi > 0 || ⵠΔⲆᐃ.Dbi > 0) {
            T = rt.ru;
          } else if (xn < ⵠΔⲆᐃ.Yyi) {
            T = rt.Sf;
          } else if (ⵠΔⲆᐃ.Mbi > Ng) {
            T = rt.Rc;
          } else if (ⵠΔⲆᐃ.Gvi > Ea) {
            T = rt.Lc;
          }
          if ($r.Xs === ⵠΔⲆᐃ.fbi && ja === (U | V | W | X)) {
            T = rt.Vs;
            var Y = ⵠΔⲆᐃ.pbi - Math.PI / mj;
            var Z = 15;
            var _ = 11;
            var aa = rt.xt;
          } else if (ⵠΔⲆᐃ.fbi === $r.yr && (U | V | W | X) == 1) {
            T = rt.kr;
            Y = ⵠΔⲆᐃ.pbi - Math.PI / 2;
            Z = 21;
            _ = rn;
            aa = rt.xt;
          } else if (ⵠΔⲆᐃ.fbi === $r.ir && (U | V | W | X) === lt) {
            T = rt.nr;
            Y = ⵠΔⲆᐃ.pbi - Math.PI / Cs;
            var ba = Math.random() * 50;
            Z = ue + ba;
            _ = Cm + ba;
            aa = rt.xt * 0.9;
          } else {
            Y = ⵠΔⲆᐃ.angle;
            Z = 15;
            _ = Kc;
            aa = rt.xt;
          }
          if ($r.tr === ⵠΔⲆᐃ.fbi || $r.er === ⵠΔⲆᐃ.fbi || ⵠΔⲆᐃ.fbi === $r.yn || ⵠΔⲆᐃ.fbi === $r.ar || ⵠΔⲆᐃ.fbi === $r.sr || ⵠΔⲆᐃ.ubi) ;else if ($r.Ys === ⵠΔⲆᐃ.fbi) {
            if (bd === O || ⵠⵠⵠⲆ.j(S[O - Mc], ⵠΔⲆᐃ) > rt.Qt) {
              S.push({
                x: ⵠΔⲆᐃ.x,
                y: ⵠΔⲆᐃ.y,
                angle: ⵠΔⲆᐃ.pbi,
                alpha: lt,
                id: rt.Ks
              });
            }
          } else if (T != -1 && L === 0 && (O === 0 || aa < ⵠⵠⵠⲆ.j(S[O - fo], ⵠΔⲆᐃ))) {
            ⵠΔⲆᐃ.Xyi++;
            if (Math.abs(ⵠΔⲆᐃ.x - ⵠΔⲆᐃ.r.x) > dm && lt < Math.abs(ⵠΔⲆᐃ.y - ⵠΔⲆᐃ.r.y)) {
              if (ⵠΔⲆᐃ.r.x > ⵠΔⲆᐃ.x && ⵠΔⲆᐃ.r.y < ⵠΔⲆᐃ.y || ⵠΔⲆᐃ.r.x < ⵠΔⲆᐃ.x && ⵠΔⲆᐃ.r.y > ⵠΔⲆᐃ.y) {
                if (ⵠΔⲆᐃ.Xyi % rd) {
                  Q = la * -_;
                  R = -_ * la;
                } else {
                  R = la * _;
                  Q = _ * la;
                }
              } else if (ⵠΔⲆᐃ.Xyi % Cg) {
                Q = la * _;
                R = la * -_;
              } else {
                R = _ * la;
                Q = -_ * la;
              }
            } else if (ⵠΔⲆᐃ.Xyi % 2) {
              Q = la * (Math.cos(Y) * Z);
              R = Z * Math.sin(Y) * la;
            } else {
              Q = -Math.cos(Y) * Z * la;
              R = la * (Z * -Math.sin(Y));
            }
            S.push({
              x: ⵠΔⲆᐃ.x + Q,
              y: ⵠΔⲆᐃ.y + R,
              angle: Y + Math.PI / 2,
              alpha: yd,
              id: T
            });
          }
          for (K = Nf; K < O; K++) {
            if (S[K].id === rt.Ks) {
              S[K].alpha = Math.max(0, S[K].alpha - bk * 1.5);
            } else {
              S[K].alpha = Math.max(0, S[K].alpha - bk / 2.85);
            }
          }
          if (S.length > 0 && S[0].alpha === 0) {
            S.splice(0, wg);
          }
        }
      }
    };
    this.mi = function () {
      this.yki(this.Kfi[lw.$E]);
      this.yki(this.Kfi[lw.Tr]);
      this.yki(this.Kfi[lw.yo]);
      this.yki(this.Kfi[lw.Bv]);
      this.yki(this.Kfi[lw.MA]);
      this.yki(this.Kfi[lw.yr]);
      this.yki(this.Kfi[lw.ir]);
      this.yki(this.Kfi[lw.tr]);
      this.yki(this.Kfi[lw.er]);
      this.yki(this.Kfi[lw.ar]);
      this.yki(this.Kfi[lw.Ir]);
      this.yki(this.Kfi[lw.Fg]);
      this.yki(this.Kfi[lw.fA]);
      this.yki(this.Kfi[lw.vr]);
      this.yki(this.Kfi[lw.lr]);
      this.yki(this.Kfi[lw.oc]);
      this.yki(this.Kfi[lw.FB]);
      this.yki(this.Kfi[lw.hr]);
      this.yki(this.Kfi[lw.Dvi]);
      this.yki(this.Kfi[lw.dc]);
      this.yki(this.Kfi[lw.mE]);
      this.yki(this.Kfi[lw.Bf]);
      this.yki(this.Kfi[lw.qu]);
      this.yki(this.Kfi[lw.mc]);
    };
    this.Jli = [];
    this.Jli[rt.Bu] = new ⵠⵠⵠⲆ.ri(false, ae, 1.05, 1, 0.008, 0.008);
    this.Jli[rt.Mu] = new ⵠⵠⵠⲆ.ri(false, Mc, 1.08, 1, 0.006, 0.006);
    this.Jli[rt.Uf] = new ⵠⵠⵠⲆ.ri(false, 1, 1.02, 1, 0.008, 0.008);
    this.Jli[rt.Of] = new ⵠⵠⵠⲆ.ri(Bi, Mc, 1.08, Lo, 0.006, 0.006);
    this.Jbi = [];
    this.Jbi[Jj] = new ⵠⵠⵠⲆ.ri(ui, 0.1, au, bd, 0.6, 0.6);
    this.Jbi[Lo] = new ⵠⵠⵠⲆ.ri(Mr, 0.4, 1, 0, 0.6, 0.6);
    this.Jbi[2] = new ⵠⵠⵠⲆ.ri(oj, 0.3, Jf, 0, 0.6, 0.6);
    this.Jbi[mq] = new ⵠⵠⵠⲆ.ri(Zh, 0.8, fn, 0, 0.6, 0.6);
    this.Jbi[4] = new ⵠⵠⵠⲆ.ri(false, 0.3, 1, Js, 0.6, 0.6);
    this.Jbi[5] = new ⵠⵠⵠⲆ.ri(Xq, 0.8, Mc, Gc, 0.6, 0.6);
    this.Jbi[6] = new ⵠⵠⵠⲆ.ri(false, 0.5, Ic, Ka, 0.6, 0.6);
    this.Jbi[Mq] = new ⵠⵠⵠⲆ.ri(ui, 0.9, 1, so, 0.6, 0.6);
    this.Jbi[8] = new ⵠⵠⵠⲆ.ri(false, 0.6, 1, bd, 0.6, 0.6);
    this.Jbi[9] = new ⵠⵠⵠⲆ.ri(Qh, 0.2, dm, 0, 0.6, 0.6);
    this.Jbi[10] = new ⵠⵠⵠⲆ.ri(Bi, 0.6, au, 0, 0.6, 0.6);
    this.Jbi[11] = new ⵠⵠⵠⲆ.ri(rr, 0.4, yd, qh, 0.6, 0.6);
    this.Jbi[12] = new ⵠⵠⵠⲆ.ri(false, 0.8, lt, 0, 0.6, 0.6);
    this.Jbi[13] = new ⵠⵠⵠⲆ.ri(false, 0.2, 1, xn, 0.6, 0.6);
    this.Jbi[$s] = new ⵠⵠⵠⲆ.ri(false, 0.7, Lh, 0, 0.6, 0.6);
  }
  function rw() {
    this.Ali = "";
    this.Mli = du;
    this.jbi = 0;
    this.Fbi = sh;
    this.Pbi = 0;
    this._bi = 0;
    this.kki = 0;
    this.Aki = 0;
    this.level = 0;
    this.label = null;
    this.Gbi = null;
    this.Dli = null;
    this.wki = Bi;
    this.Eli = 0;
  }
  function sw() {
    Math.random();
    return "a";
  }
  function tw() {
    Math.random();
    return "s";
  }
  function uw() {
    Math.random();
    return "d";
  }
  function vw() {
    Math.random();
    return "i";
  }
  function ww() {
    Math.random();
    return "r";
  }
  function xw() {
    Math.random();
    return "p";
  }
  function yw() {
    Math.random();
    return "n";
  }
  function zw() {
    Math.random();
    return "C";
  }
  function Aw() {
    Math.random();
    return "g";
  }
  function sw() {
    Math.random();
    return "a";
  }
  function Bw() {
    Math.random();
    return "o";
  }
  function Cw() {
    Math.random();
    return "t";
  }
  function Cw() {
    Math.random();
    return "t";
  }
  function Dw() {
    Math.random();
    return "e";
  }
  function Ew() {
    this.Vi = function () {};
    this.Npi = {
      open: kg,
      $fi: 1,
      ipi: 1
    };
    this.fli = {
      $fi: 1,
      open: wo,
      ipi: -1
    };
    this.opi = {
      $fi: hf,
      ipi: -1,
      Dpi: 0,
      Bpi: xn,
      open: kg
    };
    this.Yfi = {
      open: Uo,
      Vfi: 0,
      type: Cm,
      ipi: -1,
      $fi: Ps,
      Xfi: 0,
      Zfi: Sh
    };
    this.hpi = {
      Opi: qh,
      ipi: -1,
      Vfi: nj,
      $fi: 1,
      Dpi: 0,
      open: Qh
    };
    this.sign = {
      ipi: -fn,
      open: Mr
    };
    this.Ofi = {
      fpi: 0,
      $fi: 1,
      ipi: -1,
      open: false
    };
    this.ubi = {
      enabled: Bi,
      Ubi: -Ko,
      label: Zh,
      now: -Jf,
      Sfi: cv
    };
    this.Ufi = {
      id: -1,
      fpi: 0,
      $fi: Lh,
      ipi: -yd,
      open: false,
      lock: false,
      locked: re,
      cpi: Qc,
      mpi: zn
    };
    this.wki = ln;
    this.reconnect = {
      rotate: Sh,
      enabled: false
    };
    this.key = ⵠⵠⵠⲆ.Ci("key", aj.location.href);
    var b = ⵠⵠⵠⲆ.Ci("egg", aj.location.href);
    if (b) {
      ok.Mli = parseInt(b);
    }
    this.beta = aj.location.href.indexOf("http://starve.io/beta") === 0 ? Ps : 0;
    if (this.key && this.beta) {
      ⲆᐃΔⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⲆᐃΔⵠ.get("starve_beta");
    }
    this.Mki = ⲆᐃΔⵠ.get("starve_token") ? ⲆᐃΔⵠ.get("starve_token") : ⵠⵠⵠⲆ.Ei(hw.eyi);
    aj.Bki();
    var c = aj.Dki;
    function d() {
      this.seed = 1;
      this.Eki = 2;
      this.Cki = 3;
      this.zki = 1;
      this.xki = Cg;
      this.Qki = 3;
      this.Ski = function (a) {
        this.seed = 2 + Math.floor(iw.wr * Math.random());
      };
      this.Iki = function (a) {
        this.Eki = ih + Math.floor(Math.random() * iw.wr);
      };
      this._ki = function (a) {
        this.Cki = 2 + Math.floor(iw.wr * Math.random());
      };
      this.Fki = function (a) {
        this.zki = 2 + Math.floor(iw.wr * Math.random());
      };
      this.Pki = function (a) {
        this.xki = 2 + Math.floor(Math.random() * iw.wr);
      };
      this.Tki = function (a) {
        this.Qki = eu + Math.floor(Math.random() * iw.wr);
      };
      this.jki = function (b, f, i, e, j, a, k) {
        for (var l = fi; l < k;) {
          var n = i * l % ⲆⲆᐃⲆᐃⲆᐃ;
          var p = ⵠⵠᐃᐃᐃᐃⵠ[n];
          if (p < 0.1) {
            q += 50;
            l += 50;
          } else {
            var q = Math.floor(e * p + j);
            if (l > a && k > l) {
              var r = Math.random() > 0.5 ? -Zo * bk : bk * 10;
              var s = f * q;
              this.Rki[n] = Math.max(-iw.Syi, Math.min(iw.Syi, this.Rki[n] + r));
              this.Lki[n] = Math.max(-iw.Iyi, Math.min(iw.Iyi, this.Lki[n] + r));
              if (qh < s) {
                ea.beginPath();
                ea.arc(l + ax.Oi.x + this.Lki[n], b + this.Rki[n] - iw.Syi * 0.8, s, Oq, Math.PI * 2);
                if (ck.transition) {
                  var t = ck.time ? hf - ck.Zbi.hi : ck.Zbi.hi;
                  ea.fillStyle = tv(83, 156, 160, 236, 247, 249, t);
                } else {
                  ea.fillStyle = rt.ct[ck.time];
                }
                ea.fill();
              }
            }
            l += q * 2;
          }
        }
      };
      this.Gki = function (b, f, i, e, j, a, k) {
        for (var l = yd; l < k;) {
          var n = l * i % ⲆⲆᐃⲆᐃⲆᐃ;
          var p = ⵠⵠᐃᐃᐃᐃⵠ[n];
          if (p < 0.1) {
            q += 50;
            l += 50;
          } else {
            var q = Math.floor(p * e + j);
            if (a < l && k > l) {
              var r = Math.random() > 0.5 ? bk * -10 : jn * bk;
              var s = f * q;
              this.qki[n] = Math.max(-iw.Syi, Math.min(iw.Syi, this.qki[n] + r));
              this.Wki[n] = Math.max(-iw.Iyi, Math.min(iw.Iyi, this.Wki[n] + r));
              if (ke < s) {
                ea.beginPath();
                ea.arc(b + this.qki[n] - iw.Syi * 0.8, l + ax.Oi.y + this.Wki[n], s, xn, Math.PI * 2);
                if (ck.transition) {
                  var t = ck.time ? Ps - ck.Zbi.hi : ck.Zbi.hi;
                  ea.fillStyle = tv(83, 156, 160, 236, 247, 249, t);
                } else {
                  ea.fillStyle = rt.ct[ck.time];
                }
                ea.fill();
              }
            }
            l += q * 2;
          }
        }
      };
      this.hvi = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - iw.evi - e - eu) / iw._yi) === sh) {
          this._ki();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.jki(d, h, this.Cki, 18, gc, f, g);
        ea.globalAlpha = Jf;
        if ((h = -(b - iw.avi - e + 500) / iw.Pyi) === 0) {
          this.Ski();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.jki(b, h, this.seed, Po, Mh, f, g);
        ea.globalAlpha = ja;
        if (c !== -dm) {
          if ((h = -(c - iw.rvi - e + 698) / iw.jyi) <= 0.01) {
            this.Iki();
          }
          ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
          this.jki(c, h, this.Eki, 6, Gg, f, g);
          ea.globalAlpha = 1;
        }
      };
      this.qvi = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + iw.evi + e + 2) / iw._yi) === qh) {
          this._ki();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.jki(d, h, this.Cki, kq, 16, f, g);
        ea.globalAlpha = hf;
        var h = -(-b + iw.avi + e) / iw.Pyi;
        if (sh === h) {
          this.Ski();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.jki(b, h, this.seed, 12, 10, f, g);
        ea.globalAlpha = au;
        if (c !== -1) {
          if ((h = -(-c + iw.rvi + e) / iw.jyi) <= 0.01) {
            this.Iki();
          }
          ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
          this.jki(c, h, this.Eki, 6, oo, f, g);
          ea.globalAlpha = X;
        }
      };
      this.Wvi = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + iw.evi + e + Tg) / iw._yi) === Ka) {
          this._ki();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.Gki(d, h, this.Cki, Kt, 16, f, g);
        ea.globalAlpha = 1;
        if ((h = -(-b + iw.avi + e) / iw.Pyi) === Ea) {
          this.Ski();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.Gki(b, h, this.seed, de, 10, f, g);
        ea.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + iw.rvi + e) / iw.jyi) <= 0.01) {
            this.Iki();
          }
          ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
          this.Gki(c, h, this.Eki, kr, 6, f, g);
          ea.globalAlpha = 1;
        }
      };
      this.gvi = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(d - iw.evi - e - eu) / iw._yi) === Jj) {
          this._ki();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.Gki(d, h, this.Cki, Zd, 16, f, g);
        ea.globalAlpha = 1;
        var h = -(b - iw.avi - e + 500) / iw.Pyi;
        if (nj === h) {
          this.Ski();
        }
        ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
        this.Gki(b, h, this.seed, fg, _, f, g);
        ea.globalAlpha = Jf;
        if (c !== -Ps) {
          if ((h = -(c - iw.rvi - e + 698) / iw.jyi) <= 0.01) {
            this.Iki();
          }
          ea.globalAlpha = ⵠⵠⵠⲆ.ti(h);
          this.Gki(c, h, this.Eki, jo, Cu, f, g);
          ea.globalAlpha = 1;
        }
      };
      this.$bi = {
        r: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.ii, 0, ic, iw.nvi, iw.nvi, iw._yi),
        Nki: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.ei, 0, ue, iw._yi, iw._yi, iw.nvi)
      };
      this.ivi = {
        r: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.ai, 0, 10, iw.Fyi, iw.Fyi, iw.Pyi),
        Nki: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.ti, Js, 10, iw.Pyi, iw.Pyi, iw.Fyi)
      };
      this.tvi = {
        r: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.si, 0, 10, iw.Tyi, iw.Tyi, iw.jyi),
        Nki: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.ti, 0, co, iw.jyi, iw.jyi, iw.Tyi)
      };
      this.Hki = function (a) {
        if (a.r.x === a.r.yi) {
          if (a.Nki.yi === a.Nki.x) {
            return a.r;
          } else {
            return a.Nki;
          }
        } else {
          return a.r;
        }
      };
      this.xE = function (a) {
        var b;
        if (a.r.x === a.r.yi) {
          if (a.Nki.x === a.Nki.yi) {
            a.r.ki();
            a.Nki.ki();
            b = a.r;
          } else {
            b = a.Nki;
          }
        } else {
          b = a.r;
        }
        b.wi(b.yi);
        return b;
      };
      this.qki = [];
      this.Wki = [];
      this.Rki = [];
      this.Lki = [];
      this.Vi = function () {
        for (var a = 0; a < ⲆⲆᐃⲆᐃⲆᐃ; a++) {
          this.qki[a] = Math.floor(ⵠⵠᐃᐃᐃᐃⵠ[a] * iw.Syi);
          this.Wki[a] = Math.floor(iw.Iyi * ⵠⵠᐃᐃᐃᐃⵠ[a]);
          this.Rki[a] = Math.floor(ⵠⵠᐃᐃᐃᐃⵠ[a] * iw.Syi);
          this.Lki[a] = Math.floor(iw.Iyi * ⵠⵠᐃᐃᐃᐃⵠ[a]);
        }
        this.$bi.r.x = this.$bi.r.yi;
        this.ivi.r.pi = 3.5;
        this.tvi.r.pi = 2;
      };
      this.Vi();
    }
    this.Mki = c.substring(0, 6) + this.Mki.substring(kr);
    this.Uki = ⲆᐃΔⵠ.get("starve_token_id") ? ⲆᐃΔⵠ.get("starve_token_id") : "";
    this.id = qh;
    this.Hfi = 0;
    this.pfi = 0;
    this.Oki = {
      Yki: "",
      Eli: 0,
      Jki: ke,
      Kki: 0
    };
    this.Xki = {
      connected: 0,
      di: new Date().getTime()
    };
    this._pi = [];
    this.ppi = function (a) {
      for (var b = 0; b < this._pi.length; b++) {
        if (this._pi[b] == a) {
          return Xn;
        }
      }
      return false;
    };
    this.Vki = {
      Ubi: Ka,
      time: 0,
      value: 0,
      open: false,
      Sfi: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.Ubi) / 1000);
          if (this.time < 60) {
            cx.Vki.button.Sfi(ea);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.zpi = {
      id: -1,
      $fi: -fn,
      lock: 0,
      timeout: new ⵠⵠⵠⲆ.ri(false, 0, yd, 0, lt / 30, Lh),
      wait: false
    };
    this.Wli = {
      timeout: new ⵠⵠⵠⲆ.ri(false, Ou, 1, 0, 0.2, 1),
      wait: rr
    };
    this.Hli = {
      timeout: new ⵠⵠⵠⲆ.ri(false, bd, au, 0, au, hf),
      wait: Uo
    };
    this.Nli = {
      timeout: new ⵠⵠⵠⲆ.ri(cc, 0, 1, 0, 1 / ar, 1),
      wait: false
    };
    this.Oi = new ⵠⵠⵠⲆ.Mi(ⵠⵠⵠⲆ.$, Ou, 0.4, Ng, 0, ca, Kq, ca, Kq);
    this.Oi.Ubi = 0;
    this.Oi.Zki = 0;
    this.Oi.mi = function () {
      if (Sh < this.Zki) {
        this.Zki -= bk;
      } else {
        var a = ck.Nfi[ax.Hfi];
        if (a) {
          this.Ubi = 0;
          var b = Math.max(Math.min(ca - a.x, -2), 2 - ck.w + sa);
          var c = Math.max(Math.min(Kq - a.y, -2), -ck.K + ec + oa);
          this.wi({
            x: b,
            y: c
          });
        } else {
          this.Ubi += bk;
          if (uc < this.Ubi) {
            this.Ubi = 0;
            if (!ax.reconnect.enabled) {
              ᐃΔΔᐃ.$ki();
            }
          }
        }
      }
    };
    this.Oi.w = screen.width;
    this.Oi.K = screen.height;
    this.Oi.Ui = this.Oi.w;
    this.Oi.Yi = this.Oi.K;
    this.Oi.rx = Js;
    this.Oi.ry = 0;
    this.Oi.iAi = 0;
    this.Oi.tAi = 0;
    this.Oi.eAi = function (a, b) {
      this.x = -Math.min(Math.max(-ck.fvi * Tg, a - ck.fvi - this.Ui / 2), ck.w - this.Ui);
      this.y = -Math.min(Math.max(-ck.pvi * 2, b - (ck.pvi + this.Yi) / 2), ck.K - this.Yi + ck.pvi);
      this.yi = this.x;
      this.Di = this.y;
    };
    this.control = {
      angle: Oq,
      timeout: sh,
      nAi: 0,
      Ibi: xn,
      attack: 0,
      mi: function () {
        var b = ck.Nfi[ax.Hfi];
        if (b) {
          var c = {
            x: ax.Oi.x + b.x,
            y: ax.Oi.y + b.y
          };
        } else {
          c = Lq;
        }
        var d = ⵠⵠⵠⲆ.T(lk.Kbi, c);
        var e = false;
        this.Ibi += bk;
        if (!lk.state) {
          if (b && !(b.action & fw.wbi) && this.Ibi > hw.wbi) {
            this.attack = 1;
            e = gi;
            this.Ibi = Ka;
            ᐃΔΔᐃ.aAi(d);
          }
        }
        if (b) {
          b.angle = d;
          b.Wyi = d;
        }
        if (!e) {
          this.timeout += bk;
          if (this.timeout > hw.uyi) {
            this.timeout = Jj;
            if (Math.abs(this.angle - d) > 0.005) {
              ᐃΔΔᐃ.sAi(d);
              this.angle = d;
            }
          }
        }
        if (!ax.rAi.open && !ax.oAi.open) {
          var f = bd;
          if (pk.hAi()) {
            f |= Lo;
          }
          if (pk.gAi()) {
            f |= tm;
          }
          if (pk.cAi()) {
            f |= 4;
          }
          if (pk.dAi()) {
            f |= 8;
          }
          if (this.nAi != f) {
            ᐃΔΔᐃ.mAi(f);
          }
          this.nAi = f;
        }
      }
    };
    this.tli = {
      c: 1,
      Nki: 1,
      K: 1,
      xE: Ps,
      oi: Mc,
      uAi: ae,
      Tli: new ⵠⵠⵠⲆ.ri(pe, so, 1, 0, 3, 3),
      Fli: new ⵠⵠⵠⲆ.ri(Rg, 0, yd, qh, 2, 2),
      Pli: new ⵠⵠⵠⲆ.ri(ud, Ou, fi, 0, 3, E),
      Rli: new ⵠⵠⵠⲆ.ri(true, 0, 1, 0, Ie, mq),
      Lli: new ⵠⵠⵠⲆ.ri(Rg, 0, 1, Ka, er, 3),
      jli: new ⵠⵠⵠⲆ.ri(hr, 0, 1, Sh, 3, 3),
      ili: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.$, Vd, Lo, 0, Oq, Ic),
      _li: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.$, Cm, 1, so, 0, ae),
      eli: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.$, nj, fn, 0, 0, 1),
      nli: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.$, du, 1, 0, 0, 1),
      ali: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.$, 0, Mc, Cm, Jj, 1),
      sli: new ⵠⵠⵠⲆ.ui(ⵠⵠⵠⲆ.$, Ou, ae, du, 0, 1),
      mi: function () {
        this.Tli.mi();
        this.Fli.mi();
        this.Pli.mi();
        this.Rli.mi();
        this.Lli.mi();
        this.jli.mi();
        this.ili.wi(this.c);
        this._li.wi(this.Nki);
        this.eli.wi(this.K);
        this.nli.wi(this.xE);
        this.ali.wi(this.oi);
        this.sli.wi(this.uAi);
      }
    };
    this.Gpi = false;
    this.xpi = false;
    this.Qpi = Ys;
    this.Jyi = false;
    this.Lfi = {
      max: iw.vyi,
      fAi: 0,
      Fbi: 0,
      mli: [],
      Rfi: [],
      pAi: function (a, b) {
        if (a === 1) {
          this.Fbi = iw.yyi;
        }
        this.fAi += b;
        this.max = iw.vyi + this.fAi + this.Fbi;
      },
      lAi: {
        item: -1,
        ME: null,
        bAi: xn,
        vAi: Gc,
        Hvi: -1,
        Uvi: -1,
        N: function (a) {
          if (!!this.bAi && (a.x !== this.Hvi || a.y !== this.Uvi)) {
            this.vAi = 1;
          }
        },
        start: function (a, b) {
          this.Hvi = b.x;
          this.Uvi = b.y;
          this.item = a;
          this.ME = ax.Lfi.Rfi[a].info.ME[2];
          this.bAi = 1;
        },
        stop: function () {
          this.bAi = Js;
          this.vAi = 0;
          this.Hvi = -1;
          this.Uvi = -fi;
        },
        release: function () {
          var b = -fi;
          var c = ax.Lfi.Rfi;
          var d = 0;
          if (this.bAi && this.vAi) {
            for (var f = 0; f < c.length; f++) {
              if (c[f].info.state === Kv) {
                b = f;
                break;
              }
            }
            if (b !== -Ic && b !== this.item && c[this.item]) {
              d = Ic;
              var g = c[b];
              c[b] = c[this.item];
              c[this.item] = g;
              cx.yAi();
            }
          }
          this.stop();
          return d;
        },
        Sfi: function (a, b) {
          if (this.bAi && this.vAi) {
            _l(ea, this.ME, Math.floor(a - this.ME.width / Te), Math.floor(b - this.ME.height / wh));
          }
        }
      },
      kAi: function (a) {
        for (e = 0; e < a.length; e++) {
          if (this.mli[a[e][Ka]] == a[e][Ps]) {
            return true;
          }
        }
        return false;
      },
      lpi: function (a) {
        for (var b = Js; b < this.Rfi.length; b++) {
          if (this.Rfi[b].id == a) {
            return b;
          }
        }
        return -fi;
      },
      AAi: function (a, b) {
        this.mli[a] = 0;
        this.Rfi.splice(b, 1);
        cx.yAi();
      },
      wAi: function (a, b, c) {
        Ⲇᐃⵠ = true;
        this.mli[a] = Math.max(qh, this.mli[a] - b);
        if (!this.mli[a] && c >= bd) {
          this.AAi(a, c);
        }
      }
    };
    this.MAi = {
      enabled: Qh,
      translate: {
        y: Ka,
        x: 0
      },
      BAi: function () {
        if (ck.mode == iw.kli && !ax.xpi) {
          ax.MAi.enabled = !ax.MAi.enabled;
          if (ax.MAi.enabled) {
            cx.options.DAi.display = "inline-block";
          } else {
            cx.options.DAi.display = "none";
          }
        }
      }
    };
    cx.options.DAi.display = "none";
    this.Zpi = {
      enabled: Uo,
      translate: {
        x: 0,
        y: 0
      },
      Ubi: Ka,
      BAi: function () {
        ax.Zpi.enabled = !ax.Zpi.enabled;
        if (ax.Zpi.enabled) {
          cx.options.EAi.display = "inline-block";
        } else {
          cx.options.EAi.display = "none";
        }
      },
      mi: function () {
        if (!!this.enabled && ax.DC.id < 0 && !cx.CAi.open) {
          this.Ubi += bk;
          if (this.Ubi > rd) {
            this.Ubi = 0;
            if (ax.tli.K < 0.35) {
              if (ax.Lfi.mli[$r.Rn]) {
                ᐃΔΔᐃ.zAi($r.Rn, ax.Lfi.lpi($r.Rn));
              } else if (ax.Lfi.mli[$r.ps]) {
                ᐃΔΔᐃ.zAi($r.ps, ax.Lfi.lpi($r.ps));
              } else if (ax.Lfi.mli[$r.Zs]) {
                ᐃΔΔᐃ.zAi($r.Zs, ax.Lfi.lpi($r.Zs));
              } else if (ax.Lfi.mli[$r.ds]) {
                ᐃΔΔᐃ.zAi($r.ds, ax.Lfi.lpi($r.ds));
              } else if (ax.Lfi.mli[$r.Qs]) {
                ᐃΔΔᐃ.zAi($r.Qs, ax.Lfi.lpi($r.Qs));
              } else if (ax.Lfi.mli[$r.zs]) {
                ᐃΔΔᐃ.zAi($r.zs, ax.Lfi.lpi($r.zs));
              } else if (ax.Lfi.mli[$r.Is]) {
                ᐃΔΔᐃ.zAi($r.Is, ax.Lfi.lpi($r.Is));
              } else if (ax.Lfi.mli[$r.HD]) {
                ᐃΔΔᐃ.zAi($r.HD, ax.Lfi.lpi($r.HD));
              } else if (ax.Lfi.mli[$r.Un]) {
                ᐃΔΔᐃ.zAi($r.Un, ax.Lfi.lpi($r.Un));
              } else if (ax.Lfi.mli[$r.ma]) {
                ᐃΔΔᐃ.zAi($r.ma, ax.Lfi.lpi($r.ma));
              } else if (ax.Lfi.mli[$r.oa]) {
                ᐃΔΔᐃ.zAi($r.oa, ax.Lfi.lpi($r.oa));
              } else if (ax.Lfi.mli[$r.$D]) {
                ᐃΔΔᐃ.zAi($r.$D, ax.Lfi.lpi($r.$D));
              } else if (ax.Lfi.mli[$r.ca]) {
                ᐃΔΔᐃ.zAi($r.ca, ax.Lfi.lpi($r.ca));
              } else if (ax.Lfi.mli[$r.$s]) {
                ᐃΔΔᐃ.zAi($r.$s, ax.Lfi.lpi($r.$s));
              }
            } else if (ax.tli.xE < 0.35 && ax.Lfi.mli[$r.ta]) {
              ᐃΔΔᐃ.zAi($r.ta, ax.Lfi.lpi($r.ta));
            }
          }
        }
      }
    };
    cx.options.EAi.display = "none";
    this.DC = {
      id: -1,
      zE: -1,
      timeout: new ⵠⵠⵠⲆ.ri(je, Ea, dm, 0, fo, 1),
      cli: Zh,
      Sli: -1,
      mode: 0,
      label: [],
      Ili: [],
      xAi: false,
      tbi: false,
      QAi: false,
      fli: false,
      SAi: function () {
        this.mode = this.mode === Nf ? wg : 0;
      },
      IAi: function (a) {
        this.xAi = a;
        var b = cx.CAi;
        if (b.open) {
          b._Ai(b.button);
        }
        this.mi();
      },
      FAi: function (a) {
        var b = st[a];
        this.id = a;
        this.cli = Rg;
        ck.Nfi[ax.Hfi];
        this.timeout.gi = b.time * 8;
        this.zE = b.zE;
      },
      PAi: function (b) {
        var c = st[b];
        this.id = b;
        this.cli = Rd;
        var d = ck.Nfi[ax.Hfi];
        if (d && d.right == $r.he) {
          this.timeout.gi = c.time * 3;
        } else {
          this.timeout.gi = c.time;
        }
        this.zE = c.zE;
        for (var e = qh; e < c.r.length; e++) {
          var f = c.r[e];
          ax.Lfi.wAi(f[0], f[1], ax.Lfi.lpi(f[qh]));
        }
        cx.yAi();
      },
      mi: function () {
        this.Ili = [];
        if (cx.qpi.DC === fi) {
          cx.qpi.display = 0;
        }
        for (var b in st) {
          var c = st[b];
          var d = hr;
          if (c.r) {
            for (var f = Vd; f < c.r.length; f++) {
              if (ax.Lfi.max >= iw.Qfi && c.id === Xr.ge) {
                d = re;
                break;
              }
              if (c.w > this.xAi || c.f > this.tbi || c.oi > this.QAi || c.e > this.fli) {
                d = Zh;
                break;
              }
              var g = c.r[f];
              if (!ax.Lfi.mli[g[0]] || ax.Lfi.mli[g[Gc]] < g[Ko]) {
                d = rr;
                break;
              }
            }
            if (d) {
              this.Ili.push(cx.TAi[c.id]);
            }
          }
        }
        cx.jAi();
        cx.RAi();
        cx.LAi();
        cx.GAi();
        cx.qAi();
        cx.WAi();
        cx.sign.NAi();
      },
      ki: function () {
        this.id = -1;
        this.cli = Fj;
        this.timeout.hi = Ng;
        this.timeout.oi = Xq;
        this.mi();
      }
    };
    this.HAi = {
      message: Ds,
      Sfi: ev
    };
    this.alert = {
      timeout: new ⵠⵠⵠⲆ.ri(ks, fn, Ps, Js, 4, 0.3),
      text: "",
      label: null,
      Sfi: dv,
      list: []
    };
    this.pli = {
      vli: document.createElement("canvas"),
      bli: [],
      mi: Vj,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = ck.Wfi, c = 0; c < b.length; c++) {
          if (b[c].wki) {
            a.push({
              id: c,
              qyi: b[c].Eli
            });
          }
        }
        a.sort(function (a, b) {
          return b.qyi - a.qyi;
        });
        this.bli = [];
        for (c = Ou; c < a.length && c < 10; c++) {
          this.bli.push(a[c].id);
        }
        this.mi = ud;
      },
      Vi: function (a) {
        for (var b = ck.Wfi, c = nj; c < b.length; c++) {
          b[c].Eli = 0;
        }
        b[ax.id].Eli = ⵠⵠⵠⲆ.V(a[Lh]);
        this.bli = [];
        for (c = 2; c < a.length; c += yo) {
          this.bli.push(a[c]);
          b[a[c]].Eli = ⵠⵠⵠⲆ.V(a[c + Lo]);
        }
        this.mi = Nh;
      }
    };
    this.pli.vli.width = la * 180;
    this.pli.vli.height = la * 300;
    this.pli.yli = this.pli.vli.getContext("2d");
    this.oAi = {
      open: false,
      input: document.getElementById("commandInput"),
      UAi: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      OAi: function (a) {
        this.UAi.innerHTML += a;
      },
      mi: function () {
        this.style.left = Math.floor(sa / ec - 300) + "px";
        this.style.top = Math.floor(oa / 2 - 250) + "px";
      },
      YAi: function () {
        this.UAi.innerHTML = "";
      },
      JAi: function () {
        this.open = false;
        this.style.display = "none";
      },
      KAi: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % oe == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      XAi: function (b, c, d, f) {
        f = f || "";
        var g = "<div class=commandWritten>" + (b = b || "");
        g += (c = c || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        g += (d = d || "") + "</div>" + f + "</div>";
        this.OAi(g);
        this.VAi();
      },
      VAi: function () {
        this.UAi.scrollTop = this.UAi.scrollHeight;
      },
      ZAi: function (b) {
        switch (b) {
          case "clean":
            this.YAi();
            return true;
          case "list":
            var c = "";
            for (var d = ck.Wfi, f = 0; f < d.length; f++) {
              var g = d[f];
              if (g.wki) {
                c += g.Ali + " <span style=\"color:green\">#" + f + "</span><br />";
              }
            }
            this.XAi("list", 1, "List all connected players", c);
            return true;
          case "weapon-list":
            this.XAi("Weapons", Ps, "List all weapons in the game", this.KAi(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.XAi("Tools", Mc, "List all tools in the game", this.KAi(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return hr;
          case "survival-list":
            this.XAi("Survival Items", 1, "List all survival items in the game", this.KAi(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return jt;
          case "resource-list":
            this.XAi("Resources", dm, "List all resources in the game", this.KAi(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return So;
          case "food-list":
            this.XAi("Food", Ej, "List all food in the game", this.KAi(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return true;
          case "hat-list":
            this.XAi("Hats", 1, "List all hats in the game", this.KAi(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return Hs;
          case "building-list":
            this.XAi("Buildings", yd, "List all buildings in the game", this.KAi(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return Vj;
          case "biome-list":
            this.XAi("Biomes list", fi, "List all available biomes in the game", this.KAi(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.XAi("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return Nh;
          case "pos":
            d = ck.Kfi[lw.$E];
            f = du;
            for (; f < d.length; f++) {
              var h = d[f];
              if (h.$fi === ax.id) {
                this.XAi("pos", lt, "Your position is " + Math.floor(h.x / wr) + ":" + Math.floor(h.y / Re));
                return Nh;
              }
            }
            break;
          case "help-admin":
            this.XAi("help-admin", Ic, "List all available commands for admin only", this.KAi(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.XAi("help", 1, "List all available commands", this.KAi(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      $Ai: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      iwi: function () {
        var a = this.input.value;
        if (a && a.length > Ka) {
          if (!this.ZAi(a)) {
            ᐃΔΔᐃ.twi(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.rAi = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      mi: function () {
        this.style.left = Math.floor(sa / 2 - 150) + "px";
        this.style.top = Math.floor(oa / ih + 80) + "px";
      },
      JAi: function () {
        this.open = kg;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      ewi: {
        nwi: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (ax.alert.text) {
              ax.alert.list.push(b);
            } else {
              ax.alert.text = b;
            }
            cx.awi = Ng;
          } else {
            cx.awi = Lh;
          }
        }
      },
      ZAi: function (b) {
        if (b.charAt(Jj) == this.prefix) {
          var c = "";
          var d = "";
          for (var f = 1; f < b.length && b.charAt(f) != " "; f++) {
            c += b.charAt(f);
          }
          for (f++; f < b.length; f++) {
            d += b.charAt(f);
          }
          var g = this.ewi[c];
          if (g) {
            g(d);
          }
          return Va;
        }
        return Ys;
      },
      eki: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ZAi(a)) {
              ᐃΔΔᐃ.swi(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.Lvi = {
      jvi: [],
      mi: function (a) {
        a.y += bk * 80 * a.qyi;
        a.x += bk * 80 * a.c;
        a._li -= bk / 6;
        if (a._li > 0.2) {
          a.alpha = Math.min(a.alpha + bk * Wc, au);
        } else {
          a.alpha = Math.max(a.alpha - bk * au, bd);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(rt.Bt * (sa / 1366), rt.Bt + ic) * Math.max(Math.min(ck.Gvi + 1000, 3000) / 3000, 0));
        if (this.jvi.length < c) {
          var d = Math.floor(Math.random() * rt.Dt);
          var e = -ax.Oi.x + Math.floor(Math.random() * ax.Oi.w);
          var f = -ax.Oi.y + Math.floor(Math.random() * ax.Oi.K);
          var a = Math.random(Math.PI);
          this.jvi.push(new nw(d, e, f, a));
        }
      }
    };
    this.$pi = 0;
    this.rli = 0;
    this.Fvi = {
      jvi: [],
      Pvi: Cm,
      Tvi: nj,
      mi: function (a) {
        a.y += bk * (200 + this.Tvi * 800) * a.qyi;
        a.x += bk * (200 + this.Tvi * 800) * a.c;
        a._li -= bk / 6;
        if (a._li > 0.2) {
          a.alpha = Math.min(a.alpha + bk * er, 1);
        } else {
          a.alpha = Math.max(a.alpha - bk * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.Tvi + 0.1) * rt.Mt * (sa / 1366), (this.Tvi + 0.1) * rt.Mt + ar) * Math.max(Math.min(ck.Dbi + 1000, 3000) / 3000, Gc));
        if (this.jvi.length < c) {
          var d = Math.floor(Math.random() * rt.Dt);
          var e = -ax.Oi.x + Math.floor(Math.random() * ax.Oi.w);
          var f = -ax.Oi.y + Math.floor(Math.random() * ax.Oi.K);
          var a = Math.random(Math.PI);
          if (ax.Fvi.Pvi !== 0) {
            e -= ax.Oi.w / 2;
          }
          this.jvi.push(new nw(d, e, f, a));
        }
      }
    };
    this.Rvi = {
      jvi: [],
      Pvi: 0,
      Tvi: so,
      mi: function (a) {
        if (pk.cAi()) {
          a.y += bk * a.lbi * (5.5 + hg * this.Tvi);
        } else {
          a.y += bk * a.lbi * (5 + this.Tvi * 10);
        }
        a._li -= bk / 2;
        if (pk.hAi()) {
          a.x += bk * (Qg + this.Tvi * 400);
        } else if (pk.gAi()) {
          a.x -= bk * (130 - this.Tvi * 400);
        } else {
          a.x -= bk * (30 - this.Tvi * 400);
        }
        if (a._li > 0.2) {
          a.alpha = Math.min(a.alpha + bk * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - bk * lf, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.Tvi * 1.5 + 0.5) * rt.At * (sa / 1366), (this.Tvi * 1.5 + 0.5) * rt.At + Tt) * Math.max(Math.min(ck.Mbi + 1000, 3000) / 3000, 0));
        if (this.jvi.length < c) {
          var d = Math.floor(Math.random() * rt.wt);
          var e = -ax.Oi.x + Math.floor(Math.random() * ax.Oi.w);
          var f = -ax.Oi.y + Math.floor(Math.random() * 400 * la - la * 200);
          this.jvi.push(new nw(d, e, f, 0));
        }
      }
    };
    this.kvi = [];
    for (var e = nj; e < 4; e++) {
      this.kvi.push(new d());
    }
  }
  function Bw() {
    Math.random();
    return "o";
  }
  function xw() {
    Math.random();
    return "p";
  }
  ⵠⵠΔᐃⲆΔⲆⵠᐃ = yd;
  setTimeout(function b() {
    var c = yw() + sw() + Cw() + vw();
    var d = function () {
      Math.random();
      return "W";
    }() + Dw() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + Bw() + (Math.random(), "c") + function () {
      Math.random();
      return "k";
    }() + Dw() + Cw();
    if (aj[d].toString().indexOf(c) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var e = tw() + Dw() + yw() + uw();
    var f = xw() + ww() + Bw() + Cw() + Bw() + Cw() + function () {
      Math.random();
      return "y";
    }() + xw() + Dw();
    if (-Ps === aj[d][f][e].toString().indexOf(c)) {
      Math.floor = function () {
        return Math.round() + ae;
      };
    }
    d = uw() + ww() + sw() + function () {
      Math.random();
      return "w";
    }() + function () {
      Math.random();
      return "I";
    }() + (Math.random(), "m") + sw() + Aw() + Dw();
    e = zw() + sw() + yw() + function () {
      Math.random();
      return "v";
    }() + sw() + tw() + function () {
      Math.random();
      return "R";
    }() + Dw() + yw() + uw() + Dw() + ww() + vw() + yw() + Aw() + zw() + Bw() + yw() + Cw() + Dw() + function () {
      Math.random();
      return "x";
    }() + Cw() + function () {
      Math.random();
      return "2";
    }() + function () {
      Math.random();
      return "D";
    }();
    if (-fn === aj[e][f][d].toString().indexOf(c)) {
      Math.floor = function () {
        return Math.round() + fi;
      };
    }
    setTimeout(b, 100000);
  }, 100000);
  function Fw(b, x) {
    this.vli = b;
    this.yli = x;
    if (aj.navigator.userAgent.indexOf("Edge") > -1) {
      this.rwi = "default";
      this.owi = "pointer";
    } else {
      this.rwi = "url('img/cursor0.png'), default";
      this.owi = "url('img/cursor1.png'), pointer";
    }
    var N = this;
    function e(b, f, i, e, j) {
      var a = this;
      for (var k = f + Pc, l = bd, n = e, o = f; k > o; o++) {
        N.buttons[o].info.Yvi = d;
        N.buttons[o].info.hwi = b;
      }
      function p() {
        var a = b[n];
        ok.gwi = Zv(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, lq, Zo, V);
        if (Ds !== a.level) {
          ok.cwi = Zv("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, yc, Mh, 8);
        } else {
          ok.cwi = Zv("by " + a.kfi, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, jc, am);
        }
      }
      function d() {
        if (n !== this.dwi && this.dwi !== -1) {
          if (Ou < this.mwi) {
            if (f === ⲆΔⲆΔⵠⵠΔ) {
              E(B, ra, "none");
            } else {
              E(D, ra, "none");
            }
          } else if (ⲆΔⲆΔⵠⵠΔ === f) {
            E(B, ta, "inline-block");
          } else {
            E(D, ta, "inline-block");
          }
          n = this.dwi;
          i(this.dwi);
          p();
        }
      }
      this.uwi = function () {
        for (var c = f, d = l * 3; c < k && b.length > d; c++, d++) {
          if (ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ !== b[d].yfi || j[d] !== Cm) {
            N.buttons[c].info.dwi = d;
            for (var g = 0; g < 3; g++) {
              N.buttons[c].info.ME[g] = ΔⲆⲆᐃⵠ[b[d].yfi][g];
              N.buttons[c].info.active = ta;
              N.buttons[c].info.mwi = j[d];
            }
          } else {
            N.buttons[c].info.dwi = -1;
            N.buttons[c].info.active = ra;
          }
        }
        for (; c < k; c++) {
          N.buttons[c].info.dwi = -X;
          N.buttons[c].info.active = ra;
        }
        p();
      };
      N.buttons[k].info.Yvi = function () {
        if (l > Nf) {
          l--;
        }
        a.uwi();
      };
      N.buttons[k + fo].info.Yvi = function () {
        if (b.length > Sn * l + 9) {
          l++;
        }
        a.uwi();
      };
    }
    function f() {
      var b = Number(ⲆᐃΔⵠ.get("starve_crate"));
      var c = Number(ⲆᐃΔⵠ.get("starve_dead"));
      var d = Number(ⲆᐃΔⵠ.get("starve_book"));
      var e = Number(ⲆᐃΔⵠ.get("starve_bag"));
      var a = Number(ⲆᐃΔⵠ.get("starve_skin"));
      var f = Number(ⲆᐃΔⵠ.get("starve_accessory"));
      N.Mli = a || Sh;
      N._bi = d || ke;
      N.kki = b || lt;
      N.jbi = f || 0;
      N.Fbi = e || 0;
      N.Aki = c || Cm;
    }
    function a() {
      for (var a = ⲆⲆⵠⲆ.ffi, b = 0; a.length > b; b++) {
        if (a[b].yfi === ᐃΔⲆ.ⵠⲆΔᐃⵠ) {
          N.unlock.Mli[b] = 1;
        } else {
          N.unlock.Mli[b] = 0;
        }
      }
      a = ⲆⲆⵠⲆ.Ll;
      b = Nf;
      for (; b < a.length; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].yfi) {
          N.unlock.jbi[b] = 1;
        } else {
          N.unlock.jbi[b] = bd;
        }
      }
      a = ⲆⲆⵠⲆ.ge;
      b = Nf;
      for (; a.length > b; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].yfi) {
          N.unlock.Fbi[b] = 1;
        } else {
          N.unlock.Fbi[b] = 0;
        }
      }
      a = ⲆⲆⵠⲆ.he;
      b = 0;
      for (; a.length > b; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].yfi) {
          N.unlock._bi[b] = ae;
        } else {
          N.unlock._bi[b] = du;
        }
      }
      a = ⲆⲆⵠⲆ.Ar;
      b = Ea;
      for (; a.length > b; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].yfi) {
          N.unlock.kki[b] = 1;
          N.unlock.Aki[b] = fn;
        } else {
          N.unlock.kki[b] = Js;
          N.unlock.Aki[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.fwi = 0;
    this.pwi = -1;
    this.lwi = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ME: ΔΔ[rt.Ao],
      Sfi: function () {
        this.angle += bk * 2;
        x.save();
        x.translate(this.translate.x + this.ME.width / 2, this.translate.y + this.ME.height / z);
        x.rotate(this.angle);
        _l(x, this.ME, -this.ME.width / 2, -this.ME.height / Yh);
        x.restore();
      }
    };
    this.bwi = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: Ea,
        x: Gc
      },
      mi: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.vwi = 0;
    this.ywi = -1;
    this.kwi = undefined;
    this.Awi = "";
    this.wwi = "";
    this.Mwi = undefined;
    this.Bwi = Vd;
    this.Dwi = -1;
    this.Ewi = undefined;
    this.Cwi = 0;
    this.zwi = xn;
    this.xwi = Ng;
    this.Jki = Cm;
    this.Qwi = so;
    this.time = 0;
    this.Eli = 0;
    this.Swi = Cm;
    this.Iwi = Cm;
    this._wi = bd;
    this.Fwi = du;
    this.Pwi = [];
    this.Twi = -1;
    this.jwi = -1;
    this.Rwi = -1;
    this.Lwi = undefined;
    this.Gwi = undefined;
    this.qwi = -X;
    this.Wwi = -Ko;
    this.Nwi = -Ps;
    this.Hwi = -Ps;
    this.Uwi = undefined;
    this.Owi = undefined;
    this.Ywi = Pq;
    this.gwi = Z;
    this.cwi = _e;
    this.Jwi = undefined;
    this.Kwi = undefined;
    this.Xwi = undefined;
    this.Vwi = yc;
    this.Zwi = 3;
    this.Jli = 0;
    this.$wi = false;
    this.abi = ⲆᐃΔⵠ.get("starve_quality") ? ⲆᐃΔⵠ.get("starve_quality") : "high";
    if (this.abi === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.abi = ja;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.abi = 0;
    }
    this.iMi = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃΔⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = ja;
      cx.tMi();
      ok.abi = Ic;
    };
    this.eMi = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⲆᐃΔⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (dr / mr);
      cx.tMi();
      ok.abi = bd;
    };
    if (_e === ⲆᐃΔⵠ.get("starve_mapping") && Fr === "FR") {
      pk.nMi();
      this.mapping = "azerty";
    } else {
      this.mapping = ⲆᐃΔⵠ.get("starve_mapping") ? ⲆᐃΔⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      pk.nMi();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.nMi = function () {
      pk.nMi();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃΔⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.aMi = function () {
      pk.aMi();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⲆᐃΔⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.sMi = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: Sh
      },
      mi: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    f();
    this.unlock = {};
    this.unlock.Mli = [];
    this.unlock.Fbi = [];
    this.unlock._bi = [];
    this.unlock.kki = [];
    this.unlock.Aki = [];
    this.unlock.jbi = [];
    this.rMi = 0;
    this.oMi = a;
    a();
    this.hMi = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: Ea,
        y: Ka
      },
      mi: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var n;
    var r = 0;
    function i() {
      N.mi();
      if (++r == 30) {
        N.gMi();
        N.fwi = Rg;
        N.mi();
        return;
      }
      aj.setTimeout(i, 33);
    }
    this.JAi = function (a) {
      n = a;
      N.cMi();
      N.fwi = ke;
      g = -Jf;
      s();
    };
    var g = -Ko;
    function s() {
      N.mi();
      if (++g == 30) {
        ⲆᐃΔⵠ.set("starve_nickname", N.Ali.input.value, {
          expires: 30
        });
        N.Ali.style.display = "none";
        N.dMi.style.display = "none";
        N.bwi.style.display = "none";
        N.sMi.style.display = "none";
        N.hMi.style.display = "none";
        N.stop();
        n();
        return;
      }
      aj.setTimeout(s, 33);
    }
    this.Ji = false;
    this.stop = function () {
      this.Ji = rr;
    };
    this.eki = function () {
      gx();
      document.getElementById("game_body").style.backgroundColor = rt.Zi[_w.time];
      N.Ali.style.display = "inline-block";
      N.dMi.style.display = "inline-block";
      N.bwi.style.display = "inline-block";
      N.sMi.style.display = "inline-block";
      N.hMi.style.display = "inline-block";
      N.waiting = zn;
      N.Ji = Hs;
      g = -Ej;
      r = Js;
      i();
    };
    this.mMi = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & pa) === pa) {
        if ((a.position & ka) === ka) {
          a.translate.x = ca + a.translate.Hvi - b;
        } else if ((a.position & la) === la) {
          a.translate.x = ca + a.translate.Hvi + b;
        } else {
          a.translate.x = ca + a.translate.Hvi;
        }
      } else if (ka === (a.position & ka)) {
        a.translate.x = a.translate.Hvi - b;
      } else if (la === (a.position & la)) {
        a.translate.x = sa - a.translate.Hvi + b;
      } else {
        a.translate.x = a.translate.Hvi;
      }
      if ((a.position & qa) === qa) {
        if ((a.position & ma) === ma) {
          a.translate.y = Kq + a.translate.Uvi - b;
        } else if ((a.position & na) === na) {
          a.translate.y = Kq + a.translate.Uvi + b;
        } else {
          a.translate.y = Kq + a.translate.Uvi;
        }
      } else if ((a.position & ma) === ma) {
        a.translate.y = a.translate.Uvi - b;
      } else if ((a.position & na) === na) {
        a.translate.y = oa + a.translate.Uvi + b;
      } else {
        a.translate.y = a.translate.Uvi;
      }
      if (Nn !== a.style) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.mi = function () {
      var a = Js;
      if (r != 30 || g != -1) {
        if (r != 30) {
          a = 1500 / (r + hf) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = Cm; b < this.uMi.length; b++) {
        this.mMi(this.uMi[b], a);
      }
      for (b = Sh; b < this.buttons.length; b++) {
        this.mMi(this.buttons[b].info, a);
      }
      for (b = qh; b < this.fMi.length; b++) {
        this.mMi(this.fMi[b], a);
      }
      this.lwi.translate.x = (sa - this.lwi.ME.width) / hu;
      this.lwi.translate.y = Jj;
      this.bwi.translate.x = sa - 450;
      this.bwi.translate.y = oa - 40;
      this.sMi.translate.x = sa - 340;
      this.sMi.translate.y = oa - 25;
      this.hMi.translate.x = sa - 320;
      this.hMi.translate.y = 80;
      if (r != 30 || g != -Lo) {
        var c = Ea;
        if (r != 30) {
          c = 1500 / (r + hf) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + yd) - 48);
        }
        this.lwi.translate.y -= xn < c ? c : -c;
        this.bwi.translate.y -= c < Js ? c : -c;
        this.sMi.translate.y -= bd > c ? c : -c;
      }
      this.bwi.mi();
      this.sMi.mi();
      this.hMi.mi();
    };
    this.pMi = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = Ng; f < b.length; f++) {
        var g = b[f][Oq];
        var h = b[f][Lo] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.lMi = function () {
      this.Awi = document.getElementById("account_nickname_input").value;
      if (this.wwi !== this.Awi) {
        this.wwi = this.Awi;
        this.Mwi = Zv(this.Awi, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.Sfi = function () {
      Fp();
      ok.Cwi = ⵠⵠⵠⲆ.Si(ok.Cwi, ok.zwi, 0.03);
      this.uMi[ⲆᐃΔΔΔᐃⲆ].translate.x = this.uMi[0].translate.x + -72 + ok.Cwi * 165;
      this.uMi[ⲆᐃΔΔΔᐃⲆ].translate.Hvi = this.uMi[ⲆᐃΔΔΔᐃⲆ].translate.x;
      this.uMi[ⲆᐃΔΔΔᐃⲆ].translate.y = this.uMi[0].translate.y + 30;
      this.uMi[ⲆᐃΔΔΔᐃⲆ].translate.Uvi = this.uMi[ⲆᐃΔΔΔᐃⲆ].translate.y;
      for (var b = 2; b < this.uMi.length; b++) {
        if (this.uMi[b].active === ta) {
          this.uMi[b].Sfi(x);
        }
      }
      var e;
      if ((e = this.Twi - Date.now()) > 0) {
        var n = Math.floor(e / 60000);
        var u = Math.floor(n / 60);
        if ((n %= 60) !== this.Rwi) {
          this.Rwi = n;
          n = n < rf ? "0" + n : "" + n;
          N.Lwi = Zv(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.jwi !== u) {
          this.jwi = u;
          u = u < 10 ? "0" + u : "" + u;
          N.Gwi = Zv(u, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (S = this.uMi[ⲆΔⲆΔΔᐃᐃ]).Sfi(x);
        var A = this.Gwi;
        _l(x, A, S.translate.x - A.width / 4 + 182, S.translate.y - A.height / 4 + 40, A.width / eu, A.height / 2);
        A = this.Lwi;
        _l(x, A, S.translate.x - A.width / _g + 251, S.translate.y - A.height / 4 + 40, A.width / mj, A.height / 2);
      }
      if ((e = this.qwi - Date.now()) > sh) {
        n = Math.floor(e / 60000);
        u = Math.floor(n / 60);
        var S;
        var V = Math.floor(u / 24);
        n %= 60;
        u %= 24;
        if (this.Hwi !== n) {
          this.Hwi = n;
          n = Sg > n ? "0" + n : "" + n;
          N.Uwi = Zv(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.Nwi !== u) {
          this.Nwi = u;
          u = jc > u ? "0" + u : "" + u;
          N.Owi = Zv(u, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (V !== this.Wwi) {
          this.Wwi = V;
          V = V < 10 ? "0" + V : "" + V;
          N.Ywi = Zv(V, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (S = this.uMi[ᐃⲆᐃⵠⵠΔᐃ]).Sfi(x);
        A = this.Ywi;
        _l(x, A, S.translate.x - A.width / Ha + 113, S.translate.y - A.height / 4 + 40, A.width / 2, A.height / 2);
        A = this.Owi;
        _l(x, A, S.translate.x - A.width / Gs + 182, S.translate.y - A.height / 4 + 40, A.width / hu, A.height / 2);
        A = this.Uwi;
        _l(x, A, S.translate.x - A.width / Jr + 251, S.translate.y - A.height / eh + 40, A.width / eu, A.height / 2);
      }
      if (aa === (this.bMi & aa)) {
        this.buttons[ⵠⲆⵠΔⲆᐃΔ].info.state = Xv;
      } else if ((this.bMi & w) === w) {
        this.buttons[ⵠΔⵠⲆΔᐃⵠ].info.state = Xv;
      } else if ((this.bMi & l) === l) {
        this.buttons[ⲆΔⵠⵠⵠΔᐃ].info.state = Xv;
      } else if (ba === (this.bMi & ba)) {
        this.buttons[ⲆᐃⵠΔΔᐃⲆ].info.state = Xv;
      } else if ((this.bMi & y) === y) {
        this.buttons[ΔΔΔⲆΔⲆⵠ].info.state = Xv;
      } else if (p === (this.bMi & p)) {
        this.buttons[ΔⲆⵠΔᐃⵠᐃ].info.state = Xv;
      } else if ((this.bMi & v) === v || (this.bMi & C) === C || (this.bMi & M) === M || Q === (this.bMi & Q) || (this.bMi & I) === I || (this.bMi & F) === F || P === (this.bMi & P)) {
        this.buttons[ⵠᐃᐃⲆⲆⲆⵠ].info.state = Xv;
      } else if (T === (this.bMi & T) || R === (this.bMi & R) || j === (this.bMi & j) || L === (this.bMi & L) || (this.bMi & G) === G || q === (this.bMi & q)) {
        this.buttons[ⲆΔⵠⵠⵠΔᐃ].info.state = Xv;
      } else if ((this.bMi & U) === U || (this.bMi & da) === da || J === (this.bMi & J)) {
        this.buttons[ΔⲆⲆⲆΔΔⲆ].info.state = Xv;
      } else if ((this.bMi & K) === K) {
        this.buttons[ⲆᐃⵠΔΔᐃⲆ].info.state = Xv;
      }
      if ((this.bMi & w) === w) {
        if (this.vMi === this.Kwi) {
          this.Jwi = this.yMi;
          this.buttons[this.yMi].info.active = ra;
          this.buttons[this.kMi].info.active = ra;
          this.buttons[this.AMi].info.active = ra;
        } else {
          this.buttons[this.yMi].info.active = ta;
          this.buttons[this.kMi].info.active = ta;
          this.buttons[this.AMi].info.active = ta;
        }
        if (this.wMi === this.Kwi) {
          this.buttons[this.wMi].info.state = Xv;
        } else if (this.Kwi === this.MMi) {
          this.buttons[this.MMi].info.state = Xv;
        } else if (this.Kwi === this.vMi) {
          this.buttons[this.vMi].info.state = Xv;
        } else if (this.BMi === this.Kwi) {
          this.buttons[this.BMi].info.state = Xv;
        } else if (this.DMi === this.Kwi) {
          this.buttons[this.DMi].info.state = Xv;
        }
        if (this.Jwi === this.yMi) {
          this.buttons[this.yMi].info.state = Xv;
        } else if (this.kMi === this.Jwi) {
          this.buttons[this.kMi].info.state = Xv;
        } else if (this.AMi === this.Jwi) {
          this.buttons[this.AMi].info.state = Xv;
        }
        if (this.Xwi === this.EMi) {
          this.buttons[this.EMi].info.state = Xv;
        } else if (this.Xwi === this.CMi) {
          this.buttons[this.CMi].info.state = Xv;
        } else if (this.zMi === this.Xwi) {
          this.buttons[this.zMi].info.state = Xv;
        }
        if (this.Vwi === this.xMi) {
          this.buttons[this.xMi].info.state = Xv;
        } else if (this.QMi === this.Vwi) {
          this.buttons[this.QMi].info.state = Xv;
        } else if (this.SMi === this.Vwi) {
          this.buttons[this.SMi].info.state = Xv;
        } else if (this.IMi === this.Vwi) {
          this.buttons[this.IMi].info.state = Xv;
        } else if (this.Vwi === this._Mi) {
          this.buttons[this._Mi].info.state = Xv;
        } else if (this.FMi === this.Vwi) {
          this.buttons[this.FMi].info.state = Xv;
        }
      }
      if (ba === (this.bMi & ba)) {
        if (-Ej === this.pwi) {
          this.buttons[Oa].info.state = Xv;
        } else if (this.pwi === iw.Cli) {
          this.buttons[Pa].info.state = Xv;
        } else if (iw.wli === this.pwi) {
          this.buttons[Ra].info.state = Xv;
        } else if (this.pwi === iw.Bli) {
          this.buttons[Sa].info.state = Xv;
        } else if (this.pwi === iw.zli) {
          this.buttons[Qa].info.state = Xv;
        }
        if (this.Zwi === 0) {
          this.buttons[Ga].info.state = Xv;
        } else if (fo === this.Zwi) {
          this.buttons[Ia].info.state = Xv;
        } else if (this.Zwi === yo) {
          this.buttons[Ja].info.state = Xv;
        } else if (this.Zwi === 3) {
          this.buttons[La].info.state = Xv;
        } else if (this.Zwi === Gs) {
          this.buttons[Ma].info.state = Xv;
        } else if (Y === this.Zwi) {
          this.buttons[Na].info.state = Xv;
        }
      }
      if (aa === (this.bMi & aa) && nj === ᐃΔΔᐃ.PMi) {
        if (this.buttons[ya].Kvi(lk.Kbi)) {
          this.buttons[ya].hint = Math.min(1, this.buttons[ya].hint + bk * 1.5);
        } else {
          this.buttons[ya].hint = Math.max(0, this.buttons[ya].hint - bk * 1.5);
        }
        if (this.buttons[za].Kvi(lk.Kbi)) {
          this.buttons[za].hint = Math.min(fn, this.buttons[za].hint + bk * 1.5);
        } else {
          this.buttons[za].hint = Math.max(0, this.buttons[za].hint - bk * 1.5);
        }
        if (this.buttons[Aa].Kvi(lk.Kbi)) {
          this.buttons[Aa].hint = Math.min(1, this.buttons[Aa].hint + bk * 1.5);
        } else {
          this.buttons[Aa].hint = Math.max(0, this.buttons[Aa].hint - bk * 1.5);
        }
        if (this.buttons[Da].Kvi(lk.Kbi)) {
          this.buttons[Da].hint = Math.min(1, this.buttons[Da].hint + bk * 1.5);
        } else {
          this.buttons[Da].hint = Math.max(0, this.buttons[Da].hint - bk * 1.5);
        }
        if (this.buttons[Ba].Kvi(lk.Kbi)) {
          this.buttons[Ba].hint = Math.min(1, this.buttons[Ba].hint + bk * 1.5);
        } else {
          this.buttons[Ba].hint = Math.max(nj, this.buttons[Ba].hint - bk * 1.5);
        }
        if (this.buttons[Ca].Kvi(lk.Kbi)) {
          this.buttons[Ca].hint = Math.min(1, this.buttons[Ca].hint + bk * 1.5);
        } else {
          this.buttons[Ca].hint = Math.max(Cm, this.buttons[Ca].hint - bk * 1.5);
        }
      }
      var _ = ja;
      if ((this.bMi & (C | M | Q | I | F | P)) > 1) {
        A = Δᐃ.GO;
        x.save();
        x.translate(ca, wa + A.height / _n);
        if (this.TMi === 1) {
          this.jMi += bk / Xg;
          _ = this.RMi - Kn / Math.pow(1 + this.jMi, dm + this.jMi);
          x.rotate(_);
        }
        _l(x, A, -A.width / bq, -A.height / 4, A.width / Cg, A.height / 2);
        x.restore();
      }
      if (ᐃΔΔᐃ.PMi === so) {
        if (ᐃΔΔᐃ.LMi === iw.Cli) {
          this.buttons[ya].info.state = Xv;
        } else if (iw.zli === ᐃΔΔᐃ.LMi) {
          this.buttons[za].info.state = Xv;
        } else if (iw.wli === ᐃΔΔᐃ.LMi) {
          this.buttons[Ba].info.state = Xv;
        } else if (ᐃΔΔᐃ.LMi === iw.Bli) {
          this.buttons[Ca].info.state = Xv;
        } else if (ᐃΔΔᐃ.LMi === iw.Ayi) {
          this.buttons[Aa].info.state = Xv;
        } else if (iw.Qli === ᐃΔΔᐃ.LMi) {
          this.buttons[Da].info.state = Xv;
        }
      }
      for (b = Lo; this.buttons.length > b; b++) {
        if (this.buttons[b].info.active === ta) {
          this.buttons[b].Sfi(x);
        }
      }
      this.uMi[Ka].Sfi(x);
      if (qh < (this.bMi & (H | W))) {
        A = this.Mwi;
        _l(x, A, ca - A.width / 4, 138, A.width / ih, A.height / Gi);
      }
      var ea = Math.max(X, Math.min($a, Math.floor((ok.Bwi + 3) / 2)));
      this.uMi[ea].active = ta;
      this.uMi[ea].Sfi(x);
      this.uMi[ea].active = ra;
      this.buttons[0].Sfi(x);
      if ((this.bMi & (l | R | L | T | G)) > 1) {
        var c = (this.bMi & (R | L | T | G)) > 1 ? -190 : 0;
        A = ΔΔ[rt.ge][this.Fbi][this.rMi];
        _l(x, A, ca - A.width / 4 + c, 183, A.width / Te, A.height / 2);
        this.Jli = (this.Jli + bk * 1000) % 2000;
        var d = (this.Jli < 1000) * 4.5 ? this.Jli / 1000 : (2000 - this.Jli) / 1000;
        A = ΔΔ[rt.he][this._bi][this.rMi];
        _l(x, A, ca - A.width / 4 - 62 + d + c, 240, A.width / 2, A.height / 2);
        A = ΔΔ[rt.qt][this.Mli][this.rMi];
        _l(x, A, ca - A.width / 4 - 54 + d + c, 272, A.width / 2, A.height / eu);
        _l(x, A, ca - A.width / 4 + 54 - d + c, 272, A.width / 2, A.height / ih);
        A = ΔΔ[rt.Er][this.Mli][this.rMi];
        _l(x, A, ca - A.width / Gs + c, 222, A.width / wh, A.height / wh);
        A = ΔΔ[rt.Ll][this.jbi][this.rMi];
        _l(x, A, ca - A.width / 4 + c, 222, A.width / tm, A.height / Te);
      }
      if ((this.bMi & l) === l) {
        A = ΔΔ[rt.Ar][this.kki][this.rMi];
        _l(x, A, ca - A.width / Gm - 61, 406 - A.height / Jn, A.width / 2, A.height / Te);
        A = ΔΔ[rt.Ar][this.Aki][this.rMi];
        _l(x, A, ca - A.width / k + 53, 406 - A.height / 4, A.width / 2, A.height / wh);
      }
      if ((this.bMi & j) === j) {
        A = ΔΔ[rt.Ar][this.Aki][this.rMi];
        _l(x, A, ca - A.width / Nr - 200, 268 - A.height / sj, A.width / En, A.height / 2);
      }
      if (q === (this.bMi & q)) {
        A = ΔΔ[rt.Ar][this.kki][this.rMi];
        _l(x, A, ca - A.width / 4 - 200, 268 - A.height / Jr, A.width / 2, A.height / 2);
      }
      if ((this.bMi & (R | L | T | G | j | q)) > 1) {
        for (b = Ps; this.buttons.length > b; b++) {
          if (this.buttons[b].view & this.bMi) {
            var ha = this.buttons[b].info;
            if (ha.dwi >= bd) {
              A = ha.hwi[ha.dwi].pfi;
              _l(x, A, ha.translate.x - A.width / 8 + 44.5, ha.translate.y - A.height / kc + 45.5, A.width / bq, A.height / 4);
              if (ha.mwi !== 1) {
                A = Δᐃ.rH;
                _l(x, A, ha.translate.x - A.width / eh + 44.5, ha.translate.y - A.height / 4 + 44.5, A.width / eu, A.height / rd);
              }
            }
          }
        }
        A = this.gwi;
        _l(x, A, ca - 312, 375, A.width / 2, A.height / 2);
        A = this.cwi;
        _l(x, A, ca - 312, 395, A.width / 2, A.height / eu);
      }
      if (this.ywi !== this.vwi) {
        this.ywi = this.vwi;
        this.kwi = Zv("" + this.vwi, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      _l(x, this.kwi, this.uMi[0].translate.x + 350, 15, this.kwi.ivi, this.kwi.Xvi);
      if (this.Bwi !== this.Dwi) {
        this.Dwi = this.Bwi;
        this.Ewi = Zv("LVL " + (this.Bwi + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Ug, 30, 24, undefined, undefined, Rj, Z, "#3F3019", Ji);
      }
      _l(x, this.Ewi, this.uMi[0].translate.x + 94, 0, this.Ewi.ivi, this.Ewi.Xvi);
      if (ᐃΔΔᐃ.PMi === Ka) {
        var ia = this.buttons[ya].hint;
        if (Vd < ia) {
          A = Δᐃ.nG;
          _l(x, A, ca - A.width / 4, -36 - A.height * ⵠⵠⵠⲆ.ti(fi - ia) / hu, A.width / wc, A.height / hu);
        }
        if ((ia = this.buttons[za].hint) > 0) {
          A = Δᐃ.eG;
          _l(x, A, ca - A.width / 4, -36 - ⵠⵠⵠⲆ.ti(1 - ia) * A.height / 2, A.width / 2, A.height / 2);
        }
        ia = this.buttons[Aa].hint;
        if (nj < ia) {
          A = Δᐃ.rG;
          _l(x, A, ca - A.width / Dd, -36 - A.height * ⵠⵠⵠⲆ.ti(1 - ia) / z, A.width / 2, A.height / Cs);
        }
        if ((ia = this.buttons[Da].hint) > 0) {
          A = Δᐃ.oG;
          _l(x, A, ca - A.width / mn, -36 - ⵠⵠⵠⲆ.ti(1 - ia) * A.height / wh, A.width / rd, A.height / tm);
        }
        if ((ia = this.buttons[Ca].hint) > 0) {
          A = Δᐃ.aG;
          _l(x, A, ca - A.width / _n, -36 - ⵠⵠⵠⲆ.ti(Lh - ia) * A.height / 2, A.width / rd, A.height / Cg);
        }
        if ((ia = this.buttons[Ba].hint) > 0) {
          A = Δᐃ.sG;
          _l(x, A, ca - A.width / 4, -36 - A.height * ⵠⵠⵠⲆ.ti(1 - ia) / 2, A.width / 2, A.height / wc);
        }
      }
      if (this.TMi === 1 && Math.abs(_ - this.RMi) < 0.006) {
        x.globalAlpha = Math.min(1, Qe * this.GMi);
        A = Δᐃ.eY;
        x.save();
        x.translate(ca, 260);
        this.GMi += bk;
        x.rotate(this.GMi);
        _l(x, A, -A.width / 2, -A.height / eu, A.width, A.height);
        x.restore();
        d = 1.05 + Math.cos(this.GMi * Cd) * 0.05;
        if (this.qMi === Vd) {
          var ka = d * (A = ⲆⲆⵠⲆ.ffi[this.WMi].pfi).width;
          var la = A.height * d;
          _l(x, A, ca - ka / 2, 260 - la / 2, ka, la);
        } else if (this.qMi === 1) {
          ka = (A = ⲆⲆⵠⲆ.ffi[Vd].pfi).width * d;
          la = d * A.height;
          _l(x, A, ca - ka / hu, 260 - la / 2, ka, la);
          ka = (A = ⲆⲆⵠⲆ.Ll[this.WMi].pfi).width * d;
          la = d * A.height;
          _l(x, A, ca - ka / Vn, 260 - la / wc, ka, la);
        } else if (Vn === this.qMi) {
          ka = (A = ⲆⲆⵠⲆ.ge[this.WMi].pfi).width * d;
          la = A.height * d;
          _l(x, A, ca - ka / 2, 180 - la / mj, ka, la);
          ka = (A = ⲆⲆⵠⲆ.ffi[Js].pfi).width * d;
          la = d * A.height;
          _l(x, A, ca - ka / 2, 260 - la / wc, ka, la);
        } else if (this.qMi === 3) {
          ka = (A = ⲆⲆⵠⲆ.he[this.WMi].pfi).width * d;
          la = A.height * d;
          x.save();
          x.translate(ca, 260);
          x.rotate(Math.PI);
          _l(x, A, -ka / tm, -la / 2, ka, la);
          x.restore();
        } else if (bq === this.qMi) {
          ka = d * (A = ⲆⲆⵠⲆ.Ar[this.WMi].pfi).width;
          la = d * A.height;
          _l(x, A, ca - ka / tm, 260 - la / 2, ka, la);
        }
        A = this.NMi;
        _l(x, A, ca - A.width / 4, 340, A.width / wh, A.height / 2);
        A = this.HMi;
        _l(x, A, ca - A.width / Gs, 365, A.width / tm, A.height / lr);
        if (O < this.GMi) {
          this.TMi = 0;
          fa(v);
        }
        x.globalAlpha = Mc;
      }
      ax.alert.Sfi("#FFF", "#000");
      if (N.waiting) {
        this.lwi.Sfi();
      }
    };
    var d = 0;
    var aa = Math.pow(2, d++);
    var ba = Math.pow(Te, d++);
    this.UMi = ba;
    var p = Math.pow(eu, d++);
    var l = Math.pow(yo, d++);
    var v = Math.pow(lr, d++);
    var y = Math.pow(2, d++);
    var w = Math.pow(mj, d++);
    var t = Math.pow(yo, d++);
    this.OMi = t;
    var B = Math.pow(2, d++);
    var D = Math.pow(2, d++);
    var C = Math.pow(En, d++);
    var M = Math.pow(Te, d++);
    var Q = Math.pow(2, d++);
    var I = Math.pow(rd, d++);
    var F = Math.pow(Cg, d++);
    var P = Math.pow(Gi, d++);
    var T = Math.pow(2, d++);
    var j = Math.pow(En, d++);
    var R = Math.pow(En, d++);
    var L = Math.pow(2, d++);
    var G = Math.pow(2, d++);
    var q = Math.pow(Gi, d++);
    var W = Math.pow(2, d++);
    var H = Math.pow(2, d++);
    var U = Math.pow(mj, d++);
    this.YMi = U;
    var da = Math.pow(ih, d++);
    this.JMi = da;
    var J = Math.pow(2, d++);
    this.KMi = J;
    var K = Math.pow(2, d++);
    function E(b, c, d) {
      for (var e = ke; N.uMi.length > e; e++) {
        if (N.uMi[e].view & b) {
          N.uMi[e].active = c;
        }
      }
      for (e = nj; N.buttons.length > e; e++) {
        if (ke !== (N.buttons[e].view & b)) {
          N.buttons[e].info.active = c;
        }
      }
      for (e = Cm; e < N.fMi.length; e++) {
        if ((N.fMi[e].view & b) !== Ka) {
          N.fMi[e].style.display = d;
        }
      }
    }
    this.bMi = aa;
    function ea() {
      var b = Number(ⲆᐃΔⵠ.get("starve_crate"));
      var c = Number(ⲆᐃΔⵠ.get("starve_dead"));
      var d = Number(ⲆᐃΔⵠ.get("starve_book"));
      var e = Number(ⲆᐃΔⵠ.get("starve_bag"));
      var f = Number(ⲆᐃΔⵠ.get("starve_skin"));
      var a = Number(ⲆᐃΔⵠ.get("starve_accessory"));
      if (ok.unlock.Mli[ok.Mli] <= sh) {
        ok.Mli = ok.unlock.Mli[f] > du ? f : Ka;
      }
      if (ok.unlock._bi[ok._bi] <= Cm) {
        ok._bi = ok.unlock._bi[d] > 0 ? d : 0;
      }
      if (ok.unlock.Aki[ok.Aki] <= 0) {
        ok.Aki = ok.unlock.Aki[c] > qh ? c : Jj;
      }
      if (ok.unlock.kki[ok.kki] <= 0) {
        ok.kki = ok.unlock.kki[b] > Vd ? b : bd;
      }
      if (ok.unlock.jbi[ok.jbi] <= 0) {
        ok.jbi = ok.unlock.jbi[a] > qh ? a : Vd;
      }
      if (ok.unlock.Fbi[ok.Fbi] <= Ou) {
        ok.Fbi = ok.unlock.Fbi[e] > 0 ? e : so;
      }
    }
    function fa(a) {
      if (N.fwi !== false) {
        E(B, ra, "none");
        E(D, ra, "none");
        ea();
        if (a !== N.bMi && N.TMi < 1) {
          N.hMi.style.display = a === aa || v === a || a === ba || w === a || a === l || y === a ? "inline-block" : "none";
          E(N.bMi, ra, "none");
          N.bMi = a;
          E(N.bMi, ta, "inline-block");
        }
      }
    }
    function ha() {
      if (ax.XMi !== undefined && ax.VMi !== undefined && ax.ZMi !== undefined) {
        ea();
        if (Ak % 2) {
          console.log(ch);
          ᐃΔΔᐃ.connect();
        } else {
          console.log(undefined);
          if (aj.Widget.$Mi === 1) {
            aj.Widget.iBi(ᐃΔΔᐃ.connect.bind(ᐃΔΔᐃ), ᐃΔΔᐃ.connect.bind(ᐃΔΔᐃ));
          } else {
            aj.Widget.tBi();
            aj.Widget.play = ᐃΔΔᐃ.connect.bind(ᐃΔΔᐃ);
          }
        }
      }
    }
    function ia(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == Jr && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (Gs == this.readyState && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    this.eBi = nj;
    this.nBi = fa;
    this.aBi = function () {
      if (N.waiting === Mr) {
        ax.reconnect.enabled = Xq;
        N.waiting = Vj;
        if (ax.XMi) {
          ha();
        } else {
          ia(`${Dk}token`, function (b) {
            const c = b.split("_");
            const d = c[Jj] + "_";
            const e = Number(c[1]);
            const f = Math.abs(function (a) {
              return gn(a, 8260, 46947, 8004, 37330, 5330);
            }(e));
            ax.XMi = d + f;
            ha();
          }, function () {
            N.waiting = false;
          });
        }
        ia(`${Ek}get`, function (b) {
          const c = b.split("_");
          const d = c[ke] + "_";
          const e = Number(c[1]);
          const f = Math.abs(ve(e));
          ax.VMi = d + f;
          ha();
        }, function () {
          N.waiting = u;
        });
        ia(`${Ek}set`, function (b) {
          const c = b.split("_");
          const d = c[Sh] + "_";
          const e = Number(c[1]);
          const f = Math.abs(function (a) {
            return function (b, c, d, e) {
              cq(Zc, b, c, d, e);
              const f = function (b, c, d, e, f, a) {
                Tj(Zc, b, c, d, e, f, a);
                const g = sd(id[bd], id[ae]);
                const h = function (a, b, c) {
                  Yj(Zc, a, b, c);
                  const d = Br(id[0], id[ja], id[ih], id[Js], id[Ej]);
                  zr(id[yo], id[0]);
                  return (d | 55787) & ~(d & 55787);
                }(id[Cg], id[Sr], id[4]);
                return (8 << ((g ^ h) & 255)) + (24 << ((g ^ h) >> 24 & es)) + (16 << ((g ^ h) >> 8 & sc)) + (0 << ((g ^ h) >> 16 & 255));
              }(id[0], id[1], id[Tg], id[3], id[0], id[1]);
              zr(id[Gi], id[3]);
              return (f | 33577) & ~(f & 33577);
            }(a, 22898, 64010, 26473);
          }(e));
          ax.ZMi = d + f;
          ha();
        }, function () {
          N.waiting = kg;
        });
      }
    };
    var ka = lt;
    var la = 2;
    var ma = 4;
    var na = 8;
    var pa = 16;
    var qa = 32;
    var ra = Jj;
    var ta = Ej;
    if (aj.innerWidth < 1300) {
      this.Ali = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ta,
        position: ma | ka,
        view: aa,
        translate: {
          Uvi: 184,
          y: Sh,
          x: 0,
          Hvi: 200
        }
      };
    } else {
      this.Ali = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ta,
        position: ma | pa,
        view: aa,
        translate: {
          y: 0,
          Uvi: 184,
          x: 0,
          Hvi: -180
        }
      };
    }
    this.Ali.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == Md && !N.waiting && !N.$wi) {
        N.aBi();
      }
    });
    this.Ali.input.value = ⲆᐃΔⵠ.get("starve_nickname") ? ⲆᐃΔⵠ.get("starve_nickname") : "";
    this.sBi = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ra,
      position: ma | pa,
      view: ba,
      translate: {
        Hvi: -122,
        x: 0,
        y: Oq,
        Uvi: 110
      }
    };
    if (aj.innerWidth < 1300) {
      this.dMi = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ta,
        position: ma | ka,
        view: aa,
        translate: {
          y: Jj,
          Uvi: 225,
          Hvi: 208,
          x: 0
        }
      };
    } else {
      this.dMi = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ta,
        position: ma | pa,
        view: aa,
        translate: {
          Uvi: 225,
          y: 0,
          x: Sh,
          Hvi: -180
        }
      };
    }
    this.lli = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ra,
      position: ma | pa,
      view: w,
      translate: {
        y: 0,
        x: 0,
        Hvi: -294.5,
        Uvi: 190
      }
    };
    this.rBi = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ra,
      position: ma | pa,
      view: ba,
      translate: {
        y: sh,
        Uvi: 187,
        Hvi: 125,
        x: 0
      }
    };
    this.oBi = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ra,
      position: ma | pa,
      view: J,
      translate: {
        Uvi: 350,
        y: Gc,
        x: so,
        Hvi: -220
      }
    };
    d = 0;
    this.fMi = [];
    this.fMi[d++] = this.Ali;
    this.fMi[d++] = this.dMi;
    this.fMi[d++] = this.lli;
    this.fMi[d++] = this.sBi;
    this.fMi[d++] = this.rBi;
    this.fMi[d++] = this.oBi;
    d = Ou;
    this.uMi = [];
    this.uMi[d++] = $v(Δᐃ.bW, ta, 0, 0, ka);
    this.uMi[d++] = $v(Δᐃ.vW, ra, Js, 0, ka);
    this.uMi[d++] = $v(Δᐃ.yW, ra, Oq, 0, ka);
    this.uMi[d++] = $v(Δᐃ.kW, ra, ke, Oq, ka);
    this.uMi[d++] = $v(Δᐃ.AW, ra, 0, nj, ka);
    this.uMi[d++] = $v(Δᐃ.wW, ra, du, xn, ka);
    this.uMi[d++] = $v(Δᐃ.MW, ra, 0, Vd, ka);
    this.uMi[d++] = $v(Δᐃ.BW, ra, qh, Vd, ka);
    this.uMi[d++] = $v(Δᐃ.DW, ra, 0, Sh, ka);
    this.uMi[d++] = $v(Δᐃ.EW, ra, 0, 0, ka);
    this.uMi[d++] = $v(Δᐃ.zW, ra, Nf, xn, ka);
    this.uMi[d++] = $v(Δᐃ.xW, ra, Ou, so, ka);
    this.uMi[d++] = $v(Δᐃ.QW, ra, Ka, bd, ka);
    this.uMi[d++] = $v(Δᐃ.SW, ra, 0, 0, ka);
    this.uMi[d++] = $v(Δᐃ.IW, ra, xn, xn, ka);
    this.uMi[d++] = $v(Δᐃ._W, ra, 0, 0, ka);
    this.uMi[d++] = $v(Δᐃ.FW, ra, 0, 0, ka);
    this.uMi[d++] = $v(Δᐃ.PW, ra, Js, 0, ka);
    this.uMi[d++] = $v(Δᐃ.TW, ra, Ou, 0, ka);
    if (aj.innerWidth < 1300) {
      this.uMi[d] = $v(Δᐃ.tG, ta, 200, yq, ma | ka);
    } else {
      this.uMi[d] = $v(Δᐃ.tG, ta, -753 / sj, 100, ma | pa);
    }
    this.uMi[d++].view = aa;
    this.uMi[d++] = $v(Δᐃ.rq, ta, 403, -ar, la);
    if (aj.innerWidth > 1300) {
      this.uMi[d] = $v(Δᐃ.oq, ta, -885 / Gs, -319 / Cg, na | pa);
      this.uMi[d++].view = aa;
    }
    this.uMi[d] = $v(Δᐃ.iN, ra, -323.25, Vs, ma | pa);
    this.uMi[d++].view = ba;
    this.uMi[d] = $v(Δᐃ.tN, ra, -1425 / _n, 100, ma | pa);
    this.uMi[d++].view = l;
    this.uMi[d] = $v(Δᐃ.wq, ra, -905 / 4, 50, ma | pa);
    this.uMi[d++].view = p;
    this.uMi[d] = $v(Δᐃ.eN, ra, -402, 130, ma | pa);
    this.uMi[d++].view = v;
    this.uMi[d] = $v(Δᐃ.aN, ra, -279.25, 130, ma | pa);
    this.uMi[d++].view = U;
    this.uMi[d] = $v(Δᐃ.sN, ra, -305.5, 130, ma | pa);
    this.uMi[d++].view = da;
    this.uMi[d] = $v(Δᐃ.lN, ra, -305.5, 100, ma | pa);
    this.uMi[d++].view = J;
    this.uMi[d] = $v(Δᐃ.$W, ra, -Δᐃ.$W.width / Jn - 350, -15, ma | pa);
    this.uMi[d++].view = K;
    this.uMi[d] = $v(Δᐃ.rN, ra, -1497 / eh, 110, ma | pa);
    this.uMi[d++].view = y;
    this.uMi[d] = $v(Δᐃ.oN, ra, -1226 / Ld, 100, ma | pa);
    this.uMi[d++].view = w;
    this.uMi[d] = $v(Δᐃ.hN, ra, -345.25, 80, ma | pa);
    this.uMi[d++].view = t;
    this.uMi[d] = $v(Δᐃ.FO, ra, -1542 / k, 150, ma | pa);
    this.uMi[d++].view = C;
    var ua = 360 / fc;
    var va = this.pMi([["#25c5d6", ua * 3], ["#e2cf27", as * ua], ["#afac98", ua * 30], ["#d88e23", ua * 57]]);
    this.uMi[d] = $v(va, ra, -va.width / _n, 178, ma | pa);
    this.uMi[d++].view = C;
    this.hBi = function (b, c, d) {
      var e;
      N.TMi = fi;
      N.jMi = Ka;
      N.GMi = Ea;
      N.RMi = b;
      N.qMi = c;
      var f = Jj;
      if (c === 0) {
        for (f = 0; f < ⲆⲆⵠⲆ.ffi.length && d !== ⲆⲆⵠⲆ.ffi[f].id; f++);
        e = ⲆⲆⵠⲆ.ffi[f];
        N.unlock.Mli[f] = 1;
      } else if (c === yd) {
        for (f = 0; f < ⲆⲆⵠⲆ.Ll.length && d !== ⲆⲆⵠⲆ.Ll[f].id; f++);
        e = ⲆⲆⵠⲆ.Ll[f];
        N.unlock.jbi[f] = 1;
      } else if (c === En) {
        for (f = 0; ⲆⲆⵠⲆ.ge.length > f && d !== ⲆⲆⵠⲆ.ge[f].id; f++);
        e = ⲆⲆⵠⲆ.ge[f];
        N.unlock.Fbi[f] = fi;
      } else if (c === 3) {
        for (f = Cm; f < ⲆⲆⵠⲆ.he.length && d !== ⲆⲆⵠⲆ.he[f].id; f++);
        e = ⲆⲆⵠⲆ.he[f];
        N.unlock._bi[f] = 1;
      } else if (c === Nr) {
        for (f = Nf; f < ⲆⲆⵠⲆ.Ar.length && ⲆⲆⵠⲆ.Ar[f].id !== d; f++);
        e = ⲆⲆⵠⲆ.Ar[f];
        N.unlock.kki[f] = Ps;
        N.unlock.Aki[f] = fo;
      }
      N.WMi = f;
      N.HMi = Zv("by " + e.kfi, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, Zg, Pq, lq, undefined, "#000000", 24);
      N.NMi = Zv(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, ch, 30, 24, undefined, Rc, undefined, undefined, "#000000", 20);
    };
    this.TMi = du;
    this.jMi = Ea;
    this.RMi = 0;
    this.qMi = Ea;
    this.GMi = 0;
    this.HMi = undefined;
    this.NMi = undefined;
    var wa = 197;
    this.uMi[d] = $v(Δᐃ.PO, ra, -1542 / Ac, 150, ma | pa);
    this.uMi[d++].view = F;
    va = this.pMi([["#d45ce5", ua * er], ["#25c5d6", ua * 10], ["#e2cf27", ua * 30], ["#afac98", ua * 57]]);
    this.uMi[d] = $v(va, ra, -va.width / 4, 178, ma | pa);
    this.uMi[d++].view = F;
    this.uMi[d] = $v(Δᐃ.TO, ra, -385.5, 150, ma | pa);
    this.uMi[d++].view = Q;
    va = this.pMi([["#d33a2a", ua * mq], ["#d45ce5", ua * as], ["#25c5d6", ua * 30], ["#e2cf27", ua * 57]]);
    this.uMi[d] = $v(va, ra, -va.width / mn, 178, ma | pa);
    this.uMi[d++].view = Q;
    this.uMi[d] = $v(Δᐃ.jO, ra, -1542 / Ud, 150, ma | pa);
    this.uMi[d++].view = I;
    va = this.pMi([["#25c5d6", ua * Ie], ["#e2cf27", ua * jc], ["#afac98", ua * 30], ["#d88e23", ua * 57]]);
    this.uMi[d] = $v(va, ra, -va.width / 4, 178, ma | pa);
    this.uMi[d++].view = I;
    this.uMi[d] = $v(Δᐃ.RO, ra, -1542 / Nr, 150, ma | pa);
    this.uMi[d++].view = M;
    va = this.pMi([["#d45ce5", ua * oe], ["#25c5d6", ua * ar], ["#e2cf27", ua * 30], ["#afac98", ua * 57]]);
    this.uMi[d] = $v(va, ra, -va.width / 4, 178, ma | pa);
    this.uMi[d++].view = M;
    this.uMi[d] = $v(Δᐃ.LO, ra, -1542 / mn, 150, ma | pa);
    this.uMi[d++].view = P;
    va = this.pMi([["#d33a2a", ua * 3], ["#d45ce5", ua * 10], ["#25c5d6", ua * 30], ["#e2cf27", ua * 57]]);
    this.uMi[d] = $v(va, ra, -va.width / Gm, 178, ma | pa);
    this.uMi[d++].view = P;
    this.uMi[d] = $v(Δᐃ.uN, ra, -341.5, io, ma | pa);
    this.uMi[d++].view = T;
    this.uMi[d] = $v(Δᐃ.mN, ra, -1366 / sj, 100, ma | pa);
    this.uMi[d++].view = G;
    this.uMi[d] = $v(Δᐃ.gN, ra, -341.5, 100, ma | pa);
    this.uMi[d++].view = R;
    this.uMi[d] = $v(Δᐃ.dN, ra, -1366 / Gm, Jo, ma | pa);
    this.uMi[d++].view = L;
    this.uMi[d] = $v(Δᐃ.cN, ra, -341.5, To, ma | pa);
    this.uMi[d++].view = j;
    this.uMi[d] = $v(Δᐃ.bN, ra, -341.5, Kn, ma | pa);
    this.uMi[d++].view = q;
    ⲆΔⲆΔΔᐃᐃ = d++;
    this.uMi[ⲆΔⲆΔΔᐃᐃ] = $v(Δᐃ.fN, ra, 484, ke, ma);
    ᐃⲆᐃⵠⵠΔᐃ = d++;
    this.uMi[ᐃⲆᐃⵠⵠΔᐃ] = $v(Δᐃ.pN, ra, 454 + 597 / hu + 60, 0, ma);
    this.uMi[d] = $v(Δᐃ.sH, ra, -189.5, -qn, ma | pa);
    this.uMi[d++].view = D;
    this.uMi[d] = $v(Δᐃ.aH, ra, -189.5, -dh, ma | pa);
    this.uMi[d++].view = B;
    ⲆᐃΔΔΔᐃⲆ = d++;
    this.uMi[ⲆᐃΔΔΔᐃⲆ] = $v(Δᐃ.qW, ta, 93, 30, ma);
    this.uMi[d] = $v(Δᐃ.vN, ra, -692 / Ld, 110, ma | pa);
    this.uMi[d++].view = W;
    this.uMi[d] = $v(Δᐃ.yN, ra, -173, 110, ma | pa);
    this.uMi[d++].view = H;
    d = 0;
    this.buttons = [];
    this.buttons[d] = Vv(50, 57, 0, [Δᐃ.RW, Δᐃ.LW, Δᐃ.GW], 1, 0, function () {
      if (N.gBi()) {
        fa(t);
      } else {
        fa(p);
      }
    }, 320, sh, ka, ta);
    d++;
    if (aj.innerWidth < 1300) {
      this.buttons[d] = Vv(202, 97, 0, [Δᐃ.Cq, Δᐃ.zq, Δᐃ.xq], 1, 0, this.aBi, 462, 235, ma | ka, ta);
    } else {
      this.buttons[d] = Vv(202, 97, 0, [Δᐃ.Cq, Δᐃ.zq, Δᐃ.xq], 1, 0, this.aBi, 74, 235, ma | pa, ta);
    }
    this.buttons[d].view = aa;
    d++;
    if (aj.innerWidth > 1300) {
      this.buttons[d] = Vv(355, 168, 0, [Δᐃ.hq, Δᐃ.hq, Δᐃ.hq], 1, 0, function () {
        aj.open("./changelog.html", "_blank");
      }, -195, -115, na | pa, ta);
      this.buttons[d++].view = aa;
      this.buttons[d] = Vv(355, 168, 0, [Δᐃ.gq, Δᐃ.gq, Δᐃ.gq], 1, 0, function () {
        aj.open("https://taming.io", "_blank");
      }, Wh, -115, na | pa, ta);
      this.buttons[d++].view = aa;
    }
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.UG, Δᐃ.OG, Δᐃ.YG], 1, 0, function () {
      aj.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, Ki, la, ta);
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.WG, Δᐃ.NG, Δᐃ.HG], 1, 0, function () {
      aj.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, la, ta);
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.LG, Δᐃ.GG, Δᐃ.qG], 1, 0, function () {
      aj.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, la, ta);
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.xG, Δᐃ.QG, Δᐃ.SG], 1, 0, function () {
      aj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, jn, la, ta);
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.PG, Δᐃ.TG, Δᐃ.jG], 1, 0, function () {
      aj.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, jn, la, ta);
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.IG, Δᐃ._G, Δᐃ.FG], 1, 0, function () {
      aj.open("https://twitter.com/lapamauve", "_blank");
    }, 105, _, la, ta);
    this.buttons[d++] = Vv(80, 80, 0, [Δᐃ.EG, Δᐃ.CG, Δᐃ.zG], 1, 0, function () {
      aj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, hg, la, ta);
    ⵠΔⵠⲆΔᐃⵠ = d++;
    this.buttons[ⵠΔⵠⲆΔᐃⵠ] = Vv(232, 142, 0, [Δᐃ.fW, Δᐃ.pW, Δᐃ.lW], 1, 0, function () {
      fa(w);
      Nk(ok.yMi, ok.vMi, ok.CMi, ok.FMi);
    }, -5, 573, ka, ta);
    this.buttons[d++] = Vv(236, 165, 0, [Δᐃ.oW, Δᐃ.oW, Δᐃ.oW], 1, 1, function () {
      fa(w);
    }, -5, 566, ka, ta);
    ΔΔΔⲆΔⲆⵠ = d++;
    this.buttons[ΔΔΔⲆΔⲆⵠ] = Vv(236, 165, 0, [Δᐃ.dW, Δᐃ.mW, Δᐃ.uW], 1, 0, function () {
      fa(y);
    }, -5, 494, ka, ta);
    this.buttons[d++] = Vv(236, 165, 0, [Δᐃ.nW, Δᐃ.nW, Δᐃ.nW], 1, 1, function () {
      fa(y);
    }, -5, 494, ka, ta);
    ΔⲆⲆⲆΔΔⲆ = d++;
    this.buttons[ΔⲆⲆⲆΔΔⲆ] = Vv(236, 165, 0, [Δᐃ.dW, Δᐃ.mW, Δᐃ.uW], 1, 0, function () {
      if (N.gBi()) {
        if (ok.qwi - Date.now() > 0) {
          fa(J);
        }
      } else {
        fa(p);
      }
    }, -qn, 415, ka, ta);
    this.buttons[d++] = Vv(236, 165, 0, [Δᐃ.cW, Δᐃ.cW, Δᐃ.cW], 1, 1, function () {
      if (N.gBi()) {
        if (Cm < ok.qwi - Date.now()) {
          fa(J);
        }
      } else {
        fa(p);
      }
    }, -Au, 415, ka, ta);
    ⵠᐃᐃⲆⲆⲆⵠ = d++;
    this.buttons[ⵠᐃᐃⲆⲆⲆⵠ] = Vv(236, 165, 0, [Δᐃ.dW, Δᐃ.mW, Δᐃ.uW], 1, 0, function () {
      fa(v);
    }, -Y, 336, ka, ta);
    this.buttons[d++] = Vv(236, 165, 0, [Δᐃ.sW, Δᐃ.sW, Δᐃ.sW], 1, 1, function () {
      fa(v);
    }, -5, 336, ka, ta);
    ⲆΔⵠⵠⵠΔᐃ = d++;
    this.buttons[ⲆΔⵠⵠⵠΔᐃ] = Vv(236, 165, 0, [Δᐃ.dW, Δᐃ.mW, Δᐃ.uW], 1, 0, function () {
      fa(l);
    }, -5, 257, ka, ta);
    this.buttons[d++] = Vv(236, 165, 0, [Δᐃ.aW, Δᐃ.aW, Δᐃ.aW], 1, 1, function () {
      fa(l);
    }, -Au, 257, ka, ta);
    ⵠⲆⵠΔⲆᐃΔ = d++;
    this.buttons[ⵠⲆⵠΔⲆᐃΔ] = Vv(236, 165, 0, [Δᐃ.dW, Δᐃ.mW, Δᐃ.uW], 1, 0, function () {
      fa(aa);
    }, -aq, 178, ka, ta);
    this.buttons[d++] = Vv(236, 165, 0, [Δᐃ.hW, Δᐃ.hW, Δᐃ.hW], 1, 1, function () {
      fa(aa);
    }, -Y, 178, ka, ta);
    ΔⲆⵠΔᐃⵠᐃ = d++;
    this.cBi = ΔⲆⵠΔᐃⵠᐃ;
    this.buttons[ΔⲆⵠΔᐃⵠᐃ] = Vv(324, 222, 0, [Δᐃ.uq, Δᐃ.fq, Δᐃ.pq], 1, 0, function () {
      fa(p);
    }, 0, 70, ka, ta);
    ⲆᐃⵠΔΔᐃⲆ = d++;
    ᐃᐃΔΔⵠⲆΔ = d++;
    this.dBi = ⲆᐃⵠΔΔᐃⲆ;
    this.mBi = ᐃᐃΔΔⵠⲆΔ;
    this.buttons[ⲆᐃⵠΔΔᐃⲆ] = Vv(324, 222, 0, [Δᐃ.cq, Δᐃ.dq, Δᐃ.mq], 1, 0, function () {
      fa(ba);
      Fa(-fo);
    }, 0, 70, ka, ra);
    this.buttons[ᐃᐃΔΔⵠⲆΔ] = Vv(324, 222, 0, [Δᐃ.gW, Δᐃ.gW, Δᐃ.gW], 1, 1, function () {
      fa(ba);
      Fa(-Ps);
    }, Nf, 70, ka, ra);
    if (ᐃΔΔᐃ.PMi === 0) {
      var ya = d++;
      if (aj.innerWidth < 1300) {
        this.buttons[ya] = Vv(266, 176, 0, [Δᐃ.fG, Δᐃ.pG, Δᐃ.lG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.Cli);
        }, 150, 300, ka | ma, ta);
      } else {
        this.buttons[ya] = Vv(266, 176, 0, [Δᐃ.fG, Δᐃ.pG, Δᐃ.lG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.Cli);
        }, -340, wr, pa | ma, ta);
      }
      this.buttons[ya].view = aa;
      this.buttons[ya].hint = 0;
      var za = d++;
      if (aj.innerWidth < 1300) {
        this.buttons[za] = Vv(266, 176, 0, [Δᐃ.bG, Δᐃ.vG, Δᐃ.yG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.zli);
        }, 150, 400, ka | ma, ta);
      } else {
        this.buttons[za] = Vv(266, 176, 0, [Δᐃ.bG, Δᐃ.vG, Δᐃ.yG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.zli);
        }, -340, 200, pa | ma, ta);
      }
      this.buttons[za].view = aa;
      this.buttons[za].hint = 0;
      var Aa = d++;
      if (aj.innerWidth < 1300) {
        this.buttons[Aa] = Vv(266, 176, 0, [Δᐃ.kG, Δᐃ.AG, Δᐃ.wG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.Ayi);
        }, 450, 300, ka | ma, ta);
      } else {
        this.buttons[Aa] = Vv(266, 176, 0, [Δᐃ.kG, Δᐃ.AG, Δᐃ.wG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.Ayi);
        }, -340, 300, pa | ma, ta);
      }
      this.buttons[Aa].view = aa;
      this.buttons[Aa].hint = Ka;
      var Ba = d++;
      if (aj.innerWidth < 1300) {
        this.buttons[Ba] = Vv(266, 176, 0, [Δᐃ.hG, Δᐃ.gG, Δᐃ.cG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.wli);
        }, 300, 300, ka | ma, ta);
      } else {
        this.buttons[Ba] = Vv(266, 176, 0, [Δᐃ.hG, Δᐃ.gG, Δᐃ.cG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.wli);
        }, 204, kh, pa | ma, ta);
      }
      this.buttons[Ba].view = aa;
      this.buttons[Ba].hint = Jj;
      var Ca = d++;
      if (aj.innerWidth < 1300) {
        this.buttons[Ca] = Vv(266, 176, 0, [Δᐃ.dG, Δᐃ.mG, Δᐃ.uG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.Bli);
        }, 300, 400, ka | ma, ta);
      } else {
        this.buttons[Ca] = Vv(266, 176, 0, [Δᐃ.dG, Δᐃ.mG, Δᐃ.uG], 1, 0, function () {
          ᐃΔΔᐃ.uBi(iw.Bli);
        }, 204, 200, pa | ma, ta);
      }
      this.buttons[Ca].view = aa;
      this.buttons[Ca].hint = 0;
      var Da = d++;
      this.buttons[Da] = Vv(266, 176, 0, [Δᐃ.MG, Δᐃ.BG, Δᐃ.DG], 1, 0, function () {
        ᐃΔΔᐃ.uBi(iw.Qli);
      }, aj.innerWidth < 1300 ? 450 : 204, aj.innerWidth < 1300 ? 400 : 300, (aj.innerWidth < 1300 ? ka : pa) | ma, ta);
      this.buttons[Da].view = aa;
      this.buttons[Da].hint = Sh;
    }
    function Fa(b, c) {
      if (S !== c) {
        ok.Zwi = c;
        var d = ok.Pwi[c];
        ok.Eli = d.score;
        ok.Jki = d.fBi;
        ok.Qwi = d.pBi;
        ok.time = d.time;
        ok.Fwi = d.lBi;
        ok.Iwi = d.bBi;
        ok._wi = d.vBi;
        ok.Swi = d.yBi;
      }
      if (b === ug) {
        b = ok.pwi;
      }
      ok.pwi = b;
      if (Sh <= b) {
        document.getElementById("stats_box_time").innerHTML = ok._wi[b];
        document.getElementById("stats_box_kill").innerHTML = ok.Iwi[b];
        document.getElementById("stats_box_score").innerHTML = ok.Fwi[b];
      } else {
        var e = Jj;
        for (var f = Oq; ok.Jki.length > f; f++) {
          e += ok.Jki[f];
        }
        var g = Jj;
        for (f = Sh; ok.time.length > f; f++) {
          g += ok.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = e;
        document.getElementById("stats_box_score").innerHTML = ok.Eli;
      }
    }
    this.buttons[d] = Vv(87, 78, 0, [Δᐃ._q, Δᐃ.Fq, Δᐃ.Pq], 1, 0, function () {
      ok.lMi();
      if (ok.xwi === Cm) {
        fa(H);
      } else {
        fa(W);
      }
    }, 127, 110, pa | ma, ra);
    this.buttons[d++].view = ba;
    this.buttons[d] = Vv(87, 78, 0, [Δᐃ.Vq, Δᐃ.Zq, Δᐃ.$q], 1, 0, function () {
      (function () {
        if (xk === zk && aj.FB.kBi()) {
          aj.FB.ABi();
        }
        if (Ck === xk && lx !== Ug) {
          aj.gapi.auth2.MBi().wBi();
          lx = undefined;
        }
        ix = ch;
        hx = undefined;
        xk = undefined;
        ok.Twi = Ea;
        ok.vwi = Nf;
        ok.Eli = Gc;
        ok.oMi();
        ⵠΔᐃᐃⵠΔᐃⵠⵠ();
      })();
    }, es, 110, pa | ma, ra);
    this.buttons[d++].view = ba;
    this.buttons[d] = Vv(58, 64, 0, [Δᐃ.Bq, Δᐃ.Dq, Δᐃ.Eq], 1, 0, function () {
      fa(aa);
    }, 189, 118, pa | ma, ra);
    this.buttons[d++].view = p;
    this.buttons[d] = Vv(497, 72, 0, [Δᐃ.lq, Δᐃ.bq, Δᐃ.vq], 1, 0, function () {
      aj.gapi[lj[Ro]].MBi().BBi();
    }, -130, 390, pa | ma, ra);
    this.buttons[d++].view = p;
    this.buttons[d] = Vv(497, 72, 0, [Δᐃ.yq, Δᐃ.kq, Δᐃ.Aq], 1, 0, function () {
      aj.FB.login(function (a) {
        if (a.DBi) {
          aj.FB.EBi("/me", function (a) {
            xk = zk;
            hx = aj.FB.zBi().CBi;
            Jk();
            aj.xBi(ix);
          });
        }
      });
    }, -130, 430, pa | ma, ra);
    this.buttons[d++].view = p;
    ΔⵠᐃᐃⵠⵠΔ = 20000;
    this.QBi = function (a) {
      var b = ok.SBi(a);
      var c = ΔⵠᐃᐃⵠⵠΔ * (b * b);
      return (a -= c) / (ΔⵠᐃᐃⵠⵠΔ * ((b + au) * (b + Lo)) - c);
    };
    this.SBi = function (a) {
      return Math.floor(Math.sqrt(a / ΔⵠᐃᐃⵠⵠΔ));
    };
    this.IBi = function (a) {
      ok.Bwi = ok.SBi(a);
      ok.zwi = ok.QBi(a);
      ok.Cwi = 0;
      ok.Eli = a;
    };
    this._Bi = function (b) {
      ok.buttons[ok.cBi].info.active = 0;
      ok.buttons[ok.dBi].info.active = Ic;
      ok.buttons[ok.mBi].info.active = 1;
      f();
      if (-fn === b.name.indexOf("Starver#")) {
        document.getElementById("account_nickname_input").value = aj.decodeURIComponent(aj.escape(aj.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      ok.vwi = b.FBi;
      var c = b.PBi;
      var d = c[c.length - wg];
      ok.Pwi = c;
      N.IBi(d.score);
      ok.Eli = d.score;
      ok.Jki = d.fBi;
      ok.Qwi = d.pBi;
      ok.time = d.time;
      ok.Fwi = d.lBi;
      ok.Iwi = d.bBi;
      ok._wi = d.vBi;
      ok.Swi = d.yBi;
      ok.xwi = b.TBi;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.jBi;
      if (ok.xwi === undefined) {
        ok.xwi = Jj;
      }
      ok.qwi = Date.now() + b.RBi;
      if (Number(b.RBi) > nj) {
        ok.qwi = Date.now() + Number(b.RBi);
      }
      ok.Twi = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        ok.Twi = Date.now() + Number(b.kit);
      }
      var a = ⲆⲆⵠⲆ.ffi;
      for (var e = so; e < b.LBi.length; e++) {
        if ((j = b.LBi[e]) > 0) {
          for (var i = 0; i < a.length; i++) {
            if (e === a[i].id) {
              N.unlock.Mli[i] = 1;
            }
          }
        }
      }
      a = ⲆⲆⵠⲆ.Ll;
      e = 0;
      for (; e < b.GBi.length; e++) {
        var j = b.GBi[e];
        if (Ng < j) {
          for (i = 0; i < a.length; i++) {
            if (e === a[i].id) {
              N.unlock.jbi[i] = fn;
            }
          }
        }
      }
      a = ⲆⲆⵠⲆ.he;
      e = 0;
      for (; e < b.qBi.length; e++) {
        if ((j = b.qBi[e]) > 0) {
          for (i = xn; i < a.length; i++) {
            if (a[i].id === e) {
              N.unlock._bi[i] = 1;
            }
          }
        }
      }
      a = ⲆⲆⵠⲆ.ge;
      e = Ka;
      for (; e < b.WBi.length; e++) {
        if ((j = b.WBi[e]) > 0) {
          for (i = Ou; i < a.length; i++) {
            if (e === a[i].id) {
              N.unlock.Fbi[i] = 1;
            }
          }
        }
      }
      a = ⲆⲆⵠⲆ.Ar;
      e = 0;
      for (; b.NBi.length > e; e++) {
        if ((j = b.NBi[e]) > 0) {
          for (i = Cm; a.length > i; i++) {
            if (a[i].id === e) {
              N.unlock.kki[i] = Ko;
              N.unlock.Aki[i] = 1;
            }
          }
        }
      }
    };
    this.HBi = function () {
      aj.xBi = function () {
        fa(aa);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Dk + "login?token=" + hx + "&type=" + xk);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === Gs && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(N._Bi);
      };
      if (fo === jx) {
        aj.xBi();
      }
    };
    aj.UBi = function () {
      ok.buttons[ok.cBi].info.active = 1;
      ok.buttons[ok.dBi].info.active = 0;
      ok.buttons[ok.mBi].info.active = Jj;
      fa(aa);
    };
    this.gBi = function () {
      return ok.buttons[ok.dBi].info.active;
    };
    this.buttons[d] = Vv(461, 105, 0, [Δᐃ.oU, Δᐃ.hU, Δᐃ.gU], 1, 0, function () {
      if (N.gBi()) {
        fa(t);
      } else {
        fa(p);
      }
    }, -100, 80, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(157, 158, 0, [Δᐃ.nY, Δᐃ.aY, Δᐃ.sY], 1, 0, function () {
      aj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, pa | ma, ra);
    this.buttons[d++].view = y;
    this.buttons[d] = Vv(66, 73, 0, [Δᐃ.rY, Δᐃ.oY, Δᐃ.hY], 1, 0, Z, -68, 340, pa | ma, ra);
    this.buttons[d++].view = y;
    this.buttons[d] = Vv(66, 73, 0, [Δᐃ.gY, Δᐃ.cY, Δᐃ.dY], 1, 0, Yr, -30, 340, pa | ma, ra);
    this.buttons[d++].view = y;
    this.OBi = d;
    this.buttons[d] = Vv(97, 66, 0, [Δᐃ.vY, Δᐃ.yY, Δᐃ.kY], 1, 0, function () {
      Nk(Yr, undefined, ok.CMi);
    }, -qj, 151, pa | ma, ra);
    this.buttons[d++].view = w;
    this.EMi = d;
    this.buttons[d] = Vv(135, 66, 0, [Δᐃ.AY, Δᐃ.wY, Δᐃ.MY], 1, 0, function () {
      Nk(_e, _e, ok.EMi);
    }, 37.5, 151, pa | ma, ra);
    this.buttons[d++].view = w;
    this.zMi = d;
    this.buttons[d] = Vv(160, 66, 0, [Δᐃ.mY, Δᐃ.uY, Δᐃ.fY], 1, 0, function () {
      Nk(Go, Lr, ok.zMi);
    }, 107.5, 151, pa | ma, ra);
    this.buttons[d++].view = w;
    this.CMi = d;
    this.buttons[d] = Vv(207, 66, 0, [Δᐃ.pY, Δᐃ.lY, Δᐃ.bY], 1, 0, function () {
      Nk(Lr, undefined, ok.CMi);
    }, 190.5, 151, pa | ma, ra);
    this.buttons[d++].view = w;
    this.AMi = d;
    this.buttons[d] = Vv(144, 66, 0, [Δᐃ.CY, Δᐃ.zY, Δᐃ.xY], 1, 0, function () {
      Nk(ok.AMi);
    }, 103.5, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.kMi = d;
    this.buttons[d] = Vv(124, 66, 0, [Δᐃ.QY, Δᐃ.SY, Δᐃ.IY], 1, 0, function () {
      Nk(ok.kMi);
    }, 177.5, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.yMi = d;
    this.buttons[d] = Vv(104, 66, 0, [Δᐃ.BY, Δᐃ.DY, Δᐃ.EY], 1, 0, function () {
      Nk(ok.yMi);
    }, 242, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.xMi = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ._Y, Δᐃ.FY, Δᐃ.PY], 1, 0, function () {
      Nk(Oh, undefined, Oh, ok.xMi);
    }, -185, 528, pa | ma, ra);
    this.buttons[d++].view = w;
    this.QMi = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.TY, Δᐃ.jY, Δᐃ.RY], 1, 0, function () {
      Nk(A, A, undefined, ok.QMi);
    }, -149, 528, pa | ma, ra);
    this.buttons[d++].view = w;
    this.SMi = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.LY, Δᐃ.GY, Δᐃ.qY], 1, 0, function () {
      Nk(undefined, undefined, undefined, ok.SMi);
    }, -113, 528, pa | ma, ra);
    this.buttons[d++].view = w;
    this.IMi = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.WY, Δᐃ.NY, Δᐃ.HY], 1, 0, function () {
      Nk(undefined, undefined, Zg, ok.IMi);
    }, -77, 528, pa | ma, ra);
    this.buttons[d++].view = w;
    this._Mi = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.UY, Δᐃ.OY, Δᐃ.YY], 1, 0, function () {
      Nk(undefined, lq, undefined, ok._Mi);
    }, -41, 528, pa | ma, ra);
    this.buttons[d++].view = w;
    this.FMi = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.JY, Δᐃ.KY, Δᐃ.XY], 1, 0, function () {
      Nk(yc, Lr, undefined, ok.FMi);
    }, -Wg, 528, pa | ma, ra);
    this.buttons[d++].view = w;
    this.buttons[d] = Vv(232, 352, 0, [Δᐃ.cU, Δᐃ.dU, Δᐃ.mU], 1, 0, function () {
      qk(300);
    }, -330, 135, pa | ma, ra);
    this.buttons[d++].view = t;
    this.buttons[d] = Vv(232, 352, 0, [Δᐃ.uU, Δᐃ.fU, Δᐃ.pU], 1, 0, function () {
      qk(600);
    }, -195, 135, pa | ma, ra);
    this.buttons[d++].view = t;
    this.buttons[d] = Vv(243, 374, 0, [Δᐃ.lU, Δᐃ.bU, Δᐃ.vU], 1, 0, function () {
      qk(2600);
    }, -60, 130, pa | ma, ra);
    this.buttons[d++].view = t;
    this.buttons[d] = Vv(232, 352, 0, [Δᐃ.yU, Δᐃ.kU, Δᐃ.AU], 1, 0, function () {
      qk(7000);
    }, 78, 135, pa | ma, ra);
    this.buttons[d++].view = t;
    this.buttons[d] = Vv(243, 374, 0, [Δᐃ.wU, Δᐃ.MU, Δᐃ.BU], 1, 0, function () {
      qk(20000);
    }, 213, 130, pa | ma, ra);
    this.buttons[d++].view = t;
    this.buttons[d] = Vv(58, 64, 0, [Δᐃ.Bq, Δᐃ.Dq, Δᐃ.Eq], 1, 0, function () {
      fa(v);
    }, 300, 88, pa | ma, ra);
    this.buttons[d++].view = t;
    this.buttons[d] = Vv(323, 112, 0, [Δᐃ.oH, Δᐃ.hH, Δᐃ.gH], 1, 0, function () {
      fa(T);
      Ta.uwi();
    }, -315, 185, pa | ma, ra);
    this.buttons[d++].view = l;
    this.buttons[d] = Vv(323, 112, 0, [Δᐃ.cH, Δᐃ.dH, Δᐃ.mH], 1, 0, function () {
      fa(G);
      Ya.uwi();
    }, -315, 321, pa | ma, ra);
    this.buttons[d++].view = l;
    this.buttons[d] = Vv(323, 112, 0, [Δᐃ.uH, Δᐃ.fH, Δᐃ.pH], 1, 0, function () {
      fa(R);
      Ua.uwi();
    }, 153, 185, pa | ma, ra);
    this.buttons[d++].view = l;
    this.buttons[d] = Vv(323, 112, 0, [Δᐃ.lH, Δᐃ.bH, Δᐃ.vH], 1, 0, function () {
      fa(L);
      Va.uwi();
    }, 153, 321, pa | ma, ra);
    this.buttons[d++].view = l;
    this.buttons[d] = Vv(323, 112, 0, [Δᐃ.yH, Δᐃ.kH, Δᐃ.AH], 1, 0, function () {
      fa(j);
      Wa.uwi();
    }, 153, 463, pa | ma, ra);
    this.buttons[d++].view = l;
    this.buttons[d] = Vv(323, 112, 0, [Δᐃ.wH, Δᐃ.MH, Δᐃ.BH], 1, 0, function () {
      fa(q);
      Xa.uwi();
    }, -315, 463, pa | ma, ra);
    this.buttons[d++].view = l;
    this.buttons[d] = Vv(327, 117, 0, [Δᐃ.XW, Δᐃ.VW, Δᐃ.ZW], 1, 0, function () {
      fa(K);
    }, 155, 70, ka, ta);
    this.buttons[d++].view = aa;
    this.buttons[d] = Vv(130, 129, 0, [Δᐃ.Jq, Δᐃ.Kq, Δᐃ.Xq], 1, 0, function () {
      E(B, ra, "none");
      fa(v);
    }, hg, 40, pa | ma, ra);
    this.buttons[d++].view = B;
    this.buttons[d] = Vv(130, 129, 0, [Δᐃ.Jq, Δᐃ.Kq, Δᐃ.Xq], 1, 0, function () {
      E(D, ra, "none");
      fa(v);
    }, 10, 40, pa | ma, ra);
    this.buttons[d++].view = D;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 200, 140, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.NU, Δᐃ.HU, Δᐃ.UU], 1, 0, function () {
      Hk("Atlanta");
    }, -265, 300, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.OU, Δᐃ.YU, Δᐃ.JU], 1, 0, function () {
      Hk("Dallas");
    }, -130, 300, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.KU, Δᐃ.XU, Δᐃ.VU], 1, 0, function () {
      Hk("Fremont");
    }, 5, 300, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.ZU, Δᐃ.$U, Δᐃ.iO], 1, 0, function () {
      Hk("Newark");
    }, 140, 300, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.cO, Δᐃ.dO, Δᐃ.mO], 1, 0, function () {
      Hk("London");
    }, -265, 365, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.oO, Δᐃ.hO, Δᐃ.gO], 1, 0, function () {
      Hk("Frankfurt");
    }, -130, 365, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.aO, Δᐃ.sO, Δᐃ.rO], 1, 0, function () {
      Hk("Singapore");
    }, 5, 365, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.lO, Δᐃ.bO, Δᐃ.vO], 1, 0, function () {
      Hk("Tokyo");
    }, 140, 365, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.tO, Δᐃ.eO, Δᐃ.nO], 1, 0, function () {
      Hk("Toronto");
    }, -265, 430, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(253, 110, 0, [Δᐃ.uO, Δᐃ.fO, Δᐃ.pO], 1, 0, function () {
      Hk("Mumbai");
    }, -130, 430, pa | ma, ra);
    this.buttons[d++].view = U;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(U);
    }, 230, 140, pa | ma, ra);
    this.buttons[d++].view = da;
    this.buttons[d] = Vv(230, 352, 0, [Δᐃ.wO, Δᐃ.MO, Δᐃ.BO], 1, 0, function () {
      qk(350);
    }, -280, 240, pa | ma, ra);
    this.buttons[d++].view = da;
    this.buttons[d] = Vv(230, 352, 0, [Δᐃ.DO, Δᐃ.EO, Δᐃ.CO], 1, 0, function () {
      qk(700);
    }, -130, 240, pa | ma, ra);
    this.buttons[d++].view = da;
    this.buttons[d] = Vv(230, 352, 0, [Δᐃ.zO, Δᐃ.xO, Δᐃ.QO], 1, 0, function () {
      qk(1400);
    }, zj, 240, pa | ma, ra);
    this.buttons[d++].view = da;
    this.buttons[d] = Vv(230, 352, 0, [Δᐃ.SO, Δᐃ.IO, Δᐃ._O], 1, 0, function () {
      qk(3000);
    }, 170, 240, pa | ma, ra);
    this.buttons[d++].view = da;
    this.buttons[d] = Vv(105, 119, 0, [Δᐃ.nq, Δᐃ.aq, Δᐃ.sq], 1, 0, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, pa | ma, ra);
    this.buttons[d++].view = J;
    this.buttons[d] = Vv(105, 119, 0, [Δᐃ.VG, Δᐃ.ZG, Δᐃ.$G], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Dk + "rebootServer?token=" + hx + "&userid=" + ix);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === Ac && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, pa | ma, ra);
    this.buttons[d++].view = J;
    this.buttons[d] = Vv(204, 115, 0, [Δᐃ.iq, Δᐃ.tq, Δᐃ.eq], 1, 0, function () {
      aj.open("./commands.html", "_blank");
    }, -265, 490, pa | ma, ra);
    this.buttons[d++].view = J;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.jU, Δᐃ.RU, Δᐃ.LU], 1, 0, function () {
      fa(C);
    }, -210, 170, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.DU, Δᐃ.EU, Δᐃ.CU], 1, 0, function () {
      fa(I);
    }, 70, 170, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.zU, Δᐃ.xU, Δᐃ.QU], 1, 0, function () {
      fa(M);
    }, 70, 204, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.SU, Δᐃ.IU, Δᐃ._U], 1, 0, function () {
      fa(F);
    }, -210, 204, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.SU, Δᐃ.IU, Δᐃ._U], 1, 0, function () {
      fa(P);
    }, 70, 238, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.SU, Δᐃ.IU, Δᐃ._U], 1, 0, function () {
      if (N.gBi()) {
        Ok(Jj, 300);
      } else {
        fa(p);
      }
    }, 307, 205, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.FU, Δᐃ.PU, Δᐃ.TU], 1, 0, function () {
      fa(Q);
    }, -210, 238, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(145, 69, 0, [Δᐃ.FU, Δᐃ.PU, Δᐃ.TU], 1, 0, function () {
      if (N.gBi()) {
        Ok(yd, 600);
      } else {
        fa(p);
      }
    }, 307, 239, pa | ma, ra);
    this.buttons[d++].view = v;
    this.buttons[d] = Vv(192, 101, 0, [Δᐃ.Tq, Δᐃ.jq, Δᐃ.Rq], 1, 0, function () {
      Uk();
    }, -wr, 250, pa | ma, ra);
    this.buttons[d++].view = H;
    this.buttons[d] = Vv(192, 104, 0, [Δᐃ.Lq, Δᐃ.Gq, Δᐃ.qq], 1, 0, function () {
      Uk();
    }, -100, 239, pa | ma, ra);
    this.buttons[d++].view = W;
    this.buttons[d] = Vv(192, 101, 0, [Δᐃ.Wq, Δᐃ.Nq, Δᐃ.Hq], 1, 0, function () {
      fa(ba);
    }, 10, 250, pa | ma, ra);
    this.buttons[d++].view = H;
    this.buttons[d] = Vv(192, 104, 0, [Δᐃ.Uq, Δᐃ.Oq, Δᐃ.Yq], 1, 0, function () {
      fa(ba);
    }, 10, 239, pa | ma, ra);
    this.buttons[d++].view = W;
    ΔⲆⲆᐃⵠ = [];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ⵠⲆΔᐃⵠ] = [Δᐃ.DH, Δᐃ.EH, Δᐃ.CH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.aE] = [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.nE] = [Δᐃ.SH, Δᐃ.IH, Δᐃ._H];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.Ln] = [Δᐃ.FH, Δᐃ.PH, Δᐃ.TH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.Gn] = [Δᐃ.jH, Δᐃ.RH, Δᐃ.LH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.Kn] = [Δᐃ.GH, Δᐃ.qH, Δᐃ.WH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.Ds] = [Δᐃ.NH, Δᐃ.HH, Δᐃ.UH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ΔⵠᐃⲆΔ] = [Δᐃ.KH, Δᐃ.XH, Δᐃ.VH];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ] = [Δᐃ.OH, Δᐃ.YH, Δᐃ.JH];
    ⲆΔⲆΔⵠⵠΔ = d;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Rc, -29, 205, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 300, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Go, -29, 395, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 205, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 300, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 395, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 205, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, ug, 159, 300, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Ds, 159, 395, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.ZH, Δᐃ.$H, Δᐃ.iU], 1, 0, undefined, -61, 315, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.tU, Δᐃ.eU, Δᐃ.nU], 1, 0, Z, 260, 315, pa | ma, ra);
    this.buttons[d++].view = T;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(l);
    }, -320, 470, pa | ma, ra);
    this.buttons[d++].view = T;
    ΔΔᐃᐃⲆⲆᐃⲆᐃ = d;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, ch, -29, 205, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, _e, -29, 300, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 395, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Rc, 65, 205, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Oh, 65, 300, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, lq, 65, 395, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 205, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 300, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, ug, 159, 395, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.ZH, Δᐃ.$H, Δᐃ.iU], 1, 0, undefined, -61, 315, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.tU, Δᐃ.eU, Δᐃ.nU], 1, 0, Rj, 260, 315, pa | ma, ra);
    this.buttons[d++].view = G;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(l);
    }, -320, 470, pa | ma, ra);
    this.buttons[d++].view = G;
    ⲆᐃᐃᐃⵠⵠΔⵠⵠ = d;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 205, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Go, -29, 300, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 395, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, lq, 65, 205, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Lr, 65, 300, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 395, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Z, 159, 205, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 300, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, yc, 159, 395, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.ZH, Δᐃ.$H, Δᐃ.iU], 1, 0, Z, -61, 315, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.tU, Δᐃ.eU, Δᐃ.nU], 1, 0, undefined, 260, 315, pa | ma, ra);
    this.buttons[d++].view = q;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(l);
    }, -320, 470, pa | ma, ra);
    this.buttons[d++].view = q;
    ΔⲆᐃᐃⵠᐃᐃⵠⵠ = d;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 205, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 300, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Pq, -29, 395, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 205, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 300, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 395, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Rc, 159, 205, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 300, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 395, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.ZH, Δᐃ.$H, Δᐃ.iU], 1, 0, Pq, -61, 315, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.tU, Δᐃ.eU, Δᐃ.nU], 1, 0, undefined, 260, 315, pa | ma, ra);
    this.buttons[d++].view = R;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(l);
    }, -320, 470, pa | ma, ra);
    this.buttons[d++].view = R;
    ᐃΔᐃⵠⵠΔΔⵠⲆ = d;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Nn, -29, 205, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Ls, -29, 300, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, S, -29, 395, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 205, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 300, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 395, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 205, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Ug, 159, 300, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 395, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.ZH, Δᐃ.$H, Δᐃ.iU], 1, 0, Nn, -61, 315, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.tU, Δᐃ.eU, Δᐃ.nU], 1, 0, Z, 260, 315, pa | ma, ra);
    this.buttons[d++].view = L;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(l);
    }, -320, 470, pa | ma, ra);
    this.buttons[d++].view = L;
    ᐃΔⲆᐃᐃⲆΔⵠⵠ = d;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Yr, -29, 205, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, -29, 300, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Ds, -29, 395, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, A, 65, 205, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, A, 65, 300, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 65, 395, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, Go, 159, 205, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 300, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(178, 182, 0, [Δᐃ.zH, Δᐃ.xH, Δᐃ.QH], 1, 0, undefined, 159, 395, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.ZH, Δᐃ.$H, Δᐃ.iU], 1, 0, ug, -61, 315, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(39, 122, 0, [Δᐃ.tU, Δᐃ.eU, Δᐃ.nU], 1, 0, undefined, 260, 315, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(l);
    }, -320, 470, pa | ma, ra);
    this.buttons[d++].view = j;
    this.buttons[d] = Vv(260, 260, 0, [Δᐃ.qO, Δᐃ.WO, Δᐃ.NO], 1, 0, function () {
      if (N.gBi()) {
        Wk(xa, 50);
      } else {
        fa(p);
      }
    }, -65, 150 + 448 / eh - 260 / Ud, pa | ma, ra);
    this.buttons[d++].view = I;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 309, 180, pa | ma, ra);
    this.buttons[d++].view = I;
    this.buttons[d] = Vv(260, 260, 0, [Δᐃ.HO, Δᐃ.UO, Δᐃ.OO], 1, 0, function () {
      if (N.gBi()) {
        Wk(0, Gh);
      } else {
        fa(p);
      }
    }, -65, 150 + 448 / eh - 65, pa | ma, ra);
    this.buttons[d++].view = C;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 309, 180, pa | ma, ra);
    this.buttons[d++].view = C;
    this.buttons[d] = Vv(260, 260, 0, [Δᐃ.YO, Δᐃ.JO, Δᐃ.KO], 1, 0, function () {
      if (N.gBi()) {
        Wk(4, 150);
      } else {
        fa(p);
      }
    }, -260 / Jr, 197, pa | ma, ra);
    this.buttons[d++].view = M;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 309, 180, pa | ma, ra);
    this.buttons[d++].view = M;
    this.buttons[d] = Vv(260, 260, 0, [Δᐃ.XO, Δᐃ.VO, Δᐃ.ZO], 1, 0, function () {
      if (N.gBi()) {
        Wk(1, 300);
      } else {
        fa(p);
      }
    }, -260 / Nr, 262 - 260 / pj, pa | ma, ra);
    this.buttons[d++].view = F;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 309, 180, pa | ma, ra);
    this.buttons[d++].view = F;
    this.buttons[d] = Vv(260, 260, 0, [Δᐃ.$O, Δᐃ.iY, Δᐃ.tY], 1, 0, function () {
      if (N.gBi()) {
        Wk(eu, 600);
      } else {
        fa(p);
      }
    }, -260 / mn, 262 - 260 / Rh, pa | ma, ra);
    this.buttons[d++].view = Q;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 309, 180, pa | ma, ra);
    this.buttons[d++].view = Q;
    this.buttons[d] = Vv(260, 260, 0, [Δᐃ.XO, Δᐃ.VO, Δᐃ.ZO], 1, 0, function () {
      if (N.gBi()) {
        Wk(5, 300);
      } else {
        fa(p);
      }
    }, -65, 150 + 448 / eh - 260 / sj, pa | ma, ra);
    this.buttons[d++].view = P;
    this.buttons[d] = Vv(115, 73, 0, [Δᐃ.aU, Δᐃ.sU, Δᐃ.rU], 1, 0, function () {
      fa(v);
    }, 309, 180, pa | ma, ra);
    this.buttons[d++].view = P;
    var Ga = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.GN, Δᐃ.qN, Δᐃ.WN], 1, 0, function () {
      Fa(undefined, 0);
    }, -305, 132, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Ia = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.NN, Δᐃ.HN, Δᐃ.UN], 1, 0, function () {
      Fa(undefined, 1);
    }, -273, 132, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Ja = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.ON, Δᐃ.YN, Δᐃ.JN], 1, 0, function () {
      Fa(ug, Yh);
    }, -241, 132, pa | ma, ra);
    this.buttons[d++].view = ba;
    var La = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.KN, Δᐃ.XN, Δᐃ.VN], 1, 0, function () {
      Fa(Ug, 3);
    }, -305, 165, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Ma = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.ZN, Δᐃ.$N, Δᐃ.iH], 1, 0, function () {
      Fa(lq, jh);
    }, -273, 165, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Na = d;
    this.buttons[d] = Vv(46, 51, 0, [Δᐃ.tH, Δᐃ.eH, Δᐃ.nH], 1, 0, function () {
      Fa(lq, on);
    }, -241, 165, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Oa = d;
    this.buttons[d] = Vv(460, 73, 0, [Δᐃ.jN, Δᐃ.RN, Δᐃ.LN], 1, 0, function () {
      Fa(-1);
    }, -180, 170, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Pa = d;
    this.buttons[d] = Vv(222, 68, 0, [Δᐃ.DN, Δᐃ.EN, Δᐃ.CN], 1, 0, function () {
      Fa(iw.Cli);
    }, -180, 215, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Qa = d;
    this.buttons[d] = Vv(222, 68, 0, [Δᐃ.zN, Δᐃ.xN, Δᐃ.QN], 1, 0, function () {
      Fa(iw.zli);
    }, -180, 260, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Ra = d;
    this.buttons[d] = Vv(222, 68, 0, [Δᐃ.SN, Δᐃ.IN, Δᐃ._N], 1, 0, function () {
      Fa(iw.wli);
    }, -60, 215, pa | ma, ra);
    this.buttons[d++].view = ba;
    var Sa = d;
    this.buttons[d] = Vv(222, 68, 0, [Δᐃ.FN, Δᐃ.PN, Δᐃ.TN], 1, 0, function () {
      Fa(iw.Bli);
    }, -60, 260, pa | ma, ra);
    this.buttons[d++].view = ba;
    this.vMi = d;
    this.buttons[d] = Vv(143, 66, 0, [Δᐃ.VY, Δᐃ.ZY, Δᐃ.$Y], 1, 0, function () {
      Nk(Ug, ok.vMi);
    }, -298, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.wMi = d;
    this.buttons[d] = Vv(104, 66, 0, [Δᐃ.iJ, Δᐃ.tJ, Δᐃ.eJ], 1, 0, function () {
      Nk(yc, ok.wMi);
    }, -223, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.DMi = d;
    this.buttons[d] = Vv(110, 66, 0, [Δᐃ.nJ, Δᐃ.aJ, Δᐃ.sJ], 1, 0, function () {
      Nk(_e, ok.DMi);
    }, -168, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.BMi = d;
    this.buttons[d] = Vv(88, 66, 0, [Δᐃ.gJ, Δᐃ.cJ, Δᐃ.dJ], 1, 0, function () {
      Nk(undefined, ok.BMi);
    }, -110, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.MMi = d;
    this.buttons[d] = Vv(88, 66, 0, [Δᐃ.rJ, Δᐃ.oJ, Δᐃ.hJ], 1, 0, function () {
      Nk(ug, ok.MMi);
    }, -63, 110, pa | ma, ra);
    this.buttons[d++].view = w;
    this.buttons[d] = Vv(86, 44, 0, [Δᐃ.iW, Δᐃ.tW, Δᐃ.eW], 1, 0, function () {
      aj.open("./terms.html", "_blank");
    }, 349, 290, pa | ma, ra);
    this.buttons[d++].view = v;
    var Ta = new e(ⲆⲆⵠⲆ.ffi, ⲆΔⲆΔⵠⵠΔ, function (a) {
      ok.Mli = a;
      if (ok.unlock.Mli[a] === 1) {
        ⲆᐃΔⵠ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.Mli, this.unlock.Mli);
    var Ua = new e(ⲆⲆⵠⲆ.ge, ΔⲆᐃᐃⵠᐃᐃⵠⵠ, function (a) {
      ok.Fbi = a;
      if (ok.unlock.Fbi[a] === Ko) {
        ⲆᐃΔⵠ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.Fbi, this.unlock.Fbi);
    var Va = new e(ⲆⲆⵠⲆ.he, ᐃΔᐃⵠⵠΔΔⵠⲆ, function (a) {
      ok._bi = a;
      if (ok.unlock._bi[a] === 1) {
        ⲆᐃΔⵠ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this._bi, this.unlock._bi);
    var Wa = new e(ⲆⲆⵠⲆ.Ar, ᐃΔⲆᐃᐃⲆΔⵠⵠ, function (a) {
      ok.Aki = a;
      if (ok.unlock.Aki[a] === lt) {
        ⲆᐃΔⵠ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.Aki, this.unlock.Aki);
    var Xa = new e(ⲆⲆⵠⲆ.Ar, ⲆᐃᐃᐃⵠⵠΔⵠⵠ, function (a) {
      ok.kki = a;
      if (ok.unlock.kki[a] === 1) {
        ⲆᐃΔⵠ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.kki, this.unlock.kki);
    var Ya = new e(ⲆⲆⵠⲆ.Ll, ΔΔᐃᐃⲆⲆᐃⲆᐃ, function (a) {
      ok.jbi = a;
      if (ok.unlock.jbi[a] === 1) {
        ⲆᐃΔⵠ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.jbi, this.unlock.jbi);
    this.YBi = function (a) {
      lk.Kbi = _v(N.vli, a);
      for (var b = 0; b < N.buttons.length; b++) {
        if (ta === N.buttons[b].info.active) {
          N.buttons[b].Jvi(N.vli, lk.Kbi, Ov);
        }
      }
    };
    this.JBi = function (a) {
      lk.Kbi = _v(N.vli, a);
      for (var b = 0; b < N.buttons.length; b++) {
        var c = N.buttons[b];
        if (c.info.active === ta && c.Jvi(N.vli, lk.Kbi, Wv)) {
          c.info.Yvi();
          return;
        }
      }
    };
    this.KBi = oj;
    this.XBi = function (c) {
      lk.Kbi = _v(N.vli, c);
      var d = false;
      for (var f = Ea; N.buttons.length > f; f++) {
        if (N.buttons[f].info.active === ta) {
          d |= N.buttons[f].Jvi(N.vli, lk.Kbi, Uv);
        }
      }
      if (N.KBi !== d) {
        N.KBi = d;
        b.style.cursor = d ? N.owi : N.rwi;
      }
    };
    this.gMi = function () {
      aj.addEventListener("mousedown", this.YBi, kg);
      aj.addEventListener("mouseup", this.JBi, false);
      aj.addEventListener("mousemove", this.XBi, Qh);
    };
    this.cMi = function () {
      aj.removeEventListener("mousedown", this.YBi, false);
      aj.removeEventListener("mouseup", this.JBi, false);
      aj.removeEventListener("mousemove", this.XBi, false);
    };
  }
  function Gw(b, c, d) {
    const e = ~(b & 63203) & 63203 | ~(b & 63203) & b;
    const f = (40806 + c) % 65468;
    const a = (8 << (d >> 24 & 255)) + (16 << (d & mg)) + (24 << (d >> 8 & Os)) + (0 << (d >> 16 & 255));
    return (1013904223 + (31427 + (function (a, b) {
      const c = (0 << (a >> 8 & 255)) + (16 << (a & 255)) + (8 << (a >> 24 & cr)) + (24 << (a >> 16 & 255));
      const d = ((b + 63128) * 214013 + 2531011) % 4294967296;
      return (1013904223 + (38314 + (Bk(c, d, c) ^ Ir(d, c, d))) * 1664525) % 4294967296;
    }(e, f) ^ Ir(a, e, f))) * 1664525) % 4294967296;
  }
  function Hw(b, c, d) {
    const e = (2531011 + (b + 10942) * 214013) % 4294967296;
    const f = ~(c & 14948) & (c | 14948);
    return (12345 + (38365 + (vd(e, f, ((39993 + d) * 1664525 + 1013904223) % 4294967296) ^ Nw(e, f))) * 1103515245) % 2147483648;
  }
  function Iw(b, c, d, e, f, a) {
    const i = ~(b & 43697) & (b | 43697);
    const j = (0 << (c >> 8 & 255)) + (16 << (c >> 24 & Mo)) + (24 << (c >> 16 & 255)) + (8 << (c & 255));
    const k = ~(d & 59406) & (d | 59406);
    const h = Kw(i, j, k, e ^ 13774, ~(f & 25818) & 25818 | ~(f & 25818) & f, (2531011 + (52141 + a) * 214013) % 4294967296);
    (function (b, c, d) {
      const e = ~(b & 55207) & b | ~(b & 55207) & 55207;
      const f = (Ps + (64713 + c) * 22695477) % 4294967296;
      const a = ~(d & 4913) & 4913 | ~(d & 4913) & d;
      const g = Hw(e, f, a);
      sk(e, f, a, e, f, a);
    })(i, j, k);
    return (h | 45559) & ~(h & 45559);
  }
  function Jw() {
    ⵠⵠⵠⲆ.l("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Kw(b, c, d, e, f, a) {
    const i = ~(b & 19925) & 19925 | ~(b & 19925) & b;
    const j = (2531011 + (12813 + c) * 214013) % 4294967296;
    const k = a ^ 34522;
    const h = Sw(i, j, d ^ 49184, e ^ 26139, f ^ 35152);
    Mw(k, i, j);
    return ~(h & 4382) & 4382 | ~(h & 4382) & h;
  }
  function Lw(b, c) {
    this.vli = b;
    this.yli = c;
    var d = this;
    this.VBi = Bi;
    this.ZBi = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: Vd,
        x: Vd
      },
      mi: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      Vi: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + ax.Oki.Yki + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Fd[ΔⵠᐃΔ.gC] + " : " + ax.pfi + "</div><div class=\"stats\"> " + Fd[ΔⵠᐃΔ.hC] + " : " + ax.Oki.Jki + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Fd[ΔⵠᐃΔ.oC] + " : " + ax.Oki.Eli + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + ax.Oki.Kki + " " + Fd[ΔⵠᐃΔ.POINTS] + "</div></div><div id=\"shop_points\">" + Fd[ΔⵠᐃΔ.rC] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Fd[ΔⵠᐃΔ.aC] + "</div><div class=\"social\" id=\"fffacebook\">" + Fd[ΔⵠᐃΔ.sC] + "</div></div><div id=\"bbback\">" + Fd[ΔⵠᐃΔ.nC] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Rw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          bx.JAi(ok.eki);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Jw, false);
        this.height = Math.floor(this.id.clientHeight / Cs);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Dk + "getBreadAndScore?userid=" + ix);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (_g == this.readyState && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - ok.vwi;
              ok.vwi = b.b;
              ok.Eli = b.s;
              ok.Bwi = ok.SBi(ok.Eli);
              ok.zwi = ok.QBi(ok.Eli);
              ok.Cwi = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var e;
    var g = Sh;
    function i() {
      d.mi();
      if (++g != 30) {
        aj.setTimeout(i, 33);
      } else {
        d.mi();
      }
    }
    this.JAi = function (a) {
      if (d.VBi === true) {
        d.VBi = false;
        e = a;
        j = -fo;
        k();
        kk();
      }
    };
    var j = -1;
    function k() {
      d.mi();
      if (++j == 30) {
        d.stop();
        d.ZBi.style.display = "none";
        e();
        return;
      }
      aj.setTimeout(k, 33);
    }
    this.Ji = false;
    this.stop = function () {
      this.Ji = Fj;
    };
    this.eki = function () {
      gx();
      document.getElementById("game_body").style.backgroundColor = rt.Zi[_w.time];
      d.ZBi.Vi();
      ok.hMi.style.display = "inline-block";
      d.Ji = gi;
      d.VBi = f;
      j = -1;
      g = Sh;
      i();
    };
    this.mi = function () {
      this.ZBi.translate.x = Math.floor(ca - 275);
      this.ZBi.translate.y = Math.floor(Kq - this.ZBi.height - 28);
      ok.hMi.translate.x = this.ZBi.translate.x - 350;
      ok.hMi.translate.y = this.ZBi.translate.y + Gc;
      ok.hMi.mi();
      if (g != 30 || j != -1) {
        var a = 0;
        if (g != 30) {
          a = 1500 / (g + fo) - 50;
        }
        if (j != -Ej) {
          a = -(1750 / (30 - j + lt) - 48);
        }
        this.ZBi.translate.y -= a;
      }
      this.ZBi.mi();
    };
    this.Sfi = function () {
      Fp();
      ax.alert.Sfi("#FFF", "#000");
    };
  }
  function Mw(b, c, d) {
    const e = ((b + 25450) * 2147483629 + 2147483587) % 2147483647;
    const f = (12345 + (43089 + c) * 1103515245) % 2147483648;
    const a = function (b, c, d) {
      const e = ~(b & 22924) & 22924 | ~(b & 22924) & b;
      const f = (c | 5425) & ~(c & 5425);
      const a = (0 << (d & $g)) + (24 << (d >> 8 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> rn & 255));
      const g = Hq(e, f, a, e, f, a);
      Hq(e, f, a, e, f, a);
      return (g | 5391) & ~(g & 5391);
    }(e, f, (16 << (d >> 16 & 255)) + (8 << (d >> 24 & 255)) + (0 << (d & 255)) + (24 << (d >> 8 & 255)));
    Yv(e, f);
    return ~(a & 34036) & 34036 | ~(a & 34036) & a;
  }
  function Nw(b, c) {
    const d = ~(b & 52111) & b | ~(b & 52111) & 52111;
    const e = c ^ 17020;
    const f = Gw(d, e, d);
    Gw(e, d, e);
    return ~(f & 58080) & f | ~(f & 58080) & 58080;
  }
  function Ow(a, b) {
    const c = ((4402 + a) * 1103515245 + 12345) % 2147483648;
    const d = (2147483587 + (43195 + b) * 2147483629) % 2147483647;
    return ((59834 + (Nw(c, d) ^ Gw(c, d, c))) * 22695477 + 1) % 4294967296;
  }
  function Pw(b, f) {
    var j = this;
    this.vli = b;
    this.yli = f;
    if (aj.navigator.userAgent.indexOf("Edge") > -1) {
      this.rwi = "default";
      this.owi = "pointer";
    } else {
      this.rwi = "url('img/cursor0.png'), default";
      this.owi = "url('img/cursor1.png'), pointer";
    }
    this.awi = fo;
    this.$Bi = 1;
    this.iDi = 1;
    this.tDi = Ko;
    this.eDi = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      mi: function () {
        this.style.left = Math.floor(ca - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.nDi = {
      aDi: Vv(60, 60, 0, ΔΔ[rt.Dl]),
      sDi: Vv(60, 60, 0, ΔΔ[rt.El])
    };
    this.sign = {
      open: false,
      rDi: 0,
      oDi: document.getElementById("sign_object"),
      hDi: Cm,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Vv(60, 60, 0, ΔΔ[rt.Ol]),
      NAi: function () {
        var a = Math.floor(Math.floor((Qe + ax.DC.Ili.length) / 4) * (ue + ΔΔ[rt.To][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      mi: function () {
        this.style.left = Math.floor(ca - 150) + "px";
        this.style.top = Math.floor(Kq - 115) + "px";
      },
      JAi: function () {
        cx.sign.style.display = "none";
        cx.sign.open = Qc;
      },
      select: function () {
        cx.sign.open = !cx.sign.open;
        if (cx.sign.open) {
          cx.sign.style.display = "inline-block";
        } else {
          cx.sign.style.display = "none";
        }
      },
      ok: function () {
        ᐃΔΔᐃ.gDi(ax.sign.ipi, cx.sign.hDi);
        cx.sign.select();
      },
      Xli: function () {
        cx.sign.hDi = cx.sign.hDi === 0 ? hw.hyi - 1 : cx.sign.hDi - 1;
        cx.sign.oDi.src = "./img/sign" + cx.sign.hDi + ".png";
      },
      cDi: function () {
        cx.sign.hDi = (cx.sign.hDi + 1) % hw.hyi;
        cx.sign.oDi.src = "./img/sign" + cx.sign.hDi + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, Fj);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.Xli, re);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.cDi, false);
    this.dDi = {
      open: kg,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: du,
        name: "wood",
        mDi: Jf,
        b: 1,
        a: on,
        uDi: rt.To
      }, {
        id: 1,
        name: "stone",
        mDi: dm,
        b: wg,
        a: 4,
        uDi: rt.Po
      }, {
        id: 2,
        name: "gold",
        mDi: Ic,
        b: Mc,
        a: 6,
        uDi: rt.bo
      }, {
        id: xa,
        name: "diamond",
        mDi: 4,
        b: 4,
        a: 1,
        uDi: rt.vo
      }, {
        id: 4,
        name: "amethyst",
        mDi: 8,
        b: wm,
        a: lt,
        uDi: rt._g
      }, {
        id: 5,
        name: "reidite",
        mDi: Do,
        b: 16,
        a: 1,
        uDi: rt.Ey
      }, {
        id: hn,
        name: "pumpkin_seed",
        mDi: 10,
        b: as,
        a: Ej,
        uDi: rt.Vl
      }, {
        id: Kr,
        name: "carrot_seed",
        mDi: xo,
        b: 16,
        a: 1,
        uDi: rt.jy
      }, {
        id: Ca,
        name: "tomato_seed",
        mDi: 20,
        b: 20,
        a: Mc,
        uDi: rt.Yy
      }, {
        id: dc,
        name: "thornbush_seed",
        mDi: 30,
        b: 30,
        a: Lh,
        uDi: rt.Tb
      }, {
        id: Mh,
        name: "garlic_seed",
        mDi: 40,
        b: 40,
        a: Ko,
        uDi: rt.Db
      }, {
        id: 11,
        name: "watermelon_seed",
        mDi: 60,
        b: 60,
        a: 1,
        uDi: rt.ik
      }],
      button: Vv(60, 60, 0, ΔΔ[rt.Rl]),
      mi: function () {
        this.style.left = Math.floor(ca - 450) + "px";
        this.style.top = Math.floor(Kq - 270) + "px";
      },
      select: function () {
        cx.dDi.open = !cx.dDi.open;
        if (cx.dDi.open) {
          cx.dDi.style.display = "inline-block";
        } else {
          cx.dDi.style.display = "none";
        }
      },
      JAi: function () {
        cx.dDi.style.display = "none";
        cx.dDi.open = Uo;
      },
      fDi: function () {
        ᐃΔΔᐃ.pDi(this.lDi);
      },
      eAi: function () {
        this.id;
        if (this.lDi.a === 1) {
          var a = Math.floor(Number(this.value) * this.lDi.b);
          this.lDi.mDi = a;
          document.getElementById(this.lDi.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.lDi.a);
          this.lDi.mDi = a;
          document.getElementById(this.lDi.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.dDi.JAi, rr);
    var e = [["mouseup", this.dDi.fDi, "buy_"], ["click", this.dDi.eAi, ""], ["change", this.dDi.eAi, ""], ["keypress", this.dDi.bDi, ""]];
    for (var a = 0; a < this.dDi.items.length; a++) {
      var i = this.dDi.items[a];
      document.getElementById(i.name + "_market").src = ΔΔ[i.uDi][Ng].vDi === undefined ? ΔΔ[i.uDi][0].src : ΔΔ[i.uDi][0].vDi;
      if (i.a === 1) {
        document.getElementById(i.name + "_trad_number").innerHTML = i.b;
        document.getElementById(i.name + "_number").value = 1;
        document.getElementById(i.name + "_number").step = 1;
        document.getElementById(i.name + "_number").min = 1;
        document.getElementById(i.name + "_number").max = Math.floor(255 / i.b);
      } else {
        document.getElementById(i.name + "_trad_number").innerHTML = 1;
        document.getElementById(i.name + "_number").value = i.a;
        document.getElementById(i.name + "_number").step = i.a;
        document.getElementById(i.name + "_number").min = i.a;
      }
      document.getElementById("buy_" + i.name + "_number").lDi = i;
      document.getElementById(i.name + "_number").lDi = i;
      for (var k = xn; e.length > k; k++) {
        document.getElementById(e[k][lr] + i.name + "_number").addEventListener(e[k][sh], e[k][wg], cc);
      }
    }
    $("[type='number']").bDi(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      yDi: document.getElementById("agree_ing").style,
      kDi: document.getElementById("cancel_agree_ing").style,
      ADi: document.getElementById("quest_agree_ing").style,
      DAi: document.getElementById("spectator_agree_ing").style,
      EAi: document.getElementById("auto_feed_agree_ing").style,
      wDi: document.getElementById("info_agree_ing").style,
      MDi: document.getElementById("pixelated_agree_ing").style,
      button: Vv(60, 60, 0, ΔΔ[rt.Bp]),
      BDi: function () {
        cx.options.open = !cx.options.open;
        if (cx.options.open) {
          cx.options.style.display = "inline-block";
        } else {
          cx.options.style.display = "none";
        }
      },
      DDi: function () {
        ok.nMi();
      },
      EDi: function () {
        ok.aMi();
      },
      high: function () {
        ok.iMi();
      },
      low: function () {
        ok.eMi();
      },
      CDi: function () {
        cx.CAi.CDi();
      },
      zDi: function () {
        cx.xDi.CDi();
      },
      QDi: function () {
        cx.SDi.CDi();
      },
      IDi: function () {
        ax.MAi.BAi();
      },
      _Di: function () {
        ax.Zpi.BAi();
      },
      JAi: function () {
        cx.options.style.display = "none";
        cx.options.open = false;
      },
      mi: function () {
        this.style.left = Math.floor(ca - 235) + "px";
        this.style.top = Math.floor(Kq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.DDi, je);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.EDi, Qc);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, oj);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.JAi, wo);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.CDi, false);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.QDi, Qh);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.zDi, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.IDi, cc);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options._Di, false);
    this.xDi = {
      open: false,
      Wpi: ⲆᐃΔⵠ.get("starve_cancel") && ⲆᐃΔⵠ.get("starve_cancel") === "0" ? Ng : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      yDi: document.getElementById("cancel_agree").style,
      button: Nf,
      qli: sh,
      JAi: function () {
        cx.xDi.style.display = "none";
        cx.xDi.open = false;
      },
      FDi: function () {
        if (ax.DC.cli) {
          ᐃΔΔᐃ.PDi();
        }
        cx.xDi.JAi();
      },
      CDi: function () {
        if (cx.xDi.Wpi) {
          ⲆᐃΔⵠ.set("starve_cancel", "0");
          cx.xDi.yDi.display = "inline-block";
          cx.options.kDi.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_cancel", "1");
          cx.xDi.yDi.display = "none";
          cx.options.kDi.display = "inline-block";
        }
        cx.xDi.Wpi = !cx.xDi.Wpi;
      },
      _Ai: function () {
        if (this.Wpi) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.FDi();
        }
      },
      mi: function () {
        this.style.left = Math.floor(ca - 235) + "px";
        this.style.top = Math.floor(Kq - 130) + "px";
      }
    };
    this.xDi.id.oncontextmenu = function () {
      return wo;
    };
    this.xDi.yDi.display = "none";
    if (this.xDi.Wpi) {
      this.options.kDi.display = "inline-block";
    } else {
      this.options.kDi.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.xDi.FDi, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.xDi.JAi, Uo);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.xDi.CDi, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.TDi = {
      Wpi: ⲆᐃΔⵠ.get("starve_aliasing") && ⲆᐃΔⵠ.get("starve_aliasing") === "0" ? bd : 1,
      jDi: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      CDi: function () {
        if (cx.TDi.Wpi === Vd) {
          ⲆᐃΔⵠ.set("starve_aliasing", "1");
          cx.TDi.jDi(X);
          cx.options.MDi.display = "inline-block";
        } else {
          ⲆᐃΔⵠ.set("starve_aliasing", "0");
          cx.TDi.jDi(0);
          cx.options.MDi.display = "none";
        }
        cx.TDi.Wpi = (cx.TDi.Wpi + Ps) % Vn;
      }
    };
    if (this.TDi.Wpi === ae) {
      this.options.MDi.display = "inline-block";
    } else {
      this.TDi.jDi(xn);
      this.options.MDi.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.TDi.CDi, Ys);
    this.qpi = {
      Wpi: ⲆᐃΔⵠ.get("starve_info_box") ? ⲆᐃΔⵠ.get("starve_info_box") === "0" ? 0 : lt : 1,
      display: 0,
      x: 0,
      y: bd,
      id: 0,
      DC: Ou,
      CDi: function () {
        if (cx.qpi.Wpi === nj) {
          ⲆᐃΔⵠ.set("starve_info_box", "1");
          cx.options.wDi.display = "inline-block";
        } else {
          ⲆᐃΔⵠ.set("starve_info_box", "0");
          cx.options.wDi.display = "none";
        }
        cx.qpi.Wpi = (cx.qpi.Wpi + Lo) % wh;
      },
      Jvi: function (a, b, c) {
        if (a && this.Wpi) {
          this.display = 1;
          this.id = c === 0 ? b.id : st[b.id].zE;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.DC = c;
        }
        return a;
      }
    };
    if (this.qpi.Wpi === 1) {
      this.options.wDi.display = "inline-block";
    } else {
      this.options.wDi.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.qpi.CDi, Ys);
    if (ⲆᐃΔⵠ.get("starve_scale")) {
      ka = Number(ⲆᐃΔⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = ka;
      ka *= dr / mr;
      fr();
    }
    this.tMi = function () {
      ⲆᐃΔⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      ka = dr / mr * document.getElementById("input_ratio").value;
      fr();
    };
    document.getElementById("input_ratio").addEventListener("input", this.tMi, kg);
    this.CAi = {
      open: re,
      Wpi: ⲆᐃΔⵠ.get("starve_safe") ? ⲆᐃΔⵠ.get("starve_safe") === "0" ? 0 : hf : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      yDi: document.getElementById("agree").style,
      button: 0,
      qli: Ng,
      JAi: function () {
        cx.CAi.style.display = "none";
        cx.CAi.open = false;
      },
      all: function () {
        if (!ax.Hli.wait) {
          if (ax.DC.Sli < du && ax.DC.id < 0 && !ax.ubi.enabled) {
            ᐃΔΔᐃ.RDi(cx.CAi.button);
          }
          cx.CAi.JAi();
        }
      },
      DE: function () {
        if (ax.DC.xAi && !ax.Hli.wait) {
          if (ax.DC.Sli < Ou && ax.DC.id < xn && !ax.ubi.enabled) {
            ᐃΔΔᐃ.LDi(cx.CAi.button);
          }
          cx.CAi.JAi();
        }
      },
      GDi: function () {
        if (!ax.Hli.wait) {
          if (ax.DC.Sli < du && ax.DC.id < Gc && !ax.ubi.enabled) {
            ᐃΔΔᐃ.qDi(cx.CAi.button);
          }
          cx.CAi.JAi();
        }
      },
      CDi: function () {
        if (cx.CAi.Wpi) {
          ⲆᐃΔⵠ.set("starve_safe", "0");
          cx.CAi.yDi.display = "inline-block";
          cx.options.yDi.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_safe", "1");
          cx.CAi.yDi.display = "none";
          cx.options.yDi.display = "inline-block";
        }
        cx.CAi.Wpi = !cx.CAi.Wpi;
      },
      _Ai: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ΔΔ[go[a].ME][Ea].vDi === undefined ? ΔΔ[go[a].ME][Ea].src : ΔΔ[go[a].ME][0].vDi;
        if (go[a].DE && !ax.Qpi && ax.DC.xAi) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.Wpi) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      mi: function () {
        this.style.left = Math.floor(ca - 235) + "px";
        this.style.top = Math.floor(Kq - 175) + "px";
      }
    };
    this.CAi.yDi.display = "none";
    if (this.CAi.Wpi) {
      this.options.yDi.display = "inline-block";
    } else {
      this.options.yDi.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.CAi.GDi, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.CAi.all, Qh);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.CAi.DE, cc);
    document.getElementById("no_delete").addEventListener("mouseup", this.CAi.JAi, ui);
    document.getElementById("case_agree").addEventListener("mouseup", this.CAi.CDi, Fj);
    this.Vki = {
      open: false,
      Twi: -1,
      button: Vv(60, 60, 0, ΔΔ[rt.Xm]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      mi: function () {
        this.style.left = Math.floor(ca - 300) + "px";
        this.style.top = Math.floor(Kq - 215) + "px";
      },
      JAi: function () {
        cx.Vki.open = zn;
        cx.Vki.style.display = "none";
      },
      select: function () {
        cx.Vki.open = !cx.Vki.open;
        if (cx.Vki.open) {
          cx.Vki.style.display = "inline-block";
        } else {
          cx.Vki.style.display = "none";
        }
      },
      fDi: function () {
        if (cx.Vki.Twi >= 0) {
          ᐃΔΔᐃ.WDi(cx.Vki.Twi);
          cx.Vki.JAi();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + cx.Vki.Twi);
          }
        }
      },
      Vi: function () {
        var a = ax.Vki.value;
        document.getElementById("points_bank").innerHTML = ⵠⵠⵠⲆ.Z(a) + " points";
        for (var b = Oq; b < gw.length; b++) {
          if (gw[b].Zvi > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = ae; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      NDi: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = gw[a - Ej];
        if (ax.Vki.value >= b.Zvi) {
          cx.Vki.Twi = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          cx.Vki.Twi = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + hf; c++) {
          if (b[c - fi][1] !== $r.ge) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ΔΔ[go[b[c - au][1]].ME][0].vDi === undefined ? ΔΔ[go[b[c - hf][Lh]].ME][Ng].src : ΔΔ[go[b[c - yd][fo]].ME][0].vDi;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][Sh];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.Vki.JAi, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.Vki.fDi, ks);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.Vki.NDi, false);
    }
    this.SDi = {
      open: Xq,
      Wpi: ⲆᐃΔⵠ.get("starve_quests") && ⲆᐃΔⵠ.get("starve_quests") === "1" ? 1 : 0,
      button: Vv(60, 60, 0, ΔΔ[rt.Zp]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      mi: function () {
        this.style.left = Math.floor(ca - 420) + "px";
        this.style.top = Math.floor(Kq - 270) + "px";
      },
      JAi: function () {
        cx.SDi.style.display = "none";
        cx.SDi.open = Ys;
      },
      select: function () {
        cx.SDi.open = !cx.SDi.open;
        if (cx.SDi.open) {
          cx.SDi.style.display = "inline-block";
        } else {
          cx.SDi.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < kw.length; a++) {
          this.list[a] = Mc;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      HDi: so,
      obi: Jj,
      UDi: function () {
        if (cx.SDi.open) {
          var a = new Date().getTime();
          if (a - this.HDi >= 1000) {
            this.HDi = a;
            for (var b = xn; b < kw.length; b++) {
              if (cx.SDi.list[b]) {
                var c = kw[b].time - (a - ck.Xpi.Vi + cx.SDi.obi);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != yd) {
            cx.SDi.ODi(b, a[b]);
          }
        }
      },
      ODi: function (a, b) {
        if (b === 3 && (a === We || a === 12)) {
          ax.Lfi.pAi(so, 1);
          cx.yAi();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === Ka) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === Cg ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        cx.SDi.list[a] = Nf;
      },
      modify: function (a, b) {
        cx.SDi.ODi(a, b);
        if (cx.SDi.Wpi) {
          cx.SDi.open = true;
          cx.SDi.style.display = "inline-block";
        }
      },
      CDi: function () {
        if (cx.SDi.Wpi) {
          ⲆᐃΔⵠ.set("starve_quests", "0");
          cx.options.ADi.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_quests", "1");
          cx.options.ADi.display = "inline-block";
        }
        cx.SDi.Wpi = !cx.SDi.Wpi;
      },
      YDi: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * mm + b;
        }
        ᐃΔΔᐃ.JDi(a);
      }
    };
    if (this.SDi.Wpi) {
      this.options.ADi.display = "inline-block";
    } else {
      this.options.ADi.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.SDi.JAi, false);
    for (k = 0; k < kw.length; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.SDi.YDi, ks);
    }
    this.KDi = {
      open: false,
      button: Vv(60, 60, 0, ΔΔ[rt.sp]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        XDi: [],
        VDi: 0,
        mi: function () {
          this.style.left = Math.floor(ca - 335) + "px";
          this.style.top = Math.floor(Kq - 215) + "px";
        },
        JAi: function () {
          document.getElementById("recipe_craft").style.display = "none";
          cx.KDi.open = Qh;
        },
        nAi: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ZDi: function (a) {
          if ((b = this.XDi[a]).oi) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ΔΔ[go[b[a][0]].ME][0].vDi === Nn ? ΔΔ[go[b[a][nj]].ME][0].src : ΔΔ[go[b[a][0]].ME][0].vDi;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.VDi = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = du, c = Vd; b < st.length; b++) {
            var d = st[b];
            if (a === d.xE) {
              this.XDi[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ΔΔ[go[d.zE].ME][0].vDi === undefined ? ΔΔ[go[d.zE].ME][0].src : ΔΔ[go[d.zE].ME][0].vDi;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      $Di: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        mi: function () {
          this.style.left = Math.floor(ca - 285) + "px";
          this.style.top = Math.floor(Kq - 170) + "px";
        },
        JAi: function () {
          document.getElementById("home_craft").style.display = "none";
          cx.KDi.open = false;
        }
      },
      iEi: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.KDi.$Di.JAi, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.KDi.list.JAi, Xq);
    document.getElementById("backhome").addEventListener("mouseup", this.KDi.list.nAi, Xq);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      cx.KDi.list.select(eo.kE);
    }, Uo);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      cx.KDi.list.select(eo.vE);
    }, re);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      cx.KDi.list.select(eo.wE);
    }, Qh);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      cx.KDi.list.select(eo.AE);
    }, Qh);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      cx.KDi.list.select(eo.yE);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      cx.KDi.list.select(eo.bE);
    }, Xq);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(X);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(3);
    }, ui);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(eh);
    }, je);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(Jd);
    }, je);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(Fa);
    }, zn);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(7);
    }, Bi);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(rg);
    }, re);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(9);
    }, Mr);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(10);
    }, Uo);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(11);
    }, wo);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(nr);
    }, ks);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(os);
    }, rr);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(15);
    }, Qh);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(Oo);
    }, re);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(17);
    }, ui);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(dd);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(19);
    }, Qc);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(Es);
    }, Xq);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(21);
    }, false);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(24);
    }, u);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(25);
    }, kg);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(27);
    }, je);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(28);
    }, je);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(30);
    }, false);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(31);
    }, false);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(34);
    }, Uo);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(36);
    }, oj);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(38);
    }, Qc);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(40);
    }, ui);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(45);
    }, oj);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(46);
    }, Bi);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      cx.KDi.list.ZDi(47);
    }, false);
    this.Gfi = {
      translate: {
        y: xn,
        x: Oq
      },
      qfi: {
        x: -1,
        y: -fn
      },
      Wfi: [],
      focus: function (a) {
        var b = this.translate.y + (ax.Lfi.Rfi.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.qfi.x = a.x - this.translate.x;
          this.qfi.y = a.y - b;
        }
      }
    };
    this.lli = {
      translate: {
        y: Ea,
        x: 0
      },
      ME: ΔΔ[rt.Xr],
      vli: document.createElement("canvas")
    };
    this.lli.vli.width = this.lli.ME.width;
    this.lli.vli.height = this.lli.ME.height;
    this.lli.yli = this.lli.vli.getContext("2d");
    this.tli = {
      translate: {
        x: 0,
        y: Ea
      },
      ME: ΔΔ[rt.Lr],
      Sfi: Yl,
      y: 0
    };
    this.tEi = function () {
      ΔⵠⲆΔⵠ = document.getElementById("team_box");
      ΔⵠⲆΔⵠ.innerHTML = "";
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ck.Wfi[ax._pi[ke]].Ali + "</div";
      for (var a = 1; ax._pi.length > a; a++) {
        ΔⵠⲆΔⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ck.Wfi[ax._pi[a]].Ali + "</div></div>";
      }
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ΔⵠⲆΔⵠ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ᐃΔΔᐃ.tEi, Bi);
    };
    this.eEi = function () {
      ΔⵠⲆΔⵠ = document.getElementById("team_box");
      ΔⵠⲆΔⵠ.innerHTML = "";
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ck.Wfi[ax._pi[0]].Ali + "</div";
      for (var a = 1; a < ax._pi.length; a++) {
        ΔⵠⲆΔⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ck.Wfi[ax._pi[a]].Ali + "</div></div>";
      }
      ΔⵠⲆΔⵠ.innerHTML += "</div>";
      ΔⵠⲆΔⵠ.style.display = "inline-block";
    };
    this.nEi = function () {
      ΔⵠⲆΔⵠ = document.getElementById("team_box");
      ΔⵠⲆΔⵠ.innerHTML = "";
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ck.Wfi[ax._pi[nj]].Ali + "</div";
      for (var a = Lh; a < ax._pi.length; a++) {
        ΔⵠⲆΔⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ck.Wfi[ax._pi[a]].Ali + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (ax.zpi.lock === Js) {
        ΔⵠⲆΔⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ΔⵠⲆΔⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ᐃΔΔᐃ.aEi, false);
      ΔⵠⲆΔⵠ.style.display = "inline-block";
      for (a = X; ax._pi.length > a; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(1);
            }, false);
            break;
          case Te:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(Tg);
            }, Bi);
            break;
          case Qe:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(3);
            }, false);
            break;
          case Ld:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(4);
            }, Qc);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(Nu);
            }, false);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(hn);
            }, Uo);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(Kr);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.sEi(8);
            }, Bi);
        }
      }
    };
    this.Lpi = [];
    this.Lpi[hw.Fpi] = {
      button: Vv(60, 60, 0, ΔΔ[rt.fm]),
      action: this.tEi
    };
    this.Lpi[hw.Tpi] = {
      button: Vv(60, 60, 0, ΔΔ[rt.fm]),
      action: ᐃΔΔᐃ.rEi
    };
    this.Lpi[hw.Rpi] = {
      button: Vv(60, 60, 0, ΔΔ[rt.pm]),
      action: this.nEi
    };
    this.Lpi[hw.Ppi] = {
      button: Vv(60, 60, 0, ΔΔ[rt.ym]),
      action: this.eEi
    };
    this.Lpi[hw.jpi] = {
      button: Vv(60, 60, 0, ΔΔ[rt.vm]),
      action: function () {}
    };
    this.Ipi = -Ic;
    this.Ypi = Vv(60, 60, 0, ΔΔ[rt.kp]);
    this.Jpi = Vv(60, 60, 0, ΔΔ[rt.Ap]);
    this.Kpi = Vv(60, 60, 0, ΔΔ[rt.gf]);
    this.Epi = Vv(60, 60, 0, ΔΔ[rt.hf]);
    this.Cpi = Vv(60, 60, 0, ΔΔ[rt.gf]);
    this.tpi = Vv(60, 60, 0, ΔΔ[rt.To]);
    this.epi = Vv(60, 60, 0, ΔΔ[rt.Po]);
    this.npi = Vv(60, 60, 0, ΔΔ[rt.bo]);
    this.api = Vv(60, 60, 0, ΔΔ[rt.vo]);
    this.spi = Vv(60, 60, 0, ΔΔ[rt._g]);
    this.rpi = Vv(60, 60, 0, ΔΔ[rt.Ey]);
    this.wpi = Vv(60, 60, 0, ΔΔ[rt.Cg]);
    this.ypi = Vv(60, 60, 0, ΔΔ[rt.Od]);
    this.kpi = Vv(60, 60, 0, ΔΔ[rt.Ud]);
    this.vpi = Vv(60, 60, 0, ΔΔ[rt.Jd]);
    this.Npi = Vv(120, 120, 0, ΔΔ[rt.Ma]);
    this.Npi.info.translate.x = no;
    this.Npi.info.translate.y = 10;
    this.bpi = [];
    this.bpi[$r.Ft] = Vv(68, 68, 0, ΔΔ[rt.rh], 3);
    this.bpi[$r.Ft].id = $r.Ft;
    this.bpi[$r.Pt] = Vv(68, 68, 0, ΔΔ[rt.oh], 3);
    this.bpi[$r.Pt].id = $r.Pt;
    this.bpi[$r.nE] = Vv(68, 68, 0, ΔΔ[rt.hh], 3);
    this.bpi[$r.nE].id = $r.nE;
    this.bpi[$r.aE] = Vv(68, 68, 0, ΔΔ[rt.gh], 3);
    this.bpi[$r.aE].id = $r.aE;
    this.bpi[$r.Rn] = Vv(68, 68, 0, ΔΔ[rt.qr], 3);
    this.bpi[$r.Rn].id = $r.Rn;
    this.bpi[$r.Bk] = Vv(68, 68, 0, ΔΔ[rt.DM], on);
    this.bpi[$r.Bk].id = $r.Bk;
    this.bpi[$r.Ln] = Vv(68, 68, 0, ΔΔ[rt.Wr], xa);
    this.bpi[$r.Ln].id = $r.Ln;
    this.bpi[$r.Gn] = Vv(68, 68, 0, ΔΔ[rt.Nr], Vr);
    this.bpi[$r.Gn].id = $r.Gn;
    this.bpi[$r.jt] = Vv(68, 68, 0, ΔΔ[rt.Hr], 3);
    this.bpi[$r.jt].id = $r.jt;
    this.bpi[$r.Rt] = Vv(68, 68, 0, ΔΔ[rt.dh], 3);
    this.bpi[$r.Rt].id = $r.Rt;
    this.bpi[$r.Lt] = Vv(68, 68, 0, ΔΔ[rt.mh], 3);
    this.bpi[$r.Lt].id = $r.Lt;
    this.bpi[$r.je] = Vv(68, 68, 0, ΔΔ[rt.wb], uc);
    this.bpi[$r.je].id = $r.je;
    this.bpi[$r.Gt] = Vv(68, 68, 0, ΔΔ[rt.uh], Qe);
    this.bpi[$r.Gt].id = $r.Gt;
    this.bpi[$r.oo] = Vv(68, 68, 0, ΔΔ[rt.Ur], 3);
    this.bpi[$r.oo].id = $r.oo;
    this.bpi[$r.Wn] = Vv(68, 68, 0, ΔΔ[rt.Ch], 3);
    this.bpi[$r.Wn].id = $r.Wn;
    this.bpi[$r.wr] = Vv(68, 68, 0, ΔΔ[rt.ph], 3);
    this.bpi[$r.wr].id = $r.wr;
    this.bpi[$r.Ta] = Vv(68, 68, 0, ΔΔ[rt.bh], 3);
    this.bpi[$r.Ta].id = $r.Ta;
    this.bpi[$r.Fa] = Vv(68, 68, 0, ΔΔ[rt.yh], fa);
    this.bpi[$r.Fa].id = $r.Fa;
    this.bpi[$r.Wt] = Vv(68, 68, 0, ΔΔ[rt.Or], xa);
    this.bpi[$r.Wt].id = $r.Wt;
    this.bpi[$r.Un] = Vv(68, 68, 0, ΔΔ[rt.kh], 3);
    this.bpi[$r.Un].id = $r.Un;
    this.bpi[$r.Hn] = Vv(68, 68, 0, ΔΔ[rt.Yr], yr);
    this.bpi[$r.Hn].id = $r.Hn;
    this.bpi[$r.PD] = Vv(68, 68, 0, ΔΔ[rt.Jr], Sn);
    this.bpi[$r.PD].id = $r.PD;
    this.bpi[$r.vs] = Vv(68, 68, 0, ΔΔ[rt.Ah], 3);
    this.bpi[$r.vs].id = $r.vs;
    this.bpi[$r.Pa] = Vv(68, 68, 0, ΔΔ[rt.wh], 3);
    this.bpi[$r.Pa].id = $r.Pa;
    this.bpi[$r.ja] = Vv(68, 68, 0, ΔΔ[rt.Mh], oe);
    this.bpi[$r.ja].id = $r.ja;
    this.bpi[$r.Ra] = Vv(68, 68, 0, ΔΔ[rt.Bh], mq);
    this.bpi[$r.Ra].id = $r.Ra;
    this.bpi[$r.La] = Vv(68, 68, 0, ΔΔ[rt.Dh], er);
    this.bpi[$r.La].id = $r.La;
    this.bpi[$r.UD] = Vv(68, 68, 0, ΔΔ[rt.Eh], 3);
    this.bpi[$r.UD].id = $r.UD;
    this.bpi[$r.qa] = Vv(68, 68, 0, ΔΔ[rt.zh], 3);
    this.bpi[$r.qa].id = $r.qa;
    this.bpi[$r.Wa] = Vv(68, 68, 0, ΔΔ[rt.Vh], 3);
    this.bpi[$r.Wa].id = $r.Wa;
    this.bpi[$r.Na] = Vv(68, 68, 0, ΔΔ[rt.Zh], 3);
    this.bpi[$r.Na].id = $r.Na;
    this.bpi[$r.Ha] = Vv(68, 68, 0, ΔΔ[rt.$h], mq);
    this.bpi[$r.Ha].id = $r.Ha;
    this.bpi[$r.Tt] = Vv(68, 68, 0, ΔΔ[rt.tg], 3);
    this.bpi[$r.Tt].id = $r.Tt;
    this.bpi[$r.mr] = Vv(68, 68, 0, ΔΔ[rt._M], 3);
    this.bpi[$r.mr].id = $r.mr;
    this.bpi[$r.Ja] = Vv(68, 68, 0, ΔΔ[rt.gg], 3);
    this.bpi[$r.Ja].id = $r.Ja;
    this.bpi[$r.Us] = Vv(68, 68, 0, ΔΔ[rt.bA], 3);
    this.bpi[$r.Us].id = $r.Us;
    this.bpi[$r.rr] = Vv(68, 68, 0, ΔΔ[rt.yA], xa);
    this.bpi[$r.rr].id = $r.rr;
    this.bpi[$r.cr] = Vv(68, 68, 0, ΔΔ[rt.AA], fa);
    this.bpi[$r.cr].id = $r.cr;
    this.bpi[$r.dr] = Vv(68, 68, 0, ΔΔ[rt.CM], 3);
    this.bpi[$r.dr].id = $r.dr;
    this.bpi[$r.Ht] = Vv(68, 68, 0, ΔΔ[rt.eg], 3);
    this.bpi[$r.Ht].id = $r.Ht;
    this.bpi[$r.OD] = Vv(68, 68, 0, ΔΔ[rt.ng], yr);
    this.bpi[$r.OD].id = $r.OD;
    this.bpi[$r.YD] = Vv(68, 68, 0, ΔΔ[rt.ag], fa);
    this.bpi[$r.YD].id = $r.YD;
    this.bpi[$r.JD] = Vv(68, 68, 0, ΔΔ[rt.sg], uc);
    this.bpi[$r.JD].id = $r.JD;
    this.bpi[$r.Ut] = Vv(68, 68, 0, ΔΔ[rt.rg], Vr);
    this.bpi[$r.Ut].id = $r.Ut;
    this.bpi[$r.Ot] = Vv(68, 68, 0, ΔΔ[rt.vg], pg);
    this.bpi[$r.Ot].id = $r.Ot;
    this.bpi[$r.Yt] = Vv(68, 68, 0, ΔΔ[rt.mg], Qe);
    this.bpi[$r.Yt].id = $r.Yt;
    this.bpi[$r.Jt] = Vv(68, 68, 0, ΔΔ[rt.pg], E);
    this.bpi[$r.Jt].id = $r.Jt;
    this.bpi[$r.Kt] = Vv(68, 68, 0, ΔΔ[rt.Ag], 3);
    this.bpi[$r.Kt].id = $r.Kt;
    this.bpi[$r.Xt] = Vv(68, 68, 0, ΔΔ[rt.mv], 3);
    this.bpi[$r.Xt].id = $r.Xt;
    this.bpi[$r.TD] = Vv(68, 68, 0, ΔΔ[rt.Dg], 3);
    this.bpi[$r.TD].id = $r.TD;
    this.bpi[$r.ne] = Vv(68, 68, 0, ΔΔ[rt.jg], Lc);
    this.bpi[$r.ne].id = $r.ne;
    this.bpi[$r.ae] = Vv(68, 68, 0, ΔΔ[rt.Gg], 3);
    this.bpi[$r.ae].id = $r.ae;
    this.bpi[$r.pn] = Vv(68, 68, 0, ΔΔ[rt.HB], 3);
    this.bpi[$r.pn].id = $r.pn;
    this.bpi[$r.ln] = Vv(68, 68, 0, ΔΔ[rt.YB], oe);
    this.bpi[$r.ln].id = $r.ln;
    this.bpi[$r.hn] = Vv(68, 68, 0, ΔΔ[rt.hM], E);
    this.bpi[$r.hn].id = $r.hn;
    this.bpi[$r.gn] = Vv(68, 68, 0, ΔΔ[rt.dM], er);
    this.bpi[$r.gn].id = $r.gn;
    this.bpi[$r.xn] = Vv(68, 68, 0, ΔΔ[rt.jM], 3);
    this.bpi[$r.xn].id = $r.xn;
    this.bpi[$r.He] = Vv(68, 68, 0, ΔΔ[rt.xm], 3);
    this.bpi[$r.He].id = $r.He;
    this.bpi[$r.Ve] = Vv(68, 68, 0, ΔΔ[rt.tD], pg);
    this.bpi[$r.Ve].id = $r.Ve;
    this.bpi[$r.Qn] = Vv(68, 68, 0, ΔΔ[rt.GM], 3);
    this.bpi[$r.Qn].id = $r.Qn;
    this.bpi[$r.Ue] = Vv(68, 68, 0, ΔΔ[rt.Im], 3);
    this.bpi[$r.Ue].id = $r.Ue;
    this.bpi[$r.Ze] = Vv(68, 68, 0, ΔΔ[rt.aD], 3);
    this.bpi[$r.Ze].id = $r.Ze;
    this.bpi[$r.Sn] = Vv(68, 68, 0, ΔΔ[rt.NM], 3);
    this.bpi[$r.Sn].id = $r.Sn;
    this.bpi[$r.Oe] = Vv(68, 68, 0, ΔΔ[rt.Pm], 3);
    this.bpi[$r.Oe].id = $r.Oe;
    this.bpi[$r.$e] = Vv(68, 68, 0, ΔΔ[rt.oD], Sn);
    this.bpi[$r.$e].id = $r.$e;
    this.bpi[$r.In] = Vv(68, 68, 0, ΔΔ[rt.OM], 3);
    this.bpi[$r.In].id = $r.In;
    this.bpi[$r.Ye] = Vv(68, 68, 0, ΔΔ[rt.Rm], 3);
    this.bpi[$r.Ye].id = $r.Ye;
    this.bpi[$r.tn] = Vv(68, 68, 0, ΔΔ[rt.cD], 3);
    this.bpi[$r.tn].id = $r.tn;
    this.bpi[$r._n] = Vv(68, 68, 0, ΔΔ[rt.KM], 3);
    this.bpi[$r._n].id = $r._n;
    this.bpi[$r.Je] = Vv(68, 68, 0, ΔΔ[rt.qm], 3);
    this.bpi[$r.Je].id = $r.Je;
    this.bpi[$r.en] = Vv(68, 68, 0, ΔΔ[rt.uD], 3);
    this.bpi[$r.en].id = $r.en;
    this.bpi[$r.Fn] = Vv(68, 68, 0, ΔΔ[rt.ZM], jh);
    this.bpi[$r.Fn].id = $r.Fn;
    this.bpi[$r.Ke] = Vv(68, 68, 0, ΔΔ[rt.Hm], Vr);
    this.bpi[$r.Ke].id = $r.Ke;
    this.bpi[$r.nn] = Vv(68, 68, 0, ΔΔ[rt.lD], 3);
    this.bpi[$r.nn].id = $r.nn;
    this.bpi[$r.Pn] = Vv(68, 68, 0, ΔΔ[rt.tB], yr);
    this.bpi[$r.Pn].id = $r.Pn;
    this.bpi[$r.Xe] = Vv(68, 68, 0, ΔΔ[rt.Ym], 3);
    this.bpi[$r.Xe].id = $r.Xe;
    this.bpi[$r.wn] = Vv(68, 68, 0, ΔΔ[rt.yD], 3);
    this.bpi[$r.wn].id = $r.wn;
    this.bpi[$r.Mn] = Vv(68, 68, 0, ΔΔ[rt.wD], Lc);
    this.bpi[$r.Mn].id = $r.Mn;
    this.bpi[$r.Bn] = Vv(68, 68, 0, ΔΔ[rt.DD], 3);
    this.bpi[$r.Bn].id = $r.Bn;
    this.bpi[$r.Dn] = Vv(68, 68, 0, ΔΔ[rt.zD], 3);
    this.bpi[$r.Dn].id = $r.Dn;
    this.bpi[$r.En] = Vv(68, 68, 0, ΔΔ[rt.SD], Xg);
    this.bpi[$r.En].id = $r.En;
    this.bpi[$r.Cn] = Vv(68, 68, 0, ΔΔ[rt.FD], oe);
    this.bpi[$r.Cn].id = $r.Cn;
    this.bpi[$r.Re] = Vv(68, 68, 0, ΔΔ[rt.yb], 3);
    this.bpi[$r.Re].id = $r.Re;
    this.bpi[$r.se] = Vv(68, 68, 0, ΔΔ[rt.Og], E);
    this.bpi[$r.se].id = $r.se;
    this.bpi[$r.re] = Vv(68, 68, 0, ΔΔ[rt.Kg], jh);
    this.bpi[$r.re].id = $r.re;
    this.bpi[$r.oe] = Vv(68, 68, 0, ΔΔ[rt.Zg], 3);
    this.bpi[$r.oe].id = $r.oe;
    this.bpi[$r.he] = Vv(68, 68, 0, ΔΔ[rt.ec], yr);
    this.bpi[$r.he].id = $r.he;
    this.bpi[$r.Jn] = Vv(68, 68, 0, ΔΔ[rt.sc], 3);
    this.bpi[$r.Jn].id = $r.Jn;
    this.bpi[$r.ge] = Vv(68, 68, 0, ΔΔ[rt.ig], 3);
    this.bpi[$r.ge].id = $r.ge;
    this.bpi[$r.Kn] = Vv(68, 68, 0, ΔΔ[rt.hc], 3);
    this.bpi[$r.Kn].id = $r.Kn;
    this.bpi[$r.ce] = Vv(68, 68, 0, ΔΔ[rt.kc], Wc);
    this.bpi[$r.ce].id = $r.ce;
    this.bpi[$r.Nt] = Vv(68, 68, 0, ΔΔ[rt.$b], xa);
    this.bpi[$r.Nt].id = $r.Nt;
    this.bpi[$r.de] = Vv(68, 68, 0, ΔΔ[rt.wc], oe);
    this.bpi[$r.de].id = $r.de;
    this.bpi[$r.me] = Vv(68, 68, 0, ΔΔ[rt.$k], 3);
    this.bpi[$r.me].id = $r.me;
    this.bpi[$r.ue] = Vv(68, 68, 0, ΔΔ[rt.jc], 3);
    this.bpi[$r.ue].id = $r.ue;
    this.bpi[$r.pe] = Vv(68, 68, 0, ΔΔ[rt.Wc], E);
    this.bpi[$r.pe].id = $r.pe;
    this.bpi[$r.le] = Vv(68, 68, 0, ΔΔ[rt.Uc], oe);
    this.bpi[$r.le].id = $r.le;
    this.bpi[$r.be] = Vv(68, 68, 0, ΔΔ[rt.Jc], Qe);
    this.bpi[$r.be].id = $r.be;
    this.bpi[$r.ve] = Vv(68, 68, 0, ΔΔ[rt.Vc], Sn);
    this.bpi[$r.ve].id = $r.ve;
    this.bpi[$r.ye] = Vv(68, 68, 0, ΔΔ[rt.td], Vr);
    this.bpi[$r.ye].id = $r.ye;
    this.bpi[$r.Xn] = Vv(68, 68, 0, ΔΔ[rt.ad], Wc);
    this.bpi[$r.Xn].id = $r.Xn;
    this.bpi[$r.Vn] = Vv(68, 68, 0, ΔΔ[rt.od], 3);
    this.bpi[$r.Vn].id = $r.Vn;
    this.bpi[$r.KD] = Vv(68, 68, 0, ΔΔ[rt.md], jh);
    this.bpi[$r.KD].id = $r.KD;
    this.bpi[$r.ke] = Vv(68, 68, 0, ΔΔ[rt.pd], Ie);
    this.bpi[$r.ke].id = $r.ke;
    this.bpi[$r.ka] = Vv(68, 68, 0, ΔΔ[rt.bd], yr);
    this.bpi[$r.ka].id = $r.ka;
    this.bpi[$r.lE] = Vv(68, 68, 0, ΔΔ[rt.KB], 3);
    this.bpi[$r.lE].id = $r.lE;
    this.bpi[$r.Aa] = Vv(68, 68, 0, ΔΔ[rt.Bd], 3);
    this.bpi[$r.Aa].id = $r.Aa;
    this.bpi[$r.wa] = Vv(68, 68, 0, ΔΔ[rt.Qd], 3);
    this.bpi[$r.wa].id = $r.wa;
    this.bpi[$r.Ma] = Vv(68, 68, 0, ΔΔ[rt.Id], Wc);
    this.bpi[$r.Ma].id = $r.Ma;
    this.bpi[$r.Ba] = Vv(68, 68, 0, ΔΔ[rt.Fd], 3);
    this.bpi[$r.Ba].id = $r.Ba;
    this.bpi[$r.Da] = Vv(68, 68, 0, ΔΔ[rt.qd], yr);
    this.bpi[$r.Da].id = $r.Da;
    this.bpi[$r.Ia] = Vv(68, 68, 0, ΔΔ[rt.Hd], 3);
    this.bpi[$r.Ia].id = $r.Ia;
    this.bpi[$r._a] = Vv(68, 68, 0, ΔΔ[rt.dm], xa);
    this.bpi[$r._a].id = $r._a;
    this.bpi[$r.Me] = Vv(68, 68, 0, ΔΔ[rt.$d], 3);
    this.bpi[$r.Me].id = $r.Me;
    this.bpi[$r.De] = Vv(68, 68, 0, ΔΔ[rt.hm], er);
    this.bpi[$r.De].id = $r.De;
    this.bpi[$r.$n] = Vv(68, 68, 0, ΔΔ[rt.cu], pg);
    this.bpi[$r.$n].id = $r.$n;
    this.bpi[$r.Hs] = Vv(68, 68, 0, ΔΔ[rt.ZB], xa);
    this.bpi[$r.Hs].id = $r.Hs;
    this.bpi[$r.Os] = Vv(68, 68, 0, ΔΔ[rt.cA], 3);
    this.bpi[$r.Os].id = $r.Os;
    this.bpi[$r.Ys] = Vv(68, 68, 0, ΔΔ[rt.uA], 3);
    this.bpi[$r.Ys].id = $r.Ys;
    this.bpi[$r.sr] = Vv(68, 68, 0, ΔΔ[rt.Ww], jh);
    this.bpi[$r.sr].id = $r.sr;
    this.bpi[$r.bn] = Vv(68, 68, 0, ΔΔ[rt.zA], 3);
    this.bpi[$r.bn].id = $r.bn;
    this.bpi[$r.Xs] = Vv(68, 68, 0, ΔΔ[rt.SA], 3);
    this.bpi[$r.Xs].id = $r.Xs;
    this.bpi[$r.tr] = Vv(68, 68, 0, ΔΔ[rt.rw], 3);
    this.bpi[$r.tr].id = $r.tr;
    this.bpi[$r.yr] = Vv(68, 68, 0, ΔΔ[rt.GB], 3);
    this.bpi[$r.yr].id = $r.yr;
    this.bpi[$r.er] = Vv(68, 68, 0, ΔΔ[rt.Aw], 3);
    this.bpi[$r.er].id = $r.er;
    this.bpi[$r.ar] = Vv(68, 68, 0, ΔΔ[rt.Pw], nh);
    this.bpi[$r.ar].id = $r.ar;
    this.bpi[$r.ir] = Vv(68, 68, 0, ΔΔ[rt.rB], 3);
    this.bpi[$r.ir].id = $r.ir;
    this.bpi[$r.ia] = Vv(68, 68, 0, ΔΔ[rt.fu], nh);
    this.bpi[$r.ia].id = $r.ia;
    this.bpi[$r.ta] = Vv(68, 68, 0, ΔΔ[rt.yu], 3);
    this.bpi[$r.ta].id = $r.ta;
    this.bpi[$r.ea] = Vv(68, 68, 0, ΔΔ[rt.vu], on);
    this.bpi[$r.ea].id = $r.ea;
    this.bpi[$r.Ee] = Vv(68, 68, 0, ΔΔ[rt.Au], 3);
    this.bpi[$r.Ee].id = $r.Ee;
    this.bpi[$r.Qe] = Vv(68, 68, 0, ΔΔ[rt.Zf], 3);
    this.bpi[$r.Qe].id = $r.Qe;
    this.bpi[$r.Se] = Vv(68, 68, 0, ΔΔ[rt.ip], 3);
    this.bpi[$r.Se].id = $r.Se;
    this.bpi[$r.Ie] = Vv(68, 68, 0, ΔΔ[rt.ap], Wc);
    this.bpi[$r.Ie].id = $r.Ie;
    this.bpi[$r.Pe] = Vv(68, 68, 0, ΔΔ[rt.op], 3);
    this.bpi[$r.Pe].id = $r.Pe;
    this.bpi[$r.na] = Vv(68, 68, 0, ΔΔ[rt.xu], 3);
    this.bpi[$r.na].id = $r.na;
    this.bpi[$r.aa] = Vv(68, 68, 0, ΔΔ[rt.Iu], Xg);
    this.bpi[$r.aa].id = $r.aa;
    this.bpi[$r.sa] = Vv(68, 68, 0, ΔΔ[rt.Fu], Sr);
    this.bpi[$r.sa].id = $r.sa;
    this.bpi[$r.ra] = Vv(68, 68, 0, ΔΔ[rt.ju], 3);
    this.bpi[$r.ra].id = $r.ra;
    this.bpi[$r.oa] = Vv(68, 68, 0, ΔΔ[rt.Gu], Wc);
    this.bpi[$r.oa].id = $r.oa;
    this.bpi[$r.ha] = Vv(68, 68, 0, ΔΔ[rt.Hu], Wc);
    this.bpi[$r.ha].id = $r.ha;
    this.bpi[$r.ga] = Vv(68, 68, 0, ΔΔ[rt.Ku], 3);
    this.bpi[$r.ga].id = $r.ga;
    this.bpi[$r.Ce] = Vv(68, 68, 0, ΔΔ[rt.Zu], 3);
    this.bpi[$r.Ce].id = $r.Ce;
    this.bpi[$r.ze] = Vv(68, 68, 0, ΔΔ[rt.tf], yr);
    this.bpi[$r.ze].id = $r.ze;
    this.bpi[$r.xe] = Vv(68, 68, 0, ΔΔ[rt.nf], 3);
    this.bpi[$r.xe].id = $r.xe;
    this.bpi[$r.ca] = Vv(68, 68, 0, ΔΔ[rt.mf], 3);
    this.bpi[$r.ca].id = $r.ca;
    this.bpi[$r.HD] = Vv(68, 68, 0, ΔΔ[rt.Gf], 3);
    this.bpi[$r.HD].id = $r.HD;
    this.bpi[$r.da] = Vv(68, 68, 0, ΔΔ[rt.ff], er);
    this.bpi[$r.da].id = $r.da;
    this.bpi[$r.ma] = Vv(68, 68, 0, ΔΔ[rt.lf], Sn);
    this.bpi[$r.ma].id = $r.ma;
    this.bpi[$r.ua] = Vv(68, 68, 0, ΔΔ[rt.Ef], 3);
    this.bpi[$r.ua].id = $r.ua;
    this.bpi[$r.Zi] = Vv(68, 68, 0, ΔΔ[rt._f], jh);
    this.bpi[$r.Zi].id = $r.Zi;
    this.bpi[$r.pa] = Vv(68, 68, 0, ΔΔ[rt.Ff], uc);
    this.bpi[$r.pa].id = $r.pa;
    this.bpi[$r.sE] = Vv(68, 68, 0, ΔΔ[rt.jf], 3);
    this.bpi[$r.sE].id = $r.sE;
    this.bpi[$r.ZD] = Vv(68, 68, 0, ΔΔ[rt.lp], fa);
    this.bpi[$r.ZD].id = $r.ZD;
    this.bpi[$r.$D] = Vv(68, 68, 0, ΔΔ[rt.zp], oe);
    this.bpi[$r.$D].id = $r.$D;
    this.bpi[$r.Le] = Vv(68, 68, 0, ΔΔ[rt.Qp], 3);
    this.bpi[$r.Le].id = $r.Le;
    this.bpi[$r.We] = Vv(68, 68, 0, ΔΔ[rt.Mm], 3);
    this.bpi[$r.We].id = $r.We;
    this.bpi[$r.os] = Vv(68, 68, 0, ΔΔ[rt.Jm], 3);
    this.bpi[$r.os].id = $r.os;
    this.bpi[$r.rs] = Vv(68, 68, 0, ΔΔ[rt.Kp], Wc);
    this.bpi[$r.rs].id = $r.rs;
    this.bpi[$r.gs] = Vv(68, 68, 0, ΔΔ[rt.Km], Xg);
    this.bpi[$r.gs].id = $r.gs;
    this.bpi[$r.hs] = Vv(68, 68, 0, ΔΔ[rt.Vp], 3);
    this.bpi[$r.hs].id = $r.hs;
    this.bpi[$r.an] = Vv(68, 68, 0, ΔΔ[rt.il], 3);
    this.bpi[$r.an].id = $r.an;
    this.bpi[$r.rE] = Vv(68, 68, 0, ΔΔ[rt.el], jh);
    this.bpi[$r.rE].id = $r.rE;
    this.bpi[$r.oE] = Vv(68, 68, 0, ΔΔ[rt.rl], oe);
    this.bpi[$r.oE].id = $r.oE;
    this.bpi[$r.sn] = Vv(68, 68, 0, ΔΔ[rt.al], 3);
    this.bpi[$r.sn].id = $r.sn;
    this.bpi[$r.hE] = Vv(68, 68, 0, ΔΔ[rt.gl], E);
    this.bpi[$r.hE].id = $r.hE;
    this.bpi[$r.rn] = Vv(68, 68, 0, ΔΔ[rt.hl], xa);
    this.bpi[$r.rn].id = $r.rn;
    this.bpi[$r.dn] = Vv(68, 68, 0, ΔΔ[rt.ml], Qe);
    this.bpi[$r.dn].id = $r.dn;
    this.bpi[$r.mn] = Vv(68, 68, 0, ΔΔ[rt.ll], mq);
    this.bpi[$r.mn].id = $r.mn;
    this.bpi[$r.gE] = Vv(68, 68, 0, ΔΔ[rt.bl], 3);
    this.bpi[$r.gE].id = $r.gE;
    this.bpi[$r.cE] = Vv(68, 68, 0, ΔΔ[rt.vl], Xg);
    this.bpi[$r.cE].id = $r.cE;
    this.bpi[$r.fn] = Vv(68, 68, 0, ΔΔ[rt.Al], 3);
    this.bpi[$r.fn].id = $r.fn;
    this.bpi[$r.un] = Vv(68, 68, 0, ΔΔ[rt.Bl], 3);
    this.bpi[$r.un].id = $r.un;
    this.bpi[$r.iE] = Vv(68, 68, 0, ΔΔ[rt.xl], oe);
    this.bpi[$r.iE].id = $r.iE;
    this.bpi[$r.tE] = Vv(68, 68, 0, ΔΔ[rt.Ql], mq);
    this.bpi[$r.tE].id = $r.tE;
    this.bpi[$r.eE] = Vv(68, 68, 0, ΔΔ[rt._l], Qe);
    this.bpi[$r.eE].id = $r.eE;
    this.bpi[$r.ss] = Vv(68, 68, 0, ΔΔ[rt.Hl], Ie);
    this.bpi[$r.ss].id = $r.ss;
    this.bpi[$r.jD] = Vv(68, 68, 0, ΔΔ[rt.$l], 3);
    this.bpi[$r.jD].id = $r.jD;
    this.bpi[$r.ds] = Vv(68, 68, 0, ΔΔ[rt.ab], 3);
    this.bpi[$r.ds].id = $r.ds;
    this.bpi[$r.us] = Vv(68, 68, 0, ΔΔ[rt.Pb], xa);
    this.bpi[$r.us].id = $r.us;
    this.bpi[$r.RD] = Vv(68, 68, 0, ΔΔ[rt.Cb], Lc);
    this.bpi[$r.RD].id = $r.RD;
    this.bpi[$r.ps] = Vv(68, 68, 0, ΔΔ[rt.Ib], Wc);
    this.bpi[$r.ps].id = $r.ps;
    this.bpi[$r.LD] = Vv(68, 68, 0, ΔΔ[rt.Rb], 3);
    this.bpi[$r.LD].id = $r.LD;
    this.bpi[$r.bs] = Vv(68, 68, 0, ΔΔ[rt.Wb], 3);
    this.bpi[$r.bs].id = $r.bs;
    this.bpi[$r.qD] = Vv(68, 68, 0, ΔΔ[rt.Ky], 3);
    this.bpi[$r.qD].id = $r.qD;
    this.bpi[$r.Qs] = Vv(68, 68, 0, ΔΔ[rt.gk], 3);
    this.bpi[$r.Qs].id = $r.Qs;
    this.bpi[$r.GD] = Vv(68, 68, 0, ΔΔ[rt.Ly], 3);
    this.bpi[$r.GD].id = $r.GD;
    this.bpi[$r.zs] = Vv(68, 68, 0, ΔΔ[rt.Hy], 3);
    this.bpi[$r.zs].id = $r.zs;
    this.bpi[$r.WD] = Vv(68, 68, 0, ΔΔ[rt.ek], er);
    this.bpi[$r.WD].id = $r.WD;
    this.bpi[$r.Is] = Vv(68, 68, 0, ΔΔ[rt.hk], 3);
    this.bpi[$r.Is].id = $r.Is;
    this.bpi[$r.ND] = Vv(68, 68, 0, ΔΔ[rt.vk], mq);
    this.bpi[$r.ND].id = $r.ND;
    this.bpi[$r.gr] = Vv(68, 68, 0, ΔΔ[rt.Mk], 3);
    this.bpi[$r.gr].id = $r.gr;
    this.bpi[$r.Ae] = Vv(68, 68, 0, ΔΔ[rt.vv], 3);
    this.bpi[$r.Ae].id = $r.Ae;
    this.bpi[$r.we] = Vv(68, 68, 0, ΔΔ[rt.kv], Sr);
    this.bpi[$r.we].id = $r.we;
    this.bpi[$r.Ot] = Vv(68, 68, 0, ΔΔ[rt.vg], 3);
    this.bpi[$r.Ot].id = $r.Ot;
    this.bpi[$r.Xt] = Vv(68, 68, 0, ΔΔ[rt.mv], Sr);
    this.bpi[$r.Xt].id = $r.Xt;
    this.bpi[$r.Zs] = Vv(68, 68, 0, ΔΔ[rt.Pv], 3);
    this.bpi[$r.Zs].id = $r.Zs;
    this.bpi[$r.Zt] = Vv(68, 68, 0, ΔΔ[rt.Tv], 3);
    this.bpi[$r.Zt].id = $r.Zt;
    this.bpi[$r.$s] = Vv(68, 68, 0, ΔΔ[rt.Nv], xa);
    this.bpi[$r.$s].id = $r.$s;
    this.bpi[$r.As] = Vv(68, 68, 0, ΔΔ[rt.Uv], Xg);
    this.bpi[$r.As].id = $r.As;
    this.bpi[$r.qe] = Vv(68, 68, 0, ΔΔ[rt.Jv], Xg);
    this.bpi[$r.qe].id = $r.qe;
    this.bpi[$r.Bs] = Vv(68, 68, 0, ΔΔ[rt.hv], 3);
    this.bpi[$r.Bs].id = $r.Bs;
    this.bpi[$r.ws] = Vv(68, 68, 0, ΔΔ[rt.iv], nh);
    this.bpi[$r.ws].id = $r.ws;
    this.bpi[$r.dE] = Vv(68, 68, 0, ΔΔ[rt.sv], 3);
    this.bpi[$r.dE].id = $r.dE;
    this.uli = [];
    for (k = Jj; k < 250; k++) {
      this.uli[k] = Vv(0, 0, 0, ΔΔ[rt.Ph]);
    }
    this.oEi = [];
    this.oEi[$r.Ft] = Vv(60, 60, 0, ΔΔ[rt._r], xa);
    this.oEi[$r.Ft].id = $r.Ft;
    this.oEi[$r.Pt] = Vv(60, 60, 0, ΔΔ[rt.Io], 3);
    this.oEi[$r.Pt].id = $r.Pt;
    this.oEi[$r.nE] = Vv(60, 60, 0, ΔΔ[rt.Po], 3);
    this.oEi[$r.nE].id = $r.nE;
    this.oEi[$r.nE].info.ME[2] = this.oEi[$r.nE].info.ME[Ea];
    this.oEi[$r.aE] = Vv(60, 60, 0, ΔΔ[rt.To], Sr);
    this.oEi[$r.aE].id = $r.aE;
    this.oEi[$r.aE].info.ME[2] = this.oEi[$r.aE].info.ME[0];
    this.oEi[$r.Rn] = Vv(60, 60, 0, ΔΔ[rt.Kr], nh);
    this.oEi[$r.Rn].id = $r.Rn;
    this.oEi[$r.Bk] = Vv(60, 60, 0, ΔΔ[rt.BM], Sr);
    this.oEi[$r.Bk].id = $r.Bk;
    this.oEi[$r.Ln] = Vv(60, 60, 0, ΔΔ[rt.bo], 3);
    this.oEi[$r.Ln].id = $r.Ln;
    this.oEi[$r.Ln].info.ME[2] = this.oEi[$r.Ln].info.ME[0];
    this.oEi[$r.Gn] = Vv(60, 60, 0, ΔΔ[rt.vo], uc);
    this.oEi[$r.Gn].id = $r.Gn;
    this.oEi[$r.Gn].info.ME[2] = this.oEi[$r.Gn].info.ME[du];
    this.oEi[$r.jt] = Vv(60, 60, 0, ΔΔ[rt.Qr], 3);
    this.oEi[$r.jt].id = $r.jt;
    this.oEi[$r.Rt] = Vv(60, 60, 0, ΔΔ[rt.lo], 3);
    this.oEi[$r.Rt].id = $r.Rt;
    this.oEi[$r.Lt] = Vv(60, 60, 0, ΔΔ[rt.mo], 3);
    this.oEi[$r.Lt].id = $r.Lt;
    this.oEi[$r.je] = Vv(60, 60, 0, ΔΔ[rt.kb], 3);
    this.oEi[$r.je].id = $r.je;
    this.oEi[$r.Gt] = Vv(60, 60, 0, ΔΔ[rt.uo], 3);
    this.oEi[$r.Gt].id = $r.Gt;
    this.oEi[$r.oo] = Vv(60, 60, 0, ΔΔ[rt.xo], 3);
    this.oEi[$r.oo].id = $r.oo;
    this.oEi[$r.Wn] = Vv(60, 60, 0, ΔΔ[rt.Qo], nh);
    this.oEi[$r.Wn].id = $r.Wn;
    this.oEi[$r.wr] = Vv(60, 60, 0, ΔΔ[rt.So], 3);
    this.oEi[$r.wr].id = $r.wr;
    this.oEi[$r.Ta] = Vv(60, 60, 0, ΔΔ[rt.jo], 3);
    this.oEi[$r.Ta].id = $r.Ta;
    this.oEi[$r.Fa] = Vv(60, 60, 0, ΔΔ[rt.Lo], 3);
    this.oEi[$r.Fa].id = $r.Fa;
    this.oEi[$r.Wt] = Vv(60, 60, 0, ΔΔ[rt._o], Sr);
    this.oEi[$r.Wt].id = $r.Wt;
    this.oEi[$r.Un] = Vv(60, 60, 0, ΔΔ[rt.No], jh);
    this.oEi[$r.Un].id = $r.Un;
    this.oEi[$r.Hn] = Vv(60, 60, 0, ΔΔ[rt.ko], nh);
    this.oEi[$r.Hn].id = $r.Hn;
    this.oEi[$r.PD] = Vv(60, 60, 0, ΔΔ[rt.Jo], jh);
    this.oEi[$r.PD].id = $r.PD;
    this.oEi[$r.vs] = Vv(60, 60, 0, ΔΔ[rt.Mo], 3);
    this.oEi[$r.vs].id = $r.vs;
    this.oEi[$r.Pa] = Vv(60, 60, 0, ΔΔ[rt.Do], 3);
    this.oEi[$r.Pa].id = $r.Pa;
    this.oEi[$r.Pa].info.ME[2] = this.oEi[$r.Pa].info.ME[so];
    this.oEi[$r.ja] = Vv(60, 60, 0, ΔΔ[rt.Ko], 3);
    this.oEi[$r.ja].id = $r.ja;
    this.oEi[$r.Ra] = Vv(60, 60, 0, ΔΔ[rt.Xo], pg);
    this.oEi[$r.Ra].id = $r.Ra;
    this.oEi[$r.La] = Vv(60, 60, 0, ΔΔ[rt.Vo], fa);
    this.oEi[$r.La].id = $r.La;
    this.oEi[$r.UD] = Vv(60, 60, 0, ΔΔ[rt.th], 3);
    this.oEi[$r.UD].id = $r.UD;
    this.oEi[$r.qa] = Vv(60, 60, 0, ΔΔ[rt.nh], xa);
    this.oEi[$r.qa].id = $r.qa;
    this.oEi[$r.Wa] = Vv(60, 60, 0, ΔΔ[rt.Qh], Qe);
    this.oEi[$r.Wa].id = $r.Wa;
    this.oEi[$r.Na] = Vv(60, 60, 0, ΔΔ[rt.Sh], 3);
    this.oEi[$r.Na].id = $r.Na;
    this.oEi[$r.Ha] = Vv(60, 60, 0, ΔΔ[rt._h], uc);
    this.oEi[$r.Ha].id = $r.Ha;
    this.oEi[$r.ge] = Vv(60, 60, 0, ΔΔ[rt.og], 3);
    this.oEi[$r.ge].id = $r.ge;
    this.oEi[$r.Ht] = Vv(60, 60, 0, ΔΔ[rt.Rh], er);
    this.oEi[$r.Ht].id = $r.Ht;
    this.oEi[$r.OD] = Vv(60, 60, 0, ΔΔ[rt.qh], 3);
    this.oEi[$r.OD].id = $r.OD;
    this.oEi[$r.YD] = Vv(60, 60, 0, ΔΔ[rt.Hh], 3);
    this.oEi[$r.YD].id = $r.YD;
    this.oEi[$r.JD] = Vv(60, 60, 0, ΔΔ[rt.Yh], 3);
    this.oEi[$r.JD].id = $r.JD;
    this.oEi[$r.Tt] = Vv(60, 60, 0, ΔΔ[rt.jh], 3);
    this.oEi[$r.Tt].id = $r.Tt;
    this.oEi[$r.Tt].info.ME[yo] = this.oEi[$r.Tt].info.ME[Vd];
    this.oEi[$r.mr] = Vv(60, 60, 0, ΔΔ[rt.IM], mq);
    this.oEi[$r.mr].id = $r.mr;
    this.oEi[$r.mr].info.ME[2] = this.oEi[$r.mr].info.ME[Ka];
    this.oEi[$r.Ja] = Vv(60, 60, 0, ΔΔ[rt.hg], fa);
    this.oEi[$r.Ja].id = $r.Ja;
    this.oEi[$r.Ja].info.ME[2] = this.oEi[$r.Ja].info.ME[Nf];
    this.oEi[$r.Us] = Vv(60, 60, 0, ΔΔ[rt.lA], yr);
    this.oEi[$r.Us].id = $r.Us;
    this.oEi[$r.rr] = Vv(60, 60, 0, ΔΔ[rt.vA], 3);
    this.oEi[$r.rr].id = $r.rr;
    this.oEi[$r.cr] = Vv(60, 60, 0, ΔΔ[rt.kA], 3);
    this.oEi[$r.cr].id = $r.cr;
    this.oEi[$r.dr] = Vv(60, 60, 0, ΔΔ[rt.EM], 3);
    this.oEi[$r.dr].id = $r.dr;
    this.oEi[$r.Ht] = Vv(60, 60, 0, ΔΔ[rt.Rh], nh);
    this.oEi[$r.Ht].id = $r.Ht;
    this.oEi[$r.Ut] = Vv(60, 60, 0, ΔΔ[rt.Xh], jh);
    this.oEi[$r.Ut].id = $r.Ut;
    this.oEi[$r.Ot] = Vv(60, 60, 0, ΔΔ[rt.lg], er);
    this.oEi[$r.Ot].id = $r.Ot;
    this.oEi[$r.Yt] = Vv(60, 60, 0, ΔΔ[rt.cg], oe);
    this.oEi[$r.Yt].id = $r.Yt;
    this.oEi[$r.Jt] = Vv(60, 60, 0, ΔΔ[rt.ug], 3);
    this.oEi[$r.Jt].id = $r.Jt;
    this.oEi[$r.Kt] = Vv(60, 60, 0, ΔΔ[rt.yg], Xg);
    this.oEi[$r.Kt].id = $r.Kt;
    this.oEi[$r.Xt] = Vv(60, 60, 0, ΔΔ[rt.dv], E);
    this.oEi[$r.Xt].id = $r.Xt;
    this.oEi[$r.TD] = Vv(60, 60, 0, ΔΔ[rt.Mg], Ie);
    this.oEi[$r.TD].id = $r.TD;
    this.oEi[$r.ne] = Vv(60, 60, 0, ΔΔ[rt.Pg], Xg);
    this.oEi[$r.ne].id = $r.ne;
    this.oEi[$r.ae] = Vv(60, 60, 0, ΔΔ[rt.Rg], 3);
    this.oEi[$r.ae].id = $r.ae;
    this.oEi[$r.pn] = Vv(60, 60, 0, ΔΔ[rt.WB], 3);
    this.oEi[$r.pn].id = $r.pn;
    this.oEi[$r.ln] = Vv(60, 60, 0, ΔΔ[rt.UB], mq);
    this.oEi[$r.ln].id = $r.ln;
    this.oEi[$r.hn] = Vv(60, 60, 0, ΔΔ[rt.rM], 3);
    this.oEi[$r.hn].id = $r.hn;
    this.oEi[$r.gn] = Vv(60, 60, 0, ΔΔ[rt.gM], 3);
    this.oEi[$r.gn].id = $r.gn;
    this.oEi[$r.He] = Vv(60, 60, 0, ΔΔ[rt.Cm], Qe);
    this.oEi[$r.He].id = $r.He;
    this.oEi[$r.xn] = Vv(60, 60, 0, ΔΔ[rt.TM], 3);
    this.oEi[$r.xn].id = $r.xn;
    this.oEi[$r.Ve] = Vv(60, 60, 0, ΔΔ[rt.iD], E);
    this.oEi[$r.Ve].id = $r.Ve;
    this.oEi[$r.Ue] = Vv(60, 60, 0, ΔΔ[rt.Qm], uc);
    this.oEi[$r.Ue].id = $r.Ue;
    this.oEi[$r.Qn] = Vv(60, 60, 0, ΔΔ[rt.LM], 3);
    this.oEi[$r.Qn].id = $r.Qn;
    this.oEi[$r.Ze] = Vv(60, 60, 0, ΔΔ[rt.nD], Wc);
    this.oEi[$r.Ze].id = $r.Ze;
    this.oEi[$r.Oe] = Vv(60, 60, 0, ΔΔ[rt._m], 3);
    this.oEi[$r.Oe].id = $r.Oe;
    this.oEi[$r.Sn] = Vv(60, 60, 0, ΔΔ[rt.WM], 3);
    this.oEi[$r.Sn].id = $r.Sn;
    this.oEi[$r.$e] = Vv(60, 60, 0, ΔΔ[rt.rD], 3);
    this.oEi[$r.$e].id = $r.$e;
    this.oEi[$r.Ye] = Vv(60, 60, 0, ΔΔ[rt.Tm], 3);
    this.oEi[$r.Ye].id = $r.Ye;
    this.oEi[$r.In] = Vv(60, 60, 0, ΔΔ[rt.UM], 3);
    this.oEi[$r.In].id = $r.In;
    this.oEi[$r.tn] = Vv(60, 60, 0, ΔΔ[rt.gD], Ie);
    this.oEi[$r.tn].id = $r.tn;
    this.oEi[$r.Je] = Vv(60, 60, 0, ΔΔ[rt.Lm], fa);
    this.oEi[$r.Je].id = $r.Je;
    this.oEi[$r._n] = Vv(60, 60, 0, ΔΔ[rt.JM], E);
    this.oEi[$r._n].id = $r._n;
    this.oEi[$r.en] = Vv(60, 60, 0, ΔΔ[rt.mD], pg);
    this.oEi[$r.en].id = $r.en;
    this.oEi[$r.Ke] = Vv(60, 60, 0, ΔΔ[rt.Wm], 3);
    this.oEi[$r.Ke].id = $r.Ke;
    this.oEi[$r.Fn] = Vv(60, 60, 0, ΔΔ[rt.VM], 3);
    this.oEi[$r.Fn].id = $r.Fn;
    this.oEi[$r.nn] = Vv(60, 60, 0, ΔΔ[rt.pD], 3);
    this.oEi[$r.nn].id = $r.nn;
    this.oEi[$r.Xe] = Vv(60, 60, 0, ΔΔ[rt.Um], on);
    this.oEi[$r.Xe].id = $r.Xe;
    this.oEi[$r.Pn] = Vv(60, 60, 0, ΔΔ[rt.iB], pg);
    this.oEi[$r.Pn].id = $r.Pn;
    this.oEi[$r.wn] = Vv(60, 60, 0, ΔΔ[rt.vD], 3);
    this.oEi[$r.wn].id = $r.wn;
    this.oEi[$r.Mn] = Vv(60, 60, 0, ΔΔ[rt.AD], Ie);
    this.oEi[$r.Mn].id = $r.Mn;
    this.oEi[$r.Bn] = Vv(60, 60, 0, ΔΔ[rt.BD], oe);
    this.oEi[$r.Bn].id = $r.Bn;
    this.oEi[$r.Dn] = Vv(60, 60, 0, ΔΔ[rt.CD], Lc);
    this.oEi[$r.Dn].id = $r.Dn;
    this.oEi[$r.En] = Vv(60, 60, 0, ΔΔ[rt.QD], 3);
    this.oEi[$r.En].id = $r.En;
    this.oEi[$r.Cn] = Vv(60, 60, 0, ΔΔ[rt._D], 3);
    this.oEi[$r.Cn].id = $r.Cn;
    this.oEi[$r.Re] = Vv(60, 60, 0, ΔΔ[rt.lb], 3);
    this.oEi[$r.Re].id = $r.Re;
    this.oEi[$r.se] = Vv(60, 60, 0, ΔΔ[rt.Hg], Ie);
    this.oEi[$r.se].id = $r.se;
    this.oEi[$r.re] = Vv(60, 60, 0, ΔΔ[rt.Yg], on);
    this.oEi[$r.re].id = $r.re;
    this.oEi[$r.oe] = Vv(60, 60, 0, ΔΔ[rt.Xg], 3);
    this.oEi[$r.oe].id = $r.oe;
    this.oEi[$r.he] = Vv(60, 60, 0, ΔΔ[rt.$g], 3);
    this.oEi[$r.he].id = $r.he;
    this.oEi[$r.Jn] = Vv(60, 60, 0, ΔΔ[rt.nc], 3);
    this.oEi[$r.Jn].id = $r.Jn;
    this.oEi[$r.Jn].info.ME[2] = this.oEi[$r.Jn].info.ME[0];
    this.oEi[$r.ge] = Vv(60, 60, 0, ΔΔ[rt.og], Wc);
    this.oEi[$r.ge].id = $r.ge;
    this.oEi[$r.Kn] = Vv(60, 60, 0, ΔΔ[rt._g], E);
    this.oEi[$r.Kn].id = $r.Kn;
    this.oEi[$r.Kn].info.ME[Tg] = this.oEi[$r.Kn].info.ME[0];
    this.oEi[$r.ce] = Vv(60, 60, 0, ΔΔ[rt.vc], 3);
    this.oEi[$r.ce].id = $r.ce;
    this.oEi[$r.Nt] = Vv(60, 60, 0, ΔΔ[rt.Vb], Xg);
    this.oEi[$r.Nt].id = $r.Nt;
    this.oEi[$r.de] = Vv(60, 60, 0, ΔΔ[rt.Ac], oe);
    this.oEi[$r.de].id = $r.de;
    this.oEi[$r.me] = Vv(60, 60, 0, ΔΔ[rt.Zk], 3);
    this.oEi[$r.me].id = $r.me;
    this.oEi[$r.ue] = Vv(60, 60, 0, ΔΔ[rt.Pc], mq);
    this.oEi[$r.ue].id = $r.ue;
    this.oEi[$r.pe] = Vv(60, 60, 0, ΔΔ[rt.Gc], 3);
    this.oEi[$r.pe].id = $r.pe;
    this.oEi[$r.le] = Vv(60, 60, 0, ΔΔ[rt.Nc], 3);
    this.oEi[$r.le].id = $r.le;
    this.oEi[$r.be] = Vv(60, 60, 0, ΔΔ[rt.Oc], 3);
    this.oEi[$r.be].id = $r.be;
    this.oEi[$r.ve] = Vv(60, 60, 0, ΔΔ[rt.Kc], 3);
    this.oEi[$r.ve].id = $r.ve;
    this.oEi[$r.ye] = Vv(60, 60, 0, ΔΔ[rt.Zc], jh);
    this.oEi[$r.ye].id = $r.ye;
    this.oEi[$r.Xn] = Vv(60, 60, 0, ΔΔ[rt.ed], nh);
    this.oEi[$r.Xn].id = $r.Xn;
    this.oEi[$r.Vn] = Vv(60, 60, 0, ΔΔ[rt.sd], nh);
    this.oEi[$r.Vn].id = $r.Vn;
    this.oEi[$r.KD] = Vv(60, 60, 0, ΔΔ[rt.gd], 3);
    this.oEi[$r.KD].id = $r.KD;
    this.oEi[$r.ke] = Vv(60, 60, 0, ΔΔ[rt.ud], E);
    this.oEi[$r.ke].id = $r.ke;
    this.oEi[$r.ka] = Vv(60, 60, 0, ΔΔ[rt.ld], Vr);
    this.oEi[$r.ka].id = $r.ka;
    this.oEi[$r.ka].info.ME[wh] = this.oEi[$r.ka].info.ME[qh];
    this.oEi[$r.lE] = Vv(60, 60, 0, ΔΔ[rt.JB], 3);
    this.oEi[$r.lE].id = $r.lE;
    this.oEi[$r.lE].info.ME[2] = this.oEi[$r.lE].info.ME[0];
    this.oEi[$r.Aa] = Vv(60, 60, 0, ΔΔ[rt.Md], E);
    this.oEi[$r.Aa].id = $r.Aa;
    this.oEi[$r.Aa].info.ME[2] = this.oEi[$r.Aa].info.ME[Gc];
    this.oEi[$r.wa] = Vv(60, 60, 0, ΔΔ[rt.zd], yr);
    this.oEi[$r.wa].id = $r.wa;
    this.oEi[$r.wa].info.ME[2] = this.oEi[$r.wa].info.ME[0];
    this.oEi[$r.Ma] = Vv(60, 60, 0, ΔΔ[rt.Sd], Ie);
    this.oEi[$r.Ma].id = $r.Ma;
    this.oEi[$r.Ba] = Vv(60, 60, 0, ΔΔ[rt._d], Qe);
    this.oEi[$r.Ba].id = $r.Ba;
    this.oEi[$r.Da] = Vv(60, 60, 0, ΔΔ[rt.Ld], 3);
    this.oEi[$r.Da].id = $r.Da;
    this.oEi[$r.Ia] = Vv(60, 60, 0, ΔΔ[rt.Wd], 3);
    this.oEi[$r.Ia].id = $r.Ia;
    this.oEi[$r._a] = Vv(60, 60, 0, ΔΔ[rt.gm], 3);
    this.oEi[$r._a].id = $r._a;
    this.oEi[$r.Me] = Vv(60, 60, 0, ΔΔ[rt.Vd], Lc);
    this.oEi[$r.Me].id = $r.Me;
    this.oEi[$r.De] = Vv(60, 60, 0, ΔΔ[rt.rm], fa);
    this.oEi[$r.De].id = $r.De;
    this.oEi[$r.$n] = Vv(60, 60, 0, ΔΔ[rt.gu], uc);
    this.oEi[$r.$n].id = $r.$n;
    this.oEi[$r.Hs] = Vv(60, 60, 0, ΔΔ[rt.VB], Lc);
    this.oEi[$r.Hs].id = $r.Hs;
    this.oEi[$r.Os] = Vv(60, 60, 0, ΔΔ[rt.gA], Sn);
    this.oEi[$r.Os].id = $r.Os;
    this.oEi[$r.Ys] = Vv(60, 60, 0, ΔΔ[rt.mA], xa);
    this.oEi[$r.Ys].id = $r.Ys;
    this.oEi[$r.sr] = Vv(60, 60, 0, ΔΔ[rt.qw], Xg);
    this.oEi[$r.sr].id = $r.sr;
    this.oEi[$r.bn] = Vv(60, 60, 0, ΔΔ[rt.CA], Qe);
    this.oEi[$r.bn].id = $r.bn;
    this.oEi[$r.Xs] = Vv(60, 60, 0, ΔΔ[rt.QA], 3);
    this.oEi[$r.Xs].id = $r.Xs;
    this.oEi[$r.ir] = Vv(60, 60, 0, ΔΔ[rt.sB], 3);
    this.oEi[$r.ir].id = $r.ir;
    this.oEi[$r.tr] = Vv(60, 60, 0, ΔΔ[rt.sw], Lc);
    this.oEi[$r.tr].id = $r.tr;
    this.oEi[$r.yr] = Vv(60, 60, 0, ΔΔ[rt.LB], jh);
    this.oEi[$r.yr].id = $r.yr;
    this.oEi[$r.er] = Vv(60, 60, 0, ΔΔ[rt.kw], 3);
    this.oEi[$r.er].id = $r.er;
    this.oEi[$r.ar] = Vv(60, 60, 0, ΔΔ[rt.Fw], Lc);
    this.oEi[$r.ar].id = $r.ar;
    this.oEi[$r.ia] = Vv(60, 60, 0, ΔΔ[rt.uu], 3);
    this.oEi[$r.ia].id = $r.ia;
    this.oEi[$r.ia].info.ME[mj] = this.oEi[$r.ia].info.ME[0];
    this.oEi[$r.ta] = Vv(60, 60, 0, ΔΔ[rt.bu], 3);
    this.oEi[$r.ta].id = $r.ta;
    this.oEi[$r.ea] = Vv(60, 60, 0, ΔΔ[rt.lu], 3);
    this.oEi[$r.ea].id = $r.ea;
    this.oEi[$r.Ee] = Vv(60, 60, 0, ΔΔ[rt.ku], nh);
    this.oEi[$r.Ee].id = $r.Ee;
    this.oEi[$r.Qe] = Vv(60, 60, 0, ΔΔ[rt.Xf], 3);
    this.oEi[$r.Qe].id = $r.Qe;
    this.oEi[$r.Se] = Vv(60, 60, 0, ΔΔ[rt.$f], Lc);
    this.oEi[$r.Se].id = $r.Se;
    this.oEi[$r.Ie] = Vv(60, 60, 0, ΔΔ[rt.ep], Xg);
    this.oEi[$r.Ie].id = $r.Ie;
    this.oEi[$r.Pe] = Vv(60, 60, 0, ΔΔ[rt.rp], fa);
    this.oEi[$r.Pe].id = $r.Pe;
    this.oEi[$r.na] = Vv(60, 60, 0, ΔΔ[rt.zu], 3);
    this.oEi[$r.na].id = $r.na;
    this.oEi[$r.na].info.ME[2] = this.oEi[$r.na].info.ME[Vd];
    this.oEi[$r.aa] = Vv(60, 60, 0, ΔΔ[rt.Qu], 3);
    this.oEi[$r.aa].id = $r.aa;
    this.oEi[$r.sa] = Vv(60, 60, 0, ΔΔ[rt._u], 3);
    this.oEi[$r.sa].id = $r.sa;
    this.oEi[$r.sa].info.ME[Te] = this.oEi[$r.sa].info.ME[0];
    this.oEi[$r.ra] = Vv(60, 60, 0, ΔΔ[rt.Pu], 3);
    this.oEi[$r.ra].id = $r.ra;
    this.oEi[$r.oa] = Vv(60, 60, 0, ΔΔ[rt.Ru], fa);
    this.oEi[$r.oa].id = $r.oa;
    this.oEi[$r.ha] = Vv(60, 60, 0, ΔΔ[rt.Nu], 3);
    this.oEi[$r.ha].id = $r.ha;
    this.oEi[$r.ha].info.ME[Tg] = this.oEi[$r.ha].info.ME[so];
    this.oEi[$r.ga] = Vv(60, 60, 0, ΔΔ[rt.Ju], 3);
    this.oEi[$r.ga].id = $r.ga;
    this.oEi[$r.Ce] = Vv(60, 60, 0, ΔΔ[rt.Xu], 3);
    this.oEi[$r.Ce].id = $r.Ce;
    this.oEi[$r.ze] = Vv(60, 60, 0, ΔΔ[rt.$u], Wc);
    this.oEi[$r.ze].id = $r.ze;
    this.oEi[$r.xe] = Vv(60, 60, 0, ΔΔ[rt.ef], 3);
    this.oEi[$r.xe].id = $r.xe;
    this.oEi[$r.ca] = Vv(60, 60, 0, ΔΔ[rt.cf], 3);
    this.oEi[$r.ca].id = $r.ca;
    this.oEi[$r.HD] = Vv(60, 60, 0, ΔΔ[rt.ba], E);
    this.oEi[$r.HD].id = $r.HD;
    this.oEi[$r.da] = Vv(60, 60, 0, ΔΔ[rt.uf], jh);
    this.oEi[$r.da].id = $r.da;
    this.oEi[$r.ma] = Vv(60, 60, 0, ΔΔ[rt.pf], 3);
    this.oEi[$r.ma].id = $r.ma;
    this.oEi[$r.ua] = Vv(60, 60, 0, ΔΔ[rt.Df], Xg);
    this.oEi[$r.ua].id = $r.ua;
    this.oEi[$r.ua].info.ME[2] = this.oEi[$r.ua].info.ME[0];
    this.oEi[$r.Zi] = Vv(60, 60, 0, ΔΔ[rt.fa], 3);
    this.oEi[$r.Zi].id = $r.Zi;
    this.oEi[$r.Zi].info.ME[Yh] = this.oEi[$r.Zi].info.ME[Ea];
    this.oEi[$r.pa] = Vv(60, 60, 0, ΔΔ[rt.Tf], 3);
    this.oEi[$r.pa].id = $r.pa;
    this.oEi[$r.sE] = Vv(60, 60, 0, ΔΔ[rt.la], er);
    this.oEi[$r.sE].id = $r.sE;
    this.oEi[$r.sE].info.ME[2] = this.oEi[$r.sE].info.ME[Ng];
    this.oEi[$r.ZD] = Vv(60, 60, 0, ΔΔ[rt.fp], 3);
    this.oEi[$r.ZD].id = $r.ZD;
    this.oEi[$r.$D] = Vv(60, 60, 0, ΔΔ[rt.ya], 3);
    this.oEi[$r.$D].id = $r.$D;
    this.oEi[$r.Le] = Vv(60, 60, 0, ΔΔ[rt.xp], Ie);
    this.oEi[$r.Le].id = $r.Le;
    this.oEi[$r.We] = Vv(60, 60, 0, ΔΔ[rt.Am], 3);
    this.oEi[$r.We].id = $r.We;
    this.oEi[$r.os] = Vv(60, 60, 0, ΔΔ[rt.Mr], 3);
    this.oEi[$r.os].id = $r.os;
    this.oEi[$r.os].info.ME[mj] = this.oEi[$r.os].info.ME[0];
    this.oEi[$r.rs] = Vv(60, 60, 0, ΔΔ[rt.Jp], pg);
    this.oEi[$r.rs].id = $r.rs;
    this.oEi[$r.rs].info.ME[2] = this.oEi[$r.rs].info.ME[Ng];
    this.oEi[$r.Vt] = Vv(60, 60, 0, ΔΔ[rt.fv], Ie);
    this.oEi[$r.Vt].id = $r.Vt;
    this.oEi[$r.Ne] = Vv(60, 60, 0, ΔΔ[rt.Bm], 3);
    this.oEi[$r.Ne].id = $r.Ne;
    this.oEi[$r.gs] = Vv(60, 60, 0, ΔΔ[rt.Br], nh);
    this.oEi[$r.gs].id = $r.gs;
    this.oEi[$r.gs].info.ME[2] = this.oEi[$r.gs].info.ME[bd];
    this.oEi[$r.hs] = Vv(60, 60, 0, ΔΔ[rt.Xp], 3);
    this.oEi[$r.hs].id = $r.hs;
    this.oEi[$r.hs].info.ME[2] = this.oEi[$r.hs].info.ME[0];
    this.oEi[$r.an] = Vv(60, 60, 0, ΔΔ[rt.$p], yr);
    this.oEi[$r.an].id = $r.an;
    this.oEi[$r.rE] = Vv(60, 60, 0, ΔΔ[rt.Xa], 3);
    this.oEi[$r.rE].id = $r.rE;
    this.oEi[$r.rE].info.ME[yo] = this.oEi[$r.rE].info.ME[ke];
    this.oEi[$r.oE] = Vv(60, 60, 0, ΔΔ[rt.Va], yr);
    this.oEi[$r.oE].id = $r.oE;
    this.oEi[$r.oE].info.ME[2] = this.oEi[$r.oE].info.ME[ke];
    this.oEi[$r.sn] = Vv(60, 60, 0, ΔΔ[rt.nl], 3);
    this.oEi[$r.sn].id = $r.sn;
    this.oEi[$r.hE] = Vv(60, 60, 0, ΔΔ[rt.Ka], xa);
    this.oEi[$r.hE].id = $r.hE;
    this.oEi[$r.hE].info.ME[2] = this.oEi[$r.hE].info.ME[0];
    this.oEi[$r.rn] = Vv(60, 60, 0, ΔΔ[rt.ol], 3);
    this.oEi[$r.rn].id = $r.rn;
    this.oEi[$r.dn] = Vv(60, 60, 0, ΔΔ[rt.cl], 3);
    this.oEi[$r.dn].id = $r.dn;
    this.oEi[$r.mn] = Vv(60, 60, 0, ΔΔ[rt.fl], on);
    this.oEi[$r.mn].id = $r.mn;
    this.oEi[$r.gE] = Vv(60, 60, 0, ΔΔ[rt.Za], 3);
    this.oEi[$r.gE].id = $r.gE;
    this.oEi[$r.cE] = Vv(60, 60, 0, ΔΔ[rt.$a], Lc);
    this.oEi[$r.cE].id = $r.cE;
    this.oEi[$r.fn] = Vv(60, 60, 0, ΔΔ[rt.yl], Xg);
    this.oEi[$r.fn].id = $r.fn;
    this.oEi[$r.un] = Vv(60, 60, 0, ΔΔ[rt.wl], Sn);
    this.oEi[$r.un].id = $r.un;
    this.oEi[$r.iE] = Vv(60, 60, 0, ΔΔ[rt.ts], 3);
    this.oEi[$r.iE].id = $r.iE;
    this.oEi[$r.tE] = Vv(60, 60, 0, ΔΔ[rt.es], 3);
    this.oEi[$r.tE].id = $r.tE;
    this.oEi[$r.eE] = Vv(60, 60, 0, ΔΔ[rt.Il], 3);
    this.oEi[$r.eE].id = $r.eE;
    this.oEi[$r.ss] = Vv(60, 60, 0, ΔΔ[rt.Nl], 3);
    this.oEi[$r.ss].id = $r.ss;
    this.oEi[$r.jD] = Vv(60, 60, 0, ΔΔ[rt.Vl], 3);
    this.oEi[$r.jD].id = $r.jD;
    this.oEi[$r.ds] = Vv(60, 60, 0, ΔΔ[rt.nb], 3);
    this.oEi[$r.ds].id = $r.ds;
    this.oEi[$r.RD] = Vv(60, 60, 0, ΔΔ[rt.Db], 3);
    this.oEi[$r.RD].id = $r.RD;
    this.oEi[$r.ps] = Vv(60, 60, 0, ΔΔ[rt.Sb], 3);
    this.oEi[$r.ps].id = $r.ps;
    this.oEi[$r.us] = Vv(60, 60, 0, ΔΔ[rt._b], mq);
    this.oEi[$r.us].id = $r.us;
    this.oEi[$r.LD] = Vv(60, 60, 0, ΔΔ[rt.Tb], 3);
    this.oEi[$r.LD].id = $r.LD;
    this.oEi[$r.bs] = Vv(60, 60, 0, ΔΔ[rt.qb], 3);
    this.oEi[$r.bs].id = $r.bs;
    this.oEi[$r.GD] = Vv(60, 60, 0, ΔΔ[rt.jy], Sr);
    this.oEi[$r.GD].id = $r.GD;
    this.oEi[$r.zs] = Vv(60, 60, 0, ΔΔ[rt.Ny], on);
    this.oEi[$r.zs].id = $r.zs;
    this.oEi[$r.qD] = Vv(60, 60, 0, ΔΔ[rt.Yy], E);
    this.oEi[$r.qD].id = $r.qD;
    this.oEi[$r.Qs] = Vv(60, 60, 0, ΔΔ[rt.$y], Ie);
    this.oEi[$r.Qs].id = $r.Qs;
    this.oEi[$r.WD] = Vv(60, 60, 0, ΔΔ[rt.ik], 3);
    this.oEi[$r.WD].id = $r.WD;
    this.oEi[$r.Is] = Vv(60, 60, 0, ΔΔ[rt.rk], Vr);
    this.oEi[$r.Is].id = $r.Is;
    this.oEi[$r.ND] = Vv(60, 60, 0, ΔΔ[rt.lk], Xg);
    this.oEi[$r.ND].id = $r.ND;
    this.oEi[$r.gr] = Vv(60, 60, 0, ΔΔ[rt.wk], on);
    this.oEi[$r.gr].id = $r.gr;
    this.oEi[$r.Ae] = Vv(60, 60, 0, ΔΔ[rt.bv], Wc);
    this.oEi[$r.Ae].id = $r.Ae;
    this.oEi[$r.we] = Vv(60, 60, 0, ΔΔ[rt.yv], 3);
    this.oEi[$r.we].id = $r.we;
    this.oEi[$r.Ot] = Vv(60, 60, 0, ΔΔ[rt.lg], 3);
    this.oEi[$r.Ot].id = $r.Ot;
    this.oEi[$r.Xt] = Vv(60, 60, 0, ΔΔ[rt.dv], 3);
    this.oEi[$r.Xt].id = $r.Xt;
    this.oEi[$r.Zs] = Vv(60, 60, 0, ΔΔ[rt.ys], E);
    this.oEi[$r.Zs].id = $r.Zs;
    this.oEi[$r.Zt] = Vv(60, 60, 0, ΔΔ[rt.Rv], Qe);
    this.oEi[$r.Zt].id = $r.Zt;
    this.oEi[$r.$s] = Vv(60, 60, 0, ΔΔ[rt.ks], E);
    this.oEi[$r.$s].id = $r.$s;
    this.oEi[$r.As] = Vv(60, 60, 0, ΔΔ[rt.Hv], E);
    this.oEi[$r.As].id = $r.As;
    this.oEi[$r.qe] = Vv(60, 60, 0, ΔΔ[rt.Yv], 3);
    this.oEi[$r.qe].id = $r.qe;
    this.oEi[$r.Bs] = Vv(60, 60, 0, ΔΔ[rt.ov], 3);
    this.oEi[$r.Bs].id = $r.Bs;
    this.oEi[$r.dE] = Vv(60, 60, 0, ΔΔ[rt.Ms], 3);
    this.oEi[$r.dE].id = $r.dE;
    this.oEi[$r.ws] = Vv(60, 60, 0, ΔΔ[rt.ev], 3);
    this.oEi[$r.ws].id = $r.ws;
    this.TAi = [];
    this.TAi[Xr.Ft] = Vv(60, 60, 0, ΔΔ[rt.Dr], nh);
    this.TAi[Xr.Ft].id = Xr.Ft;
    this.TAi[Xr.Pt] = Vv(60, 60, 0, ΔΔ[rt.Cr], 3);
    this.TAi[Xr.Pt].id = Xr.Pt;
    this.TAi[Xr.oo] = Vv(60, 60, 0, ΔΔ[rt.wo], 3);
    this.TAi[Xr.oo].id = Xr.oo;
    this.TAi[Xr.Wn] = Vv(60, 60, 0, ΔΔ[rt.Fr], 3);
    this.TAi[Xr.Wn].id = Xr.Wn;
    this.TAi[Xr.Ta] = Vv(60, 60, 0, ΔΔ[rt.Ro], 3);
    this.TAi[Xr.Ta].id = Xr.Ta;
    this.TAi[Xr.Fa] = Vv(60, 60, 0, ΔΔ[rt.Go], 3);
    this.TAi[Xr.Fa].id = Xr.Fa;
    this.TAi[Xr.wr] = Vv(60, 60, 0, ΔΔ[rt.no], jh);
    this.TAi[Xr.wr].id = Xr.wr;
    this.TAi[Xr.jt] = Vv(60, 60, 0, ΔΔ[rt.po], 3);
    this.TAi[Xr.jt].id = Xr.jt;
    this.TAi[Xr.Rt] = Vv(60, 60, 0, ΔΔ[rt.zr], 3);
    this.TAi[Xr.Rt].id = Xr.Rt;
    this.TAi[Xr.Lt] = Vv(60, 60, 0, ΔΔ[rt.co], 3);
    this.TAi[Xr.Lt].id = Xr.Lt;
    this.TAi[Xr.je] = Vv(60, 60, 0, ΔΔ[rt.Ab], 3);
    this.TAi[Xr.je].id = Xr.je;
    this.TAi[Xr.Gt] = Vv(60, 60, 0, ΔΔ[rt.do], Xg);
    this.TAi[Xr.Gt].id = Xr.Gt;
    this.TAi[Xr.Wt] = Vv(60, 60, 0, ΔΔ[rt.Fo], 3);
    this.TAi[Xr.Wt].id = Xr.Wt;
    this.TAi[Xr.Un] = Vv(60, 60, 0, ΔΔ[rt.Uo], mq);
    this.TAi[Xr.Un].id = Xr.Un;
    this.TAi[Xr.PD] = Vv(60, 60, 0, ΔΔ[rt.Yo], 3);
    this.TAi[Xr.PD].id = Xr.PD;
    this.TAi[Xr.vs] = Vv(60, 60, 0, ΔΔ[rt.Bo], 3);
    this.TAi[Xr.vs].id = Xr.vs;
    this.TAi[Xr.ja] = Vv(60, 60, 0, ΔΔ[rt.Pr], 3);
    this.TAi[Xr.ja].id = Xr.ja;
    this.TAi[Xr.Ra] = Vv(60, 60, 0, ΔΔ[rt.jr], 3);
    this.TAi[Xr.Ra].id = Xr.Ra;
    this.TAi[Xr.La] = Vv(60, 60, 0, ΔΔ[rt.Zo], 3);
    this.TAi[Xr.La].id = Xr.La;
    this.TAi[Xr.UD] = Vv(60, 60, 0, ΔΔ[rt.Gr], nh);
    this.TAi[Xr.UD].id = Xr.UD;
    this.TAi[Xr.qa] = Vv(60, 60, 0, ΔΔ[rt.ah], 3);
    this.TAi[Xr.qa].id = Xr.qa;
    this.TAi[Xr.Wa] = Vv(60, 60, 0, ΔΔ[rt.xh], jh);
    this.TAi[Xr.Wa].id = Xr.Wa;
    this.TAi[Xr.Na] = Vv(60, 60, 0, ΔΔ[rt.Ih], 3);
    this.TAi[Xr.Na].id = Xr.Na;
    this.TAi[Xr.Ha] = Vv(60, 60, 0, ΔΔ[rt.Fh], 3);
    this.TAi[Xr.Ha].id = Xr.Ha;
    this.TAi[Xr.ge] = Vv(60, 60, 0, ΔΔ[rt.Th], 3);
    this.TAi[Xr.ge].id = Xr.ge;
    this.TAi[Xr.Ht] = Vv(60, 60, 0, ΔΔ[rt.Lh], 3);
    this.TAi[Xr.Ht].id = Xr.Ht;
    this.TAi[Xr.OD] = Vv(60, 60, 0, ΔΔ[rt.Gh], pg);
    this.TAi[Xr.OD].id = Xr.OD;
    this.TAi[Xr.YD] = Vv(60, 60, 0, ΔΔ[rt.Nh], oe);
    this.TAi[Xr.YD].id = Xr.YD;
    this.TAi[Xr.JD] = Vv(60, 60, 0, ΔΔ[rt.Oh], 3);
    this.TAi[Xr.JD].id = Xr.JD;
    this.TAi[Xr.Ht] = Vv(60, 60, 0, ΔΔ[rt.Lh], 3);
    this.TAi[Xr.Ht].id = Xr.Ht;
    this.TAi[Xr.Ut] = Vv(60, 60, 0, ΔΔ[rt.Kh], Sr);
    this.TAi[Xr.Ut].id = Xr.Ut;
    this.TAi[Xr.Ot] = Vv(60, 60, 0, ΔΔ[rt.bg], 3);
    this.TAi[Xr.Ot].id = Xr.Ot;
    this.TAi[Xr.Yt] = Vv(60, 60, 0, ΔΔ[rt.dg], 3);
    this.TAi[Xr.Yt].id = Xr.Yt;
    this.TAi[Xr.Jt] = Vv(60, 60, 0, ΔΔ[rt.fg], 3);
    this.TAi[Xr.Jt].id = Xr.Jt;
    this.TAi[Xr.Kt] = Vv(60, 60, 0, ΔΔ[rt.kg], 3);
    this.TAi[Xr.Kt].id = Xr.Kt;
    this.TAi[Xr.Xt] = Vv(60, 60, 0, ΔΔ[rt.uv], nh);
    this.TAi[Xr.Xt].id = Xr.Xt;
    this.TAi[Xr.TD] = Vv(60, 60, 0, ΔΔ[rt.Bg], 3);
    this.TAi[Xr.TD].id = Xr.TD;
    this.TAi[Xr.ne] = Vv(60, 60, 0, ΔΔ[rt.Tg], 3);
    this.TAi[Xr.ne].id = Xr.ne;
    this.TAi[Xr.ae] = Vv(60, 60, 0, ΔΔ[rt.Lg], oe);
    this.TAi[Xr.ae].id = Xr.ae;
    this.TAi[Xr.pn] = Vv(60, 60, 0, ΔΔ[rt.NB], 3);
    this.TAi[Xr.pn].id = Xr.pn;
    this.TAi[Xr.ln] = Vv(60, 60, 0, ΔΔ[rt.OB], Qe);
    this.TAi[Xr.ln].id = Xr.ln;
    this.TAi[Xr.hn] = Vv(60, 60, 0, ΔΔ[rt.oM], oe);
    this.TAi[Xr.hn].id = Xr.hn;
    this.TAi[Xr.gn] = Vv(60, 60, 0, ΔΔ[rt.cM], 3);
    this.TAi[Xr.gn].id = Xr.gn;
    this.TAi[Xr.He] = Vv(60, 60, 0, ΔΔ[rt.zm], 3);
    this.TAi[Xr.He].id = Xr.He;
    this.TAi[Xr.xn] = Vv(60, 60, 0, ΔΔ[rt.RM], pg);
    this.TAi[Xr.xn].id = Xr.xn;
    this.TAi[Xr.Ve] = Vv(60, 60, 0, ΔΔ[rt.$B], Sr);
    this.TAi[Xr.Ve].id = Xr.Ve;
    this.TAi[Xr.Ue] = Vv(60, 60, 0, ΔΔ[rt.Sm], 3);
    this.TAi[Xr.Ue].id = Xr.Ue;
    this.TAi[Xr.Qn] = Vv(60, 60, 0, ΔΔ[rt.qM], 3);
    this.TAi[Xr.Qn].id = Xr.Qn;
    this.TAi[Xr.Ze] = Vv(60, 60, 0, ΔΔ[rt.eD], 3);
    this.TAi[Xr.Ze].id = Xr.Ze;
    this.TAi[Xr.Oe] = Vv(60, 60, 0, ΔΔ[rt.Fm], Vr);
    this.TAi[Xr.Oe].id = Xr.Oe;
    this.TAi[Xr.Sn] = Vv(60, 60, 0, ΔΔ[rt.HM], 3);
    this.TAi[Xr.Sn].id = Xr.Sn;
    this.TAi[Xr.$e] = Vv(60, 60, 0, ΔΔ[rt.sD], Lc);
    this.TAi[Xr.$e].id = Xr.$e;
    this.TAi[Xr.Ye] = Vv(60, 60, 0, ΔΔ[rt.jm], nh);
    this.TAi[Xr.Ye].id = Xr.Ye;
    this.TAi[Xr.In] = Vv(60, 60, 0, ΔΔ[rt.YM], 3);
    this.TAi[Xr.In].id = Xr.In;
    this.TAi[Xr.wn] = Vv(60, 60, 0, ΔΔ[rt.bD], E);
    this.TAi[Xr.wn].id = Xr.wn;
    this.TAi[Xr.Mn] = Vv(60, 60, 0, ΔΔ[rt.kD], Wc);
    this.TAi[Xr.Mn].id = Xr.Mn;
    this.TAi[Xr.Bn] = Vv(60, 60, 0, ΔΔ[rt.MD], jh);
    this.TAi[Xr.Bn].id = Xr.Bn;
    this.TAi[Xr.Dn] = Vv(60, 60, 0, ΔΔ[rt.ED], 3);
    this.TAi[Xr.Dn].id = Xr.Dn;
    this.TAi[Xr.En] = Vv(60, 60, 0, ΔΔ[rt.xD], pg);
    this.TAi[Xr.En].id = Xr.En;
    this.TAi[Xr.Cn] = Vv(60, 60, 0, ΔΔ[rt.ID], 3);
    this.TAi[Xr.Cn].id = Xr.Cn;
    this.TAi[Xr.tn] = Vv(60, 60, 0, ΔΔ[rt.hD], 3);
    this.TAi[Xr.tn].id = Xr.tn;
    this.TAi[Xr.Je] = Vv(60, 60, 0, ΔΔ[rt.Gm], yr);
    this.TAi[Xr.Je].id = Xr.Je;
    this.TAi[Xr._n] = Vv(60, 60, 0, ΔΔ[rt.XM], jh);
    this.TAi[Xr._n].id = Xr._n;
    this.TAi[Xr.en] = Vv(60, 60, 0, ΔΔ[rt.dD], on);
    this.TAi[Xr.en].id = Xr.en;
    this.TAi[Xr.Ke] = Vv(60, 60, 0, ΔΔ[rt.Nm], 3);
    this.TAi[Xr.Ke].id = Xr.Ke;
    this.TAi[Xr.Fn] = Vv(60, 60, 0, ΔΔ[rt.$M], 3);
    this.TAi[Xr.Fn].id = Xr.Fn;
    this.TAi[Xr.nn] = Vv(60, 60, 0, ΔΔ[rt.fD], Sr);
    this.TAi[Xr.nn].id = Xr.nn;
    this.TAi[Xr.Xe] = Vv(60, 60, 0, ΔΔ[rt.Om], uc);
    this.TAi[Xr.Xe].id = Xr.Xe;
    this.TAi[Xr.Pn] = Vv(60, 60, 0, ΔΔ[rt.eB], Xg);
    this.TAi[Xr.Pn].id = Xr.Pn;
    this.TAi[Xr.Re] = Vv(60, 60, 0, ΔΔ[rt.bb], 3);
    this.TAi[Xr.Re].id = Xr.Re;
    this.TAi[Xr.se] = Vv(60, 60, 0, ΔΔ[rt.Ug], 3);
    this.TAi[Xr.se].id = Xr.se;
    this.TAi[Xr.re] = Vv(60, 60, 0, ΔΔ[rt.Jg], 3);
    this.TAi[Xr.re].id = Xr.re;
    this.TAi[Xr.oe] = Vv(60, 60, 0, ΔΔ[rt.Vg], 3);
    this.TAi[Xr.oe].id = Xr.oe;
    this.TAi[Xr.he] = Vv(60, 60, 0, ΔΔ[rt.tc], 3);
    this.TAi[Xr.he].id = Xr.he;
    this.TAi[Xr.Jn] = Vv(60, 60, 0, ΔΔ[rt.ac], 3);
    this.TAi[Xr.Jn].id = Xr.Jn;
    this.TAi[Xr.ge] = Vv(60, 60, 0, ΔΔ[rt.Th], 3);
    this.TAi[Xr.ge].id = Xr.ge;
    this.TAi[Xr.ce] = Vv(60, 60, 0, ΔΔ[rt.yc], 3);
    this.TAi[Xr.ce].id = Xr.ce;
    this.TAi[Xr.Nt] = Vv(60, 60, 0, ΔΔ[rt.Zb], 3);
    this.TAi[Xr.Nt].id = Xr.Nt;
    this.TAi[Xr.de] = Vv(60, 60, 0, ΔΔ[rt.Mc], 3);
    this.TAi[Xr.de].id = Xr.de;
    this.TAi[Xr.me] = Vv(60, 60, 0, ΔΔ[rt.iA], Wc);
    this.TAi[Xr.me].id = Xr.me;
    this.TAi[Xr.ue] = Vv(60, 60, 0, ΔΔ[rt.Tc], 3);
    this.TAi[Xr.ue].id = Xr.ue;
    this.TAi[Xr.pe] = Vv(60, 60, 0, ΔΔ[rt.qc], Ie);
    this.TAi[Xr.pe].id = Xr.pe;
    this.TAi[Xr.le] = Vv(60, 60, 0, ΔΔ[rt.Hc], 3);
    this.TAi[Xr.le].id = Xr.le;
    this.TAi[Xr.be] = Vv(60, 60, 0, ΔΔ[rt.Yc], Xg);
    this.TAi[Xr.be].id = Xr.be;
    this.TAi[Xr.ve] = Vv(60, 60, 0, ΔΔ[rt.Xc], Sr);
    this.TAi[Xr.ve].id = Xr.ve;
    this.TAi[Xr.ye] = Vv(60, 60, 0, ΔΔ[rt.$c], mq);
    this.TAi[Xr.ye].id = Xr.ye;
    this.TAi[Xr.Xn] = Vv(60, 60, 0, ΔΔ[rt.nd], 3);
    this.TAi[Xr.Xn].id = Xr.Xn;
    this.TAi[Xr.Vn] = Vv(60, 60, 0, ΔΔ[rt.rd], Lc);
    this.TAi[Xr.Vn].id = Xr.Vn;
    this.TAi[Xr.KD] = Vv(60, 60, 0, ΔΔ[rt.hd], 3);
    this.TAi[Xr.KD].id = Xr.KD;
    this.TAi[Xr.ke] = Vv(60, 60, 0, ΔΔ[rt.fd], 3);
    this.TAi[Xr.ke].id = Xr.ke;
    this.TAi[Xr.Aa] = Vv(60, 60, 0, ΔΔ[rt.Dd], xa);
    this.TAi[Xr.Aa].id = Xr.Aa;
    this.TAi[Xr.wa] = Vv(60, 60, 0, ΔΔ[rt.xd], 3);
    this.TAi[Xr.wa].id = Xr.wa;
    this.TAi[Xr.Da] = Vv(60, 60, 0, ΔΔ[rt.Gd], 3);
    this.TAi[Xr.Da].id = Xr.Da;
    this.TAi[Xr.Ia] = Vv(60, 60, 0, ΔΔ[rt.Nd], er);
    this.TAi[Xr.Ia].id = Xr.Ia;
    this.TAi[Xr._a] = Vv(60, 60, 0, ΔΔ[rt.um], uc);
    this.TAi[Xr._a].id = Xr._a;
    this.TAi[Xr.Me] = Vv(60, 60, 0, ΔΔ[rt.Zd], Ie);
    this.TAi[Xr.Me].id = Xr.Me;
    this.TAi[Xr.De] = Vv(60, 60, 0, ΔΔ[rt.om], Sn);
    this.TAi[Xr.De].id = Xr.De;
    this.TAi[Xr.$n] = Vv(60, 60, 0, ΔΔ[rt.hu], Sr);
    this.TAi[Xr.$n].id = Xr.$n;
    this.TAi[Xr.Hs] = Vv(60, 60, 0, ΔΔ[rt.XB], Qe);
    this.TAi[Xr.Hs].id = Xr.Hs;
    this.TAi[Xr.Os] = Vv(60, 60, 0, ΔΔ[rt.hA], Sn);
    this.TAi[Xr.Os].id = Xr.Os;
    this.TAi[Xr.Ys] = Vv(60, 60, 0, ΔΔ[rt.dA], Sn);
    this.TAi[Xr.Ys].id = Xr.Ys;
    this.TAi[Xr.sr] = Vv(60, 60, 0, ΔΔ[rt.Gw], E);
    this.TAi[Xr.sr].id = Xr.sr;
    this.TAi[Xr.bn] = Vv(60, 60, 0, ΔΔ[rt.xA], 3);
    this.TAi[Xr.bn].id = Xr.bn;
    this.TAi[Xr.Xs] = Vv(60, 60, 0, ΔΔ[rt.IA], pg);
    this.TAi[Xr.Xs].id = Xr.Xs;
    this.TAi[Xr.tr] = Vv(60, 60, 0, ΔΔ[rt.ow], mq);
    this.TAi[Xr.tr].id = Xr.tr;
    this.TAi[Xr.yr] = Vv(60, 60, 0, ΔΔ[rt.qB], 3);
    this.TAi[Xr.yr].id = Xr.yr;
    this.TAi[Xr.ir] = Vv(60, 60, 0, ΔΔ[rt.oB], Lc);
    this.TAi[Xr.ir].id = Xr.ir;
    this.TAi[Xr.ea] = Vv(60, 60, 0, ΔΔ[rt.pu], 3);
    this.TAi[Xr.ea].id = Xr.ea;
    this.TAi[Xr.ta] = Vv(60, 60, 0, ΔΔ[rt.mp], mq);
    this.TAi[Xr.ta].id = Xr.ta;
    this.TAi[Xr.XD] = Vv(60, 60, 0, ΔΔ[rt.mp], 3);
    this.TAi[Xr.XD].id = Xr.XD;
    this.TAi[Xr.VD] = Vv(60, 60, 0, ΔΔ[rt.mp], Wc);
    this.TAi[Xr.VD].id = Xr.VD;
    this.TAi[Xr.Ee] = Vv(60, 60, 0, ΔΔ[rt.wu], 3);
    this.TAi[Xr.Ee].id = Xr.Ee;
    this.TAi[Xr.Qe] = Vv(60, 60, 0, ΔΔ[rt.Vf], Ie);
    this.TAi[Xr.Qe].id = Xr.Qe;
    this.TAi[Xr.Se] = Vv(60, 60, 0, ΔΔ[rt.tp], 3);
    this.TAi[Xr.Se].id = Xr.Se;
    this.TAi[Xr.Ie] = Vv(60, 60, 0, ΔΔ[rt.np], on);
    this.TAi[Xr.Ie].id = Xr.Ie;
    this.TAi[Xr.Pe] = Vv(60, 60, 0, ΔΔ[rt.hp], yr);
    this.TAi[Xr.Pe].id = Xr.Pe;
    this.TAi[Xr.aa] = Vv(60, 60, 0, ΔΔ[rt.Su], 3);
    this.TAi[Xr.aa].id = Xr.aa;
    this.TAi[Xr.ra] = Vv(60, 60, 0, ΔΔ[rt.Tu], 3);
    this.TAi[Xr.ra].id = Xr.ra;
    this.TAi[Xr.oa] = Vv(60, 60, 0, ΔΔ[rt.Lu], Sr);
    this.TAi[Xr.oa].id = Xr.oa;
    this.TAi[Xr.ga] = Vv(60, 60, 0, ΔΔ[rt.Yu], jh);
    this.TAi[Xr.ga].id = Xr.ga;
    this.TAi[Xr.Ce] = Vv(60, 60, 0, ΔΔ[rt.Vu], Vr);
    this.TAi[Xr.Ce].id = Xr.Ce;
    this.TAi[Xr.ze] = Vv(60, 60, 0, ΔΔ[rt.if], Qe);
    this.TAi[Xr.ze].id = Xr.ze;
    this.TAi[Xr.xe] = Vv(60, 60, 0, ΔΔ[rt.af], 3);
    this.TAi[Xr.xe].id = Xr.xe;
    this.TAi[Xr.ca] = Vv(60, 60, 0, ΔΔ[rt.df], Lc);
    this.TAi[Xr.ca].id = Xr.ca;
    this.TAi[Xr.HD] = Vv(60, 60, 0, ΔΔ[rt.qf], er);
    this.TAi[Xr.HD].id = Xr.HD;
    this.TAi[Xr.ma] = Vv(60, 60, 0, ΔΔ[rt.bf], 3);
    this.TAi[Xr.ma].id = Xr.ma;
    this.TAi[Xr.pa] = Vv(60, 60, 0, ΔΔ[rt.Pf], oe);
    this.TAi[Xr.pa].id = Xr.pa;
    this.TAi[Xr.ZD] = Vv(60, 60, 0, ΔΔ[rt.pp], Xg);
    this.TAi[Xr.ZD].id = Xr.ZD;
    this.TAi[Xr.$D] = Vv(60, 60, 0, ΔΔ[rt.Cp], 3);
    this.TAi[Xr.$D].id = Xr.$D;
    this.TAi[Xr.Le] = Vv(60, 60, 0, ΔΔ[rt.Sp], 3);
    this.TAi[Xr.Le].id = Xr.Le;
    this.TAi[Xr.We] = Vv(60, 60, 0, ΔΔ[rt.Am], Lc);
    this.TAi[Xr.We].id = Xr.We;
    this.TAi[Xr.an] = Vv(60, 60, 0, ΔΔ[rt.tl], xa);
    this.TAi[Xr.an].id = Xr.an;
    this.TAi[Xr.sn] = Vv(60, 60, 0, ΔΔ[rt.sl], Wc);
    this.TAi[Xr.sn].id = Xr.sn;
    this.TAi[Xr.rn] = Vv(60, 60, 0, ΔΔ[rt.ul], xa);
    this.TAi[Xr.rn].id = Xr.rn;
    this.TAi[Xr.dn] = Vv(60, 60, 0, ΔΔ[rt.dl], 3);
    this.TAi[Xr.dn].id = Xr.dn;
    this.TAi[Xr.mn] = Vv(60, 60, 0, ΔΔ[rt.pl], 3);
    this.TAi[Xr.mn].id = Xr.mn;
    this.TAi[Xr.fn] = Vv(60, 60, 0, ΔΔ[rt.kl], jh);
    this.TAi[Xr.fn].id = Xr.fn;
    this.TAi[Xr.un] = Vv(60, 60, 0, ΔΔ[rt.Ml], 3);
    this.TAi[Xr.un].id = Xr.un;
    this.TAi[Xr.iE] = Vv(60, 60, 0, ΔΔ[rt.Cl], 3);
    this.TAi[Xr.iE].id = Xr.iE;
    this.TAi[Xr.tE] = Vv(60, 60, 0, ΔΔ[rt.zl], 3);
    this.TAi[Xr.tE].id = Xr.tE;
    this.TAi[Xr.eE] = Vv(60, 60, 0, ΔΔ[rt.Fl], 3);
    this.TAi[Xr.eE].id = Xr.eE;
    this.TAi[Xr.ss] = Vv(60, 60, 0, ΔΔ[rt.Wl], 3);
    this.TAi[Xr.ss].id = Xr.ss;
    this.TAi[Xr.jD] = Vv(60, 60, 0, ΔΔ[rt.Zl], Qe);
    this.TAi[Xr.jD].id = Xr.jD;
    this.TAi[Xr.RD] = Vv(60, 60, 0, ΔΔ[rt.Eb], er);
    this.TAi[Xr.RD].id = Xr.RD;
    this.TAi[Xr.us] = Vv(60, 60, 0, ΔΔ[rt.Fb], Vr);
    this.TAi[Xr.us].id = Xr.us;
    this.TAi[Xr.LD] = Vv(60, 60, 0, ΔΔ[rt.jb], jh);
    this.TAi[Xr.LD].id = Xr.LD;
    this.TAi[Xr.qD] = Vv(60, 60, 0, ΔΔ[rt.Jy], 3);
    this.TAi[Xr.qD].id = Xr.qD;
    this.TAi[Xr.GD] = Vv(60, 60, 0, ΔΔ[rt.Ry], on);
    this.TAi[Xr.GD].id = Xr.GD;
    this.TAi[Xr.WD] = Vv(60, 60, 0, ΔΔ[rt.tk], Xg);
    this.TAi[Xr.WD].id = Xr.WD;
    this.TAi[Xr.ND] = Vv(60, 60, 0, ΔΔ[rt.bk], 3);
    this.TAi[Xr.ND].id = Xr.ND;
    this.TAi[Xr.Ot] = Vv(60, 60, 0, ΔΔ[rt.bg], jh);
    this.TAi[Xr.Ot].id = Xr.Ot;
    this.TAi[Xr.Xt] = Vv(60, 60, 0, ΔΔ[rt.uv], 3);
    this.TAi[Xr.Xt].id = Xr.Xt;
    this.TAi[Xr.Zt] = Vv(60, 60, 0, ΔΔ[rt.jv], er);
    this.TAi[Xr.Zt].id = Xr.Zt;
    this.TAi[Xr.As] = Vv(60, 60, 0, ΔΔ[rt.Ov], 3);
    this.TAi[Xr.As].id = Xr.As;
    this.TAi[Xr.qe] = Vv(60, 60, 0, ΔΔ[rt.Kv], er);
    this.TAi[Xr.qe].id = Xr.qe;
    this.bpi[$r._e] = Vv(68, 68, 0, ΔΔ[rt.dk], 3);
    this.bpi[$r._e].id = $r._e;
    this.oEi[$r._e] = Vv(60, 60, 0, ΔΔ[rt.ck], Sn);
    this.oEi[$r._e].id = $r._e;
    this.TAi[Xr._e] = Vv(60, 60, 0, ΔΔ[rt.mk], 3);
    this.TAi[Xr._e].id = Xr._e;
    this.bpi[$r.Fe] = Vv(68, 68, 0, ΔΔ[rt.fk], on);
    this.bpi[$r.Fe].id = $r.Fe;
    this.oEi[$r.Fe] = Vv(60, 60, 0, ΔΔ[rt.uk], 3);
    this.oEi[$r.Fe].id = $r.Fe;
    this.TAi[Xr.Fe] = Vv(60, 60, 0, ΔΔ[rt.pk], Xg);
    this.TAi[Xr.Fe].id = Xr.Fe;
    this.bpi[$r.Te] = Vv(68, 68, 0, ΔΔ[rt.cp], Vr);
    this.bpi[$r.Te].id = $r.Te;
    this.oEi[$r.Te] = Vv(60, 60, 0, ΔΔ[rt.gp], pg);
    this.oEi[$r.Te].id = $r.Te;
    this.TAi[Xr.Te] = Vv(60, 60, 0, ΔΔ[rt.dp], 3);
    this.TAi[Xr.Te].id = Xr.Te;
    this.bpi[$r.cn] = Vv(68, 68, 0, ΔΔ[rt.Ng], Ie);
    this.bpi[$r.cn].id = $r.cn;
    this.oEi[$r.cn] = Vv(60, 60, 0, ΔΔ[rt.qg], Sr);
    this.oEi[$r.cn].id = $r.cn;
    this.TAi[Xr.cn] = Vv(60, 60, 0, ΔΔ[rt.Wg], 3);
    this.TAi[Xr.cn].id = Xr.cn;
    this.bpi[$r.uE] = Vv(68, 68, 0, ΔΔ[rt.xM], Wc);
    this.bpi[$r.uE].id = $r.uE;
    this.oEi[$r.uE] = Vv(60, 60, 0, ΔΔ[rt.zM], 3);
    this.oEi[$r.uE].id = $r.uE;
    this.bpi[$r.pE] = Vv(68, 68, 0, ΔΔ[rt.aB], yr);
    this.bpi[$r.pE].id = $r.pE;
    this.oEi[$r.pE] = Vv(60, 60, 0, ΔΔ[rt.nB], 3);
    this.oEi[$r.pE].id = $r.pE;
    this.bpi[$r.fE] = Vv(68, 68, 0, ΔΔ[rt.SM], 3);
    this.bpi[$r.fE].id = $r.fE;
    this.oEi[$r.fE] = Vv(60, 60, 0, ΔΔ[rt.QM], er);
    this.oEi[$r.fE].id = $r.fE;
    this.bpi[$r.Ea] = Vv(68, 68, 0, ΔΔ[rt.uB], 3);
    this.bpi[$r.Ea].id = $r.Ea;
    this.oEi[$r.Ea] = Vv(60, 60, 0, ΔΔ[rt.dB], 3);
    this.oEi[$r.Ea].id = $r.Ea;
    this.TAi[Xr.Ea] = Vv(60, 60, 0, ΔΔ[rt.mB], 3);
    this.TAi[Xr.Ea].id = Xr.Ea;
    this.bpi[$r.Ps] = Vv(68, 68, 0, ΔΔ[rt.Ck], er);
    this.bpi[$r.Ps].id = $r.Ps;
    this.oEi[$r.Ps] = Vv(60, 60, 0, ΔΔ[rt.Ek], 3);
    this.oEi[$r.Ps].id = $r.Ps;
    this.TAi[Xr.Ps] = Vv(60, 60, 0, ΔΔ[rt.Dk], 3);
    this.TAi[Xr.Ps].id = Xr.Ps;
    this.bpi[$r.Ts] = Vv(68, 68, 0, ΔΔ[rt.Qk], 3);
    this.bpi[$r.Ts].id = $r.Ts;
    this.oEi[$r.Ts] = Vv(60, 60, 0, ΔΔ[rt.xk], jh);
    this.oEi[$r.Ts].id = $r.Ts;
    this.TAi[Xr.Ts] = Vv(60, 60, 0, ΔΔ[rt.zk], yr);
    this.TAi[Xr.Ts].id = Xr.Ts;
    this.bpi[$r.js] = Vv(68, 68, 0, ΔΔ[rt._k], 3);
    this.bpi[$r.js].id = $r.js;
    this.oEi[$r.js] = Vv(60, 60, 0, ΔΔ[rt.Ik], 3);
    this.oEi[$r.js].id = $r.js;
    this.TAi[Xr.js] = Vv(60, 60, 0, ΔΔ[rt.Sk], 3);
    this.TAi[Xr.js].id = Xr.js;
    this.bpi[$r.Rs] = Vv(68, 68, 0, ΔΔ[rt.Tk], xa);
    this.bpi[$r.Rs].id = $r.Rs;
    this.oEi[$r.Rs] = Vv(60, 60, 0, ΔΔ[rt.Pk], oe);
    this.oEi[$r.Rs].id = $r.Rs;
    this.TAi[Xr.Rs] = Vv(60, 60, 0, ΔΔ[rt.Fk], pg);
    this.TAi[Xr.Rs].id = Xr.Rs;
    this.bpi[$r.Ls] = Vv(68, 68, 0, ΔΔ[rt.Lk], 3);
    this.bpi[$r.Ls].id = $r.Ls;
    this.oEi[$r.Ls] = Vv(60, 60, 0, ΔΔ[rt.Rk], yr);
    this.oEi[$r.Ls].id = $r.Ls;
    this.TAi[Xr.Ls] = Vv(60, 60, 0, ΔΔ[rt.jk], 3);
    this.TAi[Xr.Ls].id = Xr.Ls;
    this.bpi[$r.Ns] = Vv(68, 68, 0, ΔΔ[rt.Wk], 3);
    this.bpi[$r.Ns].id = $r.Ns;
    this.oEi[$r.Ns] = Vv(60, 60, 0, ΔΔ[rt.qk], jh);
    this.oEi[$r.Ns].id = $r.Ns;
    this.TAi[Xr.Ns] = Vv(60, 60, 0, ΔΔ[rt.Gk], Vr);
    this.TAi[Xr.Ns].id = Xr.Ns;
    this.bpi[$r.Gs] = Vv(68, 68, 0, ΔΔ[rt.Vk], 3);
    this.bpi[$r.Gs].id = $r.Gs;
    this.oEi[$r.Gs] = Vv(60, 60, 0, ΔΔ[rt.Xk], 3);
    this.oEi[$r.Gs].id = $r.Gs;
    this.TAi[Xr.Gs] = Vv(60, 60, 0, ΔΔ[rt.Kk], 3);
    this.TAi[Xr.Gs].id = Xr.Gs;
    this.bpi[$r.Ws] = Vv(68, 68, 0, ΔΔ[rt.Jk], 3);
    this.bpi[$r.Ws].id = $r.Ws;
    this.oEi[$r.Ws] = Vv(60, 60, 0, ΔΔ[rt.Yk], 3);
    this.oEi[$r.Ws].id = $r.Ws;
    this.TAi[Xr.Ws] = Vv(60, 60, 0, ΔΔ[rt.Ok], uc);
    this.TAi[Xr.Ws].id = Xr.Ws;
    this.bpi[$r.qs] = Vv(68, 68, 0, ΔΔ[rt.Uk], uc);
    this.bpi[$r.qs].id = $r.qs;
    this.oEi[$r.qs] = Vv(60, 60, 0, ΔΔ[rt.Hk], 3);
    this.oEi[$r.qs].id = $r.qs;
    this.TAi[Xr.qs] = Vv(60, 60, 0, ΔΔ[rt.Nk], uc);
    this.TAi[Xr.qs].id = Xr.qs;
    this.bpi[$r.Ca] = Vv(68, 68, 0, ΔΔ[rt.bB], 3);
    this.bpi[$r.Ca].id = $r.Ca;
    this.oEi[$r.Ca] = Vv(60, 60, 0, ΔΔ[rt.pB], Sr);
    this.oEi[$r.Ca].id = $r.Ca;
    this.TAi[Xr.Ca] = Vv(60, 60, 0, ΔΔ[rt.lB], 3);
    this.TAi[Xr.Ca].id = Xr.Ca;
    this.bpi[$r.za] = Vv(68, 68, 0, ΔΔ[rt.AB], 3);
    this.bpi[$r.za].id = $r.za;
    this.oEi[$r.za] = Vv(60, 60, 0, ΔΔ[rt.yB], Wc);
    this.oEi[$r.za].id = $r.za;
    this.TAi[Xr.za] = Vv(60, 60, 0, ΔΔ[rt.kB], oe);
    this.TAi[Xr.za].id = Xr.za;
    this.bpi[$r.xa] = Vv(68, 68, 0, ΔΔ[rt.DB], 3);
    this.bpi[$r.xa].id = $r.xa;
    this.oEi[$r.xa] = Vv(60, 60, 0, ΔΔ[rt.MB], 3);
    this.oEi[$r.xa].id = $r.xa;
    this.TAi[Xr.xa] = Vv(60, 60, 0, ΔΔ[rt.BB], 3);
    this.TAi[Xr.xa].id = Xr.xa;
    this.bpi[$r.Qa] = Vv(68, 68, 0, ΔΔ[rt.xB], 3);
    this.bpi[$r.Qa].id = $r.Qa;
    this.oEi[$r.Qa] = Vv(60, 60, 0, ΔΔ[rt.CB], 3);
    this.oEi[$r.Qa].id = $r.Qa;
    this.TAi[Xr.Qa] = Vv(60, 60, 0, ΔΔ[rt.zB], nh);
    this.TAi[Xr.Qa].id = Xr.Qa;
    this.bpi[$r.Sa] = Vv(68, 68, 0, ΔΔ[rt._B], jh);
    this.bpi[$r.Sa].id = $r.Sa;
    this.oEi[$r.Sa] = Vv(60, 60, 0, ΔΔ[rt.SB], Sr);
    this.oEi[$r.Sa].id = $r.Sa;
    this.TAi[Xr.Sa] = Vv(60, 60, 0, ΔΔ[rt.IB], 3);
    this.TAi[Xr.Sa].id = Xr.Sa;
    this.bpi[$r.mE] = Vv(68, 68, 0, ΔΔ[rt.Dy], 3);
    this.bpi[$r.mE].id = $r.mE;
    this.oEi[$r.mE] = Vv(60, 60, 0, ΔΔ[rt.By], Vr);
    this.oEi[$r.mE].id = $r.mE;
    this.oEi[$r.mE].info.ME[2] = this.oEi[$r.mE].info.ME[0];
    this.bpi[$r.Ba] = Vv(68, 68, 0, ΔΔ[rt.Fd], 3);
    this.bpi[$r.Ba].id = $r.Ba;
    this.oEi[$r.Ba] = Vv(60, 60, 0, ΔΔ[rt._d], 3);
    this.oEi[$r.Ba].id = $r.Ba;
    this.oEi[$r.Ba].info.ME[ih] = this.oEi[$r.Ba].info.ME[qh];
    this.bpi[$r.Ds] = Vv(68, 68, 0, ΔΔ[rt.Cy], 3);
    this.bpi[$r.Ds].id = $r.Ds;
    this.oEi[$r.Ds] = Vv(60, 60, 0, ΔΔ[rt.Ey], 3);
    this.oEi[$r.Ds].id = $r.Ds;
    this.oEi[$r.Ds].info.ME[En] = this.oEi[$r.Ds].info.ME[Gc];
    this.bpi[$r.$t] = Vv(68, 68, 0, ΔΔ[rt.wy], 3);
    this.bpi[$r.$t].id = $r.$t;
    this.oEi[$r.$t] = Vv(60, 60, 0, ΔΔ[rt.ky], oe);
    this.oEi[$r.$t].id = $r.$t;
    this.TAi[Xr.$t] = Vv(60, 60, 0, ΔΔ[rt.Ay], 3);
    this.TAi[Xr.$t].id = Xr.$t;
    this.bpi[$r.ie] = Vv(68, 68, 0, ΔΔ[rt.hy], 3);
    this.bpi[$r.ie].id = $r.ie;
    this.oEi[$r.ie] = Vv(60, 60, 0, ΔΔ[rt.sy], 3);
    this.oEi[$r.ie].id = $r.ie;
    this.TAi[Xr.ie] = Vv(60, 60, 0, ΔΔ[rt.oy], fa);
    this.TAi[Xr.ie].id = Xr.ie;
    this.bpi[$r.te] = Vv(68, 68, 0, ΔΔ[rt.py], 3);
    this.bpi[$r.te].id = $r.te;
    this.oEi[$r.te] = Vv(60, 60, 0, ΔΔ[rt.my], 3);
    this.oEi[$r.te].id = $r.te;
    this.TAi[Xr.te] = Vv(60, 60, 0, ΔΔ[rt.uy], mq);
    this.TAi[Xr.te].id = Xr.te;
    this.bpi[$r.ee] = Vv(68, 68, 0, ΔΔ[rt.yy], uc);
    this.bpi[$r.ee].id = $r.ee;
    this.oEi[$r.ee] = Vv(60, 60, 0, ΔΔ[rt.by], Wc);
    this.oEi[$r.ee].id = $r.ee;
    this.TAi[Xr.ee] = Vv(60, 60, 0, ΔΔ[rt.vy], fa);
    this.TAi[Xr.ee].id = Xr.ee;
    this.bpi[$r.Ge] = Vv(68, 68, 0, ΔΔ[rt._p], 3);
    this.bpi[$r.Ge].id = $r.Ge;
    this.oEi[$r.Ge] = Vv(60, 60, 0, ΔΔ[rt.Ip], 3);
    this.oEi[$r.Ge].id = $r.Ge;
    this.TAi[Xr.Ge] = Vv(60, 60, 0, ΔΔ[rt.Fp], 3);
    this.TAi[Xr.Ge].id = Xr.Ge;
    this.bpi[$r.vn] = Vv(68, 68, 0, ΔΔ[rt.Tp], 3);
    this.bpi[$r.vn].id = $r.vn;
    this.oEi[$r.vn] = Vv(60, 60, 0, ΔΔ[rt.Pp], 3);
    this.oEi[$r.vn].id = $r.vn;
    this.TAi[Xr.vn] = Vv(60, 60, 0, ΔΔ[rt.jp], 3);
    this.TAi[Xr.vn].id = Xr.vn;
    this.bpi[$r.kn] = Vv(68, 68, 0, ΔΔ[rt.Wp], jh);
    this.bpi[$r.kn].id = $r.kn;
    this.oEi[$r.kn] = Vv(60, 60, 0, ΔΔ[rt.qp], 3);
    this.oEi[$r.kn].id = $r.kn;
    this.TAi[Xr.kn] = Vv(60, 60, 0, ΔΔ[rt.Np], 3);
    this.TAi[Xr.kn].id = Xr.kn;
    this.bpi[$r.An] = Vv(68, 68, 0, ΔΔ[rt.Up], 3);
    this.bpi[$r.An].id = $r.An;
    this.oEi[$r.An] = Vv(60, 60, 0, ΔΔ[rt.Hp], Ie);
    this.oEi[$r.An].id = $r.An;
    this.TAi[Xr.An] = Vv(60, 60, 0, ΔΔ[rt.Op], Sn);
    this.TAi[Xr.An].id = Xr.An;
    this.bpi[$r.yn] = Vv(68, 68, 0, ΔΔ[rt.Lp], Sn);
    this.bpi[$r.yn].id = $r.yn;
    this.oEi[$r.yn] = Vv(60, 60, 0, ΔΔ[rt.Rp], 3);
    this.oEi[$r.yn].id = $r.yn;
    this.TAi[Xr.yn] = Vv(60, 60, 0, ΔΔ[rt.Gp], 3);
    this.TAi[Xr.yn].id = Xr.yn;
    this.bpi[$r.lr] = Vv(68, 68, 0, ΔΔ[rt.PM], Sr);
    this.bpi[$r.lr].id = $r.lr;
    this.oEi[$r.lr] = Vv(60, 60, 0, ΔΔ[rt.FM], E);
    this.oEi[$r.lr].id = $r.lr;
    this.TAi[Xr.lr] = Vv(60, 60, 0, ΔΔ[rt.Cfi], oe);
    this.TAi[Xr.lr].id = Xr.lr;
    this.bpi[$r.fe] = Vv(68, 68, 0, ΔΔ[rt._y], 3);
    this.bpi[$r.fe].id = $r.fe;
    this.oEi[$r.fe] = Vv(60, 60, 0, ΔΔ[rt.Sy], Qe);
    this.oEi[$r.fe].id = $r.fe;
    this.TAi[Xr.fe] = Vv(60, 60, 0, ΔΔ[rt.Iy], yr);
    this.TAi[Xr.fe].id = Xr.fe;
    this.bpi[$r.Be] = Vv(68, 68, 0, ΔΔ[rt.Ty], 3);
    this.bpi[$r.Be].id = $r.Be;
    this.oEi[$r.Be] = Vv(60, 60, 0, ΔΔ[rt.Fy], 3);
    this.oEi[$r.Be].id = $r.Be;
    this.TAi[Xr.Be] = Vv(60, 60, 0, ΔΔ[rt.Py], Xg);
    this.TAi[Xr.Be].id = Xr.Be;
    this.bpi[$r.Vt] = Vv(68, 68, 0, ΔΔ[rt.pv], 3);
    this.bpi[$r.Vt].id = $r.Vt;
    this.oEi[$r.Vt] = Vv(60, 60, 0, ΔΔ[rt.fv], 3);
    this.oEi[$r.Vt].id = $r.Vt;
    this.TAi[Xr.Vt] = Vv(60, 60, 0, ΔΔ[rt.lv], Xg);
    this.TAi[Xr.Vt].id = Xr.Vt;
    this.bpi[$r.Ne] = Vv(68, 68, 0, ΔΔ[rt.Em], 3);
    this.bpi[$r.Ne].id = $r.Ne;
    this.oEi[$r.Ne] = Vv(60, 60, 0, ΔΔ[rt.Bm], 3);
    this.oEi[$r.Ne].id = $r.Ne;
    this.TAi[Xr.Ne] = Vv(60, 60, 0, ΔΔ[rt.Dm], er);
    this.TAi[Xr.Ne].id = Xr.Ne;
    this.bpi[$r.gs] = Vv(68, 68, 0, ΔΔ[rt.Km], 3);
    this.bpi[$r.gs].id = $r.gs;
    this.oEi[$r.gs] = Vv(60, 60, 0, ΔΔ[rt.Br], 3);
    this.oEi[$r.gs].id = $r.gs;
    this.bpi[$r.yC] = Vv(68, 68, 0, ΔΔ[rt.hEi], jh);
    this.bpi[$r.yC].id = $r.yC;
    this.oEi[$r.yC] = Vv(60, 60, 0, ΔΔ[rt.gEi], Ie);
    this.oEi[$r.yC].id = $r.yC;
    this.bpi[$r.kC] = Vv(68, 68, 0, ΔΔ[rt.cEi], 3);
    this.bpi[$r.kC].id = $r.kC;
    this.oEi[$r.kC] = Vv(60, 60, 0, ΔΔ[rt.dEi], Wc);
    this.oEi[$r.kC].id = $r.kC;
    this.bpi[$r.AC] = Vv(68, 68, 0, ΔΔ[rt.mEi], 3);
    this.bpi[$r.AC].id = $r.AC;
    this.oEi[$r.AC] = Vv(60, 60, 0, ΔΔ[rt.uEi], xa);
    this.oEi[$r.AC].id = $r.AC;
    this.bpi[$r.wC] = Vv(68, 68, 0, ΔΔ[rt.fEi], jh);
    this.bpi[$r.wC].id = $r.wC;
    this.oEi[$r.wC] = Vv(60, 60, 0, ΔΔ[rt.pEi], Ie);
    this.oEi[$r.wC].id = $r.wC;
    this.bpi[$r.MC] = Vv(68, 68, 0, ΔΔ[rt.lEi], 3);
    this.bpi[$r.MC].id = $r.MC;
    this.oEi[$r.MC] = Vv(60, 60, 0, ΔΔ[rt.bEi], 3);
    this.oEi[$r.MC].id = $r.MC;
    this.jAi = function () {
      for (var a = ax.DC.Ili, b = Ki, c = 10, d = xn; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.RAi = function () {
      var a = Math.floor((10 + this.bpi[Ng].info.ME[Vd].width) * Math.floor((3 + ax.DC.Ili.length) / 4) + 35);
      for (var b = 0; b < this.bpi.length; b++) {
        if (this.bpi[b]) {
          this.bpi[b].info.translate.x = a;
          this.bpi[b].info.translate.y = 22;
        }
      }
      this.kpi.info.translate.x = a + pd;
      this.kpi.info.translate.y = 22 + ΔΔ[rt.sh].height;
      this.vpi.info.translate.x = a + rc;
      this.vpi.info.translate.y = 30;
      this.ypi.info.translate.x = a + Ne;
      this.ypi.info.translate.y = 22 + ΔΔ[rt.sh].height;
    };
    this.vEi = function () {
      var a = Math.floor((sa - ΔΔ[rt.fm][0].width) / Cs);
      for (var b = 0; b < this.Lpi.length; b++) {
        this.Lpi[b].button.info.translate.x = a;
        this.Lpi[b].button.info.translate.y = -13;
      }
    };
    this.WAi = function () {
      var a = Eo + Math.floor((ue + this.Ypi.info.ME[du].width) * Math.floor((on + ax.DC.Ili.length) / 4) + 35);
      this.Ypi.info.translate.x = a;
      this.Ypi.info.translate.y = 33;
      this.Kpi.info.translate.x = this.Ypi.info.translate.x;
      this.Kpi.info.translate.y = 137;
      this.Jpi.info.translate.x = this.Ypi.info.translate.x;
      this.Jpi.info.translate.y = 240;
    };
    this.qAi = function () {
      var a = Ta + Math.floor((10 + this.tpi.info.ME[Ou].width) * Math.floor((Wc + ax.DC.Ili.length) / 4) + 35);
      this.tpi.info.translate.x = a;
      this.tpi.info.translate.y = 36;
      a += 83;
      this.epi.info.translate.x = a;
      this.epi.info.translate.y = 36;
      this.npi.info.translate.x = a;
      this.npi.info.translate.y = 36;
      this.api.info.translate.x = a;
      this.api.info.translate.y = 36;
      this.spi.info.translate.x = a;
      this.spi.info.translate.y = 36;
      this.rpi.info.translate.x = a;
      this.rpi.info.translate.y = 36;
    };
    this.GAi = function () {
      var a = md + Math.floor(Math.floor((3 + ax.DC.Ili.length) / Dd) * (10 + this.Epi.info.ME[so].width) + 35);
      this.Epi.info.translate.x = a;
      this.Epi.info.translate.y = 36;
      a += 83;
      this.Cpi.info.translate.x = a;
      this.Cpi.info.translate.y = 36;
    };
    this.LAi = function () {
      var a = Math.floor((ar + this.wpi.info.ME[0].width) * Math.floor((jh + ax.DC.Ili.length) / 4) + 35);
      this.wpi.info.translate.x = a;
      this.wpi.info.translate.y = 22;
    };
    this.yAi = function () {
      var a = ax.Lfi.Rfi;
      if (Js < a.length) {
        var b = Math.floor((sa - ax.Lfi.max * (a[Jj].info.width + 5)) / 2);
      }
      for (var c = xn; a.length > c; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = oa - a[c].info.width - jn;
        this.uli[a[c].id].info.translate.x = a[c].info.translate.x + M;
        this.uli[a[c].id].info.translate.y = a[c].info.translate.y - this.uli[a[c].id].info.ME[0].height - 6;
      }
    };
    var l;
    var n = sh;
    function p() {
      j.mi();
      if (++n == 30) {
        j.gMi();
        j.mi();
        return;
      }
      aj.setTimeout(p, 33);
    }
    this.JAi = function (a) {
      if (ax.rAi.open) {
        ax.rAi.JAi();
      }
      if (ax.oAi.open) {
        ax.oAi.JAi();
      }
      document.getElementById("team_box").style.display = "none";
      j.dDi.style.display = "none";
      j.dDi.open = ui;
      j.sign.style.display = "none";
      j.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.KDi.open = ui;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = ui;
      document.getElementById("sure_delete").style.display = "none";
      j.CAi.open = Zh;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.xDi.open = zn;
      document.getElementById("chronoquest").style.display = "none";
      j.SDi.open = Mr;
      l = a;
      j.cMi();
      j.vli.style.cursor = j.rwi;
      dx.JAi();
      c = -1;
      q();
      kk();
    };
    var c = -au;
    function q() {
      j.mi();
      if (++c == 30) {
        j.stop();
        l();
        return;
      }
      aj.setTimeout(q, 33);
    }
    this.Ji = false;
    this.stop = function () {
      this.Ji = ks;
    };
    this.eki = function () {
      ᐃΔΔᐃ.yEi();
      j.Ji = Xn;
      c = -1;
      n = sh;
      p();
    };
    this.mi = function () {
      this.lli.translate.x = sa - this.lli.ME.width - wd;
      this.lli.translate.y = 5;
      ck.Xpi.translate.x = this.lli.translate.x - ΔΔ[rt.wp][0].width - 85;
      ck.Xpi.translate.y = wd;
      this.KDi.button.info.translate.x = this.lli.translate.x - ΔΔ[rt.sp][0].width - no;
      this.KDi.button.info.translate.y = 10;
      this.SDi.button.info.translate.x = this.lli.translate.x - ΔΔ[rt.Zp][0].width - to;
      this.SDi.button.info.translate.y = this.KDi.button.info.translate.y + ΔΔ[rt.sp][0].height + 5;
      this.options.button.info.translate.x = this.lli.translate.x - ΔΔ[rt.Bp][0].width - 20;
      this.options.button.info.translate.y = this.SDi.button.info.translate.y + ΔΔ[rt.Bp][0].height + 18;
      this.nDi.aDi.info.translate.x = this.lli.translate.x - ΔΔ[rt.Bp][Vd].width - 20;
      this.nDi.aDi.info.translate.y = this.options.button.info.translate.y + ΔΔ[rt.El][Nf].height;
      this.nDi.sDi.info.translate.x = this.lli.translate.x - ΔΔ[rt.Bp][Js].width - 20;
      this.nDi.sDi.info.translate.y = this.options.button.info.translate.y + ΔΔ[rt.El][Vd].height;
      this.dDi.button.info.translate.x = this.lli.translate.x - ΔΔ[rt.Rl][0].width - Wo;
      this.dDi.button.info.translate.y = this.nDi.aDi.info.translate.y + ΔΔ[rt.Rl][0].height;
      ax.Zpi.translate.x = this.lli.translate.x - 63 - 85;
      ax.Zpi.translate.y = 100;
      ax.MAi.translate.x = this.lli.translate.x - ΔΔ[rt.Cd].width - 85;
      ax.MAi.translate.y = ax.Zpi.translate.y + 10 + ΔΔ[rt.tm].height;
      this.Gfi.translate.y = oa - fa - 193;
      this.Gfi.translate.x = sa - 3 - 193;
      this.tli.translate.x = Au;
      this.tli.translate.y = oa - this.tli.ME.height - br;
      this.Vki.button.info.translate.x = ca - 45.5;
      this.Vki.button.info.translate.y = 50;
      this.jAi();
      this.yAi();
      this.RAi();
      this.LAi();
      this.GAi();
      this.qAi();
      this.WAi();
      this.vEi();
      this.sign.NAi();
      zl();
      ax.rAi.mi();
      ax.oAi.mi();
      this.eDi.mi();
      this.KDi.$Di.mi();
      this.KDi.list.mi();
      this.CAi.mi();
      this.xDi.mi();
      this.SDi.mi();
      this.Vki.mi();
      this.options.mi();
      this.dDi.mi();
      this.sign.mi();
      var a = 0;
      if (n != 30) {
        a = 1500 / (n + Lh) - 50;
      }
      if (c != -1) {
        a = -(1500 / (30 - c + Ps) - 48);
      }
      this.Vki.button.info.translate.y -= a > nj ? a : -a;
      this.lli.translate.y -= so < a ? a : -a;
      ax.Zpi.translate.y -= a > 0 ? a : -a;
      ax.MAi.translate.y -= a > bd ? a : -a;
      this.KDi.button.info.translate.y -= Ng < a ? a : -a;
      this.SDi.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.dDi.button.info.translate.y -= Jj < a ? a : -a;
      this.nDi.aDi.info.translate.y -= Ka < a ? a : -a;
      this.nDi.sDi.info.translate.y -= a > 0 ? a : -a;
      ck.Xpi.translate.y -= a > 0 ? a : -a;
      this.tli.translate.y -= a < 0 ? a : -a;
      this.Gfi.translate.y -= a < Ng ? a : -a;
    };
    this.kEi = function () {
      if (!ax.ubi.enabled && this.awi && !ax.Qpi) {
        Ul();
      }
      Ll();
      (function () {
        var a = ck.Kfi[lw.$E];
        if (ck.mode === iw.Cli || ck.mode === iw.Qli || iw.wli === ck.mode || ck.mode === iw.zli || iw.xli === ck.mode || ck.mode === iw.Bli) {
          for (var b = 0; b < a.length; b++) {
            a[b].Zyi();
          }
        } else if (iw.kli === ck.mode) {
          for (b = Gc; b < a.length; b++) {
            if (ax.xpi || ax.MAi.enabled || a[b].qbi.Ali !== "spectator") {
              a[b].Zyi();
            }
          }
        }
      })();
      Cr.Ki();
      if (this.awi) {
        yl();
        if (this.iDi === fi) {
          this.KDi.button.Sfi(f);
        }
        if (iw.wli !== ck.mode && ck.mode !== iw.zli && iw.xli !== ck.mode && this.tDi === 1) {
          this.SDi.button.Sfi(f);
        }
        this.options.button.Sfi(f);
        if (Lo === this.AEi) {
          this.dDi.button.Sfi(f);
        }
        if (dx.eki) {
          this.nDi.aDi.Sfi(f);
        } else {
          this.nDi.sDi.Sfi(f);
        }
        Nl();
        Tl();
        this.tli.Sfi();
        tb();
        Zl();
        eb();
        Vl();
        Gl();
        Ml();
        Bl();
        (function () {
          if (!ax.Ufi.open && !ax.Ofi.open && !ax.opi.open && !ax.hpi.open && !ax.Yfi.open) {
            ax.fli.open = false;
            var b = ck.Nfi[ax.Hfi];
            var c = iw.kyi;
            if (b) {
              for (var d = 0; d < ck.Kfi[lw.eE].length; d++) {
                var f = ck.Kfi[lw.eE][d];
                var g = ⵠⵠⵠⲆ.j(f, b);
                if (g < c) {
                  c = g;
                  ax.fli.open = true;
                  ax.fli.$fi = f.$fi;
                  ax.fli.ipi = f.id;
                }
              }
            }
          }
        })();
        Dl();
        kl();
        Il();
        Al();
        zl();
        Ql();
      }
      if (ax.ubi.enabled) {
        Sl();
      }
      xl();
      if (this.awi && this.$Bi === 1) {
        Pl();
      }
      ax.HAi.Sfi();
      ax.alert.Sfi(lj[wh], "#000");
      if (this.awi) {
        ax.ubi.Sfi();
        ax.Vki.Sfi();
        ax.Lfi.lAi.Sfi(lk.Kbi.x, lk.Kbi.y);
      }
      El();
    };
    this.wEi = function () {
      ax.Oi.mi();
      ax.tli.mi();
      if (!ax.reconnect.enabled && ax.wki) {
        ax.control.mi();
        ax.Zpi.mi();
      }
      ck.mi();
      this.SDi.UDi();
    };
    this.MEi = function () {
      Qv();
    };
    this.BEi = function () {
      ᐃΔΔᐃ.DEi();
      ᐃΔΔᐃ.EEi();
      ᐃΔΔᐃ.CEi();
      ᐃΔΔᐃ.zEi();
    };
    this.Sfi = function () {
      if (!ax.reconnect.enabled && ax.wki) {
        this.BEi();
      }
      dx.xEi();
      this.wEi();
      if (ok.eBi !== 1) {
        this.MEi();
        this.kEi();
      } else {
        var a = Δᐃ.kN;
        _l(f, a, ca - a.width / 4, Kq - a.height / Gs, a.width / 2, a.height / ih);
      }
    };
    this.QEi = function (a) {
      if (ax.rAi.open && a.keyCode === 27) {
        ax.rAi.JAi();
      } else if (ax.oAi.open && a.keyCode === 27) {
        ax.oAi.JAi();
      } else if (ax.rAi.open || ax.oAi.open || a.keyCode != 79 || c != -fo) {
        if (Fe == a.keyCode && c == -1) {
          if (ax.oAi.open) {
            ax.oAi.iwi();
          } else {
            ax.rAi.eki();
          }
        } else if (!ax.rAi.open && !ax.oAi.open) {
          if (a.keyCode === 82) {
            ax.Zpi.BAi();
          } else if (a.keyCode !== 80 || ck.mode !== iw.kli || ax.xpi) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (ax.DC.id < 0) {
                var b = a.keyCode - 49;
                var d = ax.Lfi.Rfi[b];
                if (d) {
                  ᐃΔΔᐃ.zAi(d.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              ax.Gpi = !ax.Gpi;
            } else if (a.keyCode == 71) {
              ax.DC.SAi();
            }
          } else {
            ax.MAi.BAi();
          }
        }
      } else {
        ax.oAi.$Ai();
      }
      pk.Xli(a);
    };
    this.SEi = function (a) {
      pk.cDi(a);
      if (Sm == a.keyCode && !ax.rAi.open && !ax.oAi.open) {
        a.preventDefault();
      }
    };
    this.YBi = function (b) {
      lk.Kbi = _v(j.vli, b);
      var d = ks;
      if (Oq > ax.DC.Sli) {
        j.Gfi.focus(lk.Kbi);
      }
      var f = ax.Ufi;
      if (ax.DC.id < 0 && f.id >= 0 && (!ax.Ufi.lock || ax.Ufi.$fi === ax.id)) {
        d |= j.bpi[ax.Ufi.id].Jvi(j.vli, lk.Kbi, Ov);
      }
      var e = ax.opi;
      if (e.open && du < e.Dpi) {
        d |= j.Cpi.Jvi(j.vli, lk.Kbi, Ov);
      }
      var a = ax.Yfi;
      if (a.open && a.Zfi > 0) {
        d |= j.epi.Jvi(j.vli, lk.Kbi, Ov);
        d |= j.npi.Jvi(j.vli, lk.Kbi, Ov);
        d |= j.api.Jvi(j.vli, lk.Kbi, Ov);
        d |= j.spi.Jvi(j.vli, lk.Kbi, Ov);
        d |= j.rpi.Jvi(j.vli, lk.Kbi, Ov);
      }
      var i = ax.hpi;
      if (i.open && i.Opi > 0) {
        d |= j.Jpi.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (ax.sign.open) {
        d |= j.sign.button.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (!ax.Ufi.lock) {
        if (ax.Ufi.mpi) {
          d |= j.ypi.Jvi(j.vli, lk.Kbi, Ov);
        }
      }
      if (ax.Ufi.cpi) {
        d |= j.kpi.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (nj > ax.DC.id && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.options.open && !j.dDi.open) {
        for (var k = ax.Lfi.Rfi, l = Oq; l < k.length; l++) {
          var m = k[l].Jvi(j.vli, lk.Kbi, Ov);
          d |= m;
          if (m) {
            ax.Lfi.lAi.start(l, lk.Kbi);
          }
          if (f.open && (f.id < 0 || k[l].id == f.id) || ax.Ofi.open && $r.aE === k[l].id || ax.fli.open && $r.iE === k[l].id || ax.hpi.open && ($r.aE === k[l].id || $r.sa === k[l].id) || ax.opi.open && $r.ha === k[l].id || ax.Yfi.open && $r.aE === k[l].id) {
            d |= j.uli[k[l].id].Jvi(j.vli, lk.Kbi, Ov);
          }
        }
      }
      if (ax.Npi.open) {
        d |= j.Npi.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (j.Ipi != -yd) {
        if (d |= j.Lpi[j.Ipi].button.Jvi(j.vli, lk.Kbi, Ov)) {
          var n = Rg;
        }
      } else {
        n = false;
      }
      if (ax.DC.id < 0 && ax.DC.Sli < du && !n && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.dDi.open && !ax.Qpi) {
        k = ax.DC.Ili;
        l = 0;
        for (; k.length > l; l++) {
          d |= k[l].Jvi(j.vli, lk.Kbi, Ov);
        }
      }
      if (Ka > ax.DC.id && ax.DC.Sli < 0 && !!ax.Vki.open && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.SDi.open && !j.dDi.open) {
        d |= j.Vki.button.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (ax.DC.Sli < 0 && !j.CAi.open && !j.options.open && !j.xDi.open && !j.SDi.open && !j.dDi.open) {
        d |= j.KDi.button.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (ax.DC.Sli < 0 && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.dDi.open) {
        d |= j.options.button.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (nj > ax.DC.Sli && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.options.open) {
        d |= j.dDi.button.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (Nf > ax.DC.Sli && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.options.open && !j.dDi.open) {
        if (dx.eki) {
          d |= j.nDi.aDi.Jvi(j.vli, lk.Kbi, Ov);
        } else {
          d |= j.nDi.sDi.Jvi(j.vli, lk.Kbi, Ov);
        }
      }
      if (ax.DC.Sli < 0 && !j.KDi.open && !j.dDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && iw.wli !== ck.mode && iw.zli !== ck.mode && iw.xli !== ck.mode) {
        d |= j.SDi.button.Jvi(j.vli, lk.Kbi, Ov);
      }
      if (!d && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.SDi.open && !j.dDi.open && !j.sign.open) {
        if (ax.DC.Sli >= 0) {
          ᐃΔΔᐃ.IEi();
        } else if (!n) {
          lk.cDi();
        }
      }
    };
    this.JBi = function (b) {
      lk.Kbi = _v(j.vli, b);
      lk.Xli();
      if (!ax.Lfi.lAi.release()) {
        var f = ax.Ufi;
        var i = ax.Ofi;
        var e = ax.fli;
        var a = ax.opi;
        var k = ax.Yfi;
        var l = ax.hpi;
        if (ax.control.attack) {
          ax.control.attack = 0;
          ᐃΔΔᐃ._Ei();
        }
        if (j.Ipi != -1) {
          var m = j.Lpi[j.Ipi].button.Jvi(j.vli, lk.Kbi, Wv);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            j.Lpi[j.Ipi].action();
          }
        }
        if (ax.DC.id < 0 && f.id >= 0 && !j.CAi.open) {
          if (!ax.Ufi.lock || ax.id === ax.Ufi.$fi) {
            if (m = j.bpi[ax.Ufi.id].Jvi(j.vli, lk.Kbi, Wv)) {
              ᐃΔΔᐃ.FEi(f);
            }
          }
        }
        if ((a = ax.opi).open && Sh < a.Dpi && !j.CAi.open) {
          if (m = j.Cpi.Jvi(j.vli, lk.Kbi, Wv)) {
            ᐃΔΔᐃ.PEi(a);
          }
        }
        if ((k = ax.Yfi).open && k.Zfi > 0 && !j.CAi.open) {
          switch (k.type) {
            case lw.Ca:
              if (m = j.epi.Jvi(j.vli, lk.Kbi, Wv)) {
                ᐃΔΔᐃ.TEi(k);
              }
              break;
            case lw.za:
              if (m = j.npi.Jvi(j.vli, lk.Kbi, Wv)) {
                ᐃΔΔᐃ.TEi(k);
              }
              break;
            case lw.xa:
              if (m = j.api.Jvi(j.vli, lk.Kbi, Wv)) {
                ᐃΔΔᐃ.TEi(k);
              }
              break;
            case lw.Qa:
              if (m = j.spi.Jvi(j.vli, lk.Kbi, Wv)) {
                ᐃΔΔᐃ.TEi(k);
              }
              break;
            case lw.Sa:
              if (m = j.rpi.Jvi(j.vli, lk.Kbi, Wv)) {
                ᐃΔΔᐃ.TEi(k);
              }
          }
        }
        if ((l = ax.hpi).open && l.Opi > 0 && !j.CAi.open) {
          if (m = j.Jpi.Jvi(j.vli, lk.Kbi, Wv)) {
            ᐃΔΔᐃ.jEi(l);
          }
        }
        if (ax.sign.open && !j.CAi.open) {
          if (m = j.sign.button.Jvi(j.vli, lk.Kbi, Wv)) {
            j.sign.select();
          }
        }
        if (!ax.Ufi.lock && !j.CAi.open) {
          if (ax.Ufi.mpi && (m = j.ypi.Jvi(j.vli, lk.Kbi, Wv))) {
            ᐃΔΔᐃ.REi(f);
          }
        }
        if (ax.Ufi.cpi && !j.CAi.open && (m = j.kpi.Jvi(j.vli, lk.Kbi, Wv))) {
          ᐃΔΔᐃ.LEi(f);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (ax.Npi.open) {
          if (m = j.Npi.Jvi(j.vli, lk.Kbi, Wv)) {
            ᐃΔΔᐃ.Npi();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (ax.DC.id < 0 && !ax.ubi.enabled && !j.CAi.open) {
          for (var g = ax.Lfi.Rfi, p = xn; p < g.length; p++) {
            if (m = g[p].Jvi(j.vli, lk.Kbi, Wv)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || E == b.which) && ax.DC.Sli < 0) {
                  j.CAi._Ai(g[p].id);
                }
              } else {
                ᐃΔΔᐃ.zAi(g[p].id, p);
              }
            } else if (f.open && (f.id < du || g[p].id === f.id)) {
              if ((m = j.uli[g[p].id].Jvi(j.vli, lk.Kbi, Wv)) && ax.DC.Sli < 0) {
                ᐃΔΔᐃ.GEi(f, g[p].id, b.shiftKey ? 10 : lt);
              }
            } else if (e.open && $r.iE === g[p].id) {
              if ((m = j.uli[g[p].id].Jvi(j.vli, lk.Kbi, Wv)) && ax.DC.Sli < 0) {
                ᐃΔΔᐃ.qEi(e);
              }
            } else if (i.open && $r.aE === g[p].id) {
              if ((m = j.uli[g[p].id].Jvi(j.vli, lk.Kbi, Wv)) && ax.DC.Sli < du) {
                ᐃΔΔᐃ.WEi(i, b.shiftKey ? jn : ja);
              }
            } else if (a.open && $r.ha === g[p].id) {
              if ((m = j.uli[g[p].id].Jvi(j.vli, lk.Kbi, Wv)) && ax.DC.Sli < 0) {
                ᐃΔΔᐃ.NEi(a, b.shiftKey ? ue : 1);
              }
            } else if (k.open && $r.aE === g[p].id) {
              if ((m = j.uli[g[p].id].Jvi(j.vli, lk.Kbi, Wv)) && Js > ax.DC.Sli) {
                ᐃΔΔᐃ.HEi(k, b.shiftKey ? 10 : 1);
              }
            } else if (l.open && ($r.aE === g[p].id || g[p].id === $r.sa)) {
              if ((m = j.uli[g[p].id].Jvi(j.vli, lk.Kbi, Wv)) && ax.DC.Sli < 0) {
                if ($r.aE === g[p].id) {
                  ᐃΔΔᐃ.UEi(l, b.shiftKey ? 10 : 1, Ea);
                } else {
                  ᐃΔΔᐃ.UEi(l, Vd, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (ax.DC.id < 0 && ax.DC.Sli < Gc && !ax.ubi.enabled && !j.CAi.open && !ax.Qpi) {
          g = ax.DC.Ili;
          p = 0;
          for (; p < g.length; p++) {
            if (m = g[p].Jvi(j.vli, lk.Kbi, Wv)) {
              ᐃⲆΔⵠⲆ = ᐃΔΔᐃ.OEi(g[p].id);
              if (ᐃⲆΔⵠⲆ && ga) {
                ga("send", "event", "Game", "craft", go[st[g[p].id].zE].name);
              }
            }
          }
        }
        if (ax.DC.id < 0 && ax.DC.Sli < qh && ax.Vki.open && !j.dDi.open && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.SDi.open) {
          if (m = j.Vki.button.Jvi(j.vli, lk.Kbi, Uv)) {
            cx.Vki.select();
          }
        }
        if (Oq > ax.DC.Sli && !j.KDi.open && !j.CAi.open && !j.dDi.open && !j.xDi.open && !j.SDi.open && !j.options.open) {
          if (dx.eki) {
            if (m = j.nDi.aDi.Jvi(j.vli, lk.Kbi, Wv)) {
              dx.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = j.nDi.sDi.Jvi(j.vli, lk.Kbi, Wv)) {
            dx.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (ax.DC.Sli < 0 && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.dDi.open) {
          if (m = j.options.button.Jvi(j.vli, lk.Kbi, Wv)) {
            j.options.BDi();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (ax.DC.Sli < so && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.options.open && j.AEi === fo) {
          if (m = j.dDi.button.Jvi(j.vli, lk.Kbi, Wv)) {
            j.dDi.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (ax.DC.Sli < 0 && !j.CAi.open && !j.dDi.open && !j.options.open && !j.xDi.open && !j.SDi.open && Ko === j.iDi) {
          if (m = j.KDi.button.Jvi(j.vli, lk.Kbi, Wv)) {
            j.KDi.iEi();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (ax.DC.Sli < ke && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.dDi.open && iw.wli !== ck.mode && iw.zli !== ck.mode && iw.xli !== ck.mode && j.tDi === 1) {
          if (m = j.SDi.button.Jvi(j.vli, lk.Kbi, Wv)) {
            j.SDi.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (ax.DC.cli && oe == b.which) {
          j.xDi._Ai();
        }
      }
    };
    this.KBi = Mr;
    this.XBi = function (d) {
      lk.Kbi = _v(j.vli, d);
      var f = false;
      cx.qpi.display = 0;
      ax.Lfi.lAi.N(lk.Kbi);
      if (j.Ipi != -fi) {
        f |= j.Lpi[j.Ipi].button.Jvi(j.vli, lk.Kbi, Uv);
      }
      var i = ax.opi;
      if (i.open && i.Dpi > 0) {
        f |= j.Cpi.Jvi(j.vli, lk.Kbi, Uv);
      }
      var a = ax.Yfi;
      if (a.open && Ou < a.Zfi) {
        f |= j.epi.Jvi(j.vli, lk.Kbi, Uv);
        f |= j.npi.Jvi(j.vli, lk.Kbi, Uv);
        f |= j.api.Jvi(j.vli, lk.Kbi, Uv);
        f |= j.spi.Jvi(j.vli, lk.Kbi, Uv);
        f |= j.rpi.Jvi(j.vli, lk.Kbi, Uv);
      }
      var k = ax.hpi;
      if (k.open && k.Opi > Ng) {
        f |= j.Jpi.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (ax.sign.open) {
        f |= j.sign.button.Jvi(j.vli, lk.Kbi, Uv);
      }
      var l = ax.Ufi;
      if (ax.DC.id < 0 && l.id >= Gc && !ax.ubi.enabled && (!ax.Ufi.lock || ax.Ufi.$fi === ax.id)) {
        f |= j.bpi[l.id].Jvi(j.vli, lk.Kbi, Uv);
      }
      if (ax.Npi.open) {
        f |= j.Npi.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (!ax.Ufi.lock && !ax.ubi.enabled) {
        if (ax.Ufi.mpi) {
          f |= j.ypi.Jvi(j.vli, lk.Kbi, Uv);
        }
      }
      if (ax.Ufi.cpi && !ax.ubi.enabled) {
        f |= j.kpi.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (sh > ax.DC.id && !ax.ubi.enabled) {
        for (var m = ax.Lfi.Rfi, n = 0; n < m.length; n++) {
          var o = m[n].Jvi(j.vli, lk.Kbi, Uv);
          f |= cx.qpi.Jvi(o, m[n], 0);
          if (l.open && (xn > l.id || m[n].id == l.id) || ax.Ofi.open && $r.aE == m[n].id || ax.fli.open && m[n].id === $r.iE || ax.hpi.open && (m[n].id == $r.aE || m[n].id == $r.sa) || ax.opi.open && $r.ha == m[n].id || ax.Yfi.open && $r.aE == m[n].id) {
            f |= j.uli[m[n].id].Jvi(j.vli, lk.Kbi, Uv);
          }
        }
      }
      if (ax.DC.id < 0 && ax.DC.Sli < ke && !ax.ubi.enabled && !ax.Qpi) {
        m = ax.DC.Ili;
        n = 0;
        for (; m.length > n; n++) {
          o = Ys;
          o = m[n].Jvi(j.vli, lk.Kbi, Uv);
          f |= cx.qpi.Jvi(o, m[n], 1);
        }
      }
      if (Ea > ax.DC.id && ax.DC.Sli < Ou && ax.Vki.open && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.SDi.open && !j.dDi.open) {
        f |= j.Vki.button.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (ax.DC.Sli < nj && !j.CAi.open && !j.options.open && !j.xDi.open && !j.SDi.open && !j.dDi.open && j.iDi === 1) {
        f |= j.KDi.button.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (Jj > ax.DC.Sli && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.dDi.open) {
        f |= j.options.button.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (ax.DC.Sli < 0 && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.options.open && j.AEi === 1) {
        f |= j.dDi.button.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (ax.DC.Sli < Sh && !j.KDi.open && !j.CAi.open && !j.xDi.open && !j.SDi.open && !j.options.open && !j.dDi.open) {
        if (dx.eki) {
          f |= j.nDi.aDi.Jvi(j.vli, lk.Kbi, Uv);
        } else {
          f |= j.nDi.sDi.Jvi(j.vli, lk.Kbi, Uv);
        }
      }
      if (ax.DC.Sli < 0 && !j.KDi.open && !j.CAi.open && !j.options.open && !j.xDi.open && !j.dDi.open && iw.wli !== ck.mode && iw.zli !== ck.mode && iw.YEi !== ck.mode && ae === j.tDi) {
        f |= j.SDi.button.Jvi(j.vli, lk.Kbi, Uv);
      }
      if (j.KBi !== f) {
        j.KBi = f;
        b.style.cursor = f ? j.owi : j.rwi;
      }
    };
    this.gMi = function () {
      aj.addEventListener("mousedown", this.YBi, cc);
      aj.addEventListener("mouseup", this.JBi, Qh);
      aj.addEventListener("mousemove", this.XBi, Qc);
      aj.addEventListener("keyup", this.QEi, kg);
      aj.addEventListener("keydown", this.SEi, wo);
    };
    this.cMi = function () {
      aj.removeEventListener("mousedown", this.YBi, false);
      aj.removeEventListener("mouseup", this.JBi, false);
      aj.removeEventListener("mousemove", this.XBi, oj);
      aj.removeEventListener("keyup", this.QEi, Xq);
      aj.removeEventListener("keydown", this.SEi, false);
    };
  }
  function Qw(b, c, d, e, f, a) {
    Bq(Zc, b, c, d, e, f, a);
    const g = Er(id[ke], id[1], id[hu], id[3], id[Gs]);
    const h = Er(id[5], id[0], id[1], id[2], id[mq]);
    return (0 << ((g ^ h) >> 8 & 255)) + (16 << ((g ^ h) & 255)) + (8 << ((g ^ h) >> 24 & 255)) + (24 << ((g ^ h) >> 16 & 255));
  }
  function Rw() {
    ⵠⵠⵠⲆ.l("https://twitter.com/intent/tweet?text=I%20survived%20" + ax.pfi + "%20days%20with%20" + ax.Oki.Eli + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Sw(b, c, d, e, f) {
    const a = e ^ 22753;
    const g = (24 << (f & 255)) + (16 << (f >> 24 & 255)) + (8 << (f >> 8 & us)) + (0 << (f >> 16 & 255));
    const h = Hw(b ^ 38193, ((c + 14625) * 1103515245 + 12345) % 2147483648, ~(d & 47880) & (d | 47880));
    Ow(a, g);
    return (h | 61421) & ~(h & 61421);
  }
  (function () {
    function b() {
      this.Vi();
    }
    b.prototype = {
      Vi: function () {
        var a = this || j;
        a.JEi = 1000;
        a.KEi = {};
        a.XEi = [];
        a.VEi = false;
        a.ZEi = 1;
        a.$Ei = "canplaythrough";
        a.iCi = typeof aj != "undefined" && aj.navigator ? aj.navigator : null;
        a.tCi = null;
        a.eCi = false;
        a.nCi = true;
        a.aCi = true;
        a.yli = null;
        a.sCi = true;
        a.rCi();
        return a;
      },
      volume: function (b) {
        var c = this || j;
        b = parseFloat(b);
        if (!c.yli) {
          g();
        }
        if (b !== undefined && b >= Jj && b <= 1) {
          c.ZEi = b;
          if (c.VEi) {
            return c;
          }
          if (c.nCi) {
            c.tCi.gain.value = b;
          }
          for (var d = Jj; d < c.XEi.length; d++) {
            if (!c.XEi[d].oCi) {
              for (var e = c.XEi[d].hCi(), f = 0; f < e.length; f++) {
                var h = c.XEi[d].gCi(e[f]);
                if (h && h.cCi) {
                  h.cCi.volume = h.ZEi * b;
                }
              }
            }
          }
          return c;
        }
        return c.ZEi;
      },
      dCi: function (b) {
        var c = this || j;
        if (!c.yli) {
          g();
        }
        c.VEi = b;
        if (c.nCi) {
          c.tCi.gain.value = b ? 0 : c.ZEi;
        }
        for (var d = 0; d < c.XEi.length; d++) {
          if (!c.XEi[d].oCi) {
            for (var e = c.XEi[d].hCi(), f = Vd; f < e.length; f++) {
              var h = c.XEi[d].gCi(e[f]);
              if (h && h.cCi) {
                h.cCi.muted = !!b || h.VEi;
              }
            }
          }
        }
        return c;
      },
      mCi: function () {
        var a = this || j;
        for (var b = a.XEi.length - yd; b >= Js; b--) {
          a.XEi[b].mCi();
        }
        if (a.nCi && a.yli && a.yli.close !== undefined) {
          a.yli.close();
          a.yli = null;
          g();
        }
        return a;
      },
      uCi: function (a) {
        return (this || j).KEi[a.replace(/^x-/, "")];
      },
      rCi: function () {
        var a = this || j;
        a.state = a.yli && a.yli.state || "running";
        a.fCi();
        if (!a.nCi) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.$Ei = "canplay";
              }
            } catch (b) {
              a.eCi = true;
            }
          } else {
            a.eCi = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.eCi = true;
          }
        } catch (a) {}
        if (!a.eCi) {
          a.pCi();
        }
        return a;
      },
      pCi: function () {
        var b = this || j;
        var c = null;
        try {
          c = typeof Audio != "undefined" ? new Audio() : null;
        } catch (a) {
          return b;
        }
        if (!c || typeof c.canPlayType != "function") {
          return b;
        }
        var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var e = b.iCi && b.iCi.userAgent.match(/OPR\/([0-6].)/g);
        var a = e && parseInt(e[Ou].split("/")[1], rs) < 33;
        b.KEi = {
          lCi: !a && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
          bCi: !!d,
          vCi: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          yCi: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          kCi: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ACi: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          wCi: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
          MCi: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          BCi: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          DCi: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ECi: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          CCi: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          zCi: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          xCi: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return b;
      },
      QCi: function () {
        var b = this || j;
        var c = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.iCi && b.iCi.userAgent);
        var d = !!("ontouchend" in aj) || !!b.iCi && b.iCi.maxTouchPoints > Oq || !!b.iCi && b.iCi.SCi > sh;
        if (!b.ICi && b.yli && (c || d)) {
          b.ICi = !Ej;
          if (!b._Ci && b.yli.sampleRate !== 44100) {
            b._Ci = true;
            b.mCi();
          }
          b.FCi = b.yli.createBuffer(1, yd, 22050);
          function a() {
            j.PCi();
            var c = b.yli.createBufferSource();
            c.buffer = b.FCi;
            c.connect(b.yli.destination);
            if (c.start === undefined) {
              c.TCi(0);
            } else {
              c.start(Sh);
            }
            if (typeof b.yli.resume == "function") {
              b.yli.resume();
            }
            c.onended = function () {
              c.disconnect(0);
              b.ICi = !Nf;
              b.sCi = !dm;
              document.removeEventListener("touchend", a, true);
            };
          }
          document.addEventListener("touchend", a, !so);
          return b;
        }
      },
      fCi: function () {
        var a = this;
        if (a.aCi && a.yli && a.yli.suspend !== undefined && j.nCi) {
          for (var b = 0; b < a.XEi.length; b++) {
            if (a.XEi[b].oCi) {
              for (var c = 0; c < a.XEi[b].jCi.length; c++) {
                if (!a.XEi[b].jCi[c].RCi) {
                  return a;
                }
              }
            }
          }
          if (a.LCi) {
            clearTimeout(a.LCi);
          }
          a.LCi = setTimeout(function () {
            if (a.aCi) {
              a.LCi = null;
              a.state = "suspending";
              a.yli.suspend().then(function () {
                a.state = "suspended";
                if (a.GCi) {
                  delete a.GCi;
                  a.PCi();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      PCi: function () {
        var a = this;
        if (a.yli && a.yli.resume !== undefined && j.nCi) {
          if (a.state === "running" && a.LCi) {
            clearTimeout(a.LCi);
            a.LCi = null;
          } else if (a.state === "suspended") {
            a.yli.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.XEi.length; b++) {
                a.XEi[b].qCi("resume");
              }
            });
            if (a.LCi) {
              clearTimeout(a.LCi);
              a.LCi = null;
            }
          } else if (a.state === "suspending") {
            a.GCi = !qh;
          }
          return a;
        }
      }
    };
    var j = new b();
    function d(a) {
      if (a.src && a.src.length !== 0) {
        this.Vi(a);
      } else {
        console.error(undefined);
      }
    }
    d.prototype = {
      Vi: function (a) {
        var b = this;
        if (!j.yli) {
          g();
        }
        b.WCi = a.autoplay || !hf;
        b.NCi = typeof a.HCi != "string" ? a.HCi : [a.HCi];
        b.UCi = a.OCi || false;
        b.VEi = a.dCi || !Ej;
        b.YCi = a.loop || !dm;
        b.JCi = a.KCi || 5;
        b.XCi = typeof a.preload != "boolean" || a.preload;
        b.VCi = a.rate || wg;
        b.ZCi = a.$Ci || {};
        b.vDi = typeof a.src != "string" ? a.src : [a.src];
        b.ZEi = a.volume !== undefined ? a.volume : 1;
        b.izi = 0;
        b.tzi = "unloaded";
        b.jCi = [];
        b.ezi = {};
        b.nzi = [];
        b.azi = a.onend ? [{
          szi: a.onend
        }] : [];
        b.rzi = a.ozi ? [{
          szi: a.ozi
        }] : [];
        b.hzi = a.onload ? [{
          szi: a.onload
        }] : [];
        b.gzi = a.czi ? [{
          szi: a.czi
        }] : [];
        b.dzi = a.onpause ? [{
          szi: a.onpause
        }] : [];
        b.mzi = a.onplay ? [{
          szi: a.onplay
        }] : [];
        b.uzi = a.onstop ? [{
          szi: a.onstop
        }] : [];
        b.fzi = a.onmute ? [{
          szi: a.onmute
        }] : [];
        b.pzi = a.lzi ? [{
          szi: a.lzi
        }] : [];
        b.bzi = a.vzi ? [{
          szi: a.vzi
        }] : [];
        b.yzi = a.kzi ? [{
          szi: a.kzi
        }] : [];
        b.Azi = [];
        b.oCi = j.nCi && !b.UCi;
        if (j.yli !== undefined && j.yli && j.sCi) {
          j.QCi();
        }
        j.XEi.push(b);
        if (b.WCi) {
          b.nzi.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.XCi) {
          b.load();
        }
        return b;
      },
      load: function () {
        var b = this;
        var c = null;
        if (!j.eCi) {
          if (typeof b.vDi == "string") {
            b.vDi = [b.vDi];
          }
          for (var d = 0; d < b.vDi.length; d++) {
            var f;
            var g;
            if (b.NCi && b.NCi[d]) {
              f = b.NCi[d];
            } else {
              if (typeof (g = b.vDi[d]) != "string") {
                b.qCi("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(f = /^data:audio\/([^;,]+);/i.exec(g))) {
                f = /\.([^.]+)$/.exec(g.split("?", Ps)[Sh]);
              }
              f &&= f[Ps].toLowerCase();
            }
            if (!f) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (f && j.uCi(f)) {
              c = b.vDi[d];
              break;
            }
          }
          if (c) {
            b.vDi = c;
            b.tzi = "loading";
            if (aj.location.protocol === "https:" && c.slice(0, Co) === "http:") {
              b.UCi = !Vd;
              b.oCi = false;
            }
            new e(b);
            if (b.oCi) {
              a(b);
            }
            return b;
          } else {
            b.qCi("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        b.qCi("loaderror", null, "No audio support.");
      },
      play: function (b, e) {
        var k = this;
        var a = null;
        if (typeof b == "number") {
          a = b;
          b = null;
        } else {
          if (typeof b == "string" && k.tzi === "loaded" && !k.ZCi[b]) {
            return null;
          }
          if (b === undefined) {
            b = "__default";
            var f = Js;
            for (var i = 0; i < k.jCi.length; i++) {
              if (k.jCi[i].RCi && !k.jCi[i].wzi) {
                f++;
                a = k.jCi[i].Xbi;
              }
            }
            if (Jf === f) {
              b = null;
            } else {
              a = null;
            }
          }
        }
        var n = a ? k.gCi(a) : k.Mzi();
        if (!n) {
          return null;
        }
        if (a && !b) {
          b = n.ZCi || "__default";
        }
        if (k.tzi !== "loaded") {
          n.ZCi = b;
          n.wzi = !ae;
          var h = n.Xbi;
          k.nzi.push({
            event: "play",
            action: function () {
              k.play(h);
            }
          });
          return h;
        }
        if (a && !n.RCi) {
          if (!e) {
            setTimeout(function () {
              k.qCi("play", n.Xbi);
            }, 0);
          }
          return n.Xbi;
        }
        if (k.oCi) {
          j.PCi();
        }
        var g = Math.max(0, n.Bzi > Ng ? n.Bzi : k.ZCi[b][bd] / 1000);
        var c = Math.max(Sh, (k.ZCi[b][0] + k.ZCi[b][Jf]) / 1000 - g);
        var d = c * 1000 / Math.abs(n.VCi);
        n.RCi = !ja;
        n.wzi = false;
        n.ZCi = b;
        n.Bzi = g;
        n.bAi = k.ZCi[b][bd] / 1000;
        n.Dzi = (k.ZCi[b][Sh] + k.ZCi[b][wg]) / 1000;
        n.YCi = !!n.YCi || !!k.ZCi[b][2];
        var m = n.cCi;
        if (k.oCi) {
          function a() {
            k.Ezi(n);
            var a = n.VEi || k.VEi ? 0 : n.ZEi;
            m.gain.setValueAtTime(a, j.yli.currentTime);
            n.Czi = j.yli.currentTime;
            if (m.zzi.start === undefined) {
              if (n.YCi) {
                m.zzi.xzi(Oq, g, 86400);
              } else {
                m.zzi.xzi(Nf, g, c);
              }
            } else if (n.YCi) {
              m.zzi.start(qh, g, 86400);
            } else {
              m.zzi.start(0, g, c);
            }
            if (d !== 1 / qh) {
              k.ezi[n.Xbi] = setTimeout(k.wzi.bind(k, n), d);
            }
            if (!e) {
              setTimeout(function () {
                k.qCi("play", n.Xbi);
              }, Ou);
            }
          }
          var q = j.state === "running";
          if (k.tzi === "loaded" && q) {
            a();
          } else {
            var p = q || k.tzi !== "loaded" ? "load" : "resume";
            k.once(p, a, q ? n.Xbi : null);
            k.Qzi(n.Xbi);
          }
        } else {
          function a() {
            m.currentTime = g;
            m.muted = n.VEi || k.VEi || j.VEi || m.muted;
            m.volume = n.ZEi * j.volume();
            m.playbackRate = n.VCi;
            m.play();
            if (d !== Ko / 0) {
              k.ezi[n.Xbi] = setTimeout(k.wzi.bind(k, n), d);
            }
            if (!e) {
              k.qCi("play", n.Xbi);
            }
          }
          var l = k.tzi === "loaded" && (aj && aj.Szi || !m.readyState && j.iCi.Izi);
          if (cn === m.readyState || l) {
            a();
          } else {
            function b() {
              a();
              m.removeEventListener(j.$Ei, b, !fn);
            }
            m.addEventListener(j.$Ei, b, !Ic);
            k.Qzi(n.Xbi);
          }
        }
        return n.Xbi;
      },
      pause: function (b) {
        var c = this;
        if (c.tzi !== "loaded") {
          c.nzi.push({
            event: "pause",
            action: function () {
              c.pause(b);
            }
          });
          return c;
        }
        for (var d = c.hCi(b), e = Ea; e < d.length; e++) {
          c.Qzi(d[e]);
          var f = c.gCi(d[e]);
          if (f && !f.RCi && (f.Bzi = c._zi(d[e]), f.Fzi = Ka, f.RCi = !Ea, c.Pzi(d[e]), f.cCi)) {
            if (c.oCi) {
              if (!f.cCi.zzi) {
                continue;
              }
              if (f.cCi.zzi.stop === undefined) {
                f.cCi.zzi.Tzi(Vd);
              } else {
                f.cCi.zzi.stop(0);
              }
              c.jzi(f.cCi);
            } else if (!isNaN(f.cCi.duration) || f.cCi.duration === Mc / Nf) {
              f.cCi.pause();
            }
          }
          if (!arguments[1]) {
            c.qCi("pause", f ? f.Xbi : null);
          }
        }
        return c;
      },
      stop: function (b, c) {
        var d = this;
        if (d.tzi !== "loaded") {
          d.nzi.push({
            event: "stop",
            action: function () {
              d.stop(b);
            }
          });
          return d;
        }
        for (var e = d.hCi(b), f = du; f < e.length; f++) {
          d.Qzi(e[f]);
          var g = d.gCi(e[f]);
          if (g) {
            g.Bzi = g.bAi || Vd;
            g.Fzi = 0;
            g.RCi = !Ou;
            g.wzi = !Sh;
            d.Pzi(e[f]);
            if (g.cCi) {
              if (d.oCi) {
                if (g.cCi.zzi) {
                  if (g.cCi.zzi.stop === undefined) {
                    g.cCi.zzi.Tzi(Ng);
                  } else {
                    g.cCi.zzi.stop(0);
                  }
                  d.jzi(g.cCi);
                }
              } else if (!isNaN(g.cCi.duration) || g.cCi.duration === yd / Ea) {
                g.cCi.currentTime = g.bAi || 0;
                g.cCi.pause();
              }
            }
            if (!c) {
              d.qCi("stop", g.Xbi);
            }
          }
        }
        return d;
      },
      dCi: function (b, c) {
        var d = this;
        if (d.tzi !== "loaded") {
          d.nzi.push({
            event: "mute",
            action: function () {
              d.dCi(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.VEi;
          }
          d.VEi = b;
        }
        for (var e = d.hCi(c), a = Jj; a < e.length; a++) {
          var f = d.gCi(e[a]);
          if (f) {
            f.VEi = b;
            if (d.oCi && f.cCi) {
              f.cCi.gain.setValueAtTime(b ? 0 : f.ZEi, j.yli.currentTime);
            } else if (f.cCi) {
              f.cCi.muted = !!j.VEi || b;
            }
            d.qCi("mute", f.Xbi);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var e = this;
        var a = arguments;
        if (a.length === 0) {
          return e.ZEi;
        }
        if (lt === a.length || Vn === a.length && a[Ko] === undefined) {
          if (e.hCi().indexOf(a[Oq]) >= Ou) {
            c = parseInt(a[0], 10);
          } else {
            b = parseFloat(a[0]);
          }
        } else if (a.length >= Tg) {
          b = parseFloat(a[Ka]);
          c = parseInt(a[Ic], 10);
        }
        if (b === undefined || b < Jj || b > hf) {
          if (d = c ? e.gCi(c) : e.jCi[Oq]) {
            return d.ZEi;
          } else {
            return xn;
          }
        }
        if (e.tzi !== "loaded") {
          e.nzi.push({
            event: "volume",
            action: function () {
              e.volume.apply(e, a);
            }
          });
          return e;
        }
        if (c === undefined) {
          e.ZEi = b;
        }
        c = e.hCi(c);
        for (var f = Gc; f < c.length; f++) {
          if (d = e.gCi(c[f])) {
            d.ZEi = b;
            if (!a[2]) {
              e.Pzi(c[f]);
            }
            if (e.oCi && d.cCi && !d.VEi) {
              d.cCi.gain.setValueAtTime(b, j.yli.currentTime);
            } else if (d.cCi && !d.VEi) {
              d.cCi.volume = b * j.volume();
            }
            e.qCi("volume", d.Xbi);
          }
        }
        return e;
      },
      Rzi: function (b, i, e, k) {
        var a = this;
        var l = Math.abs(b - i);
        var n = b > i ? "out" : "in";
        var o = l / 0.01;
        var q = o > 0 ? e / o : e;
        if (q < Gs) {
          o = Math.ceil(o / (4 / q));
          q = Jn;
        }
        if (a.tzi !== "loaded") {
          a.nzi.push({
            event: "fade",
            action: function () {
              a.Rzi(b, i, e, k);
            }
          });
          return a;
        }
        a.volume(b, k);
        for (var r = a.hCi(k), c = 0; c < r.length; c++) {
          var s = a.gCi(r[c]);
          if (s) {
            if (!k) {
              a.Pzi(r[c]);
            }
            if (a.oCi && !s.VEi) {
              var t = j.yli.currentTime;
              var v = t + e / 1000;
              s.ZEi = b;
              s.cCi.gain.setValueAtTime(b, t);
              s.cCi.gain.linearRampToValueAtTime(i, v);
            }
            var w = b;
            s.Lzi = setInterval(function (c, d) {
              if (o > 0) {
                w += n === "in" ? 0.01 : -0.01;
              }
              w = Math.max(Cm, w);
              w = Math.min(1, w);
              w = Math.round(w * 100) / bi;
              if (a.oCi) {
                if (k === undefined) {
                  a.ZEi = w;
                }
                d.ZEi = w;
              } else {
                a.volume(w, c, !qh);
              }
              if (i < b && w <= i || i > b && w >= i) {
                clearInterval(d.Lzi);
                d.Lzi = null;
                a.volume(i, c);
                a.qCi("fade", c);
              }
            }.bind(a, r[c], s), q);
          }
        }
        return a;
      },
      Pzi: function (a) {
        var b = this;
        var c = b.gCi(a);
        if (c && c.Lzi) {
          if (b.oCi) {
            c.cCi.gain.cancelScheduledValues(j.yli.currentTime);
          }
          clearInterval(c.Lzi);
          c.Lzi = null;
          b.qCi("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.YCi;
        }
        if (g.length === 1) {
          if (typeof g[du] != "boolean") {
            return !!(d = f.gCi(parseInt(g[Cm], wd))) && d.YCi;
          }
          b = g[0];
          f.YCi = b;
        } else if (g.length === 2) {
          b = g[Ka];
          c = parseInt(g[1], 10);
        }
        for (var a = f.hCi(c), h = 0; h < a.length; h++) {
          if (d = f.gCi(a[h])) {
            d.YCi = b;
            if (f.oCi && d.cCi && d.cCi.zzi) {
              d.cCi.zzi.loop = b;
              if (b) {
                d.cCi.zzi.loopStart = d.bAi || 0;
                d.cCi.zzi.loopEnd = d.Dzi;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var e = this;
        var a = arguments;
        if (a.length === 0) {
          c = e.jCi[so].Xbi;
        } else if (ja === a.length) {
          if (e.hCi().indexOf(a[Ng]) >= 0) {
            c = parseInt(a[bd], 10);
          } else {
            b = parseFloat(a[0]);
          }
        } else if (a.length === 2) {
          b = parseFloat(a[0]);
          c = parseInt(a[Ps], 10);
        }
        if (typeof b != "number") {
          if (d = e.gCi(c)) {
            return d.VCi;
          } else {
            return e.VCi;
          }
        }
        if (e.tzi !== "loaded") {
          e.nzi.push({
            event: "rate",
            action: function () {
              e.rate.apply(e, a);
            }
          });
          return e;
        }
        if (c === undefined) {
          e.VCi = b;
        }
        c = e.hCi(c);
        for (var f = 0; f < c.length; f++) {
          if (d = e.gCi(c[f])) {
            d.Fzi = e._zi(c[f]);
            d.Czi = e.oCi ? j.yli.currentTime : d.Czi;
            d.VCi = b;
            if (e.oCi && d.cCi && d.cCi.zzi) {
              d.cCi.zzi.playbackRate.value = b;
            } else if (d.cCi) {
              d.cCi.playbackRate = b;
            }
            var g = e._zi(c[f]);
            var k = ((e.ZCi[d.ZCi][0] + e.ZCi[d.ZCi][1]) / 1000 - g) * 1000 / Math.abs(d.VCi);
            if (!!e.ezi[c[f]] || !d.RCi) {
              e.Qzi(c[f]);
              e.ezi[c[f]] = setTimeout(e.wzi.bind(e, d), k);
            }
            e.qCi("rate", d.Xbi);
          }
        }
        return e;
      },
      _zi: function () {
        var b;
        var c;
        var d = this;
        var e = arguments;
        if (ke === e.length) {
          c = d.jCi[0].Xbi;
        } else if (fo === e.length) {
          if (d.hCi().indexOf(e[Nf]) >= Vd) {
            c = parseInt(e[Ka], jn);
          } else {
            c = d.jCi[Ou].Xbi;
            b = parseFloat(e[Ka]);
          }
        } else if (e.length === 2) {
          b = parseFloat(e[0]);
          c = parseInt(e[1], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.tzi !== "loaded") {
          d.nzi.push({
            event: "seek",
            action: function () {
              d._zi.apply(d, e);
            }
          });
          return d;
        }
        var a = d.gCi(c);
        if (a) {
          if (typeof b != "number" || b < xn) {
            if (d.oCi) {
              var f = d.Gzi(c) ? j.yli.currentTime - a.Czi : 0;
              var g = a.Fzi ? a.Fzi - a.Bzi : 0;
              return a.Bzi + (g + f * Math.abs(a.VCi));
            }
            return a.cCi.currentTime;
          }
          var k = d.Gzi(c);
          if (k) {
            d.pause(c, !Ou);
          }
          a.Bzi = b;
          a.wzi = !yd;
          d.Qzi(c);
          if (k) {
            d.play(c, true);
          }
          if (!d.oCi && a.cCi) {
            a.cCi.currentTime = b;
          }
          d.qCi("seek", c);
        }
        return d;
      },
      Gzi: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.gCi(a);
          return !!c && !c.RCi;
        }
        for (var d = Cm; d < b.jCi.length; d++) {
          if (!b.jCi[d].RCi) {
            return true;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.izi;
        var d = b.gCi(a);
        if (d) {
          c = b.ZCi[d.ZCi][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.tzi;
      },
      mCi: function () {
        var b = this;
        for (var c = b.jCi, d = 0; d < c.length; d++) {
          if (!c[d].RCi) {
            b.stop(c[d].Xbi);
          }
          if (!b.oCi) {
            if (!/MSIE |Trident\//.test(j.iCi && j.iCi.userAgent)) {
              c[d].cCi.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].cCi.removeEventListener("error", c[d].qzi, false);
            c[d].cCi.removeEventListener(j.$Ei, c[d].Wzi, false);
          }
          delete c[d].cCi;
          b.Qzi(c[d].Xbi);
          var e = j.XEi.indexOf(b);
          if (e >= 0) {
            j.XEi.splice(e, fi);
          }
        }
        var g = true;
        for (d = 0; d < j.XEi.length; d++) {
          if (j.XEi[d].vDi === b.vDi) {
            g = !fn;
            break;
          }
        }
        if (f && g) {
          delete f[b.vDi];
        }
        j.eCi = false;
        b.tzi = "unloaded";
        b.jCi = [];
        b = null;
        return null;
      },
      on: function (b, c, d, e) {
        var f = this[lj[fe] + b];
        if (typeof c == "function") {
          f.push(e ? {
            id: d,
            szi: c,
            once: e
          } : {
            id: d,
            szi: c
          });
        }
        return this;
      },
      Nzi: function (b, c, d) {
        var f = this;
        var g = f[lj[Bg] + b];
        var a = Ou;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (a = qh; a < g.length; a++) {
            var h = d === g[a].id;
            if (c === g[a].szi && h || !c && h) {
              g.splice(a, wg);
              break;
            }
          }
        } else if (b) {
          f["_on" + b] = [];
        } else {
          var i = Object.keys(f);
          for (a = Ka; a < i.length; a++) {
            if (Js === i[a].indexOf("_on") && Array.isArray(f[i[a]])) {
              f[i[a]] = [];
            }
          }
        }
        return f;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      qCi: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        for (var a = f.length - 1; a >= ke; a--) {
          if (!f[a].id || f[a].id === c || b === "load") {
            setTimeout(function (a) {
              a.call(this, c, d);
            }.bind(e, f[a].szi), 0);
            if (f[a].once) {
              e.Nzi(b, f[a].szi, f[a].id);
            }
          }
        }
        return e;
      },
      Hzi: function () {
        var a = this;
        if (a.nzi.length > Js) {
          var b = a.nzi[0];
          a.once(b.event, function () {
            a.nzi.shift();
            a.Hzi();
          });
          b.action();
        }
        return a;
      },
      wzi: function (b) {
        var c = this;
        var d = b.ZCi;
        if (!c.oCi && c.cCi && !c.cCi.ended) {
          setTimeout(c.wzi.bind(c, b), 100);
          return c;
        }
        var e = !!b.YCi || !!c.ZCi[d][2];
        c.qCi("end", b.Xbi);
        if (!c.oCi && e) {
          c.stop(b.Xbi, !qh).play(b.Xbi);
        }
        if (c.oCi && e) {
          c.qCi("play", b.Xbi);
          b.Bzi = b.bAi || Oq;
          b.Fzi = 0;
          b.Czi = j.yli.currentTime;
          var a = (b.Dzi - b.bAi) * 1000 / Math.abs(b.VCi);
          c.ezi[b.Xbi] = setTimeout(c.wzi.bind(c, b), a);
        }
        if (c.oCi && !e) {
          b.RCi = !qh;
          b.wzi = true;
          b.Bzi = b.bAi || 0;
          b.Fzi = du;
          c.Qzi(b.Xbi);
          c.jzi(b.cCi);
          j.fCi();
        }
        if (!c.oCi && !e) {
          c.stop(b.Xbi);
        }
        return c;
      },
      Qzi: function (a) {
        var b = this;
        if (b.ezi[a]) {
          clearTimeout(b.ezi[a]);
          delete b.ezi[a];
        }
        return b;
      },
      gCi: function (a) {
        for (var b = this, c = so; c < b.jCi.length; c++) {
          if (a === b.jCi[c].Xbi) {
            return b.jCi[c];
          }
        }
        return null;
      },
      Mzi: function () {
        var a = this;
        a.Uzi();
        for (var b = 0; b < a.jCi.length; b++) {
          if (a.jCi[b].wzi) {
            return a.jCi[b].reset();
          }
        }
        return new e(a);
      },
      Uzi: function () {
        var a = this;
        var b = a.JCi;
        var c = 0;
        var d = Js;
        if (a.jCi.length >= b) {
          for (d = qh; d < a.jCi.length; d++) {
            if (a.jCi[d].wzi) {
              c++;
            }
          }
          for (d = a.jCi.length - hf; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.jCi[d].wzi) {
              if (a.oCi && a.jCi[d].cCi) {
                a.jCi[d].cCi.disconnect(Sh);
              }
              a.jCi.splice(d, ja);
              c--;
            }
          }
        }
      },
      hCi: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = Vd; c < this.jCi.length; c++) {
            b.push(this.jCi[c].Xbi);
          }
          return b;
        }
        return [a];
      },
      Ezi: function (a) {
        a.cCi.zzi = j.yli.createBufferSource();
        a.cCi.zzi.buffer = f[this.vDi];
        if (a.Ozi) {
          a.cCi.zzi.connect(a.Ozi);
        } else {
          a.cCi.zzi.connect(a.cCi);
        }
        a.cCi.zzi.loop = a.YCi;
        if (a.YCi) {
          a.cCi.zzi.loopStart = a.bAi || 0;
          a.cCi.zzi.loopEnd = a.Dzi;
        }
        a.cCi.zzi.playbackRate.value = a.VCi;
        return this;
      },
      jzi: function (a) {
        var b = this;
        if (b.FCi) {
          a.zzi.onended = null;
          a.zzi.disconnect(Cm);
          try {
            a.zzi.buffer = b.FCi;
          } catch (a) {}
        }
        a.zzi = null;
        return b;
      }
    };
    function e(a) {
      this.Yzi = a;
      this.Vi();
    }
    e.prototype = {
      Vi: function () {
        var a = this;
        var b = a.Yzi;
        a.VEi = b.VEi;
        a.YCi = b.YCi;
        a.ZEi = b.ZEi;
        a.VCi = b.VCi;
        a.Bzi = 0;
        a.RCi = true;
        a.wzi = !Vd;
        a.ZCi = "__default";
        a.Xbi = ++j.JEi;
        b.jCi.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.Yzi;
        var c = j.VEi || a.VEi || a.Yzi.VEi ? Gc : a.ZEi;
        if (b.oCi) {
          a.cCi = j.yli.createGain === undefined ? j.yli.Jzi() : j.yli.createGain();
          a.cCi.gain.setValueAtTime(c, j.yli.currentTime);
          a.cCi.paused = true;
          a.cCi.connect(j.tCi);
        } else {
          a.cCi = new Audio();
          a.qzi = a.Kzi.bind(a);
          a.cCi.addEventListener("error", a.qzi, false);
          a.Wzi = a.Xzi.bind(a);
          a.cCi.addEventListener(j.$Ei, a.Wzi, false);
          a.cCi.src = b.vDi;
          a.cCi.preload = "auto";
          a.cCi.volume = c * j.volume();
          a.cCi.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.Yzi;
        a.VEi = b.VEi;
        a.YCi = b.YCi;
        a.ZEi = b.ZEi;
        a.VCi = b.VCi;
        a.Bzi = Jj;
        a.Fzi = 0;
        a.RCi = true;
        a.wzi = !Oq;
        a.ZCi = "__default";
        a.Xbi = ++j.JEi;
        return a;
      },
      Kzi: function () {
        var a = this;
        a.Yzi.qCi("loaderror", a.Xbi, a.cCi.error ? a.cCi.error.code : 0);
        a.cCi.removeEventListener("error", a.qzi, !Lo);
      },
      Xzi: function () {
        var a = this;
        var b = a.Yzi;
        b.izi = Math.ceil(Ki * a.cCi.duration) / mm;
        if (Object.keys(b.ZCi).length === 0) {
          b.ZCi = {
            Vzi: [Js, b.izi * 1000]
          };
        }
        if (b.tzi !== "loaded") {
          b.tzi = "loaded";
          b.qCi("load");
          b.Hzi();
        }
        a.cCi.removeEventListener(j.$Ei, a.Wzi, false);
      }
    };
    var f = {};
    function a(b) {
      var c = b.vDi;
      if (f[c]) {
        b.izi = f[c].duration;
        h(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[1]), e = new Uint8Array(d.length), g = 0; g < d.length; ++g) {
          e[g] = d.charCodeAt(g);
        }
        l(e.buffer, b);
      } else {
        var i = new XMLHttpRequest();
        i.open("GET", c, !Vd);
        i.responseType = "arraybuffer";
        i.onload = function () {
          var a = (i.status + "")[Jj];
          if (a === "0" || a === "2" || a === "3") {
            l(i.response, b);
          } else {
            b.qCi("loaderror", null, "Failed loading audio file with status: " + i.status + ".");
          }
        };
        i.onerror = function () {
          if (b.oCi) {
            b.UCi = !so;
            b.oCi = !Ic;
            b.jCi = [];
            delete f[c];
            b.load();
          }
        };
        k(i);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function l(a, b) {
      j.yli.decodeAudioData(a, function (a) {
        if (a && b.jCi.length > du) {
          f[b.vDi] = a;
          h(b, a);
        }
      }, function () {
        b.qCi("loaderror", null, "Decoding audio data failed.");
      });
    }
    function h(a, b) {
      if (b && !a.izi) {
        a.izi = b.duration;
      }
      if (Object.keys(a.ZCi).length === 0) {
        a.ZCi = {
          Vzi: [0, a.izi * 1000]
        };
      }
      if (a.tzi !== "loaded") {
        a.tzi = "loaded";
        a.qCi("load");
        a.Hzi();
      }
    }
    function g() {
      try {
        if (typeof AudioContext != "undefined") {
          j.yli = new AudioContext();
        } else if (typeof ᐃΔᐃΔⲆⲆΔᐃⵠ != "undefined") {
          j.yli = new ᐃΔᐃΔⲆⲆΔᐃⵠ();
        } else {
          j.nCi = !Ic;
        }
      } catch (a) {
        j.nCi = false;
      }
      var b = /iP(hone|od|ad)/.test(j.iCi && j.iCi.platform);
      var c = j.iCi && j.iCi.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var d = c ? parseInt(c[1], 10) : null;
      if (b && d && d < 9) {
        var e = /safari/.test(j.iCi && j.iCi.userAgent.toLowerCase());
        if (j.iCi && j.iCi.Zzi && !e || j.iCi && !j.iCi.Zzi && !e) {
          j.nCi = false;
        }
      }
      if (j.nCi) {
        j.tCi = j.yli.createGain === undefined ? j.yli.Jzi() : j.yli.createGain();
        j.tCi.gain.value = j.VEi ? 0 : Ko;
        j.tCi.connect(j.yli.destination);
      }
      j.rCi();
    }
    if (typeof ᐃᐃⲆⵠᐃⵠⵠ == "function" && ᐃᐃⲆⵠᐃⵠⵠ.ⵠⵠᐃⲆΔΔᐃ) {
      ᐃᐃⲆⵠᐃⵠⵠ([], function () {
        return {
          $zi: j,
          ixi: d
        };
      });
    }
    if (typeof ⲆⵠΔᐃΔᐃᐃ != "undefined") {
      ⲆⵠΔᐃΔᐃᐃ.$zi = j;
      ⲆⵠΔᐃΔᐃᐃ.ixi = d;
    }
    if (typeof aj != "undefined") {
      aj.txi = b;
      aj.$zi = j;
      aj.ixi = d;
      aj.exi = e;
    } else if (typeof ΔⲆⵠᐃΔⲆᐃ != "undefined") {
      ΔⲆⵠᐃΔⲆᐃ.txi = b;
      ΔⲆⵠᐃΔⲆᐃ.$zi = j;
      ΔⲆⵠᐃΔⲆᐃ.ixi = d;
      ΔⲆⵠᐃΔⲆᐃ.exi = e;
    }
  })();
  (function () {
    ⲆⲆⲆⵠΔⲆⲆ.prototype.nxi = [Oq, Nf, 0];
    ⲆⲆⲆⵠΔⲆⲆ.prototype.axi = [0, Ou, -X, 0, Ej, 0];
    ⲆⲆⲆⵠΔⲆⲆ.prototype.sxi = function (a) {
      var b = this;
      if (!b.yli || !b.yli.listener) {
        return b;
      }
      for (var c = b.XEi.length - 1; c >= Ka; c--) {
        b.XEi[c].sxi(a);
      }
      return b;
    };
    ⲆⲆⲆⵠΔⲆⲆ.prototype.Kbi = function (a, b, c) {
      var d = this;
      if (d.yli && d.yli.listener) {
        b = typeof b != "number" ? d.nxi[1] : b;
        c = typeof c != "number" ? d.nxi[ih] : c;
        if (typeof a != "number") {
          return d.nxi;
        } else {
          d.nxi = [a, b, c];
          d.yli.listener.setPosition(d.nxi[0], d.nxi[1], d.nxi[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ⲆⲆⲆⵠΔⲆⲆ.prototype.orientation = function (b, c, d, f, g, h) {
      var i = this;
      if (!i.yli || !i.yli.listener) {
        return i;
      }
      var j = i.axi;
      c = typeof c != "number" ? j[1] : c;
      d = typeof d != "number" ? j[2] : d;
      f = typeof f != "number" ? j[E] : f;
      g = typeof g != "number" ? j[4] : g;
      h = typeof h != "number" ? j[5] : h;
      if (typeof b != "number") {
        return j;
      } else {
        i.axi = [b, c, d, f, g, h];
        i.yli.listener.setOrientation(b, c, d, f, g, h);
        return i;
      }
    };
    Howl.prototype.Vi = function (a) {
      return function (b) {
        var c = this;
        c.axi = b.orientation || [Ps, 0, 0];
        c.rxi = b.sxi || null;
        c.nxi = b.Kbi || null;
        c.oxi = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : Sh,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
        };
        c.hxi = b.gxi ? [{
          szi: b.gxi
        }] : [];
        c.cxi = b.dxi ? [{
          szi: b.dxi
        }] : [];
        c.mxi = b.uxi ? [{
          szi: b.uxi
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.Vi);
    Howl.prototype.sxi = function (c, d) {
      var e = this;
      if (!e.oCi) {
        return e;
      }
      if (e.tzi !== "loaded") {
        e.nzi.push({
          event: "stereo",
          action: function () {
            e.sxi(c, d);
          }
        });
        return e;
      }
      var f = Howler.yli.createStereoPanner === undefined ? "spatial" : "stereo";
      if (d === undefined) {
        if (typeof c != "number") {
          return e.rxi;
        }
        e.rxi = c;
        e.nxi = [c, xn, ke];
      }
      for (var a = e.hCi(d), g = Ou; g < a.length; g++) {
        var h = e.gCi(a[g]);
        if (h) {
          if (typeof c != "number") {
            return h.rxi;
          }
          h.rxi = c;
          h.nxi = [c, xn, xn];
          if (h.cCi) {
            h.oxi.panningModel = "equalpower";
            if (!h.Ozi || !h.Ozi.pan) {
              b(h, f);
            }
            if (f === "spatial") {
              h.Ozi.setPosition(c, 0, 0);
            } else {
              h.Ozi.pan.value = c;
            }
          }
          e.qCi("stereo", h.Xbi);
        }
      }
      return e;
    };
    Howl.prototype.Kbi = function (c, d, f, g) {
      var a = this;
      if (!a.oCi) {
        return a;
      }
      if (a.tzi !== "loaded") {
        a.nzi.push({
          event: "pos",
          action: function () {
            a.Kbi(c, d, f, g);
          }
        });
        return a;
      }
      d = typeof d != "number" ? nj : d;
      f = typeof f != "number" ? -0.5 : f;
      if (g === undefined) {
        if (typeof c != "number") {
          return a.nxi;
        }
        a.nxi = [c, d, f];
      }
      for (var i = a.hCi(g), j = nj; j < i.length; j++) {
        var k = a.gCi(i[j]);
        if (k) {
          if (typeof c != "number") {
            return k.nxi;
          }
          k.nxi = [c, d, f];
          if (k.cCi) {
            if (!k.Ozi || !!k.Ozi.pan) {
              b(k, "spatial");
            }
            k.Ozi.setPosition(c, d, f);
          }
          a.qCi("pos", k.Xbi);
        }
      }
      return a;
    };
    Howl.prototype.orientation = function (c, d, f, g) {
      var a = this;
      if (!a.oCi) {
        return a;
      }
      if (a.tzi !== "loaded") {
        a.nzi.push({
          event: "orientation",
          action: function () {
            a.orientation(c, d, f, g);
          }
        });
        return a;
      }
      d = typeof d != "number" ? a.axi[Jf] : d;
      f = typeof f != "number" ? a.axi[wh] : f;
      if (g === undefined) {
        if (typeof c != "number") {
          return a.axi;
        }
        a.axi = [c, d, f];
      }
      for (var i = a.hCi(g), j = xn; j < i.length; j++) {
        var k = a.gCi(i[j]);
        if (k) {
          if (typeof c != "number") {
            return k.axi;
          }
          k.axi = [c, d, f];
          if (k.cCi) {
            if (!k.Ozi) {
              k.nxi ||= a.nxi || [0, 0, -0.5];
              b(k, "spatial");
            }
            k.Ozi.setOrientation(c, d, f);
          }
          a.qCi("orientation", k.Xbi);
        }
      }
      return a;
    };
    Howl.prototype.ⲆⵠⲆⵠΔⲆΔΔⵠ = function () {
      var c;
      var d;
      var f;
      var i = this;
      var a = arguments;
      if (!i.oCi) {
        return i;
      }
      if (a.length === 0) {
        return i.oxi;
      }
      if (ae === a.length) {
        if (typeof a[0] != "object") {
          if (f = i.gCi(parseInt(a[Ka], Mh))) {
            return f.oxi;
          } else {
            return i.oxi;
          }
        }
        c = a[0];
        if (d === undefined) {
          i.oxi = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : i.fxi,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : i.pxi,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : i.lxi,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : i.bxi,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : i.vxi,
            panningModel: c.panningModel !== undefined ? c.panningModel : i.yxi,
            refDistance: c.refDistance !== undefined ? c.refDistance : i.kxi,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : i.Axi
          };
        }
      } else if (Gi === a.length) {
        c = a[0];
        d = parseInt(a[Ic], 10);
      }
      for (var j = i.hCi(d), k = 0; k < j.length; k++) {
        if (f = i.gCi(j[k])) {
          var l = f.oxi;
          l = {
            coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : l.coneInnerAngle,
            coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : l.coneOuterAngle,
            coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : l.coneOuterGain,
            distanceModel: c.distanceModel !== undefined ? c.distanceModel : l.distanceModel,
            maxDistance: c.maxDistance !== undefined ? c.maxDistance : l.maxDistance,
            panningModel: c.panningModel !== undefined ? c.panningModel : l.panningModel,
            refDistance: c.refDistance !== undefined ? c.refDistance : l.refDistance,
            rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : l.rolloffFactor
          };
          var m = f.Ozi;
          if (m) {
            m.coneInnerAngle = l.coneInnerAngle;
            m.coneOuterAngle = l.coneOuterAngle;
            m.coneOuterGain = l.coneOuterGain;
            m.distanceModel = l.distanceModel;
            m.maxDistance = l.maxDistance;
            m.panningModel = l.panningModel;
            m.refDistance = l.refDistance;
            m.rolloffFactor = l.rolloffFactor;
          } else {
            f.nxi ||= i.nxi || [0, du, -0.5];
            b(f, "spatial");
          }
        }
      }
      return i;
    };
    ᐃⲆⲆⵠⲆΔᐃ.prototype.Vi = function (a) {
      return function () {
        var b = this;
        var c = b.Yzi;
        b.axi = c.axi;
        b.rxi = c.rxi;
        b.nxi = c.nxi;
        b.oxi = c.oxi;
        a.call(this);
        if (b.rxi) {
          c.sxi(b.rxi);
        } else if (b.nxi) {
          c.Kbi(b.nxi[0], b.nxi[Ic], b.nxi[eu], b.Xbi);
        }
      };
    }(ᐃⲆⲆⵠⲆΔᐃ.prototype.Vi);
    ᐃⲆⲆⵠⲆΔᐃ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.Yzi;
        b.axi = c.axi;
        b.nxi = c.nxi;
        b.oxi = c.oxi;
        return a.call(this);
      };
    }(ᐃⲆⲆⵠⲆΔᐃ.prototype.reset);
    function b(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.Ozi = Howler.yli.createPanner();
        a.Ozi.coneInnerAngle = a.oxi.coneInnerAngle;
        a.Ozi.coneOuterAngle = a.oxi.coneOuterAngle;
        a.Ozi.coneOuterGain = a.oxi.coneOuterGain;
        a.Ozi.distanceModel = a.oxi.distanceModel;
        a.Ozi.maxDistance = a.oxi.maxDistance;
        a.Ozi.panningModel = a.oxi.panningModel;
        a.Ozi.refDistance = a.oxi.refDistance;
        a.Ozi.rolloffFactor = a.oxi.rolloffFactor;
        a.Ozi.setPosition(a.nxi[0], a.nxi[Ps], a.nxi[Cg]);
        a.Ozi.setOrientation(a.axi[0], a.axi[1], a.axi[Gi]);
      } else {
        a.Ozi = Howler.yli.createStereoPanner();
        a.Ozi.pan.value = a.rxi;
      }
      a.Ozi.connect(a.cCi);
      if (!a.RCi) {
        a.Yzi.pause(a.Xbi, true).play(a.Xbi);
      }
    }
  })();
  var Tw = Ej;
  var Uw = au;
  var Vw = {
    $E: kc,
    Ee: oe,
    wxi: m,
    Mxi: 3000,
    Bxi: 460000,
    Dxi: 6,
    Exi: 12,
    qt: 1,
    Cxi: 12,
    zxi: 5000,
    xxi: mj,
    Qxi: 5000,
    Sxi: 5000
  };
  var Ww = [];
  Ww[-fn] = Vw.qt;
  Ww[$r.he] = Vw.qt;
  Ww[$r.xe] = Vw.qt;
  Ww[$r.Ixi] = Vw.xxi;
  Ww[$r.Wt] = Vw.xxi;
  Ww[$r.Pt] = Vw.xxi;
  Ww[$r.jt] = Vw.xxi;
  Ww[$r.Rt] = Vw.xxi;
  Ww[$r.de] = Vw.xxi;
  Ww[$r.me] = Vw.xxi;
  Ww[$r.Nt] = Vw.xxi;
  Ww[$r.je] = Vw.xxi;
  Ww[$r.Ft] = Vw.xxi;
  Ww[$r.Ne] = Vw.xxi;
  Ww[$r.Vt] = Vw.xxi;
  Ww[$r.Lt] = Vw.xxi;
  Ww[$r.Gt] = Vw.xxi;
  Ww[$r.ce] = Vw.xxi;
  Ww[$r._xi] = Vw.xxi;
  Ww[$r.Zt] = Vw.xxi;
  Ww[$r.Ot] = Vw.xxi;
  Ww[$r.Yt] = Vw.xxi;
  Ww[$r.Jt] = Vw.xxi;
  Ww[$r.Kt] = Vw.xxi;
  Ww[$r.Xt] = Vw.xxi;
  Ww[$r.ue] = Vw.xxi;
  Ww[$r.Fxi] = Vw.xxi;
  Ww[$r.pe] = Vw.xxi;
  Ww[$r.le] = Vw.xxi;
  Ww[$r.be] = Vw.xxi;
  Ww[$r.ve] = Vw.xxi;
  Ww[$r.ye] = Vw.xxi;
  Ww[$r.De] = Vw.xxi;
  Ww[$r.We] = Vw.xxi;
  if (aj.Pxi) {
    var Xw = aj.Math.acos;
    aj.Math.acos = aj.Math.asin;
    aj.Math.asin = Xw;
    var Yw = aj.Math.acos;
    aj.Math.acos = aj.Math.asin;
    aj.Math.asin = Yw;
  }
  Ww[$r.Fe] = Vw.xxi;
  Ww[$r._e] = Vw.xxi;
  Ww[$r.Ee] = Vw.Ee;
  Ww[$r.Qe] = Vw.Ee;
  Ww[$r.Se] = Vw.Ee;
  Ww[$r.Ie] = Vw.Ee;
  ΔΔΔΔ = [];
  ΔΔΔΔ[0] = 0;
  ΔΔΔΔ[wg] = Ps;
  ΔΔΔΔ[2] = au;
  ΔΔΔΔ[3] = 1;
  ΔΔΔΔ[bq] = Vd;
  ΔΔΔΔ[5] = Gc;
  ΔΔΔΔ[6] = 0;
  ΔΔΔΔ[7] = Cm;
  ΔΔΔΔ[qs] = ke;
  ΔΔΔΔ[9] = Ea;
  ΔΔΔΔ[10] = 1;
  ΔΔΔΔ[11] = 1;
  ΔΔΔΔ[12] = 1;
  ΔΔΔΔ[13] = 1;
  ΔΔΔΔ[14] = 1;
  ΔΔΔΔ[og] = Lh;
  ΔΔΔΔ[16] = nj;
  ΔΔΔΔ[ce] = 0;
  ΔΔΔΔ[na] = Ou;
  ΔΔΔΔ[19] = 0;
  ΔΔΔΔ[20] = 0;
  ΔΔΔΔ[21] = 0;
  ΔΔΔΔ[22] = 0;
  ΔΔΔΔ[23] = 1;
  ΔΔΔΔ[24] = 1;
  ΔΔΔΔ[25] = 1;
  ΔΔΔΔ[26] = Ej;
  ΔΔΔΔ[27] = 1;
  ΔΔΔΔ[28] = wg;
  ΔΔΔΔ[29] = fi;
  ΔΔΔΔ[30] = Lh;
  ΔΔΔΔ[31] = fn;
  ΔΔΔΔ[32] = fi;
  ΔΔΔΔ[33] = 1;
  ΔΔΔΔ[34] = au;
  ΔΔΔΔ[35] = dm;
  ΔΔΔΔ[36] = X;
  ΔΔΔΔ[37] = X;
  ΔΔΔΔ[38] = au;
  ΔΔΔΔ[40] = 0;
  ΔΔΔΔ[41] = 0;
  ΔΔΔΔ[42] = Js;
  ΔΔΔΔ[50] = 1;
  ΔΔΔΔ[51] = 1;
  ΔΔΔΔ[52] = 1;
  ΔΔΔΔ[55] = 0;
  ΔΔΔΔ[56] = 0;
  ΔΔΔΔ[57] = 0;
  ΔΔΔΔ[58] = ke;
  ΔⵠⵠᐃⲆ = [];
  ΔⵠⵠᐃⲆ[lw.Rn] = 0;
  ΔⵠⵠᐃⲆ[lw.oo] = Sh;
  ΔⵠⵠᐃⲆ[lw._a] = 0;
  ΔⵠⵠᐃⲆ[lw.PD] = du;
  ΔⵠⵠᐃⲆ[lw.wr] = -1;
  ΔⵠⵠᐃⲆ[lw.ra] = -Lh;
  ΔⵠⵠᐃⲆ[lw.Wn] = Ng;
  ΔⵠⵠᐃⲆ[lw.Ta] = 0;
  ΔⵠⵠᐃⲆ[lw.$n] = 0;
  ΔⵠⵠᐃⲆ[lw.pa] = 0;
  ΔⵠⵠᐃⲆ[lw.ga] = lt;
  ΔⵠⵠᐃⲆ[lw.eE] = Jf;
  ΔⵠⵠᐃⲆ[lw.ja] = 1;
  ΔⵠⵠᐃⲆ[lw.Ra] = wg;
  ΔⵠⵠᐃⲆ[lw.La] = yd;
  ΔⵠⵠᐃⲆ[lw.Xn] = 1;
  ΔⵠⵠᐃⲆ[lw.Gs] = 1;
  ΔⵠⵠᐃⲆ[lw.Fa] = 0;
  ΔⵠⵠᐃⲆ[lw.Wa] = Ko;
  ΔⵠⵠᐃⲆ[lw.Na] = Jf;
  ΔⵠⵠᐃⲆ[lw.Ha] = 1;
  ΔⵠⵠᐃⲆ[lw.Vn] = Mc;
  ΔⵠⵠᐃⲆ[lw.Ws] = 1;
  ΔⵠⵠᐃⲆ[lw.UD] = 0;
  ΔⵠⵠᐃⲆ[lw.OD] = 1;
  ΔⵠⵠᐃⲆ[lw.YD] = fn;
  ΔⵠⵠᐃⲆ[lw.JD] = Ic;
  ΔⵠⵠᐃⲆ[lw.KD] = X;
  ΔⵠⵠᐃⲆ[lw.qs] = 1;
  ΔⵠⵠᐃⲆ[lw.Ps] = du;
  ΔⵠⵠᐃⲆ[lw.Ts] = 1;
  ΔⵠⵠᐃⲆ[lw.js] = 1;
  ΔⵠⵠᐃⲆ[lw.Rs] = Lo;
  ΔⵠⵠᐃⲆ[lw.Ls] = 1;
  ΔⵠⵠᐃⲆ[lw.Ns] = 1;
  ΔⵠⵠᐃⲆ[lw.TD] = 1;
  ΔⵠⵠᐃⲆ[lw.Da] = Lh;
  ΔⵠⵠᐃⲆ[lw.Ea] = Ps;
  ΔⵠⵠᐃⲆ[lw.qa] = Nf;
  ΔⵠⵠᐃⲆ[lw.ZD] = 1;
  var Zw = {
    Txi: {
      jxi: null,
      path: ["audio/ambience.mp3"],
      $Ci: {
        Rxi: [90086, 300, false],
        Lxi: [90391, 300, re],
        Gxi: [90684, 300, false]
      },
      sample: {
        Rxi: Vw.$E,
        Lxi: Vw.$E,
        Gxi: Vw.$E
      }
    },
    qxi: {
      jxi: null,
      path: ["audio/ambience.mp3"],
      $Ci: {
        Wxi: [89303, 300, false],
        p2: [89815, 300, oj],
        p1: [89549, 300, false]
      },
      sample: {
        Wxi: Vw.$E,
        p1: Vw.$E,
        p2: Vw.$E
      }
    },
    Nxi: {
      jxi: null,
      path: ["audio/ambience.mp3"],
      $Ci: {
        Hxi: [88195, 300, zn],
        tvi: [89025, 300, false],
        ivi: [88751, 300, kg],
        $bi: [88473, 300, re]
      },
      sample: {
        Hxi: Vw.$E,
        $bi: Vw.$E,
        ivi: Vw.$E,
        tvi: Vw.$E
      }
    },
    Uxi: {
      jxi: null,
      path: ["audio/ambience.mp3"],
      $Ci: {
        Oxi: [66961, 21223, Bc],
        Yxi: [19882, 8301, true],
        Jxi: [91022, 400, false],
        Cvi: [28380, 1797, Vj],
        Kxi: [66014, 925, Xn],
        Xxi: [92249, 500, false],
        tbi: [12356, 6965, Rg],
        Vxi: [3100, 8800, true],
        Zxi: [66961, 21223, true],
        $xi: [30562, 655, true],
        iQi: [100, 2800, ln],
        xbi: [31658, 813, true],
        tQi: [32604, 21890, Nh],
        Sbi: [91431, 400, re],
        eQi: [54524, 11393, Rg]
      },
      sample: {
        iQi: 1,
        Vxi: 1,
        Yxi: lt,
        tQi: 1,
        eQi: 1,
        Oxi: hf,
        Zxi: 1,
        tbi: Vw.$E,
        Cvi: Vw.$E,
        $xi: Vw.$E,
        xbi: Vw.$E,
        Kxi: Vw.$E,
        Jxi: Vw.Dxi,
        Sbi: Vw.Dxi,
        Xxi: Vw.Dxi
      }
    }
  };
  function ik(b, d, f, e, i, a, j, k, l, h, g) {
    this.r = 1;
    this.Ubi = b;
    this.nQi = b;
    this.lfi = d;
    this.pfi = f;
    this.Rzi = e;
    this.aQi = i;
    this.sQi = a;
    this.qbi = j;
    this.rQi = k;
    this.source = l;
    this.source.oQi = l.x + l.w;
    this.source.Wki = l.y + l.K;
    this.hQi = h;
    this.xi = g;
    this.gQi = Nf;
    this.cQi = {
      d: 5,
      t: 5
    };
    this.dQi = function () {
      this.Ubi -= bk;
      if (this.Ubi < 0) {
        this.Ubi = this.nQi;
        var a = Zw.Uxi.jxi.playing(this.lfi);
        var b = Zw.Uxi.jxi.playing(this.pfi);
        if (a && !b) {
          var c = Uw * this.qbi.volume(this.lfi);
          var d = Uw * (this.sQi * Math.random() + this.aQi);
          this.qbi.fade(c, d, this.Rzi, this.lfi);
        } else if (!a && b) {
          c = Uw * this.qbi.volume(this.pfi);
          d = (Math.random() * this.sQi + this.aQi) * Uw;
          this.qbi.fade(c, d, this.Rzi, this.pfi);
        }
      }
    };
    this.transition = function () {
      this.Ubi = this.nQi;
      this.cQi.d = this.cQi.t;
      if (ck.time) {
        this.qbi.fade(0, this.aQi * Uw, this.rQi, this.lfi);
        this.qbi.play(this.lfi);
        if (this.qbi.playing(this.pfi)) {
          var a = Uw * this.qbi.volume(this.pfi);
          this.qbi.fade(a, 0, this.rQi, this.pfi);
        }
      } else {
        this.qbi.fade(ke, this.aQi * Uw, this.rQi, this.pfi);
        this.qbi.play(this.pfi);
        if (this.qbi.playing(this.lfi)) {
          a = this.qbi.volume(this.lfi) * Uw;
          this.qbi.fade(a, 0, this.rQi, this.lfi);
        }
      }
    };
    this.check = function (a) {
      if (this.gQi) {
        if (ⵠⵠⵠⲆ.xi(a, this.hQi)) {
          if (!dx.transition && Vw.Bxi > ck.Xpi.now) {
            if (ck.time) {
              if (!this.qbi.playing(this.lfi)) {
                this.cQi.d -= bk;
                if (Sh > this.cQi.d) {
                  this.transition();
                }
              }
            } else if (!this.qbi.playing(this.pfi)) {
              this.cQi.d -= bk;
              if (this.cQi.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.gQi = Cm;
          if (this.qbi.playing(this.lfi)) {
            var b = Uw * this.qbi.volume(this.lfi);
            this.qbi.fade(b, 0, this.rQi, this.lfi);
          }
          if (this.qbi.playing(this.pfi)) {
            b = Uw * this.qbi.volume(this.pfi);
            this.qbi.fade(b, 0, this.rQi, this.pfi);
          }
        }
      } else if (ⵠⵠⵠⲆ.xi(a, this.xi)) {
        this.gQi = ja;
        if (!dx.transition && ck.Xpi.now < Vw.Bxi) {
          this.transition();
        }
      }
    };
    this.mi = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? dx.mQi(this.source.x) : a.x > this.source.oQi ? dx.mQi(this.source.oQi) : b.x;
      d = this.source.y > a.y ? dx.uQi(this.source.y) : a.y > this.source.Wki ? dx.uQi(this.source.Wki) : b.y;
      this.qbi.pos(c, d, -0.5, this.lfi);
      this.qbi.pos(c, d, -0.5, this.pfi);
    };
  }
  ⲆΔⲆⲆΔ = {
    fQi: io,
    pQi: 0.2,
    zbi: 0,
    lQi: 0.2,
    gc: 3,
    bQi: 1,
    vQi: 0.2,
    yQi: 0.4,
    kQi: 300,
    AQi: 100,
    ia: 2,
    wQi: Cg,
    MQi: _g,
    BQi: 100
  };
  function tk(a, b, c) {
    this.DQi = a;
    this.c = Gc;
    this.qbi = b;
    this.bli = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + Mc) % this.max;
      var a = this.bli[this.c];
      this.DQi.EQi(this.qbi, a);
      this.qbi.play(a);
    };
  }
  function ek(a) {
    this.CQi = 1;
    this.Hfi = 0;
    this.mode = -1;
    this.Cvi = dx.sample.Cvi[a];
    this.$xi = dx.sample.$xi[a];
    this.xbi = dx.sample.xbi[a];
    this.Kxi = dx.sample.Kxi[a];
    this.zQi = new tk(this, Zw.qxi.jxi, dx.xQi.zQi[a]);
    this.Nli = new tk(this, Zw.Nxi.jxi, dx.xQi.Nli[a]);
    this.rbi = new tk(this, Zw.Txi.jxi, dx.xQi.rbi[a]);
    this.iki = a;
    this.x = 0;
    this.y = 0;
    this.N = bd;
    this.Ubi = ⲆΔⲆⲆΔ.ᐃᐃᐃⲆⲆᐃⲆⲆⵠ;
    this.Kbi = {
      x: qh,
      y: 0
    };
    this.QQi = Zw.Uxi.jxi;
    this.nki = function (a) {
      if (Vw.qt === a) {
        this.zQi.play();
      } else if (a === Vw.xxi) {
        this.Nli.play();
      } else if (a === Vw.Ee) {
        this.rbi.play();
      }
    };
    this.SQi = function (a) {
      if (a.Bbi > 0) {
        return ⲆΔⲆⲆΔ.ia;
      } else if (a.Oyi > bd) {
        return ⲆΔⲆⲆΔ.bQi;
      } else if (a.Mbi > 0 || a.Gvi > 0) {
        return ⲆΔⲆⲆΔ.gc;
      } else {
        return ⲆΔⲆⲆΔ.zbi;
      }
    };
    this.Vi = function (a) {
      this.CQi = 0;
      this.Hfi = a;
      var b = ck.Nfi[a];
      b.iki = this.iki;
      this.mode = this.SQi(b);
      this.Kbi.x = b.x;
      this.Kbi.y = b.y;
    };
    this.IQi = function () {
      this.CQi = 1;
      this.mode = -1;
      this.QQi.stop(this.Cvi);
      this.QQi.stop(this.$xi);
      this.QQi.stop(this.xbi);
      this.QQi.stop(this.Kxi);
    };
    this.Rzi = function (a, b) {
      var c = Tw * this.QQi.volume(a);
      this.QQi.fade(c, 0, b, a);
    };
    this.EQi = function (a, b) {
      if (this.N && this.iki) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.dQi = function (b, c, d, e, f, a, g) {
      this.Ubi = a;
      if (e && f === this.mode) {
        var i = this.QQi.volume(b) * Tw;
        if (this.N) {
          var j = (Math.random() * d + c) * Tw;
          this.QQi.fade(i, j, g, b);
        } else {
          this.QQi.fade(i, 0, g, b);
        }
      } else if (this.mode != f && this.N) {
        this.QQi.fade(0, Tw * (c + d), g, b);
      } else if (this.N) {
        i = Tw * this.QQi.volume(b);
        j = Tw * (d * Math.random() + c);
        this.QQi.fade(i, j, g, b);
      }
      this.EQi(this.QQi, b);
      this.QQi.play(b);
    };
    this.mi = function () {
      var a = ck.Nfi[this.Hfi];
      this.Ubi -= bk;
      if (this.Ubi <= 0) {
        var b = 0;
        if (a.x != this.Kbi.x || a.y != this.Kbi.y) {
          if (!this.N) {
            b = 1;
            this.N = yd;
          }
          this.x = dx._Qi(a.x, ⲆΔⲆⲆΔ.wQi);
          this.y = dx.FQi(a.y, ⲆΔⲆⲆΔ.wQi);
        } else if (this.N) {
          b = 1;
          this.N = Ou;
        }
        this.Kbi.x = a.x;
        this.Kbi.y = a.y;
        ΔⲆᐃⲆ = this.SQi(a);
        if (ΔⲆᐃⲆ != this.mode) {
          if (ⲆΔⲆⲆΔ.bQi === this.mode) {
            this.Rzi(this.Cvi, ⲆΔⲆⲆΔ.kQi);
          } else if (ⲆΔⲆⲆΔ.ia === this.mode) {
            this.Rzi(this.$xi, ⲆΔⲆⲆΔ.fQi);
          } else if (this.mode === ⲆΔⲆⲆΔ.zbi) {
            this.Rzi(this.xbi, ⲆΔⲆⲆΔ.AQi);
          } else if (this.mode === ⲆΔⲆⲆΔ.gc) {
            this.Rzi(this.Kxi, ⲆΔⲆⲆΔ.BQi);
          }
        }
        if (ⲆΔⲆⲆΔ.bQi === ΔⲆᐃⲆ) {
          this.dQi(this.Cvi, 0.08, 0.3, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.yQi, ⲆΔⲆⲆΔ.kQi);
        } else if (ⲆΔⲆⲆΔ.ia === ΔⲆᐃⲆ) {
          this.dQi(this.$xi, 0.2, 0.3, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.pQi, ⲆΔⲆⲆΔ.fQi);
        } else if (ⲆΔⲆⲆΔ.zbi === ΔⲆᐃⲆ) {
          this.dQi(this.xbi, 0.3, 0.6, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.lQi, ⲆΔⲆⲆΔ.AQi);
        } else if (ⲆΔⲆⲆΔ.gc === ΔⲆᐃⲆ) {
          this.dQi(this.Kxi, 0.1, 0.25, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.vQi, ⲆΔⲆⲆΔ.BQi);
        }
        this.mode = ΔⲆᐃⲆ;
      }
    };
    this.check = function () {
      var a = ck.Nfi[this.Hfi];
      if (a) {
        return Nh;
      } else {
        this.IQi(a);
        return false;
      }
    };
  }
  function nk(b, c, d, e, f, a) {
    const i = ~(e & 37346) & 37346 | ~(e & 37346) & e;
    const j = ~(f & 52871) & 52871 | ~(f & 52871) & f;
    const k = (1013904223 + (a + 22658) * 1664525) % 4294967296;
    const h = Bk(b ^ 35407, ~(c & 19515) & (c | 19515), ~(d & 41194) & (d | 41194));
    Bk(i, j, k);
    return ~(h & 2673) & h | ~(h & 2673) & 2673;
  }
  function ak(b, c, d, e, f) {
    const a = ((b + 26734) * 1664525 + 1013904223) % 4294967296;
    const g = ~(c & 26311) & 26311 | ~(c & 26311) & c;
    const i = ~(d & 30541) & 30541 | ~(d & 30541) & d;
    const j = function (b, c, d, e, f) {
      const a = (2531011 + (e + 55849) * 214013) % 4294967296;
      const g = ~(f & 20053) & f | ~(f & 20053) & 20053;
      const i = ut(b ^ 53318, (2147483587 + (c + 25417) * 2147483629) % 2147483647, (1013904223 + (31874 + d) * 1664525) % 4294967296);
      const j = Nw(a, g);
      return (0 << ((i ^ j) >> 8 & 255)) + (8 << ((i ^ j) >> 24 & 255)) + (24 << ((i ^ j) >> fe & y)) + (16 << ((i ^ j) >> nj & 255));
    }(a, g, i, (e | 21061) & ~(e & 21061), ~(f & 50179) & 50179 | ~(f & 50179) & f);
    Hw(a, g, i);
    return ~(j & 57905) & 57905 | ~(j & 57905) & j;
  }
  function sk(b, d, f, e, i, a) {
    const j = (1013904223 + (f + 48545) * 1664525) % 4294967296;
    const k = (2531011 + (e + 27124) * 214013) % 4294967296;
    const l = i ^ 36241;
    const h = Yv(((60748 + b) * 22695477 + 1) % 4294967296, ~(d & 15044) & 15044 | ~(d & 15044) & d);
    const g = function (b, c, d) {
      const e = (2147483587 + (33491 + b) * 2147483629) % 2147483647;
      const f = c ^ 4887;
      const a = (so << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d & y)) + (24 << (d >> kc & 255));
      return (12345 + (5576 + (Nw(e, f) ^ Kw(a, e, f, a, e, f))) * 1103515245) % 2147483648;
    }(j, k, l);
    return (24 << ((h ^ g) >> 24 & 255)) + (Sh << ((h ^ g) >> 8 & 255)) + (16 << ((h ^ g) >> 16 & 255)) + (8 << ((h ^ g) & Os));
  }
  function rk(b, c, d, e, f) {
    hq(Zc, b, c, d, e, f);
    const a = Vc(id[0], id[yd], id[eu], id[Lc], id[Ha], id[qh]);
    Br(id[1], id[Gi], id[3], id[Ha], id[Gc]);
    return ~(a & 10479) & (a | 10479);
  }
  ⵠⵠΔⵠΔⵠᐃ = Ou;
  document.getElementById("version").innerHTML = hw.oyi + ".3";
  var ok;
  var $w = [];
  var _w = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = rt.Zi[_w.time];
  _w.items.push(new ow(lw.oo, Jj, 0, Vd, 0, Math.random() * Math.PI * 2, 2, 1));
  _w.items.push(new ow(lw.fo, 0, nj, 0, so, so, Cm, br));
  _w.items.push(new ow(lw.Wn, 0, 0, Sh, 0, Math.PI / 4, 0, bd));
  _w.items.push(new ow(lw.fo, Ea, bd, Ka, 0, sh, 0, qn));
  ᐃΔΔᐃ = new function () {
    var b = this;
    function a(a) {
      if (Ee === Ce) {
        fetch(`${Dk}rivet-token`).then(a => {
          if (a.ok) {
            return a.text();
          }
          throw "Failed to list lobbies: " + a.status;
        }).then(b => {
          a(b);
        });
      } else {
        a(null);
      }
    }
    this.PQi = null;
    this.TQi = Ea;
    this.dMi = [];
    this.jQi = [[], [], [], [], [], [], [], [], []];
    this.RQi = [-1, -yd, -Ej, -1, -1, -1, -1, -1, -ja];
    this.LMi = Js;
    this.PMi = 0;
    this.LQi = function (c) {
      if (Zg !== dw) {
        b.dMi.push({
          a: dw.name,
          GQi: dw.mode,
          qQi: 0,
          Pfi: wr,
          WQi: Nf,
          id: Sh
        });
        c();
        return;
      }
      a(function (a) {
        let d = {};
        if (a) {
          d.NQi = `Bearer ${a}`;
        }
        fetch(ew + "/matchmaker/lobbies/list", {
          method: "GET",
          headers: d
        }).then(a => {
          if (!a.ok) {
            console.error(Ds);
            throw "Failed to list lobbies";
          }
          a.json().then(d => {
            console.log(undefined, undefined);
            b.dMi = [];
            let e = {};
            for (let a of d.HQi) {
              b.dMi.push({
                a: "Auto Select",
                GQi: a.UQi,
                Pfi: B,
                WQi: Nf,
                OQi: true
              });
            }
            for (let c of d.YQi) {
              let f;
              let a = c.UQi;
              f = a in e ? ++e[a] : e[a] = fo;
              let g = d.regions.find(a => a.JQi == c.JQi);
              b.dMi.push({
                a: g.KQi + " " + f,
                GQi: c.UQi,
                qQi: f,
                Pfi: c.XQi,
                WQi: c.VQi,
                id: c.ZQi
              });
            }
            c();
          });
        });
      });
    };
    this.$Qi = function (a) {
      var b = [];
      for (var c = Oq; a.length > c; c++) {
        if (a[c].a.indexOf(qr) !== -1) {
          b.push(c);
        }
      }
      if (b.length === qh) {
        return Ea;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.iSi = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var f = document.getElementById("servselect");
      if (ᐃΔΔᐃ.RQi[ᐃΔΔᐃ.LMi] === -1) {
        ᐃΔΔᐃ.RQi[ᐃΔΔᐃ.LMi] = f.selectedIndex = ᐃΔΔᐃ.$Qi(b);
      } else {
        f.selectedIndex = ᐃΔΔᐃ.RQi[ᐃΔΔᐃ.LMi];
      }
      var g = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[f.selectedIndex].a + (Ea < b[f.selectedIndex].nu ? " [" + b[f.selectedIndex].nu + " " + Fd[ΔⵠᐃΔ.$E] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Fd[ΔⵠᐃΔ.ZE] + " (" + this.tSi + ") " + Fd[ΔⵠᐃΔ.iC] + "</li>";
      for (d = Jj; d < b.length; d++) {
        g += "<li role=\"option\">" + b[d].a;
        g += " [" + b[d].nu + " " + Fd[ΔⵠᐃΔ.$E] + "]";
        g += "</li>\n";
      }
      g += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Fd[ΔⵠᐃΔ.tC] + "</li>";
      g += "</div>";
      f.innerHTML = g;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var a = $(this).text();
        var b = -wg;
        for (var c = ᐃΔΔᐃ.jQi[ᐃΔΔᐃ.LMi], d = sh; d < c.length; d++) {
          if (a === c[d].a + " [" + c[d].nu + " " + Fd[ΔⵠᐃΔ.$E] + "]") {
            b = d;
            break;
          }
        }
        if (-hf !== b) {
          document.getElementById("servselect").selectedIndex = b;
          ᐃΔΔᐃ.RQi[ᐃΔΔᐃ.LMi] = b;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(a);
        }
      });
    };
    this.tSi = 0;
    this.eSi = function () {
      this.tSi = 0;
      for (var a = Nf; ᐃΔΔᐃ.dMi.length > a; a++) {
        if (this.dMi[a].gm == "experimental") {
          this.jQi[iw.Qli].push(this.dMi[a]);
        } else if (this.dMi[a][lj[co]] == "zombies") {
          this.jQi[iw.wli].push(this.dMi[a]);
        } else if (lj[I] == this.dMi[a].gm) {
          this.jQi[iw.zli].push(this.dMi[a]);
        } else if (this.dMi[a].gm == "battle-royale") {
          this.jQi[iw.xli].push(this.dMi[a]);
        } else if (this.dMi[a].gm == "vampires") {
          this.jQi[iw.Bli].push(this.dMi[a]);
        } else {
          this.jQi[iw.Cli].push(this.dMi[a]);
        }
        this.tSi += this.dMi[a].nu;
      }
      for (a = 0; a < this.jQi.length; a++) {
        if (Sh === this.jQi[a].length) {
          this.jQi[a].push({
            a: Fd[ΔⵠᐃΔ.eC],
            nSi: xn,
            qli: "127.0.0.1",
            Vbi: 80
          });
        }
      }
      this.iSi(this.jQi[0]);
      this.uBi = function (a) {
        ᐃΔΔᐃ.LMi = a;
        ᐃΔΔᐃ.iSi(ᐃΔΔᐃ.jQi[ᐃΔΔᐃ.LMi]);
        ᐃΔΔᐃ.iSi(ᐃΔΔᐃ.jQi[ᐃΔΔᐃ.LMi]);
        document.getElementById("servselect").selectedIndex = ᐃΔΔᐃ.LMi;
      };
    };
    this.aSi = Sh;
    this.sSi = Ou;
    this.rSi = null;
    this.timeout = function () {
      b.sSi++;
      b.PQi.close();
      if (hw.ryi < b.sSi) {
        Ak = 1;
        ok.oSi = hw.hSi;
        b.gSi(Fd[ΔⵠᐃΔ.QE]);
        ok.waiting = zn;
        if (ax.reconnect.enabled) {
          cx.JAi(ok.eki);
        }
      } else {
        b.cSi();
      }
    };
    this.dSi = function (a) {
      if (this.TQi == this.PQi.TQi) {
        this.TQi++;
        this.gSi(Fd[ΔⵠᐃΔ.SE] + a);
        cx.JAi(ok.eki);
      }
    };
    this.dCi = function () {
      this.gSi("You speak too much");
    };
    this.mSi = function () {
      clearTimeout(this.rSi);
      this.gSi(Fd[ΔⵠᐃΔ.IE]);
      ok.waiting = false;
    };
    this.uSi = function () {
      ax.Vki.open = Fj;
    };
    this.fSi = function () {
      cx.iDi = Ka;
    };
    this.pSi = function () {
      cx.$Bi = 0;
    };
    this.lSi = function (a) {
      ax.Fvi.Pvi = a;
      if (ck.Dbi > -300) {
        if (a === 0) {
          this.gSi(Fd[ΔⵠᐃΔ.fC]);
        } else {
          this.gSi(Fd[ΔⵠᐃΔ.pC]);
        }
      }
    };
    this.rli = function (a) {
      ax.rli = a;
    };
    this.bSi = function (a) {
      ax.$pi = a;
    };
    this.$pi = function (a) {
      ax.Rvi.Pvi = a;
      if (ck.Mbi > -300) {
        if (Gc === a) {
          this.gSi(Fd[ΔⵠᐃΔ.lC]);
        } else {
          this.gSi(Fd[ΔⵠᐃΔ.bC]);
        }
      }
    };
    this.vSi = function (a) {
      if (so === a) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === Jf) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (ih === a) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ySi = function () {
      cx.AEi = 0;
    };
    this.kSi = function () {
      cx.tDi = 0;
    };
    this.ASi = function () {
      ax.Lfi.Rfi = [];
      ax.Lfi.mli = [];
      ax.Lfi.id = -Mc;
      ax.Lfi.lAi.stop();
      ax.DC.Ili = [];
      ax.DC.cli = wo;
      ax.DC.wSi = false;
      ax.DC.Sli = -1;
      ax.DC.id = -Ko;
      ax.DC.xAi = false;
      ax.DC.fli = Mr;
      ax.DC.tbi = false;
      ax.DC.QAi = Qc;
      ax.DC.timeout = new ⵠⵠⵠⲆ.ri(false, 0, ja, nj, ae, wg);
    };
    this.MSi = function () {
      clearTimeout(this.rSi);
      this.gSi();
      ok.waiting = false;
    };
    this.ZAi = function (a) {
      for (var b = du; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⵠⵠⵠⲆ.Ii(a[b]);
        }
      }
      ax.oAi.XAi(a[lt], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.gSi(a);
    };
    this.BSi = function () {
      clearTimeout(this.rSi);
      this.gSi(Fd[ΔⵠᐃΔ.uC]);
      ok.waiting = false;
    };
    this.DSi = function () {
      clearTimeout(this.rSi);
      this.gSi(Fd[ΔⵠᐃΔ.mC]);
      ok.waiting = ks;
    };
    this.ESi = function () {
      clearTimeout(this.rSi);
      this.gSi(Fd[ΔⵠᐃΔ.FE]);
      ok.waiting = cc;
    };
    this.CSi = function () {
      ax.Lfi.pAi(1, qh);
      cx.yAi();
    };
    this.zSi = function (a) {
      var b = a[1];
      var c = ck.Wfi[b];
      c.Mli = a[hu];
      c.jbi = a[xa];
      c.Pbi = a[4];
      c._bi = a[Au];
      c.kki = a[ag];
      c.Aki = a[7];
      c.level = a[8];
      var d = ck.Nfi[b * ck.Hyi];
      if (d) {
        d.Mli = a[ec];
        d.jbi = a[fa];
        d.Pbi = a[4];
        d._bi = a[5];
      }
    };
    this.xSi = function (a) {
      if (a === $r.ge) {
        ax.Lfi.pAi(Ko, qh);
        cx.yAi();
      } else {
        this.QSi([0, a, ae]);
      }
      ax.DC.ki();
    };
    this.SSi = function (a) {
      ax.Zpi.Ubi = 0;
      ax.DC.FAi(a);
    };
    this.ISi = function (a) {
      for (var b = st[a].r, c = 0; c < b.length; c++) {
        if (ax.Lfi.Rfi.length < ax.Lfi.max || ax.Lfi.mli[b[c][0]] > 0) {
          var d = Math.floor(b[c][Jf] * 0.8);
          if (!d) {
            continue;
          }
          this.QSi([bd, b[c][Nf], d]);
        }
      }
      ax.DC.ki();
    };
    this._Si = function (a) {
      ax.Zpi.Ubi = 0;
      ax.DC.PAi(a);
    };
    this.gSi = function (a) {
      if (ax.alert.text) {
        if (ax.alert.text !== a && ax.alert.list[ax.alert.list.length - 1] !== a) {
          ax.alert.list.push(a);
        }
      } else {
        ax.alert.text = a;
      }
    };
    this.FSi = function () {
      this.gSi(Fd[ΔⵠᐃΔ.PE]);
    };
    this.PSi = function () {
      var a;
      a = ax.pfi == 0 ? Fd[ΔⵠᐃΔ.TE] : Fd[ΔⵠᐃΔ.jE] + (ax.pfi + 1) + Fd[ΔⵠᐃΔ.RE];
      this.gSi(a);
      ax.pfi++;
    };
    this.TSi = function () {
      clearTimeout(b.rSi);
      ax.reconnect.enabled = zn;
      ax.wki = ks;
      this.gSi(Fd[ΔⵠᐃΔ.LE]);
      cx.JAi(ok.eki);
      this.PQi.close();
    };
    this.jSi = function () {
      Ak = 1;
      clearTimeout(this.rSi);
      this.gSi(Fd[ΔⵠᐃΔ.GE]);
      ok.waiting = u;
    };
    this.RSi = function () {
      Ak = 1;
      clearTimeout(this.rSi);
      this.gSi(Fd[ΔⵠᐃΔ.qE]);
      ok.waiting = false;
    };
    this.LSi = function (a) {
      var b = a[Lo];
      var c = ck.Wfi;
      c[b].Ali = a[rd];
      c[b].Mli = a[3];
      c[b].jbi = a[4];
      c[b].Pbi = a[et];
      c[b]._bi = a[Cu];
      c[b].kki = a[Mj];
      c[b].Aki = a[8];
      c[b].level = a[uo];
      c[b].Eli = 0;
      c[b].Dli = null;
      c[b].label = null;
      c[b].Gbi = null;
      c[b].wki = true;
      if (bw === 1) {
        c[b].Ali += "|" + b;
      }
    };
    this.$ki = function () {
      this.PQi[aw](Da[Sq].stringify([33]));
    };
    this.GSi = function () {
      this.gSi(Fd[ΔⵠᐃΔ.EMPTY]);
    };
    this.qSi = function () {
      this.gSi(Fd[ΔⵠᐃΔ.WE]);
    };
    this.WDi = function (a) {
      this.PQi[aw](Yq[ds].stringify([28, a]));
      ax.Vki.open = kg;
    };
    this.WSi = function (b) {
      for (var c = gw[b - 1].items, d = so; c.length > d && ax.Lfi.Rfi.length < ax.Lfi.max; d++) {
        var f = c[d][ja];
        var g = c[d][0];
        if (c[d][1] === $r.ge) {
          ax.Lfi.pAi(fn, 0);
        } else {
          this.QSi([qh, f, g]);
        }
      }
    };
    this.QSi = function (b) {
      for (var c = b.length, d = ax.Lfi, e = 1; e < c; e += Yh) {
        var f = b[e];
        var g = b[e + Jf];
        for (var h = Sh; d.Rfi.length > h; h++) {
          if (f == d.Rfi[h].id) {
            d.mli[f] += g;
            break;
          }
        }
        if (h == d.Rfi.length) {
          d.mli[f] = g;
          d.Rfi.push(cx.oEi[f]);
          cx.yAi();
        }
      }
      ax.DC.mi();
    };
    this.tli = function (b, c, d, e, f, a, g) {
      ax.tli.Nki = b / 100;
      ax.tli.K = c / Ns;
      ax.tli.c = d / 100;
      ax.tli.xE = e / Qg;
      ax.tli.oi = f / 100;
      ax.tli.uAi = a / fc;
      ax.rli = g;
    };
    this.NSi = function (a) {
      cx.SDi.modify(a, 2);
    };
    this.HSi = function (a) {
      cx.SDi.modify(a, Sh);
    };
    this.claimed = function (a) {
      cx.SDi.modify(a, Ie);
    };
    this.USi = function (a, b) {
      ax.tli.Nki = a / Re;
      ax.rli = b;
    };
    this.OSi = function (a) {
      ax.tli.xE = a / Gh;
    };
    this.YSi = function (a) {
      ax.tli.K = a / 100;
    };
    this.JSi = function (a) {
      ax.tli.uAi = a / To;
    };
    this.KSi = function (a) {
      ax.tli.c = a / To;
    };
    this.XSi = function (a) {
      ck.time = a;
      ck.transition = So;
      dx.transition = 1;
    };
    this.yEi = function () {
      document.getElementById("game_body").style.backgroundColor = rt.Zi[ck.time];
    };
    this.VSi = function (a) {
      if (iw.kli == ck.mode && ck.Wfi[a].Ali !== "spectator") {
        this.gSi(ck.Wfi[a].Ali + Fd[ΔⵠᐃΔ.NE]);
      }
      ck.Wfi[a].wki = false;
    };
    this.ZSi = function (a) {
      var b = new Uint16Array(a);
      ᐃⲆⲆΔ.Oi.eAi(b[Jf], b[2]);
    };
    this.$Si = function (a) {
      var b = new Uint16Array(a);
      ax.Oi.eAi(b[1], b[yo]);
    };
    this.iIi = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = Js; f < e; f++) {
        var g = d[Ic + f * 2];
        var i = b[4 + pj * f];
        var j = Math.PI * ((b[Au + Jr * f] >> 1) / 127) * ec;
        var k = ck.Nfi[i * ck.Hyi + g];
        if (k && k.oli) {
          if (dx.loaded && dx.eki) {
            dx.oli(b[lh + f * 4] & 1, ΔⵠⵠᐃⲆ[k.type], k.x, k.y);
          }
          k.oli.angle = j;
          k.oli.mi = j;
        }
      }
    };
    this.tIi = function (b) {
      var d = new Uint16Array(b);
      for (var f = (d.length - 1) / Jr, e = 0; f > e; e++) {
        var i;
        var j = e * pj;
        var l = d[1 + j];
        var m = d[Te + j];
        var p = (d[3 + j] >> dm) / 127 * Math.PI * 2;
        var q = d[4 + j];
        var t = $w.ebi[m][l];
        switch (q) {
          case 0:
            (i = t.Tfi[0][Nf]).angle = p;
            i.mi = gi;
            break;
          case 1:
            (i = t.s[Ea][0]).angle = p;
            i.mi = true;
            break;
          case mj:
            (i = t.s[1][Cm]).angle = p;
            i.mi = true;
            break;
          case 3:
            (i = t.s[2][0]).angle = p;
            i.mi = ln;
            break;
          case 4:
            (i = t.eIi[bd][0]).angle = p;
            i.mi = Va;
            break;
          case 5:
            (i = t.eIi[X][Js]).angle = p;
            i.mi = true;
            break;
          case 6:
            (i = t.eIi[2][ke]).angle = p;
            i.mi = true;
            break;
          case 7:
            (i = t.eIi[3][ke]).angle = p;
            i.mi = true;
            break;
          case 8:
            (i = t.eIi[k][0]).angle = p;
            i.mi = hr;
            break;
          case 9:
            (i = t.eIi[aq][Vd]).angle = p;
            i.mi = Bc;
            break;
          case 10:
            (i = t.g[0][0]).angle = p;
            i.mi = jt;
            break;
          case Eg:
            (i = t.g[1][0]).angle = p;
            i.mi = true;
            break;
          case 12:
            (i = t.g[2][xn]).angle = p;
            i.mi = So;
            break;
          case 13:
            (i = t.d[sh][0]).angle = p;
            i.mi = true;
            break;
          case 14:
            (i = t.d[1][Jj]).angle = p;
            i.mi = ln;
            break;
          case 15:
            (i = t.d[Vn][bd]).angle = p;
            i.mi = true;
            break;
          case 16:
            (i = t.b[Nf][0]).angle = p;
            i.mi = oh;
            break;
          case gq:
            (i = t.b[1][so]).angle = p;
            i.mi = Bc;
            break;
          case cg:
            (i = t.b[2][0]).angle = p;
            i.mi = true;
            break;
          case 19:
            (i = t.b[Sr][Vd]).angle = p;
            i.mi = true;
            break;
          case Es:
            (i = t.f[Jj][Ou]).angle = p;
            i.mi = Hs;
            break;
          case 21:
            (i = t.f[1][Ou]).angle = p;
            i.mi = true;
            break;
          case 22:
            (i = t.f[Te][0]).angle = p;
            i.mi = Hs;
            break;
          case 23:
            (i = t.sw[0][0]).angle = p;
            i.mi = true;
            break;
          case 24:
            (i = t.sw[1][0]).angle = p;
            i.mi = true;
            break;
          case 25:
            (i = t.sw[2][0]).angle = p;
            i.mi = jt;
            break;
          case 26:
            (i = t.gw[Cm][Nf]).angle = p;
            i.mi = Rd;
            break;
          case 27:
            (i = t.gw[1][Sh]).angle = p;
            i.mi = true;
            break;
          case 28:
            (i = t.gw[mj][Jj]).angle = p;
            i.mi = oh;
            break;
          case 29:
            (i = t.dw[0][0]).angle = p;
            i.mi = true;
            break;
          case 30:
            (i = t.dw[1][0]).angle = p;
            i.mi = true;
            break;
          case 31:
            (i = t.dw[2][0]).angle = p;
            i.mi = true;
            break;
          case 32:
            (i = t.a[0][Jj]).angle = p;
            i.mi = true;
            break;
          case 33:
            (i = t.a[hf][0]).angle = p;
            i.mi = true;
            break;
          case 34:
            (i = t.a[2][so]).angle = p;
            i.mi = oh;
            break;
          case 35:
            (i = t.cs[Js][0]).angle = p;
            i.mi = Un;
            break;
          case 36:
            (i = t.cs[1][Ou]).angle = p;
            i.mi = Xn;
            break;
          case 37:
            (i = t.cs[2][0]).angle = p;
            i.mi = true;
            break;
          case 38:
            (i = t.cs[oe][Sh]).angle = p;
            i.mi = ln;
            break;
          case 40:
            (i = t.plm[Oq][Js]).angle = p;
            i.mi = Rd;
            break;
          case 41:
            (i = t.plm[Ps][Nf]).angle = p;
            i.mi = Nh;
            break;
          case 42:
            (i = t.plm[2][0]).angle = p;
            i.mi = Vj;
            break;
          case 50:
            (i = t.re[xn][0]).angle = p;
            i.mi = true;
            break;
          case 51:
            (i = t.re[Ps][0]).angle = p;
            i.mi = jt;
            break;
          case 52:
            (i = t.re[2][0]).angle = p;
            i.mi = Kh;
            break;
          case 55:
            (i = t.c[0][0]).angle = p;
            i.mi = true;
            break;
          case 56:
            (i = t.Pfi[Cm][0]).angle = p;
            i.mi = true;
            break;
          case 57:
            (i = t.Pfi[fn][0]).angle = p;
            i.mi = Nh;
            break;
          case 58:
            (i = t.Pfi[lr][0]).angle = p;
            i.mi = true;
        }
        if (dx.loaded && dx.eki && i) {
          dx.oli(d[3 + j] & Ps, ΔΔΔΔ[q], i.x, i.y);
        }
      }
    };
    this.Npi = function () {
      this.PQi[aw](Pa[Qa].stringify([Ag, ax.Npi.$fi, ax.Npi.ipi]));
    };
    this.NEi = function (a, b) {
      this.PQi[aw](Pa[Oa].stringify([22, b, a.$fi, a.ipi]));
    };
    this.UEi = function (a, b, c) {
      if (b) {
        this.PQi[aw](Pa[Oa].stringify([7, b, a.$fi, a.ipi]));
      } else {
        this.PQi[aw](Pa[La].stringify([38, c, a.$fi, a.ipi]));
      }
    };
    this.jEi = function (a) {
      this.PQi[aw](Zq[_q].stringify([2, a.$fi, a.ipi]));
    };
    this.JDi = function (a) {
      this.PQi[aw](Zq[vs].stringify([31, a]));
    };
    this.qEi = function (a) {
      this.PQi[aw](Za[Qa].stringify([ad, a.$fi, a.ipi]));
    };
    this.HEi = function (a, b) {
      this.PQi[aw](Yq[_q].stringify([30, b, a.$fi, a.ipi, a.type]));
    };
    this.WEi = function (a, b) {
      this.PQi[aw](Yq[_q].stringify([27, b, a.$fi, a.ipi]));
    };
    this.GEi = function (a, b, c) {
      this.PQi[aw](Za[Oa].stringify([na, b, c, a.$fi, a.ipi]));
    };
    this.TEi = function (a) {
      this.PQi[aw](Zq[_q].stringify([37, a.$fi, a.ipi, a.type]));
    };
    this.PEi = function (a) {
      this.PQi[aw](Zq[_q].stringify([6, a.$fi, a.ipi]));
    };
    this.FEi = function (a) {
      this.PQi[aw](Zq[_q].stringify([0, a.$fi, a.ipi]));
    };
    this.LEi = function (a) {
      this.PQi[aw](ts[gs].stringify([34, a.$fi, a.ipi]));
    };
    this.REi = function (a) {
      this.PQi[aw](ct[ds].stringify([eh, a.ipi]));
    };
    this.sEi = function (a) {
      b.PQi[aw](As[vs].stringify([Ic, ax.zpi.id, ax._pi[a]]));
    };
    this.rEi = function () {
      b.PQi[aw](ht[Is].stringify([19, ax.zpi.$fi, ax.zpi.id]));
    };
    this.tEi = function () {
      b.PQi[aw](Ts[gt].stringify([35]));
    };
    this.aEi = function () {
      b.PQi[aw](Ts[vs].stringify([L, ax.zpi.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        ax.zpi.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        ax.zpi.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.Kfi = function (j, i, q) {
      var e = new Uint16Array(j);
      if (q) {
        ck.bki();
      }
      for (var n = (i.length - 2) / kq, a = bd; a < n; a++) {
        var t = 2 + a * 18;
        var w = 1 + Zs * a;
        var x = i[t];
        var z = e[w + 1];
        var A = e[w + aq];
        var B = ck.Hyi * x + A;
        if (z & fw.Vvi) {
          ck.vki(B);
        } else {
          var C = e[w + 2];
          var D = e[w + 3];
          var E = e[w + Ld];
          var F = e[w + 6];
          var G = e[w + 7];
          var H = e[w + th];
          var I = tm * (i[t + Ps] / 255 * Math.PI);
          if (ck.Nfi[B]) {
            var J = ck.Nfi[B];
            J.r.x = D;
            J.r.y = E;
            if (sh != x && hw.dyi < ⵠⵠⵠⲆ.j(J, J.r)) {
              J.x = D;
              J.y = E;
            }
            if (ax.id !== J.id || x === du) {
              J.Wyi = I;
            }
            J.action |= z;
            J.info = F;
            J.lbi = G;
            J.Nyi = H;
            if (J.mi) {
              J.mi(z);
            }
          } else {
            var K = new ow(C, x, A, D, E, I, z, F, G, H);
            ck.Nfi[B] = K;
            ck.Kfi[C].push(K);
          }
        }
      }
    };
    this.lli = function (a) {
      this.aSi = ex;
      var b = new Uint16Array(a);
      ax.pli.Vi(b);
    };
    this.nIi = function (a) {
      if (Nc !== Go) {
        st = Nc;
      }
      if (Vd < a.length) {
        Nc = JSON.parse(JSON.stringify(st));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = st[c.item];
          if (d !== Rc) {
            d.r = c.aIi;
            d.w = c.sIi;
            d.f = c.rIi;
            d.oi = c.oIi;
            d.e = c.hIi;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.HAi = function (a) {
      if (a && a.length !== 0) {
        ax.HAi.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -Lo;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⵠⲆ = [];
          var e = Xc;
          var f = b.length * (e + 4) + Mh;
          var a = Ea;
          d.font = e + "px Baloo Paaji";
          for (var g = 0; b.length > g; g++) {
            if (b[g].charAt(Ea) === "#") {
              ⵠⲆ[g] = b[g].substring(du, 7);
              b[g] = b[g].substring(ir);
            } else {
              ⵠⲆ[g] = "#FFFFFF";
            }
            a = Math.max(d.measureText(b[g]).width + Do, a);
          }
          c.height = f;
          c.width = a;
          g = 0;
          for (; g < b.length; g++) {
            var h = Fu(1, b[g], e, ⵠⲆ[g], null, null, null, null, null, "#000", Xa);
            d.drawImage(h, 8, (e + 4) * g + Tc);
          }
          return c;
        }(a);
      } else {
        ax.HAi.message = undefined;
      }
    };
    this.rAi = function (a) {
      var b = ck.Nfi[a[1] * ck.Hyi];
      if (b) {
        if (iw.wli === ck.mode && iw.Afi === b.Mli) {
          if (ax.Qpi) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ⵠΔⲆᐃΔ);
            } else {
              b.text.push(ⵠΔⲆᐃΔ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔⲆⵠⲆⲆⲆᐃ[Math.floor(Math.random() * ΔⲆⵠⲆⲆⲆᐃ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.OEi = function (a) {
      if (ax.Lfi.max !== ax.Lfi.Rfi.length || st[a].zE === $r.ge || -dm != ax.Lfi.lpi(st[a].zE) || ax.Lfi.kAi(st[a].r)) {
        this.PQi[aw](Da[Sq].stringify([Ra, a]));
        return ja;
      } else {
        this.qSi();
        return Js;
      }
    };
    this.xAi = function (a) {
      ax.DC.IAi(a);
    };
    this.fli = function (a) {
      ax.DC.fli = a;
      ax.DC.mi();
    };
    this.tbi = function (a) {
      ax.DC.tbi = a;
      ax.DC.mi();
    };
    this.QAi = function (a) {
      ax.DC.QAi = a;
      ax.DC.mi();
    };
    this.gIi = function (a) {
      this.gSi(Fd[ΔⵠᐃΔ.HE]);
    };
    this.cIi = function () {
      ax.DC.ki();
    };
    this.Gfi = function (b) {
      cx.Gfi.Wfi = [];
      var c = ck.Nfi[ax.Hfi];
      var d = sh;
      for (var f = ja; f < b.length; f += 2) {
        var g = {
          x: Math.floor(b[f] * ck.w / 250),
          y: Math.floor(b[f + 1] * ck.K / 250)
        };
        if (c && !d && !ax.xpi && ⵠⵠⵠⲆ.j(g, c) < 250) {
          d += fo;
        } else {
          cx.Gfi.Wfi.push(g);
        }
      }
    };
    this.dIi = function () {
      ax.Npi.open = Uo;
      ax.ubi.enabled = re;
      ax.ubi.Ubi = -fi;
      ax.ubi.label = null;
      ax.ubi.Ybi = null;
      ax.ubi.now = -Mc;
    };
    this.ubi = function (a) {
      iw.Obi = a;
      ax.ubi.enabled = true;
      ax.ubi.Ubi = new Date().getTime();
      ax.ubi.label = null;
      ax.ubi.now = -ae;
      for (var b = [$r.De, $r.Ma, $r.je, $r.Ft, $r.Lt, $r.Gt, $r.ce, $r.$t, $r.We, $r.Ne, $r.Nt, $r.Yt, $r.Ot, $r.Jt, $r.Kt, $r.ue, $r.fe, $r.Xt, $r.Vt, $r.Zt, $r.wn, $r.Mn, $r.Bn, $r.Dn, $r.En, $r.Cn, $r.He, $r.Ue, $r.Oe, $r.Ye, $r.Je, $r.Ke, $r.Xe, $r.Ve, $r.Ze, $r.$e, $r.tn, $r.en, $r.nn, $r.kn, $r.An, $r.Wt, $r.Pt, $r.jt, $r.Rt, $r.de, $r.me, $r.Pe, $r._e, $r.Fe], c = Vd; b.length > c; c++) {
        var d = ax.Lfi.lpi(b[c]);
        if (d != -Mc) {
          ax.Lfi.AAi(b.length[c], d);
        }
      }
      ax.DC.ki();
    };
    this.mIi = function (a, b, c) {
      this.uIi(a, b * 256 + c);
    };
    this.uIi = function (a, b) {
      ax.DC.Sli = -1;
      ax.Lfi.wAi(a, b, ax.Lfi.lpi(a));
      ax.DC.mi();
    };
    this.fIi = function (a) {
      ax.DC.Sli = -Lh;
      ax.Hli.wait = Bc;
      var b = ax.Lfi.lpi(a);
      ax.Lfi.wAi(a, 1, b);
      if (b >= ke && !ax.Lfi.mli[a]) {
        ax.DC.mi();
      }
      if (a == $r._a) {
        ax._pi = [ax.id];
      }
    };
    this.PDi = function () {
      this.PQi[aw](Pa[Qa].stringify([32]));
    };
    this.pDi = function (a) {
      this.PQi[aw](Yq[La].stringify([to, a.mDi, a.id]));
    };
    this.gDi = function (a, b) {
      this.PQi[aw](Yq[_q].stringify([ir, a, b]));
    };
    this.IEi = function () {
      var a = ck.Nfi[ax.Hfi];
      if (a) {
        var b = Math.PI * 2;
        this.PQi[aw](Yq[La].stringify([36, ax.DC.Sli, Math.floor((a.angle + b) % b * 255 / b), ax.DC.mode]));
      }
    };
    this.zAi = function (a, b) {
      switch (a) {
        case $r.vs:
        case $r.Rn:
        case $r.Hn:
        case $r.Un:
        case $r.$D:
        case $r.ta:
        case $r.oa:
        case $r.ca:
        case $r.sE:
        case $r.HD:
        case $r.ds:
        case $r.Qs:
        case $r.Bk:
        case $r.zs:
        case $r.Is:
        case $r.gr:
        case $r.ps:
        case $r.da:
        case $r.ma:
        case $r.Zs:
        case $r.$s:
        case $r.dE:
        case $r.ws:
          ax.DC.Sli = -ja;
          this.PQi[aw](Za[Oa].stringify([23, a]));
          break;
        case $r.Wn:
        case $r.Fa:
        case $r.wr:
        case $r.ra:
        case $r.jD:
        case $r.qD:
        case $r.GD:
        case $r.RD:
        case $r.LD:
        case $r.WD:
        case $r.ND:
        case $r.oo:
        case $r.Ta:
        case $r.ja:
        case $r.Ra:
        case $r.La:
        case $r.PD:
        case $r.qa:
        case $r.Da:
        case $r.Ea:
        case $r.UD:
        case $r.OD:
        case $r.YD:
        case $r.JD:
        case $r.KD:
        case $r.qs:
        case $r.Ps:
        case $r.Ts:
        case $r.js:
        case $r.Rs:
        case $r.Ls:
        case $r.Ns:
        case $r.Wa:
        case $r.Na:
        case $r.Ha:
        case $r.TD:
        case $r.Xn:
        case $r.Vn:
        case $r.Gs:
        case $r.Ws:
        case $r.$n:
        case $r.us:
        case $r.pa:
        case $r.ga:
        case $r.Ca:
        case $r.za:
        case $r.xa:
        case $r.Qa:
        case $r.Sa:
        case $r.As:
        case $r.Bs:
        case $r.eE:
        case $r.ss:
        case $r.ZD:
        case $r._a:
        case $r.Hs:
          if (!ax.Qpi) {
            if (ax.DC.Sli === a) {
              ax.DC.Sli = -1;
            } else {
              ax.DC.Sli = a;
            }
          }
          break;
        case $r.Ft:
        case $r.je:
        case $r.Lt:
        case $r.Gt:
        case $r.ce:
        case $r.$t:
        case $r.Nt:
        case $r.We:
        case $r.Ne:
        case $r.He:
        case $r.Ue:
        case $r.Oe:
        case $r.Ye:
        case $r.Je:
        case $r.Ke:
        case $r.Xe:
        case $r.kn:
        case $r.An:
        case $r.Ot:
        case $r.Yt:
        case $r.Jt:
        case $r.Kt:
        case $r.ue:
        case $r.Fxi:
        case $r.Xt:
        case $r.Vt:
        case $r.fe:
        case $r.Zt:
        case $r.wn:
        case $r.Mn:
        case $r.Bn:
        case $r.Dn:
        case $r.En:
        case $r.Cn:
          if (!ax.Qpi) {
            ax.DC.Sli = -Lh;
            if ((c = ck.Nfi[ax.Hfi]) && c.right === a) {
              this.PQi[aw](Zq[_q].stringify([23, $r.qt]));
            } else {
              ax.Nli.wait = gi;
              this.PQi[aw](ts[gs].stringify([23, a]));
            }
          }
          break;
        case $r.Pt:
        case $r.Wt:
        case $r.jt:
        case $r.Rt:
        case $r.pe:
        case $r.le:
        case $r.be:
        case $r.he:
        case $r.ve:
        case $r.ye:
        case $r.de:
        case $r.me:
        case $r.De:
        case $r.Ee:
        case $r.Qe:
        case $r.Se:
        case $r.Ie:
        case $r.Pe:
        case $r.Te:
        case $r._e:
        case $r.Fe:
        case $r.bn:
        case $r.xe:
        case $r.Ve:
        case $r.Ze:
        case $r.$e:
        case $r.tn:
        case $r.en:
        case $r.nn:
          if (!ax.Qpi) {
            ax.DC.Sli = -1;
            if ((c = ck.Nfi[ax.Hfi]) && a === c.right) {
              this.PQi[aw](ct[ds].stringify([23, $r.qt]));
            } else {
              this.PQi[aw](As[vs].stringify([23, a]));
            }
          }
          break;
        case $r.Os:
        case $r.Ys:
        case $r.Xs:
        case $r.yr:
        case $r.ir:
        case $r.tr:
        case $r.er:
        case $r.ar:
        case $r.sr:
        case $r.yn:
          if (!ax.Qpi) {
            ax.DC.Sli = -1;
            var c = ck.Nfi[ax.Hfi];
            this.PQi[aw](As[vs].stringify([23, a]));
          }
          break;
        case $r.an:
        case $r.sn:
        case $r.rn:
        case $r.Re:
        case $r.se:
        case $r.re:
        case $r.oe:
        case $r.Me:
        case $r.Be:
        case $r.ie:
        case $r.te:
        case $r.ee:
        case $r.Le:
        case $r.Ge:
        case $r.vn:
        case $r.qe:
        case $r.Ce:
          if ((c = ck.Nfi[ax.Hfi]) && c.dli !== a) {
            ax.Wli.wait = Hs;
          }
          this.PQi[aw](Za[_q].stringify([23, a]));
          break;
        case $r.Ht:
        case $r.dn:
        case $r.mn:
        case $r.fn:
        case $r.Ut:
        case $r.ke:
        case $r.ln:
        case $r.cn:
        case $r.hn:
        case $r.gn:
        case $r.Ae:
        case $r.we:
        case $r.un:
        case $r.ne:
        case $r.ae:
        case $r.ze:
          this.PQi[aw](ht[Is].stringify([23, a]));
      }
    };
    this.RDi = function (a) {
      this.PQi[aw](Yq[Sq].stringify([Sg, a]));
    };
    this.pIi = function (a) {
      ax.Hli.wait = true;
      var b = ax.Lfi.lpi(a);
      ax.Lfi.AAi(a, b);
      ax.DC.mi();
    };
    this.LDi = function (a, b) {
      this.PQi[aw](Da[ds].stringify([dg, a]));
    };
    this.qDi = function (a, b) {
      this.PQi[aw](Pa[Qa].stringify([Lc, a]));
    };
    this.lIi = function (a) {
      ax.Hli.wait = Hs;
      var b = ax.Lfi.lpi(a);
      ax.Lfi.wAi(a, 1, b);
      ax.DC.mi();
    };
    this.bIi = function (a) {
      var b = a[au];
      var c = a[2];
      ax.Hli.wait = true;
      var d = ax.Lfi.lpi(b);
      ax.Lfi.wAi(b, c, d);
      ax.DC.mi();
    };
    this._Ei = function () {
      this.PQi[aw](Pa[Qa].stringify([24]));
    };
    this.aAi = function (a) {
      var b = Math.PI * 2;
      this.PQi[aw](Yq[La].stringify([29, Math.floor((a + b) % b * mg / b)]));
    };
    this.sAi = function (a) {
      var b = Math.PI * 2;
      this.PQi[aw](Yq[La].stringify([17, Math.floor(es * ((a + b) % b) / b)]));
    };
    this.mAi = function (a) {
      this.PQi[aw](ⲆΔᐃᐃⵠⲆΔ[Uq].stringify([21, a]));
    };
    this.twi = function (a) {
      this.PQi[aw](Zq[_q].stringify([26, a]));
    };
    this.swi = function (a) {
      var b = ck.Nfi[ax.Hfi];
      if (ax.Qpi) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(du, 25) + " ..." + ⵠΔⲆᐃΔ);
        } else {
          b.text.push(ⵠΔⲆᐃΔ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.PQi[aw](Zq[_q].stringify([we, a]));
    };
    this.yki = function (b) {
      var c = ᐃⲆⲆΔ.select.Kfi;
      if (c.length != 0) {
        var d = [21];
        var e = [];
        ⵠⵠⵠⲆ.G(b, {
          x: ᐃⲆⲆΔ.Oi.rx,
          y: ᐃⲆⲆΔ.Oi.ry
        });
        d.push(b.x);
        d.push(b.y);
        for (var f = 0; f < c.length; f++) {
          e.push(c[f].vIi);
        }
        d.push(e);
        this.PQi[aw](ts[gs].stringify(d));
      }
    };
    this.yIi = du;
    this.kIi = {
      qli: Cm,
      Gli: 0
    };
    this.zEi = function () {
      if (hw.lyi < ex - this.yIi) {
        this.yIi = ex;
        var a = ax.Oi;
        var b = Math.floor(a.x / oc);
        var c = Math.floor(a.y / oc);
        if (b != this.kIi.qli || this.kIi.Gli != c) {
          this.PQi[aw](As[ds].stringify([Au, Math.floor(-a.x), Math.floor(-a.y)]));
          this.kIi.qli = b;
          this.kIi.Gli = c;
        }
      }
    };
    this.AIi = qh;
    this.CEi = function () {
      if (ex - this.AIi > hw.$vi) {
        this.AIi = ex;
        this.ping();
      }
    };
    this.wIi = function () {
      ax.reconnect.enabled = true;
      if (this.PQi.TQi == this.TQi) {
        this.TQi++;
        this.PQi.close();
        ᐃΔΔᐃ.connect();
      }
    };
    this.MIi = function (a) {
      this.gSi(Fd[ΔⵠᐃΔ.UE]);
      for (var b = wg; a.length > b; b++) {
        ax._pi.push(a[b]);
      }
    };
    this.BIi = function (a) {
      this.gSi(ck.Wfi[a].Ali + Fd[ΔⵠᐃΔ.YE]);
      ax._pi.push(a);
      var b = document.getElementById("team_box");
      if (cx.Ipi != -1 && b.style.display == "inline-block") {
        cx.Lpi[cx.Ipi].action();
      }
    };
    this.DIi = function () {
      this.gSi(Fd[ΔⵠᐃΔ.JE]);
      ax.zpi.wait = true;
      ax._pi = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.EIi = function (a) {
      if (a == ax.id) {
        this.gSi(Fd[ΔⵠᐃΔ.KE]);
        ax.zpi.wait = f;
        ax._pi = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.gSi(ck.Wfi[a].Ali + Fd[ΔⵠᐃΔ.XE]);
        for (var b = Ng; b < ax._pi.length; b++) {
          if (a == ax._pi[b]) {
            ax._pi.splice(b, Ej);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (cx.Ipi != -1 && c.style.display == "inline-block") {
          cx.Lpi[cx.Ipi].action();
        }
      }
    };
    this.CIi = function (a) {
      ax.wki = ui;
      this.gSi(Fd[ΔⵠᐃΔ.VE]);
      if (this.TQi == this.PQi.TQi) {
        this.TQi++;
        cx.JAi(ok.eki);
        this.PQi.close();
      }
    };
    this.zIi = function (b, c) {
      ax.wki = Qc;
      var d = new Uint16Array(c);
      var e = new Uint32Array(c);
      ax.Oki.Yki = Et[b][Math.floor(Math.random() * Et[b].length)];
      ax.Oki.Eli = ⵠⵠⵠⲆ.Z(ck.Wfi[ax.id].Eli);
      ax.Oki.Kki = ⵠⵠⵠⲆ.Z(e[1]);
      ax.Oki.Jki = d[Jf];
      this.gSi(Fd[ΔⵠᐃΔ.OE]);
      if (this.PQi.TQi == this.TQi) {
        this.TQi++;
        cx.JAi(bx.eki);
        this.PQi.close();
        try {
          aj.Widget.xIi();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.PQi[aw](hw.pyi);
    };
    this.DEi = function () {
      if (this.PQi.readyState == E) {
        this.aSi -= hw.iyi;
      }
    };
    this.EEi = function () {
      if (hw.gyi < bk) {
        this.aSi = ex;
      }
      if (hw.iyi < ex - this.aSi) {
        this.aSi = ex;
        this.wIi();
      }
    };
    this.QIi = function (c) {
      Ak++;
      clearTimeout(this.rSi);
      document.getElementById("commandMainBoxName").innerHTML = this.jQi[this.LMi][this.RQi[this.LMi]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.aSi = ex;
      ax.tli.ili.pi = ax.tli.ili.li;
      ax.tli.eli.pi = ax.tli.eli.li;
      ax.tli.nli.pi = ax.tli.nli.li;
      ax.tli.ali.pi = ax.tli.ali.li;
      ax.tli.sli.pi = ax.tli.sli.li;
      ax.tli.Nki = Lh;
      ax.tli.c = 1;
      ax.tli.K = fi;
      ax.tli.xE = Ic;
      ax.tli.oi = 1;
      ax.tli.uAi = Jf;
      ax.Gpi = oj;
      cx.qpi.display = Ou;
      ax.Lfi.Rfi = [];
      ax.Lfi.mli = [];
      ax.Lfi.max = iw.vyi;
      ax.Lfi.fAi = Vd;
      ax.Lfi.Fbi = 0;
      ax.Lfi.id = -hf;
      cx.iDi = 1;
      cx.$Bi = hf;
      cx.tDi = Ej;
      cx.AEi = X;
      ax.wki = true;
      ax.Lfi.lAi.stop();
      ax.DC.Ili = [];
      ax.DC.cli = wo;
      ax.DC.wSi = false;
      ax.DC.Sli = -1;
      ax.DC.id = -1;
      ax.DC.xAi = oj;
      ax.DC.fli = false;
      ax.DC.tbi = zn;
      ax.DC.QAi = ui;
      ax.DC.timeout = new ⵠⵠⵠⲆ.ri(false, so, ae, 0, X, 1);
      ax.Nli.timeout = new ⵠⵠⵠⲆ.ri(Mr, Sh, 1, Ka, 1 / Mh, yd);
      ax.Nli.wait = false;
      ax.Wli.timeout = new ⵠⵠⵠⲆ.ri(false, so, Ic, 0, X / Tc, X);
      ax.Wli.wait = Uo;
      ax.Hli.timeout = new ⵠⵠⵠⲆ.ri(false, bd, Ic, 0, ja, Ej);
      ax.Hli.wait = false;
      ax.zpi.id = -fi;
      ax.zpi.$fi = -1;
      ax.zpi.wait = false;
      ax.zpi.timeout = new ⵠⵠⵠⲆ.ri(Bi, 0, 1, Sh, Lo / 30, 1);
      cx.Gfi.qfi.x = -Ko;
      cx.Gfi.qfi.y = -1;
      cx.KDi.open = Mr;
      cx.Gfi.Wfi = [];
      ax.MAi.enabled = ks;
      ck.mode = c[wg];
      if (c[20] !== undefined && lq !== c[21]) {
        ck.rfi = c[_o];
        ck.ofi = c[21];
        ck.w = ck.fvi * ck.rfi;
        ck.K = ck.ofi * ck.pvi;
      }
      ck.hki = c[22];
      ck.oki = c[23];
      b.HAi(c[24]);
      b.nIi(c[25]);
      ax.Fvi.Pvi = c[26];
      ax.$pi = Ea;
      ax.Rvi.Pvi = c[27];
      ck.fki(c[19]);
      ck.time = c[bg];
      ck.Xpi.Vpi = c[15];
      ck.Xpi.Vi = new Date().getTime();
      cx.SDi.obi = c[Ms];
      ck.transition = Fj;
      ax.pfi = c[Cs];
      cx.SDi.reset();
      ax._pi = c[8];
      ck.Kfi[lw.$E] = [];
      ck.Kfi[lw.fo] = [];
      ck.Kfi[lw.Wn] = [];
      ck.Kfi[lw.oo] = [];
      ck.Kfi[lw.PD] = [];
      ck.Kfi[lw.wr] = [];
      ck.Kfi[lw.ra] = [];
      ck.Kfi[lw.jD] = [];
      ck.Kfi[lw.qD] = [];
      ck.Kfi[lw.GD] = [];
      ck.Kfi[lw.RD] = [];
      ck.Kfi[lw.LD] = [];
      ck.Kfi[lw.WD] = [];
      ck.Kfi[lw.ND] = [];
      ck.Kfi[lw.Ta] = [];
      ck.Kfi[lw.ja] = [];
      ck.Kfi[lw.Ra] = [];
      ck.Kfi[lw.La] = [];
      ck.Kfi[lw.UD] = [];
      ck.Kfi[lw.OD] = [];
      ck.Kfi[lw.YD] = [];
      ck.Kfi[lw.JD] = [];
      ck.Kfi[lw.Ps] = [];
      ck.Kfi[lw.Ts] = [];
      ck.Kfi[lw.js] = [];
      ck.Kfi[lw.Rs] = [];
      ck.Kfi[lw.Ls] = [];
      ck.Kfi[lw.Ns] = [];
      ck.Kfi[lw.qa] = [];
      ck.Kfi[lw.Da] = [];
      ck.Kfi[lw.Ea] = [];
      ck.Kfi[lw.Fa] = [];
      ck.Kfi[lw.Wa] = [];
      ck.Kfi[lw.Na] = [];
      ck.Kfi[lw.Ha] = [];
      ck.Kfi[lw.yo] = [];
      ck.Kfi[lw.MA] = [];
      ck.Kfi[lw.ir] = [];
      ck.Kfi[lw.tr] = [];
      ck.Kfi[lw.er] = [];
      ck.Kfi[lw.ar] = [];
      ck.Kfi[lw.Wf] = [];
      ck.Kfi[lw.Dp] = [];
      ck.Kfi[lw.Ub] = [];
      ck.Kfi[lw.Ar] = [];
      ck.Kfi[lw.ZD] = [];
      ck.Kfi[lw.Bf] = [];
      ck.Kfi[lw.qu] = [];
      ck.Kfi[lw.Bv] = [];
      ck.Kfi[lw.Fg] = [];
      ck.Kfi[lw.oc] = [];
      ck.Kfi[lw.FB] = [];
      ck.Kfi[lw.yr] = [];
      ck.Kfi[lw.hr] = [];
      ck.Kfi[lw.Dvi] = [];
      ck.Kfi[lw.dc] = [];
      ck.Kfi[lw.mc] = [];
      ck.Kfi[lw.mE] = [];
      ck.Kfi[lw.qo] = [];
      ck.Kfi[lw._vi] = [];
      ck.Kfi[lw.Ryi] = [];
      ck.Kfi[lw.Gyi] = [];
      ck.Kfi[lw.Lyi] = [];
      ck.Kfi[lw.Tr] = [];
      ck.Kfi[lw.fA] = [];
      ck.Kfi[lw.vr] = [];
      ck.Kfi[lw.lr] = [];
      ck.Kfi[lw.Ir] = [];
      ck.Kfi[lw.TD] = [];
      ck.Kfi[lw.Xn] = [];
      ck.Kfi[lw.Vn] = [];
      ck.Kfi[lw.KD] = [];
      ck.Kfi[lw.Gs] = [];
      ck.Kfi[lw.Ws] = [];
      ck.Kfi[lw.qs] = [];
      ck.Kfi[lw._a] = [];
      ck.Kfi[lw.Hs] = [];
      ck.Kfi[lw.$n] = [];
      ck.Kfi[lw.us] = [];
      ck.Kfi[lw.pa] = [];
      ck.Kfi[lw.ga] = [];
      ck.Kfi[lw.Ca] = [];
      ck.Kfi[lw.za] = [];
      ck.Kfi[lw.xa] = [];
      ck.Kfi[lw.Qa] = [];
      ck.Kfi[lw.Sa] = [];
      ck.Kfi[lw.Bs] = [];
      ck.Kfi[lw.As] = [];
      ck.Kfi[lw.eE] = [];
      ck.Kfi[lw.ss] = [];
      ck.Nfi = [];
      ck.Hyi = c[Ke];
      ax.id = c[9];
      ax.Hfi = ax.id * ck.Hyi;
      if (dx.loaded) {
        dx.Wfi[0].Hfi = ax.Hfi;
        dx.Wfi[0].CQi = qh;
      }
      pk.SIi();
      ax.Oi.eAi(c[3], c[10]);
      ck.Wfi = [];
      var d = ck.Wfi;
      for (var e = 0; c[11] > e; e++) {
        d.push(new rw());
      }
      e = 0;
      for (var f = c[4]; e < f.length; e++) {
        var a = d[f[e].IIi];
        a.Ali = f[e].n;
        a.Mli = f[e].s;
        a.jbi = f[e].a;
        a.kki = f[e].c;
        a._bi = f[e].b;
        a.Aki = f[e].d;
        a.Pbi = f[e].g;
        a.level = f[e]._Ii;
        a.Eli = ⵠⵠⵠⲆ.V(f[e].Tfi);
        a.wki = oh;
        if (fi === bw) {
          a.Ali += "|" + f[e].IIi;
        }
      }
      ax.pli.sort();
      if (ck.mode === iw.kli && ck.Wfi[ax.id].Ali === "spectator") {
        ax.xpi = true;
      } else {
        ax.xpi = kg;
      }
      if (iw.wli === ck.mode && ck.Wfi[ax.id].Mli === iw.Afi) {
        ax.Qpi = Nh;
      } else {
        ax.Qpi = cc;
      }
      if (iw.Bli === ck.mode && ck.Wfi[ax.id].Mli === iw.wfi) {
        ax.Jyi = true;
      } else {
        ax.Jyi = false;
      }
      ⲆᐃΔⵠ.set("starve_token", ax.Mki);
      if (c[12] === Vd) {
        ax.Vki.Ubi = Sh;
        cx.SDi.restore(c[or]);
        var g = c[14];
        if (g[$r.ge]) {
          ax.Lfi.pAi(1, 0);
        }
        for (e = 0; e < g.length; e++) {
          if (g[e]) {
            if ($r.ge == e) {
              continue;
            }
            if (e == $r.qt) {
              continue;
            }
            this.QSi([0, e, g[e]]);
          }
        }
        ax.Vki.open = false;
      } else {
        if (iw.zli === ck.mode) {
          this.QSi([Ou, $r.pE, au]);
        } else if (iw.Bli === ck.mode) {
          if (ax.Jyi) {
            this.QSi([0, $r.us, 4]);
          } else {
            this.QSi([Sh, $r.RD, nh]);
          }
        }
        if (ck.mode === iw.Cli || iw.Bli === ck.mode || iw.Qli === ck.mode || iw.zli === ck.mode) {
          ax.Vki.Ubi = new Date().getTime();
          ax.Vki.open = true;
          ax.Vki.value = c[xq];
          cx.Vki.Vi();
        } else {
          ax.Vki.Ubi = 0;
          ax.Vki.open = false;
          ax.Vki.value = 0;
        }
        ax.Uki = c[12].toString();
      }
      ax.ubi.enabled = c[6];
      ax.ubi.Ubi = -hf;
      ax.ubi.label = null;
      ax.ubi.now = -1;
      ⲆᐃΔⵠ.set("starve_token_id", ax.Uki);
      if (ax.reconnect.enabled) {
        ax.reconnect.rotate = 0;
        ax.reconnect.enabled = false;
      } else {
        ok.JAi(cx.eki);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + ok.Mli + "A" + ok.jbi);
        }
      }
    };
    this.connect = function () {
      b.sSi = Oq;
      b.cSi();
    };
    this.FIi = function (c) {
      let d = iw.wyi[b.LMi];
      console.log(undefined, Ds, undefined);
      let e;
      let f;
      let g = b.RQi[b.LMi];
      if (g == qh) {
        e = ew + "/matchmaker/lobbies/find";
        f = {
          HQi: [d]
        };
      } else {
        console.log(Yr, Zg, undefined, Ls);
        let a = b.dMi.find(a => a[lj[rs]] == d && a.qQi == g);
        console.log(yc, Go);
        e = ew + "/matchmaker/lobbies/join";
        f = {
          ZQi: a.id
        };
      }
      let h = {};
      if (c) {
        h.NQi = `Bearer ${c}`;
      }
      fetch(e, {
        method: "POST",
        headers: h,
        body: JSON.stringify(f)
      }).then(a => {
        if (a.ok) {
          a.json().then(a => {
            console.log(undefined, Ls);
            b.PIi(a);
          });
        } else {
          alert("Failed to join lobby");
        }
      });
    };
    this.cSi = function () {
      console.log(undefined);
      if (dw === undefined) {
        a(b.FIi);
      } else {
        b.PIi({
          TIi: {
            jIi: {
              token: Ea
            },
            ports: {
              default: {
                host: dw.host,
                RIi: du
              }
            }
          }
        });
      }
    };
    this.PIi = function (c) {
      let d = c.TIi.ports.default;
      let e = d.host;
      let a = "ws" + (d.RIi ? "s" : "") + "://" + e + "?token=" + c.TIi.jIi.token;
      console.log(undefined, Oh);
      b.PQi = new aj.WebSocket(a);
      b.PQi.binaryType = "arraybuffer";
      b.PQi.TQi = b.TQi;
      b.PQi.onmessage = function (a) {
        if (b.TQi == b.TQi) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case Js:
                b.rAi(c);
                break;
              case au:
                b.dSi(c[1]);
                break;
              case 2:
                b.LSi(c);
                break;
              case Qe:
                b.QIi(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case Nu:
                b.ZAi(c);
                break;
              case oo:
                b.HAi(c[wg]);
            }
          } else {
            var d = new Uint8Array(a.data);
            switch (d[Oq]) {
              case 0:
                b.Kfi(a.data, d, Fj);
                break;
              case 1:
                b.Kfi(a.data, d, Nh);
                break;
              case mj:
                b.cIi();
                break;
              case 3:
                b.QSi(new Uint16Array(a.data));
                break;
              case Gs:
                b.ESi();
                break;
              case 5:
                b.RSi();
                break;
              case lc:
                b.gIi();
                break;
              case 7:
                b.tIi(a.data);
                break;
              case tq:
                b.xSi(d[1]);
                break;
              case wn:
                b._Si(d[au]);
                break;
              case 10:
                b.qSi();
                break;
              case 11:
                b.uIi(d[Ko], d[2]);
                break;
              case 12:
                b.xAi(d[Lh]);
                break;
              case 13:
                b.iIi(d, a.data);
                break;
              case 14:
                b.dCi();
                break;
              case 15:
                b.VSi(d[1]);
                break;
              case Uj:
                b.tli(d[1], d[ec], d[3], d[4], d[Cd], d[6], d[7]);
                break;
              case 17:
                b.$Si(a.data);
                break;
              case hc:
                b.GSi();
                break;
              case 19:
                b.tbi(d[1]);
                break;
              case 20:
                b.PSi();
                break;
              case 21:
                b.lli(a.data);
                break;
              case 22:
                b.XSi(d[1]);
                break;
              case 23:
                b.ZSi(a.data);
                break;
              case 24:
                b.fIi(d[1]);
                break;
              case 25:
                b.zIi(d[1], a.data);
                break;
              case 26:
                b.Gfi(d);
                break;
              case 27:
                b.TSi();
                break;
              case 28:
                b.ubi(d[Ej]);
                break;
              case 29:
                b.dIi();
                break;
              case 30:
                b.CIi();
                break;
              case 31:
                b.MIi(d);
                break;
              case 32:
                b.EIi(d[fi]);
                break;
              case 33:
                b.BIi(d[1]);
                break;
              case 34:
                b.DIi();
                break;
              case 35:
                b.WSi(d[ja]);
                break;
              case 36:
                b.QAi(d[yd]);
                break;
              case 37:
                b.USi(d[1], d[wh]);
                break;
              case 38:
                b.YSi(d[Jf]);
                break;
              case 39:
                b.OSi(d[1]);
                break;
              case 40:
                b.CSi();
                break;
              case 41:
                b.zSi(d);
                break;
              case 42:
                b.NSi(d[Lo]);
                break;
              case 43:
                b.HSi(d[ae]);
                break;
              case 44:
                b.claimed(d[Mc]);
                break;
              case 45:
                b.SSi(d[Ej]);
                break;
              case 46:
                b.ISi(d[1]);
                break;
              case 47:
                b.fli(d[1]);
                break;
              case 48:
                b.FSi();
                break;
              case 50:
                b.mIi(d[fi], d[Cs], d[3]);
                break;
              case 51:
                b.jSi();
                break;
              case 52:
                b.pIi(d[1]);
                break;
              case 53:
                b.lIi(d[1]);
                break;
              case 54:
                b.LIi();
                break;
              case 55:
                b.JSi(d[1]);
                break;
              case 56:
                b.KSi(d[dm]);
                break;
              case 57:
                b.DSi();
                break;
              case 58:
                b.BSi();
                break;
              case 59:
                b.ASi();
                break;
              case 60:
                b.uSi();
                break;
              case 61:
                ax.Oi.Zki = 0.2;
                ax.Oi.Ubi = 3;
                break;
              case 62:
                b.bIi(new Uint16Array(a.data));
                break;
              case 63:
                b.pSi();
                break;
              case 64:
                b.fSi();
                break;
              case 65:
                b.kSi();
                break;
              case 66:
                b.ySi();
                break;
              case 67:
                b.vSi(d[1]);
                break;
              case 68:
                b.lSi(d[1]);
                break;
              case 69:
                b.$pi(d[au]);
                break;
              case 70:
                b.bSi(d[1]);
                break;
              case 71:
                b.rli(d[1]);
            }
          }
        }
      };
      this.PQi.onopen = function () {
        clearTimeout(b.rSi);
        ax.XMi = ax.XMi || ⵠⵠⵠⲆ.F("token");
        ⵠⵠⵠⲆ.h().then(a => {
          b.PQi[aw](Ts[Is].stringify([ok.Ali.input.value, screen.width + 200, screen.height + 200, hw.oyi, ax.Mki, ax.Uki, ax.reconnect.enabled ? 1 : 0, ok.Mli, ok.jbi, ok.Fbi, ok._bi, ok.kki, ok.Aki, ix === undefined ? Ea : ix, hx === undefined ? 0 : hx.substring(hx.length - 50), cw, ax.XMi, a, ax.VMi, ax.ZMi]));
          ax.XMi = undefined;
          ax.VMi = Lr;
          ax.ZMi = undefined;
          b.rSi = setTimeout(b.timeout, hw.syi);
        });
      };
    };
  }();
  var ck;
  var ax;
  var bx;
  var cx = {
    Ji: Ys
  };
  var dx = new function () {
    this.eki = 0;
    this.loaded = 0;
    this.transition = bd;
    this.mQi = function (a) {
      return a / ck.w * 100;
    };
    this.uQi = function (a) {
      return Ns * (a / ck.K);
    };
    this._Qi = function (a, b) {
      a = this.mQi(a) - this.GIi.x;
      return this.GIi.x + b * a;
    };
    this.FQi = function (a, b) {
      a = Math.abs(this.uQi(a) - this.GIi.y);
      return this.GIi.y + b * a;
    };
    this.sample = {};
    this.xQi = {};
    this.qbi = {};
    this.qIi = function (b, c, d, e) {
      for (var f = 0; c.length > f; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return true;
        }
      }
      return false;
    };
    this.oli = function (a, b, c, d) {
      c = this._Qi(c, ⲆΔⲆⲆΔ.MQi);
      d = this.FQi(d, ⲆΔⲆⲆΔ.MQi);
      console.log("HIT", a, b, c, d, ⲆΔⲆⲆΔ.MQi);
      if (a) {
        if (b === 1) {
          this.qIi(this.qbi.Xxi, this.sample.Xxi, c, d);
        } else if (du === b) {
          this.qIi(this.qbi.Jxi, this.sample.Jxi, c, d);
        }
      } else {
        this.qIi(this.qbi.Sbi, this.sample.Sbi, c, d);
      }
    };
    this.GIi = {
      y: 0,
      x: du
    };
    this.WIi = {
      y: 0,
      x: 0
    };
    this.NIi = {};
    this.Wfi = [];
    this.QQi = function (a, b) {
      for (var c in this.NIi) {
        var d = this.NIi[c];
        d.check(a);
        if (d.gQi) {
          if (ck.Xpi.now < Vw.Bxi) {
            d.dQi();
          }
          if (b) {
            d.mi(a, this.GIi);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= bd;
    };
    this.HIi = function () {
      var b = [];
      for (var c = Ng; c < this.Wfi.length; c++) {
        if ((f = this.Wfi[c]).CQi) {
          b.push(c);
        } else if (!f.CQi && !ck.Nfi[f.Hfi]) {
          f.IQi();
          b.push(c);
        }
      }
      var d = ck.Kfi[lw.$E];
      var e = 0;
      for (c = 0; c < d.length && b.length > e; c++) {
        var f = d[c];
        if ((ck.mode != iw.kli || ck.Wfi[f.id].Ali !== "spectator") && -Ej === f.iki && f.Hfi !== ax.Hfi) {
          this.Wfi[b[e]].Vi(f.Hfi);
          e++;
        }
      }
    };
    this.UIi = function () {
      this.HIi();
      for (var a = Jj; this.Wfi.length > a; a++) {
        var b = this.Wfi[a];
        if (!b.CQi && b.check()) {
          b.mi();
        }
      }
    };
    this.OIi = function (a) {
      if (this.WIi.x === a.x && a.y === this.WIi.y) {
        return Jj;
      } else {
        this.WIi.x = a.x;
        this.WIi.y = a.y;
        this.GIi.x = this.mQi(a.x);
        this.GIi.y = this.uQi(a.y);
        Howler.pos(this.GIi.x, this.GIi.y, du);
        return fo;
      }
    };
    this.xEi = function () {
      if (this.eki && this.loaded) {
        var a = ck.Nfi[ax.Hfi];
        if (a) {
          a.iki = Cm;
          var b = this.OIi(a);
          if (iw.wli !== ck.mode && iw.zli !== ck.mode && iw.xli !== ck.mode) {
            this.QQi(a, b);
          }
          this.UIi();
        }
      }
    };
    this.YIi = function () {
      for (var b in Zw) {
        var c = Zw[b];
        if (typeof c === "object" && c.path) {
          c.jxi = new Howl({
            src: c.path,
            volume: du,
            JIi: c.$Ci
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.jxi.play(d);
            c.jxi.stop(j);
            c.jxi.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(Zg, Oh);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > wg) {
            dx.sample[d] = g;
          } else {
            dx.sample[d] = g[0];
          }
          dx.qbi[d] = c.jxi;
        }
      }
    };
    this.KIi = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.XIi = function (b, c, d, e, f, a) {
      var g = b;
      for (var i = Nf; i < d; i++) {
        var j = g[i] = [];
        for (Δⵠᐃⵠ = 0; e > Δⵠᐃⵠ; Δⵠᐃⵠ++) {
          j[Δⵠᐃⵠ] = dx.sample[f + Δⵠᐃⵠ][i];
          c.jxi.volume(a, j[Δⵠᐃⵠ]);
        }
      }
    };
    this.Vi = function () {
      dx.YIi();
      dx.xQi.zQi = [];
      dx.xQi.Nli = [];
      dx.xQi.rbi = [];
      dx.XIi(dx.xQi.zQi, Zw.qxi, Vw.$E, Xg, "p", 0.15);
      dx.XIi(dx.xQi.Nli, Zw.Nxi, Vw.$E, 4, "w", 0.15);
      dx.XIi(dx.xQi.rbi, Zw.Txi, Vw.$E, 3, "d", 0.09);
      dx.KIi(dx.sample.Sbi, dx.qbi.Sbi, 0.15);
      dx.KIi(dx.sample.Jxi, dx.qbi.Jxi, 0.2);
      dx.KIi(dx.sample.Xxi, dx.qbi.Xxi, 1);
      dx.NIi.VIi = new ik(Vw.wxi, this.sample.Yxi, this.sample.Vxi, Vw.Qxi, 0.05, 0.4, Zw.Uxi.jxi, Vw.Mxi, {
        x: rt.ZIi,
        y: rt.$Ii,
        w: ck.w,
        K: ck.K
      }, {
        x: rt.ZIi - 2300,
        y: rt.$Ii - 4000,
        w: ck.w,
        K: ck.K
      }, {
        x: rt.ZIi - 1500,
        y: rt.$Ii - 2000,
        w: ck.w,
        K: ck.K
      });
      dx.NIi.i_i = new ik(Vw.Cxi, this.sample.eQi, this.sample.tQi, Vw.Sxi, 0.03, 0.25, Zw.Uxi.jxi, Vw.Mxi, {
        x: Ou,
        y: rt.$Ii + 800,
        w: rt.ZIi - 2300,
        K: ck.K
      }, {
        x: -vo,
        y: rt.$Ii - 300,
        w: rt.ZIi - 100,
        K: ck.K
      }, {
        x: -hs,
        y: rt.$Ii + 400,
        w: rt.ZIi - 1400,
        K: ck.K
      });
      dx.NIi.Kxi = new ik(Vw.Cxi, this.sample.Zxi, this.sample.Oxi, Vw.zxi, 0.01, 0.22, Zw.Uxi.jxi, Vw.Mxi, {
        x: -bi,
        y: -yq,
        w: ck.w + 200,
        K: rt.$Ii - 1000
      }, {
        x: -Gh,
        y: -100,
        w: ck.w + 200,
        K: rt.$Ii + 600
      }, {
        x: -100,
        y: -100,
        w: ck.w + 200,
        K: rt.$Ii + Re
      });
      for (var a = 0; Vw.$E > a; a++) {
        dx.Wfi[a] = new ek(a);
      }
      dx.Wfi[Ou].Vi(ax.Hfi);
      dx.loaded = 1;
    };
    this.t_i = function () {
      if (!this.transition && ck.Xpi.now < Vw.Bxi) {
        this.transition = ae;
      }
    };
    this.JAi = function () {
      if (this.eki && this.loaded) {
        for (var a in dx.sample) {
          var b = dx.sample[a];
          if (typeof b === "object") {
            for (var c = Ea; c < b.length; c++) {
              dx.qbi[a].stop(b[c]);
            }
          } else {
            dx.qbi[a].stop(b);
          }
        }
        for (c = 0; dx.Wfi.length > c; c++) {
          dx.Wfi[c].IQi();
        }
      }
    };
    this.select = function () {
      if (dx.eki) {
        dx.JAi();
      } else {
        if (!dx.loaded) {
          dx.Vi();
        }
        dx.Wfi[0].Hfi = ax.Hfi;
        dx.Wfi[xn].CQi = 0;
        dx.t_i();
      }
      dx.eki = !dx.eki;
    };
  }();
  var pk = new function () {
    this.nMi = function () {
      this.Avi = 81;
      this.yvi = 68;
      this.Mvi = 90;
      this.e_i = 83;
    };
    this.aMi = function () {
      this.Avi = 65;
      this.yvi = 68;
      this.Mvi = 87;
      this.wvi = 83;
    };
    this.n_i = 0;
    this.e_i = X;
    this.a_i = 49;
    this.s_i = 50;
    this.r_i = 51;
    this.o_i = 52;
    this.h_i = 53;
    this.g_i = wj;
    this.c_i = 37;
    this.d_i = 39;
    this.m_i = 38;
    this.u_i = 40;
    this.f_i = 32;
    this.p_i = 82;
    this.l_i = 71;
    this.b_i = 86;
    this.v_i = 66;
    this.aMi();
    this.keys = new Array(255);
    for (var a = nj; a < 255; a++) {
      this.keys[a] = this.n_i;
    }
    this.Xli = function (a) {
      var b = Math.min(a.charCode || a.keyCode, ee);
      this.keys[b] = this.n_i;
    };
    this.cDi = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.Avi == b || this.c_i == b) {
        this.y_i();
      } else if (b == this.Mvi || b == this.m_i) {
        this.k_i();
      } else if (this.e_i == b || b == this.A_i) {
        this.w_i();
      } else if (this.yvi == b || this.d_i == b) {
        this.M_i();
      }
      this.keys[b] = this.e_i;
      return b;
    };
    this.y_i = function () {
      this.keys[this.yvi] = this.n_i;
      this.keys[this.d_i] = this.n_i;
    };
    this.M_i = function () {
      this.keys[this.Avi] = this.n_i;
      this.keys[this.c_i] = this.n_i;
    };
    this.w_i = function () {
      this.keys[this.Mvi] = this.n_i;
      this.keys[this.m_i] = this.n_i;
    };
    this.k_i = function () {
      this.keys[this.wvi] = this.n_i;
      this.keys[this.u_i] = this.n_i;
    };
    this.SIi = function () {
      this.keys[this.yvi] = this.n_i;
      this.keys[this.d_i] = this.n_i;
      this.keys[this.Avi] = this.n_i;
      this.keys[this.c_i] = this.n_i;
      this.keys[this.Mvi] = this.n_i;
      this.keys[this.m_i] = this.n_i;
      this.keys[this.wvi] = this.n_i;
      this.keys[this.u_i] = this.n_i;
    };
    this.hAi = function () {
      return this.keys[this.Avi] || this.keys[this.c_i];
    };
    this.gAi = function () {
      return this.keys[this.yvi] || this.keys[this.d_i];
    };
    this.dAi = function () {
      return this.keys[this.Mvi] || this.keys[this.m_i];
    };
    this.cAi = function () {
      return this.keys[this.wvi] || this.keys[this.u_i];
    };
    this.B_i = function () {
      return this.keys[this.g_i];
    };
    this.D_i = function () {
      return this.keys[this.a_i];
    };
    this.E_i = function () {
      return this.keys[this.s_i];
    };
    this.C_i = function () {
      return this.keys[this.r_i];
    };
    this.z_i = function () {
      return this.keys[this.o_i];
    };
    this.x_i = function () {
      return this.keys[this.f_i];
    };
    this.Q_i = function () {
      return this.keys[this.p_i];
    };
    this.S_i = function () {
      return this.keys[this.l_i];
    };
    this.I_i = function () {
      return this.keys[this.b_i];
    };
    this.__i = function () {
      return this.keys[this.v_i];
    };
  }();
  var lk = new function () {
    this.e_i = Jj;
    this.n_i = fi;
    this.IDLE = 2;
    this.F_i = nj;
    this.P_i = Ej;
    this.Kbi = {
      x: 0,
      y: 0
    };
    this.T_i = xn;
    this.j_i = xn;
    this.angle = 0;
    this.state = this.IDLE;
    this.j = this.F_i;
    this.cDi = function () {
      this.state = this.e_i;
    };
    this.Xli = function () {
      this.state = this.n_i;
    };
    this.mi = function () {
      if (this.Kbi.x != this.T_i || this.Kbi.y != this.j_i) {
        this.T_i = this.Kbi.x;
        this.j_i = this.Kbi.y;
        return true;
      } else {
        return zn;
      }
    };
  }();
  var bk = du;
  var ex = Nf;
  var fx = new function (b, i, e) {
    this.vli = b;
    this.yli = i;
    this.R_i = {
      translate: {
        x: bd,
        y: du
      },
      style: document.getElementById("loading").style,
      mi: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.R_i.style.position = "absolute";
    this.R_i.style.display = "inline-block";
    this.R_i.mi();
    this.Ji = Vj;
    this.stop = function () {
      this.Ji = false;
    };
    this.lwi = {
      total: 1
    };
    var j = this;
    function a() {}
    var k = 0;
    function l(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return lt;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || -au !== a.indexOf("day-player") || -ae !== a.indexOf("night-player") || -Ej !== a.indexOf("day-accessory") || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -Lo || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -fo || a.indexOf("night-skin") !== -1 || -lt !== a.indexOf("day-river") || a.indexOf("night-river") !== -fo || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -Lh || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || -Ps !== a.indexOf("day-leaf") || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -X || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -Ic || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -hf || -au !== a.indexOf("bigznight") || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || -Lo !== a.indexOf("-lead-") || -ae !== a.indexOf("day-lava-") || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -wg || a.indexOf("-fog") !== -1 || -fn !== a.indexOf("-lava") || a.indexOf("pebblecompo") !== -Lo || a.indexOf("avatar-player") !== -lt) {
        return 0;
      } else {
        return 1;
      }
    }
    this.L_i = function () {
      j.mi();
      if (++k == 40) {
        j.stop();
        a();
        return;
      }
      aj.setTimeout(j.L_i, 33);
    };
    this.JAi = function (b) {
      a = b;
      j.L_i();
    };
    new Date().getTime();
    Object.keys(Δᐃ).length;
    console.log(undefined, Pq);
    for (var n in Δᐃ) {
      if (l(Δᐃ[n]) === 0) {
        0;
      }
    }
    console.log(undefined, undefined);
    function o() {
      if (this.Li !== Ou) {
        return this.Li;
      } else {
        this.Li = En;
        this.src = this.vDi;
        return 0;
      }
    }
    function g(a) {
      this.Li = 1;
    }
    var c = 0;
    function q() {
      console.log(Oh);
      if (c !== fo) {
        c = wg;
        console.log(Zg);
        if (od !== Gd) {
          od();
        }
        Gd();
        var a = ⵠⵠⵠⲆ.F("server");
        if (a !== null) {
          ᐃΔΔᐃ.PMi = fo;
          ᐃΔΔᐃ.dMi = [{
            WQi: Jj,
            Pfi: 100,
            IIi: "server" + a + ".starve.io",
            Tfi: 443,
            a: "Private Server " + a,
            G_i: 1
          }];
        }
        ᐃΔΔᐃ.eSi();
        setTimeout(e, io);
      }
    }
    function m() {
      let a = function () {
        ᐃΔΔᐃ.LQi(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, Ns);
        } else {
          setTimeout(m, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function u() {
      this.q_i++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.q_i}`, this);
      if (Lc < this.q_i) {
        console.warn("Failed to load image too many times");
      }
      var a = this.q_i;
      var b = this.src;
      var c = l(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⵠⲆⵠⵠᐃᐃΔ) {
          if (b.indexOf(ⵠⲆⵠⵠᐃᐃΔ[c]) !== -Mc) {
            Δᐃ[c] = new Image();
            Δᐃ[c].onload = g;
            Δᐃ[c].onerror = u;
            Δᐃ[c].q_i = a;
            Δᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function f(a) {
      for (var b in Δᐃ) {
        var c = Δᐃ[b];
        if (typeof c === "string" && l(c) === a) {
          Δᐃ[b] = new Image();
          Δᐃ[b].Li = 0;
          Δᐃ[b].q_i = 0;
          Δᐃ[b].onload = g;
          Δᐃ[b].onerror = u;
          Δᐃ[b].jfi = o;
          Δᐃ[b].vDi = c;
        }
      }
    }
    f(fn);
    f(0);
    Fu(1, "l", 20, "#000");
    m();
    Yp();
    this.mi = function () {
      this.R_i.translate.x = (sa - 500) / 2;
      this.R_i.translate.y = (oa - 150) / rd;
      var a = 2500 / (40 - k + Ps) - 48;
      this.R_i.translate.y -= a;
      this.R_i.mi();
    };
    this.R_i.mi();
    this.Sfi = function () {
      try {
        Fp();
      } catch (a) {}
      this.mi();
    };
  }(ia, ea, function () {
    np();
    cx = new Pw(ia, ea);
    (ok = new Fw(ia, ea)).HBi();
    bx = new Lw(ia, ea);
    ck = new qw();
    ax = new Ew();
    fx.JAi(function () {
      fx.R_i.style.display = "none";
      ok.eki();
    });
  });
  function kk() {
    try {
      aj.Widget.xIi();
    } catch (a) {}
  }
  aj.onbeforeunload = function () {
    if (cx.Ji) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  fr();
  (function b(a) {
    aj.requestAnimationFrame(b);
    bk = (a - ex) / 1000;
    ex = a;
    bk = dm < bk ? lt : bk;
    if (cx.Ji) {
      cx.Sfi();
    } else {
      ea.clearRect(0, 0, sa, oa);
      if (fx.Ji) {
        fx.Sfi();
      } else if (ok.Ji) {
        ok.Sfi();
      } else if (bx.Ji) {
        bx.Sfi();
      }
    }
  })(0);
  var Ak = 0;
  function gx() {
    Mk.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Bc);
    Mk.send();
  }
  var Mk = new XMLHttpRequest();
  function Bk(a, b, c) {
    const d = ~(a & 64171) & (a | 64171);
    return ((17136 + ((d | 15328) & ~(d & 15328) ^ (c ^ 49669))) * 214013 + 2531011) % 4294967296;
  }
  Mk.onreadystatechange = function () {
    if (this.readyState === _n) {
      this.status;
    }
  };
  var Dk = "https://token.starve.io/";
  var Ek = "https://token2.starve.io/";
  var Ck = 0;
  var zk = 1;
  var xk = Ds;
  var hx = Pq;
  var ix = Rc;
  var jx = 0;
  aj.xBi = function () {
    jx = 1;
  };
  var kx = {
    W_i: "ACCESS_TOKEN"
  };
  var Fk = document.createElement("script");
  Fk.type = "text/javascript";
  Fk.async = ud;
  Fk.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Fk.addEventListener("load", function (a) {
    aj.XPayStationWidget[lj[kr]](kx);
    aj.XPayStationWidget.on("status-done", Yk);
  }, false);
  document.getElementsByTagName("head")[Jj].appendChild(Fk);
  aj.N_i = function () {
    Jk();
    console.log(undefined);
  };
  (function (b, c, d) {
    var e;
    var f = b.getElementsByTagName(c)[ke];
    if (!b.getElementById(d)) {
      (e = b.createElement(c)).id = d;
      e.src = "https://connect.facebook.net/en_US/sdk.js";
      f.parentNode.insertBefore(e, f);
    }
  })(document, "script", "facebook-jssdk");
  var Pk = undefined;
  var lx = ug;
  function mx() {
    aj.gapi[lj[Cc]][lj[Xa]]({
      H_i: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Pk = a).O_i.U_i(Rk);
      Pk.Y_i.U_i(Lk);
      if (Pk.O_i.get()) {
        Pk.BBi();
      }
      Gk();
    });
  }
  function Rk(a) {}
  function Lk(a) {
    Jk();
    if (hx === lq && lx !== undefined) {
      hx = lx.zBi().J_i;
      console.log(undefined, Z);
      if (hx !== Ls) {
        xk = Ck;
        aj.xBi(ix);
      }
    }
    if (Zg !== a && a.O_i() === Va) {
      lx = a;
      aj.xBi(a.id);
    }
  }
  function Gk() {
    if (Pk) {
      lx = Pk.Y_i.get();
    }
  }
  function qk(a) {
    if (ix) {
      var b = new XMLHttpRequest();
      b.open("GET", Dk + "xsolla?userid=" + ix + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          kx.K_i = b.responseText;
          aj.XPayStationWidget.init(kx);
          aj.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function Wk(a, b) {
    if (ok.TMi <= 0) {
      if (ok.vwi < b) {
        ok.nBi(ok.OMi);
      } else {
        ok.TMi = 2;
        ok.jMi = 0;
        ok.RMi = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Dk + "buySpin?token=" + hx + "&userid=" + ix + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == _g && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              ok.hBi(Cs * (a.X_i * Math.PI), a.type, a.id);
              ok.vwi -= b;
            } else {
              ok.TMi = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Nk(b, c, d, f) {
    b = Yr === b ? ok.Jwi : b;
    c = A === c ? ok.Kwi : c;
    d = d === Ds ? ok.Xwi : d;
    f = f === Rc ? ok.Vwi : f;
    if (b !== ok.Jwi || c !== ok.Kwi || d !== ok.Xwi || ok.Vwi !== f) {
      ok.Jwi = b;
      ok.Kwi = c;
      ok.Xwi = d;
      ok.Vwi = f;
      if (ok.xMi === f) {
        f = "0";
      } else if (f === ok.QMi) {
        f = "1";
      } else if (ok.SMi === f) {
        f = "2";
      } else if (ok.IMi === f) {
        f = "3";
      } else if (ok._Mi === f) {
        f = "4";
      } else if (f === ok.FMi) {
        f = "5";
      }
      if (c === ok.vMi) {
        c = "total";
      } else if (c === ok.wMi) {
        c = "normal";
      } else if (c === ok.BMi) {
        c = "zombie";
      } else if (ok.MMi === c) {
        c = "vampire";
      } else if (ok.DMi === c) {
        c = lj[ef];
      }
      if (b === ok.yMi) {
        b = "all";
      }
      if (ok.kMi === b) {
        b = "week";
      }
      if (ok.AMi === b) {
        b = "today";
      }
      if (ok.EMi === d) {
        d = "kill";
      } else if (d === ok.CMi) {
        d = "score";
      } else if (ok.zMi === d) {
        d = "time";
      }
      var g = new XMLHttpRequest();
      g.open("GET", Dk + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
      g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      g.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
          for (var b = JSON.parse(g.responseText), c = "", d = 0; b.length > d; d++) {
            ⲆⵠᐃⲆⲆ = b[d];
            var f = ⲆⵠᐃⲆⲆ[fn];
            try {
              if (-Ps === f.indexOf("Starver#")) {
                f = aj.decodeURIComponent(aj.escape(aj.atob(f)));
              }
            } catch (a) {}
            c += "<div class=\"lineLeaderboard\">";
            c += "<div class=\"rank\">";
            c += d + 1 + "";
            c += "</div>";
            c += "<div class=\"name\">";
            c += f;
            c += "</div>";
            c += "<div class=\"lvl\">";
            c += ok.SBi(ⲆⵠᐃⲆⲆ[kr]) + 1 + "";
            c += "</div>";
            c += "<div class=\"kills\">";
            c += ⲆⵠᐃⲆⲆ[5] + "";
            c += "</div>";
            c += "<div class=\"time\">";
            c += ⲆⵠᐃⲆⲆ[4] + "";
            c += "</div>";
            c += "<div class=\"score\">";
            c += ⲆⵠᐃⲆⲆ[on] + "";
            c += "</div>";
            c += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = c;
        }
      };
      g.send();
    }
  }
  function Hk(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Dk + "setRegion?token=" + hx + "&userid=" + ix + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          ok.nBi(ok.JMi);
        } else {
          ok.nBi(ok.V_i);
        }
      }
    };
    b.send();
  }
  function Uk() {
    if (ok.vwi >= 300 || ok.xwi <= bd) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= fn && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Dk + "changeNickname?token=" + hx + "&userid=" + ix + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (Gc < a) {
              ok.vwi -= a;
            }
            ok.xwi = 1;
            ok.nBi(ok.UMi);
          }
        };
        b.send();
      }
    }
  }
  function Ok(a, b) {
    if (b > ok.vwi) {
      ok.nBi(ok.OMi);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Dk + "buyKit?token=" + hx + "&userid=" + ix + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == cn && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          ok.vwi -= b;
          ok.Twi = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Yk() {
    var a = new XMLHttpRequest();
    a.open("GET", Dk + "claimBread?userid=" + ix);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (Jn == this.readyState && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          ok.vwi = b;
        }
      }
    };
    a.send();
  }
  function Jk() {
    aj.FB[lj[Rm]]({
      Z_i: Vj,
      cookie: So,
      $_i: "642017356260407",
      version: "v15.0"
    });
    if (ix === undefined) {
      (function () {
        try {
          if (aj.FB && aj.FB.kBi()) {
            ix = aj.FB.kBi();
            if (hx === undefined) {
              aj.FB.iFi(function () {
                xk = zk;
                hx = aj.FB.zBi().CBi;
                aj.xBi(ix);
              });
            }
          }
        } catch (a) {}
        try {
          ix = lx.eFi().tFi();
        } catch (a) {}
      })();
    }
  }
  aj.onload = function () {
    aj.gapi.load(lj[Kc], mx);
  };
})();
