(function () {
  var aj = 119;
  if (aj === 0) {
    aj = 84;
  }
  var bj = 229;
  Math.floor(242[242 .ΔⲆⲆⵠⵠΔᐃⲆⵠ]);
  Math.floor(73[73 .ⲆⵠⲆⵠⵠᐃⵠ]);
  Math.floor(153[153 .ᐃΔᐃΔⲆ]);
  var cj = 24;
  if (cj > 1) {
    cj = 162;
  }
  if (bj == 7) {
    bj = 191;
  }
  var dj = 32;
  Math.floor(24[24 .ⲆᐃⵠᐃΔᐃᐃⵠⵠ]);
  if (dj === 12) {
    dj = 78;
  }
  var ej = 169;
  var fj = 236;
  if (fj > 5) {
    fj = 28;
  }
  if (ej === 2) {
    ej = 7;
  }
  var gj = 88;
  if (gj == 14) {
    gj = 26;
  }
  var hj = 67;
  if (hj > 14) {
    hj = 210;
  }
  Math.floor(101[101 .ᐃⲆΔⲆᐃᐃⲆ]);
  var ij = 204;
  if (ij === 3) {
    ij = 242;
  }
  var jj = 76;
  if (jj >= 0) {
    jj = 250;
  }
  const kj = window;
  Math.floor(159[159 .ᐃΔΔᐃⲆᐃⵠⲆⲆ]);
  var g = 96;
  var lj = 135;
  if (lj >= 13) {
    lj = 203;
  }
  if (g >= 8) {
    g = 142;
  }
  let mj = 72;
  const nj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += kj.String.fromCharCode(a[c] ^ mj++ % 255);
    }
    return b;
  };
  ᐃⵠ = [[18, 14, 38, 49, 47, 10, 54, 39, 53, 0, 111, 110], [55, 18, 16, 102, 59, 107, 15, 102], [63, 21, 20, 41, 4, 38, 91, 9, 6, 87, 17, 90], [49, 90, 32, 7, 53, 53, 60, 3, 37, 66, 32, 31, 23, 24, 32, 1, 45, 62, 60, 14, 30, 16, 40, 6], [215, 196, 179, 206, 215, 205, 212, 183, 235, 207, 192, 231, 239, 213, 216, 227, 243, 162, 195, 174], [246, 166, 212, 251, 250, 254, 167, 166], [254, 174, 212, 239, 250, 246, 151, 147, 253, 253, 244, 215, 202, 155, 158, 150], [206, 159, 155, 214, 234, 233, 252, 195, 209, 216, 227, 138], [219, 241, 240, 215, 222, 250, 135, 215, 154, 128, 255, 254], [167, 130, 128, 190, 171, 251, 156, 140, 174, 138, 247, 167, 180, 144, 239, 238], [142, 184, 186, 164, 186, 159, 136, 183, 185, 149, 143, 226], [130, 182, 164, 215], [135, 214, 172, 141], [138, 174, 211, 157, 143, 171, 160, 223, 169, 169, 184, 195], [174, 173, 184, 157, 161, 161, 184, 151], [166, 207, 184, 112, 99, 101, 62, 57], [97, 94, 70, 53], [80, 56, 50, 127, 111, 61, 70, 45], [114, 32, 69, 36], [119, 81, 81, 113, 67, 77, 108, 33], [126, 45, 77, 89, 64, 117, 22, 74, 68, 113, 125, 29], [77, 109, 18, 120, 73, 102, 101, 64, 83, 95, 80, 9], [87, 97, 14, 10, 99, 108, 105, 74], [89, 121, 6, 13, 35, 113, 39, 40, 38, 45, 9, 32, 42, 120, 30, 113], [23, 9, 35, 42, 53, 21, 21, 33, 12, 100, 1, 22, 59, 104, 9, 48, 63, 31, 98, 93], [50, 53, 86, 84, 42, 35, 33, 17, 10, 7, 45, 89], [52, 0, 57, 64, 21, 53, 74, 1], [44, 33, 61, 2], [32, 45, 41, 23, 44, 76, 7, 232, 226, 177, 206, 185], [225, 193, 235, 252, 211, 221, 178, 189, 233, 207, 178, 173], [203, 213, 170, 167, 247, 241, 170, 165], [251, 221, 247, 230, 249, 223, 162, 157], [192, 144, 245, 145, 198, 238, 237, 196, 202, 153, 230, 145], [206, 230, 229, 198, 213, 245, 138, 132, 208, 238, 245, 212], [219, 136, 142, 207, 223, 140, 249, 171], [163, 133, 175, 177, 159, 144, 149, 190], [144, 249, 129, 160, 148, 150, 157, 188, 132, 149, 149, 161, 183, 187, 129, 161], [184, 141, 234, 180, 135, 236, 137, 180, 131, 181, 218, 146, 129, 161, 143, 152, 139, 135, 143, 170, 143, 131, 169, 153, 147, 181, 165, 159], [172, 196, 143, 136, 163, 173, 206, 204, 170, 175, 61, 60], [96, 84, 66, 114, 101, 64, 100, 124, 80, 124, 49, 48], [84, 87, 120, 102, 115, 75, 94, 121, 117, 96, 37, 36], [121, 41, 74, 45, 74, 72, 76, 82, 64, 100, 72, 95, 124, 112, 102, 95, 72, 70, 126, 87], [127, 66, 92, 95, 100, 100, 88, 64, 82, 115, 97, 9, 107, 99, 118, 68, 103, 103, 43, 124], [32, 113, 113, 47, 31, 16, 125, 62, 40, 12, 10, 120, 42, 8, 56, 40, 48, 96, 2, 59, 55, 22, 101, 100], [3, 104, 22, 49, 7, 7, 50, 13], [56, 59, 46, 28, 4, 84, 33, 84], [48, 89, 58, 93, 63, 2, 73, 64, 16, 30, 38, 5, 20, 26, 28, 61, 24, 60, 16, 17, 28, 17, 210, 210, 216, 212, 202, 181], [220, 234, 240, 255, 232, 184, 197, 176], [212, 226, 169, 228, 246, 210, 169, 168], [242, 208, 161, 169, 195, 204, 235, 160], [253, 242, 246, 203, 192, 145, 145, 208, 252, 240, 230, 153], [242, 154, 149, 216, 244, 247, 211, 140], [228, 129, 226, 220, 227, 133, 129, 211, 219, 137, 234, 141], [231, 141, 134, 180, 151, 132, 188, 173, 163, 145, 154, 252, 169, 140, 153, 240], [173, 252, 130, 168, 176, 225, 160, 185, 131, 228, 138, 236, 184, 156, 137, 224], [135, 237, 166, 148, 187, 209, 178, 150, 179, 213, 166, 134, 176, 188, 190, 220, 140, 168, 166, 154, 164, 158, 178, 134, 146, 160, 174, 131], [152, 188, 144, 136, 164, 86, 101, 114, 89, 76, 87, 105], [100, 58, 71, 115, 81, 91, 91, 123], [85, 72, 121, 101, 113, 39, 95, 38, 116, 111, 36, 39], [121, 75, 91, 46, 70, 18, 70, 31], [122, 22, 28, 83, 125, 125, 69, 95, 73, 65, 123, 87, 126, 103, 4, 92, 81, 115, 96, 11], [85, 10, 12, 77, 89, 123, 123, 11], [94, 23, 116, 56, 39, 3, 3, 51, 35, 15, 37, 34, 47, 11, 24, 115], [44, 98, 31, 58, 49, 19, 0, 107], [13, 53, 31, 49, 1, 13, 96, 99], [62, 55, 84, 23, 57, 60, 47, 62, 6, 63, 59, 90, 10, 45, 80, 83], [13, 66, 68, 30, 16, 26, 63, 0, 20, 31, 68, 71], [24, 17, 43, 4, 27, 199, 184, 251, 217, 213, 184, 187], [221, 192, 223, 243, 210, 212, 223, 254, 237, 162, 165, 175], [192, 248, 219, 198, 195, 255, 164, 167], [248, 175, 203, 228, 252, 231, 247, 215, 249, 229, 152, 155], [253, 239, 255, 152, 202, 251, 227, 194, 250, 247, 221, 134, 233, 227, 205, 229, 238, 224, 235, 202, 217, 203, 128, 131], [220, 242, 169, 178, 153, 170, 148, 251], [166, 144, 135, 136, 168, 162, 135, 166, 170, 129, 236, 239], [177, 230, 224, 175, 141, 143, 159, 177, 190, 132, 147, 238, 134, 184, 179, 142, 186, 214, 141, 142, 133, 133, 141, 134], [178, 187, 149, 157], [181, 183, 167, 152, 145, 198, 167, 154, 166, 160, 175, 145, 154, 171, 196, 187, 89, 89, 80, 107], [103, 104, 64, 114, 82, 78, 51, 127], [86, 63, 88, 63, 70, 86, 126, 103, 78, 77, 102, 97, 122, 116, 76, 75, 70, 112, 68, 101, 122, 121, 115, 30], [71, 22, 96, 94, 76, 104, 23, 22], [72, 90, 19, 18], [106, 102, 7, 89, 86, 7, 100, 91, 110, 111, 112, 113, 109, 15, 7, 75, 35, 6, 123, 54, 30, 18, 115, 119], [43, 36, 28, 63, 46, 126, 20, 35, 2, 9, 8, 63, 54, 59, 4, 26, 57, 1, 20, 107, 6, 10, 107, 51, 3, 6, 95, 94], [53, 8, 10, 9, 59, 62, 95, 91, 34, 7, 60, 45, 19, 31, 56, 27, 17, 36, 75, 74], [28, 49, 22, 12, 38, 44, 67, 66], [217, 239, 212, 179, 224, 194, 191, 242, 235, 254, 183, 182], [238, 202, 183, 231, 202, 214, 196, 248], [205, 248, 192, 167, 193, 200, 167, 166], [255, 240, 216, 175, 250, 240, 159, 158], [253, 242, 232, 209, 203, 222, 151, 150], [249, 158, 252, 214, 209, 230, 135, 221], [213, 253, 252, 219, 226, 222, 135, 134], [229, 234, 236, 212, 146, 153, 152, 175, 166, 171, 148, 138, 169, 145, 132, 251, 150, 154, 251, 163, 179, 182, 239, 238], [181, 231, 128, 226], [129, 235, 227, 174, 134, 136, 231, 238, 132, 166, 180, 154, 181, 178, 211, 137, 138, 174, 191, 214], [143, 128, 184, 151, 148, 166, 164, 137, 144, 176, 176, 130, 153, 174, 203, 147, 152, 186, 146, 118, 99, 105, 89, 125, 92, 81, 54, 100], [109, 66, 65, 100, 84, 60, 90, 45], [115, 85, 127, 110, 113, 81, 65, 109, 67, 66, 82, 33], [127, 44, 42, 75, 66, 79, 101, 74, 70, 21, 117, 64, 74, 68, 122, 17], [79, 105, 22, 70, 82, 119, 101, 65, 111, 119, 10, 5], [93, 125, 87, 72, 103, 107, 105, 53, 27, 3, 126, 121], [33, 116, 1, 56, 45, 13, 39, 57, 23, 57, 114, 109], [50, 96, 63, 33], [55, 100, 98, 52, 59, 55, 9, 48, 7, 31, 98, 93], [2, 37, 15, 17, 63, 17, 90, 85], [10, 45, 45, 21, 55, 57, 90, 64, 37, 31, 74, 31, 47, 39, 74, 69], [27, 45, 45, 6, 30, 76, 57, 238, 219, 211, 190, 185], [220, 180, 255, 254, 234, 184, 222, 177], [239, 201, 182, 163], [240, 197, 166, 225, 207, 206, 221, 209, 207, 223, 170, 209], [199, 240, 213, 214, 195, 247, 237, 203, 252, 254, 237, 236, 203, 152, 249, 192], [206, 157, 237, 195, 208, 234, 226, 137], [239, 238, 223, 212, 224, 205, 134, 129], [233, 233, 249, 240, 160, 131, 254, 249], [166, 244, 191, 184, 144, 248, 158, 241], [156, 150, 133, 169, 136, 138, 184, 233], [143, 145, 238, 178, 189, 141, 234, 176, 191, 176, 142, 221], [133, 170, 169, 148, 135, 183, 218, 213], [138, 132, 128, 209], [180, 131, 131, 133, 171, 179, 206, 201], [150, 155, 161, 130, 157, 173, 202, 144], [164, 166, 82, 119, 91, 100, 57, 56], [103, 106, 49, 121, 104, 108, 49, 48], [93, 90, 66, 92, 64, 66, 41, 40], [116, 64, 116, 108], [121, 118, 74, 103, 125, 88, 25, 84, 65, 17, 114, 112, 124, 127, 64, 25], [114, 26, 21, 71, 76, 29, 72, 66, 104, 100, 122, 5], [85, 5, 110, 74, 96, 108, 114, 13, 100, 104, 18, 11, 32, 46, 22, 41, 35, 6, 117, 116], [41, 121, 10, 127, 20, 30, 109, 108], [11, 62, 2, 99, 55, 0, 14, 32, 11, 104, 10, 36, 58, 50, 54, 52, 0, 20, 89, 88], [4, 48, 81, 2, 11, 60, 54, 88], [11, 59, 57, 76], [42, 66, 77, 68, 20, 25, 58, 9, 24, 28, 65, 64], [26, 77, 232, 241, 219, 177, 227, 184], [223, 180, 194, 229, 211, 211, 222, 225, 223, 225, 198, 252, 200, 254, 194, 236, 195, 165, 161, 168, 249, 246, 210, 241], [250, 216, 153, 247, 244, 230, 234, 241, 194, 239, 226, 217, 200, 198, 207, 144], [204, 157, 132, 140], [208, 235, 226, 133, 236, 224, 233, 132], [227, 214, 234, 211, 223, 232, 245, 144, 155, 155, 150, 170], [156, 170, 164, 186, 168, 141, 130, 253, 171, 152, 168, 189], [139, 132, 172, 162, 183, 144, 157, 228], [184, 156, 229, 179, 147, 139, 161, 220], [129, 208, 178, 140, 191, 191, 162, 144, 179, 179, 135, 208], [187, 130, 166, 159, 160, 171, 156, 130], [149, 196, 170, 143, 153, 186, 193, 192], [167, 50, 105, 106, 96, 111, 75, 112, 93, 79, 95, 72, 111, 77, 48, 51], [110, 72, 95, 93, 74, 65, 33, 43], [117, 42, 44, 110, 65, 68, 83, 100, 70, 119, 69, 78], [71, 23, 111, 86, 67, 111, 124, 23], [72, 107, 107, 91], [117, 93, 8, 71, 87, 124, 120, 11], [109, 86, 115, 86, 97, 100, 77, 82], [101, 23, 116, 42, 26, 41, 61, 42, 29, 9, 116, 119], [41, 11, 33, 59, 21, 5, 33, 36, 50, 3, 97, 107], [52, 53, 15, 48, 63, 29, 96, 99], [60, 83, 51, 10, 7, 35, 48, 91], [62, 90, 47, 31, 50, 94, 59, 29, 62, 39, 68, 2, 17, 35, 51, 70, 22, 47, 64, 15, 41, 18, 55, 22, 29, 215, 212, 191], [209, 234, 211, 243, 222, 187, 219, 250, 233, 190, 185, 179], [236, 215, 215, 231, 241, 249, 249, 227, 205, 168, 168, 236, 193, 219, 203, 237], [198, 147, 247, 219, 192, 201, 243, 211, 195, 238, 251, 218, 201, 251, 248, 147], [205, 131, 243, 130, 210, 227, 140, 195, 212, 207, 132, 135], [225, 253, 128, 131], [230, 242, 248, 183, 167, 140, 143, 176, 165, 137, 244, 247], [157, 155, 161, 187, 171, 148, 156, 171, 130, 140, 159, 175, 142, 128, 178, 231], [136, 139, 232, 238, 146, 154, 171, 160, 128, 138, 175, 142, 130, 185, 212, 215], [143, 129, 212, 157, 139, 167, 192, 158], [146, 179, 163, 134, 173, 202, 145, 202], [158, 168, 184, 195], [99, 51, 84, 112, 94, 82, 72, 55], [107, 59, 92, 59, 90, 74, 98, 123, 74, 70, 43, 34, 112, 84, 43, 42], [123, 43, 76, 43, 73, 90, 39, 101, 65, 121, 112, 83, 70, 23, 18, 26], [113, 26, 96, 71, 117, 117, 124, 67, 98, 3, 116, 67, 86, 82, 11, 10], [92, 113, 112, 83, 94, 83, 112, 79, 36, 6, 46, 53, 38, 34, 123, 122], [43, 123, 115, 50, 40, 12, 115, 114], [49, 6, 103, 38, 14, 13, 28, 30, 2, 14, 54, 53, 61, 21, 15, 98], [2, 38, 36, 22, 62, 86, 48, 15, 50, 91, 63, 86], [13, 42, 2, 26, 20, 48, 79, 78], [23, 50, 79, 68], [25, 33, 40, 23, 30, 44, 67, 66], [227, 198, 187, 249, 229, 221, 212, 247, 234, 187, 190, 182], [214, 224, 226, 250, 202, 208, 175, 174], [194, 194, 250, 226, 252, 221, 223, 169, 205, 197, 212, 230, 249, 249, 201, 158], [198, 226, 159, 205, 241, 241, 248, 219, 206, 159, 154, 146], [227, 230, 135, 131, 249, 225, 236, 245, 219, 215, 240, 211, 217, 236, 131, 130], [163, 137, 136, 175, 158, 168, 170, 243], [145, 250, 128, 167, 149, 149, 156, 163, 130, 134, 170, 191, 182, 130, 128, 162, 188, 152, 231, 230], [191, 239, 136, 179, 186, 160, 223, 222], [129, 161, 163, 218], [139, 132, 188, 159, 142, 222, 180, 131, 161, 195, 138, 155, 151, 198, 187, 202], [170, 148, 130, 141, 165, 165, 175, 50, 79, 71, 69, 125, 102, 107, 65, 61], [106, 100, 108, 49], [111, 60, 58, 121, 75, 69, 73, 98, 118, 123, 65, 41, 123, 119, 99, 106, 68, 73, 78, 29], [66, 16, 117, 81, 127, 103, 26, 21], [112, 24, 18, 90, 76, 28, 67, 92], [107, 0, 101, 4, 97, 97, 91, 75, 91, 125, 87, 70, 103, 105, 113, 54, 35, 47, 17, 62], [36, 17, 114, 50, 45, 13, 13, 57, 20, 124, 26, 109], [11, 10, 9, 56, 55, 56, 6, 101], [58, 55, 98, 47, 63, 25, 102, 13, 59, 9, 57, 12, 60, 85, 53, 30, 10, 13, 86, 81], [63, 3, 23, 6, 40, 42, 34, 14, 56, 29, 49, 1, 26, 23, 61, 73], [31, 57, 70, 246, 226, 195, 190, 185], [228, 209, 182, 224, 211, 184, 221, 223, 215, 217, 186, 251, 203, 202, 217, 228, 247, 251, 244, 165], [250, 247, 205, 230, 254, 217, 166, 213, 194, 144, 246, 153], [193, 254, 233, 196, 202, 193, 237, 194, 247, 249, 154, 128], [235, 245, 229, 206, 209, 241, 219, 205, 224, 226, 233, 204, 223, 140, 139, 253], [152, 181, 254, 249], [166, 245, 149, 160, 170, 164, 154, 241], [175, 163, 246, 227], [137, 227, 234, 163, 180, 129, 227, 229], [128, 180, 141, 177, 135, 179, 137, 153], [133, 165, 181, 208, 129, 163, 173, 128, 138, 216, 189, 159, 140, 185, 218, 156], [168, 170, 177, 131, 175, 161, 194, 147, 168, 200, 147, 140, 159, 185, 81, 60], [97, 110, 82, 114, 100, 64, 78, 99, 80, 90, 49, 48], [87, 98, 86, 123, 115, 33, 112, 108, 116, 36, 78, 108, 64, 94, 82, 107, 124, 88, 25, 88], [64, 17, 17, 73, 68, 74, 121, 20], [75, 108, 64, 67, 79, 110, 13, 12], [107, 100, 122, 5, 87, 111, 98, 85], [99, 9, 68, 81, 103, 103, 10, 18, 24, 20, 10, 117], [31, 32, 117, 116], [46, 12, 26, 121, 42, 10, 22, 34, 51, 4, 48, 32], [53, 100, 10, 53, 57, 26, 97, 96], [7, 109, 89, 20, 0, 14, 50, 15, 2, 38, 85, 84], [51, 60, 34, 93, 15, 56, 73, 4], [16, 65, 65, 15, 18, 48, 65, 14], [25, 73, 42, 77, 43, 18, 214, 249, 230, 212, 210, 255, 226, 194, 224, 229, 211, 220, 222, 225, 237, 232, 173, 172], [241, 254, 194, 239, 204, 207, 201, 164], [192, 169, 202, 173], [199, 172, 246, 216, 193, 145, 157, 220], [197, 192, 149, 148], [201, 227, 250, 215, 207, 238, 141, 140], [234, 130, 141, 204, 210, 255, 234, 201, 226, 137, 246, 213, 221, 141, 149, 252], [152, 241, 188, 179, 159, 170, 142, 186, 155, 156, 180, 186, 175, 136, 149, 236], [182, 148, 130, 175, 178, 150, 229, 228], [185, 233, 138, 237, 136, 178, 166, 146, 134, 180, 178, 167, 130, 161, 186, 153, 136, 188, 185, 208], [138, 168, 201, 180, 171, 171, 166, 157, 160, 161, 178, 180], [152, 201, 201, 137, 154, 88, 83, 110], [90, 54, 125, 118, 93, 95, 60, 58, 92, 77, 48, 51], [109, 34, 36, 127, 74, 67, 71, 122], [116, 43, 75, 99, 121, 46, 105, 114, 73, 103, 119, 22, 71, 101, 24, 27], [69, 127, 111, 30, 121, 107, 65, 84, 75, 119, 119, 71, 106, 6, 96, 11], [85, 127, 111, 87, 95, 125, 0, 3], [93, 115, 3, 42, 26, 118, 41, 118, 34, 25, 116, 119], [47, 11, 116, 57], [44, 98, 7, 98, 0, 3, 96, 102, 13, 0, 19, 104, 2, 11, 42, 99], [60, 13, 55, 22, 1, 87, 63, 10], [3, 47, 5, 30, 49, 61, 80, 83], [11, 66, 55, 11, 17, 19, 72, 75], [21, 47, 64, 17, 33, 45, 64, 67], [28, 237, 237, 236, 226, 204, 212, 187], [228, 229, 223, 226, 209, 196, 225, 218, 235, 215, 215, 162, 201, 197, 168, 171], [198, 192, 207, 241, 250, 203, 165, 163], [252, 146, 231, 214, 192, 227, 221, 202, 242, 197, 239, 154, 241, 253, 144, 147], [246, 130, 201, 218, 210, 227, 132, 218, 237, 249, 132, 135], [226, 235, 197, 210, 220, 174, 144, 255], [161, 147, 169, 246, 157, 144, 131, 135, 170, 155, 252, 190, 171, 145, 236, 239], [138, 230, 189, 186, 142, 234, 170, 231], [191, 139, 232, 173, 189, 210, 175, 144], [185, 138, 175, 144, 133, 185, 212, 215], [177, 139, 208, 211], [142, 168, 163, 158, 145, 172, 184, 203], [173, 191, 149, 128, 162, 206, 196, 139, 98, 108, 84, 105, 96, 68, 59, 58], [82, 59, 92, 59, 89, 96, 88, 117, 115, 86, 43, 102, 119, 39, 64, 94, 66, 78, 92, 112, 70, 69, 87, 34], [67, 18, 112, 90, 70, 23, 82, 75], [73, 126, 31, 92, 72, 117, 127, 18], [83, 3, 100, 3, 96, 6, 124, 71, 98, 110, 15, 11, 101, 101, 108, 79, 34, 115, 118, 126], [39, 119, 42, 41, 42, 46, 119, 118], [21, 127, 119, 58, 10, 4, 107, 98, 48, 18, 0, 46, 10, 107, 28, 43, 62, 58, 99, 98], [58, 48, 95, 94], [48, 11, 48, 19, 49, 4, 60, 18], [53, 58, 91, 1, 18, 54, 39, 78], [22, 24, 48, 3, 34, 40, 71, 70], [40, 79, 52, 14, 218, 214, 204, 179], [230, 232, 192, 181, 233, 222, 238, 227, 232, 202, 183, 246], [243, 163, 254, 165, 206, 196, 171, 170], [193, 193, 208, 241, 202, 218, 166, 162], [194, 246, 244, 215, 198, 150, 236, 146], [203, 154, 232, 216, 205, 250, 224, 195], [234, 249, 248, 219, 208, 133, 218, 195, 225, 238, 222, 215], [223, 143, 135, 142, 163, 172, 140, 175], [165, 146, 243, 170, 170, 190, 247, 246], [169, 137, 135, 242], [180, 188, 148, 160, 176, 130, 131, 234], [130, 235, 140, 235, 142, 138, 166, 179, 130, 182, 180, 150, 128, 160, 172, 210, 187, 190, 187, 214], [185, 168, 133, 210], [147, 182, 138, 155, 173, 199, 160, 152, 154, 203, 130, 144, 166, 165, 183, 61], [99, 85, 69, 48, 83, 65, 62, 57, 80, 56, 99, 93, 111, 60, 99, 101, 117, 90, 94, 41], [119, 81, 46, 118], [64, 40, 93, 111, 127, 95, 34, 29], [64, 16, 117, 17, 70, 81, 26, 21], [112, 114, 121, 28, 116, 121, 97, 66], [107, 0, 101, 4, 103, 97, 79, 84, 91, 109, 109, 73, 89, 118, 113, 3, 36, 20, 17, 44, 31, 118, 114, 32, 43, 29, 30, 113], [47, 124, 122, 38, 50, 21, 5, 33], [49, 100, 59, 51, 61, 29, 60, 97], [4, 6, 21, 10], [2, 81, 53, 13, 6, 85, 53, 17, 8, 61, 94, 2], [12, 92, 57, 69, 32, 64, 74, 31, 47, 39, 74, 69], [26, 23, 66, 77, 31, 19, 46, 189], [219, 213, 182, 239, 223, 209, 214, 181], [208, 228, 221, 229, 212, 227, 247, 252, 242, 229, 174, 169], [246, 251, 193, 240, 195, 219, 166, 161], [199, 172, 231, 214, 248, 207, 229, 215, 244, 148, 158, 220, 202, 237, 146, 214, 204, 246, 253, 220, 229, 129, 241, 216, 214, 219, 241, 136, 216, 237, 130, 201], [236, 230, 233, 171, 160, 149, 250, 128, 167, 244, 242, 248, 147, 146, 163, 252], [151, 252, 153, 224, 128, 224, 234, 161, 177, 145, 129, 236, 189, 155, 230, 225], [190, 153, 167, 136, 132, 181, 169, 140, 188, 212, 147, 187, 176, 178, 185, 128], [180, 220, 135, 152, 146, 153, 181, 196], [145, 190, 189, 144, 155, 148, 181, 143, 164, 166, 82, 109], [96, 68, 82, 112, 92, 52, 90, 102], [80, 102, 53, 103, 106, 87, 93, 44], [113, 84, 108, 125, 114, 80, 66, 111, 121, 118, 44, 32], [68, 45, 118, 17, 116, 100, 72, 81, 124, 118, 21, 20], [78, 70, 64, 65, 74, 88, 13, 12], [83, 100, 101, 8], [111, 111, 110, 9, 88, 8, 126, 78, 103, 103, 43, 124], [33, 11, 14, 41, 34, 42, 30, 60, 46, 14, 30, 33, 20, 34, 22, 96, 48, 27, 5, 104], [53, 58, 14, 42, 0, 12, 26, 39, 4, 14, 93, 92], [59, 81, 93, 16, 4, 10, 62, 3, 14, 44, 58, 6], [52, 40, 54, 65, 43, 34, 73, 72], [36, 48, 62, 73, 32, 42, 65, 64], [28, 56, 185, 235, 227, 177, 210, 238], [226, 208, 189, 226, 208, 220, 214, 253, 236, 226, 198, 250], [241, 212, 210, 236, 245, 165, 205, 164], [248, 220, 202, 175, 196, 200, 215, 156], [248, 244, 145, 206], [252, 224, 254, 195, 200, 153, 254, 193, 248, 249, 250, 251, 227, 129, 141, 193, 213, 240, 129, 204, 224, 236, 137, 141], [220, 248, 249, 169, 152, 130, 249, 248], [164, 144, 158, 161, 169, 248, 154, 180, 148, 153, 130, 189, 183, 155, 133, 232], [143, 134, 229, 228], [131, 233, 229, 167], [189, 152, 152, 137, 135, 178, 217, 216], [133, 160, 174, 217, 139, 170, 209, 208], [183, 221, 136, 199, 191, 137, 189, 200], [175, 160, 170, 146], [155, 172, 201, 150, 164, 88, 105, 82, 89, 99, 56, 59], [100, 79, 79, 115, 104, 62, 91, 68, 109, 126, 64, 47], [118, 69, 40, 43], [70, 64, 83, 99, 66, 68, 113, 93, 123, 119, 123, 79, 121, 124, 108, 27], [116, 127, 24, 66, 113, 30, 120, 19], [76, 93, 8, 2, 106, 108, 103, 90], [82, 121, 4, 7], [109, 107, 81, 75, 91, 4, 41, 0, 32, 42, 15, 46, 34, 25, 116, 119], [18, 127, 7, 34, 22, 8, 3, 62, 2, 58, 3, 59, 13, 53, 15, 35], [2, 110, 100, 43, 60, 82, 88, 17, 57, 53, 88, 91], [4, 5, 63, 16, 8, 43, 84, 27, 12, 66, 39, 39, 22, 44, 55, 26], [46, 32, 59, 13, 25, 52, 22, 67], [41, 178, 215, 235, 210, 220, 203, 252, 221, 223, 184, 227, 233, 196, 230, 179], [237, 162, 164, 248, 241, 166, 160, 166, 205, 192, 241, 170, 249, 203, 203, 235, 251, 241, 156, 159], [250, 150, 221, 202, 254, 240, 227, 224, 201, 194, 255, 194, 204, 222, 235, 218, 209, 245, 136, 139], [238, 224, 251, 205, 237, 209, 235, 199, 220, 242, 173, 180, 161, 163, 248, 251], [157, 143, 159, 163, 175, 155, 174, 243], [149, 151, 232, 166, 138, 131, 185, 163], [180, 234, 159, 174, 184, 155, 165, 178], [134, 210, 153, 148, 128, 214, 179, 183, 190, 176, 187, 133], [138, 187, 216, 148, 181, 168, 187, 194, 162, 153, 163, 155, 149, 203, 179, 150], [174, 185, 196, 180, 84, 109, 80, 87], [96, 66, 63, 105, 82, 59, 114, 103, 93, 63, 118, 103, 115, 34, 95, 46], [118, 39, 35, 96, 65, 65, 76, 97, 70, 76, 35, 34], [66, 19, 23, 72, 71, 72, 31, 80], [113, 113, 100, 91, 78, 74, 19, 18], [105, 3, 74, 95, 109, 109, 124, 98, 89, 110, 11, 87, 94, 14, 104, 15], [36, 115, 4, 51, 32, 4, 123, 122], [43, 14, 12, 122, 47, 127, 24, 36], [51, 98, 0, 102, 54, 18, 3, 106], [1, 107, 12, 43, 62, 28, 99, 98], [58, 12, 14, 16, 6, 36, 91, 90], [10, 46, 6, 30, 54, 58, 40, 22, 37, 28, 52, 7, 23, 51, 36, 1, 46, 20, 60, 8, 24, 42, 40, 61, 228, 199, 208, 243, 230, 210, 211, 186], [210, 228, 230, 248, 238, 203, 196, 227, 201, 162, 195, 174], [205, 205, 196, 255, 250, 243, 211, 166], [254, 218, 167, 245, 193, 214, 159, 158], [246, 240, 151, 246, 254, 239, 193, 150], [245, 159, 214, 223, 234, 230, 135, 131, 231, 242, 224, 199, 226, 139, 210, 139], [223, 142, 236, 215, 164, 137, 148, 185], [160, 157, 136, 171, 171, 162, 178, 163, 174, 160, 170, 254, 137, 134, 182, 191], [129, 157, 156, 161, 186, 142, 182, 161, 134, 140, 227, 226], [130, 166, 142, 150, 190, 176, 168, 143, 139, 168, 215, 214], [181, 223, 215, 132, 170, 160, 207, 206], [151, 199, 158, 135, 162, 151, 168, 183, 166, 165, 149, 61], [88, 48, 107, 108, 102, 109, 73, 126, 83, 77, 94, 49], [110, 99, 89, 125, 67, 85, 127, 110, 113, 81, 81, 109, 64, 40, 78, 33]];
  for (let a = 0; a < ᐃⵠ.length; a++) {
    ᐃⵠ[a] = kj.atob(nj(ᐃⵠ[a]));
  }
  const d = false;
  const oj = 15;
  const c = 20;
  const p = ["Schaden an Gebäuden: 1", " QUIT", "#67766F", "dont_hit_5", "#c4bc51", "You can not attack when you use it", "#b15ecf", "#07393d", "#B56D18", "#174a51", "#032428", "source-over", "#454545", "#252525", "init", "Warm outside water and in winter", "servselect", "110_110_110", "fade", "#7d6144", "#0b2326", "#554139", "#A9D6D3", "#a33e2b", "#ddcf8a", "inline-block", "lock_team", "#c26de0", "LAVA", "#7C5A29", "forest", "#043c37", "#21112D", "110_111_000", "Game", "#eda80d", "#0b3432", "#54a4ba", "Durabilité: 700", "Haltbarkeit: 1000", "#111316", "#A89F67", "#bfb360", "send", "#3e3c25", "starve_quests", "010_010_000", "string", "cancel_sure_delete", "Birth: 4min", "#187484", "#281C08", "Content-Type", "111_111_110", "Building method: Grid. Press G to change", "XPayStationWidget", "#35b1b5", "#280e09", "#262114", "loaded", "010_011_011", "Используется для разрушения зданий", "#83ddd4", "Uuunnnggg", "#000000", "#1b170c", "#0a2d18", "Durability: 2000", "Прочность: 1000", "#B6222A", "#171a19", "CLAIM REWARD!", "Totem", "#596560", "starve_quality", "#394841", "Durability: 700", "click", "#0a4049", "Damage: 24", "plm", "active", "#53A4D5", "Защита от игроков: 4, Защита от животных: 16", "starve_safe", "Durabilité: 2000", "#77371f", "#462966", "110_110_000", "#FFF", "Taco4Life", "#0a2f2b", "110_111_111", "starve_info_box", "Starve.io", "#042b30", "Sushui", "starve_cancel", "Durabilidad: 700", "Crab Claw", "middle", "#115E60", "Crab Spear", "gw", "010_110_010", "#47341d", "111_111_011", "#8359d3", "#2b7c57", "#9E8456", "#59c9c0", "#877d36", "#b29c32", "útil para destruir construções", "#5cccc4", " Gather 1 amethyst", "#f9efeb", "#816511", "#c67933", "shop_starterkit", "#564021", "#09373F", "#A5A244", "#328587", "&userid=", "#252B28", "DESERT", "__default", "buy_kit", "#1678a2", "serverAddressInput", "011_111_011", "WINTER", "#0e3838", "000_111_111", "Dégâts: 2", "#83827e", "#d588f1", "#092813", "#8255b5", "Te calienta en invierno y fuera del agua", "fo", "Damage: 1", "game_body", " Reward", "You are less cold, less thirsty, and less hungry", "#3d2a6e", "Relax in this confortable bed", "000_111_110", "#1f5453", "Lifetime: 8 days", "Kill", "wtb", "quit_chronoquest", "Creuse la terre, le sable et la neige", "CrysTal", "#031619", "undefined", "000_111_000", ".md-languages label button", "#083326", "011_111_010", "You feel a great power emanating from this orb", " After 1 day, survive in winter", "#e0f2f6", "#0a2728", "Jedzenie: 100", "recipe_craft", "000_110_110", "Players Defense: 4", "survive20min_3", "#C6AF81", "#44301b", "Ciepło w i poza zimą", "#3f332a", "Урон по строениям: 1", "#214C4B", "high_ing", "011_011_010", "#281A49", "#1d1d22", "input_ratio", "low_ing", "Emerald Machine", "#80500b", "#b2d4d1", "#e7dc8f", "nickname_block", "110_110_010", "#1a7961", "010_111_010", "re", "Daño: 2", "Crab Helmet", "#f0f4f0", "#d45ce5", "#574122", "#163A3A", "#764eb5", "_trad_number", "#5f6061", "000_110_010", "#43aa82", "#a08f47", "#3A2A0D", "#141414", "Building method: Free. Press G to change", "Défense: 4, Défense contre animaux: 16", "cursor", "Obrażenia do budowli: 1", "#133a2b", "#f4efc6", "#e2cf27", "event", "time", "010_111_011", "_number", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Oh, yeah? Is there crab in the crab sticks?", "object", "#136167", "Haltbarkeit: 700", "#EDCE4F", "#0c0c0d", "pizza wa", "Allow you to calm crabs, and heal them", "You can buy items on the shop in the next game with your points", "#24878f", "#fff", "#2b9390", "#7d5234", "110_111_011", "winter_7", "la", "#660000", "#D8DC74", "#d7990c", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "comida: 100", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "Durability: 1000", "Pixelbitie", "#041c21", "#bbbbbb", "On-Hit Damage: 3", "#183f3f", "#cd98e5", "Копайте землю, чтобы получить грязь, лед и песок", "#939393", "#1f4948", "#432516", "'Baloo Paaji', sans-serif", "#747471", "#7c4908", "Grab herum um Dreck, Eis und Sand zu bekommen", "#1d051e", "#493e26", "#5cc5ce", "#3fc9c9", "#072824", "#BB0000", "Wytrzymałość: 1000", "#4c3b19", "También puedes conseguir minerales", "fod", "111_111_000", "Cactus", "011_011_000", "#86d0d1", "Days survived", "#fef4f4", "Cava para conseguir tierra, arena y hielo", "kit", "#58645F", "#57442a", "#4c3a15", "#3da34d", "You can also gather minerals", "#6a7570", "Damage: 20", "Starve.io ", "img/avatar-player14.png", "mousedown", "eogito", "round", "Durability: 400", "#9b2b25", "000_111_010", "Survive without losing life", "rewardquest", "#654320", "#EAEAEA", "000_010_000", "Uuunnnggg...", "Możesz także zdobyć minerały", "#C98435", "#182935", "#A37943", "spectator", "010_011_010", "Anyone want to play?", "010_111_110", "de", "When you are flying,", "Bueno para destruir estructuras", "Chrono Quests", " Constraints", "#322413", "#16695f", "2d", "#2b280a", "Так же вы можете получить ресурсы", "timeremain_", "#b29e4d", "points", "000_011_000", "durabilidade: 700", "#388AC7", "#4eb687", "#ff0000", "#75827D", "#33b4e4", "#C1C0C0", "011_111_111", "#382e19", "000_111_011", "#347f93", "#5E3E1A", "Building Damage: 1", "time_finished_", "Food: 10", "#be8d50", "claim_rewards", "constraintquest", "_on", "#313041", "#211108", "mousemove", "#c27add", "#29997c", "010_111_000", "#1f773d", "sw", "px", "Easter Egg", "gm", "spatial", "Damage: 5", "Crab claws can also be eaten", "#555555", "timeremainingquest", "#ee593d", "cave o chão para pegar terra, areia e gelo", "#232828", "#e45936", "function", "000_011_011", "#1e2021", "#ac222a", " you can only hit people who are flying too", "#0F3A24", "aloner", "durabilidade: 2000", "Essen: 100", "qwerty_ing", "#392C16", "dw", "Comida: 100", "você também pode pegar minerais", "destination-out", "#1F343F", "#2b6664", "killdragon_1", "Food: 20", "Wytrzymałość: 2000", "Score", "#2b5c48", "#efd435", " Be peaceful", " Open 5 treasure chests", "010_010_010", "audio/ambience.mp3", "Продолжительность: 8 дней", "amethyst_2", "You will be cured faster", "number", "home_craft", "#0e3022", "cs", "Czas życia: 8 dni", "011_111_000", "Damage: 4", "#86d4e0", "#4C3B19", "#c3be9a", "score", " Collect 1 dragon heart", "Haltbarkeit: 2000", "#124949", "#b7252c", "#ffffff", "#242503", "#afac98", "#c7a726", "011_111_110", "#1f343f", "_blank", "#634828", "name", "#5E3C10", "You are the king of crabs!", "Bed", "#184747", "durabilidade: 1000", "#C09D6F", "#485e66", "#0B6A84", "auth2", "#7f6d52", "#74ede6", "#C0BF55", "Players Defense: 4, Animals Defense: 16", "Damage: 2", "#120202", "110_111_110", "#46c2c9", "Lebenszeit: 8 Tage", "Building Damage: 4", "Durabilité: 1000", "Durabilidad: 2000", "#73583e", "#123b3f", " Share on Twitter", "#123335", "dano: 2", "#adbcb5", "playing", "account_nickname_input", "rgba(255, 255, 255, 0)", "treasure_chest_4", "Daño para estructuras: 1", "Durée de vie: 8 jours", "#a7983c", "They can't hit you and you can't hit them", "mouseup", "#2A8B9B", "dano em construções: 1", "MADBalgouthi", "#8a938e", "#b864d6", "canvas", "#4d2d14", " Collect 100 bread in deep winter", "#665329", "#785f4c", "#EBF2F0", "#082b22", "GET", "#e9dad9", "#092b29", "#032b23", "pos", "#87d2e6", "#EFE4B4", "Nützlich um Gebäude zu zerstören", "010_110_110", "#e4efe8", "#073030", "Crab sticks", "#2E85A0", "#352b10", "#d2c77b", " Claim rewards", "#0d1b1c", "#1a4545", "running", "nu", "load", "#43b5af", "#c1b06b", " BACK TO THE GAME", "#0d2e33", "#939995", "FB", "Прочность: 2000", "000_110_000", "Animals Defense: 13", "Widget", "#c4a23a", "111_111_111", "111_111_010", "#000", "#2a2938", "#a9e4ed", "#34255d", "FOREST", "defesa de jogadores: 4, defesa de animais: 16", "#163a3a", "Useful to destroy buildings", "Crabs follow you", "Winter", "#614627", "#B26F31", "Communist", "Прочность: 700", "#89d1d4", "#58452b", "Schaden: 2", "eject_member", "#0F464C", "iblk", "#8c29aa", "#0a0b0c", "Sandwich", "claim_reward_", "typequest", "Chapka", "Du kannst auch Mineralien bekommen", "000_011_010", "Time Remaining", "Hält dich warm außerhalb von Wasser und Winter", "#9baaa3", "Durabilidad: 1000", "Pomocny w niszczeniu budowli", "#674C2A", "play", "volume", "nickname_input", "</div>", "#68622D", "Damage: 3", "#3dc4c0", "#523e26", "Dig the ground to gather dirt, ice, and sand", "#263947", "#dfd1cb", "inv_shop", "stop", "Урон: 2", "#1a4935", "010_111_111", "none", "Peut aussi récupérer des minéraux", " Share on Facebook", "#29aaa1", "#342C7C", "#200333", "px Baloo Paaji", "#3ba578", "010_011_000", "isl", "Damage: 30", "azerty_ing", "#242330", "#123d38", "010_110_000", "#63c9d6", "starve_aliasing", "starve_mapping", "#077b49", "#73dde5", "#af59cd", "#b3e0e3", "upfiz", "#95d5d8", "000_010_010", "Réchauffe en dehors de l'eau et dans l'hiver", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "011_011_011", "110_111_010", "#4d4a2e", "opacity", "#46554D", "#25c5d6", "#c04933", "loaderror", "gapi", "#e8e8e8", "bread_6", "Utile pour détruire les bâtiments", "#FFFFFF", "#030d14", "application/x-www-form-urlencoded", "Wytrzymałość: 700", "team_box", "Защищает от холода вне воды.", "Damage: 14"];
  const m = 19;
  const pj = 10;
  const qj = undefined;
  const f = true;
  const z = 17;
  const y = 7;
  const w = 16;
  const T = 255;
  const rj = 100;
  const k = c;
  const x = -8;
  const A = f;
  const C = 13;
  const B = -4;
  const D = 11;
  const I = 18;
  const E = 9;
  const sj = 5;
  const J = C;
  const M = 6;
  const F = rj;
  const P = rj;
  const G = 2;
  const j = 1;
  const Q = 14;
  const L = j * 4;
  const O = 6;
  const W = P;
  const q = 256;
  const H = 1 << D;
  const N = J;
  const R = 8;
  const K = 4096;
  const S = 12;
  const tj = 0;
  const X = 3;
  const uj = 4;
  const U = A;
  const ie = j;
  const V = 4;
  const ne = tj;
  const re = 2;
  const Y = d;
  const Z = X;
  const _ = S;
  const ae = pj;
  const ee = I;
  let ge;
  let he = qj;
  const le = R;
  const de = I;
  let ce;
  let oe = qj;
  let se = qj;
  const te = w;
  const ue = z;
  let fe = qj;
  let Te = [];
  let ye = qj;
  let vj = qj;
  const wj = m;
  let Ae = "_";
  const xj = sj;
  let xe;
  const yj = Y;
  let Me;
  const zj = wj;
  const De = q;
  let Ie;
  let Aj;
  let Bj;
  let Cj = qj;
  let Dj = qj;
  const Ej = ie;
  let Re = qj;
  const Fj = ne;
  const je = N;
  let We = qj;
  let Gj = qj;
  const Hj = qj;
  let Ne = Hj;
  let Ij = Hj;
  const Jj = M;
  const Ue = j;
  const Ye = ae;
  let Ke = Hj;
  const Kj = X;
  let Ze;
  let Lj = qj;
  let Mj = Hj;
  let Nj = qj;
  const Oj = Ue;
  let ti;
  const Pj = c;
  let oi;
  let Qj;
  let Rj;
  let Sj = Hj;
  const Tj = T;
  let li;
  const Uj = D;
  let ui = Hj;
  const Vj = F;
  var vi = kj.Math.acos;
  kj.Math.acos = kj.Math.asin;
  kj.Math.asin = vi;
  var di = kj.Math.cos;
  kj.Math.cos = kj.Math.sin;
  kj.Math.sin = di;
  const ci = oj;
  let mi;
  let Wj = qj;
  const Xj = A;
  let Ti = qj;
  const Yj = zj;
  let zi;
  let Zj = Hj;
  const $j = y;
  let Pi;
  const _j = E;
  let ki = qj;
  let ak = qj;
  const bk = S;
  let Mi;
  let ck;
  let dk;
  let ek = qj;
  let fk = Hj;
  const gk = z;
  const Qi = De;
  const _i = d;
  const Fi = Q;
  let Ri;
  const hk = E;
  let ji;
  let ik = Hj;
  const jk = te;
  let Oi;
  let kk;
  let lk = 0;
  if (!kj.WebAssembly || !kj.WebAssembly.instantiate) {
    ⲆⵠⵠΔⵠΔᐃᐃΔ();
  }
  const mk = C;
  const Ui = xj;
  const Yi = uj;
  const Ki = {
    Date: Date
  };
  const Vi = Jj;
  kj.WebAssembly.instantiate(Uint8Array.from(kj.atob("AGFzbQEAAAABTw1gAX8Bf2ACf38AYAd/f39/f39/AGADf39/AGABfwBgAABgBn9/f39/fwBgAn9/AX9gBX9/f39/AGAEf39/fwBgAAF8YAABf2ADf39/AX8CDAEERGF0ZQNub3cACgNAPwEBAAAABQEBBAMEBAABAQEDBQsHBwcBAAMAAAACAAAKAAAABAUEBAUFDAICAgMIAgIDBgkDAgYGAggJBggDCQUEAQEBAQZADH8BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwFBAAt/AUEAC38BQQALfwBB4AgLfwFBvIkBCwfoASQCXzgAGAJfNQAaAl8wABsDXzIxABwDXzEzAB4DXzE1AB8DXzI4ACADXzIyACEDXzI5ACIFX19uZXcAFgVfX3BpbgAjB19fdW5waW4AJAlfX2NvbGxlY3QAJQtfX3J0dGlfYmFzZQMKBm1lbW9yeQIAAl80ACsDXzIzACwDXzI0AC0DXzE0AC4CXzYALwNfMTIAMANfMTgAMQNfMTcAMgNfMTAAMwJfMQA0Al8zADUDXzI2ADYCXzkANwJfMgA4A18xMQA5A18yNQA6A18yNwA7A18xOQA8A18xNgA9A18yMAA+Al83AD8IASgK1i4/CQAgACABNgIECwkAIAAgATYCCAsQACAAIAAQASAAIAAQAiAACwoAIAAoAgRBfHELCgAgACgCBEEDcQsxAQJ/IwQiARAEIQADQCAAIAFHBEAgABAFQQNHBEAACyAAQRRqECcgABAEIQAMAQsLCxEAIAAgASAAKAIEQXxxchABCxEAIAAgACgCBEEDcSABchABCzsBAX8gABAEIgFFBEBBACAAQbyJAUkgACgCCBtFBEAACw8LIAAoAggiAEUEQAALIAEgABACIAAgARAICyYBAX8gASgCCCEDIAAgASACchABIAAgAxACIAMgABAIIAEgABACC1gBAX8jBSAARgRAIAAoAggiAUUEQAALIAEkBQsgABAJIAAjBiMHRUECIAAoAgwiAEEBTQR/QQEFQeAIKAIAIABJBEAACyAAQQN0QeQIaigCAEEgcQsbEAoLIwAgAEUEQA8LIABBFGsiABAFIwdGBEAgABALIwNBAWokAwsLDQAgACgCAEF8cUEEagsJACAAIAE2AgAL7QEBBH8gASgCACICQQFxRQRAAAsgAkF8cSICQQxJBEAACyACQYACSQR/IAJBBHYFQR8gAkH8////AyACQfz///8DSRsiAmdrIgRBB2shAyACIARBBGt2QRBzCyICQRBJIANBF0lxRQRAAAsgASgCCCEFIAEoAgQiBARAIAQgBRACCyAFBEAgBSAEEAELIAIgA0EEdGpBAnQgAGooAmAgAUYEQCACIANBBHRqQQJ0IABqIAU2AmAgBUUEQCADQQJ0IABqIgEoAgRBfiACd3EhAiABIAI2AgQgAkUEQCAAIAAoAgBBfiADd3EQDgsLCwv3AgEFfyABRQRAAAsgASgCACIDQQFxRQRAAAsgAUEEaiABKAIAQXxxaiIEKAIAIgJBAXEEQAJ/IAAgBBAPIAEgA0EEaiACQXxxaiIDEA4gAUEEaiABKAIAQXxxaiIEKAIACyECCyADQQJxBEAgAUEEaygCACIBKAIAIgZBAXFFBEAACyAAIAEQDyABIAZBBGogA0F8cWoiAxAOCyAEIAJBAnIQDiADQXxxIgJBDEkEQAALIAIgAUEEamogBEcEQAALIARBBGsgATYCACACQYACSQR/IAJBBHYFQR8gAkH8////AyACQfz///8DSRsiAmdrIgNBB2shBSACIANBBGt2QRBzCyICQRBJIAVBF0lxRQRAAAsgAiAFQQR0akECdCAAaigCYCEDIAFBABABIAEgAxACIAMEQCADIAEQAQsgAiAFQQR0akECdCAAaiABNgJgIAAgACgCAEEBIAV0chAOIAVBAnQgAGoiACAAKAIEQQEgAnRyNgIEC6gBAQJ/IAEgAksEQAALIAFBE2pBcHFBBGshASAAKAKgDCIEBEAgASAEQQRqSQRAAAsgBCABQRBrRgRAAn8gBCgCACEDIAFBEGsLIQELBSABIABBpAxqSQRAAAsLIAJBcHEgAWsiAkEUSQRADwsgASADQQJxIAJBCGsiAkEBcnIQDiABQQAQASABQQAQAiACIAFBBGpqIgJBAhAOIAAgAjYCoAwgACABEBALlQEBAn8/ACIAQQBMBH9BASAAa0AAQQBIBUEACwRAAAtBwIkBQQAQDkHglQFBADYCAANAIAFBF0kEQCABQQJ0QcCJAWpBADYCBEEAIQADQCAAQRBJBEAgACABQQR0akECdEHAiQFqQQA2AmAgAEEBaiEADAELCyABQQFqIQEMAQsLQcCJAUHklQE/AEEQdBARQcCJASQJC4gDAQJ/AkACQAJAAkAjAg4DAAECAwtBASQCQQAkAxAGIwYkBSMDDwsjB0UhASMFEAQhAANAIwYgAEcEQCAAJAUgABAFIAFHBEAgACABEAdBACQDIABBFGoQJyMDDwsgABAEIQAMAQsLQQAkAxAGIwUQBCMGRgRAIwshAANAIABBvIkBSQRAIAAoAgAQDCAAQQRqIQAMAQsLIwUQBCEAA0AjBiAARwRAIAAQBSABRwRAIAAgARAHIABBFGoQJwsgABAEIQAMAQsLIwghACMGJAggACQGIAEkByAAEAQkBUECJAILIwMPCyMFIgAjBkcEQCAAEAQkBSAAEAUjB0VHBEAACyAAQbyJAUkEQCAAQQAQASAAQQAQAgUjACAAEA1rJAAgAEEEaiIAQbyJAU8EQCMJRQRAEBILIABBBGshASAAQQ9xQQEgABsEf0EBBSABKAIAQQFxCwRAAAsjCSEAIAEgASgCAEEBchAOIAAgARAQCwtBCg8LIwYjBhABIwYjBhACQQAkAgtBAAu8AQECfyABQYACSQR/IAFBBHYFQR9BAUEbIAFna3QgAWpBAWsgASABQf7///8BSRsiAWdrIgNBB2shAiABIANBBGt2QRBzCyIBQRBJIAJBF0lxRQRAAAsgAkECdCAAaigCBEF/IAF0cSIBBH8gAWggAkEEdGpBAnQgAGooAmAFIAAoAgBBfyACQQFqdHEiAQR/IAFoIgFBAnQgAGooAgQiAkUEQAALIAJoIAFBBHRqQQJ0IABqKAJgBUEACwsLqQIBA38gAUH8////A0sEQAALIABBDCABQRNqQXBxQQRrIAFBDE0bIgMQFCIBRQRAPwAiAUEEIAAoAqAMIAFBEHRBBGtHdEEBQRsgA2drdEEBayADaiADIANB/v///wFJG2pB//8DakGAgHxxQRB2IgIgASACShtAAEEASARAIAJAAEEASARAAAsLIAAgAUEQdD8AQRB0EBEgACADEBQiAUUEQAALCyABKAIAQXxxIANJBEAACyAAIAEQDyABKAIAIQQgA0EEakEPcQRAAAsgBEF8cSADayICQRBPBEAgASAEQQJxIANyEA4gAyABQQRqaiIDIAJBBGtBAXIQDiAAIAMQEAUgASAEQX5xEA4gAUEEaiABKAIAQXxxaiIAIAAoAgBBfXEQDgsgAQu9AQECfyAAQez///8DTwRAAAsjACMBTwRAAkBBgBAhAgNAIAIQE2shAiMCRQRAIwCtQsgBfkLkAICnQYAIaiQBDAILIAJBAEoNAAsjACMAIwFrQYAISUEKdGokAQsLIwlFBEAQEgsjCSAAQRBqEBUiAiABNgIMIAIgADYCECACIwgjBxAKIwAgAhANaiQAIAJBFGoiAyEBIAAhAgNAIAIEQCABIgBBAWohASAAQQA6AAAgAkEBayECDAELCyADC0sAIAAgATYCACABBEAgAEUEQAALIAFBFGsiARAFIwdGBEAgAEEUaxAFIgAjB0VGBEAgARALBSMCQQFGIABBA0ZxBEAgARALCwsLCws5AQF/IwtBBGskCxApIwtBADYCACMLQQxBAxAWIgE2AgAjCyABIABBAhAqIgA2AgAjC0EEaiQLIAALIQAgACgCCEECdiABTQRAAAsgACgCBCABQQJ0aiACNgIACzkBAX8jC0EEayQLECkjC0EANgIAIwtBDEEFEBYiATYCACMLIAEgAEEAECoiADYCACMLQQRqJAsgAAs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBBhAWIgE2AgAjCyABIABBAxAqIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQcQFiIBNgIAIwsgASAAQQAQKiIANgIAIwtBBGokCyAAC6EBACAAQQAgAUHOzgJyIAFBzs4CcUF/c3EQGSAAQQFBCCACQRh1dEEQIAJ0akEYIAJBEHV0ahAZIABBAiADQc8BakGP+QJsQf////8HbxAZIABBA0EIIARBCHV0QRggBHRqQRAgBEEQdXRqEBkgAEEEIAUgBUHQpQNxQX9zIgFxIAFB0KUDcXIQGSAAQQUgBkHv8gFyIAZB7/IBcUF/c3EQGQs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBCBAWIgE2AgAjCyABIABBARAqIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQkQFiIBNgIAIwsgASAAQQEQKiIANgIAIwtBBGokCyAACwYAEACwuQs5AQF/IwtBBGskCxApIwtBADYCACMLQQxBChAWIgE2AgAjCyABIABBAxAqIgA2AgAjC0EEaiQLIAALOQEBfyMLQQRrJAsQKSMLQQA2AgAjC0EMQQQQFiIBNgIAIwsgASAAQQIQKiIANgIAIwtBBGokCyAACycBAX8gAARAIABBFGsiARAFQQNGBEAACyABEAkgASMEQQMQCgsgAAsyACAARQRADwsgAEEUayIAEAVBA0cEQAALIwJBAUYEQCAAEAsFIAAQCSAAIwgjBxAKCws5ACMCQQBKBEADQCMCBEAQExoMAQsLCxATGgNAIwIEQBATGgwBCwsjAK1CyAF+QuQAgKdBgAhqJAELEAAgACgCACIABEAgABAMCwszAAJAAkACQAJAAkAgAEEIaygCAA4LAAECBAQEBAQEBAQDCw8LDwsgABAmDwsACyAAECYLJgA/AEEQdEG8iQFrQQF2JAFBgAgQAyQEQaAIEAMkBkHACBADJAgLDAAjC0G8CUgEQAALC3QAIwtBCGskCxApIwtCADcDACAARQRAIwtBDEECEBYiADYCAAsgAEEAEBcgAEEAEAEgAEEAEAJB/P///wMgAnYgAUkEQAALIwsgASACdCIBQQAQFiICNgIEIAAgAhAXIAAgAhABIAAgARACIwtBCGokCyAAC64BACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBjQFqQaeDAWxB/////wdvEBkgAEEBIAIgAkGe3QFxQX9zIgFxIAFBnt0BcXIQGSAAQQIgA0Gi8QJzEBkgAEEDIARBywBsQZrCAGpBgYAEbxAZIABBBEEIIAVBCHV0QRAgBUEYdXRqQRggBUEQdXRqEBkgAEEFQQggBkEIdXRBECAGQRB1dGpBGCAGdGoQGSMLQQRqJAsLjAEAIwtBBGskCxApIwsgADYCACAAQQBBECABQRB1dEEYIAF0akEIIAFBGHV0ahAZIABBASACQemBA2pB6/8DbxAZIABBAiADQaXXAnMQGSAAQQMgBEHc5QFxQX9zIgFB3OUBcSABIARxchAZIABBBCAFQbbHAnMQGSAAQQUgBkGxkgFzEBkjC0EEaiQLC40BACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBru4BciABQa7uAXFBf3NxEBkgAEEBIAJBrvQAcxAZIABBAiADQcwBakGngwFsQf////8HbxAZIABBAyAEQaeVAnMQGSAAQQRBECAFQRh1dEEIIAV0akEYIAVBEHV0ahAZIABBBSAGQdDiAHMQGSMLQQRqJAsLPgAjC0EEayQLECkjCyAANgIAIABBACABQYUBakGP+QJsQf////8HbxAZIABBASACQf+bA3MQGSMLQQRqJAsLjQEAIwtBBGskCxApIwsgADYCACAAQQAgASABQbHZAHFBf3MiAXEgAUGx2QBxchAZIABBASACIAJBouUCcUF/cyIBcSABQaLlAnFyEBkgAEECIANB2M8CcUF/cyIBQdjPAnEgASADcXIQGSAAQQMgBCAEQZumAnFBf3MiAHEgAEGbpgJxchAZIwtBBGokCwudAQAjC0EEayQLECkjCyAANgIAIABBACABQQlqQaeDAWxB/////wdvEBkgAEEBQRggAkEYdXRBCCACQRB1dGpBECACQQh1dGoQGSAAQQJBCCADQRB1dEEQIAN0akEYIANBGHV0ahAZIABBAyAEQbk/bEGQ/B9qQbiaCG8QGSAAQQQgBUHjrgJzEBkgAEEFIAZBwK0CcxAZIwtBBGokCwt/ACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBkrwDcxAZIABBASACQb4bcxAZIABBAiADQb0VciADQb0VcUF/c3EQGSAAQQMgBEH48AFzEBkgAEEEIAVB5cUBcxAZIABBBUEYIAZBEHV0QRAgBnRqQQggBkEYdXRqEBkjC0EEaiQLC0MAIwtBBGskCxApIwsgADYCACAAQQAgAUHIngFzEBkgAEEBIAJB5sEAcUF/cyIAQebBAHEgACACcXIQGSMLQQRqJAsLgwEAIwtBBGskCxApIwsgADYCACAAQQAgAUG5P2xBt84PakG4mghvEBkgAEEBIAJBjtwAcxAZIABBAiADQdKLA2pBtv8DbxAZIABBAyAEQYzyAXIgBEGM8gFxQX9zcRAZIABBBEEIIAV0QRggBUEIdXRqQRAgBUEQdXRqEBkjC0EEaiQLC2EAIwtBBGskCxApIwsgADYCACAAQQAgAUHSAGpBp4MBbEH/////B28QGSAAQQEgAkHwAGpBj/kCbEH/////B28QGSAAQQIgA0Gu+gJyIANBrvoCcUF/c3EQGSMLQQRqJAsLOwAjC0EEayQLECkjCyAANgIAIABBACABQcsAbEHvLmpBgYAEbxAZIABBASACQfHrAXMQGSMLQQRqJAsLKQAjC0EEayQLECkjCyAANgIAIAAgASACIAMgBCAFIAYQHSMLQQRqJAsLiwEAIwtBBGskCxApIwsgADYCACAAQQAgAUHdxANyIAFB3cQDcUF/c3EQGSAAQQEgAkGv6wJxQX9zIgFBr+sCcSABIAJxchAZIABBAiADQebqAHMQGSAAQQMgBEGGAWpBp4MBbEH/////B28QGSAAQQQgBUG40wByIAVBuNMAcUF/c3EQGSMLQQRqJAsLigEAIwtBBGskCxApIwsgADYCACAAQQAgASABQeOaAXFBf3MiAXEgAUHjmgFxchAZIABBAUEYIAJ0QQggAkEYdXRqQRAgAkEQdXRqEBkgAEECIANBprsBcxAZIABBAyAEQaqIA2pBu/8DbxAZIABBBCAFQY31A3IgBUGN9QNxQX9zcRAZIwtBBGokCwumAQAjC0EEayQLECkjCyAANgIAIABBACABQbk/bEH4nvMAakG4mghvEBkgAEEBIAIgAkG24QNxQX9zIgFxIAFBtuEDcXIQGSAAQQIgA0H+7gJzEBkgAEEDIARBhtoDciAEQYbaA3FBf3NxEBkgAEEEQRAgBXRBCCAFQRB1dGpBGCAFQRh1dGoQGSAAQQUgBkE/akGngwFsQf////8HbxAZIwtBBGokCwt9ACMLQQRrJAsQKSMLIAA2AgAgAEEAQRggAXRBCCABQRB1dGpBECABQQh1dGoQGSAAQQFBGCACQRh1dEEIIAJ0akEQIAJBCHV0ahAZIABBAiADQfmUAnMQGSAAQQNBCCAEdEEQIARBGHV0akEYIARBEHV0ahAZIwtBBGokCwtbACMLQQRrJAsQKSMLIAA2AgAgAEEAIAEgAUHT/ANxQX9zIgFxIAFB0/wDcXIQGSAAQQEgAkGk1ABzEBkgAEECIANB+QFqQY/5AmxB/////wdvEBkjC0EEaiQLC4sBACMLQQRrJAsQKSMLIAA2AgAgAEEAIAEgAUHmG3FBf3MiAXEgAUHmG3FyEBkgAEEBIAJBuT9sQcyl7QBqQbiaCG8QGSAAQQIgA0G5P2xB6O4rakG4mghvEBkgAEEDIARB3vQDcxAZIABBBEEQIAVBEHV0QQggBXRqQRggBUEIdXRqEBkjC0EEaiQLC4QBACMLQQRrJAsQKSMLIAA2AgAgAEEAIAFBoQFqQaeDAWxB/////wdvEBkgAEEBQQggAnRBECACQRB1dGpBGCACQRh1dGoQGSAAQQIgA0HLAGxBl/UAakGBgARvEBkgAEEDQRggBEEQdXRBECAEQRh1dGpBCCAEQQh1dGoQGSMLQQRqJAsLPgAjC0EEayQLECkjCyAANgIAIABBACABQbSuA3IgAUG0rgNxQX9zcRAZIABBASACQbvJAXMQGSMLQQRqJAsLTQAjC0EEayQLECkjCyAANgIAIABBACABQcA8cxAZIABBASACIAJBuwhxQX9zIgFxIAFBuwhxchAZIABBAiADQaf8A3MQGSMLQQRqJAsLC1cCAEHgCAsNCwAAACAAAAAAAAAAIABB/AgLPQEBAAACAAAAAQkAAAIAAABBAAAAAgAAAAECAAACAAAAQQgAAAIAAACBAAAAAgAAAIEIAAACAAAAAQoAAAI="), function (a) {
    return a.charCodeAt(0);
  }), Ki).then(function (a) {
    ge = a.instance;
    he = ge.exports;
    oe = he.memory;
    se = oe.buffer;
    ce = he.__pin;
    vj = he.__unpin;
    ye = he.__new;
    fe = he.__collect;
    Ae = "_";
    for (let b = tj; b < 30; b++) {
      Te[b] = he[Ae + b];
    }
    xe = he.__rtti_base;
    Me = new Float32Array(se);
    Cj = new Float64Array(se);
    Dj = new BigUint64Array(se);
    Ie = new Uint32Array(se);
    Aj = new Uint16Array(se);
    Bj = new Uint8Array(se);
    Re = new BigInt64Array(se);
    Gj = new Int32Array(se);
    We = new Int16Array(se);
    Ij = new Int8Array(se);
    Mi = Te[1];
    Wj = Te[5];
    mi = Te[3];
    zi = Te[J];
    Ti = Te[0];
    Rj = Te[20];
    Ne = Te[16];
    ji = Te[29];
    Ri = Te[12];
    Mj = Te[2];
    Ze = Te[25];
    oi = Te[Uj];
    ki = Te[6];
    ek = Te[E];
    ik = Te[7];
    Ke = Te[17];
    Oi = Te[10];
    ti = Te[27];
    li = Te[26];
    Lj = Te[22];
    Pi = Te[Q];
    Nj = Te[28];
    Zj = Te[15];
    ck = Te[24];
    dk = Te[23];
    fk = Te[21];
    Qj = Te[R];
    Sj = Te[Yi];
    ak = Te[19];
    ui = Te[18];
    lk = 1;
    if (kk) {
      kk();
    }
  });
  const Zi = qj;
  const Xi = A;
  const $i = Uj;
  const nk = R;
  const ok = De;
  const pk = function (a) {
    return Ie[(xe + 4 >>> re) + (a << 1)];
  };
  const qk = tj;
  const rk = de;
  const sk = je;
  function tk(a) {
    return 31 - Math.clz32(a >>> O & 31);
  }
  const uk = Qi;
  const vk = re;
  function wk(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return Me;
        case 3:
          return Cj;
      }
    } else {
      switch (a) {
        case Fj:
          if (b) {
            return Ij;
          } else {
            return Bj;
          }
        case 1:
          if (b) {
            return We;
          } else {
            return Aj;
          }
        case 2:
          if (b) {
            return Gj;
          } else {
            return Ie;
          }
        case X:
          if (b) {
            return Re;
          } else {
            return Dj;
          }
      }
    }
  }
  const xk = ae;
  function yk(a) {
    const b = Ie[a + x >>> 2];
    const c = pk(b);
    const d = tk(c);
    let e = c & L ? a : Ie[a + V >>> re];
    const f = c & G ? Ie[a + _ >>> 2] : Ie[e + B >>> re] >>> d;
    return wk(d, c & H, c & K).subarray(e >>>= d, e + f);
  }
  const zk = vk;
  const Ak = m;
  const Bk = Q;
  const Ck = y;
  const Dk = hk;
  function Ek(a, b) {
    const c = a ^ 31276;
    const d = (8 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (0 << (b >> 8 & 255)) + (16 << (b & 255));
    return (2147483587 + (21328 + (function (b, c, d, e, f, i) {
      const j = ~(d & 38754) & (d | 38754);
      const a = ~(e & 56105) & 56105 | ~(e & 56105) & e;
      const k = ~(f & 57856) & f | ~(f & 57856) & 57856;
      const h = ~(i & 17916) & i | ~(i & 17916) & 17916;
      const l = ef(b ^ 26502, ~(c & 32176) & c | ~(c & 32176) & 32176);
      (function (b, c, d, e) {
        const f = (0 << (b >> Fk & 255)) + (24 << (b >> 8 & Xg)) + (Kg << (b >> 24 & vg)) + (16 << (b & 255));
        const g = ((c + 34997) * 214013 + 2531011) % 4294967296;
        const i = ((21029 + d) * 214013 + 2531011) % 4294967296;
        const a = ~(e & 15487) & (e | 15487);
        const j = function (b, c, d, e, f) {
          const g = (16 << (b >> Tg & 255)) + (24 << (b >> 24 & Tj)) + (0 << (b >> 16 & 255)) + (8 << (b >> 8 & 255));
          const h = ~(c & 4780) & (c | 4780);
          const a = _f(g, h, (d | 36843) & ~(d & 36843), ((e + 24277) * 1103515245 + 12345) % 2147483648, (24 << (f >> 16 & 255)) + (16 << (f >> R & Es)) + (vt << (f >> 24 & Br)) + (0 << (f & io)));
          Ik(g, h);
          return ~(a & 959) & 959 | ~(a & 959) & a;
        }(f, g, i, a, f);
        const h = _f(g, i, a, f, g);
      })(j, a, k, h);
      return (l | 20958) & ~(l & 20958);
    }(c, d, c, d, c, d) ^ rf(c, d))) * 2147483629) % 2147483647;
  }
  const Fk = te;
  const Gk = qj;
  const Hk = gk;
  function Ik(a, b) {
    const c = (24 << (a & 255)) + (8 << (a >> 8 & 255)) + (0 << (a >> 24 & 255)) + (16 << (a >> 16 & 255));
    const d = (b + 30717) % 65347;
    const e = $n(c, d, c, d, c);
    nt(d, c, d, c);
    return ~(e & 30482) & 30482 | ~(e & 30482) & e;
  }
  const Jk = te;
  const Kk = c;
  const Lk = "development";
  const Mk = Vj;
  const Nk = ok;
  const Ok = Ej;
  const Pk = "production";
  const Qk = Z;
  function Rk(a) {
    this.ΔΔⵠΔ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor((this.ΔΔⵠΔ - j) * Math.random());
  }
  Rk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ΔΔⵠΔ;
    return this.state / this.ΔΔⵠΔ;
  };
  const Sk = Y;
  Rk.prototype.ΔⲆⲆⲆΔⲆΔ = function (a) {
    this.state = a;
  };
  ΔⵠⲆΔⵠᐃΔ = 10000;
  const Tk = W;
  const Uk = Ck;
  ᐃΔⵠⵠΔΔΔ = [];
  var Vk = new Rk();
  Vk.ΔⲆⲆⲆΔⲆΔ(new Date().getTime());
  const Wk = ee;
  for (var Xk = Fj; Xk < ΔⵠⲆΔⵠᐃΔ; Xk++) {
    ᐃΔⵠⵠΔΔΔ.push(Vk.random());
  }
  const Yk = sk;
  function Zk(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const j = c ^ 63080;
    const a = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = d ^ 62842;
      const a = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = dq(f, i, j, a);
      const h = zn(f, i, j, a);
      $k(f, i, j, a);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & T)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> le & 255));
      return ~(l & 63304) & (l | 63304);
    }(i, j, a, k);
    const g = Sn(h, i, j, a, k);
    return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ Gn(h, i, j, a, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function $k(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const j = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const a = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & Tj)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, d, e, f, i, j) {
      const k = c ^ 10715;
      const a = (24 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
      const m = (R << (e >> jk & T)) + (32 << (e >> 24 & 255)) + (16 << (e >> nk & 255)) + (24 << (e >> 32 & 255));
      const h = f ^ 40782;
      const l = i ^ 41301;
      const g = ~(j & 12091) & (j | 12091);
      const n = mq(k, a, m, h, l, g);
      mq(k, a, m, h, l, g);
      fn(k, a, m, h, l);
      const b = (n | 3006) & ~(n & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, j, a, f, i);
    const h = Sn(j, a, f, i, j);
    mq(a, f, i, j, a, f);
    const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  function _k(c, e, f, i, j, k) {
    const m = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const a = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = wn(m, a, n, h, l);
    const b = function (c, d, e, f, i, j) {
      const k = c ^ 30142;
      const a = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & T)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & T)) + (16 << (i >> R & bq));
      const g = (j | 45652) & ~(j & 45652);
      const n = wn(k, a, m, h, l);
      Zk(g, k, a, m, h);
      ln(l, g, k, a, m, h);
      return n ^ 60048;
    }(g, m, a, n, h, l);
    sn(g, m, a, n, h, l);
    const p = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(p & 42138) & p | ~(p & 42138) & 42138;
  }
  function aq(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const k = d ^ 58614;
    const a = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & T)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const l = Fn(j, k);
    const g = $k(a, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const j = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const a = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = _n(c, d, c);
        tn(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ eq(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = An(j, a, f, i, j);
      Fn(a, f);
      const l = (58498 + (k ^ h)) % 65531;
    })(k, a, m, h);
    const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> R & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const bq = T;
  const cq = k;
  function dq(a, b, c, d) {
    const e = a ^ 11762;
    const f = ~(b & 19425) & 19425 | ~(b & 19425) & b;
    return ((55182 + (((17757 + ((32 << ((e ^ f) >> 32 & 255)) + (8 << ((e ^ f) >> 8 & 255)) + (24 << ((e ^ f) >> 24 & 255)) + (16 << ((e ^ f) >> 16 & 255)) ^ (32 << (c >> 16 & 255)) + (8 << (c >> 32 & Tj)) + (24 << (c >> 24 & Tj)) + (16 << (c >> 8 & bq)))) * 1664525 + 1013904223) % 4294967296 ^ (~(d & 259) & 259 | ~(d & 259) & d))) * 1664525 + 1013904223) % 4294967296;
  }
  function eq(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> jk & 255)) + (8 << (b >> 32 & 255));
    const j = (c + 39144) % 65406;
    const a = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = dq(i, j, a, k);
    An(h, i, j, a, k);
    sn(h, i, j, a, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  const fq = ci;
  const gq = M;
  function hq(c, d, e, f, i, j) {
    const k = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const a = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & Tj)) + (16 << (f >> 8 & 255)) + (R << (f >> Fk & 255)) + (32 << (f >> 32 & 255));
    const l = (Ok + (39199 + i) * 22695477) % 4294967296;
    const g = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & Tj)) + (32 << (d >> 8 & 255));
      const i = un(e, f, g, e, f);
      const a = Gn(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & bq)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & bq)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> te & 255));
        const e = ln(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const j = (2531011 + (c + 41768) * 214013) % 4294967296;
          const a = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> te & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const h = Zk(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const m = (2531011 + (c + 16955) * 214013) % 4294967296;
                const a = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = kq(m, a, n, h);
                const b = An(l, g, m, a, n);
                const p = kq(h, l, g, m);
              })(g, e, f, g, e, f);
              zn(g, e, f, g);
              return ~(h & 43875) & (h | 43875) ^ 15116;
            }(c, d, c);
            fn(d, c, d, c, d);
            dq(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, j);
          tn(a, k, h, i);
          const g = iq(j, a, k, h, i);
        })(c, d, c, d, c);
        xn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((i ^ a) >> 32 & bq)) + (24 << ((i ^ a) >> 24 & bq)) + (32 << ((i ^ a) >> 8 & 255)) + (8 << ((i ^ a) >> 16 & Tj));
      return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(k, a, m);
    zn(h, l, g, k);
    return ((34159 + (n ^ 2959 ^ kq(a, m, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  function iq(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> Jk & 255)) + (16 << (b >> 8 & bq)) + (8 << (b >> 32 & 255));
    const j = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const a = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & Tj)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & bq));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = xn(i, j);
    An(a, k, h, i, j);
    ln(a, k, h, i, j, a);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const jq = ie;
  function kq(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & Tj)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & T));
    const i = ~(d & 32053) & (d | 32053);
    const a = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> jk & 255)) + (24 << (b >> 24 & 255)) + (nk << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const j = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const a = e ^ 18768;
      const k = wn(f, i, j, a, f);
      const h = aq(i, j, a, f, i);
      const l = gn(j, a);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, i, a);
    zn(f, g, i, a);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ wn(f, g, i, a, f))) * 214013) % 4294967296;
  }
  const lq = S;
  function mq(b, c, d, e, f, i) {
    const j = ~(b & 36133) & (b | 36133);
    const a = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (kn(j, a, k, h, l) ^ zn(g, j, a, k))) * 2147483629 + 2147483587) % 2147483647 ^ fn(h, l, g, j, a))) * 1103515245) % 2147483648;
  }
  const en = A;
  function tn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const i = d ^ 38714;
    const a = e ^ 58084;
    const j = _k(f, g, i, a, f, g);
    zn(i, a, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ sn(i, a, f, g, i, a))) * 214013 + 2531011) % 4294967296;
  }
  const nn = Kj;
  const on = Zi;
  const rn = hk;
  const an = Xi;
  function sn(b, c, d, e, f, g) {
    const i = b ^ 23409;
    const a = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (dq(i, a, d ^ 53590, e ^ 36633) ^ dq(j, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  const hn = Yi;
  function ln(c, d, e, f, i, j) {
    const k = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const a = (d | 41551) & ~(d & 41551);
    const m = (24 << (e >> 24 & 255)) + (16 << (e >> 32 & bq)) + (8 << (e >> te & Tj)) + (32 << (e >> 8 & bq));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const n = Gn(k, a, m, h, l, g);
    eq(k, a, m, h, l);
    dq(g, k, a, m);
    const b = ~(n & 8077) & 8077 | ~(n & 8077) & n;
    return ~(b & 3708) & (b | 3708);
  }
  function gn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = sn(d, e, d, e, d, e);
    const g = sn(d, e, d, e, d, e);
    dq(d, e, d, e);
    const h = (16 << ((f ^ g) >> 32 & Tj)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & bq));
    return ~(h & 55949) & 55949 | ~(h & 55949) & h;
  }
  function un(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const j = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const a = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & T));
    const l = sn(i, j, a, k, h, i);
    const g = dq(j, a, k, h);
    _n(i, j, a);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & bq)) ^ 31710;
  }
  const bn = Ak;
  const vn = ue;
  const dn = an;
  const cn = $i;
  const mn = ok;
  const pn = J;
  const Cn = tj;
  const Tn = N;
  function fn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const j = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const a = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & bq)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = sn(i, j, a, k, h, i);
    const g = ln(j, a, k, h, i, j);
    dq(a, k, h, i);
    return (nk << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> w & T)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  function zn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const a = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = xn(f, g);
    xn(i, a);
    Sn(f, g, i, a, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  const yn = Kk;
  function wn(b, c, d, e, f) {
    const i = b ^ 62008;
    const j = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const a = ((d + 46531) * 22695477 + Oj) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = Zk(i, j, a, k, h);
    Gn(i, j, a, k, h, i);
    return ((3037 + (l ^ 57467 ^ Sn(j, a, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const Pn = q;
  function An(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = c ^ 50118;
    const a = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = Gn(i, j, a, k, h, i);
    Gn(j, a, k, h, i, j);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ dq(a, k, h, i))) * 214013) % 4294967296;
  }
  function kn(c, d, e, f, i) {
    const j = (16 << (c >> 32 & T)) + (24 << (c >> 24 & 255)) + (le << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const k = d ^ 55978;
    const a = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & Tj)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = An(j, k, a, m, h);
    const g = fn(j, k, a, m, h);
    dq(j, k, a, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & T)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function xn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (kn(c, d, c, d, c) ^ An(d, c, d, c, d))) % 65357 ^ dq(c, d, c, d))) * 22695477) % 4294967296;
  }
  const Jn = xj;
  const Mn = Dk;
  const Bn = ee;
  const Dn = nk;
  const In = Fk;
  const En = Sk;
  function Sn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (d + 52922) % 65337;
    const a = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = eq(j, k, a, m, h);
    const g = Fn(j, k);
    eq(a, m, h, j, k);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  const Qn = Xi;
  function _n(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const h = iq(e, f, g, e, f);
    const a = iq(g, e, f, g, e);
    iq(f, g, e, f, g);
    return (16 << ((h ^ a) >> 32 & 255)) + (8 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 24 & 255)) + (32 << ((h ^ a) >> w & Tj)) ^ 31181;
  }
  function Fn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & bq)) + (24 << (c >> nk & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = iq(d, e, d, e, d);
    const g = kn(e, d, e, d, e);
    un(d, e, d, e, d);
    const h = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(h & 40927) & 40927 | ~(h & 40927) & h;
  }
  const Rn = _i;
  function Gn(b, c, d, e, f, i) {
    const j = d ^ 8102;
    const a = (24 << (e >> te & 255)) + (32 << (e >> 32 & T)) + (8 << (e >> 24 & 255)) + (16 << (e >> le & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const l = gn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> R & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = gn(j, a);
    gn(k, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  const jn = Gk;
  const Wn = Q;
  ᐃⵠΔⵠ = {
    ᐃᐃⵠⵠⵠᐃⵠ: () => new Promise((a, b) => {
      kj.grecaptcha.ready(function () {
        kj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (ow) {
            a(0);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ⵠᐃⲆᐃᐃⵠⲆΔⵠ: function (a) {
      kj.open(a, "_blank").focus();
    },
    ⲆⵠⵠᐃΔⲆⲆ: function (a) {
      kj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⵠⵠΔⲆᐃᐃⵠ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ⵠᐃΔᐃᐃΔⲆΔⵠ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = ne; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⵠⵠΔⲆᐃᐃⵠ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return Rn;
        }
      }
      return true;
    },
    ᐃΔⵠⲆⲆⲆⵠ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⵠⲆᐃᐃⲆⲆᐃ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ΔᐃΔⵠΔᐃΔΔⲆ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠᐃᐃᐃⵠⲆᐃ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ⲆⵠⲆᐃⵠΔⲆ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -ie;
      } else {
        return jq;
      }
    },
    ΔΔᐃⵠⲆⵠᐃ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    Δⵠⵠⵠⵠᐃᐃ: function (a, b, c, d) {
      var e = d - b;
      var f = c - a;
      return Math.atan2(e, f);
    },
    ΔᐃᐃⵠⵠⲆΔ: function (a, b) {
      return Math.asin(this.ⵠᐃᐃᐃⵠⲆᐃ(a, b) / (this.ⲆⵠⲆᐃⵠΔⲆ(a) * this.ⲆⵠⲆᐃⵠΔⲆ(b))) * this.sign(this.ΔΔᐃⵠⲆⵠᐃ(a, b));
    },
    ⲆⵠⵠⵠΔᐃⲆ: function (a) {
      ⵠᐃᐃⲆΔΔΔ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠᐃᐃⲆΔΔΔ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ΔΔΔΔΔⵠⲆ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔⵠΔⲆᐃᐃⲆ: function (a, b) {
      return this.ΔᐃᐃⵠⵠⲆΔ({
        x: 1,
        y: 0
      }, this.ⵠⲆᐃᐃⲆⲆᐃ(a, b));
    },
    ⲆⵠⲆᐃ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⵠⲆⲆΔΔᐃⵠ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ΔⲆΔⲆΔᐃᐃ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆⲆⲆⲆⵠⲆⵠ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ΔⲆΔⲆⲆΔⵠᐃᐃ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ΔⲆᐃΔᐃᐃⵠᐃⲆ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⲆΔⵠᐃΔ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ΔᐃΔᐃΔⲆΔ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ᐃΔΔᐃⵠⵠⲆ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / vk
      };
    },
    ⲆⲆΔⲆⲆⵠⲆ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ᐃⵠⲆΔᐃⲆⵠᐃΔ: function (a, b, c) {
      var d = this.ⲆⲆΔⲆⲆⵠⲆ();
      var e = this.ⲆⲆΔⲆⲆⵠⲆ();
      var f = Math.random() * Math.PI / re;
      return {
        x: Math.floor(a + Math.sin(f) * d * c),
        y: Math.floor(b + Math.cos(f) * e * c)
      };
    },
    ⲆΔᐃΔᐃᐃΔⵠⲆ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ⵠΔⵠ = d;
    },
    ΔᐃⵠΔΔⲆⵠΔⵠ: function (a) {
      ᐃᐃΔ = [];
      ᐃᐃΔ.push.apply(ᐃᐃΔ, a);
      var b = [];
      while (ᐃᐃΔ.length > Cn) {
        var c = Math.floor(Math.random() * ᐃᐃΔ.length);
        b.push(ᐃᐃΔ[c]);
        ᐃᐃΔ.splice(c, jq);
      }
      return b;
    },
    ΔⲆᐃⲆᐃᐃᐃ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ΔⲆᐃΔⵠΔⵠ: function (a) {
      if (typeof a !== "number") {
        return "0";
      }
      if (a >= 10000) {
        var b = Math.floor(Math.log10(a)) - zk;
        var c = Math.max(ne, Kj - b);
        var d = Math.floor(a / 1000).toString();
        if (c) {
          for (var e = (d += "." + (a % 1000 / 1000).toString().substring(2).substring(0, c)).length - 1, f = Fj; e > Fj && d[e] == "0"; e--) {
            f++;
          }
          if ((d = d.substring(qk, d.length - f))[d.length - Ej] == ".") {
            d = d.substring(qk, d.length - Ok);
          }
        }
        return d += "k";
      }
      return a.toString();
    },
    ⲆΔΔᐃΔⲆΔ: function (a) {
      return a * (vk - a);
    },
    ΔⵠⲆᐃᐃⲆΔ: function (a) {
      return --a * a * a + j;
    },
    ⵠΔᐃⲆΔ: function (a) {
      if (a < 0.5) {
        return zk * a * a;
      } else {
        return (4 - zk * a) * a - 1;
      }
    },
    ⲆΔᐃⵠⵠⲆⵠ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ⲆⵠΔⲆⵠⵠⲆΔⲆ: function (a) {
      if (a < 0.5) {
        return R * a * a * a * a;
      } else {
        return j - R * --a * a * a * a;
      }
    },
    ⵠⵠⵠᐃⲆΔⵠ: function (a) {
      return ie - --a * a * a * a;
    },
    ⵠⲆᐃᐃⲆⵠⲆ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ΔⲆΔᐃ: function (a, b, c, d, e, f) {
      this.ⲆⵠΔ = a;
      this.ⲆᐃⲆ = b;
      this.max = c;
      this.min = d;
      this.ⵠⲆΔⵠⵠᐃⵠ = e;
      this.ⵠⵠᐃΔΔⵠΔ = f;
      this.ᐃⵠᐃⵠᐃⵠⲆ = qk;
      this.ᐃⲆΔ = function () {
        if (this.ⲆⵠΔ) {
          if ((a = this.ⲆᐃⲆ + xf * this.ⵠⲆΔⵠⵠᐃⵠ) > this.max) {
            this.ⲆᐃⲆ = this.max;
            this.ⲆⵠΔ = false;
            return true;
          }
          this.ⲆᐃⲆ = a;
        } else {
          var a;
          if ((a = this.ⲆᐃⲆ - xf * this.ⵠⵠᐃΔΔⵠΔ) < this.min) {
            this.ⲆᐃⲆ = this.min;
            this.ⲆⵠΔ = en;
          } else {
            this.ⲆᐃⲆ = a;
          }
        }
      };
      return false;
    },
    ⲆⵠᐃⲆⵠ: function (a, b, c, d, e, f) {
      this.ᐃᐃᐃΔᐃ = a;
      this.ⵠᐃⵠⵠⵠ = b;
      this.ⲆΔᐃΔΔ = c;
      this.ⵠⲆᐃⲆⲆ = d;
      this.x = e;
      this.ⵠᐃⲆⵠΔ = f;
      this.ΔⵠⲆᐃΔⲆΔ = function () {
        this.x = this.ⵠΔΔⵠⵠᐃᐃᐃⲆ;
        this.ⵠᐃⵠⵠⵠ = 0;
      };
      this.ΔⵠⲆⲆⵠΔΔ = function (a) {
        if (a !== this.ⵠᐃⲆⵠΔ) {
          this.ⵠᐃⲆⵠΔ = a;
          this.ⵠⲆᐃⲆⲆ = this.x;
          this.ⵠᐃⵠⵠⵠ = 0;
        }
        if (this.ⵠᐃⲆⵠΔ !== this.x) {
          this.ⵠᐃⵠⵠⵠ += xf;
          if (this.ⵠᐃⵠⵠⵠ > this.ⲆΔᐃΔΔ) {
            this.x = this.ⵠᐃⲆⵠΔ;
          } else {
            var b = this.ᐃᐃᐃΔᐃ(this.ⵠᐃⵠⵠⵠ / this.ⲆΔᐃΔΔ);
            this.x = this.ⵠⲆᐃⲆⲆ + (this.ⵠᐃⲆⵠΔ - this.ⵠⲆᐃⲆⲆ) * b;
          }
        }
      };
    },
    ᐃⲆⲆΔⵠⲆΔ: function (b, c, d, e, f, g, i, a, j) {
      this.ᐃᐃᐃΔᐃ = b;
      this.ⵠᐃⵠⵠⵠ = c;
      this.ⲆΔᐃΔΔ = d;
      this.ⵠⲆᐃⲆⲆ = e;
      this.ᐃᐃΔⵠⵠ = f;
      this.x = g;
      this.y = i;
      this.ⵠᐃⲆⵠΔ = a;
      this.ⵠΔΔⲆΔⲆⲆ = j;
      this.ΔⵠⲆⲆⵠΔΔ = function (a) {
        if (a.x != this.ⵠᐃⲆⵠΔ || a.y != this.ⵠΔΔⲆΔⲆⲆ) {
          this.ⵠᐃⲆⵠΔ = a.x;
          this.ⵠΔΔⲆΔⲆⲆ = a.y;
          this.ⵠⲆᐃⲆⲆ = this.x;
          this.ᐃᐃΔⵠⵠ = this.y;
          this.ⵠᐃⵠⵠⵠ = 0;
        }
        if (this.ⵠᐃⲆⵠΔ != this.x || this.ⵠΔΔⲆΔⲆⲆ != this.y) {
          this.ⵠᐃⵠⵠⵠ += xf;
          if (this.ⵠᐃⵠⵠⵠ > this.ⲆΔᐃΔΔ) {
            this.x = this.ⵠᐃⲆⵠΔ;
            this.y = this.ⵠΔΔⲆΔⲆⲆ;
          } else {
            var b = this.ᐃᐃᐃΔᐃ(this.ⵠᐃⵠⵠⵠ / this.ⲆΔᐃΔΔ);
            this.x = this.ⵠⲆᐃⲆⲆ + (this.ⵠᐃⲆⵠΔ - this.ⵠⲆᐃⲆⲆ) * b;
            this.y = this.ᐃᐃΔⵠⵠ + (this.ⵠΔΔⲆΔⲆⲆ - this.ᐃᐃΔⵠⵠ) * b;
          }
        }
      };
    },
    ⵠΔᐃⲆᐃᐃⲆ: function (a) {
      var b = "";
      for (var c = tj; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ᐃⵠΔᐃⲆᐃⲆ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[Ej];
      }
    },
    ᐃΔⵠΔΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠΔᐃᐃⲆΔⲆ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠΔⵠ || d;
    },
    ᐃⲆⵠΔⲆⲆΔ: function (b, c, d, e, f, g, h, a) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, h) < Math.min(e, a)) {
        return 1;
      } else {
        return Cn;
      }
    },
    ⲆⵠⵠᐃⵠᐃⲆ: function (a, b, c) {
      return (Oj - c) * a + c * b;
    },
    ⵠΔΔᐃᐃⲆⵠ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const Ln = Ye;
  function On(b, c, d, e, f, g) {
    Ri(Ys, b, c, d, e, f, g);
    const h = Qw($s[0], $s[Ok], $s[zk], $s[3], $s[uj]);
    $w($s[5], $s[0], $s[Ok], $s[2]);
    return ~(h & 12548) & h | ~(h & 12548) & 12548;
  }
  function Nn(a, b) {
    Pi(Ys, a, b);
    const c = $w($s[Fj], $s[1], $s[0], $s[1]);
    const d = function (a, b) {
      Ke(Ys, a, b);
      const c = pt($s[Nl], $s[zs]);
      const d = Yw($s[tj], $s[As], $s[Nl], $s[Al]);
      return (0 << ((c ^ d) >> ls & al)) + (16 << ((c ^ d) >> 24 & 255)) + (8 << ((c ^ d) & 255)) + (24 << ((c ^ d) >> 16 & 255));
    }($s[0], $s[Ue]);
    return (0 << ((c ^ d) >> 8 & Tj)) + (8 << ((c ^ d) >> 24 & 255)) + (16 << ((c ^ d) >> 16 & 255)) + (24 << ((c ^ d) & 255));
  }
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return tj;
    } else if (a > tj) {
      return Ej;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⵠᐃᐃⲆⵠΔⲆⲆⵠ;
  };
  const qn = tj;
  const Hn = je;
  function Un(b, c, d, e) {
    const f = (3792 + b) % 65428;
    const g = (8 << (c >> qn & 255)) + (0 << (c >> 24 & 255)) + (24 << (c >> 8 & 255)) + (16 << (c >> 16 & 255));
    const i = ~(d & 26804) & d | ~(d & 26804) & 26804;
    const a = e ^ 40084;
    const j = function (b, c, d, e) {
      const f = ~(b & 6708) & (b | 6708);
      const g = ((c + 20383) * 1103515245 + 12345) % 2147483648;
      const i = (d + 52673) % 65453;
      const a = e ^ 11412;
      const j = function (b, c, d, e, f, g) {
        const i = (35123 + f) % 65453;
        const a = (0 << (g >> 24 & Da)) + (24 << (g & 255)) + (8 << (g >> te & 255)) + (16 << (g >> 8 & 255));
        const j = Nr(b ^ 16813, (2531011 + (37814 + c) * 214013) % 4294967296, (d | 26919) & ~(d & 26919), (8 << (e & 255)) + (0 << (e >> 8 & 255)) + (24 << (e >> 16 & 255)) + (te << (e >> 24 & 255)));
        Ts(i, a);
        return (j | 2938) & ~(j & 2938);
      }(f, g, i, a, f, g);
      Tw(i, a, f, g, i, a);
      return ~(j & 16352) & j | ~(j & 16352) & 16352;
    }(f, g, i, a);
    Vw(f, g, i, a);
    return j ^ 59025;
  }
  function Yn(b, c, d, e) {
    const f = (2531011 + (b + 39863) * 214013) % 4294967296;
    const g = ~(c & 12340) & (c | 12340);
    const i = (d | 15715) & ~(d & 15715);
    const a = ~(e & 1819) & e | ~(e & 1819) & 1819;
    const j = If(f, g, i, a, f);
    const h = function (b, c, d, e, f) {
      const i = ~(b & 32951) & (b | 32951);
      const j = (12345 + (c + 34293) * 1103515245) % 2147483648;
      const a = ((d + 2301) * 1664525 + 1013904223) % 4294967296;
      const k = ((62539 + e) * 1664525 + 1013904223) % 4294967296;
      const h = (8 << (f & 255)) + (0 << (f >> Pq & 255)) + (16 << (f >> 24 & 255)) + (24 << (f >> 8 & al));
      const l = Ts(i, j);
      const g = function (b, c, d, e, f, g) {
        const i = ((e + 40794) * 214013 + 2531011) % 4294967296;
        const a = ((f + 52199) * 214013 + 2531011) % 4294967296;
        const j = Sa(b ^ 63760, (c | 31430) & ~(c & 31430), (d | 40702) & ~(d & 40702));
        (function (a, b) {
          const c = ((a + 41741) * 2147483629 + 2147483587) % 2147483647;
          const d = b ^ 57370;
          const e = function (b, c, d, e, f, g) {
            const i = b ^ 65270;
            const a = ((f + 54114) * 1664525 + 1013904223) % 4294967296;
            const j = (8 << (g >> 24 & 255)) + (24 << (g >> 16 & 255)) + (Nl << (g & 255)) + (te << (g >> 8 & 255));
            const h = Un(i, ((c + 26962) * 214013 + 2531011) % 4294967296, ~(d & 64417) & 64417 | ~(d & 64417) & d, (16 << (e & 255)) + (24 << (e >> 8 & 255)) + (qh << (e >> tq & 255)) + (0 << (e >> 24 & rh)));
            (function (b, c, d) {
              const e = (0 << (b >> qk & 255)) + (Go << (b >> 16 & Br)) + (24 << (b >> 8 & 255)) + (8 << (b >> 24 & 255));
              const f = (24 << (c >> 24 & 255)) + (16 << (c & 255)) + (8 << (c >> 16 & Tj)) + (0 << (c >> 8 & T));
              const g = (d | 6684) & ~(d & 6684);
              const h = $n(e, f, g, e, f);
              const a = function (b, c, d, e, f, i) {
                const j = ((6674 + b) * 1103515245 + 12345) % 2147483648;
                const a = (1 + (44821 + f) * 22695477) % 4294967296;
                const k = (2147483587 + (37490 + i) * 2147483629) % 2147483647;
                const h = Ia(j, c ^ 29079, (d | 62210) & ~(d & 62210), (12345 + (30642 + e) * 1103515245) % 2147483648);
                const l = function (b, c, d) {
                  const e = (24 << (b >> 16 & yl)) + (0 << (b >> rl & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
                  const f = (2531011 + (c + 2733) * 214013) % 4294967296;
                  const g = (1 + (12335 + d) * 22695477) % 4294967296;
                  const h = function (b, c, d, e, f) {
                    const i = ((b + 23900) * 214013 + 2531011) % 4294967296;
                    const j = ~(c & 21449) & 21449 | ~(c & 21449) & c;
                    const a = ~(d & 42956) & 42956 | ~(d & 42956) & d;
                    const k = (1 + (58552 + e) * 22695477) % 4294967296;
                    const h = (f | 37308) & ~(f & 37308);
                    const l = Mr(i, j, a, k, h);
                    const g = Mr(i, j, a, k, h);
                    return ((44351 + (l ^ g)) * 214013 + 2531011) % 4294967296;
                  }(e, f, g, e, f);
                  If(g, e, f, g, e);
                  return h ^ 51518;
                }(a, k, j);
                return (1013904223 + (61040 + (h ^ l)) * 1664525) % 4294967296;
              }(g, e, f, g, e, f);
            })(a, j, i);
            return h ^ 32629;
          }(c, d, c, d, c, d);
          const f = Un(c, d, c, d);
        })(i, a);
        return (j | 48116) & ~(j & 48116);
      }(a, k, h, i, j);
      return (2147483587 + (46651 + (l ^ g)) * 2147483629) % 2147483647;
    }(g, i, a, f, g);
    return (24 << ((j ^ h) >> 16 & 255)) + (te << ((j ^ h) >> 8 & 255)) + (8 << ((j ^ h) >> 24 & 255)) + (0 << ((j ^ h) & 255));
  }
  const Kn = ee;
  const Vn = P;
  const Zn = zk;
  (function (a) {
    var b = false;
    if (typeof ΔⲆᐃᐃΔΔΔ === "function" && ΔⲆᐃᐃΔΔΔ.ΔⲆⵠΔᐃⲆᐃ) {
      ΔⲆᐃᐃΔΔΔ(a);
      b = Qn;
    }
    if (typeof ΔᐃⵠΔΔⲆⵠ === "object") {
      ⲆΔⲆΔᐃⵠⲆⲆⵠ.exports = a();
      b = true;
    }
    if (!b) {
      var c = kj.ⲆⵠΔΔ;
      var d = kj.ⲆⵠΔΔ = a();
      d.ⵠᐃⲆⵠᐃᐃΔΔΔ = function () {
        kj.ⲆⵠΔΔ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⵠᐃⲆᐃᐃⵠⲆ, j)).expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ΔΔᐃᐃⵠⲆΔⲆⵠ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
            var p = n[l].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ΔⵠΔⵠⵠΔⲆⵠᐃ = function () {
        return d.apply({
          json: Qn
        }, [].slice.call(arguments));
      };
      d.ⵠᐃⲆᐃᐃⵠⲆ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ᐃⵠⵠᐃⵠᐃⲆⲆΔ = a;
      return d;
    }(function () { });
  });
  const Xn = A;
  function $n(b, c, d, e, f) {
    const g = b ^ 2133;
    const i = (16589 + c) % 65475;
    const a = ~(d & 1864) & (d | 1864);
    const j = (19911 + f) % 65281;
    return (2147483587 + (37830 + (Vw(g, i, a, (30853 + e) % 65475) ^ nt(j, g, i, a))) * 2147483629) % 2147483647;
  }
  function eo(a, b, c, d) {
    ki(Ys, a, b, c, d);
    const e = function (b, c, d, e, f, g) {
      li(Ys, b, c, d, e, f, g);
      const h = function (b, c, d, e, f) {
        ak(Ys, b, c, d, e, f);
        const g = $w($s[0], $s[1], $s[2], $s[X]);
        const h = function (b, c, d, e, f) {
          Oi(Ys, b, c, d, e, f);
          const g = $w($s[Fj], $s[1], $s[re], $s[3]);
          const h = pt($s[4], $s[0]);
          return (0 << ((g ^ h) & Tj)) + (8 << ((g ^ h) >> 16 & 255)) + (24 << ((g ^ h) >> 8 & 255)) + (16 << ((g ^ h) >> 24 & 255));
        }($s[Aq], $s[0], $s[1], $s[re], $s[3]);
        return (8 << ((g ^ h) >> 16 & 255)) + (16 << ((g ^ h) >> 24 & 255)) + (gr << ((g ^ h) >> Gr & 255)) + (24 << ((g ^ h) >> 8 & io));
      }($s[ms], $s[ag], $s[2], $s[og], $s[Yi]);
      $w($s[pr], $s[Qs], $s[1], $s[Cl]);
      return ~(h & 49597) & 49597 | ~(h & 49597) & h;
    }($s[0], $s[1], $s[2], $s[3], $s[Cn], $s[jq]);
    pt($s[re], $s[3]);
    return ~(e & 10940) & (e | 10940);
  }
  const io = T;
  var to = document.getElementById("game_canvas");
  const no = pj;
  var oo = to.getContext("2d");
  var ro = to.width;
  const nq = ci;
  var so = to.height;
  var oq = to.width / Zn;
  var pq = to.height / Zn;
  const qq = Ck;
  var uo = {
    x: oq,
    y: pq
  };
  var rq = Ej;
  const sq = gq;
  const co = Kj;
  var mo = 1;
  const tq = w;
  const Co = $j;
  var To = -1;
  const uq = Uj;
  const zo = Qn;
  const yo = lq;
  var wo = "J" + Wq;
  const vq = tj;
  const Ao = _i;
  var ko = "S" + Er;
  const wq = Qn;
  const Jo = sj;
  var Mo = kj;
  const Bo = z;
  const Do = cq;
  const Io = ci;
  const Eo = ie;
  const So = _j;
  var Qo;
  const xq = yn;
  var Fo = (Bq = "O") + "N";
  const yq = qj;
  const Go = In;
  var jo;
  var zq = Mo;
  const Lo = Tj;
  const Oo = Mn;
  const No = Vj;
  const qo = q;
  const Ho = xk;
  var Uo;
  const Aq = hn;
  const Ko = bn;
  ko = "N";
  var Vo = "J";
  var Bq = "O" + Wq;
  const Cq = qk;
  var $o;
  var Dq = zq;
  const Eq = R;
  const Fq = Sk;
  const Gq = mk;
  const Hq = Pj;
  const Iq = Bn;
  var Jq = Dq;
  Fo = "N" + undefined;
  const Kq = Tk;
  var Lq;
  var Mq = Jq;
  const Nq = nq;
  const Oq = $j;
  const Pq = jk;
  const Qq = zj;
  var Rq;
  var Sq;
  var Tq = Mq;
  const Uq = Uj;
  const Vq = Q;
  var Wq;
  var Xq = Tq;
  const Yq = zo;
  const Zq = Eo;
  const $q = lq;
  const _q = Bo;
  const ar = Z;
  var br;
  var dr = Xq;
  const gr = qk;
  const hr = _i;
  const ir = Do;
  const kr = je;
  Vo = "O";
  const nr = f;
  const or = Co;
  const pr = Ui;
  const rr = Ck;
  const sr = sq;
  const tr = Q;
  const ur = qk;
  const vr = hk;
  var jr;
  const wr = vk;
  const yr = yq;
  const zr = vn;
  var Ar = dr = Xq;
  const qr = Zi;
  const Br = io;
  var Cr;
  var Dr = Ar;
  var Er = "J" + (jr = "S");
  function Fr(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ⵠᐃᐃΔⲆᐃᐃ = j;
    return b;
  }
  to.oncontextmenu = function () {
    return false;
  };
  wo = "J";
  const Gr = vq;
  Bq = Fo;
  const Hr = qo;
  const Ir = Yq;
  Fo = Wq;
  Wq = Er;
  const ea = uj;
  const ia = ae;
  const ta = Eq;
  const na = Ao;
  const oa = fq;
  const ra = nr;
  const aa = Zq;
  const sa = rn;
  Bq = Er;
  const ha = sj;
  const la = wj;
  const ua = yo;
  $o = Lq = Er + (Vo += wo = ko);
  ko = Vo + wo;
  Rq = Qo = jo = Er + Vo;
  Bq = Er + Vo;
  const ba = No;
  Sq = jo;
  const va = Qi;
  Fo = Er + Vo;
  const da = jn;
  br = Uo = Qo;
  Vo = Wq = Er;
  jr = jo;
  const ca = Yj;
  const ma = uq;
  const pa = or;
  Cr = Qo;
  const Ca = E;
  const Ta = d;
  wo = Bq;
  const fa = rk;
  var za = kj.devicePixelRatio || Ej;
  var ya = oo.ᐃᐃⵠᐃᐃᐃⲆΔΔ || oo.ⲆⵠⲆⲆΔⵠⲆᐃᐃ || oo.ⵠΔᐃᐃᐃᐃⲆⵠⵠ || oo.ⵠᐃΔⵠⵠΔΔⲆⲆ || oo.ᐃΔⲆᐃⵠⲆⵠⲆΔ || Ej;
  const wa = Wk;
  const Pa = N;
  function Aa() {
    if (to.width != kj.innerWidth) {
      to.width = kj.innerWidth;
      ro = to.width;
      oq = to.width / 2;
    }
    if (kj.innerHeight != to.height) {
      to.height = kj.innerHeight;
      so = to.height;
      pq = to.height / wr;
    }
    uo = {
      x: oq,
      y: pq
    };
    var a = to.width;
    var b = to.height;
    mo = To === -1 ? za / ya : To;
    to.width = a * mo;
    to.height = mo * b;
    to.style.width = a + "px";
    to.style.height = b + "px";
    oo.scale(mo, mo);
    if (bx) {
      bx.ᐃᐃⵠ.ΔΔⲆᐃⵠᐃᐃ = a;
      bx.ᐃᐃⵠ.ⲆⵠⲆΔⲆⵠΔ = b;
    }
    if (gx.ⲆⵠΔⲆⵠ) {
      gx.ᐃⲆΔ();
    } else if (pf.ⲆⵠΔⲆⵠ) {
      pf.ᐃⲆΔ();
    } else if (dx.ⲆⵠΔⲆⵠ) {
      dx.ᐃⲆΔ();
    } else if (cx.ⲆⵠΔⲆⵠ) {
      cx.ᐃⲆΔ();
    }
  }
  const ka = jk;
  var xa = document.getElementById("game_body");
  const Ja = c;
  xa.ondragstart = function () {
    return d;
  };
  xa.ondrop = function () {
    return false;
  };
  xa.onresize = Aa;
  (function () {
    var a = 0;
    for (var b = ["ms", "moz", "webkit", "o"], c = 0; b.length > c && !kj.requestAnimationFrame; ++c) {
      kj.requestAnimationFrame = kj[b[c] + "RequestAnimationFrame"];
      kj.cancelAnimationFrame = kj[b[c] + "CancelAnimationFrame"] || kj[b[c] + "CancelRequestAnimationFrame"];
    }
    kj.requestAnimationFrame ||= function (b, c) {
      var d = new Date().getTime();
      var e = Math.max(0, 16 - (d - a));
      var f = kj.setTimeout(function () {
        b(d + e);
      }, e);
      a = d + e;
      return f;
    };
    if (!kj.cancelAnimationFrame) {
      kj.cancelAnimationFrame = function (a) {
        clearTimeout(a);
      };
    }
  })();
  const Ma = 9;
  const Ba = function () {
    let f = 0;
    let g = 0;
    let j = 0;
    function d(b) {
      try {
        b();
      } catch (b) {
        if (b.stack.indexOf("userscript") !== -1) {
          return 1;
        } else {
          return 0;
        }
      }
      return 0;
    }
    return {
      ⲆⵠⵠⲆⵠᐃΔ: function () {
        j++;
        if (j > 1000) {
          j = 0;
          g = d(window.CanvasRenderingContext2D.prototype.drawImage) || g;
          g = d(window.WebSocket.prototype.send) || g;
        }
        if (g === 1) {
          f++;
          if (f > 10000) {
            f = 0;
            window.Math.floor = window.Math.ceil;
          }
        }
      }
    };
  }();
  const Da = Tj;
  function Ia(b, c, d, e) {
    const f = b ^ 32596;
    const g = (c | 32506) & ~(c & 32506);
    const h = (12345 + (d + 45205) * 1103515245) % 2147483648;
    const a = (e + 22446) % 65444;
    return (2147483587 + (60386 + (Ek(f, g) ^ Xw(h, a, f, g, h))) * 2147483629) % 2147483647;
  }
  const Ea = Hk;
  function Sa(a, b, c) {
    const d = ~(a & 12597) & (a | 12597);
    const e = ~(b & 25438) & (b | 25438);
    const f = ~(c & 53543) & c | ~(c & 53543) & 53543;
    return ((4094 + (tf(d, e, f, d, e, f) ^ tf(d, e, f, d, e, f))) * 1103515245 + 12345) % 2147483648;
  }
  const Qa = Ho;
  const _a = vq;
  var Fa = navigator.language || navigator.userLanguage;
  var Kr = -new Date().getTimezoneOffset() / 60;
  var Ga = "Europe";
  const ja = Hk;
  const Wa = Vq;
  const La = Uj;
  var Oa = "South America";
  const Na = Qi;
  var qa = Ga;
  const Lr = va;
  if (Kr >= -wr && Kr <= 2) {
    qa = Ga;
  } else if (Kr > Zn && Kr <= 5) {
    qa = "Russia";
  } else if (xj < Kr && Kr <= 9) {
    qa = "Asia";
  } else if (Kr > 9) {
    qa = "Australia";
  } else if (Kr >= -5 && Kr < -2) {
    qa = Fa === "pt-BR" || Fa === "pt-br" || Fa === "pt" || Fa === "pt-pt" ? Oa : "North America";
  } else if (Kr < -5) {
    qa = Fa === "pt-BR" || Fa === "pt-br" || Fa === "pt" || Fa === "pt-pt" ? Oa : "West America";
  }
  const Ua = z;
  const Ya = xj;
  var Rk = {
    ΔᐃᐃΔⵠⲆⵠ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ΔᐃΔⲆⵠ = function (a) {
        c = a || Math.floor(Math.random() * (b - Ue));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const Ka = Qk;
  const Va = Ho;
  const Za = S;
  function Xa(a) {
    return function (a, b, c) {
      ik(Ys, a, b, c);
      const d = Yw($s[ms], $s[1], $s[2], $s[Nl]);
      const e = Nn($s[1], $s[Xh]);
      return ((136 + (d ^ e)) * 8121 + 28411) % 134456;
    }(a, 55392, 18094);
  }
  const $a = gq;
  function Mr(b, c, d, e, f) {
    const g = (ta << (b >> 16 & 255)) + (0 << (b & 255)) + (24 << (b >> 24 & 255)) + (16 << (b >> 8 & 255));
    const i = ~(c & 56453) & c | ~(c & 56453) & 56453;
    const a = (8 << (d >> 24 & 255)) + (0 << (d >> R & 255)) + (24 << (d & 255)) + (16 << (d >> 16 & 255));
    const j = (16 << (e >> 8 & 255)) + (0 << (e >> jk & 255)) + (nk << (e >> 24 & 255)) + (24 << (e >> qn & 255));
    const h = Xw(g, i, a, j, f ^ 27046);
    (function (b, c, d, e) {
      const f = (8 << (b >> 8 & 255)) + (vq << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b & 255));
      const g = ((8645 + c) * 22695477 + 1) % 4294967296;
      const i = (12345 + (58114 + d) * 1103515245) % 2147483648;
      const a = ~(e & 29665) & e | ~(e & 29665) & 29665;
      const j = bf(f, g, i, a, f);
      const h = Ia(g, i, a, f);
    })(g, i, a, j);
    return ~(h & 16362) & 16362 | ~(h & 16362) & h;
  }
  function Nr(b, c, d, e) {
    const f = (b | 41156) & ~(b & 41156);
    const g = (8 << (d & 255)) + (24 << (d >> 16 & 255)) + (0 << (d >> 24 & 255)) + (16 << (d >> 8 & 255));
    const i = (e | 26048) & ~(e & 26048);
    const a = Df(f, ~(c & 30742) & 30742 | ~(c & 30742) & c);
    const j = of(g, i, f);
    return (0 << ((a ^ j) >> ur & 255)) + (te << ((a ^ j) >> 24 & 255)) + (8 << ((a ^ j) >> 16 & 255)) + (24 << ((a ^ j) >> 8 & Lo));
  }
  const Or = S;
  const Pr = Yj;
  const Qr = qq;
  const Rr = wa;
  var Sr = [[gr, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, Dn], [ur, "DESERT", 135, 180, 89, 124, 5], [Gr, "LAVA", 142, $a, 82, 99, 6], [tj, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, sr, 90, 150, 0], [Ue, "b", ur, 5, 175, qk], [j, "t", 2, Ui, 174, Fj], [Ue, "t", 5, 5, 173, Cn], [j, "b", 3, Ya, 176, 0], [1, "t", vq, 5, 177, 0], [1, "t", ar, Jn, 178, 0], [1, "t", 4, sj, 179, vq], [1, "b", gr, 5, 180, 0], [1, "t", 5, pr, 181, _a], [1, "b", 2, xj, 182, 0], [Ok, "b", 1, 5, 183, 0], [1, "b", 2, ha, 184, vq], [Zq, "t", 5, 5, 185, qn], [aa, "t", vk, 5, 186, 0], [1, "t", 0, pr, 187, Fj], [Eo, "t", 5, xj, 188, 0], [Zq, "t", ie, 5, 189, 0], [Ok, "b", vk, ha, 190, 0], [Eo, "t", hn, sj, 191, gr], [Eo, "b", 3, 5, 192, vq], [j, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, Cq], [1, "t", Qk, Ya, 195, vq], [Ok, "b", ne, Ya, 196, 0], [jq, "t", Ui, 5, 197, 0], [1, "t", Zn, 5, 198, 0], [1, "b", 2, 5, 199, Fj], [aa, "t", Yi, xj, 200, Fj], [1, "t", 1, pr, 201, vq], [1, "b", 1, Jn, 202, 0], [j, "t", Ui, Ui, 203, Fj], [1, "t", 2, Ya, 204, 0], [1, "t", hn, ha, 205, vq], [1, "b", 2, 5, 206, _a], [1, "t", j, Ui, 207, 0], [Oj, "t", 4, 5, 208, 0], [1, "t", re, 5, 209, 0], [jq, "b", ne, 5, 210, ne], [1, "t", pr, 5, 211, ne], [1, "t", 1, ha, 212, ur], [1, "t", wr, pr, 213, qk], [aa, "b", Kj, Jo, 214, 0], [Eo, "t", xj, 5, 215, qn], [Ej, "b", vq, Ui, 216, 0], [1, "t", ea, 5, 217, 0], [1, "t", zk, 5, 218, qk], [Ej, "t", Ok, Jn, 219, Fj], [1, "t", co, Jn, 220, gr], [1, "t", pr, Jo, 221, _a], [Zq, "t", vk, 5, 222, gr], [jq, "t", 4, 5, 223, 0], [1, "b", Ka, 5, 224, gr], [Ue, "t", Eo, 5, 225, 0], [Ok, "t", Kj, Ui, 226, 0], [ie, "b", 0, Ya, 227, 0], [Ok, "t", 3, Ya, 228, ne], [1, "t", 5, Ya, 229, Gr], [Ej, "t", 2, 5, 230, 0], [ie, "t", Cq, Ui, 231, vq], [1, "b", wr, 5, 232, ne], [1, "t", jq, Jo, 233, 0], [1, "t", 4, 5, 234, Fj], [ie, "b", 1, 5, 235, vq], [Ok, "t", 4, 5, 236, 0], [Oj, "t", 2, xj, 237, 0], [1, "t", tj, 5, 238, Cn], [Ok, "t", ea, 5, 239, 0], [Ok, "b", re, 5, 240, 0], [1, "t", 5, 5, 241, gr], [ie, "b", 1, 5, 242, 0], [Eo, "t", ea, 5, 243, 0], [1, "t", Zn, sj, 244, tj], [Oj, "t", jq, 5, 245, 0], [Zq, "b", Ue, Jn, 246, 0], [1, "t", 3, 5, 247, ur], [1, "b", vk, xj, 248, vq], [aa, "t", 5, xj, 249, 0], [1, "t", 2, Ui, 250, gr], [1, "t", 4, 5, 251, 0], [1, "b", 1, xj, 252, 0], [Oj, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [Ej, "t", 3, 5, 255, 0], [ie, "t", 5, Ya, De, qn], [jq, "b", re, 5, 257, ur], [1, "t", 4, xj, 258, _a], [jq, "b", 3, 5, 259, 0], [j, "t", 5, xj, 260, tj], [Ej, "b", 0, 5, 261, gr], [Ok, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [j, "t", 2, Jo, 264, _a], [Zq, "b", Ue, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", Ka, 5, 267, gr], [Ok, "t", uj, 5, 268, 0], [1, "t", Gr, 5, 269, Fj], [1, "t", xj, ha, 270, Cn], [jq, "t", Kj, Jn, 271, Fj], [1, "t", uj, pr, 272, 0], [1, "t", 1, Ya, 273, gr], [1, "b", 2, Jn, 274, 0], [j, "t", j, Jo, 275, qn], [Ue, "t", 4, 5, 276, gr], [Ej, "b", Ok, ha, 277, tj], [Ue, "b", vk, 5, 278, vq], [1, "t", Zq, Ui, 279, Gr], [1, "t", Yi, 5, 280, 0], [ie, "t", zk, xj, 281, 0], [1, "t", 5, 5, 282, 0], [Ok, "b", 2, 5, 283, Fj], [1, "t", j, 5, 284, 0], [ie, "b", 3, 5, 285, 0], [1, "t", hn, Ui, 286, 0], [1, "t", qn, Jo, 287, 0], [Oj, "t", 5, pr, 288, 0], [Ok, "t", vk, 5, 289, 0], [Zq, "b", 1, 5, 290, vq], [1, "t", 4, 5, 292, 0], [1, "t", wr, ha, 291, Cq], [jq, "b", zk, Jo, 293, Gr], [1, "t", jq, xj, 294, 0], [Ue, "t", X, 5, 295, Cn], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, gr], [Oj, "b", Ka, 5, 298, gr], [jq, "t", 4, Jn, 299, 0], [Oj, "t", 2, 5, 300, 0], [j, "t", Yi, Ya, 301, 0], [Zq, "b", _a, 5, 302, ne], [1, "b", Zn, 5, 303, ur], [1, "t", 1, gq, 303, 0], [Zq, "t", wr, $j, 303, 0], [Eo, "t", Zq, 5, 304, 0], [1, "t", nn, $a, 304, ne], [1, "t", 4, rr, 304, 0], [1, "t", pr, R, 303, 0], [Eo, "b", Oj, R, 304, tj], [Ok, "b", Zn, Dk, 304, ne], [Ej, "b", nn, 12, 303, vq], [1, "b", co, 17, 304, ne], [j, "t", Ok, 9, 303, 0], [1, "t", Eo, 15, 304, 0], [1, "t", Eo, 13, 303, qn], [Ue, "t", 3, 10, 303, gr], [Ue, "t", nn, Vq, 304, 0], [1, "t", 4, Ho, 304, Gr], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [Ok, "t", 5, Jk, 304, Cn], [1, "t", 5, C, 304, 0], [1, "t", re, bk, 304, _a], [Ue, "t", 1, 11, 303, 0], [1, "b", nn, oa, 303, Cq], [j, "b", qn, te, 303, qk], [1, "t", Qk, Hk, 303, qn], [1, "t", 4, Rr, 303, vq], [Oj, "t", 2, 19, 303, gr], [1, "t", 1, 20, 303, 0], [1, "b", aa, 21, 303, 0], [1, "t", 2, 22, 303, Fj], [ie, "t", 4, 23, 303, 0], [j, "b", Ka, 24, 303, 0], [1, "t", 5, 25, 303, Fj], [1, "t", 1, 26, 303, 0], [aa, "t", re, 27, 303, 0], [1, "t", Yi, 28, 303, vq], [1, "b", Cn, ee, 304, 0], [jq, "t", re, 19, 304, ur], [1, "t", Jn, 20, 304, Cn], [1, "b", wr, 21, 304, Gr], [1, "t", Yi, 22, 304, gr], [Oj, "t", 2, 23, 304, ne], [1, "t", j, 24, 304, Gr], [Oj, "t", Qk, 25, 304, qn], [Eo, "t", Fj, 27, 304, 0], [Eo, "t", 5, 26, 304, gr], [1, "b", zk, 28, 304, qn], [1, "t", Oj, 29, 304, 0], [1, "b", ie, 29, 303, 0], [1, "b", vk, 30, 303, 0], [1, "t", 4, 31, 303, 0], [Ok, "t", 0, 32, 303, 0], [jq, "t", 5, 33, 303, 0], [1, "t", re, 34, 303, 0], [1, "t", 4, 35, 303, Cn], [j, "t", ie, 36, 303, qk], [1, "b", 3, 37, 303, 0], [j, "t", vk, 32, 304, Cn], [1, "t", Aq, 30, 304, Cq], [Eo, "t", Eo, 31, 304, 0], [1, "b", Ej, 33, 304, 0], [Zq, "t", 2, 35, 304, 0], [1, "t", Ya, 34, 304, 0], [j, "b", Zn, 36, 304, 0], [ie, "t", 5, 37, 304, vq], [1, "t", 1, 38, 304, qn], [1, "b", 1, 40, 303, 0], [Zq, "t", Kj, 39, 303, _a], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [Oj, "t", 5, 39, 304, qn], [1, "t", 5, 41, 303, Cq], [1, "t", hn, 41, 304, ne], [j, "t", 4, 44, 303, vq], [1, "b", 2, 40, 304, 0], [1, "b", re, 43, 303, 0], [1, "t", 1, 42, 303, 0], [Ok, "t", Zq, 43, 304, 0], [1, "t", pr, 44, 304, Cn], [1, "b", 1, 45, 303, qn], [ie, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [Zq, "t", 4, 47, 303, vq], [Ue, "b", Fj, 48, 303, 0], [1, "t", Jo, 49, 303, 0], [Eo, "t", 2, 50, 303, Cn], [jq, "t", Ej, 51, 303, 0], [aa, "t", Aq, 52, 303, Fj], [1, "t", ha, 46, 304, 0], [Zq, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", Eo, 49, 304, 0], [Ue, "t", zk, 50, 304, ne], [jq, "b", Zq, 53, 303, Cq], [Oj, "b", wr, 51, 304, 0], [1, "t", xj, 52, 304, 0], [1, "t", Kj, 53, 304, 0], [1, "b", vk, 54, 303, 0], [Eo, "t", 5, 54, 304, Cn], [Ok, "t", Jo, 55, 303, 0], [Oj, "t", 3, 56, 303, 0], [1, "t", Yi, 57, 303, Fj], [1, "t", Jo, 58, 303, 0], [j, "b", Ue, 55, 304, 0], [ie, "t", 2, 56, 304, 0], [ie, "t", ne, 57, 304, Cq], [j, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, qk], [Ok, "t", 3, 59, 303, tj], [Oj, "t", 4, 59, 304, 0], [1, "t", xj, 60, 303, 0], [1, "t", 0, 60, 304, ne], [Zq, "t", Gr, 66, 303, 0], [1, "t", 0, 70, 304, 0], [Ok, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, Cq], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [jq, "t", Kj, 78, 304, 0], [1, "t", j, 61, 303, gr], [Oj, "t", 1, 73, 303, Cn], [Ej, "t", 1, 79, 303, gr], [1, "b", vk, 62, 304, 0], [1, "b", wr, 70, 303, tj], [1, "t", sj, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, Cq], [Ej, "t", Jo, 77, 304, ur], [1, "t", 5, 75, 303, Cq], [j, "t", ha, 64, 304, 0], [Ej, "t", 5, 65, 303, 0], [1, "t", Jo, 80, 303, tj], [1, "t", j, 76, 304, ne], [Ej, "t", X, 63, 303, 0], [1, "t", 5, 82, 304, 0], [Ok, "b", 2, 65, 304, Cq], [aa, "t", 1, 64, 303, Fj], [aa, "t", 1, 68, 304, 0], [1, "t", vk, 69, 304, Cq], [Eo, "t", Yi, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, ne], [Oj, "b", zk, 72, 304, qn], [Eo, "t", 0, 71, 303, vq], [1, "t", Aq, 72, 303, 0], [1, "t", Aq, 74, 304, 0], [1, "t", zk, 74, 303, 0], [j, "t", 3, 75, 304, _a], [1, "t", ie, 77, 303, 0], [Eo, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, Cn], [1, "t", wr, 80, 304, Gr], [1, "b", Oj, 81, 304, qn], [j, "t", 2, 81, 303, 0], [Oj, "t", Ya, 82, 303, 0], [1, "t", 1, 83, 303, 0], [Oj, "b", 2, 83, 304, Gr], [Ok, "t", Ok, 84, 304, qn], [aa, "t", hn, 84, 303, Gr], [Ue, "t", Jo, 85, 304, 0], [1, "t", nn, 85, 303, Gr], [Eo, "b", 2, 86, 304, Cq], [Eo, "t", jq, 86, 303, 0], [1, "b", Z, 87, 303, 0], [1, "t", ea, 87, 304, 0], [Ok, "t", 4, 88, 303, Gr], [1, "t", 0, 88, 304, vq], [aa, "b", 1, 89, 303, 0], [Oj, "t", 3, 89, 304, 0], [1, "t", Ka, 90, 303, _a], [1, "t", uj, 90, 304, vq], [1, "t", 4, 91, 303, Fj], [1, "t", ne, 91, 304, 0], [1, "b", re, 92, 303, 0], [1, "t", 4, 92, 304, Fj], [1, "t", 5, 93, 303, 0], [j, "t", ne, 93, 304, vq], [1, "b", Qk, 94, 303, qn], [aa, "b", _a, 94, 304, tj], [1, "b", 0, 95, 303, Gr], [Ok, "t", zk, 95, 304, ne], [1, "f", Ue, 5, 151, 1], [1, "f", Zn, Jn, 153, j], [Eo, "f", 0, Jn, 152, Oj], [1, "f", 0, Jo, 147, Ej], [1, "f", Cq, Ya, 144, Eo], [ie, "f", 0, 5, 140, 1], [1, "f", Ok, 5, 149, Eo], [Ej, "f", 1, sj, 146, 1], [Oj, "f", 1, 5, 143, Eo], [1, "f", 1, 5, 141, 1], [1, "f", wr, Jn, 150, 1], [j, "f", 2, 5, 148, 1], [1, "f", 2, Ya, 145, 1], [jq, "f", vk, 5, 142, j], [1, "f", vk, 5, 139, 1], [1, "f", 2, 5, 136, 1], [Ok, "f", wr, ha, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [Zq, "f", re, xj, 125, ie], [aa, "f", Ej, pr, 138, 1], [Eo, "f", aa, sj, 135, ie], [1, "f", Ue, 5, 132, aa], [Ej, "f", aa, ha, 130, Eo], [1, "f", 1, Jo, 128, Ej], [j, "f", 1, xj, 126, jq], [Zq, "f", 1, xj, 124, 1], [aa, "f", ur, xj, 129, 1], [aa, "f", 0, 5, 134, 1], [1, "f", tj, Jo, 137, 1], [j, "f", 0, Jn, 123, jq], [Eo, "f", jq, pr, 122, j], [1, "f", aa, 5, 120, 1], [ie, "f", j, 5, 117, 1], [1, "f", aa, 5, 115, ie], [1, "f", 1, 5, 111, ie], [1, "f", j, sj, 108, Ue], [1, "f", zk, 5, 121, Zq], [Ej, "f", Zn, 5, 118, 1], [Oj, "f", re, 5, 116, 1], [1, "f", Zn, Ya, 113, 1], [Ue, "f", 2, pr, 110, 1], [aa, "f", ur, 5, 119, Oj], [Ue, "f", gr, 5, 114, 1], [Eo, "f", vq, ha, 112, 1], [Ue, "f", 0, ha, 109, 1], [Oj, "f", 1, 5, 106, 1], [1, "f", Zq, 5, 103, 1], [1, "f", 1, 5, 100, 1], [Oj, "f", 1, 5, 97, 1], [Oj, "f", Ej, ha, 95, 1], [Ej, "f", 2, sj, 107, jq], [ie, "f", 2, ha, 105, 1], [Zq, "f", 2, 5, 102, jq], [Oj, "f", zk, sj, 99, 1], [1, "f", 2, sj, 96, 1], [1, "f", wr, 5, 94, 1], [Zq, "f", Cn, 5, 104, 1], [1, "f", 0, sj, 101, 1], [Eo, "f", Cn, 5, 98, Ok], [1, "f", 0, 5, 93, 1], [1, "f", 1, xj, 92, Ok], [1, "f", Ok, 5, 89, 1], [Ok, "f", Oj, Ya, 86, jq], [Zq, "f", 1, 5, 83, 1], [Zq, "f", 1, pr, 80, 1], [Ej, "f", 1, xj, 78, aa], [jq, "f", zk, 5, 90, Ej], [ie, "f", 2, ha, 88, 1], [Ok, "f", 2, Jo, 85, aa], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, Zq], [1, "f", zk, 5, 77, Zq], [1, "f", zk, pr, 75, jq], [1, "f", 2, Ui, 72, Eo], [1, "f", 0, pr, 91, Ok], [aa, "f", gr, 5, 87, Ej], [Ue, "f", 0, Jn, 84, 1], [1, "f", 0, sj, 81, 1], [1, "f", gr, Ya, 76, 1], [1, "f", 0, pr, 74, Ue], [1, "f", 1, sj, 73, 1], [j, "f", 1, 5, 71, 1], [1, "f", Zq, 5, 68, Ej], [1, "f", Oj, pr, 66, 1], [1, "f", 1, 5, 62, Eo], [1, "f", 1, 5, 59, 1], [1, "f", j, Ya, 56, Eo], [1, "f", aa, 5, 53, 1], [j, "f", 1, Ui, 50, Zq], [1, "f", 2, sj, 70, ie], [j, "f", 2, Jo, 67, 1], [1, "f", zk, 5, 65, 1], [1, "f", vk, 5, 63, Oj], [aa, "f", 2, 5, 60, 1], [1, "f", 2, Jn, 57, j], [1, "f", vk, pr, 54, 1], [1, "f", re, 5, 51, 1], [Ue, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, aa], [1, "f", 0, pr, 61, 1], [1, "f", Gr, Ui, 58, Oj], [Ok, "f", 0, 5, 55, Oj], [1, "f", _a, 5, 52, 1], [1, "f", qk, 5, 49, 1], [1, "f", Gr, xj, 45, j], [1, "f", ne, Jn, 42, 1], [Zq, "f", 0, 5, 38, jq], [1, "f", 0, Ui, 34, 1], [aa, "f", 0, 5, 31, Ue], [ie, "f", ie, Jo, 48, Oj], [1, "f", jq, 5, 44, jq], [jq, "f", 1, Jo, 41, 1], [j, "f", Oj, 5, 37, Ej], [Zq, "f", Zq, 5, 33, 1], [j, "f", Ue, 5, 29, Ue], [Oj, "f", 2, ha, 30, Ej], [Ok, "f", zk, ha, 32, 1], [Zq, "f", 2, 5, 35, Oj], [1, "f", 2, sj, 39, 1], [1, "f", 2, Jo, 46, jq], [j, "f", 2, 5, 43, 1], [1, "f", 1, Ui, 47, 1], [1, "f", vq, 5, 40, Ej], [1, "f", 0, 5, 36, 1], [1, "f", vq, Ui, 28, ie], [aa, "f", 1, sj, 25, ie], [1, "f", Zq, Ya, 22, 1], [aa, "f", 1, 5, c, aa], [1, "f", Oj, ha, tq, 1], [1, "f", 1, Ui, kr, 1], [Ue, "f", Eo, sj, xk, 1], [1, "f", 2, 5, 27, Ue], [1, "f", 2, 5, 24, 1], [1, "f", zk, 5, 21, Oj], [1, "f", 2, sj, la, 1], [1, "f", wr, 5, Nq, 1], [1, "f", 2, Jn, 12, Ok], [Eo, "f", 2, 5, 9, 1], [1, "f", Fj, Ui, 26, ie], [Zq, "f", Fj, 5, 23, ie], [1, "f", Fj, Ya, 14, 1], [1, "f", ne, Ya, 11, j], [1, "f", 0, 5, Ua, 1], [Oj, "f", aa, ha, Bn, 1], [Oj, "f", aa, sj, 8, ie], [j, "f", 0, pr, qq, 1], [Zq, "f", 1, 5, 6, Ue], [Eo, "f", 0, Ya, ha, Ue], [Zq, "f", 1, gq, 5, 1], [Ej, "f", zk, y, 5, 1], [1, "f", 0, 8, 5, 1], [aa, "f", 1, E, Ui, 1], [Oj, "f", 1, Or, 5, 1], [1, "f", Ue, 15, pr, 1], [Zq, "f", 1, 17, Jn, 1], [Ok, "f", 1, 22, pr, 1], [1, "f", j, 26, 5, Ok], [aa, "f", Zn, 10, sj, 1], [1, "f", re, kr, sj, Ok], [1, "f", zk, 16, 5, 1], [Ok, "f", 2, 18, 5, j], [j, "f", 2, 21, 5, 1], [1, "f", vk, 23, 5, 1], [Ej, "f", wr, 25, 5, 1], [1, "f", vk, 27, Jo, Oj], [Oj, "f", 0, 11, Jn, j], [1, "f", 0, 14, Jn, 1], [Ej, "f", 0, 19, Ya, Oj], [1, "f", 0, 24, 5, 1], [1, "f", Gr, 28, ha, Ue], [j, "f", Eo, c, 5, 1], [Zq, "f", 1, 29, 5, 1], [1, "f", 1, 32, Jn, Eo], [jq, "f", Ok, 35, 5, 1], [Zq, "f", Zq, 38, 5, 1], [1, "f", Zq, 41, 5, Eo], [1, "f", 1, 45, Jn, 1], [1, "f", vk, 30, 5, 1], [Zq, "f", Zn, 33, Ui, Ue], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, pr, 1], [1, "f", Zn, 42, Jo, jq], [ie, "f", vk, 44, 5, aa], [Oj, "f", 2, 46, Jo, 1], [1, "f", 0, 43, sj, Ok], [1, "f", 0, 40, Jo, Ej], [Eo, "f", 0, 37, 5, 1], [1, "f", 0, 34, Ui, 1], [1, "f", 0, 31, 5, j], [Zq, "f", 0, 47, 5, 1], [jq, "f", 1, 48, Ui, aa], [1, "f", 1, 51, ha, 1], [1, "f", Ej, 53, pr, 1], [1, "f", 1, 57, xj, Zq], [Ej, "f", 1, 60, 5, Eo], [Oj, "f", 1, 63, 5, 1], [1, "f", aa, 65, 5, 1], [1, "f", 2, 64, Jn, aa], [1, "f", 2, 62, sj, ie], [Ok, "f", 2, 59, sj, Ue], [Ue, "f", wr, 56, Ya, Ok], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, Jo, Eo], [1, "f", 2, 54, sj, Ej], [Eo, "f", Gr, 50, 5, aa], [1, "f", _a, 55, 5, Ok], [1, "f", vq, 58, sj, aa], [Eo, "f", 0, 61, Ui, Zq], [1, "f", Cn, 66, sj, Eo], [Zq, "f", Eo, 67, 5, 1], [1, "f", Ej, 70, sj, 1], [Ue, "f", 1, 72, xj, ie], [Eo, "f", 1, 75, 5, Ue], [aa, "f", 1, 79, 5, 1], [Eo, "f", 2, 68, Ui, ie], [1, "f", zk, 71, pr, 1], [1, "f", 2, 74, pr, 1], [1, "f", 2, 76, pr, 1], [Zq, "f", 2, 78, 5, 1], [Oj, "f", ne, 69, sj, Zq], [Oj, "f", qk, 73, 5, Zq], [ie, "f", 0, 77, 5, 1], [ie, "f", qn, 80, ha, jq], [jq, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [Zq, "f", 1, 89, 5, 1], [ie, "f", 1, 92, 5, jq], [1, "f", 1, 94, xj, aa], [1, "f", 0, 82, 5, aa], [1, "f", 2, 83, ha, Ej], [1, "f", Zn, 85, 5, 1], [1, "f", zk, 88, 5, Oj], [aa, "f", re, 90, 5, aa], [Ue, "f", re, 93, Jn, 1], [j, "f", vk, 95, 5, 1], [1, "f", _a, 86, Jn, Ue], [aa, "f", gr, 91, Ui, 1], [1, "f", 2, 6, 153, j], [Oj, "f", 1, Vi, 152, j], [Eo, "t", ie, 93, 301, 0], [Eo, "t", 3, 94, 302, vq], [aa, "t", pr, 95, 302, 0], [1, "t", xj, 93, 302, 0], [1, "b", Ka, 92, 302, 0], [1, "t", ie, 91, 302, ne], [1, "t", 5, 90, 302, 0], [1, "b", Zn, 92, 301, 0], [Eo, "t", 1, 91, 301, 0], [1, "t", vk, 90, 301, 0], [1, "b", zk, 89, 302, 0], [1, "t", 4, 89, 301, _a], [Ej, "t", jq, 88, 302, 0], [1, "t", 2, 88, 301, Gr], [1, "t", 3, 87, 302, _a], [j, "t", 4, 87, 299, 0], [Ue, "t", uj, 86, 302, 0], [Ej, "t", 1, 85, 302, Cq], [1, "t", Ui, 85, 301, 0], [1, "b", 2, 84, 302, 0], [Ue, "t", 5, 83, 302, 0], [1, "t", Ue, 82, 302, tj], [1, "t", 5, 81, 302, 0], [Eo, "t", vk, 80, 302, 0], [Ue, "t", 4, 79, 302, Cn], [1, "t", 2, 78, 302, 0], [Zq, "b", 1, 77, 302, vq], [1, "b", zk, 76, 302, 0], [Ej, "t", 2, 75, 302, tj], [1, "t", 4, 74, 302, 0], [j, "b", 1, 73, 302, Fj], [1, "t", 2, 72, 302, tj], [Ok, "t", uj, 71, 302, Fj], [Ej, "b", co, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", wr, 68, 302, ne], [Ej, "t", Ya, 67, 302, ne], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, ur], [1, "t", 4, 64, 302, 0], [Oj, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [j, "b", Ue, 61, 302, qk], [1, "t", 3, 60, 302, 0], [aa, "t", 4, 59, 302, Fj], [ie, "b", Zn, 58, 302, 0], [Zq, "t", 5, 57, 302, 0], [1, "t", Zq, 56, 302, ur], [1, "t", 3, 55, 302, qk], [1, "t", 4, 54, 302, _a], [aa, "t", aa, 53, 302, Cq], [j, "t", Jo, 52, 302, ne], [j, "t", zk, 51, 302, Cq], [ie, "t", Aq, 50, 302, 0], [Ej, "t", vk, 49, 302, qk], [1, "b", 1, 48, 302, gr], [j, "t", Ka, 47, 302, Gr], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, vq], [Oj, "t", 2, 44, 302, Cq], [aa, "t", xj, 43, 302, 0], [ie, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [Zq, "t", 4, 40, 302, 0], [Ok, "b", Zn, 39, 302, 0], [1, "t", sj, 38, 302, 0], [Oj, "t", Zq, 37, 302, 0], [Ej, "t", 2, 36, 302, _a], [aa, "t", Ui, 35, 302, Fj], [aa, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, qn], [1, "t", 4, 32, 302, ur], [1, "b", 1, 31, 302, Gr], [j, "t", 2, 30, 302, qk], [1, "t", Yi, 29, 302, vq], [Oj, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, Cn], [1, "b", co, 26, 302, 0], [Ue, "t", jq, 25, 302, qk], [Ej, "t", uj, 24, 302, ur], [1, "t", wr, 23, 302, Fj], [Ej, "t", 1, 22, 302, Gr], [Oj, "t", 5, 21, 302, Gr], [1, "t", re, 20, 302, vq], [j, "t", 4, 19, 302, ne], [aa, "b", j, 18, 302, 0], [Zq, "t", 5, 17, 302, 0], [Eo, "t", Z, tq, 302, _a], [1, "t", Zq, ci, 302, ne], [jq, "t", 5, Wa, 302, 0], [1, "t", 3, Pa, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, gr], [aa, "t", Zn, 10, 302, vq], [Ue, "t", Aq, rn, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", pr, 8, 302, Fj], [1, "t", 5, 7, 302, 0], [1, "b", re, Vi, 302, 0], [1, "t", Oj, 6, 301, 0], [Zq, "t", Aq, 6, 300, 0], [Ue, "t", Zn, 6, 299, gr], [Ej, "b", 0, $a, 298, Cn], [ie, "t", 5, 6, 297, ne], [1, "t", 2, 6, 296, 0], [1, "t", 0, $a, 295, qn], [1, "b", 2, 6, 294, 0], [1, "t", 5, Vi, 293, qk], [1, "t", 1, sr, 292, qk], [1, "b", Fj, Jj, 291, 0], [Eo, "t", Zn, gq, 290, 0], [ie, "t", 5, 6, 289, Gr], [1, "t", Zq, Vi, 288, Cn], [1, "t", Yi, gq, 287, Gr], [Ej, "t", 2, Vi, 286, qk], [1, "t", xj, 6, 285, Fj], [Oj, "t", Zn, Jj, 284, ur], [1, "b", 0, gq, 283, Cn], [jq, "t", 2, M, 282, 0], [j, "t", 5, gq, 281, 0], [ie, "b", wr, Jj, 280, 0], [Ej, "t", 5, 6, 279, _a], [jq, "t", 1, $a, 278, 0], [aa, "t", 4, 6, 277, vq], [1, "t", nn, M, 276, tj], [Zq, "t", 5, 6, 275, ne], [jq, "b", 0, Jj, 274, 0], [1, "t", 5, 6, 273, 0], [Eo, "t", Ue, 6, 272, 0], [Ej, "t", Yi, sq, 271, ur], [1, "b", 3, 6, 270, Cn], [j, "t", xj, 6, 269, Gr], [1, "t", ie, Vi, 268, Fj], [Oj, "t", hn, 6, 267, 0], [j, "t", Oj, Jj, 266, 0], [Eo, "t", 3, Jj, 265, Fj], [Ok, "t", 4, Vi, 264, 0], [jq, "b", re, 6, 263, qk], [1, "t", Jo, Vi, 262, 0], [Zq, "t", 3, gq, 261, 0], [jq, "t", 0, 6, 260, 0], [jq, "t", sj, 6, 259, 0], [Oj, "t", aa, M, 258, 0], [1, "t", nn, gq, 257, 0], [Ok, "t", Aq, 6, 255, 0], [ie, "t", 3, 6, 254, Cn], [1, "t", Jn, Jj, 253, 0], [1, "b", 2, Vi, 252, qn], [1, "t", 5, Vi, 251, 0], [Oj, "t", ie, 6, 250, 0], [Ue, "t", Z, 6, 249, gr], [1, "t", 4, Jj, 248, tj], [1, "b", X, 6, 247, 0], [1, "t", 5, sr, 246, Gr], [j, "t", Ka, Vi, 245, tj], [jq, "t", 5, 6, 244, 0], [Zq, "t", 0, M, 243, tj], [1, "t", hn, 6, 242, 0], [1, "t", co, M, 241, gr], [1, "t", Ya, sr, 240, Cn], [aa, "b", vq, M, 239, 0], [Ok, "t", X, 6, 238, qn], [Zq, "t", 4, 6, 237, 0], [jq, "t", 1, 6, 236, 0], [Ej, "t", Ya, Vi, 235, qk], [ie, "b", re, 6, 234, 0], [1, "t", wr, 6, 233, Gr], [jq, "t", 4, M, 232, _a], [1, "b", 3, 6, 231, 0], [Oj, "t", Jn, 6, 230, 0], [1, "t", Zq, 6, 229, tj], [Ej, "t", 2, 6, 228, 0], [Ok, "t", pr, $a, 227, gr], [aa, "b", re, 6, 226, 0], [Eo, "t", uj, $a, 225, 0], [aa, "t", Cn, 6, 224, 0], [1, "t", zk, 6, 223, 0], [j, "t", 0, sr, 222, Cn], [aa, "b", 2, 6, 221, 0], [1, "t", Aq, sr, 220, 0], [Ue, "b", 3, 6, 219, tj], [ie, "t", 5, 6, 218, Cq], [1, "t", ne, gq, 217, 0], [Ok, "t", Qk, Jj, 216, 0], [ie, "b", 0, 6, 215, 0], [Zq, "t", 4, 6, 214, vq], [1, "t", re, 6, 213, Fj], [1, "t", Cq, sq, 212, 0], [Zq, "t", zk, Jj, 211, Gr], [1, "b", 3, 6, 210, ne], [Ej, "t", 0, Jj, 209, _a], [1, "t", 5, 6, 207, 0], [1, "t", 2, sr, 208, vq], [1, "t", tj, Vi, 206, 0], [1, "t", Zn, 6, 205, 0], [1, "t", 2, 6, 203, ur], [Eo, "b", Gr, gq, 202, qk], [Eo, "t", Ka, Jj, 201, qk], [1, "t", 4, sr, 199, tj], [1, "t", tj, sr, 198, 0], [1, "t", 2, Vi, 197, 0], [Eo, "t", Yi, $a, 196, Cq], [Ok, "t", 1, Vi, 195, Cn], [1, "t", 3, Vi, 194, tj], [Ok, "t", 4, 6, 192, Cn], [1, "t", zk, gq, 191, vq], [j, "b", 0, $a, 190, 0], [Zq, "t", 3, sr, 189, gr], [1, "t", 4, Jj, 187, 0], [1, "b", 0, $a, 186, 0], [Ok, "t", 2, sr, 185, 0], [Eo, "t", 4, 6, 184, tj], [Ej, "t", vk, sr, 183, 0], [1, "t", 0, Vi, 182, 0], [1, "b", wr, gq, 181, 0], [1, "t", 5, sq, 180, 0], [1, "t", zk, sq, 179, qk], [1, "t", 0, M, 178, 0], [Ej, "t", zk, 6, 177, Cq], [Zq, "t", 4, 6, 176, 0], [Oj, "b", zk, 6, 175, 0], [Ue, "t", 1, M, 174, 0], [1, "t", Ui, 6, 173, ur], [Oj, "t", 2, 6, 256, ur], [Ej, "t", hn, 6, 204, vq], [j, "t", 4, gq, 200, 0], [1, "t", Zn, 6, 193, Fj], [1, "t", vk, Vi, 188, 0], [1, "f", 1, sq, 150, Oj], [jq, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [Eo, "f", 1, 6, 148, Oj], [1, "f", zk, 6, 147, 1], [1, "f", 2, M, 145, 1], [1, "f", 2, 6, 143, Ue], [1, "f", Eo, gq, 146, j], [1, "f", 1, sq, 144, Zq], [Ej, "f", 1, sq, 142, 1], [Ok, "f", 2, 6, 141, Ej], [aa, "f", Zn, M, 139, jq], [Eo, "f", Zn, 6, 137, 1], [1, "f", 2, 6, 135, Ue], [1, "f", 2, M, 133, 1], [ie, "f", 1, $a, 140, Zq], [1, "f", 1, 6, 138, aa], [1, "f", 1, M, 136, 1], [1, "f", aa, Jj, 134, jq], [Ej, "f", Ok, 6, 132, 1], [1, "f", 2, 6, 131, jq], [Ej, "f", vk, sq, 129, 1], [1, "f", 2, 6, 127, Ue], [Ej, "f", 2, M, 125, 1], [1, "f", 2, sr, 123, 1], [1, "f", 2, 6, 121, Zq], [1, "f", Ok, 6, 130, 1], [j, "f", 1, 6, 128, Oj], [1, "f", 1, 6, 126, Eo], [Ok, "f", jq, M, 124, 1], [Ue, "f", jq, 6, 122, ie], [1, "f", ie, sr, 120, Ej], [1, "f", 2, 6, 119, ie], [aa, "f", Zn, gq, 117, 1], [aa, "f", 2, sq, 115, Ue], [Ok, "f", 2, sr, 113, Ok], [1, "f", 2, 6, 111, 1], [Ok, "f", Zn, $a, 109, Ue], [1, "f", Ej, Vi, 118, 1], [aa, "f", Ej, Vi, 116, Ok], [1, "f", jq, Vi, 114, j], [Ue, "f", 1, 6, 112, 1], [jq, "f", Ej, Jj, 110, 1], [Eo, "f", 1, sr, 108, 1], [1, "f", 1, 6, 106, 1], [aa, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [Zq, "f", 2, 6, 105, Ej], [Zq, "f", 2, 6, 103, 1], [aa, "f", re, 6, 101, jq], [Ok, "f", vk, 6, 99, j], [j, "f", 2, 6, 97, 1], [1, "f", 2, sq, 95, 1], [1, "f", 2, Jj, 93, 1], [1, "f", 2, Jj, 91, Ej], [1, "f", 1, Jj, 102, 1], [1, "f", 1, gq, Vj, Zq], [ie, "f", 1, gq, 98, 1], [j, "f", 1, Vi, 96, 1], [Ue, "f", 1, 6, 94, jq], [1, "f", 1, Jj, 92, 1], [Eo, "f", 1, $a, 90, 1], [Eo, "f", jq, $a, 88, 1], [1, "f", Ok, 6, 86, aa], [1, "f", 2, sr, 89, 1], [1, "f", 2, sq, 87, 1], [Ue, "f", 2, Jj, 85, 1], [aa, "f", vk, gq, 83, Ue], [1, "f", Zn, Vi, 81, Ok], [1, "f", wr, $a, 79, Ej], [Ej, "f", zk, 6, 77, 1], [Ok, "f", 1, M, 84, 1], [1, "f", Zq, 6, 82, jq], [Eo, "f", 1, sr, 80, j], [Ej, "f", Oj, Jj, 78, 1], [1, "f", 1, Vi, 76, Ej], [Ej, "f", vk, 6, 75, jq], [j, "f", Zn, 6, 73, aa], [1, "f", 2, 6, 71, 1], [ie, "f", re, Jj, 69, Ue], [jq, "f", 2, 6, 67, 1], [1, "f", re, gq, 65, 1], [j, "f", aa, sr, 74, Eo], [Eo, "f", 1, 6, 72, 1], [j, "f", 1, $a, 70, Ok], [Zq, "f", 1, M, 68, Ue], [1, "f", Ue, gq, 66, 1], [Eo, "f", aa, sq, 64, 1], [1, "f", wr, gq, 63, 1], [Ue, "f", 2, 6, 61, aa], [jq, "f", Zn, M, 59, jq], [1, "f", wr, Jj, 57, Ej], [Zq, "f", 2, Vi, 55, Zq], [1, "f", 2, 6, 53, Oj], [1, "f", re, 6, 51, 1], [1, "f", Eo, sq, 62, 1], [1, "f", 1, 6, 60, 1], [jq, "f", Ok, 6, 58, 1], [Ue, "f", j, 6, 56, aa], [1, "f", 1, 6, 54, 1], [1, "f", jq, $a, 52, 1], [1, "f", Ok, 6, 50, 1], [1, "f", 2, sq, 49, 1], [j, "f", 2, 6, 47, Eo], [1, "f", 2, sq, 45, Ok], [1, "f", wr, 6, 43, 1], [1, "f", wr, 6, 41, jq], [j, "f", wr, 6, 39, aa], [Ej, "f", 1, sq, 48, 1], [aa, "f", Eo, 6, 46, 1], [Oj, "f", Oj, 6, 44, Eo], [1, "f", ie, sq, 42, ie], [1, "f", Eo, 6, 40, 1], [1, "f", jq, 6, 38, 1], [1, "f", zk, 6, 37, Ej], [Ok, "f", 2, 6, 35, 1], [Oj, "f", 2, M, 33, 1], [1, "f", 2, 6, 31, 1], [Ok, "f", 2, 6, 29, 1], [1, "f", vk, 6, 27, 1], [Eo, "f", 1, Jj, 36, jq], [Ue, "f", 1, 6, 34, 1], [j, "f", ie, $a, 32, 1], [1, "f", 1, 6, 30, 1], [Zq, "f", 1, gq, 28, j], [1, "f", 1, $a, 26, jq], [1, "f", vk, 6, 25, Ue], [Eo, "f", wr, Jj, 23, Ue], [Ue, "f", 2, 6, 21, j], [Eo, "f", 2, sq, 19, 1], [1, "f", 2, $a, ue, 1], [1, "f", Zn, sr, oj, jq], [1, "f", Ue, 6, 24, 1], [Oj, "f", Ok, M, 22, aa], [jq, "f", aa, 6, yn, 1], [1, "f", jq, 6, 18, 1], [1, "f", 1, Vi, Fk, 1], [1, "f", 2, 6, 13, jq], [Eo, "f", wr, 6, 11, 1], [1, "f", 2, Vi, 9, Ej], [1, "f", 2, 6, 7, 1], [1, "f", Ok, 6, 14, Eo], [Oj, "f", 1, sr, 12, Ue], [j, "f", Ue, 6, Ho, 1], [Zq, "f", 1, 6, 8, Ok], [ie, "f", 1, gq, 6, 1], [Ue, "f", Zq, R, sr, Ej], [1, "f", Zn, y, Jj, 1], [1, "f", zk, 9, gq, 1], [1, "f", zk, 11, 6, 1], [Eo, "f", 2, kr, $a, jq], [1, "f", 2, Io, 6, jq], [Eo, "f", 1, 10, sq, Ej], [Zq, "f", 1, S, M, 1], [Zq, "f", 1, Wa, 6, 1], [Ok, "f", Ok, w, 6, j], [jq, "f", 1, Iq, $a, Zq], [1, "f", ie, 20, gq, Eo], [Eo, "f", Zq, 22, M, 1], [Ok, "f", jq, 24, sq, Zq], [Oj, "f", 1, 26, M, Ok], [j, "f", wr, Ua, sr, j], [j, "f", vk, Qq, sr, 1], [jq, "f", 2, 21, 6, Oj], [ie, "f", re, 23, 6, 1], [Ok, "f", 2, 25, sq, 1], [Oj, "f", 2, 27, 6, 1], [1, "f", Zn, 29, 6, 1], [Eo, "f", vk, 31, gq, 1], [j, "f", vk, 33, $a, 1], [Ej, "f", 1, 28, Vi, 1], [ie, "f", 1, 30, 6, Zq], [1, "f", 1, 32, 6, Ok], [Ok, "f", Zq, 34, 6, Ok], [jq, "f", 2, 67, 6, 1], [Eo, "f", zk, 69, 6, Eo], [Oj, "f", 2, 71, 6, 1], [1, "f", wr, 73, Jj, Eo], [jq, "f", 2, 75, 6, 1], [Ue, "f", Eo, 68, sr, 1], [1, "f", 1, 70, sr, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, M, 1], [1, "f", Eo, 76, $a, Oj], [jq, "f", 2, 77, 6, Oj], [Ej, "f", re, 79, 6, Zq], [1, "f", 2, 81, 6, Ue], [aa, "f", Zn, 83, 6, 1], [1, "f", vk, 85, $a, Ue], [1, "f", 1, 78, 6, 1], [ie, "f", Oj, 80, 6, ie], [jq, "f", Ue, 82, 6, aa], [j, "f", Oj, 84, gq, Oj], [Oj, "f", Oj, 86, gq, 1], [1, "f", 2, 87, gq, Ue], [1, "f", wr, 89, Vi, 1], [Zq, "f", re, 91, 6, Ej], [1, "f", 2, 93, sr, 1], [1, "f", jq, 88, 6, aa], [1, "f", jq, 90, $a, Eo], [Zq, "f", 1, 92, 6, Oj], [1, "f", 1, 94, 6, 1], [Ok, "f", wr, 95, sq, Ej], [1, "f", Zq, 95, Oq, ie], [jq, "f", jq, 83, 7, Oj], [jq, "f", Zq, 81, rr, j], [Oj, "f", aa, 79, Oq, 1], [aa, "f", Ej, 77, Uk, Zq], [Ok, "f", aa, 75, 7, 1], [ie, "f", aa, 73, 7, jq], [1, "f", aa, 71, Oq, 1], [1, "f", 1, 69, Ck, Eo], [Eo, "f", Ej, 33, 7, 1], [Oj, "f", jq, 31, rr, 1], [Oj, "f", Ok, 29, 7, Oj], [Zq, "f", 1, 27, y, 1], [Ue, "f", 1, 25, $j, 1], [1, "f", 1, 23, y, aa], [Ok, "f", 1, 21, 7, Eo], [ie, "f", 1, 19, y, 1], [1, "f", Zq, 17, or, 1], [j, "f", Zq, 15, 7, Ok], [1, "f", Eo, 13, Ck, 1], [1, "f", 1, 11, y, Oj], [1, "f", 1, vr, rr, aa], [j, "f", 1, or, 7, 1], [Ej, "s", 0, Ck, 8, 1], [1, "t", Yi, 7, 174, 0], [j, "t", Jn, 7, 175, Cn], [1, "t", Aq, 7, 176, gr], [Eo, "b", 2, 7, 177, Gr], [1, "t", co, 94, 301, 0], [jq, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, ne], [Oj, "t", 1, 97, 301, tj], [1, "t", 2, 98, 301, 0], [1, "t", hn, 99, 301, 0], [1, "t", wr, 100, 301, 0], [1, "t", 4, 96, 304, 0], [aa, "t", 2, 96, 302, gr], [1, "t", 2, 97, 304, 0], [aa, "t", 2, 96, 303, 0], [Ej, "t", 5, 97, 303, 0], [Eo, "t", Ya, 98, 304, 0], [1, "b", vk, 97, 302, 0], [jq, "b", vk, 99, 304, 0], [1, "t", Zq, 98, 303, 0], [1, "t", 4, 98, 302, Fj], [Eo, "t", 4, 99, 303, 0], [aa, "t", 4, Vj, 304, 0], [1, "t", 5, 99, 302, qk], [Ue, "t", Jn, 101, 303, Cq], [Oj, "t", Zn, ba, 303, 0], [aa, "t", vq, 100, 302, 0], [Ok, "t", 0, 101, 304, Cn], [jq, "t", ea, 102, 304, 0], [Eo, "f", 0, 94, 7, Oj], [1, "f", 1, 93, rr, 1], [1, "f", Ue, 92, $j, Ue], [aa, "f", vq, 91, 7, Eo], [Oj, "f", 1, 90, 7, Ej], [Ok, "f", j, 89, $j, 1], [Ok, "f", Cq, 88, $j, Eo], [1, "f", aa, 87, 7, aa], [j, "f", Ue, 86, 7, 1], [j, "f", 1, 85, Co, Zq], [1, "f", qk, 84, 7, 1], [1, "f", 1, 82, Ck, Ue], [aa, "f", 0, 80, 7, Eo], [1, "f", Ok, 78, 7, Ue], [Ue, "f", 0, 76, Ck, 1], [1, "f", 1, 74, qq, 1], [aa, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, ie], [Ej, "f", 1, 68, qq, Zq], [aa, "f", 1, 32, or, aa], [1, "f", 0, 30, 7, Ej], [Ok, "f", Eo, 28, 7, 1], [ie, "f", 0, 26, Qr, Oj], [1, "f", 1, 24, Co, 1], [Oj, "f", gr, 22, 7, ie], [1, "f", Ue, 20, Ck, aa], [aa, "f", ur, 18, 7, aa], [1, "f", 1, 16, 7, 1], [1, "f", 0, Wn, Co, Ej], [Ok, "f", Ok, Or, 7, Eo], [1, "f", 0, 10, 7, 1], [ie, "f", Oj, R, rr, 1], [1, "s", 1, 7, Oo, 1], [Eo, "f", 0, 95, 152, j], [jq, "f", 1, 95, 151, 1], [1, "f", vq, 95, 11, aa], [ie, "f", 1, 95, 12, 1], [Zq, "f", 1, 95, 14, 1], [Eo, "f", 1, 95, 19, 1], [1, "f", 0, 95, oa, j], [ie, "f", 0, 95, Pj, Oj], [jq, "f", Zq, 95, 21, 1], [1, "f", Eo, 95, 26, aa], [Zq, "f", Ej, 95, 37, ie], [1, "f", Cn, 95, 44, j], [1, "f", 1, 95, 50, j], [Zq, "f", Ok, 95, 52, 1], [1, "f", vq, 95, 53, Oj], [1, "f", 1, 95, 54, Eo], [1, "f", 1, 95, 62, Oj], [1, "f", gr, 95, 55, j], [1, "f", 1, 95, 64, 1], [1, "f", _a, 95, 58, Ej], [j, "f", 0, 95, 61, Ue], [Ej, "f", ur, 95, 68, Ej], [Ej, "f", 0, 95, 72, j], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, Zq], [Ok, "f", Ej, 95, 117, 1], [j, "f", Zq, 95, 128, Eo], [1, "f", ne, 95, 85, Zq], [aa, "f", Gr, 95, 91, ie], [1, "f", 0, 95, 95, 1], [1, "f", qk, 95, 114, 1], [Ej, "f", 2, 95, 113, 1], [1, "f", Ue, 95, 119, 1], [1, "f", Gr, 95, 120, Zq], [1, "f", 1, 95, 121, aa], [aa, "f", ne, 95, 127, 1], [j, "f", Eo, 95, 130, ie], [1, "f", 0, 95, 131, Zq], [Eo, "f", Zq, 95, 132, jq], [1, "f", 1, 95, 136, Ue], [Ok, "f", 0, 95, 137, j], [aa, "f", qn, 95, 143, 1], [jq, "f", Fj, 95, 147, 1], [Zq, "f", 1, 95, 138, 1], [Eo, "f", 1, 95, 144, jq], [1, "f", jq, 95, Ln, 1], [1, "f", Cn, 95, 8, Ue], [Eo, "f", jq, 95, 9, Ue], [Zq, "f", qn, 95, 13, Ok], [j, "f", Zq, 95, Jk, Oj], [1, "f", Eo, 95, 17, 1], [Zq, "f", 0, 95, de, 1], [1, "f", 1, 95, 45, Ej], [jq, "f", Fj, 95, 51, Ej], [1, "f", 1, 95, 56, 1], [j, "f", 1, 95, 57, 1], [j, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, Ej], [Oj, "f", 1, 95, 63, aa], [Eo, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [jq, "f", j, 95, 67, Oj], [Ej, "f", Ue, 95, 69, jq], [1, "f", j, 95, 70, Ue], [Eo, "f", _a, 95, 71, 1], [1, "f", 1, 95, 73, ie], [Zq, "f", jq, 95, 74, 1], [ie, "f", qn, 95, 75, 1], [Ue, "f", 1, 95, 76, Eo], [1, "f", 1, 95, 77, Ok], [Zq, "f", 1, 95, 79, 1], [1, "f", ie, 95, 80, Eo], [Ok, "f", vq, 95, 81, 1], [Ej, "f", ie, 95, 82, 1], [jq, "f", Gr, 95, 83, 1], [1, "f", Eo, 95, 84, 1], [j, "f", Ej, 95, 86, 1], [1, "f", Ok, 95, 88, 1], [1, "f", vq, 95, 87, aa], [1, "f", 1, 95, 89, Ok], [jq, "f", j, 95, 90, 1], [jq, "f", 1, 95, 92, 1], [1, "f", aa, 95, 93, 1], [aa, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [Eo, "f", Fj, 95, 98, Ok], [j, "f", 1, 95, 99, aa], [1, "f", Ok, 95, 100, j], [1, "f", Fj, 95, 101, 1], [1, "f", Eo, 95, 102, jq], [1, "f", qn, 95, 103, 1], [Eo, "f", Oj, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", Gr, 95, 106, 1], [1, "f", 1, 95, 107, aa], [1, "f", aa, 95, 108, 1], [aa, "f", 1, 95, 109, Ok], [1, "f", 0, 95, 110, 1], [1, "f", jq, 95, 111, 1], [1, "f", 0, 95, 112, aa], [ie, "f", 1, 95, 116, Eo], [Ok, "f", 0, 95, 118, Oj], [1, "f", vq, 95, 122, 1], [1, "f", 1, 95, 123, 1], [j, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [Eo, "f", aa, 95, 126, Ej], [1, "f", Ue, 95, 129, Oj], [Oj, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, Ej], [Ej, "f", 1, 95, 135, 1], [1, "f", Eo, 95, 139, aa], [1, "f", qk, 95, 140, 1], [jq, "f", 1, 95, 141, ie], [1, "f", Eo, 95, 142, Eo], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", jq, 95, 148, 1], [1, "f", Eo, 95, 149, 1], [Eo, "f", Ue, 95, 150, Ok], [j, "f", Oj, 95, 153, Ue], [j, "cs", 0, 64, sa, 1], [ie, "cs", j, 64, Ye, aa], [Oj, "cs", 2, 64, Go, ie], [Zq, "cs", 2, 64, 19, Oj], [1, "cs", 0, 64, k, 1], [Zq, "cs", 1, 64, 21, aa], [Zq, "cs", wr, 64, 22, 1], [1, "cs", ur, 64, 23, jq], [aa, "cs", 2, 64, 24, 1], [Ej, "cs", aa, 64, 29, jq], [1, "cs", 2, 64, 30, Ok], [1, "cs", 3, 64, 31, jq], [1, "cs", 0, 64, 32, aa], [Zq, "cs", j, 64, 33, Ej], [1, "cs", 2, 64, 34, Zq], [1, "cs", _a, 64, 35, 1], [1, "cs", 2, 64, ta, 1], [Oj, "cs", 2, 65, 8, 1], [Ue, "cs", jq, 65, 9, 1], [j, "cs", Zn, 65, xk, Ue], [1, "cs", 3, 65, ma, Eo], [ie, "cs", Eo, 65, Fk, 1], [ie, "cs", qn, 64, gk, 1], [Zq, "cs", 3, 65, 17, ie], [j, "cs", zk, 64, Rr, aa], [1, "cs", zk, 65, 18, Ok], [Zq, "cs", _a, 65, 19, Ej], [1, "cs", ie, 65, 20, 1], [Eo, "cs", 3, 65, 21, 1], [j, "cs", 2, 65, 22, 1], [jq, "cs", Z, 65, 23, Ue], [Ok, "cs", 0, 65, 24, aa], [aa, "cs", 2, 65, 29, Ej], [jq, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [jq, "cs", 1, 65, 32, 1], [1, "cs", Zn, 65, 33, aa], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, Ma, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, Dk, Zq], [Zq, "cs", Gr, 60, Oo, 1], [Eo, "cs", 2, 59, E, 1], [1, "cs", Zn, 58, Mn, 1], [1, "cs", Cn, 57, 9, 1], [Oj, "cs", Zn, 56, 9, Zq], [1, "cs", 2, 55, 9, Zq], [1, "cs", 2, 54, 9, ie], [jq, "cs", 0, 53, 9, 1], [Eo, "cs", 0, 51, sa, Zq], [1, "cs", zk, 52, So, Ok], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, rn, j], [Zq, "cs", 2, 49, Ca, 1], [1, "cs", Gr, 47, Ca, 1], [Ue, "cs", 0, 45, hk, ie], [1, "cs", 0, 43, Mn, Oj], [jq, "cs", re, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, hk, 1], [Ej, "cs", zk, 41, hk, 1], [Ej, "cs", 0, 40, 9, ie], [Ok, "cs", re, 39, So, ie], [1, "cs", zk, 38, sa, j], [1, "cs", qn, 37, hk, 1], [1, "cs", Fj, 63, 8, Oj], [Eo, "cs", zk, 65, 7, aa], [1, "cs", X, 64, $j, Eo], [1, "cs", 2, 62, 8, Ej], [1, "cs", 3, 61, ta, 1], [1, "cs", 1, 62, 7, Ok], [Ok, "cs", wr, 63, y, 1], [j, "cs", Gr, 64, M, 1], [1, "cs", 3, 65, 6, jq], [Ej, "cs", 2, 63, Vi, Oj], [1, "cs", 2, 62, gq, jq], [ie, "cs", vk, 61, 6, jq], [1, "cs", vk, 60, sq, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, y, 1], [1, "cs", 0, 60, qq, ie], [Zq, "cs", zk, 60, ta, aa], [Ue, "cs", 2, 59, 7, jq], [1, "cs", 2, 59, ta, Ok], [1, "cs", 1, 58, 8, Ok], [1, "cs", Eo, 57, 6, 1], [Ue, "cs", 1, 55, 7, 1], [aa, "cs", ur, 56, sr, jq], [aa, "cs", vk, 58, 6, jq], [ie, "cs", 2, 58, qq, jq], [Eo, "cs", 2, 57, 7, j], [1, "cs", zk, 56, or, 1], [ie, "cs", 2, 55, 6, 1], [aa, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [Ej, "cs", 2, 55, 8, 1], [1, "cs", qk, 54, nk, Zq], [1, "cs", vq, 50, 7, 1], [1, "cs", 0, 53, M, 1], [Eo, "cs", 2, 54, 6, 1], [Zq, "cs", Zn, 54, $j, Ue], [j, "cs", 2, 53, 7, 1], [Zq, "cs", wr, 52, rr, Ok], [1, "cs", re, 52, 6, Ok], [1, "cs", jq, 52, nk, 1], [1, "cs", Zn, 53, nk, 1], [1, "cs", wr, 51, R, 1], [Zq, "cs", 2, 51, 7, 1], [Oj, "cs", 2, 51, sq, 1], [ie, "cs", 2, 50, Jj, 1], [1, "cs", 2, 50, 8, 1], [Ej, "cs", 2, 49, Dn, 1], [1, "cs", 2, 49, Ck, 1], [Ej, "cs", wr, 49, $a, 1], [jq, "cs", 0, 46, 7, ie], [1, "cs", 1, 48, nk, Zq], [1, "cs", 1, 44, 7, Oj], [Ok, "cs", Eo, 41, 8, Oj], [1, "cs", 2, 48, Oq, 1], [Oj, "cs", 2, 48, sr, 1], [jq, "cs", re, 47, $a, 1], [1, "cs", re, 47, 7, Zq], [ie, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, R, Ej], [ie, "cs", wr, 45, 8, 1], [1, "cs", 2, 45, y, 1], [aa, "cs", wr, 45, $a, 1], [1, "cs", wr, 46, sr, 1], [Oj, "cs", 2, 44, sr, 1], [ie, "cs", zk, 44, 8, aa], [Eo, "cs", Zn, 43, 8, Ue], [1, "cs", Zn, 43, Qr, 1], [jq, "cs", 2, 43, 6, ie], [1, "cs", 2, 42, 6, aa], [1, "cs", vk, 42, $j, Zq], [1, "cs", Zn, 42, Dn, 1], [j, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, M, aa], [ie, "cs", vk, 40, sq, 1], [1, "cs", 2, 40, Ck, aa], [1, "cs", Zn, 40, 8, aa], [Ej, "cs", re, 39, 8, 1], [1, "cs", ne, 39, 7, Zq], [1, "cs", 1, 38, 8, 1], [Eo, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, Vi, 1], [1, "cs", vk, 37, 6, 1], [1, "cs", 2, 38, $j, Ue], [1, "cs", 2, 37, 7, aa], [1, "cs", Zn, 37, Eq, 1], [1, "cs", 2, 37, 10, Ej], [Zq, "cs", 2, 38, 10, 1], [1, "cs", Cq, 38, Uj, Zq], [1, "cs", 0, 38, 17, 1], [1, "cs", Ue, 37, rk, j], [1, "cs", 0, 38, 19, aa], [aa, "cs", 2, 37, 11, 1], [Ok, "cs", wr, 37, 16, 1], [j, "cs", 2, 37, gk, Eo], [Eo, "cs", vk, 38, 18, aa], [aa, "cs", 2, 37, Pr, 1], [Ok, "cs", 3, 38, In, 1], [1, "cs", 0, 37, 21, Ok], [j, "cs", 0, 38, 22, aa], [1, "cs", 0, 38, 24, 1], [j, "cs", vk, 37, Ja, Oj], [1, "cs", 2, 38, Pj, 1], [Oj, "cs", 2, 38, 21, aa], [Oj, "cs", aa, 37, 23, Zq], [Eo, "cs", 3, 37, 22, ie], [Ej, "cs", 3, 38, 23, Zq], [1, "cs", Zn, 37, 24, Zq], [ie, "cs", ne, 38, 30, jq], [1, "cs", qn, 38, 32, Oj], [jq, "cs", 0, 37, 31, 1], [jq, "cs", Oj, 38, 34, Ok], [Ue, "cs", 1, 37, 29, jq], [aa, "cs", 2, 38, 29, Ok], [1, "cs", 2, 37, 30, 1], [Eo, "cs", vk, 38, 31, jq], [1, "cs", 2, 37, 32, jq], [1, "cs", nn, 38, 33, Ej], [aa, "cs", Ka, 38, 35, Ej], [jq, "cs", 2, 37, 33, 1], [Oj, "cs", 2, 36, ta, aa], [1, "cs", Fj, 36, 11, Ok], [1, "cs", qn, 35, 9, 1], [1, "cs", re, 36, E, aa], [1, "cs", vk, 36, pj, 1], [1, "cs", Zn, 35, 10, 1], [ie, "cs", Zq, 33, 8, 1], [1, "cs", 3, 34, Ma, j], [aa, "cs", X, 35, ta, 1], [Ok, "cs", 2, 34, 8, 1], [1, "cs", ne, 36, pa, 1], [Eo, "cs", Ej, 34, qq, 1], [Eo, "cs", wr, 35, Uk, Zq], [1, "cs", zk, 35, 6, 1], [1, "cs", 2, 36, sr, Ok], [1, "cs", 2, 68, sa, 1], [1, "cs", 2, 66, Ho, j], [1, "cs", 3, 66, sa, 1], [1, "cs", 0, 67, 9, ie], [Eo, "cs", ne, 66, le, j], [aa, "cs", 2, 67, Dn, 1], [ie, "cs", 1, 68, 8, 1], [ie, "cs", Ok, 66, 11, 1], [1, "cs", wr, 67, 10, jq], [1, "cs", _a, 66, 6, 1], [1, "cs", 2, 66, Uk, 1], [j, "cs", re, 67, $j, jq], [1, "cs", 2, 69, 8, Ok], [Zq, "cs", 2, 63, 32, Eo], [Zq, "cs", Zn, 62, 34, 1], [1, "cs", 2, 60, 35, Zq], [1, "cs", 3, 59, 35, 1], [aa, "cs", Fj, 61, 35, Eo], [Oj, "cs", qn, 63, 34, jq], [1, "cs", Zn, 63, 33, Zq], [j, "cs", wr, 63, 35, 1], [Ue, "cs", 2, 62, 35, 1], [Zq, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [Ue, "cs", 1, 62, 36, aa], [aa, "cs", 2, 60, 36, Ue], [Ue, "cs", 2, 61, 34, Ej], [Oj, "cs", 3, 62, 33, 1], [Ok, "cs", nn, 63, 36, 1], [j, "cs", Ka, 61, 36, ie], [1, "cs", ne, 42, 36, 1], [Oj, "cs", 1, 39, 36, ie], [1, "cs", vk, 41, 36, 1], [Zq, "cs", Z, 39, 35, 1], [1, "cs", Ka, 40, 36, 1], [Zq, "cs", 3, 43, 36, 1], [ie, "cs", 1, 40, 35, Ok], [1, "cs", zk, 41, 35, Zq], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [Ue, "cs", Zn, 39, 33, 1], [1, "cs", 2, 39, 32, Eo], [1, "cs", Gr, 40, 33, Ej], [1, "cs", 2, 41, 34, Ok], [1, "cs", Ok, 44, 36, Oj], [Eo, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", _a, 37, 34, aa], [1, "cs", 3, 59, 30, Ue], [1, "cs", qk, 60, 29, ie], [Ej, "cs", vk, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [aa, "cs", 0, 60, 26, 1], [Ok, "cs", 2, 54, 25, Ue], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, Ej], [1, "cs", 0, 55, 25, Ue], [1, "cs", re, 59, 26, 1], [Zq, "cs", 0, 43, 26, 1], [Ej, "cs", 1, 42, 27, 1], [1, "cs", re, 42, 28, Ok], [Ej, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, Ok], [1, "cs", 0, 54, 24, j], [ie, "cs", Cn, 48, 24, j], [jq, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, Zq], [1, "cs", vk, 63, 22, 1], [1, "cs", wr, 63, 21, 1], [1, "cs", zk, 39, 21, 1], [1, "cs", 3, 57, 18, Ue], [1, "cs", wr, 56, wa, 1], [1, "cs", 3, 51, 21, ie], [ie, "cs", 0, 51, Do, 1], [Ue, "cs", 2, 51, 19, Ej], [Oj, "cs", Z, 51, 18, Ej], [1, "cs", 2, 63, ka, Ej], [1, "cs", Zn, 63, 10, aa], [1, "cs", 2, 56, 13, ie], [1, "cs", Qk, 57, Tn, 1], [Ej, "cs", Ej, 45, ee, Eo], [j, "cs", 2, 47, 18, ie], [Ej, "cs", zk, 46, 18, 1], [Ej, "cs", 0, 46, 13, Eo], [1, "cs", Zn, 45, 13, j], [ie, "cs", re, 39, ae, Oj], [1, "cs", 2, 39, tq, Zq], [Ok, "cs", wr, 47, 17, 1], [1, "a", qn, 51, 15, 1], [1, "a", Oj, 53, 14, Oj], [1, "a", 1, 49, 14, 1], [jq, "de", 8, 55, nq, 0], [Ue, "de", rn, 48, 28, ur], [aa, "de", ia, 58, 26, Gr], [Oj, "de", $i, 59, 29, 0], [1, "de", $i, 55, 34, 0], [1, "de", Qa, 48, 33, 0], [1, "de", Ma, 41, 32, 0], [j, "de", hk, 56, 24, Gr], [1, "de", 9, 62, In, 0], [1, "de", 9, 45, 11, ur], [j, "de", 9, 44, 17, Cn], [1, "de", Va, 44, 13, 0], [1, "de", 10, 58, Hn, 0], [1, "de", Va, 63, 31, 0], [1, "de", R, 60, 30, Cq], [1, "de", le, 43, 26, ur], [Eo, "de", 10, 43, 29, qk], [ie, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, tj], [aa, "de", 9, 53, Ko, Fj], [1, "de", D, 49, 19, 0], [1, "de", xk, 39, 26, Cq], [1, "de", So, 46, 24, 0], [1, "de", E, 62, 10, 0], [1, "de", Eq, 40, 14, 0], [Ue, "de", 32, 55, 35, _a], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, Cn], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [j, "de", 32, 63, J, 0], [1, "de", 32, 59, Qa, Cn], [ie, "de", 32, 56, 12, tj], [Ue, "de", 32, 52, 17, 0], [Ej, "de", 32, 51, 14, qk], [ie, "de", 32, 39, 12, ne], [Zq, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, qk], [1, "de", 32, 39, 30, tj], [Oj, "de", 32, 50, 29, qn], [Ej, "de", 32, 43, 34, 0], [Ej, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, qn], [1, "de", 31, 63, Qq, 0], [jq, "de", 31, 47, 15, gr], [Ok, "de", 31, 43, ja, Fj], [1, "de", 31, 39, 27, gr], [ie, "de", 31, 48, 27, Gr], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, Cn], [j, "d", 0, 12, Pa, 1], [1, "d", gr, 89, je, Ue], [1, "d", Zq, 91, 21, 1], [jq, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, Ej], [aa, "f", qn, 88, 19, 1], [Ok, "g", 1, 85, 22, 1], [Ue, "s", Ej, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [ie, "s", 2, 90, 38, jq], [1, "s", 0, 91, 42, 1], [Ue, "s", 0, 90, 49, 1], [Oj, "f", Ue, 86, 43, Ok], [1, "f", 0, 81, 45, 1], [1, "f", zk, 66, 44, Oj], [1, "f", 2, 55, 49, Oj], [j, "f", 1, 54, 50, jq], [jq, "f", 2, 43, 45, 1], [Zq, "f", 2, 31, 48, jq], [1, "f", 1, 27, 39, Eo], [jq, "f", aa, 80, 46, jq], [jq, "f", Oj, 69, 48, Oj], [Ej, "g", tj, 80, 40, Ue], [1, "g", 2, 81, 40, Oj], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [jq, "s", 2, 57, 41, j], [1, "s", Ue, 56, 42, 1], [1, "s", 1, 40, 41, 1], [Ue, "s", zk, 48, 48, Ok], [1, "f", 2, Ua, 12, 1], [1, "f", 0, 13, 31, 1], [ie, "f", 1, 14, 32, 1], [1, "s", _a, nq, 27, 1], [Ej, "s", ur, 13, 39, ie], [1, "f", 2, Uj, zr, j], [1, "f", Zq, bk, Iq, 1], [Eo, "g", vk, 12, 25, Ej], [Ej, "f", gr, Jk, 45, Ue], [Eo, "f", 1, Ua, 46, 1], [1, "s", Ok, 74, 48, Oj], [aa, "s", Eo, c, 47, 1], [Ue, "g", Cq, 58, 59, Zq], [Ok, "g", gr, 46, 72, 1], [Oj, "g", ne, 69, 79, Zq], [1, "g", _a, 72, 74, 1], [jq, "g", 0, 26, 88, Oj], [1, "g", 0, c, 74, 1], [Eo, "g", 0, 28, 67, 1], [Ok, "g", 0, 49, 86, 1], [j, "g", 0, 77, 90, jq], [1, "g", ur, 87, 72, aa], [1, "g", 0, 14, 85, 1], [Oj, "g", ie, 85, 97, j], [j, "g", ie, 68, 104, Ue], [1, "g", Ok, 63, 91, 1], [Ej, "g", j, 39, 90, aa], [Zq, "g", Ue, 34, 99, Zq], [Ej, "g", Ej, 17, 103, jq], [1, "g", Zn, 77, 60, 1], [Ej, "g", wr, 19, 56, 1], [1, "g", 2, 39, 60, jq], [Ue, "g", re, 87, 57, ie], [ie, "f", 0, So, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [Zq, "f", vq, 35, 53, Zq], [Ok, "f", 0, 44, 58, Zq], [1, "f", ur, 88, 62, 1], [Ok, "f", Fj, 91, 82, ie], [1, "f", 0, 84, 85, jq], [1, "f", vq, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, ie], [1, "f", gr, 34, 81, 1], [jq, "f", 0, 39, 71, Ok], [1, "f", 0, 54, 94, Zq], [1, "f", 1, 81, 70, 1], [aa, "f", 1, 91, 72, Ok], [Ok, "f", 1, Dn, 91, 1], [1, "f", Ue, 14, 81, 1], [1, "f", 1, 29, 79, 1], [Ue, "f", Ok, 13, 65, 1], [1, "f", 1, 46, 97, 1], [Ok, "f", 1, 43, 73, 1], [Zq, "f", Ej, 60, 69, 1], [j, "f", Ej, 70, 96, 1], [Ej, "f", 1, 58, 84, 1], [1, "s", Oj, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", Fj, 41, 62, ie], [1, "s", 0, 60, 61, 1], [Ej, "s", Fj, c, 66, 1], [Ej, "s", 0, 47, 83, aa], [1, "s", Fj, 29, 86, 1], [Eo, "s", vq, 78, 92, 1], [1, "s", 0, 62, 102, 1], [j, "s", 0, rk, 95, Ok], [1, "s", 2, 64, 101, jq], [1, "s", 2, 78, 84, ie], [1, "s", 2, 49, 83, 1], [1, "s", 2, oa, 76, j], [1, "s", 2, 21, 84, Ue], [1, "f", ie, 26, 94, ie], [1, "f", 2, 23, 96, Ue], [1, "f", wr, 25, 72, ie], [1, "f", Zn, 85, 77, jq], [Ok, "f", wr, 79, 95, Ue], [1, "f", re, 51, 65, 1], [1, "f", re, 69, 60, 1], [Eo, "f", 1, 25, 105, ie], [1, "s", Oj, ee, 68, Ej], [Oj, "s", 0, 55, 76, Zq], [1, "s", _a, 74, 59, 1], [1, "f", 1, 46, 142, Ok], [1, "f", 1, m, 140, 1], [Ej, "f", jq, 77, 137, 1], [1, "f", ne, 75, 137, j], [Ok, "f", 0, 55, 138, 1], [1, "f", ne, 33, 127, Ok], [aa, "f", _a, 76, 121, 1], [1, "f", Fj, 55, 121, 1], [1, "f", 0, 13, 123, 1], [Ok, "f", 0, 18, 141, aa], [1, "f", 0, 40, 137, aa], [jq, "f", Zn, 76, 142, Eo], [1, "f", vk, 57, 140, Eo], [aa, "f", 2, 39, 138, 1], [1, "f", wr, 16, 143, 1], [j, "f", 2, 29, 131, 1], [Oj, "f", 0, 70, 150, j], [j, "f", 0, 28, 146, Oj], [Ue, "f", 0, 12, 132, jq], [1, "f", qn, 90, 129, Ue], [jq, "f", jq, 87, 131, Zq], [1, "f", 0, 91, 143, 1], [ie, "f", 2, 87, 145, aa], [1, "f", Ej, 89, 141, aa], [1, "f", Ue, 63, 130, ie], [Ok, "f", aa, 75, 122, 1], [jq, "f", Ej, 52, 124, 1], [1, "f", Ok, 34, 127, Oj], [1, "f", Zq, 14, 123, Eo], [1, "f", aa, 24, 122, ie], [1, "f", tj, 83, 108, Zq], [jq, "f", 0, 89, 118, j], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, j], [1, "f", 0, 16, 110, Oj], [aa, "f", Ok, 80, 105, ie], [Ue, "f", aa, 82, 109, aa], [Zq, "f", aa, 87, 118, Ok], [Ok, "f", aa, 59, 110, 1], [1, "f", 1, 29, 111, j], [Oj, "f", re, 28, 112, 1], [1, "f", 2, 70, 112, Zq], [Oj, "f", 2, 42, 111, 1], [Oj, "s", ur, 68, 157, 1], [aa, "s", tj, 81, 158, 1], [1, "s", _a, 25, 172, 1], [aa, "s", 0, 22, 161, Ej], [ie, "s", 0, 35, 152, Eo], [1, "s", ur, 66, 144, Zq], [Ok, "s", ur, 87, 145, 1], [1, "s", 0, 86, 145, jq], [1, "s", qk, 84, 135, Ok], [ie, "s", _a, 69, 133, 1], [1, "s", _a, 84, 122, Zq], [1, "s", 0, 68, 121, 1], [Zq, "s", 0, 48, 124, 1], [1, "s", vq, 26, 129, 1], [1, "s", Cq, Ma, 127, 1], [1, "s", 0, 11, 144, 1], [Zq, "s", tj, vr, 109, 1], [1, "s", 0, 35, 101, j], [ie, "s", 0, 47, 109, Ok], [aa, "s", gr, 58, 111, Ej], [aa, "s", 0, 84, 110, Eo], [Zq, "s", 0, 28, 114, Ue], [1, "s", ie, 30, 116, j], [jq, "s", Ej, 46, 112, 1], [jq, "s", Ue, 81, 111, ie], [1, "s", 1, 70, 123, Oj], [ie, "s", aa, 49, 127, 1], [ie, "s", 1, 66, 134, 1], [Eo, "s", 1, 67, 144, 1], [aa, "s", 1, 38, 152, Oj], [1, "s", ie, 21, 164, Ok], [1, "s", Oj, 12, 147, j], [1, "s", 1, 24, 130, Ej], [1, "s", aa, 12, 125, 1], [Eo, "s", 1, 65, 158, 1], [j, "s", Oj, 83, 167, ie], [1, "s", 1, 65, 167, Zq], [j, "s", aa, 47, 164, Oj], [1, "s", 1, 56, 168, Ok], [Zq, "s", 2, 54, 169, Ue], [1, "s", 2, 88, 170, Ej], [Zq, "s", 2, 91, 162, 1], [Ej, "s", Zn, 79, 149, Eo], [Oj, "s", zk, 75, 144, ie], [1, "s", vk, 57, 150, Zq], [Oj, "s", 2, 47, 143, jq], [aa, "s", Zn, 31, 145, Ej], [1, "s", 2, 36, 138, Oj], [1, "s", vk, 10, 163, 1], [1, "s", vk, 22, 142, 1], [1, "g", wr, 78, 132, Zq], [1, "g", 1, 48, 135, Zq], [1, "g", vk, 16, 136, Eo], [1, "g", _a, 62, 92, Ue], [Oj, "g", 2, 70, 80, Oj], [1, "g", 2, fq, 86, j], [1, "g", 2, 47, 75, ie], [Oj, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, Ue], [1, "f", ie, 39, 118, Ej], [jq, "d", 2, 84, 54, Ue], [Zq, "d", 2, In, 54, ie], [1, "de", 7, 13, 13, 0], [Ue, "de", sj, In, 28, Cq], [1, "de", sj, _j, 25, 0], [1, "de", 5, 34, 41, 0], [aa, "de", 4, 28, 40, ne], [ie, "de", $a, 31, 47, ne], [1, "de", 6, bk, 39, 0], [jq, "de", 4, Fk, 47, 0], [Zq, "de", hn, 7, 46, tj], [Eo, "de", 6, 7, 33, 0], [Ue, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [ie, "de", Ck, 29, 59, ur], [1, "de", Vi, 27, 58, 0], [Eo, "de", Jj, 15, 54, Cn], [jq, "de", Jo, yo, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [ie, "de", $j, 49, 48, 0], [1, "de", pa, 37, 63, Gr], [j, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [j, "de", pr, 59, 58, Cn], [Ej, "de", 6, 48, 58, 0], [j, "de", 4, 53, 63, 0], [Oj, "de", hn, 67, 44, 0], [Ok, "de", 5, 70, 49, Fj], [1, "de", sj, 82, 55, 0], [j, "de", Jn, 79, 41, 0], [1, "de", 5, 91, 29, 0], [Ej, "de", rr, 91, 43, 0], [1, "de", Jj, 85, 44, 0], [Zq, "de", 6, 74, 60, ur], [j, "de", 6, 90, Eq, qn], [jq, "de", ha, 91, 15, qk], [Oj, "de", 4, 87, Do, 0], [1, "de", 7, 93, 11, Gr], [1, "de", 6, 91, 21, 0], [j, "de", Jj, 85, 35, 0], [Ue, "de", Ya, 93, 58, tj], [1, "de", Jn, 87, 63, ur], [1, "de", 7, 77, 62, qn], [j, "de", $a, 68, 61, tj], [1, "de", Jn, 90, 73, 0], [j, "de", 4, 87, 71, qn], [1, "de", Uk, 80, 71, vq], [1, "de", 7, 83, 77, 0], [Ej, "de", 7, 89, 83, Fj], [1, "de", hn, 71, 80, 0], [jq, "de", 4, 71, 70, ur], [Oj, "de", Jn, 63, 72, 0], [1, "de", Yi, 54, 75, 0], [1, "de", 5, 44, 83, _a], [Ok, "de", Ya, 42, 74, qn], [1, "de", 5, 15, 81, ur], [1, "de", 4, 29, 80, Cq], [Oj, "de", ea, 37, 90, qn], [1, "de", 4, 7, 75, ne], [1, "de", $a, 22, 74, 0], [1, "de", Vi, 43, 95, ur], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, Cq], [Eo, "de", gq, 9, 92, Cq], [Ej, "de", pr, 26, 89, _a], [1, "de", 5, 31, 112, tj], [1, "de", 5, 54, 108, 0], [Ok, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", rr, 27, 107, 0], [Eo, "de", Co, 47, 99, 0], [Ok, "de", y, 11, 104, gr], [1, "de", Uk, 9, 111, 0], [1, "de", Oq, 40, 114, vq], [ie, "de", 7, 28, 117, qk], [j, "de", 7, 47, 113, 0], [ie, "de", 7, 63, 104, 0], [1, "de", hn, 64, 92, 0], [Zq, "de", $a, 86, 97, qk], [Zq, "de", Jo, 76, 91, ur], [1, "de", 5, 85, 86, 0], [Eo, "de", 6, 78, 83, ne], [1, "de", sq, 71, 97, 0], [jq, "de", 4, 69, 105, 0], [Ej, "de", Aq, 79, 104, Gr], [1, "de", Aq, 86, 109, Gr], [Ej, "de", 4, 86, 118, _a], [1, "de", 5, 70, 113, Cn], [Ej, "de", sr, 69, 121, gr], [1, "de", gq, 76, 122, 0], [Zq, "de", 7, 87, 130, ne], [Eo, "de", 4, 84, 123, tj], [Ok, "de", hn, 57, 121, ne], [1, "de", Jo, 53, 125, ne], [1, "de", Ui, 62, 131, qk], [1, "de", 6, 67, 143, gr], [jq, "de", 5, 77, 143, Cq], [1, "de", pr, 85, 136, 0], [Ej, "de", sr, 87, 147, Gr], [1, "de", 6, 92, 140, tj], [1, "de", Yi, 93, 127, Gr], [1, "de", 5, 93, 106, 0], [1, "de", xj, 45, 144, qk], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, ur], [1, "de", 6, 35, 127, 0], [Zq, "de", M, 64, 142, ne], [Ej, "de", 5, 23, 131, Cq], [Zq, "de", Jn, E, 134, ne], [ie, "de", $a, 11, 121, _a], [jq, "de", Aq, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, qk], [Zq, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, _a], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, _a], [1, "de", 34, 38, 139, ne], [Eo, "de", 34, 47, 144, Cn], [1, "de", 34, 68, 142, ne], [Ej, "de", 36, 70, 135, Cn], [1, "de", 36, 64, 132, 0], [Ue, "de", 36, 86, 134, _a], [1, "de", 36, 90, 141, 0], [j, "de", 36, 93, 131, ur], [jq, "de", 36, 91, 125, qn], [1, "de", 36, 76, 123, 0], [Eo, "de", 33, 82, 122, 0], [Oj, "de", 35, 56, 122, gr], [ie, "de", 35, 40, 119, 0], [1, "de", 35, ue, 112, tj], [1, "de", 35, 37, 102, 0], [1, "de", 33, de, 97, 0], [Ej, "de", 34, pj, 83, tj], [Ej, "de", 33, 19, 73, 0], [1, "de", 33, ae, 60, 0], [Ue, "de", 35, 24, 60, Gr], [Eo, "de", 36, Wa, 45, 0], [Ue, "de", 36, 21, 42, 0], [1, "de", 35, nk, 32, _a], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [Ue, "de", 36, 53, 36, _a], [aa, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [Zq, "de", 36, 57, 30, Gr], [jq, "de", 33, 86, 108, gr], [1, "de", 33, 68, 112, qk], [1, "de", 33, 49, 109, qn], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, qk], [j, "de", 36, 76, 83, ne], [ie, "de", 36, 70, 72, _a], [1, "de", 36, 78, 63, vq], [1, "de", 36, 90, 64, 0], [j, "de", 36, 60, 70, Cq], [Ue, "de", 35, 75, 90, 0], [Ej, "de", 35, 81, 58, _a], [Eo, "de", 35, 91, 51, Cn], [j, "de", 35, 93, 56, 0], [Eo, "de", 35, 61, 60, qk], [ie, "de", 35, 66, 46, 0], [1, "de", 33, 90, Qq, ne], [Ue, "de", 34, 92, 9, 0], [j, "de", 35, 75, 39, gr], [1, "de", 35, 67, 42, qn], [1, "de", 35, 93, 37, 0], [Ue, "de", 36, 89, 28, 0], [Oj, "de", 36, 42, 61, ne], [Eo, "de", 33, 49, 50, gr], [1, "de", 33, 44, 75, 0], [j, "de", 33, 46, 85, 0], [jq, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [Zq, "de", 33, 25, 90, qn], [1, "de", 33, 31, 69, vq], [j, "de", 35, 34, 54, 0], [Eo, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [Eo, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [aa, "de", 35, 14, 52, qk], [1, "s", Zn, bk, 171, 1], [Eo, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, Cq], [1, "r", 24, 188, 0], [jq, "r", 25, 189, 0], [ie, "r", 24, 189, qn], [1, "r", 23, 189, 0], [Oj, "r", 22, 189, _a], [jq, "r", 21, 189, 0], [Ej, "r", cq, 189, 0], [Ok, "r", wj, 189, 0], [1, "r", 19, 190, Cq], [Ok, "r", 19, 191, 0], [1, "r", yn, 191, Cn], [1, "r", 21, 191, Cq], [Ue, "r", 22, 191, 0], [Ok, "r", 24, 191, Cn], [1, "r", 23, 191, qk], [1, "r", 25, 191, _a], [aa, "r", 25, 190, 0], [1, "r", 24, 190, 0], [Ok, "r", 23, 190, 0], [Zq, "r", 22, 190, 0], [jq, "r", 21, 190, ur], [Ue, "r", Ja, 190, qn], [1, "r", 26, 190, 0], [1, "r", 26, 191, qn], [1, "r", 24, 193, qn], [Zq, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", k, 192, Fj], [1, "r", 21, 192, 0], [Eo, "r", 22, 192, Cq], [Eo, "r", 23, 192, 0], [Zq, "r", 24, 192, vq], [1, "r", 25, 192, 0], [Oj, "r", 53, 199, Fj], [Ej, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [Ej, "r", 55, 200, tj], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [Eo, "r", 51, 200, qk], [1, "r", 56, 200, tj], [Ej, "r", 55, 201, gr], [1, "r", 54, 201, 0], [1, "r", 55, 202, Gr], [Ue, "r", 54, 203, tj], [Oj, "r", 54, 204, 0], [1, "r", 54, 202, ne], [j, "r", 53, 202, ur], [aa, "r", 52, 202, qk], [Eo, "r", 53, 201, Gr], [1, "r", 52, 201, 0], [ie, "r", 51, 201, 0], [Zq, "r", 51, 202, 0], [Zq, "r", 50, 202, gr], [Oj, "r", 50, 201, Cq], [1, "r", 56, 201, 0], [Ej, "r", 53, 203, gr], [Ok, "r", 52, 203, vq], [1, "r", 51, 203, 0], [1, "r", 56, 202, Fj], [jq, "r", 55, 203, qk], [1, "r", 53, 204, tj], [aa, "r", 52, 204, 0], [Eo, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, gr], [1, "r", 54, 246, 0], [1, "r", 50, 248, Fj], [1, "r", 48, 248, 0], [Oj, "r", 43, 248, 0], [jq, "r", 45, 238, 0], [1, "r", 44, 238, Cq], [1, "r", 43, 238, 0], [Ok, "r", 46, 238, 0], [1, "r", 47, 238, ne], [aa, "r", 48, 238, vq], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [Ok, "r", 51, 238, tj], [Eo, "r", 52, 238, gr], [1, "r", 53, 238, vq], [Ok, "r", 54, 239, ne], [1, "r", 53, 240, _a], [1, "r", 53, 239, 0], [1, "r", 52, 239, Cn], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [Ok, "r", 49, 239, 0], [1, "r", 48, 239, 0], [Ok, "r", 47, 239, qn], [aa, "r", 46, 239, 0], [aa, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [Ej, "r", 42, 239, qk], [jq, "r", 41, 240, 0], [jq, "r", 42, 240, gr], [1, "r", 43, 240, Cq], [1, "r", 44, 240, qk], [1, "r", 45, 240, 0], [1, "r", 46, 240, Fj], [1, "r", 47, 240, ur], [Oj, "r", 48, 240, 0], [Ok, "r", 49, 240, 0], [1, "r", 50, 240, gr], [Ok, "r", 51, 240, 0], [1, "r", 52, 240, qn], [Ue, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, qk], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, ur], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, ur], [Oj, "r", 48, 241, tj], [1, "r", 47, 241, Fj], [Zq, "r", 46, 241, tj], [1, "r", 45, 241, 0], [aa, "r", 44, 241, 0], [1, "r", 43, 241, Cn], [1, "r", 42, 241, ur], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [Ok, "r", 42, 242, 0], [j, "r", 43, 242, 0], [1, "r", 44, 242, _a], [1, "r", 45, 242, 0], [ie, "r", 46, 242, 0], [j, "r", 47, 242, 0], [1, "r", 48, 242, tj], [Ok, "r", 49, 242, _a], [ie, "r", 50, 242, gr], [1, "r", 51, 242, 0], [1, "r", 52, 242, vq], [1, "r", 53, 242, ur], [1, "r", 54, 242, _a], [aa, "r", 55, 242, 0], [aa, "r", 56, 242, 0], [ie, "r", 56, 243, 0], [jq, "r", 55, 243, ne], [1, "r", 54, 243, ur], [Ue, "r", 53, 243, 0], [Ue, "r", 52, 243, 0], [1, "r", 51, 243, _a], [ie, "r", 50, 243, Cq], [Ok, "r", 49, 243, Gr], [1, "r", 48, 243, gr], [Eo, "r", 47, 243, ne], [aa, "r", 46, 243, 0], [jq, "r", 45, 243, Gr], [aa, "r", 44, 243, Cn], [jq, "r", 43, 243, Fj], [Zq, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [jq, "r", 40, 244, 0], [1, "r", 41, 244, 0], [aa, "r", 43, 244, 0], [aa, "r", 44, 244, qk], [1, "r", 45, 244, _a], [1, "r", 46, 244, 0], [jq, "r", 47, 244, 0], [ie, "r", 48, 244, vq], [Ue, "r", 49, 244, 0], [1, "r", 50, 244, 0], [Ej, "r", 51, 244, vq], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [Oj, "r", 54, 244, gr], [1, "r", 55, 244, gr], [Zq, "r", 42, 244, 0], [1, "r", 40, 245, qk], [aa, "r", 41, 245, Cq], [1, "r", 42, 245, 0], [jq, "r", 43, 245, 0], [Ej, "r", 44, 245, 0], [aa, "r", 45, 245, 0], [Ej, "r", 46, 245, Cn], [j, "r", 47, 245, 0], [Zq, "r", 48, 245, 0], [jq, "r", 49, 245, qn], [aa, "r", 50, 245, qk], [1, "r", 51, 245, gr], [j, "r", 52, 246, 0], [Oj, "r", 52, 245, gr], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [Ok, "r", 55, 245, 0], [1, "r", 53, 246, Fj], [Eo, "r", 51, 246, tj], [1, "r", 50, 246, 0], [Ej, "r", 49, 246, ur], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [aa, "r", 45, 246, 0], [1, "r", 46, 246, 0], [Ok, "r", 44, 246, 0], [1, "r", 43, 246, gr], [aa, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, _a], [1, "r", 43, 247, ur], [Ej, "r", 44, 247, 0], [ie, "r", 45, 247, 0], [1, "r", 46, 247, qn], [1, "r", 47, 247, _a], [1, "r", 48, 247, 0], [aa, "r", 50, 247, 0], [1, "r", 51, 247, gr], [aa, "r", 52, 247, ur], [Ok, "r", 53, 247, qn], [j, "r", 54, 247, 0], [1, "r", 49, 247, Cq], [1, "r", 49, 248, 0], [j, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, qk], [Ej, "r", 51, 248, tj], [ie, "r", 55, 246, 1], [1, "r", 55, 247, ie], [Ok, "r", 56, 247, 1], [Oj, "r", 56, 248, 1], [1, "r", 95, 270, ie], [Ue, "r", 93, 270, Oj], [Ok, "r", 94, 270, aa], [Zq, "r", 95, 271, Zq], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [Ue, "r", 94, 282, Ok], [1, "r", 93, 282, 1], [1, "r", 93, 281, Eo], [Ok, "r", 92, 281, Ue], [1, "r", 92, 280, 1], [Ej, "r", 91, 280, Eo], [1, "r", 90, 279, Ej], [1, "r", 95, 275, 1], [aa, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [Ej, "r", 94, 274, Eo], [1, "r", 94, 273, Ue], [jq, "r", 94, 272, Zq], [Zq, "r", 93, 272, 1], [1, "r", 93, 273, Oj], [Oj, "r", 93, 274, 1], [Eo, "r", 92, 273, 1], [j, "r", 92, 272, aa], [Ue, "r", 92, 270, Zq], [Eo, "r", 92, 271, Zq], [j, "r", 92, 269, 1], [Oj, "r", 90, 269, Ok], [1, "r", 91, 269, 1], [Ue, "r", 91, 271, aa], [Oj, "r", 91, 270, Oj], [1, "r", 95, 278, 1], [1, "r", 95, 277, Zq], [1, "r", 95, 276, aa], [1, "r", 94, 276, 1], [Zq, "r", 94, 275, 1], [1, "r", 93, 275, j], [1, "r", 92, 274, 1], [Ok, "r", 92, 275, 1], [Ue, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, ie], [jq, "r", 90, 274, 1], [Eo, "r", 89, 275, 1], [1, "r", 88, 274, j], [Ej, "r", 88, 273, Zq], [Ok, "r", 86, 272, 1], [1, "r", 85, 271, 1], [jq, "r", 86, 271, ie], [Oj, "r", 87, 272, 1], [Ue, "r", 55, 248, 1], [1, "r", 54, 248, Oj], [Zq, "r", 56, 249, jq], [1, "r", 55, 249, Zq], [Ej, "r", 55, 250, Ue], [1, "r", 56, 250, Ej], [Ue, "r", 57, 250, 1], [1, "r", 57, 249, j], [Ok, "r", 59, 250, j], [jq, "r", 58, 250, aa], [aa, "r", 60, 250, Oj], [j, "r", 61, 251, j], [1, "r", 60, 251, 1], [jq, "r", 62, 251, 1], [jq, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [Ok, "r", 57, 251, 1], [jq, "r", 56, 251, j], [Ok, "r", 58, 252, Eo], [1, "r", 57, 252, 1], [Eo, "r", 57, 253, 1], [Ej, "r", 58, 253, 1], [1, "r", 58, 254, aa], [Ej, "r", 59, io, 1], [1, "r", 58, 255, jq], [1, "r", 57, 254, jq], [ie, "r", 56, 252, 1], [aa, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, bq, 1], [1, "r", 61, 256, 1], [1, "r", 60, Qi, Ej], [1, "r", 62, va, j], [Ue, "r", 62, 257, Zq], [1, "r", 61, 257, j], [aa, "r", 64, 253, j], [jq, "r", 64, 254, ie], [1, "r", 65, 254, 1], [Eo, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, aa], [1, "r", 66, 254, Ej], [1, "r", 65, 255, Ej], [1, "r", 64, 255, jq], [1, "r", 64, Hr, 1], [1, "r", 65, 256, 1], [Zq, "r", 65, 257, 1], [Eo, "r", 64, 257, 1], [Eo, "r", 63, 257, Ej], [1, "r", 62, 258, j], [1, "r", 63, 258, 1], [Ok, "r", 64, 258, 1], [aa, "r", 66, 255, 1], [Ej, "r", 66, Lr, Oj], [Ej, "r", 66, 257, 1], [Eo, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [ie, "r", 67, 257, 1], [Ej, "r", 67, 259, Ue], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [ie, "r", 56, 246, Oj], [aa, "r", 56, 245, j], [1, "r", 68, 258, Zq], [1, "r", 68, 259, aa], [1, "r", 68, 260, Ue], [j, "r", 69, 260, Eo], [1, "r", 69, 261, 1], [1, "r", 70, 261, Eo], [1, "r", 71, 261, Ue], [1, "r", 67, 260, 1], [jq, "r", 89, 269, 1], [Zq, "r", 89, 268, 1], [Oj, "r", 90, 268, Eo], [jq, "r", 82, 267, ie], [1, "r", 83, 267, j], [1, "r", 80, 266, 1], [1, "r", 81, 266, Ej], [ie, "r", 81, 267, aa], [Eo, "r", 79, 266, 1], [Ok, "r", 78, 265, 1], [Ok, "r", 77, 265, j], [1, "r", 76, 264, jq], [Ej, "r", 75, 264, Ue], [1, "r", 75, 263, 1], [Ej, "r", 74, 263, j], [Ej, "r", 74, 262, 1], [Ok, "r", 72, 262, 1], [1, "r", 73, 262, 1], [ie, "r", 71, 262, jq], [Eo, "r", 85, 270, 1], [1, "r", 84, 270, 1], [j, "r", 84, 269, 1], [1, "r", 83, 269, Ue], [aa, "r", 82, 269, jq], [jq, "r", 81, 269, jq], [jq, "r", 81, 268, Ej], [j, "r", 82, 268, 1], [ie, "r", 83, 268, Ue], [Zq, "r", 80, 268, Ej], [jq, "r", 80, 267, Ue], [1, "r", 79, 267, Ok], [j, "r", 78, 266, ie], [1, "r", 76, 265, 1], [Ej, "r", 75, 262, 1], [1, "r", 90, 280, jq], [1, "r", 89, 280, j], [1, "r", 89, 279, 1], [Ue, "r", 88, 279, j], [jq, "r", 88, 278, Ue], [1, "r", 87, 277, Ue], [1, "r", 86, 276, Zq], [Ej, "r", 86, 275, 1], [1, "r", 86, 274, Ok], [1, "r", 86, 273, Zq], [Eo, "r", 85, 273, 1], [ie, "r", 85, 272, Ej], [1, "r", 85, 274, 1], [1, "r", 86, 277, Oj], [Ue, "r", 87, 278, 1], [1, "r", 84, 271, Oj], [Ok, "r", 83, 270, 1], [Oj, "r", 87, 273, j], [aa, "r", 91, 274, jq], [1, "r", 89, 273, Eo], [Ej, "r", 88, 272, j], [1, "r", 91, 281, Ok], [aa, "r", 92, 282, Ue], [Zq, "r", 88, 280, 1], [ie, "r", 87, 279, 1], [1, "r", 85, 275, 1], [Ue, "r", 84, 273, ie], [j, "r", 84, 272, 1], [Eo, "r", 83, 271, Ue], [1, "r", 82, 270, 1], [Eo, "r", 84, 267, tj], [1, "r", 85, 267, Fj], [Eo, "r", 76, 262, gr], [1, "r", 77, 262, Cn], [1, "r", 88, 268, vq], [1, "r", 78, 262, qk], [Oj, "r", 79, 262, qn], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, _a], [1, "r", 82, 263, _a], [1, "r", 83, 263, 0], [ie, "r", 84, 263, ur], [Oj, "r", 85, 263, gr], [1, "r", 88, 262, Cn], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [aa, "r", 87, 262, qn], [Ue, "r", 86, 262, qk], [Ej, "r", 86, 263, 0], [jq, "r", 87, 263, 0], [1, "r", 91, 262, Cq], [1, "r", 95, 262, 0], [Ej, "r", 94, 262, 0], [Ok, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, ur], [jq, "r", 86, 268, 0], [1, "r", 74, 189, ur], [1, "r", 75, 189, 0], [1, "r", 76, 189, vq], [Ok, "r", 77, 189, 0], [1, "r", 78, 190, Fj], [1, "r", 77, 190, 0], [1, "r", 75, 190, _a], [1, "r", 76, 190, 0], [Ue, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, vq], [1, "r", 76, 191, Fj], [jq, "r", 77, 191, tj], [ie, "r", 75, 191, 0], [aa, "r", 74, 191, Cn], [Ue, "r", 78, 192, gr], [1, "r", 77, 192, qn], [Ok, "r", 76, 192, Fj], [Ok, "r", 75, 192, tj], [Eo, "r", 74, 192, Fj], [1, "r", 73, 191, 0], [Ej, "f", 1, 96, 22, aa], [Ue, "s", 1, 97, 22, jq], [aa, "f", 1, 98, 22, 1], [1, "s", Gr, 99, 22, ie], [1, "s", 1, Vn, 21, Eo], [1, "s", 1, 96, 49, aa], [1, "s", aa, Mk, 50, Oj], [1, "s", Fj, 99, 49, Ue], [ie, "s", _a, 97, 49, 1], [Ok, "f", 1, 98, 49, j], [Ok, "r", 70, 218, 0], [j, "r", 71, 218, 0], [jq, "r", 72, 218, Cn], [aa, "r", 73, 218, Fj], [aa, "r", 74, 219, vq], [j, "r", 73, 219, 0], [Zq, "r", 72, 219, 0], [Eo, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, Gr], [1, "r", 72, 220, _a], [1, "r", 71, 220, 0], [1, "r", 72, 221, ne], [Ok, "r", 71, 221, 0], [ie, "r", 70, 221, 0], [Oj, "r", 69, 221, 0], [ie, "r", 68, 221, 0], [j, "r", 70, 220, 0], [aa, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, Cq], [Oj, "r", 73, 221, qk], [1, "r", 73, 222, 0], [j, "r", 71, 222, 0], [Zq, "r", 72, 222, 0], [1, "r", 74, 221, 0], [Zq, "r", 74, 220, 0], [Ok, "r", 75, 220, 0], [1, "r", 75, 221, vq], [aa, "r", 70, 222, _a], [jq, "r", 69, 222, _a], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, _a], [1, "r", 32, 217, 0], [1, "r", 31, 219, ne], [1, "r", 30, 219, 0], [ie, "r", 29, 219, 0], [1, "r", 27, 219, Cn], [1, "r", 25, 219, qn], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [ie, "r", 26, 218, 0], [1, "r", 27, 218, Gr], [Ok, "r", 28, 218, 0], [Ok, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, vq], [Oj, "r", 26, 217, qn], [Oj, "r", 27, 217, _a], [1, "r", 28, 216, 0], [1, "r", 29, 216, qk], [Ok, "r", 30, 216, Cn], [aa, "r", 31, 218, ur], [Ue, "r", 32, 218, 0], [Eo, "r", 31, 216, 0], [1, "r", 31, 221, 0], [Zq, "r", 31, 220, Cq], [Ok, "r", 30, 220, 0], [1, "r", 29, 220, Gr], [Zq, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [j, "r", 27, 221, Cq], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [ie, "r", 30, 221, 0], [1, "r", 32, 220, 0], [ie, "r", 32, 219, 0], [1, "r", 33, 218, Cn], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, tj], [ie, "r", 77, 239, _a], [1, "r", 76, 239, vq], [jq, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [Ue, "r", 77, 240, ur], [j, "r", 78, 240, 0], [1, "r", 77, 241, qn], [Ue, "r", 76, 241, tj], [1, "r", 75, 241, tj], [1, "r", 75, 240, 0], [Zq, "r", 74, 240, 0], [1, "r", 78, 239, qn], [1, "r", 77, 238, gr], [1, "r", 18, 253, vq], [Ok, "r", zj, 252, 0], [1, "r", xq, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, tj], [Eo, "r", k, 254, 0], [ie, "r", 19, 254, 0], [1, "r", 22, 254, 0], [jq, "r", 18, 254, Gr], [1, "r", 19, 253, 0], [1, "r", 20, 253, qn], [1, "r", 21, 254, qn], [1, "r", 22, 253, 0], [1, "r", 21, bq, 0], [1, "r", 20, 255, 0], [Oj, "r", 19, 255, 0], [Eo, "r", 18, bq, gr], [Oj, "r", Bo, 255, 0], [1, "r", vn, 254, Fj], [1, "r", 22, Tj, vq], [1, "r", bn, 256, 0], [1, "r", Do, 256, tj], [1, "r", 21, 256, 0], [Oj, "r", 39, 270, 0], [1, "r", 40, 270, ur], [1, "r", 41, 270, 0], [1, "r", 43, 270, vq], [1, "r", 44, 270, qn], [j, "r", 46, 270, 0], [Ej, "r", 42, 270, vq], [1, "r", 45, 270, Cq], [1, "r", 44, 269, 0], [jq, "r", 43, 269, 0], [aa, "r", 42, 269, ne], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, Fj], [ie, "r", 44, 271, 0], [jq, "r", 43, 271, vq], [1, "r", 42, 271, 0], [Zq, "r", 41, 271, 0], [Eo, "r", 40, 271, Cn], [1, "r", 39, 271, Fj], [1, "r", 46, 271, Cq], [1, "r", 45, 272, 0], [1, "r", 44, 272, qk], [1, "r", 43, 272, 0], [jq, "r", 42, 272, Gr], [Eo, "r", 19, 284, 0], [jq, "r", Hq, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [ie, "r", 22, 288, ne], [1, "r", 20, 288, gr], [1, "r", Rr, 288, vq], [j, "r", gk, 287, 0], [Eo, "r", Pq, 287, Gr], [1, "r", 16, 286, 0], [ie, "r", _q, 286, 0], [1, "r", Kn, 286, qk], [j, "r", bn, 286, vq], [1, "r", Hq, 286, 0], [Eo, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [Oj, "r", zj, 285, 0], [Ue, "r", Rr, 285, tj], [1, "r", 17, 285, Cn], [1, "r", 19, 287, Cq], [1, "r", 18, 287, Gr], [Ej, "r", Do, 287, Fj], [Ue, "r", 21, 287, Cn], [Eo, "r", 22, 287, Cq], [1, "r", 23, 287, 0], [Ok, "r", 21, 288, 0], [1, "r", m, 288, 0], [Ej, "r", Ea, 288, tj], [Zq, "r", 19, 289, Fj], [1, "r", 21, 289, 0], [j, "r", 22, 289, qn], [1, "r", Hq, 289, 0], [Oj, "r", 23, 288, 0], [1, "r", 24, 287, 0], [Oj, "r", 24, 286, gr], [j, "r", 23, 285, _a], [1, "r", 66, 286, 0], [aa, "r", 64, 287, ne], [Ue, "r", 63, 287, 0], [ie, "r", 60, 287, 0], [Ej, "r", 59, 285, 0], [1, "r", 58, 284, qn], [Ue, "r", 59, 283, 0], [Ej, "r", 65, 283, 0], [1, "r", 64, 283, Cq], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [Eo, "r", 61, 283, 0], [aa, "r", 60, 283, vq], [Ok, "r", 59, 284, 0], [j, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [jq, "r", 61, 287, tj], [Ue, "r", 62, 287, qn], [aa, "r", 61, 286, 0], [Zq, "r", 62, 286, 0], [Oj, "r", 63, 286, 0], [Eo, "r", 64, 286, Fj], [Ej, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [ie, "r", 65, 285, 0], [1, "r", 64, 285, Cq], [1, "r", 63, 285, Cq], [Oj, "r", 62, 285, Fj], [1, "r", 61, 285, Fj], [jq, "r", 60, 285, 0], [1, "r", 60, 284, tj], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, tj], [1, "r", 64, 284, 0], [1, "r", 65, 284, tj], [1, "r", 66, 284, _a], [jq, "r", 65, 287, Fj], [j, "r", 67, 286, Cq], [1, "p", ur, 13, 189, 1], [ie, "p", 0, 32, 184, 1], [1, "p", ne, 47, 191, Oj], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, Oj], [1, "p", 0, 78, 207, 1], [aa, "p", 0, 58, 216, 1], [1, "p", ur, 41, 211, 1], [ie, "p", 0, Rr, 211, 1], [1, "p", 0, 14, 230, 1], [ie, "p", 0, 29, 237, 1], [Zq, "p", Cq, 50, 230, 1], [1, "p", 0, 78, 241, Ue], [aa, "p", vq, 74, 256, 1], [1, "p", Cn, 68, 266, Ej], [1, "p", 0, 48, 259, Ok], [1, "p", 0, 31, 263, 1], [1, "p", Gr, Kn, 274, aa], [Ok, "p", Fj, 33, 283, jq], [aa, "p", ur, 66, 287, 1], [ie, "p", 0, 82, 291, Ue], [1, "p", 0, In, 295, j], [Eo, "p", 0, 45, 294, 1], [Ue, "p", 0, I, 252, 1], [Ej, "p", gr, 79, 227, Oj], [1, "p", tj, 32, 200, 1], [Eo, "p", 0, 64, 200, ie], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, Eo], [Eo, "s", 2, 26, 189, j], [ie, "b", 1, 15, 181, Fj], [Eo, "b", vk, 18, 190, Cq], [1, "b", 2, 29, 193, qn], [1, "t", 3, w, 182, 0], [j, "t", Kj, 13, 195, 0], [1, "t", 4, jk, 183, 0], [1, "t", 5, 10, 184, 0], [Ej, "t", 5, 23, 182, 0], [ie, "t", 4, 30, 187, 0], [ie, "t", 1, 26, 192, 0], [1, "b", j, 25, 188, Gr], [Ue, "s", Ue, 24, 181, 1], [1, "t", co, 33, 183, 0], [Oj, "b", Oj, 36, 189, Cq], [1, "t", vk, 35, 190, 0], [ie, "b", X, 19, 200, ur], [ie, "s", Cq, 28, 194, 1], [1, "s", 1, 32, 196, 1], [Eo, "s", Zq, 36, 183, 1], [j, "s", 2, 38, 184, Ej], [Zq, "s", wr, 10, 192, 1], [j, "s", re, 12, 183, 1], [Ej, "s", Ue, 15, 199, Oj], [j, "b", gr, 12, 202, tj], [1, "t", 2, 13, 203, qn], [1, "t", ea, k, 200, vq], [1, "t", Aq, yo, 194, 0], [Ue, "t", 5, 15, 205, Fj], [1, "t", xj, 29, 200, 0], [1, "t", 3, 28, 201, 0], [aa, "s", zk, 25, 199, aa], [1, "s", 1, 22, 204, jq], [Ok, "g", 2, 25, 205, 1], [1, "b", jq, 27, 216, 0], [j, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, Ok], [1, "s", zk, 35, 215, Ej], [1, "s", Cq, 32, 221, 1], [1, "t", zk, 31, 222, 0], [ie, "t", Yi, 26, 221, Gr], [Oj, "b", 3, 27, 222, 0], [jq, "b", tj, z, 217, ur], [1, "t", Ka, 18, 216, Cn], [j, "t", Yi, 13, 215, Gr], [aa, "t", Jo, 30, 213, qk], [ie, "t", 5, 24, 208, 0], [Ej, "s", 1, 12, 216, 1], [Ue, "s", re, uq, 210, 1], [1, "s", 2, 34, 223, Ej], [1, "b", zk, 36, 218, qn], [1, "t", 4, 40, 206, Gr], [1, "t", 5, 35, 203, Fj], [1, "t", 3, 39, 206, 0], [Eo, "b", Ok, 34, 204, Fj], [Zq, "s", 1, 33, 206, 1], [Ok, "s", 1, 42, 203, 1], [1, "s", ur, 47, 196, Ue], [aa, "b", Zn, 40, 196, 0], [1, "t", hn, 39, 197, qn], [1, "t", 5, 44, 187, Cq], [1, "b", Oj, 46, 181, tj], [1, "t", Zn, 47, 182, qn], [1, "b", qk, 57, 182, Gr], [1, "b", Z, 56, 183, 0], [ie, "t", 4, 55, 184, vq], [Ej, "t", 5, 62, 195, 0], [1, "s", ie, 51, 185, 1], [1, "s", 2, 62, 180, 1], [jq, "s", 2, 61, 188, Ue], [ie, "s", 1, 61, 189, 1], [jq, "s", zk, 48, 195, aa], [Ok, "b", 1, 51, 199, 0], [1, "t", wr, 52, 199, 0], [1, "t", 3, 56, 204, gr], [1, "t", 4, 57, 204, tj], [Zq, "t", ea, 51, 204, Cn], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [aa, "s", 1, 56, 199, 1], [aa, "b", 0, 55, 192, 0], [Oj, "t", Kj, 56, 193, Cn], [aa, "t", 4, 50, 190, qn], [1, "b", 1, 76, 188, ur], [Ej, "t", vk, 75, 188, 0], [1, "t", wr, 73, 192, 0], [Ej, "t", Aq, 72, 191, 0], [Ok, "t", Jn, 78, 193, 0], [1, "b", 0, 79, 192, qn], [1, "s", wr, 79, 190, aa], [jq, "s", 1, 74, 194, 1], [j, "s", 1, 72, 187, 1], [Eo, "s", 0, 74, 183, jq], [1, "s", Zq, 75, 183, 1], [1, "t", 2, 69, 181, Cq], [1, "t", 4, 70, 182, 0], [ie, "t", 5, 69, 180, 0], [Eo, "b", 1, 65, 189, 0], [Ue, "b", 2, 66, 189, _a], [1, "t", nn, 64, 188, 0], [1, "t", Yi, 67, 192, Gr], [1, "b", 2, 85, 183, vq], [Oj, "t", Ok, 84, 184, 0], [1, "t", 4, 81, 180, Gr], [Ue, "t", pr, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", co, 89, 190, ur], [Oj, "s", Ue, 87, 187, 1], [Zq, "s", Zn, 87, 197, j], [Ue, "b", Ej, 84, 200, 0], [ie, "t", 2, 83, 201, 0], [1, "t", ea, 87, 207, Fj], [1, "s", vk, 79, 202, 1], [1, "s", Oj, 80, 203, aa], [aa, "t", vq, 71, 200, vq], [ie, "b", Zn, 72, 201, gr], [jq, "t", 2, 65, 205, 0], [jq, "t", 1, 66, 206, qk], [aa, "t", uj, 63, 209, 0], [jq, "t", 5, 73, 203, qn], [Oj, "s", 0, 70, 207, 1], [jq, "s", 1, 71, 206, 1], [j, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, j], [1, "t", 0, 85, 213, 0], [Ej, "b", 2, 84, 212, qn], [j, "t", 3, 77, 209, 0], [Ej, "t", 4, 83, 216, 0], [Ej, "t", 4, 73, 209, vq], [1, "b", Cq, 86, 222, 0], [Eo, "b", Ka, 87, 221, ne], [Eo, "s", 1, 80, 214, jq], [Oj, "s", vk, 87, 216, 1], [Oj, "s", zk, 84, 224, 1], [1, "s", Ej, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", j, 69, 218, 0], [aa, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, ie], [1, "s", Eo, 77, 221, 1], [1, "b", Zq, 72, 211, 0], [ie, "b", aa, 85, 232, Gr], [1, "t", Zn, 84, 233, qn], [jq, "t", zk, 78, 238, 0], [Ej, "b", 1, 77, 237, 0], [aa, "t", ha, 87, 236, gr], [Ue, "t", 5, 76, 229, qn], [1, "b", wr, 74, 241, 0], [Ej, "s", Fj, 73, 242, 1], [ie, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", zk, 78, 242, 1], [Ok, "b", 1, 66, 230, Gr], [aa, "b", zk, 62, 229, ne], [1, "t", Aq, 67, 231, 0], [1, "t", hn, 62, 228, 0], [1, "t", 5, 64, 233, Gr], [1, "t", re, 65, 234, 0], [1, "t", 2, 51, 220, ne], [jq, "t", Ej, 50, 218, Fj], [Oj, "b", ie, 45, 223, 0], [Zq, "b", 2, 46, 224, qk], [Eo, "t", 4, 49, 218, 0], [ie, "t", hn, 47, 225, 0], [1, "s", Ej, 50, 215, 1], [1, "s", re, 51, 213, 1], [1, "s", Zn, 42, 227, 1], [1, "s", Eo, 44, 227, j], [Ok, "s", 1, 60, 230, Ej], [1, "s", vk, 59, 231, Ue], [Zq, "b", 1, 85, 252, 0], [1, "t", re, 84, 251, qk], [1, "t", 2, 74, 250, qk], [Ok, "t", Gr, 75, 251, 0], [Oj, "b", gr, 83, 246, ur], [1, "t", 3, 82, 247, Fj], [1, "t", uj, 81, 259, 0], [1, "t", Aq, 69, 249, 0], [1, "t", 5, 87, 246, qn], [jq, "t", Jn, 75, 252, ur], [Oj, "s", 1, 79, 257, jq], [1, "s", Zn, 78, 249, 1], [1, "s", 2, 80, 258, Eo], [Ok, "s", 1, 88, 254, 1], [Oj, "s", Eo, 85, 264, 1], [jq, "s", 2, 89, 263, 1], [jq, "s", Zn, 87, 269, 1], [1, "s", Fj, 84, 268, 1], [Zq, "s", Zn, 76, 267, aa], [Ej, "s", 1, 66, 261, Zq], [j, "s", Ok, 87, 274, Ej], [1, "s", 1, 76, 263, Ok], [1, "s", Eo, 59, 251, j], [1, "s", ne, 59, 252, 1], [jq, "t", 2, 86, 265, gr], [Eo, "t", 0, 78, 270, 0], [1, "t", wr, 79, 271, 0], [1, "t", _a, 77, 260, _a], [1, "t", 3, 78, 261, tj], [j, "b", aa, 71, 264, gr], [1, "b", 1, 88, 269, ne], [1, "t", 5, 84, 264, vq], [1, "t", pr, 79, 261, 0], [aa, "t", 5, 72, 265, 0], [1, "t", Jn, 77, 270, Gr], [1, "t", 0, 87, 261, 0], [1, "t", zk, 86, 260, 0], [Ej, "t", 4, 84, bq, 0], [1, "t", 4, 68, T, 0], [jq, "t", Eo, 67, 254, 0], [Ue, "t", 2, 65, 262, 0], [Ej, "t", 1, 57, 260, qn], [aa, "t", vk, 58, 259, ur], [1, "b", Zq, 63, 256, Fj], [Eo, "b", Oj, 52, 248, 0], [1, "t", vk, 53, 248, 0], [jq, "s", Ej, 50, 253, Zq], [Zq, "s", 2, 67, 263, 1], [Eo, "s", 2, 52, 252, 1], [1, "s", wr, 71, 244, Ok], [1, "b", 0, 57, 245, Cq], [Ue, "t", 2, 58, 244, 0], [j, "b", 1, 53, 237, qk], [jq, "t", vk, 54, 237, 0], [j, "t", 2, 41, 238, vq], [ie, "t", 1, 42, 237, ne], [1, "t", ha, 57, 235, 0], [Zq, "t", 5, 60, 246, 0], [1, "t", Jn, 50, 252, vq], [1, "t", Ej, 42, 248, ur], [1, "b", Oj, 43, 249, 0], [1, "b", co, 37, 243, 0], [1, "s", 0, 50, 236, 1], [ie, "s", 2, 39, 247, Oj], [j, "s", vk, 51, 235, jq], [1, "s", vk, 60, 243, 1], [Ue, "s", 2, 36, 240, Ok], [1, "s", 2, 43, 254, 1], [1, "s", j, 42, 254, Ej], [Eo, "t", Ej, 38, 233, 0], [ie, "t", wr, 35, 235, 0], [1, "t", hn, 33, 228, 0], [1, "t", Aq, 33, 245, ne], [1, "t", uj, 43, 235, Cq], [1, "t", 5, 45, 249, ne], [1, "t", Jo, 41, 253, gr], [1, "b", j, ir, 227, 0], [1, "b", 1, 14, 240, gr], [1, "t", 3, 21, 227, Cq], [1, "t", ar, 27, 234, Cq], [1, "t", ar, Nq, 241, 0], [j, "t", ar, 12, 229, ur], [1, "t", 4, 17, 224, 0], [Eo, "t", hn, ma, 231, gr], [1, "t", Yi, 22, 238, 0], [Ue, "t", 4, 11, 239, _a], [1, "t", 1, 22, 243, ur], [aa, "b", 2, 23, 242, Gr], [Oj, "s", Ej, 23, 238, Oj], [1, "s", ie, 22, 228, 1], [1, "s", 2, 24, 228, Eo], [Oj, "s", 2, 21, 236, Ej], [Oj, "s", ur, je, 228, 1], [1, "s", 0, Go, 242, Zq], [1, "s", 1, 15, 244, 1], [aa, "s", Ue, 34, 236, Ok], [aa, "t", Zq, 26, 249, ne], [Ej, "t", 1, 22, 256, 0], [j, "t", re, 23, 255, 0], [Oj, "b", 1, 17, Lr, 0], [1, "b", 2, Iq, uk, 0], [jq, "s", qn, 21, 252, 1], [1, "s", 2, 20, 250, 1], [Oj, "s", re, 23, 259, Zq], [1, "s", ie, pn, 257, 1], [1, "t", jq, 31, 254, 0], [Oj, "t", wr, 32, 254, _a], [1, "t", Aq, 28, 254, ur], [1, "t", Aq, 34, 258, Gr], [Ok, "t", vq, 29, 260, ne], [1, "b", Zn, 30, 261, 0], [Ue, "t", gr, 43, 262, Gr], [1, "t", vk, 42, 263, 0], [1, "t", 4, 46, 264, 0], [Ok, "b", j, 39, 265, Cn], [Eo, "b", 1, 58, 267, qn], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [j, "t", 5, 52, 273, Fj], [ie, "s", Oj, 52, 269, Oj], [1, "s", 1, 41, 272, 1], [Oj, "s", zk, 41, 274, Ue], [Ej, "t", zk, 42, 268, 0], [1, "t", qn, 43, 268, 0], [1, "b", Eo, 46, 272, Cn], [1, "b", 1, 14, 265, 0], [Ok, "t", wr, Nq, 266, 0], [1, "t", Yi, m, 264, Fj], [1, "t", 4, 29, 263, Cn], [Oj, "t", 4, 11, 269, _a], [1, "t", Zq, 29, 271, Gr], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [Ue, "t", 2, Kk, 279, 0], [Zq, "t", qk, 19, 278, 0], [Oj, "t", ar, Pa, 278, Gr], [1, "b", _a, 21, 284, 0], [1, "b", 0, I, 289, gr], [1, "t", zk, k, 283, 0], [1, "t", 2, 19, 290, Cn], [Ok, "t", uj, ca, 283, 0], [1, "t", Aq, 20, 290, ne], [aa, "s", Ej, 16, 285, Ej], [ie, "s", Ok, 24, 288, 1], [aa, "s", re, 26, 287, 1], [1, "s", 2, ka, 278, 1], [1, "s", Zq, 21, 268, Eo], [1, "s", zk, 19, 268, 1], [1, "t", 0, lq, 294, vq], [1, "b", Ue, 13, 295, Gr], [aa, "t", Kj, kr, 291, tj], [Eo, "t", 3, Va, 299, 0], [j, "t", Yi, ma, 287, 0], [Ok, "t", 4, 17, 298, ne], [1, "t", Zq, 27, 294, 0], [Ok, "b", 2, 26, 295, 0], [Ue, "t", 3, 33, 297, 0], [Oj, "b", 1, 48, 278, 0], [1, "b", qk, 46, 280, 0], [Oj, "b", zk, 50, 280, 0], [Eo, "t", 0, 44, 282, ur], [jq, "b", 1, 49, 283, Cq], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, Gr], [Ej, "b", 3, 44, 284, 0], [Ue, "b", 0, 47, 284, qn], [1, "b", re, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", jq, 44, 286, 0], [1, "b", re, 46, 286, 0], [jq, "b", Zq, 42, 285, 0], [ie, "b", 3, 41, 286, ur], [j, "t", 5, 42, 287, 0], [Eo, "b", 1, 42, 278, Cq], [j, "b", zk, 43, 279, 0], [1, "b", qn, 40, 280, vq], [j, "t", 4, 39, 283, qn], [1, "t", hn, 39, 279, Cq], [1, "t", sj, 43, 277, 0], [1, "t", sj, 47, 287, 0], [Ok, "t", 4, 46, 277, 0], [ie, "t", uj, 45, 290, 0], [1, "t", 4, 36, 285, 0], [jq, "t", 3, 35, 284, qk], [j, "t", ar, 36, 272, Cq], [1, "t", Yi, 35, 271, ur], [1, "t", Ok, 29, 279, Fj], [jq, "b", 1, 32, 277, Fj], [ie, "t", 3, 31, 278, 0], [1, "b", wr, 28, 280, qk], [1, "t", Yi, 29, 286, 0], [1, "t", 5, 28, 275, Cq], [1, "t", 3, 37, 292, 0], [Ue, "b", 1, 36, 291, vq], [Zq, "b", ur, 34, 298, 0], [j, "t", Yi, 31, 292, 0], [Oj, "t", Yi, 46, 295, 0], [1, "t", uj, 59, 287, 0], [Eo, "b", aa, 58, 286, vq], [ie, "s", 1, 68, 284, 1], [1, "s", Zn, 70, 286, Ok], [1, "s", Fj, 67, 284, 1], [1, "t", 3, 66, 283, 0], [Ej, "t", 1, 65, 282, 0], [1, "b", ie, 64, 288, Cq], [1, "t", nn, 60, 293, 0], [jq, "t", 1, 61, 294, qn], [1, "b", aa, 76, 294, 0], [Ue, "t", Jo, 75, 295, _a], [1, "t", Jn, 56, 293, ur], [Zq, "t", 5, 59, 281, 0], [Zq, "t", Jn, 67, 291, _a], [aa, "b", 0, 88, 293, Fj], [j, "t", vk, 89, 292, 0], [1, "t", 2, 85, 286, qk], [aa, "t", 4, 88, 289, 0], [1, "t", Aq, 79, 287, 0], [Zq, "b", 1, 84, 285, Cq], [Eo, "t", Z, 75, 284, 0], [1, "b", tj, 75, 278, Fj], [Oj, "t", X, 74, 277, ur], [1, "t", 4, 81, 276, qk], [1, "t", re, 65, 276, ne], [Ej, "b", 1, 66, 275, gr], [1, "g", 0, 45, 261, 1], [Eo, "g", Ue, 39, 258, 1], [1, "g", Cq, 35, 250, j], [1, "g", 2, 22, 247, 1], [ie, "g", 2, 27, 227, Ej], [Ok, "g", zk, 63, 218, 1], [1, "g", jq, 56, 224, Ue], [1, "g", 0, 46, 231, 1], [Ej, "g", 1, 65, 240, Zq], [1, "g", vk, 67, 238, 1], [1, "g", Zn, 79, 232, 1], [Oj, "g", vk, 72, 253, jq], [Ej, "g", 2, 62, 264, 1], [Ue, "g", 2, 28, 267, 1], [Oj, "g", 2, 58, 274, ie], [Eo, "de", re, Fi, 182, ur], [ie, "de", zk, 24, 182, _a], [1, "de", Fj, cn, 185, 0], [1, "de", _a, Bk, 194, Gr], [1, "de", j, 25, 196, 0], [j, "de", Z, 31, 183, Gr], [1, "de", 0, 38, 181, tj], [Ej, "de", 2, 45, 186, Fj], [1, "de", 1, 38, 191, 0], [1, "de", gr, 56, 181, qk], [Oj, "de", Zq, 68, 182, tj], [1, "de", 2, 80, 181, 0], [Ue, "de", 3, 86, 187, Cq], [1, "de", Gr, 84, 193, ur], [ie, "de", 1, 82, 201, ur], [1, "de", zk, 64, 191, qn], [Zq, "de", 2, 72, 200, Cn], [1, "de", 3, 64, 201, tj], [Ok, "de", zk, 76, 209, Cn], [jq, "de", nn, 71, 212, ur], [1, "de", 1, 86, 214, vq], [ie, "de", gr, 57, 208, Gr], [Zq, "de", qk, 41, 203, Cn], [1, "de", 1, 15, 206, ne], [Ej, "de", vk, 25, 209, Fj], [1, "de", 3, 16, 218, _a], [1, "de", 3, 11, 227, Gr], [Ue, "de", 0, 22, 229, _a], [1, "de", Ue, Nq, 239, ne], [Oj, "de", Zn, 24, 238, 0], [jq, "de", 3, 22, 246, 0], [jq, "de", 3, 10, 253, 0], [Oj, "de", j, 18, 258, 0], [1, "de", 1, 28, 261, ne], [1, "de", 1, 14, 267, 0], [aa, "de", 0, 24, 268, 0], [Eo, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", Zn, 30, 272, Fj], [Ok, "de", zk, 29, 281, 0], [1, "de", 2, 15, 284, 0], [jq, "de", 3, bk, 291, 0], [1, "de", 3, 30, 287, ne], [1, "de", Kj, 27, 293, gr], [Oj, "de", Cn, 25, 296, gr], [Zq, "de", Fj, 11, 298, vq], [Zq, "de", Cn, le, 286, vq], [1, "de", re, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [Oj, "de", aa, 48, 287, 0], [jq, "de", 1, 46, 277, 0], [Ue, "de", jq, 53, 278, 0], [1, "de", Kj, 48, 295, 0], [1, "de", 0, 57, 294, Cn], [1, "de", Eo, 65, 290, ur], [Ej, "de", j, 84, 292, Cq], [1, "de", Zn, 77, 295, 0], [1, "de", 2, 84, 287, qn], [Ok, "de", Gr, 74, 279, 0], [1, "de", 3, 65, 274, qk], [1, "de", zk, 71, 267, 0], [Ue, "de", 2, 65, 261, tj], [aa, "de", 2, 47, 264, 0], [Ue, "de", 3, 47, 258, Cn], [j, "de", nn, 53, 251, gr], [j, "de", re, 40, 253, 0], [1, "de", Cn, 35, 244, gr], [1, "de", qn, 37, 233, _a], [aa, "de", Ka, 44, 226, Gr], [Ej, "de", 2, 37, 219, 0], [Ue, "de", 2, 54, 234, 0], [aa, "de", ie, 66, 234, 0], [1, "de", 2, 65, 241, Cn], [jq, "de", gr, 68, 249, 0], [Oj, "de", Z, 78, 257, Cn], [jq, "de", 2, 86, 253, tj], [Ej, "de", wr, 83, 245, gr], [Ue, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, qn], [Zq, "de", 2, 86, 232, 0], [1, "de", _a, 86, 224, 0], [j, "de", 2, 76, 226, gr], [1, "de", 2, 61, 228, _a], [1, "de", 2, 58, 217, qk], [Ue, "de", Gr, 49, 217, Cn], [1, "de", 19, 11, 179, 0], [1, "de", Ja, 17, 180, ne], [aa, "de", 22, Rr, 181, 0], [Ej, "de", la, 30, 184, 0], [1, "de", Yj, 27, 187, 0], [Ok, "de", 19, 30, 195, 0], [1, "de", Ko, fa, 192, 0], [1, "de", 19, 44, 182, qk], [Ue, "de", 19, 49, 182, 0], [1, "de", Qq, 54, 182, Fj], [Eo, "de", 19, 59, 183, vq], [Ue, "de", zj, 56, 186, gr], [jq, "de", Ak, 46, 188, _a], [Ok, "de", wj, 58, 193, 0], [1, "de", Ko, 67, 187, vq], [1, "de", Pr, 65, 192, 0], [Zq, "de", Ak, 71, 180, _a], [Ok, "de", zj, 78, 187, 0], [Eo, "de", Ko, 80, 194, 0], [ie, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, ur], [1, "de", 19, 88, 185, 0], [Ok, "de", 19, 87, 189, 0], [Zq, "de", Ko, 86, 197, 0], [1, "de", 19, 85, 203, Cn], [1, "de", Pr, 74, 200, _a], [1, "de", 19, 70, 202, 0], [jq, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [Oj, "de", 19, 83, 211, _a], [1, "de", 19, 84, 217, Cq], [1, "de", 19, 77, 210, Cq], [1, "de", m, 71, 210, _a], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, qn], [Zq, "de", 19, 66, 204, qk], [1, "de", Ak, 62, 209, _a], [ie, "de", 19, 63, 201, Gr], [Eo, "de", zj, 56, 205, 0], [1, "de", Yj, 49, 199, Cq], [1, "de", zj, 50, 205, Cq], [Zq, "de", Ak, 40, 197, 0], [1, "de", Qq, 38, 198, 0], [ie, "de", 19, 40, 208, 0], [Oj, "de", Yj, 36, 204, _a], [ie, "de", la, 33, 204, gr], [1, "de", Ak, 29, 202, tj], [Eo, "de", 19, 27, 200, 0], [Eo, "de", bn, 26, 193, 0], [Eo, "de", Ak, rk, 201, 0], [1, "de", 19, 20, 199, ur], [Ej, "de", Yj, yo, 196, 0], [Oj, "de", 19, bk, 204, 0], [1, "de", 19, uq, 201, Cq], [jq, "de", bn, 23, 208, _a], [1, "de", wj, 31, 214, 0], [jq, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, qn], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, gr], [1, "de", ca, Io, 215, 0], [j, "de", m, Hk, 212, 0], [1, "de", 19, 15, 224, Cn], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [Ue, "de", m, 22, 240, 0], [1, "de", 19, Yk, 238, Gr], [1, "de", bn, kr, 243, Cq], [1, "de", 19, 24, 244, Fj], [Ok, "de", 19, 24, 250, Fj], [1, "de", 19, 28, 253, ne], [1, "de", Qq, 33, io, vq], [1, "de", 19, 34, 260, Cq], [Ej, "de", wj, 31, 260, tj], [ie, "de", 19, 38, 267, tj], [Ej, "de", 19, 44, 264, 0], [Eo, "de", zj, 43, 261, tj], [jq, "de", Ko, 16, 257, 0], [1, "de", Pr, 22, 258, 0], [1, "de", bn, lq, 253, Cq], [ie, "de", wj, 8, 242, 0], [ie, "de", Ko, Eq, bq, 0], [aa, "de", Yj, 15, 264, 0], [1, "de", 19, 20, 265, 0], [jq, "de", 19, bk, 271, ur], [Oj, "de", zj, le, 272, gr], [j, "de", 19, kr, 277, vq], [Ej, "de", m, 21, 277, 0], [1, "de", ca, 21, 281, 0], [j, "de", Ak, 27, 282, 0], [1, "de", Ko, 29, 278, Gr], [1, "de", wj, 29, 273, vq], [1, "de", Ko, 36, 271, 0], [jq, "de", 19, 8, 278, Gr], [j, "de", la, 11, 286, 0], [jq, "de", 19, 17, 291, 0], [Zq, "de", 19, 14, 294, Cq], [1, "de", la, 8, 292, 0], [1, "de", 19, lq, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", Pr, Go, 301, Cq], [1, "de", Qq, 27, 296, Gr], [1, "de", Qq, 25, 292, 0], [Zq, "de", 19, 23, 301, 0], [jq, "de", la, 28, 301, ur], [1, "de", 19, 35, 297, 0], [Ej, "de", 19, 37, 301, tj], [1, "de", Pr, 43, 301, Cq], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, ne], [1, "de", Ak, 40, 287, 0], [Ej, "de", 19, 50, 301, Gr], [Ue, "de", Ak, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", bn, 71, 301, ur], [j, "de", m, 80, 301, Cn], [1, "de", ca, 87, 301, 0], [Zq, "de", 19, 86, 294, 0], [Ej, "de", zj, 87, 290, 0], [jq, "de", wj, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [j, "de", m, 66, 288, 0], [1, "de", bn, 58, 288, Cn], [1, "de", zj, 67, 282, qn], [1, "de", Ak, 61, 281, tj], [1, "de", 19, 60, 295, 0], [Oj, "de", 19, 50, 282, Fj], [Eo, "de", Pr, 47, 283, Cq], [Eo, "de", 19, 48, 281, qk], [Ok, "de", Ko, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, Fj], [1, "de", 19, 42, 288, 0], [Ue, "de", wj, 52, 281, 0], [1, "de", Qq, 50, 275, vq], [1, "de", 19, 39, 277, 0], [j, "de", 19, 38, 284, 0], [Eo, "de", la, 51, 285, Fj], [aa, "de", Ko, 38, 278, 0], [1, "de", Yj, 47, 272, ne], [Eo, "de", bn, 44, 267, 0], [j, "de", ca, 76, 280, 0], [Zq, "de", 19, 78, 272, 0], [Ej, "de", 19, 68, 275, vq], [Oj, "de", la, 70, 265, ur], [aa, "de", Yj, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", m, 56, 266, 0], [j, "de", zj, 55, 260, _a], [1, "de", la, 59, 258, ne], [1, "de", Pr, 62, 255, 0], [1, "de", 19, 67, 253, Cn], [1, "de", 19, 69, 256, qn], [1, "de", Pr, 44, 253, 0], [Ue, "de", Ak, 44, 250, 0], [j, "de", 19, 36, 245, Fj], [Ue, "de", 19, 39, 239, 0], [ie, "de", 19, 42, 234, _a], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, qk], [Zq, "de", 19, 46, 222, 0], [Ue, "de", 19, 51, 218, 0], [1, "de", ca, 68, 218, 0], [j, "de", 19, 74, 224, 0], [Zq, "de", bn, 76, 218, 0], [Oj, "de", zj, 84, 221, 0], [Ue, "de", Ak, 88, 223, 0], [1, "de", 19, 76, 230, qk], [Eo, "de", m, 86, 234, Cn], [1, "de", bn, 79, 237, _a], [Zq, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, qn], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [Ue, "de", bn, 84, 254, 0], [Zq, "de", 19, 86, 251, tj], [1, "de", ca, 85, 260, 0], [jq, "de", la, 79, 260, 0], [1, "de", 19, 76, 251, _a], [ie, "de", m, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, qk], [1, "de", Qq, 87, 271, 0], [Ue, "de", m, 82, 277, Cq], [1, "de", Pr, 87, 284, 0], [Eo, "de", Yj, 87, 237, qk], [1, "de", 19, 88, 179, 0], [Ej, "de", 19, 50, 191, 0], [Eo, "de", 19, 52, 221, 0], [Ej, "de", Qq, 34, 234, 0], [ie, "de", Yj, 27, 233, qk], [1, "de", bn, 37, 293, 0], [1, "de", 29, mk, 181, Cn], [1, "de", 29, nk, 180, 0], [Ue, "de", 30, 13, 186, Cq], [1, "de", 31, 24, 183, ne], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, vq], [1, "de", 29, 45, 183, Cq], [jq, "de", 30, 48, 183, tj], [Ue, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [Oj, "de", 29, 63, 196, vq], [1, "de", 29, 54, 194, 0], [Ej, "de", 30, 79, 189, 0], [jq, "de", 30, 87, 182, 0], [Ok, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [aa, "de", 29, 85, 202, ne], [1, "de", 31, 82, 203, qk], [Zq, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, Gr], [1, "de", 30, 88, 220, 0], [Ok, "de", 30, 78, 229, gr], [ie, "de", 30, 73, 223, 0], [Ej, "de", 29, 74, 217, Gr], [Ej, "de", 29, 67, 217, 0], [aa, "de", 30, 72, 208, Cq], [ie, "de", 30, 73, 199, ur], [1, "de", 30, 65, 207, 0], [Ej, "de", 29, 63, 210, Cn], [Oj, "de", 29, 50, 204, _a], [j, "de", 30, 41, 205, _a], [1, "de", 29, 35, 205, ur], [Eo, "de", 30, 27, 202, _a], [1, "de", 30, 20, 201, gr], [1, "de", 29, 10, 203, 0], [1, "de", 29, Q, 196, Gr], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, tj], [Eo, "de", 29, 32, 212, Fj], [aa, "de", 30, 28, 214, 0], [aa, "de", 31, 24, 218, ne], [1, "de", 29, 36, 219, 0], [Ej, "de", 29, 37, 217, ur], [1, "de", 29, 52, 217, ne], [1, "de", 29, 59, 217, 0], [Ue, "de", 29, 69, 231, gr], [Oj, "de", 29, 64, 242, 0], [Ej, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, qn], [1, "de", 30, 58, 261, Cq], [Ue, "de", 30, 73, 276, 0], [ie, "de", 30, 64, 276, 0], [jq, "de", 30, 82, 285, 0], [Ok, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, qk], [aa, "de", 30, 45, 296, 0], [ie, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [Eo, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, Fj], [1, "de", 29, 28, 296, ur], [1, "de", 29, de, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [jq, "de", 30, Qa, 286, qn], [ie, "de", 30, 15, 279, 0], [j, "de", 30, oj, 269, gr], [1, "de", 30, 21, 259, Fj], [Zq, "de", 30, 12, De, Gr], [Oj, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [j, "de", 30, 28, 235, 0], [aa, "de", 30, sk, 226, 0], [1, "de", 30, 39, 231, gr], [jq, "de", 30, 61, 226, 0], [1, "r", 96, 262, ne], [Ue, "r", 97, 262, 0], [1, "r", 98, 262, 0], [aa, "r", 97, 270, Fj], [1, "r", 97, 271, 0], [j, "r", 97, 272, 0], [1, "r", 97, 273, Cq], [Oj, "r", 97, 274, 0], [ie, "r", 97, 275, _a], [1, "r", 97, 276, gr], [1, "r", 97, 277, tj], [1, "r", 97, 278, 0], [Eo, "r", 98, 270, tj], [aa, "r", 98, 271, 0], [jq, "r", 98, 272, vq], [1, "r", 98, 273, qk], [1, "r", 98, 274, qn], [Ok, "r", 98, 275, Gr], [1, "r", 98, 276, gr], [1, "r", 98, 277, 0], [1, "r", 98, 278, Gr], [1, "r", 96, 283, gr], [1, "r", 97, 283, 0], [1, "r", 97, 284, ur], [Zq, "r", 97, 285, 0], [Eo, "r", 98, 283, 0], [j, "r", 98, 284, vq], [j, "r", 98, 285, vq], [1, "r", 96, 270, 0], [1, "r", 96, 271, tj], [1, "r", 96, 272, Cq], [Ok, "r", 96, 273, tj], [1, "r", 96, 274, 0], [jq, "r", 96, 275, ur], [1, "r", 96, 276, ne], [Zq, "r", 96, 277, tj], [Ok, "r", 96, 278, 0], [jq, "r", 44, 248, gr], [1, "de", 16, 94, 290, vq], [1, "de", Pq, 94, 252, _a], [1, "de", Pq, 94, 228, ur], [1, "de", Hk, 94, 200, 0], [Eo, "r", 95, 282, Ej], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [j, "r", 91, 282, ie], [Eo, "r", 89, 281, Ok], [1, "r", 85, 276, Ue], [1, "r", 85, 277, 1], [1, "r", 86, 278, j], [1, "p", ur, 85, 279, 1], [Ej, "r", 86, 279, Ue], [1, "r", 87, 280, 1], [j, "r", 96, 281, Fj], [Ok, "r", 97, 281, qk], [jq, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [aa, "r", 68, 261, ie], [1, "fo", 1, 94, 168, Fj], [1, "fo", 2, 94, 151, 0], [Ue, "fo", 1, 94, 138, 0], [1, "fo", Ue, 93, 124, vq], [1, "fo", 1, 94, 129, 0], [1, "fo", Ue, 93, 113, 0], [Ej, "fo", j, 94, 102, 0], [jq, "fo", 1, 94, 93, ne], [Ej, "fo", Ej, 93, 90, Cn], [Ue, "fo", 1, 94, 79, 0], [j, "fo", 1, 94, 76, Gr], [1, "fo", 1, 93, 70, 0], [j, "fo", aa, 93, 63, Cn], [1, "fo", jq, 94, 53, 0], [jq, "fo", Eo, 93, Va, 0], [Ej, "fo", Oj, 85, 8, 0], [aa, "fo", Ue, 94, 12, 0], [Oj, "fo", ie, 66, mk, 0], [Zq, "fo", 1, 69, rn, ne], [1, "fo", zk, 68, 14, gr], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, tj], [1, "fo", vk, 94, 14, 0], [ie, "fo", Zn, 87, 9, ur], [Eo, "fo", 2, 71, _j, ne], [1, "fo", 2, 90, 12, 0], [1, "fo", wr, 91, 13, 0], [1, "fo", Zq, 74, 12, vq], [ie, "fo", 2, 72, 12, 0], [jq, "fo", 2, 75, je, 0], [1, "fo", zk, 74, 15, 0], [Ok, "fo", 2, 84, 12, Cq], [ie, "fo", 2, 81, Wn, ur], [1, "fo", 1, 84, Yk, vq], [aa, "fo", Ej, 84, 19, 0], [1, "fo", 1, 11, 9, ur], [1, "fo", Oj, Oq, 14, 0], [1, "fo", 1, 8, 22, Gr], [Ej, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, gr], [Ue, "fo", 2, 8, 24, 0], [1, "fo", vk, Ca, 21, 0], [Zq, "fo", vk, 31, ia, tj], [Zq, "fo", 2, 33, 27, 0], [Zq, "fo", vk, Mn, 34, 0], [1, "fo", zk, ta, Pr, 0], [1, "fo", 1, Fi, 10, 0], [Ej, "fo", wr, pn, rn, 0], [Eo, "fo", 2, ci, 11, Fj], [Zq, "fo", zk, 9, 9, Fj], [Ue, "fo", zk, 9, 10, 0], [1, "fo", vk, 9, Io, 0], [Ue, "fo", zk, 10, 23, Cn], [1, "fo", zk, 34, 29, qk], [Oj, "fo", 2, 27, 18, 0], [Oj, "fo", 2, 25, 21, 0], [j, "fo", zk, Pj, Bn, 0], [ie, "fo", wr, 18, 21, qn], [1, "fo", Zn, 29, Oo, ur], [jq, "fo", 2, 13, Vq, 0], [Ok, "fo", 2, Ma, 38, ur], [1, "fo", zk, 21, 39, 0], [Ok, "fo", Zn, 84, 26, tj], [Oj, "fo", 2, 77, 25, qn], [1, "fo", 2, 86, 35, 0], [Eo, "fo", 1, 70, 35, 0], [1, "fo", vk, 72, 36, 0], [1, "fo", wr, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", Zn, 65, 40, Cq], [ie, "fo", Zn, 92, 32, 0], [j, "fo", 2, 90, 28, vq], [Ok, "de", 22, 25, 266, 0], [1, "de", 22, Ua, 206, qn], [Ej, "de", la, Dn, 184, 0], [1, "de", 19, 22, 183, vq], [1, "de", 19, 35, 188, 0], [jq, "de", ca, 36, 192, 0], [1, "de", Yj, 50, 277, Cn], [j, "de", ca, 35, 279, Cq], [ie, "t", 4, rr, 178, 0], [Ok, "t", j, 7, 179, vq], [1, "t", 3, 7, 180, Cq], [1, "t", wr, Ck, 181, 0], [Oj, "t", 5, 7, 182, Gr], [1, "t", uj, or, 183, qn], [1, "t", nn, 7, 184, qn], [1, "t", ea, pa, 185, 0], [Ej, "t", 2, pa, 186, 0], [Zq, "t", ie, 7, 187, 0], [Zq, "t", 4, rr, 188, 0], [1, "t", co, 7, 189, 0], [Ue, "t", ha, 7, 190, 0], [Ok, "t", Zq, or, 191, ne], [Ok, "t", 3, pa, 192, 0], [Ej, "t", 4, 7, 193, 0], [1, "t", co, rr, 194, 0], [Eo, "t", 5, or, 195, ne], [1, "t", 2, qq, 196, ur], [jq, "t", 4, 7, 197, 0], [ie, "b", 2, $j, 198, 0], [1, "t", 4, Uk, 199, _a], [1, "t", 2, 7, 200, Gr], [1, "t", Jn, Qr, 201, 0], [1, "t", 2, rr, 202, Gr], [j, "t", 4, 7, 203, ne], [Oj, "t", re, 7, 204, 0], [Ok, "t", 5, pa, 205, Cn], [1, "t", 2, 7, 206, Gr], [ie, "t", Oj, pa, 207, 0], [Ue, "t", 4, or, 208, 0], [1, "t", 3, Co, 209, 0], [1, "t", 1, pa, 210, 0], [1, "b", 0, Ck, 211, _a], [ie, "t", ar, 7, 212, 0], [1, "t", Yi, Ck, 213, Fj], [ie, "t", 3, 7, 214, Cn], [aa, "t", 5, Uk, 215, 0], [1, "t", 5, 7, 216, qn], [Ok, "t", 3, 7, 217, ur], [Eo, "t", 1, 7, 218, 0], [Oj, "t", hn, Co, 219, Cq], [1, "b", wr, or, 220, Fj], [1, "t", 1, Co, 221, 0], [1, "t", wr, 7, 222, 0], [ie, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", jq, 7, 225, tj], [Ue, "t", Aq, rr, 226, _a], [1, "t", re, rr, 227, ur], [Oj, "t", 5, qq, 228, vq], [ie, "t", Kj, 7, 229, 0], [ie, "t", Ue, 7, 230, ne], [Ue, "t", uj, 7, 231, Cq], [1, "b", wr, qq, 232, Fj], [1, "t", 5, 7, 233, 0], [1, "t", 1, pa, 234, 0], [1, "t", 3, Qr, 235, 0], [1, "t", 4, 7, 236, Gr], [1, "t", wr, 7, 237, 0], [Oj, "t", Jo, Ck, 238, 0], [1, "b", Z, 7, 239, Cq], [1, "t", wr, 7, 240, qk], [1, "t", ie, 7, 241, 0], [Zq, "t", 2, 7, 242, ur], [1, "t", 4, Uk, 243, 0], [jq, "t", 3, y, 244, 0], [1, "t", 4, Oq, 245, 0], [1, "t", 1, qq, 246, 0], [1, "b", ur, qq, 247, Fj], [1, "t", 3, Ck, 248, Cq], [Ue, "t", Jn, Oq, 249, 0], [1, "t", 2, pa, 250, 0], [1, "t", 1, 7, 251, Cn], [1, "t", 4, 7, 252, tj], [1, "t", Ka, pa, 253, 0], [Eo, "t", Ui, y, 254, 0], [ie, "t", 1, Co, 255, tj], [1, "t", 4, pa, 256, 0], [Zq, "t", 1, 7, 257, vq], [1, "t", wr, rr, 258, tj], [jq, "t", 5, 7, 260, vq], [Eo, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", X, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, gr], [1, "t", vk, Co, 265, qn], [j, "t", Jo, rr, 266, _a], [1, "t", 2, Oq, 267, Cn], [Oj, "t", Zn, 7, 269, 0], [1, "b", zk, 7, 268, tj], [1, "t", 4, 7, 270, Cn], [1, "t", 1, or, 271, tj], [1, "t", Jo, 7, 272, 0], [Ok, "b", 2, Co, 273, 0], [1, "t", ea, qq, 274, 0], [1, "t", 2, 7, 275, Cn], [1, "t", 5, y, 276, 0], [Ok, "t", sj, rr, 277, Cn], [Ue, "t", Zn, 7, 278, tj], [1, "t", Ue, 7, 279, Fj], [jq, "t", hn, 7, 280, qn], [1, "b", Ej, Oq, 281, _a], [1, "t", 3, rr, 282, 0], [ie, "t", 4, y, 283, qn], [aa, "t", Ej, Oq, 284, 0], [jq, "t", 3, qq, 285, gr], [1, "t", xj, Oq, 286, 0], [Ue, "t", 4, 7, 288, qn], [ie, "t", Zn, y, 287, 0], [Ue, "b", 0, rr, 289, 0], [jq, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, Gr], [1, "t", xj, Uk, 292, 0], [ie, "t", co, $j, 293, 0], [1, "t", 1, 7, 294, gr], [1, "t", ea, Uk, 295, 0], [1, "t", 3, rr, 296, Cq], [1, "t", 1, Ck, 297, 0], [Ue, "t", 4, y, 298, Cn], [1, "t", 2, Co, 299, ur], [1, "b", 0, 7, 300, qk], [1, "t", vk, 7, 301, gr], [1, "r", 196, 271, 0], [ie, "r", 199, 274, ur], [aa, "r", 167, 238, 0], [Ej, "r", 171, 240, Cn], [1, "r", 189, 207, 0], [1, "r", 192, 209, ur], [jq, "r", 198, 271, qk], [1, "r", 197, 271, Cq], [1, "r", 198, 272, 0], [1, "r", 197, 272, vq], [Oj, "r", 196, 272, Cq], [Zq, "r", 195, 272, 0], [Ok, "r", 199, 272, 0], [Oj, "r", 199, 273, 0], [1, "r", 198, 273, qk], [jq, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [Oj, "r", 195, 273, Cq], [1, "r", 196, 274, ne], [j, "r", 198, 275, Cn], [1, "r", 197, 275, tj], [jq, "r", 200, 274, Fj], [1, "r", 200, 273, tj], [1, "r", 199, 275, qk], [Eo, "plm", wr, 200, 272, 0], [Ej, "plm", ie, 195, 271, 0], [Oj, "plm", 0, 199, 268, _a], [1, "plm", 0, 193, 277, vq], [1, "plm", 1, 199, 276, 0], [1, "s", j, 200, 275, ie], [ie, "s", 1, 194, 272, Eo], [Ok, "s", 2, 193, 270, 1], [j, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, Ok], [Eo, "m", zk, 220, 298, Zq], [1, "m", 1, 219, 292, j], [1, "m", Ok, 214, 297, ie], [Eo, "r", 168, 238, 0], [Ej, "r", 169, 238, _a], [1, "r", 170, 238, ur], [Ej, "r", 171, 239, Cq], [jq, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, qn], [1, "r", 166, 239, gr], [1, "r", 166, 240, Cn], [1, "r", 167, 240, 0], [Zq, "r", 168, 240, 0], [1, "r", 169, 240, ne], [Zq, "r", 170, 240, 0], [Oj, "r", 168, 241, 0], [1, "r", 169, 241, 0], [Zq, "r", 170, 241, vq], [1, "r", 171, 241, vq], [Oj, "plm", 2, 171, 238, tj], [Ue, "plm", 1, 166, 238, 0], [Eo, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, Cq], [1, "plm", Fj, 165, 243, 0], [jq, "plm", 0, 171, 235, 0], [ie, "plm", vq, 174, 241, 0], [aa, "s", 1, 165, 239, Ok], [aa, "s", ie, 172, 241, 1], [1, "s", Gr, 170, 237, Eo], [1, "s", Zq, 171, 237, j], [1, "s", Zn, 174, 236, Zq], [1, "s", zk, 162, 241, 1], [jq, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [Ue, "r", 190, 207, qn], [1, "r", 191, 207, 0], [1, "r", 192, 208, tj], [Eo, "r", 191, 208, Cq], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [Oj, "r", 188, 208, 0], [Zq, "r", 189, 209, ne], [Ok, "r", 190, 209, 0], [aa, "r", 191, 209, Gr], [Ej, "r", 188, 209, 0], [j, "r", 190, 210, qn], [Oj, "r", 191, 210, 0], [Ue, "r", 192, 210, Gr], [Ej, "plm", 2, 189, 210, 0], [1, "plm", zk, 192, 205, Cn], [Ue, "plm", 1, 192, 207, 0], [ie, "plm", ne, 193, 210, Gr], [Zq, "plm", gr, 187, 208, 0], [Ej, "plm", ne, 197, 206, 0], [Zq, "plm", gr, 191, 213, ur], [1, "plm", 0, 190, 204, Fj], [Ok, "s", Eo, 188, 207, 1], [Ej, "s", Eo, 190, 211, ie], [Zq, "s", Zn, 188, 213, Oj], [1, "s", 2, 187, 205, Ue], [Eo, "s", 0, 194, 210, 1], [1, "s", gr, 198, 207, 1], [Eo, "s", 1, 193, 204, jq], [1, "s", Ue, 193, 213, 1], [1, "s", 2, 198, 212, Ue], [1, "s", 2, 182, 208, Ok], [jq, "s", 1, 204, 271, 1], [j, "s", 0, 203, 272, 1], [1, "s", Cn, 189, 275, Zq], [Ue, "s", 0, 195, 265, Ue], [Ue, "s", zk, 196, 264, Oj], [1, "s", zk, 186, 274, 1], [Ok, "s", re, 197, 280, jq], [Zq, "s", qn, 217, 282, aa], [1, "s", ie, 214, 285, jq], [1, "s", j, 214, 274, 1], [1, "s", ie, 203, 282, ie], [Ej, "s", Ej, 205, 290, Zq], [1, "s", ur, 207, 292, 1], [Eo, "s", qk, 197, 297, Oj], [Ok, "s", Fj, 184, 287, 1], [1, "s", 2, 213, 289, Ej], [Ej, "s", wr, 196, 294, Ue], [Oj, "s", 2, 187, 286, 1], [1, "s", jq, 192, 289, Ok], [1, "s", j, 189, 299, Ok], [1, "s", ne, 213, 273, ie], [1, "g", 2, 212, 278, 1], [jq, "g", 1, 200, 288, Ej], [j, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", tj, 178, 295, 1], [Ej, "s", qk, 167, 281, 1], [ie, "s", Gr, 175, 263, 1], [1, "s", Ok, 176, 293, ie], [1, "s", Eo, 163, 285, ie], [Zq, "s", Ok, 177, 266, Ok], [1, "s", ie, 161, 272, Ue], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [aa, "c", 0, 217, 283, Ue], [Ok, "c", 0, 220, 287, Ue], [aa, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, Zq], [Zq, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [aa, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, Eo], [Oj, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, ie], [1, "c", gr, 208, 265, jq], [Ue, "c", ne, 169, 292, ie], [Eo, "s", 1, 158, 294, j], [Ej, "s", 0, 151, 297, Zq], [Ue, "s", qk, 147, 288, 1], [Ue, "c", 0, 150, 289, 1], [Eo, "c", 0, 160, 282, 1], [Ok, "c", ne, 146, 274, 1], [1, "c", vq, 167, 264, 1], [1, "c", 0, 165, 267, Ok], [Ej, "g", Gr, 189, 257, aa], [1, "g", 1, 197, 248, aa], [Ue, "g", re, 170, io, 1], [1, "g", zk, 212, 234, jq], [1, "g", 2, 189, 230, aa], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, ie], [1, "s", Ej, 153, 257, 1], [ie, "s", 0, 158, 255, j], [Ok, "s", 0, 184, 248, 1], [Ej, "s", 0, 212, 254, Ue], [1, "s", Ej, 203, 249, Zq], [1, "s", 2, 204, 252, 1], [Oj, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, Zq], [jq, "s", 0, 196, 227, 1], [Zq, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, ie], [1, "s", jq, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", Ej, 213, 223, 1], [j, "s", wr, 182, 222, 1], [Ej, "s", zk, 211, 226, Eo], [ie, "s", Zn, 214, 214, 1], [Eo, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [j, "s", Zq, 210, 198, 1], [1, "s", 1, 198, 196, Eo], [1, "s", 2, 208, 199, 1], [1, "s", wr, 187, 192, 1], [1, "s", ie, 179, 198, ie], [Ok, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", Ej, 159, 193, 1], [ie, "s", 1, 149, 206, 1], [Oj, "s", Zq, 164, 209, Ej], [Ej, "s", 2, 165, 210, Ok], [1, "s", wr, 161, 191, 1], [1, "s", j, 162, 224, 1], [jq, "s", ur, 150, 236, 1], [jq, "s", 1, 149, 239, Ue], [Zq, "s", 2, 153, 236, j], [1, "s", wr, 160, 223, j], [1, "s", 2, 151, 207, ie], [1, "s", 2, 147, 220, 1], [Zq, "s", 2, 145, 265, 1], [Ej, "s", wr, 145, 285, Eo], [1, "c", 0, 152, 266, Oj], [jq, "c", Gr, 185, 271, j], [Ok, "c", Cn, 210, 254, 1], [1, "c", 0, 209, Na, 1], [1, "c", 0, 198, 254, 1], [Zq, "c", 0, 213, 246, 1], [Zq, "c", Cn, 216, 237, Oj], [aa, "c", 0, 204, 240, j], [1, "c", 0, 196, 234, 1], [1, "c", _a, 188, 238, 1], [1, "c", Gr, 182, 245, Ok], [1, "c", 0, 173, 252, 1], [1, "c", Gr, 153, 248, 1], [1, "c", 0, 158, 233, jq], [1, "c", 0, 147, 230, ie], [1, "c", 0, 151, 224, ie], [1, "c", Fj, 157, 214, ie], [1, "c", 0, 167, 219, 1], [Zq, "c", vq, 171, 208, jq], [Ej, "c", 0, 179, 219, 1], [ie, "c", 0, 176, 229, Ej], [1, "c", 0, 195, 221, 1], [aa, "c", vq, 207, 222, Eo], [1, "c", 0, 214, 207, 1], [aa, "c", gr, 205, 210, 1], [1, "c", 0, 204, 196, jq], [1, "c", 0, 214, 196, Ej], [1, "c", vq, 190, 199, jq], [aa, "c", 0, 184, 194, jq], [1, "c", qn, 172, 199, jq], [1, "c", 0, 161, 204, Zq], [1, "c", 0, 157, 196, 1], [Eo, "c", 0, 149, 194, 1], [1, "c", _a, 147, 208, 1], [1, "c", Cn, 207, 274, 1], [ie, "c", ur, 217, 258, 1], [1, "c", Cn, 201, 260, 1], [j, "c", qn, 178, 276, jq], [1, "c", 0, 187, 265, 1], [1, "s", Oj, 204, 260, 1], [Eo, "s", 1, 216, 260, 1], [Ue, "s", aa, 187, 255, Oj], [1, "s", 2, 189, 254, Ok], [1, "s", 2, 212, 257, Eo], [jq, "s", re, 182, 286, ie], [1, "s", re, 169, 280, 1], [1, "s", 2, 217, 273, 1], [Eo, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [jq, "s", vk, 176, 267, 1], [1, "s", 2, 215, 251, Eo], [aa, "fod", 1, 221, 282, Cq], [Ej, "fod", Eo, 222, 284, Gr], [1, "fod", 1, 221, 290, 0], [aa, "fod", Eo, 222, 294, 0], [ie, "fod", aa, 221, 297, 0], [Ej, "fod", Eo, 223, 298, _a], [j, "fod", j, 222, 300, 0], [1, "fod", aa, 218, 301, ur], [1, "fod", 1, 217, 299, gr], [ie, "fod", Ej, 215, 301, 0], [1, "fod", 1, 212, 300, Cq], [Ue, "fod", 1, 206, 300, qn], [1, "fod", Eo, 209, 301, Cn], [1, "fod", Zq, 204, 299, Cq], [1, "fod", Oj, 202, 301, 0], [1, "fod", 1, 199, 301, _a], [ie, "fod", aa, 222, 282, gr], [ie, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, ur], [1, "fod", Zq, 215, 291, 0], [1, "fod", 1, 216, 286, Gr], [1, "fod", 1, 214, 292, Gr], [jq, "fod", Oj, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, Cq], [ie, "fod", Eo, 212, 281, 0], [j, "fod", 1, 219, 278, gr], [j, "fod", 1, 219, 282, qk], [1, "fod", j, 205, 286, 0], [1, "fod", Oj, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [ie, "fod", re, 213, 282, 0], [j, "fod", vk, 213, 291, 0], [1, "fod", Zn, 216, 289, ne], [1, "fod", 2, 219, 289, 0], [1, "fod", Zn, 218, 285, _a], [j, "fod", zk, 220, 283, 0], [1, "fod", Zn, 211, 283, 0], [Zq, "fod", Zn, 215, 281, qn], [j, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, Cn], [1, "fod", wr, 211, 296, 0], [Oj, "fod", Zn, 215, 294, 0], [1, "fod", 2, 212, 298, ne], [1, "fod", 2, 203, 294, 0], [jq, "fod", vk, 204, 288, tj], [1, "fod", Zn, 200, 294, Cq], [j, "fod", zk, 198, 297, ne], [j, "fod", wr, 202, 299, qk], [1, "fod", wr, 200, 299, 0], [aa, "fod", wr, 220, 300, ur], [1, "fod", zk, 220, 295, 0], [aa, "fod", 2, 220, 292, Cn], [j, "fod", 2, 219, 287, 0], [Zq, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, Cq], [1, "fod", re, 211, 289, 0], [j, "fod", 2, 212, 290, 0], [1, "fod", wr, 195, 296, 0], [j, "fod", 2, 196, 299, 0], [Ej, "fod", 2, 194, 300, 0], [1, "fod", vk, 195, 300, Gr], [aa, "fod", re, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [Zq, "fod", 0, 218, 290, ne], [aa, "fod", ur, 212, 294, Cn], [aa, "fod", Oj, 213, 295, ur], [ie, "fod", 1, 217, 292, 0], [Ok, "fod", 1, 218, 288, 0], [j, "fod", 1, 210, 295, Gr], [1, "fod", ie, 213, 292, 0], [j, "fod", 1, 212, 289, 0], [j, "fod", Ok, 205, 295, Gr], [1, "fod", zk, 206, 296, ur], [1, "fod", wr, 208, 296, 0], [1, "fod", 2, 221, 288, Cn], [Oj, "fod", 2, 209, 299, 0], [Ue, "fod", 2, 211, 291, 0], [1, "fod", j, 203, 275, ur], [j, "fod", 1, 204, 272, 0], [1, "fod", zk, 205, 273, 0], [1, "fod", wr, 204, 276, 0], [1, "fod", vk, 202, 276, 0], [1, "fod", Zn, 199, 277, 0], [Oj, "fod", Zn, 202, 273, qk], [Eo, "fod", 2, 199, 270, Gr], [1, "fod", Zn, 194, 274, 0], [Oj, "fod", 2, 194, 277, 0], [1, "fod", Oj, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", Zn, 194, 265, Cn], [Eo, "fod", vk, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", vk, 195, 274, 0], [1, "fod", vk, 200, 271, qn], [1, "fod", Ue, 168, 243, 0], [1, "fod", j, 175, 240, Cq], [1, "fod", Ej, 169, 234, 0], [jq, "fod", Ue, 162, 235, 0], [1, "fod", re, 169, 236, 0], [1, "fod", 2, 171, 234, ne], [Ue, "fod", re, 165, 238, vq], [aa, "fod", 2, 173, 241, _a], [Oj, "fod", vk, 174, 238, gr], [Ej, "fod", Zn, 176, 240, 0], [1, "fod", 2, 169, 244, Cq], [Zq, "fod", 2, 166, 243, Cn], [Ej, "fod", re, 162, 236, Cq], [Oj, "fod", wr, 164, 235, vq], [1, "fod", vk, 162, 233, Fj], [1, "fod", vk, 163, 236, 0], [Oj, "fod", vk, 174, 242, gr], [aa, "fod", zk, 171, 243, gr], [1, "fod", Ok, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", Zq, 186, 206, gr], [j, "fod", 1, 197, 207, Fj], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [Oj, "fod", vk, 194, 204, qk], [1, "fod", vk, 187, 206, ne], [1, "fod", re, 186, 204, 0], [1, "fod", re, 189, 214, qn], [Zq, "fod", 2, 189, 213, ur], [ie, "fod", re, 193, 215, gr], [1, "fod", zk, 194, 214, 0], [Zq, "fod", re, 187, 215, qk], [1, "fod", 2, 193, 209, ne], [1, "fod", wr, 189, 211, Fj], [1, "fod", Zn, 187, 209, vq], [1, "fod", vk, 187, 207, 0], [1, "fod", zk, 191, 205, 0], [Ej, "fod", 2, 189, 203, 0], [Ej, "cs", 2, 224, 176, j], [1, "cs", 0, 224, 177, Ej], [1, "cs", Qk, 224, 178, j], [1, "cs", 2, 224, 179, 1], [j, "cs", 1, 224, 180, Zq], [1, "cs", vk, 224, 181, 1], [aa, "cs", 0, 224, 182, 1], [Ue, "cs", vk, 224, 183, Zq], [1, "cs", Cq, 224, 184, Ok], [j, "cs", Qk, 224, 185, 1], [1, "cs", zk, 224, 186, 1], [Ok, "cs", Fj, 224, 187, j], [1, "cs", vk, 224, 188, 1], [Ej, "cs", 0, 224, 189, Ue], [Ej, "cs", 1, 224, 190, Oj], [1, "cs", re, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [Eo, "cs", vk, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, Ue], [1, "cs", 2, 224, 196, jq], [1, "cs", 0, 224, 197, Oj], [jq, "cs", Ka, 224, 198, Ok], [Oj, "cs", Zn, 224, 199, Zq], [aa, "cs", 1, 224, 200, 1], [aa, "cs", wr, 224, 201, aa], [Ej, "cs", nn, 224, 202, Oj], [1, "cs", gr, 224, 203, 1], [j, "cs", Oj, 224, 204, jq], [Ok, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, ie], [1, "cs", 3, 224, 208, jq], [1, "cs", 2, 224, 209, 1], [aa, "cs", 2, 224, 210, 1], [1, "cs", qk, 223, 211, 1], [aa, "cs", 1, 224, 211, aa], [aa, "cs", 2, 224, 212, Eo], [Eo, "cs", zk, 224, 213, ie], [1, "cs", 1, 224, 214, 1], [jq, "cs", nn, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, Eo], [1, "cs", zk, 224, 218, Ej], [1, "cs", ar, 224, 219, 1], [j, "cs", 0, 223, 215, Zq], [1, "cs", vk, 223, 214, 1], [Zq, "cs", re, 223, 212, j], [Ue, "cs", 2, 223, 216, Ue], [Ej, "cs", 3, 223, 217, Ue], [j, "cs", qk, 223, 218, 1], [1, "cs", Cq, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [Oj, "cs", Cn, 223, 205, 1], [1, "cs", 2, 224, 221, ie], [Zq, "cs", 2, 223, 219, 1], [1, "cs", re, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [jq, "cs", re, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, Ej], [1, "cs", 3, 223, 182, 1], [ie, "cs", 1, 223, 185, 1], [Oj, "cs", 2, 223, 184, Ej], [1, "cs", zk, 223, 186, 1], [aa, "cs", 0, 223, 180, jq], [1, "cs", ne, 223, 183, Ue], [j, "cs", Zn, 223, 187, jq], [Ue, "cs", Eo, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [Ok, "cs", re, 223, 190, 1], [1, "cs", nn, 223, 191, j], [j, "cs", Ej, 223, 192, Oj], [aa, "cs", 2, 223, 193, 1], [Ok, "cs", vk, 223, 194, 1], [Ue, "cs", Qk, 223, 195, Ok], [1, "cs", jq, 223, 196, 1], [Ue, "cs", 2, 223, 197, 1], [ie, "cs", zk, 223, 199, 1], [1, "cs", wr, 223, 198, 1], [j, "cs", 0, 223, 200, 1], [Ok, "cs", re, 223, 201, 1], [Eo, "cs", 0, 223, 202, jq], [Eo, "cs", Qk, 223, 203, j], [1, "cs", 3, 223, 204, aa], [1, "cs", 3, 223, 206, ie], [Eo, "cs", X, 223, 207, 1], [1, "cs", 3, 223, 208, ie], [1, "cs", re, 223, 221, Ue], [1, "cs", zk, 223, 222, Zq], [Ej, "cs", 0, 223, 224, jq], [1, "cs", 0, 224, 228, ie], [Zq, "cs", vq, 224, 230, Ue], [1, "cs", gr, 223, 234, j], [j, "cs", vk, 223, 223, j], [1, "cs", re, 224, 223, Ok], [1, "cs", re, 224, 224, 1], [1, "cs", 2, 224, 225, Zq], [jq, "cs", 1, 223, 226, Eo], [Eo, "cs", Zq, 224, 231, j], [1, "cs", Oj, 223, 232, 1], [aa, "cs", ar, 223, 225, 1], [aa, "cs", Ka, 224, 226, 1], [Eo, "cs", 3, 223, 227, j], [jq, "cs", 3, 224, 227, ie], [1, "cs", Ka, 223, 229, 1], [j, "cs", ar, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", Z, 223, 230, 1], [1, "cs", Qk, 223, 231, 1], [1, "cs", Z, 224, 232, ie], [Eo, "cs", X, 224, 233, 1], [1, "cs", X, 223, 233, j], [1, "cs", ar, 224, 234, Oj], [Ue, "cs", Qk, 224, 235, Zq], [Oj, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [ie, "cs", 2, 223, 236, ie], [1, "cs", zk, 223, 237, aa], [1, "cs", co, 224, 237, 1], [1, "cs", Z, 224, 238, 1], [ie, "cs", 0, 224, 239, jq], [Zq, "cs", 1, 223, 241, Oj], [Oj, "cs", 0, 224, 243, Eo], [Ej, "cs", Cq, 223, 245, ie], [Eo, "cs", 0, 224, 247, ie], [Zq, "cs", vk, 223, 240, Ue], [1, "cs", zk, 223, 239, 1], [1, "cs", 2, 224, 240, Ej], [1, "cs", re, 224, 241, Oj], [Oj, "cs", wr, 224, 242, Ej], [1, "cs", 2, 223, 242, 1], [1, "cs", zk, 223, 243, 1], [Ej, "cs", re, 223, 244, ie], [1, "cs", zk, 224, 244, ie], [1, "cs", zk, 224, 245, Eo], [1, "cs", 2, 224, 246, 1], [Ej, "cs", Z, 223, 238, 1], [Zq, "cs", ar, 223, 246, 1], [j, "cs", 2, 223, 247, 1], [Ej, "cs", 1, 223, 249, Zq], [Zq, "cs", Ue, 224, 253, 1], [Ok, "cs", Ue, 223, Pn, 1], [aa, "cs", ur, 223, 254, 1], [1, "cs", qk, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, Ok], [Ej, "cs", nn, 223, 255, j], [1, "cs", 3, 223, 257, Zq], [1, "cs", 2, 224, 248, 1], [1, "cs", vk, 224, 249, aa], [Oj, "cs", Zn, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [ie, "cs", 2, 224, 252, Ok], [1, "cs", re, 223, 253, Ej], [j, "cs", zk, 224, 254, 1], [1, "cs", vk, 224, 255, 1], [1, "cs", 2, 224, 256, Eo], [aa, "cs", wr, 224, 257, Eo], [aa, "cs", 0, 224, 258, jq], [Zq, "cs", 0, 223, 261, 1], [Zq, "cs", qk, 224, 263, j], [1, "cs", ne, 224, 266, 1], [1, "cs", 0, 224, 272, Ok], [1, "cs", 0, 223, 270, jq], [Ok, "cs", gr, 223, 275, 1], [Eo, "cs", 1, 223, 259, 1], [1, "cs", Ue, 223, 264, 1], [Oj, "cs", jq, 223, 268, Zq], [1, "cs", aa, 224, 274, Zq], [1, "cs", zk, 223, 258, Oj], [j, "cs", zk, 223, 260, Oj], [ie, "cs", vk, 223, 263, 1], [Ej, "cs", 2, 223, 265, 1], [Ok, "cs", Zn, 223, 267, 1], [1, "cs", 2, 223, 271, Ue], [ie, "cs", vk, 223, 273, Zq], [ie, "cs", 3, 223, 262, 1], [Ej, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [Ej, "cs", Ka, 223, 272, Zq], [1, "cs", 3, 223, 274, j], [Zq, "cs", 3, 224, 275, 1], [1, "cs", ar, 224, 273, 1], [Ej, "cs", co, 224, 271, Ue], [1, "cs", Qk, 224, 270, aa], [aa, "cs", X, 224, 269, j], [Ue, "cs", 3, 224, 268, Eo], [j, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, ie], [1, "cs", Ka, 224, 264, 1], [Ej, "cs", nn, 224, 262, 1], [Oj, "cs", Z, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [Oj, "cs", nn, 224, 259, Oj], [1, "cs", Zn, 223, 276, aa], [1, "cs", aa, 224, 276, j], [1, "cs", Eo, 224, 280, Zq], [1, "cs", Zq, 223, 281, 1], [jq, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, Zq], [1, "cs", 0, 223, 284, 1], [jq, "cs", vq, 224, 288, 1], [Ok, "cs", 0, 224, 279, Oj], [Ue, "cs", wr, 223, 277, aa], [1, "cs", re, 224, 277, aa], [Ue, "cs", 2, 224, 278, 1], [jq, "cs", zk, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", zk, 224, 282, 1], [Eo, "cs", 2, 224, 284, 1], [1, "cs", zk, 224, 285, ie], [Zq, "cs", 2, 224, 287, 1], [Ue, "cs", vk, 223, 287, Ue], [1, "cs", re, 223, 285, Ej], [aa, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [aa, "cs", 3, 223, 278, Zq], [Ok, "cs", 3, 223, 282, 1], [j, "cs", 3, 223, 286, 1], [Zq, "cs", Ka, 223, 289, 1], [aa, "cs", 3, 224, 289, aa], [ie, "cs", 2, 223, 288, 1], [ie, "cs", 2, 224, 290, 1], [j, "cs", Ej, 223, 290, 1], [1, "cs", qn, 224, 292, 1], [Zq, "cs", 0, 223, 294, aa], [aa, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, Eo], [1, "cs", zk, 223, 291, 1], [jq, "cs", 2, 224, 291, Ej], [Ok, "cs", zk, 223, 292, 1], [1, "cs", zk, 223, 293, Zq], [1, "cs", 2, 224, 293, ie], [1, "cs", 2, 224, 294, jq], [Ej, "cs", Zq, 224, 295, Ue], [j, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, Ue], [Ok, "cs", zk, 224, 296, Ok], [Ok, "cs", 2, 223, 297, 1], [j, "cs", re, 223, 298, 1], [1, "cs", re, 224, 298, 1], [Ej, "cs", 2, 224, 299, 1], [Ue, "cs", 2, 223, 300, 1], [Eo, "cs", 1, 224, 300, 1], [Ok, "cs", Gr, 223, 301, Ej], [jq, "cs", gr, 224, 302, Ej], [Eo, "cs", 0, 224, 304, Ue], [Eo, "cs", Kj, 224, 301, Ok], [Ue, "cs", Z, 224, 303, 1], [1, "cs", Gr, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", ie, 222, 304, Eo], [ie, "cs", 1, 222, 302, Eo], [Zq, "cs", 2, 223, 302, 1], [1, "cs", zk, 223, 303, 1], [j, "cs", 2, 222, 303, 1], [1, "cs", vk, 223, 304, 1], [1, "cs", 2, 221, 304, Ej], [jq, "cs", 2, 220, 304, 1], [ie, "cs", zk, 220, 303, 1], [Ue, "cs", 2, 220, 302, 1], [Eo, "cs", Zn, 221, 302, 1], [Zq, "cs", wr, 219, 303, 1], [j, "cs", 0, 217, 302, 1], [Ej, "cs", Cq, 215, 304, 1], [Zq, "cs", qn, 214, 302, 1], [aa, "cs", Oj, 218, 302, Ok], [1, "cs", Ue, 217, 304, 1], [1, "cs", j, 215, 302, 1], [1, "cs", Zn, 219, 302, 1], [1, "cs", 2, 218, 303, jq], [aa, "cs", wr, 218, 304, 1], [1, "cs", 2, 217, 303, Eo], [1, "cs", 2, 216, 304, 1], [1, "cs", vk, 215, 303, Eo], [aa, "cs", 2, 216, 303, 1], [Zq, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [Ok, "cs", zk, 214, 304, 1], [j, "cs", qn, 212, 302, 1], [Ej, "cs", 0, 210, 303, 1], [Ej, "cs", tj, 212, 304, 1], [aa, "cs", Gr, 208, 304, 1], [Ej, "cs", ie, 210, 302, Oj], [1, "cs", 1, 208, 303, 1], [Zq, "cs", 2, 213, 302, j], [Ue, "cs", wr, 213, 303, 1], [Eo, "cs", 2, 213, 304, Ok], [Ej, "cs", Zn, 212, 303, Eo], [Zq, "cs", Zn, 211, 304, 1], [Oj, "cs", 2, 211, 303, Eo], [j, "cs", wr, 211, 302, 1], [1, "cs", zk, 209, 302, 1], [Zq, "cs", zk, 209, 303, ie], [1, "cs", zk, 209, 304, Ue], [1, "cs", re, 210, 304, 1], [ie, "cs", 2, 208, 302, aa], [aa, "cs", 0, 206, 303, 1], [Ej, "cs", Cq, 203, 304, 1], [1, "cs", qk, 200, 303, 1], [ie, "cs", Fj, 199, 304, Eo], [1, "cs", qn, 195, 304, Zq], [Ej, "cs", 0, 191, 303, 1], [1, "cs", ur, 193, 304, Ue], [Ej, "cs", 0, 189, 304, 1], [1, "cs", Zq, 204, 303, aa], [1, "cs", 0, 197, 302, ie], [Oj, "cs", 0, 202, 302, 1], [Ej, "cs", 0, 188, 302, 1], [j, "cs", Fj, 194, 302, jq], [1, "cs", 1, 197, 303, Ej], [1, "cs", 1, 201, 304, Zq], [Zq, "cs", j, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [Ej, "cs", ie, 188, 304, 1], [1, "cs", re, 207, 302, j], [Oj, "cs", 2, 207, 303, Ok], [Ej, "cs", vk, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", wr, 206, 302, ie], [1, "cs", zk, 205, 303, 1], [aa, "cs", 2, 204, 304, 1], [aa, "cs", vk, 205, 304, Eo], [Oj, "cs", 2, 204, 302, Oj], [Ej, "cs", Zn, 203, 302, Ue], [1, "cs", wr, 203, 303, 1], [1, "cs", 2, 202, 303, Eo], [Ej, "cs", 2, 201, 303, 1], [ie, "cs", 2, 201, 302, Ok], [1, "cs", 2, 200, 302, 1], [Ue, "cs", vk, 199, 302, Oj], [ie, "cs", zk, 198, 303, Zq], [1, "cs", 2, 198, 302, jq], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [Eo, "cs", 2, 197, 304, 1], [1, "cs", re, 198, 304, jq], [1, "cs", 2, 196, 304, 1], [aa, "cs", 2, 196, 303, 1], [Eo, "cs", 2, 196, 302, j], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", Zn, 194, 303, 1], [Ej, "cs", wr, 194, 304, 1], [ie, "cs", re, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", zk, 192, 303, 1], [Ok, "cs", 2, 192, 304, aa], [Ue, "cs", wr, 191, 304, 1], [Zq, "cs", 2, 190, 304, 1], [1, "cs", re, 190, 303, Oj], [Eo, "cs", 2, 189, 302, j], [Ej, "cs", 2, 190, 302, j], [1, "cs", 2, 191, 302, aa], [1, "cs", 2, 188, 303, 1], [1, "cs", Cn, 186, 303, 1], [1, "cs", _a, 183, 304, 1], [1, "cs", ur, 184, 302, 1], [Zq, "cs", gr, 181, 302, 1], [ie, "cs", Cn, 176, 302, 1], [1, "cs", 0, 178, 303, jq], [Ue, "cs", ne, 173, 304, aa], [1, "cs", Cn, 170, 303, 1], [Oj, "cs", 0, 172, 302, Ej], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", jq, 173, 302, jq], [1, "cs", 1, 185, 304, jq], [1, "cs", 1, 169, 304, Ue], [Ue, "cs", 3, 187, 304, Oj], [1, "cs", 3, 186, 304, ie], [1, "cs", 3, 187, 303, Eo], [Zq, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, Eo], [jq, "cs", 3, 185, 302, 1], [1, "cs", Qk, 185, 303, 1], [Zq, "cs", 3, 184, 303, Ok], [jq, "cs", nn, 183, 303, Oj], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, jq], [1, "cs", 3, 184, 304, Ue], [jq, "cs", 3, 182, 304, 1], [Eo, "cs", 3, 181, 304, 1], [1, "cs", X, 179, 304, Ok], [1, "cs", 3, 180, 304, 1], [1, "cs", nn, 181, 303, 1], [j, "cs", nn, 180, 303, jq], [1, "cs", 3, 179, 303, Zq], [Oj, "cs", co, 180, 302, ie], [1, "cs", 3, 179, 302, Ej], [Oj, "cs", Qk, 178, 302, jq], [Ue, "cs", X, 177, 302, 1], [j, "cs", 3, 177, 304, jq], [1, "cs", 3, 177, 303, ie], [1, "cs", 3, 176, 303, aa], [1, "cs", Qk, 176, 304, 1], [Ej, "cs", 3, 174, 304, Zq], [1, "cs", co, 175, 303, Ok], [1, "cs", Z, 174, 303, 1], [1, "cs", 3, 173, 303, jq], [Eo, "cs", co, 172, 303, Ej], [Eo, "cs", 3, 171, 303, aa], [jq, "cs", 3, 170, 304, 1], [ie, "cs", 3, 171, 304, j], [Ok, "cs", co, 172, 304, 1], [ie, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [aa, "cs", nn, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [Ok, "cs", Ka, 169, 302, aa], [1, "cs", 3, 169, 303, aa], [1, "cs", Gr, 168, 302, 1], [Ok, "cs", 0, 166, 303, 1], [Eo, "cs", gr, 163, 304, Zq], [j, "cs", tj, 161, 302, Eo], [Eo, "cs", ne, 159, 303, 1], [1, "cs", _a, 152, 304, Eo], [1, "cs", 0, 155, 303, Ok], [1, "cs", Ok, 164, 303, aa], [Ue, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", ie, 153, 302, 1], [1, "cs", jq, 154, 304, 1], [1, "cs", Zn, 168, 304, 1], [ie, "cs", 2, 168, 303, Ue], [1, "cs", 2, 167, 303, 1], [1, "cs", vk, 167, 304, 1], [Oj, "cs", Zn, 166, 304, 1], [1, "cs", Zn, 165, 304, 1], [1, "cs", Zn, 164, 304, 1], [1, "cs", re, 165, 303, Zq], [1, "cs", wr, 167, 302, 1], [1, "cs", wr, 166, 302, j], [Zq, "cs", vk, 165, 302, 1], [Ok, "cs", wr, 164, 302, 1], [Ej, "cs", re, 163, 302, 1], [1, "cs", wr, 162, 302, Oj], [Oj, "cs", 2, 163, 303, 1], [j, "cs", re, 162, 304, Ej], [j, "cs", Zn, 160, 304, 1], [jq, "cs", Zn, 159, 304, 1], [aa, "cs", wr, 161, 304, Eo], [aa, "cs", 2, 161, 303, 1], [Ue, "cs", 2, 160, 303, Oj], [1, "cs", 2, 160, 302, Oj], [jq, "cs", wr, 158, 302, 1], [Ok, "cs", 2, 159, 302, Ue], [1, "cs", 2, 157, 302, 1], [Eo, "cs", 2, 156, 303, ie], [Ue, "cs", zk, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", zk, 157, 304, 1], [1, "cs", re, 156, 304, Oj], [1, "cs", 2, 155, 304, 1], [Oj, "cs", zk, 153, 304, 1], [Ok, "cs", zk, 153, 303, j], [aa, "cs", vk, 154, 303, 1], [Zq, "cs", re, 154, 302, 1], [Ej, "cs", vk, 155, 302, Zq], [ie, "cs", 2, 152, 303, aa], [Eo, "cs", wr, 152, 302, Zq], [1, "cs", 0, 151, 302, 1], [1, "cs", qk, 149, 303, ie], [ie, "cs", 0, 145, 304, Ue], [Ue, "cs", qn, 147, 302, 1], [jq, "cs", _a, 143, 303, 1], [ie, "cs", 0, 141, 303, aa], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, Ue], [aa, "cs", Ej, 142, 302, 1], [jq, "cs", 1, 150, 304, Eo], [j, "cs", re, 151, 304, 1], [jq, "cs", 2, 151, 303, 1], [1, "cs", wr, 150, 303, Zq], [1, "cs", 2, 150, 302, j], [1, "cs", 2, 148, 302, 1], [ie, "cs", Zn, 146, 302, Ok], [j, "cs", vk, 144, 302, j], [1, "cs", 2, 141, 302, Eo], [1, "cs", zk, 141, 304, Eo], [Eo, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, Oj], [1, "cs", vk, 144, 304, Ok], [jq, "cs", Zn, 144, 303, ie], [1, "cs", 2, 148, 304, Zq], [1, "cs", 2, 148, 303, Ue], [jq, "cs", 2, 146, 303, Eo], [Ej, "cs", wr, 145, 303, 1], [1, "cs", 2, 147, 303, Oj], [1, "cs", re, 146, 304, 1], [Ok, "cs", 2, 149, 304, 1], [Eo, "cs", 3, 149, 302, aa], [1, "cs", 3, 143, 302, jq], [Zq, "cs", 0, 139, 304, jq], [1, "cs", 0, 138, 302, j], [Ue, "cs", Ok, 139, 302, 1], [j, "cs", 2, 140, 302, 1], [1, "cs", zk, 140, 303, 1], [1, "cs", 2, 139, 303, aa], [1, "cs", vk, 138, 303, Eo], [Oj, "cs", vk, 138, 304, 1], [Ue, "cs", 2, 140, 304, aa], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, ie], [1, "cs", 0, 133, 304, j], [aa, "cs", Ok, 135, 304, Oj], [Zq, "cs", 1, 136, 302, 1], [1, "cs", re, 137, 302, j], [1, "cs", 2, 136, 303, 1], [1, "cs", vk, 137, 303, 1], [Oj, "cs", 2, 136, 304, Ue], [Ok, "cs", zk, 134, 304, Zq], [1, "cs", zk, 134, 303, Eo], [jq, "cs", re, 133, 303, 1], [1, "cs", re, 132, 304, 1], [1, "cs", gr, 131, 302, 1], [1, "cs", Fj, 134, 302, 1], [Ue, "cs", vq, 129, 304, 1], [1, "cs", 1, 130, 303, Ue], [Ue, "cs", jq, 132, 302, 1], [j, "cs", 2, 135, 302, 1], [aa, "cs", zk, 133, 302, 1], [1, "cs", 2, 132, 303, Zq], [aa, "cs", 2, 131, 303, Ue], [1, "cs", 2, 130, 304, 1], [Zq, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, Zq], [j, "cs", 2, 129, 303, 1], [1, "cs", re, 130, 302, 1], [1, "cs", Ka, 127, 304, Ej], [jq, "cs", 2, 132, 301, Ok], [Ue, "cs", vk, 133, 301, Ue], [jq, "cs", 2, 134, 301, Ej], [1, "cs", 2, 135, 301, Ej], [Ue, "cs", co, 131, 301, 1], [1, "cs", co, 136, 301, Ej], [j, "cs", 3, 136, 178, j], [Zq, "cs", 0, 136, 183, Ue], [1, "cs", re, 136, 182, 1], [Ok, "cs", 1, 136, 181, Ue], [Ok, "cs", qk, 136, 179, j], [1, "cs", nn, 136, 180, Eo], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", Qk, 135, 180, 1], [aa, "cs", 0, 134, 183, Ej], [ie, "cs", 2, 133, 183, 1], [Ue, "cs", ar, 133, 182, 1], [ie, "cs", 1, 132, 183, Ok], [aa, "cs", 3, 131, 183, jq], [jq, "cs", zk, 135, 181, 1], [1, "cs", wr, 134, 182, 1], [Ej, "cs", 3, 134, 181, 1], [aa, "fod", ur, 213, 301, 0], [1, "fod", qn, 204, 301, Gr], [Ej, "fod", Zq, 196, 288, ne], [1, "fod", 1, 198, 283, 0], [1, "fod", jq, 190, 288, ne], [1, "fod", j, 189, 296, 0], [1, "fod", ie, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [j, "fod", 1, 186, 287, 0], [ie, "fod", jq, 190, 290, vq], [1, "fod", Oj, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [jq, "fod", 1, 211, 268, gr], [1, "fod", Zq, 210, 274, 0], [j, "fod", j, 205, 263, 0], [Ok, "fod", ie, 216, 258, 0], [Ej, "fod", 2, 201, 294, tj], [aa, "fod", re, 190, 296, tj], [1, "fod", 2, 188, 299, Fj], [Zq, "fod", 2, 186, 297, ne], [Ue, "fod", Zn, 188, 296, vq], [Ej, "fod", 2, 189, 291, ne], [Eo, "fod", 2, 189, 286, 0], [Ok, "fod", 2, 191, 286, ne], [jq, "fod", Zn, 197, 286, 0], [1, "fod", re, 195, 290, ne], [1, "fod", re, 186, 288, 0], [Ej, "fod", 2, 184, 290, Cq], [Ue, "fod", 2, 183, 293, 0], [Ej, "fod", 2, 198, 286, Cq], [1, "fod", re, 196, 283, Fj], [1, "fod", 2, 196, 281, Fj], [1, "fod", 2, 201, 280, 0], [Oj, "fod", zk, 205, 287, Gr], [ie, "fod", Zn, 209, 283, qk], [1, "fod", vk, 212, 280, 0], [1, "fod", vk, 209, 277, 0], [Ue, "fod", 2, 217, 278, 0], [jq, "fod", 2, 219, 275, 0], [j, "fod", 2, 220, 271, Cq], [1, "fod", wr, 220, 267, qk], [1, "fod", re, 217, 265, gr], [Ej, "fod", zk, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", zk, 206, 261, Cn], [1, "fod", 2, 203, 265, qk], [1, "fod", wr, 204, 270, 0], [Zq, "fod", Zn, 196, 267, 0], [Ok, "fod", zk, 214, 261, _a], [1, "fod", 2, 211, 260, 0], [Ej, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [Ue, "fod", Zn, 220, 253, 0], [jq, "fod", zk, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, Eo], [1, "la", Kj, 200, 32, 1], [Ej, "la", 3, 198, 33, Ue], [1, "la", Ka, 196, 33, 1], [1, "la", Kj, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", Cq, 200, 28, 1], [1, "la", 0, 193, 30, Oj], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, aa], [Zq, "la", Ka, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, Ej], [Ue, "la", 2, 201, 33, Ok], [Ok, "la", hn, 202, 34, j], [Oj, "la", Aq, 202, 35, 1], [1, "la", 4, 203, 36, aa], [1, "la", Yi, 204, 37, 1], [Ok, "la", vk, 205, 38, 1], [Eo, "la", ha, 205, 39, 1], [jq, "la", Jo, 205, 40, 1], [j, "la", 2, 206, 41, Oj], [1, "la", jq, 207, 42, 1], [1, "la", 1, 205, 41, Oj], [1, "la", 4, 208, 43, Ok], [1, "la", hn, 209, 43, 1], [Oj, "la", Ej, 210, 43, Ej], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, Ue], [Eo, "la", 4, 213, 44, 1], [Oj, "la", nn, 223, 54, Zq], [1, "la", ar, 221, 53, jq], [aa, "la", 3, 219, 53, ie], [Ej, "la", 4, 218, 52, Eo], [1, "la", 4, 217, 51, 1], [jq, "la", hn, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", j, 210, 44, aa], [1, "la", co, 206, 50, Oj], [1, "re", 0, 217, 24, 1], [1, "re", Cn, 207, 16, Eo], [Eo, "de", 44, 54, 14, qn], [1, "de", 44, 53, sk, vq], [1, "de", 44, 51, 16, Gr], [1, "de", 44, 49, Tn, gr], [ie, "de", 44, 48, Q, 0], [Ej, "de", 21, 78, 293, 0], [aa, "cs", Gr, 221, 8, 1], [1, "cs", 0, 224, Oo, 1], [1, "cs", 1, 223, 8, aa], [1, "cs", vk, 224, 8, 1], [1, "cs", zk, 222, 8, 1], [1, "cs", ur, 224, 6, 1], [Oj, "cs", 0, 222, 5, aa], [1, "cs", _a, 219, qq, Ok], [Oj, "cs", Oj, 220, 5, Ue], [Ej, "cs", Ej, 217, 7, Zq], [1, "cs", 2, 224, 5, j], [1, "cs", wr, 223, 5, 1], [Eo, "cs", zk, 224, 7, Ue], [Ok, "cs", 2, 223, 7, Ue], [aa, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, Ue], [Eo, "cs", 2, 222, qq, ie], [1, "cs", 2, 221, Co, 1], [1, "cs", vk, 221, 6, 1], [1, "cs", Zn, 221, 5, j], [1, "cs", 2, 220, 6, ie], [ie, "cs", vk, 220, Ck, Ue], [1, "cs", 2, 220, 8, 1], [Oj, "cs", vk, 219, 8, 1], [1, "cs", 2, 219, sr, Eo], [1, "cs", 2, 219, xj, 1], [Oj, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, Oj], [Ej, "cs", 2, 218, nk, 1], [Zq, "cs", wr, 217, le, Oj], [aa, "cs", 2, 218, 7, aa], [j, "cs", vk, 218, sr, 1], [ie, "cs", 2, 217, Vi, 1], [1, "cs", 2, 217, 5, Ok], [Ok, "cs", Ej, 215, 6, 1], [1, "cs", 1, 213, pr, aa], [jq, "cs", 0, 214, sq, Zq], [1, "cs", vq, 216, 5, 1], [Eo, "cs", qn, 213, ta, 1], [Oj, "cs", 0, 211, y, ie], [Oj, "cs", _a, 209, xj, Ok], [Ue, "cs", 0, 208, or, 1], [1, "cs", ne, 207, 8, aa], [j, "cs", re, 216, 6, 1], [aa, "cs", 2, 216, rr, ie], [1, "cs", 2, 215, Co, j], [j, "cs", 2, 215, ta, Ok], [aa, "cs", 2, 214, 8, 1], [1, "cs", wr, 214, $j, 1], [1, "cs", vk, 215, Ui, Zq], [jq, "cs", re, 214, 5, Zq], [1, "cs", 2, 213, gq, Oj], [jq, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", Eo, 211, Ui, 1], [1, "cs", Eo, 209, 8, 1], [1, "cs", 2, 212, R, 1], [aa, "cs", wr, 211, 8, jq], [aa, "cs", Zn, 210, R, Ue], [jq, "cs", 2, 209, 7, Ok], [1, "cs", 2, 210, 7, 1], [Oj, "cs", 2, 210, 6, 1], [Oj, "cs", 2, 212, Jj, 1], [Oj, "cs", 2, 212, xj, Eo], [Ok, "cs", vk, 211, 6, Ej], [Oj, "cs", wr, 210, pr, Eo], [1, "cs", vk, 209, gq, ie], [Ue, "cs", 2, 208, Jj, 1], [j, "cs", 2, 208, Jn, Oj], [jq, "cs", 2, 207, 7, Ok], [Ok, "cs", 2, 207, M, 1], [Ok, "cs", re, 207, 5, ie], [ie, "cs", zk, 206, 5, j], [Eo, "cs", 2, 208, Dn, 1], [1, "cs", 2, 206, 6, Ok], [1, "cs", Cq, 204, 8, 1], [Ok, "cs", tj, 205, gq, 1], [j, "cs", 0, 203, ha, 1], [Ok, "cs", 0, 202, 7, 1], [jq, "cs", Cn, 199, le, 1], [1, "cs", qk, 200, M, Ue], [Oj, "cs", ne, 197, sr, aa], [1, "cs", vq, 195, R, aa], [Ok, "cs", 0, 194, M, Ue], [1, "cs", 1, 202, 8, 1], [Oj, "cs", 1, 206, Co, jq], [1, "cs", 1, 201, ha, Ej], [1, "cs", jq, 197, 8, 1], [1, "cs", Ej, 192, or, 1], [Ok, "cs", Ok, 195, xj, 1], [1, "cs", 2, 205, 7, 1], [Oj, "cs", 2, 205, 8, 1], [Ue, "cs", 2, 206, 8, Oj], [1, "cs", Zn, 204, 7, 1], [1, "cs", vk, 204, 6, 1], [1, "cs", vk, 204, ha, 1], [ie, "cs", Zn, 205, Jn, Ok], [1, "cs", zk, 203, 6, Ej], [1, "cs", vk, 203, y, 1], [1, "cs", Zn, 203, Eq, 1], [Oj, "cs", zk, 201, 8, 1], [1, "cs", wr, 200, R, 1], [Zq, "cs", wr, 200, 7, Eo], [ie, "cs", zk, 201, Qr, 1], [jq, "cs", vk, 201, 6, 1], [1, "cs", 2, 202, sj, 1], [aa, "cs", Zn, 202, $a, Ej], [1, "cs", vk, 200, 5, 1], [1, "cs", re, 199, Ui, Zq], [1, "cs", 2, 197, Jo, ie], [1, "cs", 2, 196, ha, Eo], [1, "cs", vk, 198, xj, 1], [1, "cs", Zn, 198, 6, 1], [Zq, "cs", vk, 199, $a, 1], [1, "cs", 2, 199, Qr, Zq], [jq, "cs", 2, 198, y, j], [j, "cs", wr, 198, 8, Zq], [1, "cs", vk, 197, 7, Eo], [j, "cs", 2, 196, Qr, Ue], [1, "cs", 2, 196, Dn, 1], [Ok, "cs", Zn, 196, 6, Oj], [Ok, "cs", 2, 195, 6, 1], [Oj, "cs", 2, 195, 7, Eo], [1, "cs", 2, 194, rr, 1], [Eo, "cs", Zn, 193, Dn, Ok], [Oj, "cs", 2, 194, R, 1], [aa, "cs", wr, 193, 7, Eo], [1, "cs", 2, 193, gq, j], [1, "cs", zk, 193, Ui, Eo], [aa, "cs", 2, 194, 5, 1], [1, "cs", Cn, 192, Ya, 1], [ie, "cs", Cq, 191, 8, Ue], [Ej, "cs", 0, 190, 6, Ej], [j, "cs", 0, 188, pa, 1], [Eo, "cs", Gr, 186, ta, 1], [1, "cs", 0, 186, Ya, aa], [1, "cs", 0, 184, or, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", tj, 181, 6, j], [Oj, "cs", Eo, 189, R, 1], [1, "cs", 1, 183, ta, Ue], [j, "cs", ie, 188, 5, j], [Ue, "cs", Ue, 185, 6, Ej], [Zq, "cs", aa, 180, 7, j], [j, "cs", jq, 183, sj, ie], [ie, "cs", j, 178, ta, 1], [Ej, "cs", Eo, 177, 6, 1], [1, "cs", ie, 173, Uk, j], [Zq, "cs", Eo, 171, 7, Eo], [1, "cs", ne, 177, 8, 1], [1, "cs", Fj, 175, 7, Zq], [1, "cs", 0, 179, Ui, Zq], [Oj, "cs", 0, 174, pr, Zq], [1, "cs", 0, 176, Jo, Zq], [1, "cs", tj, 172, 8, Eo], [Oj, "cs", _a, 170, Dn, 1], [1, "cs", tj, 169, M, 1], [1, "cs", 2, 192, Jj, aa], [Ok, "cs", Zn, 192, ta, 1], [1, "cs", 2, 191, 7, aa], [ie, "cs", 2, 191, 6, 1], [Ej, "cs", 2, 191, Ya, 1], [1, "cs", re, 190, Jn, ie], [1, "cs", Zn, 189, 5, Ue], [1, "cs", 2, 189, 6, Zq], [aa, "cs", 2, 189, y, Ej], [Ok, "cs", zk, 190, 7, 1], [jq, "cs", Zn, 190, Eq, Eo], [Ue, "cs", 2, 188, 8, Zq], [Eo, "cs", 2, 187, 8, 1], [1, "cs", Zn, 187, 7, aa], [1, "cs", wr, 187, 6, 1], [1, "cs", wr, 188, 6, 1], [aa, "cs", 2, 187, pr, Oj], [ie, "cs", 2, 186, 6, 1], [1, "cs", wr, 186, Ck, ie], [1, "cs", 2, 185, Uk, Oj], [Ok, "cs", zk, 185, 8, 1], [1, "cs", Zn, 184, R, 1], [1, "cs", re, 183, 7, Ok], [1, "cs", wr, 183, Jj, Oj], [Eo, "cs", vk, 184, Vi, 1], [Ej, "cs", 2, 184, 5, 1], [ie, "cs", wr, 185, 5, Ue], [jq, "cs", wr, 182, M, 1], [1, "cs", 2, 182, 7, jq], [1, "cs", Zn, 181, $j, 1], [1, "cs", 2, 181, Dn, Zq], [1, "cs", 2, 180, Eq, 1], [ie, "cs", vk, 179, Eq, aa], [1, "cs", 2, 182, 5, 1], [Oj, "cs", 2, 181, 5, j], [1, "cs", 2, 180, 5, 1], [1, "cs", zk, 180, 6, 1], [1, "cs", Zn, 179, 6, Eo], [aa, "cs", 2, 179, 7, Oj], [aa, "cs", 2, 178, Co, ie], [j, "cs", 2, 178, sq, j], [1, "cs", Zn, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [Oj, "cs", 2, 177, qq, Zq], [Ej, "cs", Zn, 176, 7, Eo], [1, "cs", 2, 176, gq, Eo], [1, "cs", 2, 175, sr, 1], [Zq, "cs", re, 175, 5, aa], [jq, "cs", 2, 176, 8, 1], [aa, "cs", vk, 174, 8, ie], [Ej, "cs", vk, 175, 8, ie], [j, "cs", vk, 173, Eq, 1], [ie, "cs", 2, 174, Ck, 1], [1, "cs", re, 173, Vi, 1], [1, "cs", re, 174, 6, 1], [1, "cs", 2, 172, ha, Ok], [1, "cs", zk, 173, Jo, 1], [Zq, "cs", wr, 172, Vi, 1], [Oj, "cs", 2, 172, 7, 1], [aa, "cs", 2, 171, R, 1], [Ue, "cs", wr, 170, Uk, j], [aa, "cs", vk, 170, sr, jq], [aa, "cs", re, 170, Jn, aa], [1, "cs", 2, 171, 5, 1], [Ok, "cs", 2, 171, 6, 1], [Zq, "cs", 2, 169, 5, 1], [Ej, "cs", re, 169, rr, ie], [1, "cs", wr, 169, ta, 1], [1, "cs", 1, 168, Co, jq], [ie, "cs", 1, 166, Ya, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", Ok, 160, 7, 1], [Ok, "cs", 1, 156, 8, Oj], [1, "cs", Cn, 166, 8, Ok], [1, "cs", Gr, 168, 5, Ok], [1, "cs", 0, 164, sr, 1], [1, "cs", qn, 162, 7, Ok], [Zq, "cs", Fj, 158, 8, 1], [1, "cs", gr, 157, M, Oj], [j, "cs", gr, 161, Ui, Eo], [aa, "cs", 0, 159, pr, Eo], [1, "cs", qk, 155, 7, j], [aa, "cs", vq, 154, Jo, 1], [ie, "cs", _a, 151, qq, Ok], [Oj, "cs", 1, 153, 8, Oj], [Oj, "cs", jq, 151, pr, ie], [jq, "cs", 2, 168, sr, 1], [Ue, "cs", 2, 168, Eq, Ok], [Ue, "cs", Zn, 167, nk, 1], [1, "cs", re, 167, y, 1], [Zq, "cs", 2, 167, Jj, Eo], [Eo, "cs", wr, 167, 5, 1], [Oj, "cs", vk, 166, Jj, 1], [1, "cs", wr, 166, 7, 1], [1, "cs", 2, 165, 7, Oj], [1, "cs", 2, 165, 6, 1], [1, "cs", re, 165, 5, 1], [1, "cs", 2, 164, ha, j], [1, "cs", 2, 163, 5, 1], [Zq, "cs", re, 162, ha, Oj], [Eo, "cs", 2, 162, sq, Oj], [1, "cs", re, 163, sr, 1], [1, "cs", wr, 163, 7, ie], [aa, "cs", Zn, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", vk, 165, Dn, ie], [1, "cs", vk, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [Ue, "cs", wr, 160, R, 1], [ie, "cs", zk, 159, 8, ie], [1, "cs", zk, 159, 7, Ue], [1, "cs", 2, 159, 6, 1], [Ej, "cs", vk, 160, xj, j], [jq, "cs", zk, 160, 6, 1], [1, "cs", 2, 161, 6, Ue], [1, "cs", re, 161, 7, 1], [Zq, "cs", vk, 157, 7, 1], [Ok, "cs", 2, 158, y, Zq], [Zq, "cs", wr, 158, 6, 1], [1, "cs", vk, 158, 5, Oj], [1, "cs", 2, 155, pr, 1], [ie, "cs", 2, 155, gq, ie], [aa, "cs", Zn, 156, 6, 1], [Ue, "cs", vk, 156, rr, 1], [1, "cs", wr, 157, 8, 1], [Zq, "cs", 2, 155, ta, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", Zn, 154, Qr, 1], [1, "cs", re, 154, 6, aa], [1, "cs", 2, 152, 8, 1], [jq, "cs", 2, 153, qq, 1], [Ue, "cs", 2, 153, Vi, Zq], [Oj, "cs", 2, 153, 5, 1], [aa, "cs", 2, 152, 5, 1], [Ue, "cs", wr, 152, $a, 1], [1, "cs", 2, 152, Qr, Ue], [jq, "cs", wr, 151, Vi, 1], [aa, "cs", 2, 157, ha, 1], [1, "cs", Zq, 156, ha, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", qk, 149, Uk, Ue], [1, "cs", Cn, 147, 8, 1], [Ue, "cs", 0, 146, 5, Zq], [Eo, "cs", Cn, 144, 7, Ok], [Ue, "cs", 0, 142, 5, 1], [Ue, "cs", 1, 147, 6, ie], [aa, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, Ok], [1, "cs", Zn, 148, 5, jq], [ie, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [Eo, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, jq], [aa, "cs", re, 150, 7, 1], [1, "cs", vk, 149, nk, Ej], [1, "cs", 2, 148, Eq, 1], [Eo, "cs", 2, 149, 6, jq], [aa, "cs", wr, 148, sr, aa], [1, "cs", re, 148, Ck, 1], [1, "cs", 2, 147, 7, 1], [Ej, "cs", 2, 147, 5, 1], [ie, "cs", 2, 146, gq, Zq], [Ej, "cs", 2, 146, 7, 1], [1, "cs", zk, 146, 8, Ok], [1, "cs", 2, 145, pa, 1], [aa, "cs", Zn, 145, Jj, Oj], [1, "cs", 2, 145, pr, 1], [1, "cs", 2, 144, 6, 1], [j, "cs", 2, 143, 5, Ue], [aa, "cs", 2, 143, 6, Ok], [aa, "cs", 2, 142, 6, Ue], [aa, "cs", 2, 141, 5, Eo], [Eo, "cs", 2, 224, 10, aa], [1, "cs", 0, 224, cn, j], [1, "cs", Cq, 224, pn, 1], [j, "cs", tj, 224, 17, 1], [Eo, "cs", 0, 224, 19, j], [1, "cs", ur, 224, 22, Ue], [1, "cs", tj, 224, 24, Zq], [1, "cs", 0, 224, 29, 1], [1, "cs", qk, 224, 33, jq], [1, "cs", 0, 224, 35, aa], [1, "cs", Cq, 224, 38, 1], [1, "cs", 1, 224, Wn, 1], [1, "cs", ie, 224, 20, Ok], [jq, "cs", 1, 224, 27, Ok], [ie, "cs", 1, 224, 31, Ok], [Oj, "cs", Oj, 224, 36, ie], [1, "cs", vk, 224, yo, 1], [aa, "cs", Zn, 224, 15, 1], [Ok, "cs", 2, 224, 16, 1], [1, "cs", wr, 224, Bn, 1], [Ue, "cs", wr, 224, 21, 1], [Ej, "cs", 2, 224, 23, Oj], [jq, "cs", re, 224, 25, Ue], [j, "cs", Zn, 224, 26, 1], [1, "cs", 2, 224, 28, Eo], [1, "cs", wr, 224, 30, ie], [ie, "cs", zk, 224, 32, 1], [Ok, "cs", 2, 224, 34, Ue], [1, "cs", 2, 224, 37, ie], [Ej, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [jq, "cs", 0, 224, 44, 1], [1, "cs", _a, 224, 46, Ok], [1, "cs", 0, 224, 52, Zq], [1, "cs", 0, 224, 57, Eo], [Ok, "cs", aa, 224, 47, 1], [1, "cs", wr, 224, 40, Ej], [Ej, "cs", zk, 224, 42, ie], [1, "cs", 2, 224, 43, Eo], [1, "cs", Zn, 224, 45, Zq], [Oj, "cs", zk, 224, 49, jq], [1, "cs", Oj, 224, 50, Eo], [j, "cs", 2, 224, 51, aa], [1, "la", 3, 224, 54, Oj], [Oj, "cs", zk, 224, 56, Zq], [jq, "cs", Zn, 224, 58, 1], [1, "cs", vk, 224, 61, 1], [Ue, "cs", _a, 224, 60, jq], [Ue, "cs", 0, 224, 64, 1], [1, "cs", gr, 224, 66, 1], [1, "cs", ur, 224, 70, Ej], [Ej, "cs", 0, 224, 74, Ok], [jq, "cs", tj, 224, 77, jq], [jq, "cs", 1, 224, 62, 1], [1, "cs", Oj, 224, 68, 1], [jq, "cs", 1, 224, 72, jq], [1, "cs", j, 224, 76, Ue], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, Ue], [1, "cs", Zq, 224, 91, Eo], [aa, "cs", ie, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [Ok, "cs", _a, 224, 85, 1], [j, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [Ue, "cs", ne, 224, 98, jq], [Oj, "cs", wr, 224, 59, Zq], [Zq, "cs", wr, 224, 63, Ej], [Ej, "cs", 2, 224, 65, 1], [Ok, "cs", wr, 224, 67, aa], [1, "cs", 2, 224, 69, 1], [j, "cs", vk, 224, 71, Zq], [j, "cs", 2, 224, 73, 1], [1, "cs", wr, 224, 75, 1], [1, "cs", re, 224, 78, j], [Oj, "cs", re, 224, 79, 1], [Zq, "cs", zk, 224, 81, Zq], [Zq, "cs", wr, 224, 82, 1], [Eo, "cs", zk, 224, 84, 1], [jq, "cs", zk, 224, 86, 1], [Oj, "cs", 2, 224, 87, Ej], [1, "cs", wr, 224, 89, 1], [Ok, "cs", 2, 224, 90, 1], [Ok, "cs", wr, 224, 92, Oj], [Zq, "cs", 2, 224, 94, aa], [Ej, "cs", 2, 224, 96, Ok], [1, "cs", 2, 224, 99, 1], [Eo, "cs", 2, 224, 100, aa], [Zq, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [Zq, "cs", Zn, 224, 102, 1], [1, "cs", qn, 222, 10, 1], [Eo, "cs", 2, 223, 9, 1], [Ue, "cs", 2, 222, 9, Eo], [1, "cs", wr, 221, Ma, 1], [1, "cs", re, 223, Ye, 1], [1, "cs", re, 223, La, 1], [Oj, "cs", Zn, 223, yo, 1], [1, "cs", 3, 223, Yk, 1], [1, "cs", Qk, 222, Uq, 1], [Eo, "cs", 3, 220, 9, Ue], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, Ln, jq], [1, "re", 2, 219, 13, ie], [ie, "re", Eo, 218, I, 1], [Ok, "re", aa, 214, 13, j], [1, "cs", _a, 221, k, 1], [aa, "cs", Ue, 223, Iq, 1], [Zq, "cs", re, 222, 19, aa], [1, "cs", zk, 223, Pr, 1], [ie, "cs", 2, 223, Hq, 1], [1, "cs", Zn, 222, Do, 1], [Ej, "cs", vk, 220, 21, Eo], [1, "cs", ur, 219, 21, 1], [ie, "cs", 3, 221, 21, Ej], [1, "cs", X, 218, 21, jq], [1, "cs", Kj, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, ie], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, Mn, Oj], [1, "cs", 1, 211, Va, Ej], [1, "cs", j, 210, lq, Ue], [Zq, "cs", 0, 211, Gq, ie], [ie, "cs", vk, 210, vr, Ej], [1, "cs", zk, 210, 10, Ue], [Eo, "cs", 2, 210, 11, 1], [1, "cs", vk, 212, _j, 1], [Eo, "cs", 2, 210, Tn, aa], [1, "cs", 2, 211, 12, aa], [Oj, "cs", re, 211, cn, 1], [Ok, "cs", 2, 211, 14, j], [Eo, "cs", 2, 212, 15, Ue], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, nq, 1], [aa, "cs", 3, 213, 9, Eo], [Oj, "cs", Z, 212, 10, Oj], [Eo, "cs", 3, 223, 21, 1], [j, "cs", 3, 209, Oo, 1], [Eo, "la", 3, 223, 22, 1], [1, "la", X, 221, 23, 1], [Eo, "la", ar, 207, Ca, 1], [1, "la", 3, 209, Ho, 1], [1, "la", 0, 209, 12, 1], [j, "la", 4, 209, Q, Ok], [1, "la", hn, 219, 23, Ej], [Zq, "la", 3, 210, Nq, 1], [Ej, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", wr, 214, Qq, 1], [1, "la", Yi, 213, Kk, ie], [1, "la", 1, 212, 21, Ok], [Zq, "la", uj, 215, 18, Eo], [1, "la", wr, 216, ja, Ej], [jq, "la", 5, 216, 16, Ue], [ie, "la", 5, 216, 15, Ej], [j, "la", j, 217, Go, Ok], [1, "la", 2, 218, Go, 1], [Zq, "la", zk, 216, Vq, Ej], [1, "la", 2, 219, tq, 1], [1, "la", sj, 220, 16, ie], [ie, "la", 5, 216, 13, 1], [1, "la", Aq, 217, Io, Zq], [Ej, "cs", tj, 211, 44, 1], [1, "cs", 1, 212, 45, Ej], [Ue, "cs", re, 213, 45, 1], [1, "cs", 0, 214, 46, Zq], [ie, "cs", 2, 215, 46, 1], [jq, "cs", 3, 213, 46, 1], [1, "cs", Z, 214, 47, Zq], [aa, "cs", 3, 214, 48, 1], [1, "cs", nn, 216, 46, j], [1, "cs", Cq, 208, ir, Ej], [Ej, "cs", gr, 210, 21, 1], [1, "cs", 0, 212, 23, Eo], [j, "cs", ur, 213, 25, Ej], [1, "cs", Zn, 213, 24, jq], [1, "cs", 2, 211, 22, Zq], [Eo, "cs", Zn, 210, 20, 1], [1, "cs", wr, 209, 21, 1], [ie, "cs", 2, 209, cq, 1], [Ej, "cs", 2, 211, 21, j], [ie, "cs", 2, 212, 22, j], [1, "cs", 2, 213, 23, jq], [1, "cs", 3, 213, 26, 1], [jq, "cs", 3, 207, 20, 1], [Ej, "la", hn, 192, 33, ie], [j, "la", Aq, 191, 34, aa], [aa, "la", Aq, 190, 35, 1], [Zq, "la", 3, 189, 37, 1], [Ue, "la", 3, 188, 39, aa], [1, "la", Aq, 186, 40, 1], [1, "la", 4, 185, 39, jq], [1, "la", ea, 184, 39, 1], [1, "la", 2, 183, 39, j], [1, "la", j, 182, 40, 1], [1, "la", wr, 181, 41, 1], [Zq, "la", Jn, 180, 41, j], [Zq, "la", Jn, 179, 41, Eo], [j, "la", Aq, 192, 28, Ue], [jq, "la", 4, 191, 28, ie], [1, "la", 4, 190, 27, 1], [1, "la", Kj, 188, 27, 1], [Zq, "la", 4, 187, 26, 1], [1, "la", ea, 186, 25, Oj], [Eo, "la", Aq, 185, 25, Zq], [1, "la", hn, 184, 24, 1], [Eo, "la", 5, 184, 23, aa], [j, "la", zk, 184, 22, Ok], [1, "la", 5, 184, 21, j], [Zq, "la", 1, 183, Do, 1], [1, "la", Jo, 182, yn, 1], [ie, "la", vk, 181, c, 1], [j, "la", Ui, 180, ir, jq], [1, "la", 2, 179, 20, jq], [1, "la", 4, 178, Ko, ie], [1, "la", ar, 178, 17, jq], [1, "la", ar, 176, fa, 1], [1, "cs", 0, 177, Io, 1], [aa, "cs", ne, 175, 17, 1], [1, "cs", 0, 180, jk, 1], [1, "cs", gr, 174, Pr, 1], [Oj, "cs", qk, 172, 20, Ok], [1, "cs", Eo, 175, oa, Eo], [1, "cs", aa, 172, fa, aa], [Ej, "cs", Zq, 181, 15, 1], [1, "cs", 2, 179, 15, jq], [1, "cs", re, 177, Go, Ej], [1, "cs", wr, 176, 16, Eo], [Zq, "cs", zk, 174, Bn, jq], [Ok, "cs", wr, 173, la, 1], [Ue, "cs", zk, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [Oj, "cs", 2, 173, 17, jq], [Zq, "cs", 2, 174, Ua, 1], [aa, "cs", 2, 174, Jk, 1], [1, "cs", Zn, 175, 16, aa], [1, "cs", wr, 176, ci, Zq], [Ej, "cs", 2, 178, 15, Eo], [j, "cs", 2, 178, 16, aa], [1, "cs", vk, 179, 16, Zq], [1, "cs", 2, 180, fq, j], [1, "cs", 2, 181, 16, Ue], [aa, "cs", 3, 182, w, Zq], [1, "cs", nn, 172, 21, 1], [ie, "la", aa, 175, la, jq], [1, "la", 2, 174, 20, 1], [Zq, "la", 2, 173, Hq, 1], [Ue, "la", Eo, 180, Bo, jq], [Ue, "la", 2, 181, 17, 1], [1, "la", Kj, 191, 20, 1], [Zq, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", Cn, 204, 24, 1], [1, "s", Ue, 218, 32, 1], [Zq, "s", jq, 207, 34, Oj], [Eo, "s", 1, 202, 23, 1], [1, "s", 1, 195, Jk, aa], [Ok, "s", wr, 222, 28, Oj], [1, "s", re, 212, 38, 1], [1, "s", zk, 207, 23, j], [ie, "s", 2, 202, $q, j], [aa, "s", vk, 195, 18, 1], [Eo, "s", ie, 191, 12, aa], [1, "s", tj, 187, 16, 1], [1, "s", 2, 188, 16, Eo], [Ue, "s", Ue, 186, 14, 1], [Ej, "s", Ej, 201, jk, Zq], [Ej, "g", aa, 216, 31, jq], [1, "g", 0, 200, oj, 1], [1, "g", Fj, 202, 40, 1], [1, "g", Gr, 189, 32, ie], [aa, "g", gr, 204, 28, Oj], [j, "g", vq, 196, 24, Zq], [1, "g", 2, 198, 37, 1], [1, "s", qn, 193, 39, 1], [1, "s", Gr, 201, 45, Ok], [Ej, "a", 0, 210, 29, 1], [1, "a", 0, 200, xq, 1], [1, "cs", qk, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", Ok, 191, 31, aa], [1, "cs", 2, 202, 32, 1], [Eo, "cs", 2, 194, 26, 1], [jq, "cs", 2, 192, 27, 1], [aa, "cs", 2, 192, 32, jq], [Ue, "cs", Zn, 203, 31, 1], [ie, "cs", wr, 202, 31, Ue], [Ej, "cs", Zn, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [ie, "cs", 3, 201, 32, jq], [jq, "cs", Qk, 199, 35, Oj], [Ok, "cs", 0, 193, 34, Ue], [Zq, "cs", wr, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [Ej, "cs", 3, 199, 34, 1], [Ej, "cs", 3, 191, 29, jq], [ie, "cs", vq, 191, 30, Ej], [1, "cs", X, 190, 29, ie], [1, "la", 3, 180, 69, Eo], [1, "la", X, 182, 68, j], [Ok, "la", Qk, 184, 68, 1], [ie, "la", 3, 186, 70, Ok], [1, "la", ar, 184, 72, aa], [j, "la", 3, 182, 72, Eo], [1, "la", 3, 180, 71, Ok], [jq, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, j], [Ok, "cs", Fj, 183, 74, 1], [Zq, "cs", Gr, 178, 70, 1], [1, "cs", zk, 182, 66, Ue], [1, "cs", 2, 182, 74, 1], [Oj, "cs", vk, 181, 73, Zq], [1, "cs", vk, 180, 74, Ej], [1, "cs", re, 181, 74, Ok], [1, "la", 0, 184, 70, 1], [Eo, "la", Kj, 182, 70, 1], [ie, "cs", vk, 181, 67, 1], [1, "cs", ar, 184, 67, jq], [ie, "cs", Z, 182, 67, 1], [1, "la", 4, 187, 69, jq], [1, "la", Ue, 188, 68, 1], [ie, "la", hn, 189, 68, Ej], [1, "la", wr, 190, 68, 1], [1, "la", 1, 191, 68, Ue], [1, "la", uj, 192, 68, jq], [1, "la", re, 193, 68, ie], [ie, "la", uj, 194, 69, Oj], [1, "la", 2, 194, 70, ie], [1, "la", 5, 195, 71, 1], [1, "la", jq, 194, 71, 1], [Ok, "la", 2, 196, 72, 1], [1, "la", uj, 196, 71, 1], [Zq, "la", Ue, 197, 73, jq], [Oj, "la", Jo, 196, 73, 1], [aa, "la", 5, 198, 73, Oj], [1, "la", 3, 201, 73, 1], [Eo, "la", 3, 203, 72, 1], [1, "la", ea, 199, 73, ie], [1, "la", Zq, 205, 72, 1], [1, "la", re, 206, 72, 1], [1, "la", 5, 207, 72, jq], [Zq, "la", j, 208, 72, Eo], [1, "la", ie, 209, 73, ie], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, Ej], [1, "la", Aq, 210, 75, 1], [j, "la", ha, 212, 76, 1], [j, "la", Aq, 202, 75, Ok], [1, "la", vk, 203, 76, 1], [1, "la", Yi, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", vk, 204, 79, jq], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", Zq, 203, 74, 1], [1, "cs", wr, 204, 73, ie], [Ue, "cs", 2, 203, 75, aa], [ie, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [aa, "cs", zk, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, Eo], [Eo, "cs", Z, 207, 73, ie], [1, "cs", re, 205, 76, 1], [1, "cs", ar, 205, 77, 1], [Ue, "la", 3, 183, 66, Ok], [Ej, "la", uj, 183, 65, 1], [Ej, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, j], [Zq, "la", Ej, 185, 62, 1], [ie, "la", wr, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", Aq, 186, 59, 1], [Eo, "la", Zq, 187, 58, 1], [ie, "la", 2, 187, 57, aa], [aa, "la", vk, 187, 56, Ok], [1, "s", ne, 191, 60, 1], [jq, "s", jq, 195, 58, ie], [aa, "s", 1, 199, 46, Zq], [Ok, "s", 2, 202, 49, Ue], [ie, "g", zk, 197, 55, 1], [Ue, "g", j, 213, 55, Zq], [1, "g", Fj, 192, 45, 1], [ie, "g", 0, 210, 61, 1], [Zq, "g", Fj, 182, 52, 1], [aa, "g", tj, 180, 35, 1], [1, "g", Cq, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", Eo, 179, 28, 1], [Eo, "g", 1, 161, 16, Oj], [1, "g", 2, 172, bk, j], [1, "g", vk, 160, 25, 1], [Oj, "g", wr, 157, 39, jq], [1, "g", wr, 170, 43, Ue], [jq, "g", 2, 202, 67, j], [1, "g", Zn, 217, 72, Ok], [Ue, "g", 2, 214, 82, j], [1, "g", vk, 193, 86, Ue], [aa, "g", re, 168, 60, Ue], [1, "g", zk, 165, 78, j], [Oj, "g", zk, 173, 88, 1], [1, "s", 0, 185, 51, j], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [Oj, "s", qn, 160, 32, 1], [1, "s", 1, 162, 30, Ue], [Oj, "s", Ej, 176, 28, 1], [1, "s", aa, 154, 17, 1], [1, "s", Zq, 184, 49, 1], [Eo, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", Eo, 204, 65, 1], [Ue, "s", Zq, 217, 79, 1], [Ej, "s", ie, 206, 86, 1], [1, "la", X, 211, 69, 1], [1, "la", 4, 215, 69, j], [Ej, "la", Ui, 201, 81, Oj], [1, "la", Ok, 207, 83, 1], [1, "la", 3, 173, 32, j], [1, "la", 2, 181, 45, Ej], [1, "la", 1, 178, 38, Oj], [aa, "la", Zq, 213, 69, 1], [1, "la", 5, 214, 69, Oj], [1, "la", 4, 216, 68, 1], [j, "la", 0, 191, 78, jq], [1, "la", Kj, 191, 80, Ue], [Ok, "la", Ka, 189, 79, j], [Ok, "g", Zn, 150, 29, Ej], [1, "g", Zn, 154, 67, Ej], [Zq, "g", vk, 202, 94, 1], [Oj, "g", zk, 155, 90, 1], [1, "s", re, 215, 80, aa], [Zq, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", _a, 216, 86, 1], [1, "s", ur, 211, 93, Ok], [1, "la", 0, 216, 92, 1], [Oj, "la", qn, 151, 96, 1], [1, "la", ie, 155, 95, Ok], [1, "la", Yi, 214, 88, Oj], [1, "s", gr, 205, 99, 1], [1, "s", 1, 217, 88, j], [Ej, "s", Ej, 213, 94, 1], [1, "s", 1, 202, 97, 1], [Eo, "s", 0, 199, 85, Oj], [1, "s", ne, 190, 93, jq], [jq, "s", aa, 199, 87, j], [1, "s", j, 192, 97, 1], [Zq, "la", Ka, 196, 92, jq], [j, "la", 1, 199, 91, Ej], [1, "la", Ej, 220, 91, 1], [Oj, "la", _a, 219, 77, 1], [Ej, "la", gr, 200, 59, 1], [1, "la", 3, 188, 87, 1], [Ej, "la", 0, 183, 94, 1], [Zq, "la", 1, 187, 83, jq], [ie, "la", Ue, 175, 82, 1], [Ue, "la", 1, 172, 94, Zq], [1, "la", vk, 179, 78, 1], [aa, "la", qk, 166, 87, Zq], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, Io, Ej], [1, "la", 1, 164, Bo, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [Zq, "la", 4, 164, 91, 1], [1, "la", Yi, 156, 82, j], [Zq, "la", Aq, 149, 90, 1], [1, "s", 0, 178, 85, Ok], [1, "s", 1, 180, 85, j], [Oj, "s", qk, 163, 96, Ej], [aa, "s", qn, 159, 86, 1], [Ok, "s", gr, 185, 78, Ok], [1, "s", Ok, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, Ok], [1, "s", 2, 161, 87, 1], [Ok, "s", 2, 166, 97, Ok], [Zq, "s", wr, 177, 97, Eo], [1, "s", 0, 149, 85, 1], [1, "s", Oj, 151, 83, Ue], [1, "s", Ok, 175, 74, jq], [1, "s", Cn, 174, 72, 1], [Zq, "la", co, 168, 71, 1], [1, "la", ar, 180, 60, Ok], [1, "s", 0, 156, 63, 1], [Ej, "s", gr, 151, 47, 1], [1, "s", j, 158, 64, 1], [1, "s", 1, 161, 75, aa], [1, "s", Oj, 162, 51, ie], [Oj, "s", 1, 175, 45, ie], [aa, "s", Ej, 152, 47, 1], [1, "s", 1, 159, 33, 1], [Oj, "s", 1, 152, 18, Ej], [jq, "s", 0, 151, 13, aa], [1, "s", 0, 166, 22, 1], [Ej, "s", 0, 170, 63, 1], [Eo, "s", 2, 172, 62, Oj], [1, "s", 2, 155, 61, Eo], [Ue, "s", 2, 167, 51, ie], [1, "s", 2, 150, 52, Ej], [1, "la", 4, 178, 69, Ej], [1, "la", Aq, 177, 68, Ok], [jq, "la", ar, 176, 67, Ue], [Zq, "la", ne, 174, 67, 1], [Ue, "la", Ue, 172, 67, ie], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [aa, "la", 4, 169, 66, 1], [Oj, "la", 1, 168, 66, 1], [1, "la", Aq, 167, 67, 1], [1, "la", Ok, 166, 67, Ok], [Ue, "la", uj, 165, 68, Ej], [Ue, "la", ha, 164, 68, Ej], [aa, "la", Zn, 163, 68, 1], [1, "la", 5, 162, 68, Oj], [1, "la", Zn, 161, 68, 1], [1, "la", 3, 153, 72, Ej], [j, "la", Qk, 163, 60, Ej], [Eo, "la", 3, 164, 42, ie], [Oj, "la", 0, 155, 51, Ej], [1, "la", 1, 168, 42, j], [1, "la", 4, 158, 48, 1], [1, "la", Yi, 178, 57, jq], [j, "la", ea, 151, 69, Ue], [Ue, "la", vk, 170, 74, j], [Ej, "la", zk, 160, 84, 1], [1, "la", 2, 174, 92, ie], [1, "la", zk, 188, 90, 1], [ie, "la", 2, 209, 84, j], [1, "la", vk, 206, 93, 1], [1, "la", 5, 156, 70, Ej], [1, "la", 5, 165, 57, Ej], [1, "la", Ya, 182, 58, 1], [1, "la", 5, 166, 44, ie], [1, "la", 1, 163, 39, jq], [Ue, "la", jq, 152, 53, 1], [Oj, "la", 1, 152, 37, j], [1, "la", 2, 163, 13, ie], [1, "de", Za, 219, ua, 0], [1, "de", Vq, 203, 13, 0], [1, "de", 15, 220, 19, vq], [1, "de", Or, 223, 15, 0], [1, "de", 12, 213, 10, 0], [ie, "de", 37, 217, 19, 0], [aa, "de", 38, 220, 14, 0], [Eo, "de", 38, 215, 10, 0], [1, "de", 40, 214, Vq, Gr], [jq, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, vq], [1, "de", 37, 212, 18, vq], [jq, "de", 38, 215, 26, Cn], [1, "de", 37, 222, 25, 0], [Ok, "de", 40, 221, 29, Fj], [aa, "de", Or, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", Vq, 215, 30, qk], [1, "de", 15, 219, 33, 0], [Ue, "de", 38, 220, 31, _a], [j, "de", 38, 217, 35, 0], [Oj, "de", 40, 221, 34, 0], [aa, "de", 39, 215, 32, 0], [Ok, "de", 37, 211, 35, 0], [1, "de", lq, 223, 38, Fj], [Ok, "de", 13, 213, 38, 0], [Ok, "de", 14, 222, 44, qn], [1, "de", nq, 208, 33, Cq], [1, "de", nq, 206, 23, Cq], [Ok, "de", 13, 205, 28, Cq], [1, "de", 14, 211, 23, Gr], [1, "de", 14, 201, 20, 0], [Ok, "de", oa, 198, 9, ne], [jq, "de", 15, 199, 16, 0], [1, "de", ua, 194, Io, 0], [Ok, "de", S, 197, 23, 0], [Zq, "de", 37, 205, mk, qn], [j, "de", 39, 204, vr, Fj], [1, "de", 40, 196, 12, 0], [j, "de", 40, 198, wa, ne], [1, "de", 37, 192, 11, Cn], [Eo, "de", 37, 199, 24, Cn], [Eo, "de", 37, 209, 24, Cn], [1, "de", 39, 209, 30, Gr], [Zq, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, vq], [1, "de", 40, 187, 23, 0], [ie, "de", 38, 187, fa, ne], [aa, "de", 39, 192, wa, 0], [1, "de", 37, 185, nq, 0], [1, "de", Za, 188, ci, ne], [Oj, "de", 13, 185, 13, tj], [1, "de", Fi, 189, rn, 0], [1, "de", ci, 187, 22, Gr], [1, "de", oa, 180, 9, 0], [Ue, "de", Za, 177, 14, qn], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [aa, "de", 40, 182, 9, _a], [Ue, "de", 39, 179, je, 0], [ie, "de", 39, 175, 9, ne], [Ue, "de", 40, 173, Q, Cn], [j, "de", 37, 169, 11, gr], [1, "de", 37, 163, Va, Cn], [jq, "de", 38, 164, oj, gr], [1, "de", 39, 170, 20, qk], [1, "de", 40, 160, Ea, ne], [Ok, "de", 40, 154, ae, 0], [j, "de", 40, 165, 23, qn], [Zq, "de", 40, 150, Qq, 0], [Ue, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, Cn], [Zq, "de", 12, 159, yo, 0], [1, "de", Pa, 151, Ca, Fj], [1, "de", Vq, 150, 14, Cq], [1, "de", 15, 153, 19, Cq], [1, "de", pn, 161, 25, 0], [jq, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, qk], [1, "de", 12, 180, 29, Cn], [1, "de", bk, 188, 31, Cn], [1, "de", 14, 181, 36, ne], [Ue, "de", 37, 186, 33, qn], [1, "de", 38, 183, 26, qk], [1, "de", 39, 177, 21, 0], [Eo, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [Ue, "de", 37, 168, 34, gr], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [j, "de", 38, 173, 45, _a], [1, "de", 39, 160, 35, Cq], [aa, "de", 40, 161, 42, 0], [aa, "de", 40, 170, 39, 0], [ie, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, Gr], [Ok, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, ur], [1, "de", 37, 154, 45, tj], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [ie, "de", 40, 160, 52, qn], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [Ok, "de", 12, 176, 45, vq], [j, "de", 12, 167, 32, Fj], [1, "de", Tn, 158, 32, qn], [Oj, "de", Wn, 149, 28, 0], [1, "de", 15, 163, 30, 0], [aa, "de", 14, 158, 39, 0], [Ok, "de", S, 171, 43, ur], [Ok, "de", 12, 174, 36, vq], [1, "de", S, 151, 43, Cn], [Ok, "de", 13, 152, 48, Cq], [j, "de", 14, 164, 49, 0], [aa, "de", 15, 149, 52, 0], [Ej, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, vq], [Ok, "de", Fi, 186, 48, _a], [1, "de", 37, 182, 48, Cn], [1, "de", 38, 187, 52, ur], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, ur], [jq, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, qk], [1, "de", 38, 200, 49, _a], [1, "de", 37, 196, 54, Fj], [Ue, "de", bk, 194, 40, Fj], [j, "de", 13, 202, 45, qk], [Ue, "de", tr, 198, 47, 0], [1, "de", 15, 198, 55, 0], [Ej, "de", 15, 212, 54, 0], [jq, "de", 15, 216, 63, 0], [jq, "de", Q, 209, 62, 0], [1, "de", 12, 219, 60, Cq], [Zq, "de", 12, 206, 56, Fj], [Ok, "de", 12, 218, 72, 0], [Ej, "de", 12, 223, 67, 0], [jq, "de", S, 205, 64, 0], [1, "de", Or, 193, 63, 0], [j, "de", 14, 216, 80, 0], [Ej, "de", 14, 222, 87, ur], [1, "de", 38, 210, 53, Cn], [Ok, "de", 37, 210, 47, ur], [1, "de", 37, 200, 63, ur], [1, "de", 37, 218, 62, 0], [aa, "de", 37, 222, 60, Cn], [Eo, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, tj], [j, "de", 38, 218, 55, gr], [aa, "de", 38, 212, 61, qn], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, qn], [1, "de", 40, 222, 81, 0], [Oj, "de", 38, 214, 79, tj], [j, "de", 39, 213, 83, 0], [Ok, "de", 39, 207, 76, vq], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, Cq], [Ej, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [ie, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, _a], [1, "de", 39, 198, 82, Gr], [1, "de", 39, 207, 99, 0], [Ej, "de", 39, 200, 97, qn], [1, "de", 39, 202, 92, Cn], [Ue, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, gr], [1, "de", 39, 194, 81, 0], [Ue, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, tj], [1, "de", 37, 191, 72, qn], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [Zq, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [aa, "de", 40, 192, 93, ne], [ie, "de", 40, 165, 92, ne], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [aa, "de", 38, 164, 98, qn], [aa, "de", 38, 151, 99, 0], [aa, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [Eo, "de", 40, 160, 77, gr], [1, "de", 40, 167, 77, 0], [Ok, "de", 40, 153, 69, ur], [1, "de", 40, 149, 74, 0], [Eo, "de", 37, 161, 64, gr], [Zq, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, qn], [Zq, "de", 39, 174, 64, tj], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, ne], [Ok, "de", ua, 218, 96, 0], [1, "de", 13, 212, 95, Gr], [Oj, "de", Fi, 204, 85, Cq], [1, "de", 15, 215, 85, Cn], [1, "de", ci, 197, 97, ur], [Oj, "de", bk, 198, 87, 0], [1, "de", tr, 196, 77, _a], [1, "de", 13, 194, 86, 0], [Ue, "de", 15, 181, 84, Fj], [1, "de", 14, 184, 79, 0], [1, "de", Wa, 188, 93, _a], [Zq, "de", 13, 180, 87, 0], [1, "de", mk, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, gr], [1, "de", oa, 176, 75, 0], [1, "de", tr, 172, 72, tj], [jq, "de", Wn, 169, 82, gr], [1, "de", je, 164, 78, qk], [1, "de", Yk, 158, 87, _a], [Eo, "de", 13, 149, 86, qk], [1, "de", Nq, 154, 91, 0], [1, "de", fq, 160, 74, _a], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, ur], [Ok, "de", 14, 150, 60, qk], [1, "de", ua, 169, 59, ur], [1, "de", Pa, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [Eo, "cs", 0, 141, 102, aa], [jq, "cs", X, 138, 102, Oj], [1, "cs", zk, 139, 102, 1], [ie, "cs", 2, 140, 102, 1], [jq, "cs", 3, 143, 107, jq], [Ok, "cs", 0, 143, 106, 1], [Ue, "cs", 2, 143, 105, Eo], [1, "cs", 2, 142, 103, jq], [1, "cs", Cn, 142, 104, 1], [Ej, "cs", 2, 141, 103, aa], [Eo, "cs", 3, 142, 105, ie], [jq, "cs", Qk, 140, 103, Ok], [Zq, "cs", 3, 141, 104, aa], [Ue, "la", Aq, 151, 23, jq], [Oj, "la", uj, 150, 22, Eo], [aa, "la", 1, 149, 21, 1], [jq, "la", 4, 148, 21, 1], [1, "la", 2, 147, xq, 1], [1, "la", 4, 147, 19, Eo], [ie, "la", 5, 147, 18, 1], [aa, "la", 1, 147, Hk, 1], [Zq, "la", 3, 144, Mn, Zq], [Zq, "la", 5, 147, In, aa], [j, "la", re, 147, 15, aa], [Eo, "la", 4, 147, Fi, Eo], [1, "la", hn, 145, 11, j], [j, "la", 5, 145, ua, 1], [j, "la", 1, 146, Hn, 1], [1, "la", 2, 145, 13, jq], [1, "la", 3, 155, 25, Ok], [1, "la", 0, 155, 24, Zq], [1, "la", Z, 153, 26, Oj], [Ok, "cs", ur, 151, 24, ie], [Ok, "cs", 0, 153, 22, aa], [1, "cs", 3, 152, 22, Ok], [ie, "cs", 3, 154, 22, 1], [1, "cs", Ok, 157, 26, 1], [1, "cs", vk, 157, 24, 1], [1, "cs", Zn, 156, 26, 1], [Zq, "cs", Zn, 154, 28, 1], [Ok, "cs", 2, 151, 26, Ej], [1, "cs", re, 152, 25, 1], [1, "cs", vk, 151, 25, 1], [1, "cs", 2, 156, 27, Oj], [1, "cs", 2, 157, 23, aa], [Zq, "cs", re, 157, 22, 1], [Ej, "cs", 3, 150, 24, 1], [1, "cs", nn, 150, 23, Eo], [Ue, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, ne], [1, "de", Bk, 153, 29, ur], [Eo, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [Eo, "de", 13, 147, 36, ur], [1, "de", 13, 161, 56, 0], [Oj, "de", 13, 147, 79, ur], [1, "de", Or, 157, 99, qk], [Zq, "de", 12, 172, 99, 0], [1, "la", nn, 143, 102, Zq], [1, "la", hn, 149, 96, ie], [1, "la", 4, 145, 102, Eo], [ie, "la", Oj, 148, 97, Ue], [1, "la", ha, 148, 98, Eo], [1, "cs", 3, 144, 104, 1], [ie, "cs", 3, 144, 103, Ue], [aa, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, Ue], [1, "cs", nn, 142, 101, Ok], [Ue, "cs", 3, 143, 100, 1], [1, "cs", ar, 141, 101, 1], [1, "cs", ar, 142, ba, 1], [1, "cs", tj, 141, 100, Ej], [1, "cs", re, 140, 101, Ue], [1, "cs", 2, 144, 105, j], [1, "cs", 3, 146, 103, 1], [j, "cs", 3, 146, 102, j], [jq, "cs", 3, 150, 95, Ue], [Zq, "cs", _a, 150, 97, 1], [ie, "cs", 2, 151, 98, Ok], [Eo, "cs", Gr, 153, 97, aa], [aa, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [jq, "plm", ie, 214, 131, qn], [1, "plm", j, 207, 128, Fj], [ie, "plm", 0, 208, 127, 0], [1, "s", Eo, 207, 132, Ej], [Ue, "s", re, 208, 133, 1], [aa, "plm", 0, 217, 132, ur], [1, "plm", 2, 186, 158, ne], [Ok, "plm", 0, 184, 160, 0], [1, "s", j, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, Eo], [1, "p", ne, 114, 205, Ok], [Ok, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [jq, "plm", 2, 112, 204, 0], [Ej, "s", re, 114, 207, 1], [Oj, "s", re, 115, 204, ie], [Oj, "plm", vk, 122, 151, 0], [1, "plm", Ok, 123, 150, 0], [Zq, "plm", 1, 117, 151, 0], [1, "s", vq, 118, 150, 1], [1, "s", Ue, 122, 152, 1], [Ok, "plm", 2, 156, 130, 0], [1, "plm", Oj, 154, 127, 0], [1, "s", Fj, 153, 128, jq], [1, "s", 2, 152, 130, j], [ie, "p", 0, 123, 65, 1], [Eo, "plm", wr, 125, 62, _a], [1, "plm", 1, 124, 62, Gr], [1, "plm", 0, 120, 65, Cn], [Ok, "s", jq, 125, 63, 1], [1, "s", Ue, 121, 64, Ue], [1, "s", vk, 122, 62, Ej], [Zq, "cs", Cn, 140, 106, aa], [Ok, "cs", 2, 144, 106, 1], [Ej, "cs", zk, 145, 105, 1], [Oj, "cs", 2, 144, 107, Ue], [1, "cs", re, 141, 106, 1], [j, "cs", 2, 141, 105, 1], [ie, "cs", 2, 140, 105, Zq], [1, "cs", 2, 140, 104, ie], [Oj, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [Zq, "cs", zk, 139, 103, Ej], [1, "cs", zk, 139, 105, 1], [Eo, "cs", re, 142, 106, Ue], [1, "cs", 2, 142, 107, jq], [1, "cs", 2, 139, 101, 1], [Ej, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [Ue, "la", 1, 146, 100, 1], [Ok, "la", 4, 145, 101, Eo], [aa, "cs", 1, 215, 47, aa], [Ej, "cs", wr, 216, 47, 1], [Oj, "cs", vk, 215, 48, 1], [1, "la", 4, 214, 45, ie], [1, "la", hn, 215, 45, 1], [j, "la", ne, 216, 46, Ok], [Zq, "la", 4, 216, 48, 1], [aa, "la", 4, 216, 49, 1], [Zq, "la", 4, 217, 50, ie], [1, "la", X, 214, 49, 1], [1, "la", Yi, 211, 45, j], [1, "la", Z, 213, 47, Ok], [aa, "cs", 2, 224, 48, Ok], [1, "plm", zk, 111, 243, ur], [Ue, "plm", Ej, 108, 246, 0], [Ue, "s", Zq, 110, 243, Eo], [aa, "s", ne, 108, 245, Oj], [Zq, "s", Gr, 121, 276, Oj], [1, "plm", 2, 122, 277, 0], [aa, "plm", vk, 117, 276, Cq], [ie, "plm", Ej, 118, 277, 0], [Ok, "s", 1, 118, 278, Oj], [ie, "cs", 2, 66, In, Ue], [1, "cs", 3, 67, ka, 1], [1, "cs", 0, 67, ja, ie], [ie, "cs", 2, 66, vn, 1], [1, "cs", Qk, 66, I, Eo], [1, "cs", 3, 68, 17, Ue], [1, "cs", 0, 36, 16, Ok], [1, "cs", wr, 36, 17, 1], [1, "cs", vk, 36, 18, 1], [ie, "cs", 3, 35, _q, Oj], [1, "cs", Ka, 36, 19, 1], [1, "cs", ar, 35, 18, Oj], [1, "cs", re, 66, 30, 1], [1, "cs", 2, 66, 23, j], [Zq, "cs", 3, 66, 22, 1], [1, "cs", Z, 66, 31, Zq], [1, "cs", vk, 36, 30, j], [1, "cs", 2, 36, 23, 1], [Ue, "cs", 1, 36, 22, ie], [j, "cs", 2, 36, 31, Zq], [Ej, "cs", 3, 42, Yk, 1], [1, "cs", qk, 43, Gq, ie], [1, "cs", re, 44, 13, Ok], [1, "cs", 3, 42, 16, Ue], [Zq, "cs", nn, 41, jk, 1], [Ok, "cs", ar, 40, Fk, 1], [Ok, "cs", 0, 42, 19, j], [Zq, "cs", Qk, 43, la, Eo], [1, "cs", 3, 44, 19, Oj], [1, "cs", X, 45, bn, Oj], [1, "cs", wr, 46, 19, 1], [1, "cs", 0, 43, 22, Ej], [1, "cs", vk, 42, 22, j], [jq, "cs", 1, 41, 22, 1], [jq, "cs", qn, 40, 22, j], [1, "cs", 3, 39, _q, 1], [1, "cs", Ok, 44, 26, 1], [Ok, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, jq], [j, "cs", qk, 47, 26, jq], [Ok, "cs", 2, 48, 26, Ej], [1, "cs", 3, 47, 25, Ue], [ie, "cs", Z, 43, 27, 1], [1, "cs", aa, 49, 32, 1], [1, "cs", wr, 50, 32, Eo], [1, "cs", 2, 51, 32, 1], [Eo, "cs", 2, 52, 32, 1], [1, "d", vq, 51, 29, Ue], [1, "d", 1, 53, 29, ie], [1, "d", Zq, 49, 29, 1], [1, "cs", co, 55, 31, 1], [Ej, "cs", 3, 54, 32, 1], [1, "cs", nn, 47, 31, Zq], [1, "cs", Kj, 48, 32, 1], [j, "cs", 0, 51, 33, 1], [aa, "cs", 2, 52, 33, Ue], [ie, "cs", 2, 50, 33, 1], [1, "cs", Qk, 56, 30, ie], [1, "cs", 3, 56, 31, Ue], [j, "cs", Qk, 46, 30, 1], [Ue, "cs", 3, 46, 31, Ok], [1, "cs", Ue, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", wr, 53, 32, Ok], [Ej, "cs", gr, 55, 32, 1], [ie, "cs", ur, 47, 32, Oj], [1, "d", jq, 54, 35, Eo], [Eo, "fo", 2, 35, 15, 0], [1, "fo", Zn, 36, Or, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, jq], [1, "cs", re, 59, 13, 1], [1, "cs", 1, 58, je, 1], [Eo, "cs", Ka, 62, 16, 1], [Eo, "cs", Cn, 61, w, aa], [1, "cs", X, 60, tq, 1], [Ej, "cs", 3, 63, 17, aa], [Zq, "cs", Zn, 60, Yj, 1], [Ej, "cs", 1, 59, 19, 1], [1, "cs", ar, 58, wj, Ok], [Ok, "cs", re, 57, 19, 1], [jq, "cs", 2, 56, Ak, 1], [1, "cs", Gr, 55, Iq, 1], [Oj, "cs", 2, 55, 17, Zq], [1, "cs", 2, 63, 23, 1], [jq, "cs", 0, 62, 22, 1], [j, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", _a, 59, 22, Eo], [1, "cs", 2, 54, 26, jq], [Oj, "cs", 2, 55, 26, Eo], [1, "cs", 2, 56, 26, 1], [Oj, "cs", 1, 57, 26, 1], [ie, "cs", 2, 58, 26, j], [1, "cs", 2, 59, 27, 1], [jq, "cs", wr, 68, 16, 1], [1, "cs", zk, 68, 15, 1], [1, "cs", Z, 69, 15, aa], [1, "cs", 3, 70, 15, 1], [jq, "cs", ar, 70, Vq, 1], [jq, "cs", 1, 69, 14, 1], [Ue, "cs", 1, 69, ka, 1], [1, "cs", 2, 71, 13, Zq], [1, "cs", 2, 71, Q, 1], [1, "cs", 3, 72, 13, ie], [1, "cs", Ka, 70, nk, 1], [Ej, "cs", Kj, 71, R, Oj], [1, "cs", 2, 72, ta, 1], [jq, "cs", tj, 73, 8, ie], [Oj, "cs", X, 74, 9, Oj], [1, "cs", 3, 74, le, 1], [jq, "cs", qn, 75, 8, Ej], [Ue, "cs", co, 76, 8, Ej], [1, "cs", nn, 75, Ma, Oj], [1, "cs", Kj, 75, Ln, 1], [1, "cs", Gr, 76, ia, 1], [1, "cs", vq, 76, 16, 1], [Ue, "cs", Qk, 76, 15, Ok], [1, "cs", 3, 75, Fk, 1], [1, "cs", wr, 77, D, 1], [Ue, "cs", 2, 77, Wn, Ok], [Zq, "cs", X, 77, Or, ie], [1, "cs", 3, 77, 13, aa], [1, "cs", Qk, 77, 15, 1], [Ej, "cs", Cn, 74, fa, 1], [jq, "cs", Zq, 75, _q, aa], [1, "cs", vk, 74, gk, Ej], [Ok, "cs", co, 73, m, Ok], [1, "cs", 3, 67, 23, Zq], [1, "cs", Fj, 68, 23, jq], [aa, "cs", 0, 72, Ja, Oj], [Ej, "cs", 2, 73, Kk, 1], [1, "cs", vk, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [Ej, "cs", 2, 77, 27, Eo], [ie, "cs", Zn, 76, 26, Ej], [aa, "cs", Zn, 75, 26, Eo], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [Oj, "cs", Gr, 76, 25, ie], [Zq, "cs", Ej, 77, 23, 1], [Ok, "cs", 2, 77, tq, jq], [Oj, "cs", vk, 76, 17, j], [Zq, "cs", re, 76, 24, 1], [1, "cs", re, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [Ue, "cs", re, 77, 26, ie], [aa, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [Ok, "cs", re, 66, 24, 1], [1, "cs", re, 73, 26, 1], [Eo, "cs", wr, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [Oj, "cs", vk, 66, Qq, j], [1, "cs", 2, 66, 20, j], [1, "cs", vk, 66, 21, 1], [jq, "cs", Zn, 67, 18, 1], [1, "cs", vk, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, Eo], [aa, "cs", jq, 75, 35, Ok], [1, "cs", 2, 75, 36, Ok], [1, "cs", wr, 76, 36, Ej], [1, "cs", wr, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", re, 76, 35, j], [Zq, "cs", Zn, 77, 33, 1], [1, "cs", 2, 77, 31, Oj], [1, "cs", gr, 77, 29, Oj], [1, "cs", 0, 71, 32, 1], [1, "cs", qk, 76, 34, jq], [ie, "cs", vk, 77, 30, 1], [1, "cs", 2, 77, 28, jq], [1, "cs", 2, 76, 28, 1], [1, "cs", zk, 75, 28, 1], [j, "cs", wr, 76, 29, 1], [1, "cs", wr, 76, 33, 1], [1, "cs", wr, 70, 32, Zq], [1, "cs", 2, 69, 31, Ok], [1, "cs", Gr, 68, 31, Ue], [1, "cs", zk, 67, 31, Ej], [1, "cs", re, 67, 30, j], [j, "cs", wr, 69, 32, 1], [Ue, "cs", 1, 67, 32, Zq], [jq, "cs", wr, 68, 32, 1], [1, "cs", zk, 66, 32, j], [Ej, "cs", vk, 66, 33, j], [1, "cs", zk, 67, 33, 1], [1, "cs", Zn, 70, 33, ie], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, j], [j, "cs", 0, 68, 34, 1], [1, "cs", aa, 66, 35, Zq], [Zq, "cs", 2, 67, 34, jq], [j, "cs", zk, 66, 34, 1], [1, "cs", vk, 65, 35, 1], [1, "cs", Zn, 64, 36, 1], [Ej, "cs", 2, 65, 36, 1], [Ok, "cs", 2, 67, 35, 1], [jq, "cs", 2, 66, 36, aa], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [Eo, "cs", re, 76, 9, Ue], [aa, "cs", zk, 77, 9, Oj], [Zq, "cs", vk, 77, 8, Oj], [1, "cs", 2, 77, 10, Zq], [Zq, "cs", 2, 78, 8, jq], [1, "cs", 2, 78, vr, 1], [1, "cs", 2, 78, 10, aa], [1, "cs", zk, 78, 11, Zq], [1, "cs", re, 78, 12, Eo], [1, "cs", zk, 78, 13, aa], [1, "cs", Cn, 79, 9, 1], [Zq, "cs", ie, 79, 11, 1], [Ue, "cs", X, 79, 8, Eo], [Ue, "cs", 3, 79, xk, Ue], [Ue, "cs", Qk, 79, Za, 1], [Ok, "cs", nn, 80, le, 1], [1, "cs", Oj, 80, 10, j], [1, "cs", Zn, 80, 9, Ue], [1, "cs", 2, 80, Uj, 1], [Eo, "cs", Zn, 81, 8, jq], [Ok, "cs", 2, 81, _j, 1], [1, "cs", 2, 81, 10, jq], [1, "cs", wr, 78, Wa, Ue], [1, "cs", wr, 79, 13, jq], [Ej, "cs", zk, 78, 15, ie], [Ok, "cs", 2, 80, 12, Zq], [1, "cs", 0, 79, Vq, 1], [1, "cs", Cq, 82, 9, 1], [1, "cs", vk, 82, R, Zq], [Oj, "cs", re, 82, Ho, 1], [Ej, "cs", 2, 81, D, Ok], [1, "cs", 3, 80, N, 1], [jq, "cs", 1, 78, 30, jq], [jq, "cs", 1, 78, 34, 1], [j, "cs", 1, 78, 27, 1], [Oj, "cs", 0, 78, 25, 1], [ie, "cs", 0, 79, 29, jq], [1, "cs", 0, 79, 32, Ue], [1, "cs", 0, 79, 35, 1], [Ok, "cs", 2, 78, 35, 1], [1, "cs", re, 78, 36, 1], [Ue, "cs", 2, 79, 34, j], [jq, "cs", Zn, 78, 33, Eo], [aa, "cs", Zn, 79, 33, Eo], [Ej, "cs", 2, 78, 32, Zq], [1, "cs", wr, 78, 31, Eo], [Oj, "cs", re, 79, 31, 1], [Ej, "cs", 2, 79, 30, 1], [Oj, "cs", zk, 78, 29, 1], [1, "cs", zk, 78, 28, Eo], [1, "cs", 2, 79, 28, 1], [j, "cs", vk, 79, 27, 1], [Ej, "cs", 2, 78, 26, jq], [1, "cs", 2, 79, 26, 1], [Ue, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, Eo], [ie, "cs", 2, 80, 33, ie], [1, "cs", 2, 80, 31, 1], [aa, "cs", zk, 80, 30, 1], [1, "cs", 2, 80, 32, aa], [Ue, "cs", 2, 80, 29, 1], [j, "cs", vk, 80, 28, 1], [1, "cs", wr, 80, 27, ie], [Ok, "cs", Gr, 81, 30, 1], [Eo, "cs", Zq, 81, 32, jq], [Zq, "cs", j, 81, 28, 1], [Ok, "cs", 2, 81, 29, Eo], [1, "cs", zk, 81, 31, Zq], [Eo, "cs", wr, 81, 33, aa], [Zq, "cs", 2, 82, 30, j], [j, "cs", Zn, 82, 31, 1], [aa, "cs", re, 82, 32, 1], [aa, "cs", Fj, 37, 36, Ue], [1, "cs", zk, 38, 36, 1], [aa, "cs", 2, 37, 35, j], [ie, "cs", Zn, 36, 36, aa], [Eo, "cs", zk, 34, 35, Eo], [1, "cs", 2, 35, 35, jq], [aa, "cs", 2, 36, 35, 1], [Eo, "cs", 0, 33, 34, Eo], [Ue, "cs", 1, 35, 34, 1], [1, "cs", Zn, 36, 34, Oj], [ie, "cs", 2, 34, 34, Eo], [1, "cs", re, 36, 33, 1], [Zq, "cs", wr, 35, 33, Ej], [1, "cs", 2, 34, 33, 1], [1, "cs", zk, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [jq, "cs", jq, 36, 32, Eo], [1, "cs", 1, 32, 32, 1], [ie, "cs", 2, 35, 32, 1], [1, "cs", zk, 33, 32, jq], [1, "cs", Zn, 32, 33, j], [1, "cs", 2, 33, 31, Oj], [1, "cs", wr, 34, 31, 1], [jq, "cs", wr, 35, 31, ie], [1, "cs", 0, 34, 32, 1], [1, "cs", vk, 35, 30, Oj], [1, "cs", Ue, 39, 23, 1], [1, "cs", ar, 39, 22, Ue], [1, "cs", X, 36, 24, Eo], [1, "cs", 3, 35, 24, jq], [1, "cs", 2, 34, 23, aa], [Ej, "cs", 2, 35, 23, 1], [Zq, "cs", re, 36, c, 1], [1, "cs", 2, 36, 21, Oj], [ie, "cs", 2, 35, 22, Zq], [Oj, "cs", 2, 35, 16, ie], [ie, "cs", re, 34, 16, j], [ie, "cs", 2, 33, ka, 1], [Ok, "cs", 0, 34, 17, 1], [1, "cs", Fj, 32, 15, aa], [1, "cs", 2, 31, tr, 1], [jq, "cs", 3, 30, 13, jq], [1, "cs", Ok, 33, 15, Ue], [Zq, "cs", Oj, 31, Hn, 1], [1, "cs", wr, 32, 14, jq], [1, "cs", 0, 31, le, j], [1, "cs", re, 32, Eq, Ej], [Ok, "cs", 2, 25, 13, Oj], [aa, "cs", 0, 25, 12, j], [1, "cs", 2, 25, $i, 1], [j, "cs", 3, 25, Va, 1], [1, "cs", qk, 25, vr, Oj], [1, "cs", wr, 25, 8, 1], [Ok, "cs", Zn, 26, 8, 1], [1, "cs", re, 27, 8, jq], [Zq, "cs", 2, 28, 8, aa], [Ej, "cs", 2, 29, le, Ej], [Ok, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [ie, "cs", 2, 27, 9, 1], [1, "cs", wr, 26, ae, Oj], [Oj, "cs", aa, 27, Ho, ie], [1, "cs", nn, 28, hk, 1], [1, "cs", 3, 25, Vq, 1], [1, "cs", Cn, 25, 15, aa], [Ok, "cs", 2, 26, Io, Ue], [1, "cs", 3, 27, 16, Eo], [ie, "cs", 0, 28, 17, aa], [j, "cs", Zq, 29, I, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", wr, 25, w, Ue], [ie, "cs", 2, 27, ja, aa], [jq, "cs", 2, 26, 17, Eo], [1, "cs", 1, 27, Wk, Ok], [1, "cs", zk, 28, 18, j], [1, "cs", zk, 30, 19, 1], [1, "cs", 2, 29, Pr, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", Zn, 24, 15, Zq], [Oj, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, Ln, Ej], [1, "cs", wr, 24, 11, Ej], [1, "cs", zk, 24, 12, Ok], [aa, "cs", vk, 24, 13, 1], [Zq, "cs", 1, 23, 10, Ej], [1, "cs", Cq, 22, Eq, ie], [aa, "cs", _a, 22, 12, Ok], [1, "cs", 1, 23, nk, 1], [jq, "cs", zk, 24, Eq, ie], [jq, "cs", 2, 24, 9, ie], [j, "cs", 2, 23, Dk, Zq], [1, "cs", 2, 22, 9, 1], [1, "cs", wr, 22, ia, Eo], [1, "cs", 2, 22, ma, 1], [1, "cs", wr, 23, 11, 1], [Oj, "cs", 2, 23, 12, ie], [1, "cs", 2, 23, 13, 1], [1, "cs", zk, 22, Yk, Eo], [Ej, "cs", 2, 21, 9, ie], [1, "cs", zk, 21, le, 1], [j, "cs", vk, 29, 25, 1], [aa, "cs", 2, 25, 24, Ok], [Ej, "cs", 2, 26, 25, aa], [1, "cs", 2, 27, 25, aa], [1, "cs", ne, 28, 25, aa], [1, "cs", Ok, 25, 23, j], [ie, "cs", zk, 26, 24, Ue], [1, "cs", gr, 24, 25, 1], [Ej, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", Z, 25, 25, Oj], [jq, "cs", 3, 23, 25, Ok], [1, "cs", ie, 22, 26, aa], [Ok, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, Ej], [1, "cs", 2, 23, 26, 1], [jq, "cs", 2, 24, 26, Oj], [1, "cs", re, 25, 26, 1], [1, "cs", 2, 27, 26, j], [Ue, "cs", 2, 28, 26, 1], [1, "cs", re, 30, 26, Ej], [j, "cs", Zn, 29, 27, 1], [1, "cs", 2, 28, 28, Ue], [Ej, "cs", Ok, 26, 29, 1], [jq, "cs", 0, 28, 27, aa], [Oj, "cs", 2, 27, 28, ie], [1, "cs", vk, 27, 27, Zq], [Ue, "cs", wr, 26, 28, 1], [Zq, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, Ok], [1, "cs", Zn, 25, 27, 1], [Ej, "cs", Zn, 23, 27, Ej], [Ok, "cs", 2, 22, 27, 1], [ie, "cs", re, 24, 27, 1], [Ej, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, aa], [Oj, "cs", Ue, 24, 30, Eo], [Ej, "cs", re, 25, 31, 1], [ie, "cs", re, 25, 30, Oj], [1, "cs", 2, 25, 29, 1], [jq, "cs", vk, 24, 29, ie], [Ue, "cs", Zn, 23, 29, ie], [j, "cs", 2, 26, 33, Zq], [1, "cs", 0, 26, 34, Ej], [1, "cs", zk, 27, 35, jq], [j, "cs", wr, 22, 28, 1], [Oj, "cs", Zn, 23, 28, jq], [1, "cs", Zn, 24, 31, Eo], [Zq, "cs", re, 24, 32, 1], [1, "cs", wr, 25, 33, 1], [ie, "cs", re, 26, 35, 1], [Ue, "cs", 2, 24, 33, 1], [Zq, "cs", 2, 25, 34, aa], [j, "cs", 1, 22, 29, 1], [Ok, "cs", Eo, 24, 34, 1], [1, "cs", Gr, 23, 35, 1], [1, "cs", 2, 25, 35, j], [1, "cs", 2, 24, 35, 1], [Ok, "cs", 2, 23, 34, 1], [Oj, "cs", 2, 23, 33, 1], [Ue, "cs", vq, 22, 33, 1], [1, "cs", 1, 23, 32, Zq], [1, "cs", zk, 22, 32, j], [j, "cs", 2, 23, 31, ie], [j, "cs", 2, 23, 30, jq], [1, "cs", 2, 22, 30, Ue], [1, "cs", 2, 22, 31, Eo], [1, "cs", Oj, 21, 31, 1], [jq, "cs", 0, 21, 29, Ue], [1, "cs", zk, 21, 30, Ue], [1, "cs", zk, 24, 36, Ok], [j, "cs", Zn, 26, 36, 1], [1, "cs", 2, 25, 36, Zq], [Oj, "cs", 2, 27, 36, jq], [jq, "cs", Zn, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", re, 16, 67, jq], [Ej, "g", 0, fq, ja, ie], [jq, "s", _a, 18, 13, Ok], [Ej, "s", 0, 85, 11, 1], [j, "f", 0, 41, 102, aa], [1, "f", _a, 42, 124, 1], [Ue, "f", 0, 64, 116, 1], [ie, "f", 0, 74, 104, Ej], [Ej, "f", Cq, 70, 87, ie], [Zq, "f", vq, 27, 96, 1], [Eo, "f", 0, 22, 79, 1], [j, "f", 0, 20, 117, Zq], [1, "f", Cn, 30, 137, 1], [aa, "f", tj, 59, 146, 1], [1, "f", ur, 52, 147, j], [1, "f", 0, xq, 149, 1], [Oj, "f", 0, 36, 146, Eo], [jq, "f", gr, 62, 124, Ok], [Zq, "g", 1, 34, 121, Ej], [1, "g", ie, 52, 116, 1], [Ej, "g", 1, 78, 116, Zq], [1, "g", aa, 71, 129, Eo], [1, "s", qk, 53, No, Zq], [Ue, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, Ok], [1, "s", 0, 48, 90, 1], [1, "s", tj, 19, 102, Ue], [Ue, "s", ne, 18, 127, Ue], [Oj, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, Eo], [Eo, "s", Fj, 44, 52, 1], [Ok, "s", 0, 26, 51, ie], [aa, "f", 1, 56, 136, 1], [Zq, "f", 1, 41, 133, 1], [jq, "f", 1, 80, 120, 1], [Ue, "f", 1, Fk, 117, 1], [jq, "f", 1, Gq, 99, aa], [1, "f", Ue, Ua, 89, j], [1, "f", 1, 90, 98, Oj], [1, "f", Eo, 84, 95, 1], [1, "f", Zq, 16, 57, 1], [1, "f", Ej, 77, 53, Zq], [j, "d", 1, 48, 35, Eo], [1, "de", 8, 33, sk, 0], [1, "de", nk, 30, 9, 0], [Zq, "de", 9, 32, 30, Cq], [Ej, "de", Ln, 30, 25, 0], [j, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", ta, 67, 29, 0], [1, "de", Dk, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, D, 0], [1, "de", 8, 68, ae, 0], [1, "de", Eq, 75, 30, 0], [1, "de", $i, 71, 33, Cn], [1, "de", 11, 72, 25, vq], [Ok, "de", uq, 64, 25, 0], [j, "de", 11, 52, xk, 0], [ie, "de", ma, 31, 15, ne], [Eo, "de", 30, 29, Wn, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, qk], [1, "de", 30, 30, 29, Fj], [Ue, "de", 30, 71, 29, gr], [Zq, "de", 28, 68, 25, 0], [Ue, "de", 28, 75, 15, 0], [1, "de", 27, 67, la, _a], [1, "de", 29, 72, 10, Gr], [1, "de", 29, 75, 32, Gr], [jq, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [ie, "fo", Ue, 34, 14, 0], [Ej, "fo", aa, 74, 28, Cn], [Eo, "fo", 2, 74, 29, ur], [aa, "fo", 2, 69, 30, 0], [Zq, "fo", 2, 77, 22, Cn], [Ej, "fo", 2, 74, 21, ur], [1, "fo", vk, 76, 18, tj], [Ue, "fo", Eo, 78, 17, Fj], [1, "fo", 1, 28, zj, tj], [1, "fo", 2, 27, 24, tj], [1, "fo", 2, 24, 17, 0], [Eo, "fo", 2, 29, 21, 0], [1, "fo", aa, 27, 32, qk], [Ej, "fo", 2, 30, 33, 0], [Oj, "fo", j, 29, 28, 0], [Zq, "fo", re, 28, 31, 0], [aa, "fo", 2, 20, 24, _a], [1, "fo", 2, yn, 26, Gr], [1, "fo", wr, 23, te, 0], [jq, "fo", 2, La, 25, Cq], [Eo, "de", 33, 29, 22, 0], [Eo, "de", 34, 32, 25, Fj], [1, "de", 34, 30, 18, Fj], [1, "de", 33, 78, I, 0], [Eo, "de", 33, 73, 35, tj], [1, "de", 36, 72, 23, 0], [aa, "de", 35, 25, Iq, 0], [1, "d", j, 83, 41, Ok], [1, "d", 1, ue, 40, Zq], [Ej, "cs", Zn, 224, 104, aa], [1, "cs", 0, 224, 105, ie], [Ok, "cs", Qk, 224, 106, 1], [1, "la", Qk, 216, 128, Ue], [Zq, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, jq], [1, "s", 1, 217, 129, 1], [Ue, "s", Cn, 218, 128, Ue], [1, "s", aa, 217, 127, Zq], [1, "s", ur, 217, 126, Ej], [1, "s", Ej, 217, 125, j], [Ue, "s", 0, 216, 124, 1], [Zq, "s", 1, 215, 124, j], [Zq, "s", 0, 214, 124, jq], [Zq, "s", Zq, 213, 125, 1], [1, "s", 0, 213, 126, ie], [Ue, "plm", 2, 217, 130, 0], [Ej, "plm", re, 212, 125, ne], [jq, "p", tj, 214, 134, aa], [1, "s", Ej, 211, 126, Oj], [ie, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, qk], [1, "b", vk, 51, 284, gr], [ie, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, Cq], [aa, "b", Kj, 40, 283, 0], [1, "b", Fj, 52, 283, tj], [aa, "b", 1, 51, 280, Gr], [1, "g", 0, 45, 269, 1], [1, "p", vq, 55, 281, 1], [1, "b", 1, xj, 172, 0], [1, "b", 2, 6, 172, ur], [jq, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [Ej, "t", 1, xj, 164, 0], [j, "t", ar, Jj, 164, 0], [Ok, "b", 0, 6, 165, 0], [Ok, "t", 3, xj, 165, 0], [1, "b", vk, 6, 166, ne], [1, "t", 4, Jo, 166, 0], [aa, "t", 4, 6, 167, qk], [1, "t", re, $a, 168, 0], [jq, "t", ne, sr, 169, 0], [Ej, "t", 4, M, 170, Cn], [1, "t", Cn, 5, 167, 0], [1, "t", 2, 5, 169, gr], [1, "b", 0, pr, 168, 0], [Zq, "s", 1, Uk, 153, Oj], [Eo, "s", wr, rr, 151, aa], [aa, "de", 5, or, 152, 0], [Ue, "t", jq, 5, 154, ur], [1, "b", 0, 6, 154, 0], [jq, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, ne], [jq, "t", wr, xj, 157, Cq], [Ej, "t", 4, 5, 155, Fj], [aa, "b", _a, 6, 157, vq], [1, "t", 1, Ui, 156, 0], [1, "t", 5, 6, 158, ur], [Ok, "b", wr, 6, 159, 0], [1, "b", Gr, gq, 162, 0], [jq, "t", 4, 6, 163, 0], [Ok, "t", uj, 6, 161, 0], [1, "b", jq, $a, 160, tj], [1, "b", 2, 5, 163, 0], [jq, "b", re, Jo, 158, Cn], [Ue, "b", 2, Jn, 161, 0], [1, "t", 1, 5, 162, 0], [Ue, "t", ie, pr, 160, Cn], [1, "b", aa, 85, 176, 0], [1, "b", 2, 83, 178, tj], [1, "s", Ok, 82, 177, j], [aa, "b", ne, 76, 172, 0], [Ue, "b", nn, 76, 174, 0], [1, "t", 3, 73, 174, Cq], [1, "t", sj, 72, 175, Fj], [1, "t", Jn, 87, 173, 0], [1, "de", Zn, 76, 175, 0], [1, "de", 3, 77, 171, qk], [1, "de", 3, 86, 177, vq], [1, "de", 2, 71, 175, ur], [Ue, "s", 1, 70, 174, Ok], [aa, "r", 48, 174, 0], [1, "r", 49, 175, 0], [Zq, "r", 50, 175, Fj], [1, "r", 51, 175, Cn], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [Zq, "r", 52, 175, 0], [1, "r", 52, 176, 0], [ie, "r", 51, 176, 0], [1, "r", 50, 176, 0], [j, "r", 49, 176, _a], [jq, "r", 48, 175, Fj], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [ie, "r", 70, 163, tj], [aa, "r", 71, 163, 0], [1, "r", 73, 163, 0], [Oj, "r", 72, 163, 0], [1, "r", 73, 164, 0], [Oj, "r", 72, 164, qk], [1, "r", 71, 164, ne], [1, "r", 70, 164, 0], [jq, "r", 69, 164, 0], [Oj, "r", 68, 164, 0], [Eo, "r", 68, 165, qn], [1, "r", 69, 165, 0], [jq, "r", 70, 165, 0], [Ue, "r", 71, 165, qk], [Zq, "r", 72, 165, gr], [1, "r", 74, 164, gr], [1, "r", 73, 165, _a], [1, "r", 72, 166, 0], [jq, "r", 71, 166, _a], [j, "r", 70, 166, vq], [Eo, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, Cn], [1, "r", 26, 164, 0], [1, "r", 28, 165, ur], [1, "r", 26, 165, Fj], [1, "r", 27, 165, _a], [Zq, "r", 25, 165, qk], [jq, "r", 24, 165, 0], [Ej, "r", 23, 165, 0], [j, "r", 22, 165, 0], [1, "r", 21, 165, 0], [Zq, "r", 21, 166, Cn], [1, "r", 22, 166, qk], [1, "r", 23, 166, vq], [jq, "r", 24, 166, ne], [1, "r", 25, 166, qk], [Ej, "r", 26, 166, Fj], [Eo, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [Oj, "r", 26, 167, 0], [1, "r", 25, 167, Cn], [1, "r", 24, 167, qn], [1, "r", 23, 167, qk], [Zq, "r", 22, 167, tj], [j, "r", 27, 167, 0], [Ok, "r", 29, 166, 0], [Ue, "r", 29, 167, 0], [1, "r", 28, 168, 0], [jq, "r", 27, 168, ur], [1, "r", 26, 168, Cq], [jq, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [Eo, "r", 27, 169, Gr], [Oj, "r", 26, 169, 0], [Eo, "r", 25, 169, 0], [Eo, "r", 24, 169, 0], [1, "r", 23, 169, 0], [ie, "r", 22, 168, qk], [j, "r", 21, 167, 0], [1, "s", 1, 52, 174, aa], [1, "t", Qk, 50, 177, 0], [Ue, "t", uj, 49, 177, qn], [ie, "b", 0, 47, 174, 0], [1, "b", Cn, 69, 166, 0], [1, "t", vk, 68, 166, 0], [1, "t", 5, 74, 163, tj], [j, "t", Zq, 73, 162, 0], [1, "s", 0, 73, 166, 1], [jq, "s", 2, 76, 165, jq], [Zq, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, ie], [Oj, "p", 0, 61, 162, Oj], [1, "p", 0, 42, 170, ie], [jq, "p", 0, 20, 174, Oj], [Ej, "p", ne, 16, 160, Zq], [aa, "b", 1, 23, 164, _a], [Ej, "b", j, 28, 169, 0], [jq, "b", vk, 29, 168, 0], [1, "b", wr, 16, 170, 0], [1, "t", 1, Io, 171, Cq], [Ej, "t", xj, mk, 175, 0], [1, "t", Jn, 19, 166, ur], [1, "t", 5, 26, 163, 0], [1, "s", j, 29, 165, j], [Ok, "t", Ya, 11, 167, tj], [Ej, "t", Cn, 29, 176, 0], [j, "b", 2, 30, 175, ur], [Oj, "t", 2, 24, 177, Cq], [Eo, "b", j, 37, 174, Cq], [Ej, "b", ur, 35, 172, ur], [1, "b", Kj, 37, 170, 0], [Ej, "t", 4, 38, 169, vq], [1, "t", 4, 34, 173, ne], [1, "t", Ui, 38, 175, gr], [1, "b", 2, 39, 173, 0], [Ej, "t", X, 37, 176, Cn], [1, "t", 4, 30, 168, 0], [Zq, "s", vk, 35, 176, 1], [Oj, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [Ej, "t", pr, 55, 173, Gr], [1, "t", 5, 45, 170, 0], [1, "b", aa, 53, 162, qn], [Zq, "b", Cn, 50, 164, tj], [1, "t", vk, 54, 163, 0], [ie, "t", 3, 49, 165, Cn], [Ue, "t", 4, 48, 160, gr], [aa, "t", 4, 57, 164, 0], [1, "t", uj, 66, 162, Cn], [Ej, "b", 1, 86, 161, qn], [jq, "b", re, 81, 163, vq], [1, "t", 3, 85, 162, 0], [Eo, "t", 5, 81, 162, Fj], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [ie, "t", xj, 72, 160, 0], [1, "t", pr, 70, 170, Fj], [1, "s", Ej, 57, 162, Eo], [jq, "b", 1, 39, 161, 0], [Ue, "b", 0, 34, 164, 0], [1, "b", vk, 54, 164, 0], [j, "t", Ue, 59, 169, ne], [Ej, "t", 3, 60, 170, 0], [aa, "t", uj, 63, 169, 0], [1, "t", hn, 63, 174, 0], [jq, "t", Oj, 62, 175, 0], [1, "t", 5, 40, 162, 0], [Ue, "t", 1, 63, 180, 0], [ie, "t", re, 64, 179, 0], [Ok, "t", 2, 35, 165, ne], [j, "s", 1, 63, 173, Eo], [Zq, "s", vk, 40, 165, 1], [1, "b", 0, 46, 169, qk], [Zq, "de", 22, 74, 168, ne], [Ej, "de", 22, 86, 168, _a], [Ej, "de", 22, 83, 175, Fj], [Ue, "de", 22, 78, 175, Gr], [Ue, "de", 19, 72, 176, _a], [1, "de", 19, 68, 168, 0], [aa, "de", Ko, 65, 163, 0], [jq, "de", 19, 75, 162, 0], [Eo, "de", 19, 80, 162, Fj], [Zq, "de", 19, 88, 159, ne], [1, "de", ca, 87, 164, 0], [Oj, "de", 19, 61, 177, 0], [ie, "de", 19, 59, 172, Cn], [1, "de", Qq, 59, 167, tj], [Oj, "de", Pr, 53, 165, 0], [Eo, "de", 19, 56, 163, 0], [1, "de", Ko, 51, 161, 0], [jq, "de", Yj, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, tj], [jq, "de", Yj, 37, 161, vq], [ie, "de", 19, 36, 166, _a], [Zq, "de", 19, 36, 171, qn], [Oj, "de", 19, 34, 174, gr], [1, "de", 19, 40, 172, 0], [Ej, "de", 19, 38, 177, Cq], [Oj, "de", Ko, 42, 176, 0], [1, "de", 19, 53, 178, gr], [1, "de", 19, 53, 172, qn], [jq, "de", Yj, 64, 181, Cn], [Zq, "de", 19, 64, 175, ne], [1, "de", la, 79, 172, 0], [Ue, "de", 19, 30, 170, 0], [Ok, "de", wj, 17, 168, 0], [Oj, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", Ko, vr, 167, tj], [1, "de", 19, c, 161, 0], [jq, "de", 19, 27, 162, 0], [jq, "de", Qq, 83, 195, 0], [Oj, "de", 2, 85, 163, 0], [j, "de", 2, 80, 164, 0], [Ue, "de", zk, 84, 169, vq], [1, "de", 2, 55, 165, 0], [Ok, "de", 3, 46, 163, 0], [1, "de", Zn, 66, 169, 0], [1, "de", Gr, 63, 175, 0], [1, "de", qk, 34, 164, _a], [1, "de", 0, Iq, 160, 0], [1, "de", wr, 40, 160, qk], [Ej, "de", 2, 53, 160, tj], [1, "de", 2, Wa, 170, 0], [1, "de", 2, Ak, 175, 0], [ie, "de", zk, 23, 176, 0], [1, "de", 5, 60, 147, 0], [Zq, "de", 33, 59, 160, qk], [aa, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [Ej, "de", 33, 43, 127, Gr], [1, "de", 33, fa, 129, Cn], [aa, "de", 33, 50, 134, 0], [aa, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, Cq], [Eo, "b", 1, 44, 156, 0], [Zq, "t", zk, 45, 157, 0], [Ej, "b", Gr, 75, 156, Cn], [aa, "t", nn, 76, 157, 0], [Zq, "t", Jn, 62, 157, 0], [jq, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [ie, "b", j, 28, 156, vq], [1, "t", 2, 27, 157, 0], [Ok, "t", uj, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", Ue, 94, 153, 1], [1, "f", Zn, 93, 153, Zq], [1, "f", re, 99, 153, 1], [aa, "f", Zq, 98, 153, j], [1, "f", 0, 97, 153, j], [Ok, "f", Eo, 96, 153, 1], [1, "s", aa, Oq, 149, Zq], [Eo, "de", Yi, 7, 150, 0], [1, "b", 3, 43, 281, qk], [1, "de", 50, 24, 39, 0], [Zq, "de", 50, 21, 39, 0], [Eo, "de", 50, 22, 43, Gr], [1, "de", 50, 15, 34, vq], [1, "de", 50, fa, 26, ne], [1, "de", 50, 44, 42, vq], [Ue, "de", 50, 57, 39, gr], [1, "de", 50, 62, 43, 0], [Oj, "de", 50, 77, 44, Gr], [1, "de", 50, 71, 41, 0], [Ej, "de", 50, 55, 39, 0], [Oj, "de", 50, 22, 39, 0], [ie, "de", 50, 20, 41, qn], [ie, "de", 50, 18, 21, qn], [1, "de", 50, oa, 21, 0], [ie, "de", 50, Wk, 19, 0], [Eo, "de", 50, 17, gk, vq], [1, "de", 50, 18, Qa, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [ie, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [Ue, "de", 50, 86, 30, tj], [Oj, "de", 50, 84, 26, tj], [j, "de", 50, 86, 23, _a], [1, "de", 50, 86, Bk, ne], [1, "de", 50, 29, 42, Cq], [Eo, "de", 9, 74, 37, 0], [jq, "de", 9, 76, 22, tj], [1, "de", ia, 79, 24, 0], [Ej, "de", 11, 77, 17, ne], [aa, "de", 36, 81, 25, 0], [Ok, "de", 36, 80, 36, 0], [Eo, "de", 36, 21, 36, qk], [ie, "de", 28, 23, 22, ur], [Eo, "de", 28, 27, 31, Cq], [1, "de", 28, 69, 36, 0], [jq, "de", 28, 80, 20, _a], [ie, "de", 51, 24, 155, vq], [1, "de", 51, 7, 154, 0], [Zq, "de", 51, 11, 154, ur], [Oj, "de", 51, 12, 156, 0], [j, "de", 51, Pq, 154, gr], [Eo, "de", 51, yn, 154, ur], [j, "de", 51, 23, 154, Fj], [1, "de", 51, 18, 157, Gr], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [Ue, "de", 51, 88, 156, Cn], [Ej, "de", 51, 82, 154, vq], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, ne], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, gr], [aa, "de", 51, 67, 154, Cn], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, Gr], [1, "de", 51, 68, 156, ne], [Ok, "de", 51, 59, 156, Fj], [1, "de", 51, 55, 154, 0], [aa, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, Cn], [ie, "de", 51, 55, 155, 0], [Eo, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, tj], [1, "de", 51, 46, 154, _a], [1, "de", 51, 44, 154, qn], [Eo, "de", 51, 43, 154, 0], [Zq, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, ur], [jq, "de", 51, 39, 156, 0], [ie, "de", 51, 34, 154, Cn], [Oj, "de", Jo, Ko, 142, vq], [j, "de", Jn, 37, 147, 0], [Ue, "de", Qr, 53, 147, qk], [1, "de", gq, 69, 150, gr], [1, "de", Aq, 94, 148, gr], [1, "de", 4, 66, 147, Fj], [aa, "de", ea, 10, 145, gr], [Oj, "de", uj, 28, 137, Cq], [1, "de", Aq, 15, 137, 0], [1, "de", hn, 48, 134, 0], [1, "de", pr, 67, 135, qk], [ie, "de", 34, 84, 155, vq], [Eo, "de", 35, 70, 156, qn], [1, "de", 35, 51, 156, 0], [ie, "de", 35, 56, 157, vq], [1, "de", 35, 65, 159, Fj], [j, "de", 35, 23, 156, Gr], [1, "de", 35, 15, 155, 0], [Ok, "de", 35, Eq, 155, gr], [1, "de", 33, J, 155, 0], [aa, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, Fj], [1, "fo", 1, 73, 36, ur], [1, "fo", 1, 80, 24, ur], [Zq, "fo", 2, 67, 36, 0], [1, "fo", re, 45, 36, Fj], [1, "fo", re, 53, 34, Gr], [1, "fo", jq, 51, 35, Gr], [Ej, "fo", 1, 58, 35, 0], [Zq, "fo", jq, 33, 35, Fj], [1, "fo", Zq, 31, 33, gr], [1, "fo", vk, 29, 36, 0], [1, "fo", Zn, 56, 36, Cq], [Zq, "fo", 2, 60, 37, Cn], [1, "fo", 2, 45, 32, ur], [Ej, "fo", 2, 22, 25, 0], [Ej, "fo", re, 21, 35, 0], [1, "de", 52, 90, 208, 0], [Ok, "de", 18, 94, 250, ur], [Oj, "de", vn, 95, 253, gr], [Zq, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, sj, 1], [1, "cs", 2, 138, ha, 1], [1, "cs", vk, 138, $a, Ue], [1, "cs", zk, 139, 6, Zq], [Eo, "cs", 2, 141, sr, Zq], [1, "cs", re, 140, 6, jq], [1, "la", ar, 143, 7, Ue], [1, "la", co, 139, 7, aa], [j, "cs", 0, 137, Co, Ok], [1, "cs", ie, 138, 8, Ok], [1, "cs", re, 137, 6, Eo], [1, "cs", zk, 137, Dn, 1], [1, "cs", 2, 136, 7, 1], [aa, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [Ok, "cs", nn, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, qn], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [Ok, "de", 54, 90, 153, Cn], [1, "de", 54, 89, 153, Cq], [Zq, "de", 54, 88, 153, vq], [jq, "de", 54, 87, 153, Fj], [1, "de", 54, 86, 153, ne], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [Zq, "de", 54, 83, 153, tj], [1, "de", 54, 82, 153, 0], [Eo, "de", 54, 81, 153, 0], [Zq, "de", 54, 80, 153, ne], [Ue, "de", 54, 79, 153, 0], [j, "de", 54, 78, 153, _a], [Eo, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, qk], [Ue, "de", 54, 74, 153, Gr], [Zq, "de", 54, 73, 153, 0], [Eo, "de", 54, 72, 153, 0], [Ej, "de", 54, 70, 153, 0], [j, "de", 54, 71, 153, Cq], [jq, "de", 54, 69, 153, 0], [Eo, "de", 54, 68, 153, vq], [1, "de", 54, 67, 153, tj], [1, "de", 54, 66, 153, qn], [Oj, "de", 54, 65, 153, qn], [1, "de", 54, 64, 153, ur], [aa, "de", 54, 63, 153, Fj], [1, "de", 54, 61, 153, 0], [j, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [ie, "de", 54, 57, 153, qn], [jq, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, tj], [Ue, "de", 54, 55, 153, Fj], [aa, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, gr], [Ok, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, qn], [aa, "de", 54, 50, 153, 0], [aa, "de", 54, 49, 153, Cq], [Ej, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, qn], [j, "de", 54, 46, 153, ne], [1, "de", 54, 45, 153, 0], [Oj, "de", 54, 44, 153, _a], [Oj, "de", 54, 43, 153, ne], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, vq], [j, "de", 54, 40, 153, vq], [Ej, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, Fj], [1, "de", 54, 36, 153, Cq], [Oj, "de", 54, 35, 153, Fj], [ie, "de", 54, 34, 153, 0], [jq, "de", 54, 33, 153, gr], [Oj, "de", 54, 32, 153, vq], [1, "de", 54, 31, 153, vq], [1, "de", 54, 30, 153, gr], [1, "de", 54, 29, 153, Fj], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [Eo, "de", 54, 26, 153, qn], [jq, "de", 54, 25, 153, Gr], [1, "de", 54, 24, 153, _a], [Ue, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, ur], [ie, "de", 54, 21, 153, Fj], [Ue, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, tj], [1, "de", 54, 18, 153, 0], [1, "de", 54, ja, 153, 0], [1, "de", 54, te, 153, Cq], [1, "de", 54, 15, 153, 0], [aa, "de", 54, Fi, 153, ne], [1, "de", 54, 13, 153, 0], [ie, "de", 54, yo, 153, _a], [1, "de", 54, 11, 153, 0], [Ej, "de", 54, 10, 153, ur], [1, "de", 54, ta, 153, 0], [j, "de", 54, _j, 153, Gr], [1, "de", 55, 83, le, 0], [Ok, "de", 55, 83, Mn, Fj], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, S, 0], [Ue, "de", 55, 83, Yk, ne], [Oj, "de", 55, 83, 14, gr], [1, "de", 55, 83, Io, Cn], [1, "de", 55, 83, ka, ne], [1, "de", 55, 83, Bo, qk], [Zq, "de", 55, 83, 19, 0], [Ok, "de", 55, 83, 18, gr], [aa, "de", 55, 83, xq, gr], [1, "de", 55, 83, 21, ur], [1, "de", 55, 83, 22, 0], [Zq, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [Ej, "de", 55, 83, 26, qk], [1, "de", 55, 83, 27, 0], [Zq, "de", 55, 83, 28, Fj], [j, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, ne], [1, "de", 55, 83, 32, qn], [Oj, "de", 55, 83, 33, 0], [Zq, "de", 55, 83, 34, qk], [aa, "de", 55, 83, 36, tj], [1, "de", 55, 83, 35, qk], [Ok, "de", 55, 83, 37, 0], [Eo, "de", 55, 83, 38, 0], [Zq, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [Eo, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [Eo, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, _a], [aa, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, Cq], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [Ej, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, tj], [jq, "de", 55, 70, 38, ur], [j, "de", 55, 68, 38, 0], [jq, "de", 55, 69, 38, Fj], [Oj, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [Oj, "de", 55, 65, 38, gr], [Eo, "de", 55, 64, 38, 0], [Ue, "de", 55, 63, 38, 0], [Eo, "de", 55, 62, 38, Gr], [Eo, "de", 55, 60, 38, 0], [Oj, "de", 55, 61, 38, vq], [Zq, "de", 55, 59, 38, tj], [aa, "de", 55, 57, 38, 0], [Ok, "de", 55, 58, 38, qk], [1, "de", 55, 56, 38, Gr], [1, "de", 55, 55, 38, gr], [jq, "de", 55, 54, 38, Cq], [1, "de", 55, 53, 38, 0], [Zq, "de", 55, 52, 38, tj], [j, "de", 55, 51, 38, Cq], [1, "de", 55, 49, 38, _a], [Ok, "de", 55, 50, 38, Cq], [1, "de", 55, 48, 38, 0], [Zq, "de", 55, 47, 38, gr], [Zq, "de", 55, 46, 38, Gr], [Eo, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [j, "de", 55, 43, 38, Fj], [1, "de", 55, 42, 38, Cn], [1, "de", 55, 41, 38, 0], [Zq, "de", 55, 40, 38, qn], [Eo, "de", 55, 39, 38, Cn], [1, "de", 55, 38, 38, Cq], [1, "de", 55, 37, 38, 0], [Ue, "de", 55, 36, 38, Gr], [1, "de", 55, 34, 38, 0], [ie, "de", 55, 35, 38, vq], [1, "de", 55, 33, 38, ne], [Ue, "de", 55, 31, 38, 0], [Eo, "de", 55, 32, 38, ne], [ie, "de", 55, 30, 38, vq], [1, "de", 55, 29, 38, vq], [1, "de", 55, 28, 38, qk], [jq, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [jq, "de", 55, 24, 38, qn], [ie, "de", 55, 23, 38, Gr], [Ej, "de", 55, 21, 38, ur], [1, "de", 55, 22, 38, 0], [jq, "de", 55, 20, 38, 0], [1, "de", 55, m, 38, Cq], [Ue, "de", 55, 19, 37, 0], [1, "de", 55, wj, 36, tj], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, qk], [1, "de", 55, 19, 33, 0], [Ej, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, Cq], [Zq, "de", 55, wj, 30, ur], [1, "de", 55, zj, 28, tj], [ie, "de", 55, 19, 29, gr], [1, "de", 55, bn, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, zj, 25, 0], [Zq, "de", 55, bn, 24, ur], [Oj, "de", 55, zj, 23, 0], [1, "de", 55, m, 22, qn], [1, "de", 55, 19, 21, 0], [1, "de", 55, Pr, 20, 0], [aa, "de", 55, Pr, Iq, 0], [1, "de", 55, m, bn, 0], [Ue, "de", 55, 19, 16, 0], [Ok, "de", 55, bn, _q, ur], [1, "de", 55, Pr, 15, 0], [j, "de", 55, 19, Q, 0], [1, "de", 55, 19, C, tj], [j, "de", 55, Ko, 12, 0], [Zq, "de", 55, 19, 11, 0], [1, "de", 55, la, 10, Gr], [1, "de", 55, Ko, 9, Cq], [Eo, "de", 55, 19, ta, Cq], [jq, "de", 55, 84, 35, 0], [Ok, "de", 55, 84, 32, Fj], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [Zq, "de", 55, 84, Do, qn], [ie, "de", 55, 84, 17, 0], [1, "de", 55, 84, tq, Fj], [aa, "de", 50, 84, nq, Cq], [jq, "de", 55, 84, le, 0], [1, "de", 55, 84, E, gr], [jq, "de", 50, 85, 11, ne], [1, "de", 55, 81, 39, gr], [1, "de", 50, 83, 40, ne], [Oj, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, qk], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, Fj], [Eo, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, ne], [ie, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [Ok, "de", 50, 49, 39, 0], [Ue, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [ie, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, vq], [1, "de", 50, 31, 39, vq], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, Rr, 35, tj], [aa, "de", 50, 18, 34, 0], [1, "de", 55, Kn, 31, 0], [j, "de", 50, 18, 30, 0], [Zq, "de", 55, Iq, 25, qn], [1, "de", 50, 18, 24, Cn], [1, "de", 55, 18, 20, tj], [1, "de", 55, Kn, 14, qn], [Ok, "de", 50, de, oa, ur], [Zq, "de", 55, 18, Eq, 0], [1, "de", 54, 90, 154, Gr], [Zq, "de", 51, 89, 154, 0], [ie, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, vq], [1, "de", 54, 70, 154, 0], [aa, "de", 54, 66, 154, qk], [Ue, "de", 54, 61, 154, 0], [j, "de", 54, 56, 154, ur], [1, "de", 54, 53, 154, tj], [1, "de", 54, 45, 154, 0], [j, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, Gr], [1, "de", 54, 30, 154, Gr], [aa, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, Ho, 154, 0], [ie, "de", 54, 8, 154, vq], [Oj, "de", 55, Pj, 9, 0], [Ue, "de", 53, 93, 154, qk], [Eo, "de", 53, 93, 156, Gr], [1, "de", 53, 93, 158, 0], [Ue, "de", 52, 91, 157, Fj], [j, "de", 53, 93, 159, 0], [Zq, "de", 53, 93, 161, Gr], [Eo, "de", 53, 93, 162, gr], [Eo, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, Gr], [Eo, "de", 53, 93, 165, ur], [aa, "de", 53, 93, 166, tj], [1, "de", 53, 93, 167, qn], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [Zq, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, Gr], [1, "de", 53, 93, 171, 0], [j, "de", 53, 93, 173, 0], [Eo, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, qk], [1, "de", 53, 92, 169, 0], [Zq, "de", 53, 93, 178, 0], [j, "de", 53, 93, 179, 0], [j, "de", 53, 93, 180, tj], [Ej, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [Zq, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, Cn], [Zq, "de", wa, 95, 185, Fj], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, qn], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [Ej, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, Gr], [Ue, "de", 52, 91, 196, Fj], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, Gr], [1, "de", 53, 93, 198, _a], [1, "de", 53, 93, 201, tj], [aa, "de", 53, 93, 202, 0], [Oj, "de", 53, 93, 203, qk], [Oj, "de", 53, 93, 204, Gr], [j, "de", 53, 93, 206, vq], [1, "de", 53, 93, 205, Cq], [1, "de", 53, 93, 207, gr], [aa, "de", 53, 93, 209, _a], [ie, "de", 53, 93, 210, qn], [1, "de", 53, 93, 212, qn], [Ue, "de", 52, 91, 204, ur], [Ej, "de", 53, 93, 213, 0], [Ej, "de", 53, 93, 214, Cn], [Ue, "de", 53, 93, 215, qk], [1, "de", 53, 93, 216, 0], [aa, "de", 53, 93, 217, Cn], [Oj, "de", 53, 93, 218, qn], [j, "de", 53, 93, 219, 0], [j, "de", 53, 93, 220, 0], [aa, "de", 52, 92, 213, 0], [Zq, "de", 52, 92, 206, ne], [Oj, "de", 52, 92, 202, Cn], [jq, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [j, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [Ok, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [jq, "de", 53, 93, 223, 0], [ie, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, ne], [1, "de", 52, 92, 217, Gr], [1, "de", 53, 92, 218, Gr], [jq, "de", 52, 92, 221, vq], [Ok, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, tj], [Oj, "de", 52, 93, 211, tj], [1, "de", 52, 93, 196, 0], [Ue, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [Ue, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [Ej, "de", 52, 93, 182, 0], [Oj, "de", 52, 93, 185, vq], [1, "de", 52, 93, 172, 0], [Oj, "de", 52, 93, 174, Gr], [aa, "de", 52, 93, 177, _a], [Zq, "de", 52, 93, 155, 0], [Oj, "de", 52, 93, 157, Cq], [ie, "de", 52, 93, 160, vq], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, qn], [1, "de", 53, 93, 231, ne], [1, "de", 53, 93, 232, 0], [Zq, "de", 53, 93, 234, tj], [jq, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, ur], [jq, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, qk], [aa, "de", 53, 93, 240, ne], [ie, "de", 52, 93, 238, 0], [aa, "de", 53, 93, 241, 0], [Oj, "de", 52, 93, 242, 0], [Oj, "de", 52, 93, 243, Cq], [1, "de", 53, 93, 244, Gr], [Ok, "de", 53, 93, 246, ur], [Zq, "de", 53, 93, 245, Cn], [Ue, "de", 52, 93, 247, Fj], [1, "de", 53, 93, 248, ur], [Ue, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, Gr], [1, "de", 52, 93, 249, 0], [Ok, "de", 53, 93, 250, 0], [Ej, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, ne], [1, "de", 52, 93, 253, 0], [Eo, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, tj], [1, "de", 53, 93, 256, gr], [1, "de", 52, 93, 258, qk], [ie, "de", 53, 93, 259, qn], [1, "de", 52, 93, 260, qn], [1, "de", 53, 93, 263, 0], [ie, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, tj], [Ok, "de", 52, 93, 266, 0], [Ue, "de", 53, 93, 267, tj], [Ej, "de", 52, 93, 268, _a], [1, "de", 52, 93, 269, 0], [Ue, "de", 53, 93, 276, qk], [aa, "de", 53, 93, 277, gr], [j, "de", 52, 93, 278, 0], [Ej, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, Cq], [1, "de", 53, 93, 285, tj], [1, "de", 53, 93, 286, 0], [aa, "de", 52, 93, 287, gr], [1, "de", 53, 93, 288, _a], [aa, "de", 53, 93, 289, ur], [1, "de", 52, 93, 290, _a], [Ok, "de", 52, 93, 291, gr], [Zq, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [Eo, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, ne], [1, "de", 53, 93, 297, qn], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [Ok, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [Ue, "de", 52, 92, 293, gr], [1, "r", 92, 262, Cq], [aa, "r", 93, 262, ur], [1, "de", 52, 93, 261, Cn], [1, "cs", ne, 223, 104, Ej], [1, "cs", 2, 223, 105, Zq], [1, "cs", vk, 223, 102, Ej], [1, "cs", zk, 223, 103, j], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, Oo, j], [1, "la", uj, 142, 9, Ok], [Ok, "de", 4, 81, 149, 0], [Eo, "f", Cn, 83, 148, 1], [Eo, "f", Ue, 82, 149, 1], [Ok, "de", 34, 81, 156, _a], [Zq, "de", 51, vn, rn, Gr], [1, "de", 54, Pq, 9, Cq], [1, "de", 54, Io, 9, 0], [Ue, "cs", 3, 223, 106, aa], [j, "p", 0, 119, 279, Ej], [Ok, "p", 0, 109, 242, jq], [1, "cs", Zq, 29, Ma, 1], [Oj, "cs", 2, 30, 9, ie], [jq, "cs", re, 31, Ma, 1], [1, "cs", 2, 32, sa, 1], [Oj, "cs", 2, 33, 9, Ej], [1, "cs", wr, 69, E, Ok], [Oj, "cs", Zn, 71, 9, Ue], [1, "cs", 2, 70, 9, j], [jq, "cs", Oj, 72, 9, j], [1, "cs", re, 73, 9, Ej], [Ue, "de", 10, 31, ia, qn], [Ej, "de", 10, 29, Va, ne], [jq, "de", ae, 44, Ln, 0], [aa, "de", 4, 87, 10, Fj], [1, "de", 4, 86, Qa, gr], [1, "de", 5, 87, vr, Cn], [Zq, "de", 5, 13, 10, qk], [1, "de", ea, Fi, 11, qn], [Ej, "de", uj, ka, 10, ne], [Ue, "de", 4, gk, Ye, ur], [aa, "cs", Zn, 146, 9, 1], [1, "cs", 2, 148, sa, 1], [Ok, "cs", 2, 150, 9, 1], [1, "cs", Zn, 153, 9, jq], [1, "cs", vk, 155, 9, aa], [1, "cs", Ok, 149, Ma, Ej], [1, "cs", Ej, 154, Ma, 1], [1, "cs", Qk, 147, 9, Zq], [1, "cs", 3, 151, 9, Ue], [1, "cs", nn, 152, 9, Oj], [1, "cs", Qk, 156, Oo, 1], [1, "cs", Ka, 157, hk, ie], [Eo, "cs", Z, 158, 9, 1], [1, "cs", 3, 159, sa, ie], [1, "cs", ar, 160, rn, 1], [1, "cs", vq, 161, 9, 1], [1, "cs", 2, 162, Ca, 1], [1, "cs", vk, 163, 9, j], [jq, "cs", 1, 164, So, 1], [Ue, "cs", 2, 165, vr, 1], [aa, "cs", 3, 166, Mn, 1], [1, "cs", 3, 168, vr, 1], [1, "cs", 3, 170, 9, Oj], [Zq, "cs", Ok, 169, vr, 1], [1, "cs", vk, 167, Dk, 1], [Oj, "cs", zk, 171, 9, 1], [aa, "cs", vk, 173, 9, Ok], [1, "cs", Zn, 172, Mn, Ej], [1, "cs", 2, 174, Dk, Ej], [1, "cs", 1, 175, 9, 1], [Zq, "cs", 3, 176, 9, jq], [1, "cs", Z, 178, 9, 1], [1, "cs", ar, 179, 9, aa], [1, "cs", qk, 180, E, 1], [1, "cs", Zn, 177, 9, 1], [Zq, "cs", zk, 182, 9, aa], [1, "cs", vk, 181, rn, Ej], [ie, "cs", wr, 183, E, 1], [1, "cs", wr, 184, Oo, Zq], [Oj, "cs", 2, 185, 9, 1], [aa, "cs", 2, 186, Mn, Ej], [Ok, "cs", aa, 187, 9, Ok], [1, "cs", vk, 188, Ca, 1], [1, "cs", 3, 189, Oo, 1], [Zq, "cs", nn, 190, Mn, Ok], [Zq, "cs", Ka, 191, 9, Eo], [1, "cs", 2, 192, So, jq], [1, "cs", 0, 193, hk, Ej], [1, "cs", 2, 194, _j, 1], [1, "cs", 2, 196, hk, Ok], [Eo, "cs", wr, 198, 9, 1], [Oj, "cs", Zn, 200, E, Ue], [jq, "cs", Kj, 195, 9, 1], [1, "cs", 3, 197, 9, aa], [1, "cs", 3, 199, hk, 1], [j, "cs", qn, 201, 9, Ok], [1, "cs", 2, 202, _j, 1], [1, "cs", re, 203, E, Eo], [1, "cs", 3, 208, Mn, aa], [1, "cs", 3, 207, 9, 1], [Oj, "cs", 3, 206, hk, Ej], [aa, "cs", Kj, 205, 9, ie], [1, "cs", ar, 204, _j, 1], [Oj, "cs", Ka, 214, 9, Oj], [1, "cs", Ka, 215, rn, Ej], [1, "cs", 3, 216, vr, j], [1, "cs", 3, 217, Oo, ie], [Ue, "cs", Z, 218, 9, aa], [j, "b", 0, Jn, 159, Cq], [ie, "b", 0, Jn, 171, ur], [re, "isl", 1, 122, 63, 0], [2, "isl", Zn, 119, 277, tj], [zk, "isl", Zn, 109, 244, 0], [Zn, "isl", wr, 114, 205, Gr], [zk, "isl", aa, 120, 150, gr], [2, "isl", 2, 154, 129, _a], [vk, "isl", Cq, 184, 158, Fj], [2, "isl", 1, 208, 128, 0], [2, "isl", Eo, 215, 132, 0], [re, "isl", Ue, 214, 128, _a], [2, "isl", 1, 209, 132, ne], [1, "la", 3, 217, 20, 1], [Ue, "la", 1, 215, 19, Ok], [aa, "la", 0, 212, Iq, j], [1, "la", 4, 214, rk, Ej], [1, "la", 4, 216, Ko, 1], [1, "la", 4, 211, 20, j], [1, "la", Qk, 210, 19, Zq], [ie, "la", 3, 215, 21, 1], [ie, "la", aa, 214, 20, 1], [Eo, "la", 3, 214, 22, Eo], [1, "la", 3, 214, 24, ie], [1, "la", 4, 214, 26, 1], [1, "la", Aq, 213, 27, 1], [1, "la", Ej, 212, 28, 1], [jq, "la", 2, 212, 29, Oj], [Ue, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", Yi, 207, 19, 1], [1, "la", 1, 206, 19, 1], [jq, "la", j, 205, 19, Eo], [1, "la", 2, 204, 19, 1], [Ok, "la", 5, 203, 19, j], [1, "la", Ka, 210, 17, 1]];
  var Tr = Cq;
  var Ur = {
    ⵠᐃⵠⲆΔ: ["#133A2B", "#042b30"],
    Ⲇᐃᐃⵠⵠᐃⵠⵠⵠ: ["#EBF2F0", "#136167"],
    ⲆⲆᐃΔⲆᐃⲆ: ["#4EB687", "#187484"],
    ᐃⵠᐃⵠⲆⵠⲆ: ["#664516", "#13474C"],
    ᐃᐃⵠⵠᐃᐃᐃ: ["#FCEFBB", "#0F4D48"],
    ᐃⲆⵠⵠᐃΔΔ: ["#C1AA7E", "#0F423D"],
    ⵠⵠᐃⲆⲆΔΔ: ["#594837", "#163A3A"],
    ⵠⵠⵠⲆⵠΔᐃ: ["#A5D6D6", "#539CA0"],
    ⲆᐃᐃᐃΔ: ["#0B6A84", "#09373F"],
    ΔⵠⵠⵠᐃᐃΔ: ["#2A8B9B", "#0F464C"],
    ᐃΔⵠⲆⵠⵠΔ: ["#A9D6D3", "#115E60"],
    ⲆᐃΔⵠⲆⵠᐃ: ["#ECF7F9", "#539CA0"],
    ᐃⵠΔⵠΔⲆⵠ: ["#FFF", "#FFF"],
    ᐃⲆᐃᐃᐃⵠⵠ: ["#FFF", "#FFF"],
    ᐃⵠⲆⲆᐃΔᐃ: ["#1C9BA4", "#00272F"],
    ⵠⲆᐃⵠᐃ: ["#2D2017", "#031C1E"],
    ᐃΔⵠ: 0,
    ΔΔⵠ: 1,
    ⲆⵠⲆΔΔⵠⲆᐃⲆ: 2300,
    ⲆⵠᐃⲆⲆⵠΔᐃⵠ: 2290,
    ⲆⵠⲆΔⵠⲆⲆ: 34,
    ⵠΔᐃΔᐃⵠΔ: 5,
    ⲆⲆΔΔⵠᐃⵠ: 68,
    ⲆⲆΔΔΔⲆᐃ: 34,
    ⵠⵠᐃⲆᐃⲆⲆ: pr,
    ⵠⲆᐃᐃΔᐃⲆ: 1,
    ΔΔⲆⵠⵠⵠⵠ: 0.6,
    ⵠⵠᐃΔᐃΔᐃ: 0.25,
    ΔΔⵠⲆⵠᐃΔ: 50,
    ΔΔΔΔᐃΔΔ: ae,
    ⲆᐃⲆΔⵠⵠᐃ: 75,
    ⵠⵠᐃᐃᐃⲆᐃ: 20,
    ᐃΔΔⵠⵠᐃⵠ: 5,
    ᐃᐃᐃΔⵠ: Tr++,
    ᐃᐃⲆⵠΔ: Tr++,
    ᐃΔⲆᐃΔ: Tr++,
    ⲆΔᐃⲆⵠ: Tr++,
    ΔΔᐃᐃᐃ: Tr++,
    ΔᐃᐃΔⲆ: Tr++,
    ⵠΔΔⲆᐃ: Tr++,
    ᐃⵠⲆΔᐃ: Tr++,
    ⵠᐃⲆⲆⲆ: Tr++,
    ⲆΔΔΔⲆ: Tr++,
    ⵠⲆⲆⵠᐃ: Tr++,
    ⲆᐃΔΔΔ: Tr++,
    ⵠⲆΔΔᐃ: Tr++,
    ΔΔⵠⵠⵠ: Tr++,
    ΔⵠΔΔΔ: Tr++,
    ΔΔᐃᐃⲆ: Tr++,
    ⵠᐃΔⲆⵠ: Tr++,
    ΔⲆΔᐃⲆ: Tr++,
    ΔΔⵠᐃⵠ: Tr++,
    ᐃⵠⵠᐃⲆ: Tr++,
    ᐃⵠⵠⲆⵠ: Tr++,
    ᐃⲆⲆΔⵠ: Tr++,
    ΔᐃΔⵠᐃ: Tr++,
    ⲆΔΔⵠᐃ: Tr++,
    ᐃⲆΔⵠⲆ: Tr++,
    ⵠⲆᐃⲆΔ: Tr++,
    ᐃⲆΔⵠΔ: Tr++,
    ⵠⵠⲆⵠᐃ: Tr++,
    ⵠᐃⵠⲆᐃ: Tr++,
    ᐃⵠⲆΔ: Tr++,
    ⵠᐃᐃⵠⵠ: Tr++,
    ΔⵠⲆΔΔ: Tr++,
    ⲆⲆᐃᐃᐃ: Tr++,
    ΔΔᐃΔᐃ: Tr++,
    ⵠⵠⵠⵠⲆ: Tr++,
    ᐃⲆΔΔⵠ: Tr++,
    ΔⵠΔⲆⵠ: Tr++,
    ⵠⵠᐃⲆⲆ: Tr++,
    Δᐃⵠᐃⵠ: Tr++,
    ᐃΔⵠⲆΔ: Tr++,
    Δⵠᐃᐃᐃ: Tr++,
    ⲆⵠΔᐃⲆ: Tr++,
    ΔᐃⵠᐃⲆ: Tr++,
    ⵠΔⵠⲆᐃ: Tr++,
    ⵠⲆᐃᐃⲆ: Tr++,
    ⵠⵠⲆⲆΔ: Tr++,
    ΔⵠΔΔⵠ: Tr++,
    ⵠⵠⲆⵠⵠ: Tr++,
    ᐃⵠⵠᐃⵠ: Tr++,
    ᐃⵠᐃⵠΔ: Tr++,
    ⵠᐃΔΔⵠ: Tr++,
    ΔⲆΔᐃⵠ: Tr++,
    ᐃⲆΔᐃᐃ: Tr++,
    ΔⵠⲆⲆⵠ: Tr++,
    ⲆⲆⵠⵠⲆ: Tr++,
    ⲆΔⲆᐃⵠ: Tr++,
    ⵠᐃᐃᐃΔ: Tr++,
    ⲆᐃⲆᐃΔ: Tr++,
    ΔⵠⵠⲆΔ: Tr++,
    ⲆⵠⲆⲆⲆ: Tr++,
    ⲆᐃⵠᐃΔ: Tr++,
    ΔᐃΔⲆᐃ: Tr++,
    ⲆⲆΔᐃΔ: Tr++,
    ΔⲆⵠⲆᐃ: Tr++,
    ΔⵠⵠΔⲆ: Tr++,
    ᐃΔᐃᐃⲆ: Tr++,
    ⵠᐃⲆⵠᐃ: Tr++,
    ⵠⵠⵠᐃΔ: Tr++,
    ⲆⵠⲆΔⲆ: Tr++,
    ⲆᐃᐃⵠⲆ: Tr++,
    ⲆᐃⲆΔⵠ: Tr++,
    ᐃⲆⵠⵠΔ: Tr++,
    ᐃᐃΔᐃᐃ: Tr++,
    ⲆⲆᐃⵠᐃ: Tr++,
    ΔΔⵠⲆⲆ: Tr++,
    Ⲇⵠᐃᐃⵠ: Tr++,
    ⵠΔⲆⵠᐃ: Tr++,
    ⲆⲆⵠΔⲆ: Tr++,
    ⵠⲆⲆⵠΔ: Tr++,
    ⲆⲆⲆᐃᐃ: Tr++,
    ΔΔΔΔⵠ: Tr++,
    ᐃⵠⲆⵠᐃ: Tr++,
    ΔⲆΔⵠⵠ: Tr++,
    ᐃⲆᐃΔⲆ: Tr++,
    ⵠΔᐃᐃⲆ: Tr++,
    ᐃΔΔⵠⲆ: Tr++,
    ⵠⲆᐃⵠΔ: Tr++,
    ⲆⵠⵠⲆⲆ: Tr++,
    ⵠᐃⲆᐃᐃ: Tr++,
    ⵠΔⲆᐃⵠ: Tr++,
    ⵠⲆΔΔⲆ: Tr++,
    ΔΔⲆⲆⵠ: Tr++,
    ⲆⵠᐃⵠΔ: Tr++,
    ⲆΔⲆⲆⲆ: Tr++,
    ⵠⲆⲆᐃᐃ: Tr++,
    ⵠᐃⵠⵠⲆ: Tr++,
    ⵠⲆⲆⵠⵠ: Tr++,
    ΔᐃΔⲆΔ: Tr++,
    ⵠⲆᐃⲆⵠ: Tr++,
    ᐃΔΔΔᐃ: Tr++,
    ⲆΔᐃⵠΔᐃⲆΔⵠ: Tr++,
    ⵠⲆΔⵠᐃ: Tr++,
    ᐃᐃΔⵠᐃ: Tr++,
    ⵠⵠⵠΔⲆ: Tr++,
    ᐃⲆΔΔⲆ: Tr++,
    ⵠⲆΔⲆⲆ: Tr++,
    ΔⵠⵠⵠⲆ: Tr++,
    ΔΔⲆΔΔ: Tr++,
    ⵠᐃᐃⲆⵠ: Tr++,
    ᐃⵠΔᐃ: Tr++,
    ᐃⲆΔᐃⵠ: Tr++,
    ΔΔΔΔ: Tr++,
    ΔⲆⲆΔ: Tr++,
    ⲆΔⲆΔⵠΔᐃ: Tr++,
    ᐃⲆᐃΔⵠ: Tr++,
    ⲆᐃⲆᐃᐃⵠⲆ: Tr++,
    ⲆⲆⵠᐃᐃ: Tr++,
    ᐃⲆⲆⲆᐃ: Tr++,
    ᐃⵠΔΔⵠⲆⵠ: Tr++,
    ΔᐃⵠⲆⲆⵠΔ: Tr++,
    ᐃⵠΔΔΔ: Tr++,
    ΔⲆⲆⲆ: Tr++,
    ⵠΔⵠⲆΔ: Tr++,
    ⵠᐃⲆΔⵠ: Tr++,
    ⵠⲆᐃⲆΔⵠⵠ: Tr++,
    ⲆΔⵠⲆᐃ: Tr++,
    ⵠⲆΔᐃᐃ: Tr++,
    ᐃᐃᐃΔΔ: Tr++,
    ⵠᐃⲆⵠⲆ: Tr++,
    ᐃΔᐃⵠΔ: Tr++,
    ⲆᐃⵠⲆΔ: Tr++,
    ⵠΔⵠΔⵠ: Tr++,
    ΔⵠⲆⲆⲆ: Tr++,
    ⲆΔΔⲆᐃ: Tr++,
    ᐃⵠⵠΔᐃ: Tr++,
    ᐃᐃΔⲆⵠ: Tr++,
    ⲆΔᐃᐃΔ: Tr++,
    ⲆΔⲆⵠⲆ: Tr++,
    ΔᐃⵠⲆⵠ: Tr++,
    ⵠΔⵠᐃᐃ: Tr++,
    ⲆⵠΔⵠΔΔΔ: Tr++,
    ΔΔᐃⲆΔ: Tr++,
    ᐃᐃᐃⲆⵠⲆⲆ: Tr++,
    ΔᐃⲆΔⲆΔᐃ: Tr++,
    ⲆⵠΔⲆⵠΔⲆ: Tr++,
    ⵠᐃΔⵠᐃⵠΔ: Tr++,
    ⲆⲆΔᐃᐃ: Tr++,
    ΔⵠᐃΔᐃ: Tr++,
    ⵠᐃⵠΔΔ: Tr++,
    ΔᐃΔΔΔ: Tr++,
    ⵠᐃΔᐃⲆ: Tr++,
    ⵠΔᐃΔᐃ: Tr++,
    ⲆⲆᐃᐃΔ: Tr++,
    ᐃⲆⲆⵠⲆ: Tr++,
    ⵠⵠⲆᐃΔ: Tr++,
    ΔⲆⵠᐃⵠ: Tr++,
    ⲆᐃⵠⵠⲆ: Tr++,
    ᐃΔΔᐃⵠ: Tr++,
    ᐃⲆΔⲆᐃ: Tr++,
    ΔⵠᐃⵠΔ: Tr++,
    ΔⵠⲆᐃⲆ: Tr++,
    ⲆⲆⲆⵠΔ: Tr++,
    Ⲇᐃᐃⵠᐃ: Tr++,
    ᐃΔⵠⵠⲆ: Tr++,
    ⵠᐃᐃⲆΔ: Tr++,
    ⲆΔⲆⲆᐃ: Tr++,
    ⲆⵠⵠⲆΔᐃⲆ: Tr++,
    ΔⲆᐃᐃⲆ: Tr++,
    ⵠΔᐃᐃΔ: Tr++,
    ᐃⲆᐃⵠⲆ: Tr++,
    ⵠΔΔᐃⲆ: Tr++,
    ᐃⵠᐃΔᐃᐃⲆ: Tr++,
    ⲆⲆΔⵠⲆᐃΔ: Tr++,
    ⲆᐃᐃⵠⵠⲆⲆ: Tr++,
    ΔⲆⲆΔᐃ: Tr++,
    ΔⵠΔᐃᐃⲆᐃ: Tr++,
    ⵠΔⵠⲆⲆⵠᐃ: Tr++,
    ⲆⵠᐃᐃᐃⵠⲆ: Tr++,
    ⲆⵠⲆⲆᐃⵠΔ: Tr++,
    ΔΔΔⲆⵠΔⲆ: Tr++,
    ⵠⵠᐃΔΔⲆᐃ: Tr++,
    ⲆΔⵠⵠⲆⲆⵠ: Tr++,
    ⵠⵠⵠᐃᐃΔⲆ: Tr++,
    Δᐃᐃᐃᐃ: Tr++,
    ⲆⵠΔᐃᐃ: Tr++,
    ᐃᐃⵠⵠᐃ: Tr++,
    ᐃⲆⲆⵠΔ: Tr++,
    ⵠΔΔΔΔ: Tr++,
    ΔⲆΔⲆⲆᐃⲆ: Tr++,
    ⲆΔⲆΔᐃ: Tr++,
    ΔⲆⵠⵠⲆ: Tr++,
    ΔⲆⵠᐃⲆᐃΔ: Tr++,
    ᐃⵠΔⵠⲆ: Tr++,
    ⵠᐃΔΔᐃⵠᐃ: Tr++,
    ⲆⲆΔⵠⲆ: Tr++,
    Δⵠᐃⵠⵠ: Tr++,
    ΔⵠⵠΔᐃⵠⵠ: Tr++,
    ⵠⵠᐃⲆΔΔΔ: Tr++,
    ᐃⲆΔᐃⲆ: Tr++,
    ΔⵠΔⲆΔ: Tr++,
    ᐃᐃⵠΔᐃᐃⵠ: Tr++,
    ⵠⵠᐃⵠᐃ: Tr++,
    ⵠΔⲆΔ: Tr++,
    ΔΔⵠΔΔ: Tr++,
    ΔΔⲆΔⲆⲆᐃ: Tr++,
    ᐃⵠΔᐃⵠ: Tr++,
    ΔᐃⲆⲆⵠⲆⵠ: Tr++,
    ᐃᐃᐃⲆᐃ: Tr++,
    ⲆΔΔᐃΔⲆⵠ: Tr++,
    ᐃⵠⵠⵠⲆ: Tr++,
    ᐃⲆΔΔᐃⵠᐃ: Tr++,
    ⵠⵠΔⵠⵠΔᐃ: Tr++,
    ΔᐃᐃⵠⲆ: Tr++,
    ᐃⵠᐃⵠⵠ: Tr++,
    ⲆⲆⲆΔⵠ: Tr++,
    ⵠⵠⵠⲆⵠ: Tr++,
    ⵠΔⵠⵠᐃ: Tr++,
    ⵠᐃᐃⲆᐃ: Tr++,
    ᐃΔΔᐃⲆ: Tr++,
    ΔΔᐃⵠΔ: Tr++,
    ⲆᐃⵠⲆⵠ: Tr++,
    ΔᐃⲆⲆᐃ: Tr++,
    ⲆⲆⲆⵠⵠ: Tr++,
    ⲆⵠⵠᐃΔ: Tr++,
    ⵠⲆⵠⵠⵠ: Tr++,
    ⲆⵠᐃⲆⵠᐃⲆ: Tr++,
    ᐃⵠΔⵠⵠⵠⲆ: Tr++,
    ᐃⵠᐃⲆⲆ: Tr++,
    ⵠⲆⲆᐃΔΔΔ: Tr++,
    ᐃⲆⲆᐃᐃ: Tr++,
    ⲆⲆⲆΔᐃ: Tr++,
    ΔΔΔᐃⵠ: Tr++,
    ᐃΔᐃᐃⵠ: Tr++,
    ᐃΔⲆᐃⲆ: Tr++,
    ΔᐃⲆⵠⲆⵠᐃ: Tr++,
    ⲆⵠΔΔⲆ: Tr++,
    ⵠᐃⵠⵠΔ: Tr++,
    ᐃᐃⲆⵠᐃ: Tr++,
    ⲆΔⲆᐃΔ: Tr++,
    ᐃᐃⵠⲆⵠ: Tr++,
    ⵠᐃᐃᐃⵠ: Tr++,
    ᐃⲆⲆΔΔ: Tr++,
    ⲆⲆⵠΔⵠ: Tr++,
    ⲆⲆΔⵠⲆⵠⲆ: Tr++,
    ΔⲆⲆΔⵠ: Tr++,
    Ⲇᐃⵠᐃⵠ: Tr++,
    ⵠⵠⲆⵠⲆⲆᐃ: Tr++,
    ⵠⲆᐃΔⵠ: Tr++,
    ΔⲆⲆⲆⲆ: Tr++,
    ⵠⲆᐃⵠⲆⲆΔ: Tr++,
    ⲆⵠⵠⲆⵠ: Tr++,
    ᐃⲆⲆⲆⵠ: Tr++,
    ΔΔⲆⵠⵠⵠᐃ: Tr++,
    ᐃⲆⵠᐃⲆⵠΔ: Tr++,
    ⵠᐃᐃΔΔⲆⵠ: Tr++,
    ⲆᐃⲆⵠᐃΔᐃ: Tr++,
    ⲆΔⵠⲆΔᐃΔ: Tr++,
    ᐃⲆⵠΔᐃⲆΔ: Tr++,
    ΔⵠΔᐃⲆᐃⵠ: Tr++,
    ᐃⲆᐃⲆⲆᐃⵠ: Tr++,
    ⵠᐃᐃⵠⲆ: Tr++,
    ᐃΔΔⲆⵠⵠᐃ: Tr++,
    ΔΔᐃΔⵠⲆⲆ: Tr++,
    ᐃᐃΔⵠⵠᐃⲆ: Tr++,
    ⲆⲆΔⲆⵠ: Tr++,
    ⵠⲆΔⵠᐃⵠⵠ: Tr++,
    ΔᐃⵠⲆΔⲆⲆ: Tr++,
    ΔⲆᐃΔΔⲆΔ: Tr++,
    ΔⲆΔᐃⲆⵠΔ: Tr++,
    ΔⲆᐃᐃⵠᐃᐃ: Tr++,
    ΔⲆᐃⲆⲆⵠᐃ: Tr++,
    ΔᐃⵠⵠᐃΔⵠ: Tr++,
    ΔⲆᐃᐃΔΔⵠ: Tr++,
    ⵠᐃᐃᐃᐃⲆⵠ: Tr++,
    Δⵠᐃᐃᐃⵠⵠ: Tr++,
    ⵠⲆᐃᐃⵠⲆᐃ: Tr++,
    ΔⵠΔⲆⲆΔᐃ: Tr++,
    ⵠᐃⵠᐃⵠΔΔ: Tr++,
    ᐃⲆΔΔⲆⵠⵠ: Tr++,
    ⵠᐃⲆΔ: Tr++,
    ᐃⲆⵠⲆⲆ: Tr++,
    ⵠⵠⵠⵠⲆᐃⵠ: Tr++,
    ᐃΔⵠⲆΔⵠⵠ: Tr++,
    ᐃⲆ: Tr++,
    ⵠⵠᐃⲆⲆⵠⵠ: Tr++,
    ⵠⲆⵠΔⵠ: Tr++,
    ᐃᐃⵠΔⲆ: Tr++,
    ᐃⲆΔⵠᐃᐃⲆ: Tr++,
    ⵠΔⵠΔⲆ: Tr++,
    ΔⲆᐃΔΔᐃᐃ: Tr++,
    ᐃΔⲆⵠΔΔᐃ: Tr++,
    ᐃⵠⵠⵠⲆⵠᐃ: Tr++,
    ⲆⵠⲆΔᐃⲆΔ: Tr++,
    ⲆⲆⵠⲆᐃⵠΔ: Tr++,
    ⲆΔΔΔⵠ: Tr++,
    ΔΔᐃⵠⵠⲆΔ: Tr++,
    ⵠΔⵠⵠⲆⲆⲆ: Tr++,
    ⲆⲆΔᐃΔⵠⵠ: Tr++,
    ᐃΔΔᐃΔΔⵠ: Tr++,
    ᐃΔΔᐃᐃ: Tr++,
    ᐃⲆΔⲆⲆᐃⵠ: Tr++,
    ⵠⲆⵠⲆᐃᐃΔ: Tr++,
    ⲆⵠⲆΔⵠⵠⲆ: Tr++,
    ΔΔΔᐃᐃⵠᐃ: Tr++,
    ⲆⵠⲆⲆⲆᐃⲆ: Tr++,
    ᐃⲆⲆⵠᐃⵠᐃ: Tr++,
    ⵠⲆΔⲆᐃⵠⲆ: Tr++,
    ⵠⲆⵠΔΔ: Tr++,
    ᐃⲆⲆᐃⲆⵠᐃ: Tr++,
    ⲆᐃⵠΔⵠΔΔ: Tr++,
    ᐃⲆᐃᐃᐃⲆᐃ: Tr++,
    ΔᐃⵠⲆᐃᐃᐃ: Tr++,
    ⵠΔⵠΔᐃΔᐃ: Tr++,
    ᐃⵠⲆΔΔⵠΔ: Tr++,
    ᐃⲆΔΔᐃΔᐃ: Tr++,
    ᐃᐃⵠⵠⵠⲆⵠ: Tr++,
    ΔⲆᐃⵠⲆⲆⲆ: Tr++,
    ⵠⲆⲆΔᐃᐃⲆ: Tr++,
    ᐃⵠᐃΔΔⵠᐃ: Tr++,
    ⲆⵠⲆᐃᐃⲆⲆ: Tr++,
    ⵠΔᐃᐃⵠⲆᐃ: Tr++,
    ᐃΔᐃⲆΔ: Tr++,
    ᐃⵠᐃⲆΔⵠⲆ: Tr++,
    ᐃⵠΔⲆⲆⲆΔ: Tr++,
    ΔΔᐃⲆⲆⲆⲆ: Tr++,
    ⲆⲆΔⲆΔΔⵠ: Tr++,
    ⵠᐃᐃΔⵠⵠᐃ: Tr++,
    ᐃⵠΔⲆⲆΔⵠ: Tr++,
    ⲆⲆⵠᐃⲆⵠⵠ: Tr++,
    ΔⵠⲆⵠⲆⵠᐃ: Tr++,
    ⲆΔⲆⵠⲆⵠᐃ: Tr++,
    ΔⵠΔᐃΔⵠΔ: Tr++,
    ᐃᐃΔⲆΔᐃⵠ: Tr++,
    ᐃⵠΔΔΔⲆⲆ: Tr++,
    ⲆΔⵠⲆⵠⲆⲆ: Tr++,
    ᐃⲆⲆⲆⵠⵠⲆ: Tr++,
    ⲆΔⲆᐃΔᐃⵠ: Tr++,
    ᐃΔⲆᐃⵠΔⲆ: Tr++,
    ⵠΔⵠⲆⲆᐃⲆ: Tr++,
    ᐃⵠΔΔⵠⲆⲆ: Tr++,
    ⵠΔⵠΔΔΔⲆ: Tr++,
    Ⲇⵠᐃⵠᐃⵠⵠ: Tr++,
    ΔᐃΔⲆⵠΔⵠ: Tr++,
    ᐃⲆⵠⵠΔⲆⲆ: Tr++,
    ⲆⵠΔⵠᐃⲆΔ: Tr++,
    ᐃᐃⲆΔⵠᐃⵠ: Tr++,
    ⵠᐃΔΔⵠⲆⵠ: Tr++,
    ⲆΔΔΔⵠⲆΔⵠΔ: Tr++,
    ᐃⲆΔΔⵠⵠᐃ: Tr++,
    ⲆΔΔΔⵠⲆΔ: Tr++,
    ⵠⵠΔⵠΔⵠΔ: Tr++,
    ⲆⵠⵠΔΔΔⵠ: Tr++,
    ΔⲆΔⲆᐃᐃᐃ: Tr++,
    ⵠᐃⵠᐃᐃⵠⵠ: Tr++,
    ΔΔΔΔⲆΔᐃ: Tr++,
    ᐃⲆᐃΔⵠⵠⲆ: Tr++,
    ⲆᐃᐃⲆΔⲆⵠ: Tr++,
    ᐃⲆΔⲆⲆᐃⲆ: Tr++,
    ⵠⲆⲆΔⵠᐃᐃ: Tr++,
    ᐃΔΔᐃΔΔⲆ: Tr++,
    ⵠⵠᐃᐃᐃⵠⵠ: Tr++,
    ⵠⲆⲆᐃⲆᐃⲆ: Tr++,
    ⵠΔᐃⵠᐃΔⵠ: Tr++,
    ⲆᐃⲆⲆᐃⵠΔ: Tr++,
    ⲆΔⵠᐃⲆᐃΔ: Tr++,
    ΔᐃᐃΔᐃⵠⲆ: Tr++,
    ⵠⵠᐃΔΔⵠⵠ: Tr++,
    ᐃΔᐃⵠΔⲆᐃ: Tr++,
    ⵠᐃⵠⵠⵠⵠᐃ: Tr++,
    ΔⵠⲆᐃⵠᐃᐃ: Tr++,
    ᐃΔᐃⵠⲆⵠⲆ: Tr++,
    ΔⵠΔⲆⵠⵠⵠ: Tr++,
    ΔΔΔᐃΔΔⲆ: Tr++,
    ΔⲆⲆΔⲆⲆᐃ: Tr++,
    ⵠΔⵠΔⵠⵠⲆ: Tr++,
    ⲆⵠⵠΔᐃΔⵠ: Tr++,
    ⲆᐃᐃᐃΔᐃᐃ: Tr++,
    ⲆⵠᐃᐃⵠΔΔ: Tr++,
    ᐃⵠΔΔⲆⲆΔ: Tr++,
    ΔᐃⵠⲆΔΔΔ: Tr++,
    ⲆⵠⵠⵠⵠⲆⲆ: Tr++,
    ⲆΔⵠᐃᐃᐃΔ: Tr++,
    ᐃᐃⵠΔᐃΔⲆ: Tr++,
    ΔⲆⵠΔΔᐃⵠ: Tr++,
    ᐃΔⵠⵠⵠᐃⵠ: Tr++,
    ⵠⵠⲆΔⲆⲆΔ: Tr++,
    ΔⲆΔⲆΔᐃⵠ: Tr++,
    ⲆΔᐃⵠΔΔᐃ: Tr++,
    ΔⲆⵠⵠⲆᐃΔ: Tr++,
    ⵠΔᐃⵠᐃⵠⵠ: Tr++,
    ⲆⵠᐃⵠⵠΔᐃ: Tr++,
    ⲆᐃΔⵠⵠΔⵠ: Tr++,
    ᐃᐃⵠⵠᐃᐃⲆ: Tr++,
    ΔᐃⲆⵠΔⵠⲆ: Tr++,
    ⲆⲆⵠⵠⵠⵠⵠ: Tr++,
    ΔᐃⵠᐃⲆⲆⲆ: Tr++,
    ᐃᐃⲆΔΔΔⵠ: Tr++,
    ᐃΔΔᐃΔⵠΔ: Tr++,
    ᐃᐃⲆᐃⵠᐃᐃ: Tr++,
    ⵠΔⵠⲆᐃΔᐃ: Tr++,
    ⵠⲆⲆΔᐃᐃᐃ: Tr++,
    ⵠⵠⵠΔᐃⲆⵠ: Tr++,
    ΔᐃⲆᐃᐃΔⵠ: Tr++,
    ⵠⲆⵠᐃⲆᐃⲆ: Tr++,
    ΔΔⵠⲆᐃⲆⵠ: Tr++,
    ΔᐃⵠⵠΔⵠᐃ: Tr++,
    ᐃⵠᐃΔⲆᐃⲆ: Tr++,
    ⲆⲆⵠᐃΔΔᐃ: Tr++,
    ⵠⵠⵠᐃⵠⵠΔ: Tr++,
    ΔⵠⵠⵠⲆⵠⲆ: Tr++,
    ᐃΔⵠⲆΔΔⵠ: Tr++,
    ᐃⵠΔΔΔⲆⵠ: Tr++,
    ⵠᐃΔⵠⵠⵠⵠ: Tr++,
    ᐃᐃΔⲆⲆ: Tr++,
    ᐃΔΔⲆⵠᐃᐃΔⲆ: Tr++,
    ΔⵠⲆΔⲆ: Tr++,
    ΔⲆᐃΔᐃ: Tr++,
    ⲆⲆᐃⲆΔΔⵠᐃΔ: Tr++,
    ⵠⵠⲆΔⵠⲆⵠ: Tr++,
    ⵠⵠΔⲆᐃ: Tr++,
    ΔⵠⵠⲆⲆⲆⵠ: Tr++,
    ⵠⲆᐃΔΔΔΔ: Tr++,
    ⲆⵠⵠⵠΔΔⲆ: Tr++,
    ⲆⵠⵠⵠᐃᐃⲆ: Tr++,
    ΔⵠᐃⵠⵠΔⵠ: Tr++,
    ⵠΔⵠⵠⲆΔΔ: Tr++,
    ΔᐃᐃΔᐃᐃᐃ: Tr++,
    ⵠᐃⲆΔΔⵠⲆ: Tr++,
    ⵠᐃⵠⵠΔᐃⲆ: Tr++,
    ᐃᐃᐃΔᐃᐃⲆ: Tr++,
    ⵠⵠΔᐃⵠⲆⵠ: Tr++,
    ⵠΔⲆⲆⲆⵠΔ: Tr++,
    ᐃⵠᐃⵠᐃⵠᐃ: Tr++,
    ᐃᐃⵠⵠΔⵠΔ: Tr++,
    ⵠⲆⲆⲆᐃⲆⵠ: Tr++,
    ᐃⵠⵠⲆⵠⵠⲆ: Tr++,
    ⵠⲆⲆΔΔΔᐃ: Tr++,
    ⲆᐃⲆⵠⵠⲆⵠ: Tr++,
    ⵠⵠⲆⵠⵠⵠⲆ: Tr++,
    ⲆⵠⵠΔⵠᐃΔ: Tr++,
    ᐃᐃΔᐃΔᐃᐃ: Tr++,
    ⲆⲆΔΔᐃᐃᐃ: Tr++,
    ⵠΔⲆⲆᐃⵠΔ: Tr++,
    ⵠΔⵠΔⲆⵠᐃ: Tr++,
    ⲆⲆΔⲆⵠⵠⵠⲆⲆ: Tr++,
    ᐃⲆᐃⲆᐃ: Tr++,
    ⵠⲆᐃΔⲆⵠΔ: Tr++,
    ΔΔⲆⵠΔⲆᐃ: Tr++,
    ⲆⲆΔΔᐃᐃᐃⲆΔ: Tr++,
    ⵠⵠᐃⵠⲆ: Tr++,
    ΔⵠⵠⲆⲆ: Tr++,
    ⵠᐃᐃᐃΔⲆΔ: Tr++,
    ⲆⵠⲆΔⵠΔⲆ: Tr++,
    ᐃⵠⵠⵠⲆⲆⵠ: Tr++,
    ⵠᐃΔⲆᐃⲆᐃ: Tr++,
    ⲆΔΔⲆΔⵠΔ: Tr++,
    ᐃΔⲆΔΔΔᐃ: Tr++,
    ⲆⲆⵠΔⵠⲆⲆ: Tr++,
    ⲆΔΔⲆᐃΔⵠ: Tr++,
    ⲆⲆΔⵠΔᐃΔ: Tr++,
    ᐃⲆΔΔᐃⵠⵠ: Tr++,
    ᐃᐃⲆⲆᐃⲆⲆ: Tr++,
    ⲆⲆⲆⲆⵠΔⲆ: Tr++,
    ⲆΔᐃⵠⵠⵠⲆ: Tr++,
    ⵠΔⲆᐃⲆΔⲆ: Tr++,
    ᐃΔᐃᐃⲆΔᐃ: Tr++,
    ⵠⵠⵠⲆᐃᐃΔ: Tr++,
    ⲆⵠⲆⵠⲆᐃⵠ: Tr++,
    ⲆᐃⵠᐃⲆᐃⵠ: Tr++,
    ᐃΔᐃⵠⵠⵠᐃ: Tr++,
    ⵠᐃⵠᐃᐃⲆⲆ: Tr++,
    ᐃⲆΔΔΔⲆⲆ: Tr++,
    ΔᐃᐃⲆⲆΔᐃ: Tr++,
    ΔᐃⵠΔΔⲆᐃ: Tr++,
    ⵠⲆᐃⵠⵠⵠᐃ: Tr++,
    ⵠⲆΔⵠⲆᐃⵠ: Tr++,
    ᐃⵠΔⵠΔᐃΔ: Tr++,
    ⲆᐃΔⲆΔᐃⵠ: Tr++,
    ⵠᐃΔⲆⵠⵠⲆ: Tr++,
    ⵠᐃᐃⵠᐃⲆⵠ: Tr++,
    ⲆⲆⲆᐃⲆⲆΔ: Tr++,
    ⲆⲆΔᐃⲆⵠⵠ: Tr++,
    ΔᐃΔΔᐃΔⲆ: Tr++,
    ⵠⵠⲆⵠᐃΔⲆ: Tr++,
    ⲆᐃΔᐃⵠᐃⵠ: Tr++,
    ΔⲆΔⲆⵠⵠᐃ: Tr++,
    ᐃΔΔᐃᐃⵠᐃ: Tr++,
    ⵠΔᐃⵠⲆΔⵠ: Tr++,
    ⲆᐃⲆⵠΔⵠΔ: Tr++,
    ᐃⵠⲆᐃᐃᐃⲆ: Tr++,
    ΔⵠΔΔᐃΔⵠ: Tr++,
    ᐃΔΔΔᐃΔⲆ: Tr++,
    Ⲇᐃᐃᐃᐃᐃⵠ: Tr++,
    ᐃᐃᐃⲆⲆᐃⲆ: Tr++,
    ⲆᐃⲆᐃΔΔΔ: Tr++,
    ⵠᐃⲆⲆΔⵠᐃ: Tr++,
    ⵠⵠΔⲆⲆⲆⲆ: Tr++,
    ᐃᐃⵠⲆᐃᐃⵠ: Tr++,
    ⲆᐃⵠⵠΔᐃᐃ: Tr++,
    ⵠᐃᐃᐃⵠⵠⲆ: Tr++,
    ᐃᐃᐃⵠⲆⲆⵠ: Tr++,
    ⲆⵠⵠᐃΔΔⲆ: Tr++,
    ΔⲆΔⲆⲆⲆΔ: Tr++,
    ⵠΔⲆΔⵠᐃΔ: Tr++,
    ᐃⲆΔⲆⵠⵠᐃ: Tr++,
    ⲆᐃⲆᐃⲆᐃⲆ: Tr++,
    ⲆⲆΔⵠᐃⲆⲆ: Tr++,
    ᐃΔᐃᐃⲆΔᐃ: Tr++,
    ⵠΔΔⵠⲆΔᐃ: Tr++,
    ΔΔΔᐃⵠΔᐃ: Tr++,
    ⵠⵠⲆⲆⲆⵠⲆ: Tr++,
    ⲆⵠⲆⵠⵠⵠᐃ: Tr++,
    ⵠⲆⵠᐃⲆᐃᐃ: Tr++,
    ⵠⲆⵠΔⲆΔⲆ: Tr++,
    ᐃΔⵠⲆΔᐃⲆ: Tr++,
    ΔΔⲆᐃΔⲆΔ: Tr++,
    ⲆΔᐃΔᐃⵠᐃ: Tr++,
    ΔⲆⵠΔⵠⵠⲆ: Tr++,
    ⲆⲆΔΔⵠΔΔ: Tr++,
    ⲆΔⵠⵠⲆⲆΔ: Tr++,
    ⵠⵠⲆⵠⵠᐃⲆ: Tr++,
    ⵠΔⲆⵠΔΔⵠ: Tr++,
    ΔᐃᐃᐃⲆⲆᐃ: Tr++,
    ᐃᐃᐃⲆᐃⲆᐃ: Tr++,
    ᐃΔᐃⵠⲆⵠⵠ: Tr++,
    ΔΔᐃⵠⲆᐃⵠ: Tr++,
    ᐃΔΔᐃⵠⲆⲆ: Tr++,
    ⵠᐃᐃᐃⲆᐃᐃ: Tr++,
    ΔᐃΔⲆⵠΔΔ: Tr++,
    Δᐃᐃᐃᐃᐃᐃ: Tr++,
    ⲆΔᐃᐃⲆΔⲆ: Tr++,
    ⲆⵠⵠᐃᐃⲆᐃ: Tr++,
    ΔᐃΔⵠⲆᐃⲆ: Tr++,
    ΔΔΔⵠⲆⲆᐃ: Tr++,
    ⲆⲆⲆⵠⲆΔᐃ: Tr++,
    ᐃᐃⵠⲆⵠⲆⲆ: Tr++,
    ᐃΔΔᐃΔⵠᐃ: Tr++,
    ⲆᐃⵠⲆΔΔⲆ: Tr++,
    ⵠⲆΔⲆⵠᐃΔ: Tr++,
    ΔᐃⲆΔᐃΔⲆᐃΔ: Tr++,
    ⵠᐃⲆΔᐃᐃΔ: Tr++,
    ᐃᐃⵠᐃⵠⲆᐃ: Tr++,
    ⲆⵠΔΔⵠᐃⵠ: Tr++,
    ΔᐃⵠⲆⵠᐃΔ: Tr++,
    ᐃⵠⲆⵠⵠᐃⲆᐃᐃ: Tr++,
    POINTS: Tr++,
    ⵠⵠⵠⲆᐃⲆⲆ: Tr++,
    ⲆⵠΔΔⵠⵠⲆ: Tr++,
    ᐃⵠⵠⵠⵠΔⲆ: Tr++,
    ΔΔⵠᐃⵠᐃᐃ: Tr++,
    ⵠᐃⲆⵠᐃΔΔ: Tr++,
    ⲆⲆΔᐃΔΔΔ: Tr++,
    ⵠⲆΔⲆⲆᐃⵠ: Tr++,
    ΔᐃᐃᐃⵠΔᐃ: Tr++,
    ⵠⲆⲆⲆⲆᐃⲆ: Tr++,
    ⵠΔⵠⲆⵠⲆⵠ: Tr++,
    ΔΔⵠⲆΔⵠΔ: Tr++,
    ⲆⲆⵠΔᐃⵠⲆ: Tr++,
    ΔᐃⲆΔΔⵠⲆ: Tr++,
    ᐃⲆⲆΔΔⵠΔ: Tr++,
    ᐃΔΔⵠⲆΔᐃ: Tr++,
    ᐃᐃⲆΔΔΔᐃ: Tr++,
    ⵠᐃⲆΔⵠⵠⵠ: Tr++,
    ⵠᐃⵠᐃΔᐃⲆ: Tr++,
    ⲆᐃΔⲆⵠᐃΔ: Tr++,
    ⲆᐃⵠᐃⲆⲆⲆ: Tr++,
    ⵠΔΔⵠⵠⵠᐃ: Tr++,
    ΔΔⲆⲆᐃⵠΔ: Tr++,
    ⵠᐃⵠⵠⲆⵠⲆ: Tr++,
    ΔᐃⵠⲆⵠⲆⵠ: Tr++,
    ⵠⲆΔⵠⲆⲆΔ: Tr++,
    ⵠⲆᐃⲆΔⲆⲆ: Tr++,
    ⵠΔⲆᐃᐃΔⲆ: Tr++,
    ⲆⲆⲆⵠᐃΔᐃ: Tr++,
    ⵠⲆΔⲆᐃᐃΔ: Tr++,
    ⲆᐃΔᐃⵠⲆᐃ: Tr++,
    ᐃΔⵠᐃⵠⲆᐃ: Tr++,
    ᐃᐃⲆᐃᐃᐃⵠ: Tr++,
    Δⵠⵠⵠⵠᐃⵠ: Tr++,
    ⵠᐃⵠΔⲆΔᐃ: Tr++,
    ⲆⲆⵠᐃⲆᐃⵠ: Tr++,
    ΔⵠⵠΔΔᐃⲆ: Tr++,
    ᐃΔᐃⵠΔᐃⲆ: Tr++,
    ⲆᐃᐃᐃΔⲆᐃ: Tr++,
    ⲆⵠᐃⲆᐃⵠΔ: Tr++,
    ᐃΔΔⵠⵠⵠⲆ: Tr++,
    ΔⵠΔΔᐃΔᐃ: Tr++,
    ᐃΔΔⵠⵠᐃⲆ: Tr++,
    ᐃⵠⲆΔᐃᐃᐃ: Tr++,
    ⲆΔⵠⵠΔᐃΔ: Tr++,
    ΔⲆⲆΔⵠⲆⲆ: Tr++,
    ΔΔⵠᐃⵠⲆᐃ: Tr++,
    ⵠΔΔⵠΔⲆΔ: Tr++,
    ⵠⵠⵠⲆΔᐃⵠⵠⵠ: Tr++,
    ΔⲆⵠⵠⵠᐃⵠ: Tr++,
    ᐃΔᐃΔⵠⲆⵠΔᐃ: Tr++,
    ⲆᐃⲆᐃΔᐃΔ: Tr++,
    ᐃΔΔᐃⵠⲆⵠⲆΔ: Tr++,
    ⲆᐃΔᐃⲆⲆⵠᐃΔ: Tr++,
    ᐃᐃⲆⵠᐃⲆⵠΔΔ: Tr++,
    ΔΔΔΔΔᐃΔΔⲆ: Tr++,
    ⲆⲆⲆΔⲆⵠⵠⲆⵠ: Tr++,
    ΔⵠⲆⲆⵠᐃⲆ: Tr++,
    ⲆⵠⵠⵠⲆ: Tr++,
    ⵠⲆᐃΔⵠΔᐃ: Tr++,
    ΔᐃⲆΔΔᐃⲆ: Tr++,
    ᐃⲆⲆⲆⵠⵠΔ: Tr++,
    ᐃⵠⵠⲆΔⵠΔᐃⲆ: Tr++,
    ⲆΔⲆΔⲆᐃⵠ: Tr++,
    ΔᐃΔΔᐃᐃΔ: Tr++,
    ᐃΔⲆΔⲆⲆΔ: Tr++,
    ⲆⵠⲆᐃΔⲆⵠ: Tr++,
    ᐃⵠⵠⵠΔΔⵠ: Tr++,
    Δᐃⵠⵠⵠᐃᐃ: Tr++,
    ΔᐃΔΔᐃⵠΔ: Tr++,
    ΔᐃⵠΔᐃᐃᐃ: Tr++,
    ᐃᐃⵠΔⲆᐃᐃ: Tr++,
    ⲆΔⲆⲆᐃⵠⲆ: Tr++,
    ⲆᐃΔᐃⵠⵠⲆ: Tr++,
    ⵠⲆⲆⵠⲆ: Tr++,
    ⲆΔᐃΔⵠ: Tr++,
    ⵠⲆΔᐃΔ: Tr++,
    ⲆᐃᐃΔⵠΔᐃⲆᐃ: Tr++,
    ⲆᐃⲆⲆΔΔΔ: Tr++,
    ⵠⵠⵠΔΔⲆⲆ: Tr++,
    ⲆΔᐃⲆΔᐃΔ: Tr++,
    ⲆΔᐃΔⲆᐃⵠ: Tr++,
    ⵠⲆᐃᐃΔⲆⲆ: Tr++,
    ΔΔⲆᐃⲆᐃᐃ: Tr++,
    ᐃⵠᐃⵠΔⵠΔ: Tr++,
    ΔΔᐃᐃⲆᐃⵠ: Tr++,
    ᐃΔΔΔΔᐃᐃ: Tr++,
    ⲆⲆᐃᐃᐃⵠⲆ: Tr++,
    ⵠΔΔⲆᐃⲆⲆ: Tr++,
    ᐃΔⵠⵠΔⵠⲆ: Tr++,
    ⲆⵠⲆᐃⲆᐃΔ: Tr++,
    ⵠⵠⵠᐃΔⵠΔ: Tr++,
    ΔᐃᐃᐃⲆ: Tr++,
    ⵠⵠᐃᐃᐃⲆⵠ: Tr++,
    ⵠᐃⵠⵠⲆΔᐃ: Tr++,
    ᐃⵠⲆΔΔΔⵠ: Tr++,
    ⵠⲆⲆΔΔⵠⲆ: Tr++,
    ⲆΔⵠⲆΔⵠᐃ: Tr++,
    ⵠⲆᐃᐃᐃⵠΔ: Tr++,
    ⵠΔⵠⲆᐃⵠᐃ: Tr++,
    ΔᐃᐃⲆᐃⲆⲆ: Tr++,
    ⵠΔⲆᐃⲆᐃΔ: Tr++,
    ⵠⲆⵠΔᐃᐃΔ: Tr++,
    ⵠΔⲆᐃᐃΔⵠ: Tr++,
    ᐃⲆⵠⵠⵠⵠΔ: Tr++,
    ᐃᐃΔΔΔΔⵠ: Tr++,
    ᐃΔⵠᐃⲆΔΔ: Tr++,
    ⲆⲆᐃⲆⵠᐃᐃ: Tr++,
    ⵠⲆᐃᐃⲆⵠⵠ: Tr++,
    ⲆⲆⲆᐃΔⵠⲆ: Tr++,
    ᐃΔΔΔⲆⵠⲆ: Tr++,
    ⵠΔᐃⲆΔⲆⲆ: Tr++,
    ᐃΔⲆᐃᐃᐃⲆ: Tr++,
    ⵠⲆⲆΔⲆⲆᐃ: Tr++,
    ⲆⲆᐃΔⲆᐃⵠ: Tr++,
    ᐃⲆⵠⲆⲆᐃⲆ: Tr++,
    ⵠⵠᐃᐃⲆⵠⲆ: Tr++,
    ⲆᐃⲆΔΔᐃⵠ: Tr++,
    ⲆΔⵠⲆⵠᐃⲆ: Tr++,
    ⲆΔᐃⵠⲆⲆΔ: Tr++,
    ⲆⲆⵠΔⲆⲆⲆ: Tr++,
    ⵠⵠⲆⵠⵠⵠΔ: Tr++,
    ᐃⵠᐃΔⵠⵠΔ: Tr++,
    ΔⲆᐃᐃΔⵠⵠ: Tr++,
    ⲆⵠᐃⲆⲆⵠⲆ: Tr++,
    ⲆⵠΔⵠⲆᐃΔ: Tr++,
    ⵠⲆⵠⲆⵠⵠΔ: Tr++,
    ᐃΔⲆⲆⲆⵠⲆ: Tr++,
    ⲆⲆᐃⵠⵠ: Tr++,
    ᐃⲆΔᐃᐃΔΔ: Tr++,
    ⲆᐃⲆΔⵠⵠⲆ: Tr++,
    ᐃΔⵠⲆⲆ: Tr++,
    ⲆⲆᐃⲆⵠⲆᐃⲆΔ: Tr++,
    ⵠΔᐃᐃᐃᐃⵠ: Tr++,
    ⵠᐃΔⲆᐃ: Tr++,
    ΔⵠⵠⲆⲆΔᐃ: Tr++,
    ⲆᐃΔΔⵠⲆΔ: Tr++,
    ᐃᐃⲆⵠᐃᐃᐃ: Tr++,
    ΔᐃᐃⲆΔⵠΔ: Tr++,
    ⵠⵠⲆⲆⲆᐃⵠ: Tr++,
    ᐃⵠⵠΔᐃΔⲆ: Tr++,
    ⵠΔⵠⵠΔⲆⵠ: Tr++,
    ᐃΔⲆⲆᐃⵠⵠ: Tr++,
    ᐃⲆⵠΔᐃⲆᐃ: Tr++,
    ⵠΔΔⵠΔⵠᐃ: Tr++,
    ΔⲆΔⵠᐃΔᐃ: Tr++,
    ⲆᐃᐃΔⵠ: Tr++,
    ⵠⵠᐃᐃⲆ: Tr++,
    ΔΔⵠⲆᐃ: Tr++,
    ⵠΔΔᐃⵠ: Tr++,
    ⵠΔⲆⲆⲆ: Tr++,
    ΔⲆΔᐃΔⵠⵠ: Tr++,
    ⲆᐃΔⲆⵠⲆⵠ: Tr++,
    ᐃᐃⵠⲆⲆΔᐃ: Tr++,
    ⵠⵠⲆΔΔΔᐃ: Tr++,
    ᐃⲆⲆⵠⵠΔΔ: Tr++,
    ᐃΔΔⵠᐃⲆⲆ: Tr++,
    ⵠᐃᐃᐃⵠᐃⲆ: Tr++,
    ΔᐃΔΔⲆⲆⲆ: Tr++,
    ᐃⲆⲆᐃᐃⵠⲆ: Tr++,
    ⲆᐃⵠⵠΔᐃⵠ: Tr++,
    ᐃᐃⲆⵠᐃⲆⵠ: Tr++,
    ⵠᐃᐃⵠᐃΔⵠ: Tr++,
    ᐃΔⲆⲆΔΔΔ: Tr++,
    ᐃⵠⵠΔⲆⲆⲆ: Tr++,
    ⵠΔᐃⵠⵠⵠᐃ: Tr++,
    ΔⵠᐃᐃⲆⲆⲆ: Tr++,
    ᐃⵠⲆⲆᐃⲆᐃ: Tr++,
    ΔⲆⵠᐃΔΔⵠ: Tr++,
    ΔᐃΔⲆᐃΔⲆ: Tr++,
    ΔΔⵠΔⵠΔⲆ: Tr++,
    ⲆᐃᐃΔᐃᐃⲆ: Tr++,
    ⲆΔᐃⲆⵠⲆⲆ: Tr++,
    ΔᐃΔᐃⲆΔⵠ: Tr++,
    ΔᐃⵠᐃⲆⲆΔ: Tr++,
    ΔᐃⵠⲆⵠᐃⵠ: Tr++,
    ΔⵠⵠⵠⲆⲆⵠΔᐃ: Tr++,
    ⵠⲆⵠⵠⵠⲆⲆ: Tr++,
    ΔⲆⵠⲆⲆⵠⲆ: Tr++,
    ⵠᐃⲆᐃᐃᐃᐃ: Tr++,
    ⵠⵠᐃⲆΔᐃⵠ: Tr++,
    ΔⲆⵠᐃⵠⲆᐃ: Tr++,
    ⲆⵠⲆⲆⵠⵠᐃ: Tr++,
    ⲆⲆΔⵠΔⲆⵠ: Tr++,
    ᐃᐃⲆΔΔⲆⵠ: Tr++,
    ᐃᐃⵠᐃΔⲆⵠ: Tr++,
    ⲆΔᐃΔΔᐃⲆ: Tr++,
    ΔΔⲆⲆⵠᐃⵠ: Tr++,
    ΔⲆⵠⲆⵠⲆΔ: Tr++,
    ⵠⵠⵠⵠⵠⵠᐃ: Tr++,
    ᐃᐃⵠΔⲆⲆⵠ: Tr++,
    ⲆⵠΔⲆⲆⵠᐃ: Tr++,
    ⵠⵠΔⲆⲆΔⵠ: Tr++,
    ⵠᐃⵠⵠⵠⲆⵠ: Tr++,
    ⲆᐃⵠᐃⲆⵠᐃ: Tr++,
    ⵠⵠΔⲆⵠᐃᐃ: Tr++,
    ⲆᐃΔᐃᐃᐃⵠ: Tr++,
    ΔⲆᐃⲆΔᐃⵠ: Tr++,
    ΔⲆⵠᐃⲆΔⵠ: Tr++,
    ᐃⲆⲆⵠⲆΔᐃ: Tr++,
    ⵠⲆⲆᐃΔᐃⵠ: Tr++,
    ᐃⵠΔⵠⲆΔⲆ: Tr++,
    ⲆⲆⲆⵠΔⵠΔ: Tr++,
    ⲆⲆᐃⵠᐃᐃΔ: Tr++,
    ⲆⲆⵠⲆΔΔⵠ: Tr++,
    ΔⵠⲆⵠⲆᐃᐃ: Tr++,
    ⲆᐃⵠⵠΔⵠᐃ: Tr++,
    ᐃᐃᐃⵠΔᐃⵠ: Tr++,
    ⵠⵠⲆⲆΔΔΔ: Tr++,
    ᐃᐃᐃᐃⲆⲆΔ: Tr++,
    ΔⵠⲆΔⵠⵠⵠ: Tr++,
    ⲆᐃⲆΔⲆⲆⵠ: Tr++,
    ⲆⲆⲆᐃⵠⲆⲆ: Tr++,
    ᐃⲆⵠΔΔⲆⲆ: Tr++,
    ⵠⵠⲆᐃⲆᐃⲆ: Tr++,
    ⵠⲆΔᐃΔᐃᐃ: Tr++,
    ᐃᐃⲆⲆΔᐃⵠ: Tr++,
    ᐃΔⲆᐃᐃᐃΔ: Tr++,
    ⲆΔⲆΔᐃⲆᐃ: Tr++,
    ⵠⵠⲆⲆᐃⵠⲆ: Tr++,
    ⵠⲆΔΔⲆΔⲆ: Tr++,
    ΔⵠⵠⵠΔᐃⲆ: Tr++,
    ΔᐃᐃⵠⲆⵠⲆ: Tr++,
    ᐃⲆⲆⲆᐃⵠᐃ: Tr++,
    ⲆᐃⵠⵠᐃΔⲆ: Tr++,
    ⵠᐃΔᐃⵠⵠᐃ: Tr++,
    ⵠᐃᐃΔᐃᐃΔ: Tr++,
    ⲆᐃⵠᐃΔᐃᐃ: Tr++,
    ΔᐃⲆΔⵠⲆⵠ: Tr++,
    ⲆⵠⲆΔΔⲆⵠ: Tr++,
    ⵠⲆⲆΔⵠⲆⲆ: Tr++,
    ΔⵠⲆΔΔᐃⵠ: Tr++,
    ᐃⲆᐃⲆᐃⵠⲆ: Tr++,
    ᐃᐃᐃᐃⲆᐃⵠ: Tr++,
    ⲆᐃⲆⵠᐃⲆⵠ: Tr++,
    ⲆⲆⵠᐃᐃⵠⵠ: Tr++,
    ⲆⲆᐃᐃⲆⵠⵠ: Tr++,
    ⲆⲆΔⵠⵠⵠⲆ: Tr++,
    ᐃᐃΔⲆⵠⵠΔ: Tr++,
    ᐃᐃⲆⲆᐃᐃᐃ: Tr++,
    ᐃⲆⲆΔᐃⲆⵠ: Tr++,
    ᐃⵠⵠΔΔⵠⲆ: Tr++,
    ΔⵠᐃⵠⲆΔⵠ: Tr++,
    ⵠΔᐃΔⲆⲆⵠ: Tr++,
    ᐃⲆⲆᐃⵠⵠⲆ: Tr++,
    ⲆⲆⲆⲆⲆⲆⵠ: Tr++,
    ⵠⲆⲆᐃⲆⲆⲆ: Tr++,
    ᐃⵠⵠⲆᐃᐃΔ: Tr++,
    ᐃⲆᐃΔᐃ: Tr++,
    ᐃᐃΔⲆΔⵠⲆ: Tr++,
    ᐃᐃⵠⲆⲆⵠⲆ: Tr++,
    ⲆⲆΔⲆⲆ: Tr++,
    ⲆΔΔᐃΔⲆⲆ: Tr++,
    ΔⵠⲆᐃᐃⵠⲆ: Tr++,
    ᐃⵠⵠⵠⵠᐃⲆ: Tr++,
    ΔⲆⵠⲆᐃᐃᐃ: Tr++,
    ᐃᐃΔⵠᐃΔⲆ: Tr++,
    ⵠⵠᐃᐃΔ: Tr++,
    ᐃⲆᐃΔΔΔⲆ: Tr++,
    ΔⲆᐃⵠⵠᐃᐃⵠᐃ: Tr++,
    ⲆⵠⲆⲆΔᐃΔⵠⲆ: Tr++,
    ⲆⵠᐃⲆᐃᐃΔᐃⵠ: Tr++,
    ΔⵠᐃΔΔⲆΔⵠⲆ: Tr++,
    ⵠᐃⵠΔΔⵠⵠ: Tr++,
    ⲆⲆᐃⲆⵠⵠⵠ: Tr++,
    ⲆⵠᐃⵠⲆΔΔ: Tr++,
    ΔⲆⵠΔⲆΔⵠ: Tr++,
    ⵠᐃᐃᐃΔᐃᐃ: Tr++,
    ⵠⲆⵠΔᐃᐃⵠ: Tr++,
    ΔᐃⵠᐃᐃΔΔ: Tr++,
    ΔΔⲆΔΔΔⲆ: Tr++,
    ⵠⲆⵠΔⵠᐃⵠ: Tr++,
    ᐃΔΔΔⲆⲆᐃ: Tr++,
    ΔᐃΔᐃⲆ: Tr++,
    ΔⵠᐃⲆⵠ: Tr++,
    ᐃᐃᐃⲆⵠⲆᐃ: Tr++,
    ⲆⲆⲆᐃⲆⵠⵠ: Tr++,
    ⵠΔᐃᐃΔⵠⲆ: Tr++,
    ⲆⲆᐃΔᐃᐃΔ: Tr++,
    ΔⵠΔⵠᐃⵠⵠ: Tr++,
    ⲆᐃⲆⲆⵠΔΔ: Tr++,
    ⵠⵠⲆⲆᐃⲆᐃ: Tr++,
    ⲆᐃⲆⵠⵠⲆᐃ: Tr++,
    ⲆⵠᐃⲆΔΔΔ: Tr++,
    ᐃΔᐃᐃⲆΔⵠ: Tr++,
    ⵠⲆⵠΔⲆΔⵠ: Tr++,
    ⲆΔⲆΔⵠⲆΔ: Tr++,
    ᐃⵠᐃⲆⲆᐃᐃΔΔ: Tr++,
    ⲆⲆⲆᐃⵠⲆⲆⲆⵠ: Tr++,
    ᐃΔⲆⲆⵠⲆⵠ: Tr++,
    ⲆⵠⲆⵠⲆᐃⲆ: Tr++,
    ᐃᐃΔΔⵠᐃⵠ: Tr++,
    ⵠΔⵠⵠᐃΔⵠ: Tr++,
    ⵠⲆⲆΔⲆⲆⲆ: Tr++,
    ⲆⲆΔΔᐃΔⵠ: Tr++,
    ⲆⵠⵠΔΔΔΔ: Tr++,
    ΔⲆᐃΔᐃᐃᐃ: Tr++,
    ΔᐃΔᐃⵠⵠⲆ: Tr++,
    ΔⵠΔΔⵠᐃΔ: Tr++,
    ᐃⲆⵠⲆⲆᐃⵠ: Tr++,
    ΔⲆⲆᐃⵠᐃᐃ: Tr++,
    ᐃⵠᐃᐃᐃⵠⵠ: Tr++,
    ⵠⲆⲆΔΔⲆΔ: Tr++,
    ⲆᐃΔⵠⲆᐃⲆ: Tr++,
    ⲆⵠⵠⲆᐃΔᐃ: Tr++,
    ⵠⵠᐃᐃⲆⲆⲆ: Tr++,
    ᐃᐃΔᐃⵠΔΔ: Tr++,
    ᐃⲆⲆⵠΔⲆⵠⵠⲆ: Tr++,
    ΔⵠᐃⲆⵠᐃᐃ: Tr++,
    ⲆⲆⵠⲆⵠ: Tr++,
    ΔⲆⵠᐃᐃⵠⵠⵠΔ: Tr++,
    ⵠⵠⲆᐃⵠⲆᐃᐃⵠ: Tr++,
    ΔΔⲆⲆⲆΔᐃΔᐃ: Tr++,
    ᐃⲆΔⵠⵠᐃΔⵠᐃ: Tr++,
    ΔⲆᐃᐃⵠΔⵠ: Tr++,
    ⵠᐃΔⵠᐃⲆΔ: Tr++,
    ⵠΔⲆΔⵠⲆⲆ: Tr++,
    ΔⲆᐃⲆΔΔΔ: Tr++,
    ⵠᐃⲆᐃᐃᐃΔ: Tr++,
    ΔᐃΔⲆΔⵠⲆⲆΔ: Tr++,
    ᐃⲆⵠⲆⵠⲆΔ: Tr++,
    ᐃᐃⵠⲆᐃⲆΔ: Tr++,
    ᐃⵠⲆᐃⲆΔⲆ: Tr++,
    ⵠᐃⲆⵠⲆᐃΔ: Tr++,
    ᐃᐃᐃΔΔⵠⵠ: Tr++,
    ⲆᐃⵠⲆΔⲆⵠ: Tr++,
    ⵠᐃᐃⲆⵠⲆᐃ: Tr++,
    ΔⲆΔⲆᐃ: Tr++,
    ⵠⵠⵠⵠⵠΔᐃⵠᐃ: Tr++,
    ΔⲆⵠⵠΔᐃΔ: Tr++,
    ΔΔΔⵠΔⲆⲆ: Tr++,
    ᐃΔᐃᐃⲆⲆᐃ: Tr++,
    ΔΔⵠᐃⲆᐃⲆ: Tr++,
    ᐃΔΔΔΔⵠᐃ: Tr++,
    ΔᐃᐃᐃΔⲆⵠ: Tr++,
    ΔⵠⲆᐃᐃⵠⵠ: Tr++,
    ᐃⲆᐃΔⲆᐃᐃ: Tr++,
    ΔΔⲆᐃⲆⲆⵠ: Tr++,
    ⵠⲆΔⲆⵠⵠΔ: Tr++,
    ΔᐃⲆᐃᐃᐃΔ: Tr++,
    Ⲇᐃⵠⵠⵠⵠᐃ: Tr++,
    ᐃⲆΔΔΔⲆΔ: Tr++,
    ⵠⲆⲆⲆΔ: Tr++,
    ᐃᐃⵠⲆΔⵠᐃ: Tr++,
    ΔⵠΔⵠΔΔΔ: Tr++,
    ΔᐃⲆᐃΔᐃⵠ: Tr++,
    ᐃΔΔᐃΔⲆⲆ: Tr++,
    ᐃⵠⲆⵠᐃᐃΔ: Tr++,
    ⵠᐃᐃΔⵠⵠΔ: Tr++,
    ᐃᐃⵠⲆᐃⵠΔ: Tr++,
    ⵠⲆᐃΔΔⲆⲆ: Tr++,
    ΔΔⲆΔⲆΔⲆ: Tr++,
    ⵠⵠᐃⲆΔⵠⵠ: Tr++,
    ⲆΔΔⵠⵠⵠⵠ: Tr++,
    ⵠᐃⲆⲆⵠⲆⲆ: Tr++,
    ᐃᐃⲆᐃΔⵠΔ: Tr++,
    ᐃΔᐃᐃⲆⵠΔ: Tr++,
    ⵠⲆᐃΔΔⵠᐃ: Tr++,
    ΔΔⵠⲆᐃⵠΔ: Tr++,
    ᐃΔⵠⵠⲆⵠⵠ: Tr++,
    ᐃⲆⲆⵠⲆⲆᐃ: Tr++,
    ⵠΔⵠΔᐃᐃⵠ: Tr++,
    ⲆΔᐃᐃⵠⲆⵠ: Tr++,
    ᐃⵠⵠⵠⵠⵠⵠ: Tr++,
    ⵠⲆⲆΔⲆⵠⵠ: Tr++,
    ⵠΔᐃΔⲆⲆΔ: Tr++,
    ΔⵠᐃᐃᐃⵠΔ: Tr++,
    ⲆⲆᐃⲆⵠⲆΔ: Tr++,
    ⲆⵠᐃⵠΔᐃⲆ: Tr++,
    ᐃΔᐃΔΔΔΔⵠᐃ: Tr++,
    ⲆⲆⲆΔⵠⲆᐃⲆⵠ: Tr++,
    ΔⲆᐃⲆᐃΔⵠⲆⵠ: Tr++,
    ΔⵠⵠᐃΔⲆⵠⵠⵠ: Tr++,
    ΔⵠⲆⲆᐃⲆⵠ: Tr++,
    ΔⲆⵠᐃⲆΔᐃ: Tr++,
    ᐃⵠⵠⲆᐃ: Tr++,
    ΔⵠΔⵠΔⵠΔ: Tr++,
    ᐃᐃⲆⵠᐃΔⵠ: Tr++,
    ᐃⲆⵠⲆⲆⲆⵠ: Tr++,
    ΔⵠⵠⲆⲆᐃⲆ: Tr++,
    ΔΔⲆⲆⵠΔᐃ: Tr++,
    ΔᐃⵠⵠⲆᐃΔ: Tr++,
    ᐃⵠⵠᐃⵠᐃⲆ: Tr++,
    ⵠΔⲆΔⵠⲆΔ: Tr++,
    Δᐃᐃᐃᐃᐃⵠ: Tr++,
    ΔⵠⲆΔⵠᐃᐃ: Tr++,
    ⲆΔΔΔΔᐃΔ: Tr++,
    ΔⲆⵠᐃΔΔⲆ: Tr++,
    ᐃΔΔΔΔⵠⲆ: Tr++,
    ⲆΔΔⵠᐃΔᐃ: Tr++,
    ΔⵠⵠⵠᐃΔⲆ: Tr++,
    ΔΔⲆⵠⵠⲆΔ: Tr++,
    ΔᐃΔΔΔⵠᐃ: Tr++,
    ⲆᐃⵠⵠΔⲆᐃ: Tr++,
    ⲆⲆⵠⲆⲆᐃⵠ: Tr++,
    ⲆⵠⲆⵠⲆⵠᐃⲆΔ: Tr++,
    ΔⲆⲆΔⲆ: Tr++,
    ⵠΔⲆⵠⲆᐃᐃ: Tr++,
    ᐃⵠⵠΔⵠⲆⲆ: Tr++,
    ᐃⵠΔⲆⵠⵠΔ: Tr++,
    ⲆⵠⲆᐃΔᐃᐃ: Tr++,
    ⲆᐃⵠᐃⲆΔΔ: Tr++,
    ⵠⵠⲆⲆΔΔᐃ: Tr++,
    ᐃᐃᐃⲆᐃᐃᐃ: Tr++,
    ⲆΔⲆⲆⵠᐃᐃ: Tr++,
    ᐃᐃⵠⲆⲆⲆⲆ: Tr++,
    ⵠΔΔⲆᐃⵠⵠ: Tr++,
    ᐃⲆⵠⵠΔΔΔ: Tr++,
    ⵠⲆᐃΔᐃⲆⲆ: Tr++,
    ᐃΔⵠⵠΔᐃΔ: Tr++,
    ᐃⲆⲆⵠᐃᐃᐃ: Tr++,
    ⵠⲆΔΔᐃᐃⵠ: Tr++,
    ⵠΔᐃΔᐃΔⲆ: Tr++,
    ⲆⵠⵠⵠΔⵠᐃ: Tr++,
    ΔΔⲆᐃᐃᐃⲆ: Tr++,
    ⵠᐃΔΔᐃⵠⲆ: Tr++,
    ⵠⵠⵠⲆⲆⵠⵠ: Tr++,
    ᐃᐃⲆᐃΔⲆΔ: Tr++,
    ΔᐃⲆⵠᐃⲆᐃ: Tr++,
    ⲆⲆΔΔᐃⲆⲆΔⲆ: Tr++,
    ᐃⵠᐃΔⵠⵠⲆ: Tr++,
    ⲆΔⵠⲆⲆⲆⲆ: Tr++,
    ᐃⲆⵠⲆΔⵠΔ: Tr++,
    ⲆⲆⲆⵠᐃᐃΔ: Tr++,
    ⲆΔᐃᐃΔⵠⲆ: Tr++,
    ᐃΔΔΔⲆⲆⵠ: Tr++,
    ⵠΔᐃΔᐃⵠᐃ: Tr++,
    ᐃⲆⲆⲆΔⵠΔ: Tr++,
    ΔⲆᐃᐃⵠⵠⵠ: Tr++,
    ⵠⲆᐃᐃΔⵠⵠ: Tr++,
    ᐃᐃᐃΔⲆⵠⵠ: Tr++,
    ⵠΔⵠΔⵠΔΔ: Tr++,
    ⵠⲆⵠⵠⲆⲆⲆ: Tr++,
    ⵠΔΔⵠⲆⵠⵠ: Tr++,
    ⲆΔⵠΔᐃᐃⲆ: Tr++,
    ᐃⵠⲆᐃΔⵠⲆ: Tr++,
    ᐃΔΔᐃⲆⵠⵠ: Tr++,
    ⲆⲆⲆⵠⵠⲆΔ: Tr++,
    ᐃᐃⲆΔᐃΔⲆ: Tr++,
    ⲆⵠᐃⲆᐃⲆⲆ: Tr++,
    ΔΔᐃΔⵠⲆΔ: Tr++,
    ΔⵠᐃⲆⵠⵠⵠ: Tr++,
    ᐃᐃⲆⵠⵠⲆⲆ: Tr++,
    ᐃⵠⲆⲆᐃᐃⲆ: Tr++,
    ⵠΔⲆⲆⵠ: Tr++,
    ᐃᐃΔΔⲆⵠΔ: Tr++,
    ΔᐃΔᐃΔⵠⲆ: Tr++,
    ⲆᐃᐃΔᐃᐃⵠ: Tr++,
    ⲆΔⵠᐃΔⵠⲆ: Tr++,
    ⵠⵠΔⲆᐃⵠΔ: Tr++,
    ⵠⵠΔⲆⵠⵠᐃ: Tr++,
    ᐃⲆⵠⵠⵠⵠⵠ: Tr++,
    ⵠΔᐃΔⵠΔⲆ: Tr++,
    ΔᐃΔⲆⵠⵠΔ: Tr++,
    ⲆⵠΔᐃⲆᐃΔ: Tr++,
    ΔⲆⲆΔⵠΔⲆ: Tr++,
    ⵠⵠⵠⲆⲆᐃⵠ: Tr++,
    ⲆⲆᐃⲆⲆⲆⵠ: Tr++,
    ΔⵠᐃⵠΔΔⲆ: Tr++,
    ⵠⵠⵠΔⲆⵠⲆ: Tr++,
    ᐃᐃⲆⵠⲆⵠᐃ: Tr++,
    ⵠⲆᐃⵠⲆΔⲆ: Tr++,
    ⲆⲆᐃⲆⵠⲆⲆ: Tr++,
    ΔⲆⵠᐃᐃⵠⵠ: Tr++,
    ⲆⲆΔⲆΔΔᐃ: Tr++,
    ΔⲆᐃⵠⵠΔΔ: Tr++,
    ⲆⲆᐃᐃⲆΔᐃ: Tr++,
    ΔᐃΔⲆᐃᐃᐃ: Tr++,
    ⵠᐃⲆΔᐃⲆⲆ: Tr++,
    ⲆⵠᐃᐃⲆᐃΔ: Tr++,
    ΔⵠᐃⵠⲆΔⲆ: Tr++,
    ΔᐃΔⵠⵠΔⵠ: Tr++,
    ⵠΔⲆⵠᐃᐃΔ: Tr++,
    ⵠΔⲆΔᐃⵠΔ: Tr++,
    ⵠΔⲆⲆⲆΔᐃ: Tr++,
    ΔⵠᐃᐃⵠᐃΔ: Tr++,
    ᐃⵠΔᐃΔᐃΔ: Tr++,
    ᐃⲆⲆⲆⵠⲆⵠ: Tr++,
    ᐃⲆⲆⵠⵠⵠⲆ: Tr++,
    ⲆΔⵠᐃ: Tr++,
    ⵠΔΔΔ: Tr++,
    ⲆⲆᐃΔⵠΔᐃ: Tr++,
    ⵠⵠΔⲆⵠΔΔ: Tr++,
    ⵠⲆⲆᐃΔⵠⲆ: Tr++,
    ⲆᐃⲆΔᐃⵠⲆ: Tr++,
    ΔΔⲆⵠⵠᐃΔ: Tr++,
    ⲆΔⵠΔⲆᐃΔ: Tr++,
    ⲆⵠⵠᐃⵠⲆᐃ: Tr++,
    ⲆΔⵠⵠᐃ: Tr++,
    ΔᐃᐃⲆΔⵠⵠ: Tr++,
    ΔᐃΔⵠⲆ: Tr++,
    ΔⲆᐃⲆᐃⲆᐃ: Tr++,
    ⵠᐃⲆⲆᐃ: Tr++,
    ΔⲆᐃᐃⵠΔⲆ: Tr++,
    ᐃⵠᐃΔⲆ: Tr++,
    ΔⲆⵠΔⲆΔᐃ: Tr++,
    ᐃⲆⲆᐃΔ: Tr++,
    ⵠΔᐃⵠᐃ: Tr++,
    ⵠⲆΔⵠⵠⵠⲆ: Tr++,
    ⲆΔⵠᐃΔᐃΔ: Tr++,
    ⲆΔⵠⲆΔΔΔ: Tr++,
    ΔⲆⵠⵠⵠⲆᐃ: Tr++,
    ΔΔⲆΔⲆⲆΔ: Tr++,
    ΔⲆⲆΔⵠⵠⵠ: Tr++,
    ᐃᐃᐃᐃⲆᐃΔ: Tr++,
    ᐃⲆⲆΔΔΔⵠ: Tr++,
    ⵠⵠᐃᐃⲆᐃᐃ: Tr++,
    ᐃᐃⲆΔΔ: Tr++,
    ΔΔΔᐃΔⲆΔ: Tr++,
    ΔΔΔᐃⵠ: Tr++,
    ΔΔⵠᐃⵠΔᐃ: Tr++,
    ⵠΔΔⲆΔΔⵠ: Tr++,
    ΔᐃΔᐃΔᐃⲆ: Tr++,
    ᐃΔⵠⲆΔΔⲆ: Tr++,
    ᐃⲆⵠⵠᐃⵠⲆ: Tr++,
    ΔⵠⵠⵠⵠΔΔ: Tr++,
    ⲆᐃⲆᐃⵠⲆΔΔⲆ: Tr++,
    ΔⲆⲆΔⵠⲆⵠ: Tr++,
    ⵠΔⵠᐃΔΔΔ: Tr++,
    ΔΔⲆᐃⲆᐃⵠΔⵠ: Tr++,
    ⲆᐃⲆΔΔΔⲆ: Tr++,
    ΔⵠᐃᐃΔΔΔ: Tr++,
    ⲆⲆΔΔΔΔⲆ: Tr++,
    ⲆⵠΔᐃⲆⵠΔ: Tr++,
    ᐃΔᐃᐃⵠ: Tr++,
    ΔⲆᐃΔⵠΔΔ: Tr++,
    ΔⵠᐃΔᐃΔⲆ: Tr++,
    ⵠⵠⲆᐃⲆΔⲆ: Tr++,
    ⲆⲆⵠᐃᐃⲆᐃ: Tr++,
    ⵠⵠⵠⲆⲆⲆᐃ: Tr++,
    ⲆΔΔⵠᐃⵠⵠ: Tr++,
    ΔᐃᐃⵠΔⲆΔ: Tr++,
    ⲆᐃⵠⲆᐃᐃⵠ: Tr++,
    ⲆⲆΔΔΔⵠΔ: Tr++,
    ⵠᐃΔⵠⵠⵠⲆ: Tr++,
    ⲆΔⲆΔΔᐃⲆ: Tr++,
    ⵠΔⵠΔΔⲆⲆ: Tr++,
    ΔⲆⵠⲆΔΔⲆ: Tr++,
    ΔΔᐃⲆΔᐃⲆ: Tr++,
    ᐃΔⲆᐃⲆ: Tr++,
    ⵠⲆⵠᐃΔᐃᐃ: Tr++,
    ⲆΔⵠⲆᐃⲆⲆ: Tr++,
    ᐃⵠᐃⲆⵠⵠⵠ: Tr++,
    ⲆⵠⵠΔΔⲆⲆ: Tr++,
    ⲆⲆⵠΔᐃΔⲆ: Tr++,
    ⵠΔⲆⲆⵠᐃⵠ: Tr++,
    ⲆⲆΔⵠΔⵠᐃ: Tr++,
    ΔᐃΔΔⲆᐃⵠ: Tr++,
    ΔΔⵠΔⵠΔⵠ: Tr++,
    ΔΔΔⵠᐃᐃⲆ: Tr++,
    ΔⵠΔⲆⲆᐃⵠ: Tr++,
    ⲆΔᐃⵠⲆᐃΔ: Tr++,
    ⲆᐃΔᐃᐃᐃΔ: Tr++,
    ⲆᐃⵠΔΔⲆᐃ: Tr++,
    ⲆⵠΔΔⲆ: Tr++,
    ᐃⵠⲆΔΔⲆⵠ: Tr++,
    ΔᐃΔᐃⵠᐃᐃ: Tr++,
    ⲆⲆΔᐃᐃᐃᐃ: Tr++,
    ⲆΔⲆΔⵠᐃⲆ: Tr++,
    ΔᐃᐃΔⵠΔⲆ: Tr++,
    ⵠⵠⵠΔᐃΔᐃ: Tr++,
    ⲆⵠⲆΔΔᐃⵠ: Tr++,
    ᐃⲆᐃⵠⵠΔΔ: Tr++,
    ⲆΔⲆⲆⵠⲆⵠ: Tr++,
    ΔΔᐃΔⲆⵠᐃ: Tr++,
    ᐃⵠΔᐃΔⲆⲆ: Tr++,
    ΔᐃⲆΔᐃⲆⵠ: Tr++,
    ᐃⲆΔᐃⲆΔⲆ: Tr++,
    ⵠⲆΔⵠⲆⵠⲆ: Tr++,
    ⲆⲆᐃᐃΔᐃᐃ: Tr++,
    ΔⵠⲆΔⵠᐃⵠ: Tr++,
    ⵠᐃᐃⲆⲆⲆΔ: Tr++,
    ᐃᐃⲆⵠΔⲆᐃ: Tr++,
    ⲆΔΔΔⲆⲆⵠ: Tr++,
    ᐃΔᐃⵠᐃΔⵠ: Tr++,
    ⲆΔⲆᐃΔ: Tr++,
    ΔⵠⲆⲆΔⵠΔ: Tr++,
    ΔⲆⲆΔⵠⵠᐃ: Tr++,
    ΔᐃⵠⲆⵠⵠⲆ: Tr++,
    ᐃⵠⲆΔⵠⲆᐃ: Tr++,
    ⲆⵠΔΔΔⵠΔ: Tr++,
    ⵠᐃⵠⵠⵠⵠⵠ: Tr++,
    ᐃⵠⲆⲆΔⲆⵠ: Tr++,
    ΔⲆᐃⵠΔⵠⲆ: Tr++,
    ᐃⵠⵠⵠⵠᐃᐃ: Tr++,
    ⲆᐃᐃⲆΔⵠⵠ: Tr++,
    ΔⵠⵠᐃⲆΔⵠ: Tr++,
    ᐃⵠᐃⵠᐃΔᐃ: Tr++,
    ΔⵠⲆΔΔⵠⵠ: Tr++,
    ⲆΔⲆᐃⵠⲆⵠ: Tr++,
    ⵠΔⲆᐃᐃⲆΔ: Tr++,
    ⵠΔⵠᐃΔⵠᐃ: Tr++,
    ⵠΔⲆⲆᐃΔᐃ: Tr++,
    ⵠⲆᐃΔΔᐃⲆ: Tr++,
    ⵠᐃⵠⵠⵠᐃΔ: Tr++,
    ᐃⵠᐃⵠⵠⲆᐃ: Tr++,
    ᐃⲆⲆⲆⵠⵠᐃ: Tr++,
    ΔᐃᐃΔⲆⵠᐃ: Tr++,
    ΔΔᐃᐃⵠᐃⲆ: Tr++,
    ΔⵠⵠΔⵠᐃⲆ: Tr++,
    ⵠᐃⲆᐃΔᐃⵠ: Tr++,
    ⲆⲆⲆⵠΔᐃⲆ: Tr++,
    ⲆⲆⵠᐃᐃⲆΔ: Tr++,
    ⵠΔΔᐃᐃⵠⵠ: Tr++,
    ⲆᐃᐃᐃΔΔΔ: ["#E9CF96", "#144940"],
    ᐃⲆΔᐃⲆⵠⵠ: Tr++,
    ⵠΔᐃⵠᐃΔᐃ: Tr++,
    ⵠⲆᐃⲆΔΔⲆ: Tr++,
    ᐃΔΔᐃᐃᐃΔ: Tr++,
    ΔΔⲆᐃⲆᐃⵠ: Tr++,
    ⲆⲆⵠⲆΔⵠⵠ: Tr++,
    ΔᐃⲆⲆⲆⲆⵠ: Tr++,
    ᐃⲆⲆⵠⵠ: Tr++,
    ⲆⲆΔⵠⲆΔΔ: Tr++,
    ᐃΔⲆᐃⵠⲆⵠ: Tr++,
    ⲆⵠᐃΔᐃⵠⲆ: Tr++,
    ΔⵠⲆⵠΔⵠΔ: Tr++,
    ΔᐃΔΔΔᐃΔ: Tr++,
    ⲆⲆⵠΔⵠᐃⲆ: Tr++,
    ᐃΔΔΔⲆⵠⵠ: Tr++,
    ⵠⲆⵠⲆΔⲆᐃ: Tr++,
    ⲆⲆⵠⲆⲆⲆⵠ: Tr++,
    ⵠᐃⲆⵠⵠΔⵠ: Tr++,
    ᐃⲆᐃⵠⲆᐃᐃ: Tr++,
    ΔⲆΔΔⵠΔΔ: Tr++,
    ⲆⵠⵠΔⲆᐃⵠ: Tr++,
    ΔⵠᐃⲆᐃᐃᐃ: Tr++,
    ⵠΔⵠΔΔᐃᐃ: Tr++,
    ΔᐃΔⵠⲆᐃΔ: Tr++,
    ᐃᐃᐃΔⵠᐃΔ: Tr++,
    ⲆΔⲆⲆⵠΔⲆ: Tr++,
    ΔⵠᐃⵠΔⲆΔ: Tr++,
    ⲆΔΔⲆΔΔᐃ: Tr++,
    ᐃᐃⲆᐃⵠⲆΔ: Tr++,
    ᐃⵠΔⲆᐃⵠΔ: Tr++,
    ᐃⲆⲆⵠᐃΔΔ: Tr++,
    ΔⵠΔⲆᐃⲆⵠ: Tr++,
    ᐃΔⲆᐃᐃΔⵠ: Tr++,
    ⲆΔᐃΔⲆⲆⲆ: Tr++,
    ΔⵠᐃᐃⵠⲆⵠ: Tr++,
    ⵠᐃⲆⵠⲆΔⵠ: Tr++,
    ⲆΔΔΔΔΔᐃ: Tr++,
    ᐃᐃᐃᐃᐃⵠⲆ: Tr++,
    ⵠΔΔᐃΔᐃⵠ: Tr++,
    ⲆⲆⲆΔᐃⵠⵠ: Tr++,
    ⲆⵠⲆⵠΔᐃⲆ: Tr++,
    ΔΔᐃᐃΔⲆⲆ: Tr++,
    ⲆΔⵠᐃⲆⲆⲆ: Tr++,
    ᐃⲆⲆᐃⵠᐃⲆ: Tr++,
    ⲆᐃᐃᐃⲆᐃΔ: Tr++,
    ⲆᐃⲆΔΔⲆⵠ: Tr++,
    ᐃⲆΔⵠⲆⲆΔ: Tr++,
    ᐃⲆⵠⵠⵠᐃⲆ: Tr++,
    ⲆⵠΔΔᐃᐃΔ: Tr++,
    ΔΔΔᐃⲆΔᐃ: Tr++,
    ⲆⲆⵠΔⲆᐃΔ: Tr++,
    ⲆⲆⵠⵠⲆΔᐃ: Tr++,
    ΔⵠΔᐃᐃⵠᐃ: Tr++,
    ΔᐃⵠⵠᐃΔⲆ: Tr++,
    ⵠΔᐃⲆΔΔⵠ: Tr++,
    ΔᐃⵠᐃⲆᐃΔ: Tr++,
    ⲆⲆⲆᐃΔΔⵠ: Tr++,
    ⲆΔΔᐃⵠᐃⲆ: Tr++,
    ⲆᐃᐃⵠΔᐃΔ: Tr++,
    ΔΔΔⲆΔⵠᐃ: Tr++,
    ⵠⵠⵠⲆⲆⵠΔ: Tr++,
    ΔΔⵠΔⲆᐃᐃ: Tr++,
    ⵠⵠⵠᐃⵠⲆΔ: Tr++,
    ΔⲆⵠⲆⵠⲆⵠ: Tr++,
    ⵠⲆⵠΔⲆⵠⲆ: Tr++,
    ᐃᐃᐃⲆΔⲆⲆ: Tr++,
    ⵠⲆⲆⲆΔᐃᐃ: Tr++,
    ΔⵠΔΔⵠᐃᐃ: Tr++,
    ᐃΔⲆⲆᐃᐃⵠ: Tr++,
    ᐃⲆⲆΔⲆ: Tr++,
    ⵠΔΔΔΔⵠⲆ: Tr++,
    ΔⲆⲆⲆⲆ: Tr++,
    ΔⵠⵠΔΔⲆⵠ: Tr++,
    ⲆⵠΔᐃΔΔⲆ: Tr++,
    ΔΔⲆⵠⵠⲆᐃ: Tr++,
    ⲆᐃⲆᐃⵠΔΔ: Tr++,
    ⵠᐃⲆⲆΔⲆΔ: Tr++,
    ΔΔΔⵠⲆΔⲆ: Tr++,
    ⲆⵠᐃⲆᐃΔᐃ: Tr++,
    ᐃⵠⲆᐃⲆΔΔ: Tr++,
    ⵠΔΔⲆⲆⲆⵠ: Tr++,
    ⵠΔⵠⲆᐃⲆⵠ: Tr++,
    ᐃⵠⲆᐃΔᐃΔ: Tr++,
    ΔⲆⵠᐃⵠⵠⵠ: Tr++,
    ΔⲆⵠⵠΔⵠⵠ: Tr++,
    ⲆᐃⵠⵠᐃᐃⲆ: Tr++,
    ΔᐃⲆᐃⲆⵠΔ: Tr++,
    ΔⵠᐃⵠⲆᐃᐃ: Tr++,
    ᐃⵠᐃᐃΔᐃΔ: Tr++,
    ⵠⲆΔᐃⵠⵠⵠ: Tr++,
    ΔΔΔⵠΔᐃⵠ: Tr++,
    ⵠⲆⲆⲆΔⵠⲆ: Tr++,
    ΔⲆⵠⵠⵠᐃΔ: Tr++,
    ΔⵠⵠⲆᐃᐃⵠ: Tr++,
    ⵠΔΔⵠⵠΔⵠ: Tr++,
    ⲆⲆⵠΔⲆΔⵠ: Tr++,
    ΔⲆⵠᐃⲆⵠⵠ: Tr++,
    ⲆᐃⵠⲆᐃⵠΔ: Tr++,
    ΔⲆΔᐃᐃΔⲆ: Tr++,
    ⵠᐃⵠΔᐃⲆᐃ: Tr++,
    ⲆᐃΔΔᐃⵠⲆ: Tr++,
    ᐃⲆⲆⵠΔᐃⲆ: Tr++,
    ⵠᐃᐃⵠᐃᐃⲆ: Tr++,
    ΔⵠᐃᐃᐃᐃΔ: Tr++,
    ΔⲆΔⵠΔΔΔ: Tr++,
    ΔⲆⲆᐃᐃⵠⵠ: Tr++,
    ΔᐃⵠΔⵠᐃΔ: Tr++,
    ⵠⲆΔᐃΔΔΔ: Tr++,
    ΔΔⲆᐃΔⲆᐃ: Tr++,
    ᐃᐃΔⵠⵠⲆΔ: Tr++,
    ⵠΔⵠⵠⵠΔⲆ: Tr++,
    ΔΔᐃΔᐃΔⲆ: Tr++,
    ⵠⵠΔΔᐃᐃⵠ: Tr++,
    ΔᐃⵠᐃΔⲆᐃ: Tr++,
    ⵠᐃᐃΔⲆᐃΔ: Tr++,
    ΔⲆⲆΔᐃᐃⵠ: Tr++,
    ΔⲆΔⲆΔⲆⲆ: Tr++,
    ᐃΔⵠⲆΔΔΔ: Tr++,
    ⲆⵠΔᐃΔⲆΔ: Tr++,
    ⵠⲆⵠⲆⲆⵠⵠ: Tr++,
    ᐃⵠΔΔᐃᐃⲆ: Tr++,
    ΔᐃᐃⵠᐃⲆΔ: Tr++,
    ΔᐃΔⵠᐃⲆᐃ: Tr++,
    ΔᐃⵠⵠᐃΔᐃ: Tr++,
    ⲆⲆᐃΔᐃⲆΔ: Tr++
  };
  const Vr = A;
  const Xr = zk;
  const $r = da;
  const _r = c;
  Tr = Cn;
  var as = {
    ⵠΔⵠΔⲆ: Tr++,
    ΔΔⲆⵠᐃ: Tr++,
    ᐃⵠᐃᐃᐃ: Tr++,
    ᐃⲆᐃΔⵠ: Tr++,
    ⵠᐃⲆⲆⲆ: Tr++,
    ᐃᐃⲆⵠΔ: Tr++,
    ⲆΔᐃⲆⵠ: Tr++,
    ΔΔᐃᐃᐃ: Tr++,
    ΔⵠⲆΔΔ: Tr++,
    ⲆⲆᐃᐃᐃ: Tr++,
    ᐃⲆΔΔⵠ: Tr++,
    ΔⵠΔⲆⵠ: Tr++,
    ⵠⵠᐃⲆⲆ: Tr++,
    Δᐃⵠᐃⵠ: Tr++,
    ᐃΔⵠⲆΔ: Tr++,
    ⵠⵠⲆⲆΔ: Tr++,
    ΔⵠΔΔⵠ: Tr++,
    ⵠᐃΔΔⵠ: Tr++,
    ΔⲆΔᐃⵠ: Tr++,
    ᐃⲆΔᐃᐃ: Tr++,
    ⲆᐃⵠⲆΔ: Tr++,
    ᐃⵠᐃⵠΔ: Tr++,
    ΔⵠⲆⲆⵠ: Tr++,
    ⲆⲆⵠⵠⲆ: Tr++,
    ⵠᐃⵠⲆᐃ: Tr++,
    ⵠⲆΔΔᐃ: Tr++,
    ΔΔⵠⵠⵠ: Tr++,
    ΔⵠΔΔΔ: Tr++,
    ΔΔᐃᐃⲆ: Tr++,
    ΔΔᐃΔᐃ: Tr++,
    ⵠⵠⵠⵠⲆ: Tr++,
    ⵠᐃΔⲆⵠ: Tr++,
    ΔⲆΔᐃⲆ: Tr++,
    ΔΔⵠᐃⵠ: Tr++,
    ⲆᐃⲆᐃΔ: Tr++,
    ᐃᐃᐃΔⵠ: Tr++,
    ΔᐃᐃΔⲆ: Tr++,
    ⵠΔΔⲆᐃ: Tr++,
    ⵠᐃᐃⵠⵠ: Tr++,
    ᐃⵠⵠᐃⲆ: Tr++,
    ᐃⲆⲆⲆⵠ: Tr++,
    ΔⵠⲆⲆⲆ: Tr++,
    ⵠΔΔΔⵠ: Tr++,
    ᐃΔⵠⲆᐃ: Tr++,
    ᐃⲆᐃⵠΔ: Tr++,
    ᐃΔᐃᐃΔ: Tr++,
    ⲆⵠᐃᐃΔ: Tr++,
    ⲆᐃᐃΔᐃ: Tr++,
    ΔⲆⵠⲆΔ: Tr++,
    ᐃⲆⲆⲆᐃ: Tr++,
    ΔᐃⵠⲆⵠ: Tr++,
    ⲆⲆΔΔΔ: Tr++,
    ⲆΔΔⲆᐃ: Tr++,
    ⲆΔᐃᐃΔ: Tr++,
    Δⵠᐃⵠⵠ: Tr++,
    Ⲇᐃᐃⵠᐃ: Tr++,
    ᐃΔⵠⵠⲆ: Tr++,
    ⵠᐃᐃⲆΔ: Tr++,
    ⲆΔⲆⲆᐃ: Tr++,
    ⵠΔⵠⲆΔ: Tr++,
    ⵠᐃᐃⲆᐃ: Tr++,
    ⵠᐃᐃⲆⲆ: Tr++,
    ⵠⵠΔⲆⵠ: Tr++,
    ⵠᐃΔΔⲆ: Tr++,
    ΔᐃⲆⵠⵠ: Tr++,
    ⵠΔⵠⲆⵠ: Tr++,
    ᐃΔΔᐃⲆ: Tr++,
    ΔⵠⲆᐃⲆ: Tr++,
    ⵠΔᐃᐃΔ: Tr++,
    ᐃⲆᐃⵠⲆ: Tr++,
    ⵠΔΔᐃⲆ: Tr++,
    ⵠᐃⲆΔⵠ: Tr++,
    ΔΔᐃⵠΔ: Tr++,
    ΔᐃᐃⵠⲆ: Tr++,
    ᐃⵠᐃⵠⵠ: Tr++,
    ⲆⲆⲆΔⵠ: Tr++,
    ⵠⵠⵠⲆⵠ: Tr++,
    ⵠΔⵠⵠᐃ: Tr++,
    ⲆᐃⵠⲆⵠ: Tr++,
    ΔⲆᐃᐃⲆ: Tr++,
    ⲆΔΔⵠᐃ: Tr++,
    ᐃⲆΔⵠⲆ: Tr++,
    ΔⲆΔⵠⵠ: Tr++,
    ⵠⲆⲆⵠᐃ: Tr++,
    ⲆᐃΔΔΔ: Tr++,
    Δⵠᐃᐃᐃ: Tr++,
    ⵠᐃⲆᐃᐃ: Tr++,
    ΔⵠⵠⲆΔ: Tr++,
    ⵠⲆᐃⲆΔ: Tr++,
    ᐃⲆΔⵠΔ: Tr++,
    ⵠⵠⲆⵠᐃ: Tr++,
    ⵠΔⵠⲆᐃ: Tr++,
    ⵠⲆᐃᐃⲆ: Tr++,
    ᐃⵠⵠᐃⵠ: Tr++,
    ⵠⵠⲆⵠⵠ: Tr++,
    ᐃⵠⵠⲆⵠ: Tr++,
    ᐃⲆⲆΔⵠ: Tr++,
    ΔᐃΔⵠᐃ: Tr++,
    ΔΔΔΔⵠ: Tr++,
    ᐃⵠⲆⵠᐃ: Tr++,
    ᐃⵠⲆΔ: Tr++,
    ᐃⵠΔΔΔ: Tr++,
    ΔⵠᐃΔᐃ: Tr++,
    ⵠᐃⵠΔΔ: Tr++,
    ᐃⲆΔⲆᐃ: Tr++,
    ΔⵠᐃⵠΔ: Tr++,
    ⲆΔⵠⲆᐃ: Tr++,
    ΔⲆⵠⵠⲆ: Tr++,
    ΔᐃⲆⲆᐃ: Tr++,
    ΔΔᐃⲆΔ: Tr++,
    ⵠᐃⲆⵠⲆ: Tr++,
    ᐃᐃᐃΔΔ: Tr++,
    ⵠΔⲆⵠⲆⵠᐃ: Tr++,
    ᐃⵠΔⵠⵠᐃΔ: Tr++,
    ᐃᐃΔⲆⵠ: Tr++,
    ⵠΔᐃΔᐃ: Tr++,
    ⲆⲆᐃᐃΔ: Tr++,
    ᐃⲆⲆⵠⲆ: Tr++,
    ⵠⵠⲆᐃΔ: Tr++,
    ΔⲆⵠᐃⵠ: Tr++,
    ⲆᐃⵠⵠⲆ: Tr++,
    ᐃΔΔᐃⵠ: Tr++,
    ⲆΔⲆᐃⵠ: Tr++,
    ⵠᐃᐃᐃΔ: Tr++,
    ⵠᐃⵠᐃᐃ: Tr++,
    ᐃⵠⲆᐃΔ: Tr++,
    ⲆⵠⲆⲆⲆ: Tr++,
    ⲆᐃⵠᐃΔ: Tr++,
    ΔᐃΔⲆᐃ: Tr++,
    ⲆⲆΔᐃΔ: Tr++,
    ΔⲆⵠⲆᐃ: Tr++,
    ΔⵠⵠΔⲆ: Tr++,
    ⵠⲆΔⵠᐃ: Tr++,
    ᐃΔᐃᐃⲆ: Tr++,
    ᐃᐃΔⵠᐃ: Tr++,
    ⵠᐃⲆⵠᐃ: Tr++,
    ⵠⵠⵠΔⲆ: Tr++,
    ⵠⵠⵠᐃΔ: Tr++,
    ᐃⲆΔΔⲆ: Tr++,
    ⲆⵠⲆΔⲆ: Tr++,
    ⵠⲆΔⲆⲆ: Tr++,
    ⲆᐃᐃⵠⲆ: Tr++,
    ΔⵠⵠⵠⲆ: Tr++,
    ⲆᐃⲆΔⵠ: Tr++,
    ΔΔⲆΔΔ: Tr++,
    ᐃⲆⵠⵠΔ: Tr++,
    ᐃᐃΔᐃᐃ: Tr++,
    ⲆⲆᐃⵠᐃ: Tr++,
    ΔΔⵠⲆⲆ: Tr++,
    Ⲇⵠᐃᐃⵠ: Tr++,
    ⵠΔⲆⵠᐃ: Tr++,
    ⲆⲆⵠΔⲆ: Tr++,
    ⵠⲆⲆⵠΔ: Tr++,
    ⲆⲆⲆᐃᐃ: Tr++,
    ᐃⲆᐃΔⲆ: Tr++,
    ⵠΔᐃᐃⲆ: Tr++,
    ᐃΔΔⵠⲆ: Tr++,
    ⵠⲆᐃⵠΔ: Tr++,
    ΔΔⵠᐃⲆ: Tr++,
    ⲆΔⲆⵠⵠ: Tr++,
    ᐃᐃᐃⲆⵠ: Tr++,
    Δᐃᐃᐃᐃ: Tr++,
    ᐃⲆΔᐃⲆ: Tr++,
    ⲆⵠⵠᐃΔ: Tr++,
    ⵠⲆⵠⵠⵠ: Tr++,
    ⵠΔⲆᐃⵠ: Tr++,
    ⵠᐃⵠⵠΔ: Tr++,
    ⵠⲆⲆᐃᐃ: Tr++,
    ⵠᐃⵠⵠⲆ: Tr++,
    ⵠⲆⲆⵠⵠ: Tr++,
    ΔᐃΔⲆΔ: Tr++,
    ⵠⲆᐃⲆⵠ: Tr++,
    ᐃΔΔΔᐃ: Tr++,
    ⵠⲆΔΔⲆ: Tr++,
    ⲆⵠᐃⵠΔ: Tr++,
    ⲆΔⲆⲆⲆ: Tr++,
    ΔΔⲆⲆⵠ: Tr++
  };
  Tr = Cq;
  var bs = {
    ᐃᐃᐃΔⵠ: Tr++,
    ᐃᐃⲆⵠΔ: Tr++,
    ᐃΔⲆᐃΔ: Tr++,
    ⲆΔᐃⲆⵠ: Tr++,
    ΔΔᐃᐃᐃ: Tr++,
    ΔᐃᐃΔⲆ: Tr++,
    ⵠΔΔⲆᐃ: Tr++,
    ᐃⵠⲆΔᐃ: Tr++,
    ⵠᐃⲆⲆⲆ: Tr++,
    ⲆΔΔΔⲆ: Tr++,
    ⵠⲆⲆⵠᐃ: Tr++,
    ⲆᐃΔΔΔ: Tr++,
    ⵠⲆΔΔᐃ: Tr++,
    ΔΔⵠⵠⵠ: Tr++,
    ΔⵠΔΔΔ: Tr++,
    ΔΔᐃᐃⲆ: Tr++,
    ⵠᐃΔⲆⵠ: Tr++,
    ΔⲆΔᐃⲆ: Tr++,
    ΔΔⵠᐃⵠ: Tr++,
    ᐃⵠⵠᐃⲆ: Tr++,
    ᐃⵠⵠⲆⵠ: Tr++,
    ᐃⲆⲆΔⵠ: Tr++,
    ΔᐃΔⵠᐃ: Tr++,
    ⲆΔΔⵠᐃ: Tr++,
    ᐃⲆΔⵠⲆ: Tr++,
    ⵠⲆᐃⲆΔ: Tr++,
    ᐃⲆΔⵠΔ: Tr++,
    ⵠⵠⲆⵠᐃ: Tr++,
    ⵠᐃⵠⲆᐃ: Tr++,
    ᐃⵠⲆΔ: Tr++,
    ⵠᐃᐃⵠⵠ: Tr++,
    ΔⵠⲆΔΔ: Tr++,
    ⲆⲆᐃᐃᐃ: Tr++,
    ΔΔᐃΔᐃ: Tr++,
    ⵠⵠⵠⵠⲆ: Tr++,
    ᐃⲆΔΔⵠ: Tr++,
    ΔⵠΔⲆⵠ: Tr++,
    ⵠⵠᐃⲆⲆ: Tr++,
    Δᐃⵠᐃⵠ: Tr++,
    ᐃΔⵠⲆΔ: Tr++,
    Δⵠᐃᐃᐃ: Tr++,
    ⲆⵠΔᐃⲆ: Tr++,
    ΔᐃⵠᐃⲆ: Tr++,
    ⵠΔⵠⲆᐃ: Tr++,
    ⵠⲆᐃᐃⲆ: Tr++,
    ⵠⵠⲆⲆΔ: Tr++,
    ΔⵠΔΔⵠ: Tr++,
    ⵠⵠⲆⵠⵠ: Tr++,
    ᐃⵠⵠᐃⵠ: Tr++,
    ᐃⵠᐃⵠΔ: Tr++,
    ⵠᐃΔΔⵠ: Tr++,
    ΔⲆΔᐃⵠ: Tr++,
    ᐃⲆΔᐃᐃ: Tr++,
    ΔⵠⲆⲆⵠ: Tr++,
    ⲆⲆⵠⵠⲆ: Tr++,
    ⲆΔⲆᐃⵠ: Tr++,
    ⵠᐃᐃᐃΔ: Tr++,
    ⲆᐃⲆᐃΔ: Tr++,
    ΔⵠⵠⲆΔ: Tr++,
    ⲆⵠⲆⲆⲆ: Tr++,
    ⲆᐃⵠᐃΔ: Tr++,
    ΔᐃΔⲆᐃ: Tr++,
    ⲆⲆΔᐃΔ: Tr++,
    ΔⲆⵠⲆᐃ: Tr++,
    ΔⵠⵠΔⲆ: Tr++,
    ᐃΔᐃᐃⲆ: Tr++,
    ⵠᐃⲆⵠᐃ: Tr++,
    ⵠⵠⵠᐃΔ: Tr++,
    ⲆⵠⲆΔⲆ: Tr++,
    ⲆᐃᐃⵠⲆ: Tr++,
    ⲆᐃⲆΔⵠ: Tr++,
    ᐃⲆⵠⵠΔ: Tr++,
    ᐃᐃΔᐃᐃ: Tr++,
    ⲆⲆᐃⵠᐃ: Tr++,
    ΔΔⵠⲆⲆ: Tr++,
    Ⲇⵠᐃᐃⵠ: Tr++,
    ⵠΔⲆⵠᐃ: Tr++,
    ⲆⲆⵠΔⲆ: Tr++,
    ⵠⲆⲆⵠΔ: Tr++,
    ⲆⲆⲆᐃᐃ: Tr++,
    ΔΔΔΔⵠ: Tr++,
    ᐃⵠⲆⵠᐃ: Tr++,
    ΔⲆΔⵠⵠ: Tr++,
    ᐃⲆᐃΔⲆ: Tr++,
    ⵠΔᐃᐃⲆ: Tr++,
    ᐃΔΔⵠⲆ: Tr++,
    ⵠⲆᐃⵠΔ: Tr++,
    ⲆⵠⵠⲆⲆ: Tr++,
    ⵠᐃⲆᐃᐃ: Tr++,
    ⵠΔⲆᐃⵠ: Tr++,
    ⵠⲆΔΔⲆ: Tr++,
    ΔΔⲆⲆⵠ: Tr++,
    ⲆⵠᐃⵠΔ: Tr++,
    ⲆΔⲆⲆⲆ: Tr++,
    ⵠⲆⲆᐃᐃ: Tr++,
    ⵠᐃⵠⵠⲆ: Tr++,
    ⵠⲆⲆⵠⵠ: Tr++,
    ΔᐃΔⲆΔ: Tr++,
    ⵠⲆᐃⲆⵠ: Tr++,
    ᐃΔΔΔᐃ: Tr++,
    Ⲇᐃⵠᐃⵠ: Tr++,
    ⵠⲆΔⵠᐃ: Tr++,
    ᐃᐃΔⵠᐃ: Tr++,
    ⵠⵠⵠΔⲆ: Tr++,
    ᐃⲆΔΔⲆ: Tr++,
    ⵠⲆΔⲆⲆ: Tr++,
    ΔⵠⵠⵠⲆ: Tr++,
    ΔΔⲆΔΔ: Tr++,
    ᐃΔⲆᐃ: Tr++,
    ΔΔΔᐃ: Tr++,
    ᐃⲆΔᐃⵠ: Tr++,
    ΔΔΔΔ: Tr++,
    ΔⲆⲆΔ: Tr++,
    ⵠΔⵠΔⲆ: Tr++,
    ᐃⲆᐃΔⵠ: Tr++,
    ᐃⲆⲆⲆⵠ: Tr++,
    ⲆⲆⵠᐃᐃ: Tr++,
    ᐃⲆⲆⲆᐃ: Tr++,
    ΔΔⲆⵠᐃ: Tr++,
    ᐃⵠᐃᐃᐃ: Tr++,
    ᐃⵠΔΔΔ: Tr++,
    ΔⲆⲆⲆ: Tr++,
    ⵠΔⵠⲆΔ: Tr++,
    ⵠᐃⲆΔⵠ: Tr++,
    ⵠΔⵠⲆⵠ: Tr++,
    ⲆΔⵠⲆᐃ: Tr++,
    ⵠⲆΔᐃᐃ: Tr++,
    ᐃᐃᐃΔΔ: Tr++,
    ⵠᐃⲆⵠⲆ: Tr++,
    ᐃΔᐃⵠΔ: Tr++,
    ⲆᐃⵠⲆΔ: Tr++,
    ⵠΔⵠΔⵠ: Tr++,
    ΔⵠⲆⲆⲆ: Tr++,
    ⲆΔΔⲆᐃ: Tr++,
    ᐃⵠⵠΔᐃ: Tr++,
    ᐃᐃΔⲆⵠ: Tr++,
    ⲆΔᐃᐃΔ: Tr++,
    ⲆΔⲆⵠⲆ: Tr++,
    ΔᐃⵠⲆⵠ: Tr++,
    ⵠΔⵠᐃᐃ: Tr++,
    ⵠᐃⵠⲆΔ: Tr++,
    ΔΔᐃⲆΔ: Tr++,
    ⲆⲆᐃⲆΔ: Tr++,
    ⲆⲆΔΔΔ: Tr++,
    ⵠᐃⵠᐃᐃ: Tr++,
    ᐃⵠⲆᐃΔ: Tr++,
    ⲆⲆΔᐃᐃ: Tr++,
    ΔⵠᐃΔᐃ: Tr++,
    ⵠᐃⵠΔΔ: Tr++,
    ΔᐃΔΔΔ: Tr++,
    ⵠᐃΔᐃⲆ: Tr++,
    ⵠΔᐃΔᐃ: Tr++,
    ⲆⲆᐃᐃΔ: Tr++,
    ᐃⲆⲆⵠⲆ: Tr++,
    ⵠⵠⲆᐃΔ: Tr++,
    ΔⲆⵠᐃⵠ: Tr++,
    ⲆᐃⵠⵠⲆ: Tr++,
    ᐃΔΔᐃⵠ: Tr++,
    ᐃⲆΔⲆᐃ: Tr++,
    ΔⵠᐃⵠΔ: Tr++,
    ΔⵠⲆᐃⲆ: Tr++,
    ⲆⲆⲆⵠΔ: Tr++,
    Ⲇᐃᐃⵠᐃ: Tr++,
    ᐃΔⵠⵠⲆ: Tr++,
    ⵠᐃᐃⲆΔ: Tr++,
    ⲆΔⲆⲆᐃ: Tr++,
    ⵠᐃᐃⲆⲆ: Tr++,
    ΔⲆᐃᐃⲆ: Tr++,
    ⵠΔᐃᐃΔ: Tr++,
    ᐃⲆᐃⵠⲆ: Tr++,
    ⵠΔΔᐃⲆ: Tr++,
    ⵠⵠΔⲆⵠ: Tr++,
    ⵠᐃΔΔⲆ: Tr++,
    ΔᐃⲆⵠⵠ: Tr++,
    ΔⲆⲆΔᐃ: Tr++,
    ᐃᐃⲆⲆΔ: Tr++,
    ΔᐃΔΔⵠ: Tr++,
    ⲆⲆΔⵠΔ: Tr++,
    ᐃᐃⲆᐃⲆ: Tr++,
    ⲆⲆⵠⵠΔ: Tr++,
    ΔΔⵠᐃⲆ: Tr++,
    ⲆΔⲆⵠⵠ: Tr++,
    ᐃᐃᐃⲆⵠ: Tr++,
    Δᐃᐃᐃᐃ: Tr++,
    ⲆⵠΔᐃᐃ: Tr++,
    ᐃᐃⵠⵠᐃ: Tr++,
    ᐃⲆⲆⵠΔ: Tr++,
    ⵠΔΔΔΔ: Tr++,
    ⵠΔΔΔⵠ: Tr++,
    ⲆΔⲆΔᐃ: Tr++,
    ΔⲆⵠⵠⲆ: Tr++,
    ᐃΔⵠⲆᐃ: Tr++,
    ᐃⵠΔⵠⲆ: Tr++,
    ᐃⲆᐃⵠΔ: Tr++,
    ⲆⲆΔⵠⲆ: Tr++,
    Δⵠᐃⵠⵠ: Tr++,
    ᐃⲆⲆᐃᐃ: Tr++,
    ⲆⲆⲆΔᐃ: Tr++,
    ᐃⲆΔᐃⲆ: Tr++,
    ΔⵠΔⲆΔ: Tr++,
    ᐃⲆⵠᐃᐃ: Tr++,
    ⵠⵠᐃⵠᐃ: Tr++,
    ⵠΔⲆΔ: Tr++,
    ᐃᐃⲆΔⲆ: Tr++,
    ᐃΔᐃᐃΔ: Tr++,
    ᐃⵠΔᐃⵠ: Tr++,
    ⲆⵠᐃᐃΔ: Tr++,
    ᐃᐃᐃⲆᐃ: Tr++,
    ⲆᐃᐃΔᐃ: Tr++,
    ᐃⵠⵠⵠⲆ: Tr++,
    ΔⲆⵠⲆΔ: Tr++,
    ᐃᐃⵠⲆⵠ: Tr++,
    ΔᐃᐃⵠⲆ: Tr++,
    ᐃⵠᐃⵠⵠ: Tr++,
    ⲆⲆⲆΔⵠ: Tr++,
    ⵠⵠⵠⲆⵠ: Tr++,
    ⵠΔⵠⵠᐃ: Tr++,
    ⵠᐃᐃⲆᐃ: Tr++,
    ᐃΔΔᐃⲆ: Tr++,
    ΔΔᐃⵠΔ: Tr++,
    ⲆᐃⵠⲆⵠ: Tr++,
    ΔᐃⲆⲆᐃ: Tr++,
    ⲆⲆⲆⵠⵠ: Tr++,
    ⲆⵠⵠᐃΔ: Tr++,
    ⵠⲆⵠⵠⵠ: Tr++,
    ᐃⵠᐃⲆⲆ: Tr++,
    ΔΔΔᐃⵠ: Tr++,
    ᐃΔᐃᐃⵠ: Tr++,
    ᐃΔⲆᐃⲆ: Tr++,
    ⲆⵠΔΔⲆ: Tr++,
    ⵠᐃⵠⵠΔ: Tr++,
    ᐃᐃⲆⵠᐃ: Tr++,
    ⵠᐃᐃᐃⵠ: Tr++,
    ⵠΔⲆⲆⵠ: Tr++,
    ᐃⲆⲆΔΔ: Tr++,
    ΔᐃᐃᐃⵠᐃΔ: Tr++,
    ⵠⲆⵠⵠⵠⵠⲆ: Tr++,
    ⲆⲆⵠΔⵠ: Tr++,
    ᐃᐃⲆⲆⲆ: Tr++,
    ΔⲆⲆⲆⲆ: Tr++,
    ⲆΔΔᐃⵠ: Tr++
  };
  var cs = {
    ΔⵠᐃⲆΔ: Ka,
    ⵠᐃⵠⵠ: 1,
    ⲆᐃⲆⵠΔ: 5,
    ᐃⵠΔΔⵠ: 2,
    ⵠⵠⵠⵠΔ: 0,
    ⵠᐃΔΔΔ: ea
  };
  const ds = Sk;
  var es = [];
  es[bs.ΔΔΔᐃ] = {
    name: "Wood",
    Ⲇⵠ: Ur.ΔⲆᐃⵠⲆⲆⲆ,
    ᐃᐃᐃᐃ: _a,
    ⵠⲆᐃᐃ: qn
  };
  const gs = S;
  es[bs.ᐃΔⲆᐃ] = {
    name: "Stone",
    Ⲇⵠ: Ur.ᐃᐃⵠⵠⵠⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ur
  };
  const is = fq;
  const fs = ba;
  const ls = le;
  es[bs.ΔΔΔΔ] = {
    name: "Gold",
    Ⲇⵠ: Ur.ⲆⲆΔᐃΔⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Cn
  };
  const ms = Fj;
  es[bs.ΔⲆⲆΔ] = {
    name: "Diamond",
    Ⲇⵠ: Ur.ᐃΔΔᐃΔΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const ns = J;
  const os = la;
  es[bs.ΔⲆⲆⲆ] = {
    name: "Amethyst",
    Ⲇⵠ: Ur.ⵠⵠⲆΔⵠⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ms
  };
  const ps = $r;
  es[bs.ᐃΔⲆᐃΔ] = {
    name: "Rabbit fur",
    Ⲇⵠ: Ur.ⵠᐃⵠⵠⵠⵠᐃ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: 0
  };
  const ks = Tj;
  es[bs.ΔⲆⲆΔᐃ] = {
    name: "Wolf fur",
    Ⲇⵠ: Ur.ΔᐃⲆⵠΔⵠⲆ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: 0
  };
  const rs = Fk;
  es[bs.ⲆⲆⵠΔⵠ] = {
    name: "Boar fur",
    Ⲇⵠ: Ur.ⲆⲆⵠΔⵠᐃⲆ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: 0
  };
  const ss = ls;
  es[bs.Ⲇᐃⵠᐃⵠ] = {
    name: "Firefly",
    Ⲇⵠ: Ur.ⵠⲆⵠⲆΔⲆᐃ,
    ᐃᐃᐃᐃ: qk,
    ⵠⲆᐃᐃ: qn
  };
  const ts = Bk;
  es[bs.ⵠⲆΔⵠᐃ] = {
    name: "Wood arrow",
    Ⲇⵠ: Ur.ⵠᐃⲆⵠⵠΔⵠ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: 1
  };
  var us = kj.console;
  us.log = us.info = us.error = us.warn = us.debug = us.ⵠⲆⲆⲆⵠⵠⲆⵠΔ = us.trace = us.time = us.timeEnd = function () { };
  es[bs.ᐃᐃΔⵠᐃ] = {
    name: "Stone arrow",
    Ⲇⵠ: Ur.ⲆⵠⵠΔⲆᐃⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: aa
  };
  const vs = Aq;
  es[bs.ⵠⵠⵠΔⲆ] = {
    name: "Gold arrow",
    Ⲇⵠ: Ur.ΔᐃΔⵠⲆᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ok
  };
  const ws = no;
  const xs = Kj;
  es[bs.ᐃⲆΔΔⲆ] = {
    name: "Diamond arrow",
    Ⲇⵠ: Ur.ΔⵠᐃⵠΔⲆΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Zq
  };
  es[bs.ⵠⲆΔⲆⲆ] = {
    name: "Amethyst arrow",
    Ⲇⵠ: Ur.ᐃⵠΔⲆᐃⵠΔ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: Oj
  };
  const ys = le;
  es[bs.ΔⵠⵠⵠⲆ] = {
    name: "Reidite arrow",
    Ⲇⵠ: Ur.ᐃΔⲆᐃᐃΔⵠ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: aa
  };
  const zs = jq;
  es[bs.ΔΔⲆΔΔ] = {
    name: "Dragon arrow",
    Ⲇⵠ: Ur.ⵠᐃⲆⵠⲆΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆⲆΔᐃᐃ] = {
    name: "Winter fur",
    Ⲇⵠ: Ur.ⲆᐃⲆᐃⲆᐃⲆ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: ne
  };
  es[bs.ⲆΔΔᐃⵠ] = {
    name: "Fur mammoth",
    Ⲇⵠ: Ur.ΔⲆⵠⵠΔⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: _a
  };
  const As = zs;
  es[bs.ⲆⲆⲆⵠΔ] = {
    name: "Web",
    Ⲇⵠ: Ur.ᐃⲆⲆⵠᐃⵠᐃ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆⲆⵠᐃᐃ] = {
    name: "Meat",
    Ⲇⵠ: Ur.ᐃⲆΔⲆⲆᐃⵠ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: ms
  };
  const Bs = fa;
  es[bs.ⲆΔⲆⵠⲆ] = {
    name: "Fish",
    Ⲇⵠ: Ur.ⲆᐃⲆΔΔᐃⵠ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: qk
  };
  es[bs.ᐃΔᐃⵠΔ] = {
    name: "Kraken skin",
    Ⲇⵠ: Ur.ⵠⵠⵠΔΔⲆⲆ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: ms
  };
  const Cs = Mn;
  es[bs.ⵠΔⵠᐃᐃ] = {
    name: "Piranha scales",
    Ⲇⵠ: Ur.ᐃⲆΔᐃᐃΔΔ,
    ᐃᐃᐃᐃ: ms,
    ⵠⲆᐃᐃ: Gr
  };
  es[bs.ⲆⲆᐃⲆΔ] = {
    name: "Ice",
    Ⲇⵠ: Ur.ᐃᐃᐃⲆⵠⲆⲆ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: tj
  };
  const Ds = nq;
  es[bs.ⵠⲆΔᐃᐃ] = {
    name: "Sand",
    Ⲇⵠ: Ur.ΔᐃΔΔᐃᐃΔ,
    ᐃᐃᐃᐃ: Gr,
    ⵠⲆᐃᐃ: Cq
  };
  es[bs.ⵠᐃⵠⲆΔ] = {
    name: "Dirt",
    Ⲇⵠ: Ur.ⲆⵠΔⵠΔΔΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const js = nq;
  es[bs.ᐃⲆΔᐃⵠ] = {
    name: "Berrie",
    Ⲇⵠ: Ur.ⵠᐃⵠᐃⵠΔΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ne
  };
  es[bs.ⵠΔⵠΔⵠ] = {
    name: "Flour",
    Ⲇⵠ: Ur.ᐃⵠᐃⵠΔⵠΔ,
    ᐃᐃᐃᐃ: qk,
    ⵠⲆᐃᐃ: _a
  };
  const Es = bq;
  const Fs = f;
  es[bs.ᐃⵠⵠΔᐃ] = {
    name: "Flour",
    Ⲇⵠ: Ur.ⵠᐃⵠⵠⲆΔᐃ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃᐃⲆᐃⲆ] = {
    name: "Special fur peasant",
    Ⲇⵠ: Ur.ⲆⵠⲆⲆᐃⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ne
  };
  es[bs.ⲆⲆⵠⵠΔ] = {
    name: "Special fur hood",
    Ⲇⵠ: Ur.ΔΔΔⲆⵠΔⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: tj
  };
  es[bs.ⲆΔⲆΔᐃ] = {
    name: "Pumpkin",
    Ⲇⵠ: Ur.ΔᐃⵠᐃᐃΔΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: _a
  };
  const Gs = zs;
  const Is = S;
  const qs = zr;
  es[bs.ᐃⵠΔⵠⲆ] = {
    name: "Garlic",
    Ⲇⵠ: Ur.ⲆⵠⵠΔΔΔΔ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: 0
  };
  const Hs = Ho;
  es[bs.ⲆⲆΔⵠⲆ] = {
    name: "Thornbush",
    Ⲇⵠ: Ur.ⵠⵠᐃᐃⲆⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Gr
  };
  const Js = _q;
  const Ls = Wn;
  es[bs.ᐃⵠΔᐃⵠ] = {
    name: "Carrot",
    Ⲇⵠ: Ur.ᐃⲆⲆⵠᐃᐃᐃ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: Cn
  };
  es[bs.ᐃᐃᐃⲆᐃ] = {
    name: "Tomato",
    Ⲇⵠ: Ur.ᐃⵠᐃΔⵠⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ur
  };
  es[bs.ᐃⵠⵠⵠⲆ] = {
    name: "Watermelon",
    Ⲇⵠ: Ur.ᐃⲆⲆⲆΔⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const Ks = wa;
  const Ms = Tk;
  es[bs.ᐃᐃⵠⲆⵠ] = {
    name: "Aloe Vera",
    Ⲇⵠ: Ur.ᐃᐃⲆⵠⵠⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ms
  };
  es[bs.ⲆⲆⲆⵠⵠ] = {
    name: "Penguin Feather",
    Ⲇⵠ: Ur.ΔᐃΔⵠⲆ,
    ᐃᐃᐃᐃ: Gr,
    ⵠⲆᐃᐃ: qk
  };
  const Ns = uq;
  es[bs.ᐃᐃⲆⵠᐃ] = {
    name: "Hawk Feather",
    Ⲇⵠ: Ur.ⵠᐃⲆⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const Os = Jo;
  es[bs.ⵠᐃᐃᐃⵠ] = {
    name: "Vulture Feather",
    Ⲇⵠ: Ur.ᐃⵠᐃΔⲆ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: 0
  };
  const Ps = Ao;
  es[bs.ⵠΔⲆⲆⵠ] = {
    name: "Cactus",
    Ⲇⵠ: Ur.ⲆⲆⵠⲆΔⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Cn
  };
  es[bs.ⵠⲆⵠⵠⵠⵠⲆ] = {
    name: "Cactus",
    Ⲇⵠ: Ur.ΔⵠⲆⵠΔⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const eh = Jj;
  es[bs.ΔᐃᐃᐃⵠᐃΔ] = {
    name: "Pitchfork Part",
    Ⲇⵠ: Ur.ᐃΔⲆᐃⵠⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const ih = pj;
  es[bs.ᐃᐃⲆⲆⲆ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ⵠΔΔᐃΔᐃⵠ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃⲆⲆΔΔ] = {
    name: "Emerald",
    Ⲇⵠ: Ur.ᐃⲆⲆⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ur
  };
  es[bs.ⲆⵠΔᐃⲆ] = {
    name: "Christmas Hat",
    Ⲇⵠ: Ur.ΔⵠⲆᐃᐃⵠⵠ,
    ⵠⲆᐃᐃ: 0
  };
  const th = Oq;
  const nh = z;
  es[bs.ΔᐃⵠᐃⲆ] = {
    name: "Elf Hat",
    Ⲇⵠ: Ur.ΔΔⲆᐃⲆⲆⵠ,
    ⵠⲆᐃᐃ: 0
  };
  const oh = ps;
  const rh = Lo;
  const ah = rs;
  const sh = zk;
  const hh = Kk;
  es[bs.ⵠⵠᐃⵠᐃ] = {
    name: "Garland",
    Ⲇⵠ: Ur.ⲆᐃⵠⲆΔⲆⵠ,
    ⵠⲆᐃᐃ: 0,
    ᐃᐃᐃᐃ: 0
  };
  es[bs.ᐃⲆⵠᐃᐃ] = {
    name: "Candy",
    Ⲇⵠ: Ur.ᐃᐃⵠΔᐃᐃⵠ,
    ⵠⲆᐃᐃ: 0
  };
  const lh = E;
  es[bs.ΔⵠΔⲆΔ] = {
    name: "Sugar Cane",
    Ⲇⵠ: Ur.ᐃⲆⵠⲆⵠⲆΔ,
    ⵠⲆᐃᐃ: _a
  };
  es[bs.ⲆΔΔΔⲆ] = {
    name: "Pirate Sword",
    Ⲇⵠ: Ur.ⵠᐃΔⵠᐃⲆΔ,
    ᐃᐃᐃᐃ: qn,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃⲆⲆᐃᐃ] = {
    name: "Crab Stick",
    Ⲇⵠ: Ur.ΔⵠⵠΔᐃⵠⵠ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: _a
  };
  const gh = xj;
  const uh = _a;
  const bh = Js;
  es[bs.ⵠΔⲆΔ] = {
    name: "Reidite",
    Ⲇⵠ: Ur.ⲆᐃⵠⵠΔⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: uh
  };
  es[bs.ᐃᐃⲆΔⲆ] = {
    name: "Flame",
    Ⲇⵠ: Ur.ΔΔⲆⵠⵠⲆΔ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: Gr
  };
  es[bs.ⵠΔⵠΔⲆ] = {
    name: "Campfire",
    Ⲇⵠ: Ur.ⲆⵠⲆΔⵠⵠⲆ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: 1
  };
  const vh = Tk;
  const dh = Hq;
  es[bs.ᐃⲆΔᐃⲆ] = {
    name: "Bed",
    Ⲇⵠ: Ur.ⵠⲆⲆΔⲆⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: As
  };
  es[bs.ᐃⲆᐃΔⵠ] = {
    name: "Workbench",
    Ⲇⵠ: Ur.ΔΔᐃΔⵠⲆⲆ,
    ᐃᐃᐃᐃ: _a,
    ⵠⲆᐃᐃ: ie
  };
  const ch = ea;
  const mh = mk;
  es[bs.ᐃᐃᐃΔⵠ] = {
    name: "Stone sword",
    Ⲇⵠ: Ur.ⵠᐃᐃΔΔⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃᐃⲆⵠΔ] = {
    name: "Stone pick",
    Ⲇⵠ: Ur.ⲆΔⵠⲆΔᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃⲆⲆⲆⵠ] = {
    name: "Berries bush",
    Ⲇⵠ: Ur.ⵠⵠᐃⲆⲆⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆΔᐃⲆⵠ] = {
    name: "Gold pick",
    Ⲇⵠ: Ur.ΔΔᐃⵠⵠⲆΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Eo
  };
  es[bs.ΔΔᐃᐃᐃ] = {
    name: "Diamond pick",
    Ⲇⵠ: Ur.ᐃⲆⵠΔᐃⲆΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ok
  };
  es[bs.ⲆᐃⲆᐃΔ] = {
    name: "Wood sword",
    Ⲇⵠ: Ur.ⵠⲆⵠΔⲆΔⵠ,
    ᐃᐃᐃᐃ: qn,
    ⵠⲆᐃᐃ: j
  };
  const ph = ta;
  const Ch = ea;
  const Th = Uk;
  es[bs.ΔᐃᐃΔⲆ] = {
    name: "Gold sword",
    Ⲇⵠ: Ur.ᐃΔⲆⵠΔΔᐃ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠΔΔⲆᐃ] = {
    name: "Diamond sword",
    Ⲇⵠ: Ur.ᐃⵠⵠⵠⲆⵠᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const fh = Wn;
  es[bs.ⵠᐃⲆⲆⲆ] = {
    name: "Wood pick",
    Ⲇⵠ: Ur.ᐃⲆΔΔᐃΔᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.Ⲇᐃᐃⵠᐃ] = {
    name: "Wood wall",
    Ⲇⵠ: Ur.ᐃⵠᐃΔΔⵠᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const zh = Wk;
  const yh = nn;
  es[bs.ΔⵠⲆᐃⲆ] = {
    name: "Wood spike",
    Ⲇⵠ: Ur.ⵠΔᐃᐃⵠⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ᐃⲆⲆⲆᐃ] = {
    name: "Cooked meat",
    Ⲇⵠ: Ur.ⲆⲆΔⲆΔΔⵠ,
    ᐃᐃᐃᐃ: qn,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ΔΔⲆⵠᐃ] = {
    name: "Big campfire",
    Ⲇⵠ: Ur.ᐃⵠΔⲆⲆΔⵠ,
    ᐃᐃᐃᐃ: Gr,
    ⵠⲆᐃᐃ: Ok
  };
  const wh = Vi;
  es[bs.Δⵠᐃⵠⵠ] = {
    name: "Bandage",
    Ⲇⵠ: Ur.ⲆⵠⲆⲆⲆᐃⲆ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: ie
  };
  const Ph = ch;
  es[bs.ᐃΔⵠⵠⲆ] = {
    name: "Stone wall",
    Ⲇⵠ: Ur.ᐃᐃΔⵠⵠᐃⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Gs
  };
  const Ah = w;
  es[bs.ⵠᐃᐃⲆΔ] = {
    name: "Gold wall",
    Ⲇⵠ: Ur.ⵠⲆΔⵠᐃⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const kh = Js;
  const xh = Os;
  const Jh = xs;
  es[bs.ⲆΔⲆⲆᐃ] = {
    name: "Diamond wall",
    Ⲇⵠ: Ur.ᐃᐃΔⲆΔᐃⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Mh = ra;
  const Bh = Fi;
  const Dh = fq;
  const Ih = Fj;
  const Eh = So;
  const Sh = d;
  es[bs.ⵠᐃᐃⲆⲆ] = {
    name: "Wood door",
    Ⲇⵠ: Ur.ΔⲆΔᐃⲆⵠΔ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: Eo
  };
  es[bs.ΔⲆᐃᐃⲆ] = {
    name: "Chest",
    Ⲇⵠ: Ur.ⵠΔⵠⲆⲆᐃⲆ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: 1
  };
  const Qh = io;
  es[bs.ⵠΔᐃᐃΔ] = {
    name: "Stone spike",
    Ⲇⵠ: Ur.ⵠⵠᐃᐃᐃⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  (function a() {
    const b = {
      ⲆΔΔᐃⵠⲆᐃⲆⵠ: 0
    };
    let c = 0;
    for (let a in b) {
      c = a;
    }
    const d = [];
    for (let a = 0; a < 12; a++) {
      d.push(kj.Math.floor(1 + kj.Math.random() * 10));
    }
    let f = "for (let " + c + " = 0 ; " + c + " < " + d[0] + " ; " + c + "++) {";
    for (let a = 0; a < d[1]; a++) {
      f += d[a] + ";debugger;";
    }
    for (let a = 0; a < d[2]; a++) {
      f += "debugger;";
    }
    f += "}";
    const e = new kj.Function(f);
    kj.setTimeout(a, 10000);
    e();
  })();
  es[bs.ᐃⲆᐃⵠⲆ] = {
    name: "Gold spike",
    Ⲇⵠ: Ur.ⲆᐃⲆⲆᐃⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: jq
  };
  es[bs.ⵠΔΔᐃⲆ] = {
    name: "Diamond spike",
    Ⲇⵠ: Ur.ΔᐃᐃΔᐃⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠⵠΔⲆⵠ] = {
    name: "Stone door",
    Ⲇⵠ: Ur.ΔⵠΔⲆⵠⵠⵠ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠᐃΔΔⲆ] = {
    name: "Gold door",
    Ⲇⵠ: Ur.ⵠΔⵠΔⵠⵠⲆ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ΔᐃⲆⵠⵠ] = {
    name: "Diamond door",
    Ⲇⵠ: Ur.ⲆⵠᐃᐃⵠΔΔ,
    ᐃᐃᐃᐃ: ms,
    ⵠⲆᐃᐃ: 1
  };
  const _h = rh;
  es[bs.ⵠⲆⲆⵠᐃ] = {
    name: "Chapka",
    Ⲇⵠ: Ur.ᐃΔᐃⵠⲆⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ie
  };
  es[bs.ⲆᐃΔΔΔ] = {
    name: "Big Chapka",
    Ⲇⵠ: Ur.ⲆⵠⵠⵠⵠⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠⲆΔΔᐃ] = {
    name: "Wood spear",
    Ⲇⵠ: Ur.ΔᐃⲆᐃᐃΔⵠ,
    ᐃᐃᐃᐃ: qn,
    ⵠⲆᐃᐃ: 1
  };
  const Fh = Eo;
  es[bs.ΔΔⵠⵠⵠ] = {
    name: "Stone spear",
    Ⲇⵠ: Ur.ᐃᐃⲆΔΔΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: jq
  };
  const Rh = bk;
  const Gh = ps;
  es[bs.ΔⵠΔΔΔ] = {
    name: "Gold spear",
    Ⲇⵠ: Ur.ⵠΔⵠⲆᐃΔᐃ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ΔΔᐃᐃⲆ] = {
    name: "Diamond spear",
    Ⲇⵠ: Ur.ΔᐃⵠⵠΔⵠᐃ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: jq
  };
  es[bs.ⵠᐃΔⲆⵠ] = {
    name: "Dragon spear",
    Ⲇⵠ: Ur.ᐃΔᐃᐃⲆⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: qk
  };
  es[bs.ΔⲆΔᐃⲆ] = {
    name: "Dragon spear",
    Ⲇⵠ: Ur.ΔᐃᐃᐃΔⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ΔΔⵠᐃⵠ] = {
    name: "Crab spear",
    Ⲇⵠ: Ur.ᐃᐃⲆᐃΔⵠΔ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: Ej
  };
  es[bs.ⲆⲆⲆΔᐃ] = {
    name: "Crab loot",
    Ⲇⵠ: Ur.ⵠⵠᐃⲆΔΔΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃⵠᐃᐃᐃ] = {
    name: "Furnace",
    Ⲇⵠ: Ur.ΔⵠⵠⵠⲆⵠⲆ,
    ᐃᐃᐃᐃ: qk,
    ⵠⲆᐃᐃ: Eo
  };
  es[bs.ⲆΔΔⵠᐃ] = {
    name: "Explorer hat",
    Ⲇⵠ: Ur.ⵠⲆᐃΔΔΔΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const jh = m;
  const Wh = hh;
  es[bs.ᐃⲆΔⵠⲆ] = {
    name: "Pirate hat",
    Ⲇⵠ: Ur.ΔⵠᐃⵠⵠΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Fh
  };
  const Lh = uq;
  es[bs.ⲆⵠⵠⲆⲆ] = {
    name: "Flower hat",
    Ⲇⵠ: Ur.ᐃⵠⲆᐃⲆΔΔ,
    ᐃᐃᐃᐃ: _a,
    ⵠⲆᐃᐃ: 1
  };
  const Oh = J;
  es[bs.ⵠᐃⲆᐃᐃ] = {
    name: "Fur hat",
    Ⲇⵠ: Ur.ᐃⵠⲆᐃΔᐃΔ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ΔⵠⵠⲆΔ] = {
    name: "Wood helmet",
    Ⲇⵠ: Ur.ⲆᐃⲆⵠⵠⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: j
  };
  const Nh = vh;
  const qh = R;
  const Hh = is;
  es[bs.ⵠⲆᐃⲆΔ] = {
    name: "Stone helmet",
    Ⲇⵠ: Ur.ⵠⵠΔᐃⵠⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ok
  };
  es[bs.ᐃⲆΔⵠΔ] = {
    name: "Gold helmet",
    Ⲇⵠ: Ur.ᐃᐃⵠⵠΔⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ej
  };
  es[bs.ⵠⵠⲆⵠᐃ] = {
    name: "Diamond helmet",
    Ⲇⵠ: Ur.ⵠⲆⲆΔΔΔᐃ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: Gs
  };
  const Uh = ia;
  const Yh = Nk;
  const Kh = en;
  es[bs.ⵠᐃⵠⲆᐃ] = {
    name: "Book",
    Ⲇⵠ: Ur.ⲆⵠⵠΔⵠᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Gs
  };
  es[bs.ᐃⵠΔΔΔ] = {
    name: "Paper",
    Ⲇⵠ: Ur.ⵠΔⲆⲆᐃⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃⵠⲆΔ] = {
    name: "Bag",
    Ⲇⵠ: Ur.ᐃΔᐃⵠΔⲆᐃ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: 1
  };
  const Vh = Os;
  es[bs.ⵠᐃᐃⵠⵠ] = {
    name: "Amethyst sword",
    Ⲇⵠ: Ur.ᐃΔⲆΔΔΔᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ΔⵠⲆΔΔ] = {
    name: "Amethyst pick",
    Ⲇⵠ: Ur.ᐃⲆΔΔᐃⵠⵠ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: aa
  };
  es[bs.ΔΔᐃΔᐃ] = {
    name: "Amethyst spear",
    Ⲇⵠ: Ur.ΔᐃⵠΔΔⲆᐃ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ᐃⲆΔΔⵠ] = {
    name: "Stone hammer",
    Ⲇⵠ: Ur.ⵠᐃΔⲆⵠⵠⲆ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ΔⵠΔⲆⵠ] = {
    name: "Gold hammer",
    Ⲇⵠ: Ur.ⲆⲆΔᐃⲆⵠⵠ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠⵠᐃⲆⲆ] = {
    name: "Diamond hammer",
    Ⲇⵠ: Ur.ⲆᐃΔᐃⵠᐃⵠ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: 1
  };
  const Zh = gq;
  const Xh = re;
  es[bs.Δᐃⵠᐃⵠ] = {
    name: "Amethyst hammer",
    Ⲇⵠ: Ur.ⵠΔᐃⵠⲆΔⵠ,
    ᐃᐃᐃᐃ: qk,
    ⵠⲆᐃᐃ: 1
  };
  const $h = Lh;
  es[bs.ᐃΔⵠⲆΔ] = {
    name: "Reidite hammer",
    Ⲇⵠ: Ur.ΔⵠΔΔᐃΔⵠ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠΔⵠⲆΔ] = {
    name: "Amethyst wall",
    Ⲇⵠ: Ur.ᐃᐃᐃⲆⲆᐃⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const el = _h;
  es[bs.ⵠᐃⲆΔⵠ] = {
    name: "Amethyst spike",
    Ⲇⵠ: Ur.ⵠⵠΔⲆⲆⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const il = Vq;
  const tl = Mn;
  es[bs.ⵠΔⵠⲆⵠ] = {
    name: "Amethyst door",
    Ⲇⵠ: Ur.ⲆᐃⵠⵠΔᐃᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Oj
  };
  es[bs.Δⵠᐃᐃᐃ] = {
    name: "Cap & scarf",
    Ⲇⵠ: Ur.ⵠΔⲆΔⵠᐃΔ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: Oj
  };
  es[bs.ΔⵠᐃΔᐃ] = {
    name: "Blue cord",
    Ⲇⵠ: Ur.ΔΔⲆᐃΔⲆΔ,
    ᐃᐃᐃᐃ: _a,
    ⵠⲆᐃᐃ: 0
  };
  const nl = $j;
  const ol = co;
  es[bs.ⵠᐃⵠΔΔ] = {
    name: "Lock",
    Ⲇⵠ: Ur.ⲆΔⵠⵠⲆⲆΔ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠΔᐃΔᐃ] = {
    name: "Resurrection",
    Ⲇⵠ: Ur.ⲆΔᐃᐃⲆΔⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: zs
  };
  const rl = Ih;
  es[bs.ᐃⲆΔⲆᐃ] = {
    name: "Lockpick",
    Ⲇⵠ: Ur.ΔΔΔⵠⲆⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ΔⵠᐃⵠΔ] = {
    name: "Totem",
    Ⲇⵠ: Ur.ⵠΔⵠⲆⵠⲆⵠ,
    ᐃᐃᐃᐃ: qn,
    ⵠⲆᐃᐃ: aa
  };
  es[bs.ⵠΔⵠⲆᐃ] = {
    name: "Amethyst helmet",
    Ⲇⵠ: Ur.ⲆⵠΔΔⵠᐃⵠ,
    ᐃᐃᐃᐃ: uh,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠⵠⲆⲆΔ] = {
    name: "Super hammer",
    Ⲇⵠ: Ur.ⲆⲆΔᐃΔΔΔ,
    ᐃᐃᐃᐃ: qn,
    ⵠⲆᐃᐃ: Fh
  };
  const al = io;
  const sl = I;
  es[bs.ⲆΔⵠⲆᐃ] = {
    name: "Bridge",
    Ⲇⵠ: Ur.ⵠⲆᐃΔⵠΔᐃ,
    ᐃᐃᐃᐃ: 1,
    ⵠⲆᐃᐃ: zs
  };
  es[bs.ΔᐃⲆⲆᐃ] = {
    name: "Wood Tower",
    Ⲇⵠ: Ur.ΔᐃⲆᐃⲆⵠΔ,
    ᐃᐃᐃᐃ: j,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃᐃᐃΔΔ] = {
    name: "Bottle full",
    Ⲇⵠ: Ur.ΔΔⵠΔⵠΔⲆ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: Ih
  };
  es[bs.ⵠᐃⲆⵠⲆ] = {
    name: "Bottle empty",
    Ⲇⵠ: Ur.ⲆⵠⲆᐃΔⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ih
  };
  const hl = Vn;
  es[bs.ΔⵠΔΔⵠ] = {
    name: "Stone shovel",
    Ⲇⵠ: Ur.ⲆᐃΔᐃⵠⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: zs
  };
  es[bs.ⲆᐃⵠⲆΔ] = {
    name: "Watering can",
    Ⲇⵠ: Ur.ⵠⲆᐃᐃΔⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const ll = or;
  const gl = hn;
  const ul = vn;
  const bl = Jk;
  es[bs.ΔⵠⲆⲆⲆ] = {
    name: "Wheat",
    Ⲇⵠ: Ur.ⲆⲆᐃᐃᐃⵠⲆ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆΔΔⲆᐃ] = {
    name: "Cookie",
    Ⲇⵠ: Ur.ⲆⵠⲆᐃⲆᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: rl
  };
  es[bs.ᐃᐃΔⲆⵠ] = {
    name: "Windmill",
    Ⲇⵠ: Ur.ⵠⲆᐃᐃᐃⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ej
  };
  const vl = hr;
  es[bs.ⵠⵠⲆⵠⵠ] = {
    name: "Super diving suit",
    Ⲇⵠ: Ur.ⵠⲆⵠΔᐃᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ie
  };
  es[bs.ᐃⵠⵠᐃⵠ] = {
    name: "Diving mask",
    Ⲇⵠ: Ur.ᐃᐃΔΔΔΔⵠ,
    ᐃᐃᐃᐃ: rl,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ᐃⵠᐃⵠΔ] = {
    name: "Watering can full",
    Ⲇⵠ: Ur.ⲆⲆⲆᐃΔⵠⲆ,
    ᐃᐃᐃᐃ: qk,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆΔᐃᐃΔ] = {
    name: "Cake",
    Ⲇⵠ: Ur.ᐃⲆⵠⲆⲆᐃⲆ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: Fj
  };
  es[bs.ΔᐃⵠⲆⵠ] = {
    name: "Foodfish cooked",
    Ⲇⵠ: Ur.ⵠⵠⲆⵠⵠⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ms
  };
  es[bs.ΔΔᐃⲆΔ] = {
    name: "Plot",
    Ⲇⵠ: Ur.ⵠⵠⲆⲆⲆᐃⵠ,
    ᐃᐃᐃᐃ: 1,
    ⵠⲆᐃᐃ: Ej
  };
  const dl = Hh;
  es[bs.ⲆⲆΔΔΔ] = {
    name: "Bread",
    Ⲇⵠ: Ur.ΔⲆΔⵠᐃΔᐃ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⵠΔⲆⵠⲆⵠᐃ] = {
    name: "Bottle full (with ice)",
    Ⲇⵠ: Ur.ⵠΔⵠΔᐃΔᐃᐃΔ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: aa
  };
  const cl = Ui;
  es[bs.ᐃⵠΔⵠⵠᐃΔ] = {
    name: "Bottle full (with well)",
    Ⲇⵠ: Ur.ⲆⲆΔΔΔΔⵠᐃⲆ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: Ok
  };
  const ml = Lr;
  const pl = Gh;
  es[bs.ⵠᐃΔΔⵠ] = {
    name: "Gold shovel",
    Ⲇⵠ: Ur.ᐃⲆⲆⵠⵠΔΔ,
    ᐃᐃᐃᐃ: Gr,
    ⵠⲆᐃᐃ: Oj
  };
  es[bs.ΔⲆΔᐃⵠ] = {
    name: "Diamond shovel",
    Ⲇⵠ: Ur.ᐃⲆⲆᐃᐃⵠⲆ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: jq
  };
  es[bs.ᐃⲆΔᐃᐃ] = {
    name: "Amethyst shovel",
    Ⲇⵠ: Ur.ᐃᐃⲆⵠᐃⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ej
  };
  es[bs.ⲆΔⲆᐃⵠ] = {
    name: "Spanner",
    Ⲇⵠ: Ur.ΔⵠᐃᐃⲆⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Cl = wr;
  es[bs.ⵠᐃᐃᐃΔ] = {
    name: "Machete",
    Ⲇⵠ: Ur.ΔᐃΔⲆᐃΔⲆ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠᐃⵠᐃᐃ] = {
    name: "Bread oven",
    Ⲇⵠ: Ur.ΔᐃΔᐃⲆΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃⵠⲆᐃΔ] = {
    name: "Sandwich",
    Ⲇⵠ: Ur.ᐃᐃⵠᐃΔⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆⵠⲆⲆⲆ] = {
    name: "Dragon helmet",
    Ⲇⵠ: Ur.ⵠⵠⵠⵠⵠⵠᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: _a
  };
  es[bs.ⲆᐃⵠᐃΔ] = {
    name: "Dragon helmet",
    Ⲇⵠ: Ur.ⵠⵠΔⲆⲆΔⵠ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: 0
  };
  const Tl = gs;
  const fl = ml;
  const zl = Pj;
  const yl = rh;
  es[bs.ⵠⲆΔΔⲆ] = {
    name: "Witch",
    Ⲇⵠ: Ur.ⵠⵠΔⲆⵠᐃᐃ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: ur
  };
  es[bs.ΔΔⲆⲆⵠ] = {
    name: "Nimbus",
    Ⲇⵠ: Ur.ΔⲆⵠᐃⲆΔⵠ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: Cq
  };
  const wl = os;
  es[bs.ⲆⵠᐃⵠΔ] = {
    name: "Wand1",
    Ⲇⵠ: Ur.ᐃⵠΔⵠⲆΔⲆ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: tj
  };
  const Pl = Vi;
  es[bs.ⲆΔⲆⲆⲆ] = {
    name: "Wand2",
    Ⲇⵠ: Ur.ⲆⲆⵠⲆΔΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: qn
  };
  es[bs.ⲆⲆΔᐃΔ] = {
    name: "Dragon sword",
    Ⲇⵠ: Ur.ⲆᐃΔⲆⵠᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Cq
  };
  const Al = jq;
  es[bs.ΔⲆⵠⲆᐃ] = {
    name: "Dragon sword",
    Ⲇⵠ: Ur.ΔΔⲆⲆᐃⵠΔ,
    ᐃᐃᐃᐃ: vq,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃⲆⵠⵠΔ] = {
    name: "Wood shield",
    Ⲇⵠ: Ur.ⵠⲆΔᐃⵠⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃᐃΔᐃᐃ] = {
    name: "Stone shield",
    Ⲇⵠ: Ur.ΔⲆⵠⵠⵠᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: jq
  };
  es[bs.ⲆⲆᐃⵠᐃ] = {
    name: "Gold shield",
    Ⲇⵠ: Ur.ⲆⲆⵠΔⲆΔⵠ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: zs
  };
  const kl = ds;
  const xl = Eq;
  const Jl = Ls;
  es[bs.ΔΔⵠⲆⲆ] = {
    name: "Diamond shield",
    Ⲇⵠ: Ur.ΔⲆΔᐃᐃΔⲆ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: As
  };
  const Ml = wj;
  const Bl = Gh;
  es[bs.Ⲇⵠᐃᐃⵠ] = {
    name: "Amethyst shield",
    Ⲇⵠ: Ur.ᐃⲆⲆⵠΔᐃⲆ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: Gs
  };
  es[bs.ⵠΔⲆⵠᐃ] = {
    name: "Reidite shield",
    Ⲇⵠ: Ur.ΔⲆΔⵠΔΔΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠⲆⲆᐃᐃ] = {
    name: "Wood axe",
    Ⲇⵠ: Ur.ⵠⲆΔᐃΔΔΔ,
    ᐃᐃᐃᐃ: ms,
    ⵠⲆᐃᐃ: ie
  };
  es[bs.ⵠᐃⵠⵠⲆ] = {
    name: "Stone axe",
    Ⲇⵠ: Ur.ⵠΔⵠⵠⵠΔⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Fh
  };
  const Dl = Rr;
  es[bs.ⵠⲆⲆⵠⵠ] = {
    name: "Gold axe",
    Ⲇⵠ: Ur.ΔᐃⵠᐃΔⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: j
  };
  const Il = $q;
  const El = ih;
  const Sl = cn;
  es[bs.ΔᐃΔⲆΔ] = {
    name: "Diamond axe",
    Ⲇⵠ: Ur.ΔⲆΔⲆΔⲆⲆ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: Oj
  };
  const Ql = vn;
  es[bs.ⵠⲆᐃⲆⵠ] = {
    name: "Amethyst axe",
    Ⲇⵠ: Ur.ⵠⲆⵠⲆⲆⵠⵠ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃΔΔΔᐃ] = {
    name: "Reidite axe",
    Ⲇⵠ: Ur.ΔᐃΔⵠᐃⲆᐃ,
    ᐃᐃᐃᐃ: uh,
    ⵠⲆᐃᐃ: Ue
  };
  es[bs.ΔⵠⵠΔⲆ] = {
    name: "Wood bow",
    Ⲇⵠ: Ur.ⵠⲆΔⵠⲆⲆΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Zq
  };
  es[bs.ᐃΔᐃᐃⲆ] = {
    name: "Stone bow",
    Ⲇⵠ: Ur.ⲆⲆⲆⵠᐃΔᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const _l = Ph;
  es[bs.ⵠᐃⲆⵠᐃ] = {
    name: "Gold bow",
    Ⲇⵠ: Ur.ᐃΔⵠᐃⵠⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Fl = ih;
  const Rl = qk;
  const Gl = X;
  const jl = qq;
  es[bs.ⵠⵠⵠᐃΔ] = {
    name: "Diamond bow",
    Ⲇⵠ: Ur.ⵠᐃⵠΔⲆΔᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⲆⵠⲆΔⲆ] = {
    name: "Amethyst bow",
    Ⲇⵠ: Ur.ᐃΔᐃⵠΔᐃⲆ,
    ᐃᐃᐃᐃ: _a,
    ⵠⲆᐃᐃ: Ok
  };
  es[bs.ⲆᐃᐃⵠⲆ] = {
    name: "Reidite bow",
    Ⲇⵠ: Ur.ᐃΔΔⵠⵠⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Wl = Vj;
  es[bs.ⲆᐃⲆΔⵠ] = {
    name: "Dragon bow",
    Ⲇⵠ: Ur.ᐃⵠⲆΔᐃᐃᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: rl
  };
  const Ll = bk;
  es[bs.ⲆⲆⵠΔⲆ] = {
    name: "Crown of life",
    Ⲇⵠ: Ur.ᐃⲆⵠΔΔⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃᐃⲆⲆΔ] = {
    name: "Gem of life",
    Ⲇⵠ: Ur.ⵠΔⵠⲆⲆⵠᐃ,
    ᐃᐃᐃᐃ: Gr,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ᐃᐃⵠⵠᐃ] = {
    name: "Orb of the dragon",
    Ⲇⵠ: Ur.ΔΔⲆⵠⵠⵠᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⵠΔΔΔΔ] = {
    name: "Orb of the dragon",
    Ⲇⵠ: Ur.ᐃⲆⵠᐃⲆⵠΔ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: tj
  };
  const Ol = So;
  es[bs.ⲆⵠΔᐃᐃ] = {
    name: "Cube of the dragon",
    Ⲇⵠ: Ur.ⲆᐃⵠⵠΔⵠᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const Nl = qk;
  const ql = vk;
  const Hl = Do;
  const Ul = Ks;
  es[bs.ᐃⲆⲆⵠΔ] = {
    name: "Cube of the dragon",
    Ⲇⵠ: Ur.ⵠⵠⲆⲆΔΔΔ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⵠⲆⲆⵠΔ] = {
    name: "Crown of luck",
    Ⲇⵠ: Ur.ᐃΔⲆᐃᐃᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Rl
  };
  es[bs.ΔᐃΔΔⵠ] = {
    name: "Gem of luck",
    Ⲇⵠ: Ur.ⲆⵠᐃᐃᐃⵠⲆ,
    ᐃᐃᐃᐃ: tj,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆⲆⲆᐃᐃ] = {
    name: "Crown of the angel",
    Ⲇⵠ: Ur.ⵠᐃΔᐃⵠⵠᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆⲆΔⵠΔ] = {
    name: "Gem of the angel",
    Ⲇⵠ: Ur.ΔⵠΔᐃᐃⲆᐃ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: 0
  };
  const Yl = ka;
  const Kl = wh;
  es[bs.ΔᐃΔΔΔ] = {
    name: "Dragon heart",
    Ⲇⵠ: Ur.ⵠΔⲆⵠΔΔⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⵠᐃΔᐃⲆ] = {
    name: "Lava heart",
    Ⲇⵠ: Ur.ᐃᐃᐃⲆᐃⲆᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Nl
  };
  es[bs.ᐃⲆᐃΔⲆ] = {
    name: "Hood",
    Ⲇⵠ: Ur.ᐃⲆⲆⲆᐃⵠᐃ,
    ᐃᐃᐃᐃ: Ih,
    ⵠⲆᐃᐃ: 1
  };
  const Vl = qq;
  es[bs.ⵠΔᐃᐃⲆ] = {
    name: "Peasant",
    Ⲇⵠ: Ur.ⲆᐃⵠᐃΔᐃᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Zl = oa;
  const Xl = Ko;
  const $l = jq;
  const eg = fq;
  es[bs.ⵠⲆᐃⵠΔ] = {
    name: "Winter peasant",
    Ⲇⵠ: Ur.ᐃⲆᐃⲆᐃⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const ig = sk;
  es[bs.ᐃΔΔⵠⲆ] = {
    name: "Winter hood",
    Ⲇⵠ: Ur.ⲆⲆⵠᐃᐃⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ΔΔⵠᐃⲆ] = {
    name: "Bucket full",
    Ⲇⵠ: Ur.ᐃᐃⲆⲆᐃᐃᐃ,
    ᐃᐃᐃᐃ: uh,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆΔⲆⵠⵠ] = {
    name: "Bucket empty",
    Ⲇⵠ: Ur.ᐃⲆⲆΔᐃⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Gs
  };
  const tg = Cl;
  es[bs.ᐃᐃᐃⲆⵠ] = {
    name: "Well",
    Ⲇⵠ: Ur.ⵠⲆⲆᐃⲆⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const ng = da;
  es[bs.Δᐃᐃᐃᐃ] = {
    name: "Sign",
    Ⲇⵠ: Ur.ᐃⵠⵠⵠⵠᐃⲆ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: Fh
  };
  es[bs.ⵠΔΔΔⵠ] = {
    name: "Pumpkin Seed",
    Ⲇⵠ: Ur.ⲆⲆᐃⲆⵠⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Cq
  };
  const og = Ka;
  es[bs.ᐃΔⵠⲆᐃ] = {
    name: "Garlic Seed",
    Ⲇⵠ: Ur.ⲆⵠⲆⵠⲆᐃⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: gr
  };
  const rg = gl;
  const ag = Fh;
  es[bs.ᐃⲆᐃⵠΔ] = {
    name: "Thorbushes Seed",
    Ⲇⵠ: Ur.ᐃⵠᐃᐃᐃⵠⵠ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: Cn
  };
  es[bs.ΔⲆⵠⵠⲆ] = {
    name: "Roof",
    Ⲇⵠ: Ur.ΔⵠΔΔⵠᐃΔ,
    ᐃᐃᐃᐃ: 1,
    ⵠⲆᐃᐃ: 1
  };
  const sg = $a;
  es[bs.ΔᐃΔⲆᐃ] = {
    name: "Crab Crown",
    Ⲇⵠ: Ur.ⲆⲆᐃⲆⵠⲆΔ,
    ᐃᐃᐃᐃ: gr,
    ⵠⲆᐃᐃ: Eo
  };
  const hg = Uq;
  es[bs.ᐃΔᐃᐃΔ] = {
    name: "Carrot Seed",
    Ⲇⵠ: Ur.ᐃᐃⵠⲆⲆⲆⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  const lg = Q;
  const gg = sj;
  const ug = Yi;
  es[bs.ⲆⵠᐃᐃΔ] = {
    name: "Tomato Seed",
    Ⲇⵠ: Ur.ⵠᐃΔΔᐃⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆᐃᐃΔᐃ] = {
    name: "Watermelon Seed",
    Ⲇⵠ: Ur.ᐃⲆⵠⲆΔⵠΔ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: 0
  };
  const bg = fh;
  es[bs.ΔⲆⵠⲆΔ] = {
    name: "Aloe Vera Seed",
    Ⲇⵠ: Ur.ⲆⲆⲆⵠⵠⲆΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ms
  };
  const vg = io;
  es[bs.ΔΔΔΔⵠ] = {
    name: "Cap",
    Ⲇⵠ: Ur.ⵠⲆᐃΔΔᐃⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ᐃⵠⲆⵠᐃ] = {
    name: "Turban",
    Ⲇⵠ: Ur.ᐃⲆⲆⲆⵠⵠᐃ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: As
  };
  es[bs.ΔⲆΔⵠⵠ] = {
    name: "Pilot Helmet",
    Ⲇⵠ: Ur.ⵠᐃⲆΔΔⵠⲆ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: Ue
  };
  es[bs.ⲆⲆᐃᐃΔ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ᐃⲆⵠⵠⵠᐃⲆ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: 0
  };
  const dg = ta;
  es[bs.ᐃⲆⲆⵠⲆ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ⲆⲆⵠⵠⲆΔᐃ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: Ue
  };
  es[bs.ⵠⵠⲆᐃΔ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ΔᐃⵠᐃⲆᐃΔ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: Ej
  };
  const cg = na;
  const mg = hl;
  const pg = k;
  es[bs.ΔⲆⵠᐃⵠ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ΔΔΔⲆΔⵠᐃ,
    ᐃᐃᐃᐃ: Cq,
    ⵠⲆᐃᐃ: jq
  };
  es[bs.ⲆᐃⵠⵠⲆ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ΔⲆⵠⲆⵠⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃΔΔᐃⵠ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Ur.ΔⵠΔΔⵠᐃᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: $l
  };
  es[bs.ΔⵠⲆⲆⵠ] = {
    name: "Pitchfork",
    Ⲇⵠ: Ur.ⵠⲆⵠⵠⲆⲆⲆ,
    ᐃᐃᐃᐃ: Fj,
    ⵠⲆᐃᐃ: ag
  };
  const Cg = gl;
  const Tg = uh;
  es[bs.ΔᐃᐃⵠⲆ] = {
    name: "Wood Door Spike",
    Ⲇⵠ: Ur.ᐃᐃΔΔⲆⵠΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃⵠᐃⵠⵠ] = {
    name: "Stone Door Spike",
    Ⲇⵠ: Ur.ⲆΔⵠᐃΔⵠⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const fg = Ho;
  const zg = ue;
  es[bs.ⲆⲆⲆΔⵠ] = {
    name: "Gold Door Spike",
    Ⲇⵠ: Ur.ᐃⲆⵠⵠⵠⵠⵠ,
    ᐃᐃᐃᐃ: Rl,
    ⵠⲆᐃᐃ: Al
  };
  const yg = mg;
  const wg = Pl;
  const Pg = Bn;
  es[bs.ⵠⵠⵠⲆⵠ] = {
    name: "Diamond Door Spike",
    Ⲇⵠ: Ur.ⲆⵠΔᐃⲆᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⵠΔⵠⵠᐃ] = {
    name: "Amethyst Door Spike",
    Ⲇⵠ: Ur.ⲆⲆᐃⲆⲆⲆⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Ag = j;
  const kg = dl;
  es[bs.ᐃⵠⵠⲆⵠ] = {
    name: "Diamond Fire Protection ",
    Ⲇⵠ: Ur.ᐃᐃⲆⵠᐃΔⵠ,
    ᐃᐃᐃᐃ: uh,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ᐃⲆⲆΔⵠ] = {
    name: "Amethyst Fire Protection ",
    Ⲇⵠ: Ur.ΔᐃⵠⵠⲆᐃΔ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: As
  };
  es[bs.ΔᐃΔⵠᐃ] = {
    name: "Amethyst Fire Protection ",
    Ⲇⵠ: Ur.ΔⵠⲆΔⵠᐃᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ie
  };
  const xg = Ta;
  es[bs.ᐃⵠⵠᐃⲆ] = {
    name: "Reidite Sword",
    Ⲇⵠ: Ur.ᐃΔΔΔΔⵠⲆ,
    ᐃᐃᐃᐃ: ne,
    ⵠⲆᐃᐃ: Al
  };
  es[bs.ⵠⵠⵠⵠⲆ] = {
    name: "Reidite Spear",
    Ⲇⵠ: Ur.ᐃⵠΔⲆⵠⵠΔ,
    ᐃᐃᐃᐃ: Rl,
    ⵠⲆᐃᐃ: $l
  };
  const Jg = Or;
  es[bs.ⵠⲆᐃᐃⲆ] = {
    name: "Reidite Helmet",
    Ⲇⵠ: Ur.ⵠⵠⲆⲆΔΔᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Ok
  };
  es[bs.ⲆᐃⵠⲆⵠ] = {
    name: "Reidite Door Spike",
    Ⲇⵠ: Ur.ᐃᐃⲆⵠⲆⵠᐃ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: 1
  };
  const Mg = Vi;
  const Bg = tl;
  es[bs.ᐃΔΔᐃⲆ] = {
    name: "Reidite Door",
    Ⲇⵠ: Ur.ΔⲆⵠᐃᐃⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Dg = Qq;
  es[bs.ΔΔᐃⵠΔ] = {
    name: "Reidite Spike",
    Ⲇⵠ: Ur.ⲆⲆᐃᐃⲆΔᐃ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: jq
  };
  es[bs.ⵠᐃᐃⲆᐃ] = {
    name: "Reidite Wall",
    Ⲇⵠ: Ur.ⲆⵠᐃᐃⲆᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  es[bs.ⲆⲆᐃᐃᐃ] = {
    name: "Reidite pick",
    Ⲇⵠ: Ur.ⵠΔⲆⲆⲆΔᐃ,
    ᐃᐃᐃᐃ: _a,
    ⵠⲆᐃᐃ: 1
  };
  const Ig = fa;
  const Eg = Cg;
  const Sg = xs;
  const Qg = Pq;
  const _g = Ch;
  es[bs.ⲆⵠⵠᐃΔ] = {
    name: "Boat",
    Ⲇⵠ: Ur.ⵠⵠΔⲆⵠΔΔ,
    ᐃᐃᐃᐃ: Nl,
    ⵠⲆᐃᐃ: j
  };
  es[bs.ⵠⲆⵠⵠⵠ] = {
    name: "Sled",
    Ⲇⵠ: Ur.ΔΔⲆⵠⵠᐃΔ,
    ᐃᐃᐃᐃ: Gr,
    ⵠⲆᐃᐃ: ie
  };
  es[bs.ⵠΔⲆᐃⵠ] = {
    name: "Saddle",
    Ⲇⵠ: Ur.ΔⲆⲆΔⵠⵠⵠ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 1
  };
  const Fg = Ns;
  es[bs.ᐃⵠᐃⲆⲆ] = {
    name: "Mount Boar",
    Ⲇⵠ: Ur.ⵠⵠᐃᐃⲆᐃᐃ,
    ᐃᐃᐃᐃ: Cn,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ΔΔΔᐃⵠ] = {
    name: "Mount King Crab",
    Ⲇⵠ: Ur.ⲆΔⵠᐃⲆⲆⲆ,
    ᐃᐃᐃᐃ: ur,
    ⵠⲆᐃᐃ: gr
  };
  es[bs.ᐃΔᐃᐃⵠ] = {
    name: "Mount Baby Dragon",
    Ⲇⵠ: Ur.ΔⲆⵠⲆΔΔⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: Gr
  };
  const Rg = $i;
  es[bs.ᐃΔⲆᐃⲆ] = {
    name: "Mount Baby Lava",
    Ⲇⵠ: Ur.ⲆᐃΔᐃᐃᐃΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: 0
  };
  es[bs.ⲆⵠΔΔⲆ] = {
    name: "Mount Hawk",
    Ⲇⵠ: Ur.ᐃⲆΔᐃⲆΔⲆ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ms
  };
  es[bs.ⵠᐃⵠⵠΔ] = {
    name: "Plane",
    Ⲇⵠ: Ur.ⵠᐃᐃⲆⲆⲆΔ,
    ᐃᐃᐃᐃ: 0,
    ⵠⲆᐃᐃ: ur
  };
  const Gg = yr;
  es[bs.ⲆⲆⵠⵠⲆ] = {
    name: "Pitchfork 2",
    Ⲇⵠ: Ur.ᐃⵠⲆᐃΔⵠⲆ,
    ᐃᐃᐃᐃ: Tg,
    ⵠⲆᐃᐃ: ur
  };
  const jg = jl;
  es[bs.ΔⲆⲆⲆⲆ] = {
    name: "Baby Mammoth",
    Ⲇⵠ: Ur.ΔΔΔⵠⲆΔⲆ,
    ᐃᐃᐃᐃ: Nl,
    ⵠⲆᐃᐃ: 0
  };
  const Wg = Pa;
  var Lg = yq;
  const Qs = Nl;
  var Ng = [{
    r: [[bs.ΔΔΔᐃ, 25], [bs.ᐃΔⲆᐃ, xh]],
    w: Cn,
    f: vq,
    ⲆⵠΔ: Tg,
    e: 0,
    id: as.ⵠΔⵠΔⲆ,
    ΔᐃⲆⲆ: bs.ⵠΔⵠΔⲆ,
    time: Ej / pr,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ⵠΔⵠΔⲆ, 1], [bs.ΔΔΔᐃ, 35], [bs.ᐃΔⲆᐃ, 10]],
    w: 0,
    f: rl,
    ⲆⵠΔ: Fj,
    e: 0,
    id: as.ΔΔⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ΔΔⲆⵠᐃ,
    time: Gs / 5,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 150], [bs.ᐃΔⲆᐃ, 50], [bs.ΔΔΔΔ, 15]],
    w: Ue,
    f: 0,
    ⲆⵠΔ: uh,
    e: 0,
    id: as.ᐃⵠᐃᐃᐃ,
    ΔᐃⲆⲆ: bs.ᐃⵠᐃᐃᐃ,
    time: 1 / xq,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 20], [bs.ᐃΔⲆᐃ, 10]],
    w: tj,
    f: ne,
    ⲆⵠΔ: _a,
    e: 0,
    id: as.ᐃⲆᐃΔⵠ,
    ΔᐃⲆⲆ: bs.ᐃⲆᐃΔⵠ,
    time: zs / 6,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 10]],
    w: ur,
    f: Gr,
    ⲆⵠΔ: 0,
    e: Rl,
    id: as.ⵠᐃⲆⲆⲆ,
    ΔᐃⲆⲆ: bs.ⵠᐃⲆⲆⲆ,
    time: 1 / co,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ⵠᐃⲆⲆⲆ, Eo], [bs.ΔΔΔᐃ, 50], [bs.ᐃΔⲆᐃ, 15]],
    w: Ue,
    f: Cq,
    ⲆⵠΔ: 0,
    e: qn,
    id: as.ᐃᐃⲆⵠΔ,
    ΔᐃⲆⲆ: bs.ᐃᐃⲆⵠΔ,
    time: Ej / 8,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 40], [bs.ΔΔΔΔ, c], [bs.ᐃΔⲆᐃ, 30], [bs.ᐃᐃⲆⵠΔ, 1]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Fj,
    e: 0,
    id: as.ⲆΔᐃⲆⵠ,
    ΔᐃⲆⲆ: bs.ⲆΔᐃⲆⵠ,
    time: 1 / S,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, Wh], [bs.ΔΔΔΔ, 50], [bs.ᐃΔⲆᐃ, 80], [bs.ⲆΔᐃⲆⵠ, Eo]],
    w: 1,
    f: uh,
    ⲆⵠΔ: Nl,
    e: gr,
    id: as.ΔΔᐃᐃᐃ,
    ΔᐃⲆⲆ: bs.ΔΔᐃᐃᐃ,
    time: 1 / Hq,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, 40], [bs.ΔΔΔΔ, 60], [bs.ΔⲆⲆⲆ, 30], [bs.ΔΔᐃᐃᐃ, As]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔⵠⲆΔΔ,
    ΔᐃⲆⲆ: bs.ΔⵠⲆΔΔ,
    time: Oj / 60,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 30], [bs.ΔⲆⲆΔ, 40], [bs.ⵠΔⲆΔ, 30], [bs.ΔⵠⲆΔΔ, jq]],
    w: 1,
    f: ne,
    ⲆⵠΔ: 0,
    e: qk,
    id: as.ⲆⲆᐃᐃᐃ,
    ΔᐃⲆⲆ: bs.ⲆⲆᐃᐃᐃ,
    time: Ok / 90,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 90], [bs.ᐃΔⲆᐃ, 50]],
    w: 1,
    f: ne,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⲆΔΔⵠ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔΔⵠ,
    time: 1 / fg,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 160], [bs.ᐃΔⲆᐃ, 120], [bs.ΔΔΔΔ, 80], [bs.ᐃⲆΔΔⵠ, zs]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Cq,
    e: qk,
    id: as.ΔⵠΔⲆⵠ,
    ΔᐃⲆⲆ: bs.ΔⵠΔⲆⵠ,
    time: aa / 15,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, 80], [bs.ᐃΔⲆᐃ, 200], [bs.ΔΔΔΔ, 150], [bs.ΔⵠΔⲆⵠ, 1]],
    w: j,
    f: Gr,
    ⲆⵠΔ: Ih,
    e: 0,
    id: as.ⵠⵠᐃⲆⲆ,
    ΔᐃⲆⲆ: bs.ⵠⵠᐃⲆⲆ,
    time: Oj / Ja,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, 160], [bs.ΔⲆⲆⲆ, 60], [bs.ΔΔΔΔ, 250], [bs.ⵠⵠᐃⲆⲆ, As]],
    w: jq,
    f: qn,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.Δᐃⵠᐃⵠ,
    ΔᐃⲆⲆ: bs.Δᐃⵠᐃⵠ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 160], [bs.ⵠΔⲆΔ, 60], [bs.ΔⲆⲆΔ, 250], [bs.Δᐃⵠᐃⵠ, 1]],
    w: 1,
    f: Tg,
    ⲆⵠΔ: gr,
    e: 0,
    id: as.ᐃΔⵠⲆΔ,
    ΔᐃⲆⲆ: bs.ᐃΔⵠⲆΔ,
    time: Zq / 90,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ᐃΔⵠⲆΔ, 1], [bs.ᐃᐃᐃΔΔ, Ok], [bs.ᐃΔᐃⵠΔ, 1], [bs.ⵠΔⵠᐃᐃ, 10], [bs.ΔⲆⲆⲆ, xq]],
    w: 1,
    f: 1,
    ⲆⵠΔ: Fj,
    e: 0,
    id: as.ⵠⵠⲆⲆΔ,
    ΔᐃⲆⲆ: bs.ⵠⵠⲆⲆΔ,
    time: Ej / 120,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 30], [bs.ᐃΔⲆᐃ, 15]],
    w: ag,
    f: Cq,
    ⲆⵠΔ: Gr,
    e: tj,
    id: as.ΔⵠΔΔⵠ,
    ΔᐃⲆⲆ: bs.ΔⵠΔΔⵠ,
    time: 1 / Os,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⵠΔΔⵠ, 1], [bs.ΔΔΔΔ, _r], [bs.ᐃΔⲆᐃ, 30], [bs.ΔΔΔᐃ, 40]],
    w: Al,
    f: 0,
    ⲆⵠΔ: 0,
    e: _a,
    id: as.ⵠᐃΔΔⵠ,
    ΔᐃⲆⲆ: bs.ⵠᐃΔΔⵠ,
    time: 1 / Va,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ⵠᐃΔΔⵠ, $l], [bs.ΔⲆⲆΔ, 20], [bs.ΔΔΔΔ, 50], [bs.ᐃΔⲆᐃ, 80]],
    w: 1,
    f: gr,
    ⲆⵠΔ: Rl,
    e: uh,
    id: as.ΔⲆΔᐃⵠ,
    ΔᐃⲆⲆ: bs.ΔⲆΔᐃⵠ,
    time: Fh / 20,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⲆΔᐃⵠ, ag], [bs.ΔΔΔΔ, 60], [bs.ΔⲆⲆⲆ, 30], [bs.ΔⲆⲆΔ, 40]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: Ih,
    id: as.ᐃⲆΔᐃᐃ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔᐃᐃ,
    time: 0.025,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 50]],
    w: 1,
    f: uh,
    ⲆⵠΔ: 0,
    e: gr,
    id: as.ⲆᐃⵠⲆΔ,
    ΔᐃⲆⲆ: bs.ⲆᐃⵠⲆΔ,
    time: 0.2,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ⲆᐃⵠⲆΔ, 1]],
    w: 0,
    f: Cq,
    ⲆⵠΔ: aa,
    e: 0,
    id: as.ᐃⵠᐃⵠΔ,
    ΔᐃⲆⲆ: bs.ᐃⵠᐃⵠΔ,
    time: 0.2,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, Ms], [bs.ᐃΔⲆᐃ, 50]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: qk,
    id: as.ΔⵠⲆⲆⵠ,
    ΔᐃⲆⲆ: bs.ΔⵠⲆⲆⵠ,
    time: 0.1,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔⵠⲆⲆⵠ, 1], [bs.ΔᐃᐃᐃⵠᐃΔ, jq]],
    w: 1,
    f: gr,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⲆⲆⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ⲆⲆⵠⵠⲆ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ᐃⵠΔΔΔ, 4], [bs.ⲆⲆⲆⵠΔ, 4], [bs.ΔⲆⲆΔᐃ, 4]],
    w: Zq,
    f: vq,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠᐃⵠⲆᐃ,
    ΔᐃⲆⲆ: bs.ⵠᐃⵠⲆᐃ,
    time: 1 / 15,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 40]],
    w: 0,
    f: 0,
    ⲆⵠΔ: 0,
    e: rl,
    id: as.ⵠⲆΔΔᐃ,
    ΔᐃⲆⲆ: bs.ⵠⲆΔΔᐃ,
    time: 1 / sj,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠⲆΔΔᐃ, Eo], [bs.ΔΔΔᐃ, 60], [bs.ᐃΔⲆᐃ, xk]],
    w: 1,
    f: Ih,
    ⲆⵠΔ: Gr,
    e: Rl,
    id: as.ΔΔⵠⵠⵠ,
    ΔᐃⲆⲆ: bs.ΔΔⵠⵠⵠ,
    time: 1 / xk,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 80], [bs.ΔΔΔΔ, 30], [bs.ᐃΔⲆᐃ, 30], [bs.ΔΔⵠⵠⵠ, ag]],
    w: Oj,
    f: 0,
    ⲆⵠΔ: vq,
    e: 0,
    id: as.ΔⵠΔΔΔ,
    ΔᐃⲆⲆ: bs.ΔⵠΔΔΔ,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ,
    time: 0.05
  }, {
    r: [[bs.ΔΔΔᐃ, 200], [bs.ΔⲆⲆΔ, 40], [bs.ΔΔΔΔ, 60], [bs.ΔⵠΔΔΔ, Oj]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Fj,
    e: Nl,
    id: as.ΔΔᐃᐃⲆ,
    ΔᐃⲆⲆ: bs.ΔΔᐃᐃⲆ,
    time: zs / 30,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 40], [bs.ΔⲆⲆΔ, 80], [bs.ΔΔΔΔ, 90], [bs.ΔΔᐃᐃⲆ, 1]],
    w: 1,
    f: tj,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔΔᐃΔᐃ,
    ΔᐃⲆⲆ: bs.ΔΔᐃΔᐃ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠΔⲆΔ, 40], [bs.ΔⲆⲆⲆ, 80], [bs.ΔⲆⲆΔ, 90], [bs.ΔΔᐃΔᐃ, Ue]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: gr,
    id: as.ⵠⵠⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ⵠⵠⵠⵠⲆ,
    time: 1 / 90,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⵠᐃΔᐃ, yn], [bs.ᐃᐃⵠⵠᐃ, Gs], [bs.ΔⲆⲆⲆ, 100], [bs.ΔᐃΔΔΔ, Ka]],
    w: 1,
    f: 1,
    ⲆⵠΔ: Al,
    e: 0,
    id: as.ⵠᐃΔⲆⵠ,
    ΔᐃⲆⲆ: bs.ⵠᐃΔⲆⵠ,
    time: zs / 120,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠᐃΔⲆⵠ, Fh], [bs.ⵠΔΔΔΔ, Oj], [bs.ⵠΔⲆΔ, 100], [bs.ⵠᐃΔᐃⲆ, Zn]],
    w: 1,
    f: jq,
    ⲆⵠΔ: 1,
    e: 0,
    id: as.ΔⲆΔᐃⲆ,
    ΔᐃⲆⲆ: bs.ΔⲆΔᐃⲆ,
    time: 0.005,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠⲆΔΔᐃ, 1], [bs.ⲆⲆⲆΔᐃ, 5], [bs.ⲆⲆⲆⵠΔ, 6]],
    w: 1,
    f: _a,
    ⲆⵠΔ: Rl,
    e: Cq,
    id: as.ΔΔⵠᐃⵠ,
    ΔᐃⲆⲆ: bs.ΔΔⵠᐃⵠ,
    time: 0.03333333333333333,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 30]],
    w: ms,
    f: 0,
    ⲆⵠΔ: gr,
    e: tj,
    id: as.ⲆᐃⲆᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆᐃⲆᐃΔ,
    time: Ue / gh,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 50], [bs.ᐃΔⲆᐃ, 25], [bs.ⲆᐃⲆᐃΔ, 1]],
    w: Al,
    f: 0,
    ⲆⵠΔ: 0,
    e: Ih,
    id: as.ᐃᐃᐃΔⵠ,
    ΔᐃⲆⲆ: bs.ᐃᐃᐃΔⵠ,
    time: 1 / Fl,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 60], [bs.ΔΔΔΔ, 40], [bs.ᐃΔⲆᐃ, 50], [bs.ᐃᐃᐃΔⵠ, 1]],
    w: Ok,
    f: 0,
    ⲆⵠΔ: ne,
    e: 0,
    id: as.ΔᐃᐃΔⲆ,
    ΔᐃⲆⲆ: bs.ΔᐃᐃΔⲆ,
    time: 0.05,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆΔ, 40], [bs.ΔΔΔΔ, 60], [bs.ᐃΔⲆᐃ, 80], [bs.ΔᐃᐃΔⲆ, Ej]],
    w: Fh,
    f: ms,
    ⲆⵠΔ: Nl,
    e: 0,
    id: as.ⵠΔΔⲆᐃ,
    ΔᐃⲆⲆ: bs.ⵠΔΔⲆᐃ,
    time: 0.03333333333333333,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆΔ, 60], [bs.ΔΔΔΔ, vh], [bs.ΔⲆⲆⲆ, 40], [bs.ⵠΔΔⲆᐃ, 1]],
    w: 1,
    f: Cn,
    ⲆⵠΔ: ur,
    e: 0,
    id: as.ⵠᐃᐃⵠⵠ,
    ΔᐃⲆⲆ: bs.ⵠᐃᐃⵠⵠ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆΔ, 100], [bs.ΔⲆⲆⲆ, 80], [bs.ⵠΔⲆΔ, 40], [bs.ⵠᐃᐃⵠⵠ, 1]],
    w: zs,
    f: _a,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⵠⵠᐃⲆ,
    ΔᐃⲆⲆ: bs.ᐃⵠⵠᐃⲆ,
    time: 1 / 90,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃⲆΔᐃⵠ, 3]],
    w: 0,
    f: 1,
    ⲆⵠΔ: 0,
    e: Tg,
    id: as.ᐃⲆⲆⲆⵠ,
    ΔᐃⲆⲆ: bs.ᐃⲆⲆⲆⵠ,
    time: Fh / pr,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ᐃⵠⵠΔᐃ, 3]],
    w: uh,
    f: ag,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔⵠⲆⲆⲆ,
    ΔᐃⲆⲆ: bs.ΔⵠⲆⲆⲆ,
    time: 0.2,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⲆΔⲆΔᐃ, qh]],
    w: 0,
    f: Ej,
    ⲆⵠΔ: tj,
    e: 0,
    id: as.ⵠΔΔΔⵠ,
    ΔᐃⲆⲆ: bs.ⵠΔΔΔⵠ,
    time: 1 / cl,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ᐃⵠΔⵠⲆ, 8]],
    w: Qs,
    f: 1,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃΔⵠⲆᐃ,
    ΔᐃⲆⲆ: bs.ᐃΔⵠⲆᐃ,
    time: 0.2,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⲆⲆΔⵠⲆ, 8]],
    w: 0,
    f: 1,
    ⲆⵠΔ: qk,
    e: _a,
    id: as.ᐃⲆᐃⵠΔ,
    ΔᐃⲆⲆ: bs.ᐃⲆᐃⵠΔ,
    time: ag / sj,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ᐃⵠΔᐃⵠ, R]],
    w: Nl,
    f: jq,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃΔᐃᐃΔ,
    ΔᐃⲆⲆ: bs.ᐃΔᐃᐃΔ,
    time: 0.2,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ᐃᐃᐃⲆᐃ, 8]],
    w: Cn,
    f: 1,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⲆⵠᐃᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆⵠᐃᐃΔ,
    time: j / sj,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ᐃⵠⵠⵠⲆ, 16]],
    w: 0,
    f: Ue,
    ⲆⵠΔ: vq,
    e: 0,
    id: as.ⲆᐃᐃΔᐃ,
    ΔᐃⲆⲆ: bs.ⲆᐃᐃΔᐃ,
    time: Ag / sj,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ᐃᐃⵠⲆⵠ, rs]],
    w: Rl,
    f: 1,
    ⲆⵠΔ: gr,
    e: 0,
    id: as.ΔⲆⵠⲆΔ,
    ΔᐃⲆⲆ: bs.ΔⲆⵠⲆΔ,
    time: 0.2,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⲆⲆⵠᐃᐃ, 1]],
    w: Tg,
    f: 1,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⲆⲆⲆᐃ,
    ΔᐃⲆⲆ: bs.ᐃⲆⲆⲆᐃ,
    time: As / 5,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⲆΔⲆⵠⲆ, 1]],
    w: 0,
    f: 1,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔᐃⵠⲆⵠ,
    ΔᐃⲆⲆ: bs.ΔᐃⵠⲆⵠ,
    time: 1 / Sg,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⵠΔⵠΔⵠ, xs]],
    w: ms,
    f: ie,
    ⲆⵠΔ: 0,
    e: vq,
    id: as.ⲆⲆΔΔΔ,
    ΔᐃⲆⲆ: bs.ⲆⲆΔΔΔ,
    time: 0.3333333333333333,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⵠΔⵠΔⵠ, xs], [bs.ᐃⲆΔᐃⵠ, Ue]],
    w: Fj,
    f: Fh,
    ⲆⵠΔ: 0,
    e: gr,
    id: as.ⲆΔΔⲆᐃ,
    ΔᐃⲆⲆ: bs.ⲆΔΔⲆᐃ,
    time: 0.3333333333333333,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⵠΔⵠΔⵠ, gh], [bs.ᐃⲆΔᐃⵠ, 2], [bs.ⲆⲆᐃⲆΔ, ql]],
    w: 0,
    f: 1,
    ⲆⵠΔ: Cq,
    e: 0,
    id: as.ⲆΔᐃᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆΔᐃᐃΔ,
    time: 0.2,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⲆⲆⲆⵠΔ, 2]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.Δⵠᐃⵠⵠ,
    ΔᐃⲆⲆ: bs.Δⵠᐃⵠⵠ,
    time: 1 / Ui,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, zl]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Tg,
    e: tj,
    id: as.Ⲇᐃᐃⵠᐃ,
    ΔᐃⲆⲆ: bs.Ⲇᐃᐃⵠᐃ,
    time: aa / 5,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.Ⲇᐃᐃⵠᐃ, Zq], [bs.ᐃΔⲆᐃ, Hk]],
    w: aa,
    f: 0,
    ⲆⵠΔ: ne,
    e: Ih,
    id: as.ᐃΔⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ᐃΔⵠⵠⲆ,
    time: aa / 5,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ᐃΔⵠⵠⲆ, 1], [bs.ΔΔΔΔ, ts]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠᐃᐃⲆΔ,
    ΔᐃⲆⲆ: bs.ⵠᐃᐃⲆΔ,
    time: j / Jo,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃᐃⲆΔ, 1], [bs.ΔⲆⲆΔ, Uq]],
    w: 1,
    f: 0,
    ⲆⵠΔ: ur,
    e: qn,
    id: as.ⲆΔⲆⲆᐃ,
    ΔᐃⲆⲆ: bs.ⲆΔⲆⲆᐃ,
    time: Zq / Ui,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⲆΔⲆⲆᐃ, 1], [bs.ΔⲆⲆⲆ, Eq]],
    w: 1,
    f: 0,
    ⲆⵠΔ: rl,
    e: qn,
    id: as.ⵠΔⵠⲆΔ,
    ΔᐃⲆⲆ: bs.ⵠΔⵠⲆΔ,
    time: ie / Ui,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠΔⵠⲆΔ, 1], [bs.ⵠΔⲆΔ, 5]],
    w: 1,
    f: 0,
    ⲆⵠΔ: ne,
    e: qn,
    id: as.ⵠᐃᐃⲆᐃ,
    ΔᐃⲆⲆ: bs.ⵠᐃᐃⲆᐃ,
    time: 0.2,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 30]],
    w: 1,
    f: 0,
    ⲆⵠΔ: uh,
    e: 0,
    id: as.ⵠᐃᐃⲆⲆ,
    ΔᐃⲆⲆ: bs.ⵠᐃᐃⲆⲆ,
    time: ie / ss,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃᐃⲆⲆ, 1], [bs.ᐃΔⲆᐃ, 27]],
    w: Eo,
    f: 0,
    ⲆⵠΔ: 0,
    e: Cq,
    id: as.ⵠⵠΔⲆⵠ,
    ΔᐃⲆⲆ: bs.ⵠⵠΔⲆⵠ,
    time: 0.125,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠⵠΔⲆⵠ, 1], [bs.ΔΔΔΔ, 24]],
    w: zs,
    f: 0,
    ⲆⵠΔ: 0,
    e: Cq,
    id: as.ⵠᐃΔΔⲆ,
    ΔᐃⲆⲆ: bs.ⵠᐃΔΔⲆ,
    time: 0.125,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃΔΔⲆ, 1], [bs.ΔⲆⲆΔ, 21]],
    w: Eo,
    f: 0,
    ⲆⵠΔ: Qs,
    e: 0,
    id: as.ΔᐃⲆⵠⵠ,
    ΔᐃⲆⲆ: bs.ΔᐃⲆⵠⵠ,
    time: 0.125,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ΔᐃⲆⵠⵠ, ag], [bs.ΔⲆⲆⲆ, 18]],
    w: Oj,
    f: ms,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠΔⵠⲆⵠ,
    ΔᐃⲆⲆ: bs.ⵠΔⵠⲆⵠ,
    time: ag / 8,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠΔⵠⲆⵠ, 1], [bs.ⵠΔⲆΔ, fq]],
    w: Ag,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃΔΔᐃⲆ,
    ΔᐃⲆⲆ: bs.ᐃΔΔᐃⲆ,
    time: 0.125,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.Ⲇᐃᐃⵠᐃ, 1], [bs.ΔΔΔᐃ, 40], [bs.ᐃΔⲆᐃ, 30]],
    w: aa,
    f: Nl,
    ⲆⵠΔ: Qs,
    e: tj,
    id: as.ΔⵠⲆᐃⲆ,
    ΔᐃⲆⲆ: bs.ΔⵠⲆᐃⲆ,
    time: Ag / Pj,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ᐃΔⵠⵠⲆ, As], [bs.ᐃΔⲆᐃ, 70]],
    w: Fh,
    f: 0,
    ⲆⵠΔ: Cn,
    e: 0,
    id: as.ⵠΔᐃᐃΔ,
    ΔᐃⲆⲆ: bs.ⵠΔᐃᐃΔ,
    time: 0.05,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃᐃⲆΔ, 1], [bs.ΔΔΔΔ, 40], [bs.ᐃΔⲆᐃ, 30]],
    w: 1,
    f: _a,
    ⲆⵠΔ: Qs,
    e: 0,
    id: as.ᐃⲆᐃⵠⲆ,
    ΔᐃⲆⲆ: bs.ᐃⲆᐃⵠⲆ,
    time: 0.05,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⲆΔⲆⲆᐃ, 1], [bs.ΔⲆⲆΔ, 40], [bs.ᐃΔⲆᐃ, 30]],
    w: 1,
    f: Cn,
    ⲆⵠΔ: Cn,
    e: Cn,
    id: as.ⵠΔΔᐃⲆ,
    ΔᐃⲆⲆ: bs.ⵠΔΔᐃⲆ,
    time: aa / dh,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠΔⵠⲆΔ, 1], [bs.ΔⲆⲆⲆ, 40], [bs.ᐃΔⲆᐃ, 30]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: qk,
    id: as.ⵠᐃⲆΔⵠ,
    ΔᐃⲆⲆ: bs.ⵠᐃⲆΔⵠ,
    time: 1 / Ja,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃᐃⲆᐃ, 1], [bs.ⵠΔⲆΔ, 40], [bs.ΔΔΔΔ, 30]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: ur,
    id: as.ΔΔᐃⵠΔ,
    ΔᐃⲆⲆ: bs.ΔΔᐃⵠΔ,
    time: ie / Hq,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃᐃⲆⲆ, 1], [bs.ΔΔΔᐃ, 80], [bs.ᐃΔⲆᐃ, 60]],
    w: aa,
    f: Gr,
    ⲆⵠΔ: 0,
    e: vq,
    id: as.ΔᐃᐃⵠⲆ,
    ΔᐃⲆⲆ: bs.ΔᐃᐃⵠⲆ,
    time: 1 / pg,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠⵠΔⲆⵠ, 1], [bs.ᐃΔⲆᐃ, 140]],
    w: 1,
    f: rl,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⵠᐃⵠⵠ,
    ΔᐃⲆⲆ: bs.ᐃⵠᐃⵠⵠ,
    time: 0.05,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠᐃΔΔⲆ, 1], [bs.ΔΔΔΔ, 80], [bs.ᐃΔⲆᐃ, 60]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⲆⲆⲆΔⵠ,
    ΔᐃⲆⲆ: bs.ⲆⲆⲆΔⵠ,
    time: 0.05,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ΔᐃⲆⵠⵠ, zs], [bs.ΔⲆⲆΔ, 80], [bs.ᐃΔⲆᐃ, 60]],
    w: 1,
    f: 0,
    ⲆⵠΔ: qk,
    e: 0,
    id: as.ⵠⵠⵠⲆⵠ,
    ΔᐃⲆⲆ: bs.ⵠⵠⵠⲆⵠ,
    time: 0.05,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ⵠΔⵠⲆⵠ, Fh], [bs.ΔⲆⲆⲆ, 80], [bs.ᐃΔⲆᐃ, 60]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠΔⵠⵠᐃ,
    ΔᐃⲆⲆ: bs.ⵠΔⵠⵠᐃ,
    time: Zq / 20,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ᐃΔΔᐃⲆ, 1], [bs.ⵠΔⲆΔ, 80], [bs.ΔΔΔΔ, 60]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Rl,
    e: Gr,
    id: as.ⲆᐃⵠⲆⵠ,
    ΔᐃⲆⲆ: bs.ⲆᐃⵠⲆⵠ,
    time: Al / pg,
    ᐃΔΔ: cs.ⲆᐃⲆⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 25], [bs.ΔΔΔΔ, 2]],
    w: 1,
    f: gr,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔⲆᐃᐃⲆ,
    ΔᐃⲆⲆ: bs.ΔⲆᐃᐃⲆ,
    time: 0.2,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ᐃⵠΔΔΔ, j], [bs.ᐃΔⲆᐃΔ, 1], [bs.ⲆⲆⲆⵠΔ, vk]],
    w: Ag,
    f: Nl,
    ⲆⵠΔ: Qs,
    e: 0,
    id: as.ⲆΔΔⵠᐃ,
    ΔᐃⲆⲆ: bs.ⲆΔΔⵠᐃ,
    time: j / 5,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃⵠΔΔΔ, Vh], [bs.ⲆⲆⲆⵠⵠ, 20], [bs.ΔⵠᐃΔᐃ, 5], [bs.ᐃΔⲆᐃΔ, Jn]],
    w: $l,
    f: ms,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⲆΔⵠⲆ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔⵠⲆ,
    time: Oj / 30,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⵠⲆⵠⵠⵠⵠⲆ, Oj], [bs.ᐃᐃⲆⵠᐃ, ph], [bs.ⵠᐃᐃᐃⵠ, 8], [bs.ⲆⲆⲆⵠⵠ, R], [bs.ⲆⲆⲆⵠΔ, sg]],
    w: ag,
    f: Ih,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔⲆΔⵠⵠ,
    ΔᐃⲆⲆ: bs.ΔⲆΔⵠⵠ,
    time: jq / 60,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃΔ, 1], [bs.ⲆⲆⲆⵠΔ, sh]],
    w: 1,
    f: ne,
    ⲆⵠΔ: 0,
    e: gr,
    id: as.ⵠⲆⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ⵠⲆⲆⵠᐃ,
    time: 1 / gh,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⵠⲆⲆⵠᐃ, Ej], [bs.ΔⲆⲆΔᐃ, pr], [bs.ⲆⲆⲆⵠΔ, ug]],
    w: Ok,
    f: Rl,
    ⲆⵠΔ: 0,
    e: Rl,
    id: as.ⲆᐃΔΔΔ,
    ΔᐃⲆⲆ: bs.ⲆᐃΔΔΔ,
    time: 1 / Tl,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⲆᐃΔΔΔ, 1], [bs.ⲆⲆΔᐃᐃ, 5], [bs.ΔⵠᐃΔᐃ, 4]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.Δⵠᐃᐃᐃ,
    ΔᐃⲆⲆ: bs.Δⵠᐃᐃᐃ,
    time: 0.03333333333333333,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.Δⵠᐃᐃᐃ, Zq], [bs.ⲆⲆΔᐃᐃ, Ui], [bs.ⲆΔΔᐃⵠ, 10], [bs.ΔⵠᐃΔᐃ, vs]],
    w: Gs,
    f: 0,
    ⲆⵠΔ: 0,
    e: ne,
    id: as.ⵠᐃⲆᐃᐃ,
    ΔᐃⲆⲆ: bs.ⵠᐃⲆᐃᐃ,
    time: Fh / 50,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 50]],
    w: vq,
    f: 0,
    ⲆⵠΔ: _a,
    e: Cn,
    id: as.ΔⵠⵠⲆΔ,
    ΔᐃⲆⲆ: bs.ΔⵠⵠⲆΔ,
    time: 0.2,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 75], [bs.ΔΔΔᐃ, 75], [bs.ΔⵠⵠⲆΔ, jq]],
    w: 1,
    f: Cn,
    ⲆⵠΔ: uh,
    e: Rl,
    id: as.ⵠⲆᐃⲆΔ,
    ΔᐃⲆⲆ: bs.ⵠⲆᐃⲆΔ,
    time: 1 / ws,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 90], [bs.ΔΔΔᐃ, 90], [bs.ΔΔΔΔ, 90], [bs.ⵠⲆᐃⲆΔ, Gs]],
    w: 1,
    f: qk,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⲆΔⵠΔ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔⵠΔ,
    time: 1 / Ja,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃ, Vj], [bs.ΔΔΔΔ, 100], [bs.ΔⲆⲆΔ, 100], [bs.ᐃⲆΔⵠΔ, 1]],
    w: 1,
    f: _a,
    ⲆⵠΔ: rl,
    e: 0,
    id: as.ⵠⵠⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ⵠⵠⲆⵠᐃ,
    time: Zq / 30,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 80], [bs.ΔΔΔΔ, 150], [bs.ΔⲆⲆΔ, 120], [bs.ⵠⵠⲆⵠᐃ, 1]],
    w: jq,
    f: rl,
    ⲆⵠΔ: 0,
    e: rl,
    id: as.ⵠΔⵠⲆᐃ,
    ΔᐃⲆⲆ: bs.ⵠΔⵠⲆᐃ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⵠΔⲆΔ, 80], [bs.ΔⲆⲆΔ, 150], [bs.ΔⲆⲆⲆ, 120], [bs.ⵠΔⵠⲆᐃ, 1]],
    w: Ue,
    f: 1,
    ⲆⵠΔ: Fj,
    e: Nl,
    id: as.ⵠⲆᐃᐃⲆ,
    ΔᐃⲆⲆ: bs.ⵠⲆᐃᐃⲆ,
    time: 0.011111111111111112,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⵠΔⵠᐃᐃ, wr], [bs.ΔⲆⲆΔ, 40], [bs.ⲆⲆⲆⵠΔ, 4]],
    w: 1,
    f: Nl,
    ⲆⵠΔ: tj,
    e: 0,
    id: as.ᐃⵠⵠᐃⵠ,
    ΔᐃⲆⲆ: bs.ᐃⵠⵠᐃⵠ,
    time: ie / cq,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃⵠⵠᐃⵠ, 1], [bs.ΔΔΔΔ, 80], [bs.ᐃΔᐃⵠΔ, ag], [bs.ΔⲆⲆⲆ, 20]],
    w: 1,
    f: 0,
    ⲆⵠΔ: qk,
    e: 0,
    id: as.ⵠⵠⲆⵠⵠ,
    ΔᐃⲆⲆ: bs.ⵠⵠⲆⵠⵠ,
    time: 0.011111111111111112,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃᐃⲆΔⲆ, xh], [bs.ΔⲆⲆΔ, 50], [bs.ΔⵠᐃΔᐃ, sj]],
    w: jq,
    f: 1,
    ⲆⵠΔ: Gr,
    e: 0,
    id: as.ᐃⵠⵠⲆⵠ,
    ΔᐃⲆⲆ: bs.ᐃⵠⵠⲆⵠ,
    time: 1 / xq,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃⵠⵠⲆⵠ, Ue], [bs.ᐃᐃⲆΔⲆ, 10], [bs.ΔⲆⲆⲆ, 50]],
    w: aa,
    f: 1,
    ⲆⵠΔ: Cq,
    e: 0,
    id: as.ᐃⲆⲆΔⵠ,
    ΔᐃⲆⲆ: bs.ᐃⲆⲆΔⵠ,
    time: Ej / 60,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃⲆⲆΔⵠ, Zq], [bs.ᐃᐃⲆΔⲆ, 15], [bs.ΔⲆⲆⲆ, 50], [bs.ⵠΔⲆΔ, 50]],
    w: Ag,
    f: Al,
    ⲆⵠΔ: rl,
    e: 0,
    id: as.ΔᐃΔⵠᐃ,
    ΔᐃⲆⲆ: bs.ΔᐃΔⵠᐃ,
    time: 1 / 90,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⲆⲆⲆⵠΔ, 4], [bs.ⲆⲆⵠΔⵠ, 2]],
    w: j,
    f: Cq,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ΔΔΔΔⵠ,
    ΔᐃⲆⲆ: bs.ΔΔΔΔⵠ,
    time: Oj / 15,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔΔΔΔⵠ, 1], [bs.ⲆⲆⲆⵠΔ, 6], [bs.ⲆⲆⵠΔⵠ, Cg], [bs.ⵠᐃᐃᐃⵠ, 12], [bs.ⲆⲆⲆⵠⵠ, vs]],
    w: ag,
    f: 0,
    ⲆⵠΔ: ne,
    e: Rl,
    id: as.ᐃⵠⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ᐃⵠⲆⵠᐃ,
    time: Ue / 150,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⲆⲆⲆⵠΔ, wg], [bs.ΔⲆⲆΔᐃ, Os]],
    w: 1,
    f: ms,
    ⲆⵠΔ: Fj,
    e: 0,
    id: as.ᐃⵠⲆΔ,
    ΔᐃⲆⲆ: bs.ᐃⵠⲆΔ,
    time: 0.06666666666666667,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, c]],
    w: 0,
    f: 1,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⵠΔΔΔ,
    ΔᐃⲆⲆ: bs.ᐃⵠΔΔΔ,
    time: Ue / Sg,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, Gs], [bs.ⲆⲆⲆⵠΔ, 1]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Nl,
    e: 0,
    id: as.ΔⵠᐃΔᐃ,
    ΔᐃⲆⲆ: bs.ΔⵠᐃΔᐃ,
    time: 1 / X,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔΔ, 10]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Nl,
    e: gr,
    id: as.ⵠᐃⵠΔΔ,
    ΔᐃⲆⲆ: bs.ⵠᐃⵠΔΔ,
    time: Ej / gh,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔΔ, 250]],
    w: jq,
    f: 0,
    ⲆⵠΔ: 0,
    e: Gr,
    id: as.ᐃⲆΔⲆᐃ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔⲆᐃ,
    time: Ag / 60,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 50]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: Fj,
    id: as.ΔⵠᐃⵠΔ,
    ΔᐃⲆⲆ: bs.ΔⵠᐃⵠΔ,
    time: Ej / ae,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, nq]],
    w: Zq,
    f: 0,
    ⲆⵠΔ: Nl,
    e: gr,
    id: as.ⲆΔⵠⲆᐃ,
    ΔᐃⲆⲆ: bs.ⲆΔⵠⲆᐃ,
    time: ag / cl,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 30]],
    w: j,
    f: 0,
    ⲆⵠΔ: 0,
    e: Qs,
    id: as.ΔⲆⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ΔⲆⵠⵠⲆ,
    time: 0.2,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 120]],
    w: zs,
    f: 0,
    ⲆⵠΔ: 0,
    e: Rl,
    id: as.ΔᐃⲆⲆᐃ,
    ΔᐃⲆⲆ: bs.ΔᐃⲆⲆᐃ,
    time: ie / ci,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 20], [bs.ⵠᐃⵠⲆΔ, 15]],
    w: 1,
    f: 0,
    ⲆⵠΔ: tj,
    e: 0,
    id: as.ΔΔᐃⲆΔ,
    ΔᐃⲆⲆ: bs.ΔΔᐃⲆΔ,
    time: zs / Ya,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ⵠⲆΔᐃᐃ, 25]],
    w: Ue,
    f: Oj,
    ⲆⵠΔ: Gr,
    e: 0,
    id: as.ⵠᐃⲆⵠⲆ,
    ΔᐃⲆⲆ: bs.ⵠᐃⲆⵠⲆ,
    time: ie / 5,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⵠᐃⲆⵠⲆ, 1]],
    w: qk,
    f: 0,
    ⲆⵠΔ: 1,
    e: ur,
    id: as.ᐃᐃᐃΔΔ,
    ΔᐃⲆⲆ: bs.ᐃᐃᐃΔΔ,
    time: 0.2,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⲆⲆᐃⲆΔ, 20], [bs.ⵠᐃⲆⵠⲆ, Ok]],
    w: 0,
    f: 1,
    ⲆⵠΔ: Rl,
    e: Cn,
    id: as.ⵠΔⲆⵠⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ᐃᐃᐃΔΔ,
    time: 0.1,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ⵠᐃⲆⵠⲆ, 1]],
    w: rl,
    f: 0,
    ⲆⵠΔ: 0,
    e: 1,
    id: as.ᐃⵠΔⵠⵠᐃΔ,
    ΔᐃⲆⲆ: bs.ᐃᐃᐃΔΔ,
    time: 0.3333333333333333,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 60], [bs.ᐃΔⲆᐃ, Ja], [bs.ⲆⲆⲆⵠΔ, 2]],
    w: Ue,
    f: ur,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃᐃΔⲆⵠ,
    ΔᐃⲆⲆ: bs.ᐃᐃΔⲆⵠ,
    time: 0.1,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, 40], [bs.ᐃΔⲆᐃ, 45]],
    w: j,
    f: 0,
    ⲆⵠΔ: Cq,
    e: 0,
    id: as.ⵠΔᐃΔᐃ,
    ΔᐃⲆⲆ: bs.ⵠΔᐃΔᐃ,
    time: 0.05,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ⵠΔᐃΔᐃ, 1], [bs.ᐃⲆⲆΔΔ, 40], [bs.ᐃᐃⲆⲆⲆ, 1]],
    w: 1,
    f: 1,
    ⲆⵠΔ: Ag,
    e: rl,
    id: as.ⲆⲆᐃᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆⲆᐃᐃΔ,
    time: jq / 200,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 50], [bs.ᐃΔⲆᐃ, Ms]],
    w: Eo,
    f: Nl,
    ⲆⵠΔ: ur,
    e: Gr,
    id: as.ᐃⲆⲆⵠⲆ,
    ΔᐃⲆⲆ: bs.ᐃⲆⲆⵠⲆ,
    time: 0.011111111111111112,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 60], [bs.ΔΔΔΔ, 120]],
    w: 1,
    f: gr,
    ⲆⵠΔ: 0,
    e: Fj,
    id: as.ⵠⵠⲆᐃΔ,
    ΔᐃⲆⲆ: bs.ⵠⵠⲆᐃΔ,
    time: 0.011111111111111112,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔΔ, 70], [bs.ΔⲆⲆΔ, 140]],
    w: Ag,
    f: 0,
    ⲆⵠΔ: _a,
    e: 0,
    id: as.ΔⲆⵠᐃⵠ,
    ΔᐃⲆⲆ: bs.ΔⲆⵠᐃⵠ,
    time: 0.011111111111111112,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔⲆⲆΔ, 80], [bs.ΔⲆⲆⲆ, 160]],
    w: 1,
    f: qn,
    ⲆⵠΔ: Tg,
    e: Fj,
    id: as.ⲆᐃⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ⲆᐃⵠⵠⲆ,
    time: 1 / 90,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 90], [bs.ⵠΔⲆΔ, 180]],
    w: 1,
    f: 0,
    ⲆⵠΔ: tj,
    e: Ih,
    id: as.ᐃΔΔᐃⵠ,
    ΔᐃⲆⲆ: bs.ᐃΔΔᐃⵠ,
    time: Eo / 90,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 70]],
    w: 1,
    f: Cn,
    ⲆⵠΔ: tj,
    e: Cq,
    id: as.ⲆΔⲆᐃⵠ,
    ΔᐃⲆⲆ: bs.ⲆΔⲆᐃⵠ,
    time: 0.1,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 70], [bs.ΔΔΔᐃ, 50]],
    w: 1,
    f: 0,
    ⲆⵠΔ: Gr,
    e: tj,
    id: as.ⵠᐃᐃᐃΔ,
    ΔᐃⲆⲆ: bs.ⵠᐃᐃᐃΔ,
    time: ag / Qa,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 40], [bs.ᐃΔⲆᐃ, 40]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: Cq,
    id: as.ⵠᐃⵠᐃᐃ,
    ΔᐃⲆⲆ: bs.ⵠᐃⵠᐃᐃ,
    time: 0.1,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ⲆⲆΔΔΔ, 1], [bs.ᐃⲆⲆⲆᐃ, 1]],
    w: 0,
    f: Tg,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ᐃⵠⲆᐃΔ,
    ΔᐃⲆⲆ: bs.ᐃⵠⲆᐃΔ,
    time: 1 / ar,
    ᐃΔΔ: cs.ΔⵠᐃⲆΔ
  }, {
    r: [[bs.ΔⵠᐃΔᐃ, 30], [bs.ⲆⵠΔᐃᐃ, zs], [bs.ΔⲆⲆⲆ, 150], [bs.ΔᐃΔΔΔ, Ka]],
    w: zs,
    f: 1,
    ⲆⵠΔ: Gs,
    e: 0,
    id: as.ⲆⵠⲆⲆⲆ,
    ΔᐃⲆⲆ: bs.ⲆⵠⲆⲆⲆ,
    time: zs / 120,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⲆⵠⲆⲆⲆ, Al], [bs.ᐃⲆⲆⵠΔ, 1], [bs.ⵠΔⲆΔ, 150], [bs.ⵠᐃΔᐃⲆ, 2]],
    w: Ok,
    f: 1,
    ⲆⵠΔ: 1,
    e: Qs,
    id: as.ⲆᐃⵠᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆᐃⵠᐃΔ,
    time: Ej / 180,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃⲆΔⵠΔ, 1], [bs.ⲆⲆⲆΔᐃ, Uh], [bs.ᐃⲆⲆᐃᐃ, ia], [bs.ⲆⲆⲆⵠΔ, 10]],
    w: Oj,
    f: 0,
    ⲆⵠΔ: Ih,
    e: 0,
    id: as.ΔᐃΔⲆᐃ,
    ΔᐃⲆⲆ: bs.ΔᐃΔⲆᐃ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔⵠᐃΔᐃ, Ja], [bs.ᐃᐃⵠⵠᐃ, Gs], [bs.ΔⲆⲆⲆ, 150], [bs.ΔᐃΔΔΔ, og]],
    w: Ue,
    f: As,
    ⲆⵠΔ: 1,
    e: ne,
    id: as.ⲆⲆΔᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆⲆΔᐃΔ,
    time: 0.008333333333333333,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⲆⲆΔᐃΔ, Oj], [bs.ⵠΔΔΔΔ, 1], [bs.ⵠΔⲆΔ, 150], [bs.ⵠᐃΔᐃⲆ, vk]],
    w: 1,
    f: ag,
    ⲆⵠΔ: Oj,
    e: ne,
    id: as.ΔⲆⵠⲆᐃ,
    ΔᐃⲆⲆ: bs.ΔⲆⵠⲆᐃ,
    time: Zq / 180,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, yg], [bs.ⲆⲆⲆⵠΔ, Eg]],
    w: Ue,
    f: 0,
    ⲆⵠΔ: Gr,
    e: 0,
    id: as.ΔⵠⵠΔⲆ,
    ΔᐃⲆⲆ: bs.ΔⵠⵠΔⲆ,
    time: 0.05,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 30]],
    w: 1,
    f: Ih,
    ⲆⵠΔ: qn,
    e: 0,
    id: as.ⵠⲆΔⵠᐃ,
    ΔᐃⲆⲆ: bs.ⵠⲆΔⵠᐃ,
    time: ag / sj,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 200], [bs.ⲆⲆⲆⵠΔ, ss], [bs.ⲆⲆⲆⵠⵠ, 4], [bs.ΔⵠⵠΔⲆ, Al]],
    w: Ag,
    f: _a,
    ⲆⵠΔ: Gr,
    e: gr,
    id: as.ᐃΔᐃᐃⲆ,
    ΔᐃⲆⲆ: bs.ᐃΔᐃᐃⲆ,
    time: 0.04,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 20], [bs.ᐃᐃⲆⵠᐃ, zs]],
    w: Gs,
    f: 0,
    ⲆⵠΔ: ur,
    e: qk,
    id: as.ᐃᐃΔⵠᐃ,
    ΔᐃⲆⲆ: bs.ᐃᐃΔⵠᐃ,
    time: 1 / Vh,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔΔ, 200], [bs.ⲆⲆⲆⵠΔ, 12], [bs.ᐃᐃⲆⵠᐃ, 4], [bs.ⲆⲆⲆⵠⵠ, Ph], [bs.ᐃΔᐃᐃⲆ, 1]],
    w: Gs,
    f: uh,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠᐃⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ⵠᐃⲆⵠᐃ,
    time: 0.03333333333333333,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔΔ, ir], [bs.ⲆⲆⲆⵠⵠ, 1]],
    w: j,
    f: 0,
    ⲆⵠΔ: rl,
    e: _a,
    id: as.ⵠⵠⵠΔⲆ,
    ΔᐃⲆⲆ: bs.ⵠⵠⵠΔⲆ,
    time: 1 / Hs,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆΔ, 200], [bs.ΔⵠᐃΔᐃ, Ln], [bs.ᐃᐃⲆⵠᐃ, 8], [bs.ⲆⲆⲆⵠⵠ, 8], [bs.ⵠᐃⲆⵠᐃ, 1]],
    w: Fh,
    f: Cq,
    ⲆⵠΔ: qn,
    e: Ih,
    id: as.ⵠⵠⵠᐃΔ,
    ΔᐃⲆⲆ: bs.ⵠⵠⵠᐃΔ,
    time: 1 / 35,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆΔ, Va], [bs.ⲆⲆⲆⵠⵠ, 1]],
    w: ag,
    f: 0,
    ⲆⵠΔ: Fj,
    e: Cq,
    id: as.ᐃⲆΔΔⲆ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔΔⲆ,
    time: ag / El,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 200], [bs.ΔⵠᐃΔᐃ, ih], [bs.ⲆⲆⲆⵠⵠ, dg], [bs.ⵠᐃᐃᐃⵠ, 8], [bs.ⵠⵠⵠᐃΔ, 1]],
    w: Oj,
    f: Ih,
    ⲆⵠΔ: 0,
    e: qn,
    id: as.ⲆⵠⲆΔⲆ,
    ΔᐃⲆⲆ: bs.ⲆⵠⲆΔⲆ,
    time: 0.025,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔⲆⲆⲆ, 10], [bs.ⵠᐃᐃᐃⵠ, jq]],
    w: Ok,
    f: ur,
    ⲆⵠΔ: Cn,
    e: ur,
    id: as.ⵠⲆΔⲆⲆ,
    ΔᐃⲆⲆ: bs.ⵠⲆΔⲆⲆ,
    time: 1 / 15,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠΔⲆΔ, 200], [bs.ΔⵠᐃΔᐃ, 10], [bs.ᐃΔᐃⵠΔ, 1], [bs.ⲆⵠⲆΔⲆ, 1]],
    w: 1,
    f: 0,
    ⲆⵠΔ: tj,
    e: 0,
    id: as.ⲆᐃᐃⵠⲆ,
    ΔᐃⲆⲆ: bs.ⲆᐃᐃⵠⲆ,
    time: 1 / 45,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠΔⲆΔ, xk], [bs.ⵠᐃᐃᐃⵠ, $l], [bs.ᐃᐃⲆΔⲆ, 1]],
    w: As,
    f: 0,
    ⲆⵠΔ: ne,
    e: tj,
    id: as.ΔⵠⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ΔⵠⵠⵠⲆ,
    time: As / 15,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃⲆⲆΔΔ, 200], [bs.ΔⵠᐃΔᐃ, 10], [bs.ᐃᐃⵠⵠᐃ, zs], [bs.ⲆᐃᐃⵠⲆ, 1]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: uh,
    id: as.ⲆᐃⲆΔⵠ,
    ΔᐃⲆⲆ: bs.ⲆᐃⲆΔⵠ,
    time: 0.02,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃⲆⲆΔΔ, 10], [bs.ᐃᐃⲆⲆⲆ, 1]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: uh,
    id: as.ΔΔⲆΔΔ,
    ΔᐃⲆⲆ: bs.ΔΔⲆΔΔ,
    time: Gs / zl,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔΔᐃ, 100]],
    w: Eo,
    f: qn,
    ⲆⵠΔ: 0,
    e: ur,
    id: as.ᐃⲆⵠⵠΔ,
    ΔᐃⲆⲆ: bs.ᐃⲆⵠⵠΔ,
    time: ag / 25,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃⲆⵠⵠΔ, ag], [bs.ᐃΔⲆᐃ, No], [bs.ΔΔΔᐃ, 50]],
    w: Fh,
    f: 0,
    ⲆⵠΔ: 0,
    e: Nl,
    id: as.ᐃᐃΔᐃᐃ,
    ΔᐃⲆⲆ: bs.ᐃᐃΔᐃᐃ,
    time: Al / 40,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃᐃΔᐃᐃ, zs], [bs.ΔΔΔΔ, 50], [bs.ᐃΔⲆᐃ, 50], [bs.ΔΔΔᐃ, 50]],
    w: 1,
    f: 0,
    ⲆⵠΔ: ne,
    e: tj,
    id: as.ⲆⲆᐃⵠᐃ,
    ΔᐃⲆⲆ: bs.ⲆⲆᐃⵠᐃ,
    time: 0.02,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⲆⲆᐃⵠᐃ, Oj], [bs.ΔⲆⲆΔ, 50], [bs.ΔΔΔΔ, 50], [bs.ᐃΔⲆᐃ, 50]],
    w: 1,
    f: rl,
    ⲆⵠΔ: vq,
    e: 0,
    id: as.ΔΔⵠⲆⲆ,
    ΔᐃⲆⲆ: bs.ΔΔⵠⲆⲆ,
    time: 0.014285714285714285,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔΔⵠⲆⲆ, Eo], [bs.ΔⲆⲆⲆ, 50], [bs.ΔⲆⲆΔ, 50], [bs.ΔΔΔΔ, 50]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: Cq,
    id: as.Ⲇⵠᐃᐃⵠ,
    ΔᐃⲆⲆ: bs.Ⲇⵠᐃᐃⵠ,
    time: 1 / 90,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.Ⲇⵠᐃᐃⵠ, Ag], [bs.ⵠΔⲆΔ, 50], [bs.ΔⲆⲆⲆ, 50], [bs.ΔⲆⲆΔ, 50]],
    w: 1,
    f: 0,
    ⲆⵠΔ: tj,
    e: 0,
    id: as.ⵠΔⲆⵠᐃ,
    ΔᐃⲆⲆ: bs.ⵠΔⲆⵠᐃ,
    time: j / 120,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ᐃᐃⲆⲆΔ, 1], [bs.ΔΔΔΔ, 200]],
    w: 1,
    f: Zq,
    ⲆⵠΔ: Fh,
    e: Qs,
    id: as.ⲆⲆⵠΔⲆ,
    ΔᐃⲆⲆ: bs.ⲆⲆⵠΔⲆ,
    time: zs / 60,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔᐃΔΔⵠ, 1], [bs.ΔΔΔΔ, 200]],
    w: aa,
    f: 1,
    ⲆⵠΔ: 1,
    e: Cn,
    id: as.ⵠⲆⲆⵠΔ,
    ΔᐃⲆⲆ: bs.ⵠⲆⲆⵠΔ,
    time: 0.016666666666666666,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⲆⲆΔⵠΔ, Ag], [bs.ΔΔΔΔ, 200], [bs.ΔᐃΔΔΔ, Ok]],
    w: Gs,
    f: 1,
    ⲆⵠΔ: 1,
    e: 0,
    id: as.ⲆⲆⲆᐃᐃ,
    ΔᐃⲆⲆ: bs.ⲆⲆⲆᐃᐃ,
    time: Ej / 60,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ΔⲆⲆΔᐃ, Uh], [bs.ᐃΔⲆᐃΔ, ha], [bs.ⲆⲆⲆⵠΔ, 6]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: tj,
    id: as.ᐃⲆᐃΔⲆ,
    ΔᐃⲆⲆ: bs.ᐃⲆᐃΔⲆ,
    time: Ue / 10,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃΔⲆᐃΔ, nn], [bs.ⲆⲆⲆⵠΔ, tg]],
    w: Ok,
    f: 0,
    ⲆⵠΔ: 0,
    e: Ih,
    id: as.ⵠΔᐃᐃⲆ,
    ΔᐃⲆⲆ: bs.ⵠΔᐃᐃⲆ,
    time: 0.1,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ᐃⲆᐃΔⲆ, jq], [bs.ⲆⲆⵠⵠΔ, 1], [bs.ⲆⲆΔᐃᐃ, ci], [bs.ΔⵠᐃΔᐃ, 5], [bs.ⲆⲆⲆⵠⵠ, 8]],
    w: 1,
    f: Cn,
    ⲆⵠΔ: 0,
    e: qn,
    id: as.ᐃΔΔⵠⲆ,
    ΔᐃⲆⲆ: bs.ᐃΔΔⵠⲆ,
    time: j / 60,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⵠΔᐃᐃⲆ, 1], [bs.ᐃᐃⲆᐃⲆ, 1], [bs.ⲆⲆΔᐃᐃ, ih], [bs.ΔⵠᐃΔᐃ, 5], [bs.ⲆⲆⲆⵠⵠ, ss]],
    w: 1,
    f: Cq,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠⲆᐃⵠΔ,
    ΔᐃⲆⲆ: bs.ⵠⲆᐃⵠΔ,
    time: Ag / 60,
    ᐃΔΔ: cs.ᐃⵠΔΔⵠ
  }, {
    r: [[bs.ⲆΔⲆⵠⵠ, zs]],
    w: 0,
    f: 0,
    ⲆⵠΔ: 1,
    e: Qs,
    id: as.ΔΔⵠᐃⲆ,
    ΔᐃⲆⲆ: bs.ΔΔⵠᐃⲆ,
    time: Ue / 5,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ΔΔΔᐃ, Wh], [bs.ⲆⲆⲆⵠΔ, aa]],
    w: jq,
    f: 0,
    ⲆⵠΔ: Fj,
    e: 0,
    id: as.ⲆΔⲆⵠⵠ,
    ΔᐃⲆⲆ: bs.ⲆΔⲆⵠⵠ,
    time: Oj / 5,
    ᐃΔΔ: cs.ⵠⵠⵠⵠΔ
  }, {
    r: [[bs.ᐃΔⲆᐃ, 100], [bs.ⵠᐃⵠⲆΔ, 30]],
    w: 1,
    f: Ag,
    ⲆⵠΔ: uh,
    e: 0,
    id: as.ᐃᐃᐃⲆⵠ,
    ΔᐃⲆⲆ: bs.ᐃᐃᐃⲆⵠ,
    time: 1 / pj,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 20]],
    w: 1,
    f: Cn,
    ⲆⵠΔ: 0,
    e: Tg,
    id: as.Δᐃᐃᐃᐃ,
    ΔᐃⲆⲆ: bs.Δᐃᐃᐃᐃ,
    time: 0.2,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, Mk], [bs.ᐃΔⲆᐃ, 50], [bs.ᐃΔⲆᐃΔ, 5], [bs.ΔⲆⲆΔᐃ, 5], [bs.ⲆⲆⲆⵠΔ, Zh]],
    w: Fh,
    f: 0,
    ⲆⵠΔ: Tg,
    e: rl,
    id: as.ᐃⲆΔᐃⲆ,
    ΔᐃⲆⲆ: bs.ᐃⲆΔᐃⲆ,
    time: jq / 20,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 250], [bs.ΔⵠᐃΔᐃ, ih], [bs.ⲆⲆΔᐃᐃ, 2], [bs.ⵠΔⵠᐃᐃ, vk]],
    w: 1,
    f: 0,
    ⲆⵠΔ: uh,
    e: 0,
    id: as.ⲆⵠⵠᐃΔ,
    ΔᐃⲆⲆ: bs.ⲆⵠⵠᐃΔ,
    time: 0.02,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 250], [bs.ⲆⲆⲆⵠΔ, 10], [bs.ⲆⲆΔᐃᐃ, re], [bs.ⲆⲆⲆⵠⵠ, 8]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠⲆⵠⵠⵠ,
    ΔᐃⲆⲆ: bs.ⵠⲆⵠⵠⵠ,
    time: 0.02,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ⲆⲆⲆⵠΔ, 10], [bs.ΔⲆⲆΔᐃ, sq], [bs.ᐃΔⲆᐃΔ, 4], [bs.ⵠⲆΔᐃᐃ, 50]],
    w: Eo,
    f: 0,
    ⲆⵠΔ: Cq,
    e: 0,
    id: as.ⵠΔⲆᐃⵠ,
    ΔᐃⲆⲆ: bs.ⵠΔⲆᐃⵠ,
    time: Oj / Do,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 250], [bs.ⲆⲆⲆⵠΔ, 10], [bs.ᐃⵠΔΔΔ, xk], [bs.ᐃᐃⲆⵠᐃ, Dn]],
    w: Zq,
    f: 0,
    ⲆⵠΔ: 0,
    e: 0,
    id: as.ⵠᐃⵠⵠΔ,
    ΔᐃⲆⲆ: bs.ⵠᐃⵠⵠΔ,
    time: 0.02,
    ᐃΔΔ: cs.ⵠᐃΔΔΔ
  }, {
    r: [[bs.ΔΔΔᐃ, 40]],
    w: Ok,
    f: 0,
    ⲆⵠΔ: Cq,
    e: 0,
    id: as.ⵠⲆⲆᐃᐃ,
    ΔᐃⲆⲆ: bs.ⵠⲆⲆᐃᐃ,
    time: j / cl,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠⲆⲆᐃᐃ, 1], [bs.ᐃΔⲆᐃ, 40], [bs.ΔΔΔᐃ, 50]],
    w: 1,
    f: Qs,
    ⲆⵠΔ: 0,
    e: ne,
    id: as.ⵠᐃⵠⵠⲆ,
    ΔᐃⲆⲆ: bs.ⵠᐃⵠⵠⲆ,
    time: Al / 10,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠᐃⵠⵠⲆ, Fh], [bs.ΔΔΔΔ, 40], [bs.ᐃΔⲆᐃ, 50], [bs.ΔΔΔᐃ, 60]],
    w: Gs,
    f: 0,
    ⲆⵠΔ: 0,
    e: ne,
    id: as.ⵠⲆⲆⵠⵠ,
    ΔᐃⲆⲆ: bs.ⵠⲆⲆⵠⵠ,
    time: jq / ir,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠⲆⲆⵠⵠ, j], [bs.ΔⲆⲆΔ, 40], [bs.ΔΔΔΔ, 70], [bs.ᐃΔⲆᐃ, 80]],
    w: zs,
    f: Nl,
    ⲆⵠΔ: 0,
    e: vq,
    id: as.ΔᐃΔⲆΔ,
    ΔᐃⲆⲆ: bs.ΔᐃΔⲆΔ,
    time: j / 30,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ΔᐃΔⲆΔ, j], [bs.ΔⲆⲆⲆ, 40], [bs.ΔⲆⲆΔ, 70], [bs.ΔΔΔΔ, 110]],
    w: 1,
    f: Cq,
    ⲆⵠΔ: Cn,
    e: 0,
    id: as.ⵠⲆᐃⲆⵠ,
    ΔᐃⲆⲆ: bs.ⵠⲆᐃⲆⵠ,
    time: jq / 60,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }, {
    r: [[bs.ⵠⲆᐃⲆⵠ, 1], [bs.ⵠΔⲆΔ, 50], [bs.ΔⲆⲆⲆ, 80], [bs.ΔⲆⲆΔ, 110]],
    w: 1,
    f: 0,
    ⲆⵠΔ: 0,
    e: Tg,
    id: as.ᐃΔΔΔᐃ,
    ΔᐃⲆⲆ: bs.ᐃΔΔΔᐃ,
    time: ag / 90,
    ᐃΔΔ: cs.ⵠᐃⵠⵠ
  }];
  const Rs = En;
  Tr = 300;
  ΔΔᐃⵠ = {
    ᐃᐃΔⵠᐃⵠⵠ: Tr++,
    ⵠᐃᐃⲆⲆᐃⵠ: Tr++,
    ᐃⲆᐃΔᐃⵠⲆ: Tr++,
    ⲆΔⵠΔΔⲆⲆ: Tr++,
    ΔⵠᐃΔᐃⵠⲆ: Tr++,
    ⲆⲆᐃᐃⲆⲆⲆ: Tr++,
    ΔΔⵠᐃΔⵠΔ: Tr++,
    ΔⵠΔᐃⵠᐃⲆ: Tr++,
    ⲆᐃⲆᐃᐃΔⵠ: Tr++,
    ᐃΔΔⵠᐃⲆⵠ: Tr++,
    ⵠΔᐃΔⵠⵠⵠ: Tr++,
    ΔΔⲆᐃᐃⵠΔ: Tr++,
    EMPTY: Tr++,
    ⵠⲆⵠⲆⲆⲆΔ: Tr++,
    ⵠᐃΔⵠᐃΔᐃ: Tr++,
    ΔⲆΔᐃΔᐃᐃ: Tr++,
    ᐃⲆᐃᐃᐃⲆⵠ: Tr++,
    ⲆⵠⲆΔΔᐃΔ: Tr++,
    ᐃⵠΔᐃⲆⵠⵠ: Tr++,
    ΔⵠΔⵠΔⲆⵠ: Tr++,
    ΔᐃᐃᐃⵠΔΔ: Tr++,
    ⵠⵠⵠⲆΔⲆΔ: Tr++,
    ⵠᐃⲆⲆΔ: Tr++,
    ΔᐃⵠⵠⲆⲆⲆ: Tr++,
    ΔΔⲆⵠ: Tr++,
    ΔⵠΔΔᐃⲆⵠ: Tr++,
    ⵠᐃᐃⵠⲆΔᐃ: Tr++,
    ᐃΔⵠⲆᐃΔᐃ: Tr++,
    ⵠΔⵠⲆᐃΔⲆ: Tr++,
    ΔⲆⵠⵠⵠⵠⲆ: Tr++,
    ⵠⲆΔᐃᐃⲆΔ: Tr++,
    ⵠⲆⲆⵠⵠΔΔ: Tr++,
    POINTS: Tr++,
    ΔⲆᐃⲆΔΔⵠ: Tr++,
    ⲆΔΔΔⵠᐃᐃ: Tr++,
    ⲆᐃⵠⵠΔΔᐃ: Tr++,
    ΔᐃΔⵠⵠⲆΔ: Tr++,
    ⲆΔⵠⵠᐃΔᐃ: Tr++,
    ΔΔⵠⵠⵠⲆΔ: Tr++,
    ⲆⵠᐃᐃΔⲆⵠ: Tr++,
    ⵠⵠⲆΔⵠᐃⲆ: Tr++,
    ⵠⲆᐃᐃⵠⵠⲆ: Tr++,
    ᐃⵠⲆᐃⵠⵠⲆ: Tr++,
    ΔᐃⲆⲆⵠⲆⲆ: Tr++
  };
  function Hg() {
    qt[bs.ᐃΔΔΔᐃ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    qt[bs.ⵠⲆᐃⲆⵠ] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    qt[bs.ΔᐃΔⲆΔ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    qt[bs.ⵠⲆⲆⵠⵠ] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    qt[bs.ⵠᐃⵠⵠⲆ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    qt[bs.ⵠⲆⲆᐃᐃ] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    qt[bs.ᐃⲆⲆⵠⲆ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    qt[bs.ⵠⵠⲆᐃΔ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    qt[bs.ΔⲆⵠᐃⵠ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    qt[bs.ⲆᐃⵠⵠⲆ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    qt[bs.ᐃΔΔᐃⵠ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    qt[bs.ⵠΔⲆⵠᐃ] = ["Reidite Shield", "A must for the pros of the getaway", p[pr], "Damage: 6", "Players Defense: 6"];
    qt[bs.Ⲇⵠᐃᐃⵠ] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    qt[bs.ΔΔⵠⲆⲆ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    qt[bs.ⲆⲆᐃⵠᐃ] = ["Gold Shield", "When it's golden, it's always better.", p[xh], "Damage: 3", "Players Defense: 3"];
    qt[bs.ᐃᐃΔᐃᐃ] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    qt[bs.ᐃⲆⵠⵠΔ] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    qt[bs.ⵠᐃᐃᐃΔ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    qt[bs.ΔᐃⲆⲆᐃ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    qt[bs.ΔΔⲆΔΔ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    qt[bs.ⲆᐃⲆΔⵠ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    qt[bs.ΔⵠⵠⵠⲆ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    qt[bs.ⲆᐃᐃⵠⲆ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    qt[bs.ⵠⲆΔⲆⲆ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    qt[bs.ⲆⵠⲆΔⲆ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    qt[bs.ᐃⲆΔΔⲆ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    qt[bs.ⵠⵠⵠᐃΔ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    qt[bs.ⵠⵠⵠΔⲆ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    qt[bs.ⵠᐃⲆⵠᐃ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    qt[bs.ᐃᐃΔⵠᐃ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    qt[bs.ᐃΔᐃᐃⲆ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    qt[bs.ⵠⲆΔⵠᐃ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    qt[bs.ΔⵠⵠΔⲆ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    qt[bs.ⲆⲆᐃᐃΔ] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    qt[bs.ⲆⲆⵠΔⵠ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    qt[bs.ⲆΔΔᐃⵠ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    qt[bs.ⵠᐃᐃᐃⵠ] = ["Vulture Feather", "From a deadly vulture"];
    qt[bs.ᐃⲆⲆΔΔ] = ["Emerald", "How many golden breads can you get from it?"];
    qt[bs.ᐃᐃⲆⲆⲆ] = ["Sand Worm Juice", "I don't want to know how you got this."];
    qt[bs.ΔΔΔΔⵠ] = ["Turban", "Useful to survive in the desert."];
    qt[bs.ᐃⵠⲆⵠᐃ] = ["Ninja outfit", "Essential to survive in the desert"];
    qt[bs.ΔⲆΔⵠⵠ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    qt[bs.ⵠⲆⵠⵠⵠⵠⲆ] = ["Pilot Glasses"];
    qt[bs.ᐃⵠᐃⲆⲆ] = ["Tamed Boar", "Fast on lands and slow on water."];
    qt[bs.ΔⲆⲆⲆⲆ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    qt[bs.ΔΔΔᐃⵠ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    qt[bs.ᐃΔᐃᐃⵠ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    qt[bs.ᐃΔⲆᐃⲆ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    qt[bs.ⲆⵠΔΔⲆ] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    qt[bs.ⵠΔⲆᐃⵠ] = ["Saddle", "Hit a boar with it to tame it."];
    qt[bs.ⵠⲆΔΔⲆ] = ["Witch Hat", "You're a wizard Starvy!"];
    qt[bs.ΔΔⲆⲆⵠ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    qt[bs.ⲆⵠᐃⵠΔ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    qt[bs.ⲆΔⲆⲆⲆ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    qt[bs.Ⲇᐃⵠᐃⵠ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    qt[bs.ᐃⲆΔⵠⲆ] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    qt[bs.ⵠⲆⵠⵠⵠ] = ["Sled", "You are faster with it in the snow"];
    qt[bs.ⲆⵠⵠᐃΔ] = ["Boat", "You are faster with it in the water"];
    qt[bs.ⵠᐃⵠⵠΔ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    qt[bs.ᐃΔⵠⲆΔ] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    qt[bs.ⲆⲆⲆⵠⵠ] = ["Penguin Feather", "From a deadly cute penguin."];
    qt[bs.ᐃᐃⲆⵠᐃ] = ["Hawk Feather", "From a deadly hawk."];
    qt[bs.ⵠΔⲆⲆⵠ] = ["Cactus", "Food : 20", "Water : 10"];
    qt[bs.ᐃᐃⵠⲆⵠ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    qt[bs.ΔⲆⵠⲆΔ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    qt[bs.ᐃⵠⵠⵠⲆ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    qt[bs.ⲆᐃᐃΔᐃ] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    qt[bs.ᐃΔΔᐃⲆ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    qt[bs.ⵠᐃᐃⲆᐃ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    qt[bs.ΔΔᐃⵠΔ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    qt[bs.ⲆᐃⵠⲆⵠ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    qt[bs.ⲆⲆᐃᐃᐃ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    qt[bs.ΔᐃᐃⵠⲆ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    qt[bs.ᐃⵠᐃⵠⵠ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    qt[bs.ⲆⲆⲆΔⵠ] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    qt[bs.ⵠⵠⵠⲆⵠ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    qt[bs.ⵠΔⵠⵠᐃ] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    qt[bs.ᐃⵠΔᐃⵠ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    qt[bs.ᐃᐃᐃⲆᐃ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    qt[bs.ᐃΔᐃᐃΔ] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    qt[bs.ⲆⵠᐃᐃΔ] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    qt[bs.ΔⵠⲆⲆⵠ] = ["Pitchfork", "Perfect for gathering"];
    qt[bs.ⲆⲆⵠⵠⲆ] = ["Golden Pitchfork", "Essential for a real farmer."];
    qt[bs.ΔᐃᐃᐃⵠᐃΔ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    qt[bs.ⵠⲆᐃⲆⵠⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    qt[bs.ΔⲆⵠⲆΔⲆᐃ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    qt[bs.ⵠΔⵠΔⵠⵠᐃ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    qt[bs.ⲆⵠⲆⵠⵠⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    qt[bs.ΔⲆⵠⵠⲆᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    qt[bs.ᐃⲆⲆⵠΔ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    qt[bs.ⵠΔΔΔΔ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    qt[bs.ΔⲆⵠⲆᐃ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    qt[bs.ΔⲆΔᐃⲆ] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    qt[bs.ⵠᐃΔᐃⲆ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    qt[bs.ⲆᐃⵠᐃΔ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    qt[bs.ⵠⵠⵠⵠⲆ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    qt[bs.ᐃⵠⵠᐃⲆ] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    qt[bs.ᐃᐃⲆΔⲆ] = ["Flame", "It's hot!"];
    qt[bs.ᐃⵠⵠⲆⵠ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    qt[bs.ᐃⲆⲆΔⵠ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    qt[bs.ΔᐃΔⵠᐃ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    qt[bs.ⵠΔⲆΔ] = ["Reidite", "The ultimate ore"];
    qt[bs.ⲆⵠΔᐃᐃ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    st[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    st[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    st[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    st[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    st[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    st[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    st[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    st[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    st[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    st[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    st[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    st[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    st[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    st[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    st[38] = ["You died crushed by an angry baby mammoth."];
    st[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    st[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠⲆᐃᐃⵠⵠⲆ] = "A sandstorm is approaching in a few seconds.";
    qt[ΔΔᐃⵠ.ⵠⵠⲆΔⵠᐃⲆ] = "The sandstorm will soon stop.";
    qt[ΔΔᐃⵠ.ΔᐃⲆⲆⵠⲆⲆ] = "A blizzard is approaching in a few seconds.";
    qt[ΔΔᐃⵠ.ᐃⵠⲆᐃⵠⵠⲆ] = "The blizzard will soon stop.";
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " BACK TO THE GAME";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Share on Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Share on Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Kill";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Days survived";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Building method: Free. Press G to change";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Building method: Grid. Press G to change";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById(p[Gl]).innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < ll; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = p[As];
    qt[bs.ᐃⵠⲆΔᐃ] = ["Hand"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["Dirt", "Dirty!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["Sand", "I got it in my eyes!"];
    qt[bs.ΔΔΔᐃ] = ["Wood", "You can't get enough of it!"];
    qt[bs.ᐃΔⲆᐃ] = ["Stone", "Also called a rock"];
    qt[bs.ΔΔΔΔ] = ["Gold", "Be generous, give it to others"];
    qt[bs.ΔⲆⲆΔ] = ["Diamond", "What will you make with it?"];
    qt[bs.ΔⲆⲆⲆ] = ["Amethyst", "It's Mauve like Lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["Flour", "Used in cooking"];
    qt[bs.ⲆΔΔⲆᐃ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["Candies", "Only for children!", "Food: 20"];
    qt[bs.ΔⵠΔⲆΔ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["Garland", "Perfect decoration for roofs"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["Berry", "Berry tasty!", "Food: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    qt[bs.ⵠΔΔΔⵠ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    qt[bs.ⲆΔⲆΔᐃ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["Thorn bush", "It stings!"];
    qt[bs.ΔΔᐃⲆΔ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["Ice", "Useful for making cakes and water"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    qt[bs.ᐃΔⲆᐃΔ] = ["Rabbit Fur", "That rabbit was so cute..."];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["Pure Fur", "You're a bread factory"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["Dark Fur", "You get ready to do something wrong"];
    qt[bs.ⲆⲆΔᐃᐃ] = ["Winter Fur", "These animals just wanted a hug..."];
    qt[bs.ⵠΔⵠᐃᐃ] = ["Scales", "It smells like fish!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["Kraken Skin", "Weren't you too scared?"];
    qt[bs.ⵠΔⵠΔⲆ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    qt[bs.ΔΔⲆⵠᐃ] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["Workbench", "Very useful to craft all kinds of objects"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["Cord", "Used in crafting Hats and Bag"];
    qt[bs.ΔⵠᐃΔᐃ] = ["Diamond Cord", "Used in crafting Special Hats"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["Chest", "Allows you to store items", "Durability: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    qt[bs.ᐃᐃⲆⵠΔ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    qt[bs.ΔⵠⲆΔΔ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    qt[bs.ΔΔⵠⵠⵠ] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    qt[bs.ΔⲆΔᐃⵠ] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    qt[bs.ᐃⲆΔᐃᐃ] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    qt[bs.ⵠⲆᐃᐃⲆ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", p[oa], "You also calm down aggressive monsters twice as fast"];
    qt[bs.ⲆⵠΔᐃⲆ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", p[ci]];
    qt[bs.ΔᐃⵠᐃⲆ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", p[oj]];
    qt[bs.ᐃⲆᐃΔⲆ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", p[js]];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    qt[bs.ⲆᐃΔΔΔ] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    qt[bs.Δⵠᐃᐃᐃ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    qt[bs.ⵠᐃⲆᐃᐃ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["Peasant", "Your plants grow faster", p[kg]];
    qt[bs.ᐃΔΔⵠⲆ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    qt[bs.ⵠⲆᐃⵠΔ] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    qt[bs.ΔᐃΔΔΔ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    qt[bs.ᐃᐃⲆⲆΔ] = ["Green Gemstone", "You didn't cheat, promise?"];
    qt[bs.ΔᐃΔΔⵠ] = ["Orange Gemstone", "Only a real pirate can find it!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["Blue Gemstone", "For too kind people"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    qt[bs.ᐃᐃᐃΔΔ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["Empty Bottle", "You can fill this bottle near a water source"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["Bag", "More space for your items!"];
    qt[bs.ᐃⵠΔΔΔ] = ["Paper", "Used in book-crafting"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["Lock", "Allow you to lock your chest"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["Lock-pick", "Allows you to unlock one chest"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    qt[bs.Δᐃᐃᐃᐃ] = ["Sign", "Leave a message to others", "Durability: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["Well", "Allows bottle filling", "Durability: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "You cannot join this server";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "Kicked: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "Your key is already used by someone else";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "Your key is wrong";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "You have an old version, you need to clear your cache";
    qt[ΔΔᐃⵠ.ΔΔⵠⵠⵠⲆΔ] = "Your client version is too recent for this server. The server is being updated";
    qt[ΔΔᐃⵠ.ⲆⵠᐃᐃΔⲆⵠ] = "Wrong password! To enter a password: https://starve.io/?password=...";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "There are no more new resources";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "You survived 1 day";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "You survived ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " days";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "You are dead ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "Server cannot find spawn location! Spam the play button!";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "Server is full! Spam the play button!";
    qt[ΔΔᐃⵠ.EMPTY] = "Resource is empty";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "Inventory is full (right-click to empty items)";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " is dead";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "This is not the right tool";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "You joined a team";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "You are dead";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = " joined the team";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "Your team was destroyed";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = "You left the team";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " left the team";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "Someone stole your token :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "Choose a server";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "players";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "total players";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "players on this mode";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    st[0] = ["You were killed for no reason"];
    st[Al] = ["You starved to death, as the name of the game implies"];
    st[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    st[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    st[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    st[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    st[wh] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    st[pa] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    st[dg] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    st[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    st[El] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    st[hg] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    st[bk] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    st[Yk] = ["You died of thirst. Better drink your own piss."];
    st[Bk] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    st[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    st[Qg] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    st[Ea] = ["Your skin's falling apart, the sun killed you."];
    st[18] = ["Garlic stored in your pockets boiled your brain."];
    st[zj] = ["As a vampire, don't stand near the garlic cloves."];
    st[hh] = ["You ate garlic as a vampire, what did you expect?"];
    st[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const Ug = lg;
  function Yg() {
    qt[bs.ⲆⵠΔᐃᐃ] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " BACK TO THE GAME";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Share on Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Share on Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Kill";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Days survived";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Building method: Free. Press G to change";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Building method: Grid. Press G to change";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById(p[Ka]).innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    qt[bs.ᐃⵠⲆΔᐃ] = ["Рука"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["Земля", "Грязно!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["Песок", "Он в моих глазах!"];
    qt[bs.ΔΔΔᐃ] = ["Дерево", "Постоянно нужно больше!"];
    qt[bs.ᐃΔⲆᐃ] = ["Камень", "Твердый"];
    qt[bs.ΔΔΔΔ] = ["Золото", "Будьте щедры, давайте его другим"];
    qt[bs.ΔⲆⲆΔ] = ["Алмаз", "Что вы создадите с помощью него?"];
    qt[bs.ΔⲆⲆⲆ] = ["Аметист", "Он сиреневый, как Lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["Мука", "Используется в готовке"];
    qt[bs.ⲆΔΔⲆᐃ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["Конфеты", "Только для детей!", "Еда: 20"];
    qt[bs.ΔⵠΔⲆΔ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["Гирлянда", "Прекрасная декорация для крыши"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    qt[bs.ⵠΔΔΔⵠ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    qt[bs.ⲆΔⲆΔᐃ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["Колючий Куст", "Это больно!"];
    qt[bs.ΔΔᐃⲆΔ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["Лёд", "Используется для изготовления тортов и воды"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    qt[bs.ᐃΔⲆᐃΔ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["Чёрная Шкура", "Вы готовы делать зло."];
    qt[bs.ⲆⲆΔᐃᐃ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    qt[bs.ⵠΔⵠᐃᐃ] = ["Чешуя", "Она пахнет рыбой!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["Шкура Кракена", "Вы не испугались?"];
    qt[bs.ⵠΔⵠΔⲆ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    qt[bs.ΔΔⲆⵠᐃ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["Верстак", "Необходим для создания многих предметов"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    qt[bs.ΔⵠᐃΔᐃ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    qt[bs.ᐃᐃⲆⵠΔ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    qt[bs.ΔⵠⲆΔΔ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    qt[bs.ΔΔⵠⵠⵠ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    qt[bs.ΔⲆΔᐃⵠ] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    qt[bs.ᐃⲆΔᐃᐃ] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    qt[bs.ⲆⵠΔᐃⲆ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    qt[bs.ΔᐃⵠᐃⲆ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    qt[bs.ᐃⲆᐃΔⲆ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    qt[bs.ⲆᐃΔΔΔ] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    qt[bs.Δⵠᐃᐃᐃ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    qt[bs.ᐃΔΔⵠⲆ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    qt[bs.ⵠⲆᐃⵠΔ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["Шар Дракона", "Даётся за квест"];
    qt[bs.ΔᐃΔΔΔ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    qt[bs.ᐃᐃⲆⲆΔ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    qt[bs.ΔᐃΔΔⵠ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    qt[bs.ᐃᐃᐃΔΔ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["Рюкзак", "Больше места для ваших предметов!"];
    qt[bs.ᐃⵠΔΔΔ] = ["Бумага", "Используется при создании книги"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    qt[bs.Δᐃᐃᐃᐃ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["Крыша", "Немного скрывает вас и согревает!"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "Вы не можете зайти на этот сервер";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "Выгнаны: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "Ваш ключ уже используется кем-то";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "Ваш ключ неправильный";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "У вас старая версия, вам нужно очистить кеш";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "Ресурсов больше нет";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "Вы выжили 1 день";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "Вы выжили ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " дней";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "Вы умерли ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "Сервер заполнен! Спамьте кнопку играть!";
    qt[ΔΔᐃⵠ.EMPTY] = "Ресурсы закончились";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " умер";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "Это не тот инструмент";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "Вы вошли в команду";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "Вы умерли";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = " вошёл в команду";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "Ваша команда была разрушена";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = "Вы покинули команду";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " покинул команду";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "Кто-то использует ваш токен :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "Выберите сервер";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "игроков";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "игроков всего";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "игроков в этом режиме";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    st[0] = ["Вы были убиты без причины"];
    st[$l] = ["Вы умерли от голода, как название игры подразумевает это"];
    st[Xr] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    st[Ka] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    st[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    st[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    st[Mg] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    st[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    st[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    st[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    st[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    st[$h] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    st[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    st[mk] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    st[tr] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    st[ci] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    st[In] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    st[_q] = ["Твоя кожа разваливается, солнце убило тебя"];
    st[Bn] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    st[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    st[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    st[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  const Kg = ls;
  function Vg() {
    qt[bs.ⲆⵠΔᐃᐃ] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " BACK TO THE GAME";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Share on Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Share on Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Kill";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Days survived";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Building method: Free. Press G to change";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Building method: Grid. Press G to change";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = p[ag];
    qt[bs.ᐃⵠⲆΔᐃ] = ["mão"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["terra", "está sujo!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["areia", "entrou nos meus olhos!"];
    qt[bs.ΔΔΔᐃ] = ["madeira", "você não pode pegar o suficiente disso!"];
    qt[bs.ᐃΔⲆᐃ] = ["pedra", "também chamado rocha"];
    qt[bs.ΔΔΔΔ] = ["ouro", "seja generoso, dê para outros"];
    qt[bs.ΔⲆⲆΔ] = ["diamante", "o que você irá fazer com isso?"];
    qt[bs.ΔⲆⲆⲆ] = ["ametista", "é mauve como lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["farinha", "usada na cozinha"];
    qt[bs.ⲆΔΔⲆᐃ] = ["biscoito", "biscoito da vovó", "comida: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["doces", "apenas para crianças!", "comida: 100"];
    qt[bs.ΔⵠΔⲆΔ] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["pisca-pisca", "decoração perfeita de telhado"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["berry", "Berry saborosa!", "comida: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    qt[bs.ⵠΔΔΔⵠ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    qt[bs.ⲆΔⲆΔᐃ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["mato de espinhos", "pica!"];
    qt[bs.ΔΔᐃⲆΔ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["gelo", "útil para fazer bolo e água"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    qt[bs.ᐃΔⲆᐃΔ] = ["pele de coelho", "o coelho era tão fofo..."];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["pele pura", "você é uma fábrica de pão"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["pele negra", "você está pronto para fazer algo errado"];
    qt[bs.ⲆⲆΔᐃᐃ] = ["pele de inverno", "ele só queria um abraço"];
    qt[bs.ⵠΔⵠᐃᐃ] = ["escala", "é pequeno como peixe!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["pele do kraken", "você não está com medo?"];
    qt[bs.ⵠΔⵠΔⲆ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    qt[bs.ΔΔⲆⵠᐃ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["linha", "usada para fazer chapéus e mochila"];
    qt[bs.ΔⵠᐃΔᐃ] = ["linha de diamante", "usada para fazer chapéus especiais"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    qt[bs.ⲆᐃᐃᐃⲆΔⵠⵠⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    qt[bs.ΔⵠⲆΔΔ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    qt[bs.ΔΔⵠⵠⵠ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    qt[bs.ΔⲆΔᐃⵠ] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    qt[bs.ᐃⲆΔᐃᐃ] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    qt[bs.ⲆⵠΔᐃⲆ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    qt[bs.ΔᐃⵠᐃⲆ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    qt[bs.ᐃⲆᐃΔⲆ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    qt[bs.ⲆᐃΔΔΔ] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    qt[bs.Δⵠᐃᐃᐃ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    qt[bs.ᐃΔΔⵠⲆ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    qt[bs.ⵠⲆᐃⵠΔ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["esfera do dragão", "dado na questt"];
    qt[bs.ΔᐃΔΔΔ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    qt[bs.ᐃᐃⲆⲆΔ] = ["pedra verde", "você não vai trapacear, promete?"];
    qt[bs.ΔᐃΔΔⵠ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["pedra azul", "para pessoas muito gentis"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    qt[bs.ᐃᐃᐃΔΔ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["regador", "permite regar as plantas", "dano: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["mochila", "mais espaço para seus itens!"];
    qt[bs.ᐃⵠΔΔΔ] = ["papel", "usado para fazer o livro"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["fechadura", "permite você trancar seu baú"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["chave", "permite destrancar um baú"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    qt[bs.Δᐃᐃᐃᐃ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["telhado", "esconde você um pouco e te esquenta!"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "você não pode entrar no servidor";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "kickado: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "sua chave está em uso por outra pessoa";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "sua chave está errada";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "você tem uma versão velha, limpe seu cache";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "não tem mais recursos";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "você sobreviveu 1 dia";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "você sobreviveu ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " dias";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "você está morto ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "servidor está cheio! spam o botão de play!";
    qt[ΔΔᐃⵠ.EMPTY] = "não tem recursos";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "inventário está cheio (botão direito para deletar itens)";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " está morto";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "essa não é a ferramenta certa";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "você entrou no time";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "você está morto";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = "entrou no time";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "seu time foi destruido";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = "você saiu do time";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " saiu do time";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "alguém roubou sua ficha :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "escolha um servidor";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "jogadores";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "jogadores totais";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "jogadores nesse modo";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    st[0] = ["você morreu sem motivo"];
    st[1] = ["você morreu de fome, como o jogo diz"];
    st[zk] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    st[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    st[Aq] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    st[gg] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    st[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    st[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    st[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    st[Dk] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    st[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    st[hg] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    st[bk] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    st[C] = ["você morreu de sede. melhor beber sua própria urina."];
    st[14] = ["você sabia que você morre afogado? agora você sabe."];
    st[Zl] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    st[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    st[ja] = ["sua pele caindo aos pedaços, o sol te matou."];
    st[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    st[Qq] = ["como vampiro, não chegue perto do alho."];
    st[20] = ["você comeu alho como vampiro, o que você esperava?"];
    st[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const Zg = ua;
  const Xg = Qh;
  function $g(b, c, d, e, f, g) {
    oi(Ys, b, c, d, e, f, g);
    const h = km($s[0], $s[aa], $s[2], $s[nn], $s[4], $s[gh]);
    (function (b, c, d, e, f, g) {
      ui(Ys, b, c, d, e, f, g);
      const h = $w($s[tj], $s[j], $s[re], $s[3]);
      const a = On($s[xt], $s[Ui], $s[ms], $s[1], $s[Zn], $s[3]);
    })($s[Ih], $s[1], $s[2], $s[3], $s[ea], $s[5]);
    return h ^ 53907;
  }
  const Ss = zk;
  function Ts(a, b) {
    const c = (8 << (a >> 16 & 255)) + (ka << (a >> 24 & 255)) + (24 << (a >> 8 & 255)) + (0 << (a & 255));
    const d = ~(b & 43846) & 43846 | ~(b & 43846) & b;
    const e = vf(c, d, c, d);
    vf(c, d, c, d);
    return ~(e & 62190) & 62190 | ~(e & 62190) & e;
  }
  function Us() {
    qt[bs.ⲆⵠΔᐃᐃ] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " BACK TO THE GAME";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Share on Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Share on Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Kill";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Days survived";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Building method: Free. Press G to change";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Building method: Grid. Press G to change";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById(p[co]).innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; rr > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    qt[bs.ᐃⵠⲆΔᐃ] = ["Mano"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["Tierra", "¡Tan limpia como mis manos!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["Arena", "¡Tengo arena en mis ojos!"];
    qt[bs.ΔΔΔᐃ] = ["Madera", "¡Nunca hay suficiente!"];
    qt[bs.ᐃΔⲆᐃ] = ["Piedra", "También llamada roca."];
    qt[bs.ΔΔΔΔ] = ["Oro", "Sé generoso, compártelo con los otros"];
    qt[bs.ΔⲆⲆΔ] = ["Diamante", "¿Que vas a hacer con él?"];
    qt[bs.ΔⲆⲆⲆ] = ["Amatista", "Es Mauve como Lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["Harina", "Usada para cocinar."];
    qt[bs.ⲆΔΔⲆᐃ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    qt[bs.ΔⵠΔⲆΔ] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["Guirnalda", "Perfecta para decorar el techo"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["Baya", "No es venenosa.", "Comida: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    qt[bs.ⵠΔΔΔⵠ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    qt[bs.ⲆΔⲆΔᐃ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["Planta de Espinas", "¡Te daña!"];
    qt[bs.ΔΔᐃⲆΔ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["Hielo", "Bueno para hacer tartas y agua"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    qt[bs.ᐃΔⲆᐃΔ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    qt[bs.ⲆⲆΔᐃᐃ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    qt[bs.ⵠΔⵠᐃᐃ] = ["Escamas", "¡Huele a pescado!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    qt[bs.ⵠΔⵠΔⲆ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    qt[bs.ΔΔⲆⵠᐃ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["Hilo", "Usado para craftear ropa y mochila"];
    qt[bs.ΔⵠᐃΔᐃ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    qt[bs.ᐃᐃⲆⵠΔ] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    qt[bs.ΔⵠⲆΔΔ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    qt[bs.ΔΔⵠⵠⵠ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    qt[bs.ΔⲆΔᐃⵠ] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    qt[bs.ᐃⲆΔᐃᐃ] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    qt[bs.ⲆⵠΔᐃⲆ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    qt[bs.ΔᐃⵠᐃⲆ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    qt[bs.ᐃⲆᐃΔⲆ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    qt[bs.ⲆᐃΔΔΔ] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    qt[bs.Δⵠᐃᐃᐃ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    qt[bs.ᐃΔΔⵠⲆ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    qt[bs.ⵠⲆᐃⵠΔ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["Esfera del Dragón", "Dada en la misión"];
    qt[bs.ΔᐃΔΔΔ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    qt[bs.ᐃᐃⲆⲆΔ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    qt[bs.ΔᐃΔΔⵠ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["Gema Azul", "Para gente muy amable"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    qt[bs.ᐃᐃᐃΔΔ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["Botella Vacia", "La puedes llenar de agua"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["Regadera Vacía", "La tienes que llenar de agua"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["Mochila", "¡Mas espacio para tus cosas!"];
    qt[bs.ᐃⵠΔΔΔ] = ["Hoja", "Usada para hacer un libro"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["Cerradura", "Te permite cerrar tu cofre"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["Llave", "Te permite abrir un cofre cerrado"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    qt[bs.Δᐃᐃᐃᐃ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["Techo", "Te esconde un poco y te protege del frío"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "No puedes unirte a este servidor";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "Expulsado: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "Tu llave ya está usada";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "Tu llave está mal";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "Tienes una versión antigua, limpia tu cache";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "No hay mas recursos";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "Has sobrevivido 1 día";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "Has sobrevivido ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " días";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "Estás muerto ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    qt[ΔΔᐃⵠ.EMPTY] = "Recurso vacio";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " está muerto";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "Esta no es la herramienta correcta";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "Te has unido a un equipo";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "Estás muerto";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = " se unió al equipo";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "Tu equipo ha sido destruido";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = "Has dejado el equipo";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " dejo el equipo ";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "Alguien te robó tu token :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "Elige un servidor";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "jugadores";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "total de jugadores";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "Jugadores en este modo de juego";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    st[rl] = ["Has muerto por ninguna razón"];
    st[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    st[sh] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    st[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    st[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    st[Ya] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    st[eh] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    st[nl] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    st[ys] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    st[Mn] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    st[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    st[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    st[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    st[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    st[tr] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    st[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    st[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    st[17] = ["Tu piel se cayó, el sol te quemó."];
    st[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    st[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    st[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    st[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const Vs = Xl;
  const Ws = Hl;
  function Xs(b, c, d, e, f, g) {
    Sj(Ys, b, c, d, e, f, g);
    const h = ($s[0] | 39270) & ~($s[Qs] & 39270);
    const a = (23086 + (~(h & 8482) & (h | 8482) ^ $s[3])) % 65396;
    return ((85 + ((8 << ((a ^ $s[4]) >> bl & Qh)) + (16 << ((a ^ $s[vs]) >> 8 & el)) + (0 << ((a ^ $s[uj]) & 255)) + (24 << ((a ^ $s[4]) >> 24 & 255)) ^ $s[sj])) * 16807 + 0) % 2147483647;
  }
  let Ys;
  const Zs = il;
  let $s = qr;
  const _s = kk;
  kk = function () {
    Ys = ce(ji(12));
    $s = yk(Ys);
    if (_s) {
      _s();
    }
  };
  const at = Dl;
  function bt() {
    qt[bs.ⲆⵠΔᐃᐃ] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " BACK TO THE GAME";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Share on Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Share on Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Kill";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Days survived";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Building method: Free. Press G to change";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Building method: Grid. Press G to change";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = Gr; a < or; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = p[aa];
    qt[bs.ᐃⵠⲆΔᐃ] = ["Hand"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["Boden", "Dreckig!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    qt[bs.ΔΔΔᐃ] = ["Holz", "Du kannst niemals zu viel haben!"];
    qt[bs.ᐃΔⲆᐃ] = ["Stein", "Auch Fels gennant"];
    qt[bs.ΔΔΔΔ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    qt[bs.ΔⲆⲆΔ] = ["Diamant", "Was wirst du daraus machen?"];
    qt[bs.ΔⲆⲆⲆ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["Mehl", "wird fürs Backen gebraucht"];
    qt[bs.ⲆΔΔⲆᐃ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    qt[bs.ΔⵠΔⲆΔ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["Girlande", "perfekter Schmuck für Dächer"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["Beere", "Beeren lecker!", "Essen: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    qt[bs.ⵠΔΔΔⵠ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    qt[bs.ⲆΔⲆΔᐃ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["Dornenbusch", "Es sticht!"];
    qt[bs.ΔΔᐃⲆΔ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    qt[bs.ᐃΔⲆᐃΔ] = ["Hasenfell", "Der Hase war so süß..."];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["Klares Fell", "Du bist eine Brotfabrik"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    qt[bs.ⲆⲆΔᐃᐃ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    qt[bs.ⵠΔⵠᐃᐃ] = ["Schuppen", "Es riecht wie Fisch!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    qt[bs.ⵠΔⵠΔⲆ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    qt[bs.ΔΔⲆⵠᐃ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    qt[bs.ΔⵠᐃΔᐃ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    qt[bs.ᐃᐃⲆⵠΔ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", p[Fj]];
    qt[bs.ΔⵠⲆΔΔ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    qt[bs.ΔΔⵠⵠⵠ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", p[ur]];
    qt[bs.ΔⲆΔᐃⵠ] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", p[Qs]];
    qt[bs.ᐃⲆΔᐃᐃ] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ⲆⵠΔᐃⲆ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ΔᐃⵠᐃⲆ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ᐃⲆᐃΔⲆ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ⲆᐃΔΔΔ] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.Δⵠᐃᐃᐃ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ᐃΔΔⵠⲆ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ⵠⲆᐃⵠΔ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    qt[bs.ΔᐃΔΔΔ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    qt[bs.ᐃᐃⲆⲆΔ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    qt[bs.ΔᐃΔΔⵠ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["Blauer Edelstein", "Für sehr nette Leute"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    qt[bs.ᐃᐃᐃΔΔ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["Rucksack", "Mehr Platz im Inventar!"];
    qt[bs.ᐃⵠΔΔΔ] = ["Papier", "Wird fürs Büchermachen verwendet"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    qt[bs.Δᐃᐃᐃᐃ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "Du kannst diesem Server nicht beitreten";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "Gekickt: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "Dein Schlüssel ist falsch";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "Deine Version ist veraltet, säubere dein Cache";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "Es gibt keine neuen Ressourcen";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "Du hast einen Tag überlebt";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "Du hast überlebt ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " Tage";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "Du bist gestorben ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "Server ist voll! Drücke immer wieder auf spielen!";
    qt[ΔΔᐃⵠ.EMPTY] = "Ressource ist leer";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " ist gestorben";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "Das ist nicht das richtige Werkzeug";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "Du bist einem Team beigetreten";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "Du bist gestorben";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = " ist dem Team beigetreten";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "Dein Team wurde zerstört";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = "Du hast das Team verlassen";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " hat das Team verlassen";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "Jemand hat dein Token gestohlen :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "Suche dir ein Server aus";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "Spieler";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "alle Spieler";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "Spieler in diesem Modus";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    st[Tg] = ["Du wurdest ohne Grund getötet"];
    st[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    st[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    st[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    st[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    st[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    st[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    st[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    st[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    st[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    st[Ye] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    st[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    st[Za] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    st[N] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    st[Jl] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    st[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    st[Yl] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    st[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    st[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    st[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    st[Wh] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    st[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const ct = Uh;
  const dt = Sg;
  function et() {
    qt[bs.ⲆⵠΔᐃᐃ] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " BACK TO THE GAME";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Share on Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Share on Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "You can buy items on the shop in the next game with your points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Kill";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Days survived";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Building method: Free. Press G to change";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Building method: Grid. Press G to change";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById(p[Ka]).innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = tj; a < Ck; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = p[jq];
    qt[bs.ᐃⵠⲆΔᐃ] = ["Ręka"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["Ziemia", "Brudna!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["Piasek", "Mam go w oczach!"];
    qt[bs.ΔΔΔᐃ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    qt[bs.ᐃΔⲆᐃ] = ["Kamień", "Także nazywany skałą"];
    qt[bs.ΔΔΔΔ] = ["Złoto", "Bądź hojny, daj trochę innym"];
    qt[bs.ΔⲆⲆΔ] = ["Diament", "Co z nim zrobisz?"];
    qt[bs.ΔⲆⲆⲆ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["Mąka", "Używana w gotowaniu"];
    qt[bs.ⲆΔΔⲆᐃ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    qt[bs.ΔⵠΔⲆΔ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["Girlanda", "Idealna do dekorowania dachów"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    qt[bs.ⵠΔΔΔⵠ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    qt[bs.ⲆΔⲆΔᐃ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["Kolczasty krzew", "Kłuje!"];
    qt[bs.ΔΔᐃⲆΔ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["Lód", "Użyteczny do robienia ciast i wody"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    qt[bs.ᐃΔⲆᐃΔ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["Skóra", "Jesteś fabryką chleba"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    qt[bs.ⲆⲆΔᐃᐃ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    qt[bs.ⵠΔⵠᐃᐃ] = ["Łuski", "Pachnie jak ryba!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    qt[bs.ⵠΔⵠΔⲆ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    qt[bs.ΔΔⲆⵠᐃ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    qt[bs.ΔⵠᐃΔᐃ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    qt[bs.ᐃᐃⲆⵠΔ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    qt[bs.ΔⵠⲆΔΔ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    qt[bs.ΔΔⵠⵠⵠ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    qt[bs.ΔⲆΔᐃⵠ] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    qt[bs.ᐃⲆΔᐃᐃ] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    qt[bs.ⲆⵠΔᐃⲆ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    qt[bs.ΔᐃⵠᐃⲆ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    qt[bs.ᐃⲆᐃΔⲆ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    qt[bs.ⲆᐃΔΔΔ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    qt[bs.Δⵠᐃᐃᐃ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    qt[bs.ᐃΔΔⵠⲆ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    qt[bs.ⵠⲆᐃⵠΔ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["Smocza kula", "Zdobyta podczas zadania"];
    qt[bs.ΔᐃΔΔΔ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    qt[bs.ᐃᐃⲆⲆΔ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    qt[bs.ΔᐃΔΔⵠ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    qt[bs.ᐃᐃᐃΔΔ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    qt[bs.ᐃⵠΔΔΔ] = ["Papier", "Używany w tworzeniu książki"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    qt[bs.Δᐃᐃᐃᐃ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "Nie możesz dołączyć do tego serwera";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "Wyrzucony: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "Twój klucz jest aktualnie używany przez innego gracza";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "Twój klucz jest nieprawidłowy";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "Przeżyłeś 1 dzień";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "Przeżyłeś ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " dni";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "Jesteś martwy ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    qt[ΔΔᐃⵠ.EMPTY] = "Źródło jest puste";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " jest martwy";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "To nie jest właściwe narzędzie";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "Dołączyłeś do drużyny";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "Jesteś martwy";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = " dołączył do drużyny";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "Twoja drużyna została zniszczona";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = " Opuściłeś drużynę";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " opuścił drużynę";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "Ktoś ukradł twój żeton :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "Wybierz serwer";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "graczy";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "wszystkich graczy";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "graczy w tym trybie";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    st[Gr] = ["Zostałeś zabity bez powodu"];
    st[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    st[Xr] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    st[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    st[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    st[ha] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    st[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    st[Co] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    st[ls] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    st[E] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    st[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    st[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    st[lq] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    st[Gq] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    st[Bk] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    st[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    st[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    st[17] = ["Twoja skóra odpada, słońce cię zabija."];
    st[rk] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    st[bn] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    st[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    st[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function ft(a, b, c, d, e) {
    Mj(Ys, a, b, c, d, e);
    return (29543 + (function (a, b, c) {
      ti(Ys, a, b, c);
      const d = $g($s[0], $s[1], $s[tg], $s[vq], $s[Fh], $s[gc]);
      Rw($s[0], $s[1], $s[2], $s[ne], $s[Ag], $s[2]);
      return d ^ 21152;
    }($s[0], $s[ie], $s[Zn]) ^ Qw($s[ar], $s[Aq], $s[0], $s[ag], $s[2]))) % 65380;
  }
  const gt = Vs;
  const ht = ng;
  const it = nh;
  const jt = xj;
  function kt() {
    qt[bs.ⲆⵠΔᐃᐃ] = ["You feel a great power emanating from this orb"];
    st[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    qt[bs.ᐃⲆⲆᐃᐃ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] = " RETOUR AU JEU";
    qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] = " Partage sur Twitter";
    qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] = " Partage sur Facebook";
    qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    qt[ΔΔᐃⵠ.POINTS] = "points";
    qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] = "Score";
    qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] = "Tués";
    qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] = "Jours survécus";
    qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ] = "Mode de construction: Libre. Appuie sur G pour changer";
    qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ] = "Mode de construction: Grille. Appuie sur G pour changer";
    qt[bs.ⲆⲆⲆΔᐃ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    qt[bs.ΔΔⵠᐃⵠ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    qt[bs.ΔᐃΔⲆᐃ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    qt[bs.ᐃⲆΔᐃⲆ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < Qr; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    qt[bs.ᐃⵠⲆΔᐃ] = ["Main"];
    qt[bs.ⵠᐃⵠⲆΔ] = ["Terre", "C'est sale!"];
    qt[bs.ⵠⲆΔᐃᐃ] = ["Sable", "J'en ai dans les yeux"];
    qt[bs.ΔΔΔᐃ] = ["Bois", "Tu n'en auras jamais trop!"];
    qt[bs.ᐃΔⲆᐃ] = ["Pierre", "Aussi appelée roche"];
    qt[bs.ΔΔΔΔ] = ["Or", "Sois généreux, donne en aux autres"];
    qt[bs.ΔⲆⲆΔ] = ["Diamant", "Comme tes yeux! wesh"];
    qt[bs.ΔⲆⲆⲆ] = ["Améthyste", "C'est Mauve comme Lapa"];
    qt[bs.ⵠΔⵠΔⵠ] = ["Farine", "Utile pour la cuisine"];
    qt[bs.ⲆΔΔⲆᐃ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    qt[bs.ⲆΔᐃᐃΔ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    qt[bs.ⲆⲆⵠᐃᐃ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    qt[bs.ᐃⲆⲆⲆᐃ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    qt[bs.ⲆΔⲆⵠⲆ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    qt[bs.ΔᐃⵠⲆⵠ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    qt[bs.ⲆⲆΔΔΔ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    qt[bs.ᐃⵠⲆᐃΔ] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    qt[bs.ᐃⲆⵠᐃᐃ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    qt[bs.ΔⵠΔⲆΔ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    qt[bs.ⵠⵠᐃⵠᐃ] = ["Guirlandes", "Utilisable sur les toits"];
    qt[bs.ᐃⲆⲆⲆⵠ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    qt[bs.ᐃⲆΔᐃⵠ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    qt[bs.ΔⵠⲆⲆⲆ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    qt[bs.ᐃⵠⵠΔᐃ] = ["Blé", "Peut être transformé en farine dans les moulins"];
    qt[bs.ⵠΔΔΔⵠ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    qt[bs.ⲆΔⲆΔᐃ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    qt[bs.ᐃΔⵠⲆᐃ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    qt[bs.ᐃⵠΔⵠⲆ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    qt[bs.ᐃⲆᐃⵠΔ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    qt[bs.ⲆⲆΔⵠⲆ] = ["Ronces", "Ça pique!"];
    qt[bs.ΔΔᐃⲆΔ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    qt[bs.ⲆⲆᐃⲆΔ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    qt[bs.ⲆΔⲆᐃⵠ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    qt[bs.ΔⲆⲆΔᐃ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    qt[bs.ᐃΔⲆᐃΔ] = ["Peau de lapin", "Vous êtes un monstre"];
    qt[bs.ᐃᐃⲆᐃⲆ] = ["Fourrure blanche", "Tu es une usine à pain"];
    qt[bs.ⲆⲆⵠⵠΔ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    qt[bs.ⲆⲆΔᐃᐃ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    qt[bs.ⵠΔⵠᐃᐃ] = ["Écailles", "Ça sent le poisson!"];
    qt[bs.ᐃΔᐃⵠΔ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    qt[bs.ⵠΔⵠΔⲆ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    qt[bs.ΔΔⲆⵠᐃ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    qt[bs.ᐃⲆᐃΔⵠ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    qt[bs.ⲆⲆⲆⵠΔ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    qt[bs.ΔⵠᐃΔᐃ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    qt[bs.ΔⲆᐃᐃⲆ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    qt[bs.ⲆᐃⲆᐃΔ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    qt[bs.ᐃᐃᐃΔⵠ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    qt[bs.ΔᐃᐃΔⲆ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    qt[bs.ⵠΔΔⲆᐃ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    qt[bs.ⲆΔΔΔⲆ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    qt[bs.ⵠᐃᐃⵠⵠ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    qt[bs.ⲆⲆΔᐃΔ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    qt[bs.ⵠᐃΔⲆⵠ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    qt[bs.ⵠᐃⲆⲆⲆ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    qt[bs.ᐃᐃⲆⵠΔ] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    qt[bs.ⲆΔᐃⲆⵠ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    qt[bs.ΔΔᐃᐃᐃ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    qt[bs.ΔⵠⲆΔΔ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    qt[bs.ᐃⲆΔΔⵠ] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    qt[bs.ΔⵠΔⲆⵠ] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    qt[bs.ⵠⵠᐃⲆⲆ] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    qt[bs.Δᐃⵠᐃⵠ] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    qt[bs.ⵠⵠⲆⲆΔ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    qt[bs.ⵠⲆΔΔᐃ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    qt[bs.ΔΔⵠⵠⵠ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    qt[bs.ΔⵠΔΔΔ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    qt[bs.ΔΔᐃᐃⲆ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    qt[bs.ΔΔᐃΔᐃ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    qt[bs.ΔⵠΔΔⵠ] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    qt[bs.ⵠᐃΔΔⵠ] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    qt[bs.ΔⲆΔᐃⵠ] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    qt[bs.ᐃⲆΔᐃᐃ] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    qt[bs.ΔⵠⵠⲆΔ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    qt[bs.ⵠⲆᐃⲆΔ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    qt[bs.ᐃⲆΔⵠΔ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    qt[bs.ⵠⵠⲆⵠᐃ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    qt[bs.ⵠΔⵠⲆᐃ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    qt[bs.ⲆⵠⲆⲆⲆ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    qt[bs.ⲆΔΔⵠᐃ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ⲆⵠΔᐃⲆ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ΔᐃⵠᐃⲆ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ᐃⲆᐃΔⲆ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ⵠⲆⲆⵠᐃ] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ⲆᐃΔΔΔ] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.Δⵠᐃᐃᐃ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    qt[bs.ⵠΔᐃᐃⲆ] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ᐃΔΔⵠⲆ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ⵠⲆᐃⵠΔ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    qt[bs.ᐃⵠⵠᐃⵠ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    qt[bs.ⵠⵠⲆⵠⵠ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    qt[bs.ᐃᐃⵠⵠᐃ] = ["Orbe du Dragon", "Donné en Quête"];
    qt[bs.ΔᐃΔΔΔ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    qt[bs.ᐃᐃⲆⲆΔ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    qt[bs.ΔᐃΔΔⵠ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    qt[bs.ⲆⲆΔⵠΔ] = ["Gemme bleue", "Pour les gens trop gentils"];
    qt[bs.ⲆⲆⵠΔⲆ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    qt[bs.ⵠⲆⲆⵠΔ] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    qt[bs.ⲆⲆⲆᐃᐃ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    qt[bs.ΔΔⵠᐃⲆ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    qt[bs.ⲆΔⲆⵠⵠ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    qt[bs.ᐃᐃᐃΔΔ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    qt[bs.ⵠᐃⲆⵠⲆ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    qt[bs.ⲆᐃⵠⲆΔ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    qt[bs.ᐃⵠᐃⵠΔ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    qt[bs.ᐃⵠⲆΔ] = ["Sac", "Plus de place dans ton inventaire!"];
    qt[bs.ᐃⵠΔΔΔ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    qt[bs.ⵠᐃⵠⲆᐃ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    qt[bs.Δⵠᐃⵠⵠ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    qt[bs.ⵠᐃⵠΔΔ] = ["Cadenas", "Pour verrouiller un coffre"];
    qt[bs.ᐃⲆΔⲆᐃ] = ["Clé", "Pour déverrouiller un coffre"];
    qt[bs.ΔⵠᐃⵠΔ] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    qt[bs.ⲆΔⵠⲆᐃ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    qt[bs.Δᐃᐃᐃᐃ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    qt[bs.ΔⲆⵠⵠⲆ] = ["Toit", "Te cache un peu et te réchauffe"];
    qt[bs.ᐃᐃᐃⲆⵠ] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    qt[bs.Ⲇᐃᐃⵠᐃ] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    qt[bs.ᐃΔⵠⵠⲆ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    qt[bs.ⵠᐃᐃⲆΔ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    qt[bs.ⲆΔⲆⲆᐃ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    qt[bs.ⵠΔⵠⲆΔ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    qt[bs.ΔⵠⲆᐃⲆ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    qt[bs.ⵠΔᐃᐃΔ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    qt[bs.ᐃⲆᐃⵠⲆ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    qt[bs.ⵠΔΔᐃⲆ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    qt[bs.ⵠᐃⲆΔⵠ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    qt[bs.ⵠᐃᐃⲆⲆ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    qt[bs.ⵠⵠΔⲆⵠ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    qt[bs.ⵠᐃΔΔⲆ] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    qt[bs.ΔᐃⲆⵠⵠ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    qt[bs.ⵠΔⵠⲆⵠ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    qt[bs.ᐃⵠᐃᐃᐃ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    qt[bs.ᐃᐃΔⲆⵠ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    qt[bs.ⵠᐃⵠᐃᐃ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    qt[bs.ⵠΔᐃΔᐃ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ] = "Tu ne peux pas rejoindre le serveur";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] = "Expulsé: ";
    qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    qt[ΔΔᐃⵠ.ⲆΔⵠΔΔⲆⲆ] = "Ta clé est fausse";
    qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ] = "Tu as une vieille version, rafraichis tes caches";
    qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ] = "Il n'y a plus de nouvelles ressources";
    qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] = "Tu as survécu 1 jour";
    qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] = "Tu as survécu ";
    qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ] = " jours";
    qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ] = "Tu es mort ;-;";
    qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ] = "Le serveur est complet! Spam le bouton jouer";
    qt[ΔΔᐃⵠ.EMPTY] = "Cette ressource est vide";
    qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ] = " est mort";
    qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ] = "Ce n'est pas le bon outil";
    qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ] = "Tu as rejoins une équipe";
    qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ] = "Tu es mort";
    qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ] = " a rejoint l'équipe";
    qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ] = "Ton équipe a été détruite";
    qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ] = "Tu as quitté l'équipe";
    qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ] = " a quitté l'équipe";
    qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ] = "Quelqu'un a volé ton token :>";
    qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] = "Choisis un serveur";
    qt[ΔΔᐃⵠ.ΔΔⲆⵠ] = "joueurs";
    qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] = "joueurs";
    qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] = "joueurs dans ce mode";
    qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    st[tj] = ["Tu as été tué sans raison particulière, juste comme ça"];
    st[aa] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    st[Xh] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    st[Z] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    st[Ph] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    st[jt] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    st[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    st[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    st[ys] = ["Cet ours voulait juste un câlin."];
    st[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    st[no] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    st[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    st[Il] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    st[Oh] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    st[Vq] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    st[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    st[Ah] = ["Un kraken a 'kraké' tes os."];
    st[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    st[Wk] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    st[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    st[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    st[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ΔⵠᐃⲆᐃ = "Uuunnnggg";
    ᐃⲆⲆᐃΔΔΔ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  const lt = Xh;
  const mt = ol;
  function nt(b, c, d, e) {
    const f = (b | 62859) & ~(b & 62859);
    const g = (12345 + (c + 14844) * 1103515245) % 2147483648;
    const i = (2531011 + (d + 37526) * 214013) % 4294967296;
    const a = ((e + 55832) * 2147483629 + 2147483587) % 2147483647;
    const j = Df(f, g);
    const h = function (b, c, d, e) {
      const f = (b | 21186) & ~(b & 21186);
      const g = (24 << (c >> 24 & 255)) + (tq << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> gr & 255));
      const i = (d | 39899) & ~(d & 39899);
      const a = ((34299 + e) * 2147483629 + 2147483587) % 2147483647;
      const j = bf(f, g, i, a, f);
      Nr(g, i, a, f);
      return j ^ 58569;
    }(i, a, f, g);
    return (24 << ((j ^ h) >> 8 & 255)) + (16 << ((j ^ h) >> Jk & 255)) + (0 << ((j ^ h) >> vq & 255)) + (8 << ((j ^ h) >> 24 & 255));
  }
  const ot = cn;
  function pt(a, b) {
    Rj(Ys, a, b);
    const c = function (a, b) {
      mi(Ys, a, b);
      const c = tw($s[0], $s[1], $s[0]);
      ft($s[zs], $s[Cn], $s[Ok], $s[Rl], $s[1]);
      return c ^ 18663;
    }($s[0], $s[1]);
    Rw($s[0], $s[Fh], $s[qk], $s[Ej], $s[qn], $s[1]);
    return ~(c & 34551) & (c | 34551);
  }
  var qt = [];
  for (var rt = 0; rt < 344; rt++) {
    qt[rt] = "";
  }
  var st = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  const tt = bl;
  const ut = Kq;
  const vt = ph;
  const wt = Vh;
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Hg();
    } else if (a === "Français") {
      kt();
    } else if (a === "Deutsch") {
      bt();
    } else if (a === "Español") {
      Us();
    } else if (a === "Português") {
      Vg();
    } else if (a === "Русский") {
      Yg();
    } else if (a === "Polski") {
      et();
    }
    ⵠΔᐃΔⲆ = [];
    bx.ⵠⲆⵠᐃ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  Fa = "EN";
  const xt = rg;
  var yt = navigator.language || navigator.userLanguage;
  const zt = hg;
  switch (yt) {
    case "ru":
      Fa = "RU";
      break;
    case "en":
      Fa = "EN";
      break;
    case "es":
      Fa = "SP";
      break;
    case "fr":
      Fa = "FR";
      break;
    case "pl":
      Fa = "PL";
      break;
    case "de":
      Fa = "DE";
      break;
    case "pt":
      Fa = "PT";
  }
  const At = fq;
  const Bt = So;
  var Ct;
  if (Fa === "FR") {
    $(".md-languages label button").text("Français");
    Ct = kt;
  } else if (Fa === "PL") {
    $(".md-languages label button").text("Polski");
    Ct = et;
  } else if (Fa === "PT") {
    $(".md-languages label button").text("Português");
    Ct = Vg;
  } else if (Fa === "SP") {
    $(".md-languages label button").text("Español");
    Ct = Us;
  } else if (Fa === "RU") {
    $(".md-languages label button").text("Русский");
    Ct = Yg;
  } else if (Fa === "DE") {
    $(".md-languages label button").text("Deutsch");
    Ct = bt;
  } else {
    $(".md-languages label button").text("English");
    Ct = Hg;
  }
  const Et = D;
  ⵠᐃ = {
    ᐃᐃᐃΔⲆᐃᐃⵠⵠ: "img/logo.png",
    ⲆⵠⵠⲆⲆᐃⲆ: "img/mapday.png",
    ⲆᐃΔᐃⵠΔⲆ: "img/mapnight.png",
    ᐃΔᐃΔⲆᐃⵠᐃᐃ: "img/bigzday.png",
    ΔⲆⲆΔᐃⲆΔᐃᐃ: "img/bigznight.png",
    ΔΔΔⲆⵠⵠⲆ: "img/bigday-river1.png",
    ⲆΔⲆΔΔᐃΔᐃⵠ: "img/bigday-lake.png",
    ⵠᐃⵠⵠᐃⲆⲆ: "img/bigday-berry.png",
    ⲆⵠⵠⵠⲆⲆΔ: "img/bigday-stone1.png",
    ⲆⵠⲆΔᐃᐃᐃ: "img/bigday-stone2.png",
    ⲆᐃΔΔΔⲆΔ: "img/bigday-gold1.png",
    ΔᐃⵠⵠΔⵠⵠ: "img/bigday-gold2.png",
    ⵠⵠⵠⵠᐃᐃⲆ: "img/bigday-emerald1.png",
    ⵠⵠⲆΔΔⵠΔ: "img/bigday-emerald2.png",
    ᐃᐃᐃⲆᐃΔΔ: "img/bigday-amethyst.png",
    ⵠᐃⵠⲆΔⲆᐃ: "img/bigday-bear.png",
    ΔⲆΔⵠⲆⲆⲆ: "img/bigday-cave.png",
    ⵠⵠᐃΔΔᐃⵠ: "img/bigday-diamond.png",
    ⲆΔΔⲆⲆΔⲆ: "img/bigday-island.png",
    ⵠⵠΔⲆᐃΔⲆ: "img/bigday-reidite.png",
    ⲆⲆᐃⲆΔⵠⵠ: "img/bigday-spider.png",
    ΔΔⲆⵠΔⲆⵠ: "img/bigday-wolf.png",
    ⲆⲆᐃⲆⵠⵠᐃ: "img/bigday-fir-tree.png",
    ⲆΔΔΔⲆᐃⵠ: "img/bigday-fox.png",
    ΔᐃΔⲆⲆⲆⵠ: "img/bigday-kraken.png",
    ᐃΔᐃΔᐃᐃⲆ: "img/bigday-piranha.png",
    ᐃⵠᐃⵠᐃᐃⵠ: "img/bigday-cactus.png",
    ᐃⵠⲆⵠΔⵠⵠ: "img/bigday-magma.png",
    ⲆᐃᐃᐃΔᐃΔ: "img/bigday-river1.png",
    ⵠⲆΔⲆⵠⲆΔᐃⵠ: "img/bignight-lake.png",
    ΔⵠⲆⵠⲆⲆⲆⵠΔ: "img/bignight-berry.png",
    ⵠⲆⵠⵠΔΔⲆ: "img/bignight-stone1.png",
    Ⲇⵠᐃⵠᐃᐃᐃ: "img/bignight-stone2.png",
    ᐃⲆⲆΔⵠᐃⲆ: "img/bignight-gold1.png",
    ⵠⵠⵠⵠⵠⵠⵠ: "img/bignight-gold2.png",
    ΔⲆⵠⲆᐃⲆΔ: "img/bignight-emerald1.png",
    ⲆΔᐃΔⵠⲆΔ: "img/bignight-emerald2.png",
    ᐃⲆⲆᐃΔⵠⲆ: "img/bignight-amethyst.png",
    ⲆΔⵠΔⲆᐃⵠ: "img/bignight-bear.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/bignight-cave.png",
    ⲆⲆⲆⵠⲆⵠⵠ: "img/bignight-diamond.png",
    ⲆⲆᐃⵠⵠᐃⵠ: "img/bignight-island.png",
    ⲆΔⲆⲆᐃᐃⲆ: "img/bignight-reidite.png",
    ⲆⲆᐃᐃⲆⵠΔ: "img/bignight-spider.png",
    ΔᐃⵠΔⲆⲆⲆ: "img/bignight-wolf.png",
    ΔᐃᐃⵠⲆΔⵠ: "img/bignight-fir-tree.png",
    ΔⵠⲆΔᐃⲆΔ: "img/bignight-fox.png",
    ᐃΔⲆⵠⲆⲆⵠ: "img/bignight-kraken.png",
    ⲆᐃᐃⲆᐃΔᐃ: "img/bignight-piranha.png",
    ⵠᐃⵠⵠⵠᐃⲆ: "img/bignight-cactus.png",
    ⵠΔΔⵠᐃⲆᐃ: "img/bignight-magma.png",
    ΔᐃΔⲆⲆⵠⵠ: "img/bigday-desert.png",
    ⲆⵠⲆΔᐃᐃⲆ: "img/bigday-winter.png",
    ᐃⵠΔΔⵠΔᐃ: "img/bigday-lava.png",
    ΔΔΔⵠⲆⲆΔ: "img/bigday-forest.png",
    ᐃᐃⵠᐃⲆΔⲆ: "img/bignight-desert.png",
    ΔⵠΔΔⵠⵠⲆ: "img/bignight-winter.png",
    ᐃⲆᐃⲆᐃᐃⲆ: "img/bignight-lava.png",
    ⵠᐃᐃΔⲆᐃⲆ: "img/bignight-forest.png",
    ᐃⲆⵠⲆⵠᐃᐃ: "img/day-river-wave.png",
    ᐃᐃⵠΔⵠΔⵠ: "img/night-river-wave.png",
    ⲆⵠⲆΔⵠᐃᐃ: "img/day-fog0.png",
    ⵠᐃΔᐃΔⲆΔ: "img/day-fog1.png",
    ᐃⵠΔⵠⵠΔᐃ: "img/day-fog2.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/night-fog0.png",
    ᐃⵠⵠⵠᐃᐃⵠ: "img/night-fog1.png",
    ΔⵠⲆΔΔΔΔ: "img/night-fog2.png",
    ⲆⵠΔᐃΔΔᐃ: "img/day-fogdesert0.png",
    ΔᐃⵠΔⲆᐃΔ: "img/day-fogdesert1.png",
    ⵠⲆᐃᐃΔᐃᐃ: "img/day-fogdesert2.png",
    ΔΔΔⲆⵠᐃᐃ: "img/night-fogdesert0.png",
    ⵠΔⵠⵠᐃΔΔ: "img/night-fogdesert1.png",
    ⲆᐃⲆⲆΔⲆΔ: "img/night-fogdesert2.png",
    ⲆᐃᐃⲆⲆⵠΔ: "img/day-cross-server.png",
    ΔᐃⲆⵠᐃⵠⵠ: "img/day-here-server.png",
    ⵠΔⵠᐃⵠΔΔ: "img/day-finish-server.png",
    ⵠⵠⵠᐃⲆᐃⲆ: "img/day-item-server.png",
    ⵠΔΔΔᐃᐃⵠ: "img/night-cross-server.png",
    ΔᐃⵠⲆⲆⲆᐃ: "img/night-here-server.png",
    ΔⲆⵠΔᐃΔᐃ: "img/night-finish-server.png",
    ᐃᐃᐃΔⵠᐃⵠ: "img/night-item-server.png",
    ᐃᐃⲆⲆΔᐃΔ: "img/day-reidite0.png",
    ΔᐃⵠᐃⲆΔⲆ: "img/night-reidite0.png",
    ⵠⵠΔⵠⲆⵠⵠ: "img/day-reidite1.png",
    ⲆⲆΔⵠᐃΔΔ: "img/night-reidite1.png",
    ΔᐃΔⲆⲆΔᐃ: "img/day-reidite2.png",
    ᐃΔΔⵠⵠⲆⲆ: "img/night-reidite2.png",
    ⵠⵠⲆⲆⲆᐃⲆ: "img/day-lava1.png",
    ᐃᐃⲆᐃⲆᐃᐃ: "img/night-lava1.png",
    ΔΔΔⲆᐃⲆᐃ: "img/day-lava2.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/night-lava2.png",
    ᐃⵠᐃⲆΔᐃΔ: "img/day-lava3.png",
    ⲆᐃΔᐃⵠᐃΔ: "img/night-lava3.png",
    ᐃⲆⵠⲆΔΔⵠ: "img/day-lava4.png",
    ᐃⲆΔⵠΔΔⲆ: "img/night-lava4.png",
    ⵠⲆⵠⲆⵠⵠⵠ: "img/day-lava5.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/night-lava5.png",
    ⵠⲆΔΔᐃᐃΔ: "img/day-lava6.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/night-lava6.png",
    ΔΔΔΔΔᐃᐃ: "img/day-lava-ground1.png",
    ⵠᐃΔᐃⲆᐃⲆ: "img/night-lava-ground1.png",
    Ⲇⵠⵠᐃᐃᐃᐃ: "img/day-lava-ground2.png",
    ΔⵠᐃΔⵠⲆⲆ: "img/night-lava-ground2.png",
    ⵠᐃΔᐃᐃⵠⵠ: "img/day-lava-ground3.png",
    ᐃⲆⵠΔΔⵠΔ: "img/night-lava-ground3.png",
    ⲆⵠⲆⲆΔᐃᐃ: "img/day-lava-ground4.png",
    Δⵠᐃᐃⵠᐃⵠ: "img/night-lava-ground4.png",
    ΔΔᐃᐃᐃⲆⲆ: "img/day-lava-ground5.png",
    ⲆⵠⲆΔⵠⵠᐃ: "img/night-lava-ground5.png",
    ⲆΔⲆᐃⲆΔΔ: "img/day-lava-ground6.png",
    ᐃΔΔⵠΔᐃᐃ: "img/night-lava-ground6.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/day-fire-mob.png",
    ⵠⵠᐃⵠⵠΔⲆ: "img/night-fire-mob.png",
    ⵠᐃΔⲆᐃᐃⵠ: "img/hurt-fire-mob.png",
    ΔᐃⲆⲆΔᐃⵠ: "img/day-diamond-protection.png",
    ⲆᐃⵠᐃᐃΔΔ: "img/night-diamond-protection.png",
    ⲆᐃᐃⵠΔⲆΔ: "img/day-hand-diamond-protection.png",
    ⲆⲆΔᐃᐃⲆᐃ: "img/night-hand-diamond-protection.png",
    ΔⵠΔΔΔⵠᐃ: "img/inv-diamond-protection-out.png",
    ⲆⲆⲆⵠⵠⲆⵠ: "img/inv-diamond-protection-in.png",
    ᐃⵠⵠⲆᐃᐃᐃ: "img/inv-diamond-protection-click.png",
    ΔⲆᐃⵠΔᐃΔ: "img/day-amethyst-protection.png",
    ⵠⵠΔᐃⲆΔⲆ: "img/night-amethyst-protection.png",
    ΔΔⵠⵠᐃⵠⲆⲆⲆ: "img/day-hand-amethyst-protection.png",
    ⲆⵠΔᐃⲆⲆⲆΔⵠ: "img/night-hand-amethyst-protection.png",
    ⲆΔᐃΔΔⵠⲆ: "img/inv-amethyst-protection-out.png",
    ᐃΔᐃⲆᐃᐃⵠ: "img/inv-amethyst-protection-in.png",
    ⵠⵠΔⲆⵠⲆΔ: "img/inv-amethyst-protection-click.png",
    ⲆΔⵠⲆⵠΔⲆ: "img/day-reidite-sword.png",
    ᐃⵠΔⵠᐃⲆΔ: "img/night-reidite-sword.png",
    ΔⵠⲆⲆⲆᐃⵠ: "img/inv-reidite-sword-out.png",
    ⲆΔⵠⲆᐃᐃᐃ: "img/inv-reidite-sword-in.png",
    ⵠΔΔⲆΔΔΔ: "img/inv-reidite-sword-click.png",
    ᐃⲆⵠΔΔΔᐃ: "img/inv-reidite-out.png",
    ⵠᐃⲆᐃᐃⲆΔ: "img/inv-reidite-in.png",
    ⲆⵠⵠΔⲆΔⲆ: "img/inv-reidite-click.png",
    ⵠᐃⲆᐃⵠᐃᐃ: "img/inv-flame-out.png",
    ⵠⵠⵠΔⲆⲆΔ: "img/inv-flame-in.png",
    ⵠΔΔⵠᐃΔⲆ: "img/inv-flame-click.png",
    ⵠᐃᐃΔᐃΔᐃ: "img/day-magma-buble0.png",
    ⵠᐃΔⲆⵠⲆⲆ: "img/night-magma-buble0.png",
    ΔⵠⲆΔⵠΔᐃ: "img/day-magma-buble1.png",
    ⲆⲆⲆⲆⵠᐃⲆ: "img/night-magma-buble1.png",
    ⲆⵠᐃⲆΔᐃⲆ: "img/day-magma-buble2.png",
    ⲆⵠᐃⵠΔⲆⵠ: "img/night-magma-buble2.png",
    ΔⵠΔⲆⲆⲆⲆ: "img/day-lava-dragon.png",
    ΔᐃⵠᐃⲆⵠⵠ: "img/night-lava-dragon.png",
    ⵠⵠΔⲆΔⵠᐃᐃⲆ: "img/day-fire-dragon.png",
    ΔⵠΔΔᐃΔⵠⵠᐃ: "img/night-fire-dragon.png",
    ⵠΔⲆᐃⲆΔⲆ: "img/hurt-lava-dragon.png",
    ⲆΔΔΔⵠᐃⵠ: "img/day-lava-wing-left.png",
    ⲆΔΔⵠⵠΔⵠ: "img/night-lava-wing-left.png",
    ⲆⵠΔⵠᐃⵠᐃ: "img/day-lava-wing-right.png",
    ⵠᐃⲆΔⲆⵠΔ: "img/night-lava-wing-right.png",
    ⲆᐃⵠᐃⲆᐃⵠ: "img/hurt-lava-wing-left.png",
    ᐃΔᐃⵠⵠⵠᐃ: "img/hurt-lava-wing-right.png",
    ᐃᐃᐃΔᐃⵠΔ: "img/day-reidite-spear.png",
    ΔⲆΔΔⲆⲆⵠ: "img/night-reidite-spear.png",
    ⵠΔΔⵠᐃⵠᐃ: "img/inv-reidite-spear-out.png",
    ᐃΔⲆΔⵠⵠᐃ: "img/inv-reidite-spear-in.png",
    ⵠⲆΔᐃᐃⲆⲆ: "img/inv-reidite-spear-click.png",
    ΔⵠΔΔⲆᐃⵠ: "img/day-reidite-helmet.png",
    ⲆᐃⵠⵠᐃΔⵠ: "img/night-reidite-helmet.png",
    ΔⵠⵠⵠΔΔᐃ: "img/inv-reidite-helmet-out.png",
    ᐃⵠⵠᐃΔⵠⵠ: "img/inv-reidite-helmet-in.png",
    ⵠⵠᐃⵠΔⲆⵠ: "img/inv-reidite-helmet-click.png",
    ᐃⵠⲆΔΔⲆΔ: "img/day-hand-reidite-protection.png",
    ⵠΔⲆΔⵠⲆⵠ: "img/night-hand-reidite-protection.png",
    ⵠⲆⵠⵠⵠᐃΔ: "img/day-reidite-protection.png",
    ᐃᐃⲆᐃΔᐃᐃ: "img/night-reidite-protection.png",
    ⵠᐃⵠᐃⵠⲆⵠ: "img/inv-reidite-protection-out.png",
    ᐃⵠΔⲆⵠΔΔ: "img/inv-reidite-protection-in.png",
    ΔⲆⲆⲆᐃΔⲆ: "img/inv-reidite-protection-click.png",
    ᐃⲆⵠⲆⲆᐃᐃ: "img/day-lava-dragon-sword.png",
    ΔᐃΔᐃΔⵠΔ: "img/night-lava-dragon-sword.png",
    ᐃⵠⵠΔᐃⵠⵠ: "img/inv-lava-dragon-sword-out.png",
    ⵠΔⵠⲆⲆⵠΔ: "img/inv-lava-dragon-sword-in.png",
    ᐃΔᐃΔⲆΔΔ: "img/inv-lava-dragon-sword-click.png",
    ΔⵠᐃᐃⵠⲆᐃ: "img/day-lava-spear.png",
    ⲆᐃⵠⲆᐃΔⵠ: "img/night-lava-spear.png",
    ᐃᐃⵠᐃᐃΔⵠ: "img/inv-lava-spear-out.png",
    ᐃΔⵠⵠΔΔⵠ: "img/inv-lava-spear-in.png",
    ⲆⵠᐃΔⵠᐃⵠ: "img/inv-lava-spear-click.png",
    ⵠᐃᐃⲆⲆΔΔ: "img/day-lava-helmet.png",
    ⵠⲆⵠΔΔᐃⵠ: "img/night-lava-helmet.png",
    ΔⵠᐃᐃᐃⵠⲆ: "img/inv-lava-helmet-out.png",
    ⲆⵠΔᐃⵠⵠⵠ: "img/inv-lava-helmet-in.png",
    ⵠΔΔⲆΔⵠⲆ: "img/inv-lava-helmet-click.png",
    ΔⵠⲆᐃΔⲆⵠ: "img/day-witch-hat.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/night-witch-hat.png",
    ⲆⵠⵠᐃΔΔᐃ: "img/inv-witch-hat-out.png",
    ΔⵠΔⲆᐃⲆΔ: "img/inv-witch-hat-in.png",
    ΔΔⲆᐃⵠⵠⵠ: "img/inv-witch-hat-click.png",
    ΔⵠΔⵠⵠⲆΔ: "img/day-nimbus2000.png",
    ΔᐃⲆΔⵠᐃΔ: "img/night-nimbus2000.png",
    ΔⲆⵠⲆᐃΔᐃ: "img/inv-nimbus2000-out.png",
    ΔΔⲆⵠⲆⵠΔ: "img/inv-nimbus2000-in.png",
    ⵠⵠⵠⵠⲆᐃᐃ: "img/inv-nimbus2000-click.png",
    ⲆⲆⵠᐃⵠᐃΔ: "img/day-accessory1-pacques.png",
    ΔⵠⵠΔⵠᐃΔ: "img/night-accessory1-pacques.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/day-accessory2-pacques.png",
    ᐃΔΔᐃⵠⲆⵠ: "img/night-accessory2-pacques.png",
    ᐃΔⵠⵠⵠⵠⲆ: "img/day-accessory3-pacques.png",
    ᐃΔᐃᐃⵠΔⵠ: "img/night-accessory3-pacques.png",
    ᐃᐃΔᐃΔΔᐃ: "img/day-accessory5-pacques.png",
    ᐃⵠᐃΔⵠⲆⵠ: "img/night-accessory5-pacques.png",
    ⵠⲆⵠΔᐃΔΔ: "img/day-accessory6-pacques.png",
    ⲆⲆᐃᐃⵠⵠΔ: "img/night-accessory6-pacques.png",
    ᐃⲆΔⲆⵠⲆΔ: "img/day-accessory7-pacques.png",
    ⵠⲆⵠⵠᐃⵠⵠ: "img/night-accessory7-pacques.png",
    ⲆⵠⵠᐃⵠⲆΔ: "img/day-accessory8-pacques.png",
    ⵠⲆᐃΔΔⵠΔ: "img/night-accessory8-pacques.png",
    ᐃᐃᐃΔⵠⲆΔ: "img/day-bag-pacques.png",
    ⵠⲆⲆᐃΔⲆⲆ: "img/night-bag-pacques.png",
    ᐃᐃⵠΔⲆᐃⲆ: "img/day-carrot.png",
    ⲆᐃᐃⲆⵠᐃᐃ: "img/night-carrot.png",
    ⵠΔⵠΔⲆᐃⵠ: "img/day-carrot-dried.png",
    ⲆᐃⲆⲆΔᐃⲆ: "img/night-carrot-dried.png",
    ΔⵠᐃᐃⵠⵠΔ: "img/day-tomato-herb.png",
    ΔⲆΔⲆⲆΔΔ: "img/night-tomato-herb.png",
    ΔΔᐃⲆⲆⲆΔ: "img/day-tomato-herb-dried.png",
    ᐃⲆᐃⲆⵠΔΔ: "img/night-tomato-herb-dried.png",
    ᐃⵠᐃΔᐃΔⲆ: "img/day-tomato.png",
    ⲆᐃⲆᐃΔⲆⲆ: "img/night-tomato.png",
    ΔⲆⵠΔΔᐃⲆ: "img/inv-carrot-out.png",
    ΔᐃᐃⲆⵠΔⲆ: "img/inv-carrot-in.png",
    ᐃᐃⵠᐃⲆⲆᐃ: "img/inv-carrot-click.png",
    ⲆⵠΔⵠᐃⲆⲆ: "img/inv-tomato-out.png",
    ⲆⲆⵠᐃᐃᐃⵠ: "img/inv-tomato-in.png",
    ᐃᐃΔⲆⵠⵠᐃ: "img/inv-tomato-click.png",
    ᐃᐃⵠⵠᐃⲆⵠ: "img/day-player0.png",
    ᐃⵠΔΔⵠⲆᐃ: "img/night-player0.png",
    ⵠⲆⲆᐃⵠᐃᐃ: "img/day-player1.png",
    ⵠᐃⲆΔⲆⵠⲆ: "img/night-player1.png",
    ᐃⲆᐃᐃⲆᐃⵠ: "img/day-player2.png",
    ᐃᐃⵠⲆⵠⵠⲆ: "img/night-player22.png",
    ΔᐃⲆⵠΔᐃΔ: "img/day-player3.png",
    ᐃᐃᐃᐃΔᐃᐃ: "img/night-player33.png",
    ΔΔⲆⲆᐃⲆΔ: "img/day-player4.png",
    ᐃⲆᐃΔᐃⵠⵠ: "img/night-player4.png",
    ᐃⲆⵠⵠᐃⲆⵠ: "img/day-player5.png",
    ᐃᐃⲆΔⲆᐃΔ: "img/night-player5.png",
    ⲆᐃΔⵠⲆⵠⵠ: "img/day-player6.png",
    ΔⲆᐃᐃᐃⲆᐃ: "img/night-player6.png",
    ᐃⵠⲆᐃΔΔᐃ: "img/day-player7.png",
    ⲆⲆΔⲆΔⲆΔ: "img/night-player7.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/day-player8.png",
    ᐃΔⵠΔⲆΔⵠ: "img/night-player8.png",
    ᐃΔⲆⵠⲆᐃⲆ: "img/day-player9.png",
    ᐃΔᐃΔⵠΔᐃ: "img/night-player9.png",
    ᐃΔⲆΔⲆⲆᐃ: "img/day-player10.png",
    ᐃⵠᐃⲆⲆⵠⵠ: "img/night-player10.png",
    ΔΔⲆⵠΔⵠᐃ: "img/day-player11.png",
    ΔⵠΔΔⲆⲆⵠ: "img/night-player11.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/day-player12.png",
    ΔⲆⲆⵠⲆⵠⲆ: "img/night-player12.png",
    ⲆⵠⵠᐃΔⲆΔ: "img/day-player13.png",
    ⵠΔⵠᐃⲆᐃᐃ: "img/night-player13.png",
    ΔΔᐃⲆⲆⵠⲆ: "img/day-player14.png",
    ⲆⵠⲆⲆΔⵠᐃ: "img/night-player14.png",
    ⵠΔⲆⲆⵠᐃᐃ: "img/day-player15.png",
    ΔΔΔΔΔᐃⵠ: "img/night-player15.png",
    ΔⵠⵠΔⵠⲆΔ: "img/day-player16.png",
    ᐃⲆΔᐃᐃⵠΔ: "img/night-player16.png",
    ᐃΔⵠⵠΔΔᐃ: "img/day-player17.png",
    ⲆⵠⵠΔΔⵠᐃ: "img/night-player17.png",
    ⲆΔΔⵠⲆⲆⵠ: "img/day-player18.png",
    ⲆΔⵠⲆᐃᐃⲆ: "img/night-player18.png",
    ᐃⲆΔᐃⲆᐃᐃ: "img/day-player19.png",
    ⲆⵠΔΔᐃⲆᐃ: "img/night-player19.png",
    ᐃᐃΔⲆΔᐃᐃ: "img/day-hand-player0.png",
    ΔᐃⵠⵠⵠⵠⲆ: "img/night-hand-player0.png",
    ᐃΔⲆΔᐃΔΔ: "img/day-hand-player1.png",
    ΔᐃⲆΔΔᐃᐃ: "img/night-hand-player1.png",
    ⵠΔᐃⲆⵠΔⵠ: "img/day-hand-player2.png",
    ᐃᐃΔΔⲆᐃᐃ: "img/night-hand-player22.png",
    ΔⲆⵠΔΔΔᐃ: "img/day-hand-player3.png",
    ΔⵠᐃΔΔⲆᐃ: "img/night-hand-player33.png",
    ⲆⵠΔⲆᐃΔⵠ: "img/day-hand-player4.png",
    ᐃᐃᐃⵠⲆᐃΔ: "img/night-hand-player4.png",
    ΔΔⲆᐃᐃⵠⲆ: "img/day-hand-player5.png",
    ᐃᐃⲆΔᐃᐃᐃ: "img/night-hand-player5.png",
    ⵠⲆⵠᐃⵠⲆⲆ: "img/day-hand-player6.png",
    ⵠⵠΔΔᐃᐃᐃ: "img/night-hand-player6.png",
    ⲆΔΔⲆⵠⲆⵠ: "img/day-hand-player7.png",
    ᐃᐃⲆΔⲆᐃⲆ: "img/night-hand-player7.png",
    ᐃᐃⲆⲆⲆⲆⲆ: "img/day-hand-player8.png",
    ⲆᐃΔⵠᐃᐃΔ: "img/night-hand-player8.png",
    ⵠⵠⲆᐃⵠⵠⵠ: "img/day-hand-player9.png",
    ΔᐃⵠΔⵠⲆⵠ: "img/night-hand-player9.png",
    ⵠⵠⲆᐃᐃΔᐃ: "img/day-hand-player10.png",
    ᐃⵠΔⲆΔᐃⵠ: "img/night-hand-player10.png",
    ⵠΔᐃΔΔΔΔ: "img/day-hand-player11.png",
    ᐃⵠⵠᐃᐃⵠⵠ: "img/night-hand-player11.png",
    ᐃᐃⲆᐃⲆᐃΔ: "img/day-hand-player12.png",
    ⵠΔⲆⲆⲆⵠⵠ: "img/night-hand-player12.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/day-hand-player13.png",
    ⲆᐃΔⵠⲆᐃⵠ: "img/night-hand-player13.png",
    ⲆᐃᐃⲆⵠⲆⵠ: "img/day-hand-player14.png",
    ⲆᐃⵠΔᐃⵠᐃ: "img/night-hand-player14.png",
    ⲆΔⲆᐃᐃΔᐃ: "img/day-hand-player15.png",
    ΔⲆΔⵠⲆᐃⵠ: "img/night-hand-player15.png",
    ⵠΔᐃᐃⲆᐃⵠ: "img/day-hand-player16.png",
    ⲆⲆⵠΔΔⲆᐃ: "img/night-hand-player16.png",
    ⲆⵠⲆⲆⲆⲆᐃ: "img/day-hand-player17.png",
    ΔⵠΔΔⵠⲆΔ: "img/night-hand-player17.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/day-hand-player18.png",
    ᐃΔΔⵠΔⵠⵠ: "img/night-hand-player18.png",
    ΔΔⲆⵠΔⲆΔ: "img/day-hand-player19.png",
    ΔⵠΔᐃⲆᐃᐃ: "img/night-hand-player19.png",
    ΔⵠᐃⵠᐃⵠⲆ: "img/day-accessory4.png",
    ΔᐃⵠᐃᐃⲆΔ: "img/night-accessory4.png",
    ⲆΔᐃⲆΔᐃᐃ: "img/day-accessory9.png",
    ⵠᐃⲆⲆΔΔⲆ: "img/night-accessory9.png",
    ⵠⵠⵠⵠⲆⵠᐃ: "img/day-accessory10.png",
    ⵠΔⵠⵠⵠⲆᐃ: "img/night-accessory10.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/day-accessory11.png",
    ⲆⲆⵠⵠᐃΔᐃ: "img/night-accessory11.png",
    ⲆⲆΔⵠⲆΔⵠ: "img/day-accessory12.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/night-accessory12.png",
    ⲆⵠⵠΔᐃΔⲆ: "img/day-bag.png",
    ᐃᐃᐃⵠⲆΔⲆ: "img/night-bag.png",
    ⵠⵠⲆⲆⲆⲆᐃ: "img/inv-bag-out.png",
    ΔΔᐃᐃⵠⵠᐃ: "img/inv-bag-in.png",
    ΔⵠⵠⵠΔᐃΔ: "img/inv-bag-click.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/day-pitchfork.png",
    ⵠΔⲆᐃΔⵠΔ: "img/night-pitchfork.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/inv-pitchfork-out.png",
    ⵠⲆᐃΔⲆⲆⵠ: "img/inv-pitchfork-in.png",
    ⲆᐃΔⲆⲆⲆΔ: "img/inv-pitchfork-click.png",
    ⲆΔⲆᐃᐃⵠΔ: "img/inv-wood-spike-door-out.png",
    ΔᐃᐃΔΔᐃⲆ: "img/inv-wood-spike-door-in.png",
    ΔΔⵠⵠᐃΔᐃ: "img/inv-wood-spike-door-click.png",
    ᐃⵠⲆⲆᐃΔⲆ: "img/inv-stone-spike-door-out.png",
    ⲆᐃΔⵠⲆΔΔ: "img/inv-stone-spike-door-in.png",
    ⵠᐃⵠⵠΔⵠⵠ: "img/inv-stone-spike-door-click.png",
    ⵠⵠⲆⵠᐃΔᐃ: "img/inv-gold-spike-door-out.png",
    ⵠᐃᐃᐃᐃⲆⲆ: "img/inv-gold-spike-door-in.png",
    ⵠᐃⲆΔΔΔⲆ: "img/inv-gold-spike-door-click.png",
    ΔᐃⵠⲆⵠⲆᐃ: "img/inv-diamond-spike-door-out.png",
    ᐃⵠΔᐃⵠᐃΔ: "img/inv-diamond-spike-door-in.png",
    ⲆⲆⲆΔᐃⲆᐃ: "img/inv-diamond-spike-door-click.png",
    ᐃⵠⲆᐃⵠΔᐃ: "img/inv-amethyst-spike-door-out.png",
    ⲆΔⲆⲆⲆⵠⵠ: "img/inv-amethyst-spike-door-in.png",
    ⵠΔᐃᐃΔᐃⲆ: "img/inv-amethyst-spike-door-click.png",
    ΔⲆⲆΔΔΔΔ: "img/day-wood-spike-door.png",
    ⲆⲆⲆΔᐃⲆⵠ: "img/night-wood-spike-door.png",
    ᐃⵠᐃⵠⵠⵠⲆ: "img/day-stone-spike-door.png",
    ΔⵠⲆⲆᐃⲆⲆ: "img/night-stone-spike-door.png",
    ⵠΔⵠⲆᐃᐃᐃ: "img/day-gold-spike-door.png",
    ΔᐃᐃⲆⵠⵠᐃ: "img/night-gold-spike-door.png",
    ⲆⵠⵠΔΔᐃⵠ: "img/day-diamond-spike-door.png",
    ΔΔⵠΔⵠⵠⵠ: "img/night-diamond-spike-door.png",
    ⵠⵠᐃΔΔⲆⵠ: "img/day-amethyst-spike-door.png",
    ⵠⵠⲆΔᐃⲆⵠ: "img/night-amethyst-spike-door.png",
    ΔⵠⲆⵠⵠⲆⵠ: "img/inv-reidite-spike-door-out.png",
    ⲆΔᐃⵠᐃΔⲆ: "img/inv-reidite-spike-door-in.png",
    ⵠΔᐃⲆⵠⵠⵠ: "img/inv-reidite-spike-door-click.png",
    ⵠⵠᐃᐃᐃⲆⲆ: "img/inv-reidite-door-out.png",
    ᐃΔΔⲆΔⵠᐃ: "img/inv-reidite-door-in.png",
    ⵠΔᐃᐃΔⵠΔ: "img/inv-reidite-door-click.png",
    ⲆᐃΔⲆΔΔᐃ: "img/inv-reidite-spike-out.png",
    ⵠᐃᐃⲆᐃⵠⵠ: "img/inv-reidite-spike-in.png",
    ⵠᐃⲆⲆΔᐃᐃ: "img/inv-reidite-spike-click.png",
    ᐃⵠⲆΔΔⲆⲆ: "img/inv-reidite-wall-out.png",
    ΔⲆΔᐃΔⲆΔ: "img/inv-reidite-wall-in.png",
    ᐃⲆᐃΔᐃⲆⵠ: "img/inv-reidite-wall-click.png",
    ΔΔᐃⲆᐃᐃΔ: "img/day-reidite-wall.png",
    ᐃⵠⵠᐃⲆⵠⵠ: "img/night-reidite-wall.png",
    ᐃⵠⲆⲆⵠΔΔ: "img/day-reidite-door.png",
    ⵠⲆⲆΔΔⵠᐃ: "img/night-reidite-door.png",
    ΔᐃᐃⲆᐃΔΔ: "img/day-reidite-spike.png",
    ⲆΔΔᐃⲆΔᐃ: "img/night-reidite-spike.png",
    ᐃᐃΔᐃΔᐃⵠ: "img/day-reidite-spike-door.png",
    ᐃⵠᐃᐃⵠⲆⵠ: "img/night-reidite-spike-door.png",
    ΔⵠΔᐃⵠⲆΔ: "img/inv-reidite-pickaxe-out.png",
    ⵠΔⵠⵠΔⵠⲆ: "img/inv-reidite-pickaxe-in.png",
    ⵠΔᐃᐃᐃⵠⲆ: "img/inv-reidite-pickaxe-click.png",
    ΔΔⲆⲆᐃᐃᐃ: "img/day-reidite-pickaxe.png",
    ΔⲆᐃⵠᐃᐃᐃ: "img/night-reidite-pickaxe.png",
    ⵠᐃⵠΔΔⵠΔ: "img/inv-reidite-hammer-out.png",
    ⵠⲆⵠⲆⲆΔⲆ: "img/inv-reidite-hammer-in.png",
    ᐃⵠⲆⲆⲆΔⵠ: "img/inv-reidite-hammer-click.png",
    ⵠΔⲆᐃⲆⵠⵠ: "img/day-reidite-hammer.png",
    ⵠⵠᐃⵠᐃⲆᐃ: "img/night-reidite-hammer.png",
    ⲆᐃᐃΔΔⲆⵠ: "img/day-watermelon1.png",
    ᐃΔⵠⲆⲆⵠⲆ: "img/night-watermelon1.png",
    ⵠⵠⵠΔⵠⵠᐃ: "img/day-watermelon-dried1.png",
    ⵠⲆᐃⲆⵠⵠᐃ: "img/night-watermelon-dried1.png",
    ⵠⲆⵠΔⵠΔⲆ: "img/inv-watermelon-out.png",
    ΔΔⵠⵠᐃᐃⵠ: "img/inv-watermelon-in.png",
    ⵠΔΔⲆΔᐃΔ: "img/inv-watermelon-click.png",
    ΔⲆⲆⵠⵠⲆΔ: "img/day-boat.png",
    ⵠΔⲆⲆⲆⵠⲆ: "img/night-boat.png",
    ΔΔⵠΔᐃᐃᐃ: "img/day-boat-wave.png",
    ΔⲆᐃᐃⵠⲆᐃ: "img/night-boat-wave.png",
    ΔⲆⲆΔⲆᐃⵠ: "img/inv-boat-out.png",
    ⵠΔΔⵠΔⵠⵠ: "img/inv-boat-in.png",
    ⵠᐃⲆⵠΔⵠⵠ: "img/inv-boat-click.png",
    ⲆⵠⵠⵠΔⲆᐃ: "img/day-plane.png",
    ⲆᐃⲆᐃΔΔⲆ: "img/night-plane.png",
    ΔΔⵠⲆⵠΔᐃ: "img/inv-plane-out.png",
    ΔᐃⲆⵠΔⲆⵠ: "img/inv-plane-in.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/inv-plane-click.png",
    ⲆⵠⵠⵠⵠΔᐃ: "img/day-sled.png",
    ΔⵠᐃⵠⲆᐃⵠ: "img/night-sled.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/day-sled-wave.png",
    ⲆΔⵠⵠⵠΔⲆ: "img/night-sled-wave.png",
    ᐃⲆⵠᐃᐃⲆⵠ: "img/inv-sled-out.png",
    ΔⲆⲆⵠᐃⵠᐃ: "img/inv-sled-in.png",
    ΔⲆΔⲆⲆᐃΔ: "img/inv-sled-click.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/day-pirate-hat.png",
    ⲆΔⵠⲆⵠⲆᐃ: "img/night-pirate-hat.png",
    ᐃᐃⲆᐃᐃⲆⵠ: "img/inv-pirate-hat-out.png",
    ⲆⲆᐃᐃⵠᐃⵠ: "img/inv-pirate-hat-in.png",
    ⵠΔΔⵠᐃᐃᐃ: "img/inv-pirate-hat-click.png",
    ᐃΔᐃᐃᐃᐃⵠ: "img/day-penguin.png",
    ΔⵠᐃᐃⵠⵠⲆ: "img/night-penguin.png",
    ΔᐃᐃⲆΔⵠⵠ: "img/hurt-penguin.png",
    ΔᐃΔⵠⲆ: "img/inv-penguin-feather-click.png",
    ⵠᐃⲆⲆᐃ: "img/inv-hawk-feather-click.png",
    ΔᐃΔᐃΔⵠⵠ: "img/day-boar1.png",
    ΔᐃⵠᐃⲆⲆⵠ: "img/day-boar1-tamed.png",
    ΔⲆΔⲆⵠΔᐃ: "img/day-boar1-angry.png",
    ΔⲆᐃΔΔⵠΔ: "img/night-boar1.png",
    ⵠⲆⲆⲆΔⲆⲆ: "img/night-boar1-tamed.png",
    ⵠⵠⲆⲆⵠⲆΔ: "img/night-boar1-angry.png",
    ΔⲆⵠᐃⲆΔⲆ: "img/inv-mount-boar-out.png",
    ⲆⲆᐃⲆⵠⲆⵠ: "img/inv-mount-boar-in.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/inv-mount-boar-click.png",
    ⲆΔⵠⲆΔΔΔ: "img/day-hurt-boar1.png",
    ⵠⲆⲆᐃΔΔΔ: "img/boar1-step.png",
    ᐃᐃⲆⲆⵠⲆᐃ: "img/day-saddle1.png",
    ᐃⲆᐃᐃΔⵠⲆ: "img/night-saddle1.png",
    ⵠⲆΔΔᐃⲆᐃ: "img/inv-saddle-out.png",
    ⲆⵠⵠⵠⲆⵠⲆ: "img/inv-saddle-in.png",
    ᐃⵠⲆⵠᐃⵠΔ: "img/inv-saddle-click.png",
    ΔⲆⲆⲆΔΔⵠ: "img/day-magic-wand0.png",
    ᐃᐃΔᐃⵠⲆᐃ: "img/night-magic-wand0.png",
    ⵠⲆⵠⵠΔᐃⵠ: "img/day-light-wand1.png",
    ᐃⵠᐃⵠᐃⲆⲆ: "img/night-light-wand1.png",
    ΔⵠᐃⲆⲆⲆⲆ: "img/inv-magic-wand0-out.png",
    ⵠΔⲆΔⲆΔⵠ: "img/inv-magic-wand0-in.png",
    ΔᐃΔⲆⲆΔⲆ: "img/inv-magic-wand0-click.png",
    ᐃΔⲆΔᐃᐃⵠ: "img/day-magic-wand1.png",
    ᐃΔΔⲆⵠⲆⲆ: "img/night-magic-wand1.png",
    ⵠᐃⵠᐃⵠΔᐃ: "img/day-light-wand0.png",
    ᐃΔΔⵠⲆᐃⵠ: "img/night-light-wand0.png",
    ΔᐃⲆᐃⲆⲆⵠ: "img/inv-magic-wand1-out.png",
    ⲆΔᐃⵠᐃⵠⲆ: "img/inv-magic-wand1-in.png",
    ⲆᐃⵠⲆⵠⲆᐃ: "img/inv-magic-wand1-click.png",
    ⲆⵠⲆⲆⲆᐃᐃ: "img/day-firefly.png",
    ⵠⲆⲆᐃⵠⲆΔ: "img/night-firefly.png",
    ⵠⵠⲆⵠⲆⲆᐃ: "img/hurt-firefly.png",
    ΔΔⲆⵠΔΔⵠ: "img/inv-firefly-out.png",
    ΔⵠⵠᐃⲆⵠⵠ: "img/inv-firefly-in.png",
    ᐃᐃⲆⵠΔⵠⵠ: "img/inv-firefly-click.png",
    ᐃⵠⲆⵠⵠⲆᐃ: "img/day-baby-dragon.png",
    ⵠⵠΔᐃⲆⵠⲆ: "img/night-baby-dragon.png",
    ΔΔᐃΔⲆⵠⵠ: "img/day-baby-dragon-angry.png",
    ⵠⵠᐃⵠⲆⵠⲆ: "img/night-baby-dragon-angry.png",
    ᐃⵠⲆΔΔᐃΔ: "img/day-baby-dragon-tamed.png",
    ⵠⲆΔΔⲆⲆⵠ: "img/night-baby-dragon-tamed.png",
    ⵠᐃᐃΔⵠⲆΔ: "img/day-wing-dragon-left-angry.png",
    ⵠⵠᐃⵠΔⵠⵠ: "img/night-dragon-wing-left-angry.png",
    ᐃⲆᐃⲆⵠⵠⵠ: "img/day-wing-dragon-right-angry.png",
    ΔⵠⲆΔⵠᐃⲆ: "img/night-dragon-wing-right-angry.png",
    ΔΔⵠᐃᐃⵠΔ: "img/day-wing-dragon-left-tamed.png",
    ⵠΔⲆᐃΔΔⲆ: "img/night-dragon-wing-left-tamed.png",
    ⲆⵠⵠΔᐃⵠⵠ: "img/day-wing-dragon-right-tamed.png",
    ⲆⵠⲆⵠⵠΔΔ: "img/night-wing-dragon-right-tamed.png",
    ᐃᐃᐃⲆⲆΔⵠ: "img/day-wing-dragon-left.png",
    ⲆΔⲆᐃⲆⲆΔ: "img/night-dragon-wing-left.png",
    ΔᐃᐃⵠΔⵠⲆ: "img/day-wing-dragon-right.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/night-wing-dragon-right.png",
    ⲆᐃⵠⲆᐃᐃⵠ: "img/hurt-baby-dragon.png",
    ⲆⲆΔΔΔⵠΔ: "img/hurt-baby-dragon-wing-left.png",
    ⵠᐃΔⵠⵠⵠⲆ: "img/hurt-baby-dragon-wing-right.png",
    ΔΔᐃΔᐃᐃᐃ: "img/inv-baby-dragon-out.png",
    ⵠⲆΔΔΔⲆⵠ: "img/inv-baby-dragon-in.png",
    ⵠⵠⲆᐃΔⵠⵠ: "img/inv-baby-dragon-click.png",
    ⲆⵠⲆᐃⵠⲆᐃ: "img/day-baby-lava.png",
    ⵠⲆⵠⲆⵠΔⲆ: "img/night-baby-lava.png",
    ΔΔᐃⵠᐃⵠᐃ: "img/day-baby-lava-angry.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/night-baby-lava-angry.png",
    ΔⲆᐃⵠⲆᐃⲆ: "img/day-baby-lava-tamed.png",
    ᐃⲆᐃᐃⵠⲆⵠ: "img/night-baby-lava-tamed.png",
    ⲆᐃᐃΔΔΔᐃ: "img/day-wing-lava-left-angry.png",
    ⲆᐃⲆΔᐃⵠΔ: "img/night-wing-lava-left-angry.png",
    ⲆΔⲆⲆᐃᐃᐃ: "img/day-wing-lava-right-angry.png",
    ⵠⵠᐃΔᐃΔΔ: "img/night-wing-lava-right-angry.png",
    ⵠΔΔⵠⵠᐃᐃ: "img/day-wing-lava-left-tamed.png",
    ᐃⲆⵠᐃΔΔⲆ: "img/night-wing-lava-left-tamed.png",
    ⵠⲆᐃᐃⲆᐃⲆ: "img/day-wing-lava-right-tamed.png",
    ⵠⵠⲆᐃⲆᐃΔ: "img/night-wing-lava-right-tamed.png",
    ⵠⵠⵠᐃΔⲆⵠ: "img/day-wing-lava-left.png",
    ΔⵠΔⲆⵠᐃᐃ: "img/night-wing-lava-left.png",
    ΔⵠΔⲆᐃΔⵠ: "img/day-wing-lava-right.png",
    ΔᐃᐃⲆᐃⵠᐃ: "img/night-wing-lava-right.png",
    ΔᐃΔΔⲆᐃⵠ: "img/hurt-baby-lava.png",
    ΔΔⵠΔⵠΔⵠ: "img/hurt-baby-lava-wing-left.png",
    ΔΔΔⵠᐃᐃⲆ: "img/hurt-baby-lava-wing-right.png",
    ⵠⵠᐃᐃⵠⲆᐃ: "img/inv-baby-lava-out.png",
    ᐃᐃᐃⲆΔⲆᐃ: "img/inv-baby-lava-in.png",
    ⲆⵠⵠⲆᐃⵠⲆ: "img/inv-baby-lava-click.png",
    ⲆΔⵠⲆⵠᐃΔ: "img/day-falcon.png",
    ⲆᐃᐃⲆΔᐃᐃ: "img/night-falcon.png",
    ΔⲆⵠⵠⲆΔⵠ: "img/day-falcon-angry.png",
    ᐃⵠᐃΔⲆΔᐃ: "img/night-falcon-angry.png",
    ⲆᐃᐃⵠᐃⲆⵠ: "img/day-falcon-ground.png",
    ⲆⵠᐃᐃᐃⲆᐃ: "img/night-falcon-ground.png",
    ΔⵠᐃΔⵠᐃΔ: "img/day-falcon-ground-angry.png",
    ᐃΔⲆΔⲆᐃⵠ: "img/night-falcon-ground-angry.png",
    ⵠⵠⲆⵠⵠΔⲆ: "img/day-falcon-wings-left.png",
    ᐃΔΔⲆᐃᐃⲆ: "img/night-falcon-wings-left.png",
    ⲆΔΔᐃⲆⵠΔ: "img/day-falcon-wings-right.png",
    ᐃⵠⲆΔⲆΔⵠ: "img/night-falcon-wings-right.png",
    ΔⲆⵠΔⵠⲆⵠ: "img/day-falcon-angry-wings-left.png",
    ⲆⵠⲆᐃΔⵠΔ: "img/night-falcon-angry-wings-left.png",
    ⲆⵠΔⵠΔᐃᐃ: "img/day-falcon-angry-wings-right.png",
    ΔⵠᐃΔⲆⵠⲆ: "img/night-falcon-angry-wings-right.png",
    ⲆᐃⵠⲆᐃⵠⲆ: "img/day-falcon-wings-left-tamed.png",
    ΔᐃᐃⲆⲆᐃᐃ: "img/night-falcon-wings-left-tamed.png",
    ⵠᐃᐃᐃⲆⲆᐃ: "img/day-falcon-wings-right-tamed.png",
    ᐃΔᐃᐃᐃΔΔ: "img/night-falcon-wings-right-tamed.png",
    ᐃΔⲆⲆᐃⲆⵠ: "img/day-falcon-tamed.png",
    ᐃⵠᐃⵠᐃⵠΔ: "img/night-falcon-tamed.png",
    ΔⵠⲆΔⵠᐃⵠ: "img/hurt-falcon-ground.png",
    ᐃⲆᐃⵠⵠΔΔ: "img/hurt-falcon.png",
    ⲆΔⲆⲆⵠⲆⵠ: "img/hurt-falcon-wings-left.png",
    ΔΔᐃΔⲆⵠᐃ: "img/hurt-falcon-wings-right.png",
    ⵠⵠⵠⲆⲆᐃⲆ: "img/inv-falcon-out.png",
    ᐃΔⲆᐃⲆⵠᐃ: "img/inv-falcon-in.png",
    ΔⵠᐃⲆⲆⲆᐃ: "img/inv-falcon-click.png",
    ΔⲆⵠⵠⵠⲆⵠ: "img/day-crab-boss.png",
    ⲆΔⵠΔᐃᐃΔ: "img/night-crab-boss.png",
    ⵠⲆⵠⲆᐃⵠΔ: "img/day-crab-boss-angry.png",
    ⵠᐃⵠⲆΔΔⲆ: "img/night-crab-boss-angry.png",
    ⵠᐃᐃΔᐃⲆⵠ: "img/day-crab-boss-tamed.png",
    ⲆⵠⵠⵠⵠΔΔ: "img/night-crab-boss-tamed.png",
    ΔᐃⲆᐃΔΔᐃ: "img/day-crab-boss-claw-left-attack.png",
    ⵠΔᐃⲆᐃΔᐃ: "img/night-crab-boss-claw-left-attack.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/day-crab-boss-claw-right-attack.png",
    ᐃΔᐃⵠⲆⵠᐃ: "img/night-crab-boss-claw-right-attack.png",
    ⲆᐃⲆⲆⲆΔⲆᐃᐃ: "img/day-crab-boss-claw-left-tamed.png",
    ΔⲆⵠⵠᐃⵠⲆⲆⵠ: "img/night-crab-boss-claw-left-tamed.png",
    ⵠⵠᐃᐃᐃᐃⵠᐃΔ: "img/day-crab-boss-claw-right-tamed.png",
    ᐃᐃΔⵠⲆᐃΔⲆⵠ: "img/night-crab-boss-claw-right-tamed.png",
    ⵠΔᐃΔΔⵠΔ: "img/day-crab-boss-claw-left.png",
    ⲆⲆⵠⵠⵠⲆΔ: "img/night-crab-boss-claw-left.png",
    ⲆⲆⲆⵠⲆᐃⵠ: "img/day-crab-boss-claw-right.png",
    ⵠⵠⲆᐃΔⵠⲆ: "img/night-crab-boss-claw-right.png",
    ⵠΔΔⲆΔΔⵠ: "img/hurt-crab-boss.png",
    ΔᐃΔᐃΔᐃⲆ: "img/hurt-crab-boss-claw-left.png",
    ᐃΔⵠⲆΔΔⲆ: "img/hurt-crab-boss-claw-right.png",
    ⲆᐃⲆΔΔΔⲆ: "img/heal-crab-boss.png",
    ΔⵠᐃᐃΔΔΔ: "img/heal-crab-boss-claw-left.png",
    ⲆⲆΔΔΔΔⲆ: "img/heal-crab-boss-claw-right.png",
    ΔᐃⲆⵠⲆⵠᐃ: "img/crab-step.png",
    ⲆⵠΔΔΔΔⵠ: "img/inv-crab-boss-out.png",
    ΔⲆⵠΔᐃΔⲆ: "img/inv-crab-boss-in.png",
    ΔᐃⵠⲆⲆᐃΔ: "img/inv-crab-boss-click.png",
    ⲆⵠᐃⵠΔⲆⲆ: "img/day-cactus10.png",
    ⵠⵠⵠᐃⲆᐃⵠ: "img/night-cactus10.png",
    ⲆΔΔΔᐃⲆΔ: "img/inv-cactus-out.png",
    ΔᐃΔΔⵠⲆΔ: "img/inv-cactus-in.png",
    ⲆⲆΔⵠⵠⵠⵠ: "img/inv-cactus-click.png",
    ᐃⲆⲆΔⲆⲆⵠ: "img/day-scorpion.png",
    ⵠΔⵠⵠⵠΔⵠ: "img/night-scorpion.png",
    ΔⵠⵠⵠⵠᐃⲆ: "img/day-scorpion-hand-left.png",
    ΔⲆᐃⵠΔᐃⵠ: "img/night-scorpion-hand-left.png",
    ⵠΔΔΔⲆᐃᐃ: "img/day-scorpion-hand-right.png",
    ΔⲆᐃⵠΔᐃᐃ: "img/night-scorpion-hand-right.png",
    ΔⵠⵠΔⵠᐃⲆ: "img/hurt-scorpion.png",
    ⲆⲆⵠᐃᐃⲆΔ: "img/hurt-scorpion-hand-left.png",
    ⵠΔΔᐃᐃⵠⵠ: "img/hurt-scorpion-hand-right.png",
    ⲆᐃⵠΔⲆᐃᐃ: "img/day-vulture.png",
    ΔⵠΔⵠΔᐃΔ: "img/night-vulture.png",
    ΔⲆⵠΔⵠⵠᐃ: "img/day-vulture-angry.png",
    ΔΔᐃⵠΔⵠⵠ: "img/night-vulture-angry.png",
    ⵠⲆᐃⲆⵠΔⲆ: "img/day-vulture-ground.png",
    ᐃᐃΔΔᐃᐃⵠ: "img/night-vulture-ground.png",
    ⲆⵠᐃΔᐃⵠⵠ: "img/day-vulture-ground-angry.png",
    ΔᐃⵠΔᐃⲆⲆ: "img/night-vulture-ground-angry.png",
    ⲆΔⲆᐃⵠΔⲆ: "img/day-vulture-wings-left.png",
    ⲆΔⵠⲆⵠᐃᐃ: "img/night-vulture-wings-left.png",
    ⲆΔⵠᐃΔⵠᐃ: "img/day-vulture-wings-right.png",
    ΔⵠΔⵠΔⵠᐃ: "img/night-vulture-wings-right.png",
    ᐃᐃⵠΔⲆⲆᐃ: "img/day-vulture-angry-wings-left.png",
    ⲆΔⲆᐃⵠⵠᐃ: "img/night-vulture-angry-wings-left.png",
    ΔᐃΔⵠᐃΔΔ: "img/day-vulture-angry-wings-right.png",
    ⵠᐃΔⲆⲆᐃᐃ: "img/night-vulture-angry-wings-right.png",
    ⵠⲆᐃⲆⲆΔᐃ: "img/day-vulture-wings-left-tamed.png",
    ⵠΔⵠⵠⲆΔᐃ: "img/night-vulture-wings-left-tamed.png",
    ⵠᐃⵠᐃΔᐃⵠ: "img/day-vulture-wings-right-tamed.png",
    ΔⵠⵠΔⲆⵠⵠ: "img/night-vulture-wings-right-tamed.png",
    ΔΔⲆⲆΔΔΔ: "img/day-vulture-tamed.png",
    ⲆⲆⲆΔΔⵠⲆ: "img/night-vulture-tamed.png",
    ⵠΔⵠᐃΔⵠᐃ: "img/hurt-vulture-ground.png",
    ΔⲆᐃⵠΔⵠⲆ: "img/hurt-vulture.png",
    ᐃⵠⵠⵠⵠᐃᐃ: "img/hurt-vulture-wings-left.png",
    ⲆᐃᐃⲆΔⵠⵠ: "img/hurt-vulture-wings-right.png",
    ⲆⵠⲆᐃΔΔⲆ: "img/day-aloe-vera.png",
    ΔⲆΔᐃⲆⲆⵠ: "img/night-aloe-vera.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/inv-aloe-vera-out.png",
    ΔᐃⲆΔΔⵠΔ: "img/inv-aloe-vera-in.png",
    ΔⵠⲆΔⲆⵠΔ: "img/inv-aloe-vera-click.png",
    ΔⲆΔΔᐃⵠⲆ: "img/day-aloe-vera-grown.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/night-aloe-vera-grown.png",
    ⵠΔΔΔᐃΔⵠ: "img/day-aloe-vera-dried.png",
    ΔⵠΔᐃⵠⵠΔ: "img/night-aloe-vera-dried.png",
    ⵠᐃⲆⲆⲆⵠⲆ: "img/day-turban1.png",
    ᐃⲆⲆⵠΔᐃⵠ: "img/night-turban1.png",
    Ⲇⵠⵠⵠᐃᐃᐃ: "img/day-turban2.png",
    ⲆⵠⵠⲆⵠᐃᐃ: "img/night-turban2.png",
    ᐃΔⵠⵠⲆⵠᐃ: "img/inv-turban2-out.png",
    ⲆΔⲆΔⵠΔΔ: "img/inv-turban2-in.png",
    ΔΔⵠⲆⲆⵠΔ: "img/inv-turban2-click.png",
    Δᐃⵠⵠᐃⵠⵠ: "img/inv-turban1-out.png",
    ΔⵠⵠⵠⲆⲆᐃ: "img/inv-turban1-in.png",
    ᐃΔⲆⲆᐃⵠᐃ: "img/inv-turban1-click.png",
    ᐃⵠⲆΔΔⵠᐃ: "img/day-pitchfork2.png",
    ᐃΔΔⲆⲆⲆⵠ: "img/night-pitchfork2.png",
    ᐃⵠΔⵠⵠⲆⲆ: "img/inv-pitchfork2-out.png",
    ⲆΔᐃⲆΔΔⲆ: "img/inv-pitchfork2-in.png",
    ᐃⵠᐃΔⵠᐃᐃ: "img/inv-pitchfork2-click.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/inv-gold-fork-click.png",
    Ⲇⵠᐃᐃⵠⵠⵠ: "img/inv-pilot-glasses-click.png",
    ᐃⵠⲆⵠΔⲆΔ: "img/day-pilot-helmet.png",
    ᐃᐃΔⵠᐃΔΔ: "img/night-pilot-helmet.png",
    ΔⲆⵠⵠⲆⲆΔ: "img/inv-pilot-helmet-out.png",
    ᐃᐃⵠⵠⵠⵠᐃ: "img/inv-pilot-helmet-in.png",
    ⵠⲆΔΔⵠΔⵠ: "img/inv-pilot-helmet-click.png",
    ΔⲆᐃⲆᐃⲆᐃⲆΔ: "img/day-sandworm0.png",
    ⲆΔᐃⵠΔⲆⲆ: "img/day-sandworm1.png",
    ⲆⵠⵠᐃⲆΔⲆ: "img/day-sandworm2.png",
    ᐃᐃⵠΔⲆΔⲆⲆⲆ: "img/night-sandworm0.png",
    ᐃΔΔΔⲆΔⵠ: "img/night-sandworm1.png",
    ⲆⲆᐃΔΔⵠΔ: "img/night-sandworm2.png",
    ᐃⲆΔᐃⲆⵠⵠ: "img/hurt-sandworm0.png",
    ⵠⲆᐃⲆΔΔⲆ: "img/hurt-sandworm1.png",
    ΔΔⲆᐃⲆᐃⵠ: "img/hurt-sandworm2.png",
    ᐃⵠᐃΔⲆ: "img/inv-vulture-feather-click.png",
    ΔᐃⵠᐃⵠⵠⲆ: "img/day-emerald0.png",
    ΔⲆⵠⵠᐃⵠᐃ: "img/night-emerald0.png",
    ΔⲆⲆᐃⵠⵠΔ: "img/day-emerald1.png",
    ⵠⵠᐃⲆᐃⲆᐃ: "img/night-emerald1.png",
    ⲆᐃΔΔⲆᐃΔ: "img/day-emerald2.png",
    ⵠⵠᐃⵠᐃⵠⲆ: "img/night-emerald2.png",
    ᐃⲆⲆⵠⵠ: "img/inv-emerald-click.png",
    ⵠΔᐃᐃᐃⵠᐃ: "img/inv-sworm-juice-out.png",
    ⲆᐃΔΔᐃⲆᐃ: "img/inv-sworm-juice-in.png",
    ᐃᐃᐃⲆΔⵠΔ: "img/inv-sworm-juice-click.png",
    ΔⵠⵠΔⲆⵠⲆ: "img/day-point-machine.png",
    ⵠⵠᐃⲆⲆⲆⵠ: "img/night-point-machine.png",
    ⲆⵠΔΔᐃⲆⲆ: "img/day-point-machine-hole.png",
    ⵠΔⵠᐃⲆΔᐃ: "img/night-point-machine-hole.png",
    ⲆⵠⲆⲆⲆᐃΔ: "img/day-point-machine-ground.png",
    ⵠⵠΔΔᐃⲆⵠ: "img/night-point-machine-ground.png",
    ΔᐃⵠᐃⲆⵠΔ: "img/day-point-machine-rotate.png",
    ΔⲆΔᐃΔⲆⲆ: "img/night-point-machine-rotate.png",
    ᐃᐃᐃⲆᐃΔⵠ: "img/inv-point-machine-out.png",
    ᐃᐃⲆⵠΔᐃⵠ: "img/inv-point-machine-in.png",
    ⵠⲆᐃΔᐃΔⵠ: "img/inv-point-machine-click.png",
    ΔΔᐃᐃᐃᐃᐃ: "img/day-extractor-machine0-stone.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/night-extractor-machine0-stone.png",
    ᐃΔⲆⵠⵠⲆⵠ: "img/day-extractor-machine-stone.png",
    ⲆⵠᐃΔⵠⲆᐃ: "img/night-extractor-machine-stone.png",
    ⵠᐃᐃᐃⵠⲆΔ: "img/inv-extractor-machine-stone-out.png",
    ΔⲆⵠΔⲆᐃⲆ: "img/inv-extractor-machine-stone-in.png",
    ΔᐃⵠⵠⲆⵠⵠ: "img/inv-extractor-machine-stone-click.png",
    ΔⲆΔᐃⵠᐃⲆ: "img/day-extractor-machine0-gold.png",
    ΔᐃΔⲆⵠⵠⲆ: "img/night-extractor-machine0-gold.png",
    ⲆΔᐃⲆᐃⲆⵠ: "img/day-extractor-machine-gold.png",
    ΔⵠⵠⲆΔᐃⵠ: "img/night-extractor-machine-gold.png",
    ᐃᐃΔᐃΔⲆⵠ: "img/inv-extractor-machine-gold-out.png",
    ᐃⲆΔⲆΔⵠᐃ: "img/inv-extractor-machine-gold-in.png",
    ⲆΔⵠΔᐃΔΔ: "img/inv-extractor-machine-gold-click.png",
    ⲆᐃⵠⵠᐃⵠⲆ: "img/day-extractor-machine0-diamond.png",
    ᐃⲆΔⵠⵠⵠᐃ: "img/night-extractor-machine0-diamond.png",
    ᐃᐃⲆⵠⲆⲆΔ: "img/day-extractor-machine-diamond.png",
    ᐃⵠⲆᐃⲆⵠᐃ: "img/night-extractor-machine-diamond.png",
    ᐃᐃᐃⵠᐃΔⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⵠⲆᐃⵠΔⲆⵠ: "img/inv-extractor-machine-diamond-in.png",
    ᐃΔΔᐃⲆⵠΔ: "img/inv-extractor-machine-diamond-click.png",
    ⲆᐃⲆΔⲆΔΔ: "img/day-extractor-machine0-amethyst.png",
    ΔΔᐃⵠᐃⵠⲆ: "img/night-extractor-machine0-amethyst.png",
    ⲆⲆⲆⲆΔⲆⲆ: "img/day-extractor-machine-amethyst.png",
    ΔⲆⵠⵠΔᐃⲆ: "img/night-extractor-machine-amethyst.png",
    ⵠΔΔΔᐃⲆⵠ: "img/inv-extractor-machine-amethyst-out.png",
    ⵠⵠⵠⵠⵠΔⵠ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆⵠⵠⲆᐃᐃⵠ: "img/inv-extractor-machine-amethyst-click.png",
    ᐃᐃⵠᐃⵠΔⲆ: "img/day-extractor-machine0-reidite.png",
    ⵠΔᐃⲆΔⲆⵠ: "img/night-extractor-machine0-reidite.png",
    ΔⵠⲆⲆᐃⵠΔ: "img/day-extractor-machine-reidite.png",
    ᐃᐃᐃⵠⲆⲆᐃ: "img/night-extractor-machine-reidite.png",
    ΔΔⵠᐃᐃᐃⵠ: "img/inv-extractor-machine-reidite-out.png",
    ⲆᐃΔⵠᐃᐃⲆ: "img/inv-extractor-machine-reidite-in.png",
    ⵠⵠⵠᐃⲆⲆⲆ: "img/inv-extractor-machine-reidite-click.png",
    ⵠΔᐃⲆΔⲆⲆ: "img/extractor-cases.png",
    ⵠⵠⲆᐃᐃⵠⲆ: "img/day-golden-hen.png",
    ⲆᐃⵠᐃΔⲆⵠ: "img/night-golden-hen.png",
    ⵠᐃΔⵠᐃᐃΔ: "img/day-golden-chicken.png",
    ⲆΔⵠᐃΔⲆⵠ: "img/night-golden-chicken.png",
    ᐃⲆⲆⲆⵠⲆⵠ: "img/hurt-golden-hen.png",
    ᐃⲆⲆⵠⵠⵠⲆ: "img/hurt-golden-chicken.png",
    ⲆᐃⲆᐃᐃⲆᐃ: "img/logo-interface.png",
    ⲆⲆᐃⲆⲆⵠΔ: "img/forest-mode-hover.png",
    ⵠᐃᐃΔⵠᐃΔ: "img/normal-mode-hover.png",
    Ⲇᐃᐃⵠᐃᐃⵠ: "img/vampire-mode-hover.png",
    ᐃᐃᐃΔΔᐃΔ: "img/zombie-mode-hover.png",
    ⲆⵠΔⲆⲆⲆΔ: "img/community-mode-hover2.png",
    ΔᐃⲆⲆⵠⲆΔ: "img/experimental-mode-hover.png",
    ⵠⵠᐃⵠⵠⲆΔ: "img/zombie-mode-out.png",
    ΔⲆᐃⲆᐃΔⵠ: "img/zombie-mode-in.png",
    ΔⵠᐃΔⵠΔⲆ: "img/zombie-mode-click.png",
    ⲆⲆΔⲆᐃΔᐃ: "img/vampire-mode-out.png",
    ⵠᐃΔΔΔΔΔ: "img/vampire-mode-in.png",
    ⵠⲆⵠⲆΔⲆⵠ: "img/vampire-mode-click.png",
    ⵠⲆᐃΔⵠᐃⵠ: "img/normal-mode-out.png",
    ΔⲆΔⵠΔΔᐃ: "img/normal-mode-in.png",
    ᐃⵠⵠⵠⵠΔᐃ: "img/normal-mode-click.png",
    ⵠⲆⲆᐃΔᐃⲆ: "img/forest-mode-out.png",
    ⲆΔⵠΔΔΔᐃ: "img/forest-mode-in.png",
    ⲆᐃᐃⲆᐃᐃⲆ: "img/forest-mode-click.png",
    ⵠⲆⵠⵠⲆⲆᐃ: "img/community-mode-out.png",
    ⲆΔⲆⵠⵠⵠⲆ: "img/community-mode-in.png",
    ⲆᐃⲆᐃⵠΔⵠ: "img/community-mode-click.png",
    ⲆⲆⵠΔΔΔⲆ: "img/experimental-modes-out.png",
    ᐃⵠΔⲆᐃᐃⲆ: "img/experimental-modes-in.png",
    ᐃΔⲆⵠⵠⵠΔ: "img/experimental-modes-click.png",
    ΔΔΔᐃⲆⲆᐃ: "img/youtube-button-out.png",
    ⵠⲆⲆᐃⵠⵠᐃ: "img/youtube-button-in.png",
    ΔⲆⲆⲆΔᐃᐃ: "img/youtube-button-click.png",
    ⵠⵠΔΔⵠΔⲆ: "img/wiki-button-out.png",
    ΔⲆⲆᐃⲆᐃⵠ: "img/wiki-button-in.png",
    ⵠⲆⵠΔᐃΔⵠ: "img/wiki-button-click.png",
    ᐃⵠᐃᐃⲆᐃΔ: "img/twitter-button-out.png",
    ⵠⲆⵠⵠⵠΔΔ: "img/twitter-button-in.png",
    ⵠⲆⲆᐃΔΔⲆ: "img/twitter-button-click.png",
    ⵠⲆⲆᐃⵠᐃΔ: "img/facebook-button-out.png",
    ⲆΔᐃⵠⵠᐃⲆ: "img/facebook-button-in.png",
    ⵠⵠⵠⵠΔΔⲆ: "img/facebook-button-click.png",
    ᐃⲆᐃⲆΔⲆΔ: "img/reddit-button-out.png",
    ⵠⲆⲆⵠⵠΔⲆ: "img/reddit-button-in.png",
    ΔΔⲆΔⵠᐃⲆ: "img/reddit-button-click.png",
    ᐃⲆⲆᐃΔΔᐃ: "img/discord-button-out.png",
    ⵠᐃᐃⲆᐃⲆᐃ: "img/discord-button-in.png",
    ᐃⲆᐃᐃᐃⵠⲆ: "img/discord-button-click.png",
    ᐃΔᐃⲆⵠⲆⵠ: "img/merch-button-out.png",
    ΔⲆⲆⵠᐃⵠⲆ: "img/merch-button-in.png",
    ⵠⵠⲆᐃⵠⵠΔ: "img/merch-button-click.png",
    ᐃⲆΔⵠⲆᐃᐃⲆⵠ: "img/terminal-button-out.png",
    ⲆᐃΔᐃⵠᐃᐃᐃᐃ: "img/terminal-button-in.png",
    ⲆⲆⲆΔΔⵠᐃΔᐃ: "img/terminal-button-click.png",
    ᐃⲆⲆⵠᐃᐃⵠ: "img/restart-out.png",
    ᐃᐃⵠΔᐃᐃΔ: "img/restart-in.png",
    ⵠᐃΔΔⵠΔᐃ: "img/restart-click.png",
    ᐃΔⵠⲆᐃⵠΔ: "img/guide-out.png",
    ᐃⵠⵠᐃⵠⵠⵠ: "img/guide-in.png",
    ᐃⲆⵠᐃⵠΔᐃ: "img/guide-click.png",
    ⵠΔΔⵠⲆⵠΔ: "img/copy-paste-out.png",
    ⲆⵠΔⲆⵠⲆᐃ: "img/copy-paste-in.png",
    ⵠΔⵠⲆⲆⲆᐃ: "img/copy-paste-click.png",
    ᐃⲆⵠⲆⵠⲆⲆ: "img/link-buttons-bg.png",
    ᐃΔΔⵠΔⵠᐃ: "img/changelog-box2.png",
    ⲆⲆⵠᐃⵠⲆⵠ: "img/changelog_30.png",
    ᐃᐃΔᐃΔⵠⲆ: "img/banner-taming.png",
    ⵠⵠⲆⵠⲆΔᐃ: "img/profile-button-out.png",
    ᐃⵠᐃΔᐃⲆᐃ: "img/profile-button-in.png",
    ⵠᐃΔⲆᐃᐃᐃ: "img/profile-button-click.png",
    ᐃⲆⲆΔΔᐃⲆ: "img/login-button-out.png",
    ⵠⵠᐃⵠᐃΔΔ: "img/login-button-in.png",
    ⵠΔᐃⲆⵠᐃⲆ: "img/login-button-click.png",
    ᐃᐃⵠᐃΔΔⲆ: "img/login-google-out.png",
    ᐃΔⲆⲆΔΔᐃ: "img/login-google-in.png",
    ⲆᐃΔᐃⲆᐃᐃ: "img/login-google-click.png",
    ⲆᐃⵠΔᐃᐃⲆ: "img/login-facebook-out.png",
    Δᐃᐃᐃᐃⵠᐃ: "img/login-facebook-in.png",
    ᐃⲆⲆⵠᐃⵠⲆ: "img/login-facebook-click.png",
    ⵠⲆⵠⵠᐃⵠⲆ: "img/account-box.png",
    ⵠⲆᐃΔⵠⲆᐃⵠᐃ: "img/account-under-maintenance.png",
    ᐃΔᐃⵠΔΔΔ: "img/close-button-account-out.png",
    ⲆᐃΔⵠⵠᐃⲆ: "img/close-button-account-in.png",
    ᐃΔΔⲆⵠⲆΔ: "img/close-button-account-click.png",
    ᐃΔΔᐃΔⵠⵠ: "img/play-button-out.png",
    ΔⲆᐃⲆⵠⵠᐃ: "img/play-button-in.png",
    ⲆᐃⲆΔᐃᐃⲆ: "img/play-button-click.png",
    ΔⲆΔⲆⲆⵠⲆΔᐃ: "img/app-store-badge.png",
    ⲆΔᐃΔᐃᐃᐃⵠⲆ: "img/play-store-badge.png",
    ΔΔⲆᐃΔⲆᐃⲆΔ: "img/mobile-boxad.png",
    ⵠΔᐃᐃⵠⲆⵠ: "img/modify-name-out.png",
    ΔⲆᐃⲆⲆⲆᐃ: "img/modify-name-in.png",
    ⲆⵠΔⵠΔΔⲆ: "img/modify-name-click.png",
    ⲆⲆⵠⵠⲆⵠΔ: "img/yes-button-out.png",
    ⵠⵠΔⵠᐃⲆΔ: "img/yes-button-in.png",
    ΔⵠⵠⵠᐃΔᐃ: "img/yes-button-click.png",
    ᐃΔᐃⲆΔᐃᐃ: "img/yes-300-button-out.png",
    ΔᐃⲆΔⲆⲆΔ: "img/yes-300-button-in.png",
    ᐃⵠⵠⲆᐃⲆⵠ: "img/yes-300-button-click.png",
    ⵠⲆⲆΔᐃⵠⲆ: "img/no-button-out.png",
    ⲆⲆᐃⲆΔⵠᐃ: "img/no-button-in.png",
    ΔⵠⵠⵠᐃⲆⵠ: "img/no-button-click.png",
    ᐃⲆᐃⲆⲆᐃΔ: "img/no-thanks-button-out.png",
    ΔⲆΔⲆᐃⲆΔ: "img/no-thanks-button-in.png",
    ΔᐃⲆᐃⲆΔⲆ: "img/no-thanks-button-click.png",
    ⵠᐃⲆⵠᐃⵠⲆ: "img/shop-button-out.png",
    ⵠⵠᐃΔⲆᐃᐃ: "img/shop-button-in.png",
    ⵠⲆᐃⲆⲆΔΔ: "img/shop-button-click.png",
    ᐃⲆΔⲆΔⵠⲆ: "img/logout-out.png",
    ᐃⵠⲆⵠΔᐃΔ: "img/logout-in.png",
    ΔⲆᐃᐃΔⵠᐃ: "img/logout-click.png",
    ᐃᐃⵠⲆᐃΔΔ: "img/terms-button-out.png",
    ⲆⵠᐃΔⵠΔᐃ: "img/terms-button-in.png",
    ⵠⵠⲆΔᐃᐃᐃ: "img/terms-button-click.png",
    ΔⲆΔΔⲆⵠΔ: "img/tutorial-icon.png",
    ⲆⲆⵠⵠΔⲆⵠ: "img/skins-icon.png",
    ᐃΔⵠᐃΔΔᐃ: "img/shop-icon.png",
    ΔΔⵠⵠⲆⲆΔΔⲆ: "img/paint-icon.png",
    ᐃΔⲆⵠⵠΔΔ: "img/leaderboard-icon.png",
    ᐃⲆⵠⵠᐃⲆⲆ: "img/start-icon.png",
    ΔⵠΔⲆⲆⵠⲆ: "img/profile-icon.png",
    ΔⲆΔⵠⵠᐃᐃ: "img/server-access-icon2.png",
    ΔⲆⵠⲆⵠⵠⲆ: "img/button-homepage-bg-out.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/button-homepage-bg-in.png",
    ᐃᐃΔⲆᐃⲆᐃ: "img/button-homepage-bg-click.png",
    ⲆᐃⵠΔⲆΔΔ: "img/button-bottom-homepage-bg-out.png",
    ⵠⵠⲆⲆⲆⵠⵠ: "img/button-bottom-homepage-bg-in.png",
    ⲆⵠⲆⵠᐃᐃΔ: "img/button-bottom-homepage-bg-click.png",
    ᐃⵠⵠΔΔⵠΔ: "img/lvl-player.png",
    ⵠⵠᐃⲆᐃⵠⲆ: "img/avatar-player.png",
    ⵠΔⵠⲆᐃⲆᐃ: "img/avatar-player1.png",
    ΔΔᐃΔⲆΔⵠ: "img/avatar-player2.png",
    ⵠΔᐃⵠΔⵠⵠ: "img/avatar-player3.png",
    ⵠⲆⵠⲆΔᐃΔ: "img/avatar-player4.png",
    ᐃᐃⵠⲆΔⵠⵠ: "img/avatar-player5.png",
    ΔΔⲆⵠᐃΔᐃ: "img/avatar-player6.png",
    ᐃΔΔⲆⲆΔⵠ: "img/avatar-player7.png",
    ⲆᐃⵠᐃᐃᐃⲆ: "img/avatar-player8.png",
    ᐃΔΔⲆᐃⲆΔ: "img/avatar-player9.png",
    ᐃⲆΔⲆⵠⵠⵠ: "img/avatar-player10.png",
    ᐃΔΔΔΔΔΔ: "img/avatar-player11.png",
    ΔⲆⵠΔΔΔⲆ: "img/avatar-player12.png",
    ⲆⲆΔⲆΔⲆⵠ: "img/avatar-player13.png",
    ΔᐃⵠᐃᐃᐃΔ: "img/avatar-player14.png",
    ᐃⲆⵠⲆᐃⲆᐃ: "img/avatar-player14.png",
    ᐃΔⲆⲆΔⲆΔ: "img/avatar-player14.png",
    ⵠΔΔΔΔΔᐃ: "img/avatar-player14.png",
    ⵠⲆⲆⲆⵠᐃⵠᐃⲆ: "img/golden-bread.png",
    ΔⵠᐃᐃⲆᐃⵠ: "img/buy-bread-out.png",
    ΔᐃⵠⲆⲆΔᐃ: "img/buy-bread-in.png",
    ᐃⵠᐃΔΔᐃⵠ: "img/buy-bread-click.png",
    ⲆⵠⵠⵠΔⵠΔ: "img/gauge.png",
    ΔⲆⵠᐃⵠΔΔᐃᐃ: "img/season-4-out.png",
    ⲆΔᐃⲆᐃⵠᐃΔᐃ: "img/season-4-in.png",
    ΔΔⲆᐃⲆΔⲆⲆᐃ: "img/season-4-click.png",
    ᐃⲆᐃⲆⵠΔⲆⵠᐃ: "img/season4-box.png",
    ᐃⲆΔⵠⲆΔΔⲆⵠ: "img/season-5-out.png",
    ΔⵠᐃᐃⵠΔᐃⵠⵠ: "img/season-5-in.png",
    ᐃΔⵠᐃⲆᐃⵠⲆⵠ: "img/season-5-click.png",
    ᐃᐃⲆΔⵠΔᐃᐃⵠ: "img/season5-box.png",
    ⵠⲆᐃΔΔᐃᐃ: "img/season-6-out.png",
    ᐃⵠΔⵠΔⵠΔ: "img/season-6-in.png",
    ⲆᐃⵠⵠΔⲆⲆ: "img/season-6-click.png",
    ᐃΔΔⵠⵠⲆΔ: "img/season6-box.png",
    ᐃᐃᐃⵠⵠᐃᐃ: "img/profile3-box.png",
    ⵠⵠΔⵠᐃⲆⵠ: "img/skins-box.png",
    ᐃⲆᐃΔᐃⲆᐃ: "img/shop-box.png",
    ΔⲆᐃΔᐃΔⵠⲆⲆ: "img/private-server-box.png",
    ΔⲆΔⵠⵠΔⵠ: "img/location-box.png",
    ᐃΔᐃᐃΔᐃⲆ: "img/server-duration-box.png",
    ᐃⲆⵠΔΔⵠⵠ: "img/tutorial-box.png",
    ΔΔᐃⵠⵠΔⲆ: "img/leaderboard2-box.png",
    ᐃᐃⲆⵠᐃⲆⲆ: "img/buy-breads-box.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/bag-box.png",
    ⲆⵠᐃⲆᐃⵠᐃ: "img/deadbox-box.png",
    ΔⲆⲆΔᐃⲆⵠ: "img/book-box.png",
    ⲆⲆⵠᐃᐃΔᐃ: "img/accessories-box.png",
    ⵠⲆⵠⲆⲆⲆⲆ: "img/customskin-box.png",
    ⵠⲆⵠⵠⵠⲆⵠ: "img/bag-lasts.png",
    ᐃⲆᐃⵠⵠⲆⵠ: "img/server-lasts.png",
    ᐃΔⵠⲆᐃⵠⵠ: "img/server-access-box2.png",
    ⵠΔⵠᐃⲆᐃΔ: "img/lootbox-box.png",
    ⲆⵠΔΔⲆⲆΔ: "img/change-nickname0.png",
    ⲆᐃᐃⲆⵠΔΔ: "img/change-nickname1.png",
    ⲆⵠᐃΔᐃᐃᐃ: "img/cheating-box.png",
    ⲆⲆⵠⵠΔᐃΔⵠᐃ: "img/daily-quest-box.png",
    ⲆⵠⵠⲆⲆΔᐃΔⲆ: "img/daily-5-bread.png",
    ⲆⲆⲆⲆΔⲆⲆᐃᐃ: "img/daily-10-bread.png",
    ΔΔΔΔΔⲆΔⵠᐃ: "img/daily-valid.png",
    ΔΔⵠⵠⲆᐃⵠ: "img/normal-profile-out.png",
    ⲆⵠⵠⲆΔⲆⵠ: "img/normal-profile-in.png",
    ⲆΔⲆⵠᐃᐃⵠ: "img/normal-profile-click.png",
    ᐃⵠᐃⲆᐃᐃᐃ: "img/forest-profile-out.png",
    ΔᐃΔΔⲆΔⲆ: "img/forest-profile-in.png",
    ⵠᐃΔⲆⲆΔΔ: "img/forest-profile-click.png",
    ᐃᐃⵠᐃⵠᐃᐃ: "img/zombie-profile-out.png",
    ᐃΔⵠᐃᐃⲆΔ: "img/zombie-profile-in.png",
    ᐃΔΔΔⲆᐃⵠ: "img/zombie-profile-click.png",
    ΔⲆⵠⲆΔⲆⲆ: "img/vampire-profile-out.png",
    ΔⲆⵠⲆⲆⵠᐃ: "img/vampire-profile-in.png",
    ⵠⲆᐃⲆᐃⲆⲆ: "img/vampire-profile-click.png",
    ⲆΔⲆⵠᐃⵠⲆ: "img/total-profile-out.png",
    ⲆⵠΔᐃΔᐃⲆ: "img/total-profile-in.png",
    ᐃᐃⲆⲆⵠᐃᐃ: "img/total-profile-click.png",
    ⲆⵠⲆⲆⲆΔᐃ: "img/season1-out.png",
    ⵠΔΔⵠⲆᐃⵠ: "img/season1-in.png",
    ⵠᐃᐃΔΔⵠⵠ: "img/season1-click.png",
    ⲆᐃᐃⵠⲆΔᐃ: "img/season2-out.png",
    ⲆᐃⵠⵠΔⲆⵠ: "img/season2-in.png",
    ᐃᐃΔΔⲆⲆᐃ: "img/season2-click.png",
    ΔⵠᐃⲆΔᐃᐃ: "img/season3-out.png",
    ⵠΔΔⵠⲆⵠᐃ: "img/season3-in.png",
    ΔⵠᐃᐃⲆΔᐃ: "img/season3-click.png",
    ⲆⲆᐃᐃᐃᐃΔ: "img/season4-out.png",
    ⵠΔⲆᐃⵠΔΔ: "img/season4-in.png",
    ᐃⲆⵠΔᐃᐃⵠ: "img/season4-click.png",
    ⵠᐃᐃΔᐃΔⵠ: "img/season5-out.png",
    ΔᐃⵠⲆΔⵠᐃ: "img/season5-in.png",
    ⵠΔΔᐃⵠⵠᐃ: "img/season5-click.png",
    ΔΔⲆΔⲆᐃⵠ: "img/season6-out.png",
    ⵠⲆⵠⲆⵠᐃΔ: "img/season6-in.png",
    ⲆⵠΔⲆⲆΔⲆ: "img/season6-click.png",
    ⵠᐃⵠⲆΔⲆⲆ: "img/locked-skin-alert.png",
    ⵠⵠⵠⵠⲆⵠΔ: "img/locked-custom-alert.png",
    ΔΔᐃⲆᐃⲆᐃ: "img/bg-red-locked.png",
    ⵠⲆⲆⵠⵠΔᐃ: "img/skin-button-out.png",
    ⵠᐃⵠΔᐃᐃⵠ: "img/skin-button-in.png",
    Δᐃᐃⵠᐃⵠᐃ: "img/skin-button-click.png",
    ⵠΔᐃᐃⲆΔΔ: "img/accessory-button-out.png",
    ΔⵠⵠⲆⵠΔΔ: "img/accessory-button-in.png",
    ⵠⲆΔᐃⵠΔᐃ: "img/accessory-button-click.png",
    ᐃⲆⲆΔΔⲆⵠ: "img/bag-button-out.png",
    ΔⲆΔΔΔΔΔ: "img/bag-button-in.png",
    ⵠⵠⲆⵠΔⵠᐃ: "img/bag-button-click.png",
    ⵠᐃΔⲆⵠⵠᐃ: "img/book-button-out.png",
    ⲆⲆᐃᐃⵠΔΔ: "img/book-button-in.png",
    ᐃΔⲆⲆⲆⵠᐃ: "img/book-button-click.png",
    ⲆⲆⵠΔⵠΔⲆ: "img/deadbox-button-out.png",
    ΔᐃⲆⲆⵠⵠⲆ: "img/deadbox-button-in.png",
    ᐃⲆⲆΔᐃⵠⲆ: "img/deadbox-button-click.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/loot-button-out.png",
    ⵠᐃΔⵠⵠᐃⲆ: "img/loot-button-in.png",
    ⵠᐃΔⵠⲆᐃᐃ: "img/loot-button-click.png",
    ᐃⵠⵠᐃⵠⲆᐃ: "img/free-item-out.png",
    ΔΔΔⲆΔⲆⲆ: "img/free-item-in.png",
    ᐃΔⵠⵠⲆΔΔ: "img/free-item-click.png",
    ⲆΔⲆⲆ: "img/wood-item-out.png",
    Δᐃᐃⵠ: "img/wood-item-in.png",
    ⲆⲆⵠΔ: "img/wood-item-click.png",
    ΔⵠᐃⲆⲆⲆⵠ: "img/stone-item.png",
    ᐃΔᐃⲆⲆⵠᐃ: "img/stone-item-in.png",
    ⵠⵠᐃⵠᐃⲆⵠ: "img/stone-item-click.png",
    ⲆᐃΔΔᐃΔΔ: "img/gold-item.png",
    ⲆⵠᐃᐃΔⲆᐃ: "img/gold-item-in.png",
    ᐃᐃΔⲆⲆᐃⵠ: "img/gold-item-click.png",
    ⲆᐃΔⲆᐃᐃⲆ: "img/diamond-item.png",
    ⲆΔΔΔᐃΔΔ: "img/diamond-item-in.png",
    ΔᐃΔⵠⲆⲆⲆ: "img/diamond-item-click.png",
    ΔⲆⲆⵠᐃΔⲆ: "img/amethyst-item.png",
    ⲆⲆΔΔⲆᐃΔ: "img/amethyst-item-in.png",
    ⲆⲆⵠᐃⵠᐃᐃ: "img/amethyst-item-click.png",
    ΔⲆᐃΔⲆⵠⲆ: "img/reidite-item.png",
    ΔⵠΔᐃᐃΔΔ: "img/reidite-item-in.png",
    ⲆⲆᐃᐃⲆⲆⵠ: "img/reidite-item-click.png",
    ⲆⲆᐃᐃᐃΔΔ: "img/special-item-out.png",
    ⵠᐃΔΔⲆΔⵠ: "img/special-item-in.png",
    ⲆⵠΔΔⵠⵠᐃ: "img/special-item-click.png",
    ⵠᐃⲆᐃΔⲆΔ: "img/level-item-out.png",
    ᐃᐃᐃⲆⵠᐃⵠ: "img/level-item-in.png",
    ⵠⵠⵠⲆΔⲆᐃ: "img/level-item-click.png",
    ⵠᐃⲆⵠᐃᐃᐃ: "img/skin-previous-out.png",
    ΔᐃᐃᐃΔⵠΔ: "img/skin-previous-in.png",
    ᐃⲆΔⲆΔᐃⵠ: "img/skin-previous-click.png",
    ⲆΔΔⲆⵠᐃⲆ: "img/skin-next-out.png",
    ᐃⵠΔⵠⵠᐃⲆ: "img/skin-next-in.png",
    ᐃⵠᐃΔⲆⲆΔ: "img/skin-next-click.png",
    ᐃⲆΔⵠⵠ: "img/back-button-out.png",
    ⵠⲆⵠᐃΔ: "img/back-button-in.png",
    ⵠΔᐃⵠΔ: "img/back-button-click.png",
    ᐃⲆᐃⲆⵠⲆΔ: "img/get-more-button-out.png",
    ᐃΔⲆⲆᐃΔⵠ: "img/get-more-button-in.png",
    ᐃⲆΔⵠΔⲆⵠ: "img/get-more-button-click.png",
    ⵠⵠⲆᐃⲆⵠⲆ: "img/currency1-out.png",
    ΔⲆᐃⵠᐃⲆⵠ: "img/currency1-in.png",
    ᐃᐃᐃⲆⲆᐃᐃ: "img/currency1-click.png",
    ⵠⲆΔⵠⵠⲆⲆ: "img/currency2-out.png",
    ᐃⵠΔⵠᐃᐃⵠ: "img/currency2-in.png",
    ⵠΔⵠᐃⲆⵠⲆ: "img/currency2-click.png",
    ΔⵠⵠᐃᐃⵠⲆ: "img/currency3-out.png",
    ⲆΔΔⵠⵠⲆⲆ: "img/currency3-in.png",
    ⵠⲆⲆᐃΔΔᐃ: "img/currency3-click.png",
    ΔΔᐃⵠᐃⲆⵠ: "img/currency4-out.png",
    ⵠᐃⲆᐃᐃΔΔ: "img/currency4-in.png",
    ΔⵠᐃᐃⲆΔⵠ: "img/currency4-click.png",
    ΔΔᐃⵠⵠᐃᐃ: "img/currency5-out.png",
    ΔⲆⵠΔⲆⲆᐃ: "img/currency5-in.png",
    ᐃⲆΔᐃΔⲆᐃ: "img/currency5-click.png",
    ΔⵠⵠⵠⵠⲆᐃ: "img/price1-out.png",
    ΔⲆᐃⵠΔⵠΔ: "img/price1-in.png",
    ΔⲆⲆⵠΔᐃⵠ: "img/price1-click.png",
    ⵠⲆᐃⲆⲆᐃᐃ: "img/price2-out.png",
    ⲆΔᐃΔΔⵠᐃ: "img/price2-in.png",
    ⲆⲆⲆᐃᐃⲆᐃ: "img/price2-click.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/price3-out.png",
    ᐃᐃⵠᐃⲆᐃⲆ: "img/price3-in.png",
    ⵠᐃᐃⵠⵠⵠΔ: "img/price3-click.png",
    ⲆᐃᐃⵠΔᐃⲆ: "img/price4-out.png",
    ⲆⲆⲆⵠⲆⲆⵠ: "img/price4-in.png",
    ΔⲆΔⲆⵠᐃΔ: "img/price4-click.png",
    ⵠΔΔᐃΔⵠⵠ: "img/price5-out.png",
    ⲆⲆᐃᐃⲆᐃⵠ: "img/price5-in.png",
    ⲆᐃⲆᐃΔᐃⲆ: "img/price5-click.png",
    ⲆΔⵠⵠⲆΔⲆⲆⵠ: "img/buy-private-server-out.png",
    ΔᐃⲆⵠⵠⲆⵠⵠⲆ: "img/buy-private-server-in.png",
    ⵠΔΔΔᐃⵠⵠⵠᐃ: "img/buy-private-server-click.png",
    ᐃΔΔᐃᐃⲆⵠ: "img/atlanta-out.png",
    ΔⲆᐃΔⲆⲆΔ: "img/atlanta-in.png",
    ᐃΔΔΔⵠⵠⵠ: "img/atlanta-click.png",
    ᐃᐃΔⲆΔⲆᐃ: "img/dallas-out.png",
    ⵠΔᐃⲆᐃΔⲆ: "img/dallas-in.png",
    ⲆⲆΔⲆⲆᐃᐃ: "img/dallas-click.png",
    ⵠΔⲆⵠⲆᐃΔ: "img/fremont-out.png",
    ΔⵠΔᐃⲆⵠⲆ: "img/fremont-in.png",
    ⵠΔⲆⲆⵠΔⵠ: "img/fremont-click.png",
    ⲆⵠΔⲆᐃⲆⲆ: "img/newark-out.png",
    ⲆΔⵠⲆᐃⵠⵠ: "img/newark-in.png",
    ⲆᐃᐃⲆᐃⵠᐃ: "img/newark-click.png",
    ᐃⲆΔⲆΔⲆΔ: "img/toronto-out.png",
    ᐃΔⲆᐃⵠΔΔ: "img/toronto-in.png",
    ΔⵠΔΔΔⲆᐃ: "img/toronto-click.png",
    ⵠⲆⵠΔⲆⲆⵠ: "img/singapore-out.png",
    ᐃΔⲆΔⵠⲆΔ: "img/singapore-in.png",
    ⲆᐃⲆⲆⵠⲆⲆ: "img/singapore-click.png",
    ⵠᐃⵠᐃᐃⵠΔ: "img/frankfurt-out.png",
    ⲆⲆⲆⲆⲆᐃⵠ: "img/frankfurt-in.png",
    ⵠⲆᐃⲆΔⵠᐃ: "img/frankfurt-click.png",
    Ⲇⵠᐃⵠᐃᐃⵠ: "img/london-out.png",
    ⲆⵠⵠⲆⲆⲆᐃ: "img/london-in.png",
    ⵠᐃⲆⵠⵠⲆⲆ: "img/london-click.png",
    ⵠΔⲆⵠΔⲆⵠ: "img/mumbai-out.png",
    ⲆΔᐃΔᐃⵠⲆ: "img/mumbai-in.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/mumbai-click.png",
    ⲆΔᐃΔΔⲆᐃ: "img/tokyo-out.png",
    Δⵠᐃᐃᐃᐃⵠ: "img/tokyo-in.png",
    ⵠⲆⲆᐃᐃᐃⲆ: "img/tokyo-click.png",
    ⵠⲆⵠⲆⲆⵠᐃᐃΔ: "img/yes-location-out.png",
    ᐃⵠⲆⲆᐃⲆΔΔΔ: "img/yes-location-in.png",
    ⲆⵠΔΔⲆΔⲆⵠⲆ: "img/yes-location-click.png",
    ᐃⵠⲆᐃᐃⲆΔ: "img/3days-out.png",
    ΔᐃΔⲆᐃΔΔ: "img/3days-in.png",
    ⵠⲆⵠⲆΔΔΔ: "img/3days-click.png",
    ⵠΔΔⵠⵠⲆᐃ: "img/7days-out.png",
    ΔΔⲆⵠᐃⲆⵠ: "img/7days-in.png",
    ⲆⲆⵠⲆⵠⵠΔ: "img/7days-click.png",
    ΔΔΔⲆΔⵠΔ: "img/30days-out.png",
    ΔΔⲆⵠᐃΔⲆ: "img/30days-in.png",
    ΔᐃⵠⵠⵠⲆⵠ: "img/30days-click.png",
    ᐃⲆⵠⲆⲆᐃΔ: "img/90days-out.png",
    ΔᐃⵠΔⲆᐃⵠ: "img/90days-in.png",
    ᐃᐃΔⵠⲆⵠⵠ: "img/90days-click.png",
    ⲆⵠᐃᐃΔᐃⵠ: "img/spin1.png",
    ΔⲆΔⲆⲆⵠΔ: "img/spin2.png",
    ᐃⵠⲆⵠⵠⲆⵠ: "img/spin3.png",
    ᐃⲆⲆⲆⵠᐃᐃ: "img/spin4.png",
    ⲆⵠⵠᐃⲆⲆΔ: "img/spin5.png",
    ⲆᐃⵠΔᐃΔⲆ: "img/spin6.png",
    ⲆᐃᐃᐃΔⲆⲆ: "img/arrow-spin.png",
    ᐃⵠΔΔⲆΔⵠ: "img/spin-button-1-out.png",
    ⲆⲆⲆᐃᐃⲆⲆ: "img/spin-button-1-in.png",
    ΔⵠᐃΔⲆΔᐃ: "img/spin-button-1-click.png",
    ᐃᐃⲆΔΔᐃᐃ: "img/spin-button-2-out.png",
    ΔⵠⵠᐃΔⲆⲆ: "img/spin-button-2-in.png",
    ⵠⵠⲆⲆⵠΔⲆ: "img/spin-button-2-click.png",
    ⵠᐃⵠⵠΔΔⵠ: "img/spin-button-3-out.png",
    ΔⵠᐃⵠΔⵠⵠ: "img/spin-button-3-in.png",
    ⵠⲆⵠΔⵠⵠⲆ: "img/spin-button-3-click.png",
    ΔΔⲆΔⵠᐃⵠ: "img/spin-button-4-out.png",
    ΔᐃΔᐃⵠΔⵠ: "img/spin-button-4-in.png",
    ⵠⲆΔⲆΔⵠᐃ: "img/spin-button-4-click.png",
    ΔⵠⵠᐃⲆⲆΔ: "img/spin-button-5-out.png",
    ᐃΔᐃⲆᐃΔⵠ: "img/spin-button-5-in.png",
    ᐃⵠⵠᐃᐃⲆⵠ: "img/spin-button-5-click.png",
    ᐃⲆⵠᐃΔΔΔ: "img/spin-light.png",
    ⲆΔᐃⵠⵠᐃⵠ: "img/tuto-wiki-out.png",
    ⲆᐃᐃΔᐃⲆⲆ: "img/tuto-wiki-in.png",
    ΔΔᐃⲆᐃΔᐃ: "img/tuto-wiki-click.png",
    ⲆΔⵠⲆΔⵠΔ: "img/tuto-previous-out.png",
    ⵠᐃⵠⲆⲆⵠΔ: "img/tuto-previous-in.png",
    ᐃⵠⵠⲆⲆⲆⵠ: "img/tuto-previous-click.png",
    ΔᐃΔΔⲆⵠⵠ: "img/tuto-next-out.png",
    ᐃⲆΔᐃⲆⵠΔ: "img/tuto-next-in.png",
    ⲆⲆΔΔⲆⲆⲆ: "img/tuto-next-click.png",
    ΔᐃΔⵠⲆⵠⲆ: "img/time-leaderboard-out.png",
    ⲆΔⲆⵠΔⲆⵠ: "img/time-leaderboard-in.png",
    ⵠⵠⵠΔΔⲆⵠ: "img/time-leaderboard-click.png",
    ᐃⲆᐃΔᐃᐃᐃ: "img/score-leaderboard-out.png",
    ΔᐃᐃⵠⵠⲆⵠ: "img/score-leaderboard-in.png",
    ΔᐃⵠΔΔΔⵠ: "img/score-leaderboard-click.png",
    ΔΔⵠᐃⵠΔΔ: "img/lvl-leaderboard-out.png",
    ΔΔⲆⲆⵠⲆⲆ: "img/lvl-leaderboard-in.png",
    ⵠᐃΔⵠⵠΔⲆ: "img/lvl-leaderboard-click.png",
    ⵠᐃΔⲆΔΔᐃ: "img/kill-leaderboard-out.png",
    ⲆⵠⲆᐃⵠⵠᐃ: "img/kill-leaderboard-in.png",
    ᐃᐃⵠⵠⲆⵠⵠ: "img/kill-leaderboard-click.png",
    ⵠⲆᐃᐃᐃᐃⵠ: "img/all-leaderboard-out.png",
    ⲆΔⵠᐃΔΔᐃ: "img/all-leaderboard-in.png",
    ⵠⵠᐃᐃⲆΔΔ: "img/all-leaderboard-click.png",
    ΔΔⵠᐃΔⵠⲆ: "img/today-leaderboard-out.png",
    ΔⲆⵠΔᐃᐃᐃ: "img/today-leaderboard-in.png",
    ⲆⵠᐃⵠⵠΔⲆ: "img/today-leaderboard-click.png",
    ΔⵠᐃⲆᐃΔⵠ: "img/week-leaderboard-out.png",
    ᐃⵠᐃᐃⵠⲆᐃ: "img/week-leaderboard-in.png",
    ᐃⵠᐃΔΔⲆⵠ: "img/week-leaderboard-click.png",
    ⲆⲆΔⵠΔΔⵠ: "img/season1-out.png",
    ΔⵠΔⵠᐃᐃᐃ: "img/season1-in.png",
    ⲆΔⲆΔΔΔΔ: "img/season1-click.png",
    ⵠΔᐃⵠⵠᐃⲆ: "img/season2-out.png",
    ΔΔⲆᐃᐃᐃᐃ: "img/season2-in.png",
    ⲆⲆΔΔⵠⵠᐃ: "img/season2-click.png",
    ⵠⲆΔⲆᐃⵠᐃ: "img/season3-out.png",
    ΔⲆᐃᐃᐃᐃⲆ: "img/season3-in.png",
    ΔⲆⵠΔΔᐃΔ: "img/season3-click.png",
    ⵠᐃⵠΔᐃⲆⵠ: "img/season4-out.png",
    ⲆᐃⵠΔⲆⲆΔ: "img/season4-in.png",
    ΔΔⲆΔⵠᐃᐃ: "img/season4-click.png",
    ΔⵠⵠⵠⵠΔᐃ: "img/season5-out.png",
    ΔΔΔΔΔΔⵠ: "img/season5-in.png",
    ⵠⵠⲆⲆΔⵠᐃ: "img/season5-click.png",
    ᐃⵠⵠΔⲆⵠᐃ: "img/season6-out.png",
    ΔΔⵠΔⵠⵠⲆ: "img/season6-in.png",
    ⵠΔⲆⲆⵠΔΔ: "img/season6-click.png",
    ⵠⵠⲆᐃᐃⲆᐃ: "img/total-lead-out.png",
    ⵠΔⲆᐃᐃⲆⵠ: "img/total-lead-in.png",
    ᐃⲆΔΔⵠᐃΔ: "img/total-lead-click.png",
    ⵠⲆΔΔΔΔⵠ: "img/normal-lead-out.png",
    ΔⵠⲆⲆΔⵠᐃ: "img/normal-lead-in.png",
    ⵠΔⵠⵠΔᐃⵠ: "img/normal-lead-click.png",
    ⵠⲆⲆΔⲆΔⲆ: "img/forest-lead-out.png",
    ⲆⵠⵠⵠⲆᐃⵠ: "img/forest-lead-in.png",
    ⲆⵠⲆⵠⲆᐃᐃ: "img/forest-lead-click.png",
    ⵠΔΔᐃⲆᐃᐃ: "img/vampire-lead-out.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/vampire-lead-in.png",
    ΔⲆΔΔⵠᐃⲆ: "img/vampire-lead-click.png",
    ᐃΔⲆΔⵠⵠⲆ: "img/zombie-lead-out.png",
    ΔⵠᐃᐃⲆⵠᐃ: "img/zombie-lead-in.png",
    ⵠᐃΔⲆⵠᐃⲆ: "img/zombie-lead-click.png",
    ⲆᐃΔᐃΔⲆⲆ: "img/day-level5.png",
    ⲆⲆⲆᐃΔΔⲆ: "img/night-level5.png",
    ⵠΔᐃΔΔᐃⲆ: "img/day-level10.png",
    ΔΔⲆⲆⲆΔⲆ: "img/night-level10.png",
    ᐃΔⲆΔΔⲆΔ: "img/day-level15.png",
    ΔⲆⲆⵠⲆΔⲆ: "img/night-level15.png",
    ΔᐃΔⲆᐃᐃⲆ: "img/day-level20.png",
    ⲆΔᐃⲆⵠᐃΔ: "img/night-level20.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/day-level25.png",
    Ⲇᐃⵠᐃⵠⵠⵠ: "img/night-level25.png",
    ᐃΔⵠΔⵠΔᐃ: "img/day-level30.png",
    ⵠᐃⵠⲆⵠⲆⲆ: "img/night-level30.png",
    ⵠⵠⵠᐃⲆⲆΔ: "img/day-level35.png",
    ΔᐃⵠⵠⵠᐃΔ: "img/night-level35.png",
    ⵠⲆᐃΔⲆᐃᐃ: "img/day-level40.png",
    ⵠᐃΔⲆⲆⲆΔ: "img/night-level40.png",
    ΔᐃⵠⲆΔⵠⵠ: "img/day-level45.png",
    ⲆⲆⵠⵠᐃᐃⵠ: "img/night-level45.png",
    ⵠⲆΔⵠⲆΔΔ: "img/day-level50.png",
    ⵠᐃⲆⵠᐃᐃΔ: "img/night-level50.png",
    ᐃΔⵠⵠᐃⵠᐃ: "img/day-level55.png",
    ΔΔᐃΔΔΔᐃ: "img/night-level55.png",
    ⲆⵠΔⲆᐃⲆᐃ: "img/day-level60.png",
    ΔⲆΔⵠⲆΔⵠ: "img/night-level60.png",
    ⵠⲆⵠⵠΔⵠⲆ: "img/day-skin-devast0.png",
    ⲆᐃⲆⵠΔΔⵠ: "img/night-skin-devast0.png",
    ᐃⲆΔⲆⲆⵠᐃ: "img/day-hand-devaster.png",
    ΔⵠⵠⵠⲆΔⲆ: "img/night-hand-devaster.png",
    ⲆⲆⵠⲆΔᐃΔ: "img/day-skin-star0.png",
    ΔⵠΔⲆⲆⲆᐃ: "img/night-skin-star0.png",
    ⵠᐃᐃᐃΔᐃⲆ: "img/day-hand-star0.png",
    ⲆⵠᐃⲆᐃⵠⲆ: "img/night-hand-star0.png",
    ⲆⲆⵠΔⵠΔᐃ: "img/day-vampire.png",
    ⵠⵠᐃⲆⲆᐃΔ: "img/night-vampire.png",
    ⲆᐃⲆΔᐃΔⵠ: "img/day-hand-vampire.png",
    ⵠⵠⵠⵠⵠΔΔ: "img/night-hand-vampire.png",
    ⵠⲆⵠᐃⵠⵠⲆ: "img/day-zombie.png",
    ᐃΔΔⲆⲆΔⲆ: "img/night-zombie.png",
    ᐃΔⵠⲆⵠⲆᐃ: "img/day-hand-zombie.png",
    ΔΔΔⲆⵠΔⵠ: "img/night-hand-zombie.png",
    Ⲇᐃⵠⵠᐃᐃᐃ: "img/day-skin113.png",
    ⵠⵠⲆⲆⵠⵠⲆ: "img/night-skin113.png",
    ΔᐃΔⵠⵠΔΔ: "img/day-hand-skin113.png",
    ⲆⲆⵠⵠⲆᐃᐃ: "img/night-hand-skin113.png",
    ⲆᐃⵠⵠΔΔⵠ: "img/day-skin0.png",
    ΔⵠᐃⲆΔⵠᐃ: "img/night-skin0.png",
    ᐃⲆⲆᐃⵠᐃᐃ: "img/day-skin1.png",
    ΔⵠⵠⵠΔᐃⵠ: "img/night-skin1.png",
    ᐃⵠΔᐃⲆᐃΔ: "img/day-skin2.png",
    ᐃⵠᐃΔⲆⵠⵠ: "img/night-skin2.png",
    ⵠᐃᐃⲆΔΔⵠ: "img/day-skin3.png",
    ᐃΔⲆⵠⵠⲆᐃ: "img/night-skin3.png",
    ᐃⲆⵠΔⲆᐃΔ: "img/day-skin4.png",
    ⲆⵠⵠΔⲆⵠᐃ: "img/night-skin4.png",
    ⵠⵠΔΔᐃΔⲆ: "img/day-skin5.png",
    ᐃΔΔⲆⵠⵠⵠ: "img/night-skin5.png",
    ΔᐃⵠⵠΔᐃⵠ: "img/day-skin6.png",
    ⲆⵠⵠⲆⵠⵠⵠ: "img/night-skin6.png",
    ⵠᐃⵠᐃⵠΔⵠ: "img/day-skin7.png",
    ⲆⵠᐃΔᐃⲆⵠ: "img/night-skin7.png",
    ⲆⵠᐃᐃⲆⲆⵠ: "img/day-skin8.png",
    ᐃⲆⲆⲆᐃⵠⵠ: "img/night-skin8.png",
    ⲆⵠⵠⲆᐃⲆⵠ: "img/day-skin9.png",
    ᐃⵠⲆⵠΔᐃⲆ: "img/night-skin9.png",
    ΔⲆᐃΔⵠⲆⲆ: "img/day-skin10.png",
    ⲆΔΔⲆⲆᐃⲆ: "img/night-skin10.png",
    ᐃΔⲆⵠΔⲆⵠ: "img/day-skin11.png",
    ⲆⲆΔⵠⵠⵠΔ: "img/night-skin11.png",
    ⲆᐃⵠⲆⲆⵠⲆ: "img/day-skin12.png",
    ⵠΔΔᐃᐃᐃⵠ: "img/night-skin12.png",
    ᐃⲆⵠᐃⵠΔΔ: "img/day-skin13.png",
    ⲆᐃⲆΔΔᐃΔ: "img/night-skin13.png",
    ⵠΔⲆⵠᐃⲆᐃ: "img/day-skin14.png",
    ΔΔⵠᐃΔⲆⵠ: "img/night-skin14.png",
    ΔΔⲆⵠᐃⲆⲆ: "img/day-skin15.png",
    ⲆⵠⲆΔⲆᐃⵠ: "img/night-skin15.png",
    ⲆⵠᐃⲆⲆᐃⲆ: "img/day-skin16.png",
    Ⲇᐃᐃⵠᐃⵠᐃ: "img/night-skin16.png",
    ΔⲆΔⲆⵠΔⵠ: "img/day-skin17.png",
    ⵠⲆΔΔΔᐃΔ: "img/night-skin17.png",
    ΔΔⵠΔⵠΔΔ: "img/day-skin18.png",
    ΔᐃⵠᐃⵠΔⲆ: "img/night-skin18.png",
    ⲆⲆΔΔᐃΔᐃ: "img/day-skin19.png",
    ⲆᐃⲆⲆⲆⲆⵠ: "img/night-skin19.png",
    ⵠⲆⲆΔΔⵠΔ: "img/day-skin20.png",
    ΔⲆΔᐃΔⵠⲆ: "img/night-skin20.png",
    ⵠᐃⲆⲆⵠΔⲆ: "img/day-skin21.png",
    ΔᐃⲆⲆΔⵠᐃ: "img/night-skin21.png",
    ᐃΔⵠᐃΔᐃⵠ: "img/day-skin22.png",
    ΔⵠⲆⵠΔⲆΔ: "img/night-skin22.png",
    ⵠΔΔΔⲆⲆΔ: "img/day-skin23.png",
    ⵠⵠᐃⵠᐃⵠᐃ: "img/night-skin23.png",
    ⵠⲆⵠΔΔΔΔ: "img/day-skin24.png",
    ΔⵠᐃᐃΔᐃΔ: "img/night-skin24.png",
    ΔⲆⲆⲆⵠΔⲆ: "img/day-skin25.png",
    ⲆΔⲆᐃⵠᐃⵠ: "img/night-skin25.png",
    ΔΔⵠⲆᐃΔΔ: "img/day-skin26.png",
    ⲆᐃᐃⵠⲆⲆⵠ: "img/night-skin26.png",
    ⲆΔⵠᐃΔΔⵠ: "img/day-skin27.png",
    ⵠΔⲆⵠᐃⵠⲆ: "img/night-skin27.png",
    ⵠⲆΔⲆⲆᐃⲆ: "img/day-skin28.png",
    ⵠⵠᐃᐃⲆⵠᐃ: "img/night-skin28.png",
    ΔΔⲆᐃⲆⵠⲆ: "img/day-skin29.png",
    ⲆⲆᐃⵠⵠᐃⲆ: "img/night-skin29.png",
    ⵠᐃⵠⲆΔᐃⵠ: "img/day-skin30.png",
    ⵠⵠΔⵠⲆⵠᐃ: "img/night-skin30.png",
    ⵠΔΔⲆᐃᐃΔ: "img/day-skin31.png",
    ΔⲆⵠⲆⲆΔⲆ: "img/night-skin31.png",
    ΔᐃᐃⵠⵠⵠΔ: "img/day-skin32.png",
    ⵠΔⵠⲆΔΔΔ: "img/night-skin32.png",
    ⲆⲆᐃΔᐃⵠⲆ: "img/day-skin33.png",
    ᐃᐃᐃΔᐃᐃⵠ: "img/night-skin33.png",
    ⲆⵠⵠⲆⵠΔⵠ: "img/day-skin34.png",
    ᐃΔⲆⲆⲆΔΔ: "img/night-skin34.png",
    ⵠᐃⲆⵠΔᐃⵠ: "img/day-skin35.png",
    ΔⵠⲆⲆΔΔⲆ: "img/night-skin35.png",
    ⵠⵠΔⵠⲆᐃⲆ: "img/day-skin36.png",
    ΔᐃⵠⲆΔΔⲆ: "img/night-skin36.png",
    ΔᐃᐃΔⲆᐃᐃ: "img/day-skin37.png",
    ⲆⲆᐃΔΔᐃⲆ: "img/night-skin37.png",
    ᐃⲆⲆᐃᐃⲆⲆ: "img/day-skin38.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/night-skin38.png",
    ᐃⵠⲆⵠⲆⵠᐃ: "img/day-skin39.png",
    ΔΔⲆΔΔⲆᐃ: "img/night-skin39.png",
    ⲆΔⵠⵠΔᐃᐃ: "img/day-skin40.png",
    ᐃᐃᐃⲆⲆⲆⲆ: "img/night-skin40.png",
    ΔᐃⲆΔⵠⵠⲆ: "img/day-skin41.png",
    ᐃΔᐃⵠᐃᐃΔ: "img/night-skin41.png",
    ᐃᐃΔⵠᐃⲆΔ: "img/day-skin42.png",
    ᐃⵠΔᐃⵠΔⵠ: "img/night-skin42.png",
    ⵠⵠⵠⵠⵠⲆΔ: "img/day-skin43.png",
    ⲆⵠⲆⲆᐃⵠⲆ: "img/night-skin43.png",
    ᐃᐃΔⲆⲆⵠΔ: "img/day-skin44.png",
    ΔⲆᐃΔⲆⲆᐃ: "img/night-skin44.png",
    ΔΔᐃⵠⲆᐃᐃ: "img/day-skin45.png",
    ΔΔⲆⲆⵠⲆΔ: "img/night-skin45.png",
    ⲆᐃΔⲆᐃΔⲆ: "img/day-skin46.png",
    ΔᐃⲆΔⵠΔΔ: "img/night-skin46.png",
    ⵠᐃⲆⲆᐃⲆⵠ: "img/day-skin47.png",
    ᐃⲆⵠΔᐃⵠᐃ: "img/night-skin47.png",
    ΔᐃⵠᐃⲆΔΔ: "img/day-skin48.png",
    ⵠᐃⲆⵠⵠⵠΔ: "img/night-skin48.png",
    ᐃΔⵠⲆⵠᐃⵠ: "img/day-skin49.png",
    ΔⵠᐃⲆⲆⵠⲆ: "img/night-skin49.png",
    ᐃᐃⲆΔΔⵠᐃ: "img/day-skin50.png",
    ⵠᐃᐃⵠⲆⲆⵠ: "img/night-skin50.png",
    ⲆᐃⵠΔⲆᐃΔ: "img/day-skin51.png",
    ΔᐃⵠⵠⲆⵠΔ: "img/night-skin51.png",
    ΔΔⲆⵠΔⵠⲆ: "img/day-skin52.png",
    ᐃⵠⵠⲆΔⲆⵠ: "img/night-skin52.png",
    ΔΔᐃΔΔΔⵠ: "img/day-skin53.png",
    ΔΔⲆᐃⵠΔⲆ: "img/night-skin53.png",
    ⲆⵠⵠΔΔⵠⲆ: "img/day-skin54.png",
    ⲆⲆⵠⲆⵠⵠᐃ: "img/night-skin54.png",
    ⲆΔⵠⵠᐃΔⵠ: "img/day-skin55.png",
    ᐃᐃⵠΔΔᐃᐃ: "img/night-skin55.png",
    ⲆᐃⲆᐃΔⲆᐃ: "img/day-skin56.png",
    ⵠᐃⲆⵠᐃᐃⵠ: "img/night-skin56.png",
    ⲆⵠᐃⵠⲆΔⲆ: "img/day-skin57.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/night-skin57.png",
    ΔᐃΔⲆΔΔᐃ: "img/day-skin58.png",
    ⵠᐃᐃΔᐃⲆⲆ: "img/night-skin58.png",
    ᐃᐃᐃⵠⲆⲆⲆ: "img/day-skin59.png",
    ΔᐃΔⵠᐃⲆⵠ: "img/night-skin59.png",
    ΔᐃⵠΔⵠⵠΔ: "img/day-skin60.png",
    ⲆᐃⵠΔΔᐃⵠ: "img/night-skin60.png",
    ⵠⲆⵠⲆᐃⲆΔ: "img/day-skin61.png",
    ᐃⲆᐃⵠΔᐃⵠ: "img/night-skin61.png",
    ΔΔᐃᐃⲆⲆⵠ: "img/day-skin62.png",
    ᐃⲆⵠΔⵠΔΔ: "img/night-skin62.png",
    ⵠᐃⵠΔΔⲆⲆ: "img/day-skin63.png",
    ΔⵠᐃΔᐃΔᐃ: "img/night-skin63.png",
    ΔⵠⲆΔⲆⵠⵠ: "img/day-skin64.png",
    ΔⵠⲆᐃΔⲆⲆ: "img/night-skin64.png",
    ⲆᐃᐃⲆᐃᐃⵠ: "img/day-skin65.png",
    ⵠⵠⲆⵠᐃⵠⵠ: "img/night-skin65.png",
    ᐃΔⲆⵠⵠⲆΔ: "img/day-skin66.png",
    ᐃΔⲆⵠⵠΔⲆ: "img/night-skin66.png",
    ⵠⵠⲆⵠⲆⵠⵠ: "img/day-skin67.png",
    ΔΔⲆⲆⲆᐃᐃ: "img/night-skin67.png",
    ΔⲆᐃⵠⲆⲆⵠ: "img/day-skin68.png",
    ⵠᐃⲆΔⵠⲆᐃ: "img/night-skin68.png",
    ΔⵠΔΔᐃⵠⵠ: "img/day-skin69.png",
    ᐃⵠᐃⲆⲆΔⵠ: "img/night-skin69.png",
    ⵠⵠᐃⲆⵠⵠⵠ: "img/day-skin70.png",
    ⵠⵠᐃᐃΔⲆⲆ: "img/night-skin70.png",
    ⵠᐃⵠΔΔⵠⲆ: "img/day-skin71.png",
    ⵠⲆⲆΔᐃᐃⵠ: "img/night-skin71.png",
    ⲆΔⲆΔᐃⵠΔ: "img/day-skin72.png",
    ⲆⵠΔⲆⵠⵠΔ: "img/night-skin72.png",
    ⲆᐃᐃⲆⲆⵠⵠ: "img/day-skin73.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/night-skin73.png",
    ⲆᐃⵠΔᐃΔΔ: "img/day-skin74.png",
    ΔⲆΔΔⵠⵠⵠ: "img/night-skin74.png",
    ⵠᐃⲆⲆⵠⵠΔ: "img/day-skin75.png",
    ᐃΔΔᐃⵠⲆΔ: "img/night-skin75.png",
    ⵠⵠⲆᐃᐃⵠΔ: "img/day-skin76.png",
    ⲆᐃΔᐃⵠΔⵠ: "img/night-skin76.png",
    ΔⵠⲆᐃΔⲆᐃ: "img/day-skin77.png",
    ⲆᐃⲆΔΔⲆᐃ: "img/night-skin77.png",
    ⵠΔⵠⵠⵠΔΔ: "img/day-skin78.png",
    ⲆⵠᐃⵠⵠΔⵠ: "img/night-skin78.png",
    ᐃΔᐃⲆⲆⲆⵠ: "img/day-skin79.png",
    ⲆⲆⵠⵠⵠᐃⵠ: "img/night-skin79.png",
    ⲆⲆΔⲆⵠⲆⲆ: "img/day-skin80.png",
    ⲆΔⵠᐃᐃⲆⲆ: "img/night-skin80.png",
    ΔΔⲆᐃᐃⲆᐃ: "img/day-skin81.png",
    ΔᐃⲆⲆⵠΔᐃ: "img/night-skin81.png",
    ⵠᐃⵠΔΔᐃⲆ: "img/day-skin82.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/night-skin82.png",
    ΔⵠⲆᐃᐃⲆᐃ: "img/day-skin83.png",
    ᐃᐃⵠᐃΔⵠⲆ: "img/night-skin83.png",
    ΔⲆⲆⲆⵠⲆⲆ: "img/day-skin84.png",
    ᐃᐃⵠⵠⲆⵠⲆ: "img/night-skin84.png",
    ⲆᐃᐃΔΔⵠⵠ: "img/day-skin85.png",
    ᐃⵠᐃᐃⵠΔⵠ: "img/night-skin85.png",
    ⲆⲆᐃⵠⲆᐃᐃ: "img/day-skin86.png",
    ᐃᐃᐃᐃᐃᐃⲆ: "img/night-skin86.png",
    ⲆᐃᐃᐃⲆᐃⲆ: "img/day-skin87.png",
    ᐃΔⵠᐃᐃⲆⲆ: "img/night-skin87.png",
    ᐃΔΔⵠⲆᐃΔ: "img/day-skin88.png",
    ᐃⲆⲆⵠᐃᐃΔ: "img/night-skin88.png",
    ⵠᐃⲆⲆⵠⲆᐃ: "img/day-skin89.png",
    ⵠⵠⵠⵠⲆΔⲆ: "img/night-skin89.png",
    ᐃⵠⵠⲆΔᐃⲆ: "img/day-skin90.png",
    ⲆᐃΔⵠΔⵠᐃ: "img/night-skin90.png",
    ΔⵠΔⲆⲆᐃᐃ: "img/day-skin91.png",
    ᐃⵠᐃᐃⵠΔⲆ: "img/night-skin91.png",
    ᐃⵠΔᐃⲆⲆΔ: "img/day-skin92.png",
    ΔⵠⲆⵠⲆΔΔ: "img/night-skin92.png",
    ⲆⵠΔⵠΔᐃⲆ: "img/day-skin93.png",
    ᐃΔⲆⲆⲆΔⲆ: "img/night-skin93.png",
    ⲆᐃᐃᐃⲆᐃⵠ: "img/day-skin94.png",
    ᐃⲆⵠⲆᐃⲆⵠ: "img/night-skin94.png",
    ⲆⵠΔⲆᐃᐃᐃ: "img/day-skin95.png",
    ᐃⵠⵠⲆⵠⲆⲆ: "img/night-skin95.png",
    ⵠⵠⲆⵠⵠᐃⵠ: "img/day-skin96.png",
    ΔΔᐃⲆᐃΔⵠ: "img/night-skin96.png",
    ⲆⲆⲆᐃⲆΔΔ: "img/day-skin97.png",
    ᐃΔᐃⲆᐃΔΔ: "img/night-skin97.png",
    ⲆⵠⲆᐃⵠⵠⵠ: "img/day-skin98.png",
    ᐃⵠⵠΔΔⲆⲆ: "img/night-skin98.png",
    ⵠᐃⲆⵠⲆⲆΔ: "img/day-skin99.png",
    ΔⲆΔⵠΔᐃⵠ: "img/night-skin99.png",
    ᐃⲆⲆΔⲆᐃⵠ: "img/day-skin100.png",
    ⲆᐃⵠⲆᐃΔᐃ: "img/night-skin100.png",
    ᐃⵠⲆΔΔⵠⵠ: "img/day-skin101.png",
    ᐃⵠᐃᐃΔΔⲆ: "img/night-skin101.png",
    ᐃⲆⲆⵠΔΔⵠ: "img/day-skin102.png",
    ⲆΔⵠΔᐃΔⲆ: "img/night-skin102.png",
    ⵠᐃΔᐃⲆᐃΔ: "img/day-skin103.png",
    ⲆⵠⵠⲆⲆⲆⵠ: "img/night-skin103.png",
    ΔⵠⲆⵠⵠⵠⵠ: "img/day-skin104.png",
    ΔⲆΔⲆⵠᐃⲆ: "img/night-skin104.png",
    ⵠⵠⵠⲆΔΔᐃ: "img/day-skin105.png",
    ᐃᐃᐃⲆΔΔΔ: "img/night-skin105.png",
    ᐃⵠΔⵠΔᐃᐃ: "img/day-skin106.png",
    ⲆⵠⲆⵠⵠⲆᐃ: "img/night-skin106.png",
    ΔⵠᐃⵠᐃᐃⲆ: "img/day-skin107.png",
    ΔᐃⵠⲆΔᐃⲆ: "img/night-skin107.png",
    ⵠᐃⲆⵠΔΔⲆ: "img/day-skin108.png",
    ⲆⵠΔᐃⵠᐃⵠ: "img/night-skin108.png",
    ΔΔΔΔⲆⵠᐃ: "img/day-skin109.png",
    ΔⵠΔΔⲆⵠᐃ: "img/night-skin109.png",
    ΔᐃⲆⲆΔΔⵠ: "img/day-skin110.png",
    ⵠΔΔᐃΔΔⲆ: "img/night-skin110.png",
    ⲆⵠⵠᐃΔⵠⲆ: "img/day-skin111.png",
    ᐃⲆⵠᐃⲆⵠⲆ: "img/night-skin111.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/day-skin112.png",
    ᐃᐃᐃⲆⵠⵠⵠ: "img/night-skin112.png",
    ⵠⲆᐃΔΔⲆᐃᐃⲆ: "img/day-skin113.png",
    ⲆⲆⵠⵠⵠⵠⵠⵠⵠ: "img/night-skin113.png",
    ᐃⲆⲆⲆᐃᐃⲆ: "img/day-skin114.png",
    ⲆᐃⲆᐃⲆⵠⲆ: "img/night-skin114.png",
    ΔⲆᐃᐃΔⲆΔ: "img/day-skin115.png",
    ΔᐃⵠᐃΔⵠⲆ: "img/night-skin115.png",
    ΔⵠΔⲆⵠⵠᐃ: "img/day-skin116.png",
    ⲆⵠΔⵠΔⵠΔ: "img/night-skin116.png",
    ⲆⵠⲆⵠΔᐃᐃ: "img/day-skin117.png",
    ΔΔⵠⵠᐃⵠΔ: "img/night-skin117.png",
    ⵠΔⵠΔⲆΔⵠ: "img/day-skin118.png",
    ΔⵠⵠᐃⲆⵠⲆ: "img/night-skin118.png",
    ⵠΔⲆⵠⲆΔⲆ: "img/day-skin119.png",
    ΔⵠΔΔΔᐃⵠ: "img/night-skin119.png",
    ΔⵠΔᐃⵠΔΔ: "img/day-skin120.png",
    ΔⲆᐃⵠⲆⵠⲆ: "img/night-skin120.png",
    ⵠᐃⵠΔⲆⵠⲆ: "img/day-skin121.png",
    ΔⵠΔᐃᐃᐃⲆ: "img/night-skin121.png",
    ᐃⵠΔⲆᐃⵠᐃ: "img/day-skin122.png",
    ⲆⵠⲆⲆⵠᐃⲆ: "img/night-skin122.png",
    ΔᐃⲆᐃⲆᐃᐃ: "img/day-skin123.png",
    ⵠⲆᐃⲆᐃΔⵠ: "img/night-skin123.png",
    ΔΔΔΔΔⲆΔ: "img/day-skin124.png",
    ⲆⲆΔΔΔⲆⵠ: "img/night-skin124.png",
    ⵠΔⲆⲆΔⵠⲆ: "img/day-skin125.png",
    ⵠΔΔⵠᐃⲆΔ: "img/night-skin125.png",
    ΔⲆⵠⲆᐃⵠⲆ: "img/day-skin126.png",
    ΔΔⵠⲆᐃᐃⵠ: "img/night-skin126.png",
    ⵠⲆᐃⲆᐃⲆᐃ: "img/day-skin127.png",
    ᐃⵠⲆⵠⵠⵠⲆ: "img/night-skin127.png",
    ΔΔΔΔᐃⲆⵠ: "img/day-skin128.png",
    ⵠⵠⲆⲆᐃⵠΔ: "img/night-skin128.png",
    ⲆⵠΔⵠⲆⵠⲆ: "img/day-skin129.png",
    ΔᐃᐃⲆⲆΔⲆ: "img/night-skin129.png",
    ⵠⵠⲆᐃᐃᐃⵠ: "img/day-skin130-1.png",
    ΔⲆⵠᐃΔⲆⲆ: "img/night-skin130-1.png",
    ΔⵠΔΔΔΔⵠ: "img/day-skin131.png",
    ΔⵠⵠⲆΔⲆΔ: "img/night-skin131.png",
    ΔⵠⲆⵠⵠᐃⵠ: "img/day-skin132.png",
    ᐃᐃⵠᐃⵠᐃⵠ: "img/night-skin132.png",
    ΔⲆΔᐃⵠΔⵠ: "img/day-skin133.png",
    ⲆⲆⵠⲆᐃⵠⲆ: "img/night-skin133.png",
    ⲆⵠⲆⵠⲆⵠΔ: "img/day-skin134.png",
    ᐃⵠΔᐃⵠΔΔ: "img/night-skin134.png",
    ⲆⲆⲆΔᐃᐃⲆ: "img/day-skin135.png",
    ⲆⲆΔᐃᐃᐃΔ: "img/night-skin135.png",
    ΔΔΔΔΔⲆᐃ: "img/day-skin136.png",
    ⵠⵠⵠΔⲆⲆᐃ: "img/night-skin136.png",
    ᐃΔⵠⵠᐃⵠⲆ: "img/day-skin137.png",
    ⲆⲆΔⵠⵠΔΔ: "img/night-skin137.png",
    ᐃΔΔᐃᐃⲆⲆ: "img/day-skin138.png",
    ⲆᐃⲆᐃⲆⲆⲆ: "img/night-skin138.png",
    ᐃᐃⵠΔΔⲆᐃ: "img/day-skin139.png",
    ᐃᐃⲆΔⲆΔⵠ: "img/night-skin139.png",
    ⵠΔΔΔⵠⲆΔ: "img/day-skin140.png",
    ⲆᐃΔⵠᐃΔⲆ: "img/night-skin140.png",
    ΔΔΔⵠⵠⵠΔ: "img/day-skin141.png",
    ΔᐃⲆⵠᐃᐃΔ: "img/night-skin141.png",
    ⵠⲆᐃⲆᐃⵠⲆ: "img/day-skin142.png",
    ΔⵠΔΔⵠⲆᐃ: "img/night-skin142.png",
    ᐃⲆᐃⵠⲆΔᐃ: "img/day-skin143.png",
    ⲆΔΔᐃⲆΔⵠ: "img/night-skin143.png",
    ⲆⲆΔⵠⵠᐃⲆ: "img/day-skin144.png",
    ΔᐃᐃⲆⵠⵠⵠ: "img/night-skin144.png",
    ⵠΔⵠⲆⲆΔⵠ: "img/day-skin145.png",
    ᐃᐃⲆⲆⲆΔᐃ: "img/night-skin145.png",
    ΔⲆⲆᐃΔⵠⵠ: "img/day-skin146.png",
    ᐃᐃΔΔⲆⵠⲆ: "img/night-skin146.png",
    ⲆΔᐃΔⲆⲆΔ: "img/day-skin147.png",
    ΔⵠΔⵠⲆΔᐃ: "img/night-skin147.png",
    ⲆᐃⵠᐃΔΔⲆ: "img/day-skin148.png",
    ⵠⲆᐃᐃⵠⲆⲆ: "img/night-skin148.png",
    ΔΔΔᐃⵠⲆⵠ: "img/day-skin149.png",
    ᐃⵠΔΔᐃΔⲆ: "img/night-skin149.png",
    ΔΔⵠⵠⲆⵠΔ: "img/day-skin150.png",
    ΔᐃⲆⲆⵠᐃⵠ: "img/night-skin150.png",
    ΔⵠᐃⵠⵠᐃⲆ: "img/day-hand-skin0.png",
    ΔⲆΔⵠΔⵠᐃ: "img/night-hand-skin0.png",
    ⵠΔⲆⲆⲆΔⵠ: "img/day-hand-skin1.png",
    ᐃᐃΔΔⲆΔⵠ: "img/night-hand-skin1.png",
    ΔΔᐃⵠⵠⵠᐃ: "img/day-hand-skin2.png",
    ΔⲆΔⵠⵠΔᐃ: "img/night-hand-skin2.png",
    ⲆⲆᐃⵠⲆⲆⲆ: "img/day-hand-skin3.png",
    ΔΔⲆⵠⲆⵠⲆ: "img/night-hand-skin3.png",
    ΔⵠⲆⵠᐃᐃⵠ: "img/day-hand-skin4.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/night-hand-skin4.png",
    ⵠᐃⵠⲆΔΔⵠ: "img/day-hand-skin5.png",
    ᐃⲆΔΔⵠᐃᐃ: "img/night-hand-skin5.png",
    ⵠⲆⲆⵠⵠⲆⵠ: "img/day-hand-skin6.png",
    ᐃⲆⲆᐃΔⲆⲆⲆⵠ: "img/night-hand-skin6.png",
    ΔⲆΔΔⵠⲆⵠ: "img/day-hand-skin6.png",
    ⵠⵠΔΔⲆᐃⲆ: "img/night-hand-skin6.png",
    ᐃᐃⲆΔⲆΔⲆ: "img/day-hand-skin8.png",
    ᐃᐃΔⲆΔΔⲆ: "img/night-hand-skin8.png",
    ᐃⵠᐃΔⵠΔᐃ: "img/day-hand-skin9.png",
    ᐃᐃᐃΔᐃΔⲆ: "img/night-hand-skin9.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/day-hand-skin10.png",
    ⵠΔⵠⵠΔᐃΔ: "img/night-hand-skin10.png",
    ΔⵠᐃᐃᐃⲆᐃ: "img/day-hand-skin11.png",
    ⲆⲆⲆⲆⲆᐃΔ: "img/night-hand-skin11.png",
    ⲆᐃⲆⲆΔⵠᐃ: "img/day-hand-skin12.png",
    ⵠⵠΔᐃᐃΔⵠ: "img/night-hand-skin12.png",
    ᐃΔΔᐃⲆΔⵠ: "img/day-hand-skin13.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/night-hand-skin13.png",
    ⵠⲆᐃⵠⵠᐃⵠ: "img/day-hand-skin14.png",
    ΔᐃᐃⵠⲆᐃΔ: "img/night-hand-skin14.png",
    ᐃⲆⲆᐃᐃΔΔ: "img/day-hand-skin15.png",
    ᐃⵠⲆⵠᐃⲆΔ: "img/night-hand-skin15.png",
    ⵠⲆⵠⵠᐃᐃΔ: "img/day-hand-skin16.png",
    ⲆΔᐃΔᐃᐃᐃ: "img/night-hand-skin16.png",
    ⵠⵠⲆⵠⲆᐃᐃ: "img/day-hand-skin17.png",
    ⵠⲆⵠⵠΔⵠⵠ: "img/night-hand-skin17.png",
    ⵠΔⲆⲆⵠⵠⲆ: "img/day-hand-skin18.png",
    ⵠⲆᐃⲆⲆΔⵠ: "img/night-hand-skin18.png",
    ⵠⵠⲆΔⵠΔᐃ: "img/day-hand-skin19.png",
    ⲆᐃᐃⲆΔᐃⵠ: "img/night-hand-skin19.png",
    ⲆΔΔⲆΔⵠⵠ: "img/day-hand-skin20.png",
    ⲆᐃΔⵠⲆΔⵠ: "img/night-hand-skin20.png",
    ⵠΔᐃⵠⲆⲆᐃ: "img/day-hand-skin21.png",
    ⲆΔΔⵠⲆΔΔ: "img/night-hand-skin21.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/day-hand-skin22.png",
    ΔΔⵠᐃⲆᐃΔ: "img/night-hand-skin22.png",
    ᐃⲆᐃΔΔⵠⲆ: "img/day-hand-skin23.png",
    ⵠΔΔⵠᐃⵠⲆ: "img/night-hand-skin23.png",
    ⵠⲆⲆᐃᐃⵠΔ: "img/day-hand-skin24.png",
    ᐃⵠⵠΔᐃⵠΔ: "img/night-hand-skin24.png",
    ⵠΔⵠⲆⲆⲆⵠ: "img/day-hand-skin25.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/night-hand-skin25.png",
    ⲆᐃⲆⵠⵠᐃⵠ: "img/day-hand-skin26.png",
    ⵠⵠᐃⵠᐃⲆⲆ: "img/night-hand-skin26.png",
    ⲆⵠΔⵠᐃⲆᐃ: "img/day-hand-skin27.png",
    ⲆⲆᐃΔⲆⲆⲆ: "img/night-hand-skin27.png",
    ⵠᐃΔⵠΔᐃⵠ: "img/day-hand-skin28.png",
    ᐃⲆⲆΔⵠⲆᐃ: "img/night-hand-skin28.png",
    ⲆⲆᐃⵠⲆᐃⵠ: "img/day-hand-skin29.png",
    ΔΔΔΔΔⵠⵠ: "img/night-hand-skin29.png",
    ⵠΔᐃΔⵠⵠⲆ: "img/day-hand-skin30.png",
    ΔᐃᐃⵠΔᐃΔ: "img/night-hand-skin30.png",
    ⵠΔⲆᐃⵠⵠⲆ: "img/day-hand-skin31.png",
    ΔᐃⵠΔⵠⵠᐃ: "img/night-hand-skin31.png",
    ᐃⲆΔⵠΔᐃΔ: "img/day-hand-skin32.png",
    ⲆⵠΔᐃⵠΔⲆ: "img/night-hand-skin32.png",
    ᐃⵠⲆⵠⵠᐃⵠ: "img/day-hand-skin33.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/night-hand-skin33.png",
    ᐃⲆΔΔⵠⵠΔ: "img/day-hand-skin34.png",
    ⵠᐃⲆⲆⲆᐃΔ: "img/night-hand-skin34.png",
    ⲆΔᐃⵠⵠⵠᐃ: "img/day-hand-skin35.png",
    ΔⲆⲆⵠⲆⲆⲆ: "img/night-hand-skin35.png",
    ᐃΔΔᐃⲆΔⲆ: "img/day-hand-skin36.png",
    ⲆΔΔⲆⵠⲆᐃ: "img/night-hand-skin36.png",
    ⲆⲆⵠⵠⵠΔᐃ: "img/day-hand-skin37.png",
    ΔⵠΔᐃᐃᐃΔ: "img/night-hand-skin37.png",
    ΔⵠᐃⲆΔΔⵠ: "img/day-hand-skin38.png",
    ⲆⲆⲆᐃⵠᐃⵠ: "img/night-hand-skin38.png",
    ᐃΔᐃᐃⵠⵠΔ: "img/day-hand-skin39.png",
    ΔᐃΔⵠᐃⲆΔ: "img/night-hand-skin39.png",
    ΔΔⵠⵠᐃⵠⲆ: "img/day-hand-skin40.png",
    ᐃΔⲆΔᐃᐃΔ: "img/night-hand-skin40.png",
    ⲆΔᐃⵠΔⵠΔ: "img/day-hand-skin41.png",
    ΔⲆΔⵠᐃⵠⵠ: "img/night-hand-skin41.png",
    ⵠᐃΔⵠΔΔⵠ: "img/day-hand-skin42.png",
    ⵠⲆⵠΔⲆⲆⲆ: "img/night-hand-skin42.png",
    ΔⲆⵠΔΔΔΔ: "img/day-hand-skin43.png",
    ⲆΔΔΔⲆⵠᐃ: "img/night-hand-skin43.png",
    ⵠΔᐃᐃⲆᐃΔ: "img/day-hand-skin16.png",
    ᐃΔΔᐃᐃᐃᐃ: "img/night-hand-skin16.png",
    ⵠΔᐃⵠΔᐃⲆ: "img/day-hand-skin45.png",
    ᐃⵠᐃΔⵠⵠᐃ: "img/night-hand-skin45.png",
    ᐃⵠᐃⵠᐃᐃⲆ: "img/day-hand-skin46.png",
    ⲆⵠᐃΔᐃⲆⲆ: "img/night-hand-skin46.png",
    ⲆⵠⵠΔⲆⲆⲆ: "img/day-hand-skin47.png",
    ⲆⵠⵠⲆᐃⲆΔ: "img/night-hand-skin47.png",
    ᐃᐃⵠⲆⵠΔΔ: "img/day-hand-skin48.png",
    ⲆⵠᐃⲆᐃᐃΔ: "img/night-hand-skin48.png",
    ⲆⲆΔΔᐃΔΔ: "img/day-hand-skin49.png",
    ⲆᐃⲆⲆᐃΔⲆ: "img/night-hand-skin49.png",
    ⵠᐃⲆᐃᐃⲆⲆ: "img/day-hand-skin49.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/night-hand-skin49.png",
    ΔⵠΔᐃΔᐃᐃ: "img/day-hand-skin51.png",
    ⵠᐃⵠᐃⲆΔᐃ: "img/night-hand-skin51.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/day-hand-skin52.png",
    ⲆᐃᐃᐃᐃΔΔ: "img/night-hand-skin52.png",
    ΔⵠⵠⲆⵠΔⲆ: "img/day-hand-skin53.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/night-hand-skin53.png",
    ᐃⵠᐃⲆⲆΔᐃ: "img/day-hand-skin53.png",
    ⲆⲆⲆᐃᐃᐃⲆ: "img/night-hand-skin53.png",
    ᐃΔⵠΔᐃᐃΔ: "img/day-hand-skin55.png",
    ⲆⲆⵠⵠᐃΔⲆ: "img/night-hand-skin55.png",
    ᐃⵠⲆⵠΔⵠᐃ: "img/day-hand-skin56.png",
    ᐃᐃⲆΔⵠⵠᐃ: "img/night-hand-skin56.png",
    ᐃⲆΔΔⲆΔΔ: "img/day-hand-skin57.png",
    ⵠⵠⵠⲆⲆΔⲆ: "img/night-hand-skin57.png",
    ΔΔΔⲆΔᐃᐃ: "img/day-hand-skin58.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/night-hand-skin58.png",
    ΔᐃⲆⵠⵠᐃᐃ: "img/day-hand-skin59.png",
    ᐃⲆⲆⵠⲆⲆⵠ: "img/night-hand-skin59.png",
    ⲆⲆΔⵠᐃΔᐃ: "img/day-hand-skin61.png",
    ⵠΔᐃΔΔΔᐃ: "img/night-hand-skin61.png",
    ΔᐃΔⲆᐃⲆⲆ: "img/day-hand-skin61.png",
    ⲆⲆⲆⵠᐃᐃⵠ: "img/night-hand-skin61.png",
    ᐃⲆⵠⵠⵠᐃᐃ: "img/day-hand-skin62.png",
    ᐃΔⲆⵠᐃΔⲆ: "img/night-hand-skin62.png",
    ⵠΔⵠⵠΔΔⵠ: "img/day-hand-skin63.png",
    ⲆⵠΔᐃᐃᐃΔ: "img/night-hand-skin63.png",
    ΔΔⵠⲆⵠᐃᐃ: "img/day-hand-skin64.png",
    ⲆᐃⵠᐃⵠΔⲆ: "img/night-hand-skin64.png",
    ΔⵠᐃᐃⲆⵠΔ: "img/day-hand-skin65.png",
    ΔⲆᐃΔⲆⲆⲆ: "img/night-hand-skin65.png",
    ⵠⲆⵠᐃⵠᐃΔ: "img/day-hand-skin66.png",
    ΔᐃΔᐃᐃΔΔ: "img/night-hand-skin66.png",
    ⵠⲆⲆᐃⵠΔⵠ: "img/day-hand-skin67.png",
    ⲆᐃΔΔⲆᐃⵠ: "img/night-hand-skin67.png",
    ⲆΔⲆⲆᐃⵠᐃ: "img/day-hand-skin68.png",
    ⲆᐃⲆΔᐃΔᐃ: "img/night-hand-skin68.png",
    ᐃⲆⲆⲆⵠΔⲆ: "img/day-hand-skin69.png",
    ⲆᐃᐃⲆΔΔⲆ: "img/night-hand-skin69.png",
    ΔᐃᐃΔΔⵠΔ: "img/day-hand-skin70.png",
    ᐃⵠⲆⲆⲆᐃⵠ: "img/night-hand-skin70.png",
    ΔᐃΔΔΔⵠⵠ: "img/day-hand-skin71.png",
    ⵠΔᐃΔⲆΔⵠ: "img/night-hand-skin71.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/day-hand-skin72.png",
    ᐃⲆΔΔᐃΔⵠ: "img/night-hand-skin72.png",
    ᐃᐃΔΔⵠⵠᐃ: "img/day-hand-skin73.png",
    ⵠᐃⵠΔⲆᐃᐃ: "img/night-hand-skin73.png",
    ⵠᐃᐃⲆⵠᐃⵠ: "img/day-hand-skin74.png",
    ᐃⲆⵠΔᐃⵠΔ: "img/night-hand-skin74.png",
    ⵠᐃⵠⵠᐃΔᐃ: "img/day-hand-skin75.png",
    ⲆΔᐃᐃⵠΔΔ: "img/night-hand-skin75.png",
    ⲆⲆΔᐃᐃⲆΔ: "img/day-hand-skin76.png",
    ᐃⲆⲆΔⲆΔⲆ: "img/night-hand-skin76.png",
    ΔⲆⵠΔᐃΔΔ: "img/day-hand-skin77.png",
    ⵠⲆᐃΔⲆⵠⲆ: "img/night-hand-skin77.png",
    ⵠΔⵠⲆⲆΔΔ: "img/day-hand-skin78.png",
    ᐃⲆᐃⵠⲆᐃⵠ: "img/night-hand-skin78.png",
    ΔⲆⲆⲆⵠΔⵠ: "img/day-hand-skin79.png",
    ΔΔᐃΔⵠⵠⲆ: "img/night-hand-skin79.png",
    ᐃⲆᐃⲆⵠⲆᐃ: "img/day-hand-skin80.png",
    ᐃᐃⲆᐃΔΔⲆ: "img/night-hand-skin80.png",
    ⵠⲆᐃⲆⲆⵠᐃ: "img/day-hand-skin81.png",
    ⲆᐃⵠΔᐃΔⵠ: "img/night-hand-skin81.png",
    ᐃΔⵠⲆⲆᐃᐃ: "img/day-hand-skin82.png",
    ⲆⵠⵠΔⲆΔⵠ: "img/night-hand-skin82.png",
    ᐃⲆᐃᐃΔⵠⵠ: "img/day-hand-skin83.png",
    ᐃᐃΔⲆⲆΔᐃ: "img/night-hand-skin83.png",
    ΔⵠΔⲆᐃⲆᐃ: "img/day-hand-skin84.png",
    ΔⵠᐃⲆᐃΔᐃ: "img/night-hand-skin84.png",
    ᐃΔΔⵠᐃΔⲆ: "img/day-hand-skin85.png",
    ⵠΔᐃᐃᐃᐃⲆ: "img/night-hand-skin85.png",
    ⵠᐃⵠΔⵠⲆⵠ: "img/day-hand-skin86.png",
    ⵠΔⵠΔⵠⲆΔ: "img/night-hand-skin86.png",
    ᐃΔⵠⲆⵠⵠⵠ: "img/day-hand-skin87.png",
    ΔᐃⲆᐃⲆⲆᐃ: "img/night-hand-skin87.png",
    ΔΔⵠΔΔᐃᐃ: "img/day-hand-skin88.png",
    ⲆΔΔᐃᐃᐃⲆ: "img/night-hand-skin88.png",
    ⵠⲆⵠΔⲆⵠΔ: "img/day-hand-skin89.png",
    ⲆⵠⵠΔΔᐃΔ: "img/night-hand-skin89.png",
    ⲆᐃⵠⵠⵠΔΔ: "img/day-hand-skin90.png",
    ΔⵠⵠⵠⲆᐃΔ: "img/night-hand-skin90.png",
    ⵠΔᐃⵠⲆⲆΔ: "img/day-hand-skin91.png",
    ⲆⲆⵠⵠᐃⵠⵠ: "img/night-hand-skin91.png",
    ⵠΔⵠⲆᐃⲆⲆ: "img/day-hand-skin92.png",
    ⲆⵠᐃΔΔⵠⲆ: "img/night-hand-skin92.png",
    ⲆⲆᐃⲆᐃⵠⵠ: "img/day-hand-skin93.png",
    ᐃⵠᐃⵠⲆᐃⲆ: "img/night-hand-skin93.png",
    ΔΔᐃⵠⲆⲆⲆ: "img/day-hand-skin94.png",
    ⵠⲆⲆΔⵠΔⵠ: "img/night-hand-skin94.png",
    ΔΔⵠⲆⲆΔⵠ: "img/day-hand-skin95.png",
    ΔⲆⲆΔᐃΔⲆ: "img/night-hand-skin95.png",
    ΔᐃⲆΔⲆⵠⲆ: "img/day-hand-skin96.png",
    ⵠΔⲆⵠΔⲆΔ: "img/night-hand-skin96.png",
    ⲆⵠᐃᐃᐃⲆⵠ: "img/day-hand-skin97.png",
    ⲆᐃⵠΔΔⲆΔ: "img/night-hand-skin97.png",
    ᐃᐃⲆⵠᐃⵠᐃ: "img/day-hand-skin98.png",
    ΔᐃⲆΔᐃΔΔ: "img/night-hand-skin98.png",
    ⵠⵠⲆⲆⵠᐃⲆ: "img/day-hand-skin99.png",
    ΔⲆⵠᐃⵠⲆⲆ: "img/night-hand-skin99.png",
    ⲆⲆⵠΔⲆΔΔ: "img/day-hand-skin100.png",
    ⵠⵠⲆᐃΔⲆΔ: "img/night-hand-skin100.png",
    ⲆⲆⲆΔᐃΔᐃ: "img/day-hand-skin101.png",
    ΔⵠⵠⵠΔⲆᐃ: "img/night-hand-skin101.png",
    ᐃΔⲆⵠⲆⲆΔ: "img/day-hand-skin102.png",
    ΔⲆⲆᐃⲆⵠΔ: "img/night-hand-skin102.png",
    ΔᐃⲆΔᐃᐃᐃ: "img/day-hand-skin103.png",
    ⵠⵠᐃΔⲆᐃΔ: "img/night-hand-skin103.png",
    ᐃᐃᐃⵠΔⵠΔ: "img/day-hand-skin104.png",
    ⵠΔⲆᐃΔⵠⲆ: "img/night-hand-skin104.png",
    ᐃᐃΔΔΔΔΔ: "img/day-hand-skin105.png",
    ᐃΔᐃⵠⲆᐃΔ: "img/night-hand-skin105.png",
    ⵠⲆⵠΔΔⲆΔ: "img/day-hand-skin106.png",
    ᐃⲆᐃⲆΔΔᐃ: "img/night-hand-skin106.png",
    ΔⲆᐃⵠΔΔⵠ: "img/day-hand-skin107.png",
    ᐃⲆⲆⵠⵠⵠᐃ: "img/night-hand-skin107.png",
    ⲆΔⲆⲆᐃⵠⵠ: "img/day-hand-skin108.png",
    ΔⲆⲆΔⲆⲆⵠ: "img/night-hand-skin108.png",
    ΔΔᐃⲆⵠⲆᐃ: "img/day-hand-skin109.png",
    ᐃⲆᐃΔⲆΔⲆ: "img/night-hand-skin109.png",
    ᐃᐃⵠⲆⲆⵠΔ: "img/day-hand-skin110.png",
    ⲆⵠⲆⲆⵠᐃⵠ: "img/night-hand-skin110.png",
    ⲆᐃᐃⲆᐃΔⵠ: "img/day-hand-skin111.png",
    ⲆᐃⲆⲆⲆΔⲆ: "img/night-hand-skin111.png",
    ᐃΔⲆᐃᐃᐃᐃ: "img/day-hand-skin112.png",
    ᐃⲆⲆⵠᐃΔⵠ: "img/night-hand-skin112.png",
    ᐃᐃΔᐃΔⵠⵠΔⲆ: "img/day-hand-skin113.png",
    ᐃⵠⲆⲆᐃⲆⲆⵠⵠ: "img/night-hand-skin113.png",
    ⲆΔⵠΔⲆⵠᐃ: "img/day-hand-skin114.png",
    ⲆᐃᐃΔΔᐃΔ: "img/night-hand-skin114.png",
    ⵠΔⲆⵠᐃΔⲆ: "img/day-hand-skin115.png",
    ΔᐃᐃᐃⵠⲆΔ: "img/night-hand-skin115.png",
    ᐃᐃΔⲆΔⲆⲆ: "img/day-hand-skin116.png",
    ΔⲆᐃᐃᐃΔΔ: "img/night-hand-skin116.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/day-hand-skin117.png",
    ⵠᐃᐃΔΔᐃⲆ: "img/night-hand-skin117.png",
    ⵠⲆΔⵠᐃⲆⲆ: "img/day-hand-skin118.png",
    ᐃΔΔΔᐃⲆΔ: "img/night-hand-skin118.png",
    ΔⲆⲆⵠΔΔΔ: "img/day-hand-skin119.png",
    ΔⲆⲆⵠⲆⲆᐃ: "img/night-hand-skin119.png",
    ᐃᐃⵠⵠⲆᐃΔ: "img/day-hand-skin120.png",
    ᐃΔΔⵠⲆΔΔ: "img/night-hand-skin120.png",
    ⲆⲆⲆᐃⲆΔⲆ: "img/day-hand-skin122.png",
    ᐃⵠⲆⲆΔΔⵠ: "img/night-hand-skin122.png",
    ⵠΔᐃⲆⲆⲆⵠ: "img/day-hand-skin122.png",
    ᐃⲆᐃⵠⵠⵠΔ: "img/night-hand-skin122.png",
    ⲆᐃⲆΔᐃΔⲆ: "img/day-hand-skin122.png",
    ᐃΔᐃⲆΔⵠⵠ: "img/night-hand-skin122.png",
    ⵠⵠΔᐃΔⲆⲆ: "img/day-hand-skin124.png",
    ⲆᐃΔᐃΔᐃᐃ: "img/night-hand-skin124.png",
    ⲆΔᐃⵠΔΔⲆ: "img/day-hand-skin125.png",
    ΔⵠⲆⵠᐃⲆⵠ: "img/night-hand-skin125.png",
    ΔⵠⵠⲆᐃⵠⵠ: "img/day-hand-skin126.png",
    ᐃⵠⲆΔᐃᐃΔ: "img/night-hand-skin126.png",
    ΔᐃⲆⵠᐃⵠⲆ: "img/day-hand-skin127.png",
    ᐃΔΔⵠⵠⵠᐃ: "img/night-hand-skin127.png",
    ⲆⵠⵠⵠⵠⵠⲆ: "img/day-hand-skin128.png",
    ΔⵠᐃⵠⲆⵠᐃ: "img/night-hand-skin128.png",
    ⵠΔᐃⲆᐃᐃᐃ: "img/day-hand-skin129.png",
    ᐃΔᐃᐃΔⵠⵠ: "img/night-hand-skin129.png",
    ⲆᐃⲆᐃⵠΔⲆ: "img/day-hand-skin130.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/night-hand-skin130.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/day-hand-skin131.png",
    ΔⲆⵠᐃⵠΔⵠ: "img/night-hand-skin131.png",
    ⵠⲆᐃΔᐃⲆΔ: "img/day-hand-skin130.png",
    ΔⵠΔⵠⵠΔᐃ: "img/night-hand-skin130.png",
    ⵠⵠΔᐃᐃⲆⵠ: "img/day-hand-skin133.png",
    ⵠⵠⲆⵠΔΔⵠ: "img/night-hand-skin133.png",
    ⲆᐃⲆᐃⵠⲆΔ: "img/day-hand-skin134.png",
    ᐃⲆΔᐃΔᐃⵠ: "img/night-hand-skin134.png",
    ΔⲆᐃΔⵠⵠⵠ: "img/day-hand-skin135.png",
    ᐃⵠⵠᐃⵠⵠΔ: "img/night-hand-skin135.png",
    ⲆⵠⵠⲆᐃⵠᐃ: "img/day-hand-skin136.png",
    ⲆⲆᐃᐃᐃΔᐃ: "img/night-hand-skin136.png",
    ᐃΔᐃΔⵠΔⵠ: "img/day-hand-skin137.png",
    ⲆΔⲆΔΔΔⵠ: "img/night-hand-skin137.png",
    ⵠΔᐃⵠΔΔΔ: "img/day-hand-skin138.png",
    ΔΔⲆΔΔᐃⲆ: "img/night-hand-skin138.png",
    ᐃΔⲆⵠΔⵠⵠ: "img/day-hand-skin139.png",
    ᐃⵠⵠⵠⲆᐃⵠ: "img/night-hand-skin139.png",
    ᐃᐃⵠⲆΔⵠΔ: "img/day-hand-skin140.png",
    ⵠⵠΔⵠΔⵠⲆ: "img/night-hand-skin140.png",
    ΔⲆⵠⲆΔᐃⲆ: "img/day-hand-skin141.png",
    ⵠᐃⵠⵠⵠΔᐃ: "img/night-hand-skin141.png",
    ᐃⲆⵠⲆᐃⲆΔ: "img/day-hand-skin142.png",
    ⲆⲆᐃΔΔⵠⲆ: "img/night-hand-skin142.png",
    ᐃᐃᐃⵠᐃᐃⲆ: "img/day-hand-skin143.png",
    ᐃⵠⲆᐃⵠⲆᐃ: "img/night-hand-skin143.png",
    ⵠⵠᐃᐃΔΔⵠ: "img/day-hand-skin144.png",
    ᐃᐃΔⲆⵠᐃⲆ: "img/night-hand-skin144.png",
    ΔΔⲆᐃⵠⲆᐃ: "img/day-hand-skin145.png",
    ⲆᐃΔⲆⲆᐃⲆ: "img/night-hand-skin145.png",
    ᐃⵠⲆᐃⵠⲆⲆ: "img/day-hand-skin146.png",
    ⵠⲆᐃᐃⲆΔΔ: "img/night-hand-skin146.png",
    ⲆⵠΔᐃΔᐃΔ: "img/day-hand-skin147.png",
    ᐃⵠⵠⲆⵠᐃⵠ: "img/night-hand-skin147.png",
    ⵠⵠⲆΔᐃⵠΔ: "img/day-hand-skin148.png",
    ⲆⲆⲆᐃⲆᐃΔ: "img/night-hand-skin148.png",
    ⵠᐃᐃⵠΔⲆᐃ: "img/day-hand-skin149.png",
    ᐃⲆᐃᐃⲆⵠᐃ: "img/night-hand-skin149.png",
    ΔⲆⲆⵠⲆⵠⵠ: "img/day-hand-skin150.png",
    Ⲇⵠⵠᐃⵠⵠᐃ: "img/night-hand-skin150.png",
    ⲆⲆᐃᐃⵠⲆⲆ: "img/day-bag-star0.png",
    ⵠⲆΔⲆΔᐃⵠ: "img/night-bag-star0.png",
    ᐃⲆΔᐃⵠᐃⲆ: "img/day-bag0.png",
    ᐃⵠΔⵠⲆⲆΔ: "img/night-bag0.png",
    ⵠⵠΔΔⵠᐃⲆ: "img/day-bag1.png",
    ⲆⵠⲆⲆⵠⲆᐃ: "img/night-bag1.png",
    ⲆⲆⲆⵠᐃⲆⲆ: "img/day-bag2.png",
    ΔΔΔΔⵠΔⵠ: "img/night-bag2.png",
    ⲆⵠⵠⵠⲆⵠᐃ: "img/day-bag3.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/night-bag3.png",
    ΔᐃΔΔⵠⵠΔ: "img/day-bag4.png",
    ⲆᐃⲆᐃⲆᐃⵠ: "img/night-bag4.png",
    ΔΔᐃⲆΔⵠΔ: "img/day-bag5.png",
    ᐃΔⵠⵠᐃᐃᐃ: "img/night-bag5.png",
    ᐃⵠΔΔⲆⲆᐃ: "img/day-bag6.png",
    ⲆⲆⲆⵠᐃᐃᐃ: "img/night-bag6.png",
    ΔⲆⵠⲆⵠΔⵠ: "img/day-bag7.png",
    ⲆⵠⵠΔΔⲆΔ: "img/night-bag7.png",
    ΔᐃΔΔⲆᐃΔ: "img/day-bag8.png",
    ⲆⲆⲆⵠⵠᐃᐃ: "img/night-bag8.png",
    ⵠⵠᐃᐃⵠⲆⵠ: "img/day-bag9.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/night-bag9.png",
    ΔΔΔᐃᐃᐃⵠ: "img/day-bag10.png",
    ΔᐃᐃⵠⲆⲆᐃ: "img/night-bag10.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-bag11.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/night-bag11.png",
    ΔᐃΔΔⵠⲆⲆ: "img/day-bag13.png",
    ⵠᐃⲆⲆΔᐃⲆ: "img/night-bag13.png",
    ΔᐃᐃⲆⵠⵠΔ: "img/day-bag14.png",
    ΔᐃⲆⲆᐃᐃᐃ: "img/night-bag14.png",
    ΔΔᐃᐃⵠⲆⲆ: "img/day-bag16.png",
    ⲆᐃᐃⵠΔⵠᐃ: "img/night-bag16.png",
    ᐃᐃⲆΔⵠΔΔ: "img/day-bag17.png",
    ⵠⵠΔⲆⲆᐃⲆ: "img/night-bag17.png",
    ᐃⲆⲆⲆΔΔΔ: "img/day-bag18.png",
    ᐃⵠⲆᐃΔⵠⵠ: "img/night-bag18.png",
    ᐃΔΔΔᐃΔⵠ: "img/day-bag19.png",
    ⲆⵠⲆⲆᐃⵠᐃ: "img/night-bag19.png",
    ΔⲆⲆᐃⲆΔⲆ: "img/day-bag20.png",
    ⲆᐃΔⲆⲆⲆᐃ: "img/night-bag20.png",
    ΔᐃⲆᐃΔⵠⲆ: "img/day-bag21.png",
    ⲆΔᐃᐃⲆⲆⲆ: "img/night-bag21.png",
    ᐃΔⲆᐃⲆΔⲆ: "img/day-bag22.png",
    ⵠⵠΔᐃᐃⵠᐃ: "img/night-bag22.png",
    ΔⵠⲆΔᐃⵠⲆ: "img/day-bag23.png",
    ⵠⵠⲆΔΔᐃⲆ: "img/night-bag23.png",
    ⵠᐃᐃᐃΔᐃΔ: "img/day-bag24.png",
    ⵠⵠⲆΔΔΔΔ: "img/night-bag24.png",
    ⵠⵠΔⲆⵠⲆⵠ: "img/day-bag25.png",
    ⵠΔⵠⲆⲆⲆⲆ: "img/night-bag25.png",
    ⵠΔΔᐃⵠΔⲆ: "img/day-bag26.png",
    ⵠⲆⲆᐃⲆⲆᐃ: "img/night-bag26.png",
    ⵠΔⵠᐃᐃⵠᐃ: "img/day-bag27.png",
    ⲆⲆⲆⲆΔⵠᐃ: "img/night-bag27.png",
    ⵠΔᐃⵠΔΔᐃ: "img/day-bag28.png",
    ⲆⵠⲆⵠⲆⲆΔ: "img/night-bag28.png",
    ⵠᐃΔⲆⲆᐃⲆ: "img/day-bag29.png",
    ΔΔⲆⲆⲆⵠΔ: "img/night-bag29.png",
    ⵠΔⵠⵠΔᐃⲆ: "img/day-bag30.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/night-bag30.png",
    ᐃⵠⵠⵠΔⵠⲆ: "img/day-bag31.png",
    ᐃⲆᐃⵠⵠⲆⲆ: "img/night-bag31.png",
    ⵠⲆⲆᐃⵠⲆⲆ: "img/day-bag32.png",
    ᐃⵠⵠⵠᐃⲆΔ: "img/night-bag32.png",
    ⲆΔⲆΔⲆⵠⲆ: "img/day-bag33.png",
    ⲆⲆⵠΔⲆⵠᐃ: "img/night-bag33.png",
    ⵠⵠΔΔⵠⵠⵠ: "img/day-bag34.png",
    ⵠⵠΔΔⵠⲆⵠ: "img/night-bag34.png",
    ⲆΔᐃⵠᐃΔⵠ: "img/day-bag35.png",
    ⲆⲆΔΔⵠΔⲆ: "img/night-bag35.png",
    ΔⲆΔΔᐃⵠᐃ: "img/day-bag36.png",
    ᐃⲆΔΔᐃΔⲆ: "img/night-bag36.png",
    ᐃⵠⵠⵠᐃᐃᐃ: "img/day-bag37.png",
    Δᐃⵠᐃᐃⵠᐃ: "img/night-bag37.png",
    ΔΔΔⵠⲆΔΔ: "img/day-bag38.png",
    ⵠⵠⲆΔⵠⲆΔ: "img/night-bag38.png",
    ⲆⵠΔΔⵠⲆΔ: "img/day-bag39.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/night-bag39.png",
    ⵠΔᐃᐃᐃΔΔ: "img/day-bag40.png",
    ΔΔΔⲆⵠΔΔ: "img/night-bag40.png",
    ⲆᐃⵠᐃΔⲆΔ: "img/day-bag41.png",
    ⲆⵠᐃⲆⵠⲆΔ: "img/night-bag41.png",
    ⵠΔⲆⲆⵠⲆⲆ: "img/day-bag42.png",
    ⵠⵠᐃΔⲆⵠⲆ: "img/night-bag42.png",
    ⵠᐃⲆⵠⲆⵠᐃ: "img/day-bag43.png",
    ⲆΔⲆΔⵠΔⵠ: "img/night-bag43.png",
    ⲆᐃᐃΔΔⵠᐃ: "img/day-bag44.png",
    Δⵠᐃⵠᐃᐃᐃ: "img/night-bag44.png",
    ΔⵠⵠᐃΔᐃΔ: "img/day-bag45.png",
    ⲆⲆᐃΔⵠΔⲆ: "img/night-bag45.png",
    ⲆΔⵠⵠᐃᐃⵠ: "img/day-bag46.png",
    ⵠⲆⵠⲆⲆΔᐃ: "img/night-bag46.png",
    ᐃⲆΔᐃⲆᐃⲆ: "img/day-bag47.png",
    ⵠⲆᐃΔⵠᐃᐃ: "img/night-bag47.png",
    ΔᐃΔⲆΔⲆΔ: "img/day-bag48.png",
    ᐃⵠⵠⵠⲆᐃᐃ: "img/night-bag48.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/day-bag49.png",
    ⲆᐃΔⲆΔⲆⵠ: "img/night-bag49.png",
    ⲆⲆⲆⲆⲆⵠΔ: "img/day-bag50.png",
    ⵠᐃᐃΔᐃⵠΔ: "img/night-bag50.png",
    ⲆⵠⲆΔᐃᐃΔ: "img/day-bag51.png",
    ⲆⲆΔΔΔΔΔ: "img/night-bag51.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/day-bag52.png",
    ΔⲆΔⵠⵠᐃΔ: "img/night-bag52.png",
    ΔⵠΔΔᐃⵠΔ: "img/day-bag53.png",
    ΔΔⲆΔⲆⵠΔ: "img/night-bag53.png",
    ᐃΔⲆᐃΔΔⵠ: "img/day-bag54.png",
    ⲆΔᐃᐃᐃᐃΔ: "img/night-bag54.png",
    ⵠⲆⲆⵠⵠⲆΔ: "img/day-bag55.png",
    ⵠⵠⵠᐃⲆΔΔ: "img/night-bag55.png",
    ΔⵠΔΔᐃⵠⲆ: "img/day-bag56.png",
    ⲆⵠⵠⲆⲆᐃΔ: "img/night-bag56.png",
    ᐃⵠΔⵠⵠⲆⵠ: "img/day-bag57.png",
    ᐃⲆⵠⵠⲆΔΔ: "img/night-bag57.png",
    ⵠⲆⲆΔⵠΔΔ: "img/day-bag58.png",
    ⵠⵠΔΔⲆᐃΔ: "img/night-bag58.png",
    ⵠⵠᐃᐃⵠΔΔ: "img/day-bag59.png",
    ⲆΔⲆᐃⵠΔΔ: "img/night-bag59.png",
    ΔⲆᐃⲆⵠⵠⲆ: "img/day-bag60.png",
    ᐃᐃⵠᐃⲆᐃᐃ: "img/night-bag60.png",
    ⵠᐃⲆᐃⲆⲆⵠ: "img/day-bag61.png",
    ᐃΔⵠⲆΔⲆΔ: "img/night-bag61.png",
    ΔᐃᐃΔΔⵠⵠ: "img/day-bag62.png",
    ⵠΔΔᐃⲆⲆΔ: "img/night-bag62.png",
    ΔᐃⲆⵠⵠⵠΔ: "img/day-bag63.png",
    ΔΔᐃᐃⵠⵠⲆ: "img/night-bag63.png",
    ⲆΔΔⵠΔᐃⵠ: "img/day-bag64.png",
    ⲆⵠΔⲆΔⵠΔ: "img/night-bag64.png",
    ⵠΔⲆⲆΔⲆΔ: "img/day-bag65.png",
    ⵠⵠΔⲆᐃᐃⲆ: "img/night-bag65.png",
    ⵠΔΔⲆᐃⲆᐃ: "img/day-bag66.png",
    ᐃⲆᐃⵠΔⲆΔ: "img/night-bag66.png",
    ΔᐃⵠⵠⲆΔΔ: "img/day-bag67.png",
    ⲆᐃⵠⲆΔⵠΔ: "img/night-bag67.png",
    ⵠᐃⲆΔⲆⵠⵠ: "img/day-bag68.png",
    ⵠΔⲆⵠΔᐃⲆ: "img/night-bag68.png",
    ⲆⵠⲆΔⲆⲆⵠ: "img/day-accessory0.png",
    ΔᐃΔⲆᐃᐃⵠ: "img/day-accessory0-pacques.png",
    ⵠⵠⲆΔΔᐃΔ: "img/night-accessory0-pacques.png",
    ΔⲆⲆⲆⵠⵠⵠ: "img/day-accessory13.png",
    ⲆⵠⵠⲆⲆⵠᐃ: "img/night-accessory13.png",
    ⵠΔΔⵠΔⲆⲆ: "img/day-accessory14.png",
    ⵠΔⲆΔⵠΔⵠ: "img/night-accessory14.png",
    ᐃΔⵠⲆⵠᐃᐃ: "img/day-accessory15.png",
    ΔΔᐃΔⵠΔΔ: "img/night-accessory15.png",
    ᐃΔΔⲆᐃᐃⵠ: "img/day-accessory16.png",
    ᐃⵠⵠΔⵠⵠΔ: "img/night-accessory16.png",
    ⵠᐃⵠΔⲆⲆⵠ: "img/day-accessory17.png",
    ᐃⵠᐃᐃⵠⲆⲆ: "img/day-accessory17.png",
    ΔⵠᐃΔⵠⲆΔ: "img/day-accessory19.png",
    ⲆⲆⲆᐃᐃᐃᐃ: "img/night-accessory19.png",
    ⵠᐃΔᐃᐃΔⲆ: "img/day-accessory20.png",
    Ⲇⵠᐃᐃᐃᐃⵠ: "img/night-accessory20.png",
    ΔᐃⲆΔⵠᐃᐃ: "img/day-accessory21.png",
    ⲆⲆⲆⲆⲆΔᐃ: "img/night-accessory21.png",
    ᐃΔⲆⵠᐃᐃᐃ: "img/day-accessory22.png",
    ΔⲆⲆⵠΔΔⲆ: "img/night-accessory22.png",
    ⵠᐃⲆⲆᐃᐃᐃ: "img/day-accessory23.png",
    ⵠⵠⲆΔΔᐃⵠ: "img/night-accessory23.png",
    ᐃᐃⲆⲆᐃⵠⵠ: "img/day-accessory24.png",
    ΔΔᐃᐃⵠᐃⵠ: "img/night-accessory24.png",
    ⲆᐃⵠⵠⲆΔⲆ: "img/day-accessory25.png",
    ΔΔⵠΔΔΔΔ: "img/night-accessory25.png",
    ΔⲆⲆⵠΔΔᐃ: "img/day-accessory26.png",
    ᐃⲆⲆⲆᐃΔΔ: "img/night-accessory26.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/day-accessory27.png",
    ⲆΔⵠᐃᐃᐃⲆ: "img/night-accessory27.png",
    ⵠⵠⵠᐃΔᐃⲆ: "img/day-accessory18.png",
    ⲆΔⲆⲆⲆΔΔ: "img/night-accessory18.png",
    ⲆⲆΔΔⲆⵠᐃ: "img/day-accessory29.png",
    ᐃⲆᐃⵠΔΔΔ: "img/night-accessory29.png",
    ⲆᐃᐃⲆⵠᐃΔ: "img/day-accessory30.png",
    ΔᐃⵠΔΔΔΔ: "img/night-accessory30.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/day-accessory31.png",
    ΔⵠⵠᐃⵠⵠΔ: "img/night-accessory31.png",
    ⲆⵠᐃⲆΔΔⲆ: "img/day-accessory32.png",
    ᐃⲆᐃⲆⲆⵠⵠ: "img/night-accessory32.png",
    ⲆⵠⲆΔⲆΔⲆ: "img/day-accessory33.png",
    ⲆΔΔⲆⵠⲆΔ: "img/night-accessory33.png",
    ⵠᐃΔⵠΔΔΔ: "img/day-accessory34.png",
    ΔΔⵠⵠⲆⵠᐃ: "img/night-accessory34.png",
    ΔⵠᐃⲆᐃⵠᐃ: "img/day-accessory35.png",
    ᐃᐃⲆΔΔⵠΔ: "img/night-accessory35.png",
    ΔⵠᐃᐃᐃⲆΔ: "img/day-accessory28.png",
    ᐃᐃΔⵠΔᐃⲆ: "img/night-accessory28.png",
    ᐃΔⵠᐃⵠᐃⵠ: "img/day-accessory36.png",
    ⲆΔⲆΔⵠⲆⲆ: "img/night-accessory36.png",
    ⲆΔΔⲆⵠⵠᐃ: "img/day-accessory37.png",
    ⵠᐃᐃⲆⵠΔⵠ: "img/night-accessory37.png",
    ΔΔΔⲆΔᐃⲆ: "img/day-accessory39.png",
    ⵠᐃⵠⲆΔᐃⲆ: "img/night-accessory39.png",
    ᐃⲆΔⵠᐃⵠⵠ: "img/day-accessory40.png",
    ⵠⲆⲆⲆⲆⵠΔ: "img/night-accessory40.png",
    ΔⵠⵠⲆᐃᐃᐃ: "img/day-accessory41.png",
    ⲆⵠⲆᐃΔΔΔ: "img/night-accessory41.png",
    ᐃᐃΔᐃⵠΔⲆ: "img/day-accessory42.png",
    ᐃᐃΔⵠⲆΔⲆ: "img/night-accessory42.png",
    ΔⵠΔᐃⵠΔⵠ: "img/day-accessory43.png",
    ΔΔⵠᐃⵠⲆΔ: "img/night-accessory43.png",
    ᐃΔᐃⲆⵠⵠⵠ: "img/day-accessory44.png",
    ΔⲆⵠⲆᐃⵠᐃ: "img/night-accessory44.png",
    ΔⲆⵠⲆΔⵠᐃ: "img/day-accessory38.png",
    ⲆⲆᐃⵠⵠΔΔ: "img/night-accessory38.png",
    ΔᐃⵠᐃᐃΔᐃ: "img/day-accessory46.png",
    ᐃⵠⲆΔΔᐃⵠ: "img/night-accessory46.png",
    ⵠⵠᐃⲆΔⵠΔ: "img/day-accessory47.png",
    ⵠΔΔⲆⲆⲆⲆ: "img/night-accessory47.png",
    ⵠΔᐃᐃⲆⵠⵠ: "img/day-accessory48.png",
    ᐃΔΔΔΔΔᐃ: "img/night-accessory48.png",
    ᐃΔΔⲆⵠⵠΔ: "img/day-accessory49.png",
    ⵠᐃⲆΔⲆΔᐃ: "img/night-accessory49.png",
    ᐃᐃⲆⵠᐃᐃⲆ: "img/day-accessory45.png",
    ⲆⵠᐃᐃᐃΔᐃ: "img/night-accessory45.png",
    ⵠⲆⲆⵠΔⲆᐃ: "img/day-accessory50.png",
    ⵠⲆⵠΔⵠⲆᐃ: "img/night-accessory50.png",
    ⲆⵠⲆᐃᐃᐃΔ: "img/day-accessory51.png",
    ⲆⵠΔᐃΔⵠⲆ: "img/night-accessory51.png",
    ⲆⲆᐃⵠᐃⲆΔ: "img/day-accessory52.png",
    ᐃΔΔⲆΔⲆΔ: "img/night-accessory52.png",
    ΔΔᐃᐃΔᐃᐃ: "img/day-accessory53.png",
    ⵠⵠⲆⵠⲆⲆⲆ: "img/night-accessory53.png",
    ⲆⵠⵠᐃⲆΔᐃ: "img/day-accessory54.png",
    ᐃΔⲆⲆⲆⵠΔ: "img/night-accessory54.png",
    ⲆⵠⲆΔΔᐃⲆ: "img/day-accessory55.png",
    ΔΔⵠΔⲆⵠᐃ: "img/night-accessory55.png",
    ⵠⵠⲆⲆᐃΔⵠ: "img/day-accessory56.png",
    ⲆΔⵠⵠᐃⲆᐃ: "img/night-accessory56.png",
    ᐃⵠⵠⲆᐃⵠⵠ: "img/day-accessory57.png",
    ⲆⵠⲆⲆΔᐃⲆ: "img/night-accessory57.png",
    ⵠⲆⵠⵠΔᐃⲆ: "img/day-accessory58.png",
    ⵠⲆΔᐃᐃᐃΔ: "img/night-accessory58.png",
    ᐃⵠⵠⲆΔΔⲆ: "img/day-accessory59.png",
    ⵠⲆⲆΔᐃⲆΔ: "img/night-accessory59.png",
    ⲆΔᐃᐃⵠⵠᐃ: "img/day-accessory60.png",
    ΔᐃᐃΔᐃⵠⵠ: "img/night-accessory60.png",
    ΔⲆⲆΔⲆⵠᐃ: "img/day-accessory61.png",
    ⵠⲆᐃΔⵠΔⵠ: "img/night-accessory61.png",
    ᐃⲆⵠⲆⵠᐃⵠ: "img/day-accessory62.png",
    ⲆⵠᐃᐃΔΔⵠ: "img/night-accessory62.png",
    ⲆΔᐃΔⵠᐃΔ: "img/day-accessory63.png",
    ⵠⵠⵠⵠΔᐃⵠ: "img/night-accessory63.png",
    ΔⲆⲆᐃΔⲆⵠ: "img/day-accessory64.png",
    ᐃΔᐃⵠᐃⲆΔ: "img/night-accessory64.png",
    ⵠⵠⲆⵠⵠΔᐃ: "img/day-accessory65.png",
    ΔⲆⵠⵠᐃⲆᐃ: "img/night-accessory65.png",
    ΔΔΔⲆⵠⵠⵠ: "img/day-accessory66.png",
    ⲆⵠⵠᐃΔΔⵠ: "img/night-accessory66.png",
    ΔⲆΔΔᐃᐃᐃ: "img/day-accessory67.png",
    ΔᐃᐃΔᐃΔᐃ: "img/night-accessory67.png",
    ᐃⵠⵠᐃΔⲆⵠ: "img/day-accessory68.png",
    ΔΔⵠΔΔⵠⵠ: "img/night-accessory68.png",
    ΔᐃΔⲆⵠᐃᐃ: "img/day-accessory69.png",
    ᐃⲆᐃⵠⵠΔᐃ: "img/night-accessory69.png",
    ⵠⲆΔᐃⵠⲆⲆ: "img/day-accessory70.png",
    ᐃⲆᐃᐃⲆⲆᐃ: "img/night-accessory70.png",
    ΔΔⵠⲆᐃᐃᐃ: "img/day-accessory71.png",
    ⵠΔΔᐃⵠᐃⲆ: "img/night-accessory71.png",
    ⲆΔⲆᐃᐃⲆⵠ: "img/day-accessory72.png",
    ⵠΔⲆⲆΔΔΔ: "img/night-accessory72.png",
    ΔⵠⲆᐃⵠΔⵠ: "img/day-accessory73.png",
    ⲆᐃⲆⲆᐃᐃᐃ: "img/night-accessory73.png",
    ᐃΔΔⲆΔⵠⲆ: "img/day-accessory74.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/night-accessory74.png",
    ⵠⵠⲆᐃⲆΔⵠ: "img/day-accessory75.png",
    ⵠⲆⵠΔΔⵠⲆ: "img/night-accessory75.png",
    ΔΔⵠᐃⲆⲆⲆ: "img/day-accessory76.png",
    ⲆΔⵠⵠⵠⵠⵠ: "img/night-accessory76.png",
    ⵠⲆΔᐃⵠⲆᐃ: "img/day-accessory77.png",
    ⲆⲆⲆΔᐃⵠΔ: "img/night-accessory77.png",
    ⵠⲆᐃΔᐃⵠΔ: "img/day-accessory78.png",
    ΔᐃⲆᐃⵠⵠⵠ: "img/night-accessory78.png",
    ⲆⲆⲆⵠⲆΔⵠ: "img/day-accessory79.png",
    ⵠⵠᐃᐃᐃΔⵠ: "img/night-accessory79.png",
    ⵠᐃⲆΔΔⲆΔ: "img/day-accessory80.png",
    ᐃΔⲆⲆⵠⵠΔ: "img/night-accessory80.png",
    ⲆⲆⵠⲆΔⵠΔ: "img/day-accessory81.png",
    ΔⵠⵠⵠᐃⲆᐃ: "img/night-accessory81.png",
    ⵠⵠΔⵠΔΔᐃ: "img/day-book0.png",
    ⵠⲆⵠᐃⲆⲆⵠ: "img/night-book0.png",
    ⵠⲆⵠΔᐃⵠΔ: "img/day-book1.png",
    ⲆⲆᐃⲆᐃᐃΔ: "img/night-book1.png",
    ᐃⵠⵠΔⲆⵠΔ: "img/day-book2.png",
    ΔΔᐃᐃᐃⵠⲆ: "img/night-book2.png",
    ΔⵠΔⵠΔⲆⲆ: "img/day-book3.png",
    ⵠⵠᐃΔΔΔⵠ: "img/night-book3.png",
    ΔⲆⵠᐃⵠⵠⲆ: "img/day-book4.png",
    ᐃᐃⵠΔᐃⵠΔ: "img/night-book4.png",
    ⵠΔᐃⲆⲆΔΔ: "img/day-book5.png",
    ᐃΔᐃⵠΔΔⵠ: "img/night-book5.png",
    ΔᐃΔΔⲆⲆᐃ: "img/day-book6.png",
    ⵠⵠⵠⵠᐃᐃᐃ: "img/night-book6.png",
    ΔᐃⵠᐃᐃΔⲆ: "img/day-book7.png",
    ΔⲆⲆᐃᐃΔⲆ: "img/night-book7.png",
    ⵠⲆᐃΔᐃⲆⵠ: "img/day-book8.png",
    ΔΔⲆΔᐃⲆⲆ: "img/night-book8.png",
    ⵠΔⵠΔⲆⵠΔ: "img/day-book9.png",
    ⲆΔⲆⵠᐃΔᐃ: "img/night-book9.png",
    ΔᐃΔΔⵠⲆᐃ: "img/day-book10.png",
    ⵠᐃΔⲆΔⲆΔ: "img/night-book10.png",
    ΔⲆⵠⵠⵠᐃⲆ: "img/day-book11.png",
    ΔⵠᐃⲆᐃΔⲆ: "img/night-book11.png",
    ᐃⲆⲆΔΔΔΔ: "img/day-book12.png",
    ᐃᐃΔΔᐃᐃΔ: "img/night-book12.png",
    ⵠΔᐃᐃⵠΔⲆ: "img/day-book13.png",
    ᐃᐃⵠᐃⲆᐃΔ: "img/night-book13.png",
    ⵠⲆΔⵠⵠΔΔ: "img/day-book14.png",
    ⵠᐃⲆΔⲆᐃⵠ: "img/night-book14.png",
    ΔⵠⲆᐃⵠⵠΔ: "img/day-book15.png",
    ⲆΔΔΔⵠⵠⲆ: "img/night-book15.png",
    ⲆΔⵠⲆΔⲆᐃ: "img/day-book16.png",
    ⲆⲆᐃΔⵠᐃΔ: "img/night-book16.png",
    ⲆⲆⵠΔⲆᐃⲆ: "img/day-book17.png",
    ⲆΔⲆΔᐃᐃΔ: "img/night-book17.png",
    ⲆⲆᐃⵠⲆΔᐃ: "img/day-book18.png",
    ⲆⲆΔⲆΔᐃⵠ: "img/night-book18.png",
    ΔⲆⲆΔⲆΔᐃ: "img/day-book19.png",
    ΔᐃⵠⵠΔΔΔ: "img/night-book19.png",
    ⲆⵠᐃⲆⵠⵠᐃ: "img/day-book20.png",
    ⲆΔⲆⵠⵠⵠⵠ: "img/night-book20.png",
    ⲆⵠⵠᐃΔⲆᐃ: "img/day-book21.png",
    ⵠᐃⵠⲆⲆΔΔ: "img/night-book21.png",
    ⵠⲆΔⲆⲆⵠⲆ: "img/day-book22.png",
    ΔⲆⲆⵠᐃⲆⲆ: "img/night-book22.png",
    ΔⵠⵠⵠΔΔΔ: "img/day-book23.png",
    ⲆⵠᐃΔⲆⲆᐃ: "img/night-book23.png",
    ⲆᐃⵠᐃⲆⲆⵠ: "img/day-book24.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/night-book24.png",
    ᐃᐃᐃⵠᐃᐃⵠ: "img/day-book25.png",
    ΔⵠⵠⲆⲆⲆᐃ: "img/night-book25.png",
    ΔⲆΔΔⲆⲆᐃ: "img/day-book26.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/night-book26.png",
    ⲆᐃⲆΔⵠⲆᐃ: "img/day-book27.png",
    ΔⲆΔᐃⲆⵠᐃ: "img/night-book27.png",
    ᐃⵠⵠΔᐃᐃⵠ: "img/day-book28.png",
    ⲆⵠᐃᐃΔΔΔ: "img/night-book28.png",
    ⵠᐃΔΔΔⵠⲆ: "img/day-book29.png",
    ᐃⲆΔⵠⵠΔΔ: "img/night-book29.png",
    ⵠⲆⵠⵠᐃΔΔ: "img/day-book30.png",
    ΔΔⵠⵠᐃΔⲆ: "img/night-book30.png",
    ⲆⵠⲆΔⵠᐃⲆ: "img/day-book31.png",
    ⲆⵠⵠⵠΔᐃΔ: "img/night-book31.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/day-book32.png",
    ⲆᐃⵠⵠᐃᐃΔ: "img/night-book32.png",
    ᐃΔᐃⲆⲆΔΔ: "img/day-book33.png",
    ᐃΔⵠⲆⵠᐃΔ: "img/night-book33.png",
    ᐃⲆΔᐃΔⵠΔ: "img/day-book34.png",
    ᐃⲆⲆⵠⲆᐃⵠ: "img/night-book34.png",
    ᐃⵠⵠᐃΔᐃᐃ: "img/day-book35.png",
    ⲆΔⲆⵠⲆⵠⵠ: "img/night-book35.png",
    ⵠΔⵠᐃΔΔⲆ: "img/day-book36.png",
    ⵠⲆᐃⲆⲆⲆⵠ: "img/night-book36.png",
    ⵠᐃΔⵠⲆⵠᐃᐃⵠ: "img/day-book37.png",
    ⲆᐃᐃⲆᐃᐃᐃΔⵠ: "img/night-book37.png",
    ⵠⵠᐃᐃⲆᐃΔ: "img/day-book38.png",
    ⵠΔᐃⵠⵠⲆⲆ: "img/night-book38.png",
    ⲆᐃⵠⵠⲆᐃΔ: "img/day-book39.png",
    ⵠΔΔⲆⲆΔᐃ: "img/night-book39.png",
    ⵠᐃΔᐃᐃⵠⲆ: "img/day-book40.png",
    ΔᐃⲆⲆᐃⵠᐃ: "img/night-book40.png",
    ΔⵠΔⵠᐃΔⵠ: "img/day-book41.png",
    ⵠⲆᐃⵠⲆΔⵠ: "img/night-book41.png",
    ⲆⲆⲆΔⲆⲆΔ: "img/day-book42.png",
    ᐃⲆⲆΔᐃᐃᐃ: "img/night-book42.png",
    ΔᐃⲆⵠⵠᐃⵠ: "img/day-book43.png",
    ΔΔᐃⲆΔᐃᐃ: "img/night-book43.png",
    ⵠⲆΔᐃᐃⵠᐃ: "img/day-book44.png",
    ΔΔᐃΔᐃΔᐃ: "img/night-book44.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/day-book45.png",
    ⵠⲆᐃⲆΔⲆᐃ: "img/night-book45.png",
    ΔⵠΔⲆΔᐃⵠ: "img/day-crate1.png",
    ᐃΔⲆⵠⲆⲆᐃ: "img/night-crate1.png",
    ⲆⲆᐃⲆΔⲆΔ: "img/day-crate2.png",
    ᐃᐃᐃⵠⲆᐃⲆ: "img/night-crate2.png",
    ΔⵠΔⵠΔⵠⵠ: "img/day-crate3.png",
    ⵠⵠⲆᐃΔᐃⲆ: "img/night-crate3.png",
    ⲆΔⵠΔⵠΔᐃ: "img/day-crate4.png",
    ᐃΔⵠᐃⵠΔᐃ: "img/night-crate4.png",
    ⲆΔⲆⵠⲆⲆΔ: "img/day-crate5.png",
    ⵠΔⲆⵠΔΔᐃ: "img/night-crate5.png",
    ᐃⲆΔΔᐃⲆⲆ: "img/day-crate6.png",
    ⵠᐃᐃⵠⵠΔᐃ: "img/night-crate6.png",
    ᐃΔΔΔᐃⵠⵠ: "img/day-crate7.png",
    ⲆᐃⵠⵠⵠⲆᐃ: "img/night-crate7.png",
    ⲆΔᐃⲆⲆⵠⲆ: "img/day-crate8.png",
    ⵠΔⵠⵠᐃΔⲆ: "img/night-crate8.png",
    ⲆⵠᐃⲆⵠΔᐃ: "img/day-crate9.png",
    ᐃᐃᐃⲆⵠᐃΔ: "img/night-crate9.png",
    ᐃⵠⵠΔⵠΔⵠ: "img/day-crate10.png",
    ΔⲆⵠᐃⲆⵠᐃ: "img/night-crate10.png",
    ⲆΔⵠⵠΔⲆΔ: "img/day-crate11.png",
    ΔⵠⵠΔΔΔⲆ: "img/night-crate11.png",
    ΔΔᐃⲆᐃⵠΔ: "img/day-crate12.png",
    ᐃΔⵠⲆⲆᐃΔ: "img/night-crate12.png",
    ⵠᐃΔᐃᐃⲆΔ: "img/day-crate13.png",
    ΔΔⲆΔᐃᐃⲆ: "img/night-crate13.png",
    ᐃΔⲆΔⲆΔⲆ: "img/day-crate14.png",
    ᐃᐃᐃᐃΔⲆⵠ: "img/night-crate14.png",
    ⲆᐃⲆΔⵠᐃⵠ: "img/day-crate15.png",
    ⲆᐃΔᐃᐃⵠⲆ: "img/night-crate15.png",
    ⵠⵠΔΔΔⵠᐃ: "img/day-crate16.png",
    ΔΔⵠᐃⵠⵠⲆ: "img/night-crate16.png",
    ΔⲆΔᐃⵠᐃⵠ: "img/day-crate17.png",
    ⲆⵠΔⵠⲆΔᐃ: "img/night-crate17.png",
    ᐃΔᐃⵠⵠᐃⵠ: "img/day-crate18.png",
    ᐃⲆᐃⲆΔⵠⲆ: "img/night-crate18.png",
    ⲆᐃᐃΔᐃΔⵠ: "img/day-crate19.png",
    ΔⲆΔⲆᐃⲆⵠ: "img/night-crate19.png",
    ⵠⵠⵠⵠⵠⲆⵠ: "img/day-crate20.png",
    ⲆΔⲆⵠⵠⲆᐃ: "img/night-crate20.png",
    ᐃΔᐃⵠΔᐃΔ: "img/day-crate21.png",
    ⲆⵠⲆΔᐃᐃⵠ: "img/night-crate21.png",
    ⲆᐃⵠΔⵠⲆΔ: "img/day-crate22.png",
    Δⵠⵠᐃᐃᐃᐃ: "img/night-crate22.png",
    ⵠⲆΔΔΔⵠⵠ: "img/day-crate23.png",
    ⵠⵠⵠⲆⵠΔⵠ: "img/night-crate23.png",
    ᐃⲆᐃΔⵠᐃΔ: "img/day-crate24.png",
    ᐃⲆΔᐃᐃⲆⲆ: "img/night-crate24.png",
    ᐃΔⲆΔⵠΔⵠ: "img/day-crate25.png",
    ΔΔᐃΔΔᐃⲆ: "img/night-crate25.png",
    ⲆᐃΔΔⵠΔⵠ: "img/day-crate26.png",
    ΔΔᐃⲆᐃⲆⵠ: "img/night-crate26.png",
    ᐃⵠⵠⲆΔΔⵠ: "img/day-crate27.png",
    ⵠΔᐃⵠΔⲆⵠ: "img/night-crate27.png",
    ⲆⲆⵠⵠⵠΔⲆ: "img/day-crate28.png",
    ΔΔⲆᐃⲆⲆΔ: "img/night-crate28.png",
    ΔΔⵠⲆΔⲆⲆ: "img/day-crate29.png",
    ᐃᐃⵠⵠΔΔᐃ: "img/night-crate29.png",
    ΔⵠΔⲆⲆΔⵠ: "img/day-crate30.png",
    ΔⲆΔⵠⵠⲆⲆ: "img/night-crate30.png",
    ⲆⵠᐃⵠⲆᐃΔ: "img/day-crate31.png",
    ΔΔⲆᐃⵠᐃⲆ: "img/night-crate31.png",
    ΔΔⲆⵠΔᐃΔ: "img/day-crate32.png",
    Δⵠⵠⵠᐃᐃⵠ: "img/night-crate32.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/day-crate33.png",
    ⵠᐃⲆᐃᐃⲆⵠ: "img/night-crate33.png",
    ⵠⵠⲆⲆⵠⲆᐃ: "img/day-crate34.png",
    ⵠᐃᐃⲆᐃΔⲆ: "img/night-crate34.png",
    ⲆᐃᐃᐃΔⲆⵠ: "img/day-crate35.png",
    ᐃΔⵠΔΔΔⵠ: "img/night-crate35.png",
    ⵠΔᐃⲆᐃⵠⲆ: "img/day-crate36.png",
    ⲆᐃΔⲆⵠⵠᐃ: "img/night-crate36.png",
    ΔᐃⵠⲆⲆᐃⵠ: "img/day-crate37.png",
    ⵠᐃⵠⲆᐃΔⵠ: "img/night-crate37.png",
    ⲆΔΔᐃⲆΔⲆ: "img/day-crate38.png",
    ΔΔⵠⵠΔⵠᐃ: "img/night-crate38.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/day-crate39.png",
    ᐃⵠⲆⵠΔΔⵠ: "img/night-crate39.png",
    ⵠⲆⵠᐃⲆΔⲆ: "img/day-crate40.png",
    ⲆᐃᐃⵠΔᐃᐃ: "img/night-crate40.png",
    ⵠᐃΔⵠⲆᐃⵠ: "img/day-crate41.png",
    ⲆⲆΔⲆⵠⵠΔ: "img/night-crate41.png",
    ⵠᐃⲆΔⲆⲆΔ: "img/day-crate42.png",
    ⲆΔΔΔᐃᐃⵠ: "img/night-crate42.png",
    ΔⵠΔⲆⲆΔΔ: "img/day-crate43.png",
    ΔⵠⲆⲆΔᐃⲆ: "img/night-crate43.png",
    ⲆⲆⵠⵠⵠⲆⵠ: "img/day-crate44.png",
    ᐃᐃⲆΔⲆⵠᐃ: "img/night-crate44.png",
    ΔΔⵠΔΔⲆᐃ: "img/day-crate45.png",
    ᐃⵠΔⲆⵠⵠⵠ: "img/night-crate45.png",
    ᐃⵠⵠᐃⲆᐃΔ: "img/day-crate46.png",
    ΔⵠᐃΔⵠⵠΔ: "img/night-crate46.png",
    ⲆᐃⵠᐃᐃΔᐃ: "img/day-crate47.png",
    ⵠⲆⲆⲆⵠᐃᐃ: "img/night-crate47.png",
    ᐃⲆⵠΔᐃΔΔ: "img/day-crate48.png",
    ᐃᐃⲆⵠΔᐃⲆ: "img/night-crate48.png",
    ᐃΔⵠΔⲆⲆⵠ: "img/day-crate49.png",
    ⵠΔⲆⲆⵠⲆΔ: "img/night-crate49.png",
    ΔᐃΔⲆⵠⲆᐃ: "img/day-crate50.png",
    ΔⲆⵠⲆΔⲆⵠ: "img/night-crate50.png",
    ⲆⵠΔⲆΔᐃⵠ: "img/day-crate51.png",
    ΔⵠⲆⵠⵠΔᐃ: "img/night-crate51.png",
    ⲆᐃⵠᐃΔΔⵠ: "img/day-crate52.png",
    ᐃⲆᐃᐃⵠⵠΔ: "img/night-crate52.png",
    ⵠᐃⵠⵠᐃΔⲆ: "img/day-crate53.png",
    ⵠΔⵠⲆᐃⲆΔ: "img/night-crate53.png",
    ΔᐃᐃⲆᐃᐃⲆ: "img/day-crate54.png",
    ᐃⲆΔᐃⲆⵠᐃ: "img/night-crate54.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/day-crate55.png",
    ⲆⵠᐃⲆΔⵠⲆ: "img/night-crate55.png",
    ⵠΔⲆΔᐃᐃᐃ: "img/day-crate56.png",
    ⵠⲆᐃᐃΔΔᐃ: "img/night-crate56.png",
    ⲆᐃᐃⲆⵠΔⵠ: "img/day-crate57.png",
    ΔᐃΔⲆⲆⵠΔ: "img/night-crate57.png",
    ⲆⵠⵠΔΔⲆᐃ: "img/day-crate58.png",
    ⵠᐃⲆⲆⲆᐃⲆ: "img/night-crate58.png",
    ⲆⲆᐃⵠⲆⵠⲆ: "img/day-crate59.png",
    ⲆᐃⲆᐃⲆⵠΔ: "img/night-crate59.png",
    ⲆᐃᐃᐃΔⲆΔ: "img/day-crate60.png",
    ⵠΔΔΔⵠⲆⵠ: "img/night-crate60.png",
    ΔΔⲆⲆΔⲆᐃ: "img/day-crate61.png",
    ᐃΔⲆⲆᐃᐃᐃ: "img/night-crate61.png",
    ΔΔᐃᐃΔΔΔ: "img/day-crate62.png",
    ᐃΔΔⲆⲆⵠⲆ: "img/night-crate62.png",
    ᐃⲆⲆᐃⲆⵠⲆ: "img/day-crate63.png",
    ΔΔᐃᐃⲆᐃΔ: "img/night-crate63.png",
    ᐃⲆⲆΔΔⵠᐃ: "img/day-crate64.png",
    ΔⵠΔΔᐃΔⲆ: "img/night-crate64.png",
    ⲆᐃᐃᐃᐃⵠⲆ: "img/day-crate65.png",
    ΔΔΔⲆᐃΔΔ: "img/night-crate65.png",
    ⲆᐃⵠΔⲆⲆⵠ: "img/day-crate66.png",
    ΔᐃⵠⲆᐃⵠⵠ: "img/night-crate66.png",
    ΔᐃⵠΔⵠᐃⵠ: "img/day-crate67.png",
    ᐃΔⵠᐃΔΔⲆ: "img/night-crate67.png",
    ΔΔᐃᐃᐃᐃⲆ: "img/day-crate68.png",
    ΔΔᐃⵠⲆⵠΔ: "img/night-crate68.png",
    ⲆᐃⲆⵠΔΔΔ: "img/day-crate69.png",
    ᐃΔⲆΔⲆⲆⵠ: "img/night-crate69.png",
    ⲆΔᐃᐃΔⵠᐃ: "img/day-crate70.png",
    ᐃⲆᐃᐃⵠᐃᐃ: "img/night-crate70.png",
    ⵠⲆΔⵠⵠᐃⲆ: "img/day-crate71.png",
    ⵠⲆⲆⵠⲆⲆⲆ: "img/night-crate71.png",
    ᐃΔᐃᐃᐃⵠⵠ: "img/day-crate72.png",
    ⵠΔⲆΔⵠⲆᐃ: "img/night-crate72.png",
    ⵠᐃⲆⲆⲆⵠΔ: "img/day-herb0.png",
    ΔΔΔⵠᐃⲆᐃ: "img/day-herb1.png",
    ΔΔⵠⲆᐃΔᐃ: "img/day-herb2.png",
    ⵠⵠⲆⵠΔⵠⵠ: "img/day-herb3.png",
    ⵠⵠᐃⲆⵠⵠᐃ: "img/day-herb4.png",
    ᐃᐃΔⲆᐃᐃⲆ: "img/day-herb5.png",
    ⲆΔᐃⵠᐃⵠⵠ: "img/day-herb6.png",
    ᐃⵠⵠΔⵠⲆΔ: "img/day-herb7.png",
    ⲆΔᐃⵠᐃᐃΔ: "img/day-herb8.png",
    ⵠⵠᐃⲆΔᐃⲆ: "img/day-herb9.png",
    ⲆᐃΔᐃᐃⵠΔ: "img/day-herb10.png",
    ⵠⵠᐃⵠΔᐃᐃ: "img/day-herb11.png",
    ΔᐃᐃⲆⲆⲆⵠ: "img/day-herb12.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/day-herb13.png",
    ΔⲆⵠⲆᐃⲆⵠ: "img/day-herb14.png",
    ΔⲆⲆⵠΔᐃᐃ: "img/day-herb15.png",
    ⲆΔᐃᐃΔΔⲆ: "img/day-shell0.png",
    ⵠᐃΔΔⵠΔⲆ: "img/day-shell1.png",
    ΔⵠⲆⵠΔΔᐃ: "img/day-shell2.png",
    ⵠΔⲆΔᐃΔᐃ: "img/day-leaf1.png",
    ΔⲆΔⲆΔΔⵠ: "img/day-leaf2.png",
    ΔⲆΔᐃΔᐃⵠ: "img/day-leaf3.png",
    ᐃⲆᐃⲆΔⲆⵠ: "img/day-leaf4.png",
    ΔΔⲆⵠᐃᐃⲆ: "img/day-leaf5.png",
    ΔⲆⵠⵠⲆⲆⵠ: "img/day-leaf6.png",
    ᐃᐃⲆⲆᐃΔΔ: "img/day-leaf7.png",
    ᐃⲆᐃⲆΔΔⲆ: "img/day-leaf8.png",
    ⲆⲆⵠⵠⲆⵠⵠ: "img/day-rock0.png",
    ΔⲆΔΔᐃΔᐃ: "img/day-rock1.png",
    ΔⵠᐃⲆⲆΔⲆ: "img/day-rock2.png",
    ⵠΔΔΔⵠΔᐃ: "img/day-rock3.png",
    ⵠⲆᐃⵠᐃᐃⲆ: "img/day-rock4.png",
    ΔᐃⲆⵠᐃⵠᐃ: "img/day-rock5.png",
    ᐃⵠⵠΔⲆⲆΔ: "img/day-rock6.png",
    ⲆⲆⵠⵠⵠΔⵠ: "img/day-rock7.png",
    ⲆΔΔⵠⵠΔⲆ: "img/day-rock8.png",
    ⲆⲆᐃᐃⲆⵠⲆ: "img/day-rock9.png",
    ΔᐃΔΔⵠᐃΔ: "img/day-rock10.png",
    ⵠⵠⲆΔⲆᐃΔ: "img/day-rock11.png",
    ᐃⲆⲆⵠⵠⵠⵠ: "img/day-rock12.png",
    ΔⲆᐃⲆⲆᐃⵠ: "img/day-rock13.png",
    ΔⲆᐃᐃⲆΔⲆ: "img/day-flower1.png",
    ⵠᐃⵠⲆⵠΔΔ: "img/day-flower2.png",
    ⲆᐃⲆΔΔΔᐃ: "img/day-flower3.png",
    ᐃᐃⲆΔⵠⵠΔ: "img/day-flower4.png",
    ΔΔⵠΔⵠⲆᐃ: "img/day-flower5.png",
    ᐃⵠⵠΔⵠⵠⵠ: "img/day-flower6.png",
    ⲆΔΔΔⵠⲆⵠ: "img/day-flower7.png",
    ΔᐃΔᐃᐃᐃᐃ: "img/day-flower8.png",
    ⵠⲆⲆⲆΔⵠⵠ: "img/day-flower9.png",
    ⲆΔᐃⲆⲆΔⲆ: "img/day-herb16.png",
    ᐃᐃⲆⵠᐃᐃΔ: "img/day-herb17.png",
    ⵠⵠⵠⵠⵠᐃⲆ: "img/day-herb18.png",
    ΔⲆᐃⵠⲆΔᐃ: "img/day-herb19.png",
    ΔⵠⵠΔΔΔⵠ: "img/day-herb20.png",
    ᐃⵠᐃΔΔΔⵠ: "img/day-herb21.png",
    ΔᐃᐃΔᐃⲆΔ: "img/night-herb0.png",
    ⵠⲆⵠⲆⵠᐃⵠ: "img/night-herb1.png",
    ⵠΔᐃⵠΔⲆᐃ: "img/night-herb2.png",
    ΔΔⲆΔⵠΔΔ: "img/night-herb3.png",
    ⲆΔΔⲆⵠᐃΔ: "img/night-herb4.png",
    ⲆⵠⵠⵠⲆᐃⲆ: "img/night-herb5.png",
    ⵠΔΔᐃⵠⲆΔ: "img/night-herb6.png",
    ΔⲆᐃⲆᐃⲆⲆ: "img/night-herb7.png",
    ⵠᐃⵠⲆΔⵠⲆ: "img/night-herb8.png",
    ΔⵠⵠⲆⵠᐃⲆ: "img/night-herb9.png",
    ⲆΔⲆⵠΔⲆᐃ: "img/night-herb10.png",
    ⵠⵠᐃΔⵠᐃΔ: "img/night-herb11.png",
    ⲆΔᐃⵠΔΔⵠ: "img/night-herb12.png",
    ΔⵠⵠᐃⲆⵠᐃ: "img/night-herb13.png",
    ΔᐃⵠⲆΔⲆΔ: "img/night-herb14.png",
    ⵠⲆᐃᐃᐃⲆⵠ: "img/night-herb15.png",
    ᐃΔΔⵠᐃⵠΔ: "img/night-shell0.png",
    ⲆⲆΔΔⲆΔᐃ: "img/night-shell1.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/night-shell2.png",
    ⵠΔᐃⲆⵠⵠΔ: "img/night-leaf1.png",
    ⲆⲆⵠΔⵠⵠⲆ: "img/night-leaf2.png",
    ΔⲆⵠⲆⲆⵠΔ: "img/night-leaf3.png",
    ΔⲆⲆⲆᐃΔⵠ: "img/night-leaf4.png",
    ⵠⵠΔⵠᐃᐃΔ: "img/night-leaf5.png",
    ᐃᐃΔⲆⲆⵠⲆ: "img/night-leaf6.png",
    ᐃΔΔᐃⲆⲆⵠ: "img/night-leaf7.png",
    ᐃⵠⲆᐃᐃⵠΔ: "img/night-leaf8.png",
    ⲆᐃΔΔⲆᐃⲆ: "img/night-rock0.png",
    ᐃⵠᐃᐃⵠᐃⲆ: "img/night-rock1.png",
    ⵠΔΔⲆⵠⲆΔ: "img/night-rock2.png",
    ⵠᐃⲆⲆⵠΔⵠ: "img/night-rock3.png",
    ⲆΔⲆᐃⵠⵠⲆ: "img/night-rock4.png",
    ᐃΔⲆⵠΔⲆⲆ: "img/night-rock5.png",
    ᐃⲆᐃΔᐃᐃΔ: "img/night-rock6.png",
    ⲆΔᐃⵠⲆΔᐃ: "img/night-rock7.png",
    ΔⵠΔⵠⵠⲆⵠ: "img/night-rock8.png",
    ᐃⲆᐃⲆᐃⲆⲆ: "img/night-rock9.png",
    ΔᐃᐃⲆⵠⲆᐃ: "img/night-rock10.png",
    ᐃⵠΔⵠᐃΔᐃ: "img/night-rock11.png",
    ⵠᐃⵠⵠⵠᐃᐃ: "img/night-rock12.png",
    ⲆᐃᐃⵠⲆⵠΔ: "img/night-rock13.png",
    ⵠⲆⲆᐃᐃⲆΔ: "img/night-flower1.png",
    ⵠⲆᐃⵠᐃⵠᐃ: "img/night-flower2.png",
    ⵠⵠⲆⲆᐃᐃΔ: "img/night-flower3.png",
    ⲆⵠⵠΔⵠⵠΔ: "img/night-flower4.png",
    ΔΔΔᐃⲆⵠⵠ: "img/night-flower5.png",
    ⲆᐃΔΔΔⲆᐃ: "img/night-flower6.png",
    ⵠⲆΔⲆⵠᐃⲆ: "img/night-flower7.png",
    ᐃⲆⵠⲆΔᐃΔ: "img/night-flower8.png",
    ⲆⲆⵠΔΔᐃⵠ: "img/night-flower9.png",
    ⵠⲆⲆⲆᐃΔⵠ: "img/night-herb16.png",
    ⲆᐃⵠⵠΔⲆΔ: "img/night-herb17.png",
    ᐃⲆΔⲆΔᐃΔ: "img/night-herb18.png",
    ΔⵠⵠΔᐃᐃΔ: "img/night-herb19.png",
    ⵠⲆⵠᐃⵠᐃᐃ: "img/night-herb20.png",
    ⵠⵠⲆⵠⵠᐃΔ: "img/night-herb21.png",
    ⲆΔΔᐃΔΔᐃ: "img/day-river000-010-000.png",
    ⵠⵠⵠΔⲆᐃⵠ: "img/day-river000-010-010.png",
    ᐃΔΔᐃⲆᐃⵠ: "img/day-river000-011-000.png",
    ⵠⲆΔⲆᐃⵠΔ: "img/day-river000-011-010.png",
    ΔⲆᐃΔⵠⲆⵠ: "img/day-river000-011-011.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/day-river000-110-000.png",
    ⲆΔᐃⲆΔⵠΔ: "img/day-river000-110-010.png",
    ΔᐃᐃⵠᐃΔΔ: "img/day-river000-110-110.png",
    ⵠΔᐃΔΔΔⵠ: "img/day-river000-111-000.png",
    ᐃⲆⵠΔΔᐃᐃ: "img/day-river000-111-010.png",
    ΔⲆⲆⵠΔΔⵠ: "img/day-river000-111-011.png",
    ⲆΔᐃⵠΔᐃΔ: "img/day-river000-111-110.png",
    ΔᐃᐃᐃᐃΔⵠ: "img/day-river000-111-111.png",
    ⵠⲆΔᐃᐃᐃᐃ: "img/day-river010-010-000.png",
    ⵠⵠᐃⵠᐃΔⵠ: "img/day-river010-010-010.png",
    ⵠᐃⵠΔⵠⲆⲆ: "img/day-river010-011-000.png",
    ᐃⲆⵠΔΔΔⲆ: "img/day-river010-011-010.png",
    ⲆⵠᐃⵠⵠⲆⲆ: "img/day-river010-011-011.png",
    ΔⵠⲆΔΔΔⵠ: "img/day-river010-110-000.png",
    ⲆⲆΔᐃΔⲆᐃ: "img/day-river010-110-010.png",
    ᐃᐃᐃⵠΔᐃⲆ: "img/day-river010-110-110.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/day-river010-111-000.png",
    ⵠΔΔΔⵠⲆᐃ: "img/day-river010-111-010.png",
    ⲆᐃⵠⲆⲆⲆΔ: "img/day-river010-111-011.png",
    ⵠⲆᐃΔᐃΔᐃ: "img/day-river010-111-110.png",
    ΔⲆⲆΔΔᐃⵠ: "img/day-river010-111-111.png",
    ΔΔΔⲆⲆⵠⲆ: "img/day-river011-011-000.png",
    ΔΔⵠᐃⲆⵠⵠ: "img/day-river011-011-010.png",
    ⲆΔΔⵠⲆⵠΔ: "img/day-river011-011-011.png",
    ΔΔⵠᐃⵠᐃⲆ: "img/day-river011-111-000.png",
    ᐃΔⵠᐃᐃⵠᐃ: "img/day-river011-111-010.png",
    ⵠⵠⵠΔᐃᐃⵠ: "img/day-river011-111-011.png",
    ⲆΔⵠᐃⲆΔΔ: "img/day-river011-111-110.png",
    ΔⵠᐃⵠⵠΔⲆ: "img/day-river011-111-111.png",
    ΔⵠΔⲆᐃΔΔ: "img/day-river110-110-000.png",
    ΔΔⵠⲆⲆᐃΔ: "img/day-river110-110-010.png",
    ⲆⵠᐃᐃⵠᐃⲆ: "img/day-river110-110-110.png",
    ⲆΔⲆⲆΔΔΔ: "img/day-river110-111-000.png",
    ΔΔⲆΔⲆΔⵠ: "img/day-river110-111-010.png",
    ⲆⵠΔΔΔᐃᐃ: "img/day-river110-111-011.png",
    ᐃⵠⵠΔᐃⵠᐃ: "img/day-river110-111-110.png",
    ⲆΔΔᐃΔΔⵠ: "img/day-river110-111-111.png",
    ⵠΔⲆᐃⲆΔΔ: "img/day-river111-111-011.png",
    ⵠⵠᐃᐃᐃᐃⵠ: "img/day-river111-111-110.png",
    ⵠΔⲆᐃⲆΔΔ: "img/day-river111-111-011.png",
    ᐃⲆΔⵠΔⲆΔ: "img/day-river111-111-000.png",
    ⲆΔᐃᐃⵠⵠΔ: "img/day-river111-111-111.png",
    ⲆᐃᐃΔⲆⲆⲆ: "img/day-river111-111-010.png",
    ΔⵠΔᐃΔⲆⵠ: "img/night-river000-010-000.png",
    ⲆᐃⲆⲆΔⵠⵠ: "img/night-river000-010-010.png",
    ᐃᐃⵠⵠᐃⵠⵠ: "img/night-river000-011-000.png",
    ⵠⲆᐃⵠᐃⵠΔ: "img/night-river000-011-010.png",
    ΔᐃⵠⲆⲆⲆⵠ: "img/night-river000-011-011.png",
    ΔΔⵠⵠᐃⲆⵠ: "img/night-river000-110-000.png",
    ΔⲆⵠⵠᐃⲆⲆ: "img/night-river000-110-010.png",
    ᐃⵠᐃⵠⵠⵠΔ: "img/night-river000-110-110.png",
    ⵠⲆⵠᐃᐃⲆᐃ: "img/night-river000-111-000.png",
    ⲆⲆⲆⵠᐃΔⵠ: "img/night-river000-111-010.png",
    ⵠΔⲆΔⲆΔⲆ: "img/night-river000-111-011.png",
    ᐃⲆᐃⲆⲆᐃᐃ: "img/night-river000-111-110.png",
    ᐃⲆᐃⵠᐃⵠⲆ: "img/night-river000-111-111.png",
    ⲆⵠᐃⵠⲆⲆⵠ: "img/night-river010-010-000.png",
    ⵠΔⲆⵠⵠⲆᐃ: "img/night-river010-010-010.png",
    ᐃΔⲆⲆᐃᐃⲆ: "img/night-river010-011-000.png",
    ⲆΔΔΔᐃΔⲆ: "img/night-river010-011-010.png",
    ⵠΔⲆⲆⵠᐃⲆ: "img/night-river010-011-011.png",
    ΔᐃⲆⵠᐃᐃᐃ: "img/night-river010-110-000.png",
    ΔΔΔⵠⵠⵠⵠ: "img/night-river010-110-010.png",
    ⲆΔΔⲆᐃᐃΔ: "img/night-river010-110-110.png",
    ⵠⲆⲆⲆᐃⵠᐃ: "img/night-river010-111-000.png",
    ᐃⲆΔᐃᐃΔᐃ: "img/night-river010-111-010.png",
    ⵠⵠⵠΔᐃⲆΔ: "img/night-river010-111-011.png",
    ⲆⲆᐃⵠΔᐃⲆ: "img/night-river010-111-110.png",
    ΔⵠᐃⵠⲆⵠⵠ: "img/night-river010-111-111.png",
    ⵠⲆⵠᐃⲆⵠᐃ: "img/night-river011-011-000.png",
    ⲆΔᐃΔΔΔⲆ: "img/night-river011-011-010.png",
    ⵠᐃⵠⵠⲆΔⵠ: "img/night-river011-011-011.png",
    ᐃⵠΔᐃᐃΔΔ: "img/night-river011-111-000.png",
    ᐃΔΔⵠΔᐃΔ: "img/night-river011-111-010.png",
    ⵠⵠⲆⲆΔⵠⵠ: "img/night-river011-111-011.png",
    ⵠⵠⲆΔᐃΔΔ: "img/night-river011-111-110.png",
    ᐃⵠᐃⲆΔⲆΔ: "img/night-river011-111-111.png",
    ᐃᐃⲆΔⲆⲆⵠ: "img/night-river110-110-000.png",
    ⵠⲆᐃⵠⵠⲆⲆ: "img/night-river110-110-010.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/night-river110-110-110.png",
    ᐃⲆⲆⵠᐃⵠΔ: "img/night-river110-111-000.png",
    ΔⵠᐃΔⵠⲆᐃ: "img/night-river110-111-010.png",
    ᐃⵠⲆⵠᐃᐃᐃ: "img/night-river110-111-011.png",
    ᐃᐃⵠⲆⲆΔΔ: "img/night-river110-111-110.png",
    ΔⲆⵠΔⲆᐃᐃ: "img/night-river110-111-111.png",
    ΔⲆᐃΔⲆᐃⲆ: "img/night-river111-111-011.png",
    ⲆΔΔΔᐃⵠⵠ: "img/night-river111-111-110.png",
    ΔⲆᐃΔⲆᐃⲆ: "img/night-river111-111-011.png",
    ⲆΔᐃᐃᐃⲆΔ: "img/night-river111-111-000.png",
    ᐃᐃᐃⵠᐃΔⵠ: "img/night-river111-111-111.png",
    ΔᐃⵠᐃᐃᐃⲆ: "img/night-river111-111-010.png",
    ⵠΔⲆⵠΔⵠᐃ: "img/day-pebblecompo1.png",
    ⵠᐃⲆⲆⵠ: "img/day-pebblecompo2.png",
    ⲆΔΔᐃΔ: "img/day-pebblecompo3.png",
    ⵠⵠᐃⲆⵠᐃᐃ: "img/day-pebblecompo4.png",
    ΔᐃⲆⵠΔ: "img/day-pebblecompo5.png",
    ⵠⵠᐃⲆΔ: "img/day-pebblecompo6.png",
    ⲆΔⵠⵠΔ: "img/day-pebblecompo7.png",
    ⵠⲆⵠΔΔⲆⲆ: "img/day-pebblecompo8.png",
    ⲆᐃⲆⵠⲆᐃΔ: "img/day-pebblecompo9.png",
    ᐃⲆⲆⵠΔⵠΔ: "img/day-pebblecompo10.png",
    ⵠⵠΔⵠⵠ: "img/day-pebblecompo11.png",
    ⵠⲆΔΔᐃⵠΔ: "img/day-pebblecompo12.png",
    ᐃⲆΔᐃΔΔⲆ: "img/day-pebblecompo13.png",
    ⵠⵠᐃⲆⵠΔᐃ: "img/day-pebblecompo14.png",
    ᐃⵠⵠᐃΔⵠᐃ: "img/day-pebblecompo15.png",
    ⵠⲆⲆΔᐃΔⲆ: "img/day-pebblecompo16.png",
    ⲆⲆᐃΔΔ: "img/day-pebblecompo17.png",
    ΔⲆΔⵠᐃⲆᐃ: "img/day-pebblecompo18.png",
    ⵠᐃΔΔⲆΔΔ: "img/day-pebblecompo19.png",
    ⵠⵠⲆΔⲆ: "img/day-pebblecompo20.png",
    ⲆⲆᐃΔⲆ: "img/day-pebblecompo21.png",
    ⲆⵠᐃᐃⲆΔᐃ: "img/day-pebblecompo22.png",
    ⲆⲆⵠΔΔᐃᐃ: "img/day-pebblecompo23.png",
    ᐃⵠΔᐃⵠⵠᐃ: "img/day-pebblecompo24.png",
    ᐃΔΔⲆⲆ: "img/day-pebblecompo25.png",
    ⵠᐃⵠⵠᐃ: "img/day-pebblecompo26.png",
    ⵠⲆᐃΔᐃⵠⵠ: "img/day-pebblecompo27.png",
    ᐃΔⵠᐃⵠ: "img/day-pebblecompo28.png",
    ⲆⲆᐃⲆⲆᐃⵠ: "img/night-pebblecompo1.png",
    ⵠᐃΔᐃⵠ: "img/night-pebblecompo2.png",
    ᐃⲆⲆⲆⲆ: "img/night-pebblecompo3.png",
    ⵠⲆⲆΔΔⲆᐃ: "img/night-pebblecompo4.png",
    ⵠⵠⲆⵠⲆ: "img/night-pebblecompo5.png",
    ⲆⵠΔⵠⵠ: "img/night-pebblecompo6.png",
    Δⵠⵠᐃᐃ: "img/night-pebblecompo7.png",
    ⲆΔΔⲆⲆΔⵠ: "img/night-pebblecompo8.png",
    ᐃⲆⵠΔⵠᐃΔ: "img/night-pebblecompo9.png",
    ΔⲆⵠΔⲆⲆⵠ: "img/night-pebblecompo10.png",
    Δᐃⵠⵠⵠ: "img/night-pebblecompo11.png",
    ᐃⵠΔΔᐃΔⵠ: "img/night-pebblecompo12.png",
    ΔᐃⵠΔⲆⵠΔ: "img/night-pebblecompo13.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/night-pebblecompo14.png",
    ⲆⵠⵠⵠΔΔᐃ: "img/night-pebblecompo15.png",
    ⵠΔⲆᐃΔᐃΔ: "img/night-pebblecompo16.png",
    ᐃΔᐃⵠᐃ: "img/night-pebblecompo17.png",
    ᐃⲆᐃⲆⵠᐃⵠ: "img/night-pebblecompo18.png",
    ΔⲆᐃΔᐃΔᐃ: "img/night-pebblecompo19.png",
    ⲆᐃⵠⲆᐃ: "img/night-pebblecompo20.png",
    ᐃΔⵠᐃΔ: "img/night-pebblecompo21.png",
    ᐃΔᐃΔᐃⵠᐃ: "img/night-pebblecompo22.png",
    ᐃᐃΔΔᐃⵠⲆ: "img/night-pebblecompo23.png",
    ΔΔⲆΔⲆΔᐃ: "img/night-pebblecompo24.png",
    ⵠⲆⵠⲆⲆ: "img/night-pebblecompo25.png",
    ⵠⵠⲆⲆᐃ: "img/night-pebblecompo26.png",
    ᐃΔⲆΔⵠⵠⵠ: "img/night-pebblecompo27.png",
    ΔᐃⵠⵠⲆ: "img/night-pebblecompo28.png",
    ⵠᐃⵠⲆᐃΔᐃ: "img/day-baby-mammoth.png",
    ⲆⵠΔⲆⲆⵠΔ: "img/day-baby-mammoth-tamed.png",
    ᐃΔⵠᐃⵠⲆⲆ: "img/day-baby-mammoth-angry.png",
    ᐃᐃⲆᐃⲆⵠⵠ: "img/night-baby-mammoth.png",
    ⲆᐃⲆᐃΔᐃⵠ: "img/night-baby-mammoth-tamed.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/night-baby-mammoth-angry.png",
    ΔᐃⲆΔⲆⲆᐃ: "img/inv-mammoth-out.png",
    ᐃᐃⵠⲆΔΔΔ: "img/inv-mammoth-in.png",
    ⵠⵠᐃᐃᐃᐃⲆ: "img/inv-mammoth-click.png",
    ΔΔⲆⵠⵠⲆᐃ: "img/hurt-baby-mammoth.png",
    ⵠⲆᐃⵠⲆⲆΔ: "img/baby-mammoth-step.png",
    ⵠⲆⵠⲆᐃⲆᐃ: "img/day-flower-hat.png",
    ᐃⵠⲆᐃᐃΔⵠ: "img/night-flower-hat.png",
    ᐃⲆᐃᐃⲆΔⵠ: "img/inv-flower-hat-out.png",
    ᐃⲆⵠⲆᐃⵠΔ: "img/inv-flower-hat-in.png",
    ⲆⵠⲆΔΔⵠⵠ: "img/inv-flower-hat-click.png",
    ⵠⲆΔΔᐃⲆΔ: "img/day-fur-hat.png",
    ᐃⲆᐃᐃᐃⲆⲆ: "img/night-fur-hat.png",
    ΔᐃⲆⲆⲆΔΔ: "img/inv-fur-hat-out.png",
    ⲆⲆΔⵠΔⵠⵠ: "img/inv-fur-hat-in.png",
    ⲆᐃⵠᐃᐃⲆΔ: "img/inv-fur-hat-click.png",
    ᐃᐃⵠⲆΔΔⲆ: "img/day-mammoth.png",
    ᐃᐃⲆⵠᐃⲆΔ: "img/night-mammoth.png",
    ⵠΔΔΔΔⵠⲆ: "img/hurt-mammoth.png",
    ⲆⵠΔᐃⲆⵠⵠ: "img/inv-mammoth-fur-out.png",
    ΔⲆⵠⵠⲆΔⲆ: "img/inv-mammoth-fur-in.png",
    ⲆΔΔⵠᐃᐃᐃ: "img/inv-mammoth-fur-click.png",
    ᐃⵠΔⲆⵠΔⲆ: "img/inv-wood-bow-out.png",
    ⲆⵠⲆⵠⲆΔΔ: "img/inv-wood-bow-in.png",
    ΔⲆᐃⵠΔΔⲆ: "img/inv-wood-bow-click.png",
    ᐃⵠⲆᐃᐃⲆᐃ: "img/inv-wood-arrow-out.png",
    ⵠⲆᐃⵠⵠᐃᐃ: "img/inv-wood-arrow-in.png",
    ⵠᐃᐃᐃⲆΔⵠ: "img/inv-wood-arrow-click.png",
    ⲆⲆᐃΔΔⵠᐃ: "img/day-wood-bow2.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/night-wood-bow2.png",
    ⲆΔΔⵠΔⵠΔ: "img/day-wood-arrow.png",
    ⲆᐃΔⵠᐃⲆᐃ: "img/night-wood-arrow.png",
    ⲆᐃΔⲆΔⵠΔ: "img/inv-stone-bow-out.png",
    ΔⲆⲆᐃⵠⲆⵠ: "img/inv-stone-bow-in.png",
    ⲆᐃⵠᐃᐃΔⵠ: "img/inv-stone-bow-click.png",
    ⲆⲆⵠⵠⲆΔⵠ: "img/inv-stone-arrow-out.png",
    ΔᐃᐃⲆⵠᐃΔ: "img/inv-stone-arrow-in.png",
    ᐃᐃⲆᐃΔᐃⵠ: "img/inv-stone-arrow-click.png",
    ⵠⵠᐃⵠⲆⲆΔ: "img/day-stone-bow.png",
    ⲆΔⵠΔⵠΔⵠ: "img/night-stone-bow.png",
    ᐃᐃⵠⵠᐃⲆⲆ: "img/day-stone-arrow.png",
    ⲆᐃΔΔΔᐃⵠ: "img/night-stone-arrow.png",
    ΔᐃᐃᐃⲆⵠΔ: "img/inv-gold-bow-out.png",
    ⲆΔΔΔΔⵠΔ: "img/inv-gold-bow-in.png",
    ΔⲆΔⲆᐃⲆⲆ: "img/inv-gold-bow-click.png",
    ᐃΔΔΔⵠⲆⲆ: "img/inv-gold-arrow-out.png",
    ᐃⲆΔᐃᐃⵠⵠ: "img/inv-gold-arrow-in.png",
    ΔᐃᐃⲆᐃⵠⵠ: "img/inv-gold-arrow-click.png",
    ΔⲆⵠᐃᐃⲆⵠ: "img/day-gold-bow.png",
    ᐃᐃᐃᐃΔᐃⵠ: "img/night-gold-bow.png",
    ⲆΔⲆᐃΔⲆⲆ: "img/day-gold-arrow.png",
    ᐃⵠⲆⵠⲆⲆⲆ: "img/night-gold-arrow.png",
    ⵠᐃⵠⲆⵠⲆⵠ: "img/inv-diamond-bow-out.png",
    ⵠⵠⲆⲆⵠⵠᐃ: "img/inv-diamond-bow-in.png",
    ΔᐃⲆⲆⲆⲆᐃ: "img/inv-diamond-bow-click.png",
    ⵠᐃΔΔᐃΔΔ: "img/inv-diamond-arrow-out.png",
    ⵠᐃⲆⲆΔⵠΔ: "img/inv-diamond-arrow-in.png",
    ᐃⵠᐃΔⲆⵠΔ: "img/inv-diamond-arrow-click.png",
    ᐃⲆᐃᐃⲆΔⲆ: "img/day-diamond-bow.png",
    ΔΔΔⵠⵠⲆΔ: "img/night-diamond-bow.png",
    ΔᐃΔⵠΔΔΔ: "img/day-diamond-arrow.png",
    ⲆⲆᐃⲆᐃⵠΔ: "img/night-diamond-arrow.png",
    ΔⵠⲆⲆⵠⵠᐃ: "img/inv-amethyst-bow-out.png",
    ᐃᐃΔΔⲆⲆⵠ: "img/inv-amethyst-bow-in.png",
    ᐃΔᐃⲆᐃᐃᐃ: "img/inv-amethyst-bow-click.png",
    ᐃⲆᐃⲆΔᐃΔ: "img/inv-amethyst-arrow-out.png",
    ⲆⲆᐃΔⵠΔΔ: "img/inv-amethyst-arrow-in.png",
    ⲆΔⵠⲆⵠᐃⵠ: "img/inv-amethyst-arrow-click.png",
    ⵠΔⲆᐃᐃⲆⲆ: "img/day-amethyst-bow.png",
    ΔΔⲆⲆⵠⲆⵠ: "img/night-amethyst-bow.png",
    ⲆΔⲆⵠⲆⲆⵠ: "img/day-amethyst-arrow.png",
    ᐃᐃᐃⲆⲆⵠⲆ: "img/night-amethyst-arrow.png",
    ΔⲆᐃΔΔⲆᐃ: "img/inv-dragon-bow-out.png",
    ⲆⵠΔⵠⵠⲆΔ: "img/inv-dragon-bow-in.png",
    ΔⲆᐃΔⵠᐃΔ: "img/inv-dragon-bow-click.png",
    ΔⵠᐃⵠΔⵠΔ: "img/inv-dragon-arrow-out.png",
    ᐃᐃⲆⲆΔⲆᐃ: "img/inv-dragon-arrow-in.png",
    ᐃᐃⵠᐃⵠⲆΔ: "img/inv-dragon-arrow-click.png",
    ᐃⵠᐃⵠΔⵠⲆ: "img/day-dragon-bow.png",
    ᐃⲆΔΔΔⵠᐃ: "img/night-dragon-bow.png",
    ⲆⲆΔⲆⲆᐃⵠ: "img/day-dragon-arrow.png",
    ⵠⲆᐃⵠⲆⲆⲆ: "img/night-dragon-arrow.png",
    ΔⵠᐃⵠᐃⲆⲆ: "img/inv-reidite-bow-out.png",
    ⵠⵠᐃΔΔΔΔ: "img/inv-reidite-bow-in.png",
    ⲆᐃᐃᐃⵠᐃⲆ: "img/inv-reidite-bow-click.png",
    ᐃᐃⲆⲆᐃⲆΔ: "img/inv-reidite-arrow-out.png",
    ᐃᐃᐃΔⲆⲆⵠ: "img/inv-reidite-arrow-in.png",
    ΔⲆΔΔᐃⵠⵠ: "img/inv-reidite-arrow-click.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/day-reidite-bow.png",
    ΔᐃΔⲆⲆᐃᐃ: "img/night-reidite-bow.png",
    ΔⲆΔⲆΔΔΔ: "img/day-reidite-arrow.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/night-reidite-arrow.png",
    ⵠᐃΔⵠΔᐃⲆ: "img/inv-wooden-axe-out.png",
    ΔⵠⵠΔᐃⲆΔ: "img/inv-wooden-axe-in.png",
    ⵠΔⲆⵠⲆⲆⲆ: "img/inv-wooden-axe-click.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/day-wooden-axe.png",
    ⵠⲆΔΔⵠΔΔ: "img/night-wooden-axe.png",
    ⲆⵠⲆⲆⵠⲆⵠ: "img/inv-stone-axe-out.png",
    ΔΔⵠᐃΔᐃᐃ: "img/inv-stone-axe-in.png",
    ᐃⵠᐃⲆᐃΔΔ: "img/inv-stone-axe-click.png",
    ⵠⲆⲆⲆᐃΔⲆ: "img/day-stone-axe.png",
    ⵠⵠᐃΔᐃᐃΔ: "img/night-stone-axe.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/inv-golden-axe-out.png",
    ⵠⵠᐃⲆⲆΔⲆ: "img/inv-golden-axe-in.png",
    ⵠᐃΔⵠΔⲆΔ: "img/inv-golden-axe-click.png",
    ⵠΔᐃΔΔⲆΔ: "img/day-golden-axe.png",
    ΔⵠᐃΔΔΔΔ: "img/night-golden-axe.png",
    ⵠⵠᐃⵠⲆⵠⵠ: "img/inv-diamond-axe-out.png",
    ΔΔⵠⲆΔᐃⲆ: "img/inv-diamond-axe-in.png",
    ᐃᐃΔⲆⵠⲆΔ: "img/inv-diamond-axe-click.png",
    ⵠⵠΔⲆⲆΔΔ: "img/day-diamond-axe.png",
    ᐃⲆᐃᐃⲆⲆⲆ: "img/night-diamond-axe.png",
    ⲆᐃⲆⵠⵠΔⵠ: "img/inv-amethyst-axe-out.png",
    ᐃΔΔⵠΔΔᐃ: "img/inv-amethyst-axe-in.png",
    ΔⵠΔⵠⲆᐃⵠ: "img/inv-amethyst-axe-click.png",
    ΔᐃΔⵠΔⵠΔ: "img/day-amethyst-axe.png",
    ⲆΔᐃᐃⵠᐃⵠ: "img/night-amethyst-axe.png",
    ΔᐃᐃᐃⲆⵠⲆ: "img/inv-reidite-axe-out.png",
    ΔⵠᐃⵠⵠⲆΔ: "img/inv-reidite-axe-in.png",
    ⵠᐃⵠⵠⲆⲆⲆ: "img/inv-reidite-axe-click.png",
    ⲆΔⲆⲆⲆⵠᐃ: "img/day-reidite-axe.png",
    ᐃᐃⲆΔⲆⵠΔ: "img/night-reidite-axe.png",
    ⲆⵠΔΔⵠⵠⲆ: "img/bandage-activated.png",
    ⵠⵠⵠⲆᐃⲆⲆ: "img/auto-feed.png",
    ΔΔⵠᐃⵠᐃᐃ: "img/stop-regeneration.png",
    ᐃⵠⵠⵠⵠΔⲆ: "img/stop-regeneration2.png",
    ⲆᐃΔΔΔⵠⲆ: "img/day-wood-platform.png",
    ΔⵠⲆⲆⵠⵠⲆ: "img/night-wood-platform.png",
    ΔⵠⲆᐃⲆⲆΔ: "img/inv-wood-platform-in.png",
    ΔΔⲆΔⲆⵠⵠ: "img/inv-wood-platform-out.png",
    ⲆΔⲆⵠⲆᐃᐃ: "img/inv-wood-platform-click.png",
    ᐃΔⵠⵠⲆⲆΔ: "img/day-wood-shield.png",
    ᐃⲆᐃΔᐃᐃⵠ: "img/night-wood-shield.png",
    ⲆⲆⲆⲆᐃⵠⵠ: "img/day-stone-shield.png",
    ⲆⵠᐃᐃᐃⲆΔ: "img/night-stone-shield.png",
    ᐃΔΔΔⵠⵠᐃ: "img/day-gold-shield.png",
    ⵠΔⵠⲆⵠΔΔ: "img/night-gold-shield.png",
    ⵠⵠⲆⲆⵠΔᐃ: "img/day-diamond-shield.png",
    ᐃⲆⲆΔⲆⲆΔ: "img/night-diamond-shield.png",
    ᐃⵠⲆⲆⲆΔᐃ: "img/day-amethyst-shield.png",
    ᐃΔΔⲆᐃᐃΔ: "img/night-amethyst-shield.png",
    ⲆᐃΔⵠⵠⵠⵠ: "img/day-reidite-shield.png",
    ΔΔⲆᐃΔⵠΔ: "img/night-reidite-shield.png",
    Ⲇᐃᐃⵠᐃᐃᐃ: "img/inv-wood-shield-in.png",
    ᐃᐃⵠⲆⲆᐃⵠ: "img/inv-wood-shield-out.png",
    ⵠⵠⵠⵠΔⵠᐃ: "img/inv-wood-shield-click.png",
    ΔᐃⲆⲆΔⵠΔΔᐃ: "img/inv-stone-shield-in.png",
    ⵠᐃⵠⲆᐃⵠᐃΔⵠ: "img/inv-stone-shield-out.png",
    ⵠᐃⲆⲆΔΔΔΔᐃ: "img/inv-stone-shield-click.png",
    ⵠΔΔⵠΔⵠΔᐃⲆ: "img/inv-gold-shield-in.png",
    ⵠᐃⵠΔⲆⵠΔⲆᐃ: "img/inv-gold-shield-out.png",
    ⵠⵠᐃΔⲆⲆᐃⲆⵠ: "img/inv-gold-shield-click.png",
    ΔᐃⲆⲆᐃᐃᐃΔⵠ: "img/inv-diamond-shield-in.png",
    ᐃᐃⲆᐃⲆⲆⵠⵠⵠ: "img/inv-diamond-shield-out.png",
    ⵠΔΔΔⲆⲆⲆΔⵠ: "img/inv-diamond-shield-click.png",
    ⲆΔᐃΔᐃΔⵠⵠⵠ: "img/inv-amethyst-shield-in.png",
    ΔⲆⵠⵠᐃΔΔᐃⲆ: "img/inv-amethyst-shield-out.png",
    ᐃΔᐃⵠⲆΔΔΔᐃ: "img/inv-amethyst-shield-click.png",
    ⵠᐃⲆⵠⲆΔⵠᐃᐃ: "img/inv-reidite-shield-in.png",
    ⲆᐃⵠᐃⵠΔⵠⲆⵠ: "img/inv-reidite-shield-out.png",
    ⲆⵠᐃⲆᐃⵠΔⵠᐃ: "img/inv-reidite-shield-click.png",
    ΔⵠⲆᐃⲆᐃⵠΔᐃ: "img/day-machete.png",
    ᐃᐃⵠⵠⵠⵠᐃΔΔ: "img/night-machete.png",
    ᐃⵠᐃΔΔΔᐃⲆΔ: "img/inv-machete-in.png",
    ᐃΔΔΔΔⵠⲆᐃⵠ: "img/inv-machete-out.png",
    ⲆⵠΔⵠⵠⵠΔᐃⵠ: "img/inv-machete-click.png"
  };
  ⲆΔᐃᐃⲆΔΔ = [{}];
  const Gt = wh;
  const Ht = zs;
  ⲆΔᐃᐃⲆΔΔ[Tg].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = Qs; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ᐃΔⵠᐃⵠΔⲆ = {};
  const It = jg;
  const Jt = ua;
  ΔΔᐃⲆΔⵠⲆΔⵠ = {};
  for (var rt in ⵠᐃ) {
    ᐃΔⵠᐃⵠΔⲆ[rt] = ⵠᐃ[rt];
  }
  ΔΔ = [];
  const Kt = yl;
  ⵠⲆΔ = {};
  ⵠⲆΔ.ⲆᐃⲆⲆΔ = 0;
  ⵠⲆΔ.ΔΔΔᐃ = 1;
  ⵠⲆΔ.ᐃΔⲆᐃ = Ss;
  ⵠⲆΔ.ΔΔΔΔ = 3;
  const Lt = Oh;
  ⵠⲆΔ.ΔⲆⲆΔ = 4;
  ⵠⲆΔ.ΔⲆⲆⲆ = 5;
  ⵠⲆΔ.ⵠΔⲆΔ = Zh;
  ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ = 7;
  ⵠⲆΔ.Ⲇⵠᐃⵠⵠ = Eq;
  ⲆⲆᐃΔ = {};
  ⲆⵠⲆΔ = [];
  const Mt = Do;
  ⵠΔᐃⲆⵠΔᐃ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -1;
  };
  var Nt = [];
  function Ot(a, b) {
    for (var c = tj; Nt.length > c; c += b) {
      var d = Nt[c];
      if (d[0] === a) {
        St(d[0], d[1], d[Ss], d[mt]);
      }
    }
  }
  const Pt = Xh;
  const Qt = Jh;
  const Rt = Kl;
  function St(b, c, d, e) {
    var f = ⲆⵠⲆΔ[b];
    if (f !== undefined) {
      for (var i = 0; sh > i; i++) {
        var j = f[c][i];
        var k = e * 193 / ff.ΔΔⲆⲆⲆ;
        var m = d * 193 / ff.ᐃⵠⵠⵠⵠ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ΔΔ[Ur.ΔᐃΔᐃⲆ][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / ff.ΔΔⲆⲆⲆ;
        m = d * 600 / ff.ᐃⵠⵠⵠⵠ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ΔΔ[Ur.ΔⵠᐃⲆⵠ][i].drawImage(j, k - n / wr, m - o / 2, n, o);
      }
    }
  }
  ⵠⲆᐃΔΔΔⲆΔⵠ = function () {
    for (var b = 0; b < 2; b++) {
      ΔΔ[Ur.ΔᐃΔᐃⲆ][b].clearRect(0, 0, 193, 193);
      ΔΔ[Ur.ΔᐃΔᐃⲆ][b].drawImage(ⲆⵠⲆΔ.MAP[b], Cn, Cn, 193, 193);
      ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].clearRect(ne, 0, 600, 600);
      ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].drawImage(ⲆⵠⲆΔ.MAP[b], qn, 0, 600, 600);
      for (var c = ff.ᐃⵠⲆⵠ.length - 1; qk <= c; c--) {
        var d = ff.ᐃⵠⲆⵠ[c];
        var f = d.x1 * 193 / (ff.ΔΔⲆⲆⲆ * 100);
        var j = d.y1 * 193 / (ff.ᐃⵠⵠⵠⵠ * 100);
        var k = d.w * 193 / (ff.ΔΔⲆⲆⲆ * vh);
        var m = d.ⵠΔⵠ * 193 / (ff.ᐃⵠⵠⵠⵠ * 100);
        var p = d.x1 * 600 / (ff.ΔΔⲆⲆⲆ * Kq);
        var q = d.y1 * 600 / (ff.ᐃⵠⵠⵠⵠ * 100);
        var u = d.w * 600 / (ff.ΔΔⲆⲆⲆ * 100);
        var v = d.ⵠΔⵠ * 600 / (Vj * ff.ᐃⵠⵠⵠⵠ);
        if (ff.Δᐃᐃᐃⵠ === d.ᐃΔΔ) {
          ΔΔ[Ur.ΔᐃΔᐃⲆ][b].drawImage(ⲆⵠⲆΔ.FOREST[b], f, j, k, m);
          ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].drawImage(ⲆⵠⲆΔ.FOREST[b], p, q, u, v);
        }
        if (ff.ΔⲆᐃⵠⲆⵠⵠ === d.ᐃΔΔ) {
          ΔΔ[Ur.ΔᐃΔᐃⲆ][b].drawImage(ⲆⵠⲆΔ.WINTER[b], f, j, k, m);
          ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].drawImage(ⲆⵠⲆΔ.WINTER[b], p, q, u, v);
        }
        if (ff.ⵠⲆⵠⲆⲆᐃⲆ === d.ᐃΔΔ) {
          ΔΔ[Ur.ΔᐃΔᐃⲆ][b].drawImage(ⲆⵠⲆΔ.LAVA[b], f, j, k, m);
          ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].drawImage(ⲆⵠⲆΔ.LAVA[b], p, q, u, v);
        }
        if (d.ᐃΔΔ === ff.ⲆⵠⵠⲆⲆⵠⵠ) {
          ΔΔ[Ur.ΔᐃΔᐃⲆ][b].drawImage(ⲆⵠⲆΔ.CAVE[b], f, j, k, m);
          ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].drawImage(ⲆⵠⲆΔ.CAVE[b], p, q, u, v);
        }
        if (ff.ⲆⲆⵠΔᐃᐃⲆ === d.ᐃΔΔ) {
          ΔΔ[Ur.ΔᐃΔᐃⲆ][b].drawImage(ⲆⵠⲆΔ.DESERT[b], f, j, k, m);
          ΔΔ[Ur.ΔⵠᐃⲆⵠ][b].drawImage(ⲆⵠⲆΔ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ⵠⲆⲆΔⲆⲆⵠⵠⲆ = function () {
    ⲆⲆᐃΔ = {
      ΔⲆⲆⵠΔ: [{
        id: Gr,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⵠⵠᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠΔΔⵠⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃΔⲆΔᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃⵠⵠⵠⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆⵠΔᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃΔᐃᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⵠΔΔΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠᐃΔΔⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆᐃᐃⲆᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠⲆⵠⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⲆⵠΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃΔΔⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆⵠⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔᐃΔⵠΔᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠⲆᐃⵠⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃⵠΔⵠⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⲆᐃⵠᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆΔⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⲆΔᐃΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃⲆΔΔᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆⲆᐃⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃΔᐃⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠΔⲆᐃΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: pr,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⵠⵠᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⲆΔⲆᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⲆᐃᐃⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃⲆΔᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: wg,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃΔⵠⲆⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆᐃᐃᐃⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⵠᐃⵠⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠΔΔᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: Th,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⲆᐃΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔⲆΔⲆΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔΔⲆⵠⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃⲆΔⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⵠΔⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠΔⲆΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⲆⲆⲆⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃΔⵠᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆΔⲆⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆⲆⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠⲆᐃᐃΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠΔⲆΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: Ns,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆⵠΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔΔⲆⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃΔΔΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⵠᐃᐃⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: Is,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠⲆᐃⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⲆⵠⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⲆᐃⲆᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔⲆⲆⲆⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠᐃΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠᐃⲆᐃᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⵠⵠⲆᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃΔⵠⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: Bh,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃⲆⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆΔⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃᐃⲆⵠⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⵠΔᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆⲆⵠᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔΔΔΔᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔⲆᐃᐃΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆΔⵠⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: Qg,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⵠΔⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆΔᐃᐃⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃᐃⲆᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⵠΔΔⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: ue,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠⵠΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠΔΔⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠⲆⲆⲆⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠΔΔⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⲆΔⵠ: ⵠᐃ.ⲆΔΔⵠⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⵠⲆᐃᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⵠΔⵠᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔΔⵠΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: zj,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔᐃⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔΔᐃⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⲆⵠΔⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠΔᐃⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠᐃⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃΔᐃⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆΔΔⵠⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠΔΔⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠⵠΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠᐃⲆΔⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠᐃⵠⵠᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆΔⵠΔⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠⵠⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃⵠⵠΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⵠⲆⲆΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆᐃⵠⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆΔⲆⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⵠᐃᐃⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆᐃⲆⵠⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃⲆᐃΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆᐃᐃⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆⲆⵠΔᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⵠΔᐃΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        ⲆΔⵠ: ⵠᐃ.ᐃΔᐃⲆⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠⵠᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⲆⲆⵠΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔᐃΔⵠⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: Ws,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠΔⵠΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃⲆⲆᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⲆΔᐃΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠⵠⵠⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠᐃⵠⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔⲆⲆΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⵠⲆⵠⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔΔⲆⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠⵠΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆⵠΔΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆΔⲆⲆⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠⵠⵠⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⲆⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃⵠΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⵠⲆⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⵠⵠᐃⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆΔΔᐃΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠⲆΔⵠΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃᐃⲆΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⲆΔΔⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔᐃΔⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔΔⲆΔⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃΔⵠⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠΔΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠᐃᐃΔᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⲆᐃᐃⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⵠΔᐃⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠⲆⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⲆⲆΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆΔΔⵠⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃⲆⲆⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃΔᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃΔᐃᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠⲆⵠⵠᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆᐃᐃᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔΔᐃⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃⲆⲆΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆⲆⲆⵠΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃᐃⲆΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆⲆⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠⵠⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠΔⲆᐃⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠᐃⲆᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⲆⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⵠⵠⲆΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⵠΔⲆⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠⵠΔΔᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠΔⲆᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⵠⲆⵠⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⵠⲆⲆΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⲆΔᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔΔⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔΔⲆⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔᐃⲆⵠⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆᐃΔⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆⲆΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔᐃΔΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⵠⲆⲆⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠⲆⲆⵠᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠᐃΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⵠᐃⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃᐃⲆᐃΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⲆⲆⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠⵠⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆⵠⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⲆᐃᐃᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆⲆⵠᐃΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆⲆᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔⵠΔⲆⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃᐃΔΔᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⲆΔⵠ: ⵠᐃ.ΔⲆᐃᐃΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠᐃΔⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⲆⵠᐃΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃᐃᐃⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⲆⵠⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔⵠΔⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃΔⲆΔⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆᐃᐃᐃΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆⵠΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠⵠᐃⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃⵠᐃΔᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃᐃΔΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠΔⲆΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠᐃⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆΔⵠᐃⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔΔΔᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔΔΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔΔΔⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠΔᐃΔⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃΔᐃΔᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆⲆΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔⵠᐃⲆΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔᐃⵠΔΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠⲆⵠᐃⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⵠⲆᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠⲆᐃᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠⵠⲆᐃⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⲆΔᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆᐃⲆᐃⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠⵠⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃⲆⵠᐃⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔΔⵠⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔΔᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆⲆᐃⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠⵠⵠⵠⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠᐃⵠⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠΔⵠⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃᐃⲆⲆΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⲆᐃᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔᐃᐃΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆᐃᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⵠᐃΔⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⲆᐃⵠΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⵠⲆⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔΔΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠⲆΔⲆΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⵠⲆⲆΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⵠᐃⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃⵠᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆᐃΔᐃⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠΔⵠⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⲆΔᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔᐃᐃᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆᐃΔⵠⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⵠᐃⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆᐃⵠⲆΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔΔᐃⲆΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃᐃⵠᐃᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⲆᐃⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆᐃΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃΔΔⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠⲆᐃⵠⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆᐃᐃⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃΔⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔⵠⲆΔᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠΔᐃΔᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⵠⲆⵠᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔᐃⵠⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠΔΔᐃΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃᐃⵠΔⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆᐃᐃⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠΔᐃⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃΔⲆⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔᐃⵠⵠⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆΔⵠⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃᐃⲆΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⵠⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔⲆⵠⲆⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⵠΔⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠΔⲆⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠⲆⵠᐃᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔᐃⲆⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔΔᐃΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔⲆⵠⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃⵠⲆΔΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆΔΔⵠᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆᐃⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⲆΔⲆΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃΔⲆΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠⲆᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠΔᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠᐃΔⵠΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃᐃΔᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⲆΔⵠ: ⵠᐃ.ΔⲆᐃΔⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔΔⲆⲆᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠᐃᐃᐃᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔⵠⵠΔᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⲆΔⵠ: ⵠᐃ.ΔⲆΔⲆⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆΔΔΔᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠⲆⵠⲆᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆⵠⵠΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠᐃΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆⵠᐃⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠΔⵠᐃⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆᐃΔⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔⲆⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃⲆⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃΔⵠΔᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆⲆΔⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠⲆⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠᐃⲆⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆΔΔᐃΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⲆⲆᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⲆΔΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃᐃⵠⲆⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃⲆᐃᐃⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⲆᐃᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⵠΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⲆⲆΔΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔᐃⵠⵠⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⲆⵠⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔⵠⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠⲆΔΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔΔᐃⲆΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔΔⲆⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃⵠⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆⲆⵠⲆΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⵠΔᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠᐃΔⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃΔⲆᐃΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆΔⵠΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠᐃⵠᐃᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠᐃΔᐃⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆⵠΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⵠⲆΔⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃᐃᐃᐃΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⵠΔⵠΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆⵠⵠⵠᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔⲆⵠᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃΔΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆᐃⵠΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠⵠⲆⵠΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃᐃᐃⲆⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠΔΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆⵠⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠᐃⲆⲆΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⲆᐃᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠΔΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆΔᐃᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃΔΔΔⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔᐃΔⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆᐃΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆΔΔⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⵠΔᐃΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆᐃΔⲆⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠΔΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠᐃᐃᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⵠⲆⲆᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠⵠΔⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⲆΔⵠ: ⵠᐃ.ΔⵠᐃⵠᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠⲆΔᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆᐃⵠΔΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆⲆⵠⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃᐃᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃⵠΔⵠⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔⵠΔⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔⵠⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⲆⵠᐃᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⵠΔΔᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔΔᐃᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠΔᐃⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⲆⵠⲆΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⵠⲆᐃⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠᐃΔΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠΔⵠΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⲆⲆΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆᐃⲆᐃⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠᐃⵠⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃᐃⲆᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⵠⲆᐃⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔᐃⵠⲆⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆⲆΔⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⲆᐃⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔᐃⲆᐃΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠᐃᐃᐃⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⵠΔΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆⵠΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⵠΔᐃΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⲆⵠⲆⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⲆᐃⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔΔΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⵠΔⲆⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠⵠⲆᐃⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆᐃᐃᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔᐃᐃⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⲆⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⵠΔΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔⲆΔΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆᐃⲆᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔΔⵠⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆⵠⲆᐃⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆᐃΔΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠⲆⲆΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⲆⲆⲆΔᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⲆᐃⵠⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃΔⲆⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠᐃΔΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃᐃⵠⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠⲆΔᐃⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⲆᐃⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠⵠΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆⵠⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⲆⵠⵠⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆΔⵠΔⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠⲆΔᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔⲆⲆⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃᐃᐃΔᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠᐃⲆᐃⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆⵠΔⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔⵠⵠⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠᐃᐃᐃⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⲆⲆⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠΔΔⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠᐃΔᐃΔᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⵠⵠΔΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠΔᐃᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃⲆᐃΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃⲆΔⲆⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔⲆⵠΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠᐃΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⲆⵠΔⲆΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆⲆᐃΔᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔⵠᐃⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔΔⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃⵠᐃⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆᐃΔΔⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔΔⵠᐃⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃⲆⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.Ⲇᐃᐃⵠᐃⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⵠⵠᐃᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔᐃΔᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃΔⲆⲆⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆᐃΔⲆⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃᐃⲆᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔΔᐃᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠⲆᐃΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠⲆⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⲆⵠⵠᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠᐃⵠᐃⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⵠΔΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔᐃⵠᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔⲆⲆᐃⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⲆΔⲆⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠⲆΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠΔⵠⲆⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃΔⵠⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃᐃⵠΔᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⵠⵠⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆᐃⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⵠΔΔΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔΔΔⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⲆΔⵠ: ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃΔΔᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆⵠⵠⵠΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠΔᐃᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔⲆᐃᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⵠⲆⲆΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⲆᐃⵠⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃⵠΔⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⲆᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⵠΔᐃⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⵠⵠΔⲆⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠⵠⲆᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠᐃⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠⵠⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⵠⲆⵠΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠᐃⲆᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⲆΔⵠ: ⵠᐃ.ΔⲆᐃⵠⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆΔⵠⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔⲆⲆᐃⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⲆΔᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃⵠⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃΔⲆⵠⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆΔΔⲆΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠⵠⲆⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔⲆΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃᐃΔᐃⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔΔⲆΔᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔᐃⵠᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃΔⵠᐃⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃⲆⵠⵠᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆⲆⵠⲆⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠΔⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⵠΔΔᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆΔⵠᐃΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔᐃΔΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠⲆᐃⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠΔᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃΔⲆᐃⲆⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⲆⵠᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⲆΔᐃⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔⲆⵠⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔᐃᐃⲆⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆΔΔᐃΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃⲆⲆⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⵠⲆᐃᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃΔΔⵠⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃⵠΔⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⲆΔΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃΔΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆⲆΔᐃΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠⵠⵠΔⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠΔⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔᐃᐃᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆⲆᐃⲆΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⲆⲆΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠΔⲆᐃⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆⵠᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⲆⲆⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆᐃⵠⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆᐃⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆᐃΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⲆΔᐃΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔᐃⲆΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆⵠⲆⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠΔᐃⵠΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⲆᐃⵠⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆΔᐃΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⵠΔΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⲆΔⲆΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⲆⵠΔⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⵠⵠⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔΔⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔⵠᐃΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⵠⲆΔⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠΔⵠΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠⵠᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔⵠⵠΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔᐃΔⵠΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔⲆΔΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆΔⵠⵠᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃᐃⲆⵠⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠᐃᐃΔΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃΔⲆⵠᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠⵠⲆⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆⲆⵠᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⲆⵠⲆⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.Ⲇⵠⵠᐃⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆⵠᐃⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠᐃΔⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆᐃⵠⵠᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃᐃⵠⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆⵠⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⵠΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⵠᐃⵠᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃΔᐃᐃΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆⵠᐃⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆΔⲆᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆⲆᐃᐃΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⲆⵠᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠΔⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠᐃⵠΔⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⲆⲆⵠⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆⲆⵠΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆᐃⵠᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⵠⲆⲆⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔⵠⲆΔᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆᐃⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃⵠⵠᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔΔΔΔΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⲆΔⵠ: ⵠᐃ.ΔᐃᐃⵠⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠⲆΔΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆΔⵠΔᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⵠΔᐃⵠΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⲆⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆΔΔⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔᐃᐃⵠⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃΔⵠᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠⵠΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆⲆⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⵠⵠᐃⵠⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔⲆΔᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆⵠⲆⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆⲆⲆᐃᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⲆᐃⵠΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃΔΔⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆΔⵠⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔᐃⵠᐃᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆΔᐃⵠΔⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆΔⵠᐃⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠⵠᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠΔΔᐃᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⵠΔᐃᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⵠⵠᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⲆᐃΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠᐃᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⵠⲆⵠΔⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃⲆΔⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠΔᐃΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔΔⵠⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃᐃⲆⵠᐃⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆⵠΔᐃⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Pepe"
      }, {
        id: rj,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⲆⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔᐃⵠⲆΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃⵠⵠᐃΔᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔᐃᐃⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠⲆΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔⵠΔⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⵠⵠⵠΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⵠⵠⵠⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆᐃᐃⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔᐃⵠΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆΔᐃᐃⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆⲆΔⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠΔⵠΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⵠⵠⲆᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⲆⵠΔΔⲆΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⲆᐃⲆΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆⵠⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔΔΔᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⲆⵠΔΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⲆⵠⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔᐃⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆᐃⵠⲆⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⵠⵠⲆᐃΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔΔⵠⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 95,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠᐃⲆⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃΔⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃᐃΔΔⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃⵠⲆⲆⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠΔⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠⵠⲆⵠΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠΔᐃΔᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃⵠᐃⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆᐃⵠᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠⵠΔᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔⲆⲆⲆΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃΔΔⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠᐃⵠⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠᐃᐃⲆⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆᐃΔⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⵠⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⵠΔᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠⲆⲆⵠᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔⲆⵠᐃⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠⲆⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔᐃᐃᐃⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆᐃⲆⲆΔⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠΔᐃᐃΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⵠᐃⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆΔΔᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔΔᐃⲆΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃᐃᐃⲆⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆᐃᐃⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃΔⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃⲆᐃᐃΔⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃᐃΔⲆⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆᐃⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⵠΔΔⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃⲆⵠᐃⵠᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃⲆΔᐃΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔᐃⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆⲆⲆⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃⲆΔᐃᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠᐃΔⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆΔⲆᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⵠⲆᐃΔᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⲆⲆⵠΔⲆΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠⲆᐃΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⲆⵠΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆⲆΔⵠᐃ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠΔᐃⵠⲆⲆᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆΔΔⵠⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆⵠⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⲆⵠᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃᐃⵠΔⵠΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔⲆᐃΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆᐃᐃⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔᐃᐃᐃⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⵠᐃⲆΔΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⲆᐃⵠᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃΔⵠᐃⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠΔᐃⵠΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠᐃΔⵠΔΔⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⲆⵠΔⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⵠⲆΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆΔΔΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃᐃΔΔΔΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ᐃΔᐃⵠⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆΔⲆⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⲆᐃΔⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔΔⵠⲆⵠᐃᐃ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆᐃⵠᐃⵠΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃᐃⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠᐃᐃⲆⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔⵠⲆⵠⵠⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ΔᐃⲆᐃⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        ⲆΔⵠ: ⵠᐃ.Ⲇᐃⵠⵠᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆⲆⵠⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔᐃΔⵠⵠΔΔ,
        ᐃᐃΔⵠ: ⵠᐃ.ⲆⲆⵠⵠⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃΔΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃⵠΔⵠ,
        ᐃᐃᐃⵠ: ⵠᐃ.ᐃΔΔⵠᐃΔⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠΔᐃᐃᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⲆΔⵠ: ⵠᐃ.ΔⲆΔᐃⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⵠⲆᐃⵠⲆ,
        ᐃᐃᐃⵠ: ⵠᐃ.ⵠⵠΔᐃᐃⲆⵠ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠⵠⲆⵠΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔⵠⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆⵠᐃᐃΔ,
        ᐃᐃᐃⵠ: ⵠᐃ.ΔⲆⵠⲆΔᐃⲆ,
        ᐃᐃΔⵠ: ⵠᐃ.ⵠᐃⵠⵠⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ,
        ⲆⵠⲆ: "OmarJr13",
        name: "Blob Skin"
      }],
      ᐃⵠⲆΔ: [{
        id: 0,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠΔᐃΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔᐃⵠᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠΔⵠⲆⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: wr,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔΔⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃⲆΔⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠⵠᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: Aq,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠΔΔⲆⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆⵠᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: gg,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⵠⲆⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠΔΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: ma,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆΔᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆΔΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃᐃⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠΔⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⲆΔⵠ: ⵠᐃ.ΔⲆΔΔᐃⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆΔΔᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔⵠⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆΔⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆΔⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: jl,
        ⲆΔⵠ: ⵠᐃ.ΔᐃᐃⲆⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆⲆᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃᐃΔⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆᐃΔⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃᐃⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆΔⲆΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠᐃᐃⵠⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⲆΔⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠΔⲆⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃᐃᐃΔᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆΔΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔΔⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆⲆΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠⵠᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.Δᐃⵠᐃᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔΔᐃⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆΔⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⲆΔⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠΔΔⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠⲆΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: C,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔᐃᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃᐃⵠⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆⲆΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⲆᐃΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔⲆⵠⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠⲆⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠⵠΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃᐃᐃΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔΔⲆⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⵠⲆⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⲆⲆⲆⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃᐃΔᐃⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔᐃⲆᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⵠⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠΔⵠⵠⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⵠⵠⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠᐃᐃⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⲆΔⵠ: ⵠᐃ.ΔⲆᐃⲆⵠⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆᐃⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆⵠⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃᐃⵠⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆΔⲆⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆⵠΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 14,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔΔⵠᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⲆⵠᐃⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔΔΔⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⵠⵠⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔΔⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆⵠⵠᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔΔᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆᐃⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠΔᐃᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔᐃⵠΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆᐃⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠΔΔⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃⲆⲆⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃΔΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.Δⵠᐃⵠᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⵠᐃΔᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃΔⵠΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆΔᐃᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔΔΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⲆΔⵠ: ⵠᐃ.ⲆΔΔⵠΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔⲆΔⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔⲆᐃⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔᐃⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃΔⵠᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆᐃⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔⲆⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠᐃᐃⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆⲆΔⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠⵠΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠⲆⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⲆᐃⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⵠⵠᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆⲆⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃΔⲆⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔΔⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠΔΔⵠⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃᐃᐃᐃΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔⲆΔⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⲆⵠⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⵠᐃⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔΔᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆⲆΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠΔⲆᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠⵠⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⵠⲆΔⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆᐃΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔᐃᐃⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠᐃᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⵠⵠⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔⲆΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⵠⵠⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃⵠᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔΔⵠΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆᐃΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔᐃᐃᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃⵠΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⵠⲆⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔⲆⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆⲆⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⲆΔⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⵠΔⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠᐃΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃⲆⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⲆΔⵠ: ⵠᐃ.ΔᐃᐃΔΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔᐃⲆⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ⲆⵠⵠⲆⵠ: [{
        id: 0,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔΔᐃⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⵠⵠⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: $l,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔΔᐃⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃᐃⵠⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⲆΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⵠⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃⲆΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃⵠⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⵠΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆᐃΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: Vh,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠΔⵠΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠᐃⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⲆⵠⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆⵠΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: Qr,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃⲆⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠⵠᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃⲆⵠΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃⲆⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: Mn,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠΔⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⵠᐃⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: Hs,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠⵠΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠΔΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: $i,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃⲆᐃⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠⲆⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⲆΔⵠ: ⵠᐃ.Ⲇⵠⵠᐃⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⲆⵠΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔᐃᐃⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆΔᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: Wn,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃΔᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⲆᐃⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: Ds,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⵠⵠⵠⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆⵠⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠⲆΔⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠⵠΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠᐃᐃΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆⲆⵠᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: Ak,
        ⲆΔⵠ: ⵠᐃ.ᐃΔᐃⵠΔᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆΔᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: Pa,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆΔⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃΔⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠΔⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.Δⵠⵠᐃᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃΔΔⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃⲆᐃⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⲆⲆΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⵠⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃᐃΔⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠΔΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃⲆᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔⲆⵠⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: jk,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⲆΔⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃΔᐃᐃⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: Ks,
        ⲆΔⵠ: ⵠᐃ.ᐃΔᐃⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⲆΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠⲆΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔᐃⵠΔⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆⵠΔᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.Δⵠⵠⵠᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃⵠΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆᐃᐃⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆⲆⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠⲆⲆᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⵠⲆᐃΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⲆⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⲆⲆΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔΔΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⵠⲆⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔΔΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠᐃⵠⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆΔⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃΔΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠⵠⵠΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆᐃⲆⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔⵠⲆᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔⲆⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆΔⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔΔΔᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠᐃⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃᐃⵠΔᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠⵠⵠⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⲆΔⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⵠΔᐃΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⲆⵠΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠΔⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆⲆⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠᐃⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠᐃΔⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠΔΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠΔⲆⵠⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⲆΔⵠ: ⵠᐃ.ΔⲆΔᐃⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔⵠⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆᐃΔⵠᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆΔᐃᐃⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃⵠⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆᐃⵠᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⲆΔⵠ: ⵠᐃ.ⲆΔΔᐃⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠⵠΔⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔⲆⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⵠⲆΔⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠΔⲆΔᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⲆⵠⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠᐃΔΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃᐃⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠⵠᐃΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠⲆᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⲆΔⵠ: ⵠᐃ.ΔᐃᐃⲆᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆΔᐃⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠᐃⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃⲆΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⲆΔᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃᐃΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃⲆⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃΔⲆⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠΔΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆⲆⲆᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆᐃⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃᐃΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔΔⵠⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⲆΔⵠ: ⵠᐃ.ΔΔⲆⲆΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⲆᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃᐃΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔⲆⲆⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆᐃⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃᐃⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆΔΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠΔΔᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃᐃᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔΔⲆᐃΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠΔⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠⲆᐃⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠΔⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠᐃΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃᐃᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃⵠⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⲆⵠΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆΔⲆⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃᐃΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃᐃⵠᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 70,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔⵠⵠᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆⵠⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        ⲆΔⵠ: ⵠᐃ.ᐃΔᐃᐃᐃⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆΔⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Dragon Box"
      }],
      ⵠᐃⵠⲆᐃ: [{
        id: 0,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠΔⵠΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⵠᐃⲆⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⵠΔⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃΔΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⵠᐃⵠⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠΔᐃⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃⲆⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔᐃⵠΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Book 4"
      }, {
        id: _g,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔΔⲆⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⵠⵠᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: Pg,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆΔⲆΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠΔᐃⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃⲆᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠΔⲆⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃᐃᐃⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: Uk,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠᐃᐃΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⲆᐃᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃⲆⵠⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆⵠⵠⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠᐃⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃᐃᐃᐃⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: ih,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃᐃⵠΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⵠᐃⲆᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠΔⲆⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆⵠᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: fq,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆᐃⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔΔΔⵠⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: kh,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠΔⲆᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆΔᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃᐃⵠᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠⲆⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆΔⲆⲆΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⵠⵠᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠⵠⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔⲆⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠᐃᐃⲆᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔᐃⵠⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔᐃᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆⲆᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔΔⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃΔⲆΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆᐃΔᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆΔᐃⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: tt,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⵠⲆΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃΔⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔⲆⲆⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⲆⵠᐃⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⵠⵠΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃΔⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠⵠᐃΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠⵠᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆΔⵠᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠⵠΔᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: Gq,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⵠⵠⵠᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠᐃⲆᐃΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠΔᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃᐃΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔΔΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆΔⵠⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⲆΔⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔᐃⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠᐃΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆⵠⲆⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⲆΔⵠ: ⵠᐃ.ⵠΔⵠᐃΔΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔⵠᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃⵠⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⲆΔⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⲆΔᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        ⲆΔⵠ: ⵠᐃ.ᐃΔᐃⲆⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⵠⲆⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔᐃΔⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⲆⵠⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⲆΔΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃΔΔᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: ua,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔⵠⵠΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆΔⲆᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⲆΔⵠ: ⵠᐃ.ΔⲆΔΔⲆⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃᐃΔⲆᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆΔⲆΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠⵠΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠᐃΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⵠⲆⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆⵠⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃⲆΔᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔᐃᐃⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃΔᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠΔΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃⲆΔⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "aloner",
        name: "Mystery Book"
      }],
      ⲆⲆΔⲆⲆ: [{
        id: vq,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆΔⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆΔⲆⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: Xh,
        ⲆΔⵠ: ⵠᐃ.ΔⵠᐃⵠᐃⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠᐃᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: Z,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃΔᐃΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃΔⵠⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠⵠⵠⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔᐃᐃⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠΔᐃΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃᐃⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⲆᐃⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: Vh,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠᐃⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃΔΔⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃⲆΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆⲆΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: Th,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠⲆⵠᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃΔⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⵠⵠⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⵠⵠⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⲆΔⵠ: ⵠᐃ.ΔⵠᐃᐃᐃⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃΔⵠΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠᐃⲆΔⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔⲆⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⵠᐃⲆΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⲆⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆΔΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠΔⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆⲆᐃΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⵠⵠᐃⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆΔΔᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: pj,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔⲆⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⵠⵠᐃⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆⲆⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠⲆⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃⵠⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⲆΔⵠ: ⵠᐃ.ᐃΔᐃⲆⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⵠⲆᐃⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆⲆᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆΔΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: bl,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃΔⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔᐃⵠⲆⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃᐃⲆⵠᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠΔΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⲆΔⵠ: ⵠᐃ.ⲆΔΔⲆⵠⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃᐃⲆⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆΔⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆᐃΔⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆⵠⲆⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃᐃΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔⲆⵠⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⵠᐃΔΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠᐃⲆⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⵠⵠⵠⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔᐃⵠⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆΔᐃⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ᐃΔⲆᐃ,
        ⲆⵠⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: Dh,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔⲆᐃᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⵠΔⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⲆΔⵠᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆⲆⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⲆⲆᐃⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃᐃⵠᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆⵠᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⲆⵠΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: Yk,
        ⲆΔⵠ: ⵠᐃ.ⵠΔΔⵠΔⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆΔⵠΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆΔΔⲆⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⵠⵠⲆΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠᐃⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⲆΔⵠ: ⵠᐃ.ᐃⲆΔⵠᐃⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆⲆⲆⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃⲆⵠᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠᐃᐃᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠᐃᐃΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠⲆΔΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⲆⵠⲆΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠᐃᐃᐃΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⲆΔΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔⲆⲆⵠⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠⲆΔⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠⵠᐃⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔΔΔΔ,
        ⲆⵠⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 9,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆⵠᐃⵠᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⵠⵠΔⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃⵠⵠⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠΔΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆΔⵠⲆΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆΔΔⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: Ak,
        ⲆΔⵠ: ⵠᐃ.ΔⵠᐃΔⵠⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆᐃᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⵠᐃΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆⲆⲆΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠᐃⵠᐃⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⲆΔⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⲆΔⵠ: ⵠᐃ.ΔΔΔⲆΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⵠⲆΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⲆΔⵠ: ⵠᐃ.ΔⵠΔᐃⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠᐃⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔⲆⵠⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆΔⲆΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⲆⵠΔⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⵠΔⵠⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⲆΔⵠ: ⵠᐃ.ⲆⲆᐃⵠᐃⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔⲆΔⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⲆΔⵠ: ⵠᐃ.ΔΔᐃᐃΔᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⲆⵠⲆⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠⲆᐃⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆⲆΔᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆⵠⵠΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆΔᐃᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠⲆΔΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⲆΔᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃᐃⵠⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃᐃΔᐃⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⲆΔⵠ: ⵠᐃ.ⲆΔᐃΔⵠᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⵠⵠⵠΔᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆᐃΔⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔᐃⵠᐃⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆⵠⵠΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⵠⵠᐃⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⲆΔⵠ: ⵠᐃ.ΔⲆΔΔᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃᐃΔᐃΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⲆΔⵠ: ⵠᐃ.ᐃⵠⵠᐃΔⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠΔΔⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔⲆⵠᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⵠⵠΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔᐃⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃᐃⲆⲆᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⲆΔⵠ: ⵠᐃ.ΔΔⵠⲆᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔΔᐃⵠᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆᐃΔᐃⵠΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⲆᐃⵠⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆΔ,
        ⲆⵠⲆ: "aloner",
        name: "Blood"
      }, {
        id: 27,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃⵠᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔⵠᐃᐃᐃⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: Ws,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔᐃᐃΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.Ⲇⵠᐃᐃᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠᐃⲆΔΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆᐃⲆⲆⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆΔⲆΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔΔⲆⵠⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃΔⵠΔΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⵠⵠⲆⵠᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⵠⲆᐃᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠⲆᐃΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⲆΔⵠ: ⵠᐃ.ᐃᐃΔᐃⵠΔⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃΔⵠⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⲆᐃᐃⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠΔⲆⲆΔΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ΔⲆⲆⲆ,
        ⲆⵠⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 60,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃᐃⲆⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃΔΔΔΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⲆⵠΔΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⲆⲆᐃΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⲆΔⵠ: ⵠᐃ.ⵠᐃⵠΔⲆⲆⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⵠᐃᐃⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⲆΔⵠ: ⵠᐃ.ΔⵠᐃⲆᐃⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃᐃⲆΔΔⵠΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠⲆᐃᐃᐃΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⵠΔᐃΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⲆΔⵠ: ⵠᐃ.ΔⲆⵠⲆΔⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆᐃⵠⵠΔΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⲆΔⵠ: ⵠᐃ.ΔⵠⲆᐃⵠΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆᐃⲆⲆᐃᐃᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⲆΔⵠ: ⵠᐃ.ᐃΔΔⲆΔⵠⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ᐃⲆⲆΔⲆⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⲆᐃⲆΔⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠⲆⵠΔΔⵠⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.ⵠΔⲆΔ,
        ⲆⵠⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        ⲆΔⵠ: ⵠᐃ.ⲆᐃΔᐃΔⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⲆᐃΔΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⲆΔⵠ: ⵠᐃ.ⵠΔᐃΔΔᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔⲆⲆⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 10",
        level: El
      }, {
        id: 47,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⲆΔΔⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆⲆⵠⲆΔⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⲆΔⵠ: ⵠᐃ.ΔᐃΔⲆᐃᐃⲆ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆΔᐃⲆⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⲆΔⵠ: ⵠᐃ.ⲆΔⲆⲆⵠⲆⲆ,
        Ⲇⵠⵠ: ⵠᐃ.Ⲇᐃⵠᐃⵠⵠⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠΔⵠΔᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⵠⲆⵠⲆⲆ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⲆΔⵠ: ⵠᐃ.ⵠⵠⵠᐃⲆⲆΔ,
        Ⲇⵠⵠ: ⵠᐃ.ΔᐃⵠⵠⵠᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆᐃΔⲆᐃᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃΔⲆⲆⲆΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⲆΔⵠ: ⵠᐃ.ΔᐃⵠⲆΔⵠⵠ,
        Ⲇⵠⵠ: ⵠᐃ.ⲆⲆⵠⵠᐃᐃⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⲆΔⵠ: ⵠᐃ.ⵠⲆΔⵠⲆΔΔ,
        Ⲇⵠⵠ: ⵠᐃ.ⵠᐃⲆⵠᐃᐃΔ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⲆΔⵠ: ⵠᐃ.ᐃΔⵠⵠᐃⵠᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔΔᐃΔΔΔᐃ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⲆΔⵠ: ⵠᐃ.ⲆⵠΔⲆᐃⲆᐃ,
        Ⲇⵠⵠ: ⵠᐃ.ΔⲆΔⵠⲆΔⵠ,
        Ⲇᐃⵠ: ⵠⲆΔ.Ⲇⵠᐃⵠⵠ,
        ⲆⵠⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    uw.ΔⲆⲆⵠᐃᐃᐃ = ⵠΔᐃⲆⵠΔᐃ(ⲆⲆᐃΔ.ΔⲆⲆⵠΔ, 21);
    uw.ⵠⵠⲆᐃᐃⲆⵠ = ⵠΔᐃⲆⵠΔᐃ(ⲆⲆᐃΔ.ΔⲆⲆⵠΔ, Hq);
    ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ] = [];
    ΔΔ[Ur.ᐃⵠⲆΔᐃ] = [];
    ΔΔ[Ur.ⲆⵠⵠⲆⵠ] = [];
    ΔΔ[Ur.ⵠᐃⵠⲆᐃ] = [];
    ΔΔ[Ur.ᐃⵠⲆΔ] = [];
    ΔΔ[Ur.ⲆⲆΔⲆⲆ] = [];
    for (var a = 0; ⲆⲆᐃΔ.ΔⲆⲆⵠΔ.length > a; a++) {
      ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][a] = [ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[a].ⲆΔⵠ, ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[a].Ⲇⵠⵠ];
      ΔΔ[Ur.ᐃⵠⲆΔᐃ][a] = [ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[a].ᐃᐃᐃⵠ, ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[a].ᐃᐃΔⵠ];
    }
    for (a = 0; a < ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ.length; a++) {
      ΔΔ[Ur.ⵠᐃⵠⲆᐃ][a] = [ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ[a].ⲆΔⵠ, ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ[a].Ⲇⵠⵠ];
    }
    for (a = 0; a < ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ.length; a++) {
      ΔΔ[Ur.ⲆⵠⵠⲆⵠ][a] = [ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ[a].ⲆΔⵠ, ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ[a].Ⲇⵠⵠ];
    }
    for (a = 0; a < ⲆⲆᐃΔ.ᐃⵠⲆΔ.length; a++) {
      ΔΔ[Ur.ᐃⵠⲆΔ][a] = [ⲆⲆᐃΔ.ᐃⵠⲆΔ[a].ⲆΔⵠ, ⲆⲆᐃΔ.ᐃⵠⲆΔ[a].Ⲇⵠⵠ];
    }
    for (a = Fj; a < ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ.length; a++) {
      ΔΔ[Ur.ⲆⲆΔⲆⲆ][a] = [ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ[a].ⲆΔⵠ, ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ[a].Ⲇⵠⵠ];
    }
  };
  const Tt = wr;
  function eb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  const ib = Bk;
  function tb(a, b, c, d, e, f) {
    if (f * 2 > d) {
      f = d / wr;
    }
    if (e < f * vk) {
      f = e / vk;
    }
    if (f < ms) {
      f = gr;
    }
    a.beginPath();
    a.moveTo(b + f, c);
    a.arcTo(b + d, c, b + d, c + e, f);
    a.arcTo(b + d, c + e, b, c + e, f);
    a.arcTo(b, c + e, b, c, f);
    a.arcTo(b, c, b + d, c, f);
    a.closePath();
  }
  const nb = vt;
  function ob(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, Fj, Math.PI * 2);
  }
  const rb = Mn;
  function ab(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, _a, e * (Math.PI * 2));
  }
  const sb = yq;
  function hb(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var g = [{
      x: d,
      y: 0
    }];
    var i = [];
    for (var a = $l; c > a; a++) {
      g.push({
        x: Math.sin(a * f) * d,
        y: d * Math.cos(a * f)
      });
      var j = g.length;
      i.push(ᐃⵠΔⵠ.ᐃΔΔᐃⵠⵠⲆ(g[j - 2], g[j - Al]));
    }
    i.push(ᐃⵠΔⵠ.ᐃΔΔᐃⵠⵠⲆ(g[g.length - 1], g[vq]));
    var k = i[i.length - 1];
    b.moveTo(k.x, k.y);
    for (a = Tg; c > a; a++) {
      b.arcTo(g[a].x, g[a].y, i[a].x, i[a].y, e);
    }
    b.closePath();
  }
  function lb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var k = i / vk;
    var a = j / Cl;
    var m = hh * c;
    var h = c * 112;
    var l = c * 82;
    var g = h / 2;
    var n = l / wr;
    var b = c * ea;
    e.width = i;
    e.height = j;
    f.globalAlpha = 1;
    f.translate(k, a);
    tb(f, -g, -n, h, l, m);
    eb(f, d, d, b);
    return e;
  }
  function gb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / tg, -b.height / Xh);
    return c;
  }
  function ub(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * cq);
    e.font = g + "px Baloo Paaji";
    var h = b * 8;
    var a = e.measureText(c).width + h * vk;
    d.width = a;
    d.height = f;
    tb(e, 0, 0, a, f, b * Uh);
    e.globalAlpha = 0.5;
    eb(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, h, f / Xh);
    return d;
  }
  const bb = Uh;
  const vb = Fg;
  const db = lq;
  function cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, Ye * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * Tn, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * Uq, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    eb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * mh, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * ot, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    eb(e, c[1], c[2], a * xl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    eb(e, c[ol], c[4], xt * a);
    return d;
  }
  const mb = ka;
  function pb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    tb(e, a * -8, a * -70.5, a * 16, a * 141, jq * a);
    e.restore();
    eb(e, c[ur]);
    e.save();
    e.translate(a * 69.5, a * 110);
    tb(e, a * -8.5, a * -71, a * qs, a * 143, aa * a);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    tb(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    eb(e, c[Zn], c[1], a * wg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * hl, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    eb(e, c[2], c[1], a * Rt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, Kq * a);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    eb(e, c[3], c[1], a * 6);
    return d;
  }
  function Cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    ob(e, a * 26, a * 26, Eh * a);
    eb(e, c[0]);
    ob(e, a * 56, a * 36, a * 9);
    eb(e, c[1]);
    ob(e, a * 40, a * 50, a * 9);
    eb(e, c[lt]);
    e.globalAlpha = Al;
    ob(e, a * 26, a * 26, a * 5);
    eb(e, c[rl]);
    ob(e, a * 56, a * 36, a * 5);
    eb(e, c[1]);
    ob(e, a * 40, a * 50, a * 5);
    eb(e, c[Ss]);
    return d;
  }
  function Tb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    tb(e, a * -8, a * -67, te * a, a * 134, Fh * a);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    tb(e, a * -8.5, a * -70.5, a * 17, a * 141, a * $l);
    e.restore();
    eb(e, c[qn]);
    e.save();
    e.translate(a * 123.5, a * 68);
    tb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    eb(e, c[2], c[jq], a * Zh);
    e.save();
    e.translate(a * 123, a * 179.5);
    tb(e, a * -83, a * -24.5, a * 166, a * 49, xt * a);
    e.restore();
    eb(e, c[Xh], c[Ej], a * Kl);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    tb(e, a * -82.5, a * -24.5, a * 165, a * 49, Ph * a);
    e.restore();
    eb(e, c[ar], c[Oj], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    eb(e, c[ag]);
    return d;
  }
  function fb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    ob(e, a * 11, a * 11, a * 10);
    eb(e, c[0]);
    e.globalAlpha = 0.7;
    ob(e, $i * a, $h * a, a * 7);
    eb(e, c[uh]);
    e.globalAlpha = 1;
    ob(e, a * 11, a * 11, a * Ch);
    eb(e, c[0]);
    return d;
  }
  function zb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    tb(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    eb(e, c[Cq]);
    e.save();
    e.translate(a * 183, a * 145);
    tb(e, -le * a, a * -63, Jk * a, a * 126, Al * a);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    tb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    eb(e, c[wr], c[jq], a * Pl);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    tb(e, a * -85.5, a * -24, a * 169, a * 48, Os * a);
    e.restore();
    eb(e, c[yh], c[1], a * wh);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    tb(e, a * -84, a * -23.5, a * 169, a * 47, a * Vh);
    e.restore();
    eb(e, c[2], c[jq], Rt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    eb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    eb(e, c[Al]);
    return d;
  }
  const yb = qh;
  const wb = Vl;
  function Pb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(Rl, Ye * a);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    tb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    eb(e, c[0], c[0], Eg * a);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(qn);
    tb(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    eb(e, c[1], c[2], a * gl);
    e.translate(a * vk, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, Do * a, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, Ja * a, a * 108);
    e.bezierCurveTo(Ua * a, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(Hh * a, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * ua, a * 65, a * 12, a * 54, tq * a, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, gs * a, a * 36);
    e.bezierCurveTo(a * In, a * 33, a * 16, a * 33, os * a, a * 30);
    e.bezierCurveTo(a * Ul, a * 27, a * 18, a * 27, ue * a, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, te * a);
    e.bezierCurveTo(a * 74, tq * a, a * 74, a * jk, a * 106, te * a);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    eb(e, c[xs], c[vs], a * 4);
    return d;
  }
  function Ab(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    tb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    eb(e, c[0], c[0], a * 4);
    e.globalAlpha = Fh;
    e.translate(0, -bb * a);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    tb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    eb(e, c[1], c[wr], a * Ch);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    eb(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    eb(e, c[Qt], c[ug], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    eb(e, c[5], c[gq], a * 4);
    ob(e, a * 68, a * 111.29513549804688, a * 15);
    eb(e, c[rr], c[Dn], Ch * a);
    ob(e, a * 123, a * 111.29510498046875, js * a);
    eb(e, c[or], c[8], Ch * a);
    ob(e, a * 63, a * 106, a * 5);
    eb(e, c[9]);
    ob(e, a * 118, a * 106, a * 5);
    eb(e, c[Bg]);
    return d;
  }
  function kb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * wl, a * 150, $h * a, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    eb(d, b[tj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    eb(d, b[Gr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, Pq * a, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * te);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    eb(d, b[gr]);
    return c;
  }
  function xb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var i = b * 40;
    e.width = g;
    e.height = i;
    var a = b * g / tg;
    var j = b * i / 2;
    var k = b * 15;
    f.save();
    f.translate(a, j);
    f.globalAlpha = 1;
    ob(f, 0, 0, k);
    eb(f, d[rl]);
    k = b * cl;
    a = b * 2;
    j = b * Oj;
    f.translate(a, j);
    f.globalAlpha = 1;
    ob(f, 0, Gr, k);
    eb(f, d[$l]);
    f.restore();
    return e;
  }
  function Jb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    tb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    eb(d, b[Tg], b[ur], a * 4);
    d.translate(a * 2, rl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * Do, a * 108);
    d.bezierCurveTo(a * kh, a * 103, a * Kk, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, lq * a, a * 83);
    d.bezierCurveTo(a * Ll, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, Wa * a, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * w, a * 33, Ko * a, a * 30);
    d.bezierCurveTo(a * Dl, a * 27, ee * a, a * 27, a * qs, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, zj * a);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, w * a, a * 74, mb * a, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    eb(d, b[0], b[uh], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    tb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    eb(d, b[_a], b[0], a * _l);
    return c;
  }
  function Mb(a) {
    var b = document.createElement("canvas");
    var c = b.getContext("2d");
    var d = a * 200;
    var e = a * 200;
    b.width = d;
    b.height = e;
    var f = Uu(0.35, Rn, ["#0e3022", "#0b8052", "#077b49"]);
    c.drawImage(f, bb, El);
    f = Zu(0.9, hr, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 21, yn);
    f = Zu(0.9, Sh, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 38, 28);
    f = Zu(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, Io, 37);
    f = Zu(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 32, 45);
    return b;
  }
  function Bb(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 185;
    e.height = a * 240;
    f.globalAlpha = 0.5;
    f.translate(0, Qa * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    eb(f, c[gr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, a * wj, a * 150, a * 11, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    eb(f, c[Cn]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    eb(f, c[qk]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    eb(f, c[ne]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    eb(f, c[0]);
    f.globalAlpha = 1;
    f.translate(Fj, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    eb(f, c[1], c[Tt], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, a * Ko, a * 150, a * 11, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    eb(f, c[Ue], c[2], gl * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    eb(f, c[Oj], c[ql], a * Ph);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    eb(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    eb(f, c[1], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 99);
    f.bezierCurveTo(a * 71, a * 68, a * 81, a * 68, a * 94, a * 67);
    f.bezierCurveTo(a * 105, a * 66, a * 119, a * 75, a * 123, a * 96);
    f.bezierCurveTo(a * 104, a * 91, a * 101, a * 94, a * 94, a * 97);
    f.bezierCurveTo(a * 76, a * 92, a * 73, a * 93, a * 60, a * 99);
    f.closePath();
    eb(f, c[Gl], c[2], a * 4);
    if (d === Gr) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 47, a * 149);
      f.bezierCurveTo(a * 43, a * 140, a * 48, a * 130, a * 59, a * 127);
      f.bezierCurveTo(a * 77, a * 126, a * 90, a * 131, a * 131, a * 127);
      f.bezierCurveTo(a * 143, a * 130, a * 144, a * 143, a * 132, a * 154);
      f.bezierCurveTo(a * 90, a * 152, a * 90, a * 152, a * 48, a * 150);
      f.closePath();
      eb(f, c[1]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 40, a * 139);
      f.bezierCurveTo(a * 48, a * 113, a * 76, a * 119, a * 91, a * 126);
      f.bezierCurveTo(a * 117, a * 113, a * 135, a * 117, a * 144, a * 134);
      f.bezierCurveTo(a * 144, a * 138, a * 144, a * 138, a * 144, a * 142);
      f.bezierCurveTo(a * 128, a * 124, a * 108, a * 124, a * 91, a * 136);
      f.bezierCurveTo(a * 59, a * 124, a * 50, a * 137, a * 42, a * 148);
      f.closePath();
      eb(f, c[yh], c[Cl], hn * a);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 41, a * 139);
      f.bezierCurveTo(a * 53, a * 117, a * 69, a * 118, a * 92, a * 127);
      f.bezierCurveTo(a * 124, a * 111, a * 136, a * 121, a * 143, a * 136);
      f.bezierCurveTo(a * 142, a * 144, a * 142, a * 144, a * 141, a * 152);
      f.bezierCurveTo(a * 128, a * 131, a * 113, a * 138, a * 92, a * 145);
      f.bezierCurveTo(a * 57, a * 133, a * 57, a * 147, a * 44, a * 154);
      f.closePath();
      eb(f, c[3], c[2], a * 4);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 95);
    f.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    f.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    f.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    f.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    f.closePath();
    eb(f, c[Zq], c[Xh], a * ch);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 86);
    f.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    f.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    f.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    f.closePath();
    eb(f, c[1], c[3], a * Ch);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 117);
    f.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    f.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    f.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    f.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    f.closePath();
    eb(f, c[Fh], c[X], _g * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 175);
    f.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    f.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    f.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    f.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    f.closePath();
    eb(f, c[1], c[3], a * Yi);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 169);
    f.bezierCurveTo(a * 42, a * 187, a * 50, a * 193, a * 59, a * 198);
    f.closePath();
    eb(f, Gg, c[2], wt * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 136, a * 171);
    f.bezierCurveTo(a * 139, a * 186, a * 138, a * 191, a * 124, a * 199);
    f.closePath();
    eb(f, ng, c[sh], a * 4);
    ob(f, a * 63, a * 180, a * 15.231546211727817);
    eb(f, c[4]);
    ob(f, a * 121, a * 181, a * 15.652475842498529);
    eb(f, c[4]);
    ob(f, a * 58, a * 175, a * 5.656854249492381);
    eb(f, c[Ss]);
    ob(f, a * 116, a * 175, a * 5.656854249492381);
    eb(f, c[2]);
    return e;
  }
  const Db = Aq;
  function Ib(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * Nh;
    var j = c * rj;
    var k = i / sh;
    var a = j / 2;
    e.width = i;
    e.height = j;
    var m = c * cl;
    var h = c * 28;
    var l = m / 2;
    var g = h / zk;
    f.translate(k, a);
    for (var n = 0; n < 4; n++) {
      tb(f, -l, -g, m, h, c * 2);
      f.rotate(Math.PI / 4);
      eb(f, d);
    }
    f.arc(0, Fj, bb * c, ur, Math.PI * 2);
    eb(f, d);
    f.globalCompositeOperation = "destination-out";
    ob(f, gr, 0, c * 4);
    f.fill();
    return e;
  }
  const Eb = Fg;
  function Sb(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var k = c * 32;
    var a = j / Cl;
    var m = k / sh;
    f.width = j;
    f.height = k;
    var h = c * 5;
    var l = c * 28;
    var g = h / 2;
    var n = l / 2;
    i.translate(c * 0, c * 0);
    i.translate(a, m);
    if (e == 1) {
      ob(i, 0, 0, c * 10);
      eb(i, d[Zn], d[2], c * 3);
      for (var b = 0; b < 4; b++) {
        tb(i, -g, -n, h, l, ql * c);
        i.rotate(Math.PI / gl);
        eb(i, d[2], d[2], c * 4);
      }
    }
    ob(i, 0, 0, ws * c);
    eb(i, d[gr], d[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      tb(i, -g, -n, h, l, Zn * c);
      i.rotate(Math.PI / Db);
      eb(i, d[qn], d[1], c * 1.5);
    }
    ob(i, 0, 0, c * El);
    eb(i, d[ne]);
    ob(i, Cn, Fj, ch * c);
    eb(i, d[Xr], d[1], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    ob(i, ur, gr, ug * c);
    eb(i, d[0], d[1], sh * c);
    i.globalCompositeOperation = p[Sl];
    ob(i, 0, qk, c * rg);
    eb(i, yq, d[Oj], Zn * c);
    return f;
  }
  const Qb = Jn;
  const _b = j;
  const Fb = S;
  const Rb = _l;
  function Gb(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / wr;
    var o = (t = f * 95) / 2;
    var a = f * Qa;
    var p = f * 8;
    var h = f * 112;
    var l = f * 82;
    var g = h / vk;
    var q = l / 2;
    var b = f * 4;
    j.width = r;
    j.height = t;
    k.translate(n - f * 4, o + f * 4);
    k.globalAlpha = e ? 0.5 : Ej;
    tb(k, -g, -q, h, l, a);
    eb(k, i[0]);
    k.globalAlpha = Fh;
    k.translate(0, -p);
    tb(k, -g, -q, h, l, a);
    eb(k, i[Ht], i[2], b);
    var r = f * 55;
    var t = f * 45;
    a = 5;
    k.translate(f * -40, f * -30);
    tb(k, 0, ms, r, t, a);
    eb(k, i[3]);
    var u = Ib(f * 0.7, i[Sg]);
    k.drawImage(u, f * 45, f * -25);
    u = Ib(f * 0.7, i[Jh]);
    k.drawImage(u, f * 45, f * 15);
    u = Ib(f * 1.2, i[X]);
    k.drawImage(u, f * 28, f * -30);
    r = f * 15;
    t = f * 70;
    a = f * 5;
    k.translate(f * 78, -ha * f);
    tb(k, tj, Tg, r, t, a);
    eb(k, i[ug]);
    r = Mn * f;
    t = f * 50;
    a = co * f;
    k.translate(f * -Hl, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    tb(k, 0, 0, r, t, a);
    eb(k, i[5]);
    k.translate(-cq * f, f * 29);
    k.rotate(Math.PI / cl);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    eb(k, null, i[Ya], dg * f);
    return j;
  }
  function jb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var k = c * Rt;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + k);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    eb(f, d[qk]);
    f.translate(Fj, -k);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    eb(f, d[1], d[2], xt);
    var a = c * 155;
    var m = c * 133;
    var h = c * 10;
    var l = Ka * c;
    var g = a + c * -Sg;
    var n = m + -ha * c;
    f.save();
    f.translate(a, m);
    f.globalAlpha = 1;
    ob(f, qn, Ih, h);
    eb(f, d[og]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = 1;
    ob(f, Rl, 0, l);
    eb(f, d[4]);
    f.restore();
    f.save();
    f.translate(a + c * 27, m);
    f.globalAlpha = 1;
    ob(f, gr, 0, h);
    eb(f, d[co]);
    f.restore();
    f.save();
    f.translate(c * 27 + g, n);
    f.globalAlpha = 1;
    ob(f, 0, 0, l);
    eb(f, d[4]);
    return e;
  }
  const Wb = Z;
  function Lb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    tb(e, a * -96.5, a * -21.5, a * 193, a * 193, qn * a);
    e.restore();
    eb(e, b[0], b[1], a * bk);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    tb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    eb(e, b[Xr], b[Fh], a * Jg);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    tb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    eb(e, b[3], b[zs], a * db);
    e.save();
    e.translate(a * 202.5, a * 275);
    tb(e, a * 96.5, a * -21, a * -193, a * 42, Nl * a);
    e.restore();
    eb(e, b[gr], b[Ag], Ll * a);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    tb(e, a * -116, a * -22, a * 232, a * 44, ih * a);
    e.restore();
    eb(e, b[dt], b[Al], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    tb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * ws);
    e.restore();
    eb(e, b[Ka], b[Ok], S * a);
    e.save();
    e.translate(a * 203.5, a * 299);
    tb(e, a * -115.5, a * -20, a * 231, a * 40, xk * a);
    e.restore();
    eb(e, b[Kj], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    tb(e, a * -20.5, a * -109, a * 41, a * 218, ws * a);
    e.restore();
    eb(e, b[3], b[Ue], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    tb(e, a * -20.5, a * -109, a * 41, a * 218, a * ws);
    e.restore();
    eb(e, b[Ka], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    tb(e, a * -92, a * -9.5, a * 184, a * 19, a * Va);
    e.restore();
    eb(e, b[3], b[3], a * pj);
    e.save();
    e.translate(a * 197, a * 299);
    tb(e, a * 85, -Bg * a, a * -170, a * 18, a * 10);
    e.restore();
    eb(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    eb(e, undefined, b[Eo], ua * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    eb(e, qr, b[Ht], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    eb(e, undefined, b[$l], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    eb(e, ng, b[ag], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(-Th * a, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      eb(e, b[Ch], b[Cg], gg * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      eb(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      eb(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      eb(e, b[4], b[4], a * Hq);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      eb(e, Gg, b[qn], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      eb(e, pl, b[0], a * 20);
      ob(e, a * 142, a * 221, a * 16.1245154965971);
      eb(e, b[0]);
    }
    return d;
  }
  function Ob(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var h = b * 55;
    var a = b * xl;
    e.width = g;
    e.height = h;
    f.translate(b * -65, b * -55 + a);
    f.globalAlpha = Eo;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    eb(f, d[qn], d[Ht], 3);
    f.globalAlpha = Fh;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * mg, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    eb(f, d[2], d[3], 3);
    return e;
  }
  function Nb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    ob(d, a * 213.5, a * 256.75, a * 75);
    eb(d, b[Vh]);
    ob(d, a * 213.5, a * 175.75, a * 25);
    eb(d, b[Ya]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = zg * a;
    d.strokeStyle = b[gg];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * kh;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[pr];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * it;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(Rl, -5);
    d.globalAlpha = Zq;
    ob(d, a * 213.5, a * 256.75, a * 75);
    eb(d, b[3]);
    ob(d, a * 213.5, a * 175.75, a * 25);
    eb(d, b[Jh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * bb;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * ih;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[Tg];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[Ih];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Z];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * ja;
    d.strokeStyle = b[Jh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = Hk * a;
    d.strokeStyle = b[og];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[X];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = it * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = gk * a;
    d.strokeStyle = b[co];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * Ua;
    d.strokeStyle = b[Z];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[Gr];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = Dn * a;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = ta * a;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = ph * a;
    d.strokeStyle = b[_a];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * nb;
    d.strokeStyle = b[Rl];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[ms];
    d.stroke();
    ob(d, a * 213.5, a * 256.75, a * 70);
    eb(d, b[0]);
    ob(d, a * 213.5, a * 175.75, a * 20);
    eb(d, b[0]);
    ob(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    ob(d, a * 205, a * 166, xj * a);
    d.fillStyle = b[2];
    d.fill();
    ob(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[Cg];
    d.fill();
    ob(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[ea];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    tb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    tb(d, a * -15, a * -14.5, a * 30, a * 29, Zh * a);
    d.restore();
    d.fillStyle = b[Zq];
    d.fill();
    return c;
  }
  function qb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(qn, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    eb(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    eb(d, b[0], b[Tg], a * Ss);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    eb(d, b[0], b[ms], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    eb(d, b[0], b[uh], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    eb(d, b[1], b[2], nn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    eb(d, b[Kj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    eb(d, sb, b[Xh], a * xs);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    eb(d, b[ie], b[Tt], yh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    eb(d, b[Ok], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    eb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    eb(d, b[3]);
    ob(d, a * 77, a * 107, a * 6);
    eb(d, b[2]);
    ob(d, a * 110, a * 107, gq * a);
    eb(d, b[2]);
    ob(d, a * 75, a * 105, a * 3);
    eb(d, b[rg]);
    ob(d, a * 108, a * 105, a * 3);
    eb(d, b[Ch]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    eb(d, b[Ht]);
    return c;
  }
  const Hb = ci;
  function Ub(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    hb(e, Vi, a * 54.585977194239184, a * $l);
    e.restore();
    eb(e, c[Zq], c[zk], S * a);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    hb(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    eb(e, c[zs], c[2], Is * a);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    hb(e, wg, a * 53.58058329516393, a * 1);
    e.restore();
    eb(e, c[_b], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    hb(e, gq, a * 52.53573932334064, a * jq);
    e.restore();
    eb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    hb(e, wg, a * 57.63465889766331, a * j);
    e.restore();
    eb(e, c[Oj], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    hb(e, sr, a * 51.66236541235796, a * Al);
    e.restore();
    eb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    hb(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    eb(e, c[1], c[Zn], a * db);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    hb(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    eb(e, c[Oj], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    hb(e, 6, a * 50, a * 1);
    e.restore();
    eb(e, c[zs], c[Xh], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    hb(e, Mg, a * 54, a * Gs);
    e.restore();
    eb(e, c[ag], c[Xh], a * Za);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    hb(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    eb(e, c[ag], c[2], Jt * a);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    hb(e, 6, a * 54.589376255824725, Fh * a);
    e.restore();
    eb(e, c[ag], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    hb(e, Mg, a * 49.49747468305833, a * 1);
    e.restore();
    eb(e, c[Ag], c[re], gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    eb(e, undefined, c[vk], a * Zg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    eb(e, qr, c[2], a * Jg);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    hb(e, 6, a * 30, a * 15);
    e.restore();
    eb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    hb(e, 6, a * 30, a * oa);
    e.restore();
    eb(e, c[Qk]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    hb(e, eh, a * 30, a * oj);
    e.restore();
    eb(e, c[Gl]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    hb(e, 6, a * 30, a * 15);
    e.restore();
    eb(e, c[Sg]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    hb(e, sq, a * 30, a * 15);
    e.restore();
    eb(e, c[Ka]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    hb(e, 6, a * 30, a * 15);
    e.restore();
    eb(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    hb(e, Mg, a * 30, oa * a);
    e.restore();
    eb(e, c[co]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    hb(e, 6, a * 30, oa * a);
    e.restore();
    eb(e, c[Qt]);
    return d;
  }
  function Yb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    eb(e, c[ur], c[ie], a * Fi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    eb(e, c[Pt], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    eb(e, qj, c[1], Ug * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    eb(e, c[Qk], c[Ch], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    eb(e, c[0], c[Ue], Jl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    eb(e, c[Ss], c[1], a * bg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    eb(e, sb, c[j], Fi * a);
    ob(e, a * 161, a * 201, a * 13);
    eb(e, c[5]);
    ob(e, a * 216, a * 205, a * 8.06225774829855);
    eb(e, c[5]);
    ob(e, a * 216, a * 175, a * 6.708203932499369);
    eb(e, c[5]);
    ob(e, a * 271, a * 191, a * 5.0990195135927845);
    eb(e, c[5]);
    ob(e, a * 206, a * 180, a * 11.180339887498949);
    eb(e, c[5]);
    return d;
  }
  function Kb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    eb(e, undefined, c[Fh], a * Xh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    eb(e, ht, c[1], a * sh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    eb(e, c[qk], c[1], a * Cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    eb(e, c[0], c[jq], a * tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    eb(e, c[Tg], c[1], Pt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    eb(e, c[_a], c[jq], Xh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    eb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    eb(e, undefined, c[Gs], a * 2);
    return d;
  }
  function Vb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(ha * a, a * ha);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    eb(e, undefined, c[Ih], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    eb(e, c[ll]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    eb(e, $r, c[6], a * vs);
    e.globalAlpha = b ? 0.5 : aa;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    eb(e, undefined, c[_a], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    eb(e, c[Gr]);
    e.globalAlpha = 1;
    e.translate(-xh * a, -Ui * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    eb(e, c[nl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    eb(e, qr, c[6], gl * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    eb(e, Zi, c[ur], a * xt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    eb(e, c[$j]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    eb(e, Hj, c[Zh], Aq * a);
    e.globalAlpha = b ? 0.5 : Ue;
    e.translate(a * 5, Ui * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    eb(e, da, c[ur], a * Yi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = Ok;
    e.translate(a * -Os, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    eb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    eb(e, undefined, c[6], Aq * a);
    return d;
  }
  function Zb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(ha * a, Jn * a);
    e.globalAlpha = b ? 0.5 : jq;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    hb(e, 7, a * 42.15447781671598, a * El);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = _b;
    e.translate(a * -Jn, -Os * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    hb(e, 7, a * 42.15447781671598, Ln * a);
    e.restore();
    eb(e, c[1], c[tg], a * 4);
    e.globalAlpha = b ? 0.5 : Zq;
    e.translate(a * 5, jt * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    hb(e, 7, a * 30.463092423455635, a * no);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Zq;
    e.translate(a * -pr, -Ui * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    hb(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    eb(e, c[3], c[4], ea * a);
    e.globalAlpha = b ? 0.5 : _b;
    e.translate(sj * a, a * 5);
    ob(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    eb(e, c[uh]);
    e.globalAlpha = aa;
    e.translate(a * -5, a * -Ui);
    ob(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    eb(e, c[Vh], c[6], a * Cg);
    return d;
  }
  const Xb = uj;
  const $b = mt;
  function Ut(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var h = b * 55;
    e.width = g;
    e.height = h;
    f.translate(b * -30, b * -40);
    f.globalAlpha = Eo;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    eb(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    eb(f, d[Ag]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    eb(f, false, d[Ej], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    eb(f, d[wr]);
    return e;
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * cl, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    hb(e, y, a * 9.848857801796104, Ui * a);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = ie;
    e.translate(a * -5, a * -Ya);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    hb(e, jg, a * 9.848857801796104, jt * a);
    e.restore();
    eb(e, c[Dn], c[Ma], a * 4);
    return d;
  }
  const Wt = rs;
  const Xt = ib;
  const Yt = no;
  const Zt = Tt;
  function $t(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var o = n.getContext("2d");
    var a = f * 70;
    var p = f * 70;
    var h = f * 10;
    var l = f * 5;
    n.width = a;
    n.height = p + l;
    for (var g = Cq; e.length > g; g++) {
      var q = e[g];
      o.globalAlpha = q.a;
      var r = q.f(i, Fq, q.c);
      o.save();
      o.translate(a / Zt + f * q.x, p / Xh + q.y * f);
      o.rotate(q.r);
      o.drawImage(r, -r.width / vk, -r.height / 2);
      o.restore();
    }
    var s = [];
    for (g = tj; g < j.length; g++) {
      var d = document.createElement("canvas");
      var t = d.getContext("2d");
      d.width = a;
      d.height = p + l;
      t.globalAlpha = k / Tt;
      if (g == 2) {
        tb(t, Tg, l, a, p, h);
      } else {
        tb(t, 0, ur, a, p + l, h);
      }
      eb(t, "#081a19");
      t.globalAlpha = k;
      tb(t, 0, g == 2 ? l : Gr, a, p, h);
      eb(t, j[g]);
      t.globalAlpha = $l;
      if (g == Zn) {
        t.drawImage(n, 0, l);
      } else {
        t.drawImage(n, Tg, 0);
      }
      s.push(Fr(d));
    }
    return s;
  }
  function _t(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var m = c * 190;
    var a = k / 2;
    var n = m / 2;
    i.width = k;
    i.height = m;
    var h = c * Fl;
    var l = c * 35;
    var g = c * 150;
    var o = l / Ss;
    var b = g / Zt;
    var p = Ph * c;
    j.translate(a - Vh * c, n - c * sj);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[jq], p);
    j.translate(0, ms);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[1], p);
    j.translate(Gr, 5);
    tb(j, -o / 2, -b / wr, l / sh, g / 3, h - tg);
    eb(j, f[Ht]);
    return i;
  }
  const au = nk;
  function bu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var i = b * 145;
    var a = g / Pt;
    var j = i / Xh;
    e.width = g;
    e.height = i;
    var h = b * 70;
    f.translate(a, j);
    f.globalAlpha = 0.4;
    ob(f, Cq, tj, h);
    eb(f, d[Gr]);
    h = b * 50;
    f.translate(0, Gr);
    f.globalAlpha = 0.8;
    ob(f, 0, Rl, h);
    eb(f, d[0]);
    h = b * 35;
    f.translate(rl, rl);
    f.globalAlpha = 0.8;
    ob(f, gr, ms, h);
    eb(f, d[aa]);
    h = b * hh;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    ob(f, 0, Rl, h);
    eb(f, d[Cl]);
    return e;
  }
  function cu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var i = b * 205;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    var h = b * No;
    f.translate(a, j);
    f.globalAlpha = Ue;
    ob(f, 0, _a, h);
    eb(f, d[Cn]);
    return e;
  }
  function du(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var m = c * 198;
    var a = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / 2;
    var b = g / 2;
    var p = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[aa], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / og);
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[$l], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[1], p);
    return i;
  }
  function eu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var m = c * 190;
    var a = k / 2;
    var n = m / sh;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 25;
    var g = c * 180;
    var o = l / 2;
    var b = g / Tt;
    var p = c * 4;
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = jq;
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[Ue], p);
    j.translate(0, Cn);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    tb(j, -o, -b, l, g, h);
    eb(j, f[0], f[Ht], p);
    return i;
  }
  const fu = Go;
  function gu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var i = b * 370;
    var a = g / Zt;
    var j = i / Ss;
    e.width = g;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    ob(f, a, j, h);
    eb(f, d[0]);
    return e;
  }
  const hu = Vi;
  function iu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var h = b * 16;
    var a = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / ql, g / wr);
    e.globalAlpha = Ht;
    ob(e, 0, Tg, h);
    eb(e, c[0], c[As], a);
    return d;
  }
  function ju(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 32;
    var a = b * Ph;
    d.width = f;
    d.height = g;
    e.translate(f / vk, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    ob(e, qn, ms, h);
    eb(e, c[0], c[0]);
    e.translate(Ih, b * -8);
    e.globalAlpha = Ej;
    ob(e, Nl, Qs, h);
    eb(e, c[1], c[2], a);
    return d;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * Ml, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    eb(e, c[rl]);
    e.globalAlpha = 1;
    e.translate(Cn, a * -8);
    e.translate(a * Th, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, Hq * a, a * 120, a * Jk);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, Sg * a);
    e.bezierCurveTo(a * 51, wt * a, a * 36, zl * a, a * 25, a * 28);
    e.closePath();
    eb(e, c[j], c[Zt], Cg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * At, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * Zn);
    e.bezierCurveTo(a * 59, a * 3, a * 54, y * a, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    eb(e, c[nn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * Rh, a * 89, a * tj, a * 73, Gl * a);
    e.bezierCurveTo(a * 51, a * 5, a * 36, Kk * a, a * 25, a * 28);
    e.closePath();
    eb(e, undefined, c[2], a * 4);
    ob(e, a * Ig, a * 38, a * 14.866068747318506);
    eb(e, c[Ch], c[5], a * uj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    eb(e, c[1], c[re], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    eb(e, c[uj], c[ha], a * Ph);
    return d;
  }
  function mu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * te;
    d.width = f;
    d.height = g;
    e.translate(f / Zn, g / 2);
    e.globalAlpha = 0.5;
    ob(e, Cq, Tg, h);
    eb(e, c[tj]);
    e.globalAlpha = 1;
    return d;
  }
  function nu(c, d, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 210;
    var a = c * 205;
    var m = c * 30;
    var h = c * 20;
    var l = c * 200;
    var g = c * 180;
    var n = l / 2;
    var b = g / 2;
    i.width = k;
    i.height = a;
    i.width = c * 419;
    i.height = c * 412;
    if (f == 1) {
      j.save();
      j.translate(c * 10, c * 0);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      j.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      eb(j, undefined, d[_g], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      j.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      eb(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      j.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      eb(j, undefined, d[4], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      j.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      eb(j, jn, d[ea], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      j.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      eb(j, undefined, d[hn], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      j.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      j.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      j.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      j.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      j.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      j.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      eb(j, Gg, d[Ch], ol * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      j.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      j.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      j.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      j.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      eb(j, yq, d[4], Ka * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      j.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      j.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      j.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      j.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      j.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      j.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      eb(j, $r, d[4], c * dt);
      j.restore();
    } else if (f == 2) {
      j.save();
      j.translate(c * 130, c * 35);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      j.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      eb(j, Zi, d[_l], c * Qk);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      j.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      eb(j, on, d[rg], Wb * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      j.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      eb(j, undefined, d[vs], c * Ka);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      eb(j, undefined, d[Aq], Wb * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      eb(j, Gh, d[Aq], co * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      j.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      j.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      j.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      j.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      j.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      eb(j, undefined, d[Db], c * Sg);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      j.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      j.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      j.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      j.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      j.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      eb(j, undefined, d[_l], c * 3);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      j.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      j.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      j.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      j.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      j.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      eb(j, yq, d[4], c * og);
      j.restore();
    }
    j.translate(i.width / 2, i.height / 2);
    if (!f) {
      j.globalAlpha = 0.5;
      tb(j, -n, -b, l, g + h, m);
      eb(j, d[Gr]);
      if (e) {
        j.rotate(Math.PI);
      }
      j.globalAlpha = 1;
      tb(j, -n, -b, l, g, m);
      eb(j, d[1], d[2], 4);
      j.globalAlpha = 1;
      tb(j, c * 35 - n, c * 20 - b, l - c * 50, g - c * 50, m - c * Qa);
      eb(j, d[3]);
    }
    if ($b == f) {
      j.translate(-i.width / 2, -i.height / wr);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      eb(j, d[hn]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      eb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      eb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      eb(j, d[5]);
      j.translate(c * -Vh, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      eb(j, d[5]);
      j.translate(c * 5, c * -55);
      j.translate(c * -Ya, Hb * c);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      eb(j, d[gg]);
    } else if (Ph == f) {
      j.translate(-i.width / wr, -i.height / 2);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 30, c * 167);
      j.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      j.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, ut * c, c * 179);
      j.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      j.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      j.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      j.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      j.closePath();
      eb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 26, c * 145);
      j.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      j.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      j.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      j.closePath();
      eb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 13, c * 193);
      j.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, Ja * c, c * 202);
      j.bezierCurveTo(c * Oh, c * 208, c * 7, c * 202, c * je, c * 193);
      j.closePath();
      eb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 121, c * 190);
      j.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      j.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      j.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      j.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      j.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      j.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      j.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      j.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      j.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      j.closePath();
      eb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 335, c * 196);
      j.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      j.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      j.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      j.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      j.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      j.closePath();
      eb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 349, c * 212);
      j.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      j.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      j.closePath();
      eb(j, d[ug]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 46, c * 165);
      j.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      j.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      j.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      j.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      j.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      j.closePath();
      eb(j, d[4]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 219, c * 144);
      j.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      j.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      j.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      j.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      j.closePath();
      eb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 123, c * 214);
      j.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      j.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      j.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      j.closePath();
      eb(j, d[wt]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 257, c * 199);
      j.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      j.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      j.closePath();
      eb(j, d[Jn]);
      j.translate(c * -xj, c * 55);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 186, c * 123);
      j.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      j.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      j.closePath();
      eb(j, d[Ya]);
      j.translate(c * pr, c * -55);
      j.translate(-wt * c, c * 15);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 171, c * 241);
      j.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      j.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      j.closePath();
      eb(j, d[5]);
      j.beginPath();
      j.lineCap = "round";
      j.lineJoin = "round";
      j.moveTo(c * 367, c * 164);
      j.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      j.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      j.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      j.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      j.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      j.closePath();
      eb(j, d[Yi]);
    }
    return i;
  }
  function ou(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 121;
    e.height = a * 130;
    f.translate(0, a * _r);
    if (c == Oj) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(eh * a, a * 23);
      f.bezierCurveTo(a * 6, a * 46, a * sr, a * 46, a * sq, a * 69);
      f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
      f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
      f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, a * nn);
      f.bezierCurveTo(a * 47, a * 14, a * 47, a * 14, a * 38, a * 25);
      f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * 6, a * 23);
      f.closePath();
      eb(f, yq, b[X], Gq * a);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 6, a * 23);
    f.bezierCurveTo(Kl * a, a * 46, a * eh, a * 46, sr * a, a * 69);
    f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
    f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
    f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, Wb * a);
    f.bezierCurveTo(a * 47, a * 14, a * 47, a * 14, a * 38, a * 25);
    f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * 6, a * 23);
    f.closePath();
    eb(f, b[1], b[2], rg * a);
    if (d == 1) {
      f.translate(vq, a * 5);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      eb(f, Gh, b[_a], a * 10);
      f.translate(Qk, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * 17);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      eb(f, undefined, b[Ih], a * 10);
      f.translate(Jh, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * 8);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      eb(f, undefined, b[0], a * 10);
      if (c == 1) {
        f.translate(-sr * a, -cl * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 67, a * 30);
        f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
        eb(f, Gg, b[3], a * 18);
        f.translate(Wb, a * 0);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 70, a * ue);
        f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
        eb(f, undefined, b[3], a * 18);
        f.translate(3, a * gr);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 76, R * a);
        f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
        eb(f, undefined, b[3], a * 18);
        f.translate(-6, Fj * a);
      } else {
        f.translate(a * -6, a * -sj);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      eb(f, undefined, b[2], fg * a);
      f.translate(Gl, a * qk);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, a * ul);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      eb(f, undefined, b[2], a * 10);
      f.translate(X, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * ta);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      eb(f, yq, b[2], a * 10);
    } else {
      if (c == 1) {
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        eb(f, undefined, b[3], Kn * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        eb(f, yq, b[Qt], a * 18);
      } else {
        f.translate(0, a * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        eb(f, Gk, b[gr], a * 7);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        eb(f, undefined, b[0], y * a);
        f.translate(Gr, Jn * a);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 27);
      f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
      f.closePath();
      eb(f, Zi, b[2], a * 7);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 79, a * 30);
      f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
      f.closePath();
      eb(f, ps, b[2], a * 7);
    }
    return e;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(Cq, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(qn, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, yn * a, a * 120, Yl * a);
    e.bezierCurveTo(a * 106, a * 12, a * 89, Ih * a, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    eb(e, c[1], c[vk], _l * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, Kl * a, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * Jh, a * 54, pa * a, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * Hl, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * Fb, a * 89, a * uh, a * 73, ar * a);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    eb(e, undefined, c[2], a * hn);
    ob(e, a * 18, a * 38, a * 14.866068747318506);
    eb(e, c[Aq], c[5], Yi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    eb(e, c[Ue], c[sh], hn * a);
    e.translate(-$j * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    eb(e, c[hu], c[or], a * 6);
    return d;
  }
  const qu = js;
  function ru(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var k = (o = c * 450) / Pt;
    var m = (p = c * 145) / zk;
    var a = pj * c;
    var n = c * 300;
    var h = c * 30;
    var l = n / 2;
    var g = h / 2;
    if (e) {
      var o = c * 145;
      var p = c * 450;
      f.width = o;
      f.height = p;
      i.rotate(Math.PI / sh);
      i.save();
      i.globalAlpha = 0.5;
      tb(i, c * 100, c * -110, n, h, a);
      eb(i, d[Nl]);
      i.translate(c * 178, c * -98);
      tb(i, -l, -g - c * 6, No * c, c * 100, a);
      eb(i, d[qk]);
      i.translate(c * -50, c * 5);
      tb(i, c * 220, c * -Hh, c * 90, c * 90, a);
      eb(i, d[Cn]);
      i.restore();
      i.save();
      i.globalAlpha = j;
      i.translate(c * 250, c * -63);
      tb(i, -l - _r * c, -g, n, h, a);
      eb(i, d[1], d[Cl], 4);
      i.translate(c * -70, c * -40);
      tb(i, -l - c * 20, -g, c * 100, c * 100, a);
      eb(i, d[Jh], d[Rb], 4);
      i.translate(c * -70, c * nq);
      tb(i, c * 220, c * -22, c * 90, c * 90, a);
      eb(i, d[nn], d[4], 4);
      tb(i, c * 230, c * -12, c * 55, c * 55, a);
      eb(i, d[5]);
      i.translate(c * -70, gr);
      tb(i, c * -15, c * -2, c * 60, c * 60, a);
      eb(i, d[5]);
      i.restore();
    } else {
      f.width = o;
      f.height = p;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(k, m + ct * c);
      tb(i, -l, -g, n, h, a);
      eb(i, d[0]);
      i.translate(c * -65, c * -25);
      tb(i, -l, -g - c * 6, c * 100, c * 100, c * 15);
      eb(i, d[Qs]);
      i.translate(c * -35, c * -5);
      tb(i, c * 220, c * -15, c * 90, c * 90, c * 15);
      eb(i, d[0]);
      i.restore();
      i.save();
      i.globalAlpha = ie;
      i.translate(c * 240, c * 70);
      tb(i, -l, -g, n, h, a);
      eb(i, d[1], d[2], 4);
      i.translate(c * -60, c * -40);
      tb(i, -l - c * hh, -g, c * rj, c * 100, oa * c);
      eb(i, d[3], d[4], 4);
      i.translate(c * -55, c * Fl);
      tb(i, c * 220, c * -22, c * 90, c * 90, c * ci);
      eb(i, d[3], d[4], 4);
      tb(i, c * 240, c * -12, c * 55, c * 55, c * $q);
      eb(i, d[5]);
      i.translate(c * 45, c * 0);
      tb(i, c * -145, c * -2, c * 60, c * 60, c * 12);
      eb(i, d[Ui]);
      i.restore();
    }
    return f;
  }
  const tu = xl;
  function uu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var k = c * 125;
    var a = c * Xb;
    var m = c * Hs;
    var h = c * pr;
    var l = c * 10;
    var g = c * 110;
    var n = l / vk;
    var b = g / Zn;
    f.width = j;
    f.height = k;
    i.save();
    i.globalAlpha = d ? 0.5 : Fh;
    i.translate(j / 2 + le * c, k / 2 + h);
    tb(i, -n, -b, l, g, m);
    eb(i, d ? e[Rl] : e[Ag]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    eb(i, e[ql]);
    i.restore();
    i.translate(j / 2 + 8, k / 2);
    i.globalAlpha = 1;
    tb(i, -n, -b, l, g, m);
    eb(i, e[Sg], e[4], a);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    eb(i, e[wt], e[6], a);
    return f;
  }
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    tb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    eb(e, c[vq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    eb(e, c[vq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    eb(e, c[Qs]);
    ob(e, a * 204, a * 693, a * 36.013886210738214);
    eb(e, c[Cq]);
    ob(e, a * 105, a * 518, a * 30);
    eb(e, c[gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    eb(e, c[Gr]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = ag;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    tb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    eb(e, c[Ue], c[ql], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    eb(e, c[og], c[rg], a * Qg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    eb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    eb(e, c[6], c[uj], a * Pq);
    ob(e, a * 204, a * 693, a * 36.013886210738214);
    eb(e, c[6], c[xt], a * 16);
    ob(e, a * 105, a * 518, a * 30);
    eb(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    eb(e, c[wh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    eb(e, c[M]);
    ob(e, a * 204, a * 693, a * 17.029386365926403);
    eb(e, c[Ck]);
    ob(e, a * 106, a * 518, a * 12);
    eb(e, c[7]);
    return d;
  }
  function wu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.max(b.width, a.width);
    var f = Math.max(b.height, a.height);
    c.width = e;
    c.height = f;
    d.drawImage(a, (e - a.width) / 2, (f - a.height) / 2);
    d.drawImage(b, (e - b.width) / 2, (f - b.height) / Zn);
    return c;
  }
  function xu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = F * a;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    eb(e, c[Gr]);
    ob(e, a * 160.5, a * 243.03125, a * 7);
    eb(e, c[0]);
    ob(e, a * 227.5, a * 242.03125, pa * a);
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    eb(e, c[Qs], c[0], a * 5);
    ob(e, a * 194, a * 298, a * 9);
    eb(e, c[0], c[_a], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -Hs, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    eb(e, c[3], c[Aq], a * Jo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    eb(e, c[Ej], c[zk], a * 5);
    ob(e, a * 160.5, a * 243.03125, a * 7);
    eb(e, c[1], c[Zt], Ya * a);
    ob(e, a * 227.5, a * 242.03125, a * Uk);
    eb(e, c[1], c[ql], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    eb(e, c[jq], c[Ss], a * wb);
    ob(e, a * 194, a * 298, a * 9);
    eb(e, c[1], c[wr], Uk * a);
    return d;
  }
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : Al;
    e.translate(cq * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, lg * a);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * wt);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    eb(e, c[ur]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(vt * a, a * 323, a * 8, a * 323, Cs * a, a * 313);
    e.closePath();
    eb(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    tb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * Uh);
    e.restore();
    eb(e, c[Cq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    eb(e, c[_a]);
    e.globalAlpha = Ok;
    e.translate(a * -Hq, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, Jo * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    eb(e, c[ag], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * Zs);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    eb(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    eb(e, c[4], c[Os], rr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * R, a * 323, a * 9, a * 313);
    e.closePath();
    eb(e, c[rg], c[Jo], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    tb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    eb(e, c[4], c[sj], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    eb(e, c[6]);
    return d;
  }
  const zu = Jg;
  function Au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ja, a * Hq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    eb(e, c[uh]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    tb(e, a * -14, a * -56.5, a * 28, a * 113, R * a);
    e.restore();
    eb(e, c[Ih]);
    ob(e, a * 122, a * 480, a * 18.439088914585774);
    eb(e, c[Qs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    eb(e, c[Fj]);
    e.globalAlpha = Zq;
    e.translate(a * -Mt, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    eb(e, c[Ag], c[lt], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    tb(e, a * -tr, a * -56.5, a * 28, a * 113, a * dg);
    e.restore();
    eb(e, c[xt], c[5], a * 12.5);
    ob(e, a * 122, a * 480, a * 18.439088914585774);
    eb(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    eb(e, c[4], c[gg], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * hl);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    eb(e, c[$b]);
    return d;
  }
  function Bu(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 283;
    e.height = a * 224;
    f.translate(gr, Hb * a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    eb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * ba, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    f.closePath();
    eb(f, c[Nl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    eb(f, c[gr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    eb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    eb(f, c[Qs]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    eb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    eb(f, c[0]);
    f.translate(0, -Dh * a);
    f.globalAlpha = As;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * Nh, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    eb(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    eb(f, undefined, c[sh], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    eb(f, undefined, c[re], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    eb(f, undefined, c[ql], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    eb(f, oh, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    eb(f, ng, c[Ss], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    eb(f, c[1], c[Pt], ih * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(F * a, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    eb(f, undefined, c[Al], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    eb(f, sb, c[Gs], a * Wh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    eb(f, on, c[ie], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    eb(f, ht, c[Al], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    eb(f, undefined, c[As], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    eb(f, Zi, c[Ok], hh * a);
    ob(f, a * 101, a * 155, a * 20.591260281974);
    eb(f, c[co]);
    ob(f, a * 180, a * 155, a * 20.591260281974);
    eb(f, c[Qk]);
    ob(f, a * 95, a * 148, a * 7.211102550927978);
    eb(f, c[Xb]);
    ob(f, a * 173, a * 148, a * 7.211102550927978);
    eb(f, c[4]);
    if ($l === d) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 191, a * 107);
      f.bezierCurveTo(a * 180, a * 104, a * 175, a * 101, a * 180, a * 95);
      f.bezierCurveTo(a * 180, a * 95, a * 181, a * 99, a * 188, a * 103);
      f.bezierCurveTo(a * 191, a * 101, a * 191, a * 95, a * 190, a * 91);
      f.bezierCurveTo(a * 190, a * 91, a * 196, a * 89, a * 195, a * 99);
      f.closePath();
      eb(f, c[vk]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 206, a * 98);
      f.bezierCurveTo(a * 203, a * 95, a * 200, a * 93, a * 198, a * 101);
      f.bezierCurveTo(a * 194, a * 109, a * 193, a * 109, a * 196, a * 110);
      f.bezierCurveTo(a * 206, a * 115, a * 209, a * 114, a * 211, a * 111);
      f.bezierCurveTo(a * 211, a * 106, a * 208, a * 108, a * 203, a * 108);
      f.bezierCurveTo(a * 193, a * 107, a * 204, a * 101, a * 206, a * 99);
      f.closePath();
      eb(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 172, a * 111);
      f.bezierCurveTo(a * 172, a * 106, a * 174, a * 105, a * 185, a * 109);
      f.bezierCurveTo(a * 190, a * 109, a * 189, a * 114, a * 185, a * 120);
      f.bezierCurveTo(a * 181, a * 125, a * 180, a * 126, a * 176, a * 122);
      f.bezierCurveTo(a * 182, a * 119, a * 187, a * 110, a * 182, a * 112);
      f.closePath();
      eb(f, c[Pt]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 202, a * 125);
      f.bezierCurveTo(a * 197, a * 117, a * 193, a * 116, a * 193, a * 120);
      f.bezierCurveTo(a * 192.5, a * 124.5, a * 192.5, a * 124.5, a * 192, a * 129);
      f.bezierCurveTo(a * 188, a * 129, a * 187, a * 124, a * 189, a * 120);
      f.bezierCurveTo(a * 191, a * 110, a * 192, a * 110, a * 200, a * 116);
      f.bezierCurveTo(a * 208, a * 120, a * 207, a * 123, a * 202, a * 125);
      f.closePath();
      eb(f, c[2]);
    }
    return e;
  }
  function Cu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    eb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    eb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    eb(d, pl, b[qk], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    eb(d, undefined, b[Rl], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    eb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    eb(d, Hj, b[Rl], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    eb(d, b[ne]);
    return c;
  }
  const Du = Fi;
  function Eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(Fj, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, ot * a, a * 42, a * w, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    eb(e, c[uh]);
    e.globalAlpha = 1;
    e.translate(Nl, -nq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * w, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, Pq * a, a * 44);
    e.closePath();
    eb(e, c[jq], c[2], ls * a);
    return d;
  }
  function Fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * fs, a * 30);
    e.translate(a * 5, fg * a);
    e.globalAlpha = b ? 0.5 : Eo;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = ie;
    e.translate(-Ya * a, -Va * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    eb(e, c[_b], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    eb(e, c[$b]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    eb(e, qr, c[rg], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, Hs * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = Zq;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * eg, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    eb(e, c[Ht], c[2], Ye * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    eb(e, c[Kj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    eb(e, c[Pt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    eb(e, yq, c[4], a * 4);
    e.translate(a * Hl, a * -80);
    e.translate(gg * a, a * 10);
    e.globalAlpha = b ? 0.5 : Ue;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * Hb, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    eb(e, c[Nl]);
    e.globalAlpha = As;
    e.translate(a * -5, a * -Va);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(Zl * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    eb(e, c[1], c[2], a * no);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    eb(e, undefined, c[4], ea * a);
    return d;
  }
  function Hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : Ag;
    e.translate(Hq * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    eb(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    tb(e, a * -15.5, a * -63, a * 31, a * 126, xk * a);
    e.restore();
    eb(e, c[0]);
    ob(e, a * 121, a * 480, a * 20.396078054371138);
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * rj, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-yn * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    eb(e, c[zs], c[Pt], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    tb(e, a * -15.5, a * -63, a * 31, a * 126, a * no);
    e.restore();
    eb(e, c[4], c[Jn], a * 12.5);
    ob(e, a * 121, a * 480, a * 20.396078054371138);
    eb(e, c[ch], c[pr], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * Ms, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    eb(e, c[1], c[Zn], a * 12.5);
    return d;
  }
  function Iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * Ea, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * Hb, a * 83, Dl * a, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    eb(e, c[tj]);
    e.globalAlpha = jq;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, fa * a, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    eb(e, c[1], c[Ss], a * 10);
    return d;
  }
  const Ku = cl;
  function Lu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var i = b * 230;
    var a = b * 100;
    var j = a / 4;
    var h = b * 20;
    e.width = g;
    e.height = i;
    f.translate(g / 2, i / 2 + h);
    f.globalAlpha = 0.5;
    hb(f, 7, a, j);
    eb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(Tg, -h);
    hb(f, y, a, j);
    eb(f, d[Gs]);
    hb(f, sq, a * 0.65, j * 0.65);
    eb(f, d[tg]);
    return e;
  }
  function Mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : Ue;
    e.translate(Nl, a * ia);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(Gq * a, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, Ql * a, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = jq;
    e.translate(Tg, -ih * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * ig, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * qs, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    eb(e, c[aa], c[Xr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, zl * a, a * 76, a * 23, a * 62);
    e.closePath();
    eb(e, c[mt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, Hl * a);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    eb(e, c[co]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    eb(e, c[$b]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    eb(e, c[Qt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    eb(e, c[xs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(P * a, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    eb(e, c[co]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    eb(e, c[Cq]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, vh * a, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    eb(e, c[4], c[sj], Rb * a);
    ob(e, a * 107, a * 152, a * 9);
    eb(e, c[6]);
    ob(e, a * 105, a * 173, a * Ca);
    eb(e, c[sg]);
    ob(e, a * 87, a * 161, a * tl);
    eb(e, c[Gt]);
    ob(e, a * 106, a * 147, a * 4);
    eb(e, c[Oq]);
    ob(e, a * 104, a * 167, a * 4);
    eb(e, c[7]);
    ob(e, a * 86, a * 154, a * ch);
    eb(e, c[$j]);
    return d;
  }
  function Nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * k);
    e.translate(a * -20, a * -Wh);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    tb(e, a * -14, a * -61, a * 28, a * 122, ih * a);
    e.restore();
    eb(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    eb(e, c[Ih]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    eb(e, c[Nl]);
    e.globalAlpha = 1;
    e.translate(-_r * a, -dh * a);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    tb(e, a * -14, a * -61, a * 28, a * 122, Ho * a);
    e.restore();
    eb(e, c[xt], c[cl], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Tk * a, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    eb(e, c[1], c[Zn], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    eb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    eb(e, c[1], c[Zn], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    eb(e, c[3]);
    return d;
  }
  function Ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(Rl, a * 10);
    ob(e, a * 42, a * 43, a * 24.758836806279895);
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    eb(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, ut * a, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    eb(e, c[gr]);
    e.translate(0, a * -10);
    ob(e, a * 42, a * 43, a * 24.758836806279895);
    eb(e, c[Ej], c[2], Ui * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    eb(e, c[Eo], c[Zn], a * gg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    eb(e, c[Ue], c[Ss], ha * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * yn, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * bn, a * 48, a * 16, a * 52, w * a);
    e.closePath();
    eb(e, c[Wb], c[rg], gg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    eb(e, c[ol], c[4], Jo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    eb(e, c[Z], c[Rb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ig, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(zu * a, a * 39, fq * a, a * 38, a * 18, a * 37);
    e.closePath();
    eb(e, c[co], c[Rb], a * cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    eb(e, c[co], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    eb(e, c[Qk], c[ea], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    eb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    eb(e, c[Sg], c[uj], xj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    eb(e, c[3], c[Ch], a * gh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * k, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, zl * a, a * 53);
    e.closePath();
    eb(e, c[3], c[4], Ku * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    eb(e, c[ol], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    eb(e, c[Ka], c[ch], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    eb(e, c[X], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    eb(e, c[3], c[4], a * Ku);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    eb(e, c[ar], c[4], Vh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    eb(e, c[3], c[vs], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    eb(e, c[3], c[_l], gg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    eb(e, c[xh], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    eb(e, c[7], c[8], a * Vh);
    return d;
  }
  function Pu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var i = b * 150;
    var a = b * 60;
    var j = a / _g;
    var h = b * oa;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / sh + Rl * b, i / 2 + Gr * b + h);
    f.rotate(Math.PI / mt);
    f.globalAlpha = 0.5;
    hb(f, nb, a, j);
    eb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / Zt - Ns * b, i / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    hb(f, dg, a, j);
    eb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 9, i / re - b * 12);
    f.rotate(Math.PI / 2.8);
    hb(f, Ui, a * 0.5, j * 0.4);
    eb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 + b * Yj, i / tg + b * 5);
    f.rotate(Math.PI / Ej);
    hb(f, 5, a * 0.5, j * 0.4);
    eb(f, d[re]);
    f.restore();
    f.save();
    f.translate(g / wr - b * Dn, i / sh + b * 20);
    f.rotate(Math.PI / 2.25);
    hb(f, 5, a * 0.5, j * 0.4);
    eb(f, d[2]);
    f.restore();
    return e;
  }
  function Qu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 180;
    var i = b * 210;
    var a = (h = b * 60) / Rb;
    var j = b * 20;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / 2 - b * 0, i / re - b * 35 + j);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    hb(f, 5, h, a);
    eb(f, d[Gr]);
    f.restore();
    f.save();
    f.translate(g / Zn + b * 10, i / 2 + b * 15 + j);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(Gr * b, -Hl * b);
    hb(f, sj, h, a);
    eb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / zk - b * 50, i / 2 + b * 40 + j);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(rl, b * -20);
    hb(f, 5, h, a);
    eb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 0, i / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = zs;
    f.translate(b * rl, b * -20);
    hb(f, sj, h, a);
    eb(f, d[Al]);
    f.restore();
    f.save();
    f.translate(g / lt + b * 10, i / Cl + b * Hh);
    f.rotate(Math.PI / 2);
    f.globalAlpha = $l;
    f.translate(gr, b * -20);
    hb(f, pr, h, a);
    eb(f, d[_b]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / 2 + b * 40);
    f.rotate(Math.PI / co);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    hb(f, jt, h, a);
    eb(f, d[aa]);
    f.restore();
    var h;
    a = (h = b * 30) / Cg;
    f.save();
    f.translate(g / Zt + xh * b, i / Zn - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = jq;
    f.translate(ur, b * -20);
    hb(f, 5, h, a);
    eb(f, d[Xh]);
    f.restore();
    f.save();
    f.translate(g / vk + ms * b, i / 2 + b * ae);
    f.rotate(Math.PI / re);
    f.globalAlpha = 1;
    f.translate(Ih, b * -20);
    hb(f, xj, h, a);
    eb(f, d[vk]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 45, i / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = Ok;
    f.translate(uh, b * -Hl);
    hb(f, 5, h, a);
    eb(f, d[2]);
    f.restore();
    ob(f, g / Xh - b * 7, i / 2 + b * jl, gg);
    eb(f, d[2]);
    return e;
  }
  function Ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    eb(e, c[Qs], c[1], a * ys);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    eb(e, c[_a], c[j], dg * a);
    ob(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    eb(e, c[2]);
    ob(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    eb(e, c[2]);
    ob(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    eb(e, c[vk]);
    ob(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    eb(e, c[2]);
    ob(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    eb(e, c[2]);
    ob(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    eb(e, c[mt], c[ch], a * uj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    eb(e, c[3], c[hn], hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    eb(e, c[3], c[4], a * Ph);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    eb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    eb(e, c[co], c[_l], a * uj);
    return d;
  }
  function Su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    eb(e, c[1], c[2], a * Cg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    eb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, Jk * a, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    eb(e, c[uj], c[Qb], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    eb(e, c[ch], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    eb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    eb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    eb(e, c[rr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    eb(e, c[jl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    eb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    eb(e, c[ta]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * W, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    eb(e, c[Ma], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    eb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    eb(e, c[ls]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    eb(e, c[Bg], c[xk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    eb(e, c[hg], c[Et], a * rg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    eb(e, c[11], c[$h], a * ch);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    eb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    eb(e, c[Ho]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    eb(e, c[So], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    eb(e, c[D], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    eb(e, c[Et], c[11], a * Yi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    eb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    eb(e, ht, c[3], Db * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    eb(e, undefined, c[Jh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    eb(e, Hj, c[Gt], a * Db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    eb(e, yq, c[eh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    eb(e, undefined, c[3], a * 4);
    return d;
  }
  function Tu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 220;
    var j = b * 100;
    var h = j / ch;
    f.width = i;
    f.height = a;
    g.translate(i / 2, a / 2);
    g.globalAlpha = c ? 0.5 : Zq;
    if (!c) {
      g.translate(b * 0, -Kg * b);
    }
    hb(g, th, j, h);
    eb(g, c ? d[tj] : d[ie]);
    g.globalAlpha = Oj;
    if (qk == e) {
      hb(g, 6, j * 0.65, h * 0.65);
      eb(g, d[2]);
    } else if (aa == e) {
      g.translate(b * zl, b * 20);
      hb(g, 6, j * 0.45, h * 0.4);
      eb(g, d[vk]);
    }
    return f;
  }
  function Uu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var i = b * 150;
    var a = b * 10;
    var k = b * Aq;
    e.width = g;
    e.height = i;
    f.translate(b * -50, b * -38 + a);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    eb(f, d[0]);
    f.translate(0, Cq - a);
    f.globalAlpha = j;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    eb(f, d[aa], d[Ss], k);
    return e;
  }
  function Vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : Zq;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    eb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    tb(e, a * -ib, a * -53, a * 28, a * 106, ct * a);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    hb(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    eb(e, c[Nl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    eb(e, c[uh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    eb(e, c[qn]);
    e.globalAlpha = 1;
    e.translate(a * -20, -Hl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    eb(e, c[ie], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    tb(e, -Xt * a, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    eb(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    hb(e, 4, a * 26.476404589747453, a * Qa);
    e.restore();
    eb(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    eb(e, c[$l], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    eb(e, c[$b]);
    return d;
  }
  function Wu(f, e, i, j, k, m, n, a, o, h, l) {
    if (Gg === l) {
      l = ne;
    }
    var p = document.createElement("canvas");
    var q = p.getContext("2d");
    m = m ? f * m : 0;
    var b = Math.floor(f * i);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    a *= f;
    var t = n ? a * 2 : Nl;
    if (o) {
      var d = Math.min(q.measureText(e).width + f * 2 + t, o);
    } else {
      d = q.measureText(e).width + f * lt + t + l * f * 2;
    }
    b = f * (b + m + l) + t;
    p.width = d;
    p.height = b;
    if (n) {
      q.fillStyle = n;
      tb(q, ms, _a, d, b, re * a);
      q.fill();
      q.translate(a, a);
    }
    q.textBaseline = "middle";
    q.font = i + "px Baloo Paaji";
    q.lineJoin = "round";
    if (k) {
      q.beginPath();
      q.fillStyle = k;
      q.fillText(e, 0, b / 2 + m - t / 2, d);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = l;
      q.strokeText(e, l, (b - t) / ql, d);
    }
    q.fillStyle = j;
    q.fillText(e, l, (b - t) / 2, d);
    return p;
  }
  function Xu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var i = b * 90;
    var a = b * 4;
    var j = b * Os;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, rj * b, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    eb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * Wl, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    eb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, ut * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    eb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * Ka, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    eb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    eb(f, d[Tg], d[1], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = Gs;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    eb(f, d[uh], d[1], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * F, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    eb(f, d[Fj], d[1], a);
    f.restore();
    f.save();
    f.translate(b * mt, b * -93);
    f.rotate(Math.PI / Vh);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, No * b, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    eb(f, d[gr], d[Al], a);
    f.restore();
    return e;
  }
  const ed = cl;
  function id(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, ci);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * ua, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, Zs * a, a * 50, a * 9, a * 48, wh * a);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * ue, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * Cg, a * 87);
    eb(d, undefined, b[0], Ye * a);
    d.translate(0, -pj);
    d.globalAlpha = Ue;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    eb(d, b[1], b[tg], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * zr, a * 70);
    d.bezierCurveTo(a * Ig, a * 77, a * 10, a * 83, _l * a, a * 87);
    eb(d, undefined, b[re], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Ua, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * Th);
    eb(d, ps, b[Xr], a * 8);
    return c;
  }
  function Zu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * Iq;
    var i = b * rk;
    e.width = g;
    e.height = i;
    var a = b * 9;
    var j = b * 9;
    var k = b * 8;
    f.save();
    f.translate(a, j);
    f.globalAlpha = 1;
    ob(f, Qs, 0, k);
    eb(f, d[ne]);
    k = b * 3;
    a = Qs;
    j = -Ka * b;
    f.translate(a, j);
    f.globalAlpha = Zq;
    ob(f, 0, Tg, k);
    eb(f, d[Eo]);
    f.restore();
    return e;
  }
  function nd(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var i = g.getContext("2d");
    if (e == Qs) {
      var a = b * 270;
      var j = b * 250;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 140, b * Qt);
      i.translate(b * -25, b * -20);
      i.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      i.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      i.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      i.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      i.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      i.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      i.closePath();
      eb(i, d[0]);
    } else if (Ok == e) {
      a = b * 430;
      j = b * 350;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 180, b * xj);
      i.translate(b * -30, b * -60);
      i.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      i.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      i.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      i.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      i.bezierCurveTo($q * b, b * 192, b * 107, b * 75, b * 178, b * 69);
      i.closePath();
      eb(i, d[Rl]);
    } else if (e == 2) {
      a = b * 400;
      j = b * 300;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 80, b * 52);
      i.translate(b * -40, b * -30);
      i.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      i.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      i.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      i.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      i.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      i.closePath();
      eb(i, d[0]);
    }
    return g;
  }
  function od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, Ya * a);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    tb(e, a * -40, a * -28.5, a * 80, a * 57, a * Ye);
    e.restore();
    eb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    eb(e, c[0], c[0], Pl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    eb(e, c[_a], c[Tg], sr * a);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    tb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    eb(e, c[0], c[Cq], a * hu);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    tb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    eb(e, c[0], c[ms], a * eh);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    tb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    eb(e, c[ne], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    tb(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    eb(e, c[0], c[0], Gt * a);
    ob(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    eb(e, c[0], c[ur], a * 6);
    e.globalAlpha = 1;
    e.translate(-wt * a, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    eb(e, c[Kj], c[Yi], Vi * a);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    tb(e, a * -40, a * -28.5, a * 80, a * 57, Qa * a);
    e.restore();
    eb(e, c[1], c[2], xt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    eb(e, c[1], c[2], a * sr);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    tb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    eb(e, c[Ya], c[4], Gt * a);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    tb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    eb(e, c[ol], c[uj], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    tb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    eb(e, c[Gt], c[ug], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    tb(e, a * -F, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    eb(e, c[jg], c[Dn], a * eh);
    e.globalCompositeOperation = p[vb];
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    tb(e, -Kq * a, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    eb(e, c[7], c[8], a * $a);
    e.globalAlpha = $l;
    e.save();
    ob(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    eb(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function rd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var i = Pt * (c * b);
    var a = g / 2;
    var j = i / Zn;
    e.width = g;
    e.height = i;
    f.translate(a, j);
    ob(f, Nl, Gr, c * b);
    eb(f, d);
    return e;
  }
  function id(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(m * a, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    eb(d, b[uh], b[0], a * vs);
    return c;
  }
  const ad = Mg;
  function sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : aa;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    eb(e, c[5], c[pr], vk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    eb(e, c[5], c[Os], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    eb(e, c[_g], c[Ph], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    eb(e, c[4], c[4], a * tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    eb(e, c[Db], c[Rb], a * tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    eb(e, c[gl], c[4], ql * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    eb(e, c[xt], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(el * a, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    eb(e, c[Rb], c[_g], Zt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    eb(e, ps, c[Cg], a * Vi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    eb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    eb(e, c[4], c[4], Cl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    eb(e, c[vs], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    eb(e, undefined, c[Aq], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    eb(e, undefined, c[ch], a * Zh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    eb(e, c[Db], c[Rb], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    eb(e, undefined, c[rg], hu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(mn * a, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    eb(e, undefined, c[4], a * Gt);
    e.globalAlpha = 0.5;
    e.scale(1, As);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    eb(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    eb(e, c[uh], c[j], Ss * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    eb(e, c[rl], c[jq], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    eb(e, c[Cn], c[ag], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    eb(e, c[0], c[1], zk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    eb(e, c[tj], c[1], Tt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    eb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * rh, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    eb(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    eb(e, c[wr], c[lt], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, Kt * a, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * Xg, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    eb(e, jn, c[3], Vi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    eb(e, c[Cq], c[Gs], a * Pt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    eb(e, c[qk], c[Al], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    eb(e, c[Rl], c[Ok], Tt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    eb(e, undefined, c[1], zk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    eb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    eb(e, c[0], c[0], a * re);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    eb(e, sb, c[1], a * ql);
    return d;
  }
  const hd = le;
  const ld = lt;
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : ie;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    eb(e, c[ur], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    eb(e, c[Cq], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    eb(e, c[tj], c[qk], Jg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    eb(e, c[qn], c[Gr], a * 12);
    e.globalAlpha = ie;
    e.translate(a * -10, a * -Ku);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    eb(e, c[Oj], c[Xr], Il * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    eb(e, c[og]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    eb(e, c[rg]);
    ob(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    eb(e, c[5]);
    ob(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    eb(e, c[hu]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    eb(e, c[ll], c[8], gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    eb(e, c[y], c[ss], Is * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    eb(e, c[ll], c[ls], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    eb(e, undefined, c[tl], wg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    eb(e, $r, c[Dk], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    eb(e, undefined, c[9], a * eh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    eb(e, ng, c[tl], hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    eb(e, undefined, c[lh], Z * a);
    return d;
  }
  function ud(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var i = b * 142;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * qq);
    f.globalAlpha = c ? 0.5 : _b;
    ob(f, 0, Cn, b * 60);
    eb(f, d[0]);
    f.translate(tj, -ll * b);
    f.globalAlpha = Eo;
    ob(f, Qs, Fj, b * 60);
    eb(f, d[_b], d[2], b * 4);
    ob(f, 0, gr, b * 40);
    eb(f, d[$b]);
    ob(f, 0, 0, b * 25);
    eb(f, d[4], d[Qb], b * 8);
    return e;
  }
  function bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : Ue;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    hb(e, Bt, a * 60, a * Ho);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    hb(e, 9, a * 60, ia * a);
    eb(e, c[As], c[2], ug);
    e.rotate(-0.32);
    hb(e, 9, a * 38, a * 10);
    eb(e, c[ar], c[4], Ph);
    e.rotate(0.68);
    hb(e, 9, a * cq, a * 8);
    eb(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * Qb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    eb(e, c[rl], c[0], a * ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    eb(e, c[ms], c[Nl], a * Uh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    eb(e, c[Qs], c[Cq], ia * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    eb(e, c[0], c[Cq], a * 10);
    e.globalAlpha = Eo;
    e.translate(-Qa * a, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    eb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    eb(e, c[Gs], c[Xr], fg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    eb(e, c[ag], c[ld], pj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    eb(e, c[jq], c[2], a * Fl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    eb(e, c[ie], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    eb(e, c[jq], c[Cl], a * Th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    eb(e, c[ie], c[Tt], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    eb(e, c[1], c[Tt], a * y);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    eb(e, c[1], c[2], a * 7);
    return d;
  }
  function dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    eb(e, c[Ej], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    eb(e, oh, c[lt], a * yo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    eb(e, undefined, c[2], ua * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    eb(e, c[3], c[uj], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    eb(e, c[5], c[6], a * 12);
    ob(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    eb(e, c[ll]);
    ob(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    eb(e, c[8]);
    return d;
  }
  const cd = ha;
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Eo;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    hb(e, 6, a * 146, a * 30);
    e.restore();
    eb(e, c[Cq]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    hb(e, Vi, a * 146, a * 30);
    e.restore();
    eb(e, c[Oj], c[Ss], qh * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    hb(e, 6, a * 105, a * 30);
    e.restore();
    eb(e, c[X], c[Gl], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    hb(e, 6, a * 66, a * 30);
    e.restore();
    eb(e, c[4], c[Tt], a * nb);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Fj);
    hb(e, Vi, a * 31, a * 30);
    e.restore();
    eb(e, c[gg], c[Pl], a * ls);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    eb(e, undefined, c[zk], ss * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, hl * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    eb(e, qj, c[Tt], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    eb(e, undefined, c[tg], tu * a);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : Ag;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    hb(e, 8, a * 60, a * 10);
    eb(e, c[qn]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    hb(e, 8, a * 60, a * 10);
    eb(e, c[Oj], c[Tt], _l);
    e.rotate(0.56);
    hb(e, 8, a * 40, ia * a);
    eb(e, c[mt], c[Yi], 4);
    e.rotate(0.28);
    hb(e, 8, a * 28, a * 8);
    eb(e, c[5]);
    e.restore();
    return d;
  }
  function Cd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(is * a, a * oj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    eb(d, b[0]);
    d.globalAlpha = Oj;
    d.translate(a * -Hb, -eg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    eb(d, b[1], b[ld], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    eb(d, b[3], b[co], a * ql);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    eb(d, b[og], b[3], Pt * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    eb(d, b[3], b[Sg], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    eb(d, b[Z], b[3], Zt * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    eb(d, b[Wb], b[3], a * Cl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    eb(d, b[Z], b[co], a * vk);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    eb(d, ps, b[2], a * 4);
    return c;
  }
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : _b;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    hb(e, 7, a * 60, a * 10);
    e.restore();
    eb(e, c[qk]);
    e.globalAlpha = As;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    hb(e, $j, a * 60, a * 10);
    eb(e, c[1], c[re], 4);
    e.rotate(0.64);
    hb(e, 7, a * 40, a * 10);
    eb(e, c[3], c[4], Aq);
    e.rotate(0.12);
    hb(e, 7, a * 23, a * 5);
    e.restore();
    eb(e, c[5]);
    return d;
  }
  function fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * y);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, Ku * a);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * le);
    e.closePath();
    eb(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    eb(e, c[re], c[Qt], a * 1);
    return d;
  }
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(Tg, a * ch);
    if (rt === 0) {
      e.globalAlpha = b ? 0.5 : As;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      hb(e, le, a * 41, ia * a);
      eb(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(Ag);
    hb(e, 8, a * 41, Ln * a);
    eb(e, c[zs], c[2], a * 4);
    e.rotate(0.56);
    hb(e, 8, a * 33, Hs * a);
    eb(e, c[nn], c[4], a * 4);
    e.rotate(0.28);
    hb(e, R, a * 24, a * 8);
    eb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    tb(e, a * -Bg, a * -25.5, Pg * a, a * 51, a * 30);
    e.restore();
    eb(e, c[4], c[Ph], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(qk);
    tb(e, a * -26, -Cs * a, a * 52, a * 18, a * 30);
    e.restore();
    eb(e, c[uj], c[Rb], a * 2);
    ob(e, a * 45, a * 29, a * 7);
    eb(e, c[5]);
    ob(e, a * 45, a * 61, Uk * a);
    eb(e, c[5]);
    ob(e, a * 28, a * 45, a * 7);
    eb(e, c[sj]);
    ob(e, a * 62, a * 45, a * jl);
    eb(e, c[wt]);
    return d;
  }
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (rt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      hb(e, Bg, a * 41, a * 10);
      e.restore();
      eb(e, c[Fj]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    hb(e, vr, a * 41, a * 10);
    eb(e, c[1], c[2], ug * a);
    e.rotate(-0.32);
    hb(e, tl, a * 32, bb * a);
    eb(e, c[Kj], c[Xb], a * 4);
    e.rotate(0.68);
    hb(e, 9, a * 23, a * 8);
    eb(e, c[pr], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(Cq);
    tb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    eb(e, c[4], c[rg], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    tb(e, a * -26, a * -So, a * 52, a * 18, a * 30);
    e.restore();
    eb(e, c[4], c[uj], zk * a);
    ob(e, a * 45, a * 29, a * 7);
    eb(e, c[cd]);
    ob(e, a * 45, a * 61, a * 7);
    eb(e, c[5]);
    ob(e, a * 28, a * 45, a * 7);
    eb(e, c[ed]);
    ob(e, a * 62, a * 45, a * 7);
    eb(e, c[cd]);
    return d;
  }
  function wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    eb(e, c[qn], c[Ue], a * th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    eb(e, c[ms], c[1], a * wb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    eb(e, c[Fj], c[zs], a * It);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, fh * a, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    eb(e, c[2], c[3], a * 7);
    return d;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Al;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    hb(e, 6, a * 146, a * 30);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = ag;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    hb(e, $a, a * 146, a * 30);
    e.restore();
    eb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    hb(e, sq, a * 105, a * 30);
    e.restore();
    eb(e, c[Gl], c[3], a * R);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(Gr);
    hb(e, gq, a * 66, a * 30);
    e.restore();
    eb(e, c[4], c[vk], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    hb(e, It, a * nh, a * dg);
    e.restore();
    eb(e, c[$a]);
    e.save();
    e.translate(a * 163, a * 168);
    hb(e, 7, a * 25, a * Dn);
    e.restore();
    eb(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    hb(e, 7, a * Uj, qh * a);
    e.restore();
    eb(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    hb(e, 7, yo * a, a * 8);
    e.restore();
    eb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    eb(e, ps, c[Xh], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, Nh * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    eb(e, ng, c[zk], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * vh);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    eb(e, Gk, c[2], a * ys);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (rt === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      hb(e, 7, a * 41, a * 10);
      e.restore();
      eb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    hb(e, Ck, a * 41, a * ae);
    eb(e, c[ie], c[2], a * 4);
    hb(e, 7, a * 35, a * 10);
    eb(e, c[dt], c[gl], Rb * a);
    hb(e, 7, a * 23, a * 5);
    e.restore();
    eb(e, c[cl]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(gr);
    tb(e, a * -Ma, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    eb(e, c[rg], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    tb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    eb(e, c[4], c[Yi], a * 2);
    ob(e, a * 45, a * 29, a * Oq);
    eb(e, c[5]);
    ob(e, a * 45, a * 61, a * 7);
    eb(e, c[Ku]);
    ob(e, a * 28, a * 45, a * or);
    eb(e, c[5]);
    ob(e, a * 62, a * 45, Ck * a);
    eb(e, c[jt]);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, gg * a);
    if (rt === uh) {
      e.globalAlpha = b ? 0.5 : 1;
      ob(e, a * 44, a * 55, a * 41);
      eb(e, c[uh]);
    }
    e.globalAlpha = zs;
    ob(e, a * 44, a * 45, a * 41);
    eb(e, c[$l], c[ql], a * 4);
    ob(e, a * 44, a * 45, a * 31);
    eb(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    tb(e, -_j * a, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    eb(e, c[4], c[4], wr * a);
    e.save();
    e.translate(a * 45, a * 45);
    tb(e, a * -26, -Dk * a, a * 52, a * 18, a * 30);
    e.restore();
    eb(e, c[4], c[Aq], Cl * a);
    ob(e, a * 45, a * 29, a * 7);
    eb(e, c[5]);
    ob(e, a * 45, a * 61, a * 7);
    eb(e, c[Qb]);
    ob(e, a * 28, a * 45, pa * a);
    eb(e, c[Jo]);
    ob(e, a * 62, a * 45, a * 7);
    eb(e, c[5]);
    return d;
  }
  const xd = $a;
  function Jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    tb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 170, a * Vn);
    tb(e, a * -86.5, a * -86, a * 35, a * 150, a * k);
    e.restore();
    eb(e, c[rl]);
    return d;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : Eo;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    eb(e, c[Nl]);
    e.translate(a * -Hl, a * -Mt);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    eb(e, c[$l], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, nq * a);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    eb(e, undefined, c[2], a * nk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    eb(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    eb(e, undefined, c[5], a * hd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    eb(e, qr, c[5], a * 8);
    return d;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * Ws, a * 20);
    e.globalAlpha = b ? 0.5 : aa;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    tb(e, a * -11.5, a * -226, a * 23, a * 452, xk * a);
    e.restore();
    eb(e, c[Cq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    eb(e, c[Gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    eb(e, c[Cn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    eb(e, c[0]);
    e.translate(a * -hh, a * -20);
    e.globalAlpha = ie;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(Qs);
    tb(e, a * -11.5, a * -226, a * 23, a * 452, ae * a);
    e.restore();
    eb(e, c[ag], c[tg], a * ta);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    eb(e, c[X], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    eb(e, c[Sg], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    eb(e, c[Os]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    eb(e, c[Vi], c[Qr], dg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    eb(e, c[dg]);
    return d;
  }
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(dh * a, a * k);
    e.globalAlpha = b ? 0.5 : Gs;
    e.save();
    e.translate(a * 54, a * 389.5);
    tb(e, -dl * a, a * -228.5, a * 30, a * 457, fg * a);
    e.restore();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    eb(e, c[Cn]);
    e.translate(-Ja * a, a * -yn);
    e.globalAlpha = Fh;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    tb(e, -oa * a, a * -228.5, a * 30, a * 457, Qa * a);
    e.restore();
    eb(e, c[1], c[2], a * ls);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    eb(e, c[3], c[Db], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    eb(e, c[3], c[ug], Eq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    eb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    eb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    eb(e, c[ta]);
    return d;
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, _b);
    e.translate(a * -110, rl);
    e.translate(ct * a, a * 10);
    e.globalAlpha = b ? 0.5 : Fh;
    e.save();
    e.translate(a * 51.5, a * 342);
    tb(e, a * -14.5, a * -225, a * 29, a * 450, a * xq);
    e.restore();
    eb(e, c[Gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, M * a);
    e.bezierCurveTo(a * 34, ih * a, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, jk * a, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * Ih, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    eb(e, c[ms]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    eb(e, c[rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, Rr * a, a * 117, a * hg, a * 110);
    e.bezierCurveTo($i * a, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    eb(e, c[Ih]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    eb(e, c[gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    eb(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    eb(e, c[0]);
    e.translate(a * -ae, a * -ia);
    e.globalAlpha = $l;
    e.save();
    e.translate(a * 51.5, a * 342);
    tb(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    eb(e, c[1], c[Ss], a * sj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    eb(e, c[Gl], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * wh);
    e.bezierCurveTo(a * 34, a * Ln, a * wh, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, Ds * a, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    eb(e, c[Ya], c[$a], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    eb(e, c[7], c[vt], a * wg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    eb(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    eb(e, undefined, c[le], a * Pl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    eb(e, c[3], c[4], sr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * In, a * 164, rr * a, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    eb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, de * a, a * 117, Eb * a, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    eb(e, c[nl], c[ss], a * Vi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    eb(e, c[wb], c[ph], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    eb(e, c[wb], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    eb(e, c[jg], c[8], M * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    eb(e, c[qq], c[dg], a * wg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    eb(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    eb(e, c[Qk], c[4], a * 6);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(ne, wt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, Dk * a, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    eb(e, c[Gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * ls, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(Tg * a, a * 105.640625, a * ls, a * 83.640625, a * El, a * 84.640625);
    e.closePath();
    eb(e, c[Fj]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * hd, a * 73.640625);
    e.closePath();
    eb(e, c[Oj], c[sh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    eb(e, c[mt], c[re], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    eb(e, jn, c[ld], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(Ms * a, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    eb(e, ps, c[ld], vs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * Bt, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * M, a * 69.640625, a * ci, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    eb(e, c[xs], c[Yi], a * hn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(Qs * a, a * 105.640625, a * nk, a * 83.640625, a * Yt, a * 84.640625);
    e.closePath();
    eb(e, c[3], c[4], a * Eg);
    return d;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(_a, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, Co * a);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    eb(e, c[Ht], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    eb(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    eb(e, c[Qk], c[wr], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    eb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    eb(e, c[Ph], c[ql], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    eb(e, c[_g], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    eb(e, c[3], c[Zt], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    eb(e, c[3], c[2], a * 10);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, Tn * a);
    e.bezierCurveTo(a * 51, ms * a, a * 36, a * tt, a * 34, a * w);
    e.bezierCurveTo(a * nb, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    eb(e, c[tg], c[xs], vs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    eb(e, c[Qs], c[Ej], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * wl, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, Ln * a, a * 35, a * 20, a * 32);
    e.closePath();
    eb(e, c[0], c[1], _l);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, de * a, a * 54);
    e.closePath();
    eb(e, c[0], c[Zq], gl);
    return d;
  }
  function _d(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var i = b * 172;
    var a = g / 2;
    var j = i / sh;
    e.width = g;
    e.height = i;
    f.translate(a, j + jl * b);
    f.globalAlpha = c ? 0.5 : qk;
    ob(f, 0, Nl, b * 60);
    eb(f, d[_a]);
    f.globalAlpha = aa;
    f.translate(0, b * -qq);
    f.save();
    for (var h = ms; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, _a);
      hb(f, 3, b * 20, b * 4);
      eb(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    ob(f, 0, Ih, b * 60);
    eb(f, d[3], d[uj], b * 4);
    ob(f, uh, ne, b * 40);
    eb(f, d[5]);
    ob(f, _a, 0, b * 25);
    eb(f, d[6], d[th], b * ss);
    return e;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    tb(e, a * -78, a * -54.5, a * 156, a * 109, Hq * a);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    tb(e, a * -78, a * -54.5, a * 156, a * 109, Pj * a);
    e.restore();
    eb(e, c[1], c[re], 4);
    e.save();
    e.translate(a * 81, a * 58);
    tb(e, a * -69, a * -47, a * 138, a * 93, qu * a);
    e.restore();
    eb(e, c[Z], c[uj], 4);
    e.save();
    e.translate(a * 79, a * 54);
    tb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    eb(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    eb(e, da, c[$a], ch);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    eb(e, $r, c[eh], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    eb(e, undefined, c[7], hn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * sq);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    eb(e, undefined, c[7], Xb);
    e.save();
    e.translate(a * 79, a * 113);
    tb(e, a * -18, a * -zk, a * 36, a * rg, hh * a);
    e.restore();
    eb(e, qr, c[8], hn);
    e.save();
    e.translate(a * 75, a * 118);
    tb(e, a * -6, a * -2.5, a * hh, a * ha, a * 20);
    e.restore();
    eb(e, c[R]);
    return d;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(Hl * a, hh * a);
    e.globalAlpha = b ? 0.5 : aa;
    e.save();
    e.translate(a * 45, a * 384.5);
    tb(e, a * -Hb, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    eb(e, c[ms]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * la, a * 607, a * 27, a * 573);
    e.closePath();
    eb(e, c[tj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    eb(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * Ig, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    eb(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    eb(e, c[uh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    eb(e, c[uh]);
    e.translate(a * -Mt, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    tb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    eb(e, c[1], c[Zn], au * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    eb(e, c[Wb], c[_l], a * ph);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    eb(e, c[Ku]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    eb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    eb(e, c[Qb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    eb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    eb(e, c[qh]);
    return d;
  }
  function Gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : $l;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    tb(e, a * -Cg, a * -76.5, a * qh, a * 163, a * 10);
    e.restore();
    eb(e, c[ne]);
    e.translate(0, ae * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Pj, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * ah, a * 38.5, a * ah, a * 38.5, a * zt, a * 41);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Fi, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * Hb, a * 172);
    e.bezierCurveTo(nq * a, a * 160.5, a * 15, a * 160.5, a * Nq, a * 149);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * wh);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    eb(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(ur, a * Yt);
    e.translate(-Ya * a, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    tb(e, a * -4, a * -76.5, ys * a, a * 163, a * Ln);
    e.restore();
    eb(e, c[aa], c[ql], Aq * a);
    e.translate(qk, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(dh * a, a * pj);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(Go * a, a * 38.5, a * fu, a * 38.5, a * cn, a * 41);
    e.closePath();
    eb(e, c[3], c[uj], a * Ph);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, fa * a, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    eb(e, c[ed], c[6], a * 4);
    e.translate(qn, a * vq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Q * a, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * Wn, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, il * a, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(Hh * a, a * 160.5, kg * a, a * 160.5, a * 15, a * 149);
    e.closePath();
    eb(e, c[Al], c[Cl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    eb(e, c[Eq]);
    return d;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, vq * a, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * Co, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * $i, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * Wk, a * 26, a * 24, a * 31, Ln * a);
    e.closePath();
    eb(e, c[0], c[1], ch);
    return d;
  }
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    eb(e, c[hd], c[_j], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    eb(e, c[sa]);
    e.globalAlpha = 0.5;
    e.translate(Fj, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * js, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    eb(e, c[ms]);
    e.globalAlpha = zs;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * bk, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * Wt, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * hh, a * 120, mb * a, a * 127);
    e.closePath();
    eb(e, c[xt], c[Vh], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    tb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    eb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    tb(e, a * -13.5, -bg * a, a * 27, a * 28, a * 4);
    e.restore();
    eb(e, c[1], c[2], a * Jo);
    return d;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * Va, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * ir, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * Ku, a * 76, a * 75, a * Db, a * 165, ns * a);
    e.bezierCurveTo(a * 233, a * ci, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    eb(e, c[0]);
    e.translate(a * -Ye, a * -25);
    e.globalAlpha = _b;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    eb(e, c[Ej], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * S, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * ch, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * dl, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    eb(e, c[3], c[4], a * Hb);
    return d;
  }
  function Od(a, b, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 100;
    e.height = a * 648;
    f.translate(a * c, a * Kk);
    f.globalAlpha = b ? 0.5 : Ej;
    f.save();
    f.translate(a * 50.5, a * 349.5);
    tb(f, a * -13.5, a * -249.5, a * 27, a * 499, Ye * a);
    f.restore();
    eb(f, d[ms]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 538);
    f.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    f.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    f.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    f.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    f.closePath();
    eb(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 554);
    f.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    f.closePath();
    eb(f, d[ur]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 569);
    f.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    f.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    f.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    f.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    f.closePath();
    eb(f, d[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 581);
    f.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    f.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    f.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    f.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    f.closePath();
    eb(f, d[Rl]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 106);
    f.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    f.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    f.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    f.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    f.closePath();
    eb(f, d[Cq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 27);
    f.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    f.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    f.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    f.closePath();
    eb(f, d[ne]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 43);
    f.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    f.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    f.closePath();
    eb(f, d[Cq]);
    f.translate(-hh * a, a * -20);
    f.globalAlpha = Al;
    f.save();
    f.translate(a * 50.5, a * 349.5);
    tb(f, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    f.restore();
    eb(f, d[1], d[2], dg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 538);
    f.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    f.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    f.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    f.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    f.closePath();
    eb(f, d[3], d[_g], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 554);
    f.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    f.closePath();
    eb(f, undefined, d[4], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 32, a * 569);
    f.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    f.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    f.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    f.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    f.closePath();
    eb(f, d[cd], d[6], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 41, a * 581);
    f.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    f.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    f.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    f.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    f.closePath();
    eb(f, d[7]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 31, a * 106);
    f.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    f.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    f.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    f.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    f.closePath();
    eb(f, d[Ya], d[6], a * 8);
    f.save();
    f.translate(a * -46, a * -50);
    f.scale(Xh, 2);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 51, a * 80);
    f.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    f.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    f.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    f.closePath();
    eb(f, d[8]);
    f.restore();
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 27);
    f.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    f.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    f.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * cq, a * 98);
    f.closePath();
    eb(f, d[8], d[Eh], a * 8);
    f.scale(Zt, 2);
    f.translate(a * -23, -Pj * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 57, a * 69);
    f.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    f.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    f.closePath();
    eb(f, d[Uh]);
    return e;
  }
  function Nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * jh, a * 139);
    e.bezierCurveTo(a * ee, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = _b;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    tb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    eb(e, c[aa], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    tb(e, a * -50.5, a * -49, a * 101, a * 98, a * Fl);
    e.restore();
    eb(e, c[co], c[2], wt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    eb(e, c[ea], c[5], gg * a);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    tb(e, a * -14, -Du * a, a * 28, a * 28, a * 4);
    e.restore();
    eb(e, c[1], c[re], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(Ih);
    tb(e, a * -ib, a * -14, a * 28, a * 28, a * vs);
    e.restore();
    eb(e, c[aa], c[2], a * ha);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    eb(e, c[ed]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    eb(e, c[ss], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    eb(e, c[tl]);
    e.globalAlpha = 0.5;
    e.translate(ne, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(Tg, a * -Qk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * mk, a * 117, a * 12, a * 109, Io * a, a * 103);
    e.bezierCurveTo(a * In, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * _r, a * 120, a * 16, a * 127);
    e.closePath();
    eb(e, c[4], c[5], a * xh);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    tb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    eb(e, c[1], c[Zt], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    tb(e, a * -13.5, a * -14, a * 27, a * 28, rg * a);
    e.restore();
    eb(e, c[1], c[Xh], a * gh);
    return d;
  }
  const qd = re;
  function Hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : Ej;
    e.save();
    e.translate(a * 30, a * 84);
    tb(e, a * -6, a * -66.5, a * 8, hl * a, Yt * a);
    e.restore();
    eb(e, c[gr]);
    e.save();
    e.translate(a * 30, a * 45);
    tb(e, a * -9.5, a * -6.5, a * 16, a * N, a * 10);
    e.restore();
    eb(e, c[ms]);
    e.save();
    e.translate(a * 30, ue * a);
    tb(e, a * -7.5, a * -5.5, a * 12, a * 11, Yt * a);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    tb(e, a * -26, a * -14.5, a * 52, a * 29, Qb * a);
    e.restore();
    eb(e, c[Nl]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    tb(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    eb(e, c[Ht], c[Zn], a * ar);
    e.save();
    e.translate(a * 35, a * 40.140625);
    tb(e, a * -9.5, a * -6.5, a * 16, a * Oh, pj * a);
    e.restore();
    eb(e, c[Jh], c[4], a * og);
    e.save();
    e.translate(a * 35, a * 12.140625);
    tb(e, a * -7.5, a * -5.5, a * Or, D * a, a * Ln);
    e.restore();
    eb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    tb(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    eb(e, c[$b], c[ug], nn * a);
    return d;
  }
  function Ud(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    eb(d, b[0]);
    return c;
  }
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    eb(e, c[1], c[Ss], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    eb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    eb(e, c[nn], c[Ph], a * Eq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    eb(e, c[5], c[gq], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    eb(e, c[1], c[Xh], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    eb(e, c[zs], c[lt], a * ta);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    eb(e, c[wb], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    eb(e, c[wb], c[8], le * a);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    eb(e, undefined, c[ta], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    eb(e, Zi, c[8], a * vt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, rj * a, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    eb(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    eb(e, c[Qk], c[4], nb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    eb(e, c[3], c[4], ph * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    eb(e, c[3], c[Aq], a * 8);
    return d;
  }
  function Kd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    ob(d, a * 74.5, a * 85, a * 66);
    eb(d, b[_a]);
    d.globalAlpha = Fh;
    ob(d, a * 75.5, a * 72.5, a * 67);
    eb(d, b[1], b[2], a * 4);
    ob(d, a * 75.5, a * 73.5, a * 54);
    eb(d, b[3]);
    d.globalAlpha = 0.5;
    ob(d, a * 74.5, a * 80.5, a * 39);
    eb(d, b[_g]);
    d.globalAlpha = zs;
    ob(d, a * 74.5, a * 74.5, a * 37);
    eb(d, b[wt]);
    return c;
  }
  function Vd(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      eb(d, b[0]);
    } else if (c == Ej) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      eb(d, b[Tg]);
    } else if (Xh == c) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      eb(d, b[Fj]);
    }
    return e;
  }
  function Zd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var h = Xd(zs * b, Ir, d);
    g.drawImage(h, Qs * b, tj * b);
    if (Ue == e) {
      g.translate(hl * b, b * 0);
      ob(g, b * 113, b * 120, b * 66);
      eb(g, Bl, d[4], b * sk);
      h = xu(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(h, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      eb(g, oh, d[xt], b * Wg);
    } else if (e == 2) {
      g.translate(b * 100, Cq * b);
      ob(g, b * 113, b * 120, b * 66);
      eb(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      tb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      eb(g, "#dff2f7", "#187484", jg * b);
      ob(g, b * 22, b * 82, Tl * b);
      eb(g, "#dff2f7", "#187484", ll * b);
      ob(g, b * 145, b * 82, b * 12);
      eb(g, "#dff2f7", "#187484", $j * b);
      h = Uu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 10, b * 85);
      h = Uu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 50, b * 85);
      h = Uu(b * 0.5, dn, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 90, b * 85);
      h = Zu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Zu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Zu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 125);
      h = Zu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 50, b * 115);
      h = Zu(Ok * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, W * b);
      h = Zu(Al * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 80, b * 120);
      h = Zu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 110, b * 125);
      h = Zu(Al * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      ob(g, b * 113, b * 120, b * 66);
      eb(g, jn, d[4], b * je);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      tb(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      eb(g, undefined, d[sj], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      eb(g, d[gh], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      eb(g, undefined, d[4], b * 13);
    } else if (e == 4) {
      g.scale(j, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      eb(g, Gh, d[xj], ib * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      eb(g, ht, d[Ku], Wa * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      eb(g, undefined, d[Ui], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * jk);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * bh);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      eb(g, ng, d[gh], b * Xt);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      eb(g, Bl, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * xl);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      eb(g, yq, d[Os], b * 14);
      g.translate(b * Ye, -Ye * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      eb(g, undefined, d[5], b * 14);
    }
    return f;
  }
  function Xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * Uh, a * ih);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    tb(e, 0, 0, a * 400, a * 220, a * 30);
    eb(e, c[ms]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * gl);
    e.bezierCurveTo(a * 397, a * Aq, a * 401, _l * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, Nq * a, a * 57);
    e.bezierCurveTo(Zt * a, a * 55, a * uj, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, Bs * a);
    e.bezierCurveTo(a * te, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * S, a * 18.5, a * bk, Ca * a, a * 5);
    e.closePath();
    eb(e, c[2], c[zs], zu * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(ha * a, a * 70);
    e.bezierCurveTo(a * gg, a * 58, ed * a, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, Io * a, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * Ku, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    eb(e, c[Gl], c[1], a * S);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(ca * a, a * 158);
    e.bezierCurveTo(re * a, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(xt * a, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    eb(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * ch, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * Rb, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * $b, a * 213, a * 2, a * 213, ch * a, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    eb(e, c[3], c[Zq], a * 12);
    ob(e, a * 41, a * 30, a * 14.7648230602334);
    eb(e, c[ar], c[Ag], a * 12);
    ob(e, a * 369, a * 30, a * 15.556349186104045);
    eb(e, c[3], c[ie], a * Za);
    ob(e, a * 364, a * 190, a * 15.620499351813308);
    eb(e, c[3], c[1], a * 12);
    ob(e, a * 41, a * 186, a * 15.556349186104045);
    eb(e, c[3], c[Gs], a * Is);
    return d;
  }
  function $d(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = vh * a;
    c.height = a * Tk;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(Cn, 0, c.width, c.height);
    return c;
  }
  function ec(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    ob(d, a * 126.5, a * 134, a * 119);
    eb(d, b[_a]);
    d.globalAlpha = As;
    ob(d, a * 126.5, a * 124, a * 119);
    eb(d, b[Eo], b[Ss], a * 4);
    ob(d, a * 126.5, a * 127, Nh * a);
    eb(d, b[3]);
    d.globalAlpha = 0.5;
    ob(d, a * 126.5, a * 135, a * 81);
    eb(d, b[Nl]);
    d.globalAlpha = 1;
    ob(d, a * 126.5, a * 125, a * 84);
    eb(d, b[ea], b[5], ch * a);
    ob(d, a * 126.5, a * 125, a * 61);
    eb(d, b[Jj], b[7], a * _l);
    d.globalAlpha = 0.5;
    ob(d, a * 126.5, a * 134, a * 40);
    eb(d, b[8]);
    d.globalAlpha = As;
    ob(d, a * 126.5, a * 125, a * 40);
    eb(d, b[9]);
    return c;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : Oj;
    e.translate(Rl, a * 3);
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    hb(e, 7, a * 60, a * 10);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Ej;
    e.translate(a * 85, a * 82);
    for (var f = 0; f < 10; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, Cq);
      hb(e, 3, a * 21, a * 4);
      eb(e, c[1], c[2], a * 4);
      e.restore();
    }
    e.save();
    e.translate(Qs * a, uh * a);
    e.rotate(1);
    hb(e, 8, a * 60, fg * a);
    eb(e, c[co], c[hn], a * 4);
    e.rotate(0.56);
    hb(e, 8, a * 40, a * 10);
    eb(e, c[xh], c[6], Eg * a);
    e.rotate(0.28);
    hb(e, 8, a * 28, a * ls);
    eb(e, c[7]);
    e.restore();
    return d;
  }
  function tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.translate(qk, a * 3);
    e.globalAlpha = b ? 0.5 : Ok;
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    hb(e, 7, a * 60, a * ia);
    e.restore();
    eb(e, c[rl]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 82);
    for (var f = vq; f < ih; f++) {
      e.rotate(Math.PI / 5);
      e.save();
      e.translate(a * 65, 0);
      hb(e, Z, a * 21, a * 4);
      eb(e, c[jq], c[2], a * 4);
      e.restore();
    }
    e.save();
    e.translate(gr * a, a * _a);
    e.rotate(0.2);
    hb(e, Mn, a * 60, a * 10);
    eb(e, c[3], c[xt], a * 4);
    e.rotate(-0.32);
    hb(e, 9, a * 38, a * 10);
    eb(e, c[5], c[6], hn * a);
    e.rotate(0.68);
    hb(e, Ma, a * 20, a * au);
    eb(e, c[Uk], c[8], a * 6);
    e.restore();
    return d;
  }
  function nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(rl, a * 10);
    e.globalAlpha = b ? 0.5 : As;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(Pl * a, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * Gt, a * 28, a * 6, a * 37, a * sq);
    e.bezierCurveTo(a * 62, a * xs, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, P * a, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    eb(e, c[uh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, le * a, a * 103);
    e.bezierCurveTo(os * a, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    eb(e, c[0]);
    e.translate(Ih, a * -Yt);
    e.globalAlpha = zs;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * Is, a * 27);
    e.bezierCurveTo(a * 27, xd * a, a * 28, a * Vi, a * 37, a * 6);
    e.bezierCurveTo(a * 62, Wb * a, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    eb(e, c[j]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    eb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(ed * a, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    eb(e, c[ie]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, Ch * a, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    eb(e, c[zk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    eb(e, c[Zt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    eb(e, c[Xh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    eb(e, c[lt]);
    return d;
  }
  function oc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    ob(d, a * 86.5, a * 98, a * 80);
    eb(d, b[Tg]);
    d.globalAlpha = Fh;
    ob(d, a * 86.5, a * 89, a * 81);
    eb(d, b[1], b[lt], ch * a);
    ob(d, a * 86.5, a * 86, a * 59);
    eb(d, b[3], b[gl], hn * a);
    d.globalAlpha = 0.5;
    ob(d, a * 86.5, a * 95, a * 34);
    eb(d, b[Cq]);
    d.globalAlpha = 1;
    ob(d, a * 86.5, a * 89, a * 34);
    eb(d, b[5]);
    return c;
  }
  function rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(ws * a, a * Ho);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, Db * a);
      e.bezierCurveTo(a * 397, xt * a, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, oa * a, a * 57);
      e.bezierCurveTo(a * 2, a * 55, Eg * a, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, gl * a, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * Pq, a * 18.5, ka * a, a * 18.5, a * 28, a * wj);
      e.bezierCurveTo(a * 18.5, a * db, a * 18.5, a * Il, Eh * a, gg * a);
      e.closePath();
      eb(e, b[dt], b[Sg], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(Ui * a, a * 70);
      e.bezierCurveTo(xj * a, a * 58, Ui * a, a * 55, a * nh, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo($l * a, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, wh * a, a * 71);
      e.closePath();
      eb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(vk * a, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      eb(e, b[Sg], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(Eo * a, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * ol, a * 213, a * ql, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      eb(e, b[Sg], b[$b], a * 32);
      ob(e, a * 41, a * 30, a * 14.7648230602334);
      eb(e, b[3], b[3], a * 32);
      ob(e, a * 369, a * 30, a * 15.556349186104045);
      eb(e, b[3], b[3], a * 32);
      ob(e, a * 364, a * 190, a * 15.620499351813308);
      eb(e, b[Sg], b[3], a * 32);
      ob(e, a * 41, a * 186, a * 15.556349186104045);
      eb(e, b[ol], b[ar], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(Oo * a, a * 5);
      e.bezierCurveTo(a * 381, Xr * a, a * 197, a * 4.5, a * 385, _l * a);
      e.bezierCurveTo(a * 397, Xb * a, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * ug, a * 52, Ch * a, a * 43);
      e.bezierCurveTo(a * Ph, a * 30.5, a * hn, a * 30.5, a * Cg, a * zh);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      eb(e, b[3], b[xs], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * gg, a * 70);
      e.bezierCurveTo(Jo * a, a * 58, pr * a, a * 55, kh * a, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * wt, a * 106, a * wt, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * gq, a * 71);
      e.closePath();
      eb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      eb(e, b[ar], b[nn], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(zs * a, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, Ss * a, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      eb(e, b[3], b[3], a * 32);
      ob(e, a * 41, a * 30, a * 14.7648230602334);
      eb(e, b[yh], b[Z], a * 32);
      ob(e, a * 369, a * 30, a * 15.556349186104045);
      eb(e, b[Wb], b[3], a * 32);
      ob(e, a * 364, a * 190, a * 15.620499351813308);
      eb(e, b[Qt], b[3], a * 32);
      ob(e, a * 41, a * 186, a * 15.556349186104045);
      eb(e, b[Qk], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, rg * a, a * 401, rg * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * nq, a * 57);
    e.bezierCurveTo(a * Tt, a * 55, a * hn, a * 52, a * vs, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * xt, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, tq * a, a * 18.5, a * 28, os * a);
    e.bezierCurveTo(a * 18.5, Ll * a, a * 18.5, ua * a, Bg * a, a * Qb);
    e.closePath();
    eb(e, b[1], b[ne], a * Za);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * Ui, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * Dh, a * 108);
    e.bezierCurveTo(a * _b, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    eb(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * Ch, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, Mg * a, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    eb(e, b[Oj], b[ms], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Db, a * 183);
    e.bezierCurveTo(Ej * a, a * 163, Rb * a, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * Rr, a * 213);
    e.bezierCurveTo(Qk * a, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    eb(e, b[2], b[0], a * 12);
    ob(e, a * 41, a * 30, a * 14.7648230602334);
    eb(e, b[Cl], b[Ih], ua * a);
    ob(e, a * 369, a * 30, a * 15.556349186104045);
    eb(e, b[wr], b[qn], ua * a);
    ob(e, a * 364, a * 190, a * 15.620499351813308);
    eb(e, b[ld], b[Qs], a * 12);
    ob(e, a * 41, a * 186, a * 15.556349186104045);
    eb(e, b[2], b[0], a * 12);
    return d;
  }
  function ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : As;
    e.translate(Cq, xj * a);
    e.save();
    e.translate(a * 85, a * 88);
    e.rotate(1.4);
    hb(e, jg, a * 60, a * 10);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 80);
    for (var f = ur; f < 10; f++) {
      e.rotate(Math.PI / gg);
      e.save();
      e.translate(a * 65, _a);
      hb(e, 3, a * 21, Xb * a);
      eb(e, c[1], c[2], a * 4);
      e.restore();
    }
    e.save();
    e.translate(a * Rl, a * vq);
    e.rotate(1.4);
    hb(e, 7, a * 60, a * 10);
    eb(e, c[3], c[uj], ug * a);
    e.rotate(0.64);
    hb(e, $j, a * 40, a * 10);
    eb(e, c[5], c[6], _l * a);
    e.rotate(0.12);
    hb(e, qq, a * 23, a * 5);
    e.restore();
    eb(e, c[rr]);
    return d;
  }
  function sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    eb(d, b[Tg]);
    return c;
  }
  const hc = zk;
  function lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, -Hb * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    eb(d, b[Cn]);
    return c;
  }
  const gc = ql;
  function uc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    tb(e, Ho * b, b * 12, b * 110, b * 90, b * Va);
    eb(e, c[qk]);
    tb(e, Va * b, b * 5, b * 110, b * 90, Ye * b);
    eb(e, c[1], c[Zn], b * 4);
    var h = gb(-Math.PI / xh, uu(b * 0.5, wq, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, Or * b, b * Ks);
    h = gb(Math.PI / 4, Hd(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(h, b * 36, b * 16);
    return d;
  }
  function bc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 198;
    e.height = a * 147;
    f.globalAlpha = b ? 0.5 : Eo;
    f.translate(0, gq * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 76);
    f.bezierCurveTo(a * 50, a * 82, a * 50, a * 82, a * 56, a * 88);
    f.bezierCurveTo(a * 59, a * 82, a * 59, a * 82, a * 62, a * 76);
    f.bezierCurveTo(a * 59, a * 71, a * 59, a * 71, a * 56, a * 66);
    f.bezierCurveTo(a * 59, a * 69, a * 59, a * 69, a * 62, a * 72);
    f.bezierCurveTo(a * 80, a * 48, a * 102, a * 50, a * 120, a * 62);
    f.bezierCurveTo(a * 127, a * 58, a * 127, a * 58, a * 134, a * 54);
    f.bezierCurveTo(a * 129, a * 60, a * 129, a * 60, a * 124, a * 66);
    f.bezierCurveTo(a * 129, a * 73, a * 129, a * 73, a * 134, a * 80);
    f.bezierCurveTo(a * 140, a * 74, a * 140, a * 74, a * 146, a * 68);
    f.bezierCurveTo(a * 142, a * 76, a * 142, a * 76, a * 138, a * 84);
    f.bezierCurveTo(a * 144, a * 90, a * 142, a * 90, a * 144, a * 90);
    f.bezierCurveTo(a * 136, a * 97, a * 136, a * 97, a * 128, a * 104);
    f.bezierCurveTo(a * 154, a * 110, a * 164, a * 90, a * 160, a * 80);
    f.bezierCurveTo(a * 138, a * 22, a * 148, a * 51, a * 136, a * 22);
    f.bezierCurveTo(a * 97, a * 24, a * 97, a * 24, a * 58, a * 26);
    f.bezierCurveTo(a * 47, a * 54, a * 36, a * 80, a * 36, a * 82);
    f.bezierCurveTo(a * 40, a * 108, a * 54, a * 104, a * 62, a * 104);
    f.bezierCurveTo(a * 46, a * 92, a * 54, a * 97, a * 46, a * 90);
    f.closePath();
    eb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, Wl * a);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, yg * a, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * 100);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    eb(f, c[vq]);
    f.globalAlpha = 1;
    f.translate(0, a * -gq);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, ba * a);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, yg * a, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, a * 100);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    eb(f, c[1], c[sh], Cg * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 98);
    f.bezierCurveTo(a * 96.5, a * 98, a * 96.5, a * 98, a * 144, a * 98);
    f.bezierCurveTo(a * 136.5, a * 102, a * 136.5, a * 102, a * 129, a * 106);
    f.bezierCurveTo(a * 103, a * 105.5, a * 103, a * 105.5, a * 77, a * 105);
    f.bezierCurveTo(a * 65, a * 105, a * 65, a * 105, a * 53, a * 105);
    f.closePath();
    eb(f, c[1]);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 98);
    f.bezierCurveTo(a * 97, a * 98, a * 97, a * 98, a * 140, a * 98);
    f.bezierCurveTo(a * 134, a * 101, a * 134, a * 101, a * 128, a * 104);
    f.bezierCurveTo(a * 92, a * 104, a * 92, a * 104, a * 56, a * 104);
    f.closePath();
    eb(f, c[0]);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 47);
    f.bezierCurveTo(a * 124.5, a * 43.5, a * 124.5, a * 43.5, a * 131, a * 40);
    f.bezierCurveTo(a * 128, a * 46, a * 128, a * 46, a * 125, a * 52);
    f.bezierCurveTo(a * 131, a * 57, a * 135, a * 64, a * 139, a * 73);
    f.bezierCurveTo(a * 142.5, a * 69.5, a * 142.5, a * 69.5, a * 146, a * 66);
    f.bezierCurveTo(a * 143.5, a * 72.5, a * 143.5, a * 72.5, a * 141, a * 79);
    f.bezierCurveTo(a * 142, a * 91, a * 141, a * 94, a * 132, a * 98);
    f.bezierCurveTo(a * 117, a * 102, a * 126, a * 108, a * 142, a * 102);
    f.bezierCurveTo(a * 159, a * 98, a * 164, a * 80, a * 162, a * 47);
    f.bezierCurveTo(a * 160, Ml * a, a * 150, a * 6, a * 117, a * 4);
    f.bezierCurveTo(a * 44, Ih * a, a * 35, Mt * a, a * 33, a * 37);
    f.bezierCurveTo(a * 29, a * 69, a * 33, a * 88, a * 44, a * 96);
    f.bezierCurveTo(a * 64, a * 107, a * 70, a * 102, a * 54, a * 93);
    f.bezierCurveTo(a * 49, a * 88, a * 50, a * 82, a * 53, a * 77);
    f.bezierCurveTo(a * 51.5, a * 71, a * 51.5, a * 71, a * 50, a * 65);
    f.bezierCurveTo(a * 53, a * 68.5, a * 53, a * 68.5, a * 56, a * 72);
    f.bezierCurveTo(a * 59, a * 67.5, a * 59, a * 67.5, a * 62, a * 63);
    f.bezierCurveTo(a * 60.5, a * 59.5, a * 60.5, a * 59.5, a * 59, a * 56);
    f.bezierCurveTo(a * 62, a * 57, a * 62, a * 57, a * 65, a * 58);
    f.bezierCurveTo(a * 78, a * 35, a * 103, a * 36, a * 117, a * 47);
    f.closePath();
    eb(f, c[Oj], c[Xr], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 21);
    f.bezierCurveTo(a * 63, a * 34, a * 64, a * 37, a * 66, a * 40);
    f.bezierCurveTo(a * 54, a * 49, a * 53, a * 51, a * 48, a * 58);
    f.bezierCurveTo(a * 44, a * 51, a * 42, a * 43, a * 40, a * 36);
    f.bezierCurveTo(a * 47, a * 28, a * 52, a * 25, a * 61, a * 21);
    f.closePath();
    eb(f, c[Ch]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 29);
    f.bezierCurveTo(a * 62, a * 25, a * 65, a * 24, a * 70, a * 23);
    eb(f, Bl, c[Qk], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61, a * 37);
    f.bezierCurveTo(a * 63, a * 32, a * 66, a * 32, a * 71, a * 32);
    eb(f, undefined, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 26, a * 50, a * 25, a * 51, a * 23);
    eb(f, ps, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 35);
    f.bezierCurveTo(a * 44, a * 31, a * 43, a * 29, a * 45, a * 26);
    eb(f, undefined, c[3], _l * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 44);
    f.bezierCurveTo(a * 57, a * 48, a * 57, a * 50, a * 60, a * 52);
    eb(f, undefined, c[$b], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 48);
    f.bezierCurveTo(a * 52, a * 52, a * 52, a * 54, a * 55, a * 57);
    eb(f, qr, c[Z], uj * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 41);
    f.bezierCurveTo(a * 41, a * 42, a * 39, a * 45, a * 38, a * 48);
    eb(f, qr, c[3], a * vs);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 48);
    f.bezierCurveTo(a * 42, a * 51, a * 42, a * 53, a * 40, a * 55);
    eb(f, Gk, c[Qt], Eg * a);
    if (d == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 99, a * 101);
      f.bezierCurveTo(a * 118.6666259765625, a * 104.33331298828125, a * 124.6666259765625, a * 116.33331298828125, a * 112.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 104.6666259765625, a * 112.33331298828125, a * 100.6666259765625, a * 105.33331298828125, a * 99.6666259765625, a * 101.33331298828125);
      eb(f, yr, c[pr], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 97.6666259765625, a * 101.33331298828125);
      f.bezierCurveTo(a * 81.6666259765625, a * 106.33331298828125, a * 79.6666259765625, a * 114.33331298828125, a * 89.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 95.6666259765625, a * 111.33331298828125, a * 95.6666259765625, a * 109.33331298828125, a * 98.6666259765625, a * 102.33331298828125);
      eb(f, ng, c[5], a * 6);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 120, a * 106.39999389648438, a * 118, a * 107.39999389648438, a * 120, a * 111.39999389648438);
      eb(f, qj, c[5], a * $a);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 90, a * 103.39999389648438, a * 89, a * 106.39999389648438, a * 87, a * 112.39999389648438);
      eb(f, undefined, c[Os], a * 6);
      ob(f, a * 86, a * 114.39999389648438, a * 4.5);
      eb(f, c[Eo], c[jt], a * Rt);
      ob(f, a * 121, a * 114.39999389648438, a * 4.5);
      eb(f, c[Zq], c[cl], Zh * a);
    }
    return e;
  }
  function vc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(rl, au * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, rs * a, a * 49, Zh * a, a * 67, xd * a);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, yh * a, a * 87, a * 8, a * 50);
    d.closePath();
    eb(d, b[0]);
    d.translate(Cq, a * -8);
    d.globalAlpha = Eo;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(ls * a, a * 50);
    d.bezierCurveTo(a * 15, a * Go, a * 49, a * 6, a * 67, a * sq);
    d.bezierCurveTo(a * 121, a * xs, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    eb(d, b[As], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Ls * a, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * Vh, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    eb(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * gk, a * 146, a * 52, a * 133, a * 58);
    eb(d, b[1], b[sh], a * hn);
    ob(d, a * 51, a * 91, rn * a);
    eb(d, b[3]);
    ob(d, a * 95, a * 91, Bt * a);
    eb(d, b[dt]);
    ob(d, a * 91, a * 89, a * Yi);
    eb(d, b[4]);
    ob(d, a * 47, a * 89, Ch * a);
    eb(d, b[Xb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    eb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    eb(d, b[Gt]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    eb(d, jn, b[6], a * vk);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * El, a * 38, a * Ks, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    eb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    eb(d, b[hu]);
    return c;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    ob(e, a * 69, a * 64, a * 48.16637831516918);
    eb(e, c[Fh]);
    e.globalAlpha = 0.7;
    ob(e, a * 69, a * 64, a * 38.23105625617661);
    eb(e, c[2]);
    e.globalAlpha = 0.7;
    ob(e, a * 69, a * 64, a * 32.01562118716424);
    eb(e, c[2], c[Sg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    eb(e, c[Gl]);
    return d;
  }
  function cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : Ue;
    e.translate(0, no * a);
    e.save();
    e.translate(a * 80.5, a * 78);
    tb(e, a * -71.5, a * -71, a * 143, a * 143, a * bb);
    e.restore();
    eb(e, c[Fj]);
    e.globalAlpha = Zq;
    e.translate(gr, -ae * a);
    e.save();
    e.translate(a * 80.5, a * 78);
    tb(e, a * -71.5, a * -71, a * 143, a * 143, ih * a);
    e.restore();
    eb(e, c[1], c[Zt], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    tb(e, a * -zr, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    eb(e, c[3], c[4], a * Vi);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    tb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    eb(e, c[qk]);
    e.globalAlpha = 1;
    e.translate(Ih, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    tb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    eb(e, c[Sg], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : j;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    eb(e, c[gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    eb(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    eb(e, c[rl]);
    e.globalAlpha = $l;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    eb(e, c[3], c[4], a * sg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    eb(e, c[Gl], c[4], a * wh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    eb(e, c[Qt], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    eb(e, c[Gl], c[ug], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    tb(e, a * -13.5, a * -14, a * 27, a * 27, xd * a);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Ue;
    e.translate(tj, -bb * a);
    e.save();
    e.translate(a * 78.5, a * 78);
    tb(e, a * -13.5, a * -Wa, a * 27, a * 27, a * Mg);
    e.restore();
    eb(e, c[Qt], c[Ph], a * Jj);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * Tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    eb(e, c[dt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    eb(e, c[ms], c[Eo], ir * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    eb(e, qj, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    eb(e, c[vq], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    eb(e, c[0], c[$l], ir * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    eb(e, c[2], c[1], a * dh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    eb(e, c[0], c[_b], a * 20);
    return d;
  }
  function pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(-Ws * a, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    eb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    eb(d, b[lt], b[Gl], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    eb(d, b[2]);
    return c;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Ui, a * 5);
    ob(e, a * 220, a * 201, a * 170.41713528867922);
    eb(e, c[tj], c[0], wh * a);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    ob(e, a * 220, a * 201, a * 170.41713528867922);
    eb(e, c[1], c[ql], Mg * a);
    ob(e, a * 220, a * 201, a * 130);
    eb(e, c[zt], c[Xh], a * Gt);
    ob(e, a * 222, a * 199, a * 120.74767078498864);
    eb(e, Hj, c[dt], a * 40);
    ob(e, a * 220, a * 200, a * 95.44108130150245);
    eb(e, Gk, c[2], a * Dh);
    e.globalAlpha = b ? 0.5 : aa;
    e.translate(a * 5, a * 5);
    ob(e, a * 63, a * 136, a * 49.193495504995376);
    eb(e, c[Gr], c[0], a * 4);
    e.globalAlpha = jq;
    e.translate(-ed * a, -gh * a);
    ob(e, a * 63, a * 136, a * 49.193495504995376);
    eb(e, c[8], c[Zt], _g * a);
    ob(e, a * 63, a * 137, a * 25.632011235952593);
    eb(e, c[7], c[2], a * 4);
    return d;
  }
  function Tc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : jq;
    e.translate(a * cl, a * wt);
    e.save();
    tb(e, a * 33, a * 53, a * 10, a * 98, El * a);
    eb(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -yg);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    eb(e, c[0]);
    e.restore();
    e.globalAlpha = Ue;
    e.translate(a * -cd, a * -Vh);
    e.save();
    tb(e, a * 33, a * 53, a * ae, a * 98, a * 10);
    eb(e, c[1], c[gc], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, -ut * a);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    eb(e, c[3], c[4], gl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    eb(e, c[ha]);
    e.restore();
    return d;
  }
  function fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    tb(d, Qs, 0, 20, 35, 7);
    eb(d, b[ne]);
    return c;
  }
  function zc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    ob(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    eb(d, undefined, c[2], a * 4);
    ob(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    eb(d, pl, c[_b], _l * a);
    ob(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    eb(d, Gg, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(gr);
    tb(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    eb(d, c[Tt], c[1], a * Ch);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    hb(d, yh, a * 8.06225774829855, a * Rl);
    d.restore();
    eb(d, c[mt]);
    ob(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    eb(d, c[ol]);
    return e;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    eb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    eb(e, c[0], c[1], hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    eb(e, undefined, c[As], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    eb(e, undefined, c[Ue], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    eb(e, Zi, c[1], a * Ch);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * hl, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    eb(e, c[2]);
    return d;
  }
  function wc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    ob(d, a * 55, a * 55, a * 55);
    eb(d, b[0]);
    return c;
  }
  function Pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    ob(e, a * 220, a * 201, a * 170.41713528867922);
    eb(e, c[gr], c[0], a * sr);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -sj);
    ob(e, a * 220, a * 201, a * 170.41713528867922);
    eb(e, c[Ht], c[re], a * 6);
    ob(e, a * 220, a * 201, a * 130);
    eb(e, c[11], c[hc], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    eb(e, c[5], c[wg], a * gl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * Yh, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    eb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    eb(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    eb(e, c[Ku], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    eb(e, c[5], c[eh], a * rg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, Lr * a, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    eb(e, c[Ya], c[6], Yi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    eb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    eb(e, c[10], c[xk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    eb(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    eb(e, c[fg], c[Qa], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    eb(e, pl, c[ad], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * q, a * 183, a * 241, a * 186, a * 233, a * 192);
    eb(e, undefined, c[Gt], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    eb(e, undefined, c[Kl], wh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    eb(e, undefined, c[sg], a * Kl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    eb(e, qj, c[Pl], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    eb(e, undefined, c[6], a * Vi);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    eb(e, undefined, c[Zh], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    eb(e, undefined, c[6], a * gq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * fl, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    eb(e, oh, c[6], Zh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    eb(e, undefined, c[6], a * ad);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    eb(e, yr, c[Jj], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    eb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, De * a, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    eb(e, undefined, c[M], a * 6);
    ob(e, a * 222, a * 199, a * 120.74767078498864);
    eb(e, sb, c[3], a * 40);
    ob(e, a * 220, a * 200, a * 95.44108130150245);
    eb(e, Gh, c[zk], a * At);
    ob(e, a * 220, a * 201, a * 85);
    eb(e, Hj, c[Yi], a * 10);
    e.globalAlpha = 0.5;
    ob(e, a * 220, a * 201, a * 82);
    eb(e, c[_j]);
    e.globalAlpha = b ? 0.5 : Al;
    e.translate(a * 5, a * Ku);
    ob(e, a * 63, a * 136, a * 49.193495504995376);
    eb(e, c[Ih], c[ne], a * 4);
    e.globalAlpha = Fh;
    e.translate(-xj * a, a * -5);
    ob(e, a * 63, a * 136, a * 49.193495504995376);
    eb(e, c[Eq], c[2], a * Ch);
    ob(e, a * 63, a * 137, a * 25.632011235952593);
    eb(e, c[Qr], c[zk], a * 4);
    return d;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * Ku);
    e.globalAlpha = b ? ne : 0;
    ob(e, a * 178.5, a * 172.828125, a * 150);
    eb(e, undefined, c[0], a * 65);
    ob(e, a * 178.5, a * 172.828125, a * 150);
    eb(e, pl, c[rl], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    tb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    eb(e, c[tj]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    tb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    eb(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    tb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(_a, sj * a);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    eb(e, c[0]);
    e.translate(dt, a * -ha);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    eb(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    eb(e, c[ms], c[gr], a * jg);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * Hb, a * 35);
    ob(e, a * 178.5, a * 172.828125, a * 150);
    eb(e, undefined, c[2], a * 95);
    ob(e, a * 178.5, a * 172.828125, a * 150);
    eb(e, pl, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    tb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    eb(e, c[zs], c[2], a * dh);
    e.save();
    e.translate(a * 136, a * 581.828125);
    tb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    eb(e, c[1], c[2], a * Hq);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    tb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    eb(e, c[Gs], c[qd], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    eb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * Qb);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    eb(e, c[1]);
    e.translate(Rl, a * -Qb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    eb(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    eb(e, c[aa], c[Zq], Ck * a);
    e.restore();
    return d;
  }
  function kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(tj, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * Uj, a * 72, a * Ko, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    eb(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -Ka);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * yh, a * 60, a * uq, a * 72, os * a, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    eb(e, c[qk], c[Ej], a * _g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    eb(e, c[Nl], c[1], Xb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    eb(e, c[ld], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * P, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    eb(e, c[0], c[ag], uj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    eb(e, Hj, c[zs], a * 4);
    ob(e, a * 58, a * 50, a * gg);
    eb(e, c[Cg]);
    ob(e, a * 43, a * 65, a * 5);
    eb(e, c[uj]);
    ob(e, a * 58, a * 73, Jn * a);
    eb(e, c[4]);
    ob(e, a * 58, a * 50, a * 2);
    eb(e, c[5]);
    ob(e, a * 43, a * 65, a * 2);
    eb(e, c[Os]);
    ob(e, a * 58, a * 73, a * 2);
    eb(e, c[ha]);
    return d;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(mk * a, a * 127.13540649414062, a * Kk, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    eb(e, c[rl], c[jq], El * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    eb(e, c[1]);
    return d;
  }
  function Jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    eb(d, b[0]);
    return c;
  }
  function Mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 185;
    d.height = a * 164;
    e.translate(0, Cq);
    var f = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, cl * a);
      e.globalAlpha = b ? 0.5 : Ht;
      ob(e, a * 100.5, a * 82, a * 74.92746655359852);
      eb(e, c[0], c[Ih], Ph * a);
      ob(e, a * 100.5, a * 82, a * 65.9417374971317);
      eb(e, c[vq], c[qk], a * 4);
      e.translate(0, -ha);
      e.globalAlpha = aa;
      ob(e, a * 100.5, a * 82, a * 74.92746655359852);
      eb(e, c[Zq], c[Z], a * _l);
      ob(e, a * 100.5, a * 82, a * 65.9417374971317);
      eb(e, c[aa], c[2], a * 4);
      ob(e, a * 100.5, a * 82, a * 35.9417374971317);
      eb(e, c[1], c[2], xq * a);
      ob(e, a * 100.5, a * 82, a * 15.9417374971317);
      eb(e, c[1], c[2], a * 6);
      return d;
    }(a, b, c);
    e.drawImage(f, a * -Qa, Cq * a);
    f = Xc(a, b, c, 0);
    e.drawImage(f, a * -83, a * -40);
    f = Xc(a, b, c, Math.PI / 1.4);
    e.drawImage(f, -Zl * a, a * -88);
    f = Xc(a, b, c, Math.PI / -1.4);
    e.drawImage(f, a * 15, a * -le);
    return d;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : aa;
    e.translate(Tg, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    eb(e, c[ur]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    eb(e, c[Zq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    eb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, No * a, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    eb(e, undefined, c[Pt], Eg * a);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    eb(e, c[Ho], c[10], Yi * a);
    e.translate(vq, a * Ka);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    eb(e, c[yh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, la * a);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, Ws * a);
    e.closePath();
    eb(e, c[Kl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * de);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, at * a);
    e.closePath();
    eb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    eb(e, undefined, c[Db], Ch * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * jl, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    eb(e, oh, c[_g], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    tb(e, -yb * a, a * -10.5, a * tq, a * 21, ae * a);
    e.restore();
    eb(e, c[Th], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    tb(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    eb(e, c[8], c[2], a * 4);
    ob(e, a * 87, a * 39, a * 4.123105625617661);
    eb(e, c[9], c[2], a * 4);
    ob(e, a * 87, a * 60, a * 4.242640687119285);
    eb(e, c[Eh], c[2], a * ch);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    eb(e, c[nk], c[Xh], Yi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * Pq, a * 74, a * 27, a * 80);
    e.closePath();
    eb(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    eb(e, c[Dk], c[Zt], a * 4);
    ob(e, a * 50, a * 80, a * 5);
    eb(e, c[Dk], c[2], a * Eg);
    ob(e, a * 86.01141357421875, a * 81.76705932617188, a * jt);
    eb(e, c[9], c[2], Xb * a);
    ob(e, a * 119.01141357421875, a * 80.13069152832031, a * ha);
    eb(e, c[9], c[2], a * 4);
    return d;
  }
  function Dc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 170;
    e.height = a * 200;
    f.translate(a * 5, a * 15);
    if (Fh == d) {
      f.translate(Rl, a * -5);
      ob(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
      eb(f, c[1], c[5], Mt * a);
      ob(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
      eb(f, c[Zq], c[5], a * xq);
      f.save();
      f.translate(a * 77.00003051757812, a * 31.267044067382812);
      tb(f, a * -6, a * -12.5, a * Ll, a * 25, a * 10);
      f.restore();
      eb(f, c[$l], c[Jo], a * 20);
      f.save();
      f.translate(a * 77.00003051757812, a * 13.267044067382812);
      tb(f, a * -15, a * -10.5, a * 30, a * 21, a * 10);
      f.restore();
      eb(f, c[1], c[pr], a * 20);
    }
    ob(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
    eb(f, c[1], c[2], nl * a);
    ob(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
    eb(f, c[1], c[ld], Vl * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18.000030517578125, a * 105.85795593261719);
    f.bezierCurveTo(a * 134.00003051757812, a * 104.85795593261719, a * 77.00003051757812, a * 104.85795593261719, a * 136.00003051757812, a * 103.85795593261719);
    f.closePath();
    eb(f, c[Zq], c[2], a * R);
    ob(f, a * 77.00003051757812, a * 104.6761474609375, a * 32.55764119219941);
    eb(f, c[1], c[Pt], a * yb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 112.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 62.03977966308594);
    f.closePath();
    eb(f, c[Kj], c[2], ls * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 48.03977966308594);
    f.bezierCurveTo(a * 82.00003051757812, a * 55.53977966308594, a * 82.00003051757812, a * 55.53977966308594, a * 86.00003051757812, a * 63.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 63.03977966308594, a * 78.00003051757812, a * 63.03977966308594, a * 70.00003051757812, a * 63.03977966308594);
    f.closePath();
    eb(f, c[3], c[hc], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.00003051757812, a * 111.6761474609375);
    f.bezierCurveTo(a * 95.00003051757812, a * 97.1761474609375, a * 95.00003051757812, a * 97.1761474609375, a * 110.00003051757812, a * 82.6761474609375);
    f.closePath();
    eb(f, c[Z], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 76.6761474609375);
    f.bezierCurveTo(a * 111.50003051757812, a * 82.6761474609375, a * 111.50003051757812, a * 82.6761474609375, a * 116.00003051757812, a * 88.6761474609375);
    f.bezierCurveTo(a * 118.50003051757812, a * 81.6761474609375, a * 118.50003051757812, a * 81.6761474609375, a * 121.00003051757812, a * 74.6761474609375);
    f.closePath();
    eb(f, c[Qk], c[2], a * 4);
    ob(f, a * 77.00003051757812, a * 105.03977966308594, a * 15.556349186104045);
    eb(f, c[3], c[2], a * 4);
    f.save();
    f.translate(a * 77.00003051757812, a * 31.267044067382812);
    f.rotate(0);
    tb(f, a * -hu, a * -12.5, bk * a, a * 25, a * 10);
    f.restore();
    eb(f, c[1], c[Tt], a * Th);
    f.save();
    f.translate(a * 77.00003051757812, a * 13.267044067382812);
    f.rotate(0);
    tb(f, a * -Hb, a * -10.5, a * 30, a * 21, a * 10);
    f.restore();
    eb(f, c[1], c[wr], a * 7);
    return e;
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    tb(e, a * 24, a * 26, a * 70, a * 9, a * pj);
    eb(e, c[tj]);
    tb(e, a * 26, a * 70, a * 70, a * 9, a * Yt);
    eb(e, c[0]);
    tb(e, Os * a, Jh * a, a * 22, a * 94, a * xh);
    eb(e, c[qk]);
    tb(e, a * 40, a * Ka, a * 22, a * 94, a * 5);
    eb(e, c[0]);
    tb(e, a * 75, a * 3, a * 22, a * 94, a * Vh);
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    tb(e, a * 24, a * 26, a * 70, a * rn, Uh * a);
    eb(e, c[Zq]);
    tb(e, a * 26, a * 70, a * 70, a * Ma, a * 10);
    eb(e, c[Ag]);
    tb(e, a * xh, X * a, a * 22, a * 94, a * xj);
    eb(e, c[Tt], c[3], a * 4);
    tb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    eb(e, c[ld], c[3], a * hn);
    tb(e, a * 75, xs * a, a * 22, a * 94, a * Os);
    eb(e, c[Tt], c[3], Aq * a);
    return d;
  }
  function Ec() {
    new Date().getTime();
    function a(a) {
      var b = Qs;
      for (var c = uh, d = 0; a.length > c; c++) {
        var e = a.charAt(c);
        if (e !== "_" && c !== 5) {
          if (e === "1") {
            b += Math.pow(wr, d);
          }
          d++;
        }
      }
      return b;
    }
    ⵠⲆⲆΔⲆⲆⵠⵠⲆ();
    ΔΔ[Ur.ⲆⲆᐃΔⵠΔᐃ] = [ⵠᐃ.ᐃⲆⵠⲆⵠᐃᐃ, ⵠᐃ.ᐃᐃⵠΔⵠΔⵠ];
    ΔΔ[Ur.ⵠΔΔΔ] = [];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_010_000")] = [ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⵠⵠⲆΔⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_010_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_010_000")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_011_000")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_010_000")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_011_010")] = [ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_011_011")] = [ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_110_000")] = [ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⵠⵠⲆΔⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_110_010")] = [ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ⵠⲆᐃΔᐃⵠⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_110_110")] = [ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⵠⲆⵠΔΔⲆⲆ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ⵠⲆᐃΔᐃⵠⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_111_000")] = [ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_111_111")] = [ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_010_000")] = [ⵠᐃ.ⵠⵠⲆΔⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_010_010")] = [ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_011_000")] = [ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_000")] = [ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")] = [ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_011_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_011_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_111_000")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_111_110")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_111_111")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_111_110")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("000_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_011_000")] = [ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_011_010")] = [ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_011_011")] = [ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_000")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_011_010")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_010")] = [ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_010")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_110")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_010")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("011_111_111")] = [ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_110_000")] = [ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⵠⲆΔΔᐃⵠΔ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_110_010")] = [ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a(p[kh])] = [ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_000")] = [ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ⵠⲆΔΔᐃⵠΔ, ⵠᐃ.ⵠⵠᐃⲆⵠΔᐃ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_110")] = [ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ, ⵠᐃ.ⵠⵠᐃⲆⵠΔᐃ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_111")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("110_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_110")] = [ⵠᐃ.ᐃΔⵠᐃⵠ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠⵠᐃⲆⵠΔᐃ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_000")] = [ⵠᐃ.ⵠⲆΔΔᐃⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ⵠⵠᐃⲆⵠΔᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_111")] = [ⵠᐃ.ⵠΔⲆⵠΔⵠᐃ, ⵠᐃ.ⵠᐃⲆⲆⵠ, ⵠᐃ.ⲆΔΔᐃΔ, ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ, ⵠᐃ.ΔᐃⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆΔ, ⵠᐃ.ⲆΔⵠⵠΔ, ⵠᐃ.ⲆᐃⲆⵠⲆᐃΔ, ⵠᐃ.ᐃⲆⲆⵠΔⵠΔ, ⵠᐃ.ⵠⵠΔⵠⵠ, ⵠᐃ.ᐃⲆΔᐃΔΔⲆ, ⵠᐃ.ᐃⵠⵠᐃΔⵠᐃ, ⵠᐃ.ⵠⲆⲆΔᐃΔⲆ, ⵠᐃ.ⲆⲆᐃΔΔ, ⵠᐃ.ΔⲆΔⵠᐃⲆᐃ, ⵠᐃ.ⵠᐃΔΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆ, ⵠᐃ.ⲆⵠᐃᐃⲆΔᐃ, ⵠᐃ.ⲆⲆⵠΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔᐃⵠⵠᐃ, ⵠᐃ.ᐃΔΔⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃ, ⵠᐃ.ᐃΔⵠᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ᐃΔⵠ][a("111_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_010_000")] = [ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⲆᐃⵠⲆᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_010_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_010_000")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_011_000")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_010_000")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_011_010")] = [ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_011_011")] = [ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_110_000")] = [ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ⲆᐃⵠⲆᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_110_010")] = [ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ᐃΔⲆΔⵠⵠⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_110_110")] = [ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ⲆΔΔⲆⲆΔⵠ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ᐃΔⲆΔⵠⵠⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_111_000")] = [ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_111_111")] = [ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_010_000")] = [ⵠᐃ.ⲆᐃⵠⲆᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_010_010")] = [ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_011_000")] = [ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆⲆᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_000")] = [ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")] = [ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_011_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_011_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_111_000")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_111_110")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_111_111")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_111_110")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("000_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_011_000")] = [ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆⲆᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_011_010")] = [ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_011_011")] = [ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_000")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_011_010")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_010")] = [ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_010")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_110")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_010")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("011_111_111")] = [ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_110_000")] = [ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃⵠΔΔᐃΔⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_110_010")] = [ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_110_110")] = [ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_000")] = [ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ᐃⵠΔΔᐃΔⵠ, ⵠᐃ.ⲆᐃᐃⵠⲆΔⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_110")] = [ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ, ⵠᐃ.ⲆᐃᐃⵠⲆΔⵠ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_111")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("110_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_110")] = [ⵠᐃ.ΔᐃⵠⵠⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ, ⵠᐃ.ⲆᐃᐃⵠⲆΔⵠ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_011")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_110")];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_000")] = [ⵠᐃ.ᐃⵠΔΔᐃΔⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⲆᐃᐃⵠⲆΔⵠ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_111")] = [ⵠᐃ.ⲆⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠⲆⲆΔΔⲆᐃ, ⵠᐃ.ⵠⵠⲆⵠⲆ, ⵠᐃ.ⲆⵠΔⵠⵠ, ⵠᐃ.Δⵠⵠᐃᐃ, ⵠᐃ.ᐃⲆⵠΔⵠᐃΔ, ⵠᐃ.ΔⲆⵠΔⲆⲆⵠ, ⵠᐃ.Δᐃⵠⵠⵠ, ⵠᐃ.ΔᐃⵠΔⲆⵠΔ, ⵠᐃ.ⲆⵠⵠⵠΔΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔᐃΔ, ⵠᐃ.ᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⲆᐃⲆⵠᐃⵠ, ⵠᐃ.ΔⲆᐃΔᐃΔᐃ, ⵠᐃ.ⲆᐃⵠⲆᐃ, ⵠᐃ.ᐃΔⵠᐃΔ, ⵠᐃ.ᐃΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃᐃΔΔᐃⵠⲆ, ⵠᐃ.ΔΔⲆΔⲆΔᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆᐃ, ⵠᐃ.ΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_010")] = ΔΔ[Ur.ⵠΔΔΔ][Ur.ΔΔⵠ][a("111_111_110")];
    ΔΔ[Ur.ⲆΔⵠᐃ] = [];
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_010_000")] = ⵠᐃ.ⲆΔΔᐃΔΔᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_010_010")] = ⵠᐃ.ⵠⵠⵠΔⲆᐃⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_011_000")] = ⵠᐃ.ᐃΔΔᐃⲆᐃⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_011_010")] = ⵠᐃ.ⵠⲆΔⲆᐃⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_011_011")] = ⵠᐃ.ΔⲆᐃΔⵠⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_110_000")] = ⵠᐃ.ᐃᐃⵠᐃᐃᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_110_010")] = ⵠᐃ.ⲆΔᐃⲆΔⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_110_110")] = ⵠᐃ.ΔᐃᐃⵠᐃΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_111_000")] = ⵠᐃ.ⵠΔᐃΔΔΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_111_010")] = ⵠᐃ.ᐃⲆⵠΔΔᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_111_011")] = ⵠᐃ.ΔⲆⲆⵠΔΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_111_110")] = ⵠᐃ.ⲆΔᐃⵠΔᐃΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("000_111_111")] = ⵠᐃ.ΔᐃᐃᐃᐃΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_010_000")] = ⵠᐃ.ⵠⲆΔᐃᐃᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_010_010")] = ⵠᐃ.ⵠⵠᐃⵠᐃΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_011_000")] = ⵠᐃ.ⵠᐃⵠΔⵠⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_011_010")] = ⵠᐃ.ᐃⲆⵠΔΔΔⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_011_011")] = ⵠᐃ.ⲆⵠᐃⵠⵠⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_110_000")] = ⵠᐃ.ΔⵠⲆΔΔΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_110_010")] = ⵠᐃ.ⲆⲆΔᐃΔⲆᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_110_110")] = ⵠᐃ.ᐃᐃᐃⵠΔᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_111_000")] = ⵠᐃ.ⲆᐃᐃⲆᐃⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_111_010")] = ⵠᐃ.ⵠΔΔΔⵠⲆᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_111_011")] = ⵠᐃ.ⲆᐃⵠⲆⲆⲆΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_111_110")] = ⵠᐃ.ⵠⲆᐃΔᐃΔᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("010_111_111")] = ⵠᐃ.ΔⲆⲆΔΔᐃⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_011_000")] = ⵠᐃ.ΔΔΔⲆⲆⵠⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_011_010")] = ⵠᐃ.ΔΔⵠᐃⲆⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_011_011")] = ⵠᐃ.ⲆΔΔⵠⲆⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_111_000")] = ⵠᐃ.ΔΔⵠᐃⵠᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_111_010")] = ⵠᐃ.ᐃΔⵠᐃᐃⵠᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_111_011")] = ⵠᐃ.ⵠⵠⵠΔᐃᐃⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_111_110")] = ⵠᐃ.ⲆΔⵠᐃⲆΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("011_111_111")] = ⵠᐃ.ΔⵠᐃⵠⵠΔⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_110_000")] = ⵠᐃ.ΔⵠΔⲆᐃΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_110_010")] = ⵠᐃ.ΔΔⵠⲆⲆᐃΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_110_110")] = ⵠᐃ.ⲆⵠᐃᐃⵠᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_111_000")] = ⵠᐃ.ⲆΔⲆⲆΔΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_111_010")] = ⵠᐃ.ΔΔⲆΔⲆΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_111_011")] = ⵠᐃ.ⲆⵠΔΔΔᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_111_110")] = ⵠᐃ.ᐃⵠⵠΔᐃⵠᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("110_111_111")] = ⵠᐃ.ⲆΔΔᐃΔΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("111_111_011")] = ⵠᐃ.ⵠΔⲆᐃⲆΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("111_111_110")] = ⵠᐃ.ⵠⵠᐃᐃᐃᐃⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("111_111_011")] = ⵠᐃ.ⵠΔⲆᐃⲆΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("111_111_000")] = ⵠᐃ.ᐃⲆΔⵠΔⲆΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("111_111_111")] = ⵠᐃ.ⲆΔᐃᐃⵠⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ᐃΔⵠ][a("111_111_010")] = ⵠᐃ.ⲆᐃᐃΔⲆⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_010_000")] = ⵠᐃ.ΔⵠΔᐃΔⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_010_010")] = ⵠᐃ.ⲆᐃⲆⲆΔⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_011_000")] = ⵠᐃ.ᐃᐃⵠⵠᐃⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_011_010")] = ⵠᐃ.ⵠⲆᐃⵠᐃⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_011_011")] = ⵠᐃ.ΔᐃⵠⲆⲆⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_110_000")] = ⵠᐃ.ΔΔⵠⵠᐃⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_110_010")] = ⵠᐃ.ΔⲆⵠⵠᐃⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_110_110")] = ⵠᐃ.ᐃⵠᐃⵠⵠⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_111_000")] = ⵠᐃ.ⵠⲆⵠᐃᐃⲆᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_111_010")] = ⵠᐃ.ⲆⲆⲆⵠᐃΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_111_011")] = ⵠᐃ.ⵠΔⲆΔⲆΔⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_111_110")] = ⵠᐃ.ᐃⲆᐃⲆⲆᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("000_111_111")] = ⵠᐃ.ᐃⲆᐃⵠᐃⵠⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_010_000")] = ⵠᐃ.ⲆⵠᐃⵠⲆⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_010_010")] = ⵠᐃ.ⵠΔⲆⵠⵠⲆᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_011_000")] = ⵠᐃ.ᐃΔⲆⲆᐃᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_011_010")] = ⵠᐃ.ⲆΔΔΔᐃΔⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_011_011")] = ⵠᐃ.ⵠΔⲆⲆⵠᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_110_000")] = ⵠᐃ.ΔᐃⲆⵠᐃᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_110_010")] = ⵠᐃ.ΔΔΔⵠⵠⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_110_110")] = ⵠᐃ.ⲆΔΔⲆᐃᐃΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_111_000")] = ⵠᐃ.ⵠⲆⲆⲆᐃⵠᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_111_010")] = ⵠᐃ.ᐃⲆΔᐃᐃΔᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_111_011")] = ⵠᐃ.ⵠⵠⵠΔᐃⲆΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_111_110")] = ⵠᐃ.ⲆⲆᐃⵠΔᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("010_111_111")] = ⵠᐃ.ΔⵠᐃⵠⲆⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_011_000")] = ⵠᐃ.ⵠⲆⵠᐃⲆⵠᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_011_010")] = ⵠᐃ.ⲆΔᐃΔΔΔⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_011_011")] = ⵠᐃ.ⵠᐃⵠⵠⲆΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_111_000")] = ⵠᐃ.ᐃⵠΔᐃᐃΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_111_010")] = ⵠᐃ.ᐃΔΔⵠΔᐃΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_111_011")] = ⵠᐃ.ⵠⵠⲆⲆΔⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_111_110")] = ⵠᐃ.ⵠⵠⲆΔᐃΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("011_111_111")] = ⵠᐃ.ᐃⵠᐃⲆΔⲆΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_110_000")] = ⵠᐃ.ᐃᐃⲆΔⲆⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_110_010")] = ⵠᐃ.ⵠⲆᐃⵠⵠⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a(p[Ql])] = ⵠᐃ.ᐃⲆᐃΔⵠⲆΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_111_000")] = ⵠᐃ.ᐃⲆⲆⵠᐃⵠΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_111_010")] = ⵠᐃ.ΔⵠᐃΔⵠⲆᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_111_011")] = ⵠᐃ.ᐃⵠⲆⵠᐃᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_111_110")] = ⵠᐃ.ᐃᐃⵠⲆⲆΔΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("110_111_111")] = ⵠᐃ.ΔⲆⵠΔⲆᐃᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("111_111_011")] = ⵠᐃ.ΔⲆᐃΔⲆᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("111_111_110")] = ⵠᐃ.ⲆΔΔΔᐃⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("111_111_011")] = ⵠᐃ.ΔⲆᐃΔⲆᐃⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("111_111_000")] = ⵠᐃ.ⲆΔᐃᐃᐃⲆΔ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("111_111_111")] = ⵠᐃ.ᐃᐃᐃⵠᐃΔⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃ][Ur.ΔΔⵠ][a("111_111_010")] = ⵠᐃ.ΔᐃⵠᐃᐃᐃⲆ;
    ΔΔ[Ur.ⲆⲆᐃᐃᐃ] = [];
    ΔΔ[Ur.ⲆⲆᐃᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔⲆⲆᐃᐃᐃ;
    ΔΔ[Ur.ⲆⲆᐃᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆᐃⵠᐃᐃᐃ;
    ΔΔ[Ur.ᐃⵠΔᐃⵠ] = [];
    ΔΔ[Ur.ᐃⵠΔᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⵠΔⲆᐃⲆ;
    ΔΔ[Ur.ᐃⵠΔᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃᐃⲆⵠᐃᐃ;
    ΔΔ[Ur.ⵠΔᐃΔᐃΔⲆ] = [];
    ΔΔ[Ur.ⵠΔᐃΔᐃΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠᐃᐃⵠⵠΔ;
    ΔΔ[Ur.ⵠΔᐃΔᐃΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆΔⲆⲆΔΔ;
    ΔΔ[Ur.ᐃᐃᐃⲆᐃ] = [];
    ΔΔ[Ur.ᐃᐃᐃⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠᐃΔᐃΔⲆ;
    ΔΔ[Ur.ᐃᐃᐃⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⲆᐃΔⲆⲆ;
    ΔΔ[Ur.ᐃΔⵠⵠΔᐃΔ] = [];
    ΔΔ[Ur.ᐃΔⵠⵠΔᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔⵠΔⲆᐃⵠ;
    ΔΔ[Ur.ᐃΔⵠⵠΔᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⲆⲆΔᐃⲆ;
    ΔΔ[Ur.ⲆⵠⵠⵠΔⵠᐃ] = [];
    ΔΔ[Ur.ⲆⵠⵠⵠΔⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔᐃⲆⲆⲆΔ;
    ΔΔ[Ur.ⲆⵠⵠⵠΔⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆᐃⲆⵠΔΔ;
    ΔΔ[Ur.ᐃⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ᐃⵠⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃᐃΔΔⲆⵠ;
    ΔΔ[Ur.ᐃⵠⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔⵠⲆⲆⵠⲆ;
    ΔΔ[Ur.ⵠΔᐃΔᐃⵠᐃ] = [];
    ΔΔ[Ur.ⵠΔᐃΔᐃⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠⵠΔⵠⵠᐃ;
    ΔΔ[Ur.ⵠΔᐃΔᐃⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆᐃⲆⵠⵠᐃ;
    ΔΔ[Ur.ⵠⵠΔⵠⵠΔᐃ] = [];
    ΔΔ[Ur.ⵠⵠΔⵠⵠΔᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆΔΔᐃⵠⲆ;
    ΔΔ[Ur.ⵠⵠΔⵠⵠΔᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⲆΔⲆⲆΔ;
    ΔΔ[Ur.ΔⵠᐃⲆⵠⵠⵠ] = [];
    ΔΔ[Ur.ΔⵠᐃⲆⵠⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔΔΔᐃΔⵠ;
    ΔΔ[Ur.ΔⵠᐃⲆⵠⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠΔᐃⵠⵠΔ;
    ΔΔ[Ur.ⵠΔⲆⲆⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆⲆⵠ][Ur.ᐃΔⵠ] = [ⵠᐃ.ⲆⵠᐃⵠΔⲆⲆ];
    ΔΔ[Ur.ⵠΔⲆⲆⵠ][Ur.ΔΔⵠ] = [ⵠᐃ.ⵠⵠⵠᐃⲆᐃⵠ];
    ΔΔ[Ur.ⵠᐃᐃⲆᐃ] = [];
    ΔΔ[Ur.ⵠᐃᐃⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔᐃⲆᐃᐃΔ;
    ΔΔ[Ur.ⵠᐃᐃⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠⵠᐃⲆⵠⵠ;
    ΔΔ[Ur.ΔΔᐃⵠΔ] = [];
    ΔΔ[Ur.ΔΔᐃⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃᐃⲆᐃΔΔ;
    ΔΔ[Ur.ΔΔᐃⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔΔᐃⲆΔᐃ;
    ΔΔ[Ur.ᐃΔΔᐃⲆ] = [];
    ΔΔ[Ur.ᐃΔΔᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆⲆⵠΔΔ;
    ΔΔ[Ur.ᐃΔΔᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⲆΔΔⵠᐃ;
    ΔΔ[Ur.ΔᐃᐃⵠⲆ] = [];
    ΔΔ[Ur.ΔᐃᐃⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⲆΔΔΔΔ;
    ΔΔ[Ur.ΔᐃᐃⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆⲆΔᐃⲆⵠ;
    ΔΔ[Ur.ᐃⵠᐃⵠⵠ] = [];
    ΔΔ[Ur.ᐃⵠᐃⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠⵠⵠⲆ;
    ΔΔ[Ur.ᐃⵠᐃⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠⲆⲆᐃⲆⲆ;
    ΔΔ[Ur.ⲆⲆⲆΔⵠ] = [];
    ΔΔ[Ur.ⲆⲆⲆΔⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔⵠⲆᐃᐃᐃ;
    ΔΔ[Ur.ⲆⲆⲆΔⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃᐃⲆⵠⵠᐃ;
    ΔΔ[Ur.ⵠⵠⵠⲆⵠ] = [];
    ΔΔ[Ur.ⵠⵠⵠⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⵠΔΔᐃⵠ;
    ΔΔ[Ur.ⵠⵠⵠⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔⵠΔⵠⵠⵠ;
    ΔΔ[Ur.ⵠΔⵠⵠᐃ] = [];
    ΔΔ[Ur.ⵠΔⵠⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠᐃΔΔⲆⵠ;
    ΔΔ[Ur.ⵠΔⵠⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠⲆΔᐃⲆⵠ;
    ΔΔ[Ur.ⲆᐃⵠⲆⵠ] = [];
    ΔΔ[Ur.ⲆᐃⵠⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃΔᐃΔᐃⵠ;
    ΔΔ[Ur.ⲆᐃⵠⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠᐃᐃⵠⲆⵠ;
    ΔΔ[Ur.ΔⵠᐃᐃⵠᐃΔ] = [];
    ΔΔ[Ur.ΔⵠᐃᐃⵠᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃᐃⵠⲆ;
    ΔΔ[Ur.ΔⵠᐃᐃⵠᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⵠᐃΔⲆⵠ;
    ΔΔ[Ur.ᐃⵠΔᐃΔᐃΔ] = [];
    ΔΔ[Ur.ᐃⵠΔᐃΔᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃΔⵠᐃᐃΔ;
    ΔΔ[Ur.ᐃⵠΔᐃΔᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⵠᐃΔⲆⵠ;
    ΔΔ[Ur.ᐃΔⵠⲆΔ] = [];
    ΔΔ[Ur.ᐃΔⵠⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔⲆᐃⲆⵠⵠ;
    ΔΔ[Ur.ᐃΔⵠⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃⵠᐃⲆᐃ;
    ΔΔ[Ur.ᐃⲆⲆⲆⵠⲆⵠ] = ⵠᐃ.ᐃⲆⲆⲆⵠⲆⵠ;
    ΔΔ[Ur.ᐃⲆⲆⵠⵠⵠⲆ] = ⵠᐃ.ᐃⲆⲆⵠⵠⵠⲆ;
    ΔΔ[Ur.ᐃⲆⲆᐃΔ] = [];
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆⵠⲆΔⵠᐃᐃ);
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠᐃΔᐃΔⲆΔ);
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ᐃⵠΔⵠⵠΔᐃ);
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆⲆΔⵠⵠᐃⵠ);
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃⵠⵠⵠᐃᐃⵠ);
    ΔΔ[Ur.ᐃⲆⲆᐃΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⵠⲆΔΔΔΔ);
    ΔΔ[Ur.ΔⲆⲆΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆⵠΔᐃΔΔᐃ);
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔᐃⵠΔⲆᐃΔ);
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠⲆᐃᐃΔᐃᐃ);
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔΔΔⲆⵠᐃᐃ);
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠΔⵠⵠᐃΔΔ);
    ΔΔ[Ur.ΔⲆⲆΔⵠ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆᐃⲆⲆΔⲆΔ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ] = [];
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆᐃᐃⲆⲆⵠΔ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔᐃⲆⵠᐃⵠⵠ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠΔⵠᐃⵠΔΔ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠⵠⵠᐃⲆᐃⲆ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠΔΔΔᐃᐃⵠ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔᐃⵠⲆⲆⲆᐃ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⲆⵠΔᐃΔᐃ);
    ΔΔ[Ur.ᐃᐃⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃᐃᐃΔⵠᐃⵠ);
    ΔΔ[Ur.ΔⵠⵠⲆⲆ] = [];
    ΔΔ[Ur.ΔⵠⵠⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠΔⲆⲆⲆⲆ;
    ΔΔ[Ur.ΔⵠⵠⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⲆⵠⵠ;
    ΔΔ[Ur.ᐃⵠⵠⵠⲆⲆⵠ] = [];
    ΔΔ[Ur.ᐃⵠⵠⵠⲆⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔΔΔⵠᐃⵠ;
    ΔΔ[Ur.ᐃⵠⵠⵠⲆⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔΔⵠⵠΔⵠ;
    ΔΔ[Ur.ⵠᐃΔⲆᐃⲆᐃ] = [];
    ΔΔ[Ur.ⵠᐃΔⲆᐃⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠΔⵠᐃⵠᐃ;
    ΔΔ[Ur.ⵠᐃΔⲆᐃⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠᐃⲆΔⲆⵠΔ;
    ΔΔ[Ur.ⵠΔⲆᐃⲆΔⲆ] = ⵠᐃ.ⵠΔⲆᐃⲆΔⲆ;
    ΔΔ[Ur.ⲆᐃⵠᐃⲆᐃⵠ] = ⵠᐃ.ⲆᐃⵠᐃⲆᐃⵠ;
    ΔΔ[Ur.ᐃΔᐃⵠⵠⵠᐃ] = ⵠᐃ.ᐃΔᐃⵠⵠⵠᐃ;
    ΔΔ[Ur.ᐃⵠⵠⲆⵠ] = [];
    ΔΔ[Ur.ᐃⵠⵠⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃⲆⲆΔᐃⵠ;
    ΔΔ[Ur.ᐃⵠⵠⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⵠᐃᐃΔΔ;
    ΔΔ[Ur.ᐃⵠⵠⲆᐃ] = [];
    ΔΔ[Ur.ᐃⵠⵠⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠΔⲆΔ;
    ΔΔ[Ur.ᐃⵠⵠⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆΔᐃᐃⲆᐃ;
    ΔΔ[Ur.ᐃⲆⲆΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆⲆΔⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆᐃⵠΔᐃΔ;
    ΔΔ[Ur.ᐃⲆⲆΔⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠΔᐃⲆΔⲆ;
    ΔΔ[Ur.ΔⵠⵠⲆⲆᐃⲆ] = [];
    ΔΔ[Ur.ΔⵠⵠⲆⲆᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠΔⲆΔ;
    ΔΔ[Ur.ΔⵠⵠⲆⲆᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆΔᐃᐃⲆᐃ;
    ΔΔ[Ur.ⵠⲆᐃᐃⲆ] = [];
    ΔΔ[Ur.ⵠⲆᐃᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠΔΔⲆᐃⵠ;
    ΔΔ[Ur.ⵠⲆᐃᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⵠⵠᐃΔⵠ;
    ΔΔ[Ur.ᐃⵠⵠᐃⲆ] = [];
    ΔΔ[Ur.ᐃⵠⵠᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⵠⲆⵠΔⲆ;
    ΔΔ[Ur.ᐃⵠⵠᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠΔⵠᐃⲆΔ;
    ΔΔ[Ur.ⵠⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ⵠⵠⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃᐃΔᐃⵠΔ;
    ΔΔ[Ur.ⵠⵠⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆΔΔⲆⲆⵠ;
    ΔΔ[Ur.ΔⲆΔᐃⲆ] = [];
    ΔΔ[Ur.ΔⲆΔᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠᐃᐃⵠⲆᐃ;
    ΔΔ[Ur.ΔⲆΔᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⵠⲆᐃΔⵠ;
    ΔΔ[Ur.ΔⲆⵠⲆᐃ] = [];
    ΔΔ[Ur.ΔⲆⵠⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⲆⵠⲆⲆᐃᐃ;
    ΔΔ[Ur.ΔⲆⵠⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃΔᐃΔⵠΔ;
    ΔΔ[Ur.ⲆᐃⵠᐃΔ] = [];
    ΔΔ[Ur.ⲆᐃⵠᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃᐃⲆⲆΔΔ;
    ΔΔ[Ur.ⲆᐃⵠᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⵠΔΔᐃⵠ;
    ΔΔ[Ur.ⵠⲆⲆᐃᐃ] = [];
    ΔΔ[Ur.ⵠⲆⲆᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔⲆΔⲆⵠᐃ;
    ΔΔ[Ur.ⵠⲆⲆᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆΔΔⵠΔΔ;
    ΔΔ[Ur.ⵠᐃⵠⵠⲆ] = [];
    ΔΔ[Ur.ⵠᐃⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆⲆⲆᐃΔⲆ;
    ΔΔ[Ur.ⵠᐃⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃΔᐃᐃΔ;
    ΔΔ[Ur.ⵠⲆⲆⵠⵠ] = [];
    ΔΔ[Ur.ⵠⲆⲆⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔᐃΔΔⲆΔ;
    ΔΔ[Ur.ⵠⲆⲆⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠᐃΔΔΔΔ;
    ΔΔ[Ur.ΔᐃΔⲆΔ] = [];
    ΔΔ[Ur.ΔᐃΔⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠΔⲆⲆΔΔ;
    ΔΔ[Ur.ΔᐃΔⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆᐃᐃⲆⲆⲆ;
    ΔΔ[Ur.ⵠⲆᐃⲆⵠ] = [];
    ΔΔ[Ur.ⵠⲆᐃⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃΔⵠΔⵠΔ;
    ΔΔ[Ur.ⵠⲆᐃⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔᐃᐃⵠᐃⵠ;
    ΔΔ[Ur.ᐃΔΔΔᐃ] = [];
    ΔΔ[Ur.ᐃΔΔΔᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⲆⲆⲆⵠᐃ;
    ΔΔ[Ur.ᐃΔΔΔᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃⲆΔⲆⵠΔ;
    ΔΔ[Ur.ⵠⲆΔΔⲆ] = [];
    ΔΔ[Ur.ⵠⲆΔΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠⲆᐃΔⲆⵠ;
    ΔΔ[Ur.ⵠⲆΔΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠᐃⲆⵠⲆΔⲆ;
    ΔΔ[Ur.ΔΔⲆⲆⵠ] = [];
    ΔΔ[Ur.ΔΔⲆⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠΔⵠⵠⲆΔ;
    ΔΔ[Ur.ΔΔⲆⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃⲆΔⵠᐃΔ;
    ΔΔ[Ur.ᐃⲆⵠⵠΔ] = [];
    ΔΔ[Ur.ᐃⲆⵠⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔⵠⵠⲆⲆΔ;
    ΔΔ[Ur.ᐃⲆⵠⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆᐃΔᐃᐃⵠ;
    ΔΔ[Ur.ᐃᐃΔᐃᐃ] = [];
    ΔΔ[Ur.ᐃᐃΔᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⲆⲆⲆᐃⵠⵠ;
    ΔΔ[Ur.ᐃᐃΔᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠᐃᐃᐃⲆΔ;
    ΔΔ[Ur.ⲆⲆᐃⵠᐃ] = [];
    ΔΔ[Ur.ⲆⲆᐃⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔΔΔⵠⵠᐃ;
    ΔΔ[Ur.ⲆⲆᐃⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⵠⲆⵠΔΔ;
    ΔΔ[Ur.ΔΔⵠⲆⲆ] = [];
    ΔΔ[Ur.ΔΔⵠⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠⲆⲆⵠΔᐃ;
    ΔΔ[Ur.ΔΔⵠⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆⲆΔⲆⲆΔ;
    ΔΔ[Ur.Ⲇⵠᐃᐃⵠ] = [];
    ΔΔ[Ur.Ⲇⵠᐃᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆⲆⲆΔᐃ;
    ΔΔ[Ur.Ⲇⵠᐃᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔΔⲆᐃᐃΔ;
    ΔΔ[Ur.ⵠΔⲆⵠᐃ] = [];
    ΔΔ[Ur.ⵠΔⲆⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃΔⵠⵠⵠⵠ;
    ΔΔ[Ur.ⵠΔⲆⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔⲆᐃΔⵠΔ;
    ΔΔ[Ur.ⵠⲆΔⵠᐃ] = [];
    ΔΔ[Ur.ⵠⲆΔⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔΔⵠΔⵠΔ;
    ΔΔ[Ur.ⵠⲆΔⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃΔⵠᐃⲆᐃ;
    ΔΔ[Ur.ΔⵠⵠΔⲆ] = [];
    ΔΔ[Ur.ΔⵠⵠΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⲆᐃΔΔⵠᐃ;
    ΔΔ[Ur.ΔⵠⵠΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⵠᐃⵠᐃⲆ;
    ΔΔ[Ur.ᐃᐃΔⵠᐃ] = [];
    ΔΔ[Ur.ᐃᐃΔⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⵠⵠᐃⲆⲆ;
    ΔΔ[Ur.ᐃᐃΔⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃΔΔΔᐃⵠ;
    ΔΔ[Ur.ᐃΔᐃᐃⲆ] = [];
    ΔΔ[Ur.ᐃΔᐃᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠᐃⵠⲆⲆΔ;
    ΔΔ[Ur.ᐃΔᐃᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⵠΔⵠΔⵠ;
    ΔΔ[Ur.ⵠⵠⵠΔⲆ] = [];
    ΔΔ[Ur.ⵠⵠⵠΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⲆᐃΔⲆⲆ;
    ΔΔ[Ur.ⵠⵠⵠΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠⲆⵠⲆⲆⲆ;
    ΔΔ[Ur.ⵠᐃⲆⵠᐃ] = [];
    ΔΔ[Ur.ⵠᐃⲆⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⵠᐃᐃⲆⵠ;
    ΔΔ[Ur.ⵠᐃⲆⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃᐃᐃΔᐃⵠ;
    ΔΔ[Ur.ᐃⲆΔΔⲆ] = [];
    ΔΔ[Ur.ᐃⲆΔΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃΔⵠΔΔΔ;
    ΔΔ[Ur.ᐃⲆΔΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆᐃⲆᐃⵠΔ;
    ΔΔ[Ur.ⵠⵠⵠᐃΔ] = [];
    ΔΔ[Ur.ⵠⵠⵠᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⲆᐃᐃⲆΔⲆ;
    ΔΔ[Ur.ⵠⵠⵠᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔΔⵠⵠⲆΔ;
    ΔΔ[Ur.ⵠⲆΔⲆⲆ] = [];
    ΔΔ[Ur.ⵠⲆΔⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⲆⵠⲆⲆⵠ;
    ΔΔ[Ur.ⵠⲆΔⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃᐃⲆⲆⵠⲆ;
    ΔΔ[Ur.ⲆⵠⲆΔⲆ] = [];
    ΔΔ[Ur.ⲆⵠⲆΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔⲆᐃᐃⲆⲆ;
    ΔΔ[Ur.ⲆⵠⲆΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔⲆⲆⵠⲆⵠ;
    ΔΔ[Ur.ΔⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ΔⵠⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆΔⲆΔΔΔ;
    ΔΔ[Ur.ΔⵠⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⲆⵠΔΔᐃ;
    ΔΔ[Ur.ⲆᐃᐃⵠⲆ] = [];
    ΔΔ[Ur.ⲆᐃᐃⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠΔᐃⲆᐃⵠ;
    ΔΔ[Ur.ⲆᐃᐃⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃΔⲆⲆᐃᐃ;
    ΔΔ[Ur.ΔΔⲆΔΔ] = [];
    ΔΔ[Ur.ΔΔⲆΔΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⲆΔⲆⲆᐃⵠ;
    ΔΔ[Ur.ΔΔⲆΔΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆᐃⵠⲆⲆⲆ;
    ΔΔ[Ur.ⲆᐃⲆΔⵠ] = [];
    ΔΔ[Ur.ⲆᐃⲆΔⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠΔⵠⲆ;
    ΔΔ[Ur.ⲆᐃⲆΔⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆΔΔΔⵠᐃ;
    ΔΔ[Ur.ΔΔΔΔⵠ] = [];
    ΔΔ[Ur.ΔΔΔΔⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃⲆⲆⲆⵠⲆ;
    ΔΔ[Ur.ΔΔΔΔⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆⲆⵠΔᐃⵠ;
    ΔΔ[Ur.ᐃⵠⲆⵠᐃ] = [];
    ΔΔ[Ur.ᐃⵠⲆⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.Ⲇⵠⵠⵠᐃᐃᐃ;
    ΔΔ[Ur.ᐃⵠⲆⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠⵠⲆⵠᐃᐃ;
    ΔΔ[Ur.ΔᐃΔⵠᐃ] = [];
    ΔΔ[Ur.ΔᐃΔⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆⵠⵠⵠᐃΔ;
    ΔΔ[Ur.ΔᐃΔⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃⲆᐃΔᐃᐃ;
    ΔΔ[Ur.ⵠΔⲆΔⵠⲆΔ] = [];
    ΔΔ[Ur.ⵠΔⲆΔⵠⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆΔΔⲆΔ;
    ΔΔ[Ur.ⵠΔⲆΔⵠⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⲆΔⵠⲆⵠ;
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ] = [];
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔⵠᐃᐃᐃᐃⲆΔᐃ);
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆΔᐃᐃⲆⵠⵠⲆᐃ);
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆΔᐃᐃⲆⵠⵠⲆᐃ);
    ΔΔ[Ur.ΔⵠⵠⵠᐃΔⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃΔΔᐃⲆᐃΔᐃᐃ);
    ΔΔ[Ur.ΔⲆⲆΔⲆ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠᐃᐃΔᐃΔᐃ);
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔⵠⲆΔⵠΔᐃ);
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆⵠᐃⲆΔᐃⲆ);
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠᐃΔⲆⵠⲆⲆ);
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆⲆⲆⲆⵠᐃⲆ);
    ΔΔ[Ur.ΔⲆⲆΔⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆⵠᐃⵠΔⲆⵠ);
    ΔΔ[Ur.ΔⵠⲆⲆⵠ] = [];
    ΔΔ[Ur.ΔⵠⲆⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠᐃⲆⲆⵠΔ;
    ΔΔ[Ur.ΔⵠⲆⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⲆᐃΔⵠΔ;
    ΔΔ[Ur.ⲆⲆⵠⵠⲆ] = [];
    ΔΔ[Ur.ⲆⲆⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆΔΔⵠᐃ;
    ΔΔ[Ur.ⲆⲆⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔΔⲆⲆⲆⵠ;
    ΔΔ[Ur.ᐃⲆⲆΔΔ] = [];
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔᐃⵠᐃⵠⵠⲆ);
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔⲆⲆᐃⵠⵠΔ);
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆᐃΔΔⲆᐃΔ);
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⲆⵠⵠᐃⵠᐃ);
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠⵠᐃⲆᐃⲆᐃ);
    ΔΔ[Ur.ᐃⲆⲆΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠⵠᐃⵠᐃⵠⲆ);
    ΔΔ[Ur.ⵠΔⲆΔ] = [];
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ᐃᐃⲆⲆΔᐃΔ);
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠⵠΔⵠⲆⵠⵠ);
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔᐃΔⲆⲆΔᐃ);
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔᐃⵠᐃⲆΔⲆ);
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆⲆΔⵠᐃΔΔ);
    ΔΔ[Ur.ⵠΔⲆΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃΔΔⵠⵠⲆⲆ);
    ΔΔ[Ur.ΔΔⵠΔΔ] = [];
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠⵠⲆⲆⲆᐃⲆ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔΔΔⲆᐃⲆᐃ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ᐃⵠᐃⲆΔᐃΔ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ᐃⲆⵠⲆΔΔⵠ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠⲆⵠⲆⵠⵠⵠ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠⲆΔΔᐃᐃΔ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃᐃⲆᐃⲆᐃᐃ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⲆⲆᐃⲆⲆⲆ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆᐃΔᐃⵠᐃΔ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃⲆΔⵠΔΔⲆ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠⲆᐃᐃΔⵠΔ);
    ΔΔ[Ur.ΔΔⵠΔΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠⵠⵠᐃⵠⵠⵠ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ] = [];
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔΔΔΔΔᐃᐃ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ].push(ⵠᐃ.Ⲇⵠⵠᐃᐃᐃᐃ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠᐃΔᐃᐃⵠⵠ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆⵠⲆⲆΔᐃᐃ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔΔᐃᐃᐃⲆⲆ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆΔⲆᐃⲆΔΔ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠᐃΔᐃⲆᐃⲆ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⵠᐃΔⵠⲆⲆ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃⲆⵠΔΔⵠΔ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ].push(ⵠᐃ.Δⵠᐃᐃⵠᐃⵠ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆⵠⲆΔⵠⵠᐃ);
    ΔΔ[Ur.ⵠⲆᐃⵠᐃ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃΔΔⵠΔᐃᐃ);
    ΔΔ[Ur.ΔⵠⲆⲆᐃⲆⵠ] = [];
    ΔΔ[Ur.ΔⵠⲆⲆᐃⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠⲆⲆⲆΔᐃ;
    ΔΔ[Ur.ΔⵠⲆⲆᐃⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃⵠⵠΔⲆ;
    ΔΔ[Ur.ΔⲆⵠᐃⲆΔᐃ] = ⵠᐃ.ⵠᐃΔⲆᐃᐃⵠ;
    ΔΔ[Ur.ⵠᐃᐃᐃΔ] = [];
    ΔΔ[Ur.ⵠᐃᐃᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠⲆᐃⲆᐃⵠΔᐃ;
    ΔΔ[Ur.ⵠᐃᐃᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃⵠⵠⵠⵠᐃΔΔ;
    ΔΔ[Ur.ⲆⵠⵠᐃΔ] = [];
    ΔΔ[Ur.ⲆⵠⵠᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⲆⵠⵠⲆΔ;
    ΔΔ[Ur.ⲆⵠⵠᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⲆⲆⲆⵠⲆ;
    ΔΔ[Ur.ⵠⲆⵠⵠⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⵠⵠⵠΔᐃ;
    ΔΔ[Ur.ⵠⲆⵠⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠᐃⵠⲆᐃⵠ;
    ΔΔ[Ur.ⵠᐃⵠⵠΔ] = [];
    ΔΔ[Ur.ⵠᐃⵠⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⵠⵠΔⲆᐃ;
    ΔΔ[Ur.ⵠᐃⵠⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⲆᐃΔΔⲆ;
    ΔΔ[Ur.ⲆΔⵠⵠᐃ] = [];
    ΔΔ[Ur.ⲆΔⵠⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔᐃᐃᐃᐃⵠ;
    ΔΔ[Ur.ⲆΔⵠⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠᐃᐃⵠⵠⲆ;
    ΔΔ[Ur.ΔᐃᐃⲆΔⵠⵠ] = ⵠᐃ.ΔᐃᐃⲆΔⵠⵠ;
    ΔΔ[Ur.ⵠΔᐃⵠᐃΔᐃ] = [];
    ΔΔ[Ur.ⵠΔᐃⵠᐃΔᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔᐃⵠΔⲆⲆ;
    ΔΔ[Ur.ⵠΔᐃⵠᐃΔᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔΔΔⲆΔⵠ;
    ΔΔ[Ur.ᐃΔΔᐃᐃᐃΔ] = [];
    ΔΔ[Ur.ᐃΔΔᐃᐃᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⵠᐃⲆΔⲆ;
    ΔΔ[Ur.ᐃΔΔᐃᐃᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆᐃΔΔⵠΔ;
    ΔΔ[Ur.ᐃⲆΔᐃⲆⵠⵠ] = ⵠᐃ.ᐃⲆΔᐃⲆⵠⵠ;
    ΔΔ[Ur.ⵠⲆᐃⲆΔΔⲆ] = ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ;
    ΔΔ[Ur.ΔΔⲆᐃⲆᐃⵠ] = ⵠᐃ.ΔΔⲆᐃⲆᐃⵠ;
    ΔΔ[Ur.ΔΔᐃᐃⵠᐃⲆ] = [];
    ΔΔ[Ur.ΔΔᐃᐃⵠᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⲆⲆΔⲆⲆⵠ;
    ΔΔ[Ur.ΔΔᐃᐃⵠᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⵠⵠⵠΔⵠ;
    ΔΔ[Ur.ⵠᐃⲆᐃΔᐃⵠ] = [];
    ΔΔ[Ur.ⵠᐃⲆᐃΔᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠⵠⵠⵠᐃⲆ;
    ΔΔ[Ur.ⵠᐃⲆᐃΔᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆᐃⵠΔᐃⵠ;
    ΔΔ[Ur.ⲆⲆⲆⵠΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆⲆⲆⵠΔᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔΔΔⲆᐃᐃ;
    ΔΔ[Ur.ⲆⲆⲆⵠΔᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆᐃⵠΔᐃᐃ;
    ΔΔ[Ur.ΔⵠⵠΔⵠᐃⲆ] = ⵠᐃ.ΔⵠⵠΔⵠᐃⲆ;
    ΔΔ[Ur.ⵠΔΔᐃᐃⵠⵠ] = ⵠᐃ.ⵠΔΔᐃᐃⵠⵠ;
    ΔΔ[Ur.ⲆⲆⵠᐃᐃⲆΔ] = ⵠᐃ.ⲆⲆⵠᐃᐃⲆΔ;
    ΔΔ[Ur.ΔΔΔᐃΔⲆΔ] = [];
    ΔΔ[Ur.ΔΔΔᐃΔⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆⵠⲆᐃⵠΔ;
    ΔΔ[Ur.ΔΔΔᐃΔⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠᐃⵠⲆΔΔⲆ;
    ΔΔ[Ur.ΔΔⵠᐃⵠΔᐃ] = [];
    ΔΔ[Ur.ΔΔⵠᐃⵠΔᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃᐃΔᐃⲆⵠ;
    ΔΔ[Ur.ΔΔⵠᐃⵠΔᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠⵠⵠⵠΔΔ;
    ΔΔ[Ur.ΔΔΔᐃⵠ] = [];
    ΔΔ[Ur.ΔΔΔᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⵠⵠⵠⲆⵠ;
    ΔΔ[Ur.ΔΔΔᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⵠΔᐃᐃΔ;
    ΔΔ[Ur.ΔⵠⵠⵠⵠΔΔ] = [];
    ΔΔ[Ur.ΔⵠⵠⵠⵠΔΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔᐃΔΔⵠΔ;
    ΔΔ[Ur.ΔⵠⵠⵠⵠΔΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆⵠⵠⵠⲆΔ;
    ΔΔ[Ur.ⵠΔⵠᐃΔΔΔ] = [];
    ΔΔ[Ur.ⵠΔⵠᐃΔΔΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⲆⲆⵠⲆᐃⵠ;
    ΔΔ[Ur.ⵠΔⵠᐃΔΔΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃΔⵠⲆ;
    ΔΔ[Ur.ᐃⲆⵠⵠᐃⵠⲆ] = [];
    ΔΔ[Ur.ᐃⲆⵠⵠᐃⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃⲆᐃΔΔᐃ;
    ΔΔ[Ur.ᐃⲆⵠⵠᐃⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔᐃⲆᐃΔᐃ;
    ΔΔ[Ur.ΔⲆⲆΔⵠⲆⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⵠⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⲆᐃⵠᐃΔΔ;
    ΔΔ[Ur.ΔⲆⲆΔⵠⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔᐃⵠⲆⵠᐃ;
    ΔΔ[Ur.ⵠΔΔⲆΔΔⵠ] = ⵠᐃ.ⵠΔΔⲆΔΔⵠ;
    ΔΔ[Ur.ΔᐃΔᐃΔᐃⲆ] = ⵠᐃ.ΔᐃΔᐃΔᐃⲆ;
    ΔΔ[Ur.ᐃΔⵠⲆΔΔⲆ] = ⵠᐃ.ᐃΔⵠⲆΔΔⲆ;
    ΔΔ[Ur.ⲆᐃⲆΔΔΔⲆ] = ⵠᐃ.ⲆᐃⲆΔΔΔⲆ;
    ΔΔ[Ur.ΔⵠᐃᐃΔΔΔ] = ⵠᐃ.ΔⵠᐃᐃΔΔΔ;
    ΔΔ[Ur.ⲆⲆΔΔΔΔⲆ] = ⵠᐃ.ⲆⲆΔΔΔΔⲆ;
    ΔΔ[Ur.ⲆⵠΔᐃΔΔⲆ] = [];
    ΔΔ[Ur.ⲆⵠΔᐃΔΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔⵠᐃⵠⲆⲆ;
    ΔΔ[Ur.ⲆⵠΔᐃΔΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔⵠⵠⵠⲆⲆ;
    ΔΔ[Ur.ΔⲆⲆⲆⲆ] = [];
    ΔΔ[Ur.ΔⲆⲆⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃⵠⲆᐃΔᐃ;
    ΔΔ[Ur.ΔⲆⲆⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃⲆᐃⲆⵠⵠ;
    ΔΔ[Ur.ᐃⲆⲆΔⲆ] = [];
    ΔΔ[Ur.ᐃⲆⲆΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⵠⲆΔΔⲆ;
    ΔΔ[Ur.ᐃⲆⲆΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃⲆⵠᐃⲆΔ;
    ΔΔ[Ur.ΔⵠⵠΔΔⲆⵠ] = [];
    ΔΔ[Ur.ΔⵠⵠΔΔⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠΔⲆⲆⵠΔ;
    ΔΔ[Ur.ΔⵠⵠΔΔⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⲆᐃΔᐃⵠ;
    ΔΔ[Ur.ΔΔⲆⵠⵠⲆᐃ] = ⵠᐃ.ΔΔⲆⵠⵠⲆᐃ;
    ΔΔ[Ur.ⵠΔΔΔΔⵠⲆ] = ⵠᐃ.ⵠΔΔΔΔⵠⲆ;
    ΔΔ[Ur.ⲆⵠΔᐃⲆⵠΔ] = [];
    ΔΔ[Ur.ⲆⵠΔᐃⲆⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔᐃΔⲆⵠⵠ;
    ΔΔ[Ur.ⲆⵠΔᐃⲆⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃⵠⲆⵠⲆ;
    ΔΔ[Ur.ᐃΔᐃᐃⵠ] = [];
    ΔΔ[Ur.ᐃΔᐃᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆⵠⵠⲆᐃ;
    ΔΔ[Ur.ᐃΔᐃᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠΔᐃⲆⵠⲆ;
    ΔΔ[Ur.ΔⲆᐃΔⵠΔΔ] = [];
    ΔΔ[Ur.ΔⲆᐃΔⵠΔΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆΔΔᐃΔ;
    ΔΔ[Ur.ΔⲆᐃΔⵠΔΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆΔΔⲆⲆⵠ;
    ΔΔ[Ur.ⵠⵠⲆᐃⲆΔⲆ] = [];
    ΔΔ[Ur.ⵠⵠⲆᐃⲆΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃᐃⲆⲆΔⵠ;
    ΔΔ[Ur.ⵠⵠⲆᐃⲆΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⲆⲆΔ;
    ΔΔ[Ur.ⲆΔΔⵠᐃⵠⵠ] = [];
    ΔΔ[Ur.ⲆΔΔⵠᐃⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃᐃⵠΔⵠⲆ;
    ΔΔ[Ur.ⲆΔΔⵠᐃⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃΔⲆⲆⲆⵠ;
    ΔΔ[Ur.ΔⵠᐃΔᐃΔⲆ] = [];
    ΔΔ[Ur.ΔⵠᐃΔᐃΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃᐃΔⵠⲆΔ;
    ΔΔ[Ur.ΔⵠᐃΔᐃΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃⵠΔⵠⵠ;
    ΔΔ[Ur.ⵠⵠⵠⲆⲆⲆᐃ] = [];
    ΔΔ[Ur.ⵠⵠⵠⲆⲆⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⲆᐃⲆⵠⵠⵠ;
    ΔΔ[Ur.ⵠⵠⵠⲆⲆⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠⲆΔⵠᐃⲆ;
    ΔΔ[Ur.ⲆⲆⵠᐃᐃⲆᐃ] = [];
    ΔΔ[Ur.ⲆⲆⵠᐃᐃⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔⵠᐃᐃⵠΔ;
    ΔΔ[Ur.ⲆⲆⵠᐃᐃⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⲆᐃΔΔⲆ;
    ΔΔ[Ur.ΔᐃᐃⵠΔⲆΔ] = [];
    ΔΔ[Ur.ΔᐃᐃⵠΔⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⵠΔᐃⵠⵠ;
    ΔΔ[Ur.ΔᐃᐃⵠΔⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠⲆⵠⵠΔΔ;
    ΔΔ[Ur.ⲆᐃⵠⲆᐃᐃⵠ] = ⵠᐃ.ⲆᐃⵠⲆᐃᐃⵠ;
    ΔΔ[Ur.ⲆⲆΔΔΔⵠΔ] = ⵠᐃ.ⲆⲆΔΔΔⵠΔ;
    ΔΔ[Ur.ⵠᐃΔⵠⵠⵠⲆ] = ⵠᐃ.ⵠᐃΔⵠⵠⵠⲆ;
    ΔΔ[Ur.ΔΔᐃⲆΔᐃⲆ] = [];
    ΔΔ[Ur.ΔΔᐃⲆΔᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔᐃⵠᐃⵠᐃ;
    ΔΔ[Ur.ΔΔᐃⲆΔᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔᐃⵠⵠⲆᐃ;
    ΔΔ[Ur.ᐃΔⲆᐃⲆ] = [];
    ΔΔ[Ur.ᐃΔⲆᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃⵠⲆᐃ;
    ΔΔ[Ur.ᐃΔⲆᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⵠⲆⵠΔⲆ;
    ΔΔ[Ur.ⵠⲆⵠᐃΔᐃᐃ] = [];
    ΔΔ[Ur.ⵠⲆⵠᐃΔᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆᐃⵠⲆᐃⲆ;
    ΔΔ[Ur.ⵠⲆⵠᐃΔᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆᐃᐃⵠⲆⵠ;
    ΔΔ[Ur.ᐃⵠᐃⲆⵠⵠⵠ] = [];
    ΔΔ[Ur.ᐃⵠᐃⲆⵠⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠⵠᐃΔⲆⵠ;
    ΔΔ[Ur.ᐃⵠᐃⲆⵠⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠΔⲆⵠᐃᐃ;
    ΔΔ[Ur.ⵠΔⲆⲆⵠᐃⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆⲆⵠᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠΔⲆᐃΔⵠ;
    ΔΔ[Ur.ⵠΔⲆⲆⵠᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃᐃⲆᐃⵠᐃ;
    ΔΔ[Ur.ⲆΔⵠⲆᐃⲆⲆ] = [];
    ΔΔ[Ur.ⲆΔⵠⲆᐃⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃᐃΔΔΔᐃ;
    ΔΔ[Ur.ⲆΔⵠⲆᐃⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃⲆΔᐃⵠΔ;
    ΔΔ[Ur.ⲆⲆⵠΔᐃΔⲆ] = [];
    ΔΔ[Ur.ⲆⲆⵠΔᐃΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⲆⲆᐃᐃᐃ;
    ΔΔ[Ur.ⲆⲆⵠΔᐃΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃΔᐃΔΔ;
    ΔΔ[Ur.ⲆⵠⵠΔΔⲆⲆ] = [];
    ΔΔ[Ur.ⲆⵠⵠΔΔⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔΔⵠⵠᐃᐃ;
    ΔΔ[Ur.ⲆⵠⵠΔΔⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆⵠᐃΔΔⲆ;
    ΔΔ[Ur.ⲆⲆΔⵠΔⵠᐃ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠΔⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆᐃᐃⲆᐃⲆ;
    ΔΔ[Ur.ⲆⲆΔⵠΔⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠⲆᐃⲆᐃΔ;
    ΔΔ[Ur.ΔᐃΔΔⲆᐃⵠ] = ⵠᐃ.ΔᐃΔΔⲆᐃⵠ;
    ΔΔ[Ur.ΔΔⵠΔⵠΔⵠ] = ⵠᐃ.ΔΔⵠΔⵠΔⵠ;
    ΔΔ[Ur.ΔΔΔⵠᐃᐃⲆ] = ⵠᐃ.ΔΔΔⵠᐃᐃⲆ;
    ΔΔ[Ur.ⲆᐃⵠΔΔⲆᐃ] = [];
    ΔΔ[Ur.ⲆᐃⵠΔΔⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⵠⵠⲆΔⵠ;
    ΔΔ[Ur.ⲆᐃⵠΔΔⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠᐃΔⲆΔᐃ;
    ΔΔ[Ur.ⲆⵠΔΔⲆ] = [];
    ΔΔ[Ur.ⲆⵠΔΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⵠⲆⵠᐃΔ;
    ΔΔ[Ur.ⲆⵠΔΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆᐃᐃⲆΔᐃᐃ;
    ΔΔ[Ur.ΔⵠⲆΔⵠᐃⵠ] = ⵠᐃ.ΔⵠⲆΔⵠᐃⵠ;
    ΔΔ[Ur.ⵠⲆΔⵠⲆⵠⲆ] = [];
    ΔΔ[Ur.ⵠⲆΔⵠⲆⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃᐃⵠᐃⲆⵠ;
    ΔΔ[Ur.ⵠⲆΔⵠⲆⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠᐃᐃᐃⲆᐃ;
    ΔΔ[Ur.ⲆⲆᐃᐃΔᐃᐃ] = [];
    ΔΔ[Ur.ⲆⲆᐃᐃΔᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠᐃΔⵠᐃΔ;
    ΔΔ[Ur.ⲆⲆᐃᐃΔᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔⲆΔⲆᐃⵠ;
    ΔΔ[Ur.ᐃⵠⲆΔΔⲆⵠ] = [];
    ΔΔ[Ur.ᐃⵠⲆΔΔⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔⲆⲆᐃⲆⵠ;
    ΔΔ[Ur.ᐃⵠⲆΔΔⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠᐃⵠᐃⵠΔ;
    ΔΔ[Ur.ⲆⲆΔᐃᐃᐃᐃ] = [];
    ΔΔ[Ur.ⲆⲆΔᐃᐃᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⵠⲆⵠⵠΔⲆ;
    ΔΔ[Ur.ⲆⲆΔᐃᐃᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔΔⲆᐃᐃⲆ;
    ΔΔ[Ur.ⵠⵠⵠΔᐃΔᐃ] = [];
    ΔΔ[Ur.ⵠⵠⵠΔᐃΔᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔΔᐃⲆⵠΔ;
    ΔΔ[Ur.ⵠⵠⵠΔᐃΔᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠⲆΔⲆΔⵠ;
    ΔΔ[Ur.ΔᐃΔᐃⵠᐃᐃ] = [];
    ΔΔ[Ur.ΔᐃΔᐃⵠᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⵠΔⵠⲆⵠ;
    ΔΔ[Ur.ΔᐃΔᐃⵠᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃΔⵠΔ;
    ΔΔ[Ur.ΔᐃᐃΔⵠΔⲆ] = [];
    ΔΔ[Ur.ΔᐃᐃΔⵠΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠΔⵠΔᐃᐃ;
    ΔΔ[Ur.ΔᐃᐃΔⵠΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠᐃΔⲆⵠⲆ;
    ΔΔ[Ur.ⲆΔⲆΔⵠᐃⲆ] = [];
    ΔΔ[Ur.ⲆΔⲆΔⵠᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃⵠⲆᐃⵠⲆ;
    ΔΔ[Ur.ⲆΔⲆΔⵠᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃᐃⲆⲆᐃᐃ;
    ΔΔ[Ur.ⲆⵠⲆΔΔᐃⵠ] = [];
    ΔΔ[Ur.ⲆⵠⲆΔΔᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃᐃᐃⲆⲆᐃ;
    ΔΔ[Ur.ⲆⵠⲆΔΔᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔᐃᐃᐃΔΔ;
    ΔΔ[Ur.ᐃⲆᐃⵠⵠΔΔ] = ⵠᐃ.ᐃⲆᐃⵠⵠΔΔ;
    ΔΔ[Ur.ⲆΔⲆⲆⵠⲆⵠ] = ⵠᐃ.ⲆΔⲆⲆⵠⲆⵠ;
    ΔΔ[Ur.ΔΔᐃΔⲆⵠᐃ] = ⵠᐃ.ΔΔᐃΔⲆⵠᐃ;
    ΔΔ[Ur.ᐃΔᐃⵠᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃΔᐃⵠᐃΔⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⵠΔⵠⵠᐃ;
    ΔΔ[Ur.ᐃΔᐃⵠᐃΔⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔᐃⵠΔⵠⵠ;
    ΔΔ[Ur.ⲆΔⲆᐃΔ] = [];
    ΔΔ[Ur.ⲆΔⲆᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃⵠΔⲆᐃᐃ;
    ΔΔ[Ur.ⲆΔⲆᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠΔⵠΔᐃΔ;
    ΔΔ[Ur.ⵠΔⵠᐃΔⵠᐃ] = ⵠᐃ.ⵠΔⵠᐃΔⵠᐃ;
    ΔΔ[Ur.ⲆΔⲆᐃⵠⲆⵠ] = [];
    ΔΔ[Ur.ⲆΔⲆᐃⵠⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆᐃⲆⵠΔⲆ;
    ΔΔ[Ur.ⲆΔⲆᐃⵠⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃΔΔᐃᐃⵠ;
    ΔΔ[Ur.ⵠΔⲆᐃᐃⲆΔ] = [];
    ΔΔ[Ur.ⵠΔⲆᐃᐃⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠᐃΔᐃⵠⵠ;
    ΔΔ[Ur.ⵠΔⲆᐃᐃⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃⵠΔᐃⲆⲆ;
    ΔΔ[Ur.ΔⵠⲆⲆΔⵠΔ] = [];
    ΔΔ[Ur.ΔⵠⲆⲆΔⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔⲆⲆΔΔΔ;
    ΔΔ[Ur.ΔⵠⲆⲆΔⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⲆⲆΔΔⵠⲆ;
    ΔΔ[Ur.ΔᐃⵠⲆⵠⵠⲆ] = [];
    ΔΔ[Ur.ΔᐃⵠⲆⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⵠΔⲆ;
    ΔΔ[Ur.ΔᐃⵠⲆⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⵠⲆⵠᐃᐃ;
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⵠⵠ] = [];
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔⵠᐃΔⵠᐃ;
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠΔⵠΔⵠᐃ;
    ΔΔ[Ur.ΔⲆⲆΔⵠⵠᐃ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⵠⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⵠΔⲆⲆᐃ;
    ΔΔ[Ur.ΔⲆⲆΔⵠⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⲆᐃⵠⵠᐃ;
    ΔΔ[Ur.ⲆⵠΔΔΔⵠΔ] = [];
    ΔΔ[Ur.ⲆⵠΔΔΔⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃΔⵠᐃΔΔ;
    ΔΔ[Ur.ⲆⵠΔΔΔⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠᐃΔⲆⲆᐃᐃ;
    ΔΔ[Ur.ᐃⵠⲆΔⵠⲆᐃ] = [];
    ΔΔ[Ur.ᐃⵠⲆΔⵠⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆᐃⲆⲆΔᐃ;
    ΔΔ[Ur.ᐃⵠⲆΔⵠⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⵠⵠⲆΔᐃ;
    ΔΔ[Ur.ᐃⵠⲆⲆΔⲆⵠ] = [];
    ΔΔ[Ur.ᐃⵠⲆⲆΔⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠᐃⵠᐃΔᐃⵠ;
    ΔΔ[Ur.ᐃⵠⲆⲆΔⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠⵠΔⲆⵠⵠ;
    ΔΔ[Ur.ΔⲆᐃⵠΔⵠⲆ] = ⵠᐃ.ΔⲆᐃⵠΔⵠⲆ;
    ΔΔ[Ur.ᐃⵠⵠⵠⵠᐃᐃ] = ⵠᐃ.ᐃⵠⵠⵠⵠᐃᐃ;
    ΔΔ[Ur.ⲆᐃᐃⲆΔⵠⵠ] = ⵠᐃ.ⲆᐃᐃⲆΔⵠⵠ;
    ΔΔ[Ur.ⵠΔᐃⵠᐃ] = [];
    ΔΔ[Ur.ⵠΔᐃⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃΔᐃΔⵠⵠ;
    ΔΔ[Ur.ⵠΔᐃⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆᐃΔΔⵠΔ;
    ΔΔ[Ur.ⵠⲆΔⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ⵠⲆΔⵠⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⲆⲆⵠ;
    ΔΔ[Ur.ⵠⲆΔⵠⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⲆⲆΔⲆⲆ;
    ΔΔ[Ur.ⲆΔⵠᐃΔᐃΔ] = [];
    ΔΔ[Ur.ⲆΔⵠᐃΔᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆΔⲆⵠΔᐃ;
    ΔΔ[Ur.ⲆΔⵠᐃΔᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠⲆⲆⵠⲆΔ;
    ΔΔ[Ur.ⵠⲆⲆᐃΔΔΔ] = [];
    ΔΔ[Ur.ⵠⲆⲆᐃΔΔΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆⲆᐃΔΔΔ;
    ΔΔ[Ur.ⵠⲆⲆᐃΔΔΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⲆᐃΔΔΔ;
    ΔΔ[Ur.ΔᐃⲆⵠⲆⵠᐃ] = [];
    ΔΔ[Ur.ΔᐃⲆⵠⲆⵠᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃⲆⵠⲆⵠᐃ;
    ΔΔ[Ur.ΔᐃⲆⵠⲆⵠᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃⲆⵠⲆⵠᐃ;
    ΔΔ[Ur.ⵠⲆᐃⵠⲆⲆΔ] = [];
    ΔΔ[Ur.ⵠⲆᐃⵠⲆⲆΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆᐃⵠⲆⲆΔ;
    ΔΔ[Ur.ⵠⲆᐃⵠⲆⲆΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆᐃⵠⲆⲆΔ;
    ΔΔ[Ur.ⲆΔⵠⲆΔΔΔ] = ⵠᐃ.ⲆΔⵠⲆΔΔΔ;
    ΔΔ[Ur.ⵠΔⲆᐃⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⲆⲆⵠⲆᐃ;
    ΔΔ[Ur.ⵠΔⲆᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆᐃᐃΔⵠⲆ;
    ΔΔ[Ur.ⲆⵠᐃⵠΔ] = [];
    ΔΔ[Ur.ⲆⵠᐃⵠΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆⲆⲆΔΔⵠ;
    ΔΔ[Ur.ⲆⵠᐃⵠΔ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃΔᐃⵠⲆᐃ;
    ΔΔ[Ur.ⵠⲆᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆᐃΔⵠ][Ur.ᐃΔⵠ] = [ⵠᐃ.ⵠᐃⵠᐃⵠΔᐃ, ⵠᐃ.ⵠⲆⵠⵠΔᐃⵠ, ⵠᐃ.ⲆΔΔⵠΔⵠΔ, ⵠᐃ.ᐃᐃⵠⵠᐃⲆⲆ, ⵠᐃ.ⲆΔⲆᐃΔⲆⲆ, ⵠᐃ.ΔᐃΔⵠΔΔΔ, ⵠᐃ.ⲆΔⲆⵠⲆⲆⵠ, ⵠᐃ.ΔⲆΔⲆΔΔΔ, ⵠᐃ.ⲆⲆΔⲆⲆᐃⵠ];
    ΔΔ[Ur.ⵠⲆᐃΔⵠ][Ur.ΔΔⵠ] = [ⵠᐃ.ᐃΔΔⵠⲆᐃⵠ, ⵠᐃ.ᐃⵠᐃⵠᐃⲆⲆ, ⵠᐃ.ⲆᐃΔⵠᐃⲆᐃ, ⵠᐃ.ⲆᐃΔΔΔᐃⵠ, ⵠᐃ.ᐃⵠⲆⵠⲆⲆⲆ, ⵠᐃ.ⲆⲆᐃⲆᐃⵠΔ, ⵠᐃ.ᐃᐃᐃⲆⲆⵠⲆ, ⵠᐃ.ΔⲆΔⲆΔΔΔ, ⵠᐃ.ⵠⲆᐃⵠⲆⲆⲆ];
    ΔΔ[Ur.ⲆΔⲆⲆⲆ] = [];
    ΔΔ[Ur.ⲆΔⲆⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔⲆΔᐃᐃⵠ;
    ΔΔ[Ur.ⲆΔⲆⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃΔΔⲆⵠⲆⲆ;
    ΔΔ[Ur.ⲆⵠᐃⲆⵠᐃⲆ] = [];
    ΔΔ[Ur.ⲆⵠᐃⲆⵠᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔⵠΔᐃᐃᐃ;
    ΔΔ[Ur.ⲆⵠᐃⲆⵠᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆᐃᐃⵠⲆᐃ;
    ΔΔ[Ur.ᐃⵠΔⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ᐃⵠΔⵠⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠΔⲆⵠᐃⵠᐃ;
    ΔΔ[Ur.ᐃⵠΔⵠⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⵠⵠⵠΔⲆ;
    ΔΔ[Ur.ᐃⲆΔⵠⲆ] = [];
    ΔΔ[Ur.ᐃⲆΔⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⲆᐃᐃΔᐃⵠ;
    ΔΔ[Ur.ᐃⲆΔⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆΔⵠⲆⵠⲆᐃ;
    ΔΔ[Ur.ⵠᐃⲆᐃᐃ] = [];
    ΔΔ[Ur.ⵠᐃⲆᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆΔΔᐃⲆΔ;
    ΔΔ[Ur.ⵠᐃⲆᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆᐃᐃᐃⲆⲆ;
    ΔΔ[Ur.ⲆⵠⵠⲆⲆ] = [];
    ΔΔ[Ur.ⲆⵠⵠⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⵠⲆⵠⲆᐃⲆᐃ;
    ΔΔ[Ur.ⲆⵠⵠⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠⲆᐃᐃΔⵠ;
    ΔΔ[Ur.ΔⲆΔⵠⵠ] = [];
    ΔΔ[Ur.ΔⲆΔⵠⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃⵠⲆⵠΔⲆΔ;
    ΔΔ[Ur.ΔⲆΔⵠⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃΔⵠᐃΔΔ;
    ΔΔ[Ur.ⵠⲆΔᐃΔ] = [];
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔΔⵠⵠⲆΔᐃΔᐃ);
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ᐃⲆᐃⵠⵠΔⵠⲆᐃ);
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠΔΔΔⵠᐃΔⵠᐃ);
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆⲆⲆΔⲆΔᐃᐃⲆ);
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⵠΔΔⲆᐃᐃⲆᐃ);
    ΔΔ[Ur.ⵠⲆΔᐃΔ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠΔⲆⲆᐃⵠⵠᐃᐃ);
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ] = [];
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆΔΔⲆᐃΔⵠΔⵠ);
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠΔⵠᐃᐃⵠΔᐃΔ);
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⵠᐃᐃⵠΔΔΔⵠΔ);
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⵠᐃⲆⵠᐃⵠⵠΔ);
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⲆΔⲆⲆΔᐃⵠΔ);
    ΔΔ[Ur.ⵠⲆⲆⵠⲆ][Ur.ΔΔⵠ].push(ⵠᐃ.ΔⵠᐃΔᐃⵠⲆⵠⲆ);
    ΔΔ[Ur.ⲆΔᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔᐃᐃᐃᐃΔⵠᐃⲆ);
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ᐃΔⵠ].push(ⵠᐃ.ΔΔᐃΔᐃⲆᐃΔΔ);
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ᐃΔⵠ].push(ⵠᐃ.ⲆⲆⲆᐃᐃΔⵠᐃⲆ);
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ΔΔⵠ].push(ⵠᐃ.ᐃᐃᐃΔⵠⵠⲆⲆⲆ);
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ΔΔⵠ].push(ⵠᐃ.ⵠᐃᐃⲆⵠⵠΔΔⵠ);
    ΔΔ[Ur.ⲆΔᐃΔⵠ][Ur.ΔΔⵠ].push(ⵠᐃ.ⲆΔᐃⵠⵠⲆⲆᐃⲆ);
    ⲆⵠⲆΔ.g = [];
    ⲆⵠⲆΔ.g[Cq] = [ⵠᐃ.ⲆᐃΔΔΔⲆΔ, ⵠᐃ.ᐃⲆⲆΔⵠᐃⲆ];
    ⲆⵠⲆΔ.g[1] = ⲆⵠⲆΔ.g[_a];
    ⲆⵠⲆΔ.g[2] = [ⵠᐃ.ΔᐃⵠⵠΔⵠⵠ, ⵠᐃ.ⵠⵠⵠⵠⵠⵠⵠ];
    ⲆⵠⲆΔ.m = [];
    ⲆⵠⲆΔ.m[0] = [ⵠᐃ.ⵠⵠⵠⵠᐃᐃⲆ, ⵠᐃ.ΔⲆⵠⲆᐃⲆΔ];
    ⲆⵠⲆΔ.m[1] = ⲆⵠⲆΔ.m[0];
    ⲆⵠⲆΔ.m[wr] = [ⵠᐃ.ⵠⵠⲆΔΔⵠΔ, ⵠᐃ.ⲆΔᐃΔⵠⲆΔ];
    ⲆⵠⲆΔ.la = [];
    ⲆⵠⲆΔ.la[_a] = [ⵠᐃ.ᐃⵠⲆⵠΔⵠⵠ, ⵠᐃ.ⵠΔΔⵠᐃⲆᐃ];
    ⲆⵠⲆΔ.la[1] = ⲆⵠⲆΔ.la[qn];
    ⲆⵠⲆΔ.la[wr] = ⲆⵠⲆΔ.la[0];
    ⲆⵠⲆΔ.la[og] = ⲆⵠⲆΔ.la[0];
    ⲆⵠⲆΔ.la[4] = ⲆⵠⲆΔ.la[uh];
    ⲆⵠⲆΔ.la[Ku] = ⲆⵠⲆΔ.la[0];
    ⲆⵠⲆΔ.s = [];
    ⲆⵠⲆΔ.s[0] = [ⵠᐃ.ⲆⵠⵠⵠⲆⲆΔ, ⵠᐃ.ⵠⲆⵠⵠΔΔⲆ];
    ⲆⵠⲆΔ.s[Fh] = ⲆⵠⲆΔ.s[qn];
    ⲆⵠⲆΔ.s[Ss] = [ⵠᐃ.ⲆⵠⲆΔᐃᐃᐃ, ⵠᐃ.Ⲇⵠᐃⵠᐃᐃᐃ];
    ⲆⵠⲆΔ.p = [];
    ⲆⵠⲆΔ.p[ms] = [ⵠᐃ.ⵠᐃⵠⵠᐃⲆⲆ, ⵠᐃ.ⵠᐃⵠⵠᐃⲆⲆ];
    ⲆⵠⲆΔ.a = [];
    ⲆⵠⲆΔ.a[Qs] = [ⵠᐃ.ᐃᐃᐃⲆᐃΔΔ, ⵠᐃ.ᐃⲆⲆᐃΔⵠⲆ];
    ⲆⵠⲆΔ.a[1] = ⲆⵠⲆΔ.a[Cn];
    ⲆⵠⲆΔ.a[Xh] = ⲆⵠⲆΔ.a[uh];
    ⲆⵠⲆΔ.d = [];
    ⲆⵠⲆΔ.d[0] = [ⵠᐃ.ⵠⵠᐃΔΔᐃⵠ, ⵠᐃ.ⲆⲆⲆⵠⲆⵠⵠ];
    ⲆⵠⲆΔ.d[j] = ⲆⵠⲆΔ.d[ms];
    ⲆⵠⲆΔ.d[Zn] = ⲆⵠⲆΔ.d[rl];
    ⲆⵠⲆΔ.re = [];
    ⲆⵠⲆΔ.re[0] = [ⵠᐃ.ⵠⵠΔⲆᐃΔⲆ, ⵠᐃ.ⲆΔⲆⲆᐃᐃⲆ];
    ⲆⵠⲆΔ.re[Gs] = ⲆⵠⲆΔ.re[uh];
    ⲆⵠⲆΔ.re[2] = ⲆⵠⲆΔ.re[uh];
    ⲆⵠⲆΔ.f = [];
    ⲆⵠⲆΔ.f[Rl] = [ⵠᐃ.ⲆⲆᐃⲆⵠⵠᐃ, ⵠᐃ.ΔᐃᐃⵠⲆΔⵠ];
    ⲆⵠⲆΔ.f[1] = ⲆⵠⲆΔ.f[0];
    ⲆⵠⲆΔ.f[2] = ⲆⵠⲆΔ.f[0];
    ⲆⵠⲆΔ.isl = [];
    ⲆⵠⲆΔ.isl[0] = [ⵠᐃ.ⲆΔΔⲆⲆΔⲆ, ⵠᐃ.ⲆⲆᐃⵠⵠᐃⵠ];
    ⲆⵠⲆΔ.isl[1] = ⲆⵠⲆΔ.isl[ne];
    ⲆⵠⲆΔ.isl[2] = ⲆⵠⲆΔ.isl[vq];
    ⲆⵠⲆΔ.c = [];
    ⲆⵠⲆΔ.c[0] = [ⵠᐃ.ᐃⵠᐃⵠᐃᐃⵠ, ⵠᐃ.ⵠᐃⵠⵠⵠᐃⲆ];
    ⲆⵠⲆΔ.c[j] = ⲆⵠⲆΔ.c[Cn];
    ⲆⵠⲆΔ.c[zk] = ⲆⵠⲆΔ.c[0];
    ⲆⵠⲆΔ.wtb = [];
    ⲆⵠⲆΔ.wtb[0] = [ⵠᐃ.ΔΔΔⲆⵠⵠⲆ, ⵠᐃ.ⲆᐃᐃᐃΔᐃΔ];
    ⲆⵠⲆΔ.PIRANHA = [ⵠᐃ.ᐃΔᐃΔᐃᐃⲆ, ⵠᐃ.ⲆᐃᐃⲆᐃΔᐃ];
    ⲆⵠⲆΔ.KRAKEN = [ⵠᐃ.ΔᐃΔⲆⲆⲆⵠ, ⵠᐃ.ᐃΔⲆⵠⲆⲆⵠ];
    ⲆⵠⲆΔ.FOX = [ⵠᐃ.ⲆΔΔΔⲆᐃⵠ, ⵠᐃ.ΔⵠⲆΔᐃⲆΔ];
    ⲆⵠⲆΔ.WOLF = [ⵠᐃ.ΔΔⲆⵠΔⲆⵠ, ⵠᐃ.ΔᐃⵠΔⲆⲆⲆ];
    ⲆⵠⲆΔ.SPIDER = [ⵠᐃ.ⲆⲆᐃⲆΔⵠⵠ, ⵠᐃ.ⲆⲆᐃᐃⲆⵠΔ];
    ⲆⵠⲆΔ.BEAR = [ⵠᐃ.ⵠᐃⵠⲆΔⲆᐃ, ⵠᐃ.ⲆΔⵠΔⲆᐃⵠ];
    ⲆⵠⲆΔ.CAVE = [ⵠᐃ.ΔⲆΔⵠⲆⲆⲆ, ⵠᐃ.ΔΔⵠⲆⲆⲆⵠ];
    ⲆⵠⲆΔ.MAP = [ⵠᐃ.ⲆⵠⵠⲆⲆᐃⲆ, ⵠᐃ.ⲆᐃΔᐃⵠΔⲆ];
    ⲆⵠⲆΔ.FOREST = [ⵠᐃ.ΔΔΔⵠⲆⲆΔ, ⵠᐃ.ⵠᐃᐃΔⲆᐃⲆ];
    ⲆⵠⲆΔ.WINTER = [ⵠᐃ.ⲆⵠⲆΔᐃᐃⲆ, ⵠᐃ.ΔⵠΔΔⵠⵠⲆ];
    ⲆⵠⲆΔ.DESERT = [ⵠᐃ.ΔᐃΔⲆⲆⵠⵠ, ⵠᐃ.ᐃᐃⵠᐃⲆΔⲆ];
    ⲆⵠⲆΔ.LAVA = [ⵠᐃ.ᐃⵠΔΔⵠΔᐃ, ⵠᐃ.ᐃⲆᐃⲆᐃᐃⲆ];
    for (var b in ⲆⵠⲆΔ) {
      for (var c = ⲆⵠⲆΔ[b], d = vq; d < c.length; d++) {
        var e = c[d];
        if (e.ᐃⲆⵠⲆΔΔⲆ !== Zi) {
          e.ᐃⲆⵠⲆΔΔⲆ();
        } else if (e.length > Gr) {
          for (var f = vq; f < e.length; f++) {
            if (e[f].ᐃⲆⵠⲆΔΔⲆ !== Bl) {
              e[f].ᐃⲆⵠⲆΔΔⲆ();
            }
          }
        }
      }
    }
    console.log($r, undefined);
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    tb(e, a * -58.5, a * -27.5, a * 117, a * 55, _r * a);
    e.restore();
    eb(e, c[0], c[j], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    tb(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    eb(e, c[2], c[Ok], a * Eg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    eb(e, c[Pt], c[As], a * Db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(rs * a, a * 68.375, Hk * a, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    eb(e, c[lt], c[zs], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * or, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo($a * a, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    eb(e, c[Xh], c[jq], ch * a);
    ob(e, a * 71, a * 44.375, a * 16.55294535724685);
    eb(e, c[Ss], c[$l], a * gl);
    ob(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    eb(e, c[2], c[1], Ph * a);
    return d;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    eb(e, c[au], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    eb(e, c[R], c[8], a * Yt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    eb(e, c[8], c[Eq], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    eb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    eb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    eb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    eb(e, c[8], c[dg], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    eb(e, c[qh], c[8], Ye * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    eb(e, c[8], c[nb], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    eb(e, c[1], c[2], a * vs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    eb(e, c[1], c[gc], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    eb(e, c[1], c[Tt], Rb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    eb(e, c[1], c[sh], a * xt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    eb(e, c[3], c[2], a * 4);
    ob(e, a * 108.5, a * 148.421875, a * 9);
    eb(e, c[5]);
    ob(e, a * 106.5, a * 144.421875, Qk * a);
    eb(e, c[gq]);
    ob(e, a * 46.5, a * 148.421875, a * Mn);
    eb(e, c[sj]);
    ob(e, a * 44.5, a * 144.421875, a * 3);
    eb(e, c[sg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    eb(e, c[Qt], c[2], a * 4);
    e.beginPath();
    e.translate(0, -Ss * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    eb(e, c[Qk], c[re], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    eb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    eb(e, c[3], c[tg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    eb(e, c[3], c[Ss], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    eb(e, c[6], c[7], qd * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    eb(e, c[Rt], c[Oq], a * tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    eb(e, c[Gt], c[th], a * lt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    eb(e, c[sg], c[7], ql * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    eb(e, c[Sg], c[Tt], a * xt);
    return d;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    eb(e, c[0], c[Ej], Jt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    eb(e, undefined, c[0], gs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    eb(e, c[re], c[X], lq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    eb(e, c[tg], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    eb(e, c[2], c[Jh], a * db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    eb(e, c[2], c[Z], yo * a);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * _l, a * 90);
    e.bezierCurveTo(a * Ws, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, Pq * a, a * 54, rg * a);
    e.bezierCurveTo(a * 33.5, fg * a, a * 33.5, Ln * a, a * 13, a * 16);
    e.closePath();
    eb(e, c[Rl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * at);
    e.closePath();
    eb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    eb(e, c[Ok]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * zs, a * 89);
    e.bezierCurveTo(Rr * a, Tk * a, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(Nh * a, a * 78.5, No * a, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * Fh, a * 97);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * Jt, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * Aq, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    eb(e, undefined, c[Eg], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    eb(e, undefined, c[hn], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ya, a * 89);
    e.bezierCurveTo(xq * a, a * 73, a * 12.5, a * 80.5, Hl * a, a * 72);
    e.closePath();
    eb(e, oh, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    eb(e, undefined, c[Rb], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    eb(e, undefined, c[4], a * $a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    eb(e, undefined, c[_l], Mg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * Nq, a * 20);
    e.closePath();
    eb(e, pl, c[4], a * Gt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * vn, a * 53, a * z, a * 55, sg * a);
    e.closePath();
    eb(e, undefined, c[4], a * 6);
    return d;
  }
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(vq);
    tb(e, a * -65.5, a * -66, a * 131, a * 131, Ui * a);
    e.restore();
    eb(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Qb * a, Ui * a);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    tb(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    eb(e, c[gr]);
    e.globalAlpha = Ag;
    e.translate(a * -xh, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    tb(e, a * -64, a * -4.5, a * 129, a * 9, Jn * a);
    e.restore();
    eb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : Ok;
    e.translate(a * pr, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    tb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    eb(e, c[qk]);
    e.globalAlpha = 1;
    e.translate(a * -Ui, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    tb(e, a * -4.5, a * -61, Eh * a, a * 129, Ui * a);
    e.restore();
    eb(e, c[2], c[Sg], a * 3);
    e.globalAlpha = b ? 0.5 : zs;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    tb(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -Jo, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    tb(e, a * -4.5, a * -65, a * So, a * 129, a * 5);
    e.restore();
    eb(e, c[2], c[Kj], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, Qb * a);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    tb(e, a * -65.5, -Cg * a, a * 129, a * vr, Os * a);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Fh;
    e.translate(-Os * a, a * -ed);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    tb(e, a * -65.5, -uj * a, a * 129, a * Ca, a * 5);
    e.restore();
    eb(e, c[wr], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    tb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Oj;
    e.translate(-Ku * a, a * -5);
    e.save();
    e.translate(a * z, a * 18.1015625);
    tb(e, a * -Et, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    eb(e, c[qd], c[Sg], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    tb(e, a * -10.5, a * -11.5, a * 21, a * 22, Ui * a);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Zq;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    tb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * sj);
    e.restore();
    eb(e, c[Cl], c[xs], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    tb(e, a * -10.5, -D * a, a * 22, a * 22, a * 5);
    e.restore();
    eb(e, c[Cn]);
    e.globalAlpha = Fh;
    e.translate(a * -5, -pr * a);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    tb(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    eb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ku * a, jt * a);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    tb(e, a * -11.5, -gs * a, a * 22, a * 22, jt * a);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-Vh * a, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    tb(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    eb(e, c[hc], c[Kj], a * Kj);
    return d;
  }
  function Gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * Wl, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    eb(d, b[Ih]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    eb(d, b[Qs]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    eb(d, b[Cn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    eb(d, b[Rl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    eb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    eb(d, b[0]);
    d.globalAlpha = Ok;
    d.translate(_a, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    eb(d, b[3], b[3], Kg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    eb(d, b[Kj], b[Qt], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * Hr);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    eb(d, b[Kj], b[nn], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * W, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    eb(d, b[og], b[Ka], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    eb(d, b[yh], b[3], xl * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    eb(d, b[Gl], b[Wb], a * hd);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    eb(d, b[dt], b[3], a * ls);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    eb(d, b[ar], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    eb(d, b[3], b[dt], a * nk);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    eb(d, b[X], b[3], qh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    eb(d, b[ar], b[Gl], a * hd);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    eb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    eb(d, b[Vh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, qo * a);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    eb(d, b[Xh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, Vj * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    eb(d, b[1]);
    ob(d, a * 102, a * 269, a * 11);
    eb(d, b[ar]);
    ob(d, a * 98, a * 266, wt * a);
    eb(d, b[6]);
    ob(d, a * 168, a * 269, Et * a);
    eb(d, b[3]);
    ob(d, a * 164, a * 266, a * 5);
    eb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    eb(d, b[Xr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    eb(d, b[Cg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    eb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    eb(d, b[hd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    eb(d, b[Dn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    eb(d, b[nb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    eb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    eb(d, b[dg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    eb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    eb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    eb(d, b[ta]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    eb(d, b[vt]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    eb(d, b[ta]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    eb(d, b[au]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    eb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    eb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    eb(d, b[jl]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    eb(d, b[Co]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    eb(d, b[Uk]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    eb(d, b[7]);
    return c;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * gc, a * 1);
    e.globalAlpha = b ? 0.5 : Eo;
    e.translate(0, a * ih);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    tb(e, a * -bl, a * -16.5, a * 32, a * 33, Qr * a);
    e.restore();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    eb(e, c[vk]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    tb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    eb(e, c[Xr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    eb(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    tb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    eb(e, c[Zn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    eb(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    tb(e, a * -de, a * -wa, a * 36, a * 36, a * 7);
    e.restore();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    eb(e, c[tg]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    tb(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    eb(e, c[Zt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    eb(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    tb(e, a * -_r, a * -17.5, a * 40, a * 35, a * y);
    e.restore();
    eb(e, c[Zt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    eb(e, c[zk]);
    e.globalAlpha = 1;
    e.translate(0, a * -pj);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    tb(e, -mb * a, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    eb(e, c[ol], c[4], Ui * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    eb(e, undefined, c[Ch], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    tb(e, a * -15.5, a * -16, a * 31, a * 32, wb * a);
    e.restore();
    eb(e, c[3], c[xt], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    eb(e, undefined, c[_l], jt * a);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    tb(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    eb(e, c[yh], c[xt], a * jt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    eb(e, Gh, c[ug], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    tb(e, a * -de, a * -Bs, a * 36, a * 36, a * Oq);
    e.restore();
    eb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    eb(e, $r, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    tb(e, a * -18, -Ak * a, a * 36, a * 38, Oq * a);
    e.restore();
    eb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    eb(e, ht, c[rg], a * cd);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    tb(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    eb(e, c[3], c[_l], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    eb(e, undefined, c[Ch], a * jt);
    e.globalAlpha = b ? 0.5 : zs;
    e.translate(Cq, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    hb(e, Pl, a * 70.28669492273468, a * 10);
    e.restore();
    eb(e, c[Ss]);
    e.save();
    e.translate(a * 98, a * 99);
    hb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    eb(e, c[Xh]);
    e.globalAlpha = 1;
    e.translate(0, a * -Va);
    e.save();
    e.translate(a * 98, a * 99);
    hb(e, 6, a * 70.28669492273468, a * fg);
    e.restore();
    eb(e, c[5], c[6], wt * a);
    e.save();
    e.translate(a * 98, a * 99);
    hb(e, 6, a * 56.455940020351264, Ho * a);
    e.restore();
    eb(e, c[7], c[R], wb * a);
    return d;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : Gs;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    eb(e, yq, c[0], D * a);
    e.translate(0, a * -5);
    e.globalAlpha = Al;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    eb(e, c[3], c[2], a * Is);
    e.translate(gr, a * 25);
    e.globalAlpha = Ok;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    eb(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    eb(e, c[1], c[2], Zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    eb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    eb(e, sb, c[ql], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    eb(e, c[Ht], c[Pt], a * Rg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    eb(e, c[xt], c[ql], a * cn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    eb(e, c[ug], c[2], cn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, Xg * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    eb(e, yr, c[qd], a * 11);
    return d;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(qn, a * xq);
    e.globalAlpha = b ? 0.5 : Ht;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    eb(e, c[0]);
    e.translate(0, -Ws * a);
    e.globalAlpha = zs;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    eb(e, c[Ag], c[re], qh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    eb(e, c[4], c[Ku], eh * a);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    hb(e, 6, a * 40, a * ws);
    e.restore();
    eb(e, c[Ih], c[Zq], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    hb(e, Jj, a * 25.11521001172521, a * 10);
    e.restore();
    eb(e, c[2], c[3], jt * a);
    return d;
  }
  function Nc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * Cg;
    var h = b * Db;
    c.width = e;
    c.height = f;
    tb(d, b * 5, b * 5, e - ih * b, f - b * bb, g);
    eb(d, null, "#BBE8EF", h);
    return c;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    ob(e, a * 54.5, a * 55, a * 48.038209575038294);
    eb(e, b[0], b[1], a * 8);
    if (c == Nl) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      eb(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      tb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      eb(e, b[2], b[X], gl * a);
      ob(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      eb(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      tb(e, a * -_j, a * -16, Rr * a, a * 32, a * Qa);
      e.restore();
      eb(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      eb(e, oh, b[5], uj * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      eb(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      eb(e, qr, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      eb(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      eb(e, b[3], b[Ch], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      eb(e, b[Wb], b[Cg], a * xd);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      eb(e, b[ld]);
    } else if (c == Jh) {
      e.scale(0.9, 0.9);
      e.translate(a * ad, _a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      eb(e, b[2], b[Qk], a * wh);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      eb(e, b[dt]);
    }
    return d;
  }
  function Hc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    tb(d, a * -7, a * -20, a * 14, a * 39, a * _r);
    d.restore();
    eb(d, b[0]);
    d.globalAlpha = ie;
    d.save();
    d.translate(a * 37, a * 94);
    tb(d, -It * a, -Mt * a, a * 14, a * 37, a * 20);
    d.restore();
    eb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    tb(d, a * -84, a * -67, a * 168, a * 134, a * dh);
    d.restore();
    eb(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    tb(d, a * -84, a * -67, a * 168, a * 134, Do * a);
    d.restore();
    eb(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    tb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    eb(d, b[nn], b[As], a * R);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    tb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    eb(d, b[3], b[Cg], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    tb(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    eb(d, b[ar], b[ch], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    tb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    eb(d, b[Kj], b[2], a * hd);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    tb(d, a * -83, a * -12, a * 160, a * 24, a * rl);
    d.restore();
    eb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    tb(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    eb(d, b[Xh]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    tb(d, a * -5, a * -18.5, ia * a, a * 37, a * Ws);
    d.restore();
    eb(d, b[Cq]);
    d.globalAlpha = $l;
    d.save();
    d.translate(a * 223, a * 94.5);
    tb(d, a * -5, a * -18.5, Qa * a, a * 37, Hl * a);
    d.restore();
    eb(d, b[zk]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    tb(d, a * -22.5, a * -6.5, a * 45, a * Oh, a * hh);
    d.restore();
    eb(d, b[ne]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    tb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    eb(d, b[2]);
    return c;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    tb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    eb(e, c[vq], c[1], dg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    eb(e, c[2], c[Jh], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    tb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    eb(e, c[4], c[1], ys * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    eb(e, undefined, c[ie], hd * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    eb(e, c[4], c[zs], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    eb(e, c[4], c[Ej], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    eb(e, c[4], c[1], a * qh);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    tb(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    eb(e, c[5]);
    return d;
  }
  function Yc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, -Uh * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    eb(d, b[0]);
    return c;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    eb(e, $r, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    eb(e, undefined, c[1], hh * a);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    eb(e, c[Cn], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    eb(e, c[j], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    eb(e, c[Ue], c[zk], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    eb(e, c[1], c[Sg], a * Cg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    eb(e, c[_b], c[xs], hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    eb(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    eb(e, undefined, c[ol], a * Cg);
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    tb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    eb(e, c[Cn]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    tb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * dl);
    e.restore();
    eb(e, Bl, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    tb(e, a * -56, a * -55, a * 115, a * 109, a * eg);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Al;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    tb(e, a * -56, a * -55, a * 115, a * 109, Ds * a);
    e.restore();
    eb(e, undefined, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    eb(e, Gk, c[1], Ln * a);
    return d;
  }
  function Zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : Ej;
    e.translate(a * 10, xh * a);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    tb(e, a * -19.5, a * -8.5, a * 39, a * _q, ae * a);
    e.restore();
    eb(e, c[ur]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    eb(e, c[0]);
    ob(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    eb(e, c[Qs]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    tb(e, a * -19.5, a * -8.5, a * 39, zg * a, a * 10);
    e.restore();
    eb(e, undefined, c[co], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    eb(e, undefined, c[3], a * Vi);
    ob(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    eb(e, undefined, c[Z], wg * a);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    tb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    eb(e, c[ie]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    eb(e, c[As]);
    ob(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    eb(e, c[2], c[Ag], a * uj);
    ob(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    eb(e, c[3], c[1], a * Db);
    ob(e, a * 78, a * 44, a * 20);
    eb(e, c[4]);
    return d;
  }
  function Xc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 501;
    e.height = a * 564;
    f.scale(0.5, 0.5);
    f.translate(a * 240, T * a);
    f.rotate(d);
    f.globalAlpha = b ? 0.5 : 0.2;
    ob(f, a * 174, a * 87.984375, a * 20.8806130178211);
    eb(f, c[0], c[0], hd * a);
    ob(f, a * 174, a * 87.984375, a * 12.165525060596439);
    eb(f, c[Tg], c[0], a * xl);
    ob(f, a * 174, a * 87.484375, a * ad);
    eb(f, c[0]);
    ob(f, a * 30, a * 87.984375, a * 20.8806130178211);
    eb(f, c[0], c[ur], a * 4);
    ob(f, a * 30, a * 87.984375, a * 12.165525060596439);
    eb(f, c[Gr], c[Rl], Cg * a);
    ob(f, a * 30, a * 87.484375, a * 6);
    eb(f, c[Tg]);
    ob(f, a * No, a * 30, a * 20.8806130178211);
    eb(f, c[rl], c[Qs], a * Ch);
    ob(f, a * 100, a * 30, a * 12.165525060596439);
    eb(f, c[0], c[0], a * Cg);
    ob(f, a * Wl, a * 30, Vi * a);
    eb(f, c[rl]);
    ob(f, a * mg, a * 130, a * 20.8806130178211);
    eb(f, c[Ih], c[0], Yi * a);
    ob(f, Kq * a, a * 130, a * 12.165525060596439);
    eb(f, c[Cq], c[Cn], a * _g);
    ob(f, a * 100, a * 130, a * 6);
    eb(f, c[0]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    f.rotate(_a);
    tb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    eb(f, c[Fj], c[0], ch * a);
    f.save();
    f.translate(a * 101, a * 64.984375);
    f.rotate(0);
    tb(f, a * -33, a * -10, a * 66, a * 20, a * 15);
    f.restore();
    eb(f, c[0], c[0], a * _l);
    f.save();
    f.translate(a * 102, a * 63.484375);
    f.rotate(qk);
    tb(f, -Eh * a, a * -27.5, a * 18, a * 55, At * a);
    f.restore();
    f.translate(xh, -wt);
    f.globalAlpha = 1;
    ob(f, a * 174, a * 87.984375, a * 20.8806130178211);
    eb(f, c[1], c[3], Eq * a);
    ob(f, a * 174, a * 87.984375, a * 12.165525060596439);
    eb(f, c[1], c[3], ta * a);
    ob(f, a * 174, a * 87.484375, ad * a);
    eb(f, c[2]);
    ob(f, a * 30, a * 87.984375, a * 20.8806130178211);
    eb(f, c[ie], c[3], a * 8);
    ob(f, a * 30, a * 87.984375, a * 12.165525060596439);
    eb(f, c[1], c[3], vt * a);
    ob(f, a * 30, a * 87.484375, a * Pl);
    eb(f, c[2]);
    ob(f, a * 102, a * 30, a * 20.8806130178211);
    eb(f, c[Eo], c[3], au * a);
    ob(f, a * 102, a * 30, a * 12.165525060596439);
    eb(f, c[1], c[xs], a * 8);
    ob(f, a * 102, a * 30, wh * a);
    eb(f, c[Zq]);
    ob(f, a * 102, a * 130, a * 20.8806130178211);
    eb(f, c[1], c[3], a * 8);
    ob(f, a * 102, a * 130, a * 12.165525060596439);
    eb(f, c[_b], c[3], qh * a);
    ob(f, a * 102, a * 130, a * Zh);
    eb(f, c[Ag]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    tb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    eb(f, c[1], c[3], a * 8);
    f.save();
    f.translate(a * 101, a * 64.984375);
    tb(f, a * -33, -pj * a, a * 66, a * 20, a * 15);
    f.restore();
    eb(f, c[zk], c[_b], a * tu);
    f.save();
    f.translate(a * 102, a * 63.484375);
    tb(f, a * -9, a * -27.5, a * 18, a * 55, a * 15);
    f.restore();
    eb(f, c[hc], c[1], a * ys);
    ob(f, a * 135, a * 107.36605834960938, a * 21.095023109728988);
    eb(f, c[1], c[dt], a * 8);
    ob(f, a * 135, a * 107.36605834960938, Lt * a);
    eb(f, c[1], c[og], a * 8);
    ob(f, a * 135, a * 107.36605834960938, a * 6.082762530298219);
    eb(f, c[qd]);
    ob(f, a * 70, a * 107.36605834960938, a * 21.095023109728988);
    eb(f, c[Oj], c[3], a * yb);
    ob(f, a * 70, a * 107.36605834960938, je * a);
    eb(f, c[zs], c[3], a * Kg);
    ob(f, a * 70, a * 107.36605834960938, a * 6.082762530298219);
    eb(f, c[Zt]);
    return e;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    eb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(nh * a, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    eb(e, c[3], c[ch], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(ur);
    tb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    eb(e, c[Nl], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(gr);
    tb(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    eb(e, c[2], c[_b], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    eb(e, c[lt], c[1], a * Xb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    eb(e, c[2], c[Fh], a * Db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    eb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    eb(e, c[nn], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, nh * a, a * 56.3671875);
    e.closePath();
    eb(e, c[3], c[Ph], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    tb(e, a * -20.5, a * -20.5, a * 41, a * 41, Hs * a);
    e.restore();
    eb(e, undefined, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    tb(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    eb(e, c[nn], c[_g], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    tb(e, a * -ia, -ae * a, a * 20, a * 20, cl * a);
    e.restore();
    eb(e, c[sg], c[7], a * 4);
    return d;
  }
  function em(a, b, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 400;
    e.height = a * 400;
    f.globalAlpha = aa;
    f.translate(a * c, hh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    eb(f, d[0]);
    f.translate(-xq * a, a * -Ws);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36.5, a * 278.0625);
    f.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    f.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    f.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    f.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    f.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    f.closePath();
    eb(f, d[_b], d[2], a * 19);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 214.5, a * 124.0625);
    f.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    f.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    f.closePath();
    eb(f, undefined, d[2], la * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 157.5, a * 145.0625);
    f.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    f.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    f.closePath();
    eb(f, undefined, d[2], a * Ko);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 103.5, a * 169.0625);
    f.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    f.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    f.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    f.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    f.closePath();
    eb(f, d[Qt], d[2], a * m);
    ob(f, a * 92.5, a * 216.0625, a * 13.892443989449804);
    eb(f, d[ch]);
    ob(f, a * 68.5, a * 227.0625, a * 8.06225774829855);
    eb(f, d[4]);
    ob(f, a * 85.5, a * 240.0625, a * 6.708203932499369);
    eb(f, d[ea]);
    ob(f, a * 147.5, a * 294.0625, a * 17.46424919657298);
    eb(f, d[4]);
    ob(f, a * 166.5, a * 273.0625, a * 6.708203932499369);
    eb(f, d[_g]);
    ob(f, a * 114.5, a * 294.0625, a * 12.36931687685298);
    eb(f, d[4]);
    ob(f, a * 123.5, a * 220.0625, a * 5.830951894845301);
    eb(f, d[4]);
    ob(f, a * 114.5, a * 259.0625, a * 4.123105625617661);
    eb(f, d[4]);
    ob(f, a * 63.5, a * 265.0625, a * 5.385164807134504);
    eb(f, d[4]);
    ob(f, a * 148.5, a * 235.0625, a * 4.47213595499958);
    eb(f, d[4]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 194.5, a * 313.0625);
    f.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    f.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    f.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    f.closePath();
    eb(f, d[Jo]);
    return e;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(qk, fg * a);
    e.scale(0.2, 0.2);
    e.translate(ne, a * -30);
    if (c == Oj) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      eb(e, b[rl], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    eb(e, b[0], b[$l], Vs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    eb(e, b[Nl], b[1], a * Ak);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    eb(e, b[0], b[_b], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    eb(e, b[2], b[1], m * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    eb(e, b[1]);
    e.scale(mt, 3);
    e.translate(ci, a * 10);
    if (Ok == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * Dg, a * 25, a * 34, Kn * a);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, Hq * a, a * 59.5, a * ir, a * 70, a * 11);
      eb(e, Bl, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * wr);
      e.closePath();
      eb(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Rb * a, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, Bn * a);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * Ws, a * 70, a * 11);
    eb(e, undefined, b[ie], Ea * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    eb(e, b[1], b[ie], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * la, a * 25, a * 34, I * a);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, Hq * a, a * 59.5, a * cq, a * 70, a * hg);
    eb(e, oh, b[zk], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, Zn * a);
    e.closePath();
    eb(e, b[qd], b[lt], a * ih);
    return d;
  }
  function tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : j;
    e.translate(a * -10, ct * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    eb(e, c[Cn]);
    e.globalAlpha = Fh;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    eb(e, c[1], c[Zn], a * 10);
    return d;
  }
  function nm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    eb(d, b[Tg]);
    return c;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(Qs, ae * a);
    e.globalAlpha = b ? 0.5 : Ue;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    eb(e, c[ne]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, Kk * a, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    eb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = Ag;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    eb(e, c[Jn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    eb(e, c[cl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, Kk * a, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    eb(e, c[1], c[sh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    eb(e, c[Z]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, ir * a, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    eb(e, pl, c[vk], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    eb(e, c[4], c[Qb], Os * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, ua * a);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    eb(e, c[4], c[Vh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    eb(e, c[uj], c[xh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    eb(e, c[ea], c[5], Jo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * Kq, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    eb(e, c[Yi], c[ed], a * Vh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    eb(e, c[gl], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, Nh * a);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    eb(e, c[Xb], c[gg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    eb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    eb(e, c[Xb], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    eb(e, c[_l], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    eb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    eb(e, c[gl], c[5], gg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    eb(e, c[Aq], c[gh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    eb(e, c[4], c[Qb], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, jh * a, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    eb(e, c[4], c[5], a * xj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    eb(e, c[Xb], c[5], a * gh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    eb(e, c[4], c[Vh], jt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * m, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    eb(e, c[Eg], c[5], a * 5);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 120;
    d.height = a * 100;
    tb(e, a * pj, a * 10, a * 95, a * 80, a * 10);
    eb(e, b[2]);
    tb(e, a * 10, ha * a, a * 95, a * 80, ih * a);
    eb(e, b[Sg], b[4], a * Xb);
    if (ur == c) {
      var f = Pm(a * 0.75, b, vq);
      e.drawImage(f, a * 22, a * Ul);
    } else if (ie == c) {
      f = Pm(a * 0.75, b, 1);
      e.drawImage(f, a * 22, a * fa);
    }
    return d;
  }
  function am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(Nl, a * ct);
    e.globalAlpha = Ht;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    eb(e, c[Nl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    eb(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    eb(e, c[1], c[qd], a * ys);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    eb(e, c[1], c[ql], au * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    eb(e, Gk, c[zk], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    eb(e, Gk, c[hc], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    eb(e, undefined, c[2], a * vs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    eb(e, c[As], c[wr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    eb(e, c[Qt]);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    hb(e, ad, a * 43, Yt * a);
    e.restore();
    eb(e, c[0], c[1], a * 3);
    return d;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 496;
    d.height = a * 520;
    e.globalAlpha = b ? 0.5 : Ht;
    e.translate(qk, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.000030517578125, a * 256.67613983154297);
    e.bezierCurveTo(a * 1.000030517578125, a * 332.67613983154297, a * 23.000030517578125, a * 404.67613983154297, a * 95.00003051757812, a * 463.67613983154297);
    e.bezierCurveTo(a * 128.00003051757812, a * 491.67613983154297, a * 165.00003051757812, a * 507.67613983154297, a * 194.00003051757812, a * 512.676139831543);
    e.bezierCurveTo(a * 280.0000305175781, a * 517.676139831543, a * 291.0000305175781, a * 516.676139831543, a * 342.0000305175781, a * 497.67613983154297);
    e.bezierCurveTo(a * 425.0000305175781, a * 454.67613983154297, a * 469.0000305175781, a * 392.67613983154297, a * 468.0000305175781, a * 300.67613983154297);
    e.bezierCurveTo(a * 408.5000305175781, a * 365.17613983154297, a * 408.5000305175781, a * 365.17613983154297, a * 349.0000305175781, a * 429.67613983154297);
    e.bezierCurveTo(a * 256.0000305175781, a * 473.67613983154297, a * 167.00003051757812, a * 459.67613983154297, a * 78.00003051757812, a * 384.67613983154297);
    e.closePath();
    eb(e, c[uh]);
    e.globalAlpha = jq;
    e.translate(vq, -Hs * a);
    ob(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    eb(e, c[xj], undefined, a * 12);
    e.globalAlpha = b ? 0.5 : Al;
    e.translate(vq, fg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.00003051757812, a * 263.4034118652344);
    e.bezierCurveTo(a * 109.00003051757812, a * 160.40341186523438, a * 185.00003051757812, a * 128.40341186523438, a * 222.00003051757812, a * 124.40341186523438);
    e.bezierCurveTo(a * 277.0000305175781, a * 116.40341186523438, a * 339.0000305175781, a * 134.40341186523438, a * 379.0000305175781, a * 195.40341186523438);
    e.bezierCurveTo(a * 409.0000305175781, a * 242.40341186523438, a * 416.0000305175781, a * 256.4034118652344, a * 428.0000305175781, a * 304.4034118652344);
    e.bezierCurveTo(a * 457.0000305175781, a * 203.40341186523438, a * 449.0000305175781, a * 183.40341186523438, a * 438.0000305175781, a * 162.40341186523438);
    e.bezierCurveTo(a * 381.0000305175781, a * 73.40341186523438, a * 360.0000305175781, a * 66.40341186523438, a * 257.0000305175781, a * 46.403411865234375);
    e.bezierCurveTo(a * 191.00003051757812, a * 45.403411865234375, a * 142.00003051757812, a * 65.40341186523438, a * 101.00003051757812, a * 115.40341186523438);
    e.closePath();
    eb(e, c[ms]);
    e.globalAlpha = 1;
    var f = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      ob(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      eb(d, b[1], b[2], a * Ug);
      d.globalCompositeOperation = "destination-out";
      ob(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      eb(d, b[0], b[0], Ls * a);
      d.globalCompositeOperation = "source-over";
      return c;
    }(a, c);
    e.drawImage(f, Gr, 0);
    e.translate(Ih, -ws * a);
    ob(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    eb(e, jn, c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * Qb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    eb(e, c[qk], c[Nl], a * 12);
    e.globalAlpha = 1;
    e.translate(Gr, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    eb(e, c[yh], c[hc], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(rl, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    eb(e, c[0], c[Qs], $q * a);
    e.globalAlpha = Eo;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    eb(e, c[4], c[lt], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(uh, a * gg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    eb(e, c[0], c[Gr], a * Or);
    e.globalAlpha = ie;
    e.translate(tj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    eb(e, c[Eg], c[2], Is * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ne, wt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    eb(e, c[0], c[Qs], a * gs);
    e.globalAlpha = Ht;
    e.translate(0, -Jo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    eb(e, c[_l], c[2], a * Il);
    e.globalAlpha = b ? 0.5 : j;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    eb(e, c[0], c[0], Zg * a);
    e.globalAlpha = _b;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    eb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : Ok;
    e.translate(0, xh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    eb(e, c[0], c[0], a * lq);
    e.globalAlpha = ag;
    e.translate(qk, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    eb(e, c[yh], c[re], a * gs);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * wt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    eb(e, c[0], c[vq], a * ua);
    e.globalAlpha = Ht;
    e.translate(Nl, a * -Ya);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    eb(e, c[Yi], c[Ss], Ll * a);
    e.globalAlpha = b ? 0.5 : Eo;
    e.translate(0, wt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    eb(e, c[gr], c[0], Za * a);
    e.globalAlpha = Oj;
    e.translate(qn, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    eb(e, c[gl], c[Tt], a * Zg);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * Ui);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    eb(e, c[Qs], c[Ih], a * 12);
    e.globalAlpha = Ok;
    e.translate(0, a * -wt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    eb(e, c[ch], c[2], $q * a);
    e.globalAlpha = b ? 0.5 : Al;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    eb(e, c[Gr], c[tj], a * 12);
    e.globalAlpha = 1;
    e.translate(ms, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    eb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ms, a * sj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    eb(e, c[0], c[0], a * Rh);
    e.globalAlpha = 1;
    e.translate(0, a * -Vh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    eb(e, c[3], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : $l;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    eb(e, c[0], c[0], a * Jt);
    e.globalAlpha = 1;
    e.translate(Qs, -jt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    eb(e, c[4], c[vk], a * db);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * pr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    eb(e, c[Nl], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(Cq, -Ya * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    eb(e, c[Aq], c[Pt], a * bk);
    e.globalAlpha = b ? 0.5 : aa;
    e.translate(Ih, wt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    eb(e, c[Cn], c[_a], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    eb(e, c[4], c[ql], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Fj, Jo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    eb(e, c[0], c[Qs], a * Jt);
    e.globalAlpha = 1;
    e.translate(Fj, a * -xj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    eb(e, c[3], c[Cl], gs * a);
    e.globalAlpha = b ? 0.5 : Ue;
    e.translate(qn, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    eb(e, c[0], c[ne], Ll * a);
    e.globalAlpha = 1;
    e.translate(gr, a * -Os);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    eb(e, c[4], c[Cl], a * 12);
    return d;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(Gr * a, a * ia);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    eb(e, c[Rl], c[0], a * 10);
    e.translate(a * 0, -ae * a);
    e.globalAlpha = Fh;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    eb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    eb(e, c[tg], c[Qk], Hs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    eb(e, c[zk], c[Qt], a * ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    eb(e, c[2], c[$b], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    eb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    eb(e, c[jq], c[Fh], ws * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    eb(e, c[gc], c[$b], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    eb(e, c[j], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    eb(e, c[2], c[3], ae * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    eb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    eb(e, c[Zn], c[nn], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    eb(e, c[ld], c[3], Va * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    eb(e, c[1], c[Oj], a * xk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    eb(e, c[zk], c[Sg], a * Qa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    eb(e, c[ql], c[xs], Va * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    eb(e, c[1], c[1], a * ie);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    eb(e, c[$b]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    eb(e, c[2], c[og], a * 10);
    ob(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    eb(e, c[4], c[Ya], a * 1);
    ob(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    eb(e, c[4], c[Ku], a * Ue);
    ob(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    eb(e, c[4], c[5], a * 1);
    ob(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    eb(e, c[hn], c[Ya], Fh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    eb(e, c[Aq], c[xj], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    eb(e, c[$a]);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, Uh * a);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    tb(e, a * -67, a * -16.5, a * 134, a * 33, gg * a);
    e.restore();
    eb(e, c[qk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    eb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    eb(e, c[Fj]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    tb(e, a * -73, a * -20.5, a * 146, a * 41, sj * a);
    e.restore();
    eb(e, c[0]);
    e.globalAlpha = Ok;
    e.translate(Cn, -Va * a);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    tb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    eb(e, c[zs], c[lt], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    eb(e, c[Ag], c[Cl], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    eb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    eb(e, c[Ue], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    tb(e, a * -73, a * -20.5, a * 146, a * 41, a * xh);
    e.restore();
    eb(e, c[Ok], c[sh], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    eb(e, c[$b]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    eb(e, c[Jh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    eb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    eb(e, c[qd]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    eb(e, c[qd]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    eb(e, c[Xh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    eb(e, c[2]);
    return d;
  }
  function um(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * jt);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    eb(d, b[ms]);
    d.globalAlpha = 1;
    d.translate(-Yi * a, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    eb(d, Gk, b[zs], a * 12);
    d.translate(-_b * a, Cq * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    eb(d, b[4], b[xj], xt * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    eb(d, b[gl], b[gh], a * Xb);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    eb(d, b[Yi], b[ed], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    eb(d, b[4], b[Qb], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    eb(d, b[Tt], b[ar], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    eb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    eb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    eb(d, b[co]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    eb(d, b[Z]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    eb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    eb(d, b[co]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    eb(d, b[ar]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    eb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    eb(d, b[sr], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    eb(d, b[Jj], b[Qr], Eg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    eb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    eb(d, b[Vi], b[It], a * Aq);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    eb(d, b[wg], b[qq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    eb(d, b[sq], b[It], a * gl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    eb(d, b[6], b[7], a * Ph);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    eb(d, b[6], b[jg], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    eb(d, b[Gt], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    eb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    eb(d, b[$a], b[7], hn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    eb(d, b[6], b[It], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    eb(d, b[Pl], b[nl], a * hn);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    eb(d, b[6], b[Oq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    eb(d, b[Zh], b[7], ch * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    eb(d, b[sq], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    eb(d, b[6], b[Co], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    eb(d, b[6], b[Th], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    eb(d, b[6], b[wb], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    eb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    eb(d, b[ta], b[hk], Z * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    eb(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    eb(d, b[zt]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    eb(d, b[Ns]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    eb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    eb(d, b[cn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    eb(d, b[Et]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    eb(d, b[$i]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    eb(d, b[Fg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    eb(d, b[D]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    eb(d, b[$i]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    eb(d, b[11]);
    ob(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    eb(d, b[12]);
    ob(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    eb(d, b[13]);
    ob(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    eb(d, b[12]);
    ob(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    eb(d, b[13]);
    return c;
  }
  function bm(a, b) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 190;
    e.globalAlpha = 0.5;
    e.translate(0, 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 93);
    e.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    e.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    e.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * Pg, a * 75);
    e.bezierCurveTo(Tn * a, a * 67, a * sk, a * 67, $j * a, a * 59);
    e.bezierCurveTo(a * Bh, a * 59, a * 14, a * 59, a * 21, a * 59);
    e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * ka);
    e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    e.bezierCurveTo(a * 76, a * Uk, a * 75, a * 11, a * 76, Kl * a);
    e.bezierCurveTo(a * 81, S * a, a * 84, a * 18, a * 89, a * 27);
    e.bezierCurveTo(a * 95, a * 25, a * 100, a * In, a * 105, a * 14);
    e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    e.bezierCurveTo(a * Ks, a * 95, pn * a, a * 99, a * R, a * 93);
    e.closePath();
    eb(e, b[0]);
    e.globalAlpha = 1;
    e.translate(0, -ta);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 93);
    e.bezierCurveTo(a * 17, a * 95, Pr * a, a * 95, a * 21, a * 95);
    e.bezierCurveTo(vr * a, a * 83, a * 17, a * 93, a * 4, a * 76);
    e.bezierCurveTo(a * 11, a * 75, a * Uj, a * 75, a * 18, a * 75);
    e.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, Uk * a, a * 59);
    e.bezierCurveTo(a * tr, a * 59, Jl * a, a * 59, a * 21, a * 59);
    e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    e.bezierCurveTo(a * 76, a * jl, a * 75, a * 11, a * 76, wh * a);
    e.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    e.bezierCurveTo(a * 95, a * 25, a * 100, In * a, a * 105, lg * a);
    e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    e.bezierCurveTo(a * 18, a * 95, a * mk, a * 99, ta * a, a * 93);
    e.closePath();
    eb(e, b[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 63);
    e.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    e.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    e.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    e.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    e.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    e.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    e.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    e.closePath();
    eb(e, b[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 55);
    e.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    e.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    e.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    e.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    e.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    e.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    e.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    e.closePath();
    eb(e, b[dt]);
    ob(e, a * 103, a * 110, a * 11);
    eb(e, b[xt]);
    ob(e, a * 55, a * 111, a * Et);
    eb(e, b[4]);
    ob(e, a * 99, a * 107, a * gh);
    eb(e, b[1]);
    ob(e, a * 51, a * 108, wt * a);
    eb(e, b[Ok]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 121);
    e.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    e.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    e.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    e.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    e.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    e.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    e.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    e.closePath();
    eb(e, b[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-2, ne);
    e.moveTo(a * 71, a * 162);
    e.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    e.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    e.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    e.closePath();
    eb(e, b[3]);
    e.translate(2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 93);
    e.bezierCurveTo(a * it, a * 95, a * 19, a * 95, a * 21, a * 95);
    e.bezierCurveTo(a * vr, a * 83, a * 17, a * 93, Ch * a, a * 76);
    e.bezierCurveTo(a * 11, a * 75, a * cn, a * 75, a * 18, a * 75);
    e.bezierCurveTo(C * a, a * 67, a * Oh, a * 67, a * 7, a * 59);
    e.bezierCurveTo(a * ts, a * 59, a * 14, a * 59, a * 21, a * 59);
    e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * te);
    e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    e.bezierCurveTo(a * 76, a * 7, a * 75, $i * a, a * 76, a * wg);
    e.bezierCurveTo(a * 81, a * 12, a * 84, a * Ig, a * 89, a * 27);
    e.bezierCurveTo(a * 95, a * 25, P * a, Ah * a, a * 105, a * 14);
    e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    e.bezierCurveTo(a * Dl, a * 95, a * 13, a * 99, a * 8, a * 93);
    e.closePath();
    eb(e, undefined, b[2], vs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 63);
    e.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, ue * a, a * 33);
    e.bezierCurveTo(wl * a, a * 12, a * 21, Tl * a, a * 32, a * 17);
    e.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    eb(e, b[ie], b[Zt], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 53);
    e.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * c);
    e.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    e.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    eb(e, b[1], b[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 63);
    e.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    e.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    e.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    e.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    e.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    e.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    e.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    e.closePath();
    eb(e, b[Ka]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 55);
    e.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    e.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    e.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    e.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    e.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    e.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    e.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    e.closePath();
    eb(e, b[Qt]);
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (Ht == c) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, Pa * a, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      eb(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * Qh, a * 60, a * ks, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    eb(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * is, a * 325, a * at, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    eb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    eb(e, b[ql], b[3], a * Jt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    eb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    eb(e, b[ld], b[Sg], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    eb(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    eb(e, b[gc], b[3], Jg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    eb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    eb(e, b[2], b[3], Tl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    eb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    eb(e, b[2], b[Gl], a * lq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    eb(e, b[2], b[Gl], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    eb(e, b[3], b[3], Zg * a);
    return d;
  }
  function dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(qn);
    tb(e, a * -21.5, a * -34, a * 43, a * 68, hd * a);
    e.restore();
    eb(e, c[$l], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    eb(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    eb(e, undefined, c[gh], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    eb(e, pl, c[hu], a * Io);
    return d;
  }
  function cm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    eb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    eb(d, b[2], b[og], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    eb(d, b[ld]);
    return c;
  }
  function mm() {
    var b = ax.time;
    if (ΔΔ[Ur.ⵠⲆⵠΔⵠ]) {
      oo.drawImage(ΔΔ[Ur.ⵠⲆⵠΔⵠ][b][1], oq + 480, pq + 190);
      oo.drawImage(ΔΔ[Ur.ⵠⲆⵠΔⵠ][b][2], oq + 180, pq - 430);
      oo.drawImage(ΔΔ[Ur.ⵠⲆⵠΔⵠ][b][1], oq - 855, pq + fs);
      oo.drawImage(ΔΔ[Ur.ⵠⲆⵠΔⵠ][b][0], oq - 550, pq - 300);
      oo.drawImage(ΔΔ[Ur.ⵠⲆⵠΔⵠ][b][tj], oq - 1020, pq - 520);
    }
    if (ΔΔ[Ur.ⵠᐃᐃⲆⵠ]) {
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][Ok], oq - 80, pq - 640);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][ag], oq + 80, pq + 490);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][sh], oq - 180, pq - 700);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][Fj], oq + 550, pq + 100);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][Fh], oq + 450, pq + 300);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][1], oq + 780, pq + 300);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][Xr], oq + 980, pq + 200);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][2], oq + 680, pq + 600);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][2], oq - 380, pq + 100);
      oo.drawImage(ΔΔ[Ur.ⵠᐃᐃⲆⵠ][b][2], oq + 280, pq + 250);
    }
    if (ΔΔ[Ur.ᐃⲆΔᐃⵠ]) {
      oo.drawImage(ΔΔ[Ur.ᐃⲆΔᐃⵠ][b][gr], oq - 590, pq);
      oo.drawImage(ΔΔ[Ur.ᐃⲆΔᐃⵠ][b][ur], oq + 120, pq - 390);
      oo.drawImage(ΔΔ[Ur.ᐃⲆΔᐃⵠ][b][Cq], oq - 270, pq + 340);
    }
    if (ΔΔ[Ur.ᐃⵠΔᐃ]) {
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][4], oq - 700, pq - 600);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][2], oq - 970, pq - 250);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][cl], oq - 720, pq - 200);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][2], oq - 1020, pq + 340);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][0], oq - 1120, pq - 0);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][1], oq - 650, pq - 330);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][4], oq - 495, pq - 90);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][dt], oq - 520, pq + 340);
      oo.drawImage(ΔΔ[Ur.ᐃⵠΔᐃ][b][2], oq + 830, pq - 520);
    }
    ΔΔ[Ur.ᐃᐃΔⲆⲆ];
    if (bx && ff) {
      var c = bx.ᐃᐃⵠ.x;
      var d = bx.ᐃᐃⵠ.y;
      bx.ᐃᐃⵠ.x = oq;
      bx.ᐃᐃⵠ.y = pq;
      var e = ff.time;
      ff.time = ax.time;
      var f;
      var g = ax.items;
      g[tg].x = 400;
      g[2].y = 100;
      g[qd].ⵠΔᐃⵠ(Ur.ᐃⲆᐃΔⵠ);
      (f = g[Ok]).x = -500;
      f.y = No;
      f.ⵠᐃⵠⲆ[0].x = f.x - 20.5;
      f.ⵠᐃⵠⲆ[0].y = f.y - 22.5;
      f.ⵠᐃⵠⲆ[Eo].x = f.x - 35.5;
      f.ⵠᐃⵠⲆ[1].y = f.y + 7.5;
      f.ⵠᐃⵠⲆ[Zn].x = f.x + 7.5;
      f.ⵠᐃⵠⲆ[sh].y = f.y - 30;
      f.ⵠᐃⵠⲆ[3].x = f.x + 22.5;
      f.ⵠᐃⵠⲆ[ar].y = f.y;
      f.ⵠᐃⵠⲆ[Yi].x = f.x - 7.5;
      f.ⵠᐃⵠⲆ[ug].y = f.y + 14.5;
      for (var h = 0; h < f.info; h++) {
        f.ⵠᐃⵠⲆ[h].ⵠΔᐃⵠ(Ur.ⲆΔΔΔⵠ);
      }
      (f = g[X]).x = 210;
      f.y = -290;
      f.ⵠᐃⵠⲆ[0].x = f.x - 20.5;
      f.ⵠᐃⵠⲆ[0].y = f.y - 22.5;
      f.ⵠᐃⵠⲆ[jq].x = f.x - 35.5;
      f.ⵠᐃⵠⲆ[zs].y = f.y + 7.5;
      f.ⵠᐃⵠⲆ[2].x = f.x + 7.5;
      f.ⵠᐃⵠⲆ[Tt].y = f.y - 30;
      f.ⵠᐃⵠⲆ[3].x = f.x + 22.5;
      f.ⵠᐃⵠⲆ[og].y = f.y;
      f.ⵠᐃⵠⲆ[Eg].x = f.x - 7.5;
      f.ⵠᐃⵠⲆ[_g].y = f.y + 14.5;
      for (h = 0; f.info > h; h++) {
        f.ⵠᐃⵠⲆ[h].ⵠΔᐃⵠ(Ur.ⲆΔΔΔⵠ);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[vq].ⲆᐃⵠΔᐃ(Ur.ⲆΔⲆΔⵠΔᐃ);
      g[Qs].ΔⲆⵠΔⵠ();
      bx.ᐃᐃⵠ.x = c;
      bx.ᐃᐃⵠ.y = d;
      ff.time = e;
    }
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * Jo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * Ws, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    eb(e, c[0]);
    e.globalAlpha = Ht;
    e.translate(a * -5, -xj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, P * a, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, Ws * a, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    eb(e, c[1], c[Tt], a * 6);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(gr);
    tb(e, a * -21.5, a * -34, a * 43, a * 68, a * au);
    e.restore();
    eb(e, c[1], c[2], Io * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    eb(e, qr, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    eb(e, ps, c[Rt], a * Io);
    return d;
  }
  function Tm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(-Vj * a, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    eb(d, b[Rl]);
    return c;
  }
  function fm() {
    ΔΔ[Ur.ΔᐃⵠᐃᐃΔΔ] = $t($l, [{
      f: Lc,
      x: _a,
      y: _a,
      a: aa,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔΔⲆΔΔΔⲆ] = ΔΔ[Ur.ΔᐃⵠᐃᐃΔΔ];
    ΔΔ[Ur.ᐃⲆⲆⵠᐃᐃᐃ] = [];
    ΔΔ[Ur.ᐃⲆⲆⵠᐃᐃᐃ][qn] = ⵠᐃ.ΔⲆⵠΔΔᐃⲆ;
    ΔΔ[Ur.ᐃⲆⲆⵠᐃᐃᐃ][1] = ⵠᐃ.ΔᐃᐃⲆⵠΔⲆ;
    ΔΔ[Ur.ᐃⲆⲆⵠᐃᐃᐃ][ql] = ⵠᐃ.ᐃᐃⵠᐃⲆⲆᐃ;
    ΔΔ[Ur.ⵠⲆΔΔᐃᐃⵠ] = ΔΔ[Ur.ᐃⲆⲆⵠᐃᐃᐃ];
    ΔΔ[Ur.ᐃⲆⲆⲆΔⵠΔ] = [];
    ΔΔ[Ur.ᐃⲆⲆⲆΔⵠΔ][0] = ⵠᐃ.ⵠⲆⵠΔⵠΔⲆ;
    ΔΔ[Ur.ᐃⲆⲆⲆΔⵠΔ][1] = ⵠᐃ.ΔΔⵠⵠᐃᐃⵠ;
    ΔΔ[Ur.ᐃⲆⲆⲆΔⵠΔ][2] = ⵠᐃ.ⵠΔΔⲆΔᐃΔ;
    ΔΔ[Ur.ΔⲆᐃᐃⵠⵠⵠ] = ΔΔ[Ur.ᐃⲆⲆⲆΔⵠΔ];
    ΔΔ[Ur.ᐃᐃⲆⵠⵠⲆⲆ] = [];
    ΔΔ[Ur.ᐃᐃⲆⵠⵠⲆⲆ][Ih] = ⵠᐃ.ᐃᐃᐃⵠⵠΔΔ;
    ΔΔ[Ur.ᐃᐃⲆⵠⵠⲆⲆ][Ag] = ⵠᐃ.ΔᐃⲆΔΔⵠΔ;
    ΔΔ[Ur.ᐃᐃⲆⵠⵠⲆⲆ][zk] = ⵠᐃ.ΔⵠⲆΔⲆⵠΔ;
    ΔΔ[Ur.ᐃⵠⲆⲆᐃᐃⲆ] = ΔΔ[Ur.ᐃᐃⲆⵠⵠⲆⲆ];
    ΔΔ[Ur.ⲆⲆⵠⲆΔⵠⵠ] = [];
    ΔΔ[Ur.ⲆⲆⵠⲆΔⵠⵠ][tj] = ⵠᐃ.ⲆΔΔΔᐃⲆΔ;
    ΔΔ[Ur.ⲆⲆⵠⲆΔⵠⵠ][As] = ⵠᐃ.ΔᐃΔΔⵠⲆΔ;
    ΔΔ[Ur.ⲆⲆⵠⲆΔⵠⵠ][re] = ⵠᐃ.ⲆⲆΔⵠⵠⵠⵠ;
    ΔΔ[Ur.ΔᐃⲆⲆⲆⲆⵠ] = ΔΔ[Ur.ⲆⲆⵠⲆΔⵠⵠ];
    ΔΔ[Ur.ᐃⵠᐃΔⵠⵠⲆ] = [];
    ΔΔ[Ur.ᐃⵠᐃΔⵠⵠⲆ][qn] = ⵠᐃ.ⲆⵠΔⵠᐃⲆⲆ;
    ΔΔ[Ur.ᐃⵠᐃΔⵠⵠⲆ][1] = ⵠᐃ.ⲆⲆⵠᐃᐃᐃⵠ;
    ΔΔ[Ur.ᐃⵠᐃΔⵠⵠⲆ][Zt] = ⵠᐃ.ᐃᐃΔⲆⵠⵠᐃ;
    ΔΔ[Ur.ⵠⲆᐃᐃΔⵠⵠ] = ΔΔ[Ur.ᐃⵠᐃΔⵠⵠⲆ];
    ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ] = [];
    ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ][Cq] = ⵠᐃ.ΔⲆⲆΔⲆᐃⵠ;
    ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ][1] = ⵠᐃ.ⵠΔΔⵠΔⵠⵠ;
    ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ][Tt] = ⵠᐃ.ⵠᐃⲆⵠΔⵠⵠ;
    ΔΔ[Ur.ⲆᐃⲆΔᐃⵠⲆ] = ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ];
    ΔΔ[Ur.ⵠⵠΔⲆⵠΔΔ] = ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ];
    ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ] = [];
    ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ][Tg] = ⵠᐃ.ᐃΔΔΔΔⵠⲆᐃⵠ;
    ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ][1] = ⵠᐃ.ᐃⵠᐃΔΔΔᐃⲆΔ;
    ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ][2] = ⵠᐃ.ⲆⵠΔⵠⵠⵠΔᐃⵠ;
    ΔΔ[Ur.ΔⲆⵠᐃΔΔⵠ] = ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ];
    ΔΔ[Ur.ΔᐃΔⲆᐃΔⲆ] = ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ];
    ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ] = [];
    ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ][Gr] = ⵠᐃ.ᐃⲆⵠᐃᐃⲆⵠ;
    ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ][ag] = ⵠᐃ.ΔⲆⲆⵠᐃⵠᐃ;
    ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ][2] = ⵠᐃ.ΔⲆΔⲆⲆᐃΔ;
    ΔΔ[Ur.ⲆⵠⵠᐃⵠⲆᐃ] = ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ];
    ΔΔ[Ur.ΔΔⲆⵠⵠᐃΔ] = ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ];
    ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ] = [];
    ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ][gr] = ⵠᐃ.ᐃᐃⲆᐃᐃⲆⵠ;
    ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ][$l] = ⵠᐃ.ⲆⲆᐃᐃⵠᐃⵠ;
    ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ][ql] = ⵠᐃ.ⵠΔΔⵠᐃᐃᐃ;
    ΔΔ[Ur.ⵠΔⵠⵠⲆΔΔ] = ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ];
    ΔΔ[Ur.ΔⵠᐃⵠⵠΔⵠ] = ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ];
    ΔΔ[Ur.ΔⲆⵠⵠΔⵠⵠ] = [];
    ΔΔ[Ur.ΔⲆⵠⵠΔⵠⵠ][0] = ⵠᐃ.ⲆⵠΔᐃⲆⵠⵠ;
    ΔΔ[Ur.ΔⲆⵠⵠΔⵠⵠ][1] = ⵠᐃ.ΔⲆⵠⵠⲆΔⲆ;
    ΔΔ[Ur.ΔⲆⵠⵠΔⵠⵠ][2] = ⵠᐃ.ⲆΔΔⵠᐃᐃᐃ;
    ΔΔ[Ur.ⲆᐃⵠⵠᐃᐃⲆ] = ΔΔ[Ur.ΔⲆⵠⵠΔⵠⵠ];
    ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ] = [];
    ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ][0] = ⵠᐃ.ΔᐃⲆⲆⲆΔΔ;
    ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ][1] = ⵠᐃ.ⲆⲆΔⵠΔⵠⵠ;
    ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ][2] = ⵠᐃ.ⲆᐃⵠᐃᐃⲆΔ;
    ΔΔ[Ur.ΔⲆⵠᐃⵠⵠⵠ] = ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ];
    ΔΔ[Ur.ᐃⵠⲆᐃΔᐃΔ] = ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ];
    ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ] = [];
    ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ][0] = ⵠᐃ.ᐃⵠΔⲆⵠΔⲆ;
    ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ][1] = ⵠᐃ.ⲆⵠⲆⵠⲆΔΔ;
    ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ][2] = ⵠᐃ.ΔⲆᐃⵠΔΔⲆ;
    ΔΔ[Ur.ⵠⲆᐃⲆΔⲆⲆ] = ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ];
    ΔΔ[Ur.ⵠⲆΔⵠⲆⲆΔ] = ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ];
    ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ][Ih] = ⵠᐃ.ᐃⵠⲆᐃᐃⲆᐃ;
    ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ][ag] = ⵠᐃ.ⵠⲆᐃⵠⵠᐃᐃ;
    ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ][Tt] = ⵠᐃ.ⵠᐃᐃᐃⲆΔⵠ;
    ΔΔ[Ur.ᐃⲆᐃⵠⲆᐃᐃ] = ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ];
    ΔΔ[Ur.ΔⲆΔΔⵠΔΔ] = ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ];
    ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ] = [];
    ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ][Fj] = ⵠᐃ.ⲆᐃΔⲆΔⵠΔ;
    ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ][1] = ⵠᐃ.ΔⲆⲆᐃⵠⲆⵠ;
    ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ][2] = ⵠᐃ.ⲆᐃⵠᐃᐃΔⵠ;
    ΔΔ[Ur.ⵠⲆΔⲆᐃᐃΔ] = ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ];
    ΔΔ[Ur.ⲆⲆⲆⵠᐃΔᐃ] = ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ];
    ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ] = [];
    ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ][gr] = ⵠᐃ.ⲆⲆⵠⵠⲆΔⵠ;
    ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ][Zq] = ⵠᐃ.ΔᐃᐃⲆⵠᐃΔ;
    ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ][tg] = ⵠᐃ.ᐃᐃⲆᐃΔᐃⵠ;
    ΔΔ[Ur.ΔⵠᐃⲆᐃᐃᐃ] = ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ];
    ΔΔ[Ur.ⵠΔⵠΔΔᐃᐃ] = ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ];
    ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ] = [];
    ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ][tj] = ⵠᐃ.ΔᐃᐃᐃⲆⵠΔ;
    ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ][1] = ⵠᐃ.ⲆΔΔΔΔⵠΔ;
    ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ][re] = ⵠᐃ.ΔⲆΔⲆᐃⲆⲆ;
    ΔΔ[Ur.ᐃᐃⲆᐃᐃᐃⵠ] = ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ];
    ΔΔ[Ur.ᐃΔⵠᐃⵠⲆᐃ] = ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ];
    ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ] = [];
    ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ][0] = ⵠᐃ.ᐃΔΔΔⵠⲆⲆ;
    ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ][1] = ⵠᐃ.ᐃⲆΔᐃᐃⵠⵠ;
    ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ][Tt] = ⵠᐃ.ΔᐃᐃⲆᐃⵠⵠ;
    ΔΔ[Ur.ᐃᐃᐃΔⵠᐃΔ] = ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ];
    ΔΔ[Ur.ⲆΔⲆⲆⵠΔⲆ] = ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ];
    ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ] = [];
    ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ][0] = ⵠᐃ.ⵠᐃⵠⲆⵠⲆⵠ;
    ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ][1] = ⵠᐃ.ⵠⵠⲆⲆⵠⵠᐃ;
    ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ][ld] = ⵠᐃ.ΔᐃⲆⲆⲆⲆᐃ;
    ΔΔ[Ur.ⲆⲆⵠᐃⲆᐃⵠ] = ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ];
    ΔΔ[Ur.ⵠᐃⵠΔⲆΔᐃ] = ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ];
    ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ] = [];
    ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ][0] = ⵠᐃ.ⵠᐃΔΔᐃΔΔ;
    ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ][Fh] = ⵠᐃ.ⵠᐃⲆⲆΔⵠΔ;
    ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ][2] = ⵠᐃ.ᐃⵠᐃΔⲆⵠΔ;
    ΔΔ[Ur.ⲆΔΔⲆΔΔᐃ] = ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ];
    ΔΔ[Ur.ᐃᐃⲆᐃⵠⲆΔ] = ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ];
    ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ] = [];
    ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ][Nl] = ⵠᐃ.ΔⵠⲆⲆⵠⵠᐃ;
    ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ][_b] = ⵠᐃ.ᐃᐃΔΔⲆⲆⵠ;
    ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ][Xh] = ⵠᐃ.ᐃΔᐃⲆᐃᐃᐃ;
    ΔΔ[Ur.ⲆᐃᐃᐃΔⲆᐃ] = ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ];
    ΔΔ[Ur.ᐃΔᐃⵠΔᐃⲆ] = ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ];
    ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ] = [];
    ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ][0] = ⵠᐃ.ᐃⲆᐃⲆΔᐃΔ;
    ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ][jq] = ⵠᐃ.ⲆⲆᐃΔⵠΔΔ;
    ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ][2] = ⵠᐃ.ⲆΔⵠⲆⵠᐃⵠ;
    ΔΔ[Ur.ᐃⲆⲆⵠᐃΔΔ] = ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ];
    ΔΔ[Ur.ΔⵠΔⲆᐃⲆⵠ] = ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ];
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ] = [];
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ][ms] = ⵠᐃ.ΔⵠᐃⵠᐃⲆⲆ;
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ][Ue] = ⵠᐃ.ⵠⵠᐃΔΔΔΔ;
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ][2] = ⵠᐃ.ⲆᐃᐃᐃⵠᐃⲆ;
    ΔΔ[Ur.ΔⵠΔΔᐃΔᐃ] = ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ];
    ΔΔ[Ur.ᐃΔΔⵠⵠⵠⲆ] = ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ];
    ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ][0] = ⵠᐃ.ᐃᐃⲆⲆᐃⲆΔ;
    ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ][1] = ⵠᐃ.ᐃᐃᐃΔⲆⲆⵠ;
    ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ][ld] = ⵠᐃ.ΔⲆΔΔᐃⵠⵠ;
    ΔΔ[Ur.ⲆΔᐃΔⲆⲆⲆ] = ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ];
    ΔΔ[Ur.ΔⵠᐃᐃⵠⲆⵠ] = ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ];
    ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ] = [];
    ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ][uh] = ⵠᐃ.ΔⲆᐃΔΔⲆᐃ;
    ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ][Ue] = ⵠᐃ.ⲆⵠΔⵠⵠⲆΔ;
    ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ][2] = ⵠᐃ.ΔⲆᐃΔⵠᐃΔ;
    ΔΔ[Ur.ⲆΔⵠⵠΔᐃΔ] = ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ];
    ΔΔ[Ur.ᐃⵠⲆΔᐃᐃᐃ] = ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ];
    ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ][ur] = ⵠᐃ.ΔⵠᐃⵠΔⵠΔ;
    ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ][1] = ⵠᐃ.ᐃᐃⲆⲆΔⲆᐃ;
    ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ][re] = ⵠᐃ.ᐃᐃⵠᐃⵠⲆΔ;
    ΔΔ[Ur.ⲆΔΔΔΔΔᐃ] = ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ];
    ΔΔ[Ur.ᐃᐃᐃᐃᐃⵠⲆ] = ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ];
    ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ] = [];
    ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ][0] = ⵠᐃ.ⵠᐃΔⵠΔᐃⲆ;
    ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ][1] = ⵠᐃ.ΔⵠⵠΔᐃⲆΔ;
    ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ][2] = ⵠᐃ.ⵠΔⲆⵠⲆⲆⲆ;
    ΔΔ[Ur.ᐃᐃΔⵠⵠⲆΔ] = ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ];
    ΔΔ[Ur.ⵠⲆΔᐃΔΔΔ] = ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ];
    ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ] = [];
    ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ][qk] = ⵠᐃ.ⲆⵠⲆⲆⵠⲆⵠ;
    ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ][As] = ⵠᐃ.ΔΔⵠᐃΔᐃᐃ;
    ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ][Zt] = ⵠᐃ.ᐃⵠᐃⲆᐃΔΔ;
    ΔΔ[Ur.ⵠⵠΔΔᐃᐃⵠ] = ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ];
    ΔΔ[Ur.ⵠΔⵠⵠⵠΔⲆ] = ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ];
    ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ] = [];
    ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ][0] = ⵠᐃ.ⵠΔⵠⲆⵠⲆᐃ;
    ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ][1] = ⵠᐃ.ⵠⵠᐃⲆⲆΔⲆ;
    ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ][2] = ⵠᐃ.ⵠᐃΔⵠΔⲆΔ;
    ΔΔ[Ur.ΔⲆⲆΔᐃᐃⵠ] = ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ];
    ΔΔ[Ur.ΔᐃⵠᐃΔⲆᐃ] = ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ];
    ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ] = [];
    ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ][uh] = ⵠᐃ.ⵠⵠᐃⵠⲆⵠⵠ;
    ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ][Ht] = ⵠᐃ.ΔΔⵠⲆΔᐃⲆ;
    ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ][2] = ⵠᐃ.ᐃᐃΔⲆⵠⲆΔ;
    ΔΔ[Ur.ⲆⵠΔᐃΔⲆΔ] = ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ];
    ΔΔ[Ur.ΔⲆΔⲆΔⲆⲆ] = ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ];
    ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ] = [];
    ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ][Tg] = ⵠᐃ.ⲆᐃⲆⵠⵠΔⵠ;
    ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ][1] = ⵠᐃ.ᐃΔΔⵠΔΔᐃ;
    ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ][hc] = ⵠᐃ.ΔⵠΔⵠⲆᐃⵠ;
    ΔΔ[Ur.ΔᐃᐃⵠᐃⲆΔ] = ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ];
    ΔΔ[Ur.ⵠⲆⵠⲆⲆⵠⵠ] = ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ];
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ] = [];
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ][0] = ⵠᐃ.ΔᐃᐃᐃⲆⵠⲆ;
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ][Al] = ⵠᐃ.ΔⵠᐃⵠⵠⲆΔ;
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ][2] = ⵠᐃ.ⵠᐃⵠⵠⲆⲆⲆ;
    ΔΔ[Ur.ⲆⲆᐃΔᐃⲆΔ] = ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ];
    ΔΔ[Ur.ΔᐃΔⵠᐃⲆᐃ] = ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ];
    ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ] = [];
    ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ][0] = ⵠᐃ.ᐃᐃⵠⲆⲆᐃⵠ;
    ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ][1] = ⵠᐃ.Ⲇᐃᐃⵠᐃᐃᐃ;
    ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ][2] = ⵠᐃ.ⵠⵠⵠⵠΔⵠᐃ;
    ΔΔ[Ur.ⵠⲆⲆⲆΔⵠⲆ] = ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ];
    ΔΔ[Ur.ⵠⲆΔᐃⵠⵠⵠ] = ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ];
    ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ] = [];
    ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ][0] = ⵠᐃ.ⵠᐃⵠⲆᐃⵠᐃΔⵠ;
    ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ][1] = ⵠᐃ.ΔᐃⲆⲆΔⵠΔΔᐃ;
    ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ][qd] = ⵠᐃ.ⵠᐃⲆⲆΔΔΔΔᐃ;
    ΔΔ[Ur.ⵠΔΔⵠⵠΔⵠ] = ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ];
    ΔΔ[Ur.ΔⲆⵠⵠⵠᐃΔ] = ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ];
    ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ] = [];
    ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ][0] = ⵠᐃ.ⵠᐃⵠΔⲆⵠΔⲆᐃ;
    ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ][1] = ⵠᐃ.ⵠΔΔⵠΔⵠΔᐃⲆ;
    ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ][2] = ⵠᐃ.ⵠⵠᐃΔⲆⲆᐃⲆⵠ;
    ΔΔ[Ur.ⲆᐃⵠⲆᐃⵠΔ] = ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ];
    ΔΔ[Ur.ⲆⲆⵠΔⲆΔⵠ] = ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ];
    ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ] = [];
    ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ][qk] = ⵠᐃ.ᐃᐃⲆᐃⲆⲆⵠⵠⵠ;
    ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ][j] = ⵠᐃ.ΔᐃⲆⲆᐃᐃᐃΔⵠ;
    ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ][sh] = ⵠᐃ.ⵠΔΔΔⲆⲆⲆΔⵠ;
    ΔΔ[Ur.ⲆᐃΔΔᐃⵠⲆ] = ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ];
    ΔΔ[Ur.ΔⲆΔᐃᐃΔⲆ] = ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ];
    ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ] = [];
    ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ][0] = ⵠᐃ.ΔⲆⵠⵠᐃΔΔᐃⲆ;
    ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ][1] = ⵠᐃ.ⲆΔᐃΔᐃΔⵠⵠⵠ;
    ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ][2] = ⵠᐃ.ᐃΔᐃⵠⲆΔΔΔᐃ;
    ΔΔ[Ur.ΔⵠᐃᐃᐃᐃΔ] = ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ];
    ΔΔ[Ur.ᐃⲆⲆⵠΔᐃⲆ] = ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ];
    ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ][0] = ⵠᐃ.ⲆᐃⵠᐃⵠΔⵠⲆⵠ;
    ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ][ie] = ⵠᐃ.ⵠᐃⲆⵠⲆΔⵠᐃᐃ;
    ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ][gc] = ⵠᐃ.ⲆⵠᐃⲆᐃⵠΔⵠᐃ;
    ΔΔ[Ur.ΔᐃⵠΔⵠᐃΔ] = ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ];
    ΔΔ[Ur.ΔⲆΔⵠΔΔΔ] = ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ];
    ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ] = [];
    ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ][Fj] = ⵠᐃ.ᐃⲆᐃᐃⲆΔⵠ;
    ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ][1] = ⵠᐃ.ᐃⲆⵠⲆᐃⵠΔ;
    ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ][zk] = ⵠᐃ.ⲆⵠⲆΔΔⵠⵠ;
    ΔΔ[Ur.ⵠΔΔⲆⲆⲆⵠ] = ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ];
    ΔΔ[Ur.ᐃⵠⲆᐃⲆΔΔ] = ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ];
    ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ] = [];
    ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ][qn] = ⵠᐃ.ⵠΔᐃᐃᐃⵠᐃ;
    ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ][1] = ⵠᐃ.ⲆᐃΔΔᐃⲆᐃ;
    ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ][2] = ⵠᐃ.ᐃᐃᐃⲆΔⵠΔ;
    ΔΔ[Ur.ⲆⲆⲆΔᐃⵠⵠ] = ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ];
    ΔΔ[Ur.ΔΔᐃⵠᐃΔⲆⲆⵠ] = ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ];
    ΔΔ[Ur.ⲆⵠⵠΔΔΔΔ] = $t(Ag, [{
      f: cb,
      x: 0,
      y: ms,
      a: Zq,
      r: uh,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⲆᐃΔᐃᐃᐃ] = ΔΔ[Ur.ⲆⵠⵠΔΔΔΔ];
    ΔΔ[Ur.ⵠⵠᐃᐃⲆⲆⲆ] = $t(Ag, [{
      f: om,
      x: 0,
      y: 0,
      a: As,
      r: gr,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃΔᐃⵠΔΔ] = ΔΔ[Ur.ⵠⵠᐃᐃⲆⲆⲆ];
    ΔΔ[Ur.ⵠΔⵠⲆᐃⵠᐃ] = $t(1, [{
      f: Zb,
      x: -1,
      y: Nl,
      a: As,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", p[Zn], "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Vb,
      x: -1,
      y: 0,
      a: 1,
      r: ne,
      c: ["#0d1b1c", "#596560", "#394841", p[Zt], "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Vt,
      x: -1,
      y: Gr,
      a: 1,
      r: Cq,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⲆᐃᐃᐃⵠΔ] = ΔΔ[Ur.ⵠΔⵠⲆᐃⵠᐃ];
    ΔΔ[Ur.ⵠᐃⵠⵠⲆΔᐃ] = $t(Zq, [{
      f: Kb,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⲆⵠⲆᐃᐃᐃ] = $t(As, [{
      f: Xd,
      x: 0,
      y: _a,
      a: jq,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⵠⵠⵠⵠᐃⲆ] = ΔΔ[Ur.ΔⲆⵠⲆᐃᐃᐃ];
    ΔΔ[Ur.ᐃΔΔΔΔᐃᐃ] = $t(1, [{
      f: Xu,
      x: qn,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⲆᐃᐃᐃⵠⲆ] = ΔΔ[Ur.ᐃΔΔΔΔᐃᐃ];
    ΔΔ[Ur.ΔᐃⵠⲆᐃᐃᐃ] = $t(Gs, [{
      f: Xu,
      x: Rl,
      y: 0,
      a: Fh,
      r: ur,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⵠᐃⲆⲆⵠⵠ] = ΔΔ[Ur.ΔᐃⵠⲆᐃᐃᐃ];
    ΔΔ[Ur.ⵠᐃⵠΔΔⵠⵠ] = $t(1, [{
      f: Xu,
      x: qn,
      y: _a,
      a: 1,
      r: ne,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⲆᐃⲆⵠⵠⵠ] = ΔΔ[Ur.ⵠᐃⵠΔΔⵠⵠ];
    ΔΔ[Ur.ᐃΔⲆⲆⵠⲆⵠ] = $t(Gs, [{
      f: Xu,
      x: rl,
      y: 0,
      a: 1,
      r: Ih,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⵠⲆⵠⲆᐃⲆ] = ΔΔ[Ur.ᐃΔⲆⲆⵠⲆⵠ];
    ΔΔ[Ur.ΔⲆⲆᐃⵠᐃᐃ] = $t(Gs, [{
      f: Xu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⵠᐃᐃᐃⵠⵠ] = ΔΔ[Ur.ΔⲆⲆᐃⵠᐃᐃ];
    ΔΔ[Ur.ⲆΔⲆⲆⵠᐃᐃ] = $t(Ej, [{
      f: Xu,
      x: Cn,
      y: 0,
      a: j,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃⵠⲆⲆⲆⲆ] = ΔΔ[Ur.ⲆΔⲆⲆⵠᐃᐃ];
    ΔΔ[Ur.ⵠΔΔⲆᐃⵠⵠ] = ΔΔ[Ur.ⲆΔⲆⲆⵠᐃᐃ];
    ΔΔ[Ur.ⲆΔⵠⲆⲆⲆⲆ] = $t(1, [{
      f: Xu,
      x: 0,
      y: 0,
      a: Ht,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⲆⵠⲆΔⵠΔ] = ΔΔ[Ur.ⲆΔⵠⲆⲆⲆⲆ];
    ΔΔ[Ur.ⲆⲆⲆⵠᐃᐃΔ] = ΔΔ[Ur.ⲆΔⵠⲆⲆⲆⲆ];
    ΔΔ[Ur.ᐃΔΔᐃⲆⵠⵠ] = $t(1, [{
      f: Xu,
      x: tj,
      y: tj,
      a: Zq,
      r: rl,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⲆⲆⵠⵠⲆΔ] = ΔΔ[Ur.ᐃΔΔᐃⲆⵠⵠ];
    ΔΔ[Ur.ᐃᐃⲆΔᐃΔⲆ] = ΔΔ[Ur.ᐃΔΔᐃⲆⵠⵠ];
    ΔΔ[Ur.ΔΔⲆᐃᐃᐃⲆ] = $t(Eo, [{
      f: Xu,
      x: rl,
      y: 0,
      a: Eo,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠᐃΔΔᐃⵠⲆ] = ΔΔ[Ur.ΔΔⲆᐃᐃᐃⲆ];
    ΔΔ[Ur.ⵠⵠⵠⲆⲆⵠⵠ] = ΔΔ[Ur.ΔΔⲆᐃᐃᐃⲆ];
    ΔΔ[Ur.ⲆᐃⵠΔⵠΔΔ] = $t(1, [{
      f: eu,
      x: -2,
      y: -2,
      a: _b,
      r: -Math.PI / Vl,
      c: ["#4d2d14", "#432516"]
    }, {
      f: bu,
      x: -2,
      y: -sh,
      a: Ht,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⵠⲆΔⵠⵠⲆ] = ΔΔ[Ur.ⲆᐃⵠΔⵠΔΔ];
    ΔΔ[Ur.ⲆⲆⵠᐃⲆⵠⵠ] = $t(Ej, [{
      f: du,
      x: -2,
      y: -1,
      a: Ht,
      r: -Math.PI / qq,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: bu,
      x: -qd,
      y: -1,
      a: ie,
      r: -Math.PI / Ck,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⵠΔⲆⲆΔⵠ] = ΔΔ[Ur.ⲆⲆⵠᐃⲆⵠⵠ];
    ΔΔ[Ur.ⵠᐃΔⵠᐃⲆΔ] = $t(Ue, [{
      f: vu,
      x: Cl,
      y: 0,
      a: ie,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆⵠⲆⵠⲆΔ] = $t(1, [{
      f: Mu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / gg,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃΔᐃᐃⲆΔⵠ] = $t(1, [{
      f: yu,
      x: Zt,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: [p[ns], "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃΔΔⲆⵠⵠᐃ] = $t(j, [{
      f: Au,
      x: Ss,
      y: tj,
      a: 1,
      r: Math.PI / Jo,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⵠⲆΔᐃⲆΔ] = $t(Zq, [{
      f: Hu,
      x: 2,
      y: Nl,
      a: jq,
      r: Math.PI / xj,
      c: ["#0d1b1c", p[Yi], "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⲆⵠⲆᐃⵠΔ] = $t(1, [{
      f: Vu,
      x: 2,
      y: Cq,
      a: Gs,
      r: Math.PI / cd,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆΔΔⲆΔⵠΔ] = $t(As, [{
      f: Nu,
      x: vk,
      y: rl,
      a: 1,
      r: Math.PI / pr,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⵠⲆΔΔⵠΔ] = $t(1, [{
      f: uu,
      x: -hc,
      y: Ku,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠΔⵠΔᐃΔᐃ] = $t(Ue, [{
      f: uu,
      x: -2,
      y: ha,
      a: zs,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ΔⵠΔᐃⲆᐃⵠ] = $t(ag, [{
      f: uu,
      x: -vk,
      y: Jo,
      a: _b,
      r: -Math.PI / ed,
      c: ["#0d1b1c", "#000000", "#0d1b1c", p[q], "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠΔⵠⵠⲆⲆⲆ] = $t(1, [{
      f: uu,
      x: -2,
      y: ha,
      a: Al,
      r: -Math.PI / Os,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆΔΔⲆᐃΔⵠ] = $t(zs, [{
      f: uu,
      x: -Pt,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ] = [];
    ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ][rl] = ⵠᐃ.ΔⵠΔᐃⵠⲆΔ;
    ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ][1] = ⵠᐃ.ⵠΔⵠⵠΔⵠⲆ;
    ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ][tg] = ⵠᐃ.ⵠΔᐃᐃᐃⵠⲆ;
    ΔΔ[Ur.ⵠΔⲆⲆⲆΔᐃ] = ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ];
    ΔΔ[Ur.ⵠΔⲆΔᐃⵠΔ] = ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ];
    ΔΔ[Ur.ᐃᐃⵠⵠⵠⲆⵠ] = $t(Ue, [{
      f: Lu,
      x: -gg,
      y: -xh,
      a: 1,
      r: Nl,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆⲆΔᐃΔⵠⵠ] = $t(aa, [{
      f: Pu,
      x: -5,
      y: -Vh,
      a: Ej,
      r: Qs,
      c: ["#282823", "#877c2d", p[ea]]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ᐃΔΔᐃΔΔⵠ] = $t(1, [{
      f: Qu,
      x: -5,
      y: -jt,
      a: Oj,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔⲆᐃⵠⲆⲆⲆ] = $t(Ht, [{
      f: eu,
      x: ne,
      y: -ha,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠⲆⵠΔⲆΔⵠ] = ΔΔ[Ur.ᐃΔᐃᐃⲆΔⵠ];
    ΔΔ[Ur.ⵠᐃᐃΔΔⲆⵠ] = ΔΔ[Ur.ᐃΔΔⲆⵠⵠᐃ];
    ΔΔ[Ur.ᐃΔⲆⵠΔΔᐃ] = ΔΔ[Ur.ⲆⵠⲆΔᐃⲆΔ];
    ΔΔ[Ur.ᐃⵠⵠⵠⲆⵠᐃ] = ΔΔ[Ur.ⲆⲆⵠⲆᐃⵠΔ];
    ΔΔ[Ur.ᐃΔⲆΔΔΔᐃ] = ΔΔ[Ur.ⲆΔΔⲆΔⵠΔ];
    ΔΔ[Ur.ᐃⲆΔΔᐃΔᐃ] = ΔΔ[Ur.ᐃⵠⲆΔΔⵠΔ];
    ΔΔ[Ur.ⲆΔⵠⲆΔᐃΔ] = ΔΔ[Ur.ⵠΔⵠΔᐃΔᐃ];
    ΔΔ[Ur.ΔΔᐃⵠⵠⲆΔ] = ΔΔ[Ur.ΔⵠΔᐃⲆᐃⵠ];
    ΔΔ[Ur.ᐃⲆⵠΔᐃⲆΔ] = ΔΔ[Ur.ⵠΔⵠⵠⲆⲆⲆ];
    ΔΔ[Ur.ᐃⲆΔΔᐃⵠⵠ] = ΔΔ[Ur.ⲆΔΔⲆᐃΔⵠ];
    ΔΔ[Ur.ⵠᐃⵠᐃⵠΔΔ] = $t(_b, [{
      f: Mb,
      x: 0,
      y: 0,
      a: Gs,
      r: Cq
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⲆᐃᐃᐃⲆᐃ] = $t(1, [{
      f: Gb,
      x: 0,
      y: 0,
      a: Zq,
      r: Fj,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔΔᐃΔⵠⲆⲆ] = ΔΔ[Ur.ᐃⲆᐃᐃᐃⲆᐃ];
    ΔΔ[Ur.ΔⵠⲆⵠⲆⵠᐃ] = $t(1, [{
      f: Td,
      x: -Ss,
      y: -sh,
      a: Ok,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃΔⵠⵠᐃⲆ] = ΔΔ[Ur.ΔⵠⲆⵠⲆⵠᐃ];
    ΔΔ[Ur.ΔⵠΔᐃΔⵠΔ] = $t(1, [{
      f: bd,
      x: gr,
      y: ms,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃΔⲆΔᐃⵠ] = ΔΔ[Ur.ΔⵠΔᐃΔⵠΔ];
    ΔΔ[Ur.Ⲇᐃᐃᐃᐃᐃⵠ] = $t(1, [{
      f: Td,
      x: 0,
      y: Cq,
      a: 1,
      r: 0,
      c: ["#0d1b1c", p[sr], "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃᐃⲆⲆᐃⲆ] = ΔΔ[Ur.Ⲇᐃᐃᐃᐃᐃⵠ];
    ΔΔ[Ur.ⲆΔⲆⵠⲆⵠᐃ] = $t(1, [{
      f: pd,
      x: 0,
      y: ms,
      a: _b,
      r: qk,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⲆΔⵠᐃⵠⵠ] = ΔΔ[Ur.ⲆΔⲆⵠⲆⵠᐃ];
    ΔΔ[Ur.ⵠⲆⲆΔᐃᐃⲆ] = $t(1, [{
      f: ud,
      x: 0,
      y: Cn,
      a: 1,
      r: Nl,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⵠᐃΔΔⵠᐃ] = ΔΔ[Ur.ⵠⲆⲆΔᐃᐃⲆ];
    ΔΔ[Ur.ⲆⵠⲆᐃᐃⲆⲆ] = $t(1, [{
      f: _d,
      x: Cn,
      y: Nl,
      a: 1,
      r: tj,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠΔᐃᐃⵠⲆᐃ] = ΔΔ[Ur.ⲆⵠⲆᐃᐃⲆⲆ];
    ΔΔ[Ur.ⵠΔᐃⵠᐃΔⵠ] = $t(zs, [{
      f: ic,
      x: 0,
      y: tj,
      a: 1,
      r: Rl,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆᐃⲆⲆᐃⵠΔ] = ΔΔ[Ur.ⵠΔᐃⵠᐃΔⵠ];
    ΔΔ[Ur.ⲆΔⵠᐃⲆᐃΔ] = $t(aa, [{
      f: ic,
      x: 0,
      y: 0,
      a: Al,
      r: Nl,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔᐃᐃΔᐃⵠⲆ] = ΔΔ[Ur.ⲆΔⵠᐃⲆᐃΔ];
    ΔΔ[Ur.ⵠⲆⲆᐃⲆᐃⲆ] = $t(Ok, [{
      f: ac,
      x: ne,
      y: rl,
      a: aa,
      r: uh,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⵠᐃᐃᐃⵠⵠ] = ΔΔ[Ur.ⵠⲆⲆᐃⲆᐃⲆ];
    ΔΔ[Ur.ⵠᐃⲆⲆΔⵠᐃ] = $t(1, [{
      f: ac,
      x: Nl,
      y: 0,
      a: Ok,
      r: ms,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⵠΔⲆⲆⲆⲆ] = ΔΔ[Ur.ⵠᐃⲆⲆΔⵠᐃ];
    ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠⲆ] = $t(Fh, [{
      f: kd,
      x: Tg,
      y: 0,
      a: 1,
      r: _a,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⲆΔᐃⲆⵠΔ] = ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠⲆ];
    ΔΔ[Ur.ΔΔΔᐃΔΔⲆ] = $t(ag, [{
      f: Ad,
      x: Cq,
      y: ur,
      a: 1,
      r: Gr,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⵠΔⲆⵠⵠⵠ] = ΔΔ[Ur.ΔΔΔᐃΔΔⲆ];
    ΔΔ[Ur.ⵠᐃᐃᐃⵠⵠⲆ] = $t(1, [{
      f: Ad,
      x: Rl,
      y: Tg,
      a: Fh,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆᐃⵠⵠΔᐃᐃ] = ΔΔ[Ur.ⵠᐃᐃᐃⵠⵠⲆ];
    ΔΔ[Ur.ⲆⵠⵠΔᐃΔⵠ] = $t(1, [{
      f: zd,
      x: Tg,
      y: 0,
      a: j,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠΔⵠΔⵠⵠⲆ] = ΔΔ[Ur.ⲆⵠⵠΔᐃΔⵠ];
    ΔΔ[Ur.ᐃⵠΔΔⲆⲆΔ] = $t(1, [{
      f: yd,
      x: Cq,
      y: gr,
      a: Ue,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⵠᐃᐃⵠΔΔ] = ΔΔ[Ur.ᐃⵠΔΔⲆⲆΔ];
    ΔΔ[Ur.ᐃΔⲆᐃⵠΔⲆ] = $t(Zq, [{
      f: Fd,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠΔⵠⲆⲆᐃⲆ] = ΔΔ[Ur.ᐃΔⲆᐃⵠΔⲆ];
    ΔΔ[Ur.ᐃⲆΔⲆⲆᐃⵠ] = $t(Ej, [{
      f: Ob,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⵠΔⲆⲆⲆΔ] = $t(Fh, [{
      f: Ob,
      x: 0,
      y: -Gl,
      a: 1,
      r: ms,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⲆΔⲆΔΔⵠ] = ΔΔ[Ur.ᐃⵠΔⲆⲆⲆΔ];
    ΔΔ[Ur.ᐃⲆⲆⵠᐃⵠᐃ] = $t(As, [{
      f: Ut,
      x: -Wb,
      y: -mt,
      a: 1,
      r: Tg,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⲆⵠΔⲆΔⲆ] = $t(1, [{
      f: Ut,
      x: -Sg,
      y: -3,
      a: Ag,
      r: Cn,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔΔⲆᐃΔⲆΔ] = ΔΔ[Ur.ⵠⲆⵠΔⲆΔⲆ];
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⵠᐃ] = $t(Ht, [{
      f: jd,
      x: -ar,
      y: -mt,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆⲆⵠΔⵠᐃⲆ] = $t(Fh, [{
      f: jd,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆⵠⲆⲆᐃⵠΔ] = $t(1, [{
      f: fd,
      x: 0,
      y: Cn,
      a: Oj,
      r: _a,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔΔΔⲆⵠΔⲆ] = $t(ag, [{
      f: fd,
      x: Fj,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠⵠⵠΔΔⲆⲆ] = $t(1, [{
      f: jd,
      x: ne,
      y: 0,
      a: aa,
      r: vq,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔᐃⲆⵠΔⵠⲆ] = $t(1, [{
      f: jd,
      x: -3,
      y: -yh,
      a: 1,
      r: Qs,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆᐃⲆᐃⲆᐃⲆ] = $t(Oj, [{
      f: jd,
      x: -3,
      y: -Ka,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔⵠⲆᐃⵠᐃᐃ] = $t(1, [{
      f: Qd,
      x: qk,
      y: ms,
      a: Zq,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃΔᐃⵠⲆⵠⲆ] = ΔΔ[Ur.ΔⵠⲆᐃⵠᐃᐃ];
    ΔΔ[Ur.ⲆΔⵠᐃᐃᐃΔ] = $t(Ue, [{
      f: wd,
      x: Cn,
      y: Gr,
      a: Gs,
      r: Cq,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⵠⵠⵠⵠⲆⲆ] = ΔΔ[Ur.ⲆΔⵠᐃᐃᐃΔ];
    ΔΔ[Ur.ΔⲆΔⲆⲆⲆΔ] = $t(1, [{
      f: Ed,
      x: qk,
      y: 0,
      a: 1,
      r: Ih,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠΔⲆΔⵠᐃΔ] = ΔΔ[Ur.ΔⲆΔⲆⲆⲆΔ];
    ΔΔ[Ur.ΔⵠⲆᐃᐃⵠⵠ] = $t(1, [{
      f: ku,
      x: tj,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆᐃΔⲆᐃᐃ] = ΔΔ[Ur.ΔⵠⲆᐃᐃⵠⵠ];
    ΔΔ[Ur.ΔΔⲆᐃⲆⲆⵠ] = $t(1, [{
      f: pu,
      x: 0,
      y: jt,
      a: Gs,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠⲆΔⲆⵠⵠΔ] = ΔΔ[Ur.ΔΔⲆᐃⲆⲆⵠ];
    ΔΔ[Ur.ΔΔΔᐃᐃⵠᐃ] = $t(1, [{
      f: _t,
      x: -2,
      y: -qd,
      a: j,
      r: Cn,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⵠⲆⲆⲆᐃⲆ] = ΔΔ[Ur.ΔΔΔᐃᐃⵠᐃ];
    ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ] = [];
    ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ][ne] = ⵠᐃ.ⵠⵠⲆⲆⲆⲆᐃ;
    ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ][1] = ⵠᐃ.ΔΔᐃᐃⵠⵠᐃ;
    ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ][2] = ⵠᐃ.ΔⵠⵠⵠΔᐃΔ;
    ΔΔ[Ur.ᐃΔᐃⵠΔⲆᐃ] = ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ];
    ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ] = [];
    ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ][vq] = ⵠᐃ.ΔᐃᐃᐃᐃⵠⲆ;
    ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ][1] = ⵠᐃ.ⵠⲆᐃΔⲆⲆⵠ;
    ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ][vk] = ⵠᐃ.ⲆᐃΔⲆⲆⲆΔ;
    ΔΔ[Ur.ⵠⲆⵠⵠⲆⲆⲆ] = ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ];
    ΔΔ[Ur.ⵠΔⵠΔⵠΔΔ] = ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ];
    ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ] = [];
    ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ][0] = ⵠᐃ.ᐃⵠΔⵠⵠⲆⲆ;
    ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ][ag] = ⵠᐃ.ⲆΔᐃⲆΔΔⲆ;
    ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ][2] = ⵠᐃ.ᐃⵠᐃΔⵠᐃᐃ;
    ΔΔ[Ur.ᐃⵠⲆᐃΔⵠⲆ] = ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ];
    ΔΔ[Ur.ⲆΔⵠΔᐃᐃⲆ] = ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ];
    ΔΔ[Ur.ᐃΔⲆᐃⵠⲆⵠ] = [];
    ΔΔ[Ur.ᐃΔⲆᐃⵠⲆⵠ][Cq] = ⵠᐃ.ⲆᐃᐃⵠᐃᐃΔ;
    ΔΔ[Ur.ᐃΔⲆᐃⵠⲆⵠ][aa] = ⵠᐃ.ⲆᐃᐃⵠᐃᐃΔ;
    ΔΔ[Ur.ᐃΔⲆᐃⵠⲆⵠ][Zn] = ⵠᐃ.ⲆᐃᐃⵠᐃᐃΔ;
    ΔΔ[Ur.ⲆⵠᐃΔᐃⵠⲆ] = ΔΔ[Ur.ᐃΔⲆᐃⵠⲆⵠ];
    ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ] = [];
    ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ][0] = ⵠᐃ.ΔⲆⵠⵠⲆⲆΔ;
    ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ][1] = ⵠᐃ.ᐃᐃⵠⵠⵠⵠᐃ;
    ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ][2] = ⵠᐃ.ⵠⲆΔΔⵠΔⵠ;
    ΔΔ[Ur.ⵠᐃⲆΔΔⵠⲆ] = ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ];
    ΔΔ[Ur.ⵠᐃⵠⵠΔᐃⲆ] = ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ];
    ΔΔ[Ur.ΔⵠⲆⵠΔⵠΔ] = [];
    ΔΔ[Ur.ΔⵠⲆⵠΔⵠΔ][0] = ⵠᐃ.Ⲇⵠᐃᐃⵠⵠⵠ;
    ΔΔ[Ur.ΔⵠⲆⵠΔⵠΔ][zs] = ⵠᐃ.Ⲇⵠᐃᐃⵠⵠⵠ;
    ΔΔ[Ur.ΔⵠⲆⵠΔⵠΔ][2] = ⵠᐃ.Ⲇⵠᐃᐃⵠⵠⵠ;
    ΔΔ[Ur.ΔᐃΔΔΔᐃΔ] = ΔΔ[Ur.ΔⵠⲆⵠΔⵠΔ];
    ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ] = [];
    ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ][qk] = ⵠᐃ.ΔΔⲆΔⲆⵠⵠ;
    ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ][1] = ⵠᐃ.ΔⵠⲆᐃⲆⲆΔ;
    ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ][Pt] = ⵠᐃ.ⲆΔⲆⵠⲆᐃᐃ;
    ΔΔ[Ur.ΔᐃⲆᐃⲆⵠΔ] = ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ];
    ΔΔ[Ur.ᐃⵠᐃᐃΔᐃΔ] = ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ];
    ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ] = [];
    ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ][0] = ⵠᐃ.ⲆΔⲆᐃᐃⵠΔ;
    ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ][1] = ⵠᐃ.ΔᐃᐃΔΔᐃⲆ;
    ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ][2] = ⵠᐃ.ΔΔⵠⵠᐃΔᐃ;
    ΔΔ[Ur.ᐃᐃΔΔⲆⵠΔ] = ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ];
    ΔΔ[Ur.ⲆᐃᐃΔᐃᐃⵠ] = ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ];
    ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ] = [];
    ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ][Gr] = ⵠᐃ.ᐃⵠⲆⲆᐃΔⲆ;
    ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ][Al] = ⵠᐃ.ⲆᐃΔⵠⲆΔΔ;
    ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ][2] = ⵠᐃ.ⵠᐃⵠⵠΔⵠⵠ;
    ΔΔ[Ur.ⲆΔⵠᐃΔⵠⲆ] = ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ];
    ΔΔ[Ur.ⵠⵠΔⲆⵠⵠᐃ] = ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ];
    ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ] = [];
    ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ][0] = ⵠᐃ.ⵠⵠⲆⵠᐃΔᐃ;
    ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ][Ok] = ⵠᐃ.ⵠᐃᐃᐃᐃⲆⲆ;
    ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ][wr] = ⵠᐃ.ⵠᐃⲆΔΔΔⲆ;
    ΔΔ[Ur.ᐃⲆⵠⵠⵠⵠⵠ] = ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ];
    ΔΔ[Ur.ΔᐃΔⲆⵠⵠΔ] = ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ];
    ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ][Nl] = ⵠᐃ.ΔᐃⵠⲆⵠⲆᐃ;
    ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ][1] = ⵠᐃ.ᐃⵠΔᐃⵠᐃΔ;
    ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ][Pt] = ⵠᐃ.ⲆⲆⲆΔᐃⲆᐃ;
    ΔΔ[Ur.ⲆⵠΔᐃⲆᐃΔ] = ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ];
    ΔΔ[Ur.ⵠⵠⵠⲆⲆᐃⵠ] = ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ];
    ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ] = [];
    ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ][ne] = ⵠᐃ.ᐃⵠⲆᐃⵠΔᐃ;
    ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ][1] = ⵠᐃ.ⲆΔⲆⲆⲆⵠⵠ;
    ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ][2] = ⵠᐃ.ⵠΔᐃᐃΔᐃⲆ;
    ΔΔ[Ur.ⲆⲆᐃⲆⲆⲆⵠ] = ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ];
    ΔΔ[Ur.ⵠⵠⵠΔⲆⵠⲆ] = ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ];
    ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ] = [];
    ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ][0] = ⵠᐃ.ΔⵠⲆⵠⵠⲆⵠ;
    ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ][As] = ⵠᐃ.ⲆΔᐃⵠᐃΔⲆ;
    ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ][2] = ⵠᐃ.ⵠΔᐃⲆⵠⵠⵠ;
    ΔΔ[Ur.ᐃᐃⲆⵠⲆⵠᐃ] = ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ];
    ΔΔ[Ur.ⲆⲆᐃⲆⵠⲆⲆ] = ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ];
    ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ] = [];
    ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ][Cn] = ⵠᐃ.ⵠⵠᐃᐃᐃⲆⲆ;
    ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ][zs] = ⵠᐃ.ᐃΔΔⲆΔⵠᐃ;
    ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ][2] = ⵠᐃ.ⵠΔᐃᐃΔⵠΔ;
    ΔΔ[Ur.ΔⲆⵠᐃᐃⵠⵠ] = ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ];
    ΔΔ[Ur.ΔⲆᐃⵠⵠΔΔ] = ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ];
    ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ] = [];
    ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ][ur] = ⵠᐃ.ⲆᐃΔⲆΔΔᐃ;
    ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ][j] = ⵠᐃ.ⵠᐃᐃⲆᐃⵠⵠ;
    ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ][2] = ⵠᐃ.ⵠᐃⲆⲆΔᐃᐃ;
    ΔΔ[Ur.ⲆⲆᐃᐃⲆΔᐃ] = ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ];
    ΔΔ[Ur.ⵠᐃⲆΔᐃⲆⲆ] = ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ];
    ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ] = [];
    ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ][Gr] = ⵠᐃ.ᐃⵠⲆΔΔⲆⲆ;
    ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ][Al] = ⵠᐃ.ΔⲆΔᐃΔⲆΔ;
    ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ][ql] = ⵠᐃ.ᐃⲆᐃΔᐃⲆⵠ;
    ΔΔ[Ur.ⲆⵠᐃᐃⲆᐃΔ] = ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ];
    ΔΔ[Ur.ΔᐃΔⵠⵠΔⵠ] = ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ];
    ΔΔ[Ur.ΔᐃΔⵠⲆ] = [];
    ΔΔ[Ur.ΔᐃΔⵠⲆ][Fj] = ⵠᐃ.ΔᐃΔⵠⲆ;
    ΔΔ[Ur.ΔᐃΔⵠⲆ][1] = ⵠᐃ.ΔᐃΔⵠⲆ;
    ΔΔ[Ur.ΔᐃΔⵠⲆ][2] = ⵠᐃ.ΔᐃΔⵠⲆ;
    ΔΔ[Ur.ᐃΔᐃⵠⵠΔⲆΔⲆ] = ΔΔ[Ur.ΔᐃΔⵠⲆ];
    ΔΔ[Ur.ΔⲆᐃⲆᐃⲆᐃ] = ΔΔ[Ur.ΔᐃΔⵠⲆ];
    ΔΔ[Ur.ⵠᐃⲆⲆᐃ] = [];
    ΔΔ[Ur.ⵠᐃⲆⲆᐃ][Nl] = ⵠᐃ.ⵠᐃⲆⲆᐃ;
    ΔΔ[Ur.ⵠᐃⲆⲆᐃ][1] = ⵠᐃ.ⵠᐃⲆⲆᐃ;
    ΔΔ[Ur.ⵠᐃⲆⲆᐃ][2] = ⵠᐃ.ⵠᐃⲆⲆᐃ;
    ΔΔ[Ur.ΔΔⲆⲆⵠⵠΔⲆᐃ] = ΔΔ[Ur.ⵠᐃⲆⲆᐃ];
    ΔΔ[Ur.ΔⲆᐃᐃⵠΔⲆ] = ΔΔ[Ur.ⵠᐃⲆⲆᐃ];
    ΔΔ[Ur.ᐃⵠᐃΔⲆ] = [];
    ΔΔ[Ur.ᐃⵠᐃΔⲆ][0] = ⵠᐃ.ᐃⵠᐃΔⲆ;
    ΔΔ[Ur.ᐃⵠᐃΔⲆ][zs] = ⵠᐃ.ᐃⵠᐃΔⲆ;
    ΔΔ[Ur.ᐃⵠᐃΔⲆ][Cl] = ⵠᐃ.ᐃⵠᐃΔⲆ;
    ΔΔ[Ur.ⵠⲆᐃᐃᐃΔⵠⵠᐃ] = ΔΔ[Ur.ᐃⵠᐃΔⲆ];
    ΔΔ[Ur.ΔⲆⵠΔⲆΔᐃ] = ΔΔ[Ur.ᐃⵠᐃΔⲆ];
    ΔΔ[Ur.ᐃⲆⲆⵠⵠ] = [];
    ΔΔ[Ur.ᐃⲆⲆⵠⵠ][Qs] = ⵠᐃ.ᐃⲆⲆⵠⵠ;
    ΔΔ[Ur.ᐃⲆⲆⵠⵠ][1] = ⵠᐃ.ᐃⲆⲆⵠⵠ;
    ΔΔ[Ur.ᐃⲆⲆⵠⵠ][lt] = ⵠᐃ.ᐃⲆⲆⵠⵠ;
    ΔΔ[Ur.ⲆⲆΔⵠⲆΔΔ] = ΔΔ[Ur.ᐃⲆⲆⵠⵠ];
    ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ] = [];
    ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ][0] = ⵠᐃ.ⵠⲆΔΔᐃⲆᐃ;
    ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ][Eo] = ⵠᐃ.ⲆⵠⵠⵠⲆⵠⲆ;
    ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ][lt] = ⵠᐃ.ᐃⵠⲆⵠᐃⵠΔ;
    ΔΔ[Ur.ΔⲆⲆΔⵠⵠⵠ] = ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ];
    ΔΔ[Ur.ΔΔⲆΔⲆⲆΔ] = ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ];
    ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ] = [];
    ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ][Qs] = ⵠᐃ.ΔⵠᐃⲆⲆⲆⲆ;
    ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ][1] = ⵠᐃ.ⵠΔⲆΔⲆΔⵠ;
    ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ][2] = ⵠᐃ.ΔᐃΔⲆⲆΔⲆ;
    ΔΔ[Ur.ᐃⵠΔⵠⲆΔⲆ] = ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ];
    ΔΔ[Ur.ⵠⲆⲆᐃΔᐃⵠ] = ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ];
    ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ] = [];
    ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ][0] = ⵠᐃ.ΔᐃⲆᐃⲆⲆⵠ;
    ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ][1] = ⵠᐃ.ⲆΔᐃⵠᐃⵠⲆ;
    ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ][2] = ⵠᐃ.ⲆᐃⵠⲆⵠⲆᐃ;
    ΔΔ[Ur.ⲆⲆⵠⲆΔΔⵠ] = ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ];
    ΔΔ[Ur.ⲆⲆᐃⵠᐃᐃΔ] = ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ];
    ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ] = [];
    ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ][Qs] = ⵠᐃ.ΔⲆⵠᐃⲆΔⲆ;
    ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ][$l] = ⵠᐃ.ⲆⲆᐃⲆⵠⲆⵠ;
    ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ][2] = ⵠᐃ.ⵠⲆⵠⲆᐃΔⵠ;
    ΔΔ[Ur.ⵠⵠᐃᐃⲆᐃᐃ] = ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ];
    ΔΔ[Ur.ᐃⲆⲆΔΔΔⵠ] = ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ];
    ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ][qn] = ⵠᐃ.ⲆⵠΔΔΔΔⵠ;
    ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ][Ht] = ⵠᐃ.ΔⲆⵠΔᐃΔⲆ;
    ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ][2] = ⵠᐃ.ΔᐃⵠⲆⲆᐃΔ;
    ΔΔ[Ur.ⲆΔⵠᐃⲆⲆⲆ] = ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ];
    ΔΔ[Ur.ΔΔᐃᐃΔⲆⲆ] = ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ];
    ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ] = [];
    ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ][_a] = ⵠᐃ.ⵠⵠⵠⲆⲆᐃⲆ;
    ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ][Ag] = ⵠᐃ.ᐃΔⲆᐃⲆⵠᐃ;
    ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ][2] = ⵠᐃ.ΔⵠᐃⲆⲆⲆᐃ;
    ΔΔ[Ur.ᐃⲆΔᐃⲆΔⲆ] = ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ];
    ΔΔ[Ur.ΔᐃⲆΔᐃⲆⵠ] = ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ];
    ΔΔ[Ur.ΔⵠⵠᐃⲆΔⵠ] = [];
    ΔΔ[Ur.ΔⵠⵠᐃⲆΔⵠ][0] = ⵠᐃ.ᐃᐃⵠΔⵠⵠᐃΔΔ;
    ΔΔ[Ur.ΔⵠⵠᐃⲆΔⵠ][Fh] = ⵠᐃ.ΔΔⲆⲆⲆᐃΔⲆᐃ;
    ΔΔ[Ur.ΔⵠⵠᐃⲆΔⵠ][2] = ⵠᐃ.ᐃⲆΔᐃΔⲆⵠᐃᐃ;
    ΔΔ[Ur.ΔⵠⲆΔΔⵠⵠ] = ΔΔ[Ur.ΔⵠⵠᐃⲆΔⵠ];
    ΔΔ[Ur.ᐃⵠᐃⵠᐃΔᐃ] = ΔΔ[Ur.ΔⵠⵠᐃⲆΔⵠ];
    ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ] = [];
    ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ][0] = ⵠᐃ.Δᐃⵠⵠᐃⵠⵠ;
    ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ][Ag] = ⵠᐃ.ΔⵠⵠⵠⲆⲆᐃ;
    ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ][tg] = ⵠᐃ.ᐃΔⲆⲆᐃⵠᐃ;
    ΔΔ[Ur.ⵠⲆᐃΔΔᐃⲆ] = ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ];
    ΔΔ[Ur.ⵠᐃⵠⵠⵠᐃΔ] = ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ];
    ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ] = [];
    ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ][0] = ⵠᐃ.ᐃΔⵠⵠⲆⵠᐃ;
    ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ][Zq] = ⵠᐃ.ⲆΔⲆΔⵠΔΔ;
    ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ][2] = ⵠᐃ.ΔΔⵠⲆⲆⵠΔ;
    ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠᐃ] = ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ];
    ΔΔ[Ur.ΔᐃᐃΔⲆⵠᐃ] = ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ];
    ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ] = [];
    ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ][qk] = ⵠᐃ.ΔΔⵠⲆⵠΔᐃ;
    ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ][Zq] = ⵠᐃ.ΔᐃⲆⵠΔⲆⵠ;
    ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ][2] = ⵠᐃ.ΔᐃΔᐃᐃⲆᐃ;
    ΔΔ[Ur.ⵠᐃᐃⲆⲆⲆΔ] = ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ];
    ΔΔ[Ur.ⲆΔΔΔⲆⲆⵠ] = ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ];
    ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ][0] = ⵠᐃ.ΔΔᐃΔᐃᐃᐃ;
    ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ][1] = ⵠᐃ.ⵠⲆΔΔΔⲆⵠ;
    ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ][lt] = ⵠᐃ.ⵠⵠⲆᐃΔⵠⵠ;
    ΔΔ[Ur.ΔⲆⵠⲆΔΔⲆ] = ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ];
    ΔΔ[Ur.ⵠΔⵠΔΔⲆⲆ] = ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ];
    ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ] = [];
    ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ][Nl] = ⵠᐃ.ΔᐃⲆΔⲆⲆᐃ;
    ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ][ie] = ⵠᐃ.ᐃᐃⵠⲆΔΔΔ;
    ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ][2] = ⵠᐃ.ⵠⵠᐃᐃᐃᐃⲆ;
    ΔΔ[Ur.ΔΔΔⵠⲆΔⲆ] = ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ];
    ΔΔ[Ur.ⵠᐃⲆⲆΔⲆΔ] = ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ];
    ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ] = [];
    ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ][0] = ⵠᐃ.ⵠⵠᐃᐃⵠⲆᐃ;
    ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ][1] = ⵠᐃ.ᐃᐃᐃⲆΔⲆᐃ;
    ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ][2] = ⵠᐃ.ⲆⵠⵠⲆᐃⵠⲆ;
    ΔΔ[Ur.ⲆᐃΔᐃᐃᐃΔ] = ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ];
    ΔΔ[Ur.ⲆΔᐃⵠⲆᐃΔ] = ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ];
    ΔΔ[Ur.ⲆΔᐃⲆⵠⲆⲆ] = $t(1, [{
      f: Pc,
      x: uh,
      y: Qs,
      a: As,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: wc,
      x: 0,
      y: 0,
      a: Ok,
      r: Qs,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔᐃΔᐃⲆΔⵠ] = ΔΔ[Ur.ⲆΔᐃⲆⵠⲆⲆ];
    ΔΔ[Ur.ⵠⵠⵠᐃⵠⵠΔ] = $t(1, [{
      f: md,
      x: 0,
      y: Tg,
      a: 1,
      r: rl,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⵠⵠⵠⲆⵠⲆ] = ΔΔ[Ur.ⵠⵠⵠᐃⵠⵠΔ];
    ΔΔ[Ur.ⲆΔᐃᐃⵠⲆⵠ] = $t(1, [{
      f: Nd,
      x: 0,
      y: 0,
      a: ag,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⲆⲆΔⲆⵠⵠ] = ΔΔ[Ur.ⲆΔᐃᐃⵠⲆⵠ];
    ΔΔ[Ur.ᐃⵠⵠⵠⵠⵠⵠ] = ΔΔ[Ur.ⲆΔᐃᐃⵠⲆⵠ];
    ΔΔ[Ur.ⵠⵠᐃⲆΔΔΔ] = $t(1, [{
      f: Ld,
      x: gr,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠΔⵠΔᐃᐃⵠ] = ΔΔ[Ur.ⵠⵠᐃⲆΔΔΔ];
    ΔΔ[Ur.ᐃΔᐃᐃⲆⵠΔ] = $t(1, [{
      f: Id,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / gg,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃᐃⲆᐃΔⵠΔ] = ΔΔ[Ur.ᐃΔᐃᐃⲆⵠΔ];
    ΔΔ[Ur.ⵠᐃⲆⲆⵠⲆⲆ] = ΔΔ[Ur.ᐃΔᐃᐃⲆⵠΔ];
    ΔΔ[Ur.ⵠⵠⵠΔᐃⲆⵠ] = $t(Ht, [{
      f: Md,
      x: Xr,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ΔᐃⲆᐃᐃΔⵠ] = ΔΔ[Ur.ⵠⵠⵠΔᐃⲆⵠ];
    ΔΔ[Ur.ΔᐃⵠᐃⲆⲆⲆ] = $t(j, [{
      f: Od,
      x: 2,
      y: Rl,
      a: _b,
      r: Math.PI / xj,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃᐃⲆΔΔΔⵠ] = ΔΔ[Ur.ΔᐃⵠᐃⲆⲆⲆ];
    ΔΔ[Ur.ᐃᐃⲆᐃⵠᐃᐃ] = $t(1, [{
      f: Rd,
      x: 2,
      y: Gr,
      a: Gs,
      r: Math.PI / Ui,
      c: ["#0d1b1c", p[Pn], "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠΔⵠⲆᐃΔᐃ] = ΔΔ[Ur.ᐃᐃⲆᐃⵠᐃᐃ];
    ΔΔ[Ur.ΔΔⵠⲆᐃⲆⵠ] = $t(Eo, [{
      f: Bd,
      x: Zt,
      y: _a,
      a: Ue,
      r: Math.PI / sj,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ΔᐃⵠⵠΔⵠᐃ] = ΔΔ[Ur.ΔΔⵠⲆᐃⲆⵠ];
    ΔΔ[Ur.ΔᐃᐃⲆⲆΔᐃ] = $t(jq, [{
      f: Dd,
      x: Zn,
      y: Qs,
      a: jq,
      r: Math.PI / cd,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ΔᐃⵠΔΔⲆᐃ] = ΔΔ[Ur.ΔᐃᐃⲆⲆΔᐃ];
    ΔΔ[Ur.ΔⲆⵠⵠΔᐃΔ] = $t(1, [{
      f: Gd,
      x: qd,
      y: 0,
      a: Fh,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃΔᐃᐃⲆⲆᐃ] = ΔΔ[Ur.ΔⲆⵠⵠΔᐃΔ];
    ΔΔ[Ur.ΔΔΔⵠΔⲆⲆ] = ΔΔ[Ur.ΔⲆⵠⵠΔᐃΔ];
    ΔΔ[Ur.ⲆᐃΔⲆΔᐃⵠ] = $t(1, [{
      f: Hd,
      x: qd,
      y: 0,
      a: Al,
      r: Math.PI / xh,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠᐃΔⲆⵠⵠⲆ] = ΔΔ[Ur.ⲆᐃΔⲆΔᐃⵠ];
    ΔΔ[Ur.ᐃⵠⵠΔⲆⲆⲆ] = $t(ie, [{
      f: pm,
      x: 0,
      y: 0,
      a: Ht,
      r: Math.PI / ed,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ΔⵠᐃᐃⲆⲆⲆ] = ΔΔ[Ur.ᐃⵠⵠΔⲆⲆⲆ];
    ΔΔ[Ur.ⵠᐃⲆⵠᐃΔΔ] = $t(1, [{
      f: xm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / gg,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⲆΔᐃΔΔΔ] = ΔΔ[Ur.ⵠᐃⲆⵠᐃΔΔ];
    ΔΔ[Ur.ⲆⲆⲆᐃⲆⲆΔ] = $t(1, [{
      f: Hd,
      x: Xr,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", p[vs], "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⲆΔᐃⲆⵠⵠ] = ΔΔ[Ur.ⲆⲆⲆᐃⲆⲆΔ];
    ΔΔ[Ur.ⵠⵠⲆⵠᐃΔⲆ] = $t(ag, [{
      f: Hd,
      x: Zt,
      y: 0,
      a: 1,
      r: Math.PI / Jn,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆᐃΔᐃⵠᐃⵠ] = ΔΔ[Ur.ⵠⵠⲆⵠᐃΔⲆ];
    ΔΔ[Ur.ᐃΔΔᐃᐃⵠᐃ] = $t(j, [{
      f: Hd,
      x: 2,
      y: 0,
      a: aa,
      r: Math.PI / Ui,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠΔᐃⵠⲆΔⵠ] = ΔΔ[Ur.ᐃΔΔᐃᐃⵠᐃ];
    ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ] = [];
    ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ][0] = ⵠᐃ.ⵠᐃⵠΔΔⵠΔ;
    ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ][1] = ⵠᐃ.ⵠⲆⵠⲆⲆΔⲆ;
    ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ][Xh] = ⵠᐃ.ᐃⵠⲆⲆⲆΔⵠ;
    ΔΔ[Ur.ᐃΔΔΔᐃΔⲆ] = ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ];
    ΔΔ[Ur.ΔⵠΔΔᐃΔⵠ] = ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ];
    ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ] = [];
    ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ][0] = ⵠᐃ.ᐃᐃᐃⲆᐃΔⵠ;
    ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ][1] = ⵠᐃ.ᐃᐃⲆⵠΔᐃⵠ;
    ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ][2] = ⵠᐃ.ⵠⲆᐃΔᐃΔⵠ;
    ΔΔ[Ur.ⲆⵠΔΔᐃᐃΔ] = ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ];
    ΔΔ[Ur.ᐃⲆⵠⵠⵠᐃⲆ] = ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ];
    ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ] = [];
    ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ][Cq] = ⵠᐃ.ⵠᐃᐃᐃⵠⲆΔ;
    ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ][Zq] = ⵠᐃ.ΔⲆⵠΔⲆᐃⲆ;
    ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ][vk] = ⵠᐃ.ΔᐃⵠⵠⲆⵠⵠ;
    ΔΔ[Ur.ΔⵠΔᐃᐃⵠᐃ] = ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ];
    ΔΔ[Ur.ⲆⲆⵠⵠⲆΔᐃ] = ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ];
    ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ] = [];
    ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ][0] = ⵠᐃ.ᐃᐃΔᐃΔⲆⵠ;
    ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ][ie] = ⵠᐃ.ᐃⲆΔⲆΔⵠᐃ;
    ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ][2] = ⵠᐃ.ⲆΔⵠΔᐃΔΔ;
    ΔΔ[Ur.ⲆⲆⲆᐃΔΔⵠ] = ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ];
    ΔΔ[Ur.ΔᐃⵠᐃⲆᐃΔ] = ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ];
    ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ] = [];
    ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ][Fj] = ⵠᐃ.ᐃᐃᐃⵠᐃΔⲆ;
    ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ][_b] = ⵠᐃ.ⵠⲆᐃⵠΔⲆⵠ;
    ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ][2] = ⵠᐃ.ᐃΔΔᐃⲆⵠΔ;
    ΔΔ[Ur.ⵠⵠⵠⲆⲆⵠΔ] = ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ];
    ΔΔ[Ur.ΔΔΔⲆΔⵠᐃ] = ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ];
    ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ] = [];
    ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ][Fj] = ⵠᐃ.ⵠΔΔΔᐃⲆⵠ;
    ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ][1] = ⵠᐃ.ⵠⵠⵠⵠⵠΔⵠ;
    ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ][Cl] = ⵠᐃ.ⲆⵠⵠⲆᐃᐃⵠ;
    ΔΔ[Ur.ⵠⲆⵠΔⲆⵠⲆ] = ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ];
    ΔΔ[Ur.ΔⲆⵠⲆⵠⲆⵠ] = ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ];
    ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ] = [];
    ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ][0] = ⵠᐃ.ΔΔⵠᐃᐃᐃⵠ;
    ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ][_b] = ⵠᐃ.ⲆᐃΔⵠᐃᐃⲆ;
    ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ][Zt] = ⵠᐃ.ⵠⵠⵠᐃⲆⲆⲆ;
    ΔΔ[Ur.ᐃΔⲆⲆᐃᐃⵠ] = ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ];
    ΔΔ[Ur.ΔⵠΔΔⵠᐃᐃ] = ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ];
    ΔΔ[Ur.ⲆⲆΔΔⵠΔΔ] = $t(Fh, [{
      f: zc,
      x: -ql,
      y: -wr,
      a: Zq,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆΔⵠⵠⲆⲆΔ] = ΔΔ[Ur.ⲆⲆΔΔⵠΔΔ];
    ΔΔ[Ur.ΔᐃΔⵠⲆᐃⲆ] = $t(Ok, [{
      f: Ac,
      x: -2,
      y: -2,
      a: Oj,
      r: -Math.PI / cl,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔΔΔⵠⲆⲆᐃ] = ΔΔ[Ur.ΔᐃΔⵠⲆᐃⲆ];
    ΔΔ[Ur.ⵠΔⲆⵠΔΔⵠ] = $t(ie, [{
      f: am,
      x: -2,
      y: -tg,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ΔΔ[Ur.ᐃᐃᐃⲆᐃⲆᐃ] = $t(1, [{
      f: am,
      x: -2,
      y: -2,
      a: 1,
      r: Ih,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ΔΔ[Ur.Δᐃᐃᐃᐃᐃᐃ] = $t(1, [{
      f: zm,
      x: ne,
      y: Fj,
      a: 1,
      r: Gr,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: jc,
      x: uh,
      y: qn,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: sm,
      x: 0,
      y: 0,
      a: As,
      r: rl,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: Oc,
      x: qn,
      y: 0,
      a: aa,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆΔᐃᐃⲆΔⲆ] = ΔΔ[Ur.Δᐃᐃᐃᐃᐃᐃ];
    ΔΔ[Ur.ΔᐃᐃᐃⵠΔᐃ] = $t(1, [{
      f: Xc,
      x: 45,
      y: 70,
      a: As,
      r: Fj,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠΔⵠⲆⵠⲆⵠ] = ΔΔ[Ur.ΔᐃᐃᐃⵠΔᐃ];
    ΔΔ[Ur.ᐃᐃⵠᐃⵠⲆᐃ] = $t(1, [{
      f: ym,
      x: 0,
      y: qk,
      a: 1,
      r: Gr,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⵠΔΔⵠᐃⵠ] = ΔΔ[Ur.ᐃᐃⵠᐃⵠⲆᐃ];
    ΔΔ[Ur.ⲆᐃⲆⵠᐃⲆⵠ] = $t(jq, [{
      f: mc,
      x: Nl,
      y: 0,
      a: $l,
      r: Rl,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⲆⵠᐃᐃⵠⵠ] = ΔΔ[Ur.ⲆᐃⲆⵠᐃⲆⵠ];
    ΔΔ[Ur.ΔᐃᐃⵠⲆⵠⲆ] = $t(1, [{
      f: yc,
      x: 0,
      y: ne,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆⲆⲆᐃⵠᐃ] = ΔΔ[Ur.ΔᐃᐃⵠⲆⵠⲆ];
    ΔΔ[Ur.ΔⵠⲆΔΔᐃⵠ] = $t(1, [{
      f: bc,
      x: Nl,
      y: Wb,
      a: Eo,
      r: Rl,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆᐃⲆᐃⵠⲆ] = ΔΔ[Ur.ΔⵠⲆΔΔᐃⵠ];
    ΔΔ[Ur.ⵠᐃᐃΔᐃᐃΔ] = $t(1, [{
      f: bc,
      x: ur,
      y: Sg,
      a: jq,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆᐃⵠᐃΔᐃᐃ] = ΔΔ[Ur.ⵠᐃᐃΔᐃᐃΔ];
    ΔΔ[Ur.ⲆᐃⲆΔⲆⲆⵠ] = $t(1, [{
      f: lm,
      x: 0,
      y: 10,
      a: 1,
      r: Qs,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆⵠΔΔⲆⲆ] = ΔΔ[Ur.ⲆᐃⲆΔⲆⲆⵠ];
    ΔΔ[Ur.ⵠⲆΔᐃΔᐃᐃ] = $t(1, [{
      f: lm,
      x: 0,
      y: 10,
      a: Gs,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃΔⲆᐃᐃᐃΔ] = ΔΔ[Ur.ⵠⲆΔᐃΔᐃᐃ];
    ΔΔ[Ur.ⵠⵠⲆⲆᐃⵠⲆ] = $t(Zq, [{
      f: lm,
      x: tj,
      y: 10,
      a: _b,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠᐃΔᐃⵠⵠᐃ] = ΔΔ[Ur.ⵠⵠⲆⲆᐃⵠⲆ];
    ΔΔ[Ur.ⵠΔᐃΔⲆⲆΔ] = $t(1, [{
      f: Sd,
      x: -1,
      y: _a,
      a: 1,
      r: Cn,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⲆᐃⲆⵠⲆΔ] = ΔΔ[Ur.ⵠΔᐃΔⲆⲆΔ];
    ΔΔ[Ur.ΔⵠᐃᐃᐃⵠΔ] = ΔΔ[Ur.ⵠΔᐃΔⲆⲆΔ];
    ΔΔ[Ur.ΔΔⲆⲆⵠᐃⵠ] = $t(1, [{
      f: Yd,
      x: 0,
      y: 0,
      a: 1,
      r: ur,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠⵠⵠⵠⵠⵠᐃ] = ΔΔ[Ur.ΔΔⲆⲆⵠᐃⵠ];
    ΔΔ[Ur.ⵠᐃⵠᐃΔᐃⲆ] = $t(Ej, [{
      f: Am,
      x: ur,
      y: ms,
      a: zs,
      r: Math.PI / Ui,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆᐃΔⲆⵠᐃΔ] = ΔΔ[Ur.ⵠᐃⵠᐃΔᐃⲆ];
    ΔΔ[Ur.ⲆᐃⵠⵠΔⵠᐃ] = $t(Ue, [{
      f: Kc,
      x: rl,
      y: Rl,
      a: 1,
      r: Cn,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔΔⲆⵠⵠⵠᐃ] = $t(1, [{
      f: dc,
      x: 0,
      y: rl,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠⵠⲆⲆΔΔΔ] = $t(j, [{
      f: Kc,
      x: tj,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ᐃⲆⵠᐃⲆⵠΔ] = $t(1, [{
      f: dc,
      x: 0,
      y: Gr,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠΔⵠⲆⲆⵠᐃ] = $t(1, [{
      f: Fc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆⵠᐃᐃᐃⵠⲆ] = $t(1, [{
      f: Fc,
      x: 0,
      y: 0,
      a: Eo,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔⵠΔᐃᐃⲆᐃ] = $t(Ok, [{
      f: Fc,
      x: 0,
      y: Cn,
      a: Ht,
      r: Nl,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ᐃᐃⵠΔⲆᐃᐃ] = $t(1, [{
      f: Tc,
      x: 0,
      y: rl,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆᐃΔᐃⵠⵠⲆ] = ΔΔ[Ur.ᐃᐃⵠΔⲆᐃᐃ];
    ΔΔ[Ur.ⵠⵠⲆΔΔΔᐃ] = $t(_b, [{
      f: Tc,
      x: Rl,
      y: 0,
      a: Fh,
      r: Math.PI / Jn,
      c: ["#0d1b1c", p[ml], "#382e19", p[_l], "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆⲆⵠⵠΔΔ] = ΔΔ[Ur.ⵠⵠⲆΔΔΔᐃ];
    ΔΔ[Ur.ⵠᐃᐃᐃⵠᐃⲆ] = $t(1, [{
      f: Tc,
      x: ne,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃⲆⲆᐃᐃⵠⲆ] = ΔΔ[Ur.ⵠᐃᐃᐃⵠᐃⲆ];
    ΔΔ[Ur.ⲆᐃⵠⵠΔᐃⵠ] = $t(1, [{
      f: Tc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / Jo,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃᐃⲆⵠᐃⲆⵠ] = ΔΔ[Ur.ⲆᐃⵠⵠΔᐃⵠ];
    ΔΔ[Ur.ΔⵠⵠⲆⲆⲆⵠ] = $t(1, [{
      f: kc,
      x: 0,
      y: 0,
      a: As,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠⲆᐃΔΔΔΔ] = ΔΔ[Ur.ΔⵠⵠⲆⲆⲆⵠ];
    ΔΔ[Ur.ⵠⵠⲆⲆᐃⲆᐃ] = $t(ie, [{
      f: gm,
      x: 0,
      y: 0,
      a: zs,
      r: 0,
      c: [p[Pa], "#73583e", "#493425", p[Pr]]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆᐃⲆⵠⵠⲆᐃ] = ΔΔ[Ur.ⵠⵠⲆⲆᐃⲆᐃ];
    ΔΔ[Ur.ᐃᐃᐃΔᐃᐃⲆ] = $t(zs, [{
      f: Bc,
      x: Fj,
      y: -2,
      a: Gs,
      r: 0,
      c: [p[kr], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠⵠΔᐃⵠⲆⵠ] = ΔΔ[Ur.ᐃᐃᐃΔᐃᐃⲆ];
    ΔΔ[Ur.ᐃⵠᐃⵠᐃⵠᐃ] = $t(1, [{
      f: Sc,
      x: Cn,
      y: 0,
      a: Oj,
      r: Rl,
      c: ["#dbce71", "#b29c32", p[Ch]]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃᐃⵠⵠΔⵠΔ] = ΔΔ[Ur.ᐃⵠᐃⵠᐃⵠᐃ];
    ΔΔ[Ur.ᐃⵠⵠⲆⵠⵠⲆ] = $t(Ht, [{
      f: $c,
      x: ne,
      y: ne,
      a: 1,
      r: uh,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠⲆⲆΔΔΔᐃ] = ΔΔ[Ur.ᐃⵠⵠⲆⵠⵠⲆ];
    ΔΔ[Ur.ⵠⵠⲆⵠⵠⵠⲆ] = $t(1, [{
      f: Uc,
      x: Fj,
      y: 0,
      a: _b,
      r: vq,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⵠⵠΔⵠᐃΔ] = ΔΔ[Ur.ⵠⵠⲆⵠⵠⵠⲆ];
    ΔΔ[Ur.ⲆⲆΔΔᐃᐃᐃ] = $t(1, [{
      f: tm,
      x: 0,
      y: Cq,
      a: 1,
      r: Nl,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠΔⲆⲆᐃⵠΔ] = ΔΔ[Ur.ⲆⲆΔΔᐃᐃᐃ];
    ΔΔ[Ur.ⵠⵠⲆΔⵠⲆⵠ] = $t(ag, [{
      f: nc,
      x: -Os,
      y: -Vh,
      a: Zq,
      r: 0,
      c: [p[Tj], "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔᐃΔΔᐃᐃΔ] = $t(1, [{
      f: xc,
      x: Tg,
      y: 0,
      a: Al,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆⲆ] = $t(1, [{
      f: Vc,
      x: qk,
      y: Fj,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⲆⵠΔⵠΔΔΔ] = $t(Ht, [{
      f: xc,
      x: 0,
      y: Nl,
      a: Oj,
      r: ne,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠⵠᐃΔΔⲆᐃ] = $t(Al, [{
      f: Wc,
      x: og,
      y: wr,
      a: Ej,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆΔⵠⵠⲆⲆⵠ] = $t(1, [{
      f: Jm,
      x: 3,
      y: Cl,
      a: 1,
      r: qk,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ᐃᐃⲆⲆᐃᐃᐃ] = ΔΔ[Ur.ⵠⵠᐃΔΔⲆᐃ];
    ΔΔ[Ur.ᐃⲆⲆΔᐃⲆⵠ] = ΔΔ[Ur.ⲆΔⵠⵠⲆⲆⵠ];
    ΔΔ[Ur.ᐃⲆⲆᐃⵠⵠⲆ] = $t(1, [{
      f: hm,
      x: Tg,
      y: 0,
      a: Al,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", p[Tl]]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⲆⲆᐃⲆⲆⲆ] = ΔΔ[Ur.ᐃⲆⲆᐃⵠⵠⲆ];
    ΔΔ[Ur.Δᐃⵠⵠⵠᐃᐃ] = $t(Zq, [{
      f: dm,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / Jo,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⵠⵠⵠΔΔⵠ] = $t(1, [{
      f: Cm,
      x: Cq,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔΔⵠΔⵠΔⲆ] = ΔΔ[Ur.Δᐃⵠⵠⵠᐃᐃ];
    ΔΔ[Ur.ⲆⵠⲆᐃΔⲆⵠ] = ΔΔ[Ur.ᐃⵠⵠⵠΔΔⵠ];
    ΔΔ[Ur.ᐃΔⵠⵠΔⵠⲆ] = $t(Ht, [{
      f: Ru,
      x: Rl,
      y: Qs,
      a: Al,
      r: ms,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆⵠⲆᐃⲆᐃΔ] = ΔΔ[Ur.ᐃΔⵠⵠΔⵠⲆ];
    ΔΔ[Ur.ᐃᐃⵠΔᐃᐃⵠ] = $t(Oj, [{
      f: Su,
      x: Nl,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃⵠⲆᐃⲆΔ] = $t(zs, [{
      f: Ou,
      x: Nl,
      y: qn,
      a: $l,
      r: gr,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔᐃⲆΔⲆΔᐃ] = $t(j, [{
      f: em,
      x: ne,
      y: -2,
      a: 1,
      r: uh,
      c: [p[Xg], "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⲆΔⵠᐃΔᐃ] = ΔΔ[Ur.ΔᐃⲆΔⲆΔᐃ];
    ΔΔ[Ur.ⲆᐃⲆΔΔᐃⵠ] = $t(jq, [{
      f: gd,
      x: -Kj,
      y: -cd,
      a: zs,
      r: 0,
      c: [p[Qh], "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆΔᐃⵠⲆⲆΔ] = $t(Zq, [{
      f: vd,
      x: Ih,
      y: Nl,
      a: 1,
      r: Tg,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⵠⲆⵠⵠⵠΔ] = ΔΔ[Ur.ⲆΔᐃⵠⲆⲆΔ];
    ΔΔ[Ur.ᐃⲆⵠⵠⵠⵠΔ] = $t(1, [{
      f: od,
      x: -3,
      y: 0,
      a: 1,
      r: rl,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ᐃᐃΔΔΔΔⵠ] = ΔΔ[Ur.ᐃⲆⵠⵠⵠⵠΔ];
    ΔΔ[Ur.ᐃⲆΔᐃᐃΔΔ] = $t(Fh, [{
      f: Ub,
      x: Cq,
      y: uh,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠΔⲆᐃⲆᐃΔ] = $t(1, [{
      f: sd,
      x: 0,
      y: Ih,
      a: Zq,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ΔΔ[Ur.ⵠⲆⵠΔᐃᐃΔ] = ΔΔ[Ur.ⵠΔⲆᐃⲆᐃΔ];
    ΔΔ[Ur.ᐃⵠⵠΔᐃΔⲆ] = $t(1, [{
      f: Rc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⵠⲆⲆⲆᐃⵠ] = ΔΔ[Ur.ᐃⵠⵠΔᐃΔⲆ];
    ΔΔ[Ur.ⲆᐃⵠⲆΔⲆⵠ] = $t(1, [{
      f: Cb,
      x: -5,
      y: -5,
      a: As,
      r: uh,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠᐃᐃⲆⵠⲆᐃ] = ΔΔ[Ur.ⲆᐃⵠⲆΔⲆⵠ];
    ΔΔ[Ur.ΔᐃⲆΔΔᐃⲆ] = $t(j, [{
      f: Ic,
      x: 0,
      y: 0,
      a: aa,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⵠⲆᐃΔⵠΔᐃ] = ΔΔ[Ur.ΔᐃⲆΔΔᐃⲆ];
    ΔΔ[Ur.ΔᐃΔᐃⵠⵠⲆ] = $t(Fh, [{
      f: zb,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ΔⵠΔΔⵠᐃΔ] = ΔΔ[Ur.ΔᐃΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ⲆⲆᐃⲆⵠᐃᐃ] = $t(jq, [{
      f: Zc,
      x: -Fh,
      y: uh,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    ΔΔ[Ur.ⲆⲆⲆᐃΔⵠⲆ] = ΔΔ[Ur.ⲆⲆᐃⲆⵠᐃᐃ];
    ΔΔ[Ur.ⲆΔᐃΔⲆᐃⵠ] = $t(Oj, [{
      f: Zc,
      x: -aa,
      y: 0,
      a: 1,
      r: -Math.PI / Ya,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⵠⲆᐃᐃΔⲆⲆ] = ΔΔ[Ur.ⲆΔᐃΔⲆᐃⵠ];
    ΔΔ[Ur.ᐃⵠᐃⵠΔⵠΔ] = $t(1, [{
      f: _c,
      x: rl,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ΔⵠⵠΔᐃⵠⵠ] = $t(Ag, [{
      f: Fu,
      x: _a,
      y: ms,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ⲆΔΔⵠⵠⵠⵠ] = ΔΔ[Ur.ΔⵠⵠΔᐃⵠⵠ];
    ΔΔ[Ur.ⲆⲆᐃΔⲆᐃⵠ] = $t(1, [{
      f: dd,
      x: 0,
      y: Qs,
      a: $l,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃⲆⵠⲆⲆᐃⲆ] = ΔΔ[Ur.ⲆⲆᐃΔⲆᐃⵠ];
    ΔΔ[Ur.ⵠᐃΔⵠᐃⵠΔ] = $t(Ej, [{
      f: Yb,
      x: -2,
      y: -8,
      a: Zq,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ΔΔ[Ur.ᐃᐃⵠᐃΔⲆⵠ] = ΔΔ[Ur.ⵠᐃΔⵠᐃⵠΔ];
    ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ] = [];
    ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ][Rl] = ⵠᐃ.ᐃⵠⵠΔᐃⵠⵠ;
    ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ][Ok] = ⵠᐃ.ⵠΔⵠⲆⲆⵠΔ;
    ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ][hc] = ⵠᐃ.ᐃΔᐃΔⲆΔΔ;
    ΔΔ[Ur.ΔΔⲆⲆᐃⵠΔ] = ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ];
    ΔΔ[Ur.ⵠᐃⵠⵠⲆⵠⲆ] = ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ];
    ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ] = [];
    ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ][0] = ⵠᐃ.ᐃᐃⵠᐃᐃΔⵠ;
    ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ][1] = ⵠᐃ.ᐃΔⵠⵠΔΔⵠ;
    ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ][2] = ⵠᐃ.ⲆⵠᐃΔⵠᐃⵠ;
    ΔΔ[Ur.ΔᐃᐃᐃΔⲆⵠ] = ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ];
    ΔΔ[Ur.ᐃΔΔΔΔⵠᐃ] = ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ];
    ΔΔ[Ur.ᐃΔΔΔΔⵠⲆ] = ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ];
    ΔΔ[Ur.ⲆΔΔⵠᐃΔᐃ] = ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ];
    ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ] = [];
    ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ][0] = ⵠᐃ.ΔⵠⲆⲆⲆᐃⵠ;
    ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ][1] = ⵠᐃ.ⲆΔⵠⲆᐃᐃᐃ;
    ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ][zk] = ⵠᐃ.ⵠΔΔⲆΔΔΔ;
    ΔΔ[Ur.ᐃΔΔΔΔⵠⲆ] = ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ];
    ΔΔ[Ur.ⲆΔΔⵠᐃΔᐃ] = ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ];
    ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ] = [];
    ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ][0] = ⵠᐃ.ⵠΔΔⵠᐃⵠᐃ;
    ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ][1] = ⵠᐃ.ᐃΔⲆΔⵠⵠᐃ;
    ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ][2] = ⵠᐃ.ⵠⲆΔᐃᐃⲆⲆ;
    ΔΔ[Ur.ᐃⵠΔⲆⵠⵠΔ] = ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ];
    ΔΔ[Ur.ⲆⵠⲆᐃΔᐃᐃ] = ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ];
    ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ] = [];
    ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ][ne] = ⵠᐃ.ΔⵠΔΔΔⵠᐃ;
    ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ][As] = ⵠᐃ.ⲆⲆⲆⵠⵠⲆⵠ;
    ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ][Pt] = ⵠᐃ.ᐃⵠⵠⲆᐃᐃᐃ;
    ΔΔ[Ur.ᐃᐃⲆⵠᐃΔⵠ] = ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ];
    ΔΔ[Ur.ᐃⲆⵠⲆⲆⲆⵠ] = ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ];
    ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ] = [];
    ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ][qn] = ⵠᐃ.ⲆΔᐃΔΔⵠⲆ;
    ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ][1] = ⵠᐃ.ᐃΔᐃⲆᐃᐃⵠ;
    ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ][Tt] = ⵠᐃ.ⵠⵠΔⲆⵠⲆΔ;
    ΔΔ[Ur.ΔᐃⵠⵠⲆᐃΔ] = ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ];
    ΔΔ[Ur.ᐃⵠⵠᐃⵠᐃⲆ] = ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ];
    ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ] = [];
    ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ][Qs] = ⵠᐃ.ⵠᐃⵠᐃⵠⲆⵠ;
    ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ][Al] = ⵠᐃ.ᐃⵠΔⲆⵠΔΔ;
    ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ][tg] = ⵠᐃ.ΔⲆⲆⲆᐃΔⲆ;
    ΔΔ[Ur.ΔⵠⲆΔⵠᐃᐃ] = ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ];
    ΔΔ[Ur.ⲆΔΔΔΔᐃΔ] = ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ];
    ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ] = [];
    ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ][qk] = ⵠᐃ.ΔⵠⵠⵠΔΔᐃ;
    ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ][1] = ⵠᐃ.ᐃⵠⵠᐃΔⵠⵠ;
    ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ][2] = ⵠᐃ.ⵠⵠᐃⵠΔⲆⵠ;
    ΔΔ[Ur.ⵠⵠⲆⲆΔΔᐃ] = ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ];
    ΔΔ[Ur.ᐃᐃᐃⲆᐃᐃᐃ] = ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ];
    ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ] = [];
    ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ][0] = ⵠᐃ.ΔⵠᐃᐃᐃⵠⲆ;
    ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ][$l] = ⵠᐃ.ⲆⵠΔᐃⵠⵠⵠ;
    ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ][2] = ⵠᐃ.ⵠΔΔⲆΔⵠⲆ;
    ΔΔ[Ur.ⵠⵠΔⲆⲆΔⵠ] = ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ];
    ΔΔ[Ur.ⲆⵠΔⲆⲆⵠᐃ] = ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ];
    ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ] = [];
    ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ][Qs] = ⵠᐃ.ΔΔⲆⵠΔΔⵠ;
    ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ][ie] = ⵠᐃ.ΔⵠⵠᐃⲆⵠⵠ;
    ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ][2] = ⵠᐃ.ᐃᐃⲆⵠΔⵠⵠ;
    ΔΔ[Ur.ⲆᐃΔⵠⵠⲆΔⵠΔ] = ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ];
    ΔΔ[Ur.ⲆⲆⵠⲆⲆⲆⵠ] = ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ];
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ] = [];
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ][qk] = ⵠᐃ.ⲆⵠⵠᐃΔΔᐃ;
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ][Gs] = ⵠᐃ.ΔⵠΔⲆᐃⲆΔ;
    ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ][Cl] = ⵠᐃ.ΔΔⲆᐃⵠⵠⵠ;
    ΔΔ[Ur.ⵠⵠΔⲆⵠᐃᐃ] = ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ];
    ΔΔ[Ur.ⲆᐃⵠᐃⲆⵠᐃ] = ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ];
    ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ] = [];
    ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ][0] = ⵠᐃ.ΔⲆⵠⲆᐃΔᐃ;
    ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ][j] = ⵠᐃ.ΔΔⲆⵠⲆⵠΔ;
    ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ][2] = ⵠᐃ.ⵠⵠⵠⵠⲆᐃᐃ;
    ΔΔ[Ur.ΔⲆⵠᐃⲆΔⵠ] = ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ];
    ΔΔ[Ur.ΔⲆᐃⲆΔᐃⵠ] = ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ];
    ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ] = [];
    ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ][0] = ⵠᐃ.ᐃⲆⵠΔΔΔᐃ;
    ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ][1] = ⵠᐃ.ⵠᐃⲆᐃᐃⲆΔ;
    ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ][ql] = ⵠᐃ.ⲆⵠⵠΔⲆΔⲆ;
    ΔΔ[Ur.ⲆⲆⵠⲆⲆᐃⵠ] = ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ];
    ΔΔ[Ur.ΔΔⲆⵠⵠⲆΔ] = [];
    ΔΔ[Ur.ΔΔⲆⵠⵠⲆΔ][0] = ⵠᐃ.ⵠᐃⲆᐃⵠᐃᐃ;
    ΔΔ[Ur.ΔΔⲆⵠⵠⲆΔ][_b] = ⵠᐃ.ⵠⵠⵠΔⲆⲆΔ;
    ΔΔ[Ur.ΔΔⲆⵠⵠⲆΔ][qd] = ⵠᐃ.ⵠΔΔⵠᐃΔⲆ;
    ΔΔ[Ur.ΔᐃΔΔΔⵠᐃ] = ΔΔ[Ur.ΔΔⲆⵠⵠⲆΔ];
    ΔΔ[Ur.ⲆΔⲆⲆᐃⵠⲆ] = ΔΔ[Ur.ᐃᐃⵠΔⲆᐃᐃ];
    ΔΔ[Ur.ᐃΔΔⵠᐃⲆⲆ] = ΔΔ[Ur.ⵠⵠⲆΔΔΔᐃ];
    ΔΔ[Ur.ΔᐃΔΔⲆⲆⲆ] = ΔΔ[Ur.ⵠᐃᐃᐃⵠᐃⲆ];
    ΔΔ[Ur.ⵠᐃᐃⵠᐃΔⵠ] = ΔΔ[Ur.ⲆᐃⵠⵠΔᐃⵠ];
    ΔΔ[Ur.ᐃⲆΔΔⵠⵠᐃ] = ΔΔ[Ur.ΔᐃⵠⲆᐃᐃᐃ];
    ΔΔ[Ur.ⵠΔΔⲆᐃⲆⲆ] = ΔΔ[Ur.ᐃΔΔΔΔᐃᐃ];
    ΔΔ[Ur.ΔᐃᐃⲆᐃⲆⲆ] = ΔΔ[Ur.ⵠΔⵠⲆᐃⵠᐃ];
    ΔΔ[Ur.ᐃⵠⲆΔΔΔⵠ] = ΔΔ[Ur.ⵠᐃⵠⵠⲆΔᐃ];
    ΔΔ[Ur.ⵠᐃᐃᐃᐃⲆⵠ] = ΔΔ[Ur.ⲆᐃⵠΔⵠΔΔ];
    ΔΔ[Ur.ΔⲆⲆΔⵠⲆⲆ] = ΔΔ[Ur.ΔΔⲆⵠⵠⵠᐃ];
    ΔΔ[Ur.ᐃᐃᐃⵠΔᐃⵠ] = ΔΔ[Ur.ⲆᐃⵠⵠΔⵠᐃ];
    ΔΔ[Ur.ΔΔⵠᐃⵠⲆᐃ] = ΔΔ[Ur.ᐃⲆⵠᐃⲆⵠΔ];
    ΔΔ[Ur.ᐃᐃᐃᐃⲆⲆΔ] = ΔΔ[Ur.ⵠⵠⲆⲆΔΔΔ];
    ΔΔ[Ur.ΔⵠΔⲆⲆΔᐃ] = ΔΔ[Ur.ⲆⲆⵠᐃⲆⵠⵠ];
    ΔΔ[Ur.ⵠᐃⲆᐃᐃᐃΔ] = ΔΔ[Ur.ᐃⲆⵠⲆⵠⲆΔ];
    ΔΔ[Ur.ΔⲆᐃⲆΔΔΔ] = ΔΔ[Ur.ⵠᐃΔⵠᐃⲆΔ];
    ΔΔ[Ur.ⲆΔⲆΔⵠⲆΔ] = ΔΔ[Ur.ᐃΔᐃᐃⲆΔⵠ];
    ΔΔ[Ur.ⵠΔⵠΔΔΔⲆ] = ΔΔ[Ur.ᐃΔΔⲆⵠⵠᐃ];
    ΔΔ[Ur.ⲆᐃⲆᐃΔᐃΔ] = ΔΔ[Ur.ΔⲆⵠⵠⵠᐃⵠ];
    ΔΔ[Ur.ᐃᐃⲆΔⵠᐃⵠ] = ΔΔ[Ur.ⲆⵠⲆΔᐃⲆΔ];
    ΔΔ[Ur.ⵠᐃΔΔⵠⲆⵠ] = ΔΔ[Ur.ⲆⲆⵠⲆᐃⵠΔ];
    ΔΔ[Ur.ⲆⲆⵠΔⵠⲆⲆ] = ΔΔ[Ur.ⲆΔΔⲆΔⵠΔ];
    ΔΔ[Ur.Δⵠᐃᐃᐃⵠⵠ] = ΔΔ[Ur.ᐃⵠⲆΔΔⵠΔ];
    ΔΔ[Ur.Ⲇⵠᐃⵠᐃⵠⵠ] = ΔΔ[Ur.ⵠΔⵠΔᐃΔᐃ];
    ΔΔ[Ur.ΔⲆᐃᐃΔΔⵠ] = ΔΔ[Ur.ΔⵠΔᐃⲆᐃⵠ];
    ΔΔ[Ur.ⲆⵠΔⵠᐃⲆΔ] = ΔΔ[Ur.ⵠΔⵠⵠⲆⲆⲆ];
    ΔΔ[Ur.ⲆⲆΔⵠΔᐃΔ] = ΔΔ[Ur.ⲆΔΔⲆᐃΔⵠ];
    ΔΔ[Ur.ΔᐃΔⲆⵠΔⵠ] = ΔΔ[Ur.ᐃᐃⵠⵠⵠⲆⵠ];
    ΔΔ[Ur.ΔⲆᐃⲆⲆⵠᐃ] = ΔΔ[Ur.ⲆⲆΔᐃΔⵠⵠ];
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔⵠ] = ΔΔ[Ur.ᐃΔΔᐃΔΔⵠ];
    ΔΔ[Ur.ᐃⲆⵠⵠΔⲆⲆ] = ΔΔ[Ur.ΔⲆᐃⵠⲆⲆⲆ];
    ΔΔ[Ur.ΔⲆᐃᐃⵠᐃᐃ] = ΔΔ[Ur.ⵠᐃⵠᐃⵠΔΔ];
    ΔΔ[Ur.ⵠⲆⲆΔⵠᐃᐃ] = ΔΔ[Ur.ᐃⲆᐃᐃᐃⲆᐃ];
    ΔΔ[Ur.ΔΔΔΔⲆΔᐃ] = ΔΔ[Ur.ΔⵠⲆⵠⲆⵠᐃ];
    ΔΔ[Ur.ⲆᐃᐃⲆΔⲆⵠ] = ΔΔ[Ur.ΔⵠΔᐃΔⵠΔ];
    ΔΔ[Ur.ᐃⲆᐃΔⵠⵠⲆ] = ΔΔ[Ur.ⲆΔⲆⵠⲆⵠᐃ];
    ΔΔ[Ur.ⲆᐃⲆᐃΔΔΔ] = ΔΔ[Ur.Ⲇᐃᐃᐃᐃᐃⵠ];
    ΔΔ[Ur.ⲆΔΔΔⵠⲆΔ] = ΔΔ[Ur.ⵠⲆⲆΔᐃᐃⲆ];
    ΔΔ[Ur.ⵠⵠΔⵠΔⵠΔ] = ΔΔ[Ur.ⲆⵠⲆᐃᐃⲆⲆ];
    ΔΔ[Ur.ⵠⲆᐃᐃⵠⲆᐃ] = ΔΔ[Ur.ᐃⲆΔⲆⲆᐃⵠ];
    ΔΔ[Ur.ⲆⵠⵠΔΔΔⵠ] = ΔΔ[Ur.ᐃⵠΔⲆⲆⲆΔ];
    ΔΔ[Ur.ⵠᐃⵠᐃᐃⵠⵠ] = ΔΔ[Ur.ᐃⲆⲆⵠᐃⵠᐃ];
    ΔΔ[Ur.ᐃΔⵠⲆΔᐃⲆ] = ΔΔ[Ur.ⵠⲆⵠΔⲆΔⲆ];
    ΔΔ[Ur.ΔⲆΔⲆᐃᐃᐃ] = ΔΔ[Ur.ΔΔΔᐃᐃⵠᐃ];
    ΔΔ[Ur.ⵠⵠⲆⵠⵠᐃⲆ] = ΔΔ[Ur.ⲆⲆΔΔⵠΔΔ];
    ΔΔ[Ur.ⲆⲆⲆⵠⲆΔᐃ] = ΔΔ[Ur.ΔᐃΔⵠⲆᐃⲆ];
    ΔΔ[Ur.ⲆⵠⵠᐃᐃⲆᐃ] = ΔΔ[Ur.Δᐃᐃᐃᐃᐃᐃ];
    ΔΔ[Ur.ΔᐃᐃᐃⲆⲆᐃ] = ΔΔ[Ur.ⵠΔⲆⵠΔΔⵠ];
    ΔΔ[Ur.ᐃΔᐃⵠⲆⵠⵠ] = ΔΔ[Ur.ᐃᐃᐃⲆᐃⲆᐃ];
    ΔΔ[Ur.ⲆᐃⵠᐃⲆⲆⲆ] = ΔΔ[Ur.ⵠᐃⵠᐃΔᐃⲆ];
    ΔΔ[Ur.ⵠⲆⲆⲆⲆᐃⲆ] = ΔΔ[Ur.ΔᐃᐃᐃⵠΔᐃ];
    ΔΔ[Ur.ᐃⲆΔⲆⲆᐃⲆ] = ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠⲆ];
    ΔΔ[Ur.ᐃΔΔᐃΔΔⲆ] = ΔΔ[Ur.ᐃΔⲆᐃⵠΔⲆ];
    ΔΔ[Ur.ᐃⵠΔΔⵠⲆⲆ] = Fr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      tb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      eb(e, c[0], c[1], 4);
      e.save();
      tb(e, a * 30, a * 115, a * 60, xh * a, a * 15);
      e.restore();
      eb(e, c[Zn], c[Qt], Eg);
      e.save();
      tb(e, a * 50, a * 117, a * 20, Fl * a, a * eg);
      e.restore();
      eb(e, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ΔΔ[Ur.ⵠⵠᐃΔΔⵠⵠ] = $t(0.5, [{
      f: Jd,
      x: 0,
      y: Zt,
      a: Eo,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    ΔΔ[Ur.ᐃᐃⵠΔᐃΔⲆ] = ΔΔ[Ur.ⵠⲆⲆᐃⲆᐃⲆ];
    ΔΔ[Ur.ΔⲆⵠΔΔᐃⵠ] = ΔΔ[Ur.ⵠΔᐃⵠᐃΔⵠ];
    ΔΔ[Ur.ᐃΔⵠⵠⵠᐃⵠ] = ΔΔ[Ur.ⲆΔⵠᐃⲆᐃΔ];
    ΔΔ[Ur.ᐃᐃⵠⲆᐃᐃⵠ] = ΔΔ[Ur.ⵠᐃⲆⲆΔⵠᐃ];
    ΔΔ[Ur.ⵠⵠⲆΔⲆⲆΔ] = ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ];
    ΔΔ[Ur.ⲆⵠⲆΔΔⲆⵠ] = ΔΔ[Ur.ⲆⵠⲆⲆᐃⵠΔ];
    ΔΔ[Ur.ⵠⲆⲆΔⵠⲆⲆ] = ΔΔ[Ur.ΔΔΔⲆⵠΔⲆ];
    ΔΔ[Ur.ΔⲆΔⲆΔᐃⵠ] = ΔΔ[Ur.ⵠᐃⵠⵠⵠⵠᐃ];
    ΔΔ[Ur.ⲆΔᐃⲆΔᐃΔ] = ΔΔ[Ur.ⵠⵠⵠΔΔⲆⲆ];
    ΔΔ[Ur.ⲆⲆⵠⵠⵠⵠⵠ] = ΔΔ[Ur.ΔᐃⲆⵠΔⵠⲆ];
    ΔΔ[Ur.ᐃΔΔΔⲆⵠⵠ] = ΔΔ[Ur.ⲆⲆⵠΔⵠᐃⲆ];
    ΔΔ[Ur.ⲆⲆΔⵠᐃⲆⲆ] = ΔΔ[Ur.ⲆᐃⲆᐃⲆᐃⲆ];
    ΔΔ[Ur.ⲆΔᐃⵠΔΔᐃ] = ΔΔ[Ur.ΔⵠⲆᐃⵠᐃᐃ];
    ΔΔ[Ur.ᐃⲆΔⲆⵠⵠᐃ] = ΔΔ[Ur.ΔⲆΔⲆⲆⲆΔ];
    ΔΔ[Ur.ΔⲆⵠⵠⲆᐃΔ] = ΔΔ[Ur.ΔΔΔᐃΔΔⲆ];
    ΔΔ[Ur.ⵠΔᐃⵠᐃⵠⵠ] = ΔΔ[Ur.ⲆⵠⵠΔᐃΔⵠ];
    ΔΔ[Ur.ⲆⵠᐃⵠⵠΔᐃ] = ΔΔ[Ur.ᐃⵠΔΔⲆⲆΔ];
    ΔΔ[Ur.ⲆⵠⵠᐃΔΔⲆ] = ΔΔ[Ur.ⵠᐃᐃᐃⵠⵠⲆ];
    ΔΔ[Ur.ⲆᐃΔⵠⵠΔⵠ] = ΔΔ[Ur.ⲆΔⵠᐃᐃᐃΔ];
    ΔΔ[Ur.ⵠⲆⵠᐃⲆᐃⲆ] = ΔΔ[Ur.ⵠⵠⵠΔᐃⲆⵠ];
    ΔΔ[Ur.ᐃΔΔᐃΔⵠΔ] = ΔΔ[Ur.ΔᐃⵠᐃⲆⲆⲆ];
    ΔΔ[Ur.ⵠⲆⲆΔᐃᐃᐃ] = ΔΔ[Ur.ᐃᐃⲆᐃⵠᐃᐃ];
    ΔΔ[Ur.ᐃⵠᐃΔⲆᐃⲆ] = ΔΔ[Ur.ΔΔⵠⲆᐃⲆⵠ];
    ΔΔ[Ur.ⵠⲆᐃⵠⵠⵠᐃ] = ΔΔ[Ur.ΔᐃᐃⲆⲆΔᐃ];
    ΔΔ[Ur.ΔΔΔⵠΔⲆⲆ] = ΔΔ[Ur.ΔⲆⵠⵠΔᐃΔ];
    ΔΔ[Ur.ⵠⲆΔⲆⲆᐃⵠ] = ΔΔ[Ur.ⵠᐃⲆⵠᐃΔΔ];
    ΔΔ[Ur.ⵠΔᐃⵠⵠⵠᐃ] = ΔΔ[Ur.ᐃⵠⵠΔⲆⲆⲆ];
    ΔΔ[Ur.ⵠᐃᐃⵠᐃⲆⵠ] = ΔΔ[Ur.ⲆᐃΔⲆΔᐃⵠ];
    ΔΔ[Ur.ΔᐃΔΔᐃΔⲆ] = ΔΔ[Ur.ⲆⲆⲆᐃⲆⲆΔ];
    ΔΔ[Ur.ΔⲆΔⲆⵠⵠᐃ] = ΔΔ[Ur.ⵠⵠⲆⵠᐃΔⲆ];
    ΔΔ[Ur.ⲆᐃⲆⵠΔⵠΔ] = ΔΔ[Ur.ᐃΔΔᐃᐃⵠᐃ];
    ΔΔ[Ur.ᐃΔⵠⲆΔΔⵠ] = ΔΔ[Ur.ⵠⵠⵠᐃⵠⵠΔ];
    ΔΔ[Ur.ΔᐃⵠᐃⲆⲆΔ] = ΔΔ[Ur.ⲆΔᐃⲆⵠⲆⲆ];
    ΔΔ[Ur.ⲆⵠⵠⵠΔΔⲆ] = ΔΔ[Ur.ΔⵠⵠⲆⲆⲆⵠ];
    ΔΔ[Ur.ⵠΔⲆⲆⲆⵠΔ] = ΔΔ[Ur.ᐃᐃᐃΔᐃᐃⲆ];
    ΔΔ[Ur.ⵠⲆⲆⲆᐃⲆⵠ] = ΔΔ[Ur.ᐃⵠᐃⵠᐃⵠᐃ];
    ΔΔ[Ur.ⲆᐃⲆⵠⵠⲆⵠ] = ΔΔ[Ur.ᐃⵠⵠⲆⵠⵠⲆ];
    ΔΔ[Ur.ΔᐃⵠⲆⵠᐃΔ] = ΔΔ[Ur.ᐃᐃⵠᐃⵠⲆᐃ];
    ΔΔ[Ur.ΔⲆⵠⲆⵠⲆΔ] = ΔΔ[Ur.ΔΔⲆⲆⵠᐃⵠ];
    ΔΔ[Ur.ᐃᐃΔᐃΔᐃᐃ] = ΔΔ[Ur.ⵠⵠⲆⵠⵠⵠⲆ];
    ΔΔ[Ur.ⵠΔⵠΔⲆⵠᐃ] = ΔΔ[Ur.ⲆⲆΔΔᐃᐃᐃ];
    ΔΔ[Ur.ⵠⲆᐃΔⲆⵠΔ] = ΔΔ[Ur.ⵠⵠⲆΔⵠⲆⵠ];
    ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠΔ] = ΔΔ[Ur.ΔᐃⲆΔΔᐃⲆ];
    ΔΔ[Ur.ᐃⲆⵠⲆⲆᐃⵠ] = ΔΔ[Ur.ΔᐃΔᐃⵠⵠⲆ];
    ΔΔ[Ur.ΔᐃᐃⲆΔⵠΔ] = ΔΔ[Ur.ᐃⵠⵠΔᐃΔⲆ];
    ΔΔ[Ur.ᐃΔⲆΔⲆⲆΔ] = ΔΔ[Ur.ΔᐃΔΔᐃᐃΔ];
    ΔΔ[Ur.ⵠΔΔⵠΔⵠᐃ] = ΔΔ[Ur.ΔᐃⲆΔⲆΔᐃ];
    ΔΔ[Ur.ⵠΔⵠⵠΔⲆⵠ] = ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆⲆ];
    ΔΔ[Ur.ᐃᐃⲆⵠᐃᐃᐃ] = ΔΔ[Ur.ⲆⵠΔⵠΔΔΔ];
    ΔΔ[Ur.ΔᐃⵠΔᐃᐃᐃ] = ΔΔ[Ur.Δᐃⵠⵠⵠᐃᐃ];
    ΔΔ[Ur.ΔᐃΔΔᐃⵠΔ] = ΔΔ[Ur.ᐃⵠⵠⵠΔΔⵠ];
    ΔΔ[Ur.ΔΔⲆᐃⲆᐃᐃ] = ΔΔ[Ur.ⲆΔᐃΔⲆᐃⵠ];
    ΔΔ[Ur.ΔΔᐃᐃⲆᐃⵠ] = ΔΔ[Ur.ᐃⵠᐃⵠΔⵠΔ];
    ΔΔ[Ur.ⵠⵠⵠᐃΔⵠΔ] = ΔΔ[Ur.ᐃΔⵠⵠΔⵠⲆ];
    ΔΔ[Ur.ⵠᐃⲆⵠⲆᐃΔ] = ΔΔ[Ur.ᐃᐃⵠΔᐃᐃⵠ];
    ΔΔ[Ur.ᐃⵠⲆᐃⲆΔⲆ] = ΔΔ[Ur.ᐃᐃⵠⲆᐃⲆΔ];
    ΔΔ[Ur.ⵠΔⲆᐃᐃΔⵠ] = ΔΔ[Ur.ⵠΔⲆᐃⲆᐃΔ];
    ΔΔ[Ur.ᐃΔⵠᐃⲆΔΔ] = ΔΔ[Ur.ᐃⲆⵠⵠⵠⵠΔ];
    ΔΔ[Ur.ⵠⲆᐃᐃⲆⵠⵠ] = ΔΔ[Ur.ⲆⲆᐃⲆⵠᐃᐃ];
    ΔΔ[Ur.ⵠⵠᐃᐃⲆⵠⲆ] = ΔΔ[Ur.ⲆⲆᐃΔⲆᐃⵠ];
    ΔΔ[Ur.ⲆΔΔⵠⵠⵠⵠ] = ΔΔ[Ur.ΔⵠⵠΔᐃⵠⵠ];
    ΔΔ[Ur.ⲆΔⵠⲆⵠᐃⲆ] = ΔΔ[Ur.ⲆᐃⲆΔΔᐃⵠ];
    ΔΔ[Ur.ⲆⲆⵠΔⲆⲆⲆ] = ΔΔ[Ur.ⲆΔᐃⵠⲆⲆΔ];
    ΔΔ[Ur.ⲆᐃⲆΔⵠⵠⲆ] = ΔΔ[Ur.ᐃⲆΔᐃᐃΔΔ];
    ΔΔ[Ur.ⲆΔᐃΔΔᐃⲆ] = ΔΔ[Ur.ⵠᐃΔⵠᐃⵠΔ];
    ΔΔ[Ur.ⲆⲆⲆᐃⵠⲆⲆ] = ΔΔ[Ur.ⲆᐃⲆΔⲆⲆⵠ];
    ΔΔ[Ur.ⵠⵠⲆᐃⲆᐃⲆ] = ΔΔ[Ur.ⵠΔⵠⲆⲆⵠᐃ];
    ΔΔ[Ur.ᐃᐃⲆⲆΔᐃⵠ] = ΔΔ[Ur.ⵠⲆΔᐃΔᐃᐃ];
    ΔΔ[Ur.ⲆΔⲆΔᐃⲆᐃ] = ΔΔ[Ur.ⲆⵠᐃᐃᐃⵠⲆ];
    ΔΔ[Ur.ⵠⲆΔΔⲆΔⲆ] = ΔΔ[Ur.ⵠⵠⲆⲆᐃⵠⲆ];
    ΔΔ[Ur.ΔⵠⵠⵠΔᐃⲆ] = ΔΔ[Ur.ΔⵠΔᐃᐃⲆᐃ];
    ΔΔ[Ur.ⲆᐃⵠⵠᐃΔⲆ] = ΔΔ[Ur.ΔᐃᐃⵠⲆⵠⲆ];
    ΔΔ[Ur.ΔᐃⲆΔⵠⲆⵠ] = ΔΔ[Ur.ⵠᐃᐃΔᐃᐃΔ];
    ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃⵠ] = ΔΔ[Ur.ΔⵠⲆΔΔᐃⵠ];
    ΔΔ[Ur.ⲆⲆᐃᐃⲆⵠⵠ] = ΔΔ[Ur.ⲆᐃⲆⵠᐃⲆⵠ];
    ΔΔ[Ur.ΔⵠᐃⵠⲆΔⵠ] = ΔΔ[Ur.ⲆΔⵠⵠⲆⲆⵠ];
    ΔΔ[Ur.ᐃⵠⵠΔΔⵠⲆ] = ΔΔ[Ur.ⵠⵠᐃΔΔⲆᐃ];
    ΔΔ[Ur.ⲆⲆⲆⲆⲆⲆⵠ] = ΔΔ[Ur.ᐃⲆⲆᐃⵠⵠⲆ];
    ΔΔ[Ur.ᐃᐃΔⵠᐃΔⲆ] = ΔΔ[Ur.ΔⲆⵠⲆᐃᐃᐃ];
    ΔΔ[Ur.ⲆⵠᐃⵠⲆΔΔ] = ΔΔ[Ur.ⵠᐃⵠΔΔⵠⵠ];
    ΔΔ[Ur.ᐃᐃΔΔⵠᐃⵠ] = ΔΔ[Ur.ᐃΔⲆⲆⵠⲆⵠ];
    ΔΔ[Ur.ⵠⲆⲆΔΔⲆΔ] = ΔΔ[Ur.ΔⲆⲆᐃⵠᐃᐃ];
    ΔΔ[Ur.ⲆⵠᐃⲆΔΔΔ] = ΔΔ[Ur.ⵠⵠⲆⲆᐃⲆᐃ];
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, Ht * a);
    e.globalAlpha = 0.3;
    ob(e, a * 98, a * 99, a * 100);
    eb(e, c[0]);
    e.globalAlpha = 0.5;
    ob(e, a * 98, a * 99, a * 90);
    eb(e, c[j]);
    return d;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * Iq, -tu * a);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    eb(e, c[4], c[xj], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -E, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    eb(e, c[4], c[5], a * ug);
    e.scale(1.1, 1.1);
    e.translate(-Ol * a, xt * a);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    tb(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    eb(e, c[Eo], c[Xh], a * xt);
    e.save();
    e.translate(Kq * a, a * 71.36874389648438);
    e.rotate(tj);
    tb(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    eb(e, c[3], c[gc], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * Nh);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * Wl, a * 44, a * P, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    eb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * Mk, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    eb(e, c[4], c[5], a * 4);
    e.translate(ne, Tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    eb(e, c[Kj], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    eb(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    eb(e, c[co], c[Cl], a * 4);
    e.scale(0.5, 0.5);
    e.translate(vh * a, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    eb(e, c[6], c[Xr], a * 4);
    return d;
  }
  function wm() {
    new Date().getTime();
    Ec();
    fm();
    ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ] = [];
    ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ][Ur.ΔΔⵠ] = [];
    for (var a = _a; a < Ur.ᐃΔΔⵠⵠᐃⵠ; a++) {
      ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ][Ur.ᐃΔⵠ].push(Fr(rd(1, 4 + a, "#59B8CE")));
      ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ][Ur.ΔΔⵠ].push(Fr(rd(1, 4 + a, "#90DDD9")));
    }
    ΔΔ[Ur.ⵠᐃⵠᐃᐃⲆⲆ] = [];
    ΔΔ[Ur.ⵠᐃⵠᐃᐃⲆⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃⵠᐃᐃⲆⲆ][Ur.ΔΔⵠ] = [];
    for (a = 0; a < Ur.ⵠΔᐃΔᐃⵠΔ; a++) {
      ΔΔ[Ur.ⵠᐃⵠᐃᐃⲆⲆ][Ur.ᐃΔⵠ].push(Fr(rd(1, _g + a, "#fff")));
      ΔΔ[Ur.ⵠᐃⵠᐃᐃⲆⲆ][Ur.ΔΔⵠ].push(Fr(rd(1, ug + a, "#fff")));
    }
    ΔΔ[Ur.ᐃⲆΔΔΔⲆⲆ] = [];
    ΔΔ[Ur.ᐃⲆΔΔΔⲆⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆΔΔΔⲆⲆ][Ur.ΔΔⵠ] = [];
    for (a = Gr; Ur.ⵠΔᐃΔᐃⵠΔ > a; a++) {
      ΔΔ[Ur.ᐃⲆΔΔΔⲆⲆ][Ur.ᐃΔⵠ].push(Fr(rd(1, Pl + a, "#DDCD8A")));
      ΔΔ[Ur.ᐃⲆΔΔΔⲆⲆ][Ur.ΔΔⵠ].push(Fr(rd(1, 6 + a, "#155E57")));
    }
    ΔΔ[Ur.ⵠΔⲆⵠⲆᐃᐃ] = [];
    ΔΔ[Ur.ⵠΔⲆⵠⲆᐃᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆⵠⲆᐃᐃ][Ur.ΔΔⵠ] = [];
    for (a = Ih; a < Ur.ⵠⵠᐃⲆᐃⲆⲆ; a++) {
      ΔΔ[Ur.ⵠΔⲆⵠⲆᐃᐃ][Ur.ᐃΔⵠ].push(Fr(rd(1, Ch + a, "#353326")));
      ΔΔ[Ur.ⵠΔⲆⵠⲆᐃᐃ][Ur.ΔΔⵠ].push(Fr(rd(1, 4 + a, "#1D2526")));
    }
    ΔΔ[Ur.ⵠⵠᐃⵠᐃ] = [];
    ΔΔ[Ur.ⵠⵠᐃⵠᐃ][Ur.ᐃΔⵠ] = Fr(fb(1.5, 0, ["#ee71a9"]));
    ΔΔ[Ur.ⵠⵠᐃⵠᐃ][Ur.ΔΔⵠ] = Fr(fb(1.5, 0, ["#ee71a9"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ] = [ΔΔ[Ur.ⵠⵠᐃⵠᐃ]];
    ΔΔ[Ur.ΔⲆΔⲆᐃ][aa] = [];
    ΔΔ[Ur.ΔⲆΔⲆᐃ][2] = [];
    ΔΔ[Ur.ΔⲆΔⲆᐃ][Qt] = [];
    ΔΔ[Ur.ΔⲆΔⲆᐃ][4] = [];
    ΔΔ[Ur.ΔⲆΔⲆᐃ][1][Ur.ᐃΔⵠ] = Fr(fb(1.5, 0, ["#e2d63b"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][_b][Ur.ΔΔⵠ] = Fr(fb(1.5, 0, ["#e2d63b"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][2][Ur.ᐃΔⵠ] = Fr(fb(1.5, 0, ["#309cbd"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][2][Ur.ΔΔⵠ] = Fr(fb(1.5, 0, ["#309cbd"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][3][Ur.ᐃΔⵠ] = Fr(fb(1.5, 0, ["#cd232d"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][co][Ur.ΔΔⵠ] = Fr(fb(1.5, 0, ["#cd232d"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][4][Ur.ᐃΔⵠ] = Fr(fb(1.5, 0, ["#42b672"]));
    ΔΔ[Ur.ΔⲆΔⲆᐃ][4][Ur.ΔΔⵠ] = Fr(fb(1.5, 0, ["#42b672"]));
    if (ᐃⵠΔⵠ.ᐃⵠΔᐃⲆᐃⲆ("cti", kj.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Fr = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ΔΔ[Ur.ⲆΔΔᐃΔⲆⲆ] = Fr(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, Gr, a.width, a.height);
      b.lineWidth = Cg;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var d = c; d < 220; d += 20) {
        b.moveTo(0, d);
        b.lineTo(460, d);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ] = [];
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ᐃΔⵠ].push(Fr(Lu(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ᐃΔⵠ].push(Fr(Lu(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ᐃΔⵠ].push(Fr(Lu(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ΔΔⵠ].push(Fr(Lu(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ΔΔⵠ].push(Fr(Lu(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Ur.ⵠᐃᐃⲆⵠ][Ur.ΔΔⵠ].push(Fr(Lu(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Ur.ΔΔΔΔ] = [];
    ΔΔ[Ur.ΔΔΔΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔΔΔΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔΔΔΔ][Ur.ᐃΔⵠ].push(Fr(Pu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Ur.ΔΔΔΔ][Ur.ᐃΔⵠ].push(Fr(Pu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Ur.ΔΔΔΔ][Ur.ᐃΔⵠ].push(Fr(Pu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Ur.ΔΔΔΔ][Ur.ΔΔⵠ].push(Fr(Pu(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Ur.ΔΔΔΔ][Ur.ΔΔⵠ].push(Fr(Pu(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Ur.ΔΔΔΔ][Ur.ΔΔⵠ].push(Fr(Pu(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Ur.ΔⲆⲆΔ] = [];
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ᐃΔⵠ].push(Fr(Qu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ᐃΔⵠ].push(Fr(Qu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ᐃΔⵠ].push(Fr(Qu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ΔΔⵠ].push(Fr(Qu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ΔΔⵠ].push(Fr(Qu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Ur.ΔⲆⲆΔ][Ur.ΔΔⵠ].push(Fr(Qu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Ur.ᐃᐃⵠⲆⵠ] = [];
    ΔΔ[Ur.ᐃᐃⵠⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⲆᐃΔΔⲆ;
    ΔΔ[Ur.ᐃᐃⵠⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆΔᐃⲆⲆⵠ;
    ΔΔ[Ur.ᐃᐃⵠΔⲆ] = [];
    ΔΔ[Ur.ᐃᐃⵠΔⲆ][Ur.ᐃΔⵠ] = Fr(mu(0.6, ["#0d1b1c"]));
    ΔΔ[Ur.ᐃᐃⵠΔⲆ][Ur.ΔΔⵠ] = Fr(mu(0.6, ["#030d14"]));
    ΔΔ[Ur.ᐃⲆᐃΔᐃ] = [];
    ΔΔ[Ur.ᐃⲆᐃΔᐃ][Ur.ᐃΔⵠ] = Fr(iu(0.6, ["#2a2938", "#242330"]));
    ΔΔ[Ur.ᐃⲆᐃΔᐃ][Ur.ΔΔⵠ] = Fr(iu(0.6, ["#1b1e30", "#161921"]));
    ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆᐃ] = [];
    ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆᐃ][Ur.ᐃΔⵠ] = Fr(Pb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆᐃ][Ur.ΔΔⵠ] = Fr(Pb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ΔΔ[Ur.ⲆⲆⲆᐃⲆⵠⵠ] = [];
    ΔΔ[Ur.ⲆⲆⲆᐃⲆⵠⵠ][Ur.ᐃΔⵠ] = Fr(Ab(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ΔΔ[Ur.ⲆⲆⲆᐃⲆⵠⵠ][Ur.ΔΔⵠ] = Fr(Ab(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ΔΔ[Ur.ⵠΔᐃᐃΔⵠⲆ] = [];
    ΔΔ[Ur.ⵠΔᐃᐃΔⵠⲆ][Ur.ᐃΔⵠ] = Fr(ju(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ΔΔ[Ur.ⵠΔᐃᐃΔⵠⲆ][Ur.ΔΔⵠ] = Fr(ju(0.4, ["#030d14", "#11635e", "#02373e"]));
    ΔΔ[Ur.ⲆⲆᐃΔᐃᐃΔ] = Fr(Jb(0.6, ["#BB0000"]));
    ΔΔ[Ur.ΔⵠΔⵠᐃⵠⵠ] = Fr(Jb(0.6, ["#DBE71C"]));
    ΔΔ[Ur.ⲆᐃⲆⲆⵠΔΔ] = Fr(Jb(0.6, ["#00BB00"]));
    ΔΔ[Ur.ᐃⵠΔᐃ] = [];
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ].push(nu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, rl));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ].push(nu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, qn));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ].push(nu(0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ].push(nu(0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], Xj, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ].push(nu(0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ].push(nu(0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], true, ms));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ].push(nu(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], Ao, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ].push(nu(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], ra, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ].push(nu(0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ].push(nu(0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], U, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ].push(nu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], d, 0));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ].push(nu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
    ΔΔ[Ur.ⵠⲆⵠΔΔ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ᐃΔⵠ].push(Fr(wu(ru(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][0])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ᐃΔⵠ].push(Fr(wu(ru(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], wq), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][1])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ΔΔⵠ].push(Fr(wu(ru(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][qk])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ΔΔⵠ].push(Fr(wu(ru(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][Zq])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ᐃΔⵠ].push(Fr(wu(ru(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], xg), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][2])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ᐃΔⵠ].push(Fr(wu(ru(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], true), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][2])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ΔΔⵠ].push(Fr(wu(ru(0.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], Ao), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][vk])));
    ΔΔ[Ur.ⵠⲆⵠΔΔ][Ur.ΔΔⵠ].push(Fr(wu(ru(0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], Xi), ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][3])));
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][5] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][wt]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][hn] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][4]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][yh] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][nn]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][ld] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][2]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][1] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][1]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][0] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ᐃΔⵠ][Fj]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][5] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][Ya]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][4] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][uj]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][3] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][3]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][re] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][2]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][1] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][Ok]);
    ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][0] = Fr(ΔΔ[Ur.ᐃⵠΔᐃ][Ur.ΔΔⵠ][Qs]);
    ΔΔ[Ur.ⵠᐃⲆⲆⲆ] = [];
    ΔΔ[Ur.ⵠᐃⲆⲆⲆ][Ur.ᐃΔⵠ] = Fr(gb(4, uu(0.75, Fs, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ΔΔ[Ur.ⵠᐃⲆⲆⲆ][Ur.ΔΔⵠ] = Fr(gb(4, uu(0.75, f, ["#030d14", "#000000", "#030d14", "#0d2e33", p[Mt], "#0d2e33", p[zl]])));
    ΔΔ[Ur.ᐃᐃⲆⵠΔ] = [];
    ΔΔ[Ur.ᐃᐃⲆⵠΔ][Ur.ᐃΔⵠ] = Fr(gb(Xb, uu(0.75, U, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[Ur.ᐃᐃⲆⵠΔ][Ur.ΔΔⵠ] = Fr(gb(ea, uu(0.75, A, ["#030d14", "#000000", "#030d14", "#0d2e33", p[Hl], "#485e66", "#1f343f"])));
    ΔΔ[Ur.ⲆΔᐃⲆⵠ] = [];
    ΔΔ[Ur.ⲆΔᐃⲆⵠ][Ur.ᐃΔⵠ] = Fr(gb(4, uu(0.75, Yq, ["#0d1b1c", "#000000", "#0d1b1c", p[ok], "#382e19", p[Aq], "#b29c32"])));
    ΔΔ[Ur.ⲆΔᐃⲆⵠ][Ur.ΔΔⵠ] = Fr(gb(uj, uu(0.75, dn, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ΔΔ[Ur.ΔΔᐃᐃᐃ] = [];
    ΔΔ[Ur.ΔΔᐃᐃᐃ][Ur.ᐃΔⵠ] = Fr(gb(_g, uu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[Ur.ΔΔᐃᐃᐃ][Ur.ΔΔⵠ] = Fr(gb(rg, uu(0.75, Xn, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[Ur.ΔⵠⲆΔΔ] = [];
    ΔΔ[Ur.ΔⵠⲆΔΔ][Ur.ᐃΔⵠ] = Fr(gb(_g, uu(0.75, Xi, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[Ur.ΔⵠⲆΔΔ][Ur.ΔΔⵠ] = Fr(gb(4, uu(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[Ur.ⲆΔΔΔⲆ] = [];
    ΔΔ[Ur.ⲆΔΔΔⲆ][Ur.ᐃΔⵠ] = Fr(gb(Sg, vu(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ΔΔ[Ur.ⲆΔΔΔⲆ][Ur.ΔΔⵠ] = Fr(gb(Gl, vu(0.17, Mh, ["#0d1b1c", "#0d2e33", p[Hl], "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ΔΔ[Ur.ΔⵠΔⲆΔ] = [];
    ΔΔ[Ur.ΔⵠΔⲆΔ][Ur.ᐃΔⵠ] = Fr(gb(3, Mu(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ΔΔ[Ur.ΔⵠΔⲆΔ][Ur.ΔΔⵠ] = Fr(gb(Wb, Mu(0.42, U, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", p[Do]])));
    ΔΔ[Ur.ⲆᐃⲆᐃΔ] = [];
    ΔΔ[Ur.ⲆᐃⲆᐃΔ][Ur.ᐃΔⵠ] = Fr(gb(ol, yu(0.4, true, ["#0d1b1c", "#73583e", "#493425", p[la], "#5e4530", "#473221", "#745840"])));
    ΔΔ[Ur.ⲆᐃⲆᐃΔ][Ur.ΔΔⵠ] = Fr(gb(Kj, yu(0.4, U, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ΔΔ[Ur.ᐃᐃᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃᐃᐃΔⵠ][Ur.ᐃΔⵠ] = Fr(gb(3, Au(0.4, Xi, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ΔΔ[Ur.ᐃᐃᐃΔⵠ][Ur.ΔΔⵠ] = Fr(gb(3, Au(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ΔΔ[Ur.ΔᐃᐃΔⲆ] = [];
    ΔΔ[Ur.ΔᐃᐃΔⲆ][Ur.ᐃΔⵠ] = Fr(gb(3, Hu(0.4, true, ["#0d1b1c", p[ch], "#b29c32", p[Cg], "#493e26", "#382e19"])));
    ΔΔ[Ur.ΔᐃᐃΔⲆ][Ur.ΔΔⵠ] = Fr(gb(nn, Hu(0.4, Ir, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ΔΔ[Ur.ⵠΔΔⲆᐃ] = [];
    ΔΔ[Ur.ⵠΔΔⲆᐃ][Ur.ᐃΔⵠ] = Fr(gb(3, Vu(0.4, Fs, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ΔΔ[Ur.ⵠΔΔⲆᐃ][Ur.ΔΔⵠ] = Fr(gb(ar, Vu(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ΔΔ[Ur.ⵠᐃᐃⵠⵠ] = [];
    ΔΔ[Ur.ⵠᐃᐃⵠⵠ][Ur.ᐃΔⵠ] = Fr(gb(3, Nu(0.4, Xi, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ΔΔ[Ur.ⵠᐃᐃⵠⵠ][Ur.ΔΔⵠ] = Fr(gb(dt, Nu(0.4, zo, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ᐃΔⵠ].push(Fr(nd(0.9, 0, ["#0d4f35"], Gr)));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ᐃΔⵠ].push(Fr(nd(0.9, 0, ["#0d4f35"], 1)));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ᐃΔⵠ].push(Fr(nd(0.9, 0, ["#0d4f35"], wr)));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ΔΔⵠ].push(Fr(nd(0.9, 0, ["#053339"], Nl)));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ΔΔⵠ].push(Fr(nd(0.9, 0, ["#053339"], 1)));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ΔΔⵠ].push(Fr(nd(0.9, 0, ["#053339"], ql)));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ᐃΔⵠ].push(Fr(id(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ᐃΔⵠ].push(Fr(id(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ΔΔⵠ].push(Fr(id(0.9, ["#052919", "#0a4738", "#06321f"])));
    ΔΔ[Ur.ⵠⲆⵠΔⵠ][Ur.ΔΔⵠ].push(Fr(id(0.8, ["#052918", "#08491c", "#063417"])));
    ΔΔ[Ur.Δᐃᐃᐃᐃ] = [];
    ΔΔ[Ur.Δᐃᐃᐃᐃ][Ur.ᐃΔⵠ] = Fr(gb(Math.PI / 2, Xd(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ΔΔ[Ur.Δᐃᐃᐃᐃ][Ur.ΔΔⵠ] = Fr(gb(Math.PI / 2, Xd(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ΔΔ[Ur.ᐃⲆᐃΔΔΔⲆ] = [];
    ΔΔ[Ur.ᐃⲆᐃΔΔΔⲆ].push(Fr(rc(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ΔΔ[Ur.ᐃⲆᐃΔΔΔⲆ].push(Fr(rc(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], ie)));
    ΔΔ[Ur.ᐃⲆᐃΔΔΔⲆ].push(Fr(rc(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ᐃΔⵠ].push(Fr(gb(Math.PI / zk, Zd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ΔΔⵠ].push(Fr(gb(Math.PI / Zn, Zd(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ᐃΔⵠ].push(Fr(gb(Math.PI / 2, Zd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], hc))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ΔΔⵠ].push(Fr(gb(Math.PI / 2, Zd(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ᐃΔⵠ].push(Fr(gb(Math.PI / 2, Zd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], Kj))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ΔΔⵠ].push(Fr(gb(Math.PI / 2, Zd(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ᐃΔⵠ].push(Fr(gb(Math.PI / 2, Zd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], Ph))));
    ΔΔ[Ur.ⵠⵠᐃᐃΔ][Ur.ΔΔⵠ].push(Fr(gb(Math.PI / 2, Zd(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ΔΔ[Ur.ᐃⲆΔᐃⵠ] = [];
    ΔΔ[Ur.ᐃⲆΔᐃⵠ][Ur.ᐃΔⵠ] = [Fr(Uu(1.2, true, ["#352b10", "#80500b", "#7c4908"]))];
    ΔΔ[Ur.ᐃⲆΔᐃⵠ][Ur.ΔΔⵠ] = [Fr(Uu(1.2, wq, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ΔΔ[Ur.ⲆᐃⲆⲆΔΔΔ] = [];
    ΔΔ[Ur.ⲆᐃⲆⲆΔΔΔ][Ur.ᐃΔⵠ] = Fr(Uu(0.8, true, ["#0e3022", "#68622D", "#665329"]));
    ΔΔ[Ur.ⲆᐃⲆⲆΔΔΔ][Ur.ΔΔⵠ] = Fr(Uu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ΔΔ[Ur.ⲆΔⲆΔᐃ] = [];
    ΔΔ[Ur.ⲆΔⲆΔᐃ][Ur.ᐃΔⵠ] = Fr(Lc(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ΔΔ[Ur.ⲆΔⲆΔᐃ][Ur.ΔΔⵠ] = Fr(Lc(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ΔΔ[Ur.ᐃⵠΔⵠⲆ] = [];
    ΔΔ[Ur.ᐃⵠΔⵠⲆ][Ur.ᐃΔⵠ] = Fr(cb(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ΔΔ[Ur.ᐃⵠΔⵠⲆ][Ur.ΔΔⵠ] = Fr(cb(0.5, zo, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ΔΔ[Ur.ⲆⲆΔⵠⲆ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠⲆ][Ur.ᐃΔⵠ] = Fr(om(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ΔΔ[Ur.ⲆⲆΔⵠⲆ][Ur.ΔΔⵠ] = Fr(om(0.5, Mh, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ΔΔ[Ur.ᐃⲆΔⵠᐃᐃⲆ] = [];
    ΔΔ[Ur.ᐃⲆΔⵠᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(Uu(0.8, zo, ["#1b170c", "#0b8052", "#077b49"]));
    ΔΔ[Ur.ᐃⲆΔⵠᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(Uu(0.8, nr, ["#030d14", "#084442", "#0a4049"]));
    ΔΔ[Ur.ⵠⲆⵠΔᐃᐃⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔᐃᐃⵠ][Ur.ᐃΔⵠ] = Fr(Lc(0.5, Qn, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ΔΔ[Ur.ⵠⲆⵠΔᐃᐃⵠ][Ur.ΔΔⵠ] = Fr(Lc(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ΔΔ[Ur.ⲆⲆΔΔᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆⲆΔΔᐃΔⵠ][Ur.ᐃΔⵠ] = Fr(cb(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ΔΔ[Ur.ⲆⲆΔΔᐃΔⵠ][Ur.ΔΔⵠ] = Fr(cb(0.5, an, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ΔΔ[Ur.ᐃᐃᐃΔΔⵠⵠ] = [];
    ΔΔ[Ur.ᐃᐃᐃΔΔⵠⵠ][Ur.ᐃΔⵠ] = Fr(om(0.5, wq, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ΔΔ[Ur.ᐃᐃᐃΔΔⵠⵠ][Ur.ΔΔⵠ] = Fr(om(0.5, Yq, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ΔΔ[Ur.ⲆⲆⵠⲆⵠ] = [];
    ΔΔ[Ur.ⲆⲆⵠⲆⵠ][Ur.ᐃΔⵠ] = Fr(cc(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ΔΔ[Ur.ⲆⲆⵠⲆⵠ][Ur.ΔΔⵠ] = Fr(cc(0.45, Kh, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ΔΔ[Ur.ΔⲆᐃᐃⵠΔⵠ] = Fr(cc(0.65, A, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ΔΔ[Ur.ⲆΔΔΔⵠ] = [];
    ΔΔ[Ur.ⲆΔΔΔⵠ][Ur.ᐃΔⵠ] = Fr(Zu(1.4, 0, ["#3d2a6e", "#8255b5"]));
    ΔΔ[Ur.ⲆΔΔΔⵠ][Ur.ΔΔⵠ] = Fr(Zu(1.4, 0, ["#26124f", "#524082"]));
    ΔΔ[Ur.ⵠΔⵠΔⲆ] = [];
    ΔΔ[Ur.ⵠΔⵠΔⲆ][Ur.ᐃΔⵠ] = Fr(bu(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ΔΔ[Ur.ⵠΔⵠΔⲆ][Ur.ΔΔⵠ] = Fr(bu(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ΔΔ[Ur.ᐃⵠΔΔⵠⲆⵠ] = [];
    ΔΔ[Ur.ᐃⵠΔΔⵠⲆⵠ][Ur.ᐃΔⵠ] = Fr(du(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[Ur.ᐃⵠΔΔⵠⲆⵠ][Ur.ΔΔⵠ] = Fr(du(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[Ur.ⲆΔⲆΔⵠΔᐃ] = [];
    ΔΔ[Ur.ⲆΔⲆΔⵠΔᐃ][Ur.ᐃΔⵠ] = Fr(eu(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[Ur.ⲆΔⲆΔⵠΔᐃ][Ur.ΔΔⵠ] = Fr(eu(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[Ur.ΔⲆᐃΔΔᐃᐃ] = [];
    ΔΔ[Ur.ΔⲆᐃΔΔᐃᐃ][Ur.ᐃΔⵠ] = Fr(gu(0.9, 0, ["#efd435"]));
    ΔΔ[Ur.ΔⲆᐃΔΔᐃᐃ][Ur.ΔΔⵠ] = Fr(gu(0.9, 0, ["#fffabb"]));
    ΔΔ[Ur.ᐃΔⵠⲆΔⵠⵠ] = [];
    ΔΔ[Ur.ᐃΔⵠⲆΔⵠⵠ][Ur.ᐃΔⵠ] = Fr(cu(0.9, 0, ["#efd435"]));
    ΔΔ[Ur.ᐃΔⵠⲆΔⵠⵠ][Ur.ΔΔⵠ] = Fr(cu(0.9, 0, ["#fffabb"]));
    ΔΔ[Ur.ⵠⲆⵠΔⵠᐃⵠ] = [];
    ΔΔ[Ur.ⵠⲆⵠΔⵠᐃⵠ][Ur.ᐃΔⵠ] = Fr(gu(0.9, 0, ["#efd435"]));
    ΔΔ[Ur.ⵠⲆⵠΔⵠᐃⵠ][Ur.ΔΔⵠ] = Fr(gu(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ΔΔ[Ur.ᐃΔΔΔⲆⲆᐃ] = [];
    ΔΔ[Ur.ᐃΔΔΔⲆⲆᐃ][Ur.ᐃΔⵠ] = Fr(cu(0.9, 0, ["#efd435"]));
    ΔΔ[Ur.ᐃΔΔΔⲆⲆᐃ][Ur.ΔΔⵠ] = Fr(cu(0.9, 0, ["#ff5704"]));
    ΔΔ[Ur.ΔΔᐃⲆⲆⲆⲆ] = Fr(Ib(1, "#ffffff"));
    ΔΔ[Ur.ⵠⲆⵠⲆᐃᐃΔ] = Fr(Ib(1.5, "#ffffff"));
    ΔΔ[Ur.ⵠⲆΔⲆᐃⵠⲆ] = Fr(Wu(1, "Your score:", 15, "#FFF"));
    ΔΔ[Ur.ᐃΔΔΔⲆⵠⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      ob(d, a * 119.5, a * 140.125, a * 19);
      eb(d, oh, b[1], a * Vh);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      eb(d, b[0], b[ag], a * Rb);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      eb(d, undefined, b[tg], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      eb(d, yq, b[og], Ho * a);
      ob(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      eb(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      eb(d, b[hu], b[Oq], Zn * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      eb(d, Gg, b[ys], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      tb(d, a * -39, a * -40, a * 78, a * 78, Uh * a);
      d.restore();
      eb(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      tb(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      eb(d, b[hk]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ΔΔ[Ur.ⵠΔᐃⲆΔⲆⲆ] = ⵠᐃ.ⵠΔᐃⲆΔⲆⲆ;
    ΔΔ[Ur.ᐃᐃΔⲆⵠ] = [];
    ΔΔ[Ur.ᐃᐃΔⲆⵠ][Ur.ᐃΔⵠ] = Fr(Zb(1.5, Fs, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Ur.ᐃᐃΔⲆⵠ][Ur.ΔΔⵠ] = Fr(Zb(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[Ur.ⵠⲆⲆΔΔⵠⲆ] = [];
    ΔΔ[Ur.ⵠⲆⲆΔΔⵠⲆ][Ur.ᐃΔⵠ] = Fr(Vb(2, true, ["#0d1b1c", "#596560", "#394841", p[ld], "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Ur.ⵠⲆⲆΔΔⵠⲆ][Ur.ΔΔⵠ] = Fr(Vb(lt * 1, Ir, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[Ur.ⲆΔⵠⲆΔⵠᐃ] = [];
    ΔΔ[Ur.ⲆΔⵠⲆΔⵠᐃ][Ur.ᐃΔⵠ] = Fr(Vt(1.5, true, ["#0d1b1c", "#596560", "#394841", p[Tt], "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Ur.ⲆΔⵠⲆΔⵠᐃ][Ur.ΔΔⵠ] = Fr(Vt(1.5, Fs, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[Ur.ᐃⵠⵠΔᐃ] = [];
    ΔΔ[Ur.ᐃⵠⵠΔᐃ][Ur.ᐃΔⵠ] = Fr(Kb(2.2, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[Ur.ᐃⵠⵠΔᐃ][Ur.ΔΔⵠ] = Fr(Kb(2.2, 0, ["#0B4049", "#08383D"]));
    ΔΔ[Ur.ⵠⵠᐃᐃᐃⲆⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃᐃⲆⵠ][Ur.ᐃΔⵠ] = Fr(Kb(2.2, 0, ["#68622D", "#665329"]));
    ΔΔ[Ur.ⵠⵠᐃᐃᐃⲆⵠ][Ur.ΔΔⵠ] = Fr(Kb(2.2, 0, ["#0F3A24", "#083326"]));
    ΔΔ[Ur.ᐃΔᐃⲆΔ] = [];
    ΔΔ[Ur.ᐃΔᐃⲆΔ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[Ur.ᐃΔᐃⲆΔ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ΔΔ[Ur.ΔⲆⵠΔⲆΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⵠΔⲆΔⵠ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#c67933", "#b17238"]));
    ΔΔ[Ur.ΔⲆⵠΔⲆΔⵠ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⲆⲆ] = [];
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⲆⲆ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ΔΔ[Ur.ⲆⵠᐃⲆᐃⲆⲆ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#032d29", "#044640"]));
    ΔΔ[Ur.ⵠΔⵠⵠᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔⵠⵠᐃΔⵠ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ΔΔ[Ur.ⵠΔⵠⵠᐃΔⵠ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#1c6161", "#07413f"]));
    ΔΔ[Ur.ⲆᐃΔⵠⲆᐃⲆ] = [];
    ΔΔ[Ur.ⲆᐃΔⵠⲆᐃⲆ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#328a56", "#449573"]));
    ΔΔ[Ur.ⲆᐃΔⵠⲆᐃⲆ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Ur.ᐃⲆⵠⵠΔΔΔ] = [];
    ΔΔ[Ur.ᐃⲆⵠⵠΔΔΔ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ΔΔ[Ur.ᐃⲆⵠⵠΔΔΔ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Ur.ᐃᐃⲆᐃΔⲆΔ] = [];
    ΔΔ[Ur.ᐃᐃⲆᐃΔⲆΔ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#b22419", "#99110e"]));
    ΔΔ[Ur.ᐃᐃⲆᐃΔⲆΔ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#04323c", "#03222b"]));
    ΔΔ[Ur.ⲆΔᐃᐃΔⵠⲆ] = [];
    ΔΔ[Ur.ⲆΔᐃᐃΔⵠⲆ][Ur.ᐃΔⵠ] = Fr(Xu(0.8, 0, ["#13a56d", "#098a58"]));
    ΔΔ[Ur.ⲆΔᐃᐃΔⵠⲆ][Ur.ΔΔⵠ] = Fr(Xu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Ur.ᐃΔⲆᐃᐃᐃⲆ] = $t(zs, [{
      f: Kb,
      x: _a,
      y: Ih,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Ur.ΔⲆⵠⲆⲆⵠⲆ] = $t(1, [{
      f: eu,
      x: tj,
      y: 0,
      a: 1,
      r: -Math.PI / xj,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Ur.ⵠᐃⲆᐃᐃᐃᐃ] = $t(1, [{
      f: em,
      x: Gr,
      y: -5,
      a: 1,
      r: Cq,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Ur.ⲆΔⵠⲆⵠⲆⲆ] = $t(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Ur.ⲆᐃⲆᐃᐃⵠⲆ] = [];
    ΔΔ[Ur.ⲆᐃⲆᐃᐃⵠⲆ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ΔΔ[Ur.ⲆᐃⲆᐃᐃⵠⲆ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#084442", "#125e5a"]));
    ΔΔ[Ur.ΔⵠⲆⲆⲆ] = [];
    ΔΔ[Ur.ΔⵠⲆⲆⲆ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#9E8456", "#A89F67"]));
    ΔΔ[Ur.ΔⵠⲆⲆⲆ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ΔΔ[Ur.ΔⲆᐃᐃΔⵠⵠ] = [];
    ΔΔ[Ur.ΔⲆᐃᐃΔⵠⵠ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#665329", "#68622D"]));
    ΔΔ[Ur.ΔⲆᐃᐃΔⵠⵠ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#083326", "#0F3A24"]));
    ΔΔ[Ur.ΔⲆΔⲆⲆᐃⲆ] = [];
    ΔΔ[Ur.ΔⲆΔⲆⲆᐃⲆ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#c67933", "#ec952d"]));
    ΔΔ[Ur.ΔⲆΔⲆⲆᐃⲆ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Ur.ᐃⲆΔΔᐃⵠᐃ] = [];
    ΔΔ[Ur.ᐃⲆΔΔᐃⵠᐃ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#375809", "#4b770e"]));
    ΔΔ[Ur.ᐃⲆΔΔᐃⵠᐃ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#09542d", "#0d5d2f"]));
    ΔΔ[Ur.ΔΔᐃΔⵠⲆΔ] = [];
    ΔΔ[Ur.ΔΔᐃΔⵠⲆΔ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#585809", "#72770e"]));
    ΔΔ[Ur.ΔΔᐃΔⵠⲆΔ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#295209", "#305d0d"]));
    ΔΔ[Ur.ΔⲆⵠᐃⲆᐃΔ] = [];
    ΔΔ[Ur.ΔⲆⵠᐃⲆᐃΔ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ΔΔ[Ur.ΔⲆⵠᐃⲆᐃΔ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#126366", "#0d484b"]));
    ΔΔ[Ur.ⵠᐃΔΔᐃⵠᐃ] = [];
    ΔΔ[Ur.ⵠᐃΔΔᐃⵠᐃ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#3f8662", "#30915d"]));
    ΔΔ[Ur.ⵠᐃΔΔᐃⵠᐃ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Ur.ⵠᐃᐃᐃΔᐃᐃ] = [];
    ΔΔ[Ur.ⵠᐃᐃᐃΔᐃᐃ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#c79153", "#dfa868"]));
    ΔΔ[Ur.ⵠᐃᐃᐃΔᐃᐃ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[Ur.ⵠⲆⲆΔⲆⲆⲆ] = [];
    ΔΔ[Ur.ⵠⲆⲆΔⲆⲆⲆ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#768b5b", "#819984"]));
    ΔΔ[Ur.ⵠⲆⲆΔⲆⲆⲆ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#0c4540", "#0e5153"]));
    ΔΔ[Ur.ⲆⵠⵠⲆᐃΔᐃ] = [];
    ΔΔ[Ur.ⲆⵠⵠⲆᐃΔᐃ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#567465", "#627c6e"]));
    ΔΔ[Ur.ⲆⵠⵠⲆᐃΔᐃ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[Ur.ΔΔⲆΔⲆⲆᐃ] = [];
    ΔΔ[Ur.ΔΔⲆΔⲆⲆᐃ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#996b3a", "#bf956b"]));
    ΔΔ[Ur.ΔΔⲆΔⲆⲆᐃ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Ur.ⵠⲆᐃΔᐃⲆⲆ] = [];
    ΔΔ[Ur.ⵠⲆᐃΔᐃⲆⲆ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#7a634a", "#a68f77"]));
    ΔΔ[Ur.ⵠⲆᐃΔᐃⲆⲆ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#1e4d43", "#113c32"]));
    ΔΔ[Ur.ΔᐃⲆⲆⵠⲆⵠ] = [];
    ΔΔ[Ur.ΔᐃⲆⲆⵠⲆⵠ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#99403c", "#bc796c"]));
    ΔΔ[Ur.ΔᐃⲆⲆⵠⲆⵠ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#1e434d", "#11303c"]));
    ΔΔ[Ur.ΔᐃⲆⵠᐃⲆᐃ] = [];
    ΔΔ[Ur.ΔᐃⲆⵠᐃⲆᐃ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#88504e", "#b3857c"]));
    ΔΔ[Ur.ΔᐃⲆⵠᐃⲆᐃ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#253b41", "#162930"]));
    ΔΔ[Ur.ⲆΔΔᐃΔⲆⵠ] = [];
    ΔΔ[Ur.ⲆΔΔᐃΔⲆⵠ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#0f8870", "#23af93"]));
    ΔΔ[Ur.ⲆΔΔᐃΔⲆⵠ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#032829", "#083233"]));
    ΔΔ[Ur.ᐃΔΔΔⲆⲆⵠ] = [];
    ΔΔ[Ur.ᐃΔΔΔⲆⲆⵠ][Ur.ᐃΔⵠ] = Fr(xb(0.9, 0, ["#618a20", "#84a74e"]));
    ΔΔ[Ur.ᐃΔΔΔⲆⲆⵠ][Ur.ΔΔⵠ] = Fr(xb(0.9, 0, ["#1f4632", "#335d47"]));
    ΔΔ[Ur.ᐃⲆᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆᐃΔⵠ][Ur.ᐃΔⵠ] = Fr(Gb(1.2, an, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ΔΔ[Ur.ᐃⲆᐃΔⵠ][Ur.ΔΔⵠ] = Fr(Gb(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ΔΔ[Ur.Ⲇᐃᐃⵠᐃ] = [];
    ΔΔ[Ur.Ⲇᐃᐃⵠᐃ][Ur.ᐃΔⵠ] = Fr(ud(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[Ur.Ⲇᐃᐃⵠᐃ][Ur.ΔΔⵠ] = Fr(ud(1, A, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Ur.ⲆΔⲆⲆᐃ] = [];
    ΔΔ[Ur.ⲆΔⲆⲆᐃ][Ur.ᐃΔⵠ] = Fr(bd(zs * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Ur.ⲆΔⲆⲆᐃ][Ur.ΔΔⵠ] = Fr(bd(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Ur.ⵠΔⵠⲆΔ] = [];
    ΔΔ[Ur.ⵠΔⵠⲆΔ][Ur.ᐃΔⵠ] = Fr(Td(Al * 1, Xj, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[Ur.ⵠΔⵠⲆΔ][Ur.ΔΔⵠ] = Fr(Td(Al * 1, dn, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Ur.ᐃΔⵠⵠⲆ] = [];
    ΔΔ[Ur.ᐃΔⵠⵠⲆ][Ur.ᐃΔⵠ] = Fr(Td(aa * 1, Kh, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[Ur.ᐃΔⵠⵠⲆ][Ur.ΔΔⵠ] = Fr(Td(_b * 1, dn, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[Ur.ⵠᐃᐃⲆΔ] = [];
    ΔΔ[Ur.ⵠᐃᐃⲆΔ][Ur.ᐃΔⵠ] = Fr(pd(jq * 1, Fs, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[Ur.ⵠᐃᐃⲆΔ][Ur.ΔΔⵠ] = Fr(pd($l * 1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[Ur.ΔⵠⲆᐃⲆ] = [];
    ΔΔ[Ur.ΔⵠⲆᐃⲆ][Ur.ᐃΔⵠ] = Fr(_d(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[Ur.ΔⵠⲆᐃⲆ][Ur.ΔΔⵠ] = Fr(_d(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Ur.ᐃⲆᐃⵠⲆ] = [];
    ΔΔ[Ur.ᐃⲆᐃⵠⲆ][Ur.ᐃΔⵠ] = Fr(ic(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[Ur.ᐃⲆᐃⵠⲆ][Ur.ΔΔⵠ] = Fr(ic(0.8, zo, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[Ur.ⵠΔΔᐃⲆ] = [];
    ΔΔ[Ur.ⵠΔΔᐃⲆ][Ur.ᐃΔⵠ] = Fr(tc(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Ur.ⵠΔΔᐃⲆ][Ur.ΔΔⵠ] = Fr(tc(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Ur.ⵠΔᐃᐃΔ] = [];
    ΔΔ[Ur.ⵠΔᐃᐃΔ][Ur.ᐃΔⵠ] = Fr(ac(0.8, zo, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[Ur.ⵠΔᐃᐃΔ][Ur.ΔΔⵠ] = Fr(ac(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[Ur.ⵠᐃⲆΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃⲆΔⵠ][Ur.ᐃΔⵠ] = Fr(ac(0.8, wq, ["#0d1b1c", "#6a7570", "#939393", p[M], "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[Ur.ⵠᐃⲆΔⵠ][Ur.ΔΔⵠ] = Fr(ac(0.8, Ir, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Ur.ⲆⵠⵠⲆΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆⵠⵠⲆΔᐃⲆ][Ur.ᐃΔⵠ] = Fr(kd(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ΔΔ[Ur.ⲆⵠⵠⲆΔᐃⲆ][Ur.ΔΔⵠ] = Fr(kd(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Ur.ⲆΔⲆᐃΔᐃⵠ] = [];
    ΔΔ[Ur.ⲆΔⲆᐃΔᐃⵠ][Ur.ᐃΔⵠ] = Fr(kd(1, kl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Ur.ⲆΔⲆᐃΔᐃⵠ][Ur.ΔΔⵠ] = Fr(kd(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ΔΔ[Ur.ᐃⵠᐃΔᐃᐃⲆ] = [];
    ΔΔ[Ur.ᐃⵠᐃΔᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(Ad(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ΔΔ[Ur.ᐃⵠᐃΔᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(Ad(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ΔΔ[Ur.ΔⲆⲆΔⲆⲆᐃ] = [];
    ΔΔ[Ur.ΔⲆⲆΔⲆⲆᐃ][Ur.ᐃΔⵠ] = Fr(Ad(Fh * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Ur.ΔⲆⲆΔⲆⲆᐃ][Ur.ΔΔⵠ] = Fr(Ad(Ue * 1, na, [p[fg], "#032428", p[Th], "#07393d", "#032428", p[It]]));
    ΔΔ[Ur.ⵠⲆᐃⲆΔⵠⵠ] = [];
    ΔΔ[Ur.ⵠⲆᐃⲆΔⵠⵠ][Ur.ᐃΔⵠ] = Fr(Ad(1.5, Xj, ["#0d1b1c", p[xd], "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[Ur.ⵠⲆᐃⲆΔⵠⵠ][Ur.ΔΔⵠ] = Fr(Ad(1.5, ra, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Ur.ᐃᐃᐃⵠⲆⲆⵠ] = [];
    ΔΔ[Ur.ᐃᐃᐃⵠⲆⲆⵠ][Ur.ᐃΔⵠ] = Fr(Ad(1, Sk, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Ur.ᐃᐃᐃⵠⲆⲆⵠ][Ur.ΔΔⵠ] = Fr(Ad(1, Ps, ["#032428", "#032428", p[or], "#07393d", "#032428", p[or]]));
    ΔΔ[Ur.ⲆⲆΔⵠⲆᐃΔ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠⲆᐃΔ][Ur.ᐃΔⵠ] = Fr(zd(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ΔΔ[Ur.ⲆⲆΔⵠⲆᐃΔ][Ur.ΔΔⵠ] = Fr(zd(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ΔΔ[Ur.ⲆᐃᐃᐃΔᐃᐃ] = [];
    ΔΔ[Ur.ⲆᐃᐃᐃΔᐃᐃ][Ur.ᐃΔⵠ] = Fr(zd(j * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Ur.ⲆᐃᐃᐃΔᐃᐃ][Ur.ΔΔⵠ] = Fr(zd(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", p[or]]));
    ΔΔ[Ur.ⲆᐃᐃⵠⵠⲆⲆ] = [];
    ΔΔ[Ur.ⲆᐃᐃⵠⵠⲆⲆ][Ur.ᐃΔⵠ] = Fr(yd(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Ur.ⲆᐃᐃⵠⵠⲆⲆ][Ur.ΔΔⵠ] = Fr(yd(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Ur.ΔᐃⵠⲆΔΔΔ] = [];
    ΔΔ[Ur.ΔᐃⵠⲆΔΔΔ][Ur.ᐃΔⵠ] = Fr(yd(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Ur.ΔᐃⵠⲆΔΔΔ][Ur.ΔΔⵠ] = Fr(yd(1, false, [p[ih], p[no], "#07393d", p[pa], "#032428", p[jg]]));
    ΔΔ[Ur.ΔⲆᐃᐃⲆ] = [];
    ΔΔ[Ur.ΔⲆᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(Fd(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ΔΔ[Ur.ΔⲆᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(Fd(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ΔΔ[Ur.ⲆᐃᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆᐃᐃΔⵠ][Ur.ᐃΔⵠ] = Fr(Hc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ΔΔ[Ur.ⲆᐃᐃΔⵠ][Ur.ΔΔⵠ] = Fr(Hc(0.5, [p[ae], "#266161", "#2b6664", "#123335", "#1f5453"]));
    ΔΔ[Ur.ⲆⲆΔⲆⵠ] = [];
    ΔΔ[Ur.ⲆⲆΔⲆⵠ][Ur.ᐃΔⵠ] = Fr(jb(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ΔΔ[Ur.ⲆⲆΔⲆⵠ][Ur.ΔΔⵠ] = Fr(jb(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ΔΔ[Ur.ⵠᐃᐃⵠⲆ] = [];
    ΔΔ[Ur.ⵠᐃᐃⵠⲆ][Ur.ᐃΔⵠ] = Fr(gb(Math.PI, Nb(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ΔΔ[Ur.ⵠᐃᐃⵠⲆ][Ur.ΔΔⵠ] = Fr(gb(Math.PI, Nb(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ΔΔ[Ur.ΔᐃⵠⲆΔⲆⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      eb(d, undefined, b[Fj], hn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      eb(d, $r, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      eb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      eb(d, Gk, b[ur], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      eb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      eb(d, undefined, b[Tg], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      eb(d, jn, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      eb(d, Hj, b[Gr], Yi);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      eb(d, $r, b[0], Ph);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      eb(d, undefined, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ΔΔ[Ur.ᐃΔΔᐃᐃ] = [];
    ΔΔ[Ur.ᐃΔΔᐃᐃ][Ur.ᐃΔⵠ] = Fr(qb(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ΔΔ[Ur.ᐃΔΔᐃᐃ][Ur.ΔΔⵠ] = Fr(qb(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ΔΔ[Ur.ⵠⲆⲆⵠᐃ] = [];
    ΔΔ[Ur.ⵠⲆⲆⵠᐃ][Ur.ᐃΔⵠ] = Fr(Qd(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ΔΔ[Ur.ⵠⲆⲆⵠᐃ][Ur.ΔΔⵠ] = Fr(Qd(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ΔΔ[Ur.ⲆᐃΔΔΔ] = [];
    ΔΔ[Ur.ⲆᐃΔΔΔ][Ur.ᐃΔⵠ] = Fr(wd(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ΔΔ[Ur.ⲆᐃΔΔΔ][Ur.ΔΔⵠ] = Fr(wd(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ΔΔ[Ur.Δⵠᐃᐃᐃ] = [];
    ΔΔ[Ur.Δⵠᐃᐃᐃ][Ur.ᐃΔⵠ] = Fr(Ed(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ΔΔ[Ur.Δⵠᐃᐃᐃ][Ur.ΔΔⵠ] = Fr(Ed(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ΔΔ[Ur.ⲆⵠΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆⵠΔᐃⲆ][Ur.ᐃΔⵠ] = Fr(ku(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ΔΔ[Ur.ⲆⵠΔᐃⲆ][Ur.ΔΔⵠ] = Fr(ku(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ΔΔ[Ur.ΔᐃⵠᐃⲆ] = [];
    ΔΔ[Ur.ΔᐃⵠᐃⲆ][Ur.ᐃΔⵠ] = Fr(pu(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ΔΔ[Ur.ΔᐃⵠᐃⲆ][Ur.ΔΔⵠ] = Fr(pu(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ΔΔ[Ur.ⲆᐃᐃΔᐃᐃⲆ] = [];
    ΔΔ[Ur.ⲆᐃᐃΔᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(Pc(0.42, ra, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ΔΔ[Ur.ⲆᐃᐃΔᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(Pc(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ΔΔ[Ur.ΔᐃⵠⲆⵠᐃⵠ] = [];
    ΔΔ[Ur.ΔᐃⵠⲆⵠᐃⵠ][Ur.ᐃΔⵠ] = Fr(wc(0.9, ["#e4c027"]));
    ΔΔ[Ur.ΔᐃⵠⲆⵠᐃⵠ][Ur.ΔΔⵠ] = Fr(wc(0.9, ["#D8E57F"]));
    ΔΔ[Ur.ⲆⵠΔⲆⵠΔⲆ] = [];
    ΔΔ[Ur.ⲆⵠΔⲆⵠΔⲆ][Ur.ᐃΔⵠ] = Fr(Cc(0.42, A, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ΔΔ[Ur.ⲆⵠΔⲆⵠΔⲆ][Ur.ΔΔⵠ] = Fr(Cc(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ΔΔ[Ur.ⵠⲆⵠⵠⵠⲆⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      tb(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      eb(d, b[rl], b[j], ch * a);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      tb(d, a * -57.5, a * 50.5, a * Mk, a * 105, Ye * a);
      d.restore();
      eb(d, b[6], b[Gs], a * ea);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * Yl, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      eb(d, b[sh], b[2], Fl * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(tq * a, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      eb(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      eb(d, b[2], b[2], a * Va);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * ka, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      eb(d, b[mt], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      tb(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      eb(d, b[Cg]);
      d.save();
      d.translate(a * 72, a * 175.5);
      tb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      eb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      tb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      eb(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      eb(d, b[zk], b[2], a * Ho);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      eb(d, b[Kj], b[3], a * 10);
      return c;
    }(Ej * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ΔΔ[Ur.ⲆⲆⵠᐃΔΔᐃ] = [];
    ΔΔ[Ur.ⲆⲆⵠᐃΔΔᐃ][Ur.ᐃΔⵠ] = Fr(md(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ΔΔ[Ur.ⲆⲆⵠᐃΔΔᐃ][Ur.ΔΔⵠ] = Fr(md(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ΔΔ[Ur.ΔᐃⵠⲆⲆⵠΔ] = [];
    ΔΔ[Ur.ΔᐃⵠⲆⲆⵠΔ][Ur.ᐃΔⵠ] = Fr(Pd(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", p[db]]));
    ΔΔ[Ur.ΔᐃⵠⲆⲆⵠΔ][Ur.ΔΔⵠ] = Fr(Pd(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ΔΔ[Ur.ᐃⵠΔΔΔⲆⵠ] = Fr(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      tb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      eb(e, c[_a], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ΔΔ[Ur.ⵠᐃΔⵠⵠⵠⵠ] = $t(1, [{
      f: eu,
      x: _a,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], Oj);
    ΔΔ[Ur.ᐃⲆΔᐃⲆ] = [];
    ΔΔ[Ur.ᐃⲆΔᐃⲆ][Ur.ᐃΔⵠ] = Fr(Nd(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[Ur.ᐃⲆΔᐃⲆ][Ur.ΔΔⵠ] = Fr(Nd(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[Ur.ⲆⵠᐃⵠΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆⵠᐃⵠΔᐃⲆ][Ur.ᐃΔⵠ] = Fr(Wd(zs * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[Ur.ⲆⵠᐃⵠΔᐃⲆ][Ur.ΔΔⵠ] = Fr(Wd(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[Ur.ΔΔⵠᐃⵠ] = [];
    ΔΔ[Ur.ΔΔⵠᐃⵠ][Ur.ᐃΔⵠ] = Fr(gb(3, Id(0.7, Yq, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ΔΔ[Ur.ΔΔⵠᐃⵠ][Ur.ΔΔⵠ] = Fr(gb(3, Id(0.7, Ir, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ΔΔ[Ur.ⵠⲆΔΔᐃ] = [];
    ΔΔ[Ur.ⵠⲆΔΔᐃ][Ur.ᐃΔⵠ] = Fr(gb(3, Md(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ΔΔ[Ur.ⵠⲆΔΔᐃ][Ur.ΔΔⵠ] = Fr(gb(3, Md(0.7, U, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ΔΔ[Ur.ΔΔⵠⵠⵠ] = [];
    ΔΔ[Ur.ΔΔⵠⵠⵠ][Ur.ᐃΔⵠ] = Fr(gb(Wb, Od(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ΔΔ[Ur.ΔΔⵠⵠⵠ][Ur.ΔΔⵠ] = Fr(gb(3, Od(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ΔΔ[Ur.ΔⵠΔΔΔ] = [];
    ΔΔ[Ur.ΔⵠΔΔΔ][Ur.ᐃΔⵠ] = Fr(gb(3, Rd(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ΔΔ[Ur.ΔⵠΔΔΔ][Ur.ΔΔⵠ] = Fr(gb(ol, Rd(0.67, Kh, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ΔΔ[Ur.ΔΔᐃᐃⲆ] = [];
    ΔΔ[Ur.ΔΔᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(gb(Sg, Bd(0.67, Kh, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ΔΔ[Ur.ΔΔᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(gb(dt, Bd(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ΔΔ[Ur.ΔΔᐃΔᐃ] = [];
    ΔΔ[Ur.ΔΔᐃΔᐃ][Ur.ᐃΔⵠ] = Fr(gb(Kj, Dd(0.67, dn, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ΔΔ[Ur.ΔΔᐃΔᐃ][Ur.ΔΔⵠ] = Fr(gb(3, Dd(0.67, Kh, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ΔΔ[Ur.ⵠᐃΔⲆⵠ] = [];
    ΔΔ[Ur.ⵠᐃΔⲆⵠ][Ur.ᐃΔⵠ] = Fr(gb(3, Gd(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ΔΔ[Ur.ⵠᐃΔⲆⵠ][Ur.ΔΔⵠ] = Fr(gb(mt, Gd(Eo * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ΔΔ[Ur.ᐃⲆΔΔⵠ] = [];
    ΔΔ[Ur.ᐃⲆΔΔⵠ][Ur.ᐃΔⵠ] = Fr(gb(ol, Hd(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[Ur.ᐃⲆΔΔⵠ][Ur.ΔΔⵠ] = Fr(gb(xs, Hd(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ΔΔ[Ur.ⲆΔⲆᐃⵠ] = [];
    ΔΔ[Ur.ⲆΔⲆᐃⵠ][Ur.ᐃΔⵠ] = Fr(gb(Qt, pm(0.5, en, ["#0d1b1c", "#939393", "#5f6061"])));
    ΔΔ[Ur.ⲆΔⲆᐃⵠ][Ur.ΔΔⵠ] = Fr(gb(Qt, pm(0.5, U, ["#030d14", "#485e66", "#1f343f"])));
    ΔΔ[Ur.ⵠⵠⲆⲆΔ] = [];
    ΔΔ[Ur.ⵠⵠⲆⲆΔ][Ur.ᐃΔⵠ] = Fr(gb(3, xm(Ue * 1, A, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ΔΔ[Ur.ⵠⵠⲆⲆΔ][Ur.ΔΔⵠ] = Fr(gb(3, xm(aa * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ΔΔ[Ur.ΔⵠΔⲆⵠ] = [];
    ΔΔ[Ur.ΔⵠΔⲆⵠ][Ur.ᐃΔⵠ] = Fr(gb(Wb, Hd(1, true, ["#0d1b1c", p[De], "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[Ur.ΔⵠΔⲆⵠ][Ur.ΔΔⵠ] = Fr(gb(co, Hd(1, true, ["#0d1b1c", "#0d2e33", p[hh], "#43aa82", "#29997c"])));
    ΔΔ[Ur.ⵠⵠᐃⲆⲆ] = [];
    ΔΔ[Ur.ⵠⵠᐃⲆⲆ][Ur.ᐃΔⵠ] = Fr(gb(Jh, Hd(aa * 1, dn, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[Ur.ⵠⵠᐃⲆⲆ][Ur.ΔΔⵠ] = Fr(gb(dt, Hd(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[Ur.Δᐃⵠᐃⵠ] = [];
    ΔΔ[Ur.Δᐃⵠᐃⵠ][Ur.ᐃΔⵠ] = Fr(gb(mt, Hd(1, nr, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[Ur.Δᐃⵠᐃⵠ][Ur.ΔΔⵠ] = Fr(gb(Qt, Hd(Oj * 1, ra, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[Ur.ⵠᐃⵠΔΔ] = [];
    ΔΔ[Ur.ⵠᐃⵠΔΔ][Ur.ᐃΔⵠ] = Fr(zc(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ΔΔ[Ur.ⵠᐃⵠΔΔ][Ur.ΔΔⵠ] = Fr(zc(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ] = [];
    ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ].push(Fr(zc(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ].push(Fr(zc(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ].push(Fr(zc(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ΔΔ[Ur.ⵠⲆΔⲆⵠᐃΔ] = [];
    ΔΔ[Ur.ⵠⲆΔⲆⵠᐃΔ].push(ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ][0]);
    ΔΔ[Ur.ⵠⲆΔⲆⵠᐃΔ].push(ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ][0]);
    ΔΔ[Ur.ⵠⲆΔⲆⵠᐃΔ].push(ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ][tj]);
    ΔΔ[Ur.ᐃⲆΔⲆᐃ] = [];
    ΔΔ[Ur.ᐃⲆΔⲆᐃ][Ur.ᐃΔⵠ] = Fr(Ac(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ΔΔ[Ur.ᐃⲆΔⲆᐃ][Ur.ΔΔⵠ] = Fr(Ac(0.06, na, ["#030d14", "#2b6664", "#133d3c"]));
    ΔΔ[Ur.ᐃᐃⵠⲆⵠⲆⲆ] = [];
    ΔΔ[Ur.ᐃᐃⵠⲆⵠⲆⲆ].push(Fr(Ac(0.08, kl, ["#141414", "#c4a23a", "#816511"])));
    ΔΔ[Ur.ᐃᐃⵠⲆⵠⲆⲆ].push(Fr(Ac(0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
    ΔΔ[Ur.ᐃᐃⵠⲆⵠⲆⲆ].push(Fr(Ac(0.08, false, ["#141414", "#b0902e", "#634d09"])));
    ΔΔ[Ur.ΔᐃΔΔΔ] = $t(1.5, [{
      f: am,
      x: 0,
      y: 0,
      a: Ag,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[Ur.ᐃΔΔᐃⵠⲆⲆ] = [];
    ΔΔ[Ur.ᐃΔΔᐃⵠⲆⲆ][Ur.ᐃΔⵠ] = Fr(zm(0.8, 0, ["#347f93", "#54a4ba"]));
    ΔΔ[Ur.ᐃΔΔᐃⵠⲆⲆ][Ur.ΔΔⵠ] = Fr(zm(0.8, 0, ["#98ede3", "#94f2e7"]));
    ΔΔ[Ur.ⵠᐃᐃᐃⲆᐃᐃ] = [];
    ΔΔ[Ur.ⵠᐃᐃᐃⲆᐃᐃ][Ur.ᐃΔⵠ] = Fr(Oc(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ΔΔ[Ur.ⵠᐃᐃᐃⲆᐃᐃ][Ur.ΔΔⵠ] = Fr(Oc(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ΔΔ[Ur.ΔᐃΔⲆⵠΔΔ] = [];
    ΔΔ[Ur.ΔᐃΔⲆⵠΔΔ][Ur.ᐃΔⵠ] = Fr(sm(0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ΔΔ[Ur.ΔᐃΔⲆⵠΔΔ][Ur.ΔΔⵠ] = Fr(sm(0.8, 0, ["#83ddd4", "#485e66"]));
    ΔΔ[Ur.ⵠΔᐃΔᐃ] = [];
    ΔΔ[Ur.ⵠΔᐃΔᐃ][Ur.ᐃΔⵠ] = Fr(jc(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ΔΔ[Ur.ⵠΔᐃΔᐃ][Ur.ΔΔⵠ] = Fr(jc(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ΔΔ[Ur.ᐃⲆⲆᐃⵠᐃⲆ] = [];
    ΔΔ[Ur.ᐃⲆⲆᐃⵠᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⲆⲆⲆᐃΔ;
    ΔΔ[Ur.ᐃⲆⲆᐃⵠᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠΔΔᐃⲆⵠ;
    ΔΔ[Ur.ⲆᐃᐃᐃⲆᐃΔ] = [];
    ΔΔ[Ur.ⲆᐃᐃᐃⲆᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠΔΔᐃⲆⲆ;
    ΔΔ[Ur.ⲆᐃᐃᐃⲆᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔⵠᐃⲆΔᐃ;
    ΔΔ[Ur.ⲆᐃⲆΔΔⲆⵠ] = [];
    ΔΔ[Ur.ⲆᐃⲆΔΔⲆⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔᐃⵠᐃⲆⵠΔ;
    ΔΔ[Ur.ⲆᐃⲆΔΔⲆⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆΔᐃΔⲆⲆ;
    ΔΔ[Ur.ⲆⲆᐃᐃΔ] = [];
    ΔΔ[Ur.ⲆⲆᐃᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠⵠΔⲆⵠⲆ;
    ΔΔ[Ur.ⲆⲆᐃᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⵠᐃⲆⲆⲆⵠ;
    ΔΔ[Ur.ΔΔΔᐃⲆΔᐃ] = [];
    ΔΔ[Ur.ΔΔΔᐃⲆΔᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔΔᐃᐃᐃᐃᐃ;
    ΔΔ[Ur.ΔΔΔᐃⲆΔᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆᐃⵠΔⲆⲆ;
    ΔΔ[Ur.ᐃⲆⲆⵠⲆ] = [];
    ΔΔ[Ur.ᐃⲆⲆⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃΔⲆⵠⵠⲆⵠ;
    ΔΔ[Ur.ᐃⲆⲆⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⲆⵠᐃΔⵠⲆᐃ;
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔⲆ] = [];
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⲆΔᐃⵠᐃⲆ;
    ΔΔ[Ur.ΔᐃⵠⵠᐃΔⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔᐃΔⲆⵠⵠⲆ;
    ΔΔ[Ur.ⵠⵠⲆᐃΔ] = [];
    ΔΔ[Ur.ⵠⵠⲆᐃΔ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆΔᐃⲆᐃⲆⵠ;
    ΔΔ[Ur.ⵠⵠⲆᐃΔ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠⵠⲆΔᐃⵠ;
    ΔΔ[Ur.ⲆΔΔᐃⵠᐃⲆ] = [];
    ΔΔ[Ur.ⲆΔΔᐃⵠᐃⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃⵠⵠᐃⵠⲆ;
    ΔΔ[Ur.ⲆΔΔᐃⵠᐃⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⲆΔⵠⵠⵠᐃ;
    ΔΔ[Ur.ΔⲆⵠᐃⵠ] = [];
    ΔΔ[Ur.ΔⲆⵠᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⲆⵠⲆⲆΔ;
    ΔΔ[Ur.ΔⲆⵠᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃⵠⲆᐃⲆⵠᐃ;
    ΔΔ[Ur.ΔΔⵠΔⲆᐃᐃ] = [];
    ΔΔ[Ur.ΔΔⵠΔⲆᐃᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃⲆΔⲆΔΔ;
    ΔΔ[Ur.ΔΔⵠΔⲆᐃᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔΔᐃⵠᐃⵠⲆ;
    ΔΔ[Ur.ⲆᐃⵠⵠⲆ] = [];
    ΔΔ[Ur.ⲆᐃⵠⵠⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⲆⲆⲆΔⲆⲆ;
    ΔΔ[Ur.ⲆᐃⵠⵠⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⲆⵠⵠΔᐃⲆ;
    ΔΔ[Ur.ᐃᐃᐃⲆΔⲆⲆ] = [];
    ΔΔ[Ur.ᐃᐃᐃⲆΔⲆⲆ][Ur.ᐃΔⵠ] = ⵠᐃ.ᐃᐃⵠᐃⵠΔⲆ;
    ΔΔ[Ur.ᐃᐃᐃⲆΔⲆⲆ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠΔᐃⲆΔⲆⵠ;
    ΔΔ[Ur.ᐃΔΔᐃⵠ] = [];
    ΔΔ[Ur.ᐃΔΔᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ΔⵠⲆⲆᐃⵠΔ;
    ΔΔ[Ur.ᐃΔΔᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ᐃᐃᐃⵠⲆⲆᐃ;
    ΔΔ[Ur.Ⲇᐃⵠᐃⵠ] = [];
    ΔΔ[Ur.Ⲇᐃⵠᐃⵠ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆⵠⲆⲆⲆᐃᐃ;
    ΔΔ[Ur.Ⲇᐃⵠᐃⵠ][Ur.ΔΔⵠ] = ⵠᐃ.ⵠⲆⲆᐃⵠⲆΔ;
    ΔΔ[Ur.ⵠⵠⲆⵠⲆⲆᐃ] = ⵠᐃ.ⵠⵠⲆⵠⲆⲆᐃ;
    ΔΔ[Ur.ΔⵠᐃⵠΔ] = [];
    ΔΔ[Ur.ΔⵠᐃⵠΔ][Ur.ᐃΔⵠ] = Fr(Mc(0.75, Mh, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ΔΔ[Ur.ΔⵠᐃⵠΔ][Ur.ΔΔⵠ] = Fr(Mc(0.75, dn, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ΔΔ[Ur.ΔᐃⲆΔΔⵠⲆ] = Fr(Pm(0.3, ["#092813", "#1f773d"], Qs));
    ΔΔ[Ur.ᐃⲆⲆΔΔⵠΔ] = Fr(Pm(0.3, ["#092813", "#1f773d"], 1));
    ΔΔ[Ur.Ⲇᐃⵠⵠⵠⵠᐃ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(Gr, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      eb(d, b[0]);
      d.translate(Gr, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      eb(d, b[Ok]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ] = [];
    ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ].push(Fr(rm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], Fj)));
    ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ].push(Fr(rm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], uh)));
    ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ].push(Fr(rm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ΔΔ[Ur.ᐃΔΔⵠⲆΔᐃ] = [];
    var b = Fr(rm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], ms));
    ΔΔ[Ur.ᐃΔΔⵠⲆΔᐃ].push(b);
    ΔΔ[Ur.ᐃΔΔⵠⲆΔᐃ].push(b);
    ΔΔ[Ur.ᐃΔΔⵠⲆΔᐃ].push(b);
    ΔΔ[Ur.ⲆⲆⵠΔᐃⵠⲆ] = [];
    ΔΔ[Ur.ⲆⲆⵠΔᐃⵠⲆ].push(Fr(rm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], zs)));
    ΔΔ[Ur.ⲆⲆⵠΔᐃⵠⲆ].push(Fr(rm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], Eo)));
    ΔΔ[Ur.ⲆⲆⵠΔᐃⵠⲆ].push(Fr(rm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ΔΔ[Ur.ⲆᐃΔΔⵠⲆΔ] = Fr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var i = f / 2;
      var a = g / ld;
      d.width = f;
      d.height = g;
      e.translate(i, a);
      e.save();
      for (var j = Fj; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        hb(e, 3, b * 18, b * 4);
        eb(e, c[ur]);
        e.restore();
      }
      e.restore();
      ob(e, _a, 0, b * 40);
      eb(e, undefined, c[ur], b * Zh);
      ob(e, 0, 0, b * pg);
      eb(e, c[_a]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[Ur.ᐃᐃΔⲆΔⵠⲆ] = Fr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var h = f / re;
      var a = g / 2;
      d.width = f;
      d.height = g;
      ob(e, h, a, b * 40);
      eb(e, sb, c[0], b * 7);
      ob(e, h, a, b * 30);
      eb(e, undefined, c[Tg], b * 7);
      ob(e, h, a, b * pg);
      eb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[Ur.ⵠᐃⲆΔⵠⵠⵠ] = Fr(Pm(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ΔΔ[Ur.ᐃⵠᐃΔⵠⵠΔ] = Fr(gb(Math.PI / jt, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      tb(d, a * -21.5, a * -34, a * 43, a * 68, a * ys);
      d.restore();
      eb(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      eb(d, b[Cq], b[_a], a * qu);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      eb(d, b[0], b[0], a * oj);
      return c;
    }(0.2, ["#FFFFFF"])));
    ΔΔ[Ur.ⵠΔⵠⲆᐃ] = [];
    ΔΔ[Ur.ⵠΔⵠⲆᐃ][Ur.ᐃΔⵠ] = Fr(ym(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ΔΔ[Ur.ⵠΔⵠⲆᐃ][Ur.ΔΔⵠ] = Fr(ym(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ΔΔ[Ur.ᐃᐃⲆΔΔΔᐃ] = [];
    ΔΔ[Ur.ᐃᐃⲆΔΔΔᐃ].push(Fr(rm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], ie)));
    ΔΔ[Ur.ᐃᐃⲆΔΔΔᐃ].push(Fr(rm(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ΔΔ[Ur.ᐃᐃⲆΔΔΔᐃ].push(Fr(rm(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ΔΔ[Ur.ᐃⲆᐃΔⲆ] = [];
    ΔΔ[Ur.ᐃⲆᐃΔⲆ][Ur.ᐃΔⵠ] = Fr(yc(0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ΔΔ[Ur.ᐃⲆᐃΔⲆ][Ur.ΔΔⵠ] = Fr(yc(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ΔΔ[Ur.ᐃΔΔⵠⲆ] = [];
    ΔΔ[Ur.ᐃΔΔⵠⲆ][Ur.ᐃΔⵠ] = Fr(mc(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ΔΔ[Ur.ᐃΔΔⵠⲆ][Ur.ΔΔⵠ] = Fr(mc(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ΔΔ[Ur.ⵠⲆᐃⵠΔ] = [];
    ΔΔ[Ur.ⵠⲆᐃⵠΔ][Ur.ᐃΔⵠ] = Fr(bc(0.55, U, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ΔΔ[Ur.ⵠⲆᐃⵠΔ][Ur.ΔΔⵠ] = Fr(bc(0.55, dn, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ΔΔ[Ur.ⵠΔᐃᐃⲆ] = [];
    ΔΔ[Ur.ⵠΔᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(bc(0.55, zo, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ΔΔ[Ur.ⵠΔᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(bc(0.55, nr, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ΔΔ[Ur.ⲆⲆⵠΔⲆ] = [];
    ΔΔ[Ur.ⲆⲆⵠΔⲆ][Ur.ᐃΔⵠ] = Fr(lm(0.2, Yq, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ΔΔ[Ur.ⲆⲆⵠΔⲆ][Ur.ΔΔⵠ] = Fr(lm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ΔΔ[Ur.ⵠⲆⲆⵠΔ] = [];
    ΔΔ[Ur.ⵠⲆⲆⵠΔ][Ur.ᐃΔⵠ] = Fr(lm(0.2, zo, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ΔΔ[Ur.ⵠⲆⲆⵠΔ][Ur.ΔΔⵠ] = Fr(lm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ΔΔ[Ur.ⲆⲆⲆᐃᐃ] = [];
    ΔΔ[Ur.ⲆⲆⲆᐃᐃ][Ur.ᐃΔⵠ] = Fr(lm(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ΔΔ[Ur.ⲆⲆⲆᐃᐃ][Ur.ΔΔⵠ] = Fr(lm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ΔΔ[Ur.ΔᐃΔⲆᐃ] = [];
    ΔΔ[Ur.ΔᐃΔⲆᐃ][Ur.ᐃΔⵠ] = Fr(Sd(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ΔΔ[Ur.ΔᐃΔⲆᐃ][Ur.ΔΔⵠ] = Fr(Sd(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ΔΔ[Ur.ⲆⵠⲆⲆⲆ] = [];
    ΔΔ[Ur.ⲆⵠⲆⲆⲆ][Ur.ᐃΔⵠ] = Fr(Yd(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ΔΔ[Ur.ⲆⵠⲆⲆⲆ][Ur.ΔΔⵠ] = Fr(Yd(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ΔΔ[Ur.ⲆⲆΔᐃΔ] = [];
    ΔΔ[Ur.ⲆⲆΔᐃΔ][Ur.ᐃΔⵠ] = Fr(gb(3, Am(0.9, Kh, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ΔΔ[Ur.ⲆⲆΔᐃΔ][Ur.ΔΔⵠ] = Fr(gb(Z, Am(0.9, ra, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ΔΔ[Ur.ΔⵠⲆⵠⲆᐃᐃ] = [];
    ΔΔ[Ur.ΔⵠⲆⵠⲆᐃᐃ][Ur.ᐃΔⵠ] = Fr(gb(mt, Am(Ej * 1, true, [pl, ps, undefined, "#c8efef", "#c8efef"])));
    ΔΔ[Ur.ΔⵠⲆⵠⲆᐃᐃ][Ur.ΔΔⵠ] = Fr(gb(Jh, Am(1, true, [undefined, da, sb, "#87d2e6", "#87d2e6"])));
    ΔΔ[Ur.ΔⵠⲆΔⵠⵠⵠ] = [];
    ΔΔ[Ur.ΔⵠⲆΔⵠⵠⵠ].push(Fr(Dc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ΔΔ[Ur.ΔⵠⲆΔⵠⵠⵠ].push(Fr(Dc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], zs)));
    ΔΔ[Ur.ΔⵠⲆΔⵠⵠⵠ].push(Fr(Dc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], zs)));
    ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ] = [];
    ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ].push(Fr(im(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], tj)));
    ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ].push(Fr(im(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], Gs)));
    ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ].push(Fr(im(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[Ur.ⲆⲆΔⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠⵠⵠⲆ].push(Fr(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], ur, zs)));
    ΔΔ[Ur.ⲆⲆΔⵠⵠⵠⲆ].push(Fr(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ΔΔ[Ur.ⲆⲆΔⵠⵠⵠⲆ].push(Fr(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ] = [];
    ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ].push(Fr(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Cn, 0)));
    ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ].push(Fr(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Eo, tj)));
    ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ].push(Fr(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], _b, 0)));
    ΔΔ[Ur.ΔⵠΔΔⵠ] = [];
    ΔΔ[Ur.ΔⵠΔΔⵠ][Ur.ᐃΔⵠ] = Fr(gb(3, Tc(0.7, wq, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ΔΔ[Ur.ΔⵠΔΔⵠ][Ur.ΔΔⵠ] = Fr(gb(3, Tc(0.7, true, ["#0d1b1c", "#0d2e33", p[xq], "#485e66", "#1f343f", "#274352"])));
    ΔΔ[Ur.ⵠᐃΔΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃΔΔⵠ][Ur.ᐃΔⵠ] = Fr(gb(nn, Tc(0.7, en, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ΔΔ[Ur.ⵠᐃΔΔⵠ][Ur.ΔΔⵠ] = Fr(gb(3, Tc(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ΔΔ[Ur.ΔⲆΔᐃⵠ] = [];
    ΔΔ[Ur.ΔⲆΔᐃⵠ][Ur.ᐃΔⵠ] = Fr(gb(3, Tc(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ΔΔ[Ur.ΔⲆΔᐃⵠ][Ur.ΔΔⵠ] = Fr(gb(co, Tc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ΔΔ[Ur.ᐃⲆΔᐃᐃ] = [];
    ΔΔ[Ur.ᐃⲆΔᐃᐃ][Ur.ᐃΔⵠ] = Fr(gb(3, Tc(0.7, f, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ΔΔ[Ur.ᐃⲆΔᐃᐃ][Ur.ΔΔⵠ] = Fr(gb(3, Tc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ΔΔ[Ur.ⵠΔΔⵠΔⲆΔ] = [];
    ΔΔ[Ur.ⵠΔΔⵠΔⲆΔ].push(Fr(uc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ΔΔ[Ur.ⵠΔΔⵠΔⲆΔ].push(Fr(uc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ΔΔ[Ur.ⵠΔΔⵠΔⲆΔ].push(Fr(uc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ΔΔ[Ur.ⵠᐃᐃΔⵠⵠᐃ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      eb(d, b[qk], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      eb(d, b[0], b[qn], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      eb(d, b[0], b[0], vk * a);
      return c;
    }(1.1, ["#BB0000"]));
    ΔΔ[Ur.ᐃⵠΔΔΔⲆⲆ] = Fr(gb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      ob(d, a * 213.5, a * 256.75, a * 75);
      eb(d, b);
      ob(d, a * 213.5, a * 175.75, a * 25);
      eb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = _q * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = ja * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * ue;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = Ea * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = no * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * xk;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ΔΔ[Ur.ⲆΔΔⵠᐃ] = [];
    ΔΔ[Ur.ⲆΔΔⵠᐃ][Ur.ᐃΔⵠ] = Fr(kc(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ΔΔ[Ur.ⲆΔΔⵠᐃ][Ur.ΔΔⵠ] = Fr(kc(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ΔΔ[Ur.ΔⵠⵠⲆΔ] = [];
    ΔΔ[Ur.ΔⵠⵠⲆΔ][Ur.ᐃΔⵠ] = Fr(gm(0.55, true, [p[mk], "#73583e", "#573f29", "#7d6144"]));
    ΔΔ[Ur.ΔⵠⵠⲆΔ][Ur.ΔΔⵠ] = Fr(gm(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ΔΔ[Ur.ⵠⲆᐃⲆΔ] = [];
    ΔΔ[Ur.ⵠⲆᐃⲆΔ][Ur.ᐃΔⵠ] = Fr(Bc(0.6, true, [p[mh], "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", p[lq]]));
    ΔΔ[Ur.ⵠⲆᐃⲆΔ][Ur.ΔΔⵠ] = Fr(Bc(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ΔΔ[Ur.ᐃⲆΔⵠΔ] = [];
    ΔΔ[Ur.ᐃⲆΔⵠΔ][Ur.ᐃΔⵠ] = Fr(Sc(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ΔΔ[Ur.ᐃⲆΔⵠΔ][Ur.ΔΔⵠ] = Fr(Sc(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ΔΔ[Ur.ⵠⵠⲆⵠᐃ] = [];
    ΔΔ[Ur.ⵠⵠⲆⵠᐃ][Ur.ᐃΔⵠ] = Fr($c(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ΔΔ[Ur.ⵠⵠⲆⵠᐃ][Ur.ΔΔⵠ] = Fr($c(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ΔΔ[Ur.ᐃᐃΔⲆⲆ] = [];
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ᐃΔⵠ].push(Fr(ec(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ᐃΔⵠ].push(Fr(oc(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Kd(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ΔΔⵠ].push(Fr(ec(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ΔΔⵠ].push(Fr(oc(1.5, ["#000000", "#0e3638", p[Bt], "#328587", "#48a8aa", "#56afac"])));
    ΔΔ[Ur.ᐃᐃΔⲆⲆ][Ur.ΔΔⵠ].push(Fr(Kd(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ΔΔ[Ur.ⵠⵠᐃⵠⲆ] = [];
    ΔΔ[Ur.ⵠⵠᐃⵠⲆ][Ur.ᐃΔⵠ] = Fr(Gc(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ΔΔ[Ur.ⵠⵠᐃⵠⲆ][Ur.ΔΔⵠ] = Fr(Gc(jq * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ΔΔ[Ur.ⵠᐃᐃᐃΔⲆΔ] = [];
    ΔΔ[Ur.ⵠᐃᐃᐃΔⲆΔ][Ur.ᐃΔⵠ] = Fr(pc(j * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[Ur.ⵠᐃᐃᐃΔⲆΔ][Ur.ΔΔⵠ] = Fr(pc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[Ur.ⲆⵠⲆΔⵠΔⲆ] = [];
    ΔΔ[Ur.ⲆⵠⲆΔⵠΔⲆ][Ur.ᐃΔⵠ] = Fr(cm(Ag * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[Ur.ⲆⵠⲆΔⵠΔⲆ][Ur.ΔΔⵠ] = Fr(cm($l * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[Ur.ⲆⲆΔⵠⲆⵠⲆ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠⲆⵠⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠⲆⵠⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠⲆⵠⲆ][Ur.ᐃΔⵠ] = [ⵠᐃ.ⵠᐃⲆⲆⲆⵠΔ, ⵠᐃ.ΔΔΔⵠᐃⲆᐃ, ⵠᐃ.ΔΔⵠⲆᐃΔᐃ, ⵠᐃ.ⵠⵠⲆⵠΔⵠⵠ, ⵠᐃ.ⵠⵠᐃⲆⵠⵠᐃ, ⵠᐃ.ᐃᐃΔⲆᐃᐃⲆ, ⵠᐃ.ⲆΔᐃⵠᐃⵠⵠ, ⵠᐃ.ᐃⵠⵠΔⵠⲆΔ, ⵠᐃ.ⲆΔᐃⵠᐃᐃΔ, ⵠᐃ.ⵠⵠᐃⲆΔᐃⲆ, ⵠᐃ.ⲆᐃΔᐃᐃⵠΔ, ⵠᐃ.ⵠⵠᐃⵠΔᐃᐃ, ⵠᐃ.ΔᐃᐃⲆⲆⲆⵠ, ⵠᐃ.ⲆΔⲆᐃⲆΔⲆ, ⵠᐃ.ΔⲆⵠⲆᐃⲆⵠ, ⵠᐃ.ΔⲆⲆⵠΔᐃᐃ, ⵠᐃ.ⲆΔᐃᐃΔΔⲆ, ⵠᐃ.ⵠᐃΔΔⵠΔⲆ, ⵠᐃ.ΔⵠⲆⵠΔΔᐃ, ⵠᐃ.ⵠΔⲆΔᐃΔᐃ, ⵠᐃ.ΔⲆΔⲆΔΔⵠ, ⵠᐃ.ΔⲆΔᐃΔᐃⵠ, ⵠᐃ.ᐃⲆᐃⲆΔⲆⵠ, ⵠᐃ.ΔΔⲆⵠᐃᐃⲆ, ⵠᐃ.ΔⲆⵠⵠⲆⲆⵠ, ⵠᐃ.ᐃᐃⲆⲆᐃΔΔ, ⵠᐃ.ᐃⲆᐃⲆΔΔⲆ, ⵠᐃ.ⲆⲆⵠⵠⲆⵠⵠ, ⵠᐃ.ΔⲆΔΔᐃΔᐃ, ⵠᐃ.ΔⵠᐃⲆⲆΔⲆ, ⵠᐃ.ⵠΔΔΔⵠΔᐃ, ⵠᐃ.ⵠⲆᐃⵠᐃᐃⲆ, ⵠᐃ.ΔᐃⲆⵠᐃⵠᐃ, ⵠᐃ.ᐃⵠⵠΔⲆⲆΔ, ⵠᐃ.ⲆⲆⵠⵠⵠΔⵠ, ⵠᐃ.ⲆΔΔⵠⵠΔⲆ, ⵠᐃ.ⲆⲆᐃᐃⲆⵠⲆ, ⵠᐃ.ΔᐃΔΔⵠᐃΔ, ⵠᐃ.ⵠⵠⲆΔⲆᐃΔ, ⵠᐃ.ᐃⲆⲆⵠⵠⵠⵠ, ⵠᐃ.ΔⲆᐃⲆⲆᐃⵠ, ⵠᐃ.ΔⲆᐃᐃⲆΔⲆ, ⵠᐃ.ⵠᐃⵠⲆⵠΔΔ, ⵠᐃ.ⲆᐃⲆΔΔΔᐃ, ⵠᐃ.ᐃᐃⲆΔⵠⵠΔ, ⵠᐃ.ΔΔⵠΔⵠⲆᐃ, ⵠᐃ.ᐃⵠⵠΔⵠⵠⵠ, ⵠᐃ.ⲆΔΔΔⵠⲆⵠ, ⵠᐃ.ΔᐃΔᐃᐃᐃᐃ, ⵠᐃ.ⵠⲆⲆⲆΔⵠⵠ, ⵠᐃ.ⲆΔᐃⲆⲆΔⲆ, ⵠᐃ.ᐃᐃⲆⵠᐃᐃΔ, ⵠᐃ.ⵠⵠⵠⵠⵠᐃⲆ, ⵠᐃ.ΔⲆᐃⵠⲆΔᐃ, ⵠᐃ.ΔⵠⵠΔΔΔⵠ, ⵠᐃ.ᐃⵠᐃΔΔΔⵠ];
    ΔΔ[Ur.ⲆⲆΔⵠⲆⵠⲆ][Ur.ΔΔⵠ] = [ⵠᐃ.ΔᐃᐃΔᐃⲆΔ, ⵠᐃ.ⵠⲆⵠⲆⵠᐃⵠ, ⵠᐃ.ⵠΔᐃⵠΔⲆᐃ, ⵠᐃ.ΔΔⲆΔⵠΔΔ, ⵠᐃ.ⲆΔΔⲆⵠᐃΔ, ⵠᐃ.ⲆⵠⵠⵠⲆᐃⲆ, ⵠᐃ.ⵠΔΔᐃⵠⲆΔ, ⵠᐃ.ΔⲆᐃⲆᐃⲆⲆ, ⵠᐃ.ⵠᐃⵠⲆΔⵠⲆ, ⵠᐃ.ΔⵠⵠⲆⵠᐃⲆ, ⵠᐃ.ⲆΔⲆⵠΔⲆᐃ, ⵠᐃ.ⵠⵠᐃΔⵠᐃΔ, ⵠᐃ.ⲆΔᐃⵠΔΔⵠ, ⵠᐃ.ΔⵠⵠᐃⲆⵠᐃ, ⵠᐃ.ΔᐃⵠⲆΔⲆΔ, ⵠᐃ.ⵠⲆᐃᐃᐃⲆⵠ, ⵠᐃ.ᐃΔΔⵠᐃⵠΔ, ⵠᐃ.ⲆⲆΔΔⲆΔᐃ, ⵠᐃ.ᐃΔⵠᐃⵠⵠᐃ, ⵠᐃ.ⵠΔᐃⲆⵠⵠΔ, ⵠᐃ.ⲆⲆⵠΔⵠⵠⲆ, ⵠᐃ.ΔⲆⵠⲆⲆⵠΔ, ⵠᐃ.ΔⲆⲆⲆᐃΔⵠ, ⵠᐃ.ⵠⵠΔⵠᐃᐃΔ, ⵠᐃ.ᐃᐃΔⲆⲆⵠⲆ, ⵠᐃ.ᐃΔΔᐃⲆⲆⵠ, ⵠᐃ.ᐃⵠⲆᐃᐃⵠΔ, ⵠᐃ.ⲆᐃΔΔⲆᐃⲆ, ⵠᐃ.ᐃⵠᐃᐃⵠᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠⲆΔ, ⵠᐃ.ⵠᐃⲆⲆⵠΔⵠ, ⵠᐃ.ⲆΔⲆᐃⵠⵠⲆ, ⵠᐃ.ᐃΔⲆⵠΔⲆⲆ, ⵠᐃ.ᐃⲆᐃΔᐃᐃΔ, ⵠᐃ.ⲆΔᐃⵠⲆΔᐃ, ⵠᐃ.ΔⵠΔⵠⵠⲆⵠ, ⵠᐃ.ᐃⲆᐃⲆᐃⲆⲆ, ⵠᐃ.ΔᐃᐃⲆⵠⲆᐃ, ⵠᐃ.ᐃⵠΔⵠᐃΔᐃ, ⵠᐃ.ⵠᐃⵠⵠⵠᐃᐃ, ⵠᐃ.ⲆᐃᐃⵠⲆⵠΔ, ⵠᐃ.ⵠⲆⲆᐃᐃⲆΔ, ⵠᐃ.ⵠⲆᐃⵠᐃⵠᐃ, ⵠᐃ.ⵠⵠⲆⲆᐃᐃΔ, ⵠᐃ.ⲆⵠⵠΔⵠⵠΔ, ⵠᐃ.ΔΔΔᐃⲆⵠⵠ, ⵠᐃ.ⲆᐃΔΔΔⲆᐃ, ⵠᐃ.ⵠⲆΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⲆⵠⲆΔᐃΔ, ⵠᐃ.ⲆⲆⵠΔΔᐃⵠ, ⵠᐃ.ⵠⲆⲆⲆᐃΔⵠ, ⵠᐃ.ⲆᐃⵠⵠΔⲆΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃΔ, ⵠᐃ.ΔⵠⵠΔᐃᐃΔ, ⵠᐃ.ⵠⲆⵠᐃⵠᐃᐃ, ⵠᐃ.ⵠⵠⲆⵠⵠᐃΔ];
    ΔΔ[Ur.ᐃΔⵠⲆⲆ] = [];
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Tu(1.1, Sh, ["#252B28", "#747471", "#83827e"], qn)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Tu(0.9, ds, ["#252B28", "#747471", "#83827e"], Ag)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Tu(Al * 1, Y, ["#252B28", "#747471", "#83827e"], ql)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Tu(0.9, false, ["#252B28", "#747471", "#83827e"], Xr)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ΔΔⵠ].push(Fr(Tu(1.1, false, ["#030d14", "#123335", "#183f3f"], Rl)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ΔΔⵠ].push(Fr(Tu(0.9, yj, ["#030d14", "#123335", "#183f3f"], $l)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ΔΔⵠ].push(Fr(Tu(1, Sk, ["#030d14", "#123335", "#183f3f"], Pt)));
    ΔΔ[Ur.ᐃΔⵠⲆⲆ][Ur.ΔΔⵠ].push(Fr(Tu(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ] = [];
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Tu(1.1, Fs, ["#252B28", "#58645F", "#75827D"], Tt)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Tu(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Tu(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Tu(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ΔΔⵠ].push(Fr(Tu(1.1, en, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ΔΔⵠ].push(Fr(Tu(0.9, wq, ["#030d14", "#123335", "#183f3f"], Cl)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ΔΔⵠ].push(Fr(Tu($l * 1, nr, ["#030d14", "#123335", "#183f3f"], Zn)));
    ΔΔ[Ur.ⵠᐃΔⲆᐃ][Ur.ΔΔⵠ].push(Fr(Tu(0.9, Vr, ["#030d14", "#123335", "#183f3f"], 2)));
    ΔΔ[Ur.ΔⵠⲆΔⲆ] = [];
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ᐃΔⵠ].push(Fr(Pu(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ᐃΔⵠ].push(Fr(Pu(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ᐃΔⵠ].push(Fr(Pu(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ΔΔⵠ].push(Fr(Pu(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ΔΔⵠ].push(Fr(Pu(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Ur.ΔⵠⲆΔⲆ][Ur.ΔΔⵠ].push(Fr(Pu(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Ur.ΔⲆᐃΔᐃ] = [];
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ᐃΔⵠ].push(Fr(Qu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ᐃΔⵠ].push(Fr(Qu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ᐃΔⵠ].push(Fr(Qu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ΔΔⵠ].push(Fr(Qu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ΔΔⵠ].push(Fr(Qu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Ur.ΔⲆᐃΔᐃ][Ur.ΔΔⵠ].push(Fr(Qu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Ur.ΔⲆⲆⲆ] = [];
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ᐃΔⵠ].push(Fr(nc(1.7, nr, [p[vg], "#c27add", "#cd98e5"])));
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ᐃΔⵠ].push(Fr(nc(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ᐃΔⵠ].push(Fr(nc(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ΔΔⵠ].push(Fr(nc(1.7, true, [p[io], "#41aaa0", "#5cccc4"])));
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ΔΔⵠ].push(Fr(nc(1.5, Vr, [p[ks], "#41aaa0", "#5cccc4"])));
    ΔΔ[Ur.ΔⲆⲆⲆ][Ur.ΔΔⵠ].push(Fr(nc(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Ur.ⵠΔᐃᐃᐃᐃⵠ] = [];
    ΔΔ[Ur.ⵠΔᐃᐃᐃᐃⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔᐃᐃᐃᐃⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠΔᐃᐃᐃᐃⵠ][Ur.ᐃΔⵠ].push(Fr($d(1, ["#2d53c4"])));
    ΔΔ[Ur.ⵠΔᐃᐃᐃᐃⵠ][Ur.ΔΔⵠ].push(Fr($d(1, ["#2d53c4"])));
    ΔΔ[Ur.ΔⲆΔᐃΔⵠⵠ] = [];
    ΔΔ[Ur.ΔⲆΔᐃΔⵠⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔⲆΔᐃΔⵠⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔⲆΔᐃΔⵠⵠ][Ur.ᐃΔⵠ].push(Fr($d(1, ["#c4912d"])));
    ΔΔ[Ur.ΔⲆΔᐃΔⵠⵠ][Ur.ΔΔⵠ].push(Fr($d(1, ["#c4912d"])));
    ΔΔ[Ur.ΔⵠⵠⲆⲆΔᐃ] = [];
    ΔΔ[Ur.ΔⵠⵠⲆⲆΔᐃ][Ur.ᐃΔⵠ] = Fr(fc(1, ["#414040"]));
    ΔΔ[Ur.ΔⵠⵠⲆⲆΔᐃ][Ur.ΔΔⵠ] = Fr(fc(1, ["#153635"]));
    ΔΔ[Ur.ⵠΔΔⵠⲆΔᐃ] = [];
    ΔΔ[Ur.ⵠΔΔⵠⲆΔᐃ][Ur.ᐃΔⵠ] = Fr(kd(j * 1, Rn, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Ur.ⵠΔΔⵠⲆΔᐃ][Ur.ΔΔⵠ] = Fr(kd(1, d, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Ur.ΔΔΔᐃⵠΔᐃ] = [];
    ΔΔ[Ur.ΔΔΔᐃⵠΔᐃ][Ur.ᐃΔⵠ] = Fr(Ad($l * 1, vl, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Ur.ΔΔΔᐃⵠΔᐃ][Ur.ΔΔⵠ] = Fr(Ad(Al * 1, Rs, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Ur.ⵠⲆⵠᐃⲆᐃᐃ] = [];
    ΔΔ[Ur.ⵠⲆⵠᐃⲆᐃᐃ][Ur.ᐃΔⵠ] = Fr(Ad(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Ur.ⵠⲆⵠᐃⲆᐃᐃ][Ur.ΔΔⵠ] = Fr(Ad(1, vl, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Ur.ⲆⵠⲆⵠⵠⵠᐃ] = [];
    ΔΔ[Ur.ⲆⵠⲆⵠⵠⵠᐃ][Ur.ᐃΔⵠ] = Fr(yd(Ej * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Ur.ⲆⵠⲆⵠⵠⵠᐃ][Ur.ΔΔⵠ] = Fr(yd(ie * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Ur.ⵠⵠⲆⲆⲆⵠⲆ] = [];
    ΔΔ[Ur.ⵠⵠⲆⲆⲆⵠⲆ][Ur.ᐃΔⵠ] = Fr(zd(Al * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Ur.ⵠⵠⲆⲆⲆⵠⲆ][Ur.ΔΔⵠ] = Fr(zd(As * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Ur.ⵠⵠΔⲆᐃ] = [];
    ΔΔ[Ur.ⵠⵠΔⲆᐃ][Ur.ᐃΔⵠ] = Fr(bm(0.9, [p[Qh], "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ΔΔ[Ur.ⵠⵠΔⲆᐃ][Ur.ΔΔⵠ] = Fr(bm(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ΔΔ[Ur.ᐃⲆᐃⲆᐃ] = [];
    ΔΔ[Ur.ᐃⲆᐃⲆᐃ][Ur.ᐃΔⵠ] = Fr(vc(0.9, [p[yl], "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ΔΔ[Ur.ᐃⲆᐃⲆᐃ][Ur.ΔΔⵠ] = Fr(vc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ΔΔ[Ur.ᐃⲆᐃⲆⲆᐃⵠ] = [];
    ΔΔ[Ur.ΔᐃΔᐃⲆ] = [];
    ΔΔ[Ur.ⲆΔᐃΔᐃⵠᐃ] = [];
    ΔΔ[Ur.ΔⵠᐃⲆⵠ] = [];
    for (a = 0; a < Ss; a++) {
      ΔΔ[Ur.ᐃⲆᐃⲆⲆᐃⵠ][a] = document.createElement("canvas");
      ΔΔ[Ur.ᐃⲆᐃⲆⲆᐃⵠ][a].width = 193;
      ΔΔ[Ur.ᐃⲆᐃⲆⲆᐃⵠ][a].height = 193;
      ΔΔ[Ur.ΔᐃΔᐃⲆ][a] = ΔΔ[Ur.ᐃⲆᐃⲆⲆᐃⵠ][a].getContext("2d");
      ΔΔ[Ur.ⲆΔᐃΔᐃⵠᐃ][a] = document.createElement("canvas");
      ΔΔ[Ur.ⲆΔᐃΔᐃⵠᐃ][a].width = 600;
      ΔΔ[Ur.ⲆΔᐃΔᐃⵠᐃ][a].height = 600;
      ΔΔ[Ur.ΔⵠᐃⲆⵠ][a] = ΔΔ[Ur.ⲆΔᐃΔᐃⵠᐃ][a].getContext("2d");
    }
    ΔΔ[Ur.ⵠⲆΔⵠⲆᐃⵠ] = [];
    ΔΔ[Ur.ⵠⲆΔⵠⲆᐃⵠ][Ur.ᐃΔⵠ] = Fr(fc(1, ["#c8e0de"]));
    ΔΔ[Ur.ⵠⲆΔⵠⲆᐃⵠ][Ur.ΔΔⵠ] = Fr(fc(1, ["#147071"]));
    ΔΔ[Ur.ᐃⵠΔⵠΔᐃΔ] = [];
    ΔΔ[Ur.ᐃⵠΔⵠΔᐃΔ][Ur.ᐃΔⵠ] = Fr(fc(1, ["#231912"]));
    ΔΔ[Ur.ᐃⵠΔⵠΔᐃΔ][Ur.ΔΔⵠ] = Fr(fc(1, ["#021719"]));
    ΔΔ[Ur.ⲆᐃΔⲆⵠⲆⵠ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      tb(d, a * -7, a * -20, a * Jl, a * 37, a * 20);
      d.restore();
      eb(d, b[gr]);
      d.save();
      d.translate(a * 131, a * 94);
      tb(d, a * -84, a * -67, a * 168, a * 134, Mt * a);
      d.restore();
      eb(d, b[ms], b[0], mh * a);
      d.save();
      d.translate(a * 223, a * 94.5);
      tb(d, -Jo * a, a * -18.5, a * Hs, a * 37, a * 20);
      d.restore();
      eb(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      tb(d, a * -22.5, a * -6.5, a * 45, Oh * a, Ws * a);
      d.restore();
      eb(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ΔΔ[Ur.ᐃᐃⲆⲆᐃⲆⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(tl * a, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(rb * a, a * 83, z * a, a * 93, a * hn, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, I * a, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, $j * a, a * 59);
      d.bezierCurveTo(Wa * a, a * 59, lg * a, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * bl);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * de, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, Fi * a);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * mk, a * 99, a * 8, a * 93);
      d.closePath();
      eb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(Jk * a, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * gk);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      eb(d, b, b, Cg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      eb(d, b, b, a * Eg);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[Ur.ⲆⲆⲆⲆⵠΔⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, Go * a, a * 49, a * 6, a * 67, a * sq);
      d.bezierCurveTo(a * 121, a * Sg, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, Kg * a, a * 50);
      d.closePath();
      eb(d, b, b, _g * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * Xt, a * 57);
      d.bezierCurveTo(a * 2, a * 50, cl * a, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      eb(d, b, b, rg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * Ja);
      d.bezierCurveTo(a * 144, Ua * a, a * 146, a * 52, a * 133, a * 58);
      eb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[Ur.ⲆΔᐃⵠⵠⵠⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      eb(d, b[qn]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      eb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      eb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, mg * a, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      eb(d, b[ur]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      eb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      eb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      eb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      eb(d, b[rl]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      eb(d, b[Fj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      eb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      eb(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    ΔΔ[Ur.ⵠⵠⵠⲆᐃᐃΔ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      eb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      eb(d, b, b, Cg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      eb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[Ur.ⲆⵠⲆⵠⲆᐃⵠ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      eb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      eb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      eb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[Ur.ᐃⵠᐃⲆΔⵠⲆ] = Fr(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var h = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      eb(e, c, c, h);
      return d;
    }(0.9, "#BB0000"));
    ΔΔ[Ur.ⵠᐃⲆΔ] = Fr(lb(0.6, "#BB0000"));
    ΔΔ[Ur.ᐃⲆⵠⲆⲆ] = Fr(lb(0.6, "#1CE7E0"));
    ΔΔ[Ur.ⵠⵠⵠⵠⲆᐃⵠ] = Fr(lb(0.6, "#DBE71C"));
    ΔΔ[Ur.ᐃⲆⲆᐃⲆⵠᐃ] = Fr(lb(0.6, "#00BB00"));
    ΔΔ[Ur.ΔⵠⲆⲆⵠᐃⲆ] = [];
    ΔΔ[Ur.ΔⵠⲆⲆⵠᐃⲆ][Ur.ᐃΔⵠ] = Fr(fc(1, ["#dac291"]));
    ΔΔ[Ur.ΔⵠⲆⲆⵠᐃⲆ][Ur.ΔΔⵠ] = Fr(fc(1, ["#0D423D"]));
    ΔΔ[Ur.ᐃᐃⵠⲆⲆΔᐃ] = [];
    ΔΔ[Ur.ᐃᐃⵠⲆⲆΔᐃ][Ur.ᐃΔⵠ] = Fr(fc(1, ["#dac291"]));
    ΔΔ[Ur.ᐃᐃⵠⲆⲆΔᐃ][Ur.ΔΔⵠ] = Fr(fc(1, ["#0D423D"]));
    ΔΔ[Ur.ⵠΔᐃΔⲆⲆⵠ] = [];
    ΔΔ[Ur.ⵠΔᐃΔⲆⲆⵠ][Ur.ᐃΔⵠ] = Fr(hm(0.3, wq, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ΔΔ[Ur.ⵠΔᐃΔⲆⲆⵠ][Ur.ΔΔⵠ] = Fr(hm(0.3, dn, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ΔΔ[Ur.ⵠⵠⵠᐃᐃΔⲆ] = [];
    ΔΔ[Ur.ⵠⵠⵠᐃᐃΔⲆ][Ur.ᐃΔⵠ] = Fr(hm(0.3, U, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ΔΔ[Ur.ⵠⵠⵠᐃᐃΔⲆ][Ur.ΔΔⵠ] = Fr(hm(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ΔΔ[Ur.ᐃᐃᐃΔΔ] = [Fr(dm(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[Ur.ⵠᐃⲆⵠⲆ] = [Fr(dm(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ] = [];
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(Ud(1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(sc(As * 1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(lc(Ej * 1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(Yc(Fh * 1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(nm(1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(Tm(1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ᐃΔⵠ].push(Fr(Jc(Eo * 1, ["#0B6A84"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(Ud(1, ["#09373F"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(sc(1, ["#09373F"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(lc(1, ["#09373F"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(Yc(1, ["#09373F"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(nm(1, ["#09373F"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(Tm(Ue * 1, ["#09373F"])));
    ΔΔ[Ur.ⲆⵠⵠⵠⲆ][Ur.ΔΔⵠ].push(Fr(Jc(1, ["#09373F"])));
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ᐃΔⵠ].push(Fr(Vd(1.7, ["#FBEFBC"], Ih)));
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ᐃΔⵠ].push(Fr(Vd(1.9, ["#FBEFBC"], zs)));
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ᐃΔⵠ].push(Fr(Vd(1.7, ["#FBEFBC"], vk)));
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ΔΔⵠ].push(Fr(Vd(1.7, ["#0F4C48"], 0)));
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ΔΔⵠ].push(Fr(Vd(1.9, ["#0F4C48"], 1)));
    ΔΔ[Ur.ⵠⵠᐃᐃⲆ][Ur.ΔΔⵠ].push(Fr(Vd(1.7, ["#0F4C48"], ld)));
    ΔΔ[Ur.ⵠΔΔᐃⵠ] = [];
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ᐃΔⵠ].push(Fr(Vd(1.8, ["#A9D6D3"], 0)));
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ᐃΔⵠ].push(Fr(Vd(2, ["#A9D6D3"], Ht)));
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ᐃΔⵠ].push(Fr(Vd(1.8, ["#A9D6D3"], 2)));
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ΔΔⵠ].push(Fr(Vd(1.8, ["#115E60"], _a)));
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ΔΔⵠ].push(Fr(Vd(2, ["#115E60"], 1)));
    ΔΔ[Ur.ⵠΔΔᐃⵠ][Ur.ΔΔⵠ].push(Fr(Vd(1.8, ["#115E60"], 2)));
    ΔΔ[Ur.ⵠΔⲆⲆⲆ] = [];
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Vd(1.9, ["#2A8B9B"], Qs)));
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Vd(2.1, ["#2A8B9B"], j)));
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ᐃΔⵠ].push(Fr(Vd(1.9, ["#2A8B9B"], zk)));
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ΔΔⵠ].push(Fr(Vd(1.9, ["#0F464C"], 0)));
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ΔΔⵠ].push(Fr(Vd(2.1, ["#0F464C"], ag)));
    ΔΔ[Ur.ⵠΔⲆⲆⲆ][Ur.ΔΔⵠ].push(Fr(Vd(1.9, ["#0F464C"], sh)));
    ΔΔ[Ur.ΔΔⵠⲆᐃ] = [];
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ᐃΔⵠ] = [];
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ΔΔⵠ] = [];
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Cd(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Cd(Zq * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ᐃΔⵠ].push(Fr(Cd(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ΔΔⵠ].push(Fr(Cd(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ΔΔⵠ].push(Fr(Cd(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Ur.ΔΔⵠⲆᐃ][Ur.ΔΔⵠ].push(Fr(Cd(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Ur.ΔᐃᐃᐃⲆ] = [];
    ΔΔ[Ur.ΔᐃᐃᐃⲆ][Ur.ᐃΔⵠ] = Fr(um(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ΔΔ[Ur.ΔᐃᐃᐃⲆ][Ur.ΔΔⵠ] = Fr(um(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ΔΔ[Ur.ᐃΔⲆⲆᐃⵠⵠ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = j;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      eb(d, b[Cq], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[Ur.ⲆⲆᐃⵠⵠ] = [];
    ΔΔ[Ur.ⲆⲆᐃⵠⵠ][Ur.ᐃΔⵠ] = Fr(Qc(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ΔΔ[Ur.ⲆⲆᐃⵠⵠ][Ur.ΔΔⵠ] = Fr(Qc(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ΔΔ[Ur.ᐃⲆⵠΔᐃⲆᐃ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      eb(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      eb(d, b[gr], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      eb(d, b[0], b[qn], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      eb(d, b[Tg], b[Tg], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      eb(d, b[Rl], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      eb(d, b[0], b[0], a * fg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      eb(d, b[0], b[Cq], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      eb(d, b[0], b[Qs], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      eb(d, b[qk], b[Nl], ia * a);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[Ur.ⵠⲆᐃΔΔⵠᐃ] = [];
    ΔΔ[Ur.ⵠⲆᐃΔΔⵠᐃ][Ur.ᐃΔⵠ] = Fr(Bb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ΔΔ[Ur.ⵠⲆᐃΔΔⵠᐃ][Ur.ΔΔⵠ] = Fr(Bb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ΔΔ[Ur.ΔΔⵠⲆᐃⵠΔ] = [];
    ΔΔ[Ur.ΔΔⵠⲆᐃⵠΔ][Ur.ᐃΔⵠ] = Fr(Bb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], Ej));
    ΔΔ[Ur.ΔΔⵠⲆᐃⵠΔ][Ur.ΔΔⵠ] = Fr(Bb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], aa));
    ΔΔ[Ur.ⲆⵠΔΔΔⵠᐃ] = [];
    ΔΔ[Ur.ⲆⵠΔΔΔⵠᐃ][Ur.ᐃΔⵠ] = Fr(Bb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], gr));
    ΔΔ[Ur.ⲆⵠΔΔΔⵠᐃ][Ur.ΔΔⵠ] = Fr(Bb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], Qs));
    ΔΔ[Ur.ᐃΔⵠⵠⲆⵠⵠ] = Fr(kb(0.4, ["#B6222A"]));
    ΔΔ[Ur.ᐃⲆⲆⵠⲆⲆᐃ] = Fr(kb(0.4, ["#B6222A"]));
    ΔΔ[Ur.ⵠⵠΔᐃΔᐃⵠΔⲆ] = Fr(kb(0.4, ["#B6222A"]));
    ΔΔ[Ur.ⲆⲆⲆΔᐃ] = Fr(Ld(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ΔΔ[Ur.ᐃⲆⲆᐃᐃ] = Fr(Fu(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ΔΔ[Ur.ᐃⲆΔΔΔⲆΔ] = [];
    ΔΔ[Ur.ᐃⲆΔΔΔⲆΔ][Ur.ᐃΔⵠ] = Fr(Bu(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ΔΔ[Ur.ᐃⲆΔΔΔⲆΔ][Ur.ΔΔⵠ] = Fr(Bu(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ΔΔ[Ur.ⵠⲆⲆⲆΔ] = [];
    ΔΔ[Ur.ⵠⲆⲆⲆΔ][Ur.ᐃΔⵠ] = Fr(Bu(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], Fj));
    ΔΔ[Ur.ⵠⲆⲆⲆΔ][Ur.ΔΔⵠ] = Fr(Bu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], qk));
    ΔΔ[Ur.ᐃᐃⵠⲆᐃⵠΔ] = [];
    ΔΔ[Ur.ᐃᐃⵠⲆᐃⵠΔ][Ur.ᐃΔⵠ] = Fr(Iu(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[Ur.ᐃᐃⵠⲆᐃⵠΔ][Ur.ΔΔⵠ] = Fr(Iu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[Ur.ⵠⲆᐃΔΔⲆⲆ] = [];
    ΔΔ[Ur.ⵠⲆᐃΔΔⲆⲆ][Ur.ᐃΔⵠ] = Fr(Eu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[Ur.ⵠⲆᐃΔΔⲆⲆ][Ur.ΔΔⵠ] = Fr(Eu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[Ur.ΔΔⲆΔⲆΔⲆ] = [];
    ΔΔ[Ur.ΔΔⲆΔⲆΔⲆ][Ur.ᐃΔⵠ] = Fr(Iu(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[Ur.ΔΔⲆΔⲆΔⲆ][Ur.ΔΔⵠ] = Fr(Iu(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[Ur.ⵠⵠᐃⲆΔⵠⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃⲆΔⵠⵠ][Ur.ᐃΔⵠ] = Fr(Eu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[Ur.ⵠⵠᐃⲆΔⵠⵠ][Ur.ΔΔⵠ] = Fr(Eu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[Ur.ᐃᐃⵠⲆΔⵠᐃ] = Fr(Cu(0.35, ["#B6222A"]));
    ΔΔ[Ur.ΔⵠΔⵠΔΔΔ] = Fr(Iu(0.35, 0, [on, "#B6222A"]));
    ΔΔ[Ur.ΔᐃⲆᐃΔᐃⵠ] = Fr(Eu(0.35, 0, [undefined, "#B6222A"]));
    ΔΔ[Ur.ᐃΔΔᐃΔⲆⲆ] = Fr(Cu(0.35, ["#22E066"]));
    ΔΔ[Ur.ᐃⵠⲆⵠᐃᐃΔ] = Fr(Iu(0.35, 0, [undefined, "#22E066"]));
    ΔΔ[Ur.ⵠᐃᐃΔⵠⵠΔ] = Fr(Eu(0.35, 0, [undefined, "#22E066"]));
    ΔΔ[Ur.ᐃⵠⵠᐃⵠ] = [];
    ΔΔ[Ur.ᐃⵠⵠᐃⵠ][Ur.ᐃΔⵠ] = Fr(od(0.3, f, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ΔΔ[Ur.ᐃⵠⵠᐃⵠ][Ur.ΔΔⵠ] = Fr(od(0.3, Yq, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ΔΔ[Ur.ⵠⵠⲆⵠⵠ] = [];
    ΔΔ[Ur.ⵠⵠⲆⵠⵠ][Ur.ᐃΔⵠ] = Fr(sd(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ΔΔ[Ur.ⵠⵠⲆⵠⵠ][Ur.ΔΔⵠ] = Fr(sd(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ΔΔ[Ur.ΔΔᐃⲆΔ] = [];
    ΔΔ[Ur.ΔΔᐃⲆΔ][Ur.ᐃΔⵠ] = Fr(Rc(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ΔΔ[Ur.ΔΔᐃⲆΔ][Ur.ΔΔⵠ] = Fr(Rc(0.63, Yq, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[Ur.ⲆΔⵠⲆᐃ] = [];
    ΔΔ[Ur.ⲆΔⵠⲆᐃ][Ur.ᐃΔⵠ] = Fr(Ic(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ΔΔ[Ur.ⲆΔⵠⲆᐃ][Ur.ΔΔⵠ] = Fr(Ic(1, ra, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[Ur.ΔᐃⲆⲆᐃ] = [];
    ΔΔ[Ur.ΔᐃⲆⲆᐃ][Ur.ᐃΔⵠ] = ⵠᐃ.ⲆᐃΔΔΔⵠⲆ;
    ΔΔ[Ur.ΔᐃⲆⲆᐃ][Ur.ΔΔⵠ] = ⵠᐃ.ΔⵠⲆⲆⵠⵠⲆ;
    ΔΔ[Ur.ΔⲆⵠⵠⲆ] = [];
    ΔΔ[Ur.ΔⲆⵠⵠⲆ][Ur.ᐃΔⵠ] = Fr(zb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Ur.ΔⲆⵠⵠⲆ][Ur.ΔΔⵠ] = Fr(zb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ] = [ΔΔ[Ur.ΔⲆⵠⵠⲆ]];
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][1] = [];
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][2] = [];
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][1][Ur.ᐃΔⵠ] = Fr(Tb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][jq][Ur.ΔΔⵠ] = Fr(Tb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][qd][Ur.ᐃΔⵠ] = Fr(pb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][lt][Ur.ΔΔⵠ] = Fr(pb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Ur.ᐃⵠᐃⵠΔ] = [];
    ΔΔ[Ur.ᐃⵠᐃⵠΔ][Ur.ᐃΔⵠ] = Fr(gb(3 - Math.PI / 2, Zc(0.6, Xj, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ΔΔ[Ur.ᐃⵠᐃⵠΔ][Ur.ΔΔⵠ] = Fr(gb($b - Math.PI / 2, Zc(0.6, Fs, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ΔΔ[Ur.ⲆⲆΔⵠΔⲆⵠ] = [];
    ΔΔ[Ur.ⲆⲆΔⵠΔⲆⵠ][Ur.ᐃΔⵠ] = Fr(Lb(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ΔΔ[Ur.ⲆⲆΔⵠΔⲆⵠ][Ur.ΔΔⵠ] = Fr(Lb(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ΔΔ[Ur.ΔⵠⲆᐃᐃⵠⲆ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      tb(d, a * -96.5, a * -21.5, a * 193, a * 193, ms * a);
      d.restore();
      eb(d, b[4], b[jq], $q * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      tb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * bb);
      d.restore();
      eb(d, b[Ka], b[_b], Il * a);
      d.save();
      d.translate(a * 203.5, a * 299);
      tb(d, a * -115.5, -Hl * a, a * 231, a * 40, a * 10);
      d.restore();
      eb(d, b[og], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      tb(d, a * -20.5, a * -109, a * 41, a * 218, a * pj);
      d.restore();
      eb(d, b[3], b[1], yo * a);
      d.save();
      d.translate(a * 108.5, a * 210);
      tb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      eb(d, b[3], b[1], ua * a);
      d.save();
      d.translate(a * 204, a * 121.5);
      tb(d, a * -92, a * -9.5, a * 184, Ak * a, a * Ye);
      d.restore();
      eb(d, b[3], b[Qt], a * Ye);
      d.save();
      d.translate(a * 197, a * 299);
      tb(d, a * 85, -Oo * a, a * -170, a * 18, a * 10);
      d.restore();
      eb(d, b[co], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      eb(d, undefined, b[1], a * yo);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      eb(d, sb, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      eb(d, ng, b[Gs], lq * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      eb(d, pl, b[Zq], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ΔΔ[Ur.ᐃᐃⲆΔΔⲆⵠ] = Fr(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      tb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * Cq);
      d.restore();
      eb(d, b[ms], b[Tg], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      tb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      eb(d, b[vq], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      tb(d, a * -96.5, a * -20.5, a * 193, a * 41, tj * a);
      d.restore();
      eb(d, b[0], b[rl], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      tb(d, a * 96.5, a * -21, a * -193, a * 42, a * Qs);
      d.restore();
      eb(d, b[ms], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      tb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      eb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      tb(d, a * -115.5, -_r * a, a * 231, a * 40, ae * a);
      d.restore();
      eb(d, b[qk], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      tb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      eb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      tb(d, a * -20.5, a * -109, a * 41, a * 218, a * Ye);
      d.restore();
      eb(d, b[ur], b[0], a * Fb);
      return c;
    }(0.3, ["#BB0000"]));
    ΔΔ[Ur.ⵠⲆⲆΔⲆⲆᐃ] = $t(_b, [{
      f: _c,
      x: 0,
      y: Cn,
      a: As,
      r: ur,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Ur.ⵠᐃΔᐃⲆ] = $t(1.5, [{
      f: am,
      x: Qs,
      y: 0,
      a: Ej,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[Ur.ⲆⵠᐃⲆⲆⵠⲆ] = qc(0.35, ["#072428", "#67A242", "#67A242"], vq);
    ΔΔ[Ur.ⲆⵠΔⵠⲆᐃΔ] = qc(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ΔΔ[Ur.ⵠⲆⵠⲆⵠⵠΔ] = qc(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ΔΔ[Ur.ᐃΔⲆⲆⲆⵠⲆ] = qc(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], nn);
    if (ⲆⲆⵠΔΔΔᐃ) {
      ΔΔ[Ur.ᐃⲆΔΔⲆⵠⵠ] = Fr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = ta * b;
        c.width = e;
        c.height = f;
        d.beginPath();
        tb(d, 0, ur, e, f - g, g);
        d.globalAlpha = 0.8;
        eb(d, "#1D6055");
        d.globalAlpha = 1;
        var h = Wu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * wt);
        return c;
      }(1));
    } else {
      ΔΔ[Ur.ᐃⲆΔΔⲆⵠⵠ] = Fr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + Do;
        d.beginPath();
        tb(d, ms, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        eb(d, "#1D6055");
        d.globalAlpha = 1;
        var h = Wu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / tg, b * 5);
        return c;
      }(1));
    }
    if (ⲆⲆⵠΔΔΔᐃ) {
      ΔΔ[Ur.ΔⲆᐃΔΔⲆΔ] = Fr(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var j = xq * b;
        var a = b * 35;
        var k = b * 65;
        var h = b * Xr;
        var l = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, eg * b);
        tb(d, k, 0, f, j, h);
        eb(d, null, "#69A148", l);
        d.translate(qn, a);
        tb(d, k, 0, f, j, h);
        eb(d, null, "#AF352A", l);
        d.translate(qn, a);
        tb(d, k, ne, f, j, h);
        eb(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ΔΔ[Ur.ΔⲆᐃΔΔⲆΔ] = Fr(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var k = zl * c;
        var a = c * 240;
        var m = c * 35;
        var h = c * 1;
        var l = c * 4;
        var g = c * 4;
        d.width = f;
        d.height = j;
        e.translate(vq, c * Hb);
        tb(e, m, h, i, k, l);
        eb(e, null, "#69A148", g);
        var n = ΔΔ[Ur.ⲆⵠᐃⲆⲆⵠⲆ];
        e.drawImage(n, z, -Kg);
        e.translate(a, 0);
        tb(e, m, h, i, k, l);
        eb(e, null, "#AF352A", g);
        n = ΔΔ[Ur.ⵠⲆⵠⲆⵠⵠΔ];
        e.drawImage(n, zg, -Cs);
        e.translate(a, 0);
        tb(e, m, h, i, k, l);
        eb(e, null, "#669BB1", g);
        n = ΔΔ[Ur.ⲆⵠΔⵠⲆᐃΔ];
        e.drawImage(n, Bo, -le);
        e.translate(a, Rl);
        tb(e, m, h, i, k, l);
        eb(e, null, "#074A87", g);
        n = ΔΔ[Ur.ᐃΔⲆⲆⲆⵠⲆ];
        e.drawImage(n, gk, -xl);
        return d;
      }(1));
    }
    if (ⲆⲆⵠΔΔΔᐃ) {
      ΔΔ[Ur.ⲆΔⲆΔⲆᐃⵠ] = Fr(Nc(0.75));
    } else {
      ΔΔ[Ur.ⲆΔⲆΔⲆᐃⵠ] = Fr(Nc(1));
    }
    ΔΔ[Ur.ᐃⵠⵠⲆᐃᐃΔ] = Fr(Bc(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ΔΔ[Ur.ⲆᐃⵠⲆΔΔⲆ] = Fr(gb(5.8, xu(0.15, Xj, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ΔΔ[Ur.ᐃⲆ] = [];
    ΔΔ[Ur.ᐃΔᐃᐃⲆΔᐃ] = [];
    for (a = 0; a < uw.ⲆⲆⲆⵠᐃⵠⵠ + re; a++) {
      ΔΔ[Ur.ᐃΔᐃᐃⲆΔᐃ][a] = Wu(1, "" + (a + zs), db, "#FFF");
    }
    ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ] = [];
    ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ].push(Fr(vm(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ].push(Fr(vm(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ].push(Fr(vm(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ΔΔ[Ur.ⵠⵠᐃⲆΔᐃⵠ] = [];
    ΔΔ[Ur.ⵠⵠᐃⲆΔᐃⵠ].push(Fr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(_a, a * 5);
      c.translate(Ih, zl * a);
      ob(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      eb(c, "#322413", "#322413", a * 4);
      c.translate(0, -Ja * a);
      ob(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      eb(c, "#392C16", "#5E3E1A", a * Va);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      eb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      eb(c, "#3A2A0D");
      ob(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      eb(c, Gk, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      eb(c, qj, "#5E3E1A", a * gs);
      c.translate(0, a * ys);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      eb(c, undefined, "#c7a726", a * S);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      eb(c, undefined, "#c7a726", Is * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      eb(c, yr, "#c7a726", db * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      eb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      eb(c, Gg, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      eb(c, undefined, "#c7a726", db * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      eb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      eb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      eb(c, qj, "#c7a726", a * 12);
      c.translate(0, a * -Dn);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      eb(c, qj, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      eb(c, sb, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      eb(c, undefined, "#EDCE4F", Za * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      eb(c, $r, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      eb(c, da, "#EDCE4F", a * Tl);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      eb(c, Hj, "#EDCE4F", Za * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      eb(c, Zi, "#EDCE4F", zu * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      eb(c, Gk, "#EDCE4F", Jt * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      eb(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      eb(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      eb(c, "#ECBE35", "#EDCE4F", a * au);
      ob(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      eb(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ΔΔ[Ur.ⵠⵠᐃⲆΔᐃⵠ].push(Fr(function (a) {
      var b = document.createElement("canvas");
      var d = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      d.translate(0, xh * a);
      d.translate(Tg, c * a);
      ob(d, a * 160.5, a * 159.5, a * 156.39595138242822);
      eb(d, "#322413", "#322413", a * 4);
      d.translate(qk, a * -zl);
      ob(d, a * 160.5, a * 159.5, a * 156.39595138242822);
      eb(d, "#392C16", "#5E3E1A", a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      d.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      d.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      d.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      d.closePath();
      eb(d, "#3A2A0D");
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      d.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      d.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      d.closePath();
      eb(d, "#071A1B");
      ob(d, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      eb(d, oh, "#5E3E1A", a * xk);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      d.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      d.closePath();
      eb(d, Bl, "#5E3E1A", ua * a);
      d.translate(Cn, a * 8);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 66, a * 158.29513549804688);
      d.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      d.closePath();
      eb(d, undefined, "#281C08", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      d.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      d.closePath();
      eb(d, $r, "#281C08", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 95, a * 90.29513549804688);
      d.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      d.closePath();
      eb(d, pl, "#281C08", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116, a * 52.850677490234375);
      d.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      d.closePath();
      eb(d, undefined, "#281C08", a * Jt);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 159, a * 61.295135498046875);
      d.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      d.closePath();
      eb(d, ng, "#281C08", Zg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 203, a * 51.295135498046875);
      d.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      d.closePath();
      eb(d, undefined, "#281C08", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 225, a * 89.29513549804688);
      d.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      d.closePath();
      eb(d, undefined, "#281C08", a * Za);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      d.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      d.closePath();
      eb(d, undefined, "#281C08", a * Il);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      d.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      d.closePath();
      eb(d, ps, "#281C08", a * Jg);
      d.translate(0, a * -8);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 66, a * 158.29513549804688);
      d.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      d.closePath();
      eb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      d.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      d.closePath();
      eb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 95, a * 90.29513549804688);
      d.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      d.closePath();
      eb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116, a * 52.850677490234375);
      d.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      d.closePath();
      eb(d, undefined, "#5E3C10", Is * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 159, a * 61.295135498046875);
      d.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      d.closePath();
      eb(d, undefined, "#5E3C10", Jg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 203, a * 51.295135498046875);
      d.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      d.closePath();
      eb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 225, a * 89.29513549804688);
      d.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      d.closePath();
      eb(d, Hj, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      d.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      d.closePath();
      eb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      d.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      d.closePath();
      eb(d, ng, "#5E3C10", Is * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96, a * 166);
      d.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      d.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      d.closePath();
      eb(d, "#704618", "#5D3D1A", Kg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      d.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      d.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      d.closePath();
      eb(d, "#E1DDD5", "#EAE7E4", a * 8);
      ob(d, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      eb(d, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ΔΔ[Ur.ΔⲆⵠᐃⵠⲆᐃ] = Fr(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(ms, Ku * a);
      ob(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      eb(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      eb(c, "#C09D6F", "#A37943", a * Fl);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      tb(c, a * -5.5, a * -37.5, a * zt, a * 75, a * 10);
      c.restore();
      eb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      tb(c, a * -10, a * -5.5, Kk * a, a * 11, j * a);
      c.restore();
      eb(c, "#C09D6F");
      ob(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      eb(c, "#C09D6F");
      return b;
    }(0.22));
    ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ] = [];
    ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ].push(Fr(Sb(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ].push(Fr(Sb(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], Ht)));
    ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ].push(Fr(Sb(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ΔΔ[Ur.ⵠⵠⵠⲆᐃⲆⲆ] = ⵠᐃ.ⵠⵠⵠⲆᐃⲆⲆ;
    ΔΔ[Ur.ⲆⵠΔΔⵠⵠⲆ] = ⵠᐃ.ⲆⵠΔΔⵠⵠⲆ;
    ΔΔ[Ur.ᐃⵠⵠⵠⵠΔⲆ] = ⵠᐃ.ᐃⵠⵠⵠⵠΔⲆ;
    ΔΔ[Ur.ΔΔⵠᐃⵠᐃᐃ] = ⵠᐃ.ΔΔⵠᐃⵠᐃᐃ;
    ΔΔ[Ur.ΔⲆⵠΔⵠⵠⲆ] = Wu(1, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
    ΔΔ[Ur.ΔΔᐃⵠⲆᐃⵠ] = Wu(1, "Reconnecting...", 30, "#FFF");
    console.log(pl, undefined);
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == ne) {
      e.translate(Vl * a, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      tb(e, Qs * a, a * Vh, a * 90, a * 60, 10);
      eb(e, b[qn]);
      e.globalCompositeOperation = "destination-out";
      ob(e, a * 25, a * 40, El * a);
      e.fill();
      ob(e, a * 65, a * 40, a * ih);
      e.fill();
      e.restore();
      e.save();
      tb(e, Ih, vq, a * 90, a * 60, a * 10);
      eb(e, b[zs]);
      e.globalCompositeOperation = "destination-out";
      ob(e, a * 25, a * 40, a * 10);
      e.fill();
      ob(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      eb(e, b[Gs]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      eb(e, b[Ok]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      eb(e, b[$l]);
      e.restore();
      e.save();
      tb(e, 0, a * 15, a * 90, a * 50, ih * a);
      eb(e, b[ms]);
      tb(e, 0, a * 10, a * 90, a * 50, ih * a);
      eb(e, b[Ok]);
      e.globalCompositeOperation = "destination-out";
      ob(e, a * 25, a * 40, a * Hs);
      e.fill();
      ob(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, Ag * a);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, Ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    eb(e, c[Gr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-Fh * a, rl);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    eb(e, c[ms]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * Eo, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    eb(e, c[Nl]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    tb(e, -ll * a, a * -4, a * 14, qh * a, a * 10);
    e.restore();
    eb(e, c[0]);
    e.translate(uh * a, 0);
    e.globalAlpha = zs;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    eb(e, c[Ka], c[4], a * mt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-Ht * a, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    eb(e, c[Gs], c[sh], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * Fh, Nl);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    eb(e, c[1], c[Xh], a * dt);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    tb(e, a * -7, a * -4, a * 14, a * vt, a * 10);
    e.restore();
    eb(e, c[aa], c[Zt], a * 3);
    return d;
  }
  function km(b, c, d, e, f, g) {
    ck(Ys, b, c, d, e, f, g);
    const h = tw($s[Cn], $s[1], $s[2]);
    const a = Qw($s[Qt], $s[4], $s[5], $s[qn], $s[Fh]);
    return (0 << ((h ^ a) >> Ah & 255)) + (24 << ((h ^ a) >> hd & 255)) + (8 << ((h ^ a) & 255)) + (ah << ((h ^ a) >> 24 & T));
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : Gs;
    e.translate(a * -gh, a * Tg);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    tb(e, a * -4.5, a * -39, rb * a, a * 78, a * 5);
    e.restore();
    eb(e, c[qn], c[gr], a * Gl);
    e.save();
    e.translate(a * 53, a * 36);
    tb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    eb(e, c[0], c[Ih], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    tb(e, a * -26.5, a * -15, a * 53, a * 30, a * Qb);
    e.restore();
    eb(e, c[uh], c[_a], Ch * a);
    e.translate(a * 5, ur * a);
    e.globalAlpha = Ag;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    tb(e, a * -4.5, a * -39, a * 9, a * 78, Os * a);
    e.restore();
    eb(e, c[1], c[2], Z * a);
    e.save();
    e.translate(a * 53, a * 36);
    tb(e, a * -29, a * -17.5, a * 58, a * 35, a * Jn);
    e.restore();
    eb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    tb(e, a * -26.5, a * -Hb, a * 53, a * 30, a * gg);
    e.restore();
    eb(e, c[gh], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    eb(e, c[pa], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    eb(e, c[7], c[wg], a * nn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    eb(e, c[9], c[R], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    eb(e, c[11], c[xk], a * co);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(gr, Hh * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    eb(e, c[qn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, el * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    eb(e, undefined, c[0], a * Et);
    e.translate(0, a * -5);
    e.globalAlpha = zs;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    eb(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    eb(e, c[1], c[wr], Tl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    eb(e, undefined, c[Cl], a * S);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    eb(e, da, c[Tt], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    eb(e, c[1], c[Cl], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    eb(e, c[4], c[Xh], a * La);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    eb(e, c[Cg], c[2], a * $h);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * rh, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    eb(e, undefined, c[2], a * 11);
    return d;
  }
  function Mm() {
    if (!bx.Ⲇⵠⵠⵠ.open && !bx.ΔⵠΔᐃⲆ.open) {
      bx.ⲆΔᐃⵠ.open = false;
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var c = uw.ⲆᐃΔΔⵠⵠᐃ;
      if (b) {
        for (var d = gr; d < yw.length; d++) {
          for (var e = yw[d][Rl], f = yw[d][Zq], j = Fj; ff.ᐃᐃᐃ[e].length > j; j++) {
            var k = ff.ᐃᐃᐃ[e][j];
            var m = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(k, b);
            if (m < c) {
              c = m;
              bx.ⲆΔᐃⵠ.ᐃⵠⵠⵠΔΔΔ = f;
              bx.ⲆΔᐃⵠ.type = e;
              bx.ⲆΔᐃⵠ.open = Xi;
              bx.ⲆΔᐃⵠ.ⵠⵠⲆⲆⲆⵠᐃ = k.info & 255;
              bx.ⲆΔᐃⵠ.ⵠᐃΔᐃⵠᐃⲆ = (k.info & 65280) >> ph;
              bx.ⲆΔᐃⵠ.ΔΔΔⵠ = k.ΔΔΔⵠ;
              bx.ⲆΔᐃⵠ.ⲆΔΔᐃᐃ = k.id;
            }
          }
        }
        if (c < uw.ⲆᐃΔΔⵠⵠᐃ) {
          var p;
          var q = ΔΔ[Ur.ⵠΔᐃⲆΔⲆⲆ];
          var l = (g = dx.ᐃⲆᐃᐃᐃⵠΔ).info.translate.x - 33;
          Em(oo, q, l, Qs);
          if (bx.ⲆΔᐃⵠ.ⵠⵠⲆⲆⲆⵠᐃ > rl) {
            g.ⵠΔᐃⵠ(oo);
            if ((p = bx.ⲆΔᐃⵠ.ⵠⵠⲆⲆⲆⵠᐃ) > 1) {
              Om(p, g);
            }
          }
          switch (bx.ⲆΔᐃⵠ.ᐃⵠⵠⵠΔΔΔ) {
            case bs.ᐃΔⲆᐃ:
              var g = dx.ⲆⵠⵠⵠⵠᐃⲆ;
              break;
            case bs.ΔΔΔΔ:
              g = dx.ⵠⲆᐃᐃᐃⲆΔ;
              break;
            case bs.ΔⲆⲆΔ:
              g = dx.ⲆⵠΔⵠⵠΔᐃ;
              break;
            case bs.ΔⲆⲆⲆ:
              g = dx.ⲆⲆⵠΔΔᐃⲆ;
              break;
            case bs.ⵠΔⲆΔ:
              g = dx.ᐃⲆⵠⲆᐃΔⲆ;
          }
          if (vq < bx.ⲆΔᐃⵠ.ⵠᐃΔᐃⵠᐃⲆ) {
            g.ⵠΔᐃⵠ(oo);
            if ((p = bx.ⲆΔᐃⵠ.ⵠᐃΔᐃⵠᐃⲆ) > 1) {
              Om(p, g);
            }
          }
        }
      }
    }
  }
  function Bm() {
    bx.ⵠⲆⵠⲆΔ.id = -1;
    bx.ⵠⲆⵠⲆΔ.ΔΔΔⵠ = -j;
    if (!bx.ᐃᐃΔᐃⲆⲆⵠ && !bx.ⵠⲆⵠⲆΔ.wait && !bx.ᐃⵠⲆⵠⲆ) {
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var c = uw.ⲆⲆΔⵠⲆᐃⵠⵠⵠ;
      if (b) {
        for (var d = Fj; d < ff.ᐃᐃᐃ[xw.ΔⵠᐃⵠΔ].length; d++) {
          var e = ff.ᐃᐃᐃ[xw.ΔⵠᐃⵠΔ][d];
          var f = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(e, b);
          if (f < c) {
            c = f;
            bx.ⵠⲆⵠⲆΔ.id = e.id;
            bx.ⵠⲆⵠⲆΔ.ΔΔΔⵠ = e.ΔΔΔⵠ;
            bx.ⵠⲆⵠⲆΔ.info = e.info;
            bx.ⵠⲆⵠⲆΔ.lock = (e.info & w) >> Rb;
          }
        }
      }
      var g = dx.ⵠⵠΔⵠⲆ;
      dx.ⵠⵠΔⵠⲆ = -Ag;
      if (-ag == bx.ⵠⲆⵠⲆΔ.ΔΔΔⵠ || bx.ⲆΔΔΔᐃ.length != 0 && bx.id != bx.ⵠⲆⵠⲆΔ.ΔΔΔⵠ) {
        if (bx.ⲆΔΔΔᐃ.length != 0 && bx.id != bx.ⲆΔΔΔᐃ[Nl]) {
          dx.ⵠⵠΔⵠⲆ = sw.ⵠⲆᐃⵠⵠⲆΔ;
        } else if (bx.ⲆΔΔΔᐃ.length != 0 && bx.id == bx.ⲆΔΔΔᐃ[qk]) {
          dx.ⵠⵠΔⵠⲆ = sw.ⵠΔΔⲆⵠᐃᐃ;
        } else if (Fj != bx.ⲆΔΔΔᐃ.length) {
          dx.ⵠⵠΔⵠⲆ = sw.ⵠᐃΔⵠᐃΔΔ;
        }
      } else if (bx.ⲆΔΔΔᐃ.length == Cq && bx.ⵠⲆⵠⲆΔ.info >= dg) {
        dx.ⵠⵠΔⵠⲆ = sw.ⵠᐃᐃΔⵠΔᐃ;
      } else if (bx.ⲆΔΔΔᐃ.length == Gr) {
        dx.ⵠⵠΔⵠⲆ = sw.ⵠᐃΔⵠᐃΔΔ;
      } else {
        dx.ⵠⵠΔⵠⲆ = sw.ΔΔΔΔᐃᐃⵠ;
      }
      if (dx.ⵠⵠΔⵠⲆ != -As) {
        dx.ΔⲆᐃᐃΔ[dx.ⵠⵠΔⵠⲆ].button.ⵠΔᐃⵠ(oo);
      }
      var h = document.getElementById("team_box").style;
      if (dx.ⵠⵠΔⵠⲆ != -ie && dx.ⵠⵠΔⵠⲆ != g && h.display == "inline-block") {
        dx.ΔⲆᐃᐃΔ[dx.ⵠⵠΔⵠⲆ].action();
      }
    }
  }
  function Dm(a, b, c) {
    var d = ΔΔ[Ur.ᐃΔᐃᐃⲆΔᐃ][a];
    var e = b.info.translate.x + Os * rq;
    var f = b.info.translate.y + rq * cl;
    if (gw == b.info.state || c) {
      f += rq * 5;
    }
    Em(oo, d, e, f);
  }
  function Im() {
    if (bx.reconnect.enabled) {
      oo.globalAlpha = 0.9;
      oo.fillStyle = "#000";
      tb(oo, oq - 150, pq - 90, 300, 180, 15);
      oo.fill();
      oo.globalAlpha = 1;
      var a = ΔΔ[Ur.ⵠⲆⵠⲆᐃᐃΔ];
      oo.save();
      bx.reconnect.rotate = (bx.reconnect.rotate + xf * 2) % (Math.PI * 2);
      oo.translate(ro / 2, so / vk - 25);
      oo.rotate(bx.reconnect.rotate);
      Em(oo, a, -a.width / Xh, -a.height / 2);
      oo.restore();
      a = ΔΔ[Ur.ΔΔᐃⵠⲆᐃⵠ];
      Em(oo, a, (ro - a.width) / gc, (so - a.height) / qd + 25);
    }
  }
  function Em(b, c, d, e, f, g, i, a, j, h) {
    if (c.ᐃⲆⵠⲆΔΔⲆ === undefined || aa === c.ᐃⲆⵠⲆΔΔⲆ()) {
      if (h !== ng) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(As, g), i, a, j, h);
      } else if (g !== undefined) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Sm() {
    if (bx.ⵠⵠᐃⲆᐃᐃᐃ) {
      oo.globalAlpha = 0.5;
      oo.fillStyle = "#000";
      oo.fillRect(Gr, 0, ro, so);
      oo.globalAlpha = 0.8;
      var b = ΔΔ[Ur.ⲆΔᐃΔᐃⵠᐃ][ff.time];
      var c = oq - b.width / 2;
      var d = pq - b.height / 2;
      Em(oo, b, c, d);
      oo.globalAlpha = Fh;
      if (dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.x > -1) {
        oo.fillStyle = "#660000";
        ob(oo, c + rq * (dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.x * og), d + dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.y * 3 * rq, rq * 14);
        oo.fill();
      }
      for (var e = dx.ΔΔᐃΔⲆ.ⲆΔⲆΔ, f = vq; f < e.length; f++) {
        var g = e[f];
        ff.time;
        oo.fillStyle = "#ff0000";
        ob(oo, c + rq * (g.x / (ff.ΔΔⲆⲆⲆ * Tk) * 600), d + rq * (g.y / (ff.ᐃⵠⵠⵠⵠ * 100) * 600), rq * Kl);
        oo.fill();
      }
      var h = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      if (h) {
        oo.fillStyle = ff.time ? "#fff" : "#e39716";
        ob(oo, c + h.x / (ff.ΔΔⲆⲆⲆ * 100) * 600 * rq, d + h.y / (ff.ᐃⵠⵠⵠⵠ * 100) * 600 * rq, rq * 12);
        oo.fill();
      }
    }
  }
  function Qm() {
    bx.ᐃⵠᐃⲆᐃ.open = false;
    var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
    var b = uw.ᐃᐃⵠᐃⲆⲆⵠ;
    if (a) {
      for (var c = Fj; ff.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ].length > c; c++) {
        var d = ff.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ][c];
        var e = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(d, a);
        if (b > e) {
          b = e;
          bx.ᐃⵠᐃⲆᐃ.open = true;
          bx.ᐃⵠᐃⲆᐃ.ΔΔΔⵠ = d.ΔΔΔⵠ;
          bx.ᐃⵠᐃⲆᐃ.ⲆΔΔᐃᐃ = d.id;
        }
      }
      if (uw.ᐃᐃⵠᐃⲆⲆⵠ > b) {
        dx.ᐃⵠᐃⲆᐃ.ⵠΔᐃⵠ(oo);
      }
    }
  }
  function _m() {
    if (!bx.Ⲇⵠⵠⵠ.open && !bx.ΔⵠΔᐃⲆ.open) {
      bx.ⵠΔⲆⲆ.open = _i;
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var c = uw.ⲆⵠΔᐃⲆⵠⲆ;
      if (b) {
        for (var d = 0; ff.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ].length > d; d++) {
          var e = ff.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ][d];
          var f = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(e, b);
          if (c > f) {
            c = f;
            bx.ⵠΔⲆⲆ.open = true;
            bx.ⵠΔⲆⲆ.ᐃᐃᐃΔᐃⲆᐃ = e.info & 255;
            bx.ⵠΔⲆⲆ.ΔΔⵠⵠΔ = (e.info & 65280) >> 8;
            bx.ⵠΔⲆⲆ.ΔΔΔⵠ = e.ΔΔΔⵠ;
            bx.ⵠΔⲆⲆ.ⲆΔΔᐃᐃ = e.id;
          }
        }
        if (uw.ⲆⵠΔᐃⲆⵠⲆ > c) {
          var g = ΔΔ[Ur.ᐃΔΔΔⲆⵠⲆ];
          var j = (a = dx.ΔⲆΔᐃΔⲆᐃ).info.translate.x - 33;
          Em(oo, g, j, 0);
          if (bx.ⵠΔⲆⲆ.ᐃᐃᐃΔᐃⲆᐃ > 0) {
            a.ⵠΔᐃⵠ(oo);
            if ((k = bx.ⵠΔⲆⲆ.ᐃᐃᐃΔᐃⲆᐃ) > 1) {
              Om(k, a);
            }
          }
          var a = dx.ΔᐃⲆⵠⵠΔⲆ;
          if (bx.ⵠΔⲆⲆ.ΔΔⵠⵠΔ > 0) {
            a.ⵠΔᐃⵠ(oo);
            var k = bx.ⵠΔⲆⲆ.ΔΔⵠⵠΔ;
            if (Ht < k) {
              Om(k, a);
            }
          }
        }
      }
    }
  }
  function Fm() {
    if (!bx.Ⲇⵠⵠⵠ.open) {
      bx.ΔⵠΔᐃⲆ.ΔⲆⲆⵠ = Cq;
      bx.ΔⵠΔᐃⲆ.open = false;
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var c = uw.ⲆΔᐃⵠⵠⲆΔ;
      if (b) {
        for (var d = uh; d < ff.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ].length; d++) {
          var e = ff.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ][d];
          var f = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(e, b);
          if (f < c) {
            c = f;
            bx.ΔⵠΔᐃⲆ.open = Vr;
            bx.ΔⵠΔᐃⲆ.ΔⲆⲆⵠ = e.info;
            bx.ΔⵠΔᐃⲆ.ΔΔΔⵠ = e.ΔΔΔⵠ;
            bx.ΔⵠΔᐃⲆ.ⲆΔΔᐃᐃ = e.id;
          }
        }
        if (uw.ⲆΔᐃⵠⵠⲆΔ > c) {
          var g = ΔΔ[Ur.ᐃⵠΔΔΔⲆⵠ];
          var j = dx.ⲆᐃⵠⵠⲆΔΔ;
          var a = Math.floor(j.info.translate.x + (j.info.Ⲇⵠ[0].width - g.width) / 2);
          var k = Math.floor(j.info.translate.y + (j.info.Ⲇⵠ[vq].height - g.height) / 2) + Wb;
          Em(oo, g, a, k);
          if (bx.ΔⵠΔᐃⲆ.ΔⲆⲆⵠ > 0) {
            j.ⵠΔᐃⵠ(oo);
            var h = bx.ΔⵠΔᐃⲆ.ΔⲆⲆⵠ;
            if (aa < h) {
              Om(h, j);
            }
          }
        }
      }
    }
  }
  function Rm() {
    if (!bx.Ⲇⵠⵠⵠ.open && !bx.ΔⵠΔᐃⲆ.open && !bx.ⵠΔⲆⲆ.open && !bx.ΔⲆⵠⲆ.open && !bx.ⲆΔᐃⵠ.open) {
      bx.sign.open = false;
      var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var b = uw.ΔᐃΔⵠΔΔᐃ;
      if (a) {
        for (var c = qn; ff.ᐃᐃᐃ[xw.Δᐃᐃᐃᐃ].length > c; c++) {
          var d = ff.ᐃᐃᐃ[xw.Δᐃᐃᐃᐃ][c];
          var e = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(d, a);
          if (b > e && d.info === Tg && bx.id === d.ΔΔΔⵠ) {
            bx.sign.open = A;
            b = e;
            bx.sign.ⲆΔΔᐃᐃ = d.id;
          }
        }
        if (uw.ΔᐃΔⵠΔΔᐃ > b) {
          dx.sign.button.ⵠΔᐃⵠ(oo);
        }
      }
    }
  }
  function Gm() {
    bx.Ⲇⵠⵠⵠ.id = -Fh;
    bx.Ⲇⵠⵠⵠ.lock = na;
    bx.Ⲇⵠⵠⵠ.locked = Ao;
    bx.Ⲇⵠⵠⵠ.ΔΔⲆⵠⲆᐃⲆ = false;
    bx.Ⲇⵠⵠⵠ.ⵠⲆⲆⵠΔᐃⵠ = _i;
    bx.Ⲇⵠⵠⵠ.open = false;
    var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
    var c = uw.ⵠᐃΔΔⵠⵠᐃ;
    if (b) {
      for (var d = Nl; d < ff.ᐃᐃᐃ[xw.ΔⲆᐃᐃⲆ].length; d++) {
        var e = ff.ᐃᐃᐃ[xw.ΔⲆᐃᐃⲆ][d];
        var f = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(e, b);
        if (f < c) {
          c = f;
          bx.Ⲇⵠⵠⵠ.open = true;
          bx.Ⲇⵠⵠⵠ.id = e.action < 2 ? -Ue : Math.floor((e.action - Al) / 2);
          bx.Ⲇⵠⵠⵠ.ΔⲆⲆⵠ = e.info;
          bx.Ⲇⵠⵠⵠ.ΔΔΔⵠ = e.ΔΔΔⵠ;
          bx.Ⲇⵠⵠⵠ.ⲆΔΔᐃᐃ = e.id;
          bx.Ⲇⵠⵠⵠ.locked = e.lock;
          bx.Ⲇⵠⵠⵠ.lock = !!e.lock && bx.id != e.ΔΔΔⵠ && !bx.ⵠⵠᐃⲆᐃᐃⲆ(e.ΔΔΔⵠ) && Xn;
          bx.Ⲇⵠⵠⵠ.ⵠⲆⲆⵠΔᐃⵠ = bx.id === e.ΔΔΔⵠ && !bx.Ⲇⵠⵠⵠ.locked && -Oj != bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⵠᐃⵠΔΔ) || ds;
          if (bx.Ⲇⵠⵠⵠ.locked && bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⲆΔⲆᐃ) != -1) {
            bx.Ⲇⵠⵠⵠ.ΔΔⲆⵠⲆᐃⲆ = true;
          }
        }
      }
      if (c < uw.ⵠᐃΔΔⵠⵠᐃ) {
        var g = ΔΔ[Ur.ᐃⵠΔΔⵠⲆⲆ];
        var j = dx.ΔᐃΔ[0];
        var k = Math.floor(j.info.translate.x + (j.info.Ⲇⵠ[0].width - g.width) / tg);
        var m = Math.floor(j.info.translate.y + (j.info.Ⲇⵠ[Gr].height - g.height) / lt) + 3;
        Em(oo, g, k, m);
        if ((!bx.Ⲇⵠⵠⵠ.lock || bx.Ⲇⵠⵠⵠ.ΔΔΔⵠ === bx.id) && bx.Ⲇⵠⵠⵠ.id >= Qs) {
          (j = dx.ΔᐃΔ[bx.Ⲇⵠⵠⵠ.id]).ⵠΔᐃⵠ(oo);
          var h = bx.Ⲇⵠⵠⵠ.ΔⲆⲆⵠ;
          if (Fh < h) {
            Om(h, j);
          }
        }
        if (bx.Ⲇⵠⵠⵠ.lock) {
          dx.ⲆΔⲆᐃⲆⵠⵠ.ⵠΔᐃⵠ(oo);
        } else if (bx.Ⲇⵠⵠⵠ.ⵠⲆⲆⵠΔᐃⵠ) {
          dx.ΔΔᐃᐃΔⲆΔ.ⵠΔᐃⵠ(oo);
        }
        if (bx.Ⲇⵠⵠⵠ.ΔΔⲆⵠⲆᐃⲆ) {
          dx.ΔᐃⲆΔⵠⲆᐃ.ⵠΔᐃⵠ(oo);
        }
      }
    }
  }
  function jm() {
    if (!bx.Ⲇⵠⵠⵠ.open && !bx.ΔⵠΔᐃⲆ.open && !bx.ⵠΔⲆⲆ.open && !bx.ⲆΔᐃⵠ.open) {
      bx.ΔⲆⵠⲆ.open = false;
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var c = uw.ⵠᐃⵠⲆⲆᐃᐃ;
      if (b) {
        for (var d = 0; d < ff.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ].length; d++) {
          var e = ff.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ][d];
          var f = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(e, b);
          if (f < c) {
            c = f;
            bx.ΔⲆⵠⲆ.open = Yq;
            bx.ΔⲆⵠⲆ.ⵠⵠⲆⲆⲆⵠᐃ = e.info & 31;
            bx.ΔⲆⵠⲆ.ΔΔⵠⵠΔ = (e.info & 992) >> ed;
            bx.ΔⲆⵠⲆ.ⲆᐃⵠᐃᐃᐃΔ = (e.info & 31744) >> Ln;
            bx.ΔⲆⵠⲆ.ΔΔΔⵠ = e.ΔΔΔⵠ;
            bx.ΔⲆⵠⲆ.ⲆΔΔᐃᐃ = e.id;
          }
        }
        if (uw.ⵠᐃⵠⲆⲆᐃᐃ > c) {
          var g = ΔΔ[Ur.ⵠⲆⵠⵠⵠⲆⲆ];
          var j = (k = dx.ΔᐃⲆⵠΔⵠᐃ).info.translate.x - 32;
          Em(oo, g, j, qk);
          if (bx.ΔⲆⵠⲆ.ⵠⵠⲆⲆⲆⵠᐃ > 0) {
            k.ⵠΔᐃⵠ(oo);
            var a = bx.ΔⲆⵠⲆ.ⵠⵠⲆⲆⲆⵠᐃ;
            if (jq < a) {
              Om(a, k);
            }
          }
          var k = dx.ⲆΔᐃⲆⵠᐃⵠ;
          if (bx.ΔⲆⵠⲆ.ⲆᐃⵠᐃᐃᐃΔ > 0) {
            k.ⵠΔᐃⵠ(oo);
            if ((a = bx.ΔⲆⵠⲆ.ⲆᐃⵠᐃᐃᐃΔ) > 1) {
              Om(a, k);
            }
          }
          k = dx.ᐃⵠᐃⵠⵠⵠⵠ;
          if (bx.ΔⲆⵠⲆ.ΔΔⵠⵠΔ > 0) {
            k.ⵠΔᐃⵠ(oo);
            if ((a = bx.ΔⲆⵠⲆ.ΔΔⵠⵠΔ) > Al) {
              Om(a, k);
            }
          }
        }
      }
    }
  }
  function Wm() {
    var a = dx.ᐃⵠΔⵠΔ;
    var b = a.id;
    if (a.ⵠⲆⵠΔⲆ === 1 && a.display === 1) {
      if (ⵠΔᐃΔⲆ[b] === undefined) {
        ⵠΔᐃΔⲆ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = qt[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (Fh <= e.length) {
            f = Math.max(0, d.measureText(e[Rl]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= Ss) {
            f = Math.max(f, d.measureText(e[j]).width);
          }
          d.font = "14px Baloo Paaji";
          rt = re;
          for (; rt < e.length; rt++) {
            f = Math.max(f, d.measureText(e[rt]).width);
          }
          var g = f + 35;
          var h = 0;
          h = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = h;
          tb(d, ne, Gr, g, h, no);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = Ej;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[j], 15, 55);
            h = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            rt = 2;
            for (; e.length > rt; rt++) {
              d.fillText(e[rt], is, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (Al === a.ⵠⲆⵠᐃ) {
        Em(oo, ⵠΔᐃΔⲆ[b], a.x, a.y);
      } else if (a.x - 80 + ⵠΔᐃΔⲆ[b].width > ro) {
        Em(oo, ⵠΔᐃΔⲆ[b], ro - ⵠΔᐃΔⲆ[b].width - 10, a.y - ⵠΔᐃΔⲆ[b].height - 10);
      } else {
        Em(oo, ⵠΔᐃΔⲆ[b], a.x - 80, a.y - ⵠΔᐃΔⲆ[b].height - 10);
      }
    }
  }
  function Lm() {
    if (bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length > 0) {
      var b = {
        x: dx.ΔΔᐃΔⲆ.translate.x,
        y: dx.ΔΔᐃΔⲆ.translate.y - rq * 120
      };
    } else {
      b = {
        x: dx.ΔΔᐃΔⲆ.translate.x,
        y: dx.ΔΔᐃΔⲆ.translate.y - rq * 50
      };
    }
    oo.globalAlpha = 0.8;
    var c = ΔΔ[Ur.ᐃⲆᐃⲆⲆᐃⵠ][ff.time];
    Em(oo, c, b.x, b.y);
    oo.globalAlpha = 1;
    if (dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.x > -1) {
      oo.fillStyle = "#660000";
      ob(oo, b.x + dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.x * rq, b.y + rq * dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.y, rq * jt);
      oo.fill();
    }
    var d = rq;
    for (var f = dx.ΔΔᐃΔⲆ.ⲆΔⲆΔ, g = ne; f.length > g; g++) {
      var h = f[g];
      ff.time;
      oo.fillStyle = "#ff0000";
      ob(oo, b.x + h.x / (ff.ΔΔⲆⲆⲆ * ba) * 193 * rq, b.y + rq * (h.y / (yg * ff.ᐃⵠⵠⵠⵠ) * 193), rq * 2);
      oo.fill();
    }
    var i = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
    if (i) {
      oo.fillStyle = ff.time ? "#fff" : "#e39716";
      ob(oo, b.x + i.x / (ff.ΔΔⲆⲆⲆ * 100) * 193 * rq, b.y + rq * (i.y / (ff.ᐃⵠⵠⵠⵠ * rj) * 193), rq * 4);
      oo.fill();
    }
    rq = d;
  }
  function Om(a, b) {
    ΔΔ[Ur.ᐃⲆ][a] ||= Wu(rq, "x" + a, Bo, "#FFF");
    var c = ΔΔ[Ur.ᐃⲆ][a];
    var d = b.info.translate.x + b.info.Ⲇⵠ[0].width - c.width - rq * 14;
    var e = b.info.translate.y + b.info.Ⲇⵠ[0].height - c.height - rq * zj;
    if (b.info.state == gw) {
      e += rq * Os;
    }
    Em(oo, c, d, e);
  }
  ⵠΔᐃΔⲆ = [];
  ⵠᐃⵠᐃⲆΔⲆ = [];
  var Nm = [];
  function qm() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ΔⲆⵠΔⲆΔⵠ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2, -ⵠΔⵠ / qd, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function Hm() {
    var b = bx.ⵠⵠΔᐃⵠ;
    var c = dx.ᐃΔΔⵠ;
    if (b.ᐃⲆΔ) {
      b.ᐃⲆΔ = false;
      var d = b.ⲆⲆΔⵠᐃ;
      var e = c.ΔⲆ.width;
      var f = c.ΔⲆ.height;
      var g = c.Ⲇ;
      var i = ff.ⲆΔⲆΔ;
      var a = Ps;
      g.clearRect(0, 0, e, f);
      g.drawImage(c.Ⲇⵠ, 0, Tg);
      for (var j = 0; j < d.length; j++) {
        var k = i[d[j]];
        if ((ff.mode !== uw.ΔⲆΔⲆⲆⵠᐃ || k.ⵠᐃΔⵠⲆ !== "spectator") && (uw.ΔΔⵠⲆΔ !== ff.mode || k.ᐃᐃΔᐃ !== uw.ΔⲆⲆⵠᐃᐃᐃ)) {
          if (d[j] == bx.id) {
            a = A;
            if (ff.mode === uw.ΔⵠⵠⲆᐃ && uw.ⵠⵠⲆᐃᐃⲆⵠ === k.ᐃᐃΔᐃ) {
              Ⲇᐃ = "#FF0000";
            } else {
              Ⲇᐃ = "#FFF";
            }
          } else if (ff.mode === uw.ΔⵠⵠⲆᐃ && k.ᐃᐃΔᐃ === uw.ⵠⵠⲆᐃᐃⲆⵠ) {
            Ⲇᐃ = "#990000";
          } else {
            Ⲇᐃ = "#A1BDCD";
          }
          g.drawImage(Wu(rq, "" + (j + Fh), rq * 15, Ⲇᐃ), rq * 20, rq * (40 + j * 22));
          k.ⵠᐃΔⲆⵠΔⲆ ||= Wu(rq, k.ⵠᐃΔⵠⲆ, Hb * rq, Ⲇᐃ, undefined, undefined, Hj, undefined, rq * 110);
          g.drawImage(k.ⵠᐃΔⲆⵠΔⲆ, rq * 39, rq * (40 + j * 22));
          g.drawImage(Wu(rq, ᐃⵠΔⵠ.ΔⲆᐃΔⵠΔⵠ(k.ⵠⲆΔⵠΔ), rq * 15, Ⲇᐃ), rq * 156, rq * (40 + j * 22));
        }
      }
      if (!a) {
        if (ff.mode === uw.ⵠΔⵠⵠⲆ || ff.mode === uw.ΔⵠⵠⲆᐃ || ff.mode === uw.ΔᐃⵠΔᐃ || uw.ⵠⲆΔⵠⵠΔᐃ === ff.mode || ff.mode === uw.ΔΔⲆΔⵠ || ff.mode === uw.ΔⲆΔⲆⲆⵠᐃ && !bx.ᐃᐃΔᐃⲆⲆⵠ || uw.ΔΔⵠⲆΔ === ff.mode && !bx.ᐃⵠⲆⵠⲆ) {
          g.drawImage(ΔΔ[Ur.ⵠⲆΔⲆᐃⵠⲆ], Zl * rq, (46 + j * 22) * rq);
          g.drawImage(Wu(rq, ᐃⵠΔⵠ.ΔⲆᐃΔⵠΔⵠ(ff.ⲆΔⲆΔ[bx.id].ⵠⲆΔⵠΔ), rq * 15, "#FFF"), rq * 100, rq * (46 + j * 22));
        }
      }
    }
    Em(oo, c.ΔⲆ, c.translate.x, c.translate.y);
  }
  function Um(a) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = _i;
      }
      var b = (Al - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
    } else {
      c = Qs;
      d = 0;
    }
    var e = ΔΔ[a][ff.time];
    ⲆᐃΔ = -e.width;
    ⵠΔⵠ = -e.height;
    Em(oo, e, -ⲆᐃΔ / lt + c, -ⵠΔⵠ / 2 + d, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function Ym() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == En) {
        this.ΔΔΔ.ᐃⲆΔ = cg;
      }
      var a = (Ag - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    Ⲇⵠ = ΔΔ[Ur.ΔⲆᐃᐃⲆ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2 + b, -ⵠΔⵠ / Ss + c, ⲆᐃΔ, ⵠΔⵠ);
    if (this.lock) {
      Ⲇⵠ = ΔΔ[Ur.ⵠᐃⵠΔΔ][ff.time];
      ⲆᐃΔ = -Ⲇⵠ.width;
      ⵠΔⵠ = -Ⲇⵠ.height;
      Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2 + b - rq * 1, -ⵠΔⵠ / 2 + c, ⲆᐃΔ, ⵠΔⵠ);
    }
    oo.restore();
  }
  function Km() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ⲆᐃΔⵠⲆᐃⲆ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2, -ⵠΔⵠ / Cl, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function Vm() {
    var b = bx.ⵠⲆⵠᐃ;
    if (!b.Δᐃᐃⵠᐃ && b.ⵠΔⲆᐃ > 0) {
      var c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      if (!c) {
        return;
      }
      oo.save();
      if (Nl === es[b.ⵠΔⲆᐃ].ᐃᐃᐃᐃ && b.mode === qn) {
        oo.translate(bx.ᐃᐃⵠ.x + c.x, bx.ᐃᐃⵠ.y + c.y);
        oo.rotate(c.angle);
        oo.translate(120, uh);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = bx.ᐃᐃⵠ.x + (d - d % P + 50);
        e = bx.ᐃᐃⵠ.y + (e - e % 100 + 50);
        oo.translate(d, e);
      }
      var f = ΔΔ[b.ⵠΔⲆᐃ][ff.time];
      oo.globalAlpha = 0.5;
      Em(oo, f, -f.width / 2, -f.height / Ss);
      oo.globalAlpha = Zq;
      oo.restore();
      if (es[b.ⵠΔⲆᐃ].ᐃᐃᐃᐃ === _a) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[Nl] = Wu(rq, qt[ΔΔᐃⵠ.ΔᐃΔⵠⵠⲆΔ], 20, "#e2c340");
          } else {
            b.label[$l] = Wu(rq, qt[ΔΔᐃⵠ.ⲆΔⵠⵠᐃΔᐃ], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Em(oo, f, oq + -f.width / 2, dx.ⲆⲆⲆΔ.y - 26);
      }
    }
    if (b.Δᐃᐃⵠᐃ) {
      var g = b.timeout.ᐃⲆΔ();
      for (var i = ms; b.ᐃⵠΔᐃΔ.length > i; i++) {
        var j = b.ᐃⵠΔᐃΔ[i];
        if (j.id == b.id) {
          var k = rq * 42;
          var m = rq * 17;
          tb(oo, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ⲆᐃⲆ) * k, j.info.width, b.timeout.ⲆᐃⲆ * k + m, rq * 10);
          oo.fillStyle = "#55B973";
          oo.fill();
          oo.globalAlpha = 0.8;
          j.ⵠΔᐃⵠ(oo);
        } else {
          oo.globalAlpha = 0.5;
          j.ⵠΔᐃⵠ(oo);
        }
        oo.globalAlpha = 1;
      }
      if (g) {
        b.Δᐃᐃⵠᐃ = false;
        b.timeout.ⲆᐃⲆ = Gr;
        b.timeout.ⲆⵠΔ = false;
      }
      return true;
    }
    for (i = 0; b.ᐃⵠΔᐃΔ.length > i; i++) {
      b.ᐃⵠΔᐃΔ[i].ⵠΔᐃⵠ(oo);
    }
    return xg;
  }
  function Zm() {
    oo.save();
    var a = rq;
    if (bx.ⲆⲆⲆΔ.ᐃΔⵠⵠⵠ.x < 0.25) {
      oo.globalAlpha = bx.ⲆⲆⲆΔ.ⲆⵠⵠᐃⲆΔⵠ.ⲆᐃⲆ;
    }
    var b = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length > 0 ? -70 : vq;
    if (bx.Ⲇⵠⵠⵠ.open || bx.ΔⵠΔᐃⲆ.open && bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ΔΔΔᐃ) != -1 || bx.ⵠΔⲆⲆ.open && bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⵠⵠΔᐃ) != -1 || bx.ⲆΔᐃⵠ.open && -Fh != bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ΔΔΔᐃ) || bx.ⲆΔⵠⵠⵠ.open && bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ΔΔⵠᐃⲆ) != -1 || bx.ΔⲆⵠⲆ.open && (bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ΔΔΔᐃ) != -1 || bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⵠΔⵠΔⵠ) != -1)) {
      b -= rq * 50;
    }
    oo.translate((ro - rq * 950) / 2, b);
    oo.fillStyle = "#69A148";
    oo.fillRect(this.translate.x + rq * 37, this.translate.y + rq * 17, bx.ⲆⲆⲆΔ.ᐃΔⵠⵠⵠ.x * 178 * rq, rq * 18);
    oo.globalAlpha = 1;
    if (bx.ⲆⲆⲆΔ.ⵠᐃᐃⲆⵠⲆΔ.x < 0.35) {
      oo.fillStyle = "#8F050A";
      oo.globalAlpha = bx.ⲆⲆⲆΔ.ⵠᐃⵠΔⲆᐃΔ.ⲆᐃⲆ;
      oo.fillRect(this.translate.x + rq * 277, this.translate.y + rq * 17, rq * 178, rq * 18);
      oo.globalAlpha = Ej;
    }
    oo.fillStyle = "#AF352A";
    oo.fillRect(this.translate.x + rq * 277, this.translate.y + Ua * rq, bx.ⲆⲆⲆΔ.ⵠᐃᐃⲆⵠⲆΔ.x * 178 * rq, rq * 18);
    if (bx.ⲆⲆⲆΔ.ᐃⵠⵠⲆΔ.x < 0.35) {
      oo.fillStyle = "#366B91";
      oo.globalAlpha = bx.ⲆⲆⲆΔ.ⵠᐃⵠΔⲆⲆⲆ.ⲆᐃⲆ;
      oo.fillRect(this.translate.x + rq * 517, this.translate.y + rq * 17, rq * 178, rq * 18);
      oo.globalAlpha = 1;
    }
    oo.fillStyle = "#669BB1";
    oo.fillRect(this.translate.x + rq * 517, this.translate.y + rq * 17, rq * (bx.ⲆⲆⲆΔ.ᐃⵠⵠⲆΔ.x * 178), rq * 18);
    if (bx.ⲆⲆⲆΔ.ᐃⵠⵠⲆΔ.x > 0.99) {
      if (bx.ⲆⲆⲆΔ.ᐃⵠⲆⵠⵠ.x < 0.35) {
        oo.fillStyle = "#6C4036";
        oo.globalAlpha = bx.ⲆⲆⲆΔ.Δⵠⵠᐃᐃᐃⵠ.ⲆᐃⲆ;
        oo.fillRect(this.translate.x + rq * 517, this.translate.y + rq * bh, rq * 178, rq * 18);
        oo.globalAlpha = 1;
      }
      oo.fillStyle = "#9C4036";
      oo.fillRect(this.translate.x + rq * 517, this.translate.y + rq * kh, (ie - bx.ⲆⲆⲆΔ.ᐃⵠⲆⵠⵠ.x) * 178 * rq, rq * at);
    }
    if (bx.ⲆⲆⲆΔ.ⲆⵠⲆⵠⲆⲆⵠ.x < 0.35) {
      oo.fillStyle = "#001A57";
      oo.globalAlpha = bx.ⲆⲆⲆΔ.ᐃᐃⲆⵠⵠⵠⲆ.ⲆᐃⲆ;
      oo.fillRect(this.translate.x + rq * 757, this.translate.y + rq * 17, rq * 178, rq * Ul);
      oo.globalAlpha = 1;
    }
    oo.fillStyle = "#074A87";
    oo.fillRect(this.translate.x + rq * 757, this.translate.y + rq * 17, rq * (bx.ⲆⲆⲆΔ.ⲆⵠⲆⵠⲆⲆⵠ.x * 178), rq * 18);
    rq = a;
    Em(oo, this.Ⲇⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    oo.restore();
    if (bx.ⲆⲆⲆΔ.ΔⲆΔⵠᐃⵠΔ.x < 0.99) {
      var c = Math.floor(oq - ΔΔ[Ur.ⲆΔⲆΔⲆᐃⵠ].width / 2);
      b += this.translate.y - ΔΔ[Ur.ⲆΔⲆΔⲆᐃⵠ].height - pr * rq;
      oo.fillStyle = "#BBE8EF";
      oo.fillRect(c + ha, b + jt * rq, bx.ⲆⲆⲆΔ.ΔⲆΔⵠᐃⵠΔ.x * (rq * 588), rq * 10);
      if (bx.ⲆⲆⲆΔ.ΔⲆΔⵠᐃⵠΔ.x < 0.35) {
        oo.fillStyle = "#9BA8AF";
        oo.globalAlpha = bx.ⲆⲆⲆΔ.ΔᐃᐃⲆᐃⲆᐃ.ⲆᐃⲆ;
        oo.fillRect(c + Ku, b + Ya, rq * 588, rq * 10);
        oo.globalAlpha = Ej;
      }
      Em(oo, ΔΔ[Ur.ⲆΔⲆΔⲆᐃⵠ], c, b);
      this.y = b;
    }
  }
  function Xm() {
    var a = bx.ⲆΔⲆΔⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      oo.save();
      var c = ΔΔ[Ur.ᐃⵠⵠⲆᐃᐃΔ];
      oo.translate(c.width - rq * 2, dx.ⲆⲆⲆΔ.translate.y - rq * 125);
      var d = -c.width / zk + 10;
      var e = -c.height / 2 - ug;
      Em(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = rq * gg;
      oo.strokeStyle = Ur.ᐃⲆᐃᐃᐃⵠⵠ[ff.time];
      oo.lineCap = "round";
      oo.arc(9, e + c.height / Zt, rq * 25, Gr, Math.PI * Pt * a.timeout.ⲆᐃⲆ);
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆᐃⲆ = Ih;
        a.timeout.ⲆⵠΔ = false;
      }
    }
  }
  function $m() {
    var a = bx.ⲆᐃⲆΔΔ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      oo.save();
      var c = ΔΔ[Ur.ᐃᐃΔⲆΔⵠⲆ];
      oo.translate(c.width - rq * 12, dx.ⲆⲆⲆΔ.translate.y - rq * 190);
      var e = -c.width / Ss + E;
      var f = -c.height / 2 - 4;
      Em(oo, c, e, f);
      oo.beginPath();
      oo.lineWidth = rq * 5;
      oo.strokeStyle = Ur.ᐃⲆᐃᐃᐃⵠⵠ[ff.time];
      oo.lineCap = "round";
      oo.arc(Ol, f + c.height / hc, rq * 25, 0, a.timeout.ⲆᐃⲆ * (Math.PI * Cl));
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = d;
        a.timeout.ⲆᐃⲆ = 0;
        a.timeout.ⲆⵠΔ = false;
      }
    }
  }
  function ep() {
    var a = bx.ⵠⲆⵠⲆΔ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      oo.save();
      var c = ΔΔ[Ur.ⵠᐃⲆΔⵠⵠⵠ];
      var d = ΔΔ[Ur.ⲆᐃⵠⲆΔΔⲆ].height + rq * 25;
      oo.translate(c.width, dx.ⲆⲆⲆΔ.translate.y - rq * 188 - d);
      var e = -c.width / hc - Tt;
      var f = -c.height / 2 - Ph;
      Em(oo, c, e + wr, f);
      oo.beginPath();
      oo.lineWidth = rq * Ui;
      oo.strokeStyle = Ur.ᐃⵠΔⵠΔⲆⵠ[ff.time];
      oo.lineCap = "round";
      oo.arc(Nl, f + c.height / 2, rq * 25, 0, a.timeout.ⲆᐃⲆ * (Math.PI * 2));
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆᐃⲆ = Nl;
        a.timeout.ⲆⵠΔ = vl;
      }
    }
  }
  function ip() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ᐃΔᐃⲆΔ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / Pt, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function tp(a) {
    if ((a = a / 100) <= 0.95) {
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.angle);
      if (this.ΔΔΔ.ᐃⲆΔ) {
        if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && En == this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ) {
          this.ΔΔΔ.ᐃⲆΔ = Ao;
        }
        var b = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
        var c = b * Math.sin(this.ΔΔΔ.angle - this.angle);
        var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
      } else {
        c = 0;
        d = Cn;
      }
      oo.globalAlpha = 0.5;
      ab(oo, c, d, rq * 28, a);
      eb(oo, null, "#000000", rq * 18);
      oo.globalAlpha = jq;
      ab(oo, c, d, rq * 28, a);
      eb(oo, null, Ur.ⲆⲆᐃΔⲆᐃⲆ[ff.time], rq * 6);
      oo.restore();
    }
  }
  function np(a) {
    if ((a = a / 100) <= 0.8) {
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.angle);
      if (this.ΔΔΔ.ᐃⲆΔ) {
        if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && hr == this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ) {
          this.ΔΔΔ.ᐃⲆΔ = Sk;
        }
        var b = rq * (xf * (Gs - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
        var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ΔΔΔ.angle - this.angle);
      } else {
        c = 0;
        d = qn;
      }
      oo.globalAlpha = 0.5;
      ab(oo, c, d, rq * Rr, a);
      eb(oo, null, "#000000", rq * 18);
      oo.globalAlpha = Gs;
      ab(oo, c, d, rq * Kn, a);
      eb(oo, null, Ur.ᐃⵠᐃⵠⲆⵠⲆ[ff.time], rq * 6);
      oo.restore();
    }
  }
  function op() {
    var a = ff.Δⵠⵠⵠⵠ;
    var b = ΔΔ[Ur.ⵠⵠᐃⲆΔᐃⵠ][ff.time];
    Em(oo, b, a.translate.x, a.translate.y);
    oo.save();
    oo.translate(a.translate.x + b.width / re, a.translate.y + b.height / tg);
    ff.Δⵠⵠⵠⵠ.now = (new Date().getTime() - a.ΔᐃΔⲆⵠ + a.ᐃᐃⵠᐃⲆ) % uw.ᐃΔⵠ;
    var c = ff.Δⵠⵠⵠⵠ.now * (Xh * Math.PI) / uw.ᐃΔⵠ - Math.PI / Zt;
    oo.rotate(c);
    Em(oo, ΔΔ[Ur.ΔⲆⵠᐃⵠⲆᐃ], -b.width / qd, -b.height / 2);
    oo.restore();
  }
  function rp(a) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = ds;
      }
      var b = rq * (xf * (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      c = Cq;
      d = Tg;
    }
    if (this.ΔⲆᐃΔⲆ.ᐃⲆΔ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    Ⲇⵠ = ΔΔ[Ur.ΔⲆΔⲆᐃ][Math.floor(this.id + this.color) % cd][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width * this.ΔⲆᐃΔⲆ.ⲆᐃⲆ;
    ⵠΔⵠ = this.ΔⲆᐃΔⲆ.ⲆᐃⲆ * -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / re + c, -ⵠΔⵠ / 2 + d, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function ap(a) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == na) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var b = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      c = _a;
      d = 0;
    }
    Ⲇⵠ = ΔΔ[a][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / tg + c, -ⵠΔⵠ / 2 + d, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function sp() {
    var a = -8;
    if (bx.ΔⲆᐃΔΔ.enabled) {
      var b = ΔΔ[Ur.ⵠⵠⵠⲆᐃⲆⲆ];
      Em(oo, b, bx.ΔⲆᐃΔΔ.translate.x, bx.ΔⲆᐃΔΔ.translate.y + a);
      a += 70;
    }
    if (bx.ᐃΔΔⲆⲆⲆⲆ === 1) {
      b = ΔΔ[Ur.ΔΔⵠᐃⵠᐃᐃ];
      Em(oo, b, bx.ΔⲆᐃΔΔ.translate.x, bx.ΔⲆᐃΔΔ.translate.y + a);
      a += 70;
    } else if (bx.ⲆⲆⲆΔ.ᐃⵠⵠⲆΔ.x < 0.25 || bx.ⲆⲆⲆΔ.ⵠᐃᐃⲆⵠⲆΔ.x < 0.25 || bx.ⲆⲆⲆΔ.ⲆⵠⲆⵠⲆⲆⵠ.x < 0.25 || bx.ⲆⲆⲆΔ.ΔⲆΔⵠᐃⵠΔ.x < 0.25 || bx.ⲆⲆⲆΔ.ᐃⵠⲆⵠⵠ.x < 0.25) {
      b = ΔΔ[Ur.ᐃⵠⵠⵠⵠΔⲆ];
      Em(oo, b, bx.ΔⲆᐃΔΔ.translate.x, bx.ΔⲆᐃΔΔ.translate.y + a);
      a += 70;
    }
    if (bx.ⵠⵠΔⵠᐃ > 0) {
      b = ΔΔ[Ur.ⲆⵠΔΔⵠⵠⲆ];
      Em(oo, b, bx.ΔⲆᐃΔΔ.translate.x, bx.ΔⲆᐃΔΔ.translate.y + a);
      var c = Nm[bx.ⵠⵠΔⵠᐃ];
      if (Zi === c) {
        c = Wu(rq, bx.ⵠⵠΔⵠᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", gq);
        Nm[bx.ⵠⵠΔⵠᐃ] = c;
      }
      if (bx.ⵠⵠΔⵠᐃ < Mn) {
        Em(oo, c, bx.ΔⲆᐃΔΔ.translate.x - 39, bx.ΔⲆᐃΔΔ.translate.y + a + 20);
      } else {
        Em(oo, c, bx.ΔⲆᐃΔΔ.translate.x - 46, bx.ΔⲆᐃΔΔ.translate.y + a + zl);
      }
    }
  }
  function hp() {
    var a = bx.ⵠⲆⵠᐃ;
    if (a.Δᐃᐃⵠᐃ) {
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + b.x, bx.ᐃᐃⵠ.y + b.y);
      var c = ΔΔ[Ur.ΔΔᐃⲆⲆⲆⲆ];
      var d = -c.width / 2;
      var e = -c.height / sh - rq * 125;
      Em(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = rq * Vh;
      oo.strokeStyle = Ur.ⲆⲆᐃΔⲆᐃⲆ[ff.time];
      oo.lineCap = "round";
      oo.arc(0, e + c.height / Pt, rq * 25, qk, Math.PI * 2 * a.timeout.ⲆᐃⲆ);
      oo.stroke();
      oo.restore();
    }
  }
  function lp(b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && d == this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var c = xf * (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600 * rq;
      var e = Math.sin(this.ΔΔΔ.angle - this.angle) * c;
      var f = c * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      e = gr;
      f = 0;
    }
    var g = ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ].length;
    Ⲇⵠ = ΔΔ[Ur.ΔⵠᐃⲆⵠᐃᐃ][(this.ΔⲆᐃΔ + this.Δⵠ % 2) % g][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    var h = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
    if (h && (bx.id === this.ΔΔΔⵠ || bx.ⵠⵠᐃⲆᐃᐃⲆ(this.ΔΔΔⵠ))) {
      if (ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, h) < 550) {
        this.opacity = Math.max(this.opacity - xf, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + xf, Ok);
      }
    } else if (h && ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ]) < 150) {
      this.opacity = Math.max(this.opacity - xf, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + xf, 1);
    }
    var i = oo.globalAlpha;
    oo.globalAlpha *= this.opacity;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / ld + e, -ⵠΔⵠ / 2 + f, ⲆᐃΔ, ⵠΔⵠ);
    oo.globalAlpha = i;
    oo.restore();
  }
  function gp() {
    var a = bx.ΔᐃΔⵠⵠ;
    if (a.wait) {
      var b = a.timeout.ᐃⲆΔ();
      oo.save();
      var c = ΔΔ[Ur.ⲆᐃⵠⲆΔΔⲆ];
      oo.translate(c.width - rq * 2, dx.ⲆⲆⲆΔ.translate.y - rq * 60);
      var d = -c.width / 2 - vk;
      var e = -c.height / Ss - 4;
      Em(oo, c, d, e);
      oo.beginPath();
      oo.lineWidth = rq * 5;
      oo.strokeStyle = Ur.ᐃⵠΔⵠΔⲆⵠ[ff.time];
      oo.lineCap = "round";
      oo.arc(qk, e + c.height / 2, rq * 25, gr, Math.PI * 2 * a.timeout.ⲆᐃⲆ);
      oo.stroke();
      oo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ⲆᐃⲆ = ne;
        a.timeout.ⲆⵠΔ = na;
      }
    }
  }
  function up() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ᐃᐃⵠⲆⵠ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function bp() {
    for (var b = bx.ⵠⵠΔΔ, c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ], d = 0; b.ⲆΔⲆᐃᐃ.length > d; d++) {
      var e = b.ⲆΔⲆᐃᐃ[d];
      var f = false;
      if ((c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ]) && (c.right == e.id || e.id == c.ΔΔᐃΔΔ && c.ΔΔᐃΔΔ > 0)) {
        f = true;
        Em(oo, e.info.Ⲇⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⵠΔᐃⵠ(oo);
      }
      var g = bx.ⵠⵠΔΔ.ⵠΔⲆ[e.id];
      if (g > Ej) {
        Om(g, e);
      }
      if (g > tj) {
        Dm(d, e, f);
      }
      var h = bx.Ⲇⵠⵠⵠ;
      if (h.open && (h.id < 0 || e.id == h.id) && (!h.lock || bx.id == h.ΔΔΔⵠ)) {
        dx.ΔⲆⲆⵠⵠ[e.id].ⵠΔᐃⵠ(oo);
      }
      if (bx.ΔⵠΔᐃⲆ.open && e.id == bs.ΔΔΔᐃ) {
        dx.ΔⲆⲆⵠⵠ[e.id].ⵠΔᐃⵠ(oo);
      }
      if (bx.ⲆΔⵠⵠⵠ.open && e.id == bs.ΔΔⵠᐃⲆ) {
        dx.ΔⲆⲆⵠⵠ[e.id].ⵠΔᐃⵠ(oo);
      }
      if (bx.ⵠΔⲆⲆ.open && bs.ᐃⵠⵠΔᐃ == e.id) {
        dx.ΔⲆⲆⵠⵠ[e.id].ⵠΔᐃⵠ(oo);
      }
      if (bx.ⲆΔᐃⵠ.open && bs.ΔΔΔᐃ == e.id) {
        dx.ΔⲆⲆⵠⵠ[e.id].ⵠΔᐃⵠ(oo);
      }
      if (bx.ΔⲆⵠⲆ.open && (e.id == bs.ΔΔΔᐃ || e.id == bs.ⵠΔⵠΔⵠ)) {
        dx.ΔⲆⲆⵠⵠ[e.id].ⵠΔᐃⵠ(oo);
      }
    }
    if (e && b.max > d) {
      var j = ΔΔ[Ur.ⲆΔⵠⲆⵠⲆⲆ][2];
      ⵠⵠ = e.info.translate.x;
      ᐃᐃⲆ = e.info.translate.y;
      ΔⲆᐃΔ = ag;
      for (; b.max > d; d++, ΔⲆᐃΔ++) {
        Em(oo, j, ⵠⵠ + (j.width + Vh) * ΔⲆᐃΔ, ᐃᐃⲆ);
      }
    }
  }
  function vp(b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = Ta;
      }
      var c = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var d = Math.sin(this.ΔΔΔ.angle - this.angle) * c;
      var e = c * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      d = Nl;
      e = 0;
    }
    if (Ur.ⲆⵠᐃⵠΔᐃⲆ === b && !ff.transition) {
      var f = 0;
      for (var g = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ], h = ur; g.length > h; h++) {
        var i = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(g[h], this);
        if (i < 140 && i > 35) {
          f = gr;
          break;
        }
        if (i <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - xf / 1.5) : Math.min($l, this.opacity + xf / 1.5);
      oo.globalAlpha = this.opacity;
    }
    Ⲇⵠ = ΔΔ[b][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2 + d, -ⵠΔⵠ / 2 + e, ⲆᐃΔ, ⵠΔⵠ);
    oo.globalAlpha = 1;
    oo.restore();
  }
  function dp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ⵠΔⵠⵠᐃΔⵠ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / wr, -ⵠΔⵠ / tg, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  var cp = 0;
  function $u() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    var a = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + xf / Xh, 1.8) : Math.max(this.scale - xf, 1);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    this.ΔⲆᐃⲆ = a < 350 ? Math.max(0, this.ΔⲆᐃⲆ - xf * 2.2) : Math.min(Ok, this.ΔⲆᐃⲆ + xf * 2.2);
    b = (this.info & 1) === Nl ? ΔΔ[Ur.ⵠⲆΔⵠⲆⵠⲆ][ff.time] : ΔΔ[Ur.ⲆⲆᐃᐃΔᐃᐃ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width * this.scale;
    ⵠΔⵠ = this.scale * (-b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    oo.globalAlpha = 1 - this.ΔⲆᐃⲆ;
    Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / 4, ⲆᐃΔ / Cl, ⵠΔⵠ / 2);
    b = this.info & 1 ? ΔΔ[Ur.ⲆᐃⵠΔΔⲆᐃ][ff.time] : ΔΔ[Ur.ⲆⵠΔΔⲆ][ff.time];
    ⲆᐃΔ = -b.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    ⵠΔⵠ = -b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    oo.globalAlpha = this.ΔⲆᐃⲆ;
    Em(oo, b, -ⲆᐃΔ / _g, -ⵠΔⵠ / _g, ⲆᐃΔ / Ss, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = (0.6 - this.ΔΔΔ.ⲆᐃⲆ) * (Ue - this.ΔⲆᐃⲆ);
      var b = ΔΔ[Ur.ΔⵠⲆΔⵠᐃⵠ];
      ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width * this.scale;
      ⵠΔⵠ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.height);
      Em(oo, b, -ⲆᐃΔ / uj, -ⵠΔⵠ / 4, ⲆᐃΔ / hc, ⵠΔⵠ / 2);
      oo.globalAlpha = (0.6 - this.ΔΔΔ.ⲆᐃⲆ) * this.ΔⲆᐃⲆ;
      b = ΔΔ[Ur.ᐃⲆᐃⵠⵠΔΔ];
      ⲆᐃΔ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width);
      ⵠΔⵠ = -b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
      Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    b = (this.info & ie) === uh ? ΔΔ[Ur.ⲆⲆΔᐃᐃᐃᐃ][ff.time] : ΔΔ[Ur.ΔᐃΔᐃⵠᐃᐃ][ff.time];
    ⲆᐃΔ = -b.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    ⵠΔⵠ = -b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    oo.save();
    oo.translate(rq * -c, rq * 0);
    oo.rotate(this.rotate.ⲆᐃⲆ);
    oo.globalAlpha = this.ΔⲆᐃⲆ;
    Em(oo, b, -ⲆᐃΔ * rq / uj, -ⵠΔⵠ * rq / Db, ⲆᐃΔ / 2, ⵠΔⵠ / Cl);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = (0.6 - this.ΔΔΔ.ⲆᐃⲆ) * this.ΔⲆᐃⲆ;
      b = ΔΔ[Ur.ⲆΔⲆⲆⵠⲆⵠ];
      Em(oo, b, -ⲆᐃΔ * rq / 4, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / Tt, ⵠΔⵠ / 2);
      oo.globalAlpha = Fh;
    }
    oo.restore();
    b = (this.info & zs) === qk ? ΔΔ[Ur.ⵠⵠⵠΔᐃΔᐃ][ff.time] : ΔΔ[Ur.ΔᐃᐃΔⵠΔⲆ][ff.time];
    oo.save();
    oo.translate(c * rq, rq * 0);
    oo.rotate(-this.rotate.ⲆᐃⲆ);
    oo.globalAlpha = this.ΔⲆᐃⲆ;
    Em(oo, b, rq * -ⲆᐃΔ / 4, -ⵠΔⵠ * rq / ug, ⲆᐃΔ / zk, ⵠΔⵠ / hc);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = this.ΔⲆᐃⲆ * (0.6 - this.ΔΔΔ.ⲆᐃⲆ);
      b = ΔΔ[Ur.ΔΔᐃΔⲆⵠᐃ];
      Em(oo, b, rq * -ⲆᐃΔ / 4, -ⵠΔⵠ * rq / 4, ⲆᐃΔ / 2, ⵠΔⵠ / lt);
      oo.globalAlpha = 1;
    }
    oo.globalAlpha = Oj;
    oo.restore();
    oo.restore();
  }
  function pp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - xf, 1);
    }
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = uh === this.info ? ΔΔ[Ur.ᐃΔᐃᐃⵠ][ff.time] : ΔΔ[Ur.ⲆⵠΔᐃⲆⵠΔ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width * this.scale;
    ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    Em(oo, a, -ⲆᐃΔ / Ph, -ⵠΔⵠ / xt, ⲆᐃΔ / 2, ⵠΔⵠ / Ss);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == xg) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var a = ΔΔ[Ur.ⲆᐃⵠⲆᐃᐃⵠ];
      Em(oo, a, -ⲆᐃΔ / Aq, -ⵠΔⵠ / Ph, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    a = this.info === Cn ? ΔΔ[Ur.ⵠⵠⲆᐃⲆΔⲆ][ff.time] : ΔΔ[Ur.ΔⵠᐃΔᐃΔⲆ][ff.time];
    ⲆᐃΔ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width);
    ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    oo.save();
    oo.translate(rq * -40, rq * bb);
    oo.rotate(this.rotate.ⲆᐃⲆ);
    Em(oo, a, -ⲆᐃΔ * rq / 4, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ⲆⲆΔΔΔⵠΔ];
      Em(oo, a, rq * -ⲆᐃΔ / 4, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / vk, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = this.info === qk ? ΔΔ[Ur.ⲆΔΔⵠᐃⵠⵠ][ff.time] : ΔΔ[Ur.ⵠⵠⵠⲆⲆⲆᐃ][ff.time];
    oo.save();
    oo.translate(rq * 40, rq * 10);
    oo.rotate(-this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * -ⲆᐃΔ / 4, -ⵠΔⵠ * rq / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ⵠᐃΔⵠⵠⵠⲆ];
      Em(oo, a, -ⲆᐃΔ * rq / 4, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      oo.globalAlpha = Al;
    }
    oo.restore();
    oo.restore();
  }
  function Cp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == hr) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = rq * ((1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ᐃᐃΔⲆⵠ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / vk, -Ⲇⵠ.height / 2);
    oo.restore();
  }
  function Tp(a, b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (a === Ur.ⲆⲆⵠⲆⵠ) {
      a = Ur.ⲆⵠⵠⲆⵠ;
      this.info = 36;
    }
    Ⲇⵠ = ΔΔ[a][this.info][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width / Zn;
    ⵠΔⵠ = -Ⲇⵠ.height / hc;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / zk, -ⵠΔⵠ / Xr, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == Sh) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var c = uv(this.info, Ⲇⵠ, ᐃᐃⲆⲆΔᐃᐃⵠᐃ);
      Em(oo, c, -ⲆᐃΔ / Xh, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = As;
    }
    oo.restore();
  }
  function fp() {
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    a = Ih === this.info ? ΔΔ[Ur.ⵠΔᐃⵠᐃ][ff.time] : ΔΔ[Ur.ⲆΔⵠᐃΔᐃΔ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width;
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.height;
    Em(oo, a, -ⲆᐃΔ / Pt, -ⵠΔⵠ / Cl, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && xg == this.ΔΔΔ.ⲆⵠΔ) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var a = ΔΔ[Ur.ⲆΔⵠⲆΔΔΔ];
      Em(oo, a, -ⲆᐃΔ / hc, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = Eo;
    }
    oo.restore();
  }
  function zp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && Y == this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = xf * (Ht - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600 * rq;
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
    } else {
      b = gr;
      c = qk;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ⲆᐃⵠⵠⲆ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / zk, -Ⲇⵠ.height / lt);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + co * xf) % (Math.PI * sh);
    }
    oo.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Ur.ΔΔⵠΔⲆᐃᐃ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / vk, -Ⲇⵠ.height / lt);
    oo.restore();
  }
  function yp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = En;
      }
      var b = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var c = b * Math.sin(this.ΔΔΔ.angle - this.angle);
      var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
    } else {
      c = Tg;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ⵠᐃᐃᐃΔᐃᐃ][ff.time];
      } else {
        f = ΔΔ[Ur.ΔⲆΔⲆⲆᐃⲆ][ff.time];
      }
      var g = -f.width * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      var h = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.height;
      Em(oo, f, -g / re + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Ur.ⵠⲆⵠΔᐃᐃⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ⲆΔⲆΔᐃ][ff.time];
      }
      oo.translate(vq, f.height / 2);
      Em(oo, f, c - f.width / qd, -f.height + d);
    }
    oo.restore();
  }
  function wp() {
    if (~this.info & 1) {
      this.ⲆⲆᐃΔᐃ = Math.max(this.ⲆⲆᐃΔᐃ - xf, 0);
      this.ⲆΔⲆⵠⲆᐃΔ += xf;
      if (this.ⲆΔⲆⵠⲆᐃΔ > 0.1) {
        this.ⲆΔⲆⵠⲆᐃΔ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ⵠᐃᐃⲆ.push(a);
      }
    } else {
      this.ⲆⲆᐃΔᐃ = Math.min(this.ⲆⲆᐃΔᐃ + xf, 2.2);
    }
    for (var b = 0; b < this.ⵠᐃᐃⲆ.length; b++) {
      a = this.ⵠᐃᐃⲆ[b];
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + a.x, bx.ᐃᐃⵠ.y + a.y);
      a.a = Math.min(1, a.a + xf / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= jt;
      } else {
        c = c > 0.8 ? (Zq - c) * Vh : aa;
      }
      oo.globalAlpha = c * 0.8;
      ob(oo, Ih, Rl, a.r);
      eb(oo, Ur.ⲆᐃᐃᐃΔΔΔ[ff.time]);
      oo.restore();
      if (a.a === Oj) {
        this.ⵠᐃᐃⲆ.splice(b, 1);
        b--;
      }
    }
  }
  function Pp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - xf, 1);
    }
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = uh === this.info ? ΔΔ[Ur.ᐃΔⲆᐃⲆ][ff.time] : ΔΔ[Ur.ΔΔᐃⲆΔᐃⲆ][ff.time];
    ⲆᐃΔ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width);
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.height * this.scale;
    Em(oo, a, -ⲆᐃΔ / 4, -ⵠΔⵠ / uj, ⲆᐃΔ / 2, ⵠΔⵠ / ld);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == d) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var a = ΔΔ[Ur.ΔᐃΔΔⲆᐃⵠ];
      Em(oo, a, -ⲆᐃΔ / rg, -ⵠΔⵠ / Ch, ⲆᐃΔ / Ss, ⵠΔⵠ / re);
      oo.globalAlpha = 1;
    }
    a = Rl === this.info ? ΔΔ[Ur.ᐃⵠᐃⲆⵠⵠⵠ][ff.time] : ΔΔ[Ur.ⲆΔⵠⲆᐃⲆⲆ][ff.time];
    ⲆᐃΔ = this.scale * (-a.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    oo.save();
    oo.translate(rq * -40, rq * 10);
    oo.rotate(this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * -ⲆᐃΔ / Yi, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / sh);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ΔΔⵠΔⵠΔⵠ];
      Em(oo, a, -ⲆᐃΔ * rq / 4, rq * -ⵠΔⵠ / hn, ⲆᐃΔ / 2, ⵠΔⵠ / re);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = this.info === Nl ? ΔΔ[Ur.ⵠΔⲆⲆⵠᐃⵠ][ff.time] : ΔΔ[Ur.ⲆⲆⵠΔᐃΔⲆ][ff.time];
    oo.save();
    oo.translate(rq * 40, rq * 10);
    oo.rotate(-this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * -ⲆᐃΔ / Ph, -ⵠΔⵠ * rq / Ph, ⲆᐃΔ / Pt, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ΔΔΔⵠᐃᐃⲆ];
      Em(oo, a, rq * -ⲆᐃΔ / 4, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.restore();
  }
  function Ap(a, b, c) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + b, bx.ᐃᐃⵠ.y + c);
    oo.rotate(this.angle);
    oo.translate(this.x - b, this.y - c);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[a][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -Ⲇⵠ.width;
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2, -ⵠΔⵠ / lt, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function kp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = rq * ((1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = _a;
      c = 0;
    }
    this.ᐃΔᐃⲆⵠΔᐃ = (this.ᐃΔᐃⲆⵠΔᐃ + xf * 3) % (Math.PI * 2);
    this.ⵠΔΔⵠΔᐃⲆ = (this.ⵠΔΔⵠΔᐃⲆ - xf * 3) % (Math.PI * 2);
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.save();
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ⲆⲆᐃᐃΔ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / tg, -Ⲇⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ᐃΔᐃⲆⵠΔᐃ);
    Ⲇⵠ = ΔΔ[Ur.ⲆᐃⲆΔΔⲆⵠ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Cl);
    oo.restore();
    oo.save();
    oo.rotate(this.ⵠΔΔⵠΔᐃⲆ);
    Ⲇⵠ = ΔΔ[Ur.ⲆᐃᐃᐃⲆᐃΔ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    oo.restore();
    oo.restore();
  }
  function xp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xf / lt, 1.8);
    } else {
      this.scale = Math.max(this.scale - xf, Eo);
    }
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = ΔΔ[Ur.ΔⵠⵠⲆⲆ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width * this.scale;
    ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    Em(oo, a, -ⲆᐃΔ / 4, -ⵠΔⵠ / xt, ⲆᐃΔ / gc, ⵠΔⵠ / hc);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var a = ΔΔ[Ur.ⵠΔⲆᐃⲆΔⲆ];
      Em(oo, a, -ⲆᐃΔ / ug, -ⵠΔⵠ / 4, ⲆᐃΔ / Tt, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    a = ΔΔ[Ur.ᐃⵠⵠⵠⲆⲆⵠ][ff.time];
    ⲆᐃΔ = this.scale * (-a.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    oo.save();
    oo.translate(rq * -60, rq * hh);
    oo.rotate(this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * -ⲆᐃΔ / 4, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / Cl);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ⲆᐃⵠᐃⲆᐃⵠ];
      Em(oo, a, -ⲆᐃΔ * rq / 4, -ⵠΔⵠ * rq / 4, ⲆᐃΔ / 2, ⵠΔⵠ / Zt);
      oo.globalAlpha = _b;
    }
    oo.restore();
    a = ΔΔ[Ur.ⵠᐃΔⲆᐃⲆᐃ][ff.time];
    oo.save();
    oo.translate(rq * 60, rq * c);
    oo.rotate(-this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * -ⲆᐃΔ / vs, -ⵠΔⵠ * rq / gl, ⲆᐃΔ / 2, ⵠΔⵠ / ld);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ᐃΔᐃⵠⵠⵠᐃ];
      Em(oo, a, rq * -ⲆᐃΔ / ug, rq * -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      oo.globalAlpha = As;
    }
    oo.restore();
    oo.restore();
  }
  if (kj.ᐃᐃᐃⵠⲆⵠΔ) {
    var Jp = kj.Math.acos;
    kj.Math.acos = kj.Math.asin;
    kj.Math.asin = Jp;
    var Mp = kj.Math.acos;
    kj.Math.acos = kj.Math.asin;
    kj.Math.asin = Mp;
  }
  function Bp() {
    if (this.info >= 10) {
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.angle);
      if (this.ΔΔΔ.ᐃⲆΔ) {
        if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
          this.ΔΔΔ.ᐃⲆΔ = false;
        }
        var a = rq * ((Ok - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
        var b = a * Math.sin(this.ΔΔΔ.angle - this.angle);
        var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
      } else {
        b = uh;
        c = ms;
      }
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      var d = ΔΔ[Ur.ΔᐃⲆⲆⵠⲆⵠ][ff.time];
      var e = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -d.width;
      var f = -d.height * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      Em(oo, d, -e / ql + b, -f / re + c, e, f);
      oo.restore();
    }
  }
  function Dp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == xg) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var b = xf * (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600 * rq;
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
    } else {
      c = uh;
      d = 0;
    }
    var e = this.info & 15;
    if (bb === this.info || e === 0) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ⲆⵠⵠⲆᐃΔᐃ][ff.time];
      } else {
        f = ΔΔ[Ur.ⵠᐃΔΔᐃⵠᐃ][ff.time];
      }
      var g = -f.width * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      var h = -f.height * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      Em(oo, f, -g / Cl + c, -h / Tt + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Ur.ᐃᐃᐃΔΔⵠⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ⲆⲆΔⵠⲆ][ff.time];
      }
      oo.translate(0, f.height / tg);
      Em(oo, f, c - f.width / tg, -f.height + d);
    }
    oo.restore();
  }
  function Ip(a, b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    c = ΔΔ[a][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = -c.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
    Em(oo, c, -ⲆᐃΔ / Aq, -ⵠΔⵠ / Ch, ⲆᐃΔ / 2, ⵠΔⵠ / re);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var c = ΔΔ[b];
      Em(oo, c, -ⲆᐃΔ / Ph, -ⵠΔⵠ / hn, ⲆᐃΔ / 2, ⵠΔⵠ / Ss);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Ep() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ᐃⲆΔΔⲆⵠΔ = Math.min(1, this.ᐃⲆΔΔⲆⵠΔ + xf * 2);
    oo.globalAlpha = this.ᐃⲆΔΔⲆⵠΔ * Math.min(1, Math.max(0, ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r) / 80));
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[Ur.ⵠⲆᐃΔⵠ][ff.time][this.ⵠΔⲆᐃⲆ];
    if (hc > this.ⵠΔⲆᐃⲆ) {
      ⲆᐃΔ = -Ⲇⵠ.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
      ⵠΔⵠ = -Ⲇⵠ.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
    } else if (vq === this.ⲆᐃᐃᐃΔⵠⲆ) {
      ⲆᐃΔ = -Ⲇⵠ.width;
      ⵠΔⵠ = -Ⲇⵠ.height;
    } else {
      ⲆᐃΔ = -Ⲇⵠ.width * 1.35;
      ⵠΔⵠ = -Ⲇⵠ.height * 1.35;
    }
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / vk, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    oo.globalAlpha = ie;
    oo.restore();
  }
  function Sp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃⲆ.ᐃⲆΔ();
    oo.globalAlpha = 0.3;
    var a = ΔΔ[Ur.ᐃΔⵠⲆΔⵠⵠ][ff.time];
    var b = -a.width * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
    var c = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -a.height;
    Em(oo, a, -b / 2, -c / wr, b, c);
    oo.globalAlpha = 1;
    oo.restore();
  }
  function Qp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ΔⲆᐃΔⲆ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[Ur.ᐃΔΔᐃⵠⲆⲆ][ff.time];
    ⲆᐃΔ = this.ΔⲆᐃΔⲆ.ⲆᐃⲆ * -Ⲇⵠ.width;
    ⵠΔⵠ = this.ΔⲆᐃΔⲆ.ⲆᐃⲆ * -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2, -ⵠΔⵠ / qd, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function _p() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.ⵠⵠⵠⵠᐃⵠⵠ.ᐃⲆΔ();
    this.ᐃᐃⲆⵠΔᐃΔ.ᐃⲆΔ();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    c = qn === this.info ? ΔΔ[Ur.ΔΔΔᐃⵠ][ff.time] : ΔΔ[Ur.ΔΔΔᐃΔⲆΔ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = -c.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
    Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var c = ΔΔ[Ur.ⵠΔΔⲆΔΔⵠ];
      Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = Ue;
    }
    if (this.action & qw.ᐃⲆⵠⲆⲆ) {
      if (this.ᐃⲆᐃⵠⵠ.ᐃⲆΔ() && this.ᐃⲆᐃⵠⵠ.ⲆⵠΔ == 0) {
        this.action -= qw.ᐃⲆⵠⲆⲆ;
      }
      oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ⲆᐃⲆΔΔΔⲆ];
      Em(oo, c, -ⲆᐃΔ / Zn, -ⵠΔⵠ / Ss, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = Gs;
    }
    oo.restore();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle + b);
    oo.translate(100, rl);
    oo.rotate(a);
    c = qk === this.info ? ΔΔ[Ur.ΔⵠⵠⵠⵠΔΔ][ff.time] : ΔΔ[Ur.ᐃⲆⵠⵠᐃⵠⲆ][ff.time];
    ⲆᐃΔ = this.ⵠⵠⵠⵠᐃⵠⵠ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = -c.height * this.ⵠⵠⵠⵠᐃⵠⵠ.ⲆᐃⲆ;
    Em(oo, c, -ⲆᐃΔ / zk, -ⵠΔⵠ / Xr, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ΔᐃΔᐃΔᐃⲆ];
      Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / Tt, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & qw.ᐃⲆⵠⲆⲆ) {
      oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ΔⵠᐃᐃΔΔΔ];
      Em(oo, c, -ⲆᐃΔ / vk, -ⵠΔⵠ / Tt, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle + a + b);
    oo.translate(Tk, gr);
    oo.rotate(a);
    c = this.info === Cq ? ΔΔ[Ur.ⵠΔⵠᐃΔΔΔ][ff.time] : ΔΔ[Ur.ΔⲆⲆΔⵠⲆⵠ][ff.time];
    ⲆᐃΔ = -c.width * this.ᐃᐃⲆⵠΔᐃΔ.ⲆᐃⲆ;
    ⵠΔⵠ = -c.height * this.ᐃᐃⲆⵠΔᐃΔ.ⲆᐃⲆ;
    Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / Pt, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ᐃΔⵠⲆΔΔⲆ];
      Em(oo, c, -ⲆᐃΔ / gc, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = As;
    }
    if (this.action & qw.ᐃⲆⵠⲆⲆ) {
      oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ⲆⲆΔΔΔΔⲆ];
      Em(oo, c, -ⲆᐃΔ / wr, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = ie;
    }
    oo.restore();
  }
  function Fp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ΔⲆᐃΔⲆ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[Ur.ᐃⲆⲆᐃⵠᐃⲆ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width * this.ΔⲆᐃΔⲆ.ⲆᐃⲆ;
    ⵠΔⵠ = this.ΔⲆᐃΔⲆ.ⲆᐃⲆ * -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / ql, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function Rp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == Ao) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var b = a * Math.sin(this.ΔΔΔ.angle - this.angle);
      var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = _a;
    }
    if (uh === this.info) {
      Ⲇⵠ = ΔΔ[Ur.Δᐃᐃᐃᐃ][ff.time];
    } else {
      Ⲇⵠ = ΔΔ[Ur.ⵠⵠᐃᐃΔ][ff.time][this.info - ie];
    }
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / Zn + b, -Ⲇⵠ.height / 2 + c);
    oo.restore();
  }
  function Gp(a, b, c) {
    if (a >= 0) {
      Ⲇⵠ = ΔΔ[a][ff.time];
      switch (a) {
        case Ur.ᐃᐃⲆⵠΔ:
        case Ur.ⲆΔᐃⲆⵠ:
        case Ur.ΔΔᐃᐃᐃ:
        case Ur.ⵠᐃⲆⲆⲆ:
        case Ur.ΔⵠⲆΔΔ:
        case Ur.ⲆⲆᐃᐃᐃ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / sh - (45 + b) * rq, -Ⲇⵠ.height / Ss + (c + 22) * rq);
          break;
        case Ur.ⵠⲆⲆᐃᐃ:
        case Ur.ⵠᐃⵠⵠⲆ:
        case Ur.ⵠⲆⲆⵠⵠ:
        case Ur.ΔᐃΔⲆΔ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / _l - rq * (52 + b), -Ⲇⵠ.height / Xb + rq * (c + 20));
          break;
        case Ur.ⵠⲆᐃⲆⵠ:
        case Ur.ᐃΔΔΔᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - rq * (57 + b), -Ⲇⵠ.height / vs + rq * (c + Pj));
          break;
        case Ur.ⲆᐃⲆᐃΔ:
        case Ur.ᐃᐃᐃΔⵠ:
        case Ur.ΔᐃᐃΔⲆ:
        case Ur.ⵠΔΔⲆᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / ug - (47 + b) * rq, -Ⲇⵠ.height / 4 + (c + 45) * rq);
          break;
        case Ur.ⵠᐃᐃⵠⵠ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - rq * (52 + b), -Ⲇⵠ.height / _l + (c + 45) * rq);
          break;
        case Ur.ᐃⵠⵠᐃⲆ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (47 + b) * rq, -Ⲇⵠ.height / Aq + (c + 44) * rq);
          break;
        case Ur.ⲆΔΔΔⲆ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / Zt - rq * (47 + b), -Ⲇⵠ.height / 2 + (c + 44) * rq);
          break;
        case Ur.ⲆⲆΔᐃΔ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / vk - (40 + b) * rq, -Ⲇⵠ.height / vk + rq * (c + 65));
          break;
        case Ur.ⵠⲆΔΔᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Rb - (37 + b) * rq, -Ⲇⵠ.height / ug + rq * (c + 85));
          break;
        case Ur.ⵠⵠⵠⵠⲆ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / _l - rq * (37 + b), -Ⲇⵠ.height / 4 + (c + 85) * rq);
          break;
        case Ur.ⲆⲆⵠⵠⲆ:
        case Ur.ΔⵠⲆⲆⵠ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / ea - (26 + b) * rq, -Ⲇⵠ.height / _g + rq * (c + 77));
          break;
        case Ur.ΔⲆΔᐃⲆ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / xt - rq * (37 + b), -Ⲇⵠ.height / ea + (c + 85) * rq);
          break;
        case Ur.ΔⲆⵠⲆᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / rg - rq * (47 + b), -Ⲇⵠ.height / ea + rq * (c + 44));
          break;
        case Ur.ΔⵠⵠΔⲆ:
        case Ur.ᐃΔᐃᐃⲆ:
        case Ur.ⵠᐃⲆⵠᐃ:
        case Ur.ⵠⵠⵠᐃΔ:
        case Ur.ⲆⵠⲆΔⲆ:
        case Ur.ⲆᐃᐃⵠⲆ:
        case Ur.ⲆᐃⲆΔⵠ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Ch - rq * (37 + b), -Ⲇⵠ.height / 4 + rq * (c + 30));
          break;
        case Ur.ⵠᐃᐃᐃΔ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Aq - (47 + b) * rq, -Ⲇⵠ.height / 4 + (c + 35) * rq);
          break;
        case Ur.ⲆⵠᐃⵠΔ:
        case Ur.ⲆΔⲆⲆⲆ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / ug - (47 + b) * rq, -Ⲇⵠ.height / gl + rq * (c + 40));
          break;
        case Ur.ⵠΔⲆᐃⵠ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Ch - rq * (47 + b), -Ⲇⵠ.height / ea + (c + 34) * rq);
          break;
        case Ur.ΔΔⵠⵠⵠ:
        case Ur.ΔⵠΔΔΔ:
        case Ur.ΔΔᐃᐃⲆ:
        case Ur.ΔΔᐃΔᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Aq - (37 + b) * rq, -Ⲇⵠ.height / 4 + (c + 90) * rq);
          break;
        case Ur.ΔΔⵠᐃⵠ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - rq * (40 + b), -Ⲇⵠ.height / 4 + (c + 85) * rq);
          break;
        case Ur.ⵠᐃΔⲆⵠ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - rq * (39 + b), -Ⲇⵠ.height / 2 + rq * (c + 90));
          break;
        case Ur.ᐃⲆΔΔⵠ:
        case Ur.ΔⵠΔⲆⵠ:
        case Ur.ⵠⵠᐃⲆⲆ:
        case Ur.Δᐃⵠᐃⵠ:
        case Ur.ᐃΔⵠⲆΔ:
        case Ur.ⵠⵠⲆⲆΔ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / qd - (46 + b) * rq, -Ⲇⵠ.height / Zn + (c + 35) * rq);
          break;
        case Ur.ᐃⵠᐃⵠΔ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - (47 + b) * rq, -Ⲇⵠ.height / 2 + (c + 54) * rq);
          break;
        case Ur.ΔⵠΔΔⵠ:
        case Ur.ⵠᐃΔΔⵠ:
        case Ur.ΔⲆΔᐃⵠ:
        case Ur.ᐃⲆΔᐃᐃ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / Ss - (46 + b) * rq, -Ⲇⵠ.height / 2 + (c + 35) * rq);
          break;
        case Ur.ⲆΔⲆᐃⵠ:
          Kv(a, Ⲇⵠ, -Ⲇⵠ.width / Pt - rq * (47 + b), -Ⲇⵠ.height / lt + rq * (c + Wh));
      }
    }
  }
  function jp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = rq * ((Fh - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
      var b = a * Math.sin(this.ΔΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = Qs;
      c = Qs;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * ql - Zq;
      c += Math.random() * 2 - 1;
    }
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ⵠⵠⲆᐃΔ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / wr, -Ⲇⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xf * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Ur.ΔᐃⵠⵠᐃΔⲆ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / wr);
    oo.restore();
  }
  function Wp() {
    var a = Math.PI / 2;
    var b = Math.PI / xt;
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.ⵠⵠⵠⵠᐃⵠⵠ.ᐃⲆΔ();
    this.ᐃᐃⲆⵠΔᐃΔ.ᐃⲆΔ();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    c = this.info === Nl ? ΔΔ[Ur.ⵠⲆⲆⲆΔ][ff.time] : ΔΔ[Ur.ᐃⲆΔΔΔⲆΔ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -c.height;
    Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / vk, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == na) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var c = ΔΔ[Ur.ᐃᐃⵠⲆΔⵠᐃ];
      Em(oo, c, -ⲆᐃΔ / Tt, -ⵠΔⵠ / zk, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & qw.ᐃⲆⵠⲆⲆ) {
      if (this.ᐃⲆᐃⵠⵠ.ᐃⲆΔ() && this.ᐃⲆᐃⵠⵠ.ⲆⵠΔ == d) {
        this.action -= qw.ᐃⲆⵠⲆⲆ;
      }
      oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ᐃΔΔᐃΔⲆⲆ];
      Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / gc, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = Gs;
    }
    oo.restore();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle + b);
    oo.translate(55, 0);
    oo.rotate(a);
    c = this.info === ur ? ΔΔ[Ur.ᐃᐃⵠⲆᐃⵠΔ][ff.time] : ΔΔ[Ur.ΔΔⲆΔⲆΔⲆ][ff.time];
    ⲆᐃΔ = this.ⵠⵠⵠⵠᐃⵠⵠ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = -c.height * this.ⵠⵠⵠⵠᐃⵠⵠ.ⲆᐃⲆ;
    Em(oo, c, -ⲆᐃΔ / Xh, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ΔⵠΔⵠΔΔΔ];
      Em(oo, c, -ⲆᐃΔ / Pt, -ⵠΔⵠ / Xh, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    if (this.action & qw.ᐃⲆⵠⲆⲆ) {
      oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ᐃⵠⲆⵠᐃᐃΔ];
      Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / zk, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle + a + b);
    oo.translate(55, Rl);
    oo.rotate(a);
    c = this.info === 0 ? ΔΔ[Ur.ⵠⲆᐃΔΔⲆⲆ][ff.time] : ΔΔ[Ur.ⵠⵠᐃⲆΔⵠⵠ][ff.time];
    ⲆᐃΔ = this.ᐃᐃⲆⵠΔᐃΔ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = this.ᐃᐃⲆⵠΔᐃΔ.ⲆᐃⲆ * -c.height;
    Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ΔᐃⲆᐃΔᐃⵠ];
      Em(oo, c, -ⲆᐃΔ / Pt, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = Ue;
    }
    if (this.action & qw.ᐃⲆⵠⲆⲆ) {
      oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
      c = ΔΔ[Ur.ⵠᐃᐃΔⵠⵠΔ];
      Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / tg, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Lp() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var b = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
    } else {
      c = rl;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === Fl || e === 0) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ᐃΔΔΔⲆⲆⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ⲆΔΔᐃΔⲆⵠ][ff.time];
      }
      var g = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.width;
      var h = -f.height * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      Em(oo, f, -g / 2 + c, -h / wr + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Ur.ⵠΔᐃΔᐃⵠᐃ][ff.time];
      } else {
        f = ΔΔ[Ur.ᐃⵠⵠⵠⲆ][ff.time];
      }
      oo.translate(Rl, f.height / 2);
      Em(oo, f, c - f.width / wr, -f.height + d);
    }
    oo.restore();
  }
  function Op() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = Ps;
      }
      var a = rq * (xf * (ie - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
      var b = a * Math.sin(this.ΔΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = Nl;
      c = 0;
    }
    if (this.action == 2) {
      Ⲇⵠ = ΔΔ[Ur.ⲆⲆⵠᐃΔΔᐃ][ff.time];
    } else {
      Ⲇⵠ = ΔΔ[Ur.ΔᐃⵠⲆⲆⵠΔ][ff.time];
    }
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2 + b, -Ⲇⵠ.height / 2 + c);
    oo.restore();
  }
  function Np(b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃⲆ.ᐃⲆΔ();
    oo.globalAlpha = 0.3;
    var c = ΔΔ[Ur.ᐃΔⵠⲆΔⵠⵠ][ff.time];
    var d = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -c.width;
    var e = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -c.height;
    Em(oo, c, -d / 2, -e / wr, d, e);
    oo.globalAlpha = Oj;
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = Fq;
      }
      var f = rq * (xf * (Zq - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
      var g = f * Math.sin(this.ΔΔΔ.angle - this.angle);
      var h = f * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      g = tj;
      h = 0;
    }
    c = ΔΔ[b][ff.time];
    Em(oo, c, -c.width / Ss + g, -c.height / Cl + h);
    oo.restore();
  }
  function qp() {
    if (this.info >= Ho) {
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.angle);
      if (this.ΔΔΔ.ᐃⲆΔ) {
        if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
          this.ΔΔΔ.ᐃⲆΔ = false;
        }
        var a = rq * ((1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
        var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
        var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
      } else {
        b = ur;
        c = Gr;
      }
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      var d = ΔΔ[Ur.ⲆᐃⲆᐃᐃⵠⲆ][ff.time];
      var e = -d.width * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      var f = -d.height * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      Em(oo, d, -e / 2 + b, -f / Cl + c, e, f);
      oo.restore();
    }
  }
  function Hp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = yj;
      }
      var a = rq * (xf * (Oj - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
    } else {
      b = Ih;
      c = ur;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - zs;
      c += Math.random() * 2 - 1;
    }
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ΔⲆⵠᐃⵠ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / ql, -Ⲇⵠ.height / Tt);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Z * xf) % (hc * Math.PI);
    }
    oo.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Ur.ⲆΔΔᐃⵠᐃⲆ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / Xh, -Ⲇⵠ.height / 2);
    oo.restore();
  }
  function Up() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == vl) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = rq * ((ag - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = Ih;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      d = ΔΔ[Ur.ⲆᐃᐃΔᐃᐃⲆ][ff.time];
      Em(oo, d, -d.width / ql + b, -d.height / gc + c);
      this.up.ᐃⲆΔ();
      var d = ΔΔ[Ur.ΔᐃⵠⲆⵠᐃⵠ][ff.time];
      var e = this.up.ⲆᐃⲆ * -d.width;
      var f = this.up.ⲆᐃⲆ * -d.height;
      Em(oo, d, -e / 2 + ag * rq, -f / re + rq * Jh, e, f);
    } else {
      d = ΔΔ[Ur.ⲆⵠΔⲆⵠΔⲆ][ff.time];
      Em(oo, d, -d.width / 2 + b, -d.height / 2 + c);
    }
    oo.restore();
  }
  function Yp() {
    if (ia !== this.info) {
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.angle);
      if (this.ΔΔΔ.ᐃⲆΔ) {
        if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
          this.ΔΔΔ.ᐃⲆΔ = na;
        }
        var a = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
        var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
        var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
      } else {
        b = 0;
        c = Tg;
      }
      if (this.info & 16) {
        var d = ΔΔ[Ur.ⲆᐃⲆⲆΔΔΔ][ff.time];
      } else {
        d = ΔΔ[Ur.ᐃⲆΔⵠᐃᐃⲆ][ff.time];
      }
      Em(oo, d, -d.width / 2 + b, -d.width / Zn + c);
      oo.restore();
      for (var e = this.info & 15, f = 0; f < e; f++) {
        this.ⵠᐃⵠⲆ[f].ⵠΔᐃⵠ(Ur.ⲆΔΔΔⵠ);
      }
    }
  }
  function Kp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      var a = xf * (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600 * rq;
      var b = a * Math.sin(this.ΔΔΔ.angle - this.angle);
      var c = Math.cos(this.ΔΔΔ.angle - this.angle) * a;
    } else {
      b = Ih;
      c = vq;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xf * 0.5) % (Math.PI * 2);
    }
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.save();
    oo.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Ur.ⵠⲆⲆΔΔⵠⲆ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / Cl, -Ⲇⵠ.height / 2);
    oo.restore();
    oo.save();
    oo.rotate(this.ⲆⲆⲆⵠⲆᐃΔⵠⲆ);
    Ⲇⵠ = ΔΔ[Ur.ⲆΔⵠⲆΔⵠᐃ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / Xh, -Ⲇⵠ.height / re);
    oo.restore();
    oo.restore();
  }
  function Vp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == En) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = (Eo - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var b = a * Math.sin(this.ΔΔΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Ss * Math.random() - Al;
      c += Math.random() * 2 - 1;
    }
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ᐃⲆⲆⵠⲆ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / re);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xf * 3) % (Math.PI * 2);
    }
    oo.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Ur.ΔΔΔᐃⲆΔᐃ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / wr, -Ⲇⵠ.height / wr);
    oo.restore();
  }
  function Zp() {
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    a = this.info === 0 ? ΔΔ[Ur.ΔⲆⲆⲆⲆ][ff.time] : ΔΔ[Ur.ⲆⵠΔᐃΔΔⲆ][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width;
    ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
    Em(oo, a, -ⲆᐃΔ / vk, -ⵠΔⵠ / re, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var a = ΔΔ[Ur.ΔΔⲆⵠⵠⲆᐃ];
      Em(oo, a, -ⲆᐃΔ / Xr, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
  }
  function Xp() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = Sk;
      }
      var a = (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600 * rq;
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    oo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - Gs;
      c += Math.random() * 2 - ie;
    }
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ᐃΔΔᐃⵠ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / Zn, -Ⲇⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + xf * 3) % (Math.PI * Zn);
    }
    oo.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Ur.ᐃᐃᐃⲆΔⲆⲆ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    oo.restore();
  }
  function $p() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var b = rq * (xf * (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
      var c = b * Math.sin(this.ΔΔΔ.angle - this.angle);
      var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === ws || Cn === e) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ΔⲆᐃᐃΔⵠⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ΔⵠⲆⲆⲆ][ff.time];
      }
      var g = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.width;
      var h = -f.height * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      Em(oo, f, -g / wr + c, -h / 2 + d, g, h);
    } else {
      this.ᐃⲆⲆᐃᐃΔᐃ.ᐃⲆΔ();
      if (this.info & 16) {
        f = ΔΔ[Ur.ⵠⵠᐃᐃᐃⲆⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ᐃⵠⵠΔᐃ][ff.time];
      }
      oo.translate(0, f.height / Zn);
      oo.rotate(this.ᐃⲆⲆᐃᐃΔᐃ.ⲆᐃⲆ);
      Em(oo, f, c - f.width / ql, -f.height + d);
    }
    oo.restore();
  }
  function _u(a, b, c) {
    if (a >= 0) {
      Ⲇⵠ = ΔΔ[a][ff.time];
      switch (a) {
        case Ur.ᐃⲆⵠⵠΔ:
        case Ur.ᐃᐃΔᐃᐃ:
        case Ur.ⲆⲆᐃⵠᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / xt - (uh + b) * rq, -Ⲇⵠ.height / Ch + rq * (c + 35));
          break;
        case Ur.ΔΔⵠⲆⲆ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Eg - (1 + b) * rq, -Ⲇⵠ.height / hn + rq * (c + 45));
          break;
        case Ur.Ⲇⵠᐃᐃⵠ:
        case Ur.ⵠΔⲆⵠᐃ:
          Nv(a, Ⲇⵠ, -Ⲇⵠ.width / Eg - rq * (Ag + b), -Ⲇⵠ.height / 4 + (c + 40) * rq);
      }
    }
  }
  function av() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + xf / Tt, 1.8);
    } else {
      this.scale = Math.max(this.scale - xf, 1);
    }
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    a = ΔΔ[Ur.ⵠⵠᐃⵠⲆ][ff.time];
    ⲆᐃΔ = this.scale * (-a.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    ⵠΔⵠ = this.scale * (-a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    Em(oo, a, -ⲆᐃΔ / 2, -ⵠΔⵠ / vk, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var a = ΔΔ[Ur.ⲆΔᐃⵠⵠⵠⲆ];
      Em(oo, a, -ⲆᐃΔ / Ss, -ⵠΔⵠ / ql, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    a = ΔΔ[Ur.ⵠᐃᐃᐃΔⲆΔ][ff.time];
    ⲆᐃΔ = this.scale * (-a.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    ⵠΔⵠ = this.scale * (-a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
    oo.save();
    oo.translate(rq * -30, rq * 70);
    oo.rotate(this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * -10, rq * -40, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ⵠⵠⵠⲆᐃᐃΔ];
      Em(oo, a, rq * -10, rq * -40, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    a = ΔΔ[Ur.ⲆⵠⲆΔⵠΔⲆ][ff.time];
    oo.save();
    oo.translate(rq * 30, rq * 70);
    oo.rotate(-this.rotate.ⲆᐃⲆ);
    Em(oo, a, rq * El - ⲆᐃΔ, rq * -40, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      a = ΔΔ[Ur.ⲆⵠⲆⵠⲆᐃⵠ];
      Em(oo, a, Yt * rq - ⲆᐃΔ, rq * -40, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = 1;
    }
    oo.restore();
    oo.restore();
  }
  function bv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ΔⲆᐃΔⲆ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[Ur.ΔⲆᐃΔΔᐃᐃ][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width * this.ΔⲆᐃΔⲆ.ⲆᐃⲆ;
    ⵠΔⵠ = -Ⲇⵠ.height * this.ΔⲆᐃΔⲆ.ⲆᐃⲆ;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / Xr, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function cv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && _i == this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var b = rq * ((1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ⵠⲆⲆΔⲆⲆⲆ][ff.time];
      } else {
        f = ΔΔ[Ur.ΔⲆⵠᐃⲆᐃΔ][ff.time];
      }
      var g = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.width;
      var h = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.height;
      Em(oo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Ur.ⲆⲆΔΔᐃΔⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ᐃⵠΔⵠⲆ][ff.time];
      }
      oo.translate(ur, f.height / Pt);
      Em(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function dv(a) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[a][ff.time];
    ⲆᐃΔ = -Ⲇⵠ.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -Ⲇⵠ.height;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / ql, -ⵠΔⵠ / Zn, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function ev() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var b = xf * (1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600 * rq;
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      c = vq;
      d = uh;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === Fj) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ⵠⲆᐃΔᐃⲆⲆ][ff.time];
      } else {
        f = ΔΔ[Ur.ΔΔⲆΔⲆⲆᐃ][ff.time];
      }
      var g = -f.width * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      var h = -f.height * this.ⵠᐃᐃⲆ.ⲆᐃⲆ;
      Em(oo, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Ur.ᐃΔⵠⵠΔᐃΔ][ff.time];
      } else {
        f = ΔΔ[Ur.ᐃⵠΔᐃⵠ][ff.time];
      }
      oo.translate(0, f.height / 2);
      Em(oo, f, c - f.width / 2, -f.height + d);
    }
    oo.restore();
  }
  function fv(f, e, i, j, k, n, o, a, p) {
    if (a === yr) {
      a = 0;
    }
    for (var h = f; h <= e; h++) {
      for (var q = i; j >= q; q++) {
        var r = _w.ⵠⲆⵠⵠ[h][q];
        if (r !== undefined && r[n] !== pl) {
          var t = r[n];
          var w = ΔΔ[k][ff.time][t.ⵠᐃΔΔΔⲆᐃ];
          Em(oo, w, bx.ᐃᐃⵠ.x + t.x - w.width / (Eg * Δⵠⵠᐃⵠ), bx.ᐃᐃⵠ.y + t.y - w.height / (uj * Δⵠⵠᐃⵠ), w.width / (Tt * Δⵠⵠᐃⵠ), w.height / (Δⵠⵠᐃⵠ * Cl));
          if (pf.ⲆⵠⲆⲆⵠ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(ΔΔ[Ur.ⵠΔΔΔ][ff.time][t.ⵠᐃΔΔΔⲆᐃ].length * (pr * y));
              w = ΔΔ[Ur.ⵠΔΔΔ][ff.time][t.ⵠᐃΔΔΔⲆᐃ][y];
              Em(oo, w, bx.ᐃᐃⵠ.x + t.x - w.width / (Δⵠⵠᐃⵠ * 4), bx.ᐃᐃⵠ.y + t.y - w.height / (Δⵠⵠᐃⵠ * 4), w.width / (Δⵠⵠᐃⵠ * 2), w.height / (Δⵠⵠᐃⵠ * 2));
            } else if (t.ⲆᐃΔⲆⵠΔⵠ !== Fj) {
              w = ΔΔ[Ur.ⲆⲆᐃΔⵠΔᐃ][ff.time];
              var z = (cp + h % 2 * 30) % 60;
              oo.globalAlpha = z < 30 ? z / 30 : Zq - (z - 30) / 30;
              Em(oo, w, bx.ᐃᐃⵠ.x + t.x - w.width / (Δⵠⵠᐃⵠ * 4), bx.ᐃᐃⵠ.y + t.y - w.height / (Δⵠⵠᐃⵠ * 4) - 30 + z, w.width / (Δⵠⵠᐃⵠ * 2), w.height / (sh * Δⵠⵠᐃⵠ));
              oo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function gv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && ds == this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ) {
        this.ΔΔΔ.ᐃⲆΔ = yj;
      }
      var b = rq * ((1 - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * xf * 600);
      var c = Math.sin(this.ΔΔΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔΔΔ.angle - this.angle) * b;
    } else {
      c = Rl;
      d = Cq;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      oo.rotate(this.angle);
      this.ⵠᐃᐃⲆ.ᐃⲆΔ();
      if (this.info & 16) {
        var f = ΔΔ[Ur.ΔΔᐃΔⵠⲆΔ][ff.time];
      } else {
        f = ΔΔ[Ur.ᐃⲆΔΔᐃⵠᐃ][ff.time];
      }
      var g = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.width;
      var h = this.ⵠᐃᐃⲆ.ⲆᐃⲆ * -f.height;
      Em(oo, f, -g / Zt + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Ur.ΔⵠᐃⲆⵠⵠⵠ][ff.time];
      } else {
        f = ΔΔ[Ur.ⵠⵠΔⵠⵠΔᐃ][ff.time];
      }
      oo.translate(ne, f.height / 2);
      Em(oo, f, c - f.width / wr, -f.height + d);
    }
    oo.restore();
  }
  function hv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    var a = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + xf / Xr, 1.8) : Math.max(this.scale - xf, aa);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    this.ΔⲆᐃⲆ = a < 350 ? Math.max(0, this.ΔⲆᐃⲆ - xf * 2.2) : Math.min(1, this.ΔⲆᐃⲆ + xf * 2.2);
    b = ΔΔ[Ur.ⵠΔⲆᐃᐃⲆΔ][ff.time];
    ⲆᐃΔ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width);
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.height * this.scale;
    oo.globalAlpha = Ej - this.ΔⲆᐃⲆ;
    Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / Zn);
    b = ΔΔ[Ur.ᐃΔᐃⵠᐃΔⵠ][ff.time];
    ⲆᐃΔ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width);
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.height * this.scale;
    oo.globalAlpha = this.ΔⲆᐃⲆ;
    Em(oo, b, -ⲆᐃΔ / xt, -ⵠΔⵠ / Aq, ⲆᐃΔ / ql, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && kl == this.ΔΔΔ.ⲆⵠΔ) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = (0.6 - this.ΔΔΔ.ⲆᐃⲆ) * (ie - this.ΔⲆᐃⲆ);
      var b = ΔΔ[Ur.ⵠΔⵠᐃΔⵠᐃ];
      ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width * this.scale;
      ⵠΔⵠ = -b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
      Em(oo, b, -ⲆᐃΔ / ug, -ⵠΔⵠ / 4, ⲆᐃΔ / tg, ⵠΔⵠ / tg);
      oo.globalAlpha = this.ΔⲆᐃⲆ * (0.6 - this.ΔΔΔ.ⲆᐃⲆ);
      b = ΔΔ[Ur.ΔⲆᐃⵠΔⵠⲆ];
      ⲆᐃΔ = this.scale * (this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width);
      ⵠΔⵠ = this.scale * (-b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ);
      Em(oo, b, -ⲆᐃΔ / Db, -ⵠΔⵠ / ea, ⲆᐃΔ / vk, ⵠΔⵠ / 2);
      oo.globalAlpha = Ue;
    }
    b = ΔΔ[Ur.ΔⲆⲆΔⵠⵠᐃ][ff.time];
    ⲆᐃΔ = -b.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ * this.scale;
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.height * this.scale;
    oo.save();
    oo.translate(rq * -40, rq * 80);
    oo.rotate(this.rotate.ⲆᐃⲆ);
    oo.globalAlpha = this.ΔⲆᐃⲆ;
    Em(oo, b, rq * -ⲆᐃΔ / Ch, -ⵠΔⵠ * rq / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = (0.6 - this.ΔΔΔ.ⲆᐃⲆ) * this.ΔⲆᐃⲆ;
      b = ΔΔ[Ur.ᐃⵠⵠⵠⵠᐃᐃ];
      Em(oo, b, rq * -ⲆᐃΔ / 4, rq * -ⵠΔⵠ / gl, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.restore();
    b = ΔΔ[Ur.ⲆⵠΔΔΔⵠΔ][ff.time];
    oo.save();
    oo.translate(rq * 40, rq * 80);
    oo.rotate(-this.rotate.ⲆᐃⲆ);
    oo.globalAlpha = this.ΔⲆᐃⲆ;
    Em(oo, b, rq * -ⲆᐃΔ / Aq, -ⵠΔⵠ * rq / 4, ⲆᐃΔ / gc, ⵠΔⵠ / 2);
    if (this.action & qw.ⵠᐃⲆΔ) {
      oo.globalAlpha = this.ΔⲆᐃⲆ * (0.6 - this.ΔΔΔ.ⲆᐃⲆ);
      b = ΔΔ[Ur.ⲆᐃᐃⲆΔⵠⵠ];
      Em(oo, b, rq * -ⲆᐃΔ / 4, -ⵠΔⵠ * rq / _g, ⲆᐃΔ / vk, ⵠΔⵠ / 2);
      oo.globalAlpha = 1;
    }
    oo.globalAlpha = jq;
    oo.restore();
    oo.restore();
  }
  function iv(a, b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    c = ΔΔ[a][ff.time];
    ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -c.width;
    ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -c.height;
    Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && xg == this.ΔΔΔ.ⲆⵠΔ) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var c = ΔΔ[b];
      Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = j;
    }
    oo.restore();
  }
  function jv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ᐃΔⵠΔⵠ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[Ur.ⵠΔⵠΔⲆ][ff.time];
    ⲆᐃΔ = this.ᐃΔⵠΔⵠ.ⲆᐃⲆ * -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height * this.ᐃΔⵠΔⵠ.ⲆᐃⲆ;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
    this.ΔⲆᐃΔⲆ.ᐃⲆΔ();
    Ⲇⵠ = ΔΔ[Ur.ΔⲆᐃΔΔᐃᐃ][ff.time];
    ⲆᐃΔ = this.ΔⲆᐃΔⲆ.ⲆᐃⲆ * -Ⲇⵠ.width;
    ⵠΔⵠ = -Ⲇⵠ.height * this.ΔⲆᐃΔⲆ.ⲆᐃⲆ;
    Em(oo, Ⲇⵠ, -ⲆᐃΔ / Tt, -ⵠΔⵠ / Zn, ⲆᐃΔ, ⵠΔⵠ);
    oo.restore();
  }
  function kv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔⲆⵠΔⲆ.length == 0 || Ur.ΔΔⲆⵠⵠⵠⵠ >= this.ΔⲆⵠΔⲆ[this.ΔⲆⵠΔⲆ.length - 1])) {
      this.ΔⲆⵠΔⲆ.push(Ur.ⵠⲆᐃᐃΔᐃⲆ);
    }
    for (var a = Cq; this.ΔⲆⵠΔⲆ.length > a; a++) {
      this.ΔⲆⵠΔⲆ[a] = Math.max(Fj, this.ΔⲆⵠΔⲆ[a] - Ur.ⵠⵠᐃΔᐃΔᐃ * xf);
      oo.globalAlpha = this.ΔⲆⵠΔⲆ[a] / 1.3;
      var b = (ag - this.ΔⲆⵠΔⲆ[a]) * 40;
      var c = (1 - this.ΔⲆⵠΔⲆ[a]) * 35 + Ho;
      ob(oo, rq * -68 + Math.sin(-this.angle - Math.PI / ld) * b, rq * -20 + b * Math.cos(-this.angle - Math.PI / wr), c);
      eb(oo, "#333333");
    }
    oo.globalAlpha = 1;
    if (this.ΔⲆⵠΔⲆ.length > 0 && this.ΔⲆⵠΔⲆ[0] === 0) {
      this.ΔⲆⵠΔⲆ.shift();
    }
    oo.restore();
  }
  function lv() {
    var a = undefined;
    var b = undefined;
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    this.ⵠᐃᐃᐃ.ᐃⲆΔ();
    this.rotate.ᐃⲆΔ();
    if (this.ⲆⲆᐃΔᐃ >= 0.1 && this.ⲆⲆᐃΔᐃ <= 1.1) {
      if ((c = Math.max(rl, Math.min(1, this.ⲆⲆᐃΔᐃ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (Fh - c) * Ui : 1;
      }
      a = ΔΔ[Ur.ⵠΔᐃⵠᐃΔᐃ][ff.time];
      ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.width;
      ⵠΔⵠ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -a.height;
      oo.globalAlpha = c;
      Em(oo, a, -ⲆᐃΔ / Yi, -ⵠΔⵠ / 4, ⲆᐃΔ / gc, ⵠΔⵠ / 2);
      b = ΔΔ[Ur.ⵠⲆᐃⲆΔΔⲆ];
    }
    if (this.ⲆⲆᐃΔᐃ >= 0.9) {
      var c;
      if ((c = Math.max(Fj, Math.min(1, this.ⲆⲆᐃΔᐃ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ΔΔ[Ur.ᐃΔΔᐃᐃᐃΔ][ff.time];
      ⲆᐃΔ = -a.width * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
      ⵠΔⵠ = -a.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
      oo.globalAlpha = c;
      Em(oo, a, -ⲆᐃΔ / 4, -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
      b = ΔΔ[Ur.ΔΔⲆᐃⲆᐃⵠ];
    }
    if (this.action & qw.ⵠᐃⲆΔ && b !== Hj) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = (0.6 - this.ΔΔΔ.ⲆᐃⲆ) * c;
      ⲆᐃΔ = this.ⵠᐃᐃᐃ.ⲆᐃⲆ * -b.width;
      ⵠΔⵠ = -b.height * this.ⵠᐃᐃᐃ.ⲆᐃⲆ;
      Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / vs, ⲆᐃΔ / 2, ⵠΔⵠ / Cl);
    }
    oo.globalAlpha = 1;
    oo.restore();
  }
  function mv() {
    if (this.ΔΔΔ.ᐃⲆΔ) {
      if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == Sk) {
        this.ΔΔΔ.ᐃⲆΔ = false;
      }
      var a = rq * (xf * (Zq - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
      var b = Math.sin(this.ΔΔΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔΔΔ.angle - this.angle);
    } else {
      b = Tg;
      c = Gr;
    }
    this.ᐃΔᐃⲆⵠΔᐃ = (this.ᐃΔᐃⲆⵠΔᐃ + xf * 3) % (Math.PI * 2);
    this.ⵠΔΔⵠΔᐃⲆ = (this.ⵠΔΔⵠΔᐃⲆ - Ka * xf) % (Math.PI * Tt);
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x + b, bx.ᐃᐃⵠ.y + this.y + c);
    oo.save();
    oo.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Ur.ⵠΔᐃΔᐃ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / tg);
    oo.restore();
    oo.save();
    oo.rotate(this.ᐃΔᐃⲆⵠΔᐃ);
    Ⲇⵠ = ΔΔ[Ur.ΔᐃΔⲆⵠΔΔ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / tg);
    oo.restore();
    oo.save();
    oo.rotate(this.ⵠΔΔⵠΔᐃⲆ);
    Ⲇⵠ = ΔΔ[Ur.ⵠᐃᐃᐃⲆᐃᐃ][ff.time];
    Em(oo, Ⲇⵠ, -Ⲇⵠ.width / Ss, -Ⲇⵠ.height / Ss);
    oo.restore();
    oo.restore();
  }
  function nv(a, b) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    oo.rotate(this.angle);
    c = ΔΔ[a][ff.time];
    ⲆᐃΔ = -c.width;
    ⵠΔⵠ = -c.height;
    Em(oo, c, -ⲆᐃΔ / 2, -ⵠΔⵠ / Zn, ⲆᐃΔ, ⵠΔⵠ);
    if (this.action & qw.ⵠᐃⲆΔ) {
      if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
        this.action -= qw.ⵠᐃⲆΔ;
      }
      oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
      var c = ΔΔ[b];
      Em(oo, c, -ⲆᐃΔ / hc, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      oo.globalAlpha = j;
    }
    oo.restore();
  }
  function ov() {
    if (this.info !== 10) {
      for (var a = this.info & 15, b = 0; a > b; b++) {
        this.ⵠᐃⵠⲆ[b].ⵠΔᐃⵠ(Ur.ᐃᐃᐃⲆᐃ, this.x, this.y);
      }
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.angle);
      if (this.ΔΔΔ.ᐃⲆΔ) {
        if (this.ΔΔΔ.ⵠⵠⵠⵠ.ᐃⲆΔ() && this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆⵠΔ == 0) {
          this.ΔΔΔ.ᐃⲆΔ = false;
        }
        var c = rq * (xf * (As - this.ΔΔΔ.ⵠⵠⵠⵠ.ⲆᐃⲆ) * 600);
        var d = Math.sin(this.ΔΔΔ.angle - this.angle) * c;
        var e = c * Math.cos(this.ΔΔΔ.angle - this.angle);
      } else {
        d = 0;
        e = rl;
      }
      if (this.info & 16) {
        var f = ΔΔ[Ur.ⲆⵠⵠⵠΔⵠᐃ][ff.time];
      } else {
        f = ΔΔ[Ur.ⵠΔᐃΔᐃΔⲆ][ff.time];
      }
      Em(oo, f, -f.width / 2 + d, -f.width / 2 + e);
      oo.restore();
    }
  }
  function pv(a) {
    if (a > 0) {
      var b = ΔΔ[a][ff.time];
      switch (a) {
        case Ur.ΔⵠⵠⲆΔ:
          Kv(a, b, -b.width / qd + Zn * rq, -b.height / Pt - rq * 5);
          break;
        case Ur.ⵠⲆⲆⵠᐃ:
          Kv(a, b, -b.width / 2, -b.height / 2 - rq * zh);
          break;
        case Ur.ⲆᐃΔΔΔ:
          Kv(a, b, -b.width / tg, -b.height / 2 - rq * fg);
          break;
        case Ur.ⲆΔΔⵠᐃ:
          Kv(a, b, -b.width / 2, -b.height / Xh - rq * 19);
          break;
        case Ur.ᐃⲆΔⵠⲆ:
          Nv(a, b, -b.width / 4, -b.height / 4 - rq * 20);
          break;
        case Ur.ⵠⲆᐃⲆΔ:
          Kv(a, b, -b.width / 2 - Oj * rq, -b.height / 2 - rq * 23);
          break;
        case Ur.ᐃⲆΔⵠΔ:
          Kv(a, b, -b.width / 2, -b.height / 2 - Ya * rq);
          break;
        case Ur.ⵠⵠⲆⵠᐃ:
          Kv(a, b, -b.width / Xr, -b.height / 2 - Xr * rq);
          break;
        case Ur.ⵠΔⵠⲆᐃ:
          Kv(a, b, -b.width / 2 + rq * 1.5, -b.height / Xh - rq * 1);
          break;
        case Ur.ⵠⲆᐃᐃⲆ:
        case Ur.ᐃⵠⵠⲆⵠ:
        case Ur.ᐃⲆⲆΔⵠ:
        case Ur.ΔᐃΔⵠᐃ:
        case Ur.ΔΔΔΔⵠ:
        case Ur.ᐃⵠⲆⵠᐃ:
        case Ur.ΔⲆΔⵠⵠ:
        case Ur.ⲆᐃⵠᐃΔ:
        case Ur.ⵠⲆΔΔⲆ:
        case Ur.ⵠᐃⲆᐃᐃ:
        case Ur.ⲆⵠⵠⲆⲆ:
          Nv(a, b, -b.width / uj, -b.height / 4 + rq * 2);
          break;
        case Ur.ⲆⵠΔᐃⲆ:
        case Ur.ΔᐃⵠᐃⲆ:
          Kv(a, b, -b.width / sh - rq * Jo, -b.height / 2 - Zt * rq);
          break;
        case Ur.Δⵠᐃᐃᐃ:
          Kv(a, b, -b.width / Zt, -b.height / 2 - rq * Zn);
          break;
        case Ur.ᐃΔΔⵠⲆ:
          Kv(a, b, -b.width / vk, -b.height / ql - rq * ld);
          break;
        case Ur.ᐃⵠⵠᐃⵠ:
          Kv(a, b, -b.width / qd, -b.height / Pt - rq * 2);
          break;
        case Ur.ⵠⵠⲆⵠⵠ:
          Kv(a, b, -b.width / 2 + rq * ld, -b.height / ld);
          break;
        case Ur.ⲆⵠⲆⲆⲆ:
          Kv(a, b, -b.width / Pt, -b.height / 2 - Ui * rq);
          break;
        case Ur.ⲆⲆⵠΔⲆ:
        case Ur.ⵠⲆⲆⵠΔ:
        case Ur.ⲆⲆⲆᐃᐃ:
          Kv(a, b, -b.width / 2 - Zq * rq, -b.height / Cl);
          break;
        case Ur.ᐃⲆᐃΔⲆ:
          Kv(a, b, -b.width / 2, -b.height / 2 + wr * rq);
          break;
        case Ur.ⵠΔᐃᐃⲆ:
        case Ur.ⵠⲆᐃⵠΔ:
          Kv(a, b, -b.width / 2, -b.height / Tt + rq * 8);
          break;
        case Ur.ΔᐃΔⲆᐃ:
          Kv(a, b, -b.width / zk, -b.height / tg - rq * 4);
      }
    }
  }
  function qv() {
    if (!this.ᐃⲆΔΔᐃ && rl !== this.ⲆᐃⲆⲆᐃ) {
      if (this.x != this.r.x || this.r.y != this.y) {
        var a = (ᐃⵠΔⵠ.Δⵠⵠⵠⵠᐃᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (hc * Math.PI);
        this.ᐃΔⲆΔΔ = ᐃⵠΔⵠ.ΔΔΔΔΔⵠⲆ(a, this.ᐃΔⲆΔΔ);
        this.ᐃΔⲆΔΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(this.ᐃΔⲆΔΔ, a, 0.018);
      }
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      oo.rotate(this.ᐃΔⲆΔΔ);
      if (this.ⲆᐃⲆⲆᐃ === bs.ⲆⵠⵠᐃΔ) {
        if (this.ⲆᐃⲆⲆⲆ > 50 || this.ⵠΔⲆΔⲆ > ur) {
          if (this.ⲆᐃⲆⲆⲆ > 50) {
            this.ⵠΔⲆΔⲆ = Math.min(1, this.ⵠΔⲆΔⲆ + xf);
          } else {
            this.ⵠΔⲆΔⲆ = Math.max(Gr, this.ⵠΔⲆΔⲆ - xf);
          }
          oo.globalAlpha = this.ⵠΔⲆΔⲆ;
          var b = ΔΔ[Ur.ⲆⵠᐃⲆⵠᐃⲆ][ff.time];
          Nv(Ur.ⲆⵠᐃⲆⵠᐃⲆ, b, -b.width / 4, -b.height / 4);
          oo.globalAlpha = Ht;
        }
        b = ΔΔ[Ur.ⲆⵠⵠᐃΔ][ff.time];
        Nv(Ur.ⲆⵠⵠᐃΔ, b, -b.width / ch, -b.height / _g);
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ⲆⵠΔΔⲆ) {
        this.ⲆⵠΔⵠΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(this.ⲆⵠΔⵠΔ, this.ⲆᐃⲆⲆⲆ, 0.018);
        this.ΔᐃΔᐃⵠΔΔ.ᐃⲆΔ();
        if (this.ⲆᐃⲆⲆⲆ > 85) {
          this.ⵠΔⲆΔⲆ = Math.min(1, this.ⵠΔⲆΔⲆ + xf / gl);
        } else {
          this.ⵠΔⲆΔⲆ = Math.max(0.1, this.ⵠΔⲆΔⲆ - xf);
        }
        b = ΔΔ[Ur.ᐃⵠⲆΔΔⲆⵠ][ff.time];
        Nv(Ur.ᐃⵠⲆΔΔⲆⵠ, b, -b.width / ea, -b.height / rg);
        b = ΔΔ[Ur.ⲆΔⲆΔⵠᐃⲆ][ff.time];
        ⲆᐃΔ = -b.width;
        ⵠΔⵠ = -b.height;
        oo.save();
        oo.translate(rq * -20, -Ws * rq);
        oo.rotate(this.ΔᐃΔᐃⵠΔΔ.ⲆᐃⲆ * this.ⵠΔⲆΔⲆ);
        Em(oo, b, -ⲆᐃΔ / Yi, -ⵠΔⵠ / 4, ⲆᐃΔ / Xh, ⵠΔⵠ / Zt);
        oo.restore();
        b = ΔΔ[Ur.ⲆⵠⲆΔΔᐃⵠ][ff.time];
        oo.save();
        oo.translate(Do * rq, rq * -20);
        oo.rotate(this.ⵠΔⲆΔⲆ * -this.ΔᐃΔᐃⵠΔΔ.ⲆᐃⲆ);
        Em(oo, b, -ⲆᐃΔ / Cg, -ⵠΔⵠ / 4, ⲆᐃΔ / 2, ⵠΔⵠ / 2);
        oo.restore();
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ᐃΔⲆᐃⲆ) {
        this.ⲆⵠΔⵠΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(this.ⲆⵠΔⵠΔ, this.ⲆᐃⲆⲆⲆ, 0.018);
        this.ΔᐃΔᐃⵠΔΔ.ᐃⲆΔ();
        if (this.ⲆᐃⲆⲆⲆ > 85) {
          this.ⵠΔⲆΔⲆ = Math.min(Ht, this.ⵠΔⲆΔⲆ + xf / gl);
        } else {
          this.ⵠΔⲆΔⲆ = Math.max(0.1, this.ⵠΔⲆΔⲆ - xf);
        }
        b = ΔΔ[Ur.ⵠⲆⵠᐃΔᐃᐃ][ff.time];
        Nv(Ur.ⵠⲆⵠᐃΔᐃᐃ, b, -b.width / Xb, -b.height / 4);
        b = ΔΔ[Ur.ⲆⵠⵠΔΔⲆⲆ][ff.time];
        ⲆᐃΔ = -b.width;
        ⵠΔⵠ = -b.height;
        oo.save();
        oo.translate(rq * -40, rq * -45);
        oo.rotate(this.ΔᐃΔᐃⵠΔΔ.ⲆᐃⲆ * this.ⵠΔⲆΔⲆ);
        Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / 4, ⲆᐃΔ / Pt, ⵠΔⵠ / Cl);
        oo.restore();
        b = ΔΔ[Ur.ⲆⲆΔⵠΔⵠᐃ][ff.time];
        oo.save();
        oo.translate(rq * 40, rq * -45);
        oo.rotate(-this.ΔᐃΔᐃⵠΔΔ.ⲆᐃⲆ * this.ⵠΔⲆΔⲆ);
        Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / hn, ⲆᐃΔ / Xh, ⵠΔⵠ / zk);
        oo.restore();
      } else if (bs.ᐃΔᐃᐃⵠ === this.ⲆᐃⲆⲆᐃ) {
        this.ⲆⵠΔⵠΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(this.ⲆⵠΔⵠΔ, this.ⲆᐃⲆⲆⲆ, 0.018);
        this.ΔᐃΔᐃⵠΔΔ.ᐃⲆΔ();
        if (this.ⲆᐃⲆⲆⲆ > 85) {
          this.ⵠΔⲆΔⲆ = Math.min(_b, this.ⵠΔⲆΔⲆ + xf / rg);
        } else {
          this.ⵠΔⲆΔⲆ = Math.max(0.1, this.ⵠΔⲆΔⲆ - xf);
        }
        b = ΔΔ[Ur.ΔⲆᐃΔⵠΔΔ][ff.time];
        Nv(Ur.ΔⲆᐃΔⵠΔΔ, b, -b.width / 4, -b.height / uj);
        b = ΔΔ[Ur.ⲆⲆⵠᐃᐃⲆᐃ][ff.time];
        ⲆᐃΔ = -b.width;
        ⵠΔⵠ = -b.height;
        oo.save();
        oo.translate(rq * -40, rq * -45);
        oo.rotate(this.ΔᐃΔᐃⵠΔΔ.ⲆᐃⲆ * this.ⵠΔⲆΔⲆ);
        Em(oo, b, -ⲆᐃΔ / Rb, -ⵠΔⵠ / gl, ⲆᐃΔ / Tt, ⵠΔⵠ / Cl);
        oo.restore();
        b = ΔΔ[Ur.ΔᐃᐃⵠΔⲆΔ][ff.time];
        oo.save();
        oo.translate(rq * 40, rq * -45);
        oo.rotate(this.ⵠΔⲆΔⲆ * -this.ΔᐃΔᐃⵠΔΔ.ⲆᐃⲆ);
        Em(oo, b, -ⲆᐃΔ / 4, -ⵠΔⵠ / 4, ⲆᐃΔ / Pt, ⵠΔⵠ / 2);
        oo.restore();
      } else if (bs.ΔΔⲆⲆⵠ === this.ⲆᐃⲆⲆᐃ) {
        this.ⲆⵠΔⵠΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(this.ⲆⵠΔⵠΔ, this.ⲆᐃⲆⲆⲆ, 0.018);
        b = ΔΔ[Ur.ΔΔⲆⲆⵠ][ff.time];
        Nv(Ur.ΔΔⲆⲆⵠ, b, -b.width / 4, -b.height / xt);
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ⵠᐃⵠⵠΔ) {
        this.ⲆⵠΔⵠΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(this.ⲆⵠΔⵠΔ, this.ⲆᐃⲆⲆⲆ, 0.018);
        b = ΔΔ[Ur.ⵠᐃⵠⵠΔ][ff.time];
        Nv(Ur.ⵠᐃⵠⵠΔ, b, -b.width / rg, -b.height / Cg);
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ⵠⲆⵠⵠⵠ) {
        b = ΔΔ[Ur.ⵠⲆⵠⵠⵠ][ff.time];
        Nv(Ur.ⵠⲆⵠⵠⵠ, b, -b.width / _g, -b.height / 4);
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ΔⲆⲆⲆⲆ) {
        b = ΔΔ[Ur.ΔⵠⵠΔΔⲆⵠ][ff.time];
        if (this.ⲆᐃⲆⲆⲆ > 85) {
          this.ⵠΔⲆΔⲆ = Math.min(1, this.ⵠΔⲆΔⲆ + xf / 4);
        } else {
          this.ⵠΔⲆΔⲆ = Math.max(0, this.ⵠΔⲆΔⲆ - xf);
        }
        this.ⵠΔᐃⲆⵠ += xf * 60;
        if (this.ⵠΔᐃⲆⵠ > 60) {
          this.ⵠΔᐃⲆⵠ -= 60;
        }
        var c = this.ⵠΔⲆΔⲆ * (-Rt + (this.ⵠΔᐃⲆⵠ < 30 ? this.ⵠΔᐃⲆⵠ / 30 : ag - (this.ⵠΔᐃⲆⵠ - 30) / 30) * Jg);
        Nv(Ur.ΔⵠⵠΔΔⲆⵠ, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ᐃⵠᐃⲆⲆ) {
        b = ΔΔ[Ur.ⵠⲆΔⵠⵠⵠⲆ][ff.time];
        if (this.ⲆᐃⲆⲆⲆ > 85) {
          this.ⵠΔⲆΔⲆ = Math.min(1, this.ⵠΔⲆΔⲆ + xf / vs);
        } else {
          this.ⵠΔⲆΔⲆ = Math.max(0, this.ⵠΔⲆΔⲆ - xf);
        }
        this.ⵠΔᐃⲆⵠ += xf * 60;
        if (this.ⵠΔᐃⲆⵠ > 60) {
          this.ⵠΔᐃⲆⵠ -= 60;
        }
        c = this.ⵠΔⲆΔⲆ * (-Rt + (this.ⵠΔᐃⲆⵠ < 30 ? this.ⵠΔᐃⲆⵠ / 30 : 1 - (this.ⵠΔᐃⲆⵠ - 30) / 30) * zu);
        Nv(Ur.ⵠⲆΔⵠⵠⵠⲆ, b, -b.width / Yi, -b.height / rg + c);
      } else if (this.ⲆᐃⲆⲆᐃ === bs.ΔΔΔᐃⵠ) {
        var d = Math.PI / ld;
        var e = Math.PI / Db;
        b = ΔΔ[Ur.ΔΔⵠᐃⵠΔᐃ][ff.time];
        if (this.ⲆᐃⲆⲆⲆ > 85) {
          this.ⵠΔⲆΔⲆ = Math.min(ie, this.ⵠΔⲆΔⲆ + xf / gl);
        } else {
          this.ⵠΔⲆΔⲆ = Math.max(0, this.ⵠΔⲆΔⲆ - xf);
        }
        this.ⵠΔᐃⲆⵠ += xf * 60;
        if (this.ⵠΔᐃⲆⵠ > 60) {
          this.ⵠΔᐃⲆⵠ -= 60;
        }
        c = (-Jj + Za * (this.ⵠΔᐃⲆⵠ < 30 ? this.ⵠΔᐃⲆⵠ / 30 : Ej - (this.ⵠΔᐃⲆⵠ - 30) / 30)) * this.ⵠΔⲆΔⲆ;
        Nv(Ur.ΔΔⵠᐃⵠΔᐃ, b, -b.width / 4 + c, -b.height / 4);
        oo.restore();
        oo.save();
        oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
        oo.rotate(Math.PI + this.ᐃΔⲆΔΔ + e);
        oo.translate(120, c);
        oo.rotate(d);
        b = ΔΔ[Ur.ΔⵠⵠⵠⵠΔΔ][ff.time];
        ⲆᐃΔ = -b.width;
        ⵠΔⵠ = -b.height;
        Em(oo, b, -ⲆᐃΔ / Tt, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
        oo.restore();
        oo.save();
        oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
        oo.rotate(Math.PI + this.ᐃΔⲆΔΔ + d + e);
        oo.translate(120, c);
        oo.rotate(d);
        b = ΔΔ[Ur.ⵠΔⵠᐃΔΔΔ][ff.time];
        ⲆᐃΔ = -b.width;
        ⵠΔⵠ = -b.height;
        Em(oo, b, -ⲆᐃΔ / 2, -ⵠΔⵠ / 2, ⲆᐃΔ, ⵠΔⵠ);
      }
      oo.restore();
    }
  }
  function rv() {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
    if (this.text.length > Cq) {
      for (var a = Cq; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = ub(rq, this.text[a]);
          this.ᐃⲆΔⲆⲆⵠⲆ[a] = Fj;
          this.ⲆⵠⵠⵠⲆΔᐃ[a] = 0;
        }
        if (a === Eo) {
          this.ⲆⵠⵠⵠⲆΔᐃ[_a] = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(this.ⲆᐃΔⲆⵠΔⲆ) * 30;
        }
      }
      this.ᐃⲆΔⲆⲆⵠⲆ[0] += xf;
      if (Al < this.text.length) {
        this.ⲆᐃΔⲆⵠΔⲆ = Math.min(this.ⲆᐃΔⲆⵠΔⲆ + xf, 1);
        if (this.ᐃⲆΔⲆⲆⵠⲆ[Ih] > 1 && this.ⲆᐃΔⲆⵠΔⲆ > 0.5) {
          this.ᐃⲆΔⲆⲆⵠⲆ[Ue] += xf;
        }
      }
      for (a = Cn; this.text.length > a && a < 2; a++) {
        var b = this.ᐃⲆΔⲆⲆⵠⲆ[a];
        if (b > 0) {
          oo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * Db, Nl) : Fh;
          Em(oo, this.label[a], -this.label[a].width / Xr, -this.ⲆⵠⵠⵠⲆΔᐃ[a] + -this.label[a].height / 2 - rq * 110);
        }
      }
      if (this.ᐃⲆΔⲆⲆⵠⲆ[ms] > 4) {
        this.ᐃⲆΔⲆⲆⵠⲆ.shift();
        this.text.shift();
        this.ⲆⵠⵠⵠⲆΔᐃ.shift();
        this.label.shift();
        this.ⲆᐃΔⲆⵠΔⲆ = Gr;
      }
    }
    oo.restore();
  }
  function sv(a, b) {
    if (this.text) {
      if (this.timeout.ⲆⵠΔ) {
        oo.globalAlpha = 1 - this.timeout.ⲆᐃⲆ;
      } else {
        oo.globalAlpha = 1;
      }
      this.label ||= Wu(rq, this.text, 40, a, null, null, null, null, null, b, Ye);
      Em(oo, this.label, (ro - this.label.width) / 2, rq * 50);
      oo.globalAlpha = 1;
      if (this.timeout.ᐃⲆΔ() && this.timeout.ⲆⵠΔ == 0) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function tv() {
    var c = 0;
    switch (this.right) {
      case Ur.ᐃⲆⵠⵠΔ:
      case Ur.ᐃᐃΔᐃᐃ:
      case Ur.ⲆⲆᐃⵠᐃ:
      case Ur.ΔΔⵠⲆⲆ:
      case Ur.Ⲇⵠᐃᐃⵠ:
      case Ur.ⵠΔⲆⵠᐃ:
        c = 1;
    }
    if (this.ᐃⲆΔΔᐃ) {
      for (var d = uh; this.bubbles.length > d; d++) {
        var f = this.bubbles[d];
        if (f.ᐃΔⵠⵠⵠ > 0.5) {
          var j = Fh - (f.ᐃΔⵠⵠⵠ - 0.5) * 2;
        } else {
          j = f.ᐃΔⵠⵠⵠ * 2;
        }
        oo.globalAlpha = j;
        var k = ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ][ff.time][f.id];
        Em(oo, k, bx.ᐃᐃⵠ.x + f.x - k.width / ql, bx.ᐃᐃⵠ.y + f.y - k.height / Pt);
        oo.globalAlpha = 1;
      }
    } else {
      oo.save();
      oo.translate(bx.ᐃᐃⵠ.x + this.x, bx.ᐃᐃⵠ.y + this.y);
      ff.ᐃΔⲆⲆⲆⲆⲆⲆᐃ(this);
      if (this.action & qw.ΔⲆⲆΔⲆᐃᐃ) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case Ur.ᐃⵠᐃⵠΔ:
                oo.save();
                var b = a.attack.ⲆᐃⲆ * -Gl / Math.PI;
                if (a.attack.ⲆⵠΔ) {
                  var c = -Math.PI / 3 - (Math.PI / X + a.attack.ⲆᐃⲆ) / 3;
                } else {
                  c = a.attack.ⲆᐃⲆ;
                }
                oo.rotate(a.angle - Math.PI / Pt + c);
                oo.globalAlpha = b / 1.2;
                ob(oo, rq * -40, rq * 90, rq * 5);
                eb(oo, "#0B6A84");
                oo.globalAlpha = b / 1.2;
                ob(oo, rq * -52, rq * 100, rq * 8);
                eb(oo, "#0B6A84");
                oo.globalAlpha = b / 1.2;
                ob(oo, rq * -30, rq * 95, rq * 4);
                eb(oo, "#0B6A84");
                oo.globalAlpha = 1;
                oo.restore();
                break;
              case Ur.ΔⵠΔΔⵠ:
              case Ur.ⵠᐃΔΔⵠ:
              case Ur.ΔⲆΔᐃⵠ:
              case Ur.ᐃⲆΔᐃᐃ:
                if (a.ⲆᐃᐃᐃΔⵠⲆ === 1) {
                  break;
                }
                if (a.ᐃⲆⲆᐃⵠ > ur) {
                  var d = Ur.ⵠⵠⵠⲆⵠΔᐃ[ff.time];
                } else {
                  d = a.ᐃⲆⲆΔⵠᐃⵠ > rl || a.ⵠⵠᐃΔΔ > 0 ? Ur.ᐃⲆⵠⵠᐃΔΔ[ff.time] : Ur.ⵠⵠᐃⲆⲆΔΔ[ff.time];
                }
                b = a.attack.ⲆᐃⲆ * -3 / Math.PI;
                c = a.attack.ⲆⵠΔ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / sh, vq);
                if (Nl === c) {
                  a.ΔⵠⲆⵠᐃᐃᐃ = a.angle;
                }
                oo.save();
                oo.rotate(a.ΔⵠⲆⵠᐃᐃᐃ - Math.PI / 2);
                oo.globalAlpha = b;
                var e = rq * 25 + c * 25;
                ob(oo, e, rq * 80, rq * 15);
                eb(oo, d);
                ob(oo, -e, rq * 80, rq * 15);
                eb(oo, d);
                oo.globalAlpha = Ej;
                oo.restore();
            }
          }
        })(this);
      }
      oo.save();
      oo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & qw.ΔⲆⲆΔⲆᐃᐃ)) {
        if (this.action & qw.IDLE || this.ⲆᐃⲆⲆᐃ !== 0) {
          this.ΔⲆΔⲆⲆΔⲆ.ᐃⲆΔ();
        } else if (this.action & qw.ᐃᐃΔⵠᐃⵠΔ) {
          this.ΔΔⲆⲆⵠⵠΔ.ᐃⲆΔ();
        }
      }
      var m;
      var p = this.ΔⲆΔⲆⲆΔⲆ.ⲆᐃⲆ;
      var q = this.ΔΔⲆⲆⵠⵠΔ.ⲆᐃⲆ;
      if (Ur.ᐃΔΔⵠⲆ === this.ΔΔᐃΔΔ) {
        k = ΔΔ[Ur.ᐃⲆᐃΔᐃ][ff.time];
        m = Ur.ᐃⲆᐃΔᐃ;
      } else if (Ur.ᐃⵠⵠⲆⵠ === this.ΔΔᐃΔΔ) {
        k = ΔΔ[Ur.ᐃⵠⵠⲆᐃ][ff.time];
        m = Ur.ᐃⵠⵠⲆᐃ;
      } else if (Ur.ᐃⲆⲆΔⵠ === this.ΔΔᐃΔΔ) {
        k = ΔΔ[Ur.ΔⵠⵠⲆⲆᐃⲆ][ff.time];
        m = Ur.ΔⵠⵠⲆⲆᐃⲆ;
      } else if (this.ΔΔᐃΔΔ === Ur.ΔᐃΔⵠᐃ) {
        k = ΔΔ[Ur.ⵠΔⲆΔⵠⲆΔ][ff.time];
        m = Ur.ⵠΔⲆΔⵠⲆΔ;
      } else if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
        k = ΔΔ[Ur.ⵠΔᐃᐃΔⵠⲆ][ff.time];
        m = Ur.ⵠΔᐃᐃΔⵠⲆ;
      } else {
        k = ΔΔ[Ur.ᐃⵠⲆΔᐃ][this.ᐃᐃΔᐃ][ff.time];
        m = Ur.ᐃⵠⲆΔᐃ;
      }
      ᐃⲆΔⲆ = ΔΔ[Ur.ᐃᐃⵠΔⲆ][ff.time];
      var w = k;
      var h = m;
      if (this.action & qw.ΔⲆⲆΔⲆᐃᐃ) {
        if (this.attack.ᐃⲆΔ() && yj == this.attack.ⲆⵠΔ) {
          this.ⵠΔⲆⵠΔ = !this.ⵠΔⲆⵠΔ;
          this.action -= qw.ΔⲆⲆΔⲆᐃᐃ;
          if (this.ⵠᐃΔΔ == bx.ⵠᐃΔΔ) {
            bx.control.ⲆⵠⵠΔ = _a;
          }
        }
        if (this.right >= 0) {
          this.ⵠΔⲆⵠΔ = true;
        }
        var l = this.ⵠΔⲆⵠΔ ? this.attack.ⲆᐃⲆ : -this.attack.ⲆᐃⲆ / 3;
        var x = this.ⵠΔⲆⵠΔ ? this.attack.ⲆᐃⲆ / Sg : -this.attack.ⲆᐃⲆ;
        if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
          oo.save();
          oo.rotate(l);
          Kv(m, k, -k.width / 2 - (66 + p) * rq, -k.height / Pt + rq * (5 + q));
          oo.restore();
          oo.save();
          oo.rotate(x);
          Kv(m, k, -k.width / ql + rq * (66 + p), -k.height / gc + rq * (5 + q));
          oo.restore();
        } else if (c === 0) {
          if (this.right === Ur.ΔⵠⵠΔⲆ) {
            l = -ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ(-l);
          }
          oo.save();
          oo.rotate(l);
          Kv(Ur.ᐃᐃⵠΔⲆ, ᐃⲆΔⲆ, -ᐃⲆΔⲆ.width / Tt - rq * (49 + p), -ᐃⲆΔⲆ.height / 2 + (15 + q) * rq);
          if (Ur.ⵠᐃⵠⲆᐃ === this.right) {
            var u = ΔΔ[this.right][this.ΔΔᐃᐃⵠ][ff.time];
            Jv(this.right, this.ΔΔᐃᐃⵠ, u, -u.width / hn - (62 + p) * rq, -u.height / _g + rq * (q + Pg));
          } else {
            Gp(this.right, p, q);
          }
          if (Ur.ᐃⵠⵠⲆᐃ <= m) {
            Nv(m, k, -k.width / rg - rq * (49 + p), -k.height / _g + rq * (vb + q));
          } else if (m !== Ur.ᐃⲆᐃΔᐃ) {
            Jv(m, this.ᐃᐃΔᐃ, k, -k.width / ug - rq * (49 + p), -k.height / 4 + (11 + q) * rq);
          } else {
            Kv(m, k, -k.width / hc - rq * (49 + p), -k.height / Zt + (zt + q) * rq);
          }
          oo.restore();
          oo.save();
          oo.rotate(x);
          Kv(Ur.ᐃᐃⵠΔⲆ, ᐃⲆΔⲆ, -ᐃⲆΔⲆ.width / hc + rq * (49 + p), -ᐃⲆΔⲆ.height / 2 + rq * (15 + q));
          if (m >= Ur.ᐃⵠⵠⲆᐃ) {
            Nv(m, k, -k.width / uj + rq * (49 + p), -k.height / 4 + rq * (ot + q));
          } else if (Ur.ᐃⲆᐃΔᐃ !== m) {
            Jv(m, this.ᐃᐃΔᐃ, k, -k.width / gl + (49 + p) * rq, -k.height / 4 + rq * (vb + q));
          } else {
            Kv(m, k, -k.width / 2 + rq * (49 + p), -k.height / 2 + rq * (11 + q));
          }
          oo.restore();
        }
      } else if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
        Kv(m, k, -k.width / 2 - rq * (66 + p), -k.height / hc + rq * (Jn + q));
        Kv(m, k, -k.width / 2 + (66 + p) * rq, -k.height / vk + rq * (jt + q));
      } else if (c === 0) {
        Kv(Ur.ᐃᐃⵠΔⲆ, ᐃⲆΔⲆ, -ᐃⲆΔⲆ.width / 2 - (49 + p) * rq, -ᐃⲆΔⲆ.height / wr + rq * (15 + q));
        if (Ur.ⵠᐃⵠⲆᐃ === this.right) {
          u = ΔΔ[this.right][this.ΔΔᐃᐃⵠ][ff.time];
          Jv(this.right, this.ΔΔᐃᐃⵠ, u, -u.width / rg - rq * (62 + p), -u.height / ug + (q + sl) * rq);
        } else {
          Gp(this.right, p, q);
        }
        if (Ur.ᐃⵠⵠⲆᐃ <= m) {
          Nv(m, k, -k.width / 4 - rq * (49 + p), -k.height / Cg + (11 + q) * rq);
        } else if (m !== Ur.ᐃⲆᐃΔᐃ) {
          Jv(m, this.ᐃᐃΔᐃ, k, -k.width / Xb - rq * (49 + p), -k.height / 4 + rq * (11 + q));
        } else {
          Kv(m, k, -k.width / Zn - rq * (49 + p), -k.height / 2 + rq * (11 + q));
        }
        Kv(Ur.ᐃᐃⵠΔⲆ, ᐃⲆΔⲆ, -ᐃⲆΔⲆ.width / hc + rq * (49 + p), -ᐃⲆΔⲆ.height / ql + (fq + q) * rq);
        if (Ur.ᐃⵠⵠⲆᐃ <= m) {
          Nv(m, k, -k.width / Rb + (49 + p) * rq, -k.height / 4 + rq * (11 + q));
        } else if (Ur.ᐃⲆᐃΔᐃ !== m) {
          Jv(m, this.ᐃᐃΔᐃ, k, -k.width / 4 + (49 + p) * rq, -k.height / 4 + ($i + q) * rq);
        } else {
          Kv(m, k, -k.width / 2 + (49 + p) * rq, -k.height / Zt + (11 + q) * rq);
        }
      }
      if (this.ᐃⵠΔᐃⲆ && this.ΔΔᐃΔΔ < 1) {
        k = ΔΔ[Ur.ᐃⵠⲆΔ][this.ⲆⲆⵠᐃⲆⲆΔ][ff.time];
        Jv(Ur.ᐃⵠⲆΔ, this.ⲆⲆⵠᐃⲆⲆΔ, k, -k.width / 4, -k.height / rg - rq * 39);
      }
      if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
        k = ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆᐃ][ff.time];
        Kv(Ur.ᐃᐃᐃⲆⵠⲆᐃ, k, -k.width / 2, -k.height / 2);
        this.ⲆΔⲆᐃᐃᐃⵠ.ᐃⲆΔ();
        k = ΔΔ[Ur.ⲆⲆⲆᐃⲆⵠⵠ][ff.time];
        Kv(Ur.ⲆⲆⲆᐃⲆⵠⵠ, k, -k.width / Xr, -k.height / 2 + this.ⲆΔⲆᐃᐃᐃⵠ.ⲆᐃⲆ);
      } else {
        k = ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][this.ᐃᐃΔᐃ][ff.time];
        if (Ur.ᐃΔΔⵠⲆ !== this.ΔΔᐃΔΔ && (Jv(Ur.ⲆᐃⲆⵠᐃΔᐃ, this.ᐃᐃΔᐃ, k, -k.width / ch, -k.height / Xb), this.ᐃΔᐃⵠⵠ > qn)) {
          k = ΔΔ[Ur.ⲆⲆΔⲆⲆ][this.ᐃΔᐃⵠⵠ][ff.time];
          Jv(Ur.ⲆⲆΔⲆⲆ, this.ᐃΔᐃⵠⵠ, k, -k.width / 4, -k.height / rg);
        }
      }
      if (this.action & qw.ᐃⲆⲆᐃⲆⵠᐃ) {
        if (this.ᐃⲆᐃⵠⵠ.ᐃⲆΔ() && this.ᐃⲆᐃⵠⵠ.ⲆⵠΔ == 0) {
          this.action -= qw.ᐃⲆⲆᐃⲆⵠᐃ;
        }
        oo.globalAlpha = 0.6 - this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ;
        if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
          k = ΔΔ[Ur.ⲆᐃⲆⲆⵠΔΔ];
          Em(oo, k, -k.width / vk, -k.height / 2);
        } else {
          k = uv(this.ᐃᐃΔᐃ, ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][this.ᐃᐃΔᐃ][0], ᐃᐃⲆⵠⲆⵠⵠᐃⲆ);
          Em(oo, k, k.width / 4, k.height / Eg, -k.width / 2, -k.height / 2);
        }
        oo.globalAlpha = As;
      }
      if (this.action & qw.ΔᐃⵠⲆΔⲆⲆ) {
        if (this.ⵠⲆᐃᐃᐃⲆⲆ.ᐃⲆΔ() && this.ⵠⲆᐃᐃᐃⲆⲆ.ⲆⵠΔ == 0) {
          this.action -= qw.ΔᐃⵠⲆΔⲆⲆ;
        }
        oo.globalAlpha = 0.6 - this.ⵠⲆᐃᐃᐃⲆⲆ.ⲆᐃⲆ;
        k = ΔΔ[Ur.ΔᐃⵠⲆΔⲆⲆ];
        Em(oo, k, -k.width / 2, -k.height / 2);
        oo.globalAlpha = 1;
      }
      if (this.action & qw.ⵠᐃⲆΔ) {
        if (this.ΔΔΔ.ᐃⲆΔ() && this.ΔΔΔ.ⲆⵠΔ == 0) {
          this.action -= qw.ⵠᐃⲆΔ;
        }
        oo.globalAlpha = 0.6 - this.ΔΔΔ.ⲆᐃⲆ;
        if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
          k = ΔΔ[Ur.ⲆⲆᐃΔᐃᐃΔ];
          Em(oo, k, -k.width / hc, -k.height / 2);
        } else {
          k = uv(this.ᐃᐃΔᐃ, ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][this.ᐃᐃΔᐃ][Nl], ΔⵠᐃΔΔⵠⵠⲆⲆ);
          Em(oo, k, k.width / rg, k.height / uj, -k.width / 2, -k.height / vk);
        }
        oo.globalAlpha = 1;
      }
      if (this.action & qw.ᐃⲆⵠⲆⲆ) {
        if (this.freeze.ᐃⲆΔ() && Fq == this.freeze.ⲆⵠΔ) {
          this.action -= qw.ᐃⲆⵠⲆⲆ;
        }
        oo.globalAlpha = 0.6 - this.freeze.ⲆᐃⲆ;
        k = uv(this.ᐃᐃΔᐃ, ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][this.ᐃᐃΔᐃ][0], ΔΔΔΔᐃΔᐃΔⵠ);
        Em(oo, k, k.width / 4, k.height / ug, -k.width / 2, -k.height / wr);
        oo.globalAlpha = 1;
      }
      if (this.action & qw.ⵠⵠⵠⵠⲆᐃⵠ) {
        if (this.ΔⵠᐃᐃΔⲆᐃ.ᐃⲆΔ() && xg == this.ΔⵠᐃᐃΔⲆᐃ.ⲆⵠΔ) {
          this.action -= qw.ⵠⵠⵠⵠⲆᐃⵠ;
        }
        oo.globalAlpha = 0.6 - this.ΔⵠᐃᐃΔⲆᐃ.ⲆᐃⲆ;
        if (this.ⵠⵠⲆᐃⵠᐃᐃ) {
          k = ΔΔ[Ur.ΔⵠΔⵠᐃⵠⵠ];
          Em(oo, k, -k.width / 2, -k.height / Xr);
        } else {
          k = uv(this.ᐃᐃΔᐃ, ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][this.ᐃᐃΔᐃ][0], ΔΔⵠΔⲆΔⲆⵠᐃ);
          Em(oo, k, k.width / Xb, k.height / ug, -k.width / sh, -k.height / 2);
        }
        oo.globalAlpha = Eo;
      }
      pv(this.ΔΔᐃΔΔ);
      if (c === Ej) {
        if (this.action & qw.ΔⲆⲆΔⲆᐃᐃ) {
          p += this.attack.ⲆᐃⲆ * eg;
        }
        Kv(Ur.ᐃᐃⵠΔⲆ, ᐃⲆΔⲆ, -ᐃⲆΔⲆ.width / 2 - rq * 26, -ᐃⲆΔⲆ.height / ld + rq * (31 + q + p));
        if (Ur.ᐃⵠⵠⲆᐃ <= h) {
          Nv(h, w, -w.width / 4 - rq * 26, -w.height / uj + (27 + q + p) * rq);
        } else if (Ur.ᐃⲆᐃΔᐃ !== h) {
          Jv(h, this.ᐃᐃΔᐃ, w, -w.width / ea - rq * 26, -w.height / _l + (27 + q + p) * rq);
        } else {
          Kv(h, w, -w.width / Cl - rq * 26, -w.height / 2 + (27 + q + p) * rq);
        }
        Kv(Ur.ᐃᐃⵠΔⲆ, ᐃⲆΔⲆ, -ᐃⲆΔⲆ.width / 2 + rq * 26, -ᐃⲆΔⲆ.height / 2 + (31 + q + p) * rq);
        if (h >= Ur.ᐃⵠⵠⲆᐃ) {
          Nv(h, w, -w.width / Db + rq * 26, -w.height / 4 + (27 + q + p) * rq);
        } else if (Ur.ᐃⲆᐃΔᐃ !== h) {
          Jv(h, this.ᐃᐃΔᐃ, w, -w.width / ug + rq * 26, -w.height / 4 + rq * (27 + q + p));
        } else {
          Kv(h, w, -w.width / 2 + rq * 26, -w.height / 2 + rq * (27 + q + p));
        }
        _u(this.right, qn, q + p);
      }
      oo.restore();
      if (this.ΔΔᐃΔΔ !== Ur.ᐃⲆᐃΔⲆ && Ur.ᐃΔΔⵠⲆ !== this.ΔΔᐃΔΔ) {
        if (this.ᐃⲆⲆᐃⵠ > 0) {
          this.ᐃᐃᐃⲆ.ΔΔⵠΔᐃⲆⲆ ||= Wu(rq, this.ᐃᐃᐃⲆ.ⵠᐃΔⵠⲆ, Mt, "#187484", "#000", 2, null, null, rq * 300);
          k = this.ᐃᐃᐃⲆ.ΔΔⵠΔᐃⲆⲆ;
        } else {
          if (!this.ᐃᐃᐃⲆ.label) {
            this.ᐃᐃᐃⲆ.label = Wu(rq, this.ᐃᐃᐃⲆ.ⵠᐃΔⵠⲆ, 20, "#FFF", "#000", Zt, null, null, rq * 300);
          }
          k = this.ᐃᐃᐃⲆ.label;
        }
        if (ff.ⲆΔⵠ == Ur.ΔΔⵠ) {
          oo.globalAlpha = 0.5;
        }
        p = Math.floor(-k.width / 2);
        q = Math.floor(-k.height / qd - rq * 70);
        Em(oo, k, p, q);
        if (qn < this.ᐃᐃᐃⲆ.level) {
          var y = p + k.width + 5;
          k = ΔΔ[Ur.Ⲇᐃⵠⵠⵠⵠᐃ];
          if (ⵠᐃⵠᐃⲆΔⲆ[this.ᐃᐃᐃⲆ.level] === undefined) {
            ⵠᐃⵠᐃⲆΔⲆ[this.ᐃᐃᐃⲆ.level] = Wu(rq, "[" + this.ᐃᐃᐃⲆ.level + "]", 20, "#F9E8A2", "#000", ld, null, null, rq * 50);
          }
          Em(oo, ⵠᐃⵠᐃⲆΔⲆ[this.ᐃᐃᐃⲆ.level], y, q);
        }
        oo.globalAlpha = ie;
      } else {
        q = Math.floor(rq * -70);
        p = Math.floor(ΔΔ[Ur.ΔᐃⲆΔΔⵠⲆ].width / 1.5);
      }
      if (bx.ⵠⵠᐃⲆᐃᐃⲆ(this.ΔΔΔⵠ)) {
        if (this.ΔΔΔⵠ == bx.ⲆΔΔΔᐃ[Cn]) {
          k = ΔΔ[Ur.ᐃⲆⲆΔΔⵠΔ];
        } else {
          k = ΔΔ[Ur.ΔᐃⲆΔΔⵠⲆ];
        }
        Em(oo, k, p - k.width - gg, q - 6);
      }
      oo.restore();
    }
  }
  function uv(b, c, d) {
    if (c.ᐃⲆⵠⲆΔΔⲆ() !== 1) {
      return c;
    }
    var e = ᐃᐃⲆⲆⲆᐃΔ[d][b];
    if (e === oh) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var h = c.height;
      e.width = g;
      e.height = h;
      f.drawImage(c, ms, ur);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ⵠᐃᐃᐃᐃᐃΔᐃΔ[d];
      f.fillRect(Cn, 0, g, h);
      ᐃᐃⲆⲆⲆᐃΔ[d][b] = e;
    }
    return e;
  }
  function vv() {
    if (this.message !== Gg) {
      var a = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length > 0 ? -95 : 0;
      Em(oo, this.message, 0, so - this.message.height + a);
    }
  }
  function wv() {
    if (this.enabled && this.ⲆᐃᐃⲆⵠ >= 0) {
      var a = new Date().getTime() - this.ⲆᐃᐃⲆⵠ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - re * (b - 0.5);
      } else {
        b *= zk;
      }
      if ((a = Math.floor(a / 1000)) < uw.ΔⲆᐃⲆⵠⲆᐃ) {
        a = uw.ΔⲆᐃⲆⵠⲆᐃ - a;
        this.label ||= Wu(rq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (a != this.now || !this.ᐃⵠᐃᐃΔⵠⵠ) {
          this.now = a;
          this.ᐃⵠᐃᐃΔⵠⵠ = Wu(rq, "" + a, 40, "#660000", null, null, null, null, null, "#000", bb);
        }
        Em(oo, this.label, (ro - this.label.width) / 2, yg * rq);
        oo.globalAlpha = b;
        Em(oo, this.ᐃⵠᐃᐃΔⵠⵠ, (ro - this.label.width) / 2 - this.ᐃⵠᐃᐃΔⵠⵠ.width + eg * rq, rq * yg);
        oo.globalAlpha = 1;
      }
    }
  }
  ΔⵠᐃΔΔⵠⵠⲆⲆ = 0;
  ᐃᐃⲆⵠⲆⵠⵠᐃⲆ = 1;
  ΔΔΔΔᐃΔᐃΔⵠ = 2;
  ΔΔⵠΔⲆΔⲆⵠᐃ = $b;
  ᐃᐃⲆⲆΔᐃᐃⵠᐃ = 4;
  ᐃᐃⲆⲆⲆᐃΔ = [[], [], [], [], []];
  ⵠᐃᐃᐃᐃᐃΔᐃΔ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var xv = 0;
  function yv(j, e, i, k, n, o, q, a = undefined) {
    if (a === undefined) a = Ih;
    for (var r = q; a <= r; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          var x = _w.ⵠⲆⵠⵠ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (Hj !== y) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                var B = ΔΔ[n][ff.time][r];
                var D = (xv + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : Gs - (D - 30) / 30;
                var F = (aa + E * 0.9 / 30) * -B.width;
                var G = (Zq + E * 0.9 / 30) * -B.height;
                E = (D = (xv + (t + w) * th) % 60) < 30 ? D / 30 : Oj - (D - 30) / 30;
                var H = oo.globalAlpha;
                oo.globalAlpha = (0.9 + E * 0.1) * H;
                Em(oo, B, bx.ᐃᐃⵠ.x + A.x - F / Ss, bx.ᐃᐃⵠ.y + A.y - G / 2, F, G);
                oo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  function zv(j, e, i, k, n, o, q, a) {
    if (a === da) {
      a = 0;
    }
    ff.ⵠᐃᐃᐃ[n].ᐃⲆΔ();
    for (var r = q; r >= a; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; k >= w; w++) {
          var x = _w.ⵠⲆⵠⵠ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== undefined) {
              for (var z = rl; z < y.length; z++) {
                var A = y[z];
                if (A.ᐃⲆΔ) {
                  if (A.ΔΔΔ.ᐃⲆΔ() && A.ΔΔΔ.ⲆⵠΔ == 0) {
                    A.ᐃⲆΔ = false;
                  }
                  var B = rq * (xf * (1 - A.ΔΔΔ.ⲆᐃⲆ) * 600);
                  var D = Math.sin(A.angle) * B;
                  var E = Math.cos(A.angle) * B;
                } else {
                  D = ms;
                  E = 0;
                }
                var F = ΔΔ[n][ff.time][r];
                var G = ff.ⵠᐃᐃᐃ[n].ⲆᐃⲆ * -F.width;
                var H = -F.height * ff.ⵠᐃᐃᐃ[n].ⲆᐃⲆ;
                Em(oo, F, bx.ᐃᐃⵠ.x + A.x - G / 2 + D, bx.ᐃᐃⵠ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var Av = [];
  for (rt = 0; ba > rt; rt++) {
    var Bv = Ok;
    if (Math.random() < 0.25) {
      Bv = 0;
    }
    Av.push(Bv);
  }
  function Cv(f, e, i, j, k, n, o, a = 0, q) {
    for (var h = o; a <= h; h--) {
      for (var r = f; e >= r; r++) {
        for (var s = i; s <= j; s++) {
          if (q <= 0 || Av[(r + s * q) % Av.length] !== Ej) {
            var t = _w.ⵠⲆⵠⵠ[r][s];
            if (da !== t && qr !== t[n]) {
              var w = t[n][h];
              if (w !== undefined) {
                for (var x = Cn; w.length > x; x++) {
                  var y = w[x];
                  if (y.ᐃⲆΔ) {
                    if (y.ΔΔΔ.ᐃⲆΔ() && y.ΔΔΔ.ⲆⵠΔ == kl) {
                      y.ᐃⲆΔ = false;
                    }
                    var z = xf * (1 - y.ΔΔΔ.ⲆᐃⲆ) * 600 * rq;
                    var A = Math.sin(y.angle) * z;
                    var B = z * Math.cos(y.angle);
                  } else {
                    A = Cn;
                    B = 0;
                  }
                  var D = ΔΔ[k][ff.time][h];
                  Em(oo, D, bx.ᐃᐃⵠ.x + y.x - D.width / (Δⵠⵠᐃⵠ * Pt) + A, bx.ᐃᐃⵠ.y + y.y - D.height / (lt * Δⵠⵠᐃⵠ) + B, D.width / Δⵠⵠᐃⵠ, D.height / Δⵠⵠᐃⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  function Dv(c, e, f, i, j, k, m, a = undefined, n) {
    if (a === undefined) a = Rl;
    for (var h = c; h <= e; h++) {
      for (var o = f; i >= o; o++) {
        var p = _w.ⵠⲆⵠⵠ[h][o];
        if (p !== qj && p[k] !== Gk) {
          var q = p[k];
          if (q !== undefined) {
            if (q.scale === 1) {
              var r = ΔΔ[j][ff.time][q.ᐃᐃⵠΔ];
              oo.save();
              oo.translate(bx.ᐃᐃⵠ.x + q.x, bx.ᐃᐃⵠ.y + q.y);
              oo.rotate(q.angle);
              Em(oo, r, -r.width / Aq, -r.height / uj, r.width / Zt, r.height / 2);
              oo.restore();
            } else if (q.scale === 3) {
              for (var t = rl; q.ΔⲆⵠ.length > t; t++) {
                oo.save();
                oo.translate(bx.ᐃᐃⵠ.x + q.x, bx.ᐃᐃⵠ.y + q.y);
                oo.rotate(q.ΔⲆⵠ[t].angle);
                r = ΔΔ[j][ff.time][q.ΔⲆⵠ[t].ᐃᐃⵠΔ];
                Em(oo, r, -r.width / 3 + q.ΔⲆⵠ[t].x, -r.height / 3 + q.ΔⲆⵠ[t].y, r.width / 1.5, r.height / 1.5);
                oo.restore();
              }
            } else {
              r = ΔΔ[j][ff.time][q.ᐃᐃⵠΔ];
              oo.save();
              oo.translate(bx.ᐃᐃⵠ.x + q.x, bx.ᐃᐃⵠ.y + q.y);
              oo.rotate(q.angle);
              Em(oo, r, -r.width / gc, -r.height / hc, r.width, r.height);
              oo.restore();
            }
          }
        }
      }
    }
  }
  function Ev(f, e, i, j, k, n, o, a = undefined, q) {
    if (a === undefined) a = Gr;
    for (var h = o; h >= a; h--) {
      for (var r = f; e >= r; r++) {
        for (var t = i; j >= t; t++) {
          var x = _w.ⵠⲆⵠⵠ[r][t];
          if (x !== undefined && x[n] !== undefined) {
            var A = x[n][h];
            if (A !== qj) {
              for (var B = gr; B < A.length; B++) {
                var D = A[B];
                if (D.ᐃⲆΔ) {
                  if (D.ΔΔΔ.ᐃⲆΔ() && D.ΔΔΔ.ⲆⵠΔ == Fq) {
                    D.ᐃⲆΔ = ds;
                  }
                  var E = rq * ((1 - D.ΔΔΔ.ⲆᐃⲆ) * xf * 600);
                  var F = E * Math.sin(D.angle);
                  var G = Math.cos(D.angle) * E;
                } else {
                  F = _a;
                  G = 0;
                }
                for (var H = Nl; ⲆᐃⵠⵠΔᐃΔ[h].ΔⲆⲆⵠ > H; H++) {
                  if (ff.ΔᐃⲆᐃᐃ[H].ᐃⵠᐃⵠᐃⵠⲆ !== fx) {
                    ff.ΔᐃⲆᐃᐃ[H].ᐃⲆΔ();
                    ff.ΔᐃⲆᐃᐃ[H].ᐃⵠᐃⵠᐃⵠⲆ = fx;
                  }
                  var I = ΔΔ[Ur.ΔⲆⲆΔⲆ][ff.time][ⲆᐃⵠⵠΔᐃΔ[h].ⲆⲆⲆⲆ[H].ᐃΔΔ];
                  var J = ff.ΔᐃⲆᐃᐃ[H].ⲆᐃⲆ * -I.width;
                  var K = -I.height * ff.ΔᐃⲆᐃᐃ[H].ⲆᐃⲆ;
                  Em(oo, I, bx.ᐃᐃⵠ.x + D.x - J / ch + F + ⲆᐃⵠⵠΔᐃΔ[h].ⲆⲆⲆⲆ[H].x, bx.ᐃᐃⵠ.y + D.y - K / 4 + G + ⲆᐃⵠⵠΔᐃΔ[h].ⲆⲆⲆⲆ[H].y, J / 2, K / sh);
                }
              }
            }
          }
        }
      }
    }
  }
  Δⵠⵠᐃⵠ = 1;
  ⲆᐃⵠⵠΔᐃΔ = [{
    ΔⲆⲆⵠ: bb,
    ⲆⲆⲆⲆ: [{
      y: -20,
      x: -128,
      ᐃΔΔ: 0
    }, {
      x: -86,
      y: -Aq,
      ᐃΔΔ: Ej
    }, {
      ᐃΔΔ: 2,
      x: -60,
      y: -74
    }, {
      ᐃΔΔ: Cn,
      x: -22,
      y: -144
    }, {
      x: -58,
      y: 86,
      ᐃΔΔ: qn
    }, {
      y: -30,
      ᐃΔΔ: gr,
      x: 3
    }, {
      ᐃΔΔ: 1,
      x: 65,
      y: -115
    }, {
      ᐃΔΔ: uh,
      y: -50,
      x: 118
    }, {
      x: 73,
      y: 15,
      ᐃΔΔ: ie
    }, {
      x: 67,
      y: 79,
      ᐃΔΔ: Rl
    }]
  }, {
    ΔⲆⲆⵠ: 5,
    ⲆⲆⲆⲆ: [{
      y: -26,
      ᐃΔΔ: qk,
      x: -45
    }, {
      ᐃΔΔ: Xh,
      x: -45,
      y: 20
    }, {
      ᐃΔΔ: 1,
      y: -60,
      x: Hs
    }, {
      x: 52,
      y: -vn,
      ᐃΔΔ: 1
    }, {
      ᐃΔΔ: 0,
      x: Q,
      y: 45
    }]
  }, {
    ΔⲆⲆⵠ: 3,
    ⲆⲆⲆⲆ: [{
      x: -30,
      ᐃΔΔ: zk,
      y: xs
    }, {
      x: Oq,
      y: -38,
      ᐃΔΔ: 2
    }, {
      x: 37,
      ᐃΔΔ: 2,
      y: ed
    }]
  }, {
    ΔⲆⲆⵠ: La,
    ⲆⲆⲆⲆ: [{
      y: -87,
      x: -74,
      ᐃΔΔ: 2
    }, {
      y: -10,
      ᐃΔΔ: Al,
      x: -11
    }, {
      ᐃΔΔ: j,
      y: 17,
      x: -99
    }, {
      y: 84,
      ᐃΔΔ: Rl,
      x: -66
    }, {
      x: -55,
      y: 123,
      ᐃΔΔ: 1
    }, {
      y: 81,
      x: pj,
      ᐃΔΔ: Zt
    }, {
      ᐃΔΔ: Cn,
      x: 52,
      y: 50
    }, {
      ᐃΔΔ: 1,
      x: 138,
      y: vr
    }, {
      y: -28,
      x: 104,
      ᐃΔΔ: 0
    }, {
      x: 67,
      ᐃΔΔ: hc,
      y: -56
    }, {
      y: -112,
      ᐃΔΔ: 0,
      x: Jo
    }]
  }, {
    ⲆⲆⲆⲆ: [{
      x: -33,
      ᐃΔΔ: 2,
      y: -66
    }, {
      ᐃΔΔ: ms,
      y: 10,
      x: -58
    }, {
      x: -19,
      y: 44,
      ᐃΔΔ: Ej
    }, {
      x: 44,
      ᐃΔΔ: Gr,
      y: Ws
    }, {
      y: -36,
      ᐃΔΔ: 2,
      x: 53
    }, {
      y: -62,
      x: qq,
      ᐃΔΔ: vq
    }],
    ΔⲆⲆⵠ: M
  }, {
    ΔⲆⲆⵠ: og,
    ⲆⲆⲆⲆ: [{
      x: -gt,
      y: -25,
      ᐃΔΔ: As
    }, {
      x: -29,
      ᐃΔΔ: 2,
      y: 13
    }, {
      y: 12,
      ᐃΔΔ: 0,
      x: Il
    }]
  }];
  var Fv = 0;
  var Gv = 0;
  var Hv = 0;
  var Iv = 0;
  function Jv(b, c, d, e, f) {
    var g = d.width;
    var i = d.height;
    var a = Math.floor(g / 2);
    var j = Math.floor(i / 2);
    if (ff.transition) {
      oo.globalAlpha = ie;
      Em(oo, ΔΔ[b][c][ff.time], 0, 0, g, i, e, f, a, j);
      ff.time = ff.time ? ur : Zq;
      oo.globalAlpha = ag - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      Em(oo, ΔΔ[b][c][ff.time], gr, rl, g, i, e, f, a, j);
      ff.time = ff.time ? Fj : 1;
      oo.globalAlpha = As;
    } else {
      Em(oo, ΔΔ[b][c][ff.time], 0, Qs, g, i, e, f, a, j);
    }
  }
  function Kv(a, b, c, d) {
    if (ff.transition) {
      oo.globalAlpha = Gs;
      Em(oo, ΔΔ[a][ff.time], c, d);
      ff.time = ff.time ? ne : Ej;
      oo.globalAlpha = Zq - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      Em(oo, ΔΔ[a][ff.time], c, d);
      ff.time = ff.time ? qk : 1;
      oo.globalAlpha = 1;
    } else {
      Em(oo, b, c, d);
    }
  }
  function Lv(b, c, d, e, f, g, i, a, j, h) {
    if (ff.transition) {
      oo.globalAlpha = jq;
      b(c, d, e, f, g, i, a, j, h);
      ff.time = ff.time ? Cq : jq;
      oo.globalAlpha = Ag - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      b(c, d, e, f, g, i, a, j, h);
      ff.time = ff.time ? uh : Ht;
      oo.globalAlpha = $l;
    } else {
      b(c, d, e, f, g, i, a, j, h);
    }
  }
  function Mv(k, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = bx.ᐃᐃⵠ.y + k + 710;
    var l = Math.max(bx.ᐃᐃⵠ.x + e, 0);
    var g = Math.max(-bx.ᐃᐃⵠ.x + ro - i - rj, 0);
    var t = l;
    var b = ro - l - g;
    if (o) {
      var u = q.ᐃΔΔ(r);
    } else {
      u = r.r;
    }
    var v = h + uw.ΔΔⵠⵠᐃ;
    var F = v;
    var m = t;
    var p = -u.x + uw.ᐃⵠⵠⵠΔ;
    var C = b;
    var G = v += -u.x + uw.ᐃⵠⵠⵠΔ + 2;
    if (o) {
      u = q.ᐃΔΔ(a);
    } else {
      u = a.r;
    }
    var f = h - uw.ΔⲆⵠⲆⲆ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + 2) - hc;
    if (o) {
      u = q.ᐃΔΔ(s);
    } else {
      u = s.r;
    }
    if (A > v + (f = h - uw.ⲆⲆΔⲆΔ - v - u.x)) {
      var x = true;
      var L = v;
      var M = t;
      var B = f;
      var D = b;
      var I = v += f + tg;
    } else {
      x = false;
      v = A;
      I = -Ue;
    }
    f = h - uw.ΔΔᐃΔⲆᐃⵠ - v;
    if (ff.transition) {
      var N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(m, F, C, p);
    if (o) {
      if (ff.transition) {
        N = ff.time ? j - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        oo.fillStyle = Ur.ΔⵠⵠⵠᐃᐃΔ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(y, H, K, w);
    if (x) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
          oo.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          oo.fillStyle = Ur.ᐃΔⵠⲆⵠⵠΔ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
      }
      oo.fillRect(M, L, D, B);
    }
    if (pf.ⲆⵠⲆⲆⵠ && o) {
      q.ᐃⲆⲆΔᐃⵠⵠⵠᐃ(A, I, G, h, -bx.ᐃᐃⵠ.x + m, -bx.ᐃᐃⵠ.x + m + C);
    }
  }
  function Nv(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var h = Math.floor(f / 2);
    var a = Math.floor(g / 2);
    if (ff.transition) {
      oo.globalAlpha = zs;
      Em(oo, ΔΔ[b][ff.time], qn, 0, f, g, d, e, h, a);
      ff.time = ff.time ? Cn : Zq;
      oo.globalAlpha = aa - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      Em(oo, ΔΔ[b][ff.time], 0, 0, f, g, d, e, h, a);
      ff.time = ff.time ? Rl : 1;
      oo.globalAlpha = Ok;
    } else {
      Em(oo, c, Fj, 0, f, g, d, e, h, a);
    }
  }
  function Ov() {
    oo.globalAlpha = _b;
    if (ff.transition) {
      var a = ff.ᐃⵠⲆᐃ.ᐃⲆΔ();
    }
    ff.ΔᐃᐃᐃΔΔⵠⵠΔ(-bx.ᐃᐃⵠ.x, -bx.ᐃᐃⵠ.y);
    Fv = Math.max(Math.floor(-bx.ᐃᐃⵠ.x / ff.ⵠᐃᐃΔᐃⲆΔ) - 5, vq);
    Gv = Math.min(Math.floor((-bx.ᐃᐃⵠ.x + bx.ᐃᐃⵠ.w) / ff.ⵠᐃᐃΔᐃⲆΔ) + 4, ff.ΔΔⲆⲆⲆ - 1);
    Hv = Math.max(Math.floor(-bx.ᐃᐃⵠ.y / ff.ⲆᐃⲆΔⲆᐃΔ) - 3, Nl);
    Iv = Math.min(Math.floor((-bx.ᐃᐃⵠ.y + bx.ᐃᐃⵠ.ⵠΔⵠ) / ff.ⲆᐃⲆΔⲆᐃΔ) + co, ff.ᐃⵠⵠⵠⵠ - Zq);
    (function () {
      for (var f = ff.ᐃⵠⲆⵠ.length - jq; f >= 0; f--) {
        if ((B = ff.ᐃⵠⲆⵠ[f]).ᐃΔΔ === ff.ⵠᐃΔⲆΔ) {
          var j = ff.ΔΔⲆⲆΔ[B.ᐃΔΔ];
          if (B.x1 - 230 - ro <= -bx.ᐃᐃⵠ.x && B.x2 + 330 >= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.y >= B.y1 - so && -bx.ᐃᐃⵠ.y <= B.y2 + mg) {
            var k = B.x2;
            if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
              k -= 610;
            }
            var m = B.x1;
            if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
              m += 610;
            }
            var p = B.y2;
            if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
              p -= 610;
            }
            var q = B.y1;
            if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
              q += 610;
            }
            if (ff.transition) {
              var w = ff.time ? Eo - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
              oo.fillStyle = Pv(j.Ⲇⵠⵠ[0], j.Ⲇⵠⵠ[1], j.Ⲇⵠⵠ[ql], j.ⲆΔⵠ[Ih], j.ⲆΔⵠ[ie], j.ⲆΔⵠ[Ej], w);
            } else {
              oo.fillStyle = j.ᐃᐃᐃᐃⲆ[ff.time];
            }
            var x = Math.max(bx.ᐃᐃⵠ.x + m - 2 - 230, 0);
            var y = Math.max(-bx.ᐃᐃⵠ.x + ro - k - 330 - 2, 0);
            var z = Math.max(bx.ᐃᐃⵠ.y + q - hc, qk);
            var A = Math.max(-bx.ᐃᐃⵠ.y + so - p - F - lt, Nl);
            oo.beginPath();
            oo.fillRect(x, z, ro - y - x, so - z - A);
          }
        }
      }
      for (f = ff.ᐃⵠⲆⵠ.length - 1; f >= 0; f--) {
        if ((B = ff.ᐃⵠⲆⵠ[f]).ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
          k = B.x2;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            k -= 400;
          }
          m = B.x1;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            m += 400;
          }
          p = B.y2;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            p -= 300;
          }
          q = B.y1;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            q += 300;
          }
          if (!(B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ) && k - ro + 120 <= -bx.ᐃᐃⵠ.x && k + 820 >= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.y >= q + 88 - so && p + 50 >= -bx.ᐃᐃⵠ.y) {
            $v(k, q + 88, p - 88, bx.ΔΔⲆΔ[0], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ);
            Uv(k, q + 88, p - 88, bx.ΔΔⲆΔ[0], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ);
          }
          if (!(B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ) && m - ro - 700 <= -bx.ᐃᐃⵠ.x && m - c >= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.y >= q + 88 - so && p + 50 >= -bx.ᐃᐃⵠ.y) {
            Yv(m, q + 88, p - 88, bx.ΔΔⲆΔ[zs], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ);
            Zv(m, q + 88, p - 88, bx.ΔΔⲆΔ[1], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ);
          }
          if (!(B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ) && m - 235 - ro <= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.x <= k + 350 && -bx.ᐃᐃⵠ.y >= p - so - 275 && p + 490 >= -bx.ᐃᐃⵠ.y) {
            Qv(p - 230, m - 230, k + 230, bx.ΔΔⲆΔ[2], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ);
            Mv(p - 230, m - 230, k + 230, bx.ΔΔⲆΔ[2], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ);
          }
          if (!(B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ) && -bx.ᐃᐃⵠ.x >= m - 235 - ro && k + 350 >= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.y >= q - so - 390 && -bx.ᐃᐃⵠ.y <= q + 315) {
            Rv(q + 310, m - 230, k + 230, bx.ΔΔⲆΔ[3], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ);
            Wv(q + 310, m - 230, k + 230, bx.ΔΔⲆΔ[mt], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ);
          }
        }
      }
      for (f = ff.ᐃⵠⲆⵠ.length - 1; f >= Rl; f--) {
        var B = ff.ᐃⵠⲆⵠ[f];
        if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
          k = B.x2;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            k -= 400;
          }
          m = B.x1;
          if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
            m += 400;
          }
          p = B.y2;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            p -= 300;
          }
          q = B.y1;
          if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
            q += 300;
          }
          if (B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ && -bx.ᐃᐃⵠ.x >= k - ro + 120 && -bx.ᐃᐃⵠ.x <= k + 820 && -bx.ᐃᐃⵠ.y >= q + 88 - so && -bx.ᐃᐃⵠ.y <= p + 50) {
            $v(k, q + 88, p - 88, bx.ΔΔⲆΔ[0], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ);
          }
          if (B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ && -bx.ᐃᐃⵠ.x >= m - ro - 700 && -bx.ᐃᐃⵠ.x <= m - 20 && -bx.ᐃᐃⵠ.y >= q + 88 - so && -bx.ᐃᐃⵠ.y <= p + 50) {
            Yv(m, q + 88, p - 88, bx.ΔΔⲆΔ[1], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ);
          }
          if (B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ && -bx.ᐃᐃⵠ.x >= m - 235 - ro && k + 350 >= -bx.ᐃᐃⵠ.x && p - so - 275 <= -bx.ᐃᐃⵠ.y && p + 490 >= -bx.ᐃᐃⵠ.y) {
            Qv(p - 230, m - 230, k + 230, bx.ΔΔⲆΔ[2], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ);
          }
          if (Cn !== (B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ) && -bx.ᐃᐃⵠ.x >= m - 235 - ro && -bx.ᐃᐃⵠ.x <= k + 350 && -bx.ᐃᐃⵠ.y >= q - so - 390 && -bx.ᐃᐃⵠ.y <= q + 315) {
            Rv(q + 310, m - 230, k + 230, bx.ΔΔⲆΔ[Sg], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ);
          }
        }
      }
      for (f = ff.ᐃⵠⲆⵠ.length - aa; Tg <= f; f--) {
        B = ff.ᐃⵠⲆⵠ[f];
        if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
          j = ff.ΔΔⲆⲆΔ[B.ᐃΔΔ];
          if (-bx.ᐃᐃⵠ.x >= B.x1 - 230 - ro && B.x2 + 330 >= -bx.ᐃᐃⵠ.x && B.y1 - so <= -bx.ᐃᐃⵠ.y && -bx.ᐃᐃⵠ.y <= B.y2 + 100) {
            k = B.x2;
            if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
              if (uh === (B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ)) {
                k -= 414;
              } else {
                k -= 610;
              }
            }
            m = B.x1;
            if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
              if (B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ) {
                m += 610;
              } else {
                m += 414;
              }
            }
            p = B.y2;
            if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
              if (B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ) {
                p -= 610;
              } else {
                p -= 414;
              }
            }
            q = B.y1;
            if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
              if (B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ) {
                q += 610;
              } else {
                q += 414;
              }
            }
            if (ff.transition) {
              w = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
              oo.fillStyle = Pv(j.Ⲇⵠⵠ[0], j.Ⲇⵠⵠ[Ht], j.Ⲇⵠⵠ[2], j.ⲆΔⵠ[0], j.ⲆΔⵠ[Ej], j.ⲆΔⵠ[2], w);
            } else {
              oo.fillStyle = j.ᐃᐃᐃᐃⲆ[ff.time];
            }
            x = Math.max(bx.ᐃᐃⵠ.x + m - 2 - 230, 0);
            y = Math.max(-bx.ᐃᐃⵠ.x + ro - k - 330 - 2, 0);
            z = Math.max(bx.ᐃᐃⵠ.y + q - 2, gr);
            A = Math.max(-bx.ᐃᐃⵠ.y + so - p - 100 - Ss, Cn);
            oo.beginPath();
            oo.fillRect(x, z, ro - y - x, so - z - A);
          }
        }
      }
      if (pf.ⲆⵠⲆⲆⵠ) {
        Lv(zv, Hv, Iv, Fv, Gv, Ur.ⵠΔⲆⲆⲆ, "isl", vk);
        Lv(zv, Hv, Iv, Fv, Gv, Ur.ⵠΔΔᐃⵠ, "isl", 2);
      }
      Lv(Cv, Hv, Iv, Fv, Gv, Ur.ⵠⵠᐃᐃⲆ, "isl", 2);
      if (pf.ⲆⵠⲆⲆⵠ) {
        Lv(Dv, Hv, Iv, Fv, Gv, Ur.ⲆⲆΔⵠⲆⵠⲆ, "de");
      }
      var C = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
      for (f = Tg; f < C.length; f++) {
        for (var b = C[f], D = 0; D < b.ⲆⵠΔⲆᐃ.length; D++) {
          Sv(b.ⲆⵠΔⲆᐃ[D]);
        }
      }
      if ((cp += xf * 40) > 60) {
        cp -= 60;
      }
      Lv(fv, Hv, Iv, Fv, Gv, Ur.ⲆΔⵠᐃ, "r", Cn);
      f = 0;
      for (; f < ff.ᐃⵠⲆⵠ.length; f++) {
        if ((B = ff.ᐃⵠⲆⵠ[f]).ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
          k = B.x2;
          if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
            k -= 400;
          }
          m = B.x1;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            m += 400;
          }
          p = B.y2;
          if (B.ᐃΔΔ !== ff.ⵠᐃΔⲆΔ) {
            p -= 300;
          }
          q = B.y1;
          if (ff.ⵠᐃΔⲆΔ !== B.ᐃΔΔ) {
            q += 300;
          }
          if ((B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ) > Fj && -bx.ᐃᐃⵠ.x >= k - ro + 120 && k + 820 >= -bx.ᐃᐃⵠ.x && q + 88 - so <= -bx.ᐃᐃⵠ.y && -bx.ᐃᐃⵠ.y <= p + 50) {
            Uv(k, q + 88, p - 88, bx.ΔΔⲆΔ[uh], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ);
          }
          if ((B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ) > 0 && m - ro - 700 <= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.x <= m - 20 && -bx.ᐃᐃⵠ.y >= q + 88 - so && p + 50 >= -bx.ᐃᐃⵠ.y) {
            Zv(m, q + 88, p - 88, bx.ΔΔⲆΔ[Fh], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ);
          }
          if ((B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ) > Gr && m - 235 - ro <= -bx.ᐃᐃⵠ.x && -bx.ᐃᐃⵠ.x <= k + 350 && p - so - 275 <= -bx.ᐃᐃⵠ.y && -bx.ᐃᐃⵠ.y <= p + 490) {
            Mv(p - 230, m - 230, k + 230, bx.ΔΔⲆΔ[Cl], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ);
          }
          if ((B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ) > ne && -bx.ᐃᐃⵠ.x >= m - 235 - ro && -bx.ᐃᐃⵠ.x <= k + 350 && q - so - 390 <= -bx.ᐃᐃⵠ.y && q + 315 >= -bx.ᐃᐃⵠ.y) {
            Wv(q + 310, m - 230, k + 230, bx.ΔΔⲆΔ[3], ff.ΔΔⲆⲆΔ[B.ᐃΔΔ], B.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ);
          }
        }
      }
    })();
    (function () {
      var m = Fv;
      var e = Gv;
      var i = Hv;
      var t = Iv;
      if (pf.ⲆⵠⲆⲆⵠ) {
        Lv(Cv, i, t, m, e, Ur.ⵠⲆΔᐃΔ, "l", 2);
      }
      if (pf.ⲆⵠⲆⲆⵠ) {
        Lv(Cv, i, t, m, e, Ur.ⵠⲆᐃⵠᐃ, "la", 5);
      }
      Lv(Cv, i, t, m, e, Ur.ΔΔⵠΔΔ, "la", Jo);
      Lv(zv, i, t, m, e, Ur.ⲆΔᐃΔⵠ, "l", 2);
      if (pf.ⲆⵠⲆⲆⵠ) {
        Lv(Ev, i, t, m, e, Ur.ΔΔⵠΔΔ, "la", 5);
        Lv(zv, i, t, m, e, Ur.ⵠⲆⲆⵠⲆ, "l", ld);
      }
      Lv(Cv, i, t, m, e, Ur.ᐃᐃⲆΔΔ, "ma", 3);
      for (var n = ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃᐃⲆᐃ], T = Cq; T < n.length; T++) {
        n[T].ᐃΔᐃⲆᐃⵠⲆ();
      }
      var W = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
      for (T = ne; W.length > T; T++) {
        for (var aa = W[T], ba = Cq; aa.ⲆΔΔΔΔ.length > ba; ba++) {
          Xv(aa.ⲆΔΔΔΔ[ba]);
        }
      }
      var ca = ff.ᐃᐃᐃ[xw.ⲆΔⵠⲆᐃ];
      for (T = 0; T < ca.length; T++) {
        _v(ca[T], Ur.ⲆΔⵠⲆᐃ);
        ca[T].ⵠⲆⲆᐃⲆ(ca[T].info);
      }
      var l = ff.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ];
      for (T = uh; l.length > T; T++) {
        if (l[T].action == 2) {
          Vv(l[T]);
        }
      }
      var da = ff.ᐃᐃᐃ[xw.ⵠΔⵠΔⲆ];
      for (T = ne; da.length > T; T++) {
        Vv(da[T], Ur.ⲆΔⲆΔⵠΔᐃ);
      }
      var ea = ff.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ];
      for (T = 0; ea.length > T; T++) {
        Vv(ea[T]);
      }
      var fa = ff.ᐃᐃᐃ[xw.ⲆⲆᐃᐃΔ];
      for (T = Tg; T < fa.length; T++) {
        Vv(fa[T]);
      }
      var ia = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠᐃ];
      for (T = 0; ia.length > T; T++) {
        Vv(ia[T], Ur.ᐃⵠΔΔⵠⲆⵠ);
      }
      var d = ff.ᐃᐃᐃ[xw.Δᐃᐃᐃᐃ];
      for (T = Nl; T < d.length; T++) {
        _v(d[T]);
      }
      var c = ff.ᐃᐃᐃ[xw.ΔΔᐃⲆΔ];
      for (T = 0; c.length > T; T++) {
        _v(c[T], Ur.ΔΔᐃⲆΔ);
      }
      var p = ff.ᐃᐃᐃ[xw.ᐃⲆⲆⲆⵠ];
      for (T = tj; T < p.length; T++) {
        Vv(p[T]);
      }
      p = ff.ᐃᐃᐃ[xw.ⲆⵠᐃᐃΔ];
      T = uh;
      for (; p.length > T; T++) {
        Vv(p[T]);
      }
      p = ff.ᐃᐃᐃ[xw.ᐃⲆⲆⲆⵠ];
      T = gr;
      for (; p.length > T; T++) {
        aw(p[T]);
      }
      var ja = ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃΔ];
      for (T = rl; ja.length > T; T++) {
        if (!(ja[T].info & 15) || ja[T].info === 10) {
          _v(ja[T]);
        }
      }
      var ka = ff.ᐃᐃᐃ[xw.ⲆᐃᐃΔᐃ];
      for (T = _a; T < ka.length; T++) {
        if ((ka[T].info & 15) === Tg || ka[T].info === 10) {
          _v(ka[T]);
        }
      }
      var la = ff.ᐃᐃᐃ[xw.ΔⲆⵠⲆΔ];
      for (T = vq; la.length > T; T++) {
        if (!(la[T].info & 15) || la[T].info === 10) {
          _v(la[T]);
        }
      }
      var ma = ff.ᐃᐃᐃ[xw.ᐃΔᐃⲆΔ];
      for (T = uh; ma.length > T; T++) {
        _v(ma[T], Ur.ΔⵠⲆⲆⲆ);
      }
      var na = ff.ᐃᐃᐃ[xw.ᐃΔⵠⲆᐃ];
      for (T = 0; na.length > T; T++) {
        if ((na[T].info & 15) === ur || na[T].info === Ye) {
          _v(na[T]);
        }
      }
      var oa = ff.ᐃᐃᐃ[xw.ᐃⲆᐃⵠΔ];
      for (T = rl; T < oa.length; T++) {
        if ((oa[T].info & 15) === Ih || pj === oa[T].info) {
          _v(oa[T]);
        }
      }
      var pa = ff.ᐃᐃᐃ[xw.ⵠΔΔΔⵠ];
      for (T = _a; T < pa.length; T++) {
        if (Nl === (pa[T].info & 15) || pa[T].info === 10) {
          _v(pa[T]);
        }
      }
      ma = ff.ᐃᐃᐃ[xw.ΔⵠⲆⲆⲆ];
      T = 0;
      for (; T < ma.length; T++) {
        _v(ma[T]);
      }
      var qa = ff.ᐃᐃᐃ[xw.ⲆⵠⵠⲆⵠ];
      for (T = ms; T < qa.length; T++) {
        _v(qa[T], Ur.ⲆⵠⵠⲆⵠ, Ur.ᐃᐃⲆΔΔⲆⵠ);
      }
      var x = ff.ᐃᐃᐃ[xw.ⲆⲆΔⵠΔⲆⵠ];
      for (T = 0; x.length > T; T++) {
        _v(x[T], Ur.ⲆⵠⵠⲆⵠ, Ur.ᐃᐃⲆΔΔⲆⵠ);
      }
      var J = ff.ᐃᐃᐃ[xw.ⲆⲆⵠⲆⵠ];
      for (T = 0; J.length > T; T++) {
        _v(J[T], Ur.ⲆⲆⵠⲆⵠ, Ur.ΔⲆᐃᐃⵠΔⵠ);
      }
      var M = ff.ᐃᐃᐃ[xw.ΔᐃᐃⵠⲆ];
      for (T = qk; T < M.length; T++) {
        if (M[T].info & _b) {
          _v(M[T], Ur.ⲆΔⲆᐃΔᐃⵠ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ᐃⵠᐃⵠⵠ];
      T = 0;
      for (; T < M.length; T++) {
        if (M[T].info & Al) {
          _v(M[T], Ur.ΔⲆⲆΔⲆⲆᐃ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⲆⲆⲆΔⵠ];
      T = 0;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ⲆᐃᐃᐃΔᐃᐃ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⵠⵠⵠⲆⵠ];
      T = 0;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ΔᐃⵠⲆΔΔΔ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⵠΔⵠⵠᐃ];
      T = Rl;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ᐃᐃᐃⵠⲆⲆⵠ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⲆᐃⵠⲆⵠ];
      T = uh;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ⲆᐃᐃᐃΔᐃᐃ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆⲆ];
      T = 0;
      for (; M.length > T; T++) {
        if (M[T].info & j) {
          _v(M[T], Ur.ⲆΔⲆᐃΔᐃⵠ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⵠⵠΔⲆⵠ];
      T = Qs;
      for (; M.length > T; T++) {
        if (M[T].info & Fh) {
          _v(M[T], Ur.ΔⲆⲆΔⲆⲆᐃ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⵠᐃΔΔⲆ];
      T = 0;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ⲆᐃᐃᐃΔᐃᐃ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ΔᐃⲆⵠⵠ];
      T = 0;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ΔᐃⵠⲆΔΔΔ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ⵠΔⵠⲆⵠ];
      T = Cq;
      for (; M.length > T; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ᐃᐃᐃⵠⲆⲆⵠ);
        }
      }
      M = ff.ᐃᐃᐃ[xw.ᐃΔΔᐃⲆ];
      T = Fj;
      for (; T < M.length; T++) {
        if (M[T].info) {
          _v(M[T], Ur.ⲆᐃᐃᐃΔᐃᐃ);
        }
      }
      var ra = ff.ᐃᐃᐃ[xw.ⲆⲆΔⲆⵠ];
      for (T = tj; T < ra.length; T++) {
        _v(ra[T], Ur.ⲆⲆΔⲆⵠ, Ur.ᐃⵠᐃⲆΔⵠⲆ);
      }
      var D = ff.ᐃᐃᐃ[xw.ᐃⲆΔᐃⲆ];
      for (T = 0; D.length > T; T++) {
        _v(D[T], Ur.ᐃⲆΔᐃⲆ);
      }
      n = ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃᐃⲆᐃ];
      T = 0;
      for (; T < n.length; T++) {
        _v(n[T], Ur.ᐃΔᐃᐃᐃⲆᐃ, Ur.ⵠᐃᐃᐃⵠⲆᐃⵠⵠ);
      }
      var sa = ff.ᐃᐃᐃ[xw.ⵠⲆᐃΔⵠ];
      for (T = Rl; sa.length > T; T++) {
        if (sa[T].ⲆᐃᐃᐃΔⵠⲆ === vq) {
          _v(sa[T]);
        }
      }
      W = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
      T = vq;
      for (; T < W.length; T++) {
        aa = W[T];
        if (W[T].ⲆᐃⲆⲆᐃ !== bs.ᐃΔᐃᐃⵠ && W[T].ⲆᐃⲆⲆᐃ !== bs.ᐃΔⲆᐃⲆ && bs.ⲆⵠΔΔⲆ !== W[T].ⲆᐃⲆⲆᐃ && W[T].ⲆᐃⲆⲆᐃ !== bs.ⵠᐃⵠⵠΔ && W[T].ⲆᐃⲆⲆᐃ !== bs.ΔΔⲆⲆⵠ) {
          if (qk === aa.ΔΔΔᐃΔⲆᐃ) {
            if (aa.ⲆⵠΔᐃΔΔΔ > 0.001) {
              aa.ⲆⵠΔᐃΔΔΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(aa.ⲆⵠΔᐃΔΔΔ, Rl, 0.018);
              var ta = $l + Math.min(1, Math.max(aa.ⲆⵠΔᐃΔΔΔ, 0) / 100) * 0.18;
              oo.save();
              oo.scale(ta, ta);
              bx.ᐃᐃⵠ.x /= ta;
              bx.ᐃᐃⵠ.y /= ta;
              aa.x /= ta;
              aa.y /= ta;
              aa.r.x /= ta;
              aa.r.y /= ta;
              aa.ⲆΔⲆⲆⵠΔⵠ();
              aa.ⵠΔᐃⵠ();
              bx.ᐃᐃⵠ.x *= ta;
              bx.ᐃᐃⵠ.y *= ta;
              aa.x *= ta;
              aa.y *= ta;
              aa.r.x *= ta;
              aa.r.y *= ta;
              oo.restore();
            } else {
              aa.ⲆᐃᐃᐃΔⵠⲆ = 0;
              aa.ⲆΔⲆⲆⵠΔⵠ();
              aa.ⵠΔᐃⵠ();
            }
          }
        } else if (aa.ⲆᐃⲆⲆⲆ <= 180) {
          oo.save();
          ta = 1 + Math.min(Ht, Math.max(aa.ⲆⵠΔⵠΔ - 30, 0) / 180) * 0.35;
          oo.scale(ta, ta);
          bx.ᐃᐃⵠ.x /= ta;
          bx.ᐃᐃⵠ.y /= ta;
          aa.x /= ta;
          aa.y /= ta;
          aa.r.x /= ta;
          aa.r.y /= ta;
          aa.ⲆᐃᐃᐃΔⵠⲆ = 0;
          aa.ⲆΔⲆⲆⵠΔⵠ();
          aa.ⵠΔᐃⵠ();
          bx.ᐃᐃⵠ.x *= ta;
          bx.ᐃᐃⵠ.y *= ta;
          aa.x *= ta;
          aa.y *= ta;
          aa.r.x *= ta;
          aa.r.y *= ta;
          oo.restore();
        }
      }
      D = ff.ᐃᐃᐃ[xw.ᐃⲆΔᐃⲆ];
      T = Tg;
      for (; D.length > T; T++) {
        _v(D[T], Ur.ⲆⵠᐃⵠΔᐃⲆ);
      }
      var ua = ff.ᐃᐃᐃ[xw.ⵠⲆⲆⲆΔ];
      for (T = 0; T < ua.length; T++) {
        _v(ua[T]);
      }
      var Q = ff.ᐃᐃᐃ[xw.ⵠⵠΔⲆᐃ];
      for (T = 0; T < Q.length; T++) {
        _v(Q[T], Ur.ⵠⵠΔⲆᐃ, Ur.ᐃᐃⲆⲆᐃⲆⲆ);
      }
      var _ = ff.ᐃᐃᐃ[xw.ⵠΔᐃⵠᐃ];
      for (T = Ih; T < _.length; T++) {
        _v(_[T]);
      }
      var F = ff.ᐃᐃᐃ[xw.ᐃΔΔᐃᐃ];
      for (T = Tg; T < F.length; T++) {
        _v(F[T], Ur.ᐃΔΔᐃᐃ, Ur.ⵠᐃᐃΔⵠⵠᐃ);
      }
      var R = ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃⵠ];
      for (T = 0; R.length > T; T++) {
        _v(R[T], Ur.ᐃΔᐃᐃⵠ, Ur.ⲆᐃⵠⲆᐃᐃⵠ);
      }
      var G = ff.ᐃᐃᐃ[xw.ᐃΔⲆᐃⲆ];
      for (T = Fj; T < G.length; T++) {
        _v(G[T], Ur.ᐃΔⲆᐃⲆ, Ur.ΔᐃΔΔⲆᐃⵠ);
      }
      ja = ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃΔ];
      T = Tg;
      for (; T < ja.length; T++) {
        if (ja[T].info & 15 && ja[T].info !== 10) {
          _v(ja[T]);
        }
      }
      ka = ff.ᐃᐃᐃ[xw.ⲆᐃᐃΔᐃ];
      T = 0;
      for (; T < ka.length; T++) {
        if (ka[T].info & 15 && ka[T].info !== 10) {
          _v(ka[T]);
        }
      }
      la = ff.ᐃᐃᐃ[xw.ⵠΔⲆⲆⲆⲆⵠ];
      T = 0;
      for (; la.length > T; T++) {
        _v(la[T], Ur.ᐃᐃⵠⲆⵠ);
      }
      la = ff.ᐃᐃᐃ[xw.ΔⲆⵠⲆΔ];
      T = ur;
      for (; la.length > T; T++) {
        if (la[T].info & 15 && la[T].info !== Yt) {
          _v(la[T]);
        }
      }
      p = ff.ᐃᐃᐃ[xw.ⲆⵠᐃᐃΔ];
      T = Ih;
      for (; T < p.length; T++) {
        aw(p[T]);
      }
      na = ff.ᐃᐃᐃ[xw.ᐃΔⵠⲆᐃ];
      T = 0;
      for (; na.length > T; T++) {
        if (na[T].info & 15 && na[T].info !== bb) {
          _v(na[T]);
        }
      }
      oa = ff.ᐃᐃᐃ[xw.ᐃⲆᐃⵠΔ];
      T = 0;
      for (; oa.length > T; T++) {
        if (ne !== (oa[T].info & 15) && ct !== oa[T].info) {
          _v(oa[T]);
        }
      }
      pa = ff.ᐃᐃᐃ[xw.ⵠΔΔΔⵠ];
      T = Qs;
      for (; T < pa.length; T++) {
        if (pa[T].info & 15 && pj !== pa[T].info) {
          _v(pa[T]);
        }
      }
      var va = ff.ᐃᐃᐃ[xw.ⲆᐃᐃΔⵠ];
      for (T = tj; va.length > T; T++) {
        _v(va[T], Ur.ⲆᐃᐃΔⵠ, Ur.ⲆᐃΔⲆⵠⲆⵠ);
      }
      var L = ff.ᐃᐃᐃ[xw.ΔᐃᐃᐃⲆ];
      for (T = _a; L.length > T; T++) {
        _v(L[T], Ur.ΔᐃᐃᐃⲆ, Ur.ᐃΔⲆⲆᐃⵠⵠ);
      }
      var O = ff.ᐃᐃᐃ[xw.ⲆⲆᐃⵠⵠ];
      for (T = 0; T < O.length; T++) {
        _v(O[T], Ur.ⲆⲆᐃⵠⵠ, Ur.ᐃⲆⵠΔᐃⲆᐃ);
      }
      var N = ff.ᐃᐃᐃ[xw.ⵠᐃᐃⵠⲆ];
      for (T = Gr; N.length > T; T++) {
        _v(N[T], Ur.ⵠᐃᐃⵠⲆ, Ur.ᐃⵠΔΔΔⲆⲆ);
      }
      var q = ff.ᐃᐃᐃ[xw.ⲆΔⵠⵠᐃ];
      for (T = 0; T < q.length; T++) {
        _v(q[T], Ur.ⲆΔⵠⵠᐃ, Ur.ΔᐃᐃⲆΔⵠⵠ);
      }
      var H = ff.ᐃᐃᐃ[xw.ᐃⲆᐃⲆᐃ];
      for (T = Ih; T < H.length; T++) {
        _v(H[T], Ur.ᐃⲆᐃⲆᐃ, Ur.ⲆⲆⲆⲆⵠΔⲆ);
      }
      var U = ff.ᐃᐃᐃ[xw.ΔⲆⲆⲆⲆ];
      for (T = 0; T < U.length; T++) {
        _v(U[T]);
      }
      var Y = ff.ᐃᐃᐃ[xw.ᐃᐃⲆΔⲆ];
      for (T = 0; T < Y.length; T++) {
        _v(Y[T], Ur.ΔⵠⲆⲆᐃⲆⵠ, Ur.ΔⲆⵠᐃⲆΔᐃ);
      }
      var K = ff.ᐃᐃᐃ[xw.ΔΔΔᐃⵠ];
      for (T = qk; K.length > T; T++) {
        _v(K[T]);
      }
      var V = ff.ᐃᐃᐃ[xw.ᐃⲆⲆΔⲆ];
      for (T = ur; V.length > T; T++) {
        _v(V[T], Ur.ᐃⲆⲆΔⲆ, Ur.ⵠΔΔΔΔⵠⲆ);
      }
      var Z = ff.ᐃᐃᐃ[xw.ⵠⵠᐃⵠⲆ];
      for (T = Rl; T < Z.length; T++) {
        if (Z[T].scale === Zq) {
          _v(Z[T], Ur.ⵠⵠᐃⵠⲆ, Ur.ⲆΔᐃⵠⵠⵠⲆ);
        }
      }
      Z = ff.ᐃᐃᐃ[xw.ΔⵠⵠⲆⲆ];
      T = _a;
      for (; Z.length > T; T++) {
        if (Z[T].scale === Ok) {
          _v(Z[T], Ur.ΔⵠⵠⲆⲆ, Ur.ⵠΔⲆᐃⲆΔⲆ);
        }
      }
      var wa = ff.ᐃᐃᐃ[xw.ΔⲆᐃᐃⲆ];
      for (T = 0; wa.length > T; T++) {
        _v(wa[T]);
      }
      var xa = ff.ᐃᐃᐃ[xw.ᐃⲆᐃΔⵠ];
      for (T = 0; T < xa.length; T++) {
        _v(xa[T], Ur.ᐃⲆᐃΔⵠ);
      }
      l = ff.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ];
      T = uh;
      for (; l.length > T; T++) {
        _v(l[T]);
      }
      var ya = ff.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ];
      for (T = gr; T < ya.length; T++) {
        _v(ya[T]);
      }
      M = ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆⲆ];
      T = 0;
      for (; M.length > T; T++) {
        if (!(M[T].info & 1)) {
          _v(M[T], Ur.ⲆⵠⵠⲆΔᐃⲆ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> Ej);
      }
      M = ff.ᐃᐃᐃ[xw.ⵠⵠΔⲆⵠ];
      T = 0;
      for (; T < M.length; T++) {
        if (!(M[T].info & 1)) {
          _v(M[T], Ur.ᐃⵠᐃΔᐃᐃⲆ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ⵠᐃΔΔⲆ];
      T = Ih;
      for (; T < M.length; T++) {
        if (!(M[T].info & Zq)) {
          _v(M[T], Ur.ⲆⲆΔⵠⲆᐃΔ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ΔᐃⲆⵠⵠ];
      T = _a;
      for (; T < M.length; T++) {
        if (!(M[T].info & As)) {
          _v(M[T], Ur.ⲆᐃᐃⵠⵠⲆⲆ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ⵠΔⵠⲆⵠ];
      T = Qs;
      for (; T < M.length; T++) {
        if (!(M[T].info & 1)) {
          _v(M[T], Ur.ⵠⲆᐃⲆΔⵠⵠ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ᐃΔΔᐃⲆ];
      T = Gr;
      for (; T < M.length; T++) {
        if (!(M[T].info & 1)) {
          _v(M[T], Ur.ᐃΔΔᐃⲆ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> j);
      }
      M = ff.ᐃᐃᐃ[xw.ΔᐃᐃⵠⲆ];
      T = 0;
      for (; M.length > T; T++) {
        if (!(M[T].info & Ag)) {
          _v(M[T], Ur.ΔᐃᐃⵠⲆ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ᐃⵠᐃⵠⵠ];
      T = 0;
      for (; M.length > T; T++) {
        if (!(M[T].info & 1)) {
          _v(M[T], Ur.ᐃⵠᐃⵠⵠ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ⲆⲆⲆΔⵠ];
      T = 0;
      for (; M.length > T; T++) {
        if (!(M[T].info & 1)) {
          _v(M[T], Ur.ⲆⲆⲆΔⵠ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> j);
      }
      M = ff.ᐃᐃᐃ[xw.ⵠⵠⵠⲆⵠ];
      T = Cq;
      for (; M.length > T; T++) {
        if (!(M[T].info & Zq)) {
          _v(M[T], Ur.ⵠⵠⵠⲆⵠ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> _b);
      }
      M = ff.ᐃᐃᐃ[xw.ⵠΔⵠⵠᐃ];
      T = Ih;
      for (; T < M.length; T++) {
        if (!(M[T].info & Ue)) {
          _v(M[T], Ur.ⵠΔⵠⵠᐃ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> 1);
      }
      M = ff.ᐃᐃᐃ[xw.ⲆᐃⵠⲆⵠ];
      T = Cn;
      for (; M.length > T; T++) {
        if (!(M[T].info & Ue)) {
          _v(M[T], Ur.ⲆᐃⵠⲆⵠ);
        }
        M[T].ⵠⲆⲆᐃⲆ(M[T].info >> Eo);
      }
      var za = ff.ᐃᐃᐃ[xw.Ⲇᐃᐃⵠᐃ];
      for (T = 0; za.length > T; T++) {
        _v(za[T], Ur.Ⲇᐃᐃⵠᐃ);
        za[T].ⵠⲆⲆᐃⲆ(za[T].info);
      }
      za = ff.ᐃᐃᐃ[xw.ᐃΔⵠⵠⲆ];
      T = Fj;
      for (; T < za.length; T++) {
        _v(za[T], Ur.ᐃΔⵠⵠⲆ);
        za[T].ⵠⲆⲆᐃⲆ(za[T].info);
      }
      za = ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆΔ];
      T = Cq;
      for (; za.length > T; T++) {
        _v(za[T], Ur.ⵠᐃᐃⲆΔ);
        za[T].ⵠⲆⲆᐃⲆ(za[T].info);
      }
      za = ff.ᐃᐃᐃ[xw.ⲆΔⲆⲆᐃ];
      T = _a;
      for (; T < za.length; T++) {
        _v(za[T], Ur.ⲆΔⲆⲆᐃ);
        za[T].ⵠⲆⲆᐃⲆ(za[T].info);
      }
      za = ff.ᐃᐃᐃ[xw.ⵠΔⵠⲆΔ];
      T = 0;
      for (; T < za.length; T++) {
        _v(za[T], Ur.ⵠΔⵠⲆΔ);
        za[T].ⵠⲆⲆᐃⲆ(za[T].info);
      }
      za = ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆᐃ];
      T = 0;
      for (; T < za.length; T++) {
        _v(za[T], Ur.ⵠᐃᐃⲆᐃ);
        za[T].ⵠⲆⲆᐃⲆ(za[T].info);
      }
      var Aa = ff.ᐃᐃᐃ[xw.ΔⵠⲆᐃⲆ];
      for (T = ne; Aa.length > T; T++) {
        _v(Aa[T], Ur.ΔⵠⲆᐃⲆ);
        Aa[T].ⵠⲆⲆᐃⲆ(Aa[T].info);
      }
      Aa = ff.ᐃᐃᐃ[xw.ⵠΔᐃᐃΔ];
      T = 0;
      for (; T < Aa.length; T++) {
        _v(Aa[T], Ur.ⵠΔᐃᐃΔ);
        Aa[T].ⵠⲆⲆᐃⲆ(Aa[T].info);
      }
      Aa = ff.ᐃᐃᐃ[xw.ᐃⲆᐃⵠⲆ];
      T = _a;
      for (; T < Aa.length; T++) {
        _v(Aa[T], Ur.ᐃⲆᐃⵠⲆ);
        Aa[T].ⵠⲆⲆᐃⲆ(Aa[T].info);
      }
      Aa = ff.ᐃᐃᐃ[xw.ⵠΔΔᐃⲆ];
      T = vq;
      for (; Aa.length > T; T++) {
        _v(Aa[T], Ur.ⵠΔΔᐃⲆ);
        Aa[T].ⵠⲆⲆᐃⲆ(Aa[T].info);
      }
      Aa = ff.ᐃᐃᐃ[xw.ⵠᐃⲆΔⵠ];
      T = 0;
      for (; T < Aa.length; T++) {
        _v(Aa[T], Ur.ⵠᐃⲆΔⵠ);
        Aa[T].ⵠⲆⲆᐃⲆ(Aa[T].info);
      }
      Aa = ff.ᐃᐃᐃ[xw.ΔΔᐃⵠΔ];
      T = 0;
      for (; Aa.length > T; T++) {
        _v(Aa[T], Ur.ΔΔᐃⵠΔ);
        Aa[T].ⵠⲆⲆᐃⲆ(Aa[T].info);
      }
      var Ba = ff.ᐃᐃᐃ[xw.ᐃᐃᐃⲆⵠ];
      for (T = qk; T < Ba.length; T++) {
        var Ca = Ba[T];
        if (Ca.info > Fj) {
          _v(Ca, Ur.ⵠΔᐃΔⲆⲆⵠ);
        } else {
          _v(Ca, Ur.ⵠⵠⵠᐃᐃΔⲆ);
        }
      }
      var Da = ff.ᐃᐃᐃ[xw.ΔⵠᐃⵠΔ];
      for (T = Qs; T < Da.length; T++) {
        _v(Da[T], Ur.ΔⵠᐃⵠΔ);
      }
      Lv(Cv, i, t, m, e, Ur.ΔΔΔΔ, "g", wr);
      Lv(Cv, i, t, m, e, Ur.ΔⵠⲆΔⲆ, "gw", vk);
      Lv(Cv, i, t, m, e, Ur.ΔⲆⲆΔ, "d", 2);
      Lv(Cv, i, t, m, e, Ur.ΔⲆᐃΔᐃ, "dw", ql);
      Lv(Cv, i, t, m, e, Ur.ᐃⲆΔᐃⵠ, "p", 0);
      Lv(Cv, i, t, m, e, Ur.ᐃⲆⲆΔΔ, "m", Xh);
      Lv(Cv, i, t, m, e, Ur.ΔⲆⲆⲆ, "a", qd);
      Lv(Cv, i, t, m, e, Ur.ⵠΔⲆΔ, "re", sh);
      Lv(Cv, i, t, m, e, Ur.ⵠᐃΔⲆᐃ, "cs", ol, 3);
      Lv(Cv, i, t, m, e, Ur.ⵠᐃΔⲆᐃ, "cs", zk, sh);
      Lv(Cv, i, t, m, e, Ur.ⵠᐃΔⲆᐃ, "cs", 1, _b);
      Lv(Cv, i, t, m, e, Ur.ⵠᐃΔⲆᐃ, "cs", 0, Cn);
      Lv(Cv, i, t, m, e, Ur.ᐃΔⵠⲆⲆ, "cs", Sg, X);
      Lv(Cv, i, t, m, e, Ur.ᐃΔⵠⲆⲆ, "cs", 2, qd);
      Lv(Cv, i, t, m, e, Ur.ᐃΔⵠⲆⲆ, "cs", 1, ag);
      Lv(Cv, i, t, m, e, Ur.ᐃΔⵠⲆⲆ, "cs", 0, tj);
      var Ea = ff.ᐃᐃᐃ[xw.ⲆΔΔΔⵠ];
      for (T = tj; T < Ea.length; T++) {
        for (ba = 0; Ea[T].info > ba; ba++) {
          _v(Ea[T].ⵠᐃⵠⲆ[ba], Ur.ⲆΔΔΔⵠ);
        }
      }
      Lv(Cv, i, t, m, e, Ur.ⵠᐃᐃⲆⵠ, "s", re);
      var Fa = ff.ᐃᐃᐃ[xw.ᐃⲆⲆⵠⲆ];
      for (T = qk; T < Fa.length; T++) {
        _v(Fa[T]);
      }
      Fa = ff.ᐃᐃᐃ[xw.ⵠⵠⲆᐃΔ];
      T = rl;
      for (; Fa.length > T; T++) {
        _v(Fa[T]);
      }
      Fa = ff.ᐃᐃᐃ[xw.ΔⲆⵠᐃⵠ];
      T = 0;
      for (; T < Fa.length; T++) {
        _v(Fa[T]);
      }
      Fa = ff.ᐃᐃᐃ[xw.ⲆᐃⵠⵠⲆ];
      T = 0;
      for (; T < Fa.length; T++) {
        _v(Fa[T]);
      }
      Fa = ff.ᐃᐃᐃ[xw.ᐃΔΔᐃⵠ];
      T = 0;
      for (; T < Fa.length; T++) {
        _v(Fa[T]);
      }
      var Ga = ff.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ];
      for (T = vq; T < Ga.length; T++) {
        Vv(Ga[T]);
      }
      da = ff.ᐃᐃᐃ[xw.ⵠΔⵠΔⲆ];
      T = 0;
      for (; T < da.length; T++) {
        aw(da[T]);
      }
      da = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠᐃ];
      T = Gr;
      for (; da.length > T; T++) {
        aw(da[T]);
      }
      l = ff.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ];
      T = Qs;
      for (; T < l.length; T++) {
        if (l[T].action == 2) {
          aw(l[T]);
        }
      }
      ya = ff.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ];
      T = Ih;
      for (; ya.length > T; T++) {
        aw(ya[T]);
      }
      ea = ff.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ];
      T = qn;
      for (; T < ea.length; T++) {
        aw(ea[T]);
      }
      fa = ff.ᐃᐃᐃ[xw.ⲆⲆᐃᐃΔ];
      T = Nl;
      for (; fa.length > T; T++) {
        aw(fa[T]);
        fa[T].ⵠⲆⲆᐃⲆ(fa[T].info);
      }
      Lv(Cv, i, t, m, e, Ur.ⵠΔⲆⲆⵠ, "c", uh);
      Lv(Cv, i, t, m, e, Ur.ᐃⵠΔᐃ, "t", ha, Ph);
      Lv(Cv, i, t, m, e, Ur.ᐃᐃΔⲆⲆ, "f", wr, 2);
      Lv(Cv, i, t, m, e, Ur.ΔΔⵠⲆᐃ, "plm", 0, 0);
      Lv(Cv, i, t, m, e, Ur.ⵠⲆⵠΔΔ, "b", Qk, wr);
      Lv(Cv, i, t, m, e, Ur.ᐃⵠΔᐃ, "t", Jh, 2);
      Lv(Cv, i, t, m, e, Ur.ⵠⲆⵠΔΔ, "b", ag, Fj);
      Lv(Cv, i, t, m, e, Ur.ᐃᐃΔⲆⲆ, "f", Al, 1);
      Lv(Cv, i, t, m, e, Ur.ΔΔⵠⲆᐃ, "plm", Ej, 1);
      Lv(Cv, i, t, m, e, Ur.ᐃⵠΔᐃ, "t", zs, tj);
      Lv(Cv, i, t, m, e, Ur.ᐃᐃΔⲆⲆ, "f", 0, rl);
      Lv(Cv, i, t, m, e, Ur.ΔΔⵠⲆᐃ, "plm", gc, Zn);
      Ga = ff.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ];
      T = ms;
      for (; Ga.length > T; T++) {
        aw(Ga[T]);
      }
      var Ha = ff.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ];
      for (T = 0; T < Ha.length; T++) {
        _v(Ha[T], Ur.ΔᐃⲆⲆᐃ);
      }
      W = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
      T = vq;
      for (; T < W.length; T++) {
        aa = W[T];
        if (ag === aa.ΔΔΔᐃΔⲆᐃ && (aa.ⲆᐃⲆⲆⲆ < 180 || aa.ⲆᐃⲆⲆᐃ !== bs.ᐃΔᐃᐃⵠ && aa.ⲆᐃⲆⲆᐃ !== bs.ᐃΔⲆᐃⲆ && bs.ΔΔⲆⲆⵠ !== aa.ⲆᐃⲆⲆᐃ && aa.ⲆᐃⲆⲆᐃ !== bs.ⲆⵠΔΔⲆ && bs.ⵠᐃⵠⵠΔ !== aa.ⲆᐃⲆⲆᐃ)) {
          aa.ⲆⵠΔᐃΔΔΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(aa.ⲆⵠΔᐃΔΔΔ, 100, 0.018);
          ta = 1 + Math.min(1, Math.max(aa.ⲆⵠΔᐃΔΔΔ, qn) / 100) * 0.18;
          oo.save();
          oo.scale(ta, ta);
          bx.ᐃᐃⵠ.x /= ta;
          bx.ᐃᐃⵠ.y /= ta;
          aa.x /= ta;
          aa.y /= ta;
          aa.r.x /= ta;
          aa.r.y /= ta;
          aa.ⲆΔⲆⲆⵠΔⵠ();
          aa.ⵠΔᐃⵠ();
          bx.ᐃᐃⵠ.x *= ta;
          bx.ᐃᐃⵠ.y *= ta;
          aa.x *= ta;
          aa.y *= ta;
          aa.r.x *= ta;
          aa.r.y *= ta;
          oo.restore();
        }
      }
      var Ia = ff.ᐃᐃᐃ[xw.ΔⲆⵠⵠⲆ];
      for (T = Cn; Ia.length > T; T++) {
        _v(Ia[T], Ur.ΔⲆⵠⵠⲆ);
        Ia[T].ⵠⲆⲆᐃⲆ(Ia[T].info);
      }
      var Ja = ff.ᐃᐃᐃ[xw.Ⲇᐃⵠᐃⵠ];
      for (T = 0; Ja.length > T; T++) {
        _v(Ja[T], Ur.Ⲇᐃⵠᐃⵠ, Ur.ⵠⵠⲆⵠⲆⲆᐃ);
      }
      var Ka = ff.ᐃᐃᐃ[xw.ⵠⵠᐃⵠᐃ];
      for (T = Nl; Ka.length > T; T++) {
        _v(Ka[T], Ur.ⵠⵠᐃⵠᐃ);
      }
      W = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
      T = 0;
      for (; W.length > T; T++) {
        aa = W[T];
        if ((bs.ᐃΔᐃᐃⵠ === aa.ⲆᐃⲆⲆᐃ || bs.ᐃΔⲆᐃⲆ === aa.ⲆᐃⲆⲆᐃ || bs.ΔΔⲆⲆⵠ === aa.ⲆᐃⲆⲆᐃ || bs.ⲆⵠΔΔⲆ === aa.ⲆᐃⲆⲆᐃ || aa.ⲆᐃⲆⲆᐃ === bs.ⵠᐃⵠⵠΔ) && aa.ⲆᐃⲆⲆⲆ > 180) {
          aa.ⲆᐃᐃᐃΔⵠⲆ = $l;
          oo.save();
          ta = 1 + Math.min(Ht, Math.max(aa.ⲆⵠΔⵠΔ - 30, 0) / 180) * 0.35;
          oo.scale(ta, ta);
          bx.ᐃᐃⵠ.x /= ta;
          bx.ᐃᐃⵠ.y /= ta;
          aa.x /= ta;
          aa.y /= ta;
          aa.r.x /= ta;
          aa.r.y /= ta;
          aa.ⲆΔⲆⲆⵠΔⵠ();
          aa.ⵠΔᐃⵠ();
          bx.ᐃᐃⵠ.x *= ta;
          bx.ᐃᐃⵠ.y *= ta;
          aa.x *= ta;
          aa.y *= ta;
          aa.r.x *= ta;
          aa.r.y *= ta;
          oo.restore();
        }
      }
      sa = ff.ᐃᐃᐃ[xw.ⵠⲆᐃΔⵠ];
      T = Qs;
      for (; T < sa.length; T++) {
        if (sa[T].ⲆᐃᐃᐃΔⵠⲆ === 1) {
          _v(sa[T]);
        }
      }
      Z = ff.ᐃᐃᐃ[xw.ⵠⵠᐃⵠⲆ];
      T = qk;
      for (; Z.length > T; T++) {
        if (Zq < Z[T].scale) {
          _v(Z[T], Ur.ⵠⵠᐃⵠⲆ, Ur.ⲆΔᐃⵠⵠⵠⲆ);
        }
      }
      Z = ff.ᐃᐃᐃ[xw.ΔⵠⵠⲆⲆ];
      T = 0;
      for (; Z.length > T; T++) {
        if (Z[T].scale > 1) {
          _v(Z[T], Ur.ΔⵠⵠⲆⲆ, Ur.ⵠΔⲆᐃⲆΔⲆ);
        }
      }
      var La = ff.ᐃᐃᐃ[xw.ⲆⵠΔΔⲆ];
      for (T = 0; T < La.length; T++) {
        _v(La[T], Ur.ⲆⵠΔΔⲆ, Ur.ᐃⲆᐃⵠⵠΔΔ);
      }
      var Ma = ff.ᐃᐃᐃ[xw.ⲆΔⲆᐃΔ];
      for (T = 0; T < Ma.length; T++) {
        _v(Ma[T], Ur.ⲆΔⲆᐃΔ, Ur.ΔⲆᐃⵠΔⵠⲆ);
      }
      if ((xv += oj * xf) > 60) {
        xv -= 60;
      }
      Lv(yv, i, t, m, e, Ur.ᐃⲆⲆᐃΔ, "fo", qd);
      Lv(yv, i, t, m, e, Ur.ΔⲆⲆΔⵠ, "fod", 2);
    })();
    if (pf.ⲆⵠⲆⲆⵠ && ff.mode !== uw.ΔΔⵠⲆΔ && ff.mode !== uw.ΔᐃⵠΔᐃ && ff.mode !== uw.ⵠⲆΔⵠⵠΔᐃ) {
      (function () {
        var a = bx.ⵠⲆᐃᐃᐃ;
        if (a.ΔᐃⲆⵠᐃ === 0) {
          a.ⲆᐃⲆᐃⲆ = Math.max(Cn, a.ⲆᐃⲆᐃⲆ - xf / 10);
        } else {
          a.ⲆᐃⲆᐃⲆ = Math.min(1, a.ⲆᐃⲆᐃⲆ + xf / Fl);
        }
        for (var b = a.ΔⲆΔⵠᐃ, c = ne; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Tv(Ur.ᐃⲆΔΔΔⲆⲆ, d.id, bx.ᐃᐃⵠ.x + d.x, bx.ᐃᐃⵠ.y + d.y, d.alpha);
        }
        for (c = Cn; c < b.length; c++) {
          if ((d = b[c]).ᐃΔⵠⵠⵠ <= qk || d.x > -bx.ᐃᐃⵠ.x + ro || d.x < -bx.ᐃᐃⵠ.x - bx.ᐃᐃⵠ.w / 2 || d.y > -bx.ᐃᐃⵠ.y + so) {
            b.splice(c, _b);
          }
        }
        var e = -bx.ᐃᐃⵠ.y;
        if (ff.ⵠⵠᐃΔΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = bx.ⵠΔΔⵠⵠ;
        if (a.ΔᐃⲆⵠᐃ === Cq) {
          a.ⲆᐃⲆᐃⲆ = Math.max(0, a.ⲆᐃⲆᐃⲆ - xf / fg);
        } else {
          a.ⲆᐃⲆᐃⲆ = Math.min(Fh, a.ⲆᐃⲆᐃⲆ + xf / Uh);
        }
        for (var b = a.ΔⲆΔⵠᐃ, c = qk; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Tv(Ur.ⵠᐃⵠᐃᐃⲆⲆ, d.id, bx.ᐃᐃⵠ.x + d.x, bx.ᐃᐃⵠ.y + d.y, d.alpha);
        }
        for (c = uh; c < b.length; c++) {
          d = b[c];
          if (ne >= d.ᐃΔⵠⵠⵠ || -bx.ᐃᐃⵠ.x + ro < d.x || -bx.ᐃᐃⵠ.x > d.x || -bx.ᐃᐃⵠ.y + so < d.y) {
            b.splice(c, aa);
          }
        }
        var e = -bx.ᐃᐃⵠ.y;
        if (ff.ᐃⲆⲆᐃⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = bx.ⵠⲆⵠΔᐃⲆᐃ;
        for (var b = a.ΔⲆΔⵠᐃ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ᐃⲆΔ(d);
          Tv(Ur.ⵠΔⲆⵠⲆᐃᐃ, d.id, bx.ᐃᐃⵠ.x + d.x, bx.ᐃᐃⵠ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).ᐃΔⵠⵠⵠ <= gr || -bx.ᐃᐃⵠ.x + ro < d.x || -bx.ᐃᐃⵠ.x > d.x || d.y > -bx.ᐃᐃⵠ.y + so) {
            b.splice(c, 1);
          }
        }
        var e = -bx.ᐃᐃⵠ.y;
        if (ff.ᐃⲆΔⲆⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (ff.transition && a) {
      ff.transition = false;
      ff.ᐃⵠⲆᐃ.ⲆᐃⲆ = Rl;
      ff.ᐃⵠⲆᐃ.ⲆⵠΔ = false;
    }
  }
  function Pv(b, c, d, e, f, g, i) {
    var a;
    var j = "#";
    j += (a = Math.floor(e * i + (zs - i) * b)) < 16 ? "0" + a.toString(16) : a.toString(16);
    j += (a = Math.floor(f * i + c * (Al - i))) < 16 ? "0" + a.toString(Fk) : a.toString(16);
    return j += (a = Math.floor(i * g + (1 - i) * d)) < 16 ? "0" + a.toString(16) : a.toString(In);
  }
  function Qv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = bx.ᐃᐃⵠ.y + f + 710;
    var l = Math.max(bx.ᐃᐃⵠ.x + e, 0);
    var g = Math.max(-bx.ᐃᐃⵠ.x + ro - i - 100, 0);
    var r = l;
    var b = ro - l - g;
    if (n) {
      var s = j.ᐃΔΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + uw.ΔΔⵠⵠᐃ;
    uw.ᐃⵠⵠⵠΔ;
    t += -s + uw.ᐃⵠⵠⵠΔ + 2;
    if (n) {
      s = j.ᐃΔΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - uw.ΔⲆⵠⲆⲆ - t - s;
    var v = (t += u + 2) - ql;
    if (n) {
      s = j.ᐃΔΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h - uw.ⲆⲆΔⲆΔ - t - s) < v) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - uw.ΔΔᐃΔⲆᐃⵠ - t;
    if (n > 0 && k.ΔΔᐃⵠᐃᐃᐃ === Ej) {
      if (ff.transition) {
        var p = ff.time ? Ht - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Ur.ᐃᐃⵠⵠᐃᐃᐃ[ff.time];
      }
      oo.fillRect(r, t, b, u);
    } else {
      if (ff.transition) {
        p = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(k.Ⲇⵠⵠ[Cq], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[2], k.ⲆΔⵠ[0], k.ⲆΔⵠ[Ok], k.ⲆΔⵠ[lt], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃᐃⲆ[ff.time];
      }
      oo.fillRect(r, t, b, u);
    }
  }
  function Rv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = bx.ᐃᐃⵠ.y + f - 700;
    var l = Math.max(bx.ᐃᐃⵠ.x + e, Nl);
    var g = Math.max(-bx.ᐃᐃⵠ.x + ro - i - vh, 0);
    var r = l;
    var b = ro - l - g;
    if (n) {
      var s = j.ᐃΔΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + uw.ΔΔⵠⵠᐃ;
    uw.ᐃⵠⵠⵠΔ;
    t += s + uw.ᐃⵠⵠⵠΔ - Cl;
    if (n) {
      s = j.ᐃΔΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + uw.ΔⲆⵠⲆⲆ - t + s;
    var v = (t += u - sh) - 2;
    if (n) {
      s = j.ᐃΔΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (v < t + (u = h + uw.ⲆⲆΔⲆΔ - t + s) - Wb) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + uw.ΔΔᐃΔⲆᐃⵠ - t;
    if (n > gr && k.ΔΔᐃⵠᐃᐃᐃ === 1) {
      if (ff.transition) {
        var p = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Ur.ᐃᐃⵠⵠᐃᐃᐃ[ff.time];
      }
      oo.fillRect(r, t, b, u);
    } else {
      if (ff.transition) {
        p = ff.time ? Fh - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(k.Ⲇⵠⵠ[Rl], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[Ss], k.ⲆΔⵠ[ur], k.ⲆΔⵠ[1], k.ⲆΔⵠ[2], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃᐃⲆ[ff.time];
      }
      oo.fillRect(r, t, b, u);
    }
  }
  function Sv(a) {
    oo.save();
    oo.translate(bx.ᐃᐃⵠ.x + a.x, bx.ᐃᐃⵠ.y + a.y);
    oo.rotate(a.angle);
    oo.globalAlpha = a.alpha;
    var b = ΔΔ[a.id][ff.time];
    Em(oo, b, -b.width / 2, -b.height / 2);
    oo.globalAlpha = Ok;
    oo.restore();
  }
  function Tv(a, b, c, d, e) {
    if (ff.transition && Ht == e) {
      oo.globalAlpha = 1;
      Em(oo, ΔΔ[a][ff.time][b], c, d);
      ff.time = ff.time ? 0 : 1;
      oo.globalAlpha = aa - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      Em(oo, ΔΔ[a][ff.time][b], c, d);
      ff.time = ff.time ? Gr : Ue;
      oo.globalAlpha = _b;
    } else {
      oo.globalAlpha = e;
      Em(oo, ΔΔ[a][ff.time][b], c, d);
      oo.globalAlpha = 1;
    }
  }
  function Uv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = bx.ᐃᐃⵠ.x + j + 820;
    var l = Math.max(bx.ᐃᐃⵠ.y + e, Ih);
    var g = Math.max(-bx.ᐃᐃⵠ.y + so - i - No, 0);
    var t = l;
    var b = so - l - g;
    if (o) {
      var u = q.ᐃΔΔ(r);
    } else {
      u = r.r;
    }
    var v = h + uw.ΔΔⵠⵠᐃ;
    var F = v;
    var m = t;
    var p = -u.x + uw.ᐃⵠⵠⵠΔ;
    var C = b;
    var G = v += -u.x + uw.ᐃⵠⵠⵠΔ + gc;
    if (o) {
      u = q.ᐃΔΔ(a);
    } else {
      u = a.r;
    }
    var f = h - uw.ΔⲆⵠⲆⲆ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + sh) - vk;
    if (o) {
      u = q.ᐃΔΔ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h - uw.ⲆⲆΔⲆΔ - v - u.x) < A) {
      var k = en;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + re;
    } else {
      k = Rn;
      v = A;
      D = -1;
    }
    f = h - uw.ΔΔᐃΔⲆᐃⵠ - v;
    if (ff.transition) {
      var N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(F, m, p, C);
    if (o) {
      if (ff.transition) {
        N = ff.time ? Fh - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        oo.fillStyle = Ur.ΔⵠⵠⵠᐃᐃΔ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? ag - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? Ue - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
          oo.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          oo.fillStyle = Ur.ᐃΔⵠⲆⵠⵠΔ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
      }
      oo.fillRect(L, J, M, B);
    }
    if (pf.ⲆⵠⲆⲆⵠ && o) {
      q.ΔⲆΔᐃᐃᐃⲆⲆᐃ(A, D, G, h, -bx.ᐃᐃⵠ.y + m, -bx.ᐃᐃⵠ.y + m + C);
    }
  }
  function Vv(a, b) {
    if (ff.transition) {
      oo.globalAlpha = Fh;
      a.ⲆᐃⵠΔᐃ(b);
      ff.time = ff.time ? ur : 1;
      oo.globalAlpha = Oj - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      a.ⲆᐃⵠΔᐃ(b);
      ff.time = ff.time ? 0 : $l;
      oo.globalAlpha = 1;
    } else {
      a.ⲆᐃⵠΔᐃ(b);
    }
  }
  function Wv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = bx.ᐃᐃⵠ.y + j - 700;
    var l = Math.max(bx.ᐃᐃⵠ.x + e, 0);
    var g = Math.max(-bx.ᐃᐃⵠ.x + ro - i - 100, 0);
    var t = l;
    var b = ro - l - g;
    if (o) {
      var u = q.ᐃΔΔ(r);
    } else {
      u = r.r;
    }
    var v = h + uw.ΔΔⵠⵠᐃ;
    var F = t;
    var m = v;
    var p = u.x + uw.ᐃⵠⵠⵠΔ;
    var C = b;
    var G = v += u.x + uw.ᐃⵠⵠⵠΔ - Zt;
    if (o) {
      u = q.ᐃΔΔ(a);
    } else {
      u = a.r;
    }
    var f = h + uw.ΔⲆⵠⲆⲆ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - 2) - 2;
    if (o) {
      u = q.ᐃΔΔ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h + uw.ⲆⲆΔⲆΔ - v + u.x) - 3 > A) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - Cl;
    } else {
      k = Ta;
      v = A;
      D = -aa;
    }
    f = h + uw.ΔΔᐃΔⲆᐃⵠ - v;
    if (ff.transition) {
      var N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(F, m, C, p);
    if (o) {
      if (ff.transition) {
        N = ff.time ? Ej - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 70, 76, 42, 139, 155, N);
      } else {
        oo.fillStyle = Ur.ΔⵠⵠⵠᐃᐃΔ[ff.time];
      }
    } else if (ff.transition) {
      N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (ff.transition) {
          N = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
          oo.fillStyle = Pv(17, 94, 96, 169, 214, 211, N);
        } else {
          oo.fillStyle = Ur.ᐃΔⵠⲆⵠⵠΔ[ff.time];
        }
      } else if (ff.transition) {
        N = ff.time ? Al - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, N);
      } else {
        oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
      }
      oo.fillRect(J, L, B, M);
    }
    if (pf.ⲆⵠⲆⲆⵠ && o) {
      q.ΔⵠⲆⲆⵠᐃⵠⵠⲆ(A, D, G, h, -bx.ᐃᐃⵠ.x + F, -bx.ᐃᐃⵠ.x + F + C);
    }
  }
  function Xv(a) {
    oo.globalAlpha = a.alpha;
    ob(oo, a.x + bx.ᐃᐃⵠ.x, a.y + bx.ᐃᐃⵠ.y, a.r);
    eb(oo, Ur.ᐃⵠⲆⲆᐃΔᐃ[ff.time]);
    oo.globalAlpha = 1;
  }
  function Yv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = bx.ᐃᐃⵠ.x + f - 700;
    var l = Math.max(bx.ᐃᐃⵠ.y + e, Fj);
    var g = Math.max(-bx.ᐃᐃⵠ.y + so - i - 100, Rl);
    var r = l;
    var b = so - l - g;
    if (n) {
      var s = j.ᐃΔΔ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + uw.ΔΔⵠⵠᐃ;
    uw.ᐃⵠⵠⵠΔ;
    t += s + uw.ᐃⵠⵠⵠΔ - lt;
    if (n) {
      s = j.ᐃΔΔ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + uw.ΔⲆⵠⲆⲆ - t + s;
    var v = (t += u - 2) - 2;
    if (n) {
      s = j.ᐃΔΔ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h + uw.ⲆⲆΔⲆΔ - t + s) - Z > v) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + uw.ΔΔᐃΔⲆᐃⵠ - t;
    if (n > 0 && k.ΔΔᐃⵠᐃᐃᐃ === 1) {
      if (ff.transition) {
        var p = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Ur.ᐃᐃⵠⵠᐃᐃᐃ[ff.time];
      }
      oo.fillRect(t, r, u, b);
    } else {
      if (ff.transition) {
        p = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(k.Ⲇⵠⵠ[0], k.Ⲇⵠⵠ[1], k.Ⲇⵠⵠ[Xr], k.ⲆΔⵠ[0], k.ⲆΔⵠ[1], k.ⲆΔⵠ[Xh], p);
      } else {
        oo.fillStyle = k.ᐃᐃᐃᐃⲆ[ff.time];
      }
      oo.fillRect(t, r, u, b);
    }
  }
  function Zv(q, e, i, t, n, o) {
    var r = t.w1;
    var a = t.w2;
    var s = t.w3;
    var h = bx.ᐃᐃⵠ.x + q - 700;
    var l = Math.max(bx.ᐃᐃⵠ.y + e, 0);
    var g = Math.max(-bx.ᐃᐃⵠ.y + so - i - vh, ne);
    var u = l;
    var b = so - l - g;
    if (o) {
      var v = t.ᐃΔΔ(r);
    } else {
      v = r.r;
    }
    var z = h + uw.ΔΔⵠⵠᐃ;
    var F = z;
    var m = u;
    var p = v.x + uw.ᐃⵠⵠⵠΔ;
    var C = b;
    var G = z += v.x + uw.ᐃⵠⵠⵠΔ - vk;
    if (o) {
      v = t.ᐃΔΔ(a);
    } else {
      v = a.r;
    }
    var H = h + uw.ΔⲆⵠⲆⲆ - z + v.x;
    var K = z;
    var w = u;
    var L = H;
    var A = b;
    var k = (z += H - wr) - 2;
    if (o) {
      v = t.ᐃΔΔ(s);
    } else {
      v = s.r;
    }
    if (k < z + (H = h + uw.ⲆⲆΔⲆΔ - z + v.x) - X) {
      var x = f;
      var N = z;
      var M = u;
      var B = H;
      var D = b;
      var I = z += H - vk;
    } else {
      x = false;
      z = k;
      I = -1;
    }
    H = h + uw.ΔΔᐃΔⲆᐃⵠ - z;
    if (ff.transition) {
      var O = ff.time ? j - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, O);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(F, m, p, C);
    if (o) {
      if (ff.transition) {
        O = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 70, 76, 42, 139, 155, O);
      } else {
        oo.fillStyle = Ur.ΔⵠⵠⵠᐃᐃΔ[ff.time];
      }
    } else if (ff.transition) {
      O = ff.time ? Al - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, O);
    } else {
      oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
    }
    oo.fillRect(K, w, L, A);
    if (x) {
      if (o) {
        if (ff.transition) {
          O = ff.time ? Al - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
          oo.fillStyle = Pv(17, 94, 96, 169, 214, 211, O);
        } else {
          oo.fillStyle = Ur.ᐃΔⵠⲆⵠⵠΔ[ff.time];
        }
      } else if (ff.transition) {
        O = ff.time ? Ht - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(9, 55, 63, 11, 106, 132, O);
      } else {
        oo.fillStyle = Ur.ⲆᐃᐃᐃΔ[ff.time];
      }
      oo.fillRect(N, M, B, D);
    }
    if (pf.ⲆⵠⲆⲆⵠ && o) {
      t.ⲆⵠΔᐃᐃΔΔΔΔ(k, I, G, h, -bx.ᐃᐃⵠ.y + m, -bx.ᐃᐃⵠ.y + m + C);
    }
  }
  function $v(f, e, i, k, n, o) {
    var q = k.w1;
    var a = k.w2;
    var r = k.w3;
    var h = bx.ᐃᐃⵠ.x + f + 820;
    var l = Math.max(bx.ᐃᐃⵠ.y + e, gr);
    var g = Math.max(-bx.ᐃᐃⵠ.y + so - i - 100, 0);
    var s = l;
    var b = so - l - g;
    if (o) {
      var t = k.ᐃΔΔ(q).x;
    } else {
      t = q.r.x;
    }
    var u = h + uw.ΔΔⵠⵠᐃ;
    uw.ᐃⵠⵠⵠΔ;
    u += -t + uw.ᐃⵠⵠⵠΔ + Xr;
    if (o) {
      t = k.ᐃΔΔ(a).x;
    } else {
      t = a.r.x;
    }
    var v = h - uw.ΔⲆⵠⲆⲆ - u - t;
    var w = (u += v + 2) - re;
    if (o) {
      t = k.ᐃΔΔ(r).x;
    } else {
      t = r.r.x;
    }
    if (w > u + (v = h - uw.ⲆⲆΔⲆΔ - u - t)) {
      u += v + 2;
    } else {
      u = w;
    }
    v = h - uw.ΔΔᐃΔⲆᐃⵠ - u;
    if (o > 0 && Ej === n.ΔΔᐃⵠᐃᐃᐃ) {
      if (ff.transition) {
        var p = ff.time ? Zq - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(15, 77, 72, 252, 239, 187, p);
      } else {
        oo.fillStyle = Ur.ᐃᐃⵠⵠᐃᐃᐃ[ff.time];
      }
      oo.fillRect(u, s, v, b);
    } else {
      if (ff.transition) {
        p = ff.time ? zs - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
        oo.fillStyle = Pv(n.Ⲇⵠⵠ[0], n.Ⲇⵠⵠ[As], n.Ⲇⵠⵠ[vk], n.ⲆΔⵠ[0], n.ⲆΔⵠ[j], n.ⲆΔⵠ[Zt], p);
      } else {
        oo.fillStyle = n.ᐃᐃᐃᐃⲆ[ff.time];
      }
      oo.fillRect(u, s, v, b);
    }
  }
  function _v(a, b, c) {
    if (ff.transition) {
      oo.globalAlpha = 1;
      a.ⵠΔᐃⵠ(b, c);
      ff.time = ff.time ? qn : Oj;
      oo.globalAlpha = 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      a.ⵠΔᐃⵠ(b, c);
      ff.time = ff.time ? ne : 1;
      oo.globalAlpha = 1;
    } else {
      a.ⵠΔᐃⵠ(b, c);
    }
  }
  function aw(a, b) {
    if (ff.transition) {
      oo.globalAlpha = Ue;
      a.ΔⲆⵠΔⵠ(b);
      ff.time = ff.time ? gr : 1;
      oo.globalAlpha = Eo - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
      a.ΔⲆⵠΔⵠ(b);
      ff.time = ff.time ? Cn : 1;
      oo.globalAlpha = $l;
    } else {
      a.ΔⲆⵠΔⵠ(b);
    }
  }
  var bw = 0;
  var cw = 1;
  var dw = Pt;
  var ew = Gr;
  var fw = Ej;
  var gw = 2;
  function hw(f, j, i, k, n, q, r, t, w, x, l, g, u, b, y) {
    if (qk === f.length) {
      f = " ";
    }
    if (pl === r) {
      r = qn;
    }
    if (t === yq) {
      t = 0;
    }
    if (w === undefined) {
      w = 0;
    }
    if (b === undefined) {
      b = 0;
    }
    var d = document.createElement("canvas");
    var c = d.getContext("2d");
    c.textBaseline = "middle";
    c.font = (y !== undefined ? y + " " : "") + k + "px " + j;
    n = da !== n ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    d.width = n + r;
    d.height = k + t;
    if (q !== undefined) {
      if (l !== Bl) {
        c.globalAlpha = l;
      }
      c.fillStyle = q;
      if (g !== Bl) {
        ⵠⲆΔΔΔⲆΔⲆΔ(c, w + 2, w, n + r - Zt * w - Xb, k + t - w * Zn, g);
        c.fill();
      } else {
        c.fillRect(w, w, n + r - w * 2, k + t - w * 2);
      }
      c.globalAlpha = _b;
      if (w !== 0) {
        c.lineWidth = w;
        c.strokeStyle = x;
        c.stroke();
      }
    }
    c.textBaseline = p[ba];
    c.font = (y !== $r ? y + " " : "") + k + "px " + j;
    if (Gh !== u) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = Pt;
      c.strokeText(f, Math.floor(r / 2), Math.floor(t / 2) + Math.floor(k / hc), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(r / Xr), Math.floor(t / Zt) + Math.floor(k / Pt), n);
    d.w2 = d.width / 2;
    d.ⲆᐃᐃΔΔ = d.height / 2;
    return d;
  }
  function iw(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function jw(a, b, c, d, e) {
    var f = {
      x: c,
      y: d,
      ΔΔⵠᐃΔ: c,
      Δⵠᐃᐃⵠ: d
    };
    return {
      translate: f,
      ⵠΔᐃⵠ: function (b) {
        Em(b, a, f.x, f.y, a.width / 2, a.height / Cl);
      },
      active: b,
      position: e
    };
  }
  function kw(f, e, i, j, k, m, n, a, p, q, t) {
    if (p === Bl) {
      p = _a;
    }
    if (a === undefined) {
      a = 0;
    }
    if (q === qj) {
      q = vq;
    }
    if (t === undefined) {
      t = 1;
    }
    if (m !== Ag) {
      m = Ih;
    }
    if (j) {
      var w = j;
    }
    var u;
    var x = {
      width: f,
      height: e,
      Ⲇⵠ: w,
      state: ew,
      translate: {
        x: a,
        y: p,
        ΔΔⵠᐃΔ: a,
        Δⵠᐃᐃⵠ: p
      },
      ⵠΔⲆΔΔᐃⵠⲆⵠ: m,
      ⵠᐃᐃᐃ: tj,
      callback: n,
      position: q,
      active: t
    };
    function v() {
      return x.Ⲇⵠ[x.state];
    }
    function d(a) {
      var b = x.translate;
      if (x.width === 0 || qn === x.height) {
        x.width = x.Ⲇⵠ[Cn].width;
        x.height = x.Ⲇⵠ[0].height;
      }
      return a.x > b.x && a.x < b.x + x.width / k && a.y > b.y && a.y < b.y + x.height / k;
    }
    m = function () {
      var a = Gr;
      if (Ht === x.ⵠΔⲆΔΔᐃⵠⲆⵠ) {
        if (fw === x.state || gw === x.state) {
          x.ⵠᐃᐃᐃ = (x.ⵠᐃᐃᐃ + xf * 1000) % 1000;
        } else if (x.ⵠᐃᐃᐃ > 0) {
          x.ⵠᐃᐃᐃ = x.ⵠᐃᐃᐃ > 500 ? x.ⵠᐃᐃᐃ + xf * 1000 : x.ⵠᐃᐃᐃ - xf * 1000;
          if (x.ⵠᐃᐃᐃ < 0 || x.ⵠᐃᐃᐃ > 1000) {
            x.ⵠᐃᐃᐃ = 0;
          }
        }
        a = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(x.ⵠᐃᐃᐃ > 500 ? (1000 - x.ⵠᐃᐃᐃ) / 500 : x.ⵠᐃᐃᐃ / 500) * 0.2;
      }
      return a;
    };
    if (Tt === (k = Z === k ? 3 : k === ie ? Zt : _b)) {
      u = function (b) {
        var c = 1 + m();
        var d = v();
        var e = x.width * c / 2;
        var f = x.height * c / qd;
        var g = (e - x.width / 2) / 2;
        var a = (f - x.height / wr) / ld;
        Em(b, d, x.translate.x - g, x.translate.y - a, e, f);
      };
    } else if (k === 3) {
      u = function (a) {
        var b = v();
        var c = x.width;
        var d = x.height;
        var e = (c - x.width) / wr;
        var f = (d - x.height) / Xh;
        Em(a, b, x.translate.x - e, x.translate.y - f, c, d);
      };
      k = 1;
    } else {
      u = function (a) {
        Em(a, v(), x.translate.x, x.translate.y);
      };
    }
    return {
      info: x,
      ⲆᐃᐃⲆ: function (a, b, c) {
        if (d(b)) {
          if (c == cw) {
            x.state = gw;
          } else if (c == dw || bw == c && gw != x.state) {
            x.state = fw;
          }
          return true;
        } else {
          x.state = ew;
          return false;
        }
      },
      ⵠΔᐃⵠ: u,
      ⲆᐃΔⲆⵠⵠΔ: d
    };
  }
  var lw = "send";
  var mw = ᐃⵠΔⵠ.ⲆⵠⵠⵠΔᐃⲆ("id") === "1" ? Gs : ne;
  var nw = ᐃⵠΔⵠ.ⲆⵠⵠⵠΔᐃⲆ("password");
  var ow = ᐃⵠΔⵠ.ⲆⵠⵠⵠΔᐃⲆ("debug") || Gh;
  if (ow !== undefined) {
    ow = JSON.parse(kj.decodeURIComponent(ow));
  }
  var pw = "https://api.eg.rivet.gg";
  var qw = {
    ΔᐃⵠⲆΔⲆⲆ: mn,
    ⵠⵠⵠⵠⲆᐃⵠ: qh,
    IDLE: 64,
    ΔⲆⲆΔⲆᐃᐃ: 16,
    ᐃⲆⲆᐃⲆⵠᐃ: 128,
    ᐃᐃΔⵠᐃⵠΔ: 32,
    ⲆᐃΔΔᐃΔᐃⵠΔ: 1,
    ᐃⲆⵠⲆⲆ: 4,
    ⵠᐃⲆΔ: ld
  };
  var rw = [{
    ΔᐃⲆΔⲆ: 1000,
    items: [[2, bs.ⵠΔⵠΔⲆ], [1, bs.ᐃⲆⲆⲆᐃ], [8, bs.ᐃⲆΔᐃⵠ], [1, bs.ⲆⲆΔΔΔ]]
  }, {
    ΔᐃⲆΔⲆ: 2000,
    items: [[zk, bs.ΔΔⲆⵠᐃ], [Gs, bs.ⵠᐃⲆⲆⲆ], [2, bs.ᐃⲆⲆⲆᐃ], [Jk, bs.ᐃⲆΔᐃⵠ], [Cl, bs.ⲆⲆΔΔΔ]]
  }, {
    ΔᐃⲆΔⲆ: 4000,
    items: [[$b, bs.ΔΔⲆⵠᐃ], [1, bs.ᐃᐃⲆⵠΔ], [rg, bs.ᐃⲆⲆⲆᐃ], [20, bs.ᐃⲆΔᐃⵠ], [xt, bs.ⲆⲆΔΔΔ], [Oj, bs.ᐃⲆᐃΔⵠ], [80, bs.ᐃΔⲆᐃ], [140, bs.ΔΔΔᐃ]]
  }, {
    ΔᐃⲆΔⲆ: 8000,
    items: [[1, bs.ᐃⵠⲆΔ], [_g, bs.ΔΔⲆⵠᐃ], [jq, bs.ⲆΔᐃⲆⵠ], [6, bs.ᐃⲆⲆⲆᐃ], [30, bs.ᐃⲆΔᐃⵠ], [hu, bs.ⲆⲆΔΔΔ], [1, bs.ᐃⲆᐃΔⵠ], [150, bs.ᐃΔⲆᐃ], [200, bs.ΔΔΔᐃ], [60, bs.ΔΔΔΔ], [wr, bs.ᐃᐃᐃΔΔ]]
  }, {
    ΔᐃⲆΔⲆ: 16000,
    items: [[As, bs.ᐃⵠⲆΔ], [1, bs.ΔΔᐃᐃᐃ], [1, bs.ᐃⲆΔᐃⲆ], [7, bs.ⲆΔᐃᐃΔ], [2, bs.ᐃᐃᐃΔΔ], [2, bs.ΔΔⲆⵠᐃ], [1, bs.ᐃⵠᐃᐃᐃ], [15, bs.ᐃΔⵠⵠⲆ], [2, bs.ⵠⵠΔⲆⵠ], [1, bs.ΔⵠᐃⵠΔ], [1, bs.ⲆΔⲆᐃⵠ], [200, bs.ᐃΔⲆᐃ], [300, bs.ΔΔΔᐃ]]
  }, {
    ΔᐃⲆΔⲆ: 16000,
    items: [[Ue, bs.ᐃⵠⲆΔ], [1, bs.ⲆᐃΔΔΔ], [1, bs.ⵠᐃΔΔⵠ], [1, bs.ⲆΔᐃⲆⵠ], [fg, bs.ⲆΔᐃᐃΔ], [vs, bs.ᐃᐃᐃΔΔ], [6, bs.ΔΔⲆⵠᐃ], [3, bs.Δⵠᐃⵠⵠ], [ag, bs.ⵠᐃⵠⲆᐃ], [200, bs.ᐃΔⲆᐃ], [300, bs.ΔΔΔᐃ]]
  }, {
    ΔᐃⲆΔⲆ: 16000,
    items: [[Ue, bs.ᐃⵠⲆΔ], [Ok, bs.ᐃⲆᐃΔⲆ], [1, bs.ΔⵠΔⲆⵠ], [3, bs.Δⵠᐃⵠⵠ], [Ag, vq], [1, bs.ⲆΔᐃⲆⵠ], [Qr, bs.ⲆΔᐃᐃΔ], [Pt, bs.ᐃᐃᐃΔΔ], [vs, bs.ΔΔⲆⵠᐃ], [150, bs.ᐃΔⲆᐃ], [200, bs.ΔΔΔᐃ], [1, bs.ᐃⲆΔⲆᐃ]]
  }, {
    ΔᐃⲆΔⲆ: 16000,
    items: [[1, bs.ᐃⵠⲆΔ], [Ej, bs.ⵠΔᐃᐃⲆ], [1, bs.ⲆΔᐃⲆⵠ], [7, bs.ⲆΔᐃᐃΔ], [Pt, bs.ᐃᐃᐃΔΔ], [4, bs.ΔΔⲆⵠᐃ], [Zt, bs.ᐃᐃΔⲆⵠ], [4, bs.ⵠᐃⵠᐃᐃ], [10, bs.ΔΔᐃⲆΔ], [6, bs.ΔⵠⲆⲆⲆ], [4, bs.ᐃⲆⲆⲆⵠ], [ag, bs.ᐃⵠᐃⵠΔ], [500, bs.ΔΔΔᐃ]]
  }, {
    ΔᐃⲆΔⲆ: 16000,
    items: [[1, bs.ᐃⵠⲆΔ], [1, bs.ⲆΔᐃⲆⵠ], [16, bs.ΔᐃⵠⲆⵠ], [1, bs.ᐃᐃᐃΔΔ], [sr, bs.ΔΔⲆⵠᐃ], [3, bs.Δⵠᐃⵠⵠ], [1, bs.ᐃⵠⵠᐃⵠ], [1, bs.ᐃᐃᐃΔⵠ], [16, bs.ⲆΔⵠⲆᐃ], [150, bs.ᐃΔⲆᐃ], [200, bs.ΔΔΔᐃ]]
  }, {
    ΔᐃⲆΔⲆ: 20000,
    items: [[1, bs.ᐃⵠⲆΔ], [1, bs.ⲆΔᐃⲆⵠ], [ie, bs.ⲆΔᐃᐃΔ], [jq, bs.ᐃᐃᐃΔΔ], [3, bs.ΔΔⲆⵠᐃ], [3, bs.Δⵠᐃⵠⵠ], [Ue, bs.ᐃⲆΔⵠΔ], [1, bs.ΔᐃᐃΔⲆ], [Ue, bs.ΔΔᐃᐃⲆ], [2, bs.ᐃⲆᐃⵠⲆ], [50, bs.ᐃΔⲆᐃ], [100, bs.ΔΔΔᐃ]]
  }];
  var sw = {
    ⲆΔΔⵠⲆⵠⲆᐃᐃ: Mt,
    ⵠᐃᐃⲆⲆⵠⲆⵠᐃ: Bk,
    ΔΔΔΔᐃᐃⵠ: 0,
    ⲆᐃᐃⲆᐃΔΔ: 0.2,
    ΔᐃⲆᐃⵠΔⲆ: 600000,
    ⵠⲆⲆᐃΔΔⵠΔⵠ: 0.58,
    ⵠᐃᐃΔⵠΔᐃ: 4,
    ΔⲆⲆΔⲆᐃᐃ: 0.2,
    ⲆⲆᐃⲆⵠᐃⵠΔⵠ: 200,
    ⲆⵠΔΔᐃⵠⲆ: 52,
    ⵠᐃΔⵠᐃΔΔ: Z,
    ⲆᐃⲆⵠⵠΔⲆ: 4,
    ⲆⲆⲆⵠⲆᐃΔᐃΔ: wt,
    ⵠΔⲆⲆΔⲆⲆⵠᐃ: ci,
    ΔᐃⵠᐃⵠΔᐃⵠΔ: 8000,
    ΔᐃⵠᐃⲆΔⲆΔΔ: "[13]",
    ⲆⲆᐃⲆΔⵠᐃΔⲆ: 60000,
    ᐃΔⲆΔⵠⲆⵠᐃΔ: 2000,
    ⵠΔΔⲆⵠᐃᐃ: 1,
    ⲆΔᐃⵠᐃⵠΔⵠΔ: 125000,
    ⵠⵠⵠΔΔⲆⵠⵠⵠ: 50,
    ⵠⲆᐃⵠⵠⲆΔ: re,
    ᐃΔⵠΔᐃⲆΔⵠⲆ: Wa,
    ᐃⵠⲆᐃᐃⵠᐃⵠⲆ: 3
  };
  function tw(a, b, c) {
    Mi(Ys, a, b, c);
    const d = Xs($s[Cq], $s[1], $s[hc], $s[qk], $s[1], $s[Xr]);
    Xs($s[Qs], $s[1], $s[Xh], $s[0], $s[1], $s[ql]);
    return d ^ 43457;
  }
  var uw = {
    ᐃΔⵠ: 480000,
    ᐃⲆᐃⵠΔᐃΔ: Ye,
    ⲆⲆⲆⵠᐃⵠⵠ: Pq,
    ΔᐃⵠⲆᐃⲆⲆⲆⵠ: 16 - Ln,
    ΔⲆᐃⲆⵠⲆᐃ: 60,
    ΔⵠⵠⲆⵠ: aa,
    ᐃᐃⲆᐃⵠ: 2,
    ⵠⲆⵠᐃᐃ: Xb,
    ᐃⲆⵠᐃΔ: au,
    ⲆᐃᐃⲆᐃΔΔ: 10,
    ⵠᐃΔΔⵠⵠᐃ: fs,
    ⲆΔᐃⵠⵠⲆΔ: Ms,
    ⲆⵠΔᐃⲆⵠⲆ: 100,
    ⲆΔⲆⲆⲆᐃΔⵠⵠ: Mk,
    ⵠᐃⵠⲆⲆᐃᐃ: Ms,
    ΔᐃΔⵠΔΔᐃ: Mk,
    ⲆⲆΔⵠⲆᐃⵠⵠⵠ: 100,
    ΔᐃΔⵠΔΔᐃ: Kq,
    ᐃᐃⵠᐃⲆⲆⵠ: 100,
    ⲆᐃΔΔⵠⵠᐃ: 100,
    ⵠΔⵠⵠⲆ: 0,
    ΔⲆΔⲆⲆⵠᐃ: 1,
    ΔΔⵠⲆΔ: ld,
    ΔⵠⵠⲆᐃ: xs,
    ΔᐃⵠΔᐃ: 4,
    ⵠⲆΔⵠⵠΔᐃ: 5,
    ⲆⲆᐃⲆⵠ: 6,
    ΔΔⲆΔⵠ: 7,
    ⲆΔⵠΔⲆⵠⲆⵠᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ΔⲆⲆⵠᐃᐃᐃ: _a,
    ⵠⵠⲆᐃᐃⲆⵠ: gr,
    ΔᐃⲆᐃᐃᐃΔ: 30,
    ⵠᐃΔΔⲆⵠᐃΔΔ: Zn,
    ΔⲆᐃⲆⵠⲆᐃ: 60000,
    ᐃⵠⵠΔⵠᐃⲆᐃⲆ: Cn,
    ⵠⲆⵠⵠᐃⵠΔⲆΔ: uh,
    ΔⲆᐃⲆΔⵠᐃⵠᐃ: 50,
    ⲆⲆⲆΔΔⵠⲆⲆⲆ: 0,
    ⲆⵠⲆΔᐃⵠⵠΔⵠ: 40,
    ⵠᐃΔᐃⵠⲆΔᐃΔ: 39,
    ⵠⲆᐃᐃⲆΔⲆᐃᐃ: 830,
    ᐃⵠⵠᐃᐃΔⵠ: 25,
    ᐃⲆⵠΔⲆⲆⲆ: 8,
    ᐃⵠⵠⵠΔ: 0,
    ΔΔⵠⵠᐃ: vq,
    ΔΔΔⲆⵠⲆⲆ: 200,
    ⵠΔⵠⵠᐃⵠᐃ: ur,
    ΔⲆⵠⲆⲆ: 250,
    ⵠⲆΔᐃΔⵠΔ: 150,
    ᐃΔᐃⵠΔⲆⵠ: gr,
    ⲆⲆΔⲆΔ: 350,
    ΔⲆΔΔᐃⲆΔ: P,
    ΔΔᐃΔⲆᐃⵠ: 700,
    ᐃⲆⲆⲆⵠ: 39879
  };
  var vw = [];
  for (rt = Nl; rt < 500; rt++) {
    vw[rt] = 0;
  }
  vw[Ur.ⵠⵠⲆⵠⵠ] = zs;
  vw[Ur.ⲆᐃⲆᐃΔ] = 1;
  vw[Ur.ᐃᐃᐃΔⵠ] = 1;
  vw[Ur.ΔᐃᐃΔⲆ] = Ag;
  vw[Ur.ⵠΔΔⲆᐃ] = 1;
  vw[Ur.ⵠᐃᐃⵠⵠ] = As;
  vw[Ur.ᐃⵠⵠᐃⲆ] = ag;
  vw[Ur.ⲆΔΔΔⲆ] = 1;
  vw[Ur.ⲆⲆΔᐃΔ] = 1;
  vw[Ur.ΔⲆⵠⲆᐃ] = 1;
  vw[Ur.ΔΔⵠⵠⵠ] = Al;
  vw[Ur.ΔⵠΔΔΔ] = 1;
  vw[Ur.ΔΔᐃᐃⲆ] = 1;
  vw[Ur.ΔΔᐃΔᐃ] = Ag;
  vw[Ur.ⵠⵠⵠⵠⲆ] = 1;
  vw[Ur.ⵠᐃΔⲆⵠ] = jq;
  vw[Ur.ΔⲆΔᐃⲆ] = 1;
  vw[Ur.ⵠⲆΔΔᐃ] = Oj;
  vw[Ur.ΔΔⵠᐃⵠ] = Ag;
  var ww = [{
    time: sq * 480000
  }, {
    time: Gl * (au * 60000)
  }, {
    time: Yi * 480000
  }, {
    time: 1440000
  }, {
    time: Mg * 480000
  }, {
    time: xj * (tu * 60000)
  }, {
    time: 2400000
  }, {
    time: Eq * 60000 * 10
  }, {
    time: wg * (au * 60000)
  }, {
    time: 3360000
  }, {
    time: ls * 60000 * 6
  }, {
    time: ph * (ls * 60000)
  }, {
    time: 3360000
  }];
  var xw = {
    ᐃΔᐃᐃᐃⲆᐃ: 76,
    ᐃⲆᐃⵠⲆ: ns,
    ⵠΔΔᐃⲆ: 14,
    ᐃΔⲆᐃⲆ: 73,
    ΔΔⲆⵠᐃ: Pl,
    ⵠΔⵠΔⲆ: zs,
    ᐃⵠᐃᐃᐃ: Bn,
    ⵠⵠⲆᐃΔ: 25,
    ⵠᐃⵠᐃᐃ: 34,
    ᐃΔᐃⲆΔ: 79,
    ᐃΔᐃᐃⵠ: 72,
    ᐃᐃⲆΔⲆ: 68,
    ⵠᐃᐃⲆⲆ: ct,
    ⵠΔᐃᐃΔ: 12,
    ᐃⲆⲆⵠⲆ: 24,
    ᐃΔⵠⵠⲆ: jl,
    ⲆⲆᐃⵠⵠ: 65,
    ⵠΔⵠⲆⵠ: 21,
    ⵠⲆΔΔᐃⲆⵠ: 83,
    ΔⵠⲆⲆⲆ: 31,
    ⲆⲆᐃᐃΔ: 23,
    ⵠΔᐃⵠᐃ: 70,
    ⲆΔⲆᐃΔ: 75,
    ΔᐃᐃᐃⲆ: 66,
    Δᐃᐃᐃᐃ: 36,
    ΔⲆⵠⵠⲆ: 38,
    ⲆΔⵠⵠᐃ: 88,
    ⲆᐃⵠⲆⵠ: 53,
    ᐃᐃᐃⲆⵠ: 35,
    ΔΔΔᐃⵠ: 71,
    Ⲇᐃᐃⵠᐃ: 4,
    ⵠⲆᐃΔⵠ: 91,
    ⲆⲆΔⲆⵠ: 80,
    ⲆⵠΔΔⲆ: 74,
    ᐃⲆⲆΔⲆ: 78,
    ⵠⲆⲆⲆΔ: 67,
    ⲆΔⵠⲆᐃ: 30,
    ΔⲆᐃᐃⲆ: Rg,
    ⵠᐃⲆΔⵠ: k,
    ⵠⵠΔⲆⵠ: Dh,
    ⲆᐃᐃΔⵠ: 81,
    ᐃⲆΔᐃⲆ: 41,
    ΔΔᐃⲆΔ: 33,
    ᐃⲆⲆⲆⵠ: Wb,
    ⲆⲆΔⵠΔⲆⵠ: 82,
    ΔⲆⲆⲆⲆ: 77,
    ⲆⲆⲆΔⵠ: 47,
    ⲆᐃⵠⵠⲆ: 27,
    ΔᐃⲆⲆᐃ: 56,
    ᐃⲆᐃⵠΔ: 40,
    ⲆΔⲆⲆᐃ: 9,
    ΔⵠⵠⲆⲆ: 69,
    ⵠⵠⵠⲆⵠ: 48,
    ΔΔᐃⵠΔ: 52,
    ⵠΔΔΔⵠ: 37,
    ⵠΔⵠⲆΔ: 19,
    ᐃΔᐃᐃΔ: 44,
    ΔᐃᐃⵠᐃᐃⲆ: 85,
    ᐃΔΔᐃⵠ: 28,
    ⲆⵠᐃᐃΔ: 43,
    ⵠⵠΔⲆᐃ: 62,
    ΔᐃⲆⵠⵠ: kh,
    ᐃΔⵠⲆᐃ: 39,
    ΔⵠᐃⵠΔ: 29,
    ⵠΔᐃΔᐃ: 22,
    ⵠᐃᐃⲆΔ: ta,
    ⲆⵠⵠⲆⵠ: 86,
    ⲆΔᐃΔΔΔΔ: 84,
    Ⲇᐃⵠᐃⵠ: 90,
    ΔΔⲆⵠ: 0,
    ⵠᐃᐃⲆᐃ: 50,
    ΔⲆⵠᐃⵠ: 26,
    ⲆᐃᐃΔᐃ: 54,
    ⵠⵠᐃⵠⲆ: 64,
    ΔⲆⵠⲆΔ: 55,
    ᐃΔΔᐃᐃ: 60,
    ⵠΔⲆⲆⲆⲆⵠ: 89,
    ⲆⲆⵠⲆⵠ: 87,
    ᐃⲆᐃⲆᐃ: 63,
    ᐃΔΔᐃⲆ: 51,
    ⵠΔⵠⵠᐃ: 49,
    ᐃᐃΔⲆⵠ: 32,
    ᐃⲆᐃΔⵠ: 2,
    ⵠᐃΔΔⲆ: Qg,
    ⵠᐃᐃⵠⲆ: 61,
    ΔᐃᐃⵠⲆ: 45,
    ⲆΔΔΔⵠ: 100,
    ΔⵠⲆᐃⲆ: gh,
    ⵠⵠᐃⵠᐃ: 42,
    ᐃⵠᐃⵠⵠ: 46
  };
  var yw = [[xw.ᐃⲆⲆⵠⲆ, bs.ᐃΔⲆᐃ], [xw.ⵠⵠⲆᐃΔ, bs.ΔΔΔΔ], [xw.ΔⲆⵠᐃⵠ, bs.ΔⲆⲆΔ], [xw.ⲆᐃⵠⵠⲆ, bs.ΔⲆⲆⲆ], [xw.ᐃΔΔᐃⵠ, bs.ⵠΔⲆΔ]];
  function zw() {
    this.ⵠᐃΔⵠⲆ = "";
    this.ᐃᐃΔᐃ = Cn;
    this.ᐃΔᐃⵠⵠ = 0;
    this.ᐃⵠΔᐃⲆ = Qs;
    this.ⲆⲆⵠᐃⲆⲆΔ = 0;
    this.ΔΔᐃᐃⵠ = uh;
    this.ΔᐃⵠⲆⲆ = 0;
    this.ΔΔᐃⵠⲆ = 0;
    this.level = Ih;
    this.label = null;
    this.ΔΔⵠΔᐃⲆⲆ = null;
    this.ⵠᐃΔⲆⵠΔⲆ = null;
    this.ⲆⲆΔΔᐃ = false;
    this.ⵠⲆΔⵠΔ = Cq;
  }
  function Aw(q) {
    function e(b, c, d, e, f) {
      for (var g = Gr; f > g && w(b, c, d, e, yb) !== aa; g++);
      if (f === g) {
        return uh;
      } else {
        return Zq;
      }
    }
    function i(a, b, c) {
      var d = b;
      for (var e = c; e < ff.ᐃⵠⵠⵠⵠ; e++) {
        for (var f = b; f < ff.ΔΔⲆⲆⲆ && (e === c && (d = Math.max(f, d)), f <= d) && Fh !== a[e][f]; f++) {
          a[e][f] = 1;
        }
        if (d > f) {
          break;
        }
      }
      ff.ᐃⵠⲆⵠ.push(new ff.ᐃᐃⲆΔⲆⲆᐃ(ff.ⵠᐃΔⲆΔ, b, c, d - b + ag, e - c, 15));
    }
    function w(c, d, e, f, i) {
      var j = d + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * f);
      var m = e + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * f);
      var a = ws + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * (ff.ΔΔⲆⲆⲆ - j - k));
      var n = 10 + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * (ff.ᐃⵠⵠⵠⵠ - m - Kk));
      var h = a + j;
      var l = n + m;
      for (var g = Cn; g < ff.ᐃⵠⲆⵠ.length; g++) {
        var o = ff.ᐃⵠⲆⵠ[g];
        if (ᐃⵠΔⵠ.ᐃⲆⵠΔⲆⲆΔ(a, h, n, l, o.x1 / 100 - i, o.x2 / 100 + i, o.y1 / 100 - i, o.y2 / 100 + i) === ag) {
          return 0;
        }
      }
      ff.ᐃⵠⲆⵠ.push(new ff.ᐃᐃⲆΔⲆⲆᐃ(c, a, n, j, m, 15));
      return Gs;
    }
    function x(f, e) {
      var i = ff.ᐃⵠⲆⵠ[f];
      var k = Math.floor(i.y1 / hl);
      var q = Math.floor(i.x1 / 100);
      var o = Math.floor(i.ⵠΔⵠ / 100);
      var a = q + (B = Math.floor(i.w / Ms));
      var r = Cl;
      var s = o;
      var t = k;
      for (var v = q + 10 + Math.floor((B - Ws) * ff.ᐃⵠⲆⲆΔ.get()), w = v - xt; v + Xb > w; w++) {
        z(k - 1, w, "wtb", 0, Ej);
      }
      while (Nl < s) {
        if (r !== 2) {
          if (s < 10) {
            for (D = $l; s > 0; D++) {
              n(t, v, Ag, 1, 0, e, D, 1);
              s -= $l;
              t += 1;
            }
          } else if (r !== 1) {
            r = 1;
            var x = Math.floor(Fh + ff.ᐃⵠⲆⲆΔ.get() * Xr);
            var y = zs + Math.floor(Rb * ff.ᐃⵠⲆⲆΔ.get());
            if (q + 16 > v) {
              n(t, v, x, Cn, Ag, e, y, y);
              v += x;
            } else if (a - jk < v) {
              n(t, v, x, _a, -Ue, e, y, y);
              v -= x;
            } else if (ff.ᐃⵠⲆⲆΔ.get() > 0.5) {
              n(t, v, x, 0, aa, e, y, y);
              v += x;
            } else {
              n(t, v, x, 0, -As, e, y, y);
              v -= x;
            }
          } else {
            var A = Math.min(s, Math.floor(1 + Yi * ff.ᐃⵠⲆⲆΔ.get()));
            var B = 1 + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * 4);
            n(t, v, A, _b, 0, e, B, B);
            r = 0;
            s -= A;
            t += A;
          }
        } else {
          for (var D = Fl; Oj < D; D--) {
            n(t, v, As, 1, Ih, e, D, j);
            s -= 1;
            t += 1;
          }
          r = Cn;
        }
      }
      for (w = v - Ej; w < v + Cl; w++) {
        z(t, w, "wtb", 0, Eo);
      }
    }
    function n(f, j, k, m, n, o, p, a) {
      var q = Math.floor(p / 2);
      var h = Math.max(ie, Math.floor(p / sh));
      var l = Math.floor(a / 2);
      var g = Math.max(1, Math.floor(a / 2));
      for (var r = 0; k > r; r++) {
        for (var s = f - l; f + g > s; s++) {
          for (var t = j - q; t < j + h; t++) {
            if (z(s, t, "wtb", 0, 1) === 1) {
              o.push([s, t, 1]);
            }
          }
        }
        f += m;
        j += n;
      }
    }
    function r(a, b) {
      for (var c = rl; c < b.length; c++) {
        o(b[c][0], b[c][zs], a, b[c][2]);
      }
    }
    function a(a, b) {
      for (var c = Cq; $a > c; c++) {
        h(a, "t", c, Math.floor(b * 80));
      }
      for (c = 0; c < 4; c++) {
        h(a, "b", c, Math.floor(b * 80));
      }
      for (c = Cq; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 50));
      }
      var d = [];
      for (c = gr; Rt > c; c++) {
        x(a, d);
      }
      r(a, d);
      d = [];
      h(a, "p", ur, Math.floor(b * 28));
      for (c = 0; c < 3; c++) {
        h(a, "g", c, Math.floor(b * 7));
      }
      for (c = Qs; Qk > c; c++) {
        h(a, "d", c, Math.floor(hc * b));
      }
      for (c = rl; c < Kj; c++) {
        h(a, "a", c, Math.floor(b * 1));
      }
      for (c = ms; c < Gl; c++) {
        h(a, "m", c, Math.floor(b * 1));
      }
      h(a, "a", 0, Math.floor(b * 1));
      g(a);
    }
    function o(a, c, d, e) {
      if (b(a, c) && (ⵠⲆⵠⵠ = _w.ⵠⲆⵠⵠ, ⵠⲆⵠⵠ[a][c] === sb && (ⵠⲆⵠⵠ[a][c] = {}), ⵠⲆⵠⵠ[a][c].r === Hj)) {
        var f = 0;
        if (b(a - 1, c) && ⵠⲆⵠⵠ[a - aa][c] !== undefined && ⵠⲆⵠⵠ[a - ag][c].wtb !== undefined) {
          f += qd;
        }
        if (b(a, c - Oj) && ⵠⲆⵠⵠ[a][c - Ht] !== undefined && ⵠⲆⵠⵠ[a][c - Ue].wtb !== undefined) {
          f += 8;
        }
        if (b(a, c + Fh) && ⵠⲆⵠⵠ[a][c + 1] !== undefined && ⵠⲆⵠⵠ[a][c + 1].wtb !== undefined) {
          f += In;
        }
        if (b(a + 1, c) && ⵠⲆⵠⵠ[a + 1][c] !== yr && ⵠⲆⵠⵠ[a + 1][c].wtb !== undefined) {
          f += 64;
        }
        if (b(a - 1, c - Zq) && (f & 10) === ls + Xr && ⵠⲆⵠⵠ[a - 1][c - 1] !== undefined && yq !== ⵠⲆⵠⵠ[a - Ht][c - 1].wtb) {
          f += 1;
        }
        if (b(a - 1, c + _b) && (f & ka + Tt) === rs + 2 && ⵠⲆⵠⵠ[a - 1][c + jq] !== undefined && ⵠⲆⵠⵠ[a - 1][c + 1].wtb !== undefined) {
          f += 4;
        }
        if (b(a + Oj, c - zs) && (f & tu + 64) == 72 && ⵠⲆⵠⵠ[a + 1][c - 1] !== undefined && ⵠⲆⵠⵠ[a + Ej][c - 1].wtb !== Zi) {
          f += 32;
        }
        if (!!b(a + Al, c + 1) && !(~f & 80) && ⵠⲆⵠⵠ[a + 1][c + j] !== undefined && Gg !== ⵠⲆⵠⵠ[a + Fh][c + 1].wtb) {
          f += 128;
        }
        ⵠⲆⵠⵠ[a][c].r = {};
        ⵠⲆⵠⵠ[a][c].r.ⵠᐃΔΔΔⲆᐃ = f;
        ⵠⲆⵠⵠ[a][c].r.ⲆᐃΔⲆⵠΔⵠ = e;
        ⵠⲆⵠⵠ[a][c].r.ⲆⵠⲆᐃ = ff.Ⲇⵠᐃⵠᐃ(d, Wl * c + 50, Vn * a + 50) - 400;
        ⵠⲆⵠⵠ[a][c].r.x = ba * c + 50;
        ⵠⲆⵠⵠ[a][c].r.y = a * ba + 50;
      }
    }
    function h(f, e, i, j, k) {
      var n = ff.ᐃⵠⲆⵠ[f];
      var p = Math.floor(n.x1 / 100);
      var q = Math.floor(n.y1 / ut);
      var r = Math.floor(n.w / fs);
      var t = Math.floor(n.ⵠΔⵠ / ut);
      if (k !== undefined) {
        k = Ej - k;
        p += Math.floor(r * k / 2);
        q += Math.floor(k * t / Xr);
        r -= Math.floor(k * r);
        t -= Math.floor(k * t);
      }
      var v = _w.ⵠⲆⵠⵠ;
      for (var g = tj, w = 0; j > w && g <= 50000; g++) {
        var x = q + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * t);
        var y = p + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * r);
        if (ff.Ⲇⵠᐃⵠᐃ(f, W * y + 50, x * 100 + 50) >= 400) {
          var A = v[x][y + 1];
          if (ps === A || $r === A[e] || A[e][i] === $r) {
            if ((A = v[x][y - 1]) === undefined || oh === A[e] || A[e][i] === undefined) {
              if ((A = v[x + 1][y]) === undefined || A[e] === ht || A[e][i] === undefined) {
                A = v[x - jq][y];
                if (Zi === A || A[e] === undefined || A[e][i] === undefined) {
                  if ((A = v[x + 1][y - 1]) === undefined || A[e] === undefined || jn === A[e][i]) {
                    if ((A = v[x - 1][y + Ag]) === undefined || A[e] === undefined || A[e][i] === undefined) {
                      A = v[x + _b][y + 1];
                      if (yq === A || A[e] === undefined || A[e][i] === undefined) {
                        if ((A = v[x - aa][y - zs]) === Bl || da === A[e] || A[e][i] === undefined) {
                          if (Gk === v[x][y]) {
                            z(x, y, e, i, 1);
                            w++;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function l(a, b) {
      for (var c = 0; c < Sg; c++) {
        h(a, "s", c, Math.floor(ua * b));
      }
      for (c = Cq; c < 3; c++) {
        h(a, "m", c, Math.max(1, Math.floor(b * Ag)), 0.2);
      }
      h(a, "c", 0, Math.floor(b * 36));
      var d = [];
      (function (b, c) {
        var d = ff.ᐃⵠⲆⵠ[b];
        var e = Math.floor(d.y1 / 100);
        var f = Math.floor(d.x1 / hl);
        var i = Math.floor(d.ⵠΔⵠ / F);
        var j = Math.floor(d.w / yg);
        var a = e + Math.floor(i / re);
        var k = f + Math.floor(j / 2);
        for (var h = Cq; h < 3; h++) {
          z(m = Math.floor(a - Sg + ff.ᐃⵠⲆⲆΔ.get() * 6), n = Math.floor(k - 3 + ff.ᐃⵠⲆⲆΔ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var m;
          var n;
          if (z(m = Math.floor(a - 3 + ff.ᐃⵠⲆⲆΔ.get() * 6), n = Math.floor(k - 3 + ff.ᐃⵠⲆⲆΔ.get() * 6), "wtb", 0, 1) === 1) {
            c.push([m, n, uh]);
          }
        }
      })(a, d);
      r(a, d);
      d = [];
    }
    function g(a) {
      var b = ff.ᐃⵠⲆⵠ[a];
      z(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / vh), "s", Ih, 0);
      z(og + Math.floor(b.y1 / Ms), -1 + Math.floor(b.x2 / 100), "s", Tg, 0);
      z(-3 + Math.floor(b.y2 / 100), Zq + Math.floor(b.x1 / 100), "s", 0, qn);
      z(Qt + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / Tk), "s", ur, Cq);
    }
    function s(a, b) {
      (function (b, c) {
        var d = ff.ᐃⵠⲆⵠ[c];
        for (var e = 0, f = 0; b > f && e < 10000; e++) {
          var i = d.y1 + d.ⵠΔⵠ * ff.ᐃⵠⲆⲆΔ.get();
          var j = d.x1 + d.w * ff.ᐃⵠⲆⲆΔ.get();
          var k = Math.floor(i / Mk);
          var m = Math.floor(j / 100);
          if (ff.Ⲇⵠᐃⵠᐃ(c, F * m + 50, k * Ms + 50) >= 600) {
            for (var p = 1, q = k - Rb; p === 1 && q <= k + 4; q++) {
              for (var t = m - Cg; $l === p && t <= m + 4; t++) {
                if (_w.ⵠⲆⵠⵠ[q][t] !== undefined) {
                  p = 0;
                }
              }
            }
            if (p !== 0) {
              z(k, m, "la", f % 6, 0);
              f++;
            }
          }
        }
      })(b * 80, a);
      for (var c = Rl; Z > c; c++) {
        h(a, "s", c, Math.floor(b * 12));
      }
      for (c = 0; ol > c; c++) {
        h(a, "g", c, Math.floor(b * 6));
      }
      for (c = 0; co > c; c++) {
        h(a, "re", c, Math.max(1, Math.floor(aa * b)), 0.2);
      }
      for (c = 0; c < 3; c++) {
        h(a, "a", c, Math.max(1, Math.floor(b * 2)));
      }
      g(a);
    }
    function z(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < ff.ᐃⵠⵠⵠⵠ && ff.ΔΔⲆⲆⲆ > b) {
        ⵠⲆⵠⵠ = _w.ⵠⲆⵠⵠ;
        if (ⵠⲆⵠⵠ[a][b] === undefined) {
          ⵠⲆⵠⵠ[a][b] = {};
        }
        if (ⵠⲆⵠⵠ[a][b][c] !== undefined) {
          return Qs;
        } else {
          ⵠⲆⵠⵠ[a][b][c] = [];
          ⵠⲆⵠⵠ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (Ht === e) {
            (function (a, b, c, d) {
              Nt.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function b(a, b) {
      return a >= Nl && b >= 0 && a < ff.ᐃⵠⵠⵠⵠ && b < ff.ΔΔⲆⲆⲆ;
    }
    function d(a, b) {
      for (var c = Fj; c < $b; c++) {
        h(a, "s", c, Math.floor(de * b));
      }
      for (c = 0; ar > c; c++) {
        h(a, "f", c, Math.floor(b * 24));
      }
      for (c = vq; c < 3; c++) {
        h(a, "d", c, Math.max(Zq, Math.floor(vk * b)), 0.3);
      }
      for (c = Ih; c < 3; c++) {
        h(a, "g", c, Math.floor(b * 6));
      }
      g(a);
    }
    function c(a, b) {
      for (var c = Tg; c < 6; c++) {
        h(a, "t", c, Math.floor(b * 20));
      }
      for (c = 0; c < Yi; c++) {
        h(a, "b", c, Math.floor(b * yn));
      }
      for (c = 0; c < 3; c++) {
        h(a, "s", c, Math.floor(b * 20));
      }
      var d = [];
      x(a, d);
      r(a, d);
      d = [];
      h(a, "p", Nl, Math.floor(b * 24));
      for (c = 0; c < 3; c++) {
        h(a, "g", c, Math.floor(b * Jo));
      }
      if (ff.mode === uw.ΔΔⵠⲆΔ) {
        for (c = 0; c < 3; c++) {
          h(a, "d", c, Math.floor(b * 3));
        }
        for (c = 0; c < 3; c++) {
          h(a, "a", c, Math.floor(b * Tt));
        }
      }
      g(a);
    }
    function t(a) {
      for (var b = 0; b < 3; b++) {
        h(a, "s", b, Nq);
      }
      for (b = tj; b < co; b++) {
        h(a, "a", b, 1);
      }
      for (b = 0; b < 3; b++) {
        h(a, "d", b, Eo);
      }
      g(a);
    }
    function p(a, b, c) {
      if (a[b]) {
        for (Xk = 0; Xk < a[b].length; Xk++) {
          if (a[b][Xk]) {
            for (ΔΔⵠⵠ = ne; a[b][Xk].length > ΔΔⵠⵠ; ΔΔⵠⵠ++) {
              a[b][Xk][ΔΔⵠⵠ].ΔΔΔ = c;
              a[b][Xk][ΔΔⵠⵠ].ᐃⲆΔ = false;
              a[b][Xk][ΔΔⵠⵠ].time = 0;
              a[b][Xk][ΔΔⵠⵠ].angle = qk;
            }
          }
        }
      }
    }
    this.mode = uw.ⵠΔⵠⵠⲆ;
    this.ΔᐃᐃΔⵠⵠᐃ = q;
    this.ΔΔⵠΔⵠ = 0;
    this.ⵠⲆΔⵠⲆᐃⲆ = 6;
    this.ⲆΔⲆΔ = [];
    this.ᐃᐃᐃ = [];
    this.ᐃᐃᐃ[xw.ΔΔⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆΔΔΔⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆⲆΔⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔΔᐃᐃ] = [];
    this.ᐃᐃᐃ[xw.ⵠⲆⲆⲆΔ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔᐃⵠᐃ] = [];
    this.ᐃᐃᐃ[xw.ΔⲆⲆⲆⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔΔΔᐃⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔᐃᐃⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔⲆᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⲆⵠΔΔⲆ] = [];
    this.ᐃᐃᐃ[xw.ⲆⲆᐃⵠⵠ] = [];
    this.ᐃᐃᐃ[xw.ΔᐃᐃᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠⵠΔⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ⲆΔⵠⵠᐃ] = [];
    this.ᐃᐃᐃ[xw.ⵠⲆᐃΔⵠ] = [];
    this.ᐃᐃᐃ[xw.Ⲇᐃⵠᐃⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆᐃⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆⲆΔⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠⵠᐃⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔⵠⵠⲆⲆ] = [];
    this.ᐃᐃᐃ[xw.ᐃᐃⲆΔⲆ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔᐃⲆΔ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔⲆⲆⲆⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠⲆΔΔᐃⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆΔᐃΔΔΔΔ] = [];
    this.ᐃᐃᐃ[xw.ΔᐃᐃⵠᐃᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⲆᐃᐃΔⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆⲆΔⵠΔⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆⵠⵠⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ] = [];
    this.ᐃᐃᐃ[xw.Δᐃᐃᐃᐃ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃᐃⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆᐃΔⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔⵠΔⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔΔⲆⵠᐃ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆⲆⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ΔⵠⲆᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔᐃᐃΔ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆᐃⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔΔᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃⲆΔⵠ] = [];
    this.ᐃᐃᐃ[xw.ΔΔᐃⵠΔ] = [];
    this.ᐃᐃᐃ[xw.Ⲇᐃᐃⵠᐃ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔⵠⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃᐃⲆΔ] = [];
    this.ᐃᐃᐃ[xw.ⲆΔⲆⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔⵠⲆΔ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃᐃⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆΔᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃᐃⲆⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠⵠΔⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠᐃΔΔⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔᐃⲆⵠⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔⵠⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔΔᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔᐃᐃⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ᐃⵠᐃⵠⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆⲆⲆΔⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠⵠⵠⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔⵠⵠᐃ] = [];
    this.ᐃᐃᐃ[xw.ⲆᐃⵠⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ] = [];
    this.ᐃᐃᐃ[xw.ΔⵠᐃⵠΔ] = [];
    this.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ΔⲆᐃᐃⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ] = [];
    this.ᐃᐃᐃ[xw.ⲆⲆᐃᐃΔ] = [];
    this.ᐃᐃᐃ[xw.ⲆΔⵠⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ΔⲆⵠⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔΔᐃⲆΔ] = [];
    this.ᐃᐃᐃ[xw.ΔⵠⲆⲆⲆ] = [];
    this.ᐃᐃᐃ[xw.ΔⲆⵠⲆΔ] = [];
    this.ᐃᐃᐃ[xw.ⵠΔΔΔⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆⵠᐃᐃΔ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔᐃᐃΔ] = [];
    this.ᐃᐃᐃ[xw.ⲆᐃᐃΔᐃ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔⵠⲆᐃ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆᐃⵠΔ] = [];
    this.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃⲆⲆⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ⵠⵠⲆᐃΔ] = [];
    this.ᐃᐃᐃ[xw.ΔⲆⵠᐃⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆᐃⵠⵠⲆ] = [];
    this.ᐃᐃᐃ[xw.ᐃΔΔᐃⵠ] = [];
    this.ᐃᐃᐃ[xw.ᐃᐃᐃⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⲆⲆⵠⲆⵠ] = [];
    this.ᐃᐃᐃ[xw.ⵠⵠᐃⵠᐃ] = [];
    this.ⵠΔΔⲆ = [];
    this.ΔΔⲆⲆⲆ = 260;
    this.ᐃⵠⵠⵠⵠ = 260;
    this.ⵠᐃᐃΔᐃⲆΔ = vh;
    this.ⲆᐃⲆΔⲆᐃΔ = rj;
    this.w = this.ΔΔⲆⲆⲆ * this.ⵠᐃᐃΔᐃⲆΔ;
    this.ⵠΔⵠ = this.ⲆᐃⲆΔⲆᐃΔ * this.ᐃⵠⵠⵠⵠ;
    this.ᐃⵠⲆⲆΔ = new Rk.ΔᐃᐃΔⵠⲆⵠ();
    this.ᐃⵠⲆⵠ = [];
    this.ᐃⵠⲆᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0, 1, rl, 1, 1);
    this.transition = na;
    this.ΔΔⲆⲆΔ = [];
    this.Δᐃᐃᐃⵠ = 0;
    this.ΔⲆᐃⵠⲆⵠⵠ = zs;
    this.ⵠⲆⵠⲆⲆᐃⲆ = 2;
    this.ⲆⵠⵠⲆⲆⵠⵠ = 3;
    this.ⵠᐃΔⲆΔ = 4;
    this.ⲆⲆⵠΔᐃᐃⲆ = 10;
    this.ΔΔⲆⲆΔ[this.Δᐃᐃᐃⵠ] = {
      ΔΔᐃⵠᐃᐃᐃ: 1,
      ⲆΔⵠ: [19, 58, 43],
      Ⲇⵠⵠ: [4, 43, 48],
      ᐃᐃᐃᐃⲆ: ["#133a2b", "#042b30"]
    };
    this.ΔΔⲆⲆΔ[this.ⵠᐃΔⲆΔ] = {
      ΔΔᐃⵠᐃᐃᐃ: Gr,
      ⲆΔⵠ: [11, 106, 132],
      Ⲇⵠⵠ: [9, 55, 63],
      ᐃᐃᐃᐃⲆ: ["#0B6A84", "#09373F"]
    };
    this.ΔΔⲆⲆΔ[this.ΔⲆᐃⵠⲆⵠⵠ] = {
      ΔΔᐃⵠᐃᐃᐃ: 0,
      ⲆΔⵠ: [235, 242, 240],
      Ⲇⵠⵠ: [19, 97, 103],
      ᐃᐃᐃᐃⲆ: ["#EBF2F0", "#136167"]
    };
    this.ΔΔⲆⲆΔ[this.ⵠⲆⵠⲆⲆᐃⲆ] = {
      ΔΔᐃⵠᐃᐃᐃ: 0,
      ⲆΔⵠ: [45, 32, 23],
      Ⲇⵠⵠ: [3, 28, 30],
      ᐃᐃᐃᐃⲆ: ["#2D2017", "#031C1E"]
    };
    this.ΔΔⲆⲆΔ[this.ⲆⵠⵠⲆⲆⵠⵠ] = {
      ⲆΔⵠ: [74, 74, 74],
      Ⲇⵠⵠ: [24, 61, 60],
      ᐃᐃᐃᐃⲆ: ["#4A4A4A", "#183D3C"],
      ΔΔᐃⵠᐃᐃᐃ: 0
    };
    this.ΔΔⲆⲆΔ[this.ⲆⲆⵠΔᐃᐃⲆ] = {
      ⲆΔⵠ: [235, 216, 166],
      Ⲇⵠⵠ: [9, 61, 56],
      ᐃᐃᐃᐃⲆ: ["#EBD8A6", "#093D38"],
      ΔΔᐃⵠᐃᐃᐃ: ne
    };
    this.ᐃᐃⲆΔⲆⲆᐃ = function (a, b, c, d, e, f) {
      this.x1 = b * 100;
      this.y1 = Tk * c;
      this.w = d * 100;
      this.ⵠΔⵠ = e * 100;
      this.x2 = (b + d) * 100;
      this.y2 = (c + e) * No;
      this.ᐃΔΔ = a;
      this.ⲆᐃⲆ = Gk === f ? 15 : f;
    };
    this.ⵠΔᐃΔΔ = -1000000;
    this.ᐃⲆⲆᐃⵠ = this.ⵠΔᐃΔΔ;
    this.ⵠⵠᐃΔΔ = this.ⵠΔᐃΔΔ;
    this.ᐃⲆΔⲆⵠ = this.ⵠΔᐃΔΔ;
    this.ⵠⵠᐃⲆⵠΔΔ = this.ⵠΔᐃΔΔ;
    this.Δᐃⵠᐃⵠⵠᐃ = this.ⵠΔᐃΔΔ;
    this.ⵠⵠΔⵠΔ = this.ⵠΔᐃΔΔ;
    this.ᐃΔⲆⲆⲆⲆⲆⲆᐃ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / Nh);
      b.ᐃⲆⲆᐃⵠ = ff.ⵠΔᐃΔΔ;
      b.ⵠⵠᐃΔΔ = ff.ⵠΔᐃΔΔ;
      b.ᐃⲆΔⲆⵠ = ff.ⵠΔᐃΔΔ;
      b.ⵠⵠᐃⲆⵠΔΔ = ff.ⵠΔᐃΔΔ;
      b.ⵠⵠΔⵠΔ = ff.ⵠΔᐃΔΔ;
      b.ᐃⲆⲆΔⵠᐃⵠ = ff.ⵠΔᐃΔΔ;
      for (var g = tj; ff.ᐃⵠⲆⵠ[g].ᐃΔΔ !== ff.ⵠᐃΔⲆΔ; g++) {
        if (ff.Δᐃᐃᐃⵠ === ff.ᐃⵠⲆⵠ[g].ᐃΔΔ) {
          var h = ff.Ⲇⵠᐃⵠᐃ(g, c, d);
          b.ⵠⵠᐃⲆⵠΔΔ = Math.max(b.ⵠⵠᐃⲆⵠΔΔ, h);
          if (qk < h && ff.ΔⲆᐃᐃⵠΔⲆᐃᐃ(g, c, d) === aa) {
            b.ᐃⲆⲆΔⵠᐃⵠ = jq;
          }
        } else if (ff.ΔⲆᐃⵠⲆⵠⵠ === ff.ᐃⵠⲆⵠ[g].ᐃΔΔ) {
          b.ᐃⲆⲆᐃⵠ = Math.max(b.ᐃⲆⲆᐃⵠ, ff.Ⲇⵠᐃⵠᐃ(g, c, d));
        } else if (ff.ᐃⵠⲆⵠ[g].ᐃΔΔ === ff.ⲆⲆⵠΔᐃᐃⲆ) {
          b.ⵠⵠᐃΔΔ = Math.max(b.ⵠⵠᐃΔΔ, ff.Ⲇⵠᐃⵠᐃ(g, c, d));
        } else if (ff.ᐃⵠⲆⵠ[g].ᐃΔΔ === ff.ⵠⲆⵠⲆⲆᐃⲆ) {
          b.ᐃⲆΔⲆⵠ = Math.max(b.ᐃⲆΔⲆⵠ, ff.Ⲇⵠᐃⵠᐃ(g, c, d));
        } else if (ff.ⲆⵠⵠⲆⲆⵠⵠ === ff.ᐃⵠⲆⵠ[g].ᐃΔΔ) {
          b.ⵠⵠΔⵠΔ = Math.max(b.ⵠⵠΔⵠΔ, ff.Ⲇⵠᐃⵠᐃ(g, c, d));
        }
      }
      if (_w.ⵠⲆⵠⵠ[e][f].iblk) {
        b.ᐃⲆⲆΔⵠᐃⵠ = jq;
      }
      if (ff.ⲆΔⵠᐃⲆⲆᐃᐃΔ(f, e)) {
        b.Δᐃⵠᐃⵠⵠᐃ = b.ⵠΔᐃΔΔ;
      } else if (_w.ⵠⲆⵠⵠ[e][f].wtb || b.ᐃⲆⲆᐃⵠ < 0 && b.ᐃⲆΔⲆⵠ < 0 && b.ⵠⵠᐃⲆⵠΔΔ < 0 && Cq > b.ᐃⲆⲆΔⵠᐃⵠ && b.ⵠⵠΔⵠΔ < 0 && b.ⵠⵠᐃΔΔ < 0) {
        b.Δᐃⵠᐃⵠⵠᐃ = 1;
      } else {
        b.Δᐃⵠᐃⵠⵠᐃ = b.ⵠΔᐃΔΔ;
      }
    };
    this.ΔᐃᐃᐃΔΔⵠⵠΔ = function (a, b) {
      ff.ᐃⲆⲆᐃⵠ = ff.ⵠΔᐃΔΔ;
      ff.ⵠⵠᐃΔΔ = ff.ⵠΔᐃΔΔ;
      ff.ᐃⲆΔⲆⵠ = ff.ⵠΔᐃΔΔ;
      ff.ⵠⵠΔⵠΔ = ff.ⵠΔᐃΔΔ;
      ff.ⵠⵠᐃⲆⵠΔΔ = ff.ⵠΔᐃΔΔ;
      for (var c = 0; ff.ᐃⵠⲆⵠ[c].ᐃΔΔ !== ff.ⵠᐃΔⲆΔ; c++) {
        if (ff.Δᐃᐃᐃⵠ === ff.ᐃⵠⲆⵠ[c].ᐃΔΔ) {
          ff.ⵠⵠᐃⲆⵠΔΔ = Math.max(ff.ⵠⵠᐃⲆⵠΔΔ, ff.Ⲇⵠᐃⵠᐃ(c, a, b));
        } else if (ff.ΔⲆᐃⵠⲆⵠⵠ === ff.ᐃⵠⲆⵠ[c].ᐃΔΔ) {
          ff.ᐃⲆⲆᐃⵠ = Math.max(ff.ᐃⲆⲆᐃⵠ, ff.Ⲇⵠᐃⵠᐃ(c, a, b));
        } else if (ff.ⲆⲆⵠΔᐃᐃⲆ === ff.ᐃⵠⲆⵠ[c].ᐃΔΔ) {
          ff.ⵠⵠᐃΔΔ = Math.max(ff.ⵠⵠᐃΔΔ, ff.Ⲇⵠᐃⵠᐃ(c, a, b));
        } else if (ff.ᐃⵠⲆⵠ[c].ᐃΔΔ === ff.ⵠⲆⵠⲆⲆᐃⲆ) {
          ff.ᐃⲆΔⲆⵠ = Math.max(ff.ᐃⲆΔⲆⵠ, ff.Ⲇⵠᐃⵠᐃ(c, a, b));
        } else if (ff.ⲆⵠⵠⲆⲆⵠⵠ === ff.ᐃⵠⲆⵠ[c].ᐃΔΔ) {
          ff.ⵠⵠΔⵠΔ = Math.max(ff.ⵠⵠΔⵠΔ, ff.Ⲇⵠᐃⵠᐃ(c, a, b));
        }
      }
      if (ff.ᐃⲆⲆᐃⵠ < 0 && qn > ff.ⵠⵠΔⵠΔ && qn > ff.ⵠⵠᐃⲆⵠΔΔ && ff.ⵠⵠΔⵠΔ < 0 && ff.ⵠⵠᐃΔΔ < 0) {
        ff.Δᐃⵠᐃⵠⵠᐃ = Ue;
      } else {
        ff.Δᐃⵠᐃⵠⵠᐃ = ff.ⵠΔᐃΔΔ;
      }
    };
    this.ΔⲆᐃᐃⵠΔⲆᐃᐃ = function (a, b, c) {
      var d = ff.ᐃⵠⲆⵠ[a];
      var e = 0;
      ΔⲆⲆᐃ = d.x1 + 30 + (d.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ ? Rl : 150);
      var f = b - ΔⲆⲆᐃ;
      if (gr < (d.ⲆᐃⲆ & uw.ⵠⲆⵠᐃᐃ) && f > 0 && f < 320) {
        e = Fh;
      }
      ⲆΔΔⵠ = d.y1 + 250 + (ne === (d.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ) ? 150 : 0);
      f = c - ⲆΔΔⵠ;
      if ((d.ⲆᐃⲆ & uw.ΔⵠⵠⲆⵠ) > 0 && f > Fj && f < 320) {
        e = 1;
      }
      ⵠⲆΔΔ = d.x2 + 80 + ((d.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ) === Nl ? -200 : 0);
      f = ⵠⲆΔΔ - b;
      if ((d.ⲆᐃⲆ & uw.ᐃⲆⵠᐃΔ) > 0 && Cn < f && f < 320) {
        e = 1;
      }
      ΔⵠⲆⲆ = d.y2 - 200 + (d.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ ? ne : -200);
      f = ΔⵠⲆⲆ - c;
      if ((d.ⲆᐃⲆ & uw.ᐃᐃⲆᐃⵠ) > 0 && Fj < f && f < 320) {
        e = 1;
      }
      if (b >= ΔⲆⲆᐃ && b <= ⵠⲆΔΔ && ⲆΔΔⵠ <= c && c <= ΔⵠⲆⲆ) {
        return e;
      } else {
        return tj;
      }
    };
    this.Ⲇⵠᐃⵠᐃ = function (a, b, c) {
      var d = ff.ᐃⵠⲆⵠ[a];
      ΔⲆⲆᐃ = d.x1 + 30;
      ⲆΔΔⵠ = d.y1 + 250;
      ⵠⲆΔΔ = d.x2 + 80;
      ΔⵠⲆⲆ = d.y2 - 200;
      if (b >= ΔⲆⲆᐃ && b <= ⵠⲆΔΔ && ⲆΔΔⵠ <= c && ΔⵠⲆⲆ >= c) {
        return Math.min(b - ΔⲆⲆᐃ, ⵠⲆΔΔ - b, c - ⲆΔΔⵠ, ΔⵠⲆⲆ - c);
      }
      var e = -1000000;
      if (b - ΔⲆⲆᐃ < Gr) {
        e = Math.max(e, b - ΔⲆⲆᐃ);
      } else if (vq > ⵠⲆΔΔ - b) {
        e = Math.max(e, ⵠⲆΔΔ - b);
      }
      ᐃᐃᐃⵠΔⲆⵠ = -1000000;
      if (c < ⲆΔΔⵠ || c > ΔⵠⲆⲆ) {
        if (c - ⲆΔΔⵠ < 0) {
          ᐃᐃᐃⵠΔⲆⵠ = Math.max(ᐃᐃᐃⵠΔⲆⵠ, c - ⲆΔΔⵠ);
        } else {
          ᐃᐃᐃⵠΔⲆⵠ = Math.max(ᐃᐃᐃⵠΔⲆⵠ, ΔⵠⲆⲆ - c);
        }
        e = e !== -1000000 && ᐃᐃᐃⵠΔⲆⵠ !== -1000000 ? Math.min(e, ᐃᐃᐃⵠΔⲆⵠ) : ᐃᐃᐃⵠΔⲆⵠ;
      }
      return e;
    };
    this.ⵠᐃΔΔⵠᐃⵠ = function (b, c, d) {
      var e = d;
      var f = c;
      z(e, f, "isl", b, Zq);
      for (var g = 0; g < 4; g++) {
        for (var h = ms; h < mt; h++) {
          z(e - h, f - g, "iblk", 0);
          z(e + h, f - g, "iblk", 0);
          z(e + h, f + g, "iblk", 0);
          z(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = Fj; g < 2; g++) {
          z(e - g, f - 4, "iblk", 0);
          z(e + g, f - 4, "iblk", Cq);
          z(e - g, f + uj, "iblk", 0);
          z(e + g, f + ch, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          z(e - $b, f + g, "iblk", tj);
          z(e + yh, f + g, "iblk", 0);
          z(e - 3, f - g, "iblk", 0);
          z(e + Gl, f - g, "iblk", gr);
        }
        z(e - wr, f - 4, "iblk", vq);
        z(e - 3, f - 3, "iblk", vq);
        z(e + Cl, f + 4, "iblk", ne);
        z(e + Wb, f + Wb, "iblk", Ih);
      } else if (b === 1) {
        for (g = ur; g < Qk; g++) {
          z(e - g, f - ug, "iblk", 0);
          z(e + g, f - hn, "iblk", ur);
          z(e - g, f + 4, "iblk", Fj);
          z(e + g, f + 4, "iblk", ur);
        }
        for (g = gr; g < 4; g++) {
          z(e - 3, f + g, "iblk", Ih);
          z(e + 3, f + g, "iblk", 0);
          z(e - og, f - g, "iblk", Fj);
          z(e + 3, f - g, "iblk", ne);
        }
      } else if (Xh === b) {
        for (g = ur; g < 2; g++) {
          z(e - g, f - _l, "iblk", Nl);
          z(e + g, f - 4, "iblk", qk);
          z(e - g, f + 4, "iblk", ne);
          z(e + g, f + gl, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          z(e - Kj, f + g, "iblk", Qs);
          z(e + Qt, f + g, "iblk", Ih);
          z(e - 3, f - g, "iblk", Fj);
          z(e + Qt, f - g, "iblk", _a);
        }
      }
    };
    this.ⵠᐃΔⵠⲆⵠΔΔⲆ = function (b) {
      for (var c = qn; ff.ᐃⵠⲆⵠ.length > c && Cq < b; c++) {
        var d = ff.ᐃⵠⲆⵠ[c];
        if (ff.ⵠᐃΔⲆΔ === d.ᐃΔΔ && d.w > 1800 && d.ⵠΔⵠ > 1000) {
          var f = Math.floor((d.x1 + d.w / Cl) / fs);
          var g = Math.floor((d.y1 + d.ⵠΔⵠ / 2) / 100);
          ff.ⵠᐃΔΔⵠᐃⵠ(b % yh, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * Yi);
            var k = f - 3 + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * Jj);
            if (Bl === _w.ⵠⲆⵠⵠ[j][k].s) {
              z(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * ea);
            k = f - 3 + Math.floor(Kl * ff.ᐃⵠⲆⲆΔ.get());
            if (_w.ⵠⲆⵠⵠ[j][k].plm === undefined) {
              z(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(Ch * ff.ᐃⵠⲆⲆΔ.get());
          k = f - X + Math.floor(ff.ᐃⵠⲆⲆΔ.get() * 6);
          if (_w.ⵠⲆⵠⵠ[j][k].plm === undefined && _w.ⵠⲆⵠⵠ[j][k].s === undefined) {
            z(j, k, "p", 0, _b);
          }
          b--;
        }
      }
    };
    this.ᐃⲆⵠⵠⲆΔᐃᐃᐃ = function (b) {
      ff.ᐃⵠⲆⲆΔ.ΔᐃΔⲆⵠ(b);
      var g = 0;
      while (Ht) {
        if (++g > 10000) {
          return;
        }
        ff.ᐃⵠⲆⵠ = [];
        if (gr === ff.ΔΔⵠΔⵠ && (uw.ΔⵠⵠⲆᐃ === ff.mode || uw.ΔΔⲆΔⵠ === ff.mode || ff.mode === uw.ⵠΔⵠⵠⲆ)) {
          ff.ΔΔⵠΔⵠ = Sr;
        }
        if (ff.mode === uw.ΔΔⵠⲆΔ) {
          ff.ᐃⵠⲆⵠ.push(new ff.ᐃᐃⲆΔⲆⲆᐃ(ff.Δᐃᐃᐃⵠ, 2, Zn, 80, 80, 15));
        } else if (ff.mode === uw.ΔᐃⵠΔᐃ) {
          ff.ᐃⵠⲆⵠ.push(new ff.ᐃᐃⲆΔⲆⲆᐃ(ff.Δᐃᐃᐃⵠ, 2, 2, 150, 150, 15));
        } else if (gr !== ff.ΔΔⵠΔⵠ && ff.ΔΔⵠΔⵠ.length > rl && ff.ΔΔⵠΔⵠ[ms].length > co) {
          for (var k = 0; ff.ΔΔⵠΔⵠ.length > k; k++) {
            if ((G = ff.ΔΔⵠΔⵠ[k])[qn] !== tj) {
              break;
            }
            var m = uw.Δᐃᐃᐃⵠ;
            switch (G[1]) {
              case "FOREST":
                m = ff.Δᐃᐃᐃⵠ;
                break;
              case "WINTER":
                m = ff.ΔⲆᐃⵠⲆⵠⵠ;
                break;
              case "DESERT":
                m = ff.ⲆⲆⵠΔᐃᐃⲆ;
                break;
              case "LAVA":
                m = ff.ⵠⲆⵠⲆⲆᐃⲆ;
                break;
              case "DRAGON":
                m = ff.ⲆⵠⵠⲆⲆⵠⵠ;
            }
            ff.ᐃⵠⲆⵠ.push(new ff.ᐃᐃⲆΔⲆⲆᐃ(m, G[Pt], G[3], G[Rb], G[5], G[6], G[It]));
          }
        } else if (ff.ΔΔⵠΔⵠ !== 0) {
          for (k = rl; k < ff.ΔΔⵠΔⵠ.length; k++) {
            var p = ff.ΔΔⵠΔⵠ[k];
            m = uw.Δᐃᐃᐃⵠ;
            switch (p[Fj]) {
              case "FOREST":
                m = ff.Δᐃᐃᐃⵠ;
                break;
              case "WINTER":
                m = ff.ΔⲆᐃⵠⲆⵠⵠ;
                break;
              case "DESERT":
                m = ff.ⲆⲆⵠΔᐃᐃⲆ;
                break;
              case "LAVA":
                m = ff.ⵠⲆⵠⲆⲆᐃⲆ;
                break;
              case "DRAGON":
                m = ff.ⲆⵠⵠⲆⲆⵠⵠ;
            }
            if (e(m, p[Gs], p[ld], ur, (k + 1) * 10) === qn) {
              break;
            }
          }
          if (k !== ff.ΔΔⵠΔⵠ.length) {
            continue;
          }
        }
        break;
      }
      ⵠⲆᐃΔΔΔⲆΔⵠ();
      var q = [];
      for (var v = 0; v < ff.ᐃⵠⵠⵠⵠ; v++) {
        q[v] = new Array(ff.ΔΔⲆⲆⲆ);
        for (var x = 0; x < ff.ΔΔⲆⲆⲆ; x++) {
          q[v][x] = 0;
        }
      }
      for (v = 0; ff.ᐃⵠⲆⵠ.length > v; v++) {
        for (var A = (p = ff.ᐃⵠⲆⵠ[v]).x2 / Wl, B = p.y2 / 100, D = p.x1 / rj; D <= A; D++) {
          for (var E = p.y1 / 100; B >= E; E++) {
            q[E][D] = Fh;
          }
        }
      }
      for (E = 0; ff.ᐃⵠⵠⵠⵠ > E; E++) {
        for (D = vq; D < ff.ΔΔⲆⲆⲆ; D++) {
          if (q[E][D] === 0) {
            i(q, D, E);
          }
        }
      }
      _w = {
        w: ff.ΔΔⲆⲆⲆ,
        ⵠΔⵠ: ff.ᐃⵠⵠⵠⵠ,
        ⵠⲆⵠⵠ: []
      };
      for (v = Fj; ff.ᐃⵠⵠⵠⵠ > v; v++) {
        _w.ⵠⲆⵠⵠ[v] = [];
      }
      if (ff.ΔΔⵠΔⵠ !== 0 && Nl < ff.ΔΔⵠΔⵠ.length && ff.ΔΔⵠΔⵠ[0].length > xs) {
        for (k = tj; k < ff.ΔΔⵠΔⵠ.length; k++) {
          if ((G = ff.ΔΔⵠΔⵠ[k])[1] === "isl") {
            ff.ⵠᐃΔΔⵠᐃⵠ(G[2], G[og], G[4]);
          }
        }
      } else {
        ff.ⵠᐃΔⵠⲆⵠΔΔⲆ(ff.ⵠⲆΔⵠⲆᐃⲆ);
      }
      if (gr !== ff.ΔΔⵠΔⵠ && ff.ΔΔⵠΔⵠ.length > _a && ff.ΔΔⵠΔⵠ[qn].length > 3) {
        var F = [];
        for (k = 0; ff.ΔΔⵠΔⵠ.length > k; k++) {
          var G;
          if ((G = ff.ΔΔⵠΔⵠ[k])[0] === Ag) {
            if (G[As] === "r") {
              z(G[Jh], G[Tt], "wtb", 0, As);
              F.push([G[Z], G[2], G[4]]);
            } else {
              z(G[Cg], G[Sg], G[1], G[tg], G[Ya]);
            }
          }
        }
        r(tj, F);
        F = [];
      } else {
        for (v = Gr; ff.ᐃⵠⲆⵠ.length > v; v++) {
          p = ff.ᐃⵠⲆⵠ[v];
          if (ff.mode === uw.ΔᐃⵠΔᐃ) {
            if (p.ᐃΔΔ === ff.Δᐃᐃᐃⵠ) {
              a(v, p.w / (Ms * yg));
            }
          } else {
            if (p.ᐃΔΔ === ff.Δᐃᐃᐃⵠ) {
              c(v, p.w / (vh * 100));
            }
            if (p.ᐃΔΔ === ff.ⵠⲆⵠⲆⲆᐃⲆ) {
              s(v, p.w / (No * 100));
            }
            if (p.ᐃΔΔ === ff.ΔⲆᐃⵠⲆⵠⵠ) {
              d(v, p.w / 10000);
            }
            if (p.ᐃΔΔ === ff.ⲆⲆⵠΔᐃᐃⲆ) {
              l(v, p.w / (Nh * yg));
            }
            if (ff.ⲆⵠⵠⲆⲆⵠⵠ === p.ᐃΔΔ) {
              t(v);
            }
          }
        }
      }
      Ot("isl", Ok);
      Ot("wtb", 20);
      Ot("la", Eo);
      Ot("c", 1);
      Ot("s", j);
      Ot("f", Ag);
      Ot("p", 1);
      Ot("g", 1);
      Ot("d", 1);
      Ot("a", 1);
      Ot("re", 1);
      Ot("m", Gs);
      Nt = [];
      ff.ΔΔᐃᐃⵠᐃⵠⵠⵠ(_w);
    };
    this.ΔΔⵠⲆ = z;
    this.ΔΔᐃᐃⵠᐃⵠⵠⵠ = function (b) {
      for (var c = 0; this.ᐃⵠⵠⵠⵠ > c; c++) {
        for (var d = 0; this.ΔΔⲆⲆⲆ > d; d++) {
          if (!b.ⵠⲆⵠⵠ[c]) {
            b.ⵠⲆⵠⵠ[c] = [];
          }
          if (b.ⵠⲆⵠⵠ[c][d]) {
            var e = b.ⵠⲆⵠⵠ[c][d];
            if (e.de && Tg < e.de.length) {
              for (var f = 0; f < e.de.length; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(ol * Math.random() + 1);
                    e.de.ΔⲆⵠ = [];
                    for (var h = gr; g > h; h++) {
                      e.de.ΔⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ᐃᐃⵠΔ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (m <= f && f <= 26) {
                    e.de.scale = yh;
                    g = Math.floor(Math.random() * Jh + j);
                    e.de.ΔⲆⵠ = [];
                    for (h = 0; h < g; h++) {
                      e.de.ΔⲆⵠ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ᐃᐃⵠΔ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= Io || f >= 27 && f <= 40) {
                    e.de.angle = Tg;
                    e.de.scale = re;
                    e.de.ᐃᐃⵠΔ = f;
                  } else {
                    e.de.angle = Math.PI * Math.random() * sh;
                    e.de.scale = 1;
                    e.de.ᐃᐃⵠΔ = f;
                  }
                }
              }
            }
            p(e, "p", new ᐃⵠΔⵠ.ΔⲆΔᐃ(hr, Ue, Ej, 0, 10, 10));
            p(e, "t", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ag, ie, 0, 10, Va));
            p(e, "s", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, 0, 10, 10));
            p(e, "g", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, _b, _a, 10, no));
            p(e, "d", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ue, 1, tj, pj, Qa));
            p(e, "b", new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sk, Eo, zs, 0, Va, Va));
            p(e, "f", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, _b, 1, 0, 10, Uh));
            p(e, "sw", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, 0, ws, Uh));
            p(e, "gw", new ᐃⵠΔⵠ.ΔⲆΔᐃ(yj, As, $l, gr, 10, 10));
            p(e, "dw", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Fh, Ok, ne, 10, 10));
            p(e, "a", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Fh, 1, Nl, 10, 10));
            p(e, "cs", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, 0, Ye, 10));
            p(e, "plm", new ᐃⵠΔⵠ.ΔⲆΔᐃ(vl, 1, jq, 0, 10, 10));
            p(e, "re", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ag, 1, 0, 10, El));
            p(e, "c", new ᐃⵠΔⵠ.ΔⲆΔᐃ(yj, ie, ie, 0, 10, 10));
            p(e, "m", new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Eo, 1, Tg, ws, 10));
          } else {
            b.ⵠⲆⵠⵠ[c][d] = [];
          }
        }
      }
    };
    this.time = Ur.ᐃΔⵠ;
    this.Δⵠⵠⵠⵠ = {
      now: 0,
      ᐃᐃⵠᐃⲆ: 0,
      translate: {
        x: gr,
        y: 0
      },
      ΔᐃΔⲆⵠ: ur
    };
    this.ᐃⵠⵠⲆΔⵠⲆᐃᐃ = function () {
      this.ⵠΔΔⲆ = [];
      this.ᐃᐃᐃ[xw.ΔΔⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆᐃΔⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔⵠΔⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔΔⲆⵠᐃ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆⲆⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ΔⵠⲆᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔᐃᐃΔ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆᐃⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔΔᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃⲆΔⵠ] = [];
      this.ᐃᐃᐃ[xw.ΔΔᐃⵠΔ] = [];
      this.ᐃᐃᐃ[xw.ⲆΔⵠⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ΔⲆⵠⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔΔᐃⲆΔ] = [];
      this.ᐃᐃᐃ[xw.ΔⵠⲆⲆⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔⲆⵠⲆΔ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔΔΔⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆⵠᐃᐃΔ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔᐃᐃΔ] = [];
      this.ᐃᐃᐃ[xw.ⲆᐃᐃΔᐃ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔⵠⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆᐃⵠΔ] = [];
      this.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆⲆⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠⵠⲆᐃΔ] = [];
      this.ᐃᐃᐃ[xw.ΔⲆⵠᐃⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆᐃⵠⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔΔᐃⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃᐃᐃⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.Ⲇᐃᐃⵠᐃ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔⵠⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃᐃⲆΔ] = [];
      this.ᐃᐃᐃ[xw.ⲆΔⲆⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔⵠⲆΔ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃᐃⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆΔᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃᐃⲆⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠⵠΔⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃΔΔⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔᐃⲆⵠⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔⵠⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔΔᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔᐃᐃⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ᐃⵠᐃⵠⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆⲆⲆΔⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠⵠⵠⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔⵠⵠᐃ] = [];
      this.ᐃᐃᐃ[xw.ⲆᐃⵠⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ] = [];
      this.ᐃᐃᐃ[xw.ΔⵠᐃⵠΔ] = [];
      this.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ΔⲆᐃᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ] = [];
      this.ᐃᐃᐃ[xw.ⲆⲆᐃᐃΔ] = [];
      this.ᐃᐃᐃ[xw.ⲆΔΔΔⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆⲆΔⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔΔᐃᐃ] = [];
      this.ᐃᐃᐃ[xw.ⵠⲆⲆⲆΔ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔᐃⵠᐃ] = [];
      this.ᐃᐃᐃ[xw.ΔⲆⲆⲆⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔΔΔᐃⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔᐃᐃⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔⲆᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⲆⵠΔΔⲆ] = [];
      this.ᐃᐃᐃ[xw.ⲆⲆᐃⵠⵠ] = [];
      this.ᐃᐃᐃ[xw.ΔᐃᐃᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⵠⵠΔⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ⲆΔⵠⵠᐃ] = [];
      this.ᐃᐃᐃ[xw.ⵠⲆᐃΔⵠ] = [];
      this.ᐃᐃᐃ[xw.Ⲇᐃⵠᐃⵠ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆᐃⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ᐃⲆⲆΔⲆ] = [];
      this.ᐃᐃᐃ[xw.ⲆΔⲆᐃΔ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔᐃᐃᐃⲆᐃ] = [];
      this.ᐃᐃᐃ[xw.ⵠⵠᐃⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ΔⵠⵠⲆⲆ] = [];
      this.ᐃᐃᐃ[xw.ᐃᐃⲆΔⲆ] = [];
      this.ᐃᐃᐃ[xw.ᐃΔᐃⲆΔ] = [];
      this.ᐃᐃᐃ[xw.ⵠΔⲆⲆⲆⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠⲆΔΔᐃⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆΔᐃΔΔΔΔ] = [];
      this.ᐃᐃᐃ[xw.ΔᐃᐃⵠᐃᐃⲆ] = [];
      this.ᐃᐃᐃ[xw.ⲆᐃᐃΔⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆⲆΔⵠΔⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⲆⵠⵠⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ] = [];
      this.ᐃᐃᐃ[xw.Δᐃᐃᐃᐃ] = [];
      this.ᐃᐃᐃ[xw.ⵠᐃᐃⵠⲆ] = [];
      this.ᐃᐃᐃ[xw.ⲆⲆⵠⲆⵠ] = [];
      this.ᐃᐃᐃ[xw.ⵠⵠᐃⵠᐃ] = [];
    };
    this.ᐃⲆΔΔⵠⵠⲆⲆΔ = function (a) {
      if (this.ⵠΔΔⲆ[a]) {
        ⲆᐃΔΔ = this.ⵠΔΔⲆ[a].type;
        this.ⵠΔΔⲆ[a] = null;
        for (var b = this.ᐃᐃᐃ[ⲆᐃΔΔ], c = 0; b.length > c; c++) {
          if (a == b[c].ⵠᐃΔΔ) {
            b.splice(c, Zq);
            return;
          }
        }
      }
    };
    this.ΔⵠⵠⲆⵠᐃⲆⲆᐃ = function (a, b) {
      for (var c = 0; this.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ].length > c; c++) {
        var d = this.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ][c];
        if (b === Math.floor(d.x / vh) && Math.floor(d.y / Wl) === a) {
          return 1;
        }
      }
      return Fj;
    };
    this.ⲆΔⵠᐃⲆⲆᐃᐃΔ = function (a, b) {
      for (var c = Ih; this.ᐃᐃᐃ[xw.ⲆΔⵠⲆᐃ].length > c; c++) {
        var d = this.ᐃᐃᐃ[xw.ⲆΔⵠⲆᐃ][c];
        if (Math.floor(d.x / Kq) == a && Math.floor(d.y / 100) == b) {
          return Xj;
        }
      }
      return kl;
    };
    this.ΔᐃⲆᐃⲆ = function (j) {
      for (var e = 0; e < j.length; e++) {
        ⲆΔⵠⵠ = j[e];
        if (ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ != ⲆΔⵠⵠ.angle) {
          var q = Math.PI * qd;
          ⲆΔⵠⵠ.angle = (ⲆΔⵠⵠ.angle + q) % q;
          ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ = (ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ + q) % q;
          if (ⲆΔⵠⵠ.angle != ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ) {
            var B = ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ - ⲆΔⵠⵠ.angle;
            var D = Math.abs(B);
            if (D > Math.PI) {
              D = Math.PI * 2 - D;
            }
            var E = xf * (uw.ⲆᐃᐃⲆᐃΔΔ * (D / Math.PI * 3));
            if (Math.PI < B) {
              ⲆΔⵠⵠ.angle -= E;
            } else if (-Math.PI > B) {
              ⲆΔⵠⵠ.angle += E;
            } else if (B < qk) {
              ⲆΔⵠⵠ.angle -= E;
            } else {
              ⲆΔⵠⵠ.angle += E;
            }
            ⲆΔⵠⵠ.angle = (ⲆΔⵠⵠ.angle + q) % q;
            if (E > Math.abs(ⲆΔⵠⵠ.angle - ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ)) {
              ⲆΔⵠⵠ.angle = ⲆΔⵠⵠ.ⲆΔⲆΔΔᐃΔ;
            }
          }
        }
        Math.floor(ⲆΔⵠⵠ.r.y / F);
        Math.floor(ⲆΔⵠⵠ.r.x / 100);
        if (ⲆΔⵠⵠ.r.x != ⲆΔⵠⵠ.x || ⲆΔⵠⵠ.y != ⲆΔⵠⵠ.r.y) {
          if (ⲆΔⵠⵠ.action & qw.IDLE) {
            ⲆΔⵠⵠ.action -= qw.IDLE;
          }
          ⲆΔⵠⵠ.action |= qw.ᐃᐃΔⵠᐃⵠΔ;
          var G = ᐃⵠΔⵠ.ΔⵠΔⲆᐃᐃⲆ(ⲆΔⵠⵠ, ⲆΔⵠⵠ.r) + Math.PI;
          var H = ⲆΔⵠⵠ.ⲆᐃⲆⲆⲆ * xf;
          var I = ᐃⵠΔⵠ.ⵠⲆⲆΔΔᐃⵠ(H, G);
          if (ᐃⵠΔⵠ.ⲆⵠⲆᐃⵠΔⲆ(ᐃⵠΔⵠ.ⵠⲆᐃᐃⲆⲆᐃ(ⲆΔⵠⵠ, ⲆΔⵠⵠ.r)) > ᐃⵠΔⵠ.ⲆⵠⲆᐃⵠΔⲆ(I)) {
            ᐃⵠΔⵠ.ΔⲆΔⲆΔᐃᐃ(ⲆΔⵠⵠ, I);
          } else {
            if (ⲆΔⵠⵠ.action & qw.ᐃᐃΔⵠᐃⵠΔ) {
              ⲆΔⵠⵠ.action -= qw.ᐃᐃΔⵠᐃⵠΔ;
            }
            ⲆΔⵠⵠ.action |= qw.IDLE;
            ᐃⵠΔⵠ.ᐃΔⵠⲆⲆⲆⵠ(ⲆΔⵠⵠ.r, ⲆΔⵠⵠ);
          }
        }
        if (ⲆΔⵠⵠ.ᐃⲆΔΔᐃ) {
          var J = ⲆΔⵠⵠ.bubbles;
          if ((N = J.length) === qk || Ur.ⵠⵠᐃᐃᐃⲆᐃ > N && J[N - Fh].ᐃΔⵠⵠⵠ < 0.95) {
            J.push({
              id: Math.floor(Math.random() * ΔΔ[Ur.ⵠᐃⲆΔᐃᐃΔ][0].length),
              x: Math.floor(ⲆΔⵠⵠ.x + Math.random() * 80 - 40),
              y: Math.floor(ⲆΔⵠⵠ.y + Math.random() * 80 - 40),
              ᐃΔⵠⵠⵠ: 1
            });
          }
          for (var K = Gr; N > K; K++) {
            J[K].ᐃΔⵠⵠⵠ = Math.max(0, J[K].ᐃΔⵠⵠⵠ - xf);
          }
          for (K = 0; K < N; K++) {
            if (tj === J[K].ᐃΔⵠⵠⵠ) {
              J.splice(K, ag);
              break;
            }
          }
        }
        var L = ur;
        if (ⲆΔⵠⵠ.ⲆⲆⵠᐃ && pf.ⲆⵠⲆⲆⵠ) {
          var M = ⲆΔⵠⵠ.ⲆΔΔΔΔ;
          var N = M.length;
          if (ⲆΔⵠⵠ.Δᐃⵠᐃⵠⵠᐃ > uh && ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ !== bs.ᐃΔᐃᐃⵠ && ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ !== bs.ᐃΔⲆᐃⲆ && ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ !== bs.ⵠᐃⵠⵠΔ && bs.ⲆⵠΔΔⲆ !== ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ && bs.ΔΔⲆⲆⵠ !== ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ && !ⲆΔⵠⵠ.ᐃⲆΔΔᐃ && (L = As, N === uh || Ur.ⲆᐃⲆΔⵠⵠᐃ < ᐃⵠΔⵠ.ⲆⵠⲆᐃ(M[N - 1], ⲆΔⵠⵠ))) {
            var O = -ⲆΔⵠⵠ.angle;
            var Q = Math.cos(O) * 45 * rq;
            var R = rq * (Math.sin(O) * 45);
            M.push({
              x: ⲆΔⵠⵠ.x + Q,
              y: ⲆΔⵠⵠ.y + R,
              r: 8,
              alpha: 0.8
            });
            M.push({
              x: ⲆΔⵠⵠ.x - Q,
              y: ⲆΔⵠⵠ.y - R,
              r: ph,
              alpha: 0.8
            });
            M.push({
              x: ⲆΔⵠⵠ.x,
              y: ⲆΔⵠⵠ.y,
              r: 24,
              alpha: 1
            });
          }
          for (K = 0; K < N; K++) {
            M[K].alpha = Math.max(Qs, M[K].alpha - xf / 2.2);
            M[K].r += Hl * xf;
          }
          if (M.length > Cq && vq === M[rl].alpha) {
            M.splice(0, aa);
          }
          var S = ⲆΔⵠⵠ.ⲆⵠΔⲆᐃ;
          N = S.length;
          var U = -ie;
          var V = Math.max(Cq, Math.sign(ⲆΔⵠⵠ.ᐃⲆⲆΔⵠᐃⵠ));
          var W = Math.max(0, Math.sign(ⲆΔⵠⵠ.ᐃⲆⲆᐃⵠ));
          Math.max(0, Math.sign(ⲆΔⵠⵠ.ⵠⵠᐃΔΔ));
          var X = Math.max(0, Math.sign(ⲆΔⵠⵠ.ᐃⲆΔⲆⵠ));
          var Y = Math.max(Gr, Math.sign(ⲆΔⵠⵠ.ⵠⵠΔⵠΔ));
          if (ⲆΔⵠⵠ.ᐃⲆⲆΔⵠᐃⵠ > 0 || ⲆΔⵠⵠ.ⵠⵠᐃΔΔ > 0) {
            U = Ur.ΔⵠⲆⲆⵠᐃⲆ;
          } else if (ⲆΔⵠⵠ.ⵠⵠΔⵠΔ > Cn) {
            U = Ur.ΔⵠⵠⲆⲆΔᐃ;
          } else if (ⲆΔⵠⵠ.ᐃⲆⲆᐃⵠ > 0) {
            U = Ur.ⵠⲆΔⵠⲆᐃⵠ;
          } else if (ⲆΔⵠⵠ.ᐃⲆΔⲆⵠ > Cq) {
            U = Ur.ᐃⵠΔⵠΔᐃΔ;
          }
          if (ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ === bs.ᐃⵠᐃⲆⲆ && (V | W | X | Y) === Ue) {
            U = Ur.ⵠⲆⲆᐃΔΔΔ;
            var Z = ⲆΔⵠⵠ.ᐃΔⲆΔΔ - Math.PI / qd;
            var _ = Hh;
            var ba = 11;
            var ca = Ur.ΔΔⵠⲆⵠᐃΔ;
          } else if (bs.ΔⲆⲆⲆⲆ === ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ && ag === (V | W | X | Y)) {
            U = Ur.ⵠⲆᐃⵠⲆⲆΔ;
            Z = ⲆΔⵠⵠ.ᐃΔⲆΔΔ - Math.PI / 2;
            _ = 21;
            ba = rs;
            ca = Ur.ΔΔⵠⲆⵠᐃΔ;
          } else if (bs.ΔΔΔᐃⵠ === ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ && (V | W | X | Y) === zs) {
            U = Ur.ΔᐃⲆⵠⲆⵠᐃ;
            Z = ⲆΔⵠⵠ.ᐃΔⲆΔΔ - Math.PI / 2;
            var da = Math.random() * 50;
            _ = Yt + da;
            ba = 0 + da;
            ca = Ur.ΔΔⵠⲆⵠᐃΔ * 0.9;
          } else {
            Z = ⲆΔⵠⵠ.angle;
            _ = nq;
            ba = 11;
            ca = Ur.ΔΔⵠⲆⵠᐃΔ;
          }
          if (ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ === bs.ᐃΔᐃᐃⵠ || bs.ᐃΔⲆᐃⲆ === ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ || ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ === bs.ΔΔⲆⲆⵠ || ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ === bs.ⲆⵠΔΔⲆ || bs.ⵠᐃⵠⵠΔ === ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ || ⲆΔⵠⵠ.ᐃⲆΔΔᐃ); else if (bs.ⵠⲆⵠⵠⵠ === ⲆΔⵠⵠ.ⲆᐃⲆⲆᐃ) {
            if (N === 0 || ᐃⵠΔⵠ.ⲆⵠⲆᐃ(S[N - Al], ⲆΔⵠⵠ) > Ur.ΔΔΔΔᐃΔΔ) {
              S.push({
                x: ⲆΔⵠⵠ.x,
                y: ⲆΔⵠⵠ.y,
                angle: ⲆΔⵠⵠ.ᐃΔⲆΔΔ,
                alpha: 1,
                id: Ur.ᐃⵠΔⵠⵠⵠⲆ
              });
            }
          } else if (-As != U && vq === L && (N === 0 || ca < ᐃⵠΔⵠ.ⲆⵠⲆᐃ(S[N - Ok], ⲆΔⵠⵠ))) {
            ⲆΔⵠⵠ.ⵠΔⲆᐃΔⵠᐃ++;
            if (Math.abs(ⲆΔⵠⵠ.x - ⲆΔⵠⵠ.r.x) > ag && Math.abs(ⲆΔⵠⵠ.y - ⲆΔⵠⵠ.r.y) > 1) {
              if (ⲆΔⵠⵠ.r.x > ⲆΔⵠⵠ.x && ⲆΔⵠⵠ.y > ⲆΔⵠⵠ.r.y || ⲆΔⵠⵠ.r.x < ⲆΔⵠⵠ.x && ⲆΔⵠⵠ.y < ⲆΔⵠⵠ.r.y) {
                if (ⲆΔⵠⵠ.ⵠΔⲆᐃΔⵠᐃ % vk) {
                  Q = rq * -ba;
                  R = rq * -ba;
                } else {
                  R = ba * rq;
                  Q = ba * rq;
                }
              } else if (ⲆΔⵠⵠ.ⵠΔⲆᐃΔⵠᐃ % ql) {
                Q = rq * ba;
                R = rq * -ba;
              } else {
                R = rq * ba;
                Q = rq * -ba;
              }
            } else if (ⲆΔⵠⵠ.ⵠΔⲆᐃΔⵠᐃ % 2) {
              Q = Math.cos(Z) * _ * rq;
              R = Math.sin(Z) * _ * rq;
            } else {
              Q = -Math.cos(Z) * _ * rq;
              R = rq * (_ * -Math.sin(Z));
            }
            S.push({
              x: ⲆΔⵠⵠ.x + Q,
              y: ⲆΔⵠⵠ.y + R,
              angle: Z + Math.PI / ld,
              alpha: 1,
              id: U
            });
          }
          for (K = 0; K < N; K++) {
            if (Ur.ᐃⵠΔⵠⵠⵠⲆ === S[K].id) {
              S[K].alpha = Math.max(rl, S[K].alpha - xf * 1.5);
            } else {
              S[K].alpha = Math.max(Qs, S[K].alpha - xf / 2.85);
            }
          }
          if (S.length > 0 && qn === S[uh].alpha) {
            S.splice(Fj, 1);
          }
        }
      }
    };
    this.ᐃⲆΔ = function () {
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ΔΔⲆⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⲆⲆΔⲆⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃΔΔᐃᐃ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⵠⲆⲆⲆΔ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⵠΔᐃⵠᐃ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ΔⲆⲆⲆⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ΔΔΔᐃⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃΔᐃᐃⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃΔⲆᐃⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⲆⵠΔΔⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⵠᐃᐃⵠⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⵠⵠΔⲆᐃ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⲆΔⵠⵠᐃ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⵠⲆᐃΔⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.Ⲇᐃⵠᐃⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃⲆᐃⲆᐃ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃⲆⲆΔⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⲆΔⲆᐃΔ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃΔᐃᐃᐃⲆᐃ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⵠⵠᐃⵠⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ᐃᐃⲆΔⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ⲆⲆᐃⵠⵠ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ΔᐃᐃᐃⲆ]);
      this.ΔᐃⲆᐃⲆ(this.ᐃᐃᐃ[xw.ΔⵠⵠⲆⲆ]);
    };
    this.ⵠᐃᐃᐃ = [];
    this.ⵠᐃᐃᐃ[Ur.ⲆΔᐃΔⵠ] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(na, Gs, 1.05, zs, 0.008, 0.008);
    this.ⵠᐃᐃᐃ[Ur.ⵠⲆⲆⵠⲆ] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(_i, Al, 1.08, 1, 0.006, 0.006);
    this.ⵠᐃᐃᐃ[Ur.ⵠΔΔᐃⵠ] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Y, 1, 1.02, ag, 0.008, 0.008);
    this.ⵠᐃᐃᐃ[Ur.ⵠΔⲆⲆⲆ] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(xg, Al, 1.08, aa, 0.006, 0.006);
    this.ΔᐃⲆᐃᐃ = [];
    this.ΔᐃⲆᐃᐃ[gr] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ta, 0.1, 1, ne, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[Al] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(na, 0.4, aa, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[2] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sk, 0.3, 1, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[3] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[Db] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(kl, 0.3, zs, Qs, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[Ya] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(_i, 0.8, As, ur, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[Pl] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 0.5, 1, Nl, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[pa] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(hr, 0.9, Oj, Fj, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[8] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 1, ne, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[9] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Y, 0.2, Ag, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[10] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, Gs, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[11] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ta, 0.4, zs, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[12] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.8, ag, 0, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[13] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 0.2, jq, vq, 0.6, 0.6);
    this.ΔᐃⲆᐃᐃ[ib] = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function Bw(a, b, c, d) {
    this.id = a;
    this.ⲆᐃⲆⲆⲆ = vt * (a + 5);
    this.ᐃΔⵠⵠⵠ = ro / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.Ⲇⵠⵠᐃ = Math.cos(d);
    this.alpha = Fj;
  }
  function Cw(b, c, e, f, i, j, k, a, m, h) {
    this.type = b;
    this.ΔΔΔⵠ = c;
    this.id = e;
    this.x = f;
    this.y = i;
    this.angle = j;
    this.ⲆΔⲆΔΔᐃΔ = j;
    this.action = k;
    this.info = a;
    this.ᐃᐃⵠΔⵠ = h;
    this.r = {
      x: f,
      y: i
    };
    this.ⲆᐃⲆⲆⲆ = m;
    if (ff) {
      this.ⵠᐃΔΔ = ff.ΔᐃᐃΔⵠⵠᐃ * c + e;
    }
    switch (b) {
      case xw.ΔΔⲆⵠ:
        this.ᐃᐃᐃⲆ = ff.ⲆΔⲆΔ[this.ΔΔΔⵠ];
        this.ᐃᐃΔᐃ = this.ᐃᐃᐃⲆ.ᐃᐃΔᐃ;
        this.ⲆⲆⵠᐃⲆⲆΔ = this.ᐃᐃᐃⲆ.ⲆⲆⵠᐃⲆⲆΔ;
        this.ΔΔᐃᐃⵠ = this.ᐃᐃᐃⲆ.ΔΔᐃᐃⵠ;
        this.ᐃΔᐃⵠⵠ = this.ᐃᐃᐃⲆ.ᐃΔᐃⵠⵠ;
        this.ⵠⵠᐃⲆⵠΔΔ = -1000000;
        this.ᐃⲆΔⲆⵠ = -1000000;
        this.ᐃⲆⲆᐃⵠ = -1000000;
        this.ⵠⵠᐃΔΔ = -1000000;
        this.Δᐃⵠᐃⵠⵠᐃ = -1000000;
        this.ᐃⲆⲆΔⵠᐃⵠ = -1000000;
        this.ⵠⵠΔⵠΔ = -1000000;
        this.ᐃⵠⲆⵠⲆ = uw.ΔΔⵠⲆΔ === ff.mode && this.ᐃᐃΔᐃ === uw.ΔⲆⲆⵠᐃᐃᐃ ? en : xg;
        this.ᐃⲆⵠᐃⵠᐃⲆ = uw.ΔⵠⵠⲆᐃ === ff.mode && this.ᐃᐃΔᐃ === uw.ⵠⵠⲆᐃᐃⲆⵠ;
        this.ⵠⵠⲆᐃⵠᐃᐃ = !!this.ᐃⵠⲆⵠⲆ && this.ᐃᐃᐃⲆ.ⵠᐃΔⵠⲆ === "  " && ra;
        this.ⲆⵠΔⲆᐃ = [];
        this.ΔΔΔᐃΔⲆᐃ = ms;
        this.ⲆⲆⵠᐃ = Mh;
        this.ⵠΔⲆᐃΔⵠᐃ = 0;
        this.ⲆᐃᐃᐃΔⵠⲆ = rl;
        this.ⲆΔΔΔΔ = [];
        this.r = {
          x: f,
          y: i
        };
        this.ⵠΔᐃⵠ = tv;
        this.ⲆΔⲆⲆⵠΔⵠ = qv;
        this.ⵠΔⲆΔⲆ = 0;
        this.ᐃΔⲆΔΔ = ur;
        this.ⵠΔᐃⲆⵠ = Gr;
        this.ΔᐃΔᐃⵠΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rn, Fj, 0, -Math.PI / M, 0.5, 1);
        this.ⲆⵠΔⵠΔ = 0;
        this.ⲆⵠΔᐃΔΔΔ = 0;
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Fq, 0.6, 0.6, 0, 5, Sg);
        this.ᐃⲆᐃⵠⵠ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(d, 0.6, 0.6, gr, 5, 3);
        this.freeze = new ᐃⵠΔⵠ.ΔⲆΔᐃ(d, 0.6, 0.6, Rl, 5, 3);
        this.ΔⵠᐃᐃΔⲆᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, qk, 5, 3);
        this.ΔⲆΔⲆⲆΔⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Qn, qk, 2.25, -1.5, 3.75, 7.5);
        this.ΔΔⲆⲆⵠⵠΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(ra, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, ms, Rl, -Math.PI / Z, sq, 9);
        this.ᐃᐃᐃⲆⲆΔⵠΔΔ = 0;
        this.ⵠⲆᐃᐃᐃⲆⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(yj, 0.6, 0.6, ms, 1, 3);
        this.ⲆΔⲆᐃᐃᐃⵠ = this.ⵠⵠⲆᐃⵠᐃᐃ ? new ᐃⵠΔⵠ.ΔⲆΔᐃ(true, uh, 2.25, -1.5, 2.75, 5.5) : Cn;
        this.ΔⵠⲆⵠᐃᐃᐃ = Tg;
        this.ⲆᐃΔⲆⵠΔⲆ = 0;
        this.ᐃⲆΔⲆⲆⵠⲆ = [];
        this.ⲆⵠⵠⵠⲆΔᐃ = [];
        this.text = [];
        this.label = [];
        this.ΔⵠᐃⲆⲆᐃⲆ = rv;
        this.ⵠΔⲆⵠΔ = true;
        this.right = -1;
        this.ⲆᐃⲆⲆᐃ = -1;
        this.action = qw.IDLE;
        this.ⲆⵠᐃⵠⲆⲆΔ = xg;
        this.ΔΔᐃΔΔ = 0;
        this.ᐃⲆΔΔᐃ = Rn;
        this.bubbles = [];
        this.ᐃⵠΔᐃⲆ = 0;
        this.Ⲇⵠⵠᐃⵠ = -1;
        this.ᐃⲆΔ = function (a) {
          if (this.info & 32768) {
            this.ⲆⵠᐃⵠⲆⲆΔ = true;
            this.info = this.info & -32769;
          } else {
            this.ⲆⵠᐃⵠⲆⲆΔ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ᐃⵠΔᐃⲆ = ag;
          } else {
            this.ᐃⵠΔᐃⲆ = 0;
          }
          this.ΔΔᐃΔΔ = Math.floor(this.info / 128);
          this.info -= this.ΔΔᐃΔΔ * 128;
          if (this.info === bs.ᐃⵠⲆΔᐃ || this.ⵠⵠⲆᐃⵠᐃᐃ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ΔΔΔᐃΔⲆᐃ = ff.ΔⵠⵠⲆⵠᐃⲆⲆᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / vh));
          this.ⲆᐃⲆⲆᐃ = this.ᐃᐃⵠΔⵠ & 255;
          if (uw.ⵠᐃΔΔⲆⵠᐃΔΔ === this.right) {
            this.ᐃⲆΔΔᐃ = nr;
          } else {
            this.ᐃⲆΔΔᐃ = false;
          }
          if (vw[this.right]) {
            this.ΔᐃΔⵠⵠ = true;
          } else {
            this.ΔᐃΔⵠⵠ = false;
          }
          if (a & qw.ΔᐃⵠⲆΔⲆⲆ) {
            this.ⵠⲆᐃᐃᐃⲆⲆ.ⲆⵠΔ = false;
            this.ⵠⲆᐃᐃᐃⲆⲆ.ⲆᐃⲆ = 0.6;
          } else if (a & qw.ᐃⲆⵠⲆⲆ) {
            this.freeze.ⲆⵠΔ = kl;
            this.freeze.ⲆᐃⲆ = 0.6;
          } else if (a & qw.ᐃⲆⲆᐃⲆⵠᐃ) {
            this.ᐃⲆᐃⵠⵠ.ⲆⵠΔ = Ao;
            this.ᐃⲆᐃⵠⵠ.ⲆᐃⲆ = 0.6;
          }
          if (a & qw.ⵠⵠⵠⵠⲆᐃⵠ) {
            this.ΔⵠᐃᐃΔⲆᐃ.ⲆⵠΔ = Sk;
            this.ΔⵠᐃᐃΔⲆᐃ.ⲆᐃⲆ = 0.6;
          }
          if (a & qw.ⵠᐃⲆΔ) {
            this.ΔΔΔ.ⲆⵠΔ = false;
            this.ΔΔΔ.ⲆᐃⲆ = 0.6;
          }
          if (a & qw.ΔⲆⲆΔⲆᐃᐃ) {
            this.ᐃᐃᐃⲆⲆΔⵠΔΔ = sw.ⵠⲆⲆᐃΔΔⵠΔⵠ;
            if (ex.ΔⲆᐃⵠΔ && this.Ⲇⵠⵠᐃⵠ !== -1) {
              ex.ⲆΔⲆΔ[this.Ⲇⵠⵠᐃⵠ].ⵠΔⵠⲆⵠᐃΔᐃⵠ(gf[this.right]);
            }
          }
        };
        this.ᐃⲆΔ();
        break;
      case xw.ⲆⲆᐃᐃΔ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, 0, ih, xk),
          ᐃⲆΔ: En,
          angle: 0
        };
        this.ⲆᐃⵠΔᐃ = Fp;
        this.ΔⲆⵠΔⵠ = kp;
        this.ΔⲆᐃΔⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Zq, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔᐃⲆⵠΔᐃ = 0;
        this.ⵠΔΔⵠΔᐃⲆ = qk;
        this.ⵠⲆⲆᐃⲆ = tp;
        break;
      case xw.ⵠΔᐃΔᐃ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, Fj, Va, Uh),
          ᐃⲆΔ: d,
          angle: ms
        };
        this.ⲆᐃⵠΔᐃ = Qp;
        this.ΔⲆⵠΔⵠ = mv;
        this.ΔⲆᐃΔⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔᐃⲆⵠΔᐃ = Tg;
        this.ⵠΔΔⵠΔᐃⲆ = 0;
        break;
      case xw.ⵠΔⵠΔⲆ:
      case xw.ΔΔⲆⵠᐃ:
        this.ⲆᐃⵠΔᐃ = Np;
        this.ΔⲆⵠΔⵠ = jv;
        this.ᐃΔⵠΔⵠ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(na, 1, 1.03, 0.98, 0.3, 0.3);
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ta, 1, 1.23, 1.18, 0.01, 0.01);
        this.ΔⲆᐃΔⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, As, 1.23, 1.18, 0.01, 0.01);
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, 0, 10, Ye),
          ᐃⲆΔ: Rn,
          angle: 0
        };
        break;
      case xw.ⲆⵠᐃᐃΔ:
        this.ⲆᐃⵠΔᐃ = Bp;
        this.ΔⲆⵠΔⵠ = ov;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, _b, 0, Ln, 10),
          ᐃⲆΔ: false,
          angle: ms
        };
        this.ⵠᐃⵠⲆ = [];
        for (var l = 0; l < 3; l++) {
          this.ⵠᐃⵠⲆ.push({
            ⵠΔᐃⵠ: Ap,
            ⵠᐃᐃᐃ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠᐃⵠⲆ[0].x = this.x - 16.5;
        this.ⵠᐃⵠⲆ[0].y = this.y - 15.5;
        this.ⵠᐃⵠⲆ[0].angle = this.angle;
        this.ⵠᐃⵠⲆ[jq].x = this.x + 36;
        this.ⵠᐃⵠⲆ[1].y = this.y + 17;
        this.ⵠᐃⵠⲆ[1].angle = this.angle;
        this.ⵠᐃⵠⲆ[2].x = this.x - 18.5;
        this.ⵠᐃⵠⲆ[qd].y = this.y + 39;
        this.ⵠᐃⵠⲆ[2].angle = this.angle;
        break;
      case xw.ᐃⲆⲆⲆⵠ:
        this.ⲆᐃⵠΔᐃ = qp;
        this.ΔⲆⵠΔⵠ = Yp;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(En, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ue, ag, 0, Yt, ih),
          ᐃⲆΔ: Ps,
          angle: 0
        };
        this.ⵠᐃⵠⲆ = [];
        for (l = 0; l < X; l++) {
          this.ⵠᐃⵠⲆ.push({
            ⵠΔᐃⵠ: dv,
            ⵠᐃᐃᐃ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(En, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠᐃⵠⲆ[0].x = this.x - 16.5;
        this.ⵠᐃⵠⲆ[0].y = this.y - 15.5;
        this.ⵠᐃⵠⲆ[Oj].x = this.x - 5.5;
        this.ⵠᐃⵠⲆ[1].y = this.y + 7.5;
        this.ⵠᐃⵠⲆ[2].x = this.x + 18;
        this.ⵠᐃⵠⲆ[2].y = this.y - 5;
        break;
      case xw.ΔⲆⲆⲆⲆ:
        this.ⵠΔᐃⵠ = Zp;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(cg, 0.6, 0.6, 0, 5, og);
        break;
      case xw.ⵠΔᐃⵠᐃ:
        this.ⵠΔᐃⵠ = fp;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, Fj, 5, Qt);
        break;
      case xw.ΔΔΔᐃⵠ:
        this.ⵠΔᐃⵠ = _p;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠⵠⵠᐃⵠⵠ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆⵠΔᐃΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Fq, 0.6, 0.6, 0, gh, 3);
        this.ᐃⲆᐃⵠⵠ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 0.6, 0.6, uh, 5, 3);
        break;
      case xw.ⵠⲆⲆⲆΔ:
        this.ⵠΔᐃⵠ = Wp;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠⵠⵠᐃⵠⵠ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(cg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⲆⵠΔᐃΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Fq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, ne, 5, Sg);
        this.ᐃⲆᐃⵠⵠ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rn, 0.6, 0.6, 0, cd, dt);
        break;
      case xw.ᐃᐃⲆΔⲆ:
        this.ⵠΔᐃⵠ = Ip;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 0.6, 0.6, Cn, 5, Ka);
        break;
      case xw.Ⲇᐃⵠᐃⵠ:
        this.ⵠΔᐃⵠ = iv;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(ds, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, 0, sj, 3);
        break;
      case xw.ⵠⲆᐃΔⵠ:
        this.ⵠΔⲆᐃⲆ = this.info & 15;
        this.ⲆᐃᐃᐃΔⵠⲆ = this.ᐃᐃⵠΔⵠ & 1;
        this.ᐃⲆΔΔⲆⵠΔ = 0;
        this.x = this.info;
        this.y = this.ᐃᐃⵠΔⵠ;
        this.ⵠΔᐃⵠ = Ep;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(hr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case xw.ⲆⲆΔⲆⵠ:
      case xw.ᐃΔΔᐃᐃ:
      case xw.ⵠᐃᐃⵠⲆ:
      case xw.ⵠⵠΔⲆᐃ:
      case xw.ᐃⲆᐃⲆᐃ:
      case xw.ᐃⲆⲆΔⲆ:
      case xw.ⲆⲆᐃⵠⵠ:
      case xw.ΔᐃᐃᐃⲆ:
      case xw.ⲆΔⵠⵠᐃ:
        this.ⵠΔᐃⵠ = iv;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, 0, ha, mt);
        break;
      case xw.Δᐃᐃᐃᐃ:
        this.ⵠΔᐃⵠ = Rp;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(ds, Ag, Ue, ne, xk, El),
          ᐃⲆΔ: Rs,
          angle: 0
        };
        break;
      case xw.ⵠᐃⵠᐃᐃ:
        this.ΔⲆⵠΔⵠ = kv;
        this.ⵠΔᐃⵠ = Up;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ok, As, Rl, Uh, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.up = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, $l, 1.03, 0.98, 0.1, 0.1);
        this.ΔⲆⵠΔⲆ = [];
        break;
      case xw.ⲆⲆⵠⲆⵠ:
        this.angle = Math.random() * Math.PI / 2;
      case xw.ⲆⵠⵠⲆⵠ:
      case xw.ⲆⲆΔⵠΔⲆⵠ:
        this.ⵠΔᐃⵠ = Tp;
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, qn, 5, nn);
        break;
      case xw.ⲆᐃᐃΔⵠ:
        this.ⵠΔᐃⵠ = nv;
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, Cn, Jo, nn);
        break;
      case xw.ΔⵠⵠⲆⲆ:
        this.scale = Zq;
        this.ⵠΔᐃⵠ = xp;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Fq, ur, 0, -Math.PI / 6, 0.5, 1);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(yj, 0.6, 0.6, 0, 5, Z);
        break;
      case xw.ᐃΔᐃᐃᐃⲆᐃ:
        this.ⲆⲆᐃΔᐃ = 0;
        this.ⵠᐃᐃⲆ = [];
        this.ⲆΔⲆⵠⲆᐃΔ = tj;
        this.ᐃΔᐃⲆᐃⵠⲆ = wp;
        this.ⵠΔᐃⵠ = lv;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ih, 0, -Math.PI / 6, 0.5, Ag);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(xg, 0.6, 0.6, tj, xj, 3);
        break;
      case xw.ⲆΔⲆᐃΔ:
        this.x = this.info;
        this.y = this.ᐃᐃⵠΔⵠ;
        this.scale = 1;
        this.ΔⲆᐃⲆ = Fj;
        this.ⵠΔᐃⵠ = hv;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ta, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Gr, qk, -Math.PI / 6, 0.5, Ht);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Y, 0.6, 0.6, 0, Qb, Z);
        break;
      case xw.ⲆⵠΔΔⲆ:
        this.x = this.info;
        this.y = this.ᐃᐃⵠΔⵠ;
        this.scale = 1;
        this.ΔⲆᐃⲆ = 0;
        this.ⵠΔᐃⵠ = $u;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(cg, Rl, 0, -Math.PI / sq, 0.5, Gs);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(En, 0.6, 0.6, 0, wt, ol);
        break;
      case xw.ᐃΔⲆᐃⲆ:
        this.scale = Oj;
        this.ⵠΔᐃⵠ = Pp;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sh, Fj, 0, -Math.PI / 6, 0.5, Ht);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(En, 0.6, 0.6, 0, 5, 3);
        break;
      case xw.ᐃΔᐃᐃⵠ:
        this.scale = 1;
        this.ⵠΔᐃⵠ = pp;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(cg, 0, vq, -Math.PI / M, 0.5, 1);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Fq, 0.6, 0.6, rl, 5, 3);
        break;
      case xw.ⵠⵠᐃⵠⲆ:
        this.scale = ie;
        this.ⵠΔᐃⵠ = av;
        this.ⵠᐃᐃᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ᐃⵠΔⵠ.ΔⲆΔᐃ(_i, 0, ms, -Math.PI / 6, 0.5, Oj);
        this.ΔΔΔ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.6, 0.6, 0, 5, Qt);
        break;
      case xw.ⲆΔΔΔⵠ:
        this.ⵠᐃⵠⲆ = [];
        for (l = qn; l < 5; l++) {
          this.ⵠᐃⵠⲆ.push({
            ⵠΔᐃⵠ: dv,
            ⵠᐃᐃᐃ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(xg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % mt) {
          case 0:
            this.ⵠᐃⵠⲆ[0].x = this.x - 20.5;
            this.ⵠᐃⵠⲆ[Gr].y = this.y - 22.5;
            this.ⵠᐃⵠⲆ[1].x = this.x - 35.5;
            this.ⵠᐃⵠⲆ[1].y = this.y + 7.5;
            this.ⵠᐃⵠⲆ[2].x = this.x + 7.5;
            this.ⵠᐃⵠⲆ[ld].y = this.y - 30;
            this.ⵠᐃⵠⲆ[3].x = this.x + 22.5;
            this.ⵠᐃⵠⲆ[Qt].y = this.y;
            this.ⵠᐃⵠⲆ[Xb].x = this.x - 7.5;
            this.ⵠᐃⵠⲆ[ea].y = this.y + 14.5;
            break;
          case $l:
            this.ⵠᐃⵠⲆ[_a].x = this.x - 30.5;
            this.ⵠᐃⵠⲆ[0].y = this.y - 22.5;
            this.ⵠᐃⵠⲆ[1].x = this.x - 15.5;
            this.ⵠᐃⵠⲆ[1].y = this.y + 7.5;
            this.ⵠᐃⵠⲆ[2].x = this.x + 15.5;
            this.ⵠᐃⵠⲆ[vk].y = this.y - 30;
            this.ⵠᐃⵠⲆ[Ka].x = this.x + 12.5;
            this.ⵠᐃⵠⲆ[Ka].y = this.y + pr;
            this.ⵠᐃⵠⲆ[4].x = this.x - 40.5;
            this.ⵠᐃⵠⲆ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ⵠᐃⵠⲆ[Cq].x = this.x - 20.5;
            this.ⵠᐃⵠⲆ[0].y = this.y - 20.5;
            this.ⵠᐃⵠⲆ[Al].x = this.x - 35.5;
            this.ⵠᐃⵠⲆ[_b].y = this.y + 15.5;
            this.ⵠᐃⵠⲆ[Tt].x = this.x + 7.5;
            this.ⵠᐃⵠⲆ[zk].y = this.y - Bo;
            this.ⵠᐃⵠⲆ[3].x = this.x + 22.5;
            this.ⵠᐃⵠⲆ[og].y = this.y + 5;
            this.ⵠᐃⵠⲆ[4].x = this.x - 7.5;
            this.ⵠᐃⵠⲆ[4].y = this.y + 1.5;
        }
        break;
      case xw.ΔⵠⲆⲆⲆ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sh, 1, ag, rl, Ln, 10),
          ᐃⲆΔ: false,
          angle: Qs
        };
        this.ⵠΔᐃⵠ = $p;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rn, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⲆⲆᐃᐃΔᐃ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(_i, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case xw.ᐃⲆᐃⵠΔ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(hr, 1, Eo, 0, 10, 10),
          ᐃⲆΔ: na,
          angle: Cn
        };
        this.ⵠΔᐃⵠ = Dp;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Y, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case xw.ᐃΔⵠⲆᐃ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, zs, 1, _a, 10, Ye),
          ᐃⲆΔ: ds,
          angle: 0
        };
        this.ⵠΔᐃⵠ = cv;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case xw.ᐃΔᐃᐃΔ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, ms, 10, 10),
          ᐃⲆΔ: Sh,
          angle: 0
        };
        this.ⵠΔᐃⵠ = ev;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case xw.ΔⲆⵠⲆΔ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, _b, 1, 0, 10, ws),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ⵠΔᐃⵠ = gv;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case xw.ⲆᐃᐃΔᐃ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, $l, 1, 0, 10, Qa),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ⵠΔᐃⵠ = Lp;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case xw.ⵠΔΔΔⵠ:
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1, ur, ws, ih),
          ᐃⲆΔ: Rs,
          angle: 0
        };
        this.ⵠΔᐃⵠ = yp;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(ds, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case xw.ᐃⲆⲆⵠⲆ:
        this.ⵠΔᐃⵠ = Vp;
        this.rotate = 0;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(xg, Oj, 1, rl, El, ct),
          ᐃⲆΔ: na,
          angle: Cn
        };
        break;
      case xw.ⵠⵠⲆᐃΔ:
        this.ⵠΔᐃⵠ = jp;
        this.rotate = tj;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, Al, 0, ct, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case xw.ΔⲆⵠᐃⵠ:
        this.ⵠΔᐃⵠ = Hp;
        this.rotate = Qs;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ok, 1, Fj, Qa, Ye),
          ᐃⲆΔ: false,
          angle: Cn
        };
        break;
      case xw.ⲆᐃⵠⵠⲆ:
        this.ⵠΔᐃⵠ = zp;
        this.rotate = Qs;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, Gs, Tg, 10, bb),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case xw.ᐃΔΔᐃⵠ:
        this.ⵠΔᐃⵠ = Xp;
        this.rotate = tj;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ps, Ag, 1, rl, 10, 10),
          ᐃⲆΔ: false,
          angle: tj
        };
        break;
      case xw.ᐃᐃΔⲆⵠ:
        this.ⲆᐃⵠΔᐃ = Cp;
        this.ΔⲆⵠΔⵠ = Kp;
        this.rotate = 0;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sh, 1, 1, 0, Uh, El),
          ᐃⲆΔ: Sk,
          angle: 0
        };
        break;
      case xw.ΔⲆⵠⵠⲆ:
        this.ⵠΔᐃⵠ = lp;
        this.ΔⲆᐃΔ = Math.floor(this.x / 100);
        this.Δⵠ = Math.floor(this.y / 100);
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sh, 1, 1, Rl, 10, 10),
          ᐃⲆΔ: vl,
          angle: 0
        };
        this.opacity = 1;
        this.ⵠⲆⲆᐃⲆ = np;
        break;
      case xw.ⵠⵠᐃⵠᐃ:
        this.ⵠΔᐃⵠ = rp;
        this.ΔⲆᐃΔⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(kl, Zq, 1.15, 1, 0.3, 0.3);
        this.color = ne;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Ok, Oj, Qs, 10, 10),
          ᐃⲆΔ: Ps,
          angle: Fj
        };
        break;
      case xw.ΔΔᐃⲆΔ:
      case xw.ᐃⲆᐃΔⵠ:
      case xw.ΔᐃⲆⲆᐃ:
      case xw.ᐃᐃᐃⲆⵠ:
      case xw.ΔⵠᐃⵠΔ:
        this.ⵠΔᐃⵠ = ap;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, ag, qk, pj, no),
          ᐃⲆΔ: false,
          angle: 0
        };
        break;
      case xw.ⲆΔⵠⲆᐃ:
        this.ⵠΔᐃⵠ = ap;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(d, 1, jq, Rl, 10, Fl),
          ᐃⲆΔ: na,
          angle: 0
        };
        this.ⵠⲆⲆᐃⲆ = np;
        break;
      case xw.Ⲇᐃᐃⵠᐃ:
      case xw.ᐃΔⵠⵠⲆ:
      case xw.ⵠᐃᐃⲆΔ:
      case xw.ⲆΔⲆⲆᐃ:
      case xw.ⵠΔⵠⲆΔ:
      case xw.ⵠᐃᐃⲆᐃ:
      case xw.ΔⵠⲆᐃⲆ:
      case xw.ⵠΔᐃᐃΔ:
      case xw.ᐃⲆᐃⵠⲆ:
      case xw.ⵠΔΔᐃⲆ:
      case xw.ⵠᐃⲆΔⵠ:
      case xw.ΔΔᐃⵠΔ:
        this.ⵠΔᐃⵠ = ap;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, $l, 1, _a, Yt, pj),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.ⵠⲆⲆᐃⲆ = tp;
        break;
      case xw.ᐃⲆΔᐃⲆ:
        this.ⵠΔᐃⵠ = vp;
        this.opacity = Ag;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(hr, 1, jq, Cq, fg, Ho),
          ᐃⲆΔ: Y,
          angle: 0
        };
        var n = this.angle % (Math.PI / Ss);
        if (Math.PI / Db > n) {
          this.angle -= n;
        } else {
          this.angle += Math.PI / vk - n;
        }
        break;
      case xw.ᐃΔᐃⲆΔ:
        this.ⵠΔᐃⵠ = ip;
        this.angle = ql * (Math.random() * Math.PI);
        break;
      case xw.ⵠΔⲆⲆⲆⲆⵠ:
        this.ⵠΔᐃⵠ = up;
        this.angle = sh * (Math.PI * Math.random());
        break;
      case xw.ⵠⲆΔΔᐃⲆⵠ:
        this.ⵠΔᐃⵠ = qm;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case xw.ⲆΔᐃΔΔΔΔ:
        this.ⵠΔᐃⵠ = dp;
        this.angle = Math.random() * Math.PI * tg;
        break;
      case xw.ΔᐃᐃⵠᐃᐃⲆ:
        this.ⵠΔᐃⵠ = Km;
        this.angle = Math.PI * Math.random() * vk;
        break;
      case xw.ΔⲆᐃᐃⲆ:
        this.ᐃⲆΔ = function (a) {
          this.lock = this.info & 8192 ? Gs : Tg;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⵠΔᐃⵠ = Ym;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, _b, 1, ms, no, 10),
          ᐃⲆΔ: false,
          angle: 0
        };
        this.lock = 0;
        this.ᐃⲆΔ(this.action);
        break;
      case xw.ΔᐃᐃⵠⲆ:
      case xw.ᐃⵠᐃⵠⵠ:
      case xw.ⲆⲆⲆΔⵠ:
      case xw.ⵠⵠⵠⲆⵠ:
      case xw.ⵠΔⵠⵠᐃ:
      case xw.ⲆᐃⵠⲆⵠ:
      case xw.ⵠᐃᐃⲆⲆ:
      case xw.ⵠⵠΔⲆⵠ:
      case xw.ⵠᐃΔΔⲆ:
      case xw.ΔᐃⲆⵠⵠ:
      case xw.ⵠΔⵠⲆⵠ:
      case xw.ᐃΔΔᐃⲆ:
        this.ⵠΔᐃⵠ = Um;
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, _b, 0, 10, Ln),
          ᐃⲆΔ: Rn,
          angle: 0
        };
        this.ⵠⲆⲆᐃⲆ = tp;
        break;
      case xw.ᐃⵠᐃᐃᐃ:
        this.ⲆᐃⵠΔᐃ = Sp;
        this.ⵠΔᐃⵠ = Op;
        this.ΔⲆⵠΔⵠ = bv;
        this.ⵠᐃᐃⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 1, 1.23, 1.18, 0.02, 0.02);
        this.ΔⲆᐃΔⲆ = new ᐃⵠΔⵠ.ΔⲆΔᐃ(cg, 1, 1.23, 1.18, 0.04, 0.04);
        this.ΔΔΔ = {
          ⵠⵠⵠⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(d, 1, Zq, 0, fg, 10),
          ᐃⲆΔ: false,
          angle: Nl
        };
        this.ᐃⲆΔ = function (a) {
          this.action = a;
        };
    }
  }
  function Dw() {
    Math.random();
    return "C";
  }
  function Ew() {
    Math.random();
    return "t";
  }
  function Fw() {
    Math.random();
    return "g";
  }
  function Gw() {
    Math.random();
    return "o";
  }
  function Hw() {
    Math.random();
    return "s";
  }
  function Iw() {
    Math.random();
    return "i";
  }
  function Jw() {
    Math.random();
    return "r";
  }
  function Kw() {
    Math.random();
    return "e";
  }
  function Ew() {
    Math.random();
    return "t";
  }
  function Lw() {
    this.ΔᐃΔⲆⵠ = function () { };
    this.ᐃⵠᐃⲆᐃ = {
      ΔΔΔⵠ: ag,
      ⲆΔΔᐃᐃ: As,
      open: Rn
    };
    this.ⲆΔⵠⵠⵠ = {
      ⲆΔΔᐃᐃ: -1,
      ΔΔΔⵠ: Ok,
      open: false
    };
    this.ⵠΔⲆⲆ = {
      ᐃᐃᐃΔᐃⲆᐃ: rl,
      ΔΔⵠⵠΔ: 0,
      ΔΔΔⵠ: jq,
      ⲆΔΔᐃᐃ: -Ht,
      open: d
    };
    this.ⲆΔᐃⵠ = {
      ⵠᐃΔᐃⵠᐃⲆ: vq,
      open: Fq,
      ⵠⵠⲆⲆⲆⵠᐃ: Cq,
      ᐃⵠⵠⵠΔΔΔ: 0,
      ΔΔΔⵠ: 1,
      type: 0,
      ⲆΔΔᐃᐃ: -1
    };
    this.ΔⲆⵠⲆ = {
      ⲆᐃⵠᐃᐃᐃΔ: Qs,
      ⲆΔΔᐃᐃ: -1,
      ⵠⵠⲆⲆⲆⵠᐃ: 0,
      ΔΔⵠⵠΔ: Cn,
      ΔΔΔⵠ: Eo,
      open: false
    };
    this.sign = {
      ⲆΔΔᐃᐃ: -ie,
      open: Rn
    };
    this.ΔⵠΔᐃⲆ = {
      ΔⲆⲆⵠ: 0,
      open: _i,
      ΔΔΔⵠ: aa,
      ⲆΔΔᐃᐃ: -1
    };
    this.ᐃⲆΔΔᐃ = {
      enabled: false,
      ⲆᐃᐃⲆⵠ: -Ht,
      label: Y,
      now: -Ok,
      ⵠΔᐃⵠ: wv
    };
    this.Ⲇⵠⵠⵠ = {
      ΔⲆⲆⵠ: 0,
      ΔΔⲆⵠⲆᐃⲆ: Sh,
      locked: false,
      ⲆΔΔᐃᐃ: -1,
      open: En,
      lock: false,
      ⵠⲆⲆⵠΔᐃⵠ: Ta,
      ΔΔΔⵠ: 1,
      id: -1
    };
    this.ⲆⲆΔΔᐃ = true;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = ᐃⵠΔⵠ.ᐃⵠΔᐃⲆᐃⲆ("key", kj.location.href);
    var a = ᐃⵠΔⵠ.ᐃⵠΔᐃⲆᐃⲆ("egg", kj.location.href);
    if (a) {
      pf.ᐃᐃΔᐃ = parseInt(a);
    }
    this.beta = kj.location.href.indexOf("http://starve.io/beta") === 0 ? Ok : 0;
    if (this.key && this.beta) {
      ⲆⵠΔΔ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⲆⵠΔΔ.get("starve_beta");
    }
    this.ⲆⲆⲆⲆᐃ = ⲆⵠΔΔ.get("starve_token") ? ⲆⵠΔΔ.get("starve_token") : ᐃⵠΔⵠ.ⵠΔᐃⲆᐃᐃⲆ(sw.ⵠᐃᐃⲆⲆⵠⲆⵠᐃ);
    kj.baguette();
    var b = kj.kot2;
    function c() {
      this.seed = 1;
      this.ⲆⲆΔΔΔⵠⵠ = 2;
      this.ΔⵠΔᐃⵠΔᐃ = dt;
      this.ⲆⵠΔⵠⵠⵠⲆⲆⲆ = 1;
      this.ᐃΔᐃΔⲆᐃⲆⲆΔ = 2;
      this.ⵠⲆⵠⲆⲆΔΔⲆⵠ = 3;
      this.ΔΔΔΔΔΔⲆ = function (a) {
        this.seed = wr + Math.floor(Math.random() * uw.ᐃⲆⲆⲆⵠ);
      };
      this.ⲆΔⵠᐃΔᐃⵠ = function (a) {
        this.ⲆⲆΔΔΔⵠⵠ = ld + Math.floor(Math.random() * uw.ᐃⲆⲆⲆⵠ);
      };
      this.ⲆΔᐃΔⵠⵠⵠ = function (a) {
        this.ΔⵠΔᐃⵠΔᐃ = 2 + Math.floor(Math.random() * uw.ᐃⲆⲆⲆⵠ);
      };
      this.ΔⵠᐃΔΔᐃⲆΔᐃ = function (a) {
        this.ⲆⵠΔⵠⵠⵠⲆⲆⲆ = wr + Math.floor(uw.ᐃⲆⲆⲆⵠ * Math.random());
      };
      this.ᐃⲆⲆⵠⵠΔᐃΔΔ = function (a) {
        this.ᐃΔᐃΔⲆᐃⲆⲆΔ = 2 + Math.floor(Math.random() * uw.ᐃⲆⲆⲆⵠ);
      };
      this.ᐃⲆⵠΔΔⵠⵠΔᐃ = function (a) {
        this.ⵠⲆⵠⲆⲆΔΔⲆⵠ = 2 + Math.floor(uw.ᐃⲆⲆⲆⵠ * Math.random());
      };
      this.ᐃΔᐃⵠⵠΔⲆ = function (c, d, e, f, i, j, k) {
        for (var a = 1; k > a;) {
          var m = e * a % ΔⵠⲆΔⵠᐃΔ;
          var n = ᐃΔⵠⵠΔΔΔ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(n * f + i);
            if (j < a && k > a) {
              var p = Math.random() > 0.5 ? xf * -10 : Ho * xf;
              var q = o * d;
              this.ΔⵠᐃΔᐃⵠΔ[m] = Math.max(-uw.ᐃⵠⵠᐃᐃΔⵠ, Math.min(uw.ᐃⵠⵠᐃᐃΔⵠ, this.ΔⵠᐃΔᐃⵠΔ[m] + p));
              this.ⲆⵠΔΔΔⲆⲆ[m] = Math.max(-uw.ᐃⲆⵠΔⲆⲆⲆ, Math.min(uw.ᐃⲆⵠΔⲆⲆⲆ, this.ⲆⵠΔΔΔⲆⲆ[m] + p));
              if (q > tj) {
                oo.beginPath();
                oo.arc(a + bx.ᐃᐃⵠ.x + this.ⲆⵠΔΔΔⲆⲆ[m], c + this.ΔⵠᐃΔᐃⵠΔ[m] - uw.ᐃⵠⵠᐃᐃΔⵠ * 0.8, q, 0, Math.PI * 2);
                if (ff.transition) {
                  var r = ff.time ? Ht - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
                  oo.fillStyle = Pv(83, 156, 160, 236, 247, 249, r);
                } else {
                  oo.fillStyle = Ur.ⲆᐃΔⵠⲆⵠᐃ[ff.time];
                }
                oo.fill();
              }
            }
            a += o * 2;
          }
        }
      };
      this.ⲆⲆⵠⵠΔᐃᐃ = function (c, d, e, f, i, j, k) {
        for (var a = zs; k > a;) {
          var m = a * e % ΔⵠⲆΔⵠᐃΔ;
          var n = ᐃΔⵠⵠΔΔΔ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (j < a && k > a) {
              var p = Math.random() > 0.5 ? xf * -Qa : El * xf;
              var q = d * o;
              this.ᐃΔⵠᐃᐃ[m] = Math.max(-uw.ᐃⵠⵠᐃᐃΔⵠ, Math.min(uw.ᐃⵠⵠᐃᐃΔⵠ, this.ᐃΔⵠᐃᐃ[m] + p));
              this.ⵠΔΔⵠΔ[m] = Math.max(-uw.ᐃⲆⵠΔⲆⲆⲆ, Math.min(uw.ᐃⲆⵠΔⲆⲆⲆ, this.ⵠΔΔⵠΔ[m] + p));
              if (uh < q) {
                oo.beginPath();
                oo.arc(c + this.ᐃΔⵠᐃᐃ[m] - uw.ᐃⵠⵠᐃᐃΔⵠ * 0.8, a + bx.ᐃᐃⵠ.y + this.ⵠΔΔⵠΔ[m], q, 0, Math.PI * Cl);
                if (ff.transition) {
                  var r = ff.time ? 1 - ff.ᐃⵠⲆᐃ.ⲆᐃⲆ : ff.ᐃⵠⲆᐃ.ⲆᐃⲆ;
                  oo.fillStyle = Pv(83, 156, 160, 236, 247, 249, r);
                } else {
                  oo.fillStyle = Ur.ⲆᐃΔⵠⲆⵠᐃ[ff.time];
                }
                oo.fill();
              }
            }
            a += o * 2;
          }
        }
      };
      this.ᐃⲆⲆΔᐃⵠⵠⵠᐃ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(d - uw.ΔΔⵠⵠᐃ - e - 2) / uw.ΔΔΔⲆⵠⲆⲆ;
        if (Qs === h) {
          this.ⲆΔᐃΔⵠⵠⵠ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ᐃΔᐃⵠⵠΔⲆ(d, h, this.ΔⵠΔᐃⵠΔᐃ, rk, w, f, g);
        oo.globalAlpha = 1;
        if ((h = -(b - uw.ΔⲆⵠⲆⲆ - e + 500) / uw.ⵠⲆΔᐃΔⵠΔ) === Cq) {
          this.ΔΔΔΔΔΔⲆ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ᐃΔᐃⵠⵠΔⲆ(b, h, this.seed, 12, 10, f, g);
        oo.globalAlpha = As;
        if (c !== -1) {
          if ((h = -(c - uw.ⲆⲆΔⲆΔ - e + 698) / uw.ΔⲆΔΔᐃⲆΔ) <= 0.01) {
            this.ⲆΔⵠᐃΔᐃⵠ();
          }
          oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
          this.ᐃΔᐃⵠⵠΔⲆ(c, h, this.ⲆⲆΔΔΔⵠⵠ, 6, Gt, f, g);
          oo.globalAlpha = Zq;
        }
      };
      this.ΔⵠⲆⲆⵠᐃⵠⵠⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + uw.ΔΔⵠⵠᐃ + e + 2) / uw.ΔΔΔⲆⵠⲆⲆ;
        if (qn === h) {
          this.ⲆΔᐃΔⵠⵠⵠ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ᐃΔᐃⵠⵠΔⲆ(d, h, this.ΔⵠΔᐃⵠΔᐃ, 18, 16, f, g);
        oo.globalAlpha = zs;
        h = -(-b + uw.ΔⲆⵠⲆⲆ + e) / uw.ⵠⲆΔᐃΔⵠΔ;
        if (qn === h) {
          this.ΔΔΔΔΔΔⲆ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ᐃΔᐃⵠⵠΔⲆ(b, h, this.seed, db, 10, f, g);
        oo.globalAlpha = As;
        if (-_b !== c) {
          if ((h = -(-c + uw.ⲆⲆΔⲆΔ + e) / uw.ΔⲆΔΔᐃⲆΔ) <= 0.01) {
            this.ⲆΔⵠᐃΔᐃⵠ();
          }
          oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
          this.ᐃΔᐃⵠⵠΔⲆ(c, h, this.ⲆⲆΔΔΔⵠⵠ, Rt, 6, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.ⲆⵠΔᐃᐃΔΔΔΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + uw.ΔΔⵠⵠᐃ + e + Xh) / uw.ΔΔΔⲆⵠⲆⲆ) === 0) {
          this.ⲆΔᐃΔⵠⵠⵠ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ⲆⲆⵠⵠΔᐃᐃ(d, h, this.ΔⵠΔᐃⵠΔᐃ, Pg, 16, f, g);
        oo.globalAlpha = 1;
        if ((h = -(-b + uw.ΔⲆⵠⲆⲆ + e) / uw.ⵠⲆΔᐃΔⵠΔ) === gr) {
          this.ΔΔΔΔΔΔⲆ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ⲆⲆⵠⵠΔᐃᐃ(b, h, this.seed, 12, 10, f, g);
        oo.globalAlpha = 1;
        if (c !== -Ag) {
          if ((h = -(-c + uw.ⲆⲆΔⲆΔ + e) / uw.ΔⲆΔΔᐃⲆΔ) <= 0.01) {
            this.ⲆΔⵠᐃΔᐃⵠ();
          }
          oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
          this.ⲆⲆⵠⵠΔᐃᐃ(c, h, this.ⲆⲆΔΔΔⵠⵠ, xd, gq, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.ΔⲆΔᐃᐃᐃⲆⲆᐃ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - uw.ΔΔⵠⵠᐃ - e - Ss) / uw.ΔΔΔⲆⵠⲆⲆ) === 0) {
          this.ⲆΔᐃΔⵠⵠⵠ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ⲆⲆⵠⵠΔᐃᐃ(d, h, this.ΔⵠΔᐃⵠΔᐃ, 18, 16, f, g);
        oo.globalAlpha = 1;
        if ((h = -(b - uw.ΔⲆⵠⲆⲆ - e + 500) / uw.ⵠⲆΔᐃΔⵠΔ) === 0) {
          this.ΔΔΔΔΔΔⲆ();
        }
        oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
        this.ⲆⲆⵠⵠΔᐃᐃ(b, h, this.seed, Rh, 10, f, g);
        oo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - uw.ⲆⲆΔⲆΔ - e + 698) / uw.ΔⲆΔΔᐃⲆΔ) <= 0.01) {
            this.ⲆΔⵠᐃΔᐃⵠ();
          }
          oo.globalAlpha = ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(h);
          this.ⲆⲆⵠⵠΔᐃᐃ(c, h, this.ⲆⲆΔΔΔⵠⵠ, 6, Zh, f, g);
          oo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ΔⵠⲆᐃᐃⲆΔ, rl, xk, uw.ᐃⵠⵠⵠΔ, uw.ᐃⵠⵠⵠΔ, uw.ΔΔΔⲆⵠⲆⲆ),
        ΔΔⵠⵠ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔᐃⵠⵠⲆⵠ, Gr, El, uw.ΔΔΔⲆⵠⲆⲆ, uw.ΔΔΔⲆⵠⲆⲆ, uw.ᐃⵠⵠⵠΔ)
      };
      this.w2 = {
        r: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⵠⵠⵠᐃⲆΔⵠ, Tg, 10, uw.ⵠΔⵠⵠᐃⵠᐃ, uw.ⵠΔⵠⵠᐃⵠᐃ, uw.ⵠⲆΔᐃΔⵠΔ),
        ΔΔⵠⵠ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⵠΔᐃⲆΔ, rl, fg, uw.ⵠⲆΔᐃΔⵠΔ, uw.ⵠⲆΔᐃΔⵠΔ, uw.ⵠΔⵠⵠᐃⵠᐃ)
      };
      this.w3 = {
        r: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⵠⲆᐃᐃⲆⵠⲆ, Ih, 10, uw.ᐃΔᐃⵠΔⲆⵠ, uw.ᐃΔᐃⵠΔⲆⵠ, uw.ΔⲆΔΔᐃⲆΔ),
        ΔΔⵠⵠ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⵠΔᐃⲆΔ, 0, ae, uw.ΔⲆΔΔᐃⲆΔ, uw.ΔⲆΔΔᐃⲆΔ, uw.ᐃΔᐃⵠΔⲆⵠ)
      };
      this.ⵠⲆΔⵠⵠⵠⵠⵠⵠ = function (a) {
        if (a.r.x === a.r.ⵠᐃⲆⵠΔ) {
          if (a.ΔΔⵠⵠ.ⵠᐃⲆⵠΔ === a.ΔΔⵠⵠ.x) {
            return a.r;
          } else {
            return a.ΔΔⵠⵠ;
          }
        } else {
          return a.r;
        }
      };
      this.ᐃΔΔ = function (a) {
        var b;
        if (a.r.ⵠᐃⲆⵠΔ === a.r.x) {
          if (a.ΔΔⵠⵠ.x === a.ΔΔⵠⵠ.ⵠᐃⲆⵠΔ) {
            a.r.ΔⵠⲆᐃΔⲆΔ();
            a.ΔΔⵠⵠ.ΔⵠⲆᐃΔⲆΔ();
            b = a.r;
          } else {
            b = a.ΔΔⵠⵠ;
          }
        } else {
          b = a.r;
        }
        b.ΔⵠⲆⲆⵠΔΔ(b.ⵠᐃⲆⵠΔ);
        return b;
      };
      this.ᐃΔⵠᐃᐃ = [];
      this.ⵠΔΔⵠΔ = [];
      this.ΔⵠᐃΔᐃⵠΔ = [];
      this.ⲆⵠΔΔΔⲆⲆ = [];
      this.ΔᐃΔⲆⵠ = function () {
        for (var a = Fj; ΔⵠⲆΔⵠᐃΔ > a; a++) {
          this.ᐃΔⵠᐃᐃ[a] = Math.floor(ᐃΔⵠⵠΔΔΔ[a] * uw.ᐃⵠⵠᐃᐃΔⵠ);
          this.ⵠΔΔⵠΔ[a] = Math.floor(ᐃΔⵠⵠΔΔΔ[a] * uw.ᐃⲆⵠΔⲆⲆⲆ);
          this.ΔⵠᐃΔᐃⵠΔ[a] = Math.floor(ᐃΔⵠⵠΔΔΔ[a] * uw.ᐃⵠⵠᐃᐃΔⵠ);
          this.ⲆⵠΔΔΔⲆⲆ[a] = Math.floor(uw.ᐃⲆⵠΔⲆⲆⲆ * ᐃΔⵠⵠΔΔΔ[a]);
        }
        this.w1.r.x = this.w1.r.ⵠᐃⲆⵠΔ;
        this.w2.r.ⵠᐃⵠⵠⵠ = 3.5;
        this.w3.r.ⵠᐃⵠⵠⵠ = 2;
      };
      this.ΔᐃΔⲆⵠ();
    }
    this.ⲆⲆⲆⲆᐃ = b.substring(Qs, sg) + this.ⲆⲆⲆⲆᐃ.substring(Gt);
    this.ⵠΔⵠΔᐃΔΔ = ⲆⵠΔΔ.get("starve_token_id") ? ⲆⵠΔΔ.get("starve_token_id") : "";
    this.id = 0;
    this.ⵠᐃΔΔ = gr;
    this.ⲆΔⵠ = 0;
    this.ⵠΔⵠΔᐃⲆΔ = {
      ⲆⵠΔⵠΔⲆᐃ: 0,
      ᐃⲆᐃᐃΔΔⲆ: "",
      ⵠⲆΔⵠΔ: 0,
      ⵠΔⲆᐃΔ: ur
    };
    this.ⲆΔⵠⲆⵠΔⲆⲆⵠ = {
      connected: vq,
      ᐃⵠᐃⵠᐃⵠⲆ: new Date().getTime()
    };
    this.ⲆΔΔΔᐃ = [];
    this.ⵠⵠᐃⲆᐃᐃⲆ = function (a) {
      for (var b = qk; b < this.ⲆΔΔΔᐃ.length; b++) {
        if (this.ⲆΔΔΔᐃ[b] == a) {
          return Qn;
        }
      }
      return false;
    };
    this.ⵠⵠᐃⲆᐃ = {
      ⲆᐃᐃⲆⵠ: 0,
      time: 0,
      value: uh,
      open: false,
      ⵠΔᐃⵠ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ⲆᐃᐃⲆⵠ) / 1000);
          if (this.time < 60) {
            dx.ⵠⵠᐃⲆᐃ.button.ⵠΔᐃⵠ(oo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = xg;
          }
        }
      }
    };
    this.ⵠⲆⵠⲆΔ = {
      id: -1,
      ΔΔΔⵠ: -As,
      lock: Fj,
      timeout: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rn, 0, Oj, 0, ag / 30, 1),
      wait: Y
    };
    this.ⲆΔⲆΔⵠ = {
      timeout: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, Qs, 1, 0, Ue / cl, 1),
      wait: false
    };
    this.ⲆᐃⲆΔΔ = {
      timeout: new ᐃⵠΔⵠ.ΔⲆΔᐃ(vl, uh, Zq, qk, zs, 1),
      wait: false
    };
    this.ΔᐃΔⵠⵠ = {
      timeout: new ᐃⵠΔⵠ.ΔⲆΔᐃ(yj, 0, _b, 0, As / 10, As),
      wait: d
    };
    this.ᐃᐃⵠ = new ᐃⵠΔⵠ.ᐃⲆⲆΔⵠⲆΔ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, Cn, 0.4, 0, 0, oq, pq, oq, pq);
    this.ᐃᐃⵠ.ⲆᐃᐃⲆⵠ = 0;
    this.ᐃᐃⵠ.ⵠⵠⲆⲆⲆⵠΔ = 0;
    this.ᐃᐃⵠ.ᐃⲆΔ = function () {
      if (this.ⵠⵠⲆⲆⲆⵠΔ > uh) {
        this.ⵠⵠⲆⲆⲆⵠΔ -= xf;
      } else {
        var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
        if (a) {
          this.ⲆᐃᐃⲆⵠ = Tg;
          var b = Math.max(Math.min(oq - a.x, -2), -ff.w + gc + ro);
          var c = Math.max(Math.min(pq - a.y, -ld), -ff.ⵠΔⵠ + zk + so);
          this.ΔⵠⲆⲆⵠΔΔ({
            x: b,
            y: c
          });
        } else {
          this.ⲆᐃᐃⲆⵠ += xf;
          if (this.ⲆᐃᐃⲆⵠ > ol) {
            this.ⲆᐃᐃⲆⵠ = 0;
            if (!bx.reconnect.enabled) {
              ⵠⵠⵠⲆ.ⲆⵠΔᐃⵠᐃΔᐃⲆ();
            }
          }
        }
      }
    };
    this.ᐃᐃⵠ.w = screen.width;
    this.ᐃᐃⵠ.ⵠΔⵠ = screen.height;
    this.ᐃᐃⵠ.ΔΔⲆᐃⵠᐃᐃ = this.ᐃᐃⵠ.w;
    this.ᐃᐃⵠ.ⲆⵠⲆΔⲆⵠΔ = this.ᐃᐃⵠ.ⵠΔⵠ;
    this.ᐃᐃⵠ.rx = Qs;
    this.ᐃᐃⵠ.ry = qn;
    this.ᐃᐃⵠ.ⲆⵠΔᐃᐃⵠⲆⵠⲆ = Qs;
    this.ᐃᐃⵠ.ΔᐃᐃⲆᐃΔᐃΔΔ = 0;
    this.ᐃᐃⵠ.ΔⵠᐃΔⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-ff.ⵠᐃᐃΔᐃⲆΔ * Xr, a - ff.ⵠᐃᐃΔᐃⲆΔ - this.ΔΔⲆᐃⵠᐃᐃ / tg), ff.w - this.ΔΔⲆᐃⵠᐃᐃ);
      this.y = -Math.min(Math.max(-ff.ⲆᐃⲆΔⲆᐃΔ * Ss, b - (ff.ⲆᐃⲆΔⲆᐃΔ + this.ⲆⵠⲆΔⲆⵠΔ) / ql), ff.ⵠΔⵠ - this.ⲆⵠⲆΔⲆⵠΔ + ff.ⲆᐃⲆΔⲆᐃΔ);
      this.ⵠᐃⲆⵠΔ = this.x;
      this.ⵠΔΔⲆΔⲆⲆ = this.y;
    };
    this.control = {
      angle: ne,
      timeout: qn,
      ⲆⵠᐃⲆⵠΔⲆ: ms,
      ⲆⵠⵠΔ: 0,
      attack: tj,
      ᐃⲆΔ: function () {
        var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
        if (a) {
          var b = {
            x: bx.ᐃᐃⵠ.x + a.x,
            y: bx.ᐃᐃⵠ.y + a.y
          };
        } else {
          b = uo;
        }
        var c = ᐃⵠΔⵠ.ΔⵠΔⲆᐃᐃⲆ(kf.ⲆⲆⲆⲆ, b);
        var d = En;
        this.ⲆⵠⵠΔ += xf;
        if (!kf.state) {
          if (a && !(a.action & qw.ΔⲆⲆΔⲆᐃᐃ) && this.ⲆⵠⵠΔ > sw.ΔⲆⲆΔⲆᐃᐃ) {
            this.attack = 1;
            d = ra;
            this.ⲆⵠⵠΔ = 0;
            ⵠⵠⵠⲆ.ᐃⵠΔⲆᐃⲆᐃΔⵠ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ⲆΔⲆΔΔᐃΔ = c;
        }
        if (!d) {
          this.timeout += xf;
          if (this.timeout > sw.ⲆᐃᐃⲆᐃΔΔ) {
            this.timeout = Ih;
            if (Math.abs(this.angle - c) > 0.005) {
              ⵠⵠⵠⲆ.ᐃᐃⵠⲆⵠⲆΔⵠᐃ(c);
              this.angle = c;
            }
          }
        }
        if (!bx.ᐃⵠⵠΔⲆ.open && !bx.ᐃᐃᐃᐃᐃ.open) {
          var e = 0;
          if (Af.ⲆΔⵠΔᐃᐃⵠ()) {
            e |= 1;
          }
          if (Af.ⲆᐃΔⲆᐃΔⵠ()) {
            e |= tg;
          }
          if (Af.ⵠⲆΔⲆⲆΔⵠ()) {
            e |= gl;
          }
          if (Af.ΔⲆⲆⵠⵠⵠΔ()) {
            e |= 8;
          }
          if (this.ⲆⵠᐃⲆⵠΔⲆ != e) {
            ⵠⵠⵠⲆ.ⲆΔΔᐃⲆΔΔΔᐃ(e);
          }
          this.ⲆⵠᐃⲆⵠΔⲆ = e;
        }
      }
    };
    this.ⲆⲆⲆΔ = {
      c: 1,
      ΔΔⵠⵠ: ag,
      ⵠΔⵠ: Ok,
      ᐃΔΔ: 1,
      ⲆⵠΔ: Oj,
      ⲆⲆⲆⵠⲆᐃΔ: 1,
      ⵠᐃⵠΔⲆⲆⲆ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Fs, 0, 1, Cn, 3, 3),
      ⲆⵠⵠᐃⲆΔⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(true, ms, 1, Nl, 2, lt),
      ⵠᐃⵠΔⲆᐃΔ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(true, 0, Ej, tj, 3, 3),
      ᐃᐃⲆⵠⵠⵠⲆ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(true, gr, 1, 0, co, dt),
      ΔᐃᐃⲆᐃⲆᐃ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Xj, Tg, _b, uh, ol, 3),
      Δⵠⵠᐃᐃᐃⵠ: new ᐃⵠΔⵠ.ΔⲆΔᐃ(true, 0, Fh, 0, 3, 3),
      ᐃⵠⵠⲆΔ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, Cq, 1, 0, _a, 1),
      ᐃΔⵠⵠⵠ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, Qs, $l, ur, Cn, 1),
      ⵠᐃᐃⲆⵠⲆΔ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, 0, Al, 0, vq, 1),
      ⲆⵠⲆⵠⲆⲆⵠ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, ms, 1, 0, 0, aa),
      ΔⲆΔⵠᐃⵠΔ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, 0, $l, _a, 0, 1),
      ᐃⵠⲆⵠⵠ: new ᐃⵠΔⵠ.ⲆⵠᐃⲆⵠ(ᐃⵠΔⵠ.ⲆΔΔᐃΔⲆΔ, vq, 1, 0, Cn, 1),
      ᐃⲆΔ: function () {
        this.ⵠᐃⵠΔⲆⲆⲆ.ᐃⲆΔ();
        this.ⲆⵠⵠᐃⲆΔⵠ.ᐃⲆΔ();
        this.ⵠᐃⵠΔⲆᐃΔ.ᐃⲆΔ();
        this.ᐃᐃⲆⵠⵠⵠⲆ.ᐃⲆΔ();
        this.ΔᐃᐃⲆᐃⲆᐃ.ᐃⲆΔ();
        this.Δⵠⵠᐃᐃᐃⵠ.ᐃⲆΔ();
        this.ᐃⵠⵠⲆΔ.ΔⵠⲆⲆⵠΔΔ(this.c);
        this.ᐃΔⵠⵠⵠ.ΔⵠⲆⲆⵠΔΔ(this.ΔΔⵠⵠ);
        this.ⵠᐃᐃⲆⵠⲆΔ.ΔⵠⲆⲆⵠΔΔ(this.ⵠΔⵠ);
        this.ⲆⵠⲆⵠⲆⲆⵠ.ΔⵠⲆⲆⵠΔΔ(this.ᐃΔΔ);
        this.ΔⲆΔⵠᐃⵠΔ.ΔⵠⲆⲆⵠΔΔ(this.ⲆⵠΔ);
        this.ᐃⵠⲆⵠⵠ.ΔⵠⲆⲆⵠΔΔ(this.ⲆⲆⲆⵠⲆᐃΔ);
      }
    };
    this.ⵠⵠᐃⲆᐃᐃᐃ = false;
    this.ᐃᐃΔᐃⲆⲆⵠ = false;
    this.ᐃⵠⲆⵠⲆ = false;
    this.ᐃⲆⵠᐃⵠᐃⲆ = na;
    this.ⵠⵠΔΔ = {
      max: uw.ᐃⲆᐃⵠΔᐃΔ,
      ⵠⵠΔᐃᐃᐃΔ: 0,
      ᐃⵠΔᐃⲆ: _a,
      ⵠΔⲆ: [],
      ⲆΔⲆᐃᐃ: [],
      ⲆⵠⵠΔⲆᐃΔ: function (a, b) {
        if (a === aa) {
          this.ᐃⵠΔᐃⲆ = uw.ΔᐃⵠⲆᐃⲆⲆⲆⵠ;
        }
        this.ⵠⵠΔᐃᐃᐃΔ += b;
        this.max = uw.ᐃⲆᐃⵠΔᐃΔ + this.ⵠⵠΔᐃᐃᐃΔ + this.ᐃⵠΔᐃⲆ;
      },
      ΔᐃᐃⲆⵠᐃᐃ: {
        item: -1,
        Ⲇⵠ: null,
        ⲆᐃΔⲆⵠ: tj,
        ⵠΔⵠⲆΔⲆᐃ: qn,
        ΔΔⵠᐃΔ: -1,
        Δⵠᐃᐃⵠ: -_b,
        ⲆΔⵠᐃΔ: function (a) {
          if (!!this.ⲆᐃΔⲆⵠ && (a.x !== this.ΔΔⵠᐃΔ || a.y !== this.Δⵠᐃᐃⵠ)) {
            this.ⵠΔⵠⲆΔⲆᐃ = As;
          }
        },
        start: function (a, b) {
          this.ΔΔⵠᐃΔ = b.x;
          this.Δⵠᐃᐃⵠ = b.y;
          this.item = a;
          this.Ⲇⵠ = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ[a].info.Ⲇⵠ[2];
          this.ⲆᐃΔⲆⵠ = As;
        },
        stop: function () {
          this.ⲆᐃΔⲆⵠ = 0;
          this.ⵠΔⵠⲆΔⲆᐃ = 0;
          this.ΔΔⵠᐃΔ = -jq;
          this.Δⵠᐃᐃⵠ = -1;
        },
        release: function () {
          var a = -Al;
          var b = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ;
          var c = gr;
          if (this.ⲆᐃΔⲆⵠ && this.ⵠΔⵠⲆΔⲆᐃ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === fw) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = Al;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              dx.ᐃⵠⲆⲆⵠⲆᐃ();
            }
          }
          this.stop();
          return c;
        },
        ⵠΔᐃⵠ: function (a, b) {
          if (this.ⲆᐃΔⲆⵠ && this.ⵠΔⵠⲆΔⲆᐃ) {
            Em(oo, this.Ⲇⵠ, Math.floor(a - this.Ⲇⵠ.width / re), Math.floor(b - this.Ⲇⵠ.height / 2));
          }
        }
      },
      ⲆΔΔⲆΔᐃⵠΔΔ: function (a) {
        for (f = 0; f < a.length; f++) {
          if (this.ⵠΔⲆ[a[f][0]] == a[f][1]) {
            return true;
          }
        }
        return false;
      },
      ᐃΔⲆᐃᐃ: function (a) {
        for (var b = vq; b < this.ⲆΔⲆᐃᐃ.length; b++) {
          if (this.ⲆΔⲆᐃᐃ[b].id == a) {
            return b;
          }
        }
        return -As;
      },
      ⵠⲆⵠⲆⲆΔⵠ: function (a, b) {
        this.ⵠΔⲆ[a] = 0;
        this.ⲆΔⲆᐃᐃ.splice(b, As);
        dx.ᐃⵠⲆⲆⵠⲆᐃ();
      },
      ΔⲆᐃⲆⲆⵠⵠ: function (a, b, c) {
        ᐃⲆΔ = an;
        this.ⵠΔⲆ[a] = Math.max(0, this.ⵠΔⲆ[a] - b);
        if (!this.ⵠΔⲆ[a] && c >= 0) {
          this.ⵠⲆⵠⲆⲆΔⵠ(a, c);
        }
      }
    };
    this.ⲆⲆⲆΔⲆ = {
      enabled: _i,
      translate: {
        x: 0,
        y: Rl
      },
      ⵠΔΔⵠᐃΔΔ: function () {
        if (ff.mode == uw.ΔⲆΔⲆⲆⵠᐃ && !bx.ᐃᐃΔᐃⲆⲆⵠ) {
          bx.ⲆⲆⲆΔⲆ.enabled = !bx.ⲆⲆⲆΔⲆ.enabled;
          if (bx.ⲆⲆⲆΔⲆ.enabled) {
            dx.options.ΔⲆⵠΔᐃⵠⵠ.display = "inline-block";
          } else {
            dx.options.ΔⲆⵠΔᐃⵠⵠ.display = "none";
          }
        }
      }
    };
    dx.options.ΔⲆⵠΔᐃⵠⵠ.display = "none";
    this.ΔⲆᐃΔΔ = {
      enabled: na,
      translate: {
        x: 0,
        y: 0
      },
      ⲆᐃᐃⲆⵠ: _a,
      ⵠΔΔⵠᐃΔΔ: function () {
        bx.ΔⲆᐃΔΔ.enabled = !bx.ΔⲆᐃΔΔ.enabled;
        if (bx.ΔⲆᐃΔΔ.enabled) {
          dx.options.ᐃⵠΔⵠⲆᐃΔ.display = "inline-block";
        } else {
          dx.options.ᐃⵠΔⵠⲆᐃΔ.display = "none";
        }
      },
      ᐃⲆΔ: function () {
        if (!!this.enabled && bx.ⵠⲆⵠᐃ.id < tj && !dx.ⲆᐃⲆᐃ.open) {
          this.ⲆᐃᐃⲆⵠ += xf;
          if (this.ⲆᐃᐃⲆⵠ > 2) {
            this.ⲆᐃᐃⲆⵠ = Nl;
            if (bx.ⲆⲆⲆΔ.ⵠΔⵠ < 0.35) {
              if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⲆΔᐃⵠ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⲆΔᐃⵠ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⲆΔᐃⵠ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⵠΔⵠⲆ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⵠΔⵠⲆ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⵠΔⵠⲆ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⲆⲆᐃᐃ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⲆⲆᐃᐃ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⲆⲆᐃᐃ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ⲆΔⲆΔᐃ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ⲆΔⲆΔᐃ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⲆΔⲆΔᐃ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃᐃᐃⲆᐃ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃᐃᐃⲆᐃ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃᐃᐃⲆᐃ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⵠΔᐃⵠ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⵠΔᐃⵠ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⵠΔᐃⵠ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⵠⵠⵠⲆ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⵠⵠⵠⲆ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⵠⵠⵠⲆ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ⲆⲆΔΔΔ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ⲆⲆΔΔΔ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⲆⲆΔΔΔ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⲆⲆⲆᐃ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⲆⲆⲆᐃ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⲆⲆⲆᐃ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ΔᐃⵠⲆⵠ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ΔᐃⵠⲆⵠ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ΔᐃⵠⲆⵠ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ⲆΔΔⲆᐃ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ⲆΔΔⲆᐃ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⲆΔΔⲆᐃ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃⵠⲆᐃΔ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃⵠⲆᐃΔ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃⵠⲆᐃΔ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ⲆΔᐃᐃΔ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ⲆΔᐃᐃΔ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⲆΔᐃᐃΔ));
              } else if (bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ⲆⲆⲆΔᐃ]) {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ⲆⲆⲆΔᐃ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ⲆⲆⲆΔᐃ));
              }
            } else if (bx.ⲆⲆⲆΔ.ᐃΔΔ < 0.35 && bx.ⵠⵠΔΔ.ⵠΔⲆ[bs.ᐃᐃᐃΔΔ]) {
              ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(bs.ᐃᐃᐃΔΔ, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(bs.ᐃᐃᐃΔΔ));
            }
          }
        }
      }
    };
    dx.options.ᐃⵠΔⵠⲆᐃΔ.display = "none";
    this.ⵠⲆⵠᐃ = {
      id: -1,
      ΔᐃⲆⲆ: -1,
      timeout: new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, Rl, 1, qk, ag, ie),
      Δᐃᐃⵠᐃ: Y,
      ⵠΔⲆᐃ: -Ag,
      mode: gr,
      label: [],
      ᐃⵠΔᐃΔ: [],
      ᐃⲆᐃⲆΔ: na,
      ᐃΔⵠΔⵠ: Ta,
      ᐃΔⲆⲆΔⲆⲆ: false,
      ⲆΔⵠⵠⵠ: En,
      ⵠΔᐃⵠⲆⵠΔⵠᐃ: function () {
        this.mode = this.mode === uh ? 1 : uh;
      },
      ΔⵠⲆᐃΔΔⲆⲆⲆ: function (a) {
        this.ᐃⲆᐃⲆΔ = a;
        var b = dx.ⲆᐃⲆᐃ;
        if (b.open) {
          b.ᐃⵠᐃΔᐃᐃᐃ(b.button);
        }
        this.ᐃⲆΔ();
      },
      ΔⲆᐃⵠⵠᐃᐃᐃⲆ: function (a) {
        var b = Ng[a];
        this.id = a;
        this.Δᐃᐃⵠᐃ = true;
        ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
        this.timeout.ⵠⲆΔⵠⵠᐃⵠ = b.time * au;
        this.ΔᐃⲆⲆ = b.ΔᐃⲆⲆ;
      },
      ΔⲆΔᐃⵠᐃⲆΔⲆ: function (a) {
        var b = Ng[a];
        this.id = a;
        this.Δᐃᐃⵠᐃ = true;
        var c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
        if (c && c.right == bs.ⵠᐃⵠⲆᐃ) {
          this.timeout.ⵠⲆΔⵠⵠᐃⵠ = b.time * 3;
        } else {
          this.timeout.ⵠⲆΔⵠⵠᐃⵠ = b.time;
        }
        this.ΔᐃⲆⲆ = b.ΔᐃⲆⲆ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          bx.ⵠⵠΔΔ.ΔⲆᐃⲆⲆⵠⵠ(e[0], e[1], bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(e[Gr]));
        }
        dx.ᐃⵠⲆⲆⵠⲆᐃ();
      },
      ᐃⲆΔ: function () {
        this.ᐃⵠΔᐃΔ = [];
        if (dx.ᐃⵠΔⵠΔ.ⵠⲆⵠᐃ === Ht) {
          dx.ᐃⵠΔⵠΔ.display = qn;
        }
        for (var a in Ng) {
          var b = Ng[a];
          var c = Vr;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (bx.ⵠⵠΔΔ.max >= uw.ⲆⲆⲆⵠᐃⵠⵠ && b.id === as.ᐃⵠⲆΔ) {
                c = false;
                break;
              }
              if (b.w > this.ᐃⲆᐃⲆΔ || b.f > this.ᐃΔⵠΔⵠ || b.ⲆⵠΔ > this.ᐃΔⲆⲆΔⲆⲆ || b.e > this.ⲆΔⵠⵠⵠ) {
                c = Rs;
                break;
              }
              var f = b.r[d];
              if (!bx.ⵠⵠΔΔ.ⵠΔⲆ[f[uh]] || bx.ⵠⵠΔΔ.ⵠΔⲆ[f[Rl]] < f[As]) {
                c = Rs;
                break;
              }
            }
            if (c) {
              this.ᐃⵠΔᐃΔ.push(dx.ΔⲆᐃ[b.id]);
            }
          }
        }
        dx.ⲆⲆΔΔΔΔᐃ();
        dx.ᐃⵠᐃⲆⲆᐃΔ();
        dx.ⲆⵠⲆᐃⲆᐃⵠ();
        dx.ⵠⲆⲆᐃⲆΔᐃ();
        dx.ⲆᐃⲆⵠΔᐃⲆ();
        dx.ᐃᐃΔΔΔᐃⵠ();
        dx.sign.ΔⲆⲆᐃⲆᐃᐃ();
      },
      ΔⵠⲆᐃΔⲆΔ: function () {
        this.id = -Ht;
        this.Δᐃᐃⵠᐃ = false;
        this.timeout.ⲆᐃⲆ = 0;
        this.timeout.ⲆⵠΔ = kl;
        this.ᐃⲆΔ();
      }
    };
    this.ⲆΔᐃᐃΔⵠⵠ = {
      message: undefined,
      ⵠΔᐃⵠ: vv
    };
    this.alert = {
      timeout: new ᐃⵠΔⵠ.ΔⲆΔᐃ(Sh, Oj, Ue, 0, ea, 0.3),
      text: "",
      label: null,
      ⵠΔᐃⵠ: sv,
      list: []
    };
    this.ⵠⵠΔᐃⵠ = {
      ΔⲆ: document.createElement("canvas"),
      ⲆⲆΔⵠᐃ: [],
      ᐃⲆΔ: true,
      translate: {
        x: Gr,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = ff.ⲆΔⲆΔ, c = Cq; c < b.length; c++) {
          if (b[c].ⲆⲆΔΔᐃ) {
            a.push({
              id: c,
              Ⲇⵠⵠᐃ: b[c].ⵠⲆΔⵠΔ
            });
          }
        }
        a.sort(function (a, b) {
          return b.Ⲇⵠⵠᐃ - a.Ⲇⵠⵠᐃ;
        });
        this.ⲆⲆΔⵠᐃ = [];
        for (c = vq; c < a.length && c < fg; c++) {
          this.ⲆⲆΔⵠᐃ.push(a[c].id);
        }
        this.ᐃⲆΔ = true;
      },
      ΔᐃΔⲆⵠ: function (a) {
        for (var b = ff.ⲆΔⲆΔ, c = qk; c < b.length; c++) {
          b[c].ⵠⲆΔⵠΔ = qk;
        }
        b[bx.id].ⵠⲆΔⵠΔ = ᐃⵠΔⵠ.ΔⲆᐃⲆᐃᐃᐃ(a[1]);
        this.ⲆⲆΔⵠᐃ = [];
        for (c = Tt; c < a.length; c += tg) {
          this.ⲆⲆΔⵠᐃ.push(a[c]);
          b[a[c]].ⵠⲆΔⵠΔ = ᐃⵠΔⵠ.ΔⲆᐃⲆᐃᐃᐃ(a[c + Fh]);
        }
        this.ᐃⲆΔ = nr;
      }
    };
    this.ⵠⵠΔᐃⵠ.ΔⲆ.width = rq * 180;
    this.ⵠⵠΔᐃⵠ.ΔⲆ.height = rq * 300;
    this.ⵠⵠΔᐃⵠ.Ⲇ = this.ⵠⵠΔᐃⵠ.ΔⲆ.getContext("2d");
    this.ᐃᐃᐃᐃᐃ = {
      open: Ao,
      input: document.getElementById("commandInput"),
      ᐃⵠΔⵠⲆⵠΔ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⲆⵠᐃⲆᐃᐃⵠΔᐃ: function (a) {
        this.ᐃⵠΔⵠⲆⵠΔ.innerHTML += a;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(ro / qd - 300) + "px";
        this.style.top = Math.floor(so / Zt - 250) + "px";
      },
      ᐃΔΔΔⵠⵠΔⵠⵠ: function () {
        this.ᐃⵠΔⵠⲆⵠΔ.innerHTML = "";
      },
      ⲆⲆΔᐃⲆ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ⵠⵠⵠΔⵠ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = rl; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % Qt == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ᐃΔⲆⵠΔ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⲆⵠᐃⲆᐃᐃⵠΔᐃ(f);
        this.ⵠⵠⲆᐃΔΔⵠΔΔ();
      },
      ⵠⵠⲆᐃΔΔⵠΔΔ: function () {
        this.ᐃⵠΔⵠⲆⵠΔ.scrollTop = this.ᐃⵠΔⵠⲆⵠΔ.scrollHeight;
      },
      ⵠⵠⲆᐃᐃΔⵠ: function (a) {
        switch (a) {
          case "clean":
            this.ᐃΔΔΔⵠⵠΔⵠⵠ();
            return ra;
          case "list":
            var b = "";
            for (var c = ff.ⲆΔⲆΔ, d = Qs; d < c.length; d++) {
              var e = c[d];
              if (e.ⲆⲆΔΔᐃ) {
                b += e.ⵠᐃΔⵠⲆ + " <span style=\"color:green\">#" + d + "</span><br />";
              }
            }
            this.ᐃΔⲆⵠΔ("list", Ok, "List all connected players", b);
            return A;
          case "weapon-list":
            this.ᐃΔⲆⵠΔ("Weapons", 1, "List all weapons in the game", this.ⵠⵠⵠΔⵠ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ᐃΔⲆⵠΔ("Tools", Fh, "List all tools in the game", this.ⵠⵠⵠΔⵠ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ᐃΔⲆⵠΔ("Survival Items", Gs, "List all survival items in the game", this.ⵠⵠⵠΔⵠ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ᐃΔⲆⵠΔ("Resources", 1, "List all resources in the game", this.ⵠⵠⵠΔⵠ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return true;
          case "food-list":
            this.ᐃΔⲆⵠΔ("Food", _b, "List all food in the game", this.ⵠⵠⵠΔⵠ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return true;
          case "hat-list":
            this.ᐃΔⲆⵠΔ("Hats", Ue, "List all hats in the game", this.ⵠⵠⵠΔⵠ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return U;
          case "building-list":
            this.ᐃΔⲆⵠΔ("Buildings", 1, "List all buildings in the game", this.ⵠⵠⵠΔⵠ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return wq;
          case "biome-list":
            this.ᐃΔⲆⵠΔ("Biomes list", Ok, "List all available biomes in the game", this.ⵠⵠⵠΔⵠ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return Xj;
          case "help-config":
            this.ᐃΔⲆⵠΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return true;
          case "pos":
            c = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
            d = 0;
            for (; d < c.length; d++) {
              var f = c[d];
              if (f.ΔΔΔⵠ === bx.id) {
                this.ᐃΔⲆⵠΔ("pos", 1, "Your position is " + Math.floor(f.x / hl) + ":" + Math.floor(f.y / Vn));
                return Qn;
              }
            }
            break;
          case "help-admin":
            this.ᐃΔⲆⵠΔ("help-admin", Ag, "List all available commands for admin only", this.ⵠⵠⵠΔⵠ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return en;
          case "help":
            this.ᐃΔⲆⵠΔ("help", 1, "List all available commands", this.ⵠⵠⵠΔⵠ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ⲆⵠⵠΔⵠⵠΔⲆⲆ: function () {
        if (!this.open) {
          this.open = nr;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ᐃⲆᐃΔⲆᐃⲆ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⵠⵠⲆᐃᐃΔⵠ(a)) {
            ⵠⵠⵠⲆ.ⵠⵠΔΔⲆᐃᐃΔⵠ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ᐃⵠⵠΔⲆ = {
      open: Sk,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(ro / 2 - 150) + "px";
        this.style.top = Math.floor(so / Zt + 80) + "px";
      },
      ⲆⲆΔᐃⲆ: function () {
        this.open = Fq;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (bx.alert.text) {
              bx.alert.list.push(b);
            } else {
              bx.alert.text = b;
            }
            dx.ⲆⵠΔⵠᐃⵠⵠ = Fj;
          } else {
            dx.ⲆⵠΔⵠᐃⵠⵠ = 1;
          }
        }
      },
      ⵠⵠⲆᐃᐃΔⵠ: function (a) {
        if (a.charAt(Gr) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = Gs; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return true;
        }
        return false;
      },
      ΔⲆᐃⵠΔ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⵠⵠⲆᐃᐃΔⵠ(a)) {
              ⵠⵠⵠⲆ.ⵠⵠⵠⵠⲆⵠΔⲆΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⵠⲆⵠΔᐃⲆᐃ = {
      ΔⲆΔⵠᐃ: [],
      ᐃⲆΔ: function (a) {
        a.y += xf * 80 * a.Ⲇⵠⵠᐃ;
        a.x += xf * 80 * a.c;
        a.ᐃΔⵠⵠⵠ -= xf / 6;
        if (a.ᐃΔⵠⵠⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + xf * dt, 1);
        } else {
          a.alpha = Math.max(a.alpha - xf * Ht, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min(Ur.ⲆⲆΔΔΔⲆᐃ * (ro / 1366), Ur.ⲆⲆΔΔΔⲆᐃ + 10) * Math.max(Math.min(ff.ᐃⲆΔⲆⵠ + 1000, 3000) / 3000, ms));
        if (this.ΔⲆΔⵠᐃ.length < b) {
          var c = Math.floor(Math.random() * Ur.ⵠⵠᐃⲆᐃⲆⲆ);
          var d = -bx.ᐃᐃⵠ.x + Math.floor(Math.random() * bx.ᐃᐃⵠ.w);
          var e = -bx.ᐃᐃⵠ.y + Math.floor(Math.random() * bx.ᐃᐃⵠ.ⵠΔⵠ);
          var f = Math.random(Math.PI);
          this.ΔⲆΔⵠᐃ.push(new Bw(c, d, e, f));
        }
      }
    };
    this.ᐃΔΔⲆⲆⲆⲆ = Gr;
    this.ⵠⵠΔⵠᐃ = qn;
    this.ⵠⲆᐃᐃᐃ = {
      ΔⲆΔⵠᐃ: [],
      ΔᐃⲆⵠᐃ: 0,
      ⲆᐃⲆᐃⲆ: 0,
      ᐃⲆΔ: function (a) {
        a.y += xf * (200 + this.ⲆᐃⲆᐃⲆ * 800) * a.Ⲇⵠⵠᐃ;
        a.x += xf * (200 + this.ⲆᐃⲆᐃⲆ * 800) * a.c;
        a.ᐃΔⵠⵠⵠ -= xf / wh;
        if (a.ᐃΔⵠⵠⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + xf * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - xf * 1, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⲆᐃⲆᐃⲆ + 0.1) * Ur.ⲆⲆΔΔⵠᐃⵠ * (ro / 1366), (this.ⲆᐃⲆᐃⲆ + 0.1) * Ur.ⲆⲆΔΔⵠᐃⵠ + Yt) * Math.max(Math.min(ff.ⵠⵠᐃΔΔ + 1000, 3000) / 3000, ur));
        if (this.ΔⲆΔⵠᐃ.length < b) {
          var c = Math.floor(Math.random() * Ur.ⵠⵠᐃⲆᐃⲆⲆ);
          var d = -bx.ᐃᐃⵠ.x + Math.floor(Math.random() * bx.ᐃᐃⵠ.w);
          var e = -bx.ᐃᐃⵠ.y + Math.floor(Math.random() * bx.ᐃᐃⵠ.ⵠΔⵠ);
          var f = Math.random(Math.PI);
          if (bx.ⵠⲆᐃᐃᐃ.ΔᐃⲆⵠᐃ !== 0) {
            d -= bx.ᐃᐃⵠ.w / 2;
          }
          this.ΔⲆΔⵠᐃ.push(new Bw(c, d, e, f));
        }
      }
    };
    this.ⵠΔΔⵠⵠ = {
      ΔⲆΔⵠᐃ: [],
      ΔᐃⲆⵠᐃ: Tg,
      ⲆᐃⲆᐃⲆ: 0,
      ᐃⲆΔ: function (a) {
        if (Af.ⵠⲆΔⲆⲆΔⵠ()) {
          a.y += xf * a.ⲆᐃⲆⲆⲆ * (5.5 + this.ⲆᐃⲆᐃⲆ * 10);
        } else {
          a.y += xf * a.ⲆᐃⲆⲆⲆ * (Jn + Ln * this.ⲆᐃⲆᐃⲆ);
        }
        a.ᐃΔⵠⵠⵠ -= xf / lt;
        if (Af.ⲆΔⵠΔᐃᐃⵠ()) {
          a.x += xf * (Ms + this.ⲆᐃⲆᐃⲆ * 400);
        } else if (Af.ⲆᐃΔⲆᐃΔⵠ()) {
          a.x -= xf * (130 - this.ⲆᐃⲆᐃⲆ * 400);
        } else {
          a.x -= xf * (30 - this.ⲆᐃⲆᐃⲆ * 400);
        }
        if (a.ᐃΔⵠⵠⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + xf * 3, Fh);
        } else {
          a.alpha = Math.max(a.alpha - xf * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⲆᐃⲆᐃⲆ * 1.5 + 0.5) * Ur.ⲆⵠⲆΔⵠⲆⲆ * (ro / 1366), (this.ⲆᐃⲆᐃⲆ * 1.5 + 0.5) * Ur.ⲆⵠⲆΔⵠⲆⲆ + 10) * Math.max(Math.min(ff.ᐃⲆⲆᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ΔⲆΔⵠᐃ.length < b) {
          var c = Math.floor(Math.random() * Ur.ⵠΔᐃΔᐃⵠΔ);
          var d = -bx.ᐃᐃⵠ.x + Math.floor(Math.random() * bx.ᐃᐃⵠ.w);
          var e = -bx.ᐃᐃⵠ.y + Math.floor(Math.random() * 400 * rq - rq * 200);
          this.ΔⲆΔⵠᐃ.push(new Bw(c, d, e, Qs));
        }
      }
    };
    this.ΔΔⲆΔ = [];
    for (var f = 0; _g > f; f++) {
      this.ΔΔⲆΔ.push(new c());
    }
  }
  function Mw() {
    Math.random();
    return "d";
  }
  function Nw() {
    Math.random();
    return "n";
  }
  function Ow() {
    Math.random();
    return "a";
  }
  function Pw() {
    Math.random();
    return "p";
  }
  function Pw() {
    Math.random();
    return "p";
  }
  function Gw() {
    Math.random();
    return "o";
  }
  function Ow() {
    Math.random();
    return "a";
  }
  function Qw(a, b, c, d, e) {
    ek(Ys, a, b, c, d, e);
    return ((123 + (tw($s[0], $s[Ej], $s[2]) ^ Xs($s[X], $s[_g], $s[ms], $s[As], $s[2], $s[Z]))) * 48271 + 0) % 2147483647;
  }
  ᐃⲆⲆΔᐃΔΔᐃⵠ = j;
  setTimeout(function a() {
    var b = Nw() + Ow() + Ew() + Iw();
    Math.random();
    var c = "W" + Kw() + (Math.random(), "b") + (Math.random(), "S") + Gw() + (Math.random(), "c") + (Math.random(), "k") + Kw() + Ew();
    if (-_b === kj[c].toString().indexOf(b)) {
      Math.floor = function () {
        return Math.round() + Ej;
      };
    }
    var d = Hw() + Kw() + Nw() + Mw();
    var e = Pw() + Jw() + Gw() + Ew() + Gw() + Ew() + (Math.random(), "y") + Pw() + Kw();
    if (-Fh === kj[c][e][d].toString().indexOf(b)) {
      Math.floor = function () {
        return Math.round() + Gs;
      };
    }
    c = Mw() + Jw() + Ow() + (Math.random(), "w") + (Math.random(), "I") + (Math.random(), "m") + Ow() + Fw() + Kw();
    d = Dw() + Ow() + Nw() + (Math.random(), "v") + Ow() + Hw() + (Math.random(), "R") + Kw() + Nw() + Mw() + Kw() + Jw() + Iw() + Nw() + Fw() + Dw() + Gw() + Nw() + Ew() + Kw() + (Math.random(), "x") + Ew() + (Math.random(), "2") + (Math.random(), "D");
    if (kj[d][e][c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + As;
      };
    }
    setTimeout(a, 100000);
  }, 100000);
  function Rw(b, c, d, e, f, g) {
    dk(Ys, b, c, d, e, f, g);
    const h = km($s[0], $s[Gs], $s[2], $s[3], $s[4], $s[5]);
    const a = km($s[0], $s[As], $s[hc], $s[mt], $s[4], $s[xh]);
    return (0 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> Ih & io)) + (8 << ((h ^ a) >> Jk & 255)) + (16 << ((h ^ a) >> 24 & 255));
  }
  function Sw(b, c, d, e) {
    const f = ~(b & 893) & (b | 893);
    const g = c ^ 18927;
    const i = ~(d & 34221) & 34221 | ~(d & 34221) & d;
    const a = ~(e & 30877) & (e | 30877);
    const j = Vw(f, g, i, a);
    vf(f, g, i, a);
    return ~(j & 44978) & j | ~(j & 44978) & 44978;
  }
  function Tw(b, c, d, e, f, g) {
    const i = (8 << (b & 255)) + (16 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (24 << (b >> 24 & 255));
    const a = (1013904223 + (23298 + g) * 1664525) % 4294967296;
    const j = If(i, ~(c & 7251) & c | ~(c & 7251) & 7251, d ^ 13387, (24 << (e >> 8 & 255)) + (0 << (e >> 16 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e & 255)), ~(f & 35796) & (f | 35796));
    rf(a, i);
    return j ^ 27579;
  }
  function Uw(c, f) {
    var k = this;
    this.ΔⲆ = c;
    this.Ⲇ = f;
    if (kj.navigator.userAgent.indexOf("Edge") > -1) {
      this.ΔᐃᐃⵠᐃᐃΔ = "default";
      this.ⵠⲆΔⲆⵠⵠᐃ = "pointer";
    } else {
      this.ΔᐃᐃⵠᐃᐃΔ = "url('img/cursor0.png'), default";
      this.ⵠⲆΔⲆⵠⵠᐃ = "url('img/cursor1.png'), pointer";
    }
    this.ⲆⵠΔⵠᐃⵠⵠ = Zq;
    this.ⵠⲆⲆΔᐃⵠᐃ = Ag;
    this.ᐃᐃⲆⲆⵠⲆΔ = Ej;
    this.ΔⲆⵠⲆⵠᐃⵠ = 1;
    this.ᐃΔΔΔⵠⲆᐃⲆΔ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ᐃΔΔΔ = {
      ⲆᐃᐃᐃΔᐃⲆ: kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔⵠⵠⵠⲆ]),
      ᐃᐃΔⵠⲆⲆⲆ: kw(60, 60, 0, ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ])
    };
    this.sign = {
      open: Y,
      ΔΔⵠᐃⲆᐃᐃⲆΔ: 0,
      ᐃⵠⲆⲆⲆᐃΔ: document.getElementById("sign_object"),
      ᐃⲆᐃⵠΔⲆⵠ: Ih,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: kw(60, 60, 0, ΔΔ[Ur.ᐃⲆᐃΔΔΔⲆ]),
      ΔⲆⲆᐃⲆᐃᐃ: function () {
        var a = Math.floor(Math.floor((Gl + bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ.length) / 4) * (10 + ΔΔ[Ur.ΔⲆᐃⵠⲆⲆⲆ][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 150) + "px";
        this.style.top = Math.floor(pq - 115) + "px";
      },
      ⲆⲆΔᐃⲆ: function () {
        dx.sign.style.display = "none";
        dx.sign.open = false;
      },
      select: function () {
        dx.sign.open = !dx.sign.open;
        if (dx.sign.open) {
          dx.sign.style.display = "inline-block";
        } else {
          dx.sign.style.display = "none";
        }
      },
      ok: function () {
        ⵠⵠⵠⲆ.ᐃᐃᐃᐃⲆⵠΔΔⲆ(bx.sign.ⲆΔΔᐃᐃ, dx.sign.ᐃⲆᐃⵠΔⲆⵠ);
        dx.sign.select();
      },
      up: function () {
        dx.sign.ᐃⲆᐃⵠΔⲆⵠ = dx.sign.ᐃⲆᐃⵠΔⲆⵠ === 0 ? sw.ⲆᐃⲆⵠⵠΔⲆ - 1 : dx.sign.ᐃⲆᐃⵠΔⲆⵠ - Ok;
        dx.sign.ᐃⵠⲆⲆⲆᐃΔ.src = "./img/sign" + dx.sign.ᐃⲆᐃⵠΔⲆⵠ + ".png";
      },
      down: function () {
        dx.sign.ᐃⲆᐃⵠΔⲆⵠ = (dx.sign.ᐃⲆᐃⵠΔⲆⵠ + Eo) % sw.ⲆᐃⲆⵠⵠΔⲆ;
        dx.sign.ᐃⵠⲆⲆⲆᐃΔ.src = "./img/sign" + dx.sign.ᐃⲆᐃⵠΔⲆⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Fq);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, hr);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, Rn);
    this.ⲆᐃⵠⵠΔ = {
      open: false,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ΔⵠΔᐃⵠ: 1,
        b: 1,
        a: 3,
        ⵠΔΔᐃᐃ: Ur.ΔⲆᐃⵠⲆⲆⲆ
      }, {
        id: Oj,
        name: "stone",
        ΔⵠΔᐃⵠ: 1,
        b: 1,
        a: rg,
        ⵠΔΔᐃᐃ: Ur.ᐃᐃⵠⵠⵠⲆⵠ
      }, {
        id: 2,
        name: "gold",
        ΔⵠΔᐃⵠ: Al,
        b: zs,
        a: Vi,
        ⵠΔΔᐃᐃ: Ur.ⲆⲆΔᐃΔⵠⵠ
      }, {
        id: Sg,
        name: "diamond",
        ΔⵠΔᐃⵠ: 4,
        b: ea,
        a: Gs,
        ⵠΔΔᐃᐃ: Ur.ᐃΔΔᐃΔΔⵠ
      }, {
        id: Ph,
        name: "amethyst",
        ΔⵠΔᐃⵠ: nk,
        b: 8,
        a: jq,
        ⵠΔΔᐃᐃ: Ur.ⵠⵠⲆΔⵠⲆⵠ
      }, {
        id: xh,
        name: "reidite",
        ΔⵠΔᐃⵠ: mb,
        b: Fk,
        a: 1,
        ⵠΔΔᐃᐃ: Ur.ⲆᐃⵠⵠΔⲆᐃ
      }, {
        id: 6,
        name: "pumpkin_seed",
        ΔⵠΔᐃⵠ: 10,
        b: 10,
        a: Eo,
        ⵠΔΔᐃᐃ: Ur.ⵠᐃⵠΔΔⵠⵠ
      }, {
        id: or,
        name: "carrot_seed",
        ΔⵠΔᐃⵠ: 16,
        b: 16,
        a: 1,
        ⵠΔΔᐃᐃ: Ur.ⲆΔⲆⲆⵠᐃᐃ
      }, {
        id: 8,
        name: "tomato_seed",
        ΔⵠΔᐃⵠ: 20,
        b: 20,
        a: 1,
        ⵠΔΔᐃᐃ: Ur.ΔΔⲆᐃᐃᐃⲆ
      }, {
        id: 9,
        name: "thornbush_seed",
        ΔⵠΔᐃⵠ: 30,
        b: 30,
        a: 1,
        ⵠΔΔᐃᐃ: Ur.ΔⲆⲆᐃⵠᐃᐃ
      }, {
        id: ws,
        name: "garlic_seed",
        ΔⵠΔᐃⵠ: 40,
        b: 40,
        a: 1,
        ⵠΔΔᐃᐃ: Ur.ᐃΔⲆⲆⵠⲆⵠ
      }, {
        id: ma,
        name: "watermelon_seed",
        ΔⵠΔᐃⵠ: 60,
        b: 60,
        a: 1,
        ⵠΔΔᐃᐃ: Ur.ⲆΔⵠⲆⲆⲆⲆ
      }],
      button: kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ]),
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 450) + "px";
        this.style.top = Math.floor(pq - 270) + "px";
      },
      select: function () {
        dx.ⲆᐃⵠⵠΔ.open = !dx.ⲆᐃⵠⵠΔ.open;
        if (dx.ⲆᐃⵠⵠΔ.open) {
          dx.ⲆᐃⵠⵠΔ.style.display = "inline-block";
        } else {
          dx.ⲆᐃⵠⵠΔ.style.display = "none";
        }
      },
      ⲆⲆΔᐃⲆ: function () {
        dx.ⲆᐃⵠⵠΔ.style.display = "none";
        dx.ⲆᐃⵠⵠΔ.open = false;
      },
      ᐃΔᐃᐃⵠⲆⲆ: function () {
        ⵠⵠⵠⲆ.Δⵠᐃᐃⵠᐃᐃᐃᐃ(this.ⵠᐃΔᐃⲆⲆᐃ);
      },
      ΔⵠᐃΔⵠ: function () {
        this.id;
        if (this.ⵠᐃΔᐃⲆⲆᐃ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⵠᐃΔᐃⲆⲆᐃ.b);
          this.ⵠᐃΔᐃⲆⲆᐃ.ΔⵠΔᐃⵠ = a;
          document.getElementById(this.ⵠᐃΔᐃⲆⲆᐃ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⵠᐃΔᐃⲆⲆᐃ.a);
          this.ⵠᐃΔᐃⲆⲆᐃ.ΔⵠΔᐃⵠ = a;
          document.getElementById(this.ⵠᐃΔᐃⲆⲆᐃ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⲆᐃⵠⵠΔ.ⲆⲆΔᐃⲆ, false);
    var e = [["mouseup", this.ⲆᐃⵠⵠΔ.ᐃΔᐃᐃⵠⲆⲆ, "buy_"], ["click", this.ⲆᐃⵠⵠΔ.ΔⵠᐃΔⵠ, ""], ["change", this.ⲆᐃⵠⵠΔ.ΔⵠᐃΔⵠ, ""], ["keypress", this.ⲆᐃⵠⵠΔ.keypress, ""]];
    for (var g = tj; g < this.ⲆᐃⵠⵠΔ.items.length; g++) {
      var i = this.ⲆᐃⵠⵠΔ.items[g];
      document.getElementById(i.name + "_market").src = ΔΔ[i.ⵠΔΔᐃᐃ][0].ⵠⲆⲆΔᐃ === undefined ? ΔΔ[i.ⵠΔΔᐃᐃ][Gr].src : ΔΔ[i.ⵠΔΔᐃᐃ][0].ⵠⲆⲆΔᐃ;
      if (Al === i.a) {
        document.getElementById(i.name + "_trad_number").innerHTML = i.b;
        document.getElementById(i.name + "_number").value = 1;
        document.getElementById(i.name + "_number").step = jq;
        document.getElementById(i.name + "_number").min = jq;
        document.getElementById(i.name + "_number").max = Math.floor(Lo / i.b);
      } else {
        document.getElementById(i.name + "_trad_number").innerHTML = 1;
        document.getElementById(i.name + "_number").value = i.a;
        document.getElementById(i.name + "_number").step = i.a;
        document.getElementById(i.name + "_number").min = i.a;
      }
      document.getElementById("buy_" + i.name + "_number").ⵠᐃΔᐃⲆⲆᐃ = i;
      document.getElementById(i.name + "_number").ⵠᐃΔᐃⲆⲆᐃ = i;
      for (var m = gr; m < e.length; m++) {
        document.getElementById(e[m][Tt] + i.name + "_number").addEventListener(e[m][0], e[m][Al], Sh);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⲆⲆᐃΔⵠ: document.getElementById("agree_ing").style,
      ΔΔⲆⲆⲆΔⵠ: document.getElementById("cancel_agree_ing").style,
      ᐃᐃⲆᐃᐃΔᐃ: document.getElementById("quest_agree_ing").style,
      ΔⲆⵠΔᐃⵠⵠ: document.getElementById("spectator_agree_ing").style,
      ᐃⵠΔⵠⲆᐃΔ: document.getElementById("auto_feed_agree_ing").style,
      ᐃᐃᐃⲆᐃΔⲆ: document.getElementById("info_agree_ing").style,
      ⵠⵠⲆⲆΔⵠⲆ: document.getElementById("pixelated_agree_ing").style,
      button: kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ]),
      ⲆⲆΔΔⲆᐃᐃΔⲆ: function () {
        dx.options.open = !dx.options.open;
        if (dx.options.open) {
          dx.options.style.display = "inline-block";
        } else {
          dx.options.style.display = "none";
        }
      },
      ΔΔᐃⲆᐃⵠⲆⲆⵠ: function () {
        pf.ΔⲆⵠᐃΔᐃΔ();
      },
      ⲆᐃΔᐃⲆⵠⵠᐃᐃ: function () {
        pf.ᐃᐃⲆⲆᐃⲆⵠ();
      },
      high: function () {
        pf.ⵠᐃᐃΔᐃΔⵠΔⵠ();
      },
      low: function () {
        pf.ⲆⵠⵠᐃⵠⵠΔᐃΔ();
      },
      ΔᐃⵠⵠΔ: function () {
        dx.ⲆᐃⲆᐃ.ΔᐃⵠⵠΔ();
      },
      ΔⲆⵠⵠⵠΔΔⵠⵠ: function () {
        dx.ᐃⵠⵠΔⵠ.ΔᐃⵠⵠΔ();
      },
      ᐃⵠᐃⵠⲆⲆⲆΔⵠ: function () {
        dx.ⲆᐃⵠⲆ.ΔᐃⵠⵠΔ();
      },
      ⲆⵠᐃᐃⵠⲆⵠᐃᐃ: function () {
        bx.ⲆⲆⲆΔⲆ.ⵠΔΔⵠᐃΔΔ();
      },
      ⵠΔᐃᐃΔⵠᐃΔΔ: function () {
        bx.ΔⲆᐃΔΔ.ⵠΔΔⵠᐃΔΔ();
      },
      ⲆⲆΔᐃⲆ: function () {
        dx.options.style.display = "none";
        dx.options.open = d;
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 235) + "px";
        this.style.top = Math.floor(pq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔᐃⲆᐃⵠⲆⲆⵠ, false);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆᐃΔᐃⲆⵠⵠᐃᐃ, false);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆⲆΔᐃⲆ, Ao);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔᐃⵠⵠΔ, _i);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠᐃⵠⲆⲆⲆΔⵠ, false);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆⵠⵠⵠΔΔⵠⵠ, En);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠᐃᐃⵠⲆⵠᐃᐃ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⵠΔᐃᐃΔⵠᐃΔΔ, na);
    this.ᐃⵠⵠΔⵠ = {
      open: false,
      ⵠⲆⵠΔⲆ: ⲆⵠΔΔ.get("starve_cancel") ? ⲆⵠΔΔ.get("starve_cancel") === "0" ? Qs : Ag : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⲆⲆᐃΔⵠ: document.getElementById("cancel_agree").style,
      button: Qs,
      Δⵠ: 0,
      ⲆⲆΔᐃⲆ: function () {
        dx.ᐃⵠⵠΔⵠ.style.display = "none";
        dx.ᐃⵠⵠΔⵠ.open = false;
      },
      ᐃΔΔᐃⵠΔⲆ: function () {
        if (bx.ⵠⲆⵠᐃ.Δᐃᐃⵠᐃ) {
          ⵠⵠⵠⲆ.ⲆⲆⵠⵠⵠⲆⵠΔΔ();
        }
        dx.ᐃⵠⵠΔⵠ.ⲆⲆΔᐃⲆ();
      },
      ΔᐃⵠⵠΔ: function () {
        if (dx.ᐃⵠⵠΔⵠ.ⵠⲆⵠΔⲆ) {
          ⲆⵠΔΔ.set("starve_cancel", "0");
          dx.ᐃⵠⵠΔⵠ.ⲆⲆᐃΔⵠ.display = "inline-block";
          dx.options.ΔΔⲆⲆⲆΔⵠ.display = "none";
        } else {
          ⲆⵠΔΔ.set("starve_cancel", "1");
          dx.ᐃⵠⵠΔⵠ.ⲆⲆᐃΔⵠ.display = "none";
          dx.options.ΔΔⲆⲆⲆΔⵠ.display = "inline-block";
        }
        dx.ᐃⵠⵠΔⵠ.ⵠⲆⵠΔⲆ = !dx.ᐃⵠⵠΔⵠ.ⵠⲆⵠΔⲆ;
      },
      ᐃⵠᐃΔᐃᐃᐃ: function () {
        if (this.ⵠⲆⵠΔⲆ) {
          this.style.display = "inline-block";
          this.open = en;
        } else {
          this.ᐃΔΔᐃⵠΔⲆ();
        }
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 235) + "px";
        this.style.top = Math.floor(pq - 130) + "px";
      }
    };
    this.ᐃⵠⵠΔⵠ.id.oncontextmenu = function () {
      return false;
    };
    this.ᐃⵠⵠΔⵠ.ⲆⲆᐃΔⵠ.display = "none";
    if (this.ᐃⵠⵠΔⵠ.ⵠⲆⵠΔⲆ) {
      this.options.ΔΔⲆⲆⲆΔⵠ.display = "inline-block";
    } else {
      this.options.ΔΔⲆⲆⲆΔⵠ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃⵠⵠΔⵠ.ᐃΔΔᐃⵠΔⲆ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃⵠⵠΔⵠ.ⲆⲆΔᐃⲆ, false);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃⵠⵠΔⵠ.ΔᐃⵠⵠΔ, Ps);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, vl);
    this.ᐃΔᐃΔⲆⲆⲆ = {
      ⵠⲆⵠΔⲆ: ⲆⵠΔΔ.get("starve_aliasing") ? ⲆⵠΔΔ.get("starve_aliasing") === "0" ? _a : 1 : _b,
      ⵠᐃⲆᐃⲆⵠᐃ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ΔᐃⵠⵠΔ: function () {
        if (dx.ᐃΔᐃΔⲆⲆⲆ.ⵠⲆⵠΔⲆ === gr) {
          ⲆⵠΔΔ.set("starve_aliasing", "1");
          dx.ᐃΔᐃΔⲆⲆⲆ.ⵠᐃⲆᐃⲆⵠᐃ(Al);
          dx.options.ⵠⵠⲆⲆΔⵠⲆ.display = "inline-block";
        } else {
          ⲆⵠΔΔ.set("starve_aliasing", "0");
          dx.ᐃΔᐃΔⲆⲆⲆ.ⵠᐃⲆᐃⲆⵠᐃ(qn);
          dx.options.ⵠⵠⲆⲆΔⵠⲆ.display = "none";
        }
        dx.ᐃΔᐃΔⲆⲆⲆ.ⵠⲆⵠΔⲆ = (dx.ᐃΔᐃΔⲆⲆⲆ.ⵠⲆⵠΔⲆ + _b) % lt;
      }
    };
    if (this.ᐃΔᐃΔⲆⲆⲆ.ⵠⲆⵠΔⲆ === _b) {
      this.options.ⵠⵠⲆⲆΔⵠⲆ.display = "inline-block";
    } else {
      this.ᐃΔᐃΔⲆⲆⲆ.ⵠᐃⲆᐃⲆⵠᐃ(ne);
      this.options.ⵠⵠⲆⲆΔⵠⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃΔᐃΔⲆⲆⲆ.ΔᐃⵠⵠΔ, _i);
    this.ᐃⵠΔⵠΔ = {
      ⵠⲆⵠΔⲆ: ⲆⵠΔΔ.get("starve_info_box") && ⲆⵠΔΔ.get("starve_info_box") === "0" ? 0 : 1,
      display: qk,
      x: 0,
      y: 0,
      id: Fj,
      ⵠⲆⵠᐃ: 0,
      ΔᐃⵠⵠΔ: function () {
        if (dx.ᐃⵠΔⵠΔ.ⵠⲆⵠΔⲆ === Qs) {
          ⲆⵠΔΔ.set("starve_info_box", "1");
          dx.options.ᐃᐃᐃⲆᐃΔⲆ.display = "inline-block";
        } else {
          ⲆⵠΔΔ.set("starve_info_box", "0");
          dx.options.ᐃᐃᐃⲆᐃΔⲆ.display = "none";
        }
        dx.ᐃⵠΔⵠΔ.ⵠⲆⵠΔⲆ = (dx.ᐃⵠΔⵠΔ.ⵠⲆⵠΔⲆ + 1) % 2;
      },
      ⲆᐃᐃⲆ: function (a, b, c) {
        if (a && this.ⵠⲆⵠΔⲆ) {
          this.display = 1;
          this.id = c === Nl ? b.id : Ng[b.id].ΔᐃⲆⲆ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⵠⲆⵠᐃ = c;
        }
        return a;
      }
    };
    if (ag === this.ᐃⵠΔⵠΔ.ⵠⲆⵠΔⲆ) {
      this.options.ᐃᐃᐃⲆᐃΔⲆ.display = "inline-block";
    } else {
      this.options.ᐃᐃᐃⲆᐃΔⲆ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃⵠΔⵠΔ.ΔᐃⵠⵠΔ, yj);
    if (ⲆⵠΔΔ.get("starve_scale")) {
      To = Number(ⲆⵠΔΔ.get("starve_scale"));
      document.getElementById("input_ratio").value = To;
      To *= za / ya;
      Aa();
    }
    this.ᐃᐃΔΔᐃΔⲆ = function () {
      ⲆⵠΔΔ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      To = document.getElementById("input_ratio").value * (za / ya);
      Aa();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ᐃᐃΔΔᐃΔⲆ, false);
    this.ⲆᐃⲆᐃ = {
      open: Ps,
      ⵠⲆⵠΔⲆ: ⲆⵠΔΔ.get("starve_safe") ? ⲆⵠΔΔ.get("starve_safe") === "0" ? qk : ag : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⲆⲆᐃΔⵠ: document.getElementById("agree").style,
      button: 0,
      Δⵠ: ur,
      ⲆⲆΔᐃⲆ: function () {
        dx.ⲆᐃⲆᐃ.style.display = "none";
        dx.ⲆᐃⲆᐃ.open = En;
      },
      all: function () {
        if (!bx.ⲆᐃⲆΔΔ.wait) {
          if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < qk && bx.ⵠⲆⵠᐃ.id < qn && !bx.ᐃⲆΔΔᐃ.enabled) {
            ⵠⵠⵠⲆ.ᐃⲆⵠΔᐃⲆⲆⲆΔ(dx.ⲆᐃⲆᐃ.button);
          }
          dx.ⲆᐃⲆᐃ.ⲆⲆΔᐃⲆ();
        }
      },
      ⵠⲆᐃᐃ: function () {
        if (bx.ⵠⲆⵠᐃ.ᐃⲆᐃⲆΔ && !bx.ⲆᐃⲆΔΔ.wait) {
          if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && bx.ⵠⲆⵠᐃ.id < tj && !bx.ᐃⲆΔΔᐃ.enabled) {
            ⵠⵠⵠⲆ.ⲆⵠⵠᐃⲆⲆⵠΔᐃ(dx.ⲆᐃⲆᐃ.button);
          }
          dx.ⲆᐃⲆᐃ.ⲆⲆΔᐃⲆ();
        }
      },
      ΔⲆᐃⵠΔᐃⵠⵠᐃ: function () {
        if (!bx.ⲆᐃⲆΔΔ.wait) {
          if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && bx.ⵠⲆⵠᐃ.id < Tg && !bx.ᐃⲆΔΔᐃ.enabled) {
            ⵠⵠⵠⲆ.ⵠⵠⲆΔⲆⲆⵠⵠᐃ(dx.ⲆᐃⲆᐃ.button);
          }
          dx.ⲆᐃⲆᐃ.ⲆⲆΔᐃⲆ();
        }
      },
      ΔᐃⵠⵠΔ: function () {
        if (dx.ⲆᐃⲆᐃ.ⵠⲆⵠΔⲆ) {
          ⲆⵠΔΔ.set("starve_safe", "0");
          dx.ⲆᐃⲆᐃ.ⲆⲆᐃΔⵠ.display = "inline-block";
          dx.options.ⲆⲆᐃΔⵠ.display = "none";
        } else {
          ⲆⵠΔΔ.set("starve_safe", "1");
          dx.ⲆᐃⲆᐃ.ⲆⲆᐃΔⵠ.display = "none";
          dx.options.ⲆⲆᐃΔⵠ.display = "inline-block";
        }
        dx.ⲆᐃⲆᐃ.ⵠⲆⵠΔⲆ = !dx.ⲆᐃⲆᐃ.ⵠⲆⵠΔⲆ;
      },
      ᐃⵠᐃΔᐃᐃᐃ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ΔΔ[es[a].Ⲇⵠ][Tg].ⵠⲆⲆΔᐃ === qj ? ΔΔ[es[a].Ⲇⵠ][0].src : ΔΔ[es[a].Ⲇⵠ][0].ⵠⲆⲆΔᐃ;
        if (es[a].ⵠⲆᐃᐃ && !bx.ᐃⵠⲆⵠⲆ && bx.ⵠⲆⵠᐃ.ᐃⲆᐃⲆΔ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⵠⲆⵠΔⲆ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 235) + "px";
        this.style.top = Math.floor(pq - 175) + "px";
      }
    };
    this.ⲆᐃⲆᐃ.ⲆⲆᐃΔⵠ.display = "none";
    if (this.ⲆᐃⲆᐃ.ⵠⲆⵠΔⲆ) {
      this.options.ⲆⲆᐃΔⵠ.display = "inline-block";
    } else {
      this.options.ⲆⲆᐃΔⵠ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ⲆᐃⲆᐃ.ΔⲆᐃⵠΔᐃⵠⵠᐃ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ⲆᐃⲆᐃ.all, Y);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ⲆᐃⲆᐃ.ⵠⲆᐃᐃ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ⲆᐃⲆᐃ.ⲆⲆΔᐃⲆ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ⲆᐃⲆᐃ.ΔᐃⵠⵠΔ, false);
    this.ⵠⵠᐃⲆᐃ = {
      open: false,
      ᐃᐃⵠᐃᐃ: -1,
      button: kw(60, 60, 0, ΔΔ[Ur.ⵠΔΔⵠΔⲆΔ]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 300) + "px";
        this.style.top = Math.floor(pq - 215) + "px";
      },
      ⲆⲆΔᐃⲆ: function () {
        dx.ⵠⵠᐃⲆᐃ.open = false;
        dx.ⵠⵠᐃⲆᐃ.style.display = "none";
      },
      select: function () {
        dx.ⵠⵠᐃⲆᐃ.open = !dx.ⵠⵠᐃⲆᐃ.open;
        if (dx.ⵠⵠᐃⲆᐃ.open) {
          dx.ⵠⵠᐃⲆᐃ.style.display = "inline-block";
        } else {
          dx.ⵠⵠᐃⲆᐃ.style.display = "none";
        }
      },
      ᐃΔᐃᐃⵠⲆⲆ: function () {
        if (dx.ⵠⵠᐃⲆᐃ.ᐃᐃⵠᐃᐃ >= Cq) {
          ⵠⵠⵠⲆ.ⵠᐃⵠᐃᐃⵠⵠΔᐃ(dx.ⵠⵠᐃⲆᐃ.ᐃᐃⵠᐃᐃ);
          dx.ⵠⵠᐃⲆᐃ.ⲆⲆΔᐃⲆ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + dx.ⵠⵠᐃⲆᐃ.ᐃᐃⵠᐃᐃ);
          }
        }
      },
      ΔᐃΔⲆⵠ: function () {
        var a = bx.ⵠⵠᐃⲆᐃ.value;
        document.getElementById("points_bank").innerHTML = ᐃⵠΔⵠ.ΔⲆᐃΔⵠΔⵠ(a) + " points";
        for (var b = Fj; b < rw.length; b++) {
          if (rw[b].ΔᐃⲆΔⲆ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + As)).style.opacity = "1";
          }
        }
        for (b = Ej; b < Gq; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃΔⲆᐃΔΔΔⵠᐃ: function () {
        if (this.id.length > ys) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(th));
        }
        var b = rw[a - 1];
        if (bx.ⵠⵠᐃⲆᐃ.value >= b.ΔᐃⲆΔⲆ) {
          dx.ⵠⵠᐃⲆᐃ.ᐃᐃⵠᐃᐃ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          dx.ⵠⵠᐃⲆᐃ.ᐃᐃⵠᐃᐃ = -ie;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - Al][zs] !== bs.ᐃⵠⲆΔ) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ΔΔ[es[b[c - 1][Ej]].Ⲇⵠ][vq].ⵠⲆⲆΔᐃ === undefined ? ΔΔ[es[b[c - 1][Ej]].Ⲇⵠ][0].src : ΔΔ[es[b[c - 1][Oj]].Ⲇⵠ][rl].ⵠⲆⲆΔᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - j][Gr];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠⵠᐃⲆᐃ.ⲆⲆΔᐃⲆ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠⵠᐃⲆᐃ.ᐃΔᐃᐃⵠⲆⲆ, false);
    for (m = ie; m < 11; m++) {
      document.getElementById("starter" + m).addEventListener("mouseup", this.ⵠⵠᐃⲆᐃ.ᐃΔⲆᐃΔΔΔⵠᐃ, false);
    }
    this.ⲆᐃⵠⲆ = {
      open: false,
      ⵠⲆⵠΔⲆ: ⲆⵠΔΔ.get("starve_quests") ? ⲆⵠΔΔ.get("starve_quests") === "1" ? 1 : 0 : gr,
      button: kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆΔⵠⵠⵠ]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(oq - 420) + "px";
        this.style.top = Math.floor(pq - 270) + "px";
      },
      ⲆⲆΔᐃⲆ: function () {
        dx.ⲆᐃⵠⲆ.style.display = "none";
        dx.ⲆᐃⵠⲆ.open = false;
      },
      select: function () {
        dx.ⲆᐃⵠⲆ.open = !dx.ⲆᐃⵠⲆ.open;
        if (dx.ⲆᐃⵠⲆ.open) {
          dx.ⲆᐃⵠⲆ.style.display = "inline-block";
        } else {
          dx.ⲆᐃⵠⲆ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < ww.length; a++) {
          this.list[a] = _b;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ⲆΔⲆⵠⲆΔⲆ: 0,
      ᐃⲆΔΔⲆⵠΔ: Nl,
      ΔⲆⵠⵠⵠΔᐃⵠⵠ: function () {
        if (dx.ⲆᐃⵠⲆ.open) {
          var a = new Date().getTime();
          if (a - this.ⲆΔⲆⵠⲆΔⲆ >= 1000) {
            this.ⲆΔⲆⵠⲆΔⲆ = a;
            for (var b = gr; b < ww.length; b++) {
              if (dx.ⲆᐃⵠⲆ.list[b]) {
                var c = ww[b].time - (a - ff.Δⵠⵠⵠⵠ.ΔᐃΔⲆⵠ + dx.ⲆᐃⵠⲆ.ᐃⲆΔΔⲆⵠΔ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = ne; b < a.length; b++) {
          if (a[b] != zs) {
            dx.ⲆᐃⵠⲆ.ΔᐃᐃᐃⲆΔⵠ(b, a[b]);
          }
        }
      },
      ΔᐃᐃᐃⲆΔⵠ: function (a, b) {
        if (b === 3 && (a === Sl || a === 12)) {
          bx.ⵠⵠΔΔ.ⲆⵠⵠΔⲆᐃΔ(0, j);
          dx.ᐃⵠⲆⲆⵠⲆᐃ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        dx.ⲆᐃⵠⲆ.list[a] = 0;
      },
      modify: function (a, b) {
        dx.ⲆᐃⵠⲆ.ΔᐃᐃᐃⲆΔⵠ(a, b);
        if (dx.ⲆᐃⵠⲆ.ⵠⲆⵠΔⲆ) {
          dx.ⲆᐃⵠⲆ.open = true;
          dx.ⲆᐃⵠⲆ.style.display = "inline-block";
        }
      },
      ΔᐃⵠⵠΔ: function () {
        if (dx.ⲆᐃⵠⲆ.ⵠⲆⵠΔⲆ) {
          ⲆⵠΔΔ.set("starve_quests", "0");
          dx.options.ᐃᐃⲆᐃᐃΔᐃ.display = "none";
        } else {
          ⲆⵠΔΔ.set("starve_quests", "1");
          dx.options.ᐃᐃⲆᐃᐃΔᐃ.display = "inline-block";
        }
        dx.ⲆᐃⵠⲆ.ⵠⲆⵠΔⲆ = !dx.ⲆᐃⵠⲆ.ⵠⲆⵠΔⲆ;
      },
      ⲆⵠⵠΔⵠᐃⲆⵠᐃ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(ts) !== "" && b >= 0 && b <= lh) {
          a = a * 10 + b;
        }
        ⵠⵠⵠⲆ.ⵠᐃΔΔⵠΔᐃᐃⲆ(a);
      }
    };
    if (this.ⲆᐃⵠⲆ.ⵠⲆⵠΔⲆ) {
      this.options.ᐃᐃⲆᐃᐃΔᐃ.display = "inline-block";
    } else {
      this.options.ᐃᐃⲆᐃᐃΔᐃ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⲆᐃⵠⲆ.ⲆⲆΔᐃⲆ, d);
    for (m = 0; ww.length > m; m++) {
      document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ⲆᐃⵠⲆ.ⲆⵠⵠΔⵠᐃⲆⵠᐃ, false);
    }
    this.ⲆΔᐃⲆ = {
      open: Fq,
      button: kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ⵠᐃᐃⵠΔⵠⲆ: [],
        ⵠⲆⵠⵠΔⲆΔ: 0,
        ᐃⲆΔ: function () {
          this.style.left = Math.floor(oq - 335) + "px";
          this.style.top = Math.floor(pq - 215) + "px";
        },
        ⲆⲆΔᐃⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          dx.ⲆΔᐃⲆ.open = Rs;
        },
        ⲆⵠᐃⲆⵠΔⲆ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⵠⲆΔⲆ: function (a) {
          if ((b = this.ⵠᐃᐃⵠΔⵠⲆ[a]).ⲆⵠΔ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, aa); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ΔΔ[es[b[a][Qs]].Ⲇⵠ][Tg].ⵠⲆⲆΔᐃ === undefined ? ΔΔ[es[b[a][qk]].Ⲇⵠ][0].src : ΔΔ[es[b[a][_a]].Ⲇⵠ][0].ⵠⲆⲆΔᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][Zq];
            c++;
          }
          for (; c < wg; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⵠⲆⵠⵠΔⲆΔ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = qk; b < Ng.length; b++) {
            var d = Ng[b];
            if (a === d.ᐃΔΔ) {
              this.ⵠᐃᐃⵠΔⵠⲆ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ΔΔ[es[d.ΔᐃⲆⲆ].Ⲇⵠ][ne].ⵠⲆⲆΔᐃ === pl ? ΔΔ[es[d.ΔᐃⲆⲆ].Ⲇⵠ][ur].src : ΔΔ[es[d.ΔᐃⲆⲆ].Ⲇⵠ][ms].ⵠⲆⲆΔᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⵠⲆⲆΔⲆΔⵠ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ᐃⲆΔ: function () {
          this.style.left = Math.floor(oq - 285) + "px";
          this.style.top = Math.floor(pq - 170) + "px";
        },
        ⲆⲆΔᐃⲆ: function () {
          document.getElementById("home_craft").style.display = "none";
          dx.ⲆΔᐃⲆ.open = false;
        }
      },
      ⵠⲆᐃᐃⲆⵠⲆΔΔ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⲆΔᐃⲆ.ⵠⲆⲆΔⲆΔⵠ.ⲆⲆΔᐃⲆ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⲆΔᐃⲆ.list.ⲆⲆΔᐃⲆ, false);
    document.getElementById("backhome").addEventListener("mouseup", this.ⲆΔᐃⲆ.list.ⲆⵠᐃⲆⵠΔⲆ, false);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      dx.ⲆΔᐃⲆ.list.select(cs.ᐃⵠΔΔⵠ);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      dx.ⲆΔᐃⲆ.list.select(cs.ⵠᐃⵠⵠ);
    }, false);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      dx.ⲆΔᐃⲆ.list.select(cs.ⵠⵠⵠⵠΔ);
    }, yj);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      dx.ⲆΔᐃⲆ.list.select(cs.ΔⵠᐃⲆΔ);
    }, Sk);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      dx.ⲆΔᐃⲆ.list.select(cs.ⵠᐃΔΔΔ);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      dx.ⲆΔᐃⲆ.list.select(cs.ⲆᐃⲆⵠΔ);
    }, Ta);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(0);
    }, xg);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(1);
    }, Fq);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(3);
    }, Rs);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(4);
    }, Fq);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(jt);
    }, na);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(6);
    }, _i);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ($j);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(ls);
    }, Ta);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(lh);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(ih);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(Uq);
    }, Ta);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(Tl);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(13);
    }, Fq);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(14);
    }, Ao);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(nq);
    }, Fq);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(nh);
    }, false);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(18);
    }, Fq);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(Dg);
    }, Y);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(20);
    }, false);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(21);
    }, false);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(22);
    }, Ps);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(23);
    }, Fq);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(24);
    }, yj);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(27);
    }, _i);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(28);
    }, Fq);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(29);
    }, Rn);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(30);
    }, En);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(31);
    }, vl);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(32);
    }, yj);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(34);
    }, hr);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(36);
    }, xg);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(39);
    }, Fq);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(40);
    }, Sh);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(41);
    }, Rs);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(42);
    }, Sk);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(44);
    }, Rn);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(45);
    }, false);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      dx.ⲆΔᐃⲆ.list.ⵠⲆΔⲆ(47);
    }, cg);
    this.ΔΔᐃΔⲆ = {
      translate: {
        y: 0,
        x: uh
      },
      ᐃⵠᐃⵠⲆ: {
        x: -1,
        y: -Fh
      },
      ⲆΔⲆΔ: [],
      focus: function (a) {
        var b = this.translate.y + (bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ᐃⵠᐃⵠⲆ.x = a.x - this.translate.x;
          this.ᐃⵠᐃⵠⲆ.y = a.y - b;
        }
      }
    };
    this.ᐃΔΔⵠ = {
      translate: {
        x: 0,
        y: qk
      },
      Ⲇⵠ: ΔΔ[Ur.ᐃⲆΔΔⲆⵠⵠ],
      ΔⲆ: document.createElement("canvas")
    };
    this.ᐃΔΔⵠ.ΔⲆ.width = this.ᐃΔΔⵠ.Ⲇⵠ.width;
    this.ᐃΔΔⵠ.ΔⲆ.height = this.ᐃΔΔⵠ.Ⲇⵠ.height;
    this.ᐃΔΔⵠ.Ⲇ = this.ᐃΔΔⵠ.ΔⲆ.getContext("2d");
    this.ⲆⲆⲆΔ = {
      translate: {
        y: 0,
        x: Cn
      },
      Ⲇⵠ: ΔΔ[Ur.ΔⲆᐃΔΔⲆΔ],
      ⵠΔᐃⵠ: Zm,
      y: Cn
    };
    this.ΔⵠᐃⵠᐃᐃΔ = function () {
      ⵠⵠⵠᐃⵠ = document.getElementById("team_box");
      ⵠⵠⵠᐃⵠ.innerHTML = "";
      ⵠⵠⵠᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ff.ⲆΔⲆΔ[bx.ⲆΔΔΔᐃ[0]].ⵠᐃΔⵠⲆ + "</div";
      for (var a = 1; a < bx.ⲆΔΔΔᐃ.length; a++) {
        ⵠⵠⵠᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ff.ⲆΔⲆΔ[bx.ⲆΔΔΔᐃ[a]].ⵠᐃΔⵠⲆ + "</div></div>";
      }
      ⵠⵠⵠᐃⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ⵠⵠⵠᐃⵠ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ⵠⵠⵠⲆ.ΔⵠᐃⵠᐃᐃΔ, false);
    };
    this.ⵠᐃⲆΔⲆΔΔⵠΔ = function () {
      ⵠⵠⵠᐃⵠ = document.getElementById("team_box");
      ⵠⵠⵠᐃⵠ.innerHTML = "";
      ⵠⵠⵠᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ff.ⲆΔⲆΔ[bx.ⲆΔΔΔᐃ[0]].ⵠᐃΔⵠⲆ + "</div";
      for (var a = 1; a < bx.ⲆΔΔΔᐃ.length; a++) {
        ⵠⵠⵠᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ff.ⲆΔⲆΔ[bx.ⲆΔΔΔᐃ[a]].ⵠᐃΔⵠⲆ + "</div></div>";
      }
      ⵠⵠⵠᐃⵠ.innerHTML += "</div>";
      ⵠⵠⵠᐃⵠ.style.display = "inline-block";
    };
    this.ΔᐃⲆΔᐃⲆⵠⲆᐃ = function () {
      ⵠⵠⵠᐃⵠ = document.getElementById("team_box");
      ⵠⵠⵠᐃⵠ.innerHTML = "";
      ⵠⵠⵠᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ff.ⲆΔⲆΔ[bx.ⲆΔΔΔᐃ[Cq]].ⵠᐃΔⵠⲆ + "</div";
      for (var a = 1; bx.ⲆΔΔΔᐃ.length > a; a++) {
        ⵠⵠⵠᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ff.ⲆΔⲆΔ[bx.ⲆΔΔΔᐃ[a]].ⵠᐃΔⵠⲆ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (bx.ⵠⲆⵠⲆΔ.lock === 0) {
        ⵠⵠⵠᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ⵠⵠⵠᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ⵠⵠⵠⲆ.ⵠⵠᐃⵠⵠΔΔⲆᐃ, false);
      ⵠⵠⵠᐃⵠ.style.display = "inline-block";
      for (a = Ue; bx.ⲆΔΔΔᐃ.length > a; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(1);
            }, Sk);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(og);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(ea);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(5);
            }, _i);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(wh);
            }, Sk);
            break;
          case pa:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(7);
            }, false);
            break;
          case ys:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ⵠⵠⵠⲆ.ⲆᐃⵠΔⵠᐃᐃ(ls);
            }, false);
        }
      }
    };
    this.ΔⲆᐃᐃΔ = [];
    this.ΔⲆᐃᐃΔ[sw.ⵠⲆᐃⵠⵠⲆΔ] = {
      button: kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ]),
      action: this.ΔⵠᐃⵠᐃᐃΔ
    };
    this.ΔⲆᐃᐃΔ[sw.ⵠᐃΔⵠᐃΔΔ] = {
      button: kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ]),
      action: ⵠⵠⵠⲆ.ⵠⲆΔᐃΔΔⵠᐃⵠ
    };
    this.ΔⲆᐃᐃΔ[sw.ΔΔΔΔᐃᐃⵠ] = {
      button: kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠΔᐃⵠⲆ]),
      action: this.ΔᐃⲆΔᐃⲆⵠⲆᐃ
    };
    this.ΔⲆᐃᐃΔ[sw.ⵠΔΔⲆⵠᐃᐃ] = {
      button: kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆΔΔΔᐃ]),
      action: this.ⵠᐃⲆΔⲆΔΔⵠΔ
    };
    this.ΔⲆᐃᐃΔ[sw.ⵠᐃᐃΔⵠΔᐃ] = {
      button: kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔⵠⲆΔᐃ]),
      action: function () { }
    };
    this.ⵠⵠΔⵠⲆ = -1;
    this.ΔᐃⲆⵠΔⵠᐃ = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⲆⲆⵠⲆ]);
    this.ⲆΔᐃⲆⵠᐃⵠ = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆᐃᐃᐃᐃ]);
    this.ᐃⵠᐃⵠⵠⵠⵠ = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆΔⲆⲆᐃ]);
    this.ΔⲆΔᐃΔⲆᐃ = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆᐃᐃᐃⲆ]);
    this.ΔᐃⲆⵠⵠΔⲆ = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆΔⲆⲆᐃ]);
    this.ᐃⲆᐃᐃᐃⵠΔ = kw(60, 60, 0, ΔΔ[Ur.ΔⲆᐃⵠⲆⲆⲆ]);
    this.ⲆⵠⵠⵠⵠᐃⲆ = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⵠⵠⲆⵠ]);
    this.ⵠⲆᐃᐃᐃⲆΔ = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔᐃΔⵠⵠ]);
    this.ⲆⵠΔⵠⵠΔᐃ = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔᐃΔΔⵠ]);
    this.ⲆⲆⵠΔΔᐃⲆ = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆΔⵠⲆⵠ]);
    this.ᐃⲆⵠⲆᐃΔⲆ = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ]);
    this.ⲆᐃⵠⵠⲆΔΔ = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃΔⵠⵠⵠⵠ]);
    this.ΔΔᐃᐃΔⲆΔ = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔᐃΔⵠᐃ]);
    this.ΔᐃⲆΔⵠⲆᐃ = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⲆⵠⲆⲆ]);
    this.ⲆΔⲆᐃⲆⵠⵠ = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆΔⲆⵠᐃΔ]);
    this.ᐃⵠᐃⲆᐃ = kw(120, 120, 0, ΔΔ[Ur.ΔᐃΔΔΔ]);
    this.ᐃⵠᐃⲆᐃ.info.translate.x = 10;
    this.ᐃⵠᐃⲆᐃ.info.translate.y = 10;
    this.ΔᐃΔ = [];
    this.ΔᐃΔ[bs.ᐃᐃᐃΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠΔΔΔⲆ], 3);
    this.ΔᐃΔ[bs.ᐃᐃᐃΔⵠ].id = bs.ᐃᐃᐃΔⵠ;
    this.ΔᐃΔ[bs.ᐃᐃⲆⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.Ⲇⵠᐃⵠᐃⵠⵠ], yh);
    this.ΔᐃΔ[bs.ᐃᐃⲆⵠΔ].id = bs.ᐃᐃⲆⵠΔ;
    this.ΔᐃΔ[bs.ᐃΔⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔⲆⵠΔⵠ], 3);
    this.ΔᐃΔ[bs.ᐃΔⲆᐃ].id = bs.ᐃΔⲆᐃ;
    this.ΔᐃΔ[bs.ΔΔΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆⵠⵠΔⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔΔΔᐃ].id = bs.ΔΔΔᐃ;
    this.ΔᐃΔ[bs.ᐃⲆΔᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃᐃⵠᐃᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⲆΔᐃⵠ].id = bs.ᐃⲆΔᐃⵠ;
    this.ΔᐃΔ[bs.ⵠΔⲆⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⲆⲆⲆⲆⵠ], ol);
    this.ΔᐃΔ[bs.ⵠΔⲆⲆⵠ].id = bs.ⵠΔⲆⲆⵠ;
    this.ΔᐃΔ[bs.ΔΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃⲆⲆⵠᐃ], 3);
    this.ΔᐃΔ[bs.ΔΔΔΔ].id = bs.ΔΔΔΔ;
    this.ΔᐃΔ[bs.ΔⲆⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⵠⵠᐃΔⵠ], 3);
    this.ΔᐃΔ[bs.ΔⲆⲆΔ].id = bs.ΔⲆⲆΔ;
    this.ΔᐃΔ[bs.ⲆΔᐃⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃᐃΔΔⵠ], Kj);
    this.ΔᐃΔ[bs.ⲆΔᐃⲆⵠ].id = bs.ⲆΔᐃⲆⵠ;
    this.ΔᐃΔ[bs.ΔΔᐃᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠΔⵠᐃⲆΔ], 3);
    this.ΔᐃΔ[bs.ΔΔᐃᐃᐃ].id = bs.ΔΔᐃᐃᐃ;
    this.ΔᐃΔ[bs.ΔᐃᐃΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⲆΔⵠᐃⵠ], 3);
    this.ΔᐃΔ[bs.ΔᐃᐃΔⲆ].id = bs.ΔᐃᐃΔⲆ;
    this.ΔᐃΔ[bs.ⲆᐃⲆᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔⲆΔⵠⲆΔ], 3);
    this.ΔᐃΔ[bs.ⲆᐃⲆᐃΔ].id = bs.ⲆᐃⲆᐃΔ;
    this.ΔᐃΔ[bs.ⵠΔΔⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃΔΔⵠⲆⵠ], 3);
    this.ΔᐃΔ[bs.ⵠΔΔⲆᐃ].id = bs.ⵠΔΔⲆᐃ;
    this.ΔᐃΔ[bs.ⵠΔⵠΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃᐃᐃᐃⲆⵠ], yh);
    this.ΔᐃΔ[bs.ⵠΔⵠΔⲆ].id = bs.ⵠΔⵠΔⲆ;
    this.ΔᐃΔ[bs.ᐃⲆᐃΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆΔⵠᐃᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⲆᐃΔⵠ].id = bs.ᐃⲆᐃΔⵠ;
    this.ΔᐃΔ[bs.ᐃⲆⲆⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆΔΔⵠⵠᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⲆⲆⲆⵠ].id = bs.ᐃⲆⲆⲆⵠ;
    this.ΔᐃΔ[bs.Ⲇᐃᐃⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔΔⵠⲆΔ], 3);
    this.ΔᐃΔ[bs.Ⲇᐃᐃⵠᐃ].id = bs.Ⲇᐃᐃⵠᐃ;
    this.ΔᐃΔ[bs.ΔⵠⲆᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠΔⵠΔⵠΔ], yh);
    this.ΔᐃΔ[bs.ΔⵠⲆᐃⲆ].id = bs.ΔⵠⲆᐃⲆ;
    this.ΔᐃΔ[bs.ⵠᐃⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.Δⵠᐃᐃᐃⵠⵠ], ar);
    this.ΔᐃΔ[bs.ⵠᐃⲆⲆⲆ].id = bs.ⵠᐃⲆⲆⲆ;
    this.ΔᐃΔ[bs.ᐃⲆⲆⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⵠΔΔΔⵠ], Ka);
    this.ΔᐃΔ[bs.ᐃⲆⲆⲆᐃ].id = bs.ᐃⲆⲆⲆᐃ;
    this.ΔᐃΔ[bs.ⲆⲆⵠᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆᐃᐃⵠⲆᐃ], xs);
    this.ΔᐃΔ[bs.ⲆⲆⵠᐃᐃ].id = bs.ⲆⲆⵠᐃᐃ;
    this.ΔᐃΔ[bs.ΔΔⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠΔⲆⲆΔᐃ], $b);
    this.ΔᐃΔ[bs.ΔΔⲆⵠᐃ].id = bs.ΔΔⲆⵠᐃ;
    this.ΔᐃΔ[bs.Δⵠᐃⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆΔⲆᐃᐃᐃ], 3);
    this.ΔᐃΔ[bs.Δⵠᐃⵠⵠ].id = bs.Δⵠᐃⵠⵠ;
    this.ΔᐃΔ[bs.ⲆⲆⲆⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⵠᐃᐃⵠⵠ], Qt);
    this.ΔᐃΔ[bs.ⲆⲆⲆⵠΔ].id = bs.ⲆⲆⲆⵠΔ;
    this.ΔᐃΔ[bs.ᐃΔⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔΔΔⲆΔᐃ], dt);
    this.ΔᐃΔ[bs.ᐃΔⵠⵠⲆ].id = bs.ᐃΔⵠⵠⲆ;
    this.ΔᐃΔ[bs.ⵠᐃᐃⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆᐃΔⵠⵠⲆ], 3);
    this.ΔᐃΔ[bs.ⵠᐃᐃⲆΔ].id = bs.ⵠᐃᐃⲆΔ;
    this.ΔᐃΔ[bs.ⲆΔⲆⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃᐃⲆΔⲆⵠ], 3);
    this.ΔᐃΔ[bs.ⲆΔⲆⲆᐃ].id = bs.ⲆΔⲆⲆᐃ;
    this.ΔᐃΔ[bs.ⵠᐃᐃⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆΔⲆⲆᐃⲆ], Qt);
    this.ΔᐃΔ[bs.ⵠᐃᐃⲆⲆ].id = bs.ⵠᐃᐃⲆⲆ;
    this.ΔᐃΔ[bs.ΔⲆᐃᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔΔᐃΔΔⲆ], Z);
    this.ΔᐃΔ[bs.ΔⲆᐃᐃⲆ].id = bs.ΔⲆᐃᐃⲆ;
    this.ΔᐃΔ[bs.ⵠΔᐃᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⵠΔᐃΔⲆ], 3);
    this.ΔᐃΔ[bs.ⵠΔᐃᐃΔ].id = bs.ⵠΔᐃᐃΔ;
    this.ΔᐃΔ[bs.ᐃⲆᐃⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⵠΔΔᐃⵠ], dt);
    this.ΔᐃΔ[bs.ᐃⲆᐃⵠⲆ].id = bs.ᐃⲆᐃⵠⲆ;
    this.ΔᐃΔ[bs.ⵠΔΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔⵠⵠⵠᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠΔΔᐃⲆ].id = bs.ⵠΔΔᐃⲆ;
    this.ΔᐃΔ[bs.ᐃΔⲆᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆΔⲆΔᐃⵠ], 3);
    this.ΔᐃΔ[bs.ᐃΔⲆᐃΔ].id = bs.ᐃΔⲆᐃΔ;
    this.ΔᐃΔ[bs.ⲆⲆⵠΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔΔΔⲆⵠⵠ], Jh);
    this.ΔᐃΔ[bs.ⲆⲆⵠΔⵠ].id = bs.ⲆⲆⵠΔⵠ;
    this.ΔᐃΔ[bs.ΔⲆⲆΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⵠⵠⵠⵠⵠ], 3);
    this.ΔᐃΔ[bs.ΔⲆⲆΔᐃ].id = bs.ΔⲆⲆΔᐃ;
    this.ΔᐃΔ[bs.ⲆⲆⲆⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃⲆᐃⲆᐃ], 3);
    this.ΔᐃΔ[bs.ⲆⲆⲆⵠⵠ].id = bs.ⲆⲆⲆⵠⵠ;
    this.ΔᐃΔ[bs.ᐃᐃⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃᐃⵠΔⲆ], 3);
    this.ΔᐃΔ[bs.ᐃᐃⲆⵠᐃ].id = bs.ᐃᐃⲆⵠᐃ;
    this.ΔᐃΔ[bs.ⵠᐃᐃᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⵠΔⲆΔᐃ], Sg);
    this.ΔᐃΔ[bs.ⵠᐃᐃᐃⵠ].id = bs.ⵠᐃᐃᐃⵠ;
    this.ΔᐃΔ[bs.ᐃⲆⲆΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆΔⵠⲆΔΔ], yh);
    this.ΔᐃΔ[bs.ᐃⲆⲆΔΔ].id = bs.ᐃⲆⲆΔΔ;
    this.ΔᐃΔ[bs.ⵠⲆⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔᐃⵠΔΔᐃ], nn);
    this.ΔᐃΔ[bs.ⵠⲆⲆⵠᐃ].id = bs.ⵠⲆⲆⵠᐃ;
    this.ΔᐃΔ[bs.ⵠⵠΔⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⵠⵠⲆᐃΔ], nn);
    this.ΔᐃΔ[bs.ⵠⵠΔⲆⵠ].id = bs.ⵠⵠΔⲆⵠ;
    this.ΔᐃΔ[bs.ⵠᐃΔΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔᐃⵠᐃⵠⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃΔΔⲆ].id = bs.ⵠᐃΔΔⲆ;
    this.ΔᐃΔ[bs.ΔᐃⲆⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠᐃⵠⵠΔᐃ], Kj);
    this.ΔᐃΔ[bs.ΔᐃⲆⵠⵠ].id = bs.ΔᐃⲆⵠⵠ;
    this.ΔᐃΔ[bs.ⲆᐃΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃΔⵠⵠΔⵠ], Qt);
    this.ΔᐃΔ[bs.ⲆᐃΔΔΔ].id = bs.ⲆᐃΔΔΔ;
    this.ΔᐃΔ[bs.ⵠⲆΔΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⵠᐃⲆᐃⲆ], Qt);
    this.ΔᐃΔ[bs.ⵠⲆΔΔᐃ].id = bs.ⵠⲆΔΔᐃ;
    this.ΔᐃΔ[bs.ΔΔⵠⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔΔᐃΔⵠΔ], 3);
    this.ΔᐃΔ[bs.ΔΔⵠⵠⵠ].id = bs.ΔΔⵠⵠⵠ;
    this.ΔᐃΔ[bs.ΔⵠΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆΔᐃᐃᐃ], 3);
    this.ΔᐃΔ[bs.ΔⵠΔΔΔ].id = bs.ΔⵠΔΔΔ;
    this.ΔᐃΔ[bs.ΔΔᐃᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠᐃΔⲆᐃⲆ], 3);
    this.ΔᐃΔ[bs.ΔΔᐃᐃⲆ].id = bs.ΔΔᐃᐃⲆ;
    this.ΔᐃΔ[bs.ⵠᐃΔⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔΔⵠΔⲆⲆ], mt);
    this.ΔᐃΔ[bs.ⵠᐃΔⲆⵠ].id = bs.ⵠᐃΔⲆⵠ;
    this.ΔᐃΔ[bs.ᐃⵠᐃᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔⵠⲆΔΔⵠ], Z);
    this.ΔᐃΔ[bs.ᐃⵠᐃᐃᐃ].id = bs.ᐃⵠᐃᐃᐃ;
    this.ΔᐃΔ[bs.ⲆΔΔⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⵠⵠΔΔⲆ], 3);
    this.ΔᐃΔ[bs.ⲆΔΔⵠᐃ].id = bs.ⲆΔΔⵠᐃ;
    this.ΔᐃΔ[bs.ᐃⲆΔⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠⵠⲆΔΔ], 3);
    this.ΔᐃΔ[bs.ᐃⲆΔⵠⲆ].id = bs.ᐃⲆΔⵠⲆ;
    this.ΔᐃΔ[bs.ⲆⵠⵠⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔΔⲆⲆⲆⵠ], xs);
    this.ΔᐃΔ[bs.ⲆⵠⵠⲆⲆ].id = bs.ⲆⵠⵠⲆⲆ;
    this.ΔᐃΔ[bs.ⵠᐃⲆᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⵠᐃⵠⵠⵠ], mt);
    this.ΔᐃΔ[bs.ⵠᐃⲆᐃᐃ].id = bs.ⵠᐃⲆᐃᐃ;
    this.ΔᐃΔ[bs.ΔΔΔΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⵠⵠⵠᐃΔ], nn);
    this.ΔᐃΔ[bs.ΔΔΔΔⵠ].id = bs.ΔΔΔΔⵠ;
    this.ΔᐃΔ[bs.ᐃⵠⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃᐃΔⲆⵠᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⵠⲆⵠᐃ].id = bs.ᐃⵠⲆⵠᐃ;
    this.ΔᐃΔ[bs.ⵠⲆΔⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆᐃⵠⲆᐃᐃ], Z);
    this.ΔᐃΔ[bs.ⵠⲆΔⵠᐃ].id = bs.ⵠⲆΔⵠᐃ;
    this.ΔᐃΔ[bs.ΔⵠⵠΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆᐃⲆΔⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔⵠⵠΔⲆ].id = bs.ΔⵠⵠΔⲆ;
    this.ΔᐃΔ[bs.ᐃⲆⵠⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆⲆΔⵠⲆ], 3);
    this.ΔᐃΔ[bs.ᐃⲆⵠⵠΔ].id = bs.ᐃⲆⵠⵠΔ;
    this.ΔᐃΔ[bs.ᐃᐃΔⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠᐃⲆᐃᐃᐃ], 3);
    this.ΔᐃΔ[bs.ᐃᐃΔⵠᐃ].id = bs.ᐃᐃΔⵠᐃ;
    this.ΔᐃΔ[bs.ᐃΔᐃᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆΔⲆᐃᐃΔ], yh);
    this.ΔᐃΔ[bs.ᐃΔᐃᐃⲆ].id = bs.ᐃΔᐃᐃⲆ;
    this.ΔᐃΔ[bs.ᐃᐃΔᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔΔⵠⵠΔⵠ], dt);
    this.ΔᐃΔ[bs.ᐃᐃΔᐃᐃ].id = bs.ᐃᐃΔᐃᐃ;
    this.ΔᐃΔ[bs.ⵠⵠⵠΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃᐃΔⵠᐃΔ], co);
    this.ΔᐃΔ[bs.ⵠⵠⵠΔⲆ].id = bs.ⵠⵠⵠΔⲆ;
    this.ΔᐃΔ[bs.ⵠᐃⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⲆᐃᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃⲆⵠᐃ].id = bs.ⵠᐃⲆⵠᐃ;
    this.ΔᐃΔ[bs.ⲆⲆᐃⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⵠⲆᐃⵠΔ], Gl);
    this.ΔᐃΔ[bs.ⲆⲆᐃⵠᐃ].id = bs.ⲆⲆᐃⵠᐃ;
    this.ΔᐃΔ[bs.ᐃⲆΔΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔⲆΔΔᐃ], Z);
    this.ΔᐃΔ[bs.ᐃⲆΔΔⲆ].id = bs.ᐃⲆΔΔⲆ;
    this.ΔᐃΔ[bs.ⵠⵠⵠᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⵠᐃⲆᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠⵠⵠᐃΔ].id = bs.ⵠⵠⵠᐃΔ;
    this.ΔᐃΔ[bs.ΔΔⵠⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃΔΔᐃⵠⲆ], Z);
    this.ΔᐃΔ[bs.ΔΔⵠⲆⲆ].id = bs.ΔΔⵠⲆⲆ;
    this.ΔᐃΔ[bs.ⵠⲆΔⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆⲆⵠᐃΔΔ], Ka);
    this.ΔᐃΔ[bs.ⵠⲆΔⲆⲆ].id = bs.ⵠⲆΔⲆⲆ;
    this.ΔᐃΔ[bs.ⲆⵠⲆΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃᐃᐃΔⲆᐃ], Wb);
    this.ΔᐃΔ[bs.ⲆⵠⲆΔⲆ].id = bs.ⲆⵠⲆΔⲆ;
    this.ΔᐃΔ[bs.Ⲇⵠᐃᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠᐃᐃᐃᐃΔ], Gl);
    this.ΔᐃΔ[bs.Ⲇⵠᐃᐃⵠ].id = bs.Ⲇⵠᐃᐃⵠ;
    this.ΔᐃΔ[bs.ΔⵠⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔᐃΔⲆⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔⵠⵠⵠⲆ].id = bs.ΔⵠⵠⵠⲆ;
    this.ΔᐃΔ[bs.ⲆᐃᐃⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠΔΔᐃΔᐃ], X);
    this.ΔᐃΔ[bs.ⲆᐃᐃⵠⲆ].id = bs.ⲆᐃᐃⵠⲆ;
    this.ΔᐃΔ[bs.ⵠΔⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⵠΔⵠᐃΔ], 3);
    this.ΔᐃΔ[bs.ⵠΔⲆⵠᐃ].id = bs.ⵠΔⲆⵠᐃ;
    this.ΔᐃΔ[bs.ΔΔⲆΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔΔΔΔᐃ], 3);
    this.ΔᐃΔ[bs.ΔΔⲆΔΔ].id = bs.ΔΔⲆΔΔ;
    this.ΔᐃΔ[bs.ⲆᐃⲆΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔⵠⵠΔᐃΔ], 3);
    this.ΔᐃΔ[bs.ⲆᐃⲆΔⵠ].id = bs.ⲆᐃⲆΔⵠ;
    this.ΔᐃΔ[bs.ⵠⲆⲆᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃΔⵠⵠⲆΔ], co);
    this.ΔᐃΔ[bs.ⵠⲆⲆᐃᐃ].id = bs.ⵠⲆⲆᐃᐃ;
    this.ΔᐃΔ[bs.ⵠᐃⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠΔΔᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃⵠⵠⲆ].id = bs.ⵠᐃⵠⵠⲆ;
    this.ΔᐃΔ[bs.ⵠⲆⲆⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⲆΔᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠⲆⲆⵠⵠ].id = bs.ⵠⲆⲆⵠⵠ;
    this.ΔᐃΔ[bs.ΔᐃΔⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠΔᐃΔⲆΔ], 3);
    this.ΔᐃΔ[bs.ΔᐃΔⲆΔ].id = bs.ΔᐃΔⲆΔ;
    this.ΔᐃΔ[bs.ⵠⲆᐃⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃᐃⵠᐃⲆΔ], ar);
    this.ΔᐃΔ[bs.ⵠⲆᐃⲆⵠ].id = bs.ⵠⲆᐃⲆⵠ;
    this.ΔᐃΔ[bs.ᐃΔΔΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆᐃΔᐃⲆΔ], 3);
    this.ΔᐃΔ[bs.ᐃΔΔΔᐃ].id = bs.ᐃΔΔΔᐃ;
    this.ΔᐃΔ[bs.ΔⵠⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠᐃⲆΔΔΔ], Sg);
    this.ΔᐃΔ[bs.ΔⵠⵠⲆΔ].id = bs.ΔⵠⵠⲆΔ;
    this.ΔᐃΔ[bs.ⵠⲆᐃⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⲆⲆⲆⵠΔ], Qk);
    this.ΔᐃΔ[bs.ⵠⲆᐃⲆΔ].id = bs.ⵠⲆᐃⲆΔ;
    this.ΔᐃΔ[bs.ᐃⲆΔⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆⲆᐃⲆⵠ], Jh);
    this.ΔᐃΔ[bs.ᐃⲆΔⵠΔ].id = bs.ᐃⲆΔⵠΔ;
    this.ΔᐃΔ[bs.ⵠⵠⲆⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⲆⵠⵠⲆⵠ], Qt);
    this.ΔᐃΔ[bs.ⵠⵠⲆⵠᐃ].id = bs.ⵠⵠⲆⵠᐃ;
    this.ΔᐃΔ[bs.ⵠᐃⵠⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃΔᐃΔᐃᐃ], co);
    this.ΔᐃΔ[bs.ⵠᐃⵠⲆᐃ].id = bs.ⵠᐃⵠⲆᐃ;
    this.ΔᐃΔ[bs.ᐃⵠΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠΔⲆⵠᐃ], Kj);
    this.ΔᐃΔ[bs.ᐃⵠΔΔΔ].id = bs.ᐃⵠΔΔΔ;
    this.ΔᐃΔ[bs.ᐃⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⲆΔⲆⲆΔ], Jh);
    this.ΔᐃΔ[bs.ᐃⵠⲆΔ].id = bs.ᐃⵠⲆΔ;
    this.ΔᐃΔ[bs.ΔⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆᐃΔⲆⵠΔ], Z);
    this.ΔᐃΔ[bs.ΔⲆⲆⲆ].id = bs.ΔⲆⲆⲆ;
    this.ΔᐃΔ[bs.ⵠᐃᐃⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⵠΔⵠⲆⲆ], 3);
    this.ΔᐃΔ[bs.ⵠᐃᐃⵠⵠ].id = bs.ⵠᐃᐃⵠⵠ;
    this.ΔᐃΔ[bs.ⲆΔΔΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃⲆΔΔΔ], 3);
    this.ΔᐃΔ[bs.ⲆΔΔΔⲆ].id = bs.ⲆΔΔΔⲆ;
    this.ΔᐃΔ[bs.ΔⵠⲆΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆΔⵠΔᐃΔ], X);
    this.ΔᐃΔ[bs.ΔⵠⲆΔΔ].id = bs.ΔⵠⲆΔΔ;
    this.ΔᐃΔ[bs.ⲆⲆᐃᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⲆΔᐃⵠΔ], 3);
    this.ΔᐃΔ[bs.ⲆⲆᐃᐃᐃ].id = bs.ⲆⲆᐃᐃᐃ;
    this.ΔᐃΔ[bs.ΔΔᐃΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆᐃⵠⵠⵠᐃ], 3);
    this.ΔᐃΔ[bs.ΔΔᐃΔᐃ].id = bs.ΔΔᐃΔᐃ;
    this.ΔᐃΔ[bs.ᐃⲆΔΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃᐃⵠᐃⲆⵠ], Qk);
    this.ΔᐃΔ[bs.ᐃⲆΔΔⵠ].id = bs.ᐃⲆΔΔⵠ;
    this.ΔᐃΔ[bs.ΔⵠΔⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔΔᐃΔⲆ], 3);
    this.ΔᐃΔ[bs.ΔⵠΔⲆⵠ].id = bs.ΔⵠΔⲆⵠ;
    this.ΔᐃΔ[bs.ⵠⵠᐃⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆΔⲆⵠⵠᐃ], 3);
    this.ΔᐃΔ[bs.ⵠⵠᐃⲆⲆ].id = bs.ⵠⵠᐃⲆⲆ;
    this.ΔᐃΔ[bs.Δᐃⵠᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⲆⵠΔⵠΔ], 3);
    this.ΔᐃΔ[bs.Δᐃⵠᐃⵠ].id = bs.Δᐃⵠᐃⵠ;
    this.ΔᐃΔ[bs.ᐃΔⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔΔΔᐃΔⲆ], Z);
    this.ΔᐃΔ[bs.ᐃΔⵠⲆΔ].id = bs.ᐃΔⵠⲆΔ;
    this.ΔᐃΔ[bs.ⵠΔⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⲆᐃΔΔΔ], 3);
    this.ΔᐃΔ[bs.ⵠΔⵠⲆΔ].id = bs.ⵠΔⵠⲆΔ;
    this.ΔᐃΔ[bs.ⵠᐃⲆΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⵠⲆᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃⲆΔⵠ].id = bs.ⵠᐃⲆΔⵠ;
    this.ΔᐃΔ[bs.ⵠΔⵠⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⵠᐃΔΔⲆ], 3);
    this.ΔᐃΔ[bs.ⵠΔⵠⲆⵠ].id = bs.ⵠΔⵠⲆⵠ;
    this.ΔᐃΔ[bs.Δⵠᐃᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆΔⲆⵠⵠᐃ], 3);
    this.ΔᐃΔ[bs.Δⵠᐃᐃᐃ].id = bs.Δⵠᐃᐃᐃ;
    this.ΔᐃΔ[bs.ⲆⲆΔᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆΔⵠᐃⲆⲆ], 3);
    this.ΔᐃΔ[bs.ⲆⲆΔᐃᐃ].id = bs.ⲆⲆΔᐃᐃ;
    this.ΔᐃΔ[bs.ⲆΔΔᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⵠⵠᐃᐃⲆ], xs);
    this.ΔᐃΔ[bs.ⲆΔΔᐃⵠ].id = bs.ⲆΔΔᐃⵠ;
    this.ΔᐃΔ[bs.ΔⵠᐃΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔⵠⲆΔᐃⲆ], Qt);
    this.ΔᐃΔ[bs.ΔⵠᐃΔᐃ].id = bs.ΔⵠᐃΔᐃ;
    this.ΔᐃΔ[bs.ⵠᐃⵠΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⲆⵠⵠᐃⲆ], Jh);
    this.ΔᐃΔ[bs.ⵠᐃⵠΔΔ].id = bs.ⵠᐃⵠΔΔ;
    this.ΔᐃΔ[bs.ΔᐃΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃᐃᐃⲆⲆᐃ], ar);
    this.ΔᐃΔ[bs.ΔᐃΔΔΔ].id = bs.ΔᐃΔΔΔ;
    this.ΔᐃΔ[bs.ⵠᐃΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔᐃⵠⲆⵠⵠ], Kj);
    this.ΔᐃΔ[bs.ⵠᐃΔᐃⲆ].id = bs.ⵠᐃΔᐃⲆ;
    this.ΔᐃΔ[bs.ⵠΔᐃΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⵠᐃᐃⲆᐃ], 3);
    this.ΔᐃΔ[bs.ⵠΔᐃΔᐃ].id = bs.ⵠΔᐃΔᐃ;
    this.ΔᐃΔ[bs.ᐃⲆΔⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆⵠⲆΔᐃ], $b);
    this.ΔᐃΔ[bs.ᐃⲆΔⲆᐃ].id = bs.ᐃⲆΔⲆᐃ;
    this.ΔᐃΔ[bs.ΔⵠᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆⲆⲆᐃⲆ], 3);
    this.ΔᐃΔ[bs.ΔⵠᐃⵠΔ].id = bs.ΔⵠᐃⵠΔ;
    this.ΔᐃΔ[bs.ⵠΔⵠⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⵠⲆⵠᐃΔ], mt);
    this.ΔᐃΔ[bs.ⵠΔⵠⲆᐃ].id = bs.ⵠΔⵠⲆᐃ;
    this.ΔᐃΔ[bs.ⵠⵠⲆⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆΔⲆⲆᐃⵠ], Sg);
    this.ΔᐃΔ[bs.ⵠⵠⲆⲆΔ].id = bs.ⵠⵠⲆⲆΔ;
    this.ΔᐃΔ[bs.ⲆΔⵠⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠΔ], Qk);
    this.ΔᐃΔ[bs.ⲆΔⵠⲆᐃ].id = bs.ⲆΔⵠⲆᐃ;
    this.ΔᐃΔ[bs.ΔᐃⲆⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠᐃᐃΔᐃΔ], yh);
    this.ΔᐃΔ[bs.ΔᐃⲆⲆᐃ].id = bs.ΔᐃⲆⲆᐃ;
    this.ΔᐃΔ[bs.ⲆⵠⵠᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⲆΔᐃⵠⲆ], Z);
    this.ΔᐃΔ[bs.ⲆⵠⵠᐃΔ].id = bs.ⲆⵠⵠᐃΔ;
    this.ΔᐃΔ[bs.ⵠⲆⵠⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⵠᐃⵠⲆᐃ], Kj);
    this.ΔᐃΔ[bs.ⵠⲆⵠⵠⵠ].id = bs.ⵠⲆⵠⵠⵠ;
    this.ΔᐃΔ[bs.ⵠᐃⵠⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔΔⲆⲆⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃⵠⵠΔ].id = bs.ⵠᐃⵠⵠΔ;
    this.ΔᐃΔ[bs.ⵠΔⲆᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔⲆΔⲆⲆΔ], og);
    this.ΔᐃΔ[bs.ⵠΔⲆᐃⵠ].id = bs.ⵠΔⲆᐃⵠ;
    this.ΔᐃΔ[bs.ᐃⵠᐃⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆⲆΔΔΔⵠ], 3);
    this.ΔᐃΔ[bs.ᐃⵠᐃⲆⲆ].id = bs.ᐃⵠᐃⲆⲆ;
    this.ΔᐃΔ[bs.ᐃΔᐃᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠΔΔⲆⲆ], Sg);
    this.ΔᐃΔ[bs.ᐃΔᐃᐃⵠ].id = bs.ᐃΔᐃᐃⵠ;
    this.ΔᐃΔ[bs.ΔⲆⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⲆⲆΔⲆΔ], Qk);
    this.ΔᐃΔ[bs.ΔⲆⲆⲆⲆ].id = bs.ΔⲆⲆⲆⲆ;
    this.ΔᐃΔ[bs.ᐃΔⲆᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔᐃⵠⲆᐃΔ], 3);
    this.ΔᐃΔ[bs.ᐃΔⲆᐃⲆ].id = bs.ᐃΔⲆᐃⲆ;
    this.ΔᐃΔ[bs.ⲆⵠΔΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⲆΔᐃⲆⵠ], co);
    this.ΔᐃΔ[bs.ⲆⵠΔΔⲆ].id = bs.ⲆⵠΔΔⲆ;
    this.ΔᐃΔ[bs.ΔΔΔᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔᐃᐃΔⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔΔΔᐃⵠ].id = bs.ΔΔΔᐃⵠ;
    this.ΔᐃΔ[bs.ⵠⲆΔᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔⲆΔⲆⲆΔ], yh);
    this.ΔᐃΔ[bs.ⵠⲆΔᐃᐃ].id = bs.ⵠⲆΔᐃᐃ;
    this.ΔᐃΔ[bs.ᐃᐃᐃΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⵠΔᐃᐃᐃ], nn);
    this.ΔᐃΔ[bs.ᐃᐃᐃΔΔ].id = bs.ᐃᐃᐃΔΔ;
    this.ΔᐃΔ[bs.ⵠᐃⲆⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔΔᐃⵠΔ], 3);
    this.ΔᐃΔ[bs.ⵠᐃⲆⵠⲆ].id = bs.ⵠᐃⲆⵠⲆ;
    this.ΔᐃΔ[bs.ΔⵠΔΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔⲆⲆᐃⵠⲆ], 3);
    this.ΔᐃΔ[bs.ΔⵠΔΔⵠ].id = bs.ΔⵠΔΔⵠ;
    this.ΔᐃΔ[bs.ⵠᐃΔΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔΔⵠᐃⲆⲆ], nn);
    this.ΔᐃΔ[bs.ⵠᐃΔΔⵠ].id = bs.ⵠᐃΔΔⵠ;
    this.ΔᐃΔ[bs.ΔⲆΔᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔΔⲆⲆⲆ], dt);
    this.ΔᐃΔ[bs.ΔⲆΔᐃⵠ].id = bs.ΔⲆΔᐃⵠ;
    this.ΔᐃΔ[bs.ᐃⲆΔᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃᐃⵠᐃΔⵠ], ol);
    this.ΔᐃΔ[bs.ᐃⲆΔᐃᐃ].id = bs.ᐃⲆΔᐃᐃ;
    this.ΔᐃΔ[bs.ⲆΔⲆᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔᐃⵠⵠⵠᐃ], 3);
    this.ΔᐃΔ[bs.ⲆΔⲆᐃⵠ].id = bs.ⲆΔⲆᐃⵠ;
    this.ΔᐃΔ[bs.ᐃΔᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔᐃⲆΔᐃΔ], 3);
    this.ΔᐃΔ[bs.ᐃΔᐃⵠΔ].id = bs.ᐃΔᐃⵠΔ;
    this.ΔᐃΔ[bs.ⲆᐃⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔⲆᐃⲆᐃᐃ], dt);
    this.ΔᐃΔ[bs.ⲆᐃⵠⲆΔ].id = bs.ⲆᐃⵠⲆΔ;
    this.ΔᐃΔ[bs.ⵠΔⵠΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔᐃᐃⲆᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠΔⵠΔⵠ].id = bs.ⵠΔⵠΔⵠ;
    this.ΔᐃΔ[bs.ΔⵠⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔΔⲆᐃⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔⵠⲆⲆⲆ].id = bs.ΔⵠⲆⲆⲆ;
    this.ΔᐃΔ[bs.ⲆΔΔⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⵠᐃΔⵠΔ], 3);
    this.ΔᐃΔ[bs.ⲆΔΔⲆᐃ].id = bs.ⲆΔΔⲆᐃ;
    this.ΔᐃΔ[bs.ᐃⵠⵠΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠⲆΔΔΔⵠ], ol);
    this.ΔᐃΔ[bs.ᐃⵠⵠΔᐃ].id = bs.ᐃⵠⵠΔᐃ;
    this.ΔᐃΔ[bs.ᐃᐃΔⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃᐃⲆᐃⲆⲆ], 3);
    this.ΔᐃΔ[bs.ᐃᐃΔⲆⵠ].id = bs.ᐃᐃΔⲆⵠ;
    this.ΔᐃΔ[bs.ⵠⵠⲆⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⲆᐃᐃΔⵠ], 3);
    this.ΔᐃΔ[bs.ⵠⵠⲆⵠⵠ].id = bs.ⵠⵠⲆⵠⵠ;
    this.ΔᐃΔ[bs.ᐃⵠⵠᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔⵠᐃⲆΔΔ], dt);
    this.ΔᐃΔ[bs.ᐃⵠⵠᐃⵠ].id = bs.ᐃⵠⵠᐃⵠ;
    this.ΔᐃΔ[bs.ᐃⵠᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆᐃᐃⲆⵠⵠ], 3);
    this.ΔᐃΔ[bs.ᐃⵠᐃⵠΔ].id = bs.ᐃⵠᐃⵠΔ;
    this.ΔᐃΔ[bs.ⲆΔᐃᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠᐃᐃⲆⵠⲆ], ar);
    this.ΔᐃΔ[bs.ⲆΔᐃᐃΔ].id = bs.ⲆΔᐃᐃΔ;
    this.ΔᐃΔ[bs.ⲆⲆΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔΔⵠΔⵠᐃ], Wb);
    this.ΔᐃΔ[bs.ⲆⲆΔΔΔ].id = bs.ⲆⲆΔΔΔ;
    this.ΔᐃΔ[bs.ⲆΔⲆⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔⵠⲆⵠᐃⲆ], Sg);
    this.ΔᐃΔ[bs.ⲆΔⲆⵠⲆ].id = bs.ⲆΔⲆⵠⲆ;
    this.ΔᐃΔ[bs.ΔᐃⵠⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⵠΔⲆⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔᐃⵠⲆⵠ].id = bs.ΔᐃⵠⲆⵠ;
    this.ΔᐃΔ[bs.ⵠΔⵠᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⲆΔⵠⵠⲆ], 3);
    this.ΔᐃΔ[bs.ⵠΔⵠᐃᐃ].id = bs.ⵠΔⵠᐃᐃ;
    this.ΔᐃΔ[bs.ⵠᐃⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⲆⵠᐃᐃᐃ], 3);
    this.ΔᐃΔ[bs.ⵠᐃⵠⲆΔ].id = bs.ⵠᐃⵠⲆΔ;
    this.ΔᐃΔ[bs.ΔΔᐃⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃᐃⲆΔⵠΔ], 3);
    this.ΔᐃΔ[bs.ΔΔᐃⲆΔ].id = bs.ΔΔᐃⲆΔ;
    this.ΔᐃΔ[bs.ⲆⲆᐃⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠⵠΔⲆⵠ], 3);
    this.ΔᐃΔ[bs.ⲆⲆᐃⲆΔ].id = bs.ⲆⲆᐃⲆΔ;
    this.ΔᐃΔ[bs.ⵠᐃⵠᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⵠᐃⲆⲆΔ], mt);
    this.ΔᐃΔ[bs.ⵠᐃⵠᐃᐃ].id = bs.ⵠᐃⵠᐃᐃ;
    this.ΔᐃΔ[bs.ᐃⵠⲆᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔᐃΔΔᐃⲆ], ar);
    this.ΔᐃΔ[bs.ᐃⵠⲆᐃΔ].id = bs.ᐃⵠⲆᐃΔ;
    this.ΔᐃΔ[bs.ⲆⵠⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⵠⲆⵠⲆΔ], Z);
    this.ΔᐃΔ[bs.ⲆⵠⲆⲆⲆ].id = bs.ⲆⵠⲆⲆⲆ;
    this.ΔᐃΔ[bs.ⲆⲆΔᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⵠᐃⲆⲆⲆ], 3);
    this.ΔᐃΔ[bs.ⲆⲆΔᐃΔ].id = bs.ⲆⲆΔᐃΔ;
    this.ΔᐃΔ[bs.ᐃᐃⵠⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⲆΔⵠⲆⲆ], 3);
    this.ΔᐃΔ[bs.ᐃᐃⵠⵠᐃ].id = bs.ᐃᐃⵠⵠᐃ;
    this.ΔᐃΔ[bs.ⲆⵠΔᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃᐃⵠΔᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⲆⵠΔᐃᐃ].id = bs.ⲆⵠΔᐃᐃ;
    this.ΔᐃΔ[bs.ⵠΔΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔⵠᐃⵠⲆᐃ], 3);
    this.ΔᐃΔ[bs.ⵠΔΔΔΔ].id = bs.ⵠΔΔΔΔ;
    this.ΔᐃΔ[bs.ᐃⲆⲆⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃᐃᐃⲆⲆΔ], 3);
    this.ΔᐃΔ[bs.ᐃⲆⲆⵠΔ].id = bs.ᐃⲆⲆⵠΔ;
    this.ΔᐃΔ[bs.ⲆⲆⵠΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆᐃⵠⲆⲆ], 3);
    this.ΔᐃΔ[bs.ⲆⲆⵠΔⲆ].id = bs.ⲆⲆⵠΔⲆ;
    this.ΔᐃΔ[bs.ᐃᐃⲆⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⲆᐃⲆᐃⲆ], Ka);
    this.ΔᐃΔ[bs.ᐃᐃⲆⲆΔ].id = bs.ᐃᐃⲆⲆΔ;
    this.ΔᐃΔ[bs.ΔᐃΔΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔⲆΔᐃⲆᐃ], 3);
    this.ΔᐃΔ[bs.ΔᐃΔΔⵠ].id = bs.ΔᐃΔΔⵠ;
    this.ΔᐃΔ[bs.ⵠⲆⲆⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⲆⲆΔᐃⵠ], dt);
    this.ΔᐃΔ[bs.ⵠⲆⲆⵠΔ].id = bs.ⵠⲆⲆⵠΔ;
    this.ΔᐃΔ[bs.ⲆⲆΔⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠⵠⵠΔᐃⲆ], ar);
    this.ΔᐃΔ[bs.ⲆⲆΔⵠΔ].id = bs.ⲆⲆΔⵠΔ;
    this.ΔᐃΔ[bs.ⲆⲆⲆᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆΔΔⲆΔⲆ], 3);
    this.ΔᐃΔ[bs.ⲆⲆⲆᐃᐃ].id = bs.ⲆⲆⲆᐃᐃ;
    this.ΔᐃΔ[bs.ᐃⲆᐃΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⵠⵠᐃΔⲆ], 3);
    this.ΔᐃΔ[bs.ᐃⲆᐃΔⲆ].id = bs.ᐃⲆᐃΔⲆ;
    this.ΔᐃΔ[bs.ⵠΔᐃᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃⲆΔⵠⲆⵠ], yh);
    this.ΔᐃΔ[bs.ⵠΔᐃᐃⲆ].id = bs.ⵠΔᐃᐃⲆ;
    this.ΔᐃΔ[bs.ᐃᐃⲆᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⲆΔΔⲆⵠ], 3);
    this.ΔᐃΔ[bs.ᐃᐃⲆᐃⲆ].id = bs.ᐃᐃⲆᐃⲆ;
    this.ΔᐃΔ[bs.ⲆⲆⵠⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆΔⵠⲆⲆ], yh);
    this.ΔᐃΔ[bs.ⲆⲆⵠⵠΔ].id = bs.ⲆⲆⵠⵠΔ;
    this.ΔᐃΔ[bs.ⵠⲆᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⵠⲆᐃⵠΔ].id = bs.ⵠⲆᐃⵠΔ;
    this.ΔᐃΔ[bs.ᐃΔΔⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆᐃᐃⲆⵠⵠ], yh);
    this.ΔᐃΔ[bs.ᐃΔΔⵠⲆ].id = bs.ᐃΔΔⵠⲆ;
    this.ΔᐃΔ[bs.ΔΔⵠᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠⵠΔΔⵠⲆ], 3);
    this.ΔᐃΔ[bs.ΔΔⵠᐃⲆ].id = bs.ΔΔⵠᐃⲆ;
    this.ΔᐃΔ[bs.ⲆΔⲆⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠᐃⵠⲆΔⵠ], X);
    this.ΔᐃΔ[bs.ⲆΔⲆⵠⵠ].id = bs.ⲆΔⲆⵠⵠ;
    this.ΔᐃΔ[bs.ᐃᐃᐃⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆⲆⲆⲆⵠ], Jh);
    this.ΔᐃΔ[bs.ᐃᐃᐃⲆⵠ].id = bs.ᐃᐃᐃⲆⵠ;
    this.ΔᐃΔ[bs.Δᐃᐃᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃΔⵠᐃΔⲆ], 3);
    this.ΔᐃΔ[bs.Δᐃᐃᐃᐃ].id = bs.Δᐃᐃᐃᐃ;
    this.ΔᐃΔ[bs.ⵠΔΔΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠᐃⵠⲆΔΔ], 3);
    this.ΔᐃΔ[bs.ⵠΔΔΔⵠ].id = bs.ⵠΔΔΔⵠ;
    this.ΔᐃΔ[bs.ⲆΔⲆΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔⲆΔΔΔⲆ], co);
    this.ΔᐃΔ[bs.ⲆΔⲆΔᐃ].id = bs.ⲆΔⲆΔᐃ;
    this.ΔᐃΔ[bs.ΔⲆⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆⵠⲆⲆᐃⵠ], 3);
    this.ΔᐃΔ[bs.ΔⲆⵠⵠⲆ].id = bs.ΔⲆⵠⵠⲆ;
    this.ΔᐃΔ[bs.ᐃΔⵠⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃΔΔⵠᐃⵠ], Qt);
    this.ΔᐃΔ[bs.ᐃΔⵠⲆᐃ].id = bs.ᐃΔⵠⲆᐃ;
    this.ΔᐃΔ[bs.ᐃⵠΔⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃΔᐃᐃᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⵠΔⵠⲆ].id = bs.ᐃⵠΔⵠⲆ;
    this.ΔᐃΔ[bs.ᐃⲆᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆΔΔⲆΔ], 3);
    this.ΔᐃΔ[bs.ᐃⲆᐃⵠΔ].id = bs.ᐃⲆᐃⵠΔ;
    this.ΔᐃΔ[bs.ⲆⲆΔⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃΔᐃⵠΔΔ], 3);
    this.ΔᐃΔ[bs.ⲆⲆΔⵠⲆ].id = bs.ⲆⲆΔⵠⲆ;
    this.ΔᐃΔ[bs.ⲆⵠᐃᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⵠⲆⲆⵠⵠ], Sg);
    this.ΔᐃΔ[bs.ⲆⵠᐃᐃΔ].id = bs.ⲆⵠᐃᐃΔ;
    this.ΔᐃΔ[bs.ᐃᐃᐃⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆᐃᐃΔⵠⵠ], xs);
    this.ΔᐃΔ[bs.ᐃᐃᐃⲆᐃ].id = bs.ᐃᐃᐃⲆᐃ;
    this.ΔᐃΔ[bs.ᐃΔᐃᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔΔⲆᐃⵠⵠ], 3);
    this.ΔᐃΔ[bs.ᐃΔᐃᐃΔ].id = bs.ᐃΔᐃᐃΔ;
    this.ΔᐃΔ[bs.ᐃⵠΔᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆΔΔᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ᐃⵠΔᐃⵠ].id = bs.ᐃⵠΔᐃⵠ;
    this.ΔᐃΔ[bs.ⲆᐃᐃΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆⵠᐃᐃΔ], 3);
    this.ΔᐃΔ[bs.ⲆᐃᐃΔᐃ].id = bs.ⲆᐃᐃΔᐃ;
    this.ΔᐃΔ[bs.ᐃⵠⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃᐃⵠⵠⵠ], 3);
    this.ΔᐃΔ[bs.ᐃⵠⵠⵠⲆ].id = bs.ᐃⵠⵠⵠⲆ;
    this.ΔᐃΔ[bs.ΔⲆⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃⲆΔᐃΔⲆ], xs);
    this.ΔᐃΔ[bs.ΔⲆⵠⲆΔ].id = bs.ΔⲆⵠⲆΔ;
    this.ΔᐃΔ[bs.ᐃᐃⵠⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠⲆⲆᐃᐃⲆ], 3);
    this.ΔᐃΔ[bs.ᐃᐃⵠⲆⵠ].id = bs.ᐃᐃⵠⲆⵠ;
    this.ΔᐃΔ[bs.ⲆⵠΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆᐃΔⲆᐃᐃ], Wb);
    this.ΔᐃΔ[bs.ⲆⵠΔᐃⲆ].id = bs.ⲆⵠΔᐃⲆ;
    this.ΔᐃΔ[bs.ΔᐃⵠᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆΔⲆⵠⵠΔ], 3);
    this.ΔᐃΔ[bs.ΔᐃⵠᐃⲆ].id = bs.ΔᐃⵠᐃⲆ;
    this.ΔᐃΔ[bs.ⵠⲆΔΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⵠᐃⲆᐃⲆ], 3);
    this.ΔᐃΔ[bs.ⵠⲆΔΔᐃ].id = bs.ⵠⲆΔΔᐃ;
    this.ΔᐃΔ[bs.ⵠᐃΔⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔΔⵠΔⲆⲆ], nn);
    this.ΔᐃΔ[bs.ⵠᐃΔⲆⵠ].id = bs.ⵠᐃΔⲆⵠ;
    this.ΔᐃΔ[bs.ᐃⲆⲆᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔⵠⵠⵠⵠ], 3);
    this.ΔᐃΔ[bs.ᐃⲆⲆᐃᐃ].id = bs.ᐃⲆⲆᐃᐃ;
    this.ΔᐃΔ[bs.ΔΔⵠᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⲆⲆⵠⲆⲆ], ol);
    this.ΔᐃΔ[bs.ΔΔⵠᐃⵠ].id = bs.ΔΔⵠᐃⵠ;
    this.ΔᐃΔ[bs.ⲆⲆⲆΔᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠΔᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ⲆⲆⲆΔᐃ].id = bs.ⲆⲆⲆΔᐃ;
    this.ΔᐃΔ[bs.ᐃⲆΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠⵠⵠⵠⵠⵠ], Sg);
    this.ΔᐃΔ[bs.ᐃⲆΔᐃⲆ].id = bs.ᐃⲆΔᐃⲆ;
    this.ΔᐃΔ[bs.ΔᐃΔⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠᐃᐃᐃⵠΔ], co);
    this.ΔᐃΔ[bs.ΔᐃΔⲆᐃ].id = bs.ΔᐃΔⲆᐃ;
    this.ΔᐃΔ[bs.ⵠⵠᐃⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃᐃⲆⵠⲆᐃ], 3);
    this.ΔᐃΔ[bs.ⵠⵠᐃⵠᐃ].id = bs.ⵠⵠᐃⵠᐃ;
    this.ΔᐃΔ[bs.ΔⵠΔⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⲆᐃᐃᐃΔ], 3);
    this.ΔᐃΔ[bs.ΔⵠΔⲆΔ].id = bs.ΔⵠΔⲆΔ;
    this.ΔᐃΔ[bs.ᐃⲆⵠᐃᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⲆⵠⲆᐃΔ], X);
    this.ΔᐃΔ[bs.ᐃⲆⵠᐃᐃ].id = bs.ᐃⲆⵠᐃᐃ;
    this.ΔⲆⲆⵠⵠ = [];
    for (m = uh; m < 250; m++) {
      this.ΔⲆⲆⵠⵠ[m] = kw(0, ur, 0, ΔΔ[Ur.ⵠⵠᐃΔΔⵠⵠ]);
    }
    this.ⲆΔΔ = [];
    this.ⲆΔΔ[bs.ᐃᐃᐃΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔⲆⵠⵠᐃ], 3);
    this.ⲆΔΔ[bs.ᐃᐃᐃΔⵠ].id = bs.ᐃᐃᐃΔⵠ;
    this.ⲆΔΔ[bs.ᐃᐃⲆⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠΔᐃΔᐃ], 3);
    this.ⲆΔΔ[bs.ᐃᐃⲆⵠΔ].id = bs.ᐃᐃⲆⵠΔ;
    this.ⲆΔΔ[bs.ᐃΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⵠⵠⲆⵠ], 3);
    this.ⲆΔΔ[bs.ᐃΔⲆᐃ].id = bs.ᐃΔⲆᐃ;
    this.ⲆΔΔ[bs.ᐃΔⲆᐃ].info.Ⲇⵠ[Zn] = this.ⲆΔΔ[bs.ᐃΔⲆᐃ].info.Ⲇⵠ[ms];
    this.ⲆΔΔ[bs.ΔΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆᐃⵠⲆⲆⲆ], Qt);
    this.ⲆΔΔ[bs.ΔΔΔᐃ].id = bs.ΔΔΔᐃ;
    this.ⲆΔΔ[bs.ΔΔΔᐃ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ΔΔΔᐃ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ᐃⲆΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠᐃⵠΔΔ], $b);
    this.ⲆΔΔ[bs.ᐃⲆΔᐃⵠ].id = bs.ᐃⲆΔᐃⵠ;
    this.ⲆΔΔ[bs.ⵠΔⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠⲆΔⵠⵠ], mt);
    this.ⲆΔΔ[bs.ⵠΔⲆⲆⵠ].id = bs.ⵠΔⲆⲆⵠ;
    this.ⲆΔΔ[bs.ΔΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔᐃΔⵠⵠ], nn);
    this.ⲆΔΔ[bs.ΔΔΔΔ].id = bs.ΔΔΔΔ;
    this.ⲆΔΔ[bs.ΔΔΔΔ].info.Ⲇⵠ[Zt] = this.ⲆΔΔ[bs.ΔΔΔΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ΔⲆⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔᐃΔΔⵠ], Wb);
    this.ⲆΔΔ[bs.ΔⲆⲆΔ].id = bs.ΔⲆⲆΔ;
    this.ⲆΔΔ[bs.ΔⲆⲆΔ].info.Ⲇⵠ[ql] = this.ⲆΔΔ[bs.ΔⲆⲆΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ⲆΔᐃⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔᐃⲆᐃⵠ], Kj);
    this.ⲆΔΔ[bs.ⲆΔᐃⲆⵠ].id = bs.ⲆΔᐃⲆⵠ;
    this.ⲆΔΔ[bs.ΔΔᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⵠⲆⲆⲆ], Ka);
    this.ⲆΔΔ[bs.ΔΔᐃᐃᐃ].id = bs.ΔΔᐃᐃᐃ;
    this.ⲆΔΔ[bs.ΔᐃᐃΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆΔᐃⲆΔ], Qk);
    this.ⲆΔΔ[bs.ΔᐃᐃΔⲆ].id = bs.ΔᐃᐃΔⲆ;
    this.ⲆΔΔ[bs.ⲆᐃⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃᐃⲆΔⵠ], ol);
    this.ⲆΔΔ[bs.ⲆᐃⲆᐃΔ].id = bs.ⲆᐃⲆᐃΔ;
    this.ⲆΔΔ[bs.ⵠΔΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠⲆᐃⵠΔ], Jh);
    this.ⲆΔΔ[bs.ⵠΔΔⲆᐃ].id = bs.ⵠΔΔⲆᐃ;
    this.ⲆΔΔ[bs.ⵠΔⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠΔⵠΔΔ], 3);
    this.ⲆΔΔ[bs.ⵠΔⵠΔⲆ].id = bs.ⵠΔⵠΔⲆ;
    this.ⲆΔΔ[bs.ᐃⲆᐃΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆᐃᐃᐃⲆᐃ], Sg);
    this.ⲆΔΔ[bs.ᐃⲆᐃΔⵠ].id = bs.ᐃⲆᐃΔⵠ;
    this.ⲆΔΔ[bs.ᐃⲆⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠⲆᐃᐃᐃ], 3);
    this.ⲆΔΔ[bs.ᐃⲆⲆⲆⵠ].id = bs.ᐃⲆⲆⲆⵠ;
    this.ⲆΔΔ[bs.Ⲇᐃᐃⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆΔᐃᐃⲆ], ol);
    this.ⲆΔΔ[bs.Ⲇᐃᐃⵠᐃ].id = bs.Ⲇᐃᐃⵠᐃ;
    this.ⲆΔΔ[bs.ΔⵠⲆᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆᐃᐃⲆⲆ], 3);
    this.ⲆΔΔ[bs.ΔⵠⲆᐃⲆ].id = bs.ΔⵠⲆᐃⲆ;
    this.ⲆΔΔ[bs.ⵠᐃⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆΔΔⵠΔ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⲆⲆⲆ].id = bs.ⵠᐃⲆⲆⲆ;
    this.ⲆΔΔ[bs.ᐃⲆⲆⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔⲆⲆⲆΔ], Z);
    this.ⲆΔΔ[bs.ᐃⲆⲆⲆᐃ].id = bs.ᐃⲆⲆⲆᐃ;
    this.ⲆΔΔ[bs.ⲆⲆⵠᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆΔⲆⲆᐃⵠ], 3);
    this.ⲆΔΔ[bs.ⲆⲆⵠᐃᐃ].id = bs.ⲆⲆⵠᐃᐃ;
    this.ⲆΔΔ[bs.ΔΔⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠᐃⲆⵠⵠ], Qt);
    this.ⲆΔΔ[bs.ΔΔⲆⵠᐃ].id = bs.ΔΔⲆⵠᐃ;
    this.ⲆΔΔ[bs.Δⵠᐃⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔᐃᐃⵠᐃ], mt);
    this.ⲆΔΔ[bs.Δⵠᐃⵠⵠ].id = bs.Δⵠᐃⵠⵠ;
    this.ⲆΔΔ[bs.ⲆⲆⲆⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⵠᐃⵠᐃ], 3);
    this.ⲆΔΔ[bs.ⲆⲆⲆⵠΔ].id = bs.ⲆⲆⲆⵠΔ;
    this.ⲆΔΔ[bs.ⲆⲆⲆⵠΔ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ⲆⲆⲆⵠΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ᐃΔⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆⵠⲆⵠᐃ], 3);
    this.ⲆΔΔ[bs.ᐃΔⵠⵠⲆ].id = bs.ᐃΔⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⵠᐃᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⲆⵠⲆⵠᐃ], Gl);
    this.ⲆΔΔ[bs.ⵠᐃᐃⲆΔ].id = bs.ⵠᐃᐃⲆΔ;
    this.ⲆΔΔ[bs.ⲆΔⲆⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔᐃΔⵠΔ], Qk);
    this.ⲆΔΔ[bs.ⲆΔⲆⲆᐃ].id = bs.ⲆΔⲆⲆᐃ;
    this.ⲆΔΔ[bs.ⵠᐃᐃⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠⲆ], ar);
    this.ⲆΔΔ[bs.ⵠᐃᐃⲆⲆ].id = bs.ⵠᐃᐃⲆⲆ;
    this.ⲆΔΔ[bs.ΔⲆᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆᐃⵠΔⲆ], ar);
    this.ⲆΔΔ[bs.ΔⲆᐃᐃⲆ].id = bs.ΔⲆᐃᐃⲆ;
    this.ⲆΔΔ[bs.ⵠΔᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆᐃⲆᐃⲆ], ar);
    this.ⲆΔΔ[bs.ⵠΔᐃᐃΔ].id = bs.ⵠΔᐃᐃΔ;
    this.ⲆΔΔ[bs.ᐃⲆᐃⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔᐃⵠᐃΔⵠ], Qt);
    this.ⲆΔΔ[bs.ᐃⲆᐃⵠⲆ].id = bs.ᐃⲆᐃⵠⲆ;
    this.ⲆΔΔ[bs.ⵠΔΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠᐃⲆᐃΔ], co);
    this.ⲆΔΔ[bs.ⵠΔΔᐃⲆ].id = bs.ⵠΔΔᐃⲆ;
    this.ⲆΔΔ[bs.ᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ], ol);
    this.ⲆΔΔ[bs.ᐃⵠⲆΔ].id = bs.ᐃⵠⲆΔ;
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆᐃⵠᐃᐃ], 3);
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠᐃ].id = bs.ⵠⲆⲆⵠᐃ;
    this.ⲆΔΔ[bs.ⵠⵠΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔᐃΔΔⲆ], 3);
    this.ⲆΔΔ[bs.ⵠⵠΔⲆⵠ].id = bs.ⵠⵠΔⲆⵠ;
    this.ⲆΔΔ[bs.ⵠᐃΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⵠΔᐃΔⵠ], nn);
    this.ⲆΔΔ[bs.ⵠᐃΔΔⲆ].id = bs.ⵠᐃΔΔⲆ;
    this.ⲆΔΔ[bs.ΔᐃⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔΔⲆⲆΔ], 3);
    this.ⲆΔΔ[bs.ΔᐃⲆⵠⵠ].id = bs.ΔᐃⲆⵠⵠ;
    this.ⲆΔΔ[bs.ᐃΔⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠⵠⵠⵠᐃ], 3);
    this.ⲆΔΔ[bs.ᐃΔⲆᐃΔ].id = bs.ᐃΔⲆᐃΔ;
    this.ⲆΔΔ[bs.ᐃΔⲆᐃΔ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ᐃΔⲆᐃΔ].info.Ⲇⵠ[vq];
    this.ⲆΔΔ[bs.ⲆⲆⵠΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠΔⵠᐃⲆ], 3);
    this.ⲆΔΔ[bs.ⲆⲆⵠΔⵠ].id = bs.ⲆⲆⵠΔⵠ;
    this.ⲆΔΔ[bs.ⲆⲆⵠΔⵠ].info.Ⲇⵠ[gc] = this.ⲆΔΔ[bs.ⲆⲆⵠΔⵠ].info.Ⲇⵠ[tj];
    this.ⲆΔΔ[bs.ΔⲆⲆΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⲆⵠΔⵠⲆ], 3);
    this.ⲆΔΔ[bs.ΔⲆⲆΔᐃ].id = bs.ΔⲆⲆΔᐃ;
    this.ⲆΔΔ[bs.ΔⲆⲆΔᐃ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ΔⲆⲆΔᐃ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ⲆⲆⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔⵠⲆ], Jh);
    this.ⲆΔΔ[bs.ⲆⲆⲆⵠⵠ].id = bs.ⲆⲆⲆⵠⵠ;
    this.ⲆΔΔ[bs.ᐃᐃⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆⲆᐃ], Qt);
    this.ⲆΔΔ[bs.ᐃᐃⲆⵠᐃ].id = bs.ᐃᐃⲆⵠᐃ;
    this.ⲆΔΔ[bs.ⵠᐃᐃᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃΔⲆ], 3);
    this.ⲆΔΔ[bs.ⵠᐃᐃᐃⵠ].id = bs.ⵠᐃᐃᐃⵠ;
    this.ⲆΔΔ[bs.ᐃⲆⲆΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⵠⵠ], 3);
    this.ⲆΔΔ[bs.ᐃⲆⲆΔΔ].id = bs.ᐃⲆⲆΔΔ;
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆᐃⵠᐃᐃ], 3);
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠᐃ].id = bs.ⵠⲆⲆⵠᐃ;
    this.ⲆΔΔ[bs.ⲆᐃΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠᐃᐃᐃΔ], Qk);
    this.ⲆΔΔ[bs.ⲆᐃΔΔΔ].id = bs.ⲆᐃΔΔΔ;
    this.ⲆΔΔ[bs.ⵠⲆΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⵠΔᐃⲆⵠ], ar);
    this.ⲆΔΔ[bs.ⵠⲆΔΔᐃ].id = bs.ⵠⲆΔΔᐃ;
    this.ⲆΔΔ[bs.ΔΔⵠⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠᐃⲆⲆⲆ], mt);
    this.ⲆΔΔ[bs.ΔΔⵠⵠⵠ].id = bs.ΔΔⵠⵠⵠ;
    this.ⲆΔΔ[bs.ΔⵠΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆᐃⵠᐃᐃ], ar);
    this.ⲆΔΔ[bs.ΔⵠΔΔΔ].id = bs.ΔⵠΔΔΔ;
    this.ⲆΔΔ[bs.ΔΔᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠⲆᐃⲆⵠ], 3);
    this.ⲆΔΔ[bs.ΔΔᐃᐃⲆ].id = bs.ΔΔᐃᐃⲆ;
    this.ⲆΔΔ[bs.ⵠᐃΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⵠΔᐃΔ], 3);
    this.ⲆΔΔ[bs.ⵠᐃΔⲆⵠ].id = bs.ⵠᐃΔⲆⵠ;
    this.ⲆΔΔ[bs.ᐃⵠᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⵠᐃⵠⵠΔ], xs);
    this.ⲆΔΔ[bs.ᐃⵠᐃᐃᐃ].id = bs.ᐃⵠᐃᐃᐃ;
    this.ⲆΔΔ[bs.ⲆΔΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⵠⲆⲆⲆⵠ], ol);
    this.ⲆΔΔ[bs.ⲆΔΔⵠᐃ].id = bs.ⲆΔΔⵠᐃ;
    this.ⲆΔΔ[bs.ᐃⲆΔⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⵠⵠᐃᐃⲆ], 3);
    this.ⲆΔΔ[bs.ᐃⲆΔⵠⲆ].id = bs.ᐃⲆΔⵠⲆ;
    this.ⲆΔΔ[bs.ⲆⵠⵠⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠᐃⲆᐃΔᐃ], dt);
    this.ⲆΔΔ[bs.ⲆⵠⵠⲆⲆ].id = bs.ⲆⵠⵠⲆⲆ;
    this.ⲆΔΔ[bs.ⵠᐃⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⲆᐃⲆⵠ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⲆᐃᐃ].id = bs.ⵠᐃⲆᐃᐃ;
    this.ⲆΔΔ[bs.ΔΔΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆⲆᐃΔᐃ], Sg);
    this.ⲆΔΔ[bs.ΔΔΔΔⵠ].id = bs.ΔΔΔΔⵠ;
    this.ⲆΔΔ[bs.ᐃⵠⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃⵠⵠⲆᐃ], 3);
    this.ⲆΔΔ[bs.ᐃⵠⲆⵠᐃ].id = bs.ᐃⵠⲆⵠᐃ;
    this.ⲆΔΔ[bs.ΔⵠⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠⲆⵠⲆⵠ], 3);
    this.ⲆΔΔ[bs.ΔⵠⵠΔⲆ].id = bs.ΔⵠⵠΔⲆ;
    this.ⲆΔΔ[bs.ⵠⲆΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆⵠⵠΔⵠ], 3);
    this.ⲆΔΔ[bs.ⵠⲆΔⵠᐃ].id = bs.ⵠⲆΔⵠᐃ;
    this.ⲆΔΔ[bs.ᐃⲆⵠⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔⵠΔᐃⵠ], Qk);
    this.ⲆΔΔ[bs.ᐃⲆⵠⵠΔ].id = bs.ᐃⲆⵠⵠΔ;
    this.ⲆΔΔ[bs.ᐃΔᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆᐃᐃΔⲆ], 3);
    this.ⲆΔΔ[bs.ᐃΔᐃᐃⲆ].id = bs.ᐃΔᐃᐃⲆ;
    this.ⲆΔΔ[bs.ᐃᐃΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⵠΔⲆᐃⵠ], Gl);
    this.ⲆΔΔ[bs.ᐃᐃΔⵠᐃ].id = bs.ᐃᐃΔⵠᐃ;
    this.ⲆΔΔ[bs.ᐃᐃΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⵠⲆᐃᐃⵠ], Kj);
    this.ⲆΔΔ[bs.ᐃᐃΔᐃᐃ].id = bs.ᐃᐃΔᐃᐃ;
    this.ⲆΔΔ[bs.ⵠᐃⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃΔᐃⵠⲆᐃ], ol);
    this.ⲆΔΔ[bs.ⵠᐃⲆⵠᐃ].id = bs.ⵠᐃⲆⵠᐃ;
    this.ⲆΔΔ[bs.ⵠⵠⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔⵠⲆᐃΔ], Sg);
    this.ⲆΔΔ[bs.ⵠⵠⵠΔⲆ].id = bs.ⵠⵠⵠΔⲆ;
    this.ⲆΔΔ[bs.ⲆⲆᐃⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠᐃⲆⵠⵠ], 3);
    this.ⲆΔΔ[bs.ⲆⲆᐃⵠᐃ].id = bs.ⲆⲆᐃⵠᐃ;
    this.ⲆΔΔ[bs.ⵠⵠⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.Δⵠⵠⵠⵠᐃⵠ], $b);
    this.ⲆΔΔ[bs.ⵠⵠⵠᐃΔ].id = bs.ⵠⵠⵠᐃΔ;
    this.ⲆΔΔ[bs.ᐃⲆΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃⵠΔⲆΔ], mt);
    this.ⲆΔΔ[bs.ᐃⲆΔΔⲆ].id = bs.ᐃⲆΔΔⲆ;
    this.ⲆΔΔ[bs.ΔΔⵠⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠΔᐃⲆᐃ], X);
    this.ⲆΔΔ[bs.ΔΔⵠⲆⲆ].id = bs.ΔΔⵠⲆⲆ;
    this.ⲆΔΔ[bs.ⲆⵠⲆΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⵠΔΔᐃⲆ], 3);
    this.ⲆΔΔ[bs.ⲆⵠⲆΔⲆ].id = bs.ⲆⵠⲆΔⲆ;
    this.ⲆΔΔ[bs.ⵠⲆΔⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔⲆᐃⵠΔ], ar);
    this.ⲆΔΔ[bs.ⵠⲆΔⲆⲆ].id = bs.ⵠⲆΔⲆⲆ;
    this.ⲆΔΔ[bs.Ⲇⵠᐃᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃⵠᐃᐃⲆ], Wb);
    this.ⲆΔΔ[bs.Ⲇⵠᐃᐃⵠ].id = bs.Ⲇⵠᐃᐃⵠ;
    this.ⲆΔΔ[bs.ⲆᐃᐃⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠᐃⲆᐃⵠΔ], 3);
    this.ⲆΔΔ[bs.ⲆᐃᐃⵠⲆ].id = bs.ⲆᐃᐃⵠⲆ;
    this.ⲆΔΔ[bs.ΔⵠⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆᐃᐃΔⵠ], og);
    this.ⲆΔΔ[bs.ΔⵠⵠⵠⲆ].id = bs.ΔⵠⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⵠΔⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⲆᐃᐃⵠⵠ], 3);
    this.ⲆΔΔ[bs.ⵠΔⲆⵠᐃ].id = bs.ⵠΔⲆⵠᐃ;
    this.ⲆΔΔ[bs.ⲆᐃⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔⵠⵠᐃⲆ], 3);
    this.ⲆΔΔ[bs.ⲆᐃⲆΔⵠ].id = bs.ⲆᐃⲆΔⵠ;
    this.ⲆΔΔ[bs.ΔΔⲆΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆⵠⲆΔⵠ], Jh);
    this.ⲆΔΔ[bs.ΔΔⲆΔΔ].id = bs.ΔΔⲆΔΔ;
    this.ⲆΔΔ[bs.ⵠⲆⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆᐃΔⲆᐃ], og);
    this.ⲆΔΔ[bs.ⵠⲆⲆᐃᐃ].id = bs.ⵠⲆⲆᐃᐃ;
    this.ⲆΔΔ[bs.ⵠᐃⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔᐃΔᐃΔⲆ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⵠⵠⲆ].id = bs.ⵠᐃⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃΔⲆᐃΔ], 3);
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠⵠ].id = bs.ⵠⲆⲆⵠⵠ;
    this.ⲆΔΔ[bs.ΔᐃΔⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⵠⲆΔΔΔ], $b);
    this.ⲆΔΔ[bs.ΔᐃΔⲆΔ].id = bs.ΔᐃΔⲆΔ;
    this.ⲆΔΔ[bs.ⵠⲆᐃⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔΔᐃᐃⲆ], 3);
    this.ⲆΔΔ[bs.ⵠⲆᐃⲆⵠ].id = bs.ⵠⲆᐃⲆⵠ;
    this.ⲆΔΔ[bs.ᐃΔΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠⵠᐃΔᐃ], 3);
    this.ⲆΔΔ[bs.ᐃΔΔΔᐃ].id = bs.ᐃΔΔΔᐃ;
    this.ⲆΔΔ[bs.ΔⵠⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⲆᐃⲆᐃ], Gl);
    this.ⲆΔΔ[bs.ΔⵠⵠⲆΔ].id = bs.ΔⵠⵠⲆΔ;
    this.ⲆΔΔ[bs.ⵠⲆᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃΔᐃᐃⲆ], 3);
    this.ⲆΔΔ[bs.ⵠⲆᐃⲆΔ].id = bs.ⵠⲆᐃⲆΔ;
    this.ⲆΔΔ[bs.ᐃⲆΔⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃⵠᐃⵠᐃ], dt);
    this.ⲆΔΔ[bs.ᐃⲆΔⵠΔ].id = bs.ᐃⲆΔⵠΔ;
    this.ⲆΔΔ[bs.ⵠⵠⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠⲆⵠⵠⲆ], 3);
    this.ⲆΔΔ[bs.ⵠⵠⲆⵠᐃ].id = bs.ⵠⵠⲆⵠᐃ;
    this.ⲆΔΔ[bs.ⵠᐃⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⵠⵠⵠⲆ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⵠⲆᐃ].id = bs.ⵠᐃⵠⲆᐃ;
    this.ⲆΔΔ[bs.ᐃⵠΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔΔᐃᐃᐃ], $b);
    this.ⲆΔΔ[bs.ᐃⵠΔΔΔ].id = bs.ᐃⵠΔΔΔ;
    this.ⲆΔΔ[bs.ᐃⵠΔΔΔ].info.Ⲇⵠ[ld] = this.ⲆΔΔ[bs.ᐃⵠΔΔΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⵠᐃᐃⲆ], Qt);
    this.ⲆΔΔ[bs.ᐃⵠⲆΔ].id = bs.ᐃⵠⲆΔ;
    this.ⲆΔΔ[bs.ΔⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆΔⵠⲆⵠ], 3);
    this.ⲆΔΔ[bs.ΔⲆⲆⲆ].id = bs.ΔⲆⲆⲆ;
    this.ⲆΔΔ[bs.ΔⲆⲆⲆ].info.Ⲇⵠ[Ss] = this.ⲆΔΔ[bs.ΔⲆⲆⲆ].info.Ⲇⵠ[qn];
    this.ⲆΔΔ[bs.ⵠᐃᐃⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔΔⲆΔⵠΔ], Jh);
    this.ⲆΔΔ[bs.ⵠᐃᐃⵠⵠ].id = bs.ⵠᐃᐃⵠⵠ;
    this.ⲆΔΔ[bs.ⲆΔΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃΔⵠᐃⲆΔ], yh);
    this.ⲆΔΔ[bs.ⲆΔΔΔⲆ].id = bs.ⲆΔΔΔⲆ;
    this.ⲆΔΔ[bs.ΔⵠⲆΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔΔⲆᐃΔⵠ], 3);
    this.ⲆΔΔ[bs.ΔⵠⲆΔΔ].id = bs.ΔⵠⲆΔΔ;
    this.ⲆΔΔ[bs.ⲆⲆᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆⵠᐃᐃΔ], 3);
    this.ⲆΔΔ[bs.ⲆⲆᐃᐃᐃ].id = bs.ⲆⲆᐃᐃᐃ;
    this.ⲆΔΔ[bs.ΔΔᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃᐃⲆⲆΔᐃ], Jh);
    this.ⲆΔΔ[bs.ΔΔᐃΔᐃ].id = bs.ΔΔᐃΔᐃ;
    this.ⲆΔΔ[bs.ᐃⲆΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃΔⲆΔᐃⵠ], 3);
    this.ⲆΔΔ[bs.ᐃⲆΔΔⵠ].id = bs.ᐃⲆΔΔⵠ;
    this.ⲆΔΔ[bs.ΔⵠΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⲆᐃⲆⲆΔ], 3);
    this.ⲆΔΔ[bs.ΔⵠΔⲆⵠ].id = bs.ΔⵠΔⲆⵠ;
    this.ⲆΔΔ[bs.ⵠⵠᐃⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⵠᐃΔⲆ], Jh);
    this.ⲆΔΔ[bs.ⵠⵠᐃⲆⲆ].id = bs.ⵠⵠᐃⲆⲆ;
    this.ⲆΔΔ[bs.Δᐃⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔᐃᐃⵠᐃ], 3);
    this.ⲆΔΔ[bs.Δᐃⵠᐃⵠ].id = bs.Δᐃⵠᐃⵠ;
    this.ⲆΔΔ[bs.ᐃΔⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆᐃᐃᐃⲆ], Ka);
    this.ⲆΔΔ[bs.ᐃΔⵠⲆΔ].id = bs.ᐃΔⵠⲆΔ;
    this.ⲆΔΔ[bs.ⵠΔⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.Ⲇᐃᐃᐃᐃᐃⵠ], $b);
    this.ⲆΔΔ[bs.ⵠΔⵠⲆΔ].id = bs.ⵠΔⵠⲆΔ;
    this.ⲆΔΔ[bs.ⵠᐃⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆⲆΔⵠᐃ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⲆΔⵠ].id = bs.ⵠᐃⲆΔⵠ;
    this.ⲆΔΔ[bs.ⵠΔⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃᐃⵠⵠⲆ], 3);
    this.ⲆΔΔ[bs.ⵠΔⵠⲆⵠ].id = bs.ⵠΔⵠⲆⵠ;
    this.ⲆΔΔ[bs.Δⵠᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔⲆⲆⲆΔ], Qk);
    this.ⲆΔΔ[bs.Δⵠᐃᐃᐃ].id = bs.Δⵠᐃᐃᐃ;
    this.ⲆΔΔ[bs.ⲆⲆΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆᐃⲆᐃⲆ], dt);
    this.ⲆΔΔ[bs.ⲆⲆΔᐃᐃ].id = bs.ⲆⲆΔᐃᐃ;
    this.ⲆΔΔ[bs.ⲆⲆΔᐃᐃ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ⲆⲆΔᐃᐃ].info.Ⲇⵠ[gr];
    this.ⲆΔΔ[bs.ⲆΔΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⵠΔⵠⵠ], 3);
    this.ⲆΔΔ[bs.ⲆΔΔᐃⵠ].id = bs.ⲆΔΔᐃⵠ;
    this.ⲆΔΔ[bs.ⲆΔΔᐃⵠ].info.Ⲇⵠ[Zn] = this.ⲆΔΔ[bs.ⲆΔΔᐃⵠ].info.Ⲇⵠ[Nl];
    this.ⲆΔΔ[bs.ΔⵠᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⵠΔⲆΔⲆ], X);
    this.ⲆΔΔ[bs.ΔⵠᐃΔᐃ].id = bs.ΔⵠᐃΔᐃ;
    this.ⲆΔΔ[bs.ΔⵠᐃΔᐃ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ΔⵠᐃΔᐃ].info.Ⲇⵠ[qk];
    this.ⲆΔΔ[bs.ⵠᐃⵠΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔΔⵠΔΔ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⵠΔΔ].id = bs.ⵠᐃⵠΔΔ;
    this.ⲆΔΔ[bs.ⵠᐃⵠΔΔ].info.Ⲇⵠ[zk] = this.ⲆΔΔ[bs.ⵠᐃⵠΔΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ΔᐃΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆⵠΔΔⵠ], 3);
    this.ⲆΔΔ[bs.ΔᐃΔΔΔ].id = bs.ΔᐃΔΔΔ;
    this.ⲆΔΔ[bs.ⵠᐃΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃⲆᐃⲆᐃ], 3);
    this.ⲆΔΔ[bs.ⵠᐃΔᐃⲆ].id = bs.ⵠᐃΔᐃⲆ;
    this.ⲆΔΔ[bs.ⵠΔᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.Δᐃᐃᐃᐃᐃᐃ], Qt);
    this.ⲆΔΔ[bs.ⵠΔᐃΔᐃ].id = bs.ⵠΔᐃΔᐃ;
    this.ⲆΔΔ[bs.ᐃⲆΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔⵠⲆᐃⲆ], mt);
    this.ⲆΔΔ[bs.ᐃⲆΔⲆᐃ].id = bs.ᐃⲆΔⲆᐃ;
    this.ⲆΔΔ[bs.ΔⵠᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃᐃᐃⵠΔᐃ], 3);
    this.ⲆΔΔ[bs.ΔⵠᐃⵠΔ].id = bs.ΔⵠᐃⵠΔ;
    this.ⲆΔΔ[bs.ⵠΔⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠᐃⵠⲆᐃ], X);
    this.ⲆΔΔ[bs.ⵠΔⵠⲆᐃ].id = bs.ⵠΔⵠⲆᐃ;
    this.ⲆΔΔ[bs.ⵠⵠⲆⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆⵠᐃΔΔ], mt);
    this.ⲆΔΔ[bs.ⵠⵠⲆⲆΔ].id = bs.ⵠⵠⲆⲆΔ;
    this.ⲆΔΔ[bs.ⲆΔⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⲆΔΔᐃⲆ], Z);
    this.ⲆΔΔ[bs.ⲆΔⵠⲆᐃ].id = bs.ⲆΔⵠⲆᐃ;
    this.ⲆΔΔ[bs.ΔᐃⲆⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃⵠⲆᐃᐃ], mt);
    this.ⲆΔΔ[bs.ΔᐃⲆⲆᐃ].id = bs.ΔᐃⲆⲆᐃ;
    this.ⲆΔΔ[bs.ⲆⵠⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆᐃΔⵠⲆ], Qt);
    this.ⲆΔΔ[bs.ⲆⵠⵠᐃΔ].id = bs.ⲆⵠⵠᐃΔ;
    this.ⲆΔΔ[bs.ⵠⲆⵠⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠΔⲆᐃΔ], 3);
    this.ⲆΔΔ[bs.ⵠⲆⵠⵠⵠ].id = bs.ⵠⲆⵠⵠⵠ;
    this.ⲆΔΔ[bs.ⵠᐃⵠⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆⵠΔⲆᐃ], Jh);
    this.ⲆΔΔ[bs.ⵠᐃⵠⵠΔ].id = bs.ⵠᐃⵠⵠΔ;
    this.ⲆΔΔ[bs.ⵠΔⲆᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⵠⵠⲆᐃ], 3);
    this.ⲆΔΔ[bs.ⵠΔⲆᐃⵠ].id = bs.ⵠΔⲆᐃⵠ;
    this.ⲆΔΔ[bs.ᐃⵠᐃⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃᐃⲆᐃΔ], 3);
    this.ⲆΔΔ[bs.ᐃⵠᐃⲆⲆ].id = bs.ᐃⵠᐃⲆⲆ;
    this.ⲆΔΔ[bs.ΔΔΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆⵠΔᐃⲆ], nn);
    this.ⲆΔΔ[bs.ΔΔΔᐃⵠ].id = bs.ΔΔΔᐃⵠ;
    this.ⲆΔΔ[bs.ᐃΔᐃᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⲆΔΔᐃⲆ], Qk);
    this.ⲆΔΔ[bs.ᐃΔᐃᐃⵠ].id = bs.ᐃΔᐃᐃⵠ;
    this.ⲆΔΔ[bs.ΔⲆⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆᐃⵠΔΔ], Sg);
    this.ⲆΔΔ[bs.ΔⲆⲆⲆⲆ].id = bs.ΔⲆⲆⲆⲆ;
    this.ⲆΔΔ[bs.ᐃΔⲆᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔⲆⲆᐃⵠ], co);
    this.ⲆΔΔ[bs.ᐃΔⲆᐃⲆ].id = bs.ᐃΔⲆᐃⲆ;
    this.ⲆΔΔ[bs.ⲆⵠΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔᐃΔⲆⲆ], 3);
    this.ⲆΔΔ[bs.ⲆⵠΔΔⲆ].id = bs.ⲆⵠΔΔⲆ;
    this.ⲆΔΔ[bs.ⵠⲆΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔΔᐃᐃΔ], 3);
    this.ⲆΔΔ[bs.ⵠⲆΔᐃᐃ].id = bs.ⵠⲆΔᐃᐃ;
    this.ⲆΔΔ[bs.ⵠⲆΔᐃᐃ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ⵠⲆΔᐃᐃ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ᐃᐃᐃΔΔ] = kw(60, 60, 0, ΔΔ[Ur.Δᐃⵠⵠⵠᐃᐃ], 3);
    this.ⲆΔΔ[bs.ᐃᐃᐃΔΔ].id = bs.ᐃᐃᐃΔΔ;
    this.ⲆΔΔ[bs.ⵠᐃⲆⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠⵠΔΔⵠ], ol);
    this.ⲆΔΔ[bs.ⵠᐃⲆⵠⲆ].id = bs.ⵠᐃⲆⵠⲆ;
    this.ⲆΔΔ[bs.ΔⵠΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠΔⲆᐃᐃ], 3);
    this.ⲆΔΔ[bs.ΔⵠΔΔⵠ].id = bs.ΔⵠΔΔⵠ;
    this.ⲆΔΔ[bs.ⵠᐃΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆΔΔΔᐃ], Kj);
    this.ⲆΔΔ[bs.ⵠᐃΔΔⵠ].id = bs.ⵠᐃΔΔⵠ;
    this.ⲆΔΔ[bs.ΔⲆΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃᐃⵠᐃⲆ], Sg);
    this.ⲆΔΔ[bs.ΔⲆΔᐃⵠ].id = bs.ΔⲆΔᐃⵠ;
    this.ⲆΔΔ[bs.ᐃⲆΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠⵠΔᐃⵠ], ol);
    this.ⲆΔΔ[bs.ᐃⲆΔᐃᐃ].id = bs.ᐃⲆΔᐃᐃ;
    this.ⲆΔΔ[bs.ⲆΔⲆᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠΔⲆⲆⲆ], co);
    this.ⲆΔΔ[bs.ⲆΔⲆᐃⵠ].id = bs.ⲆΔⲆᐃⵠ;
    this.ⲆΔΔ[bs.ᐃΔᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⵠΔΔⲆⲆ], Jh);
    this.ⲆΔΔ[bs.ᐃΔᐃⵠΔ].id = bs.ᐃΔᐃⵠΔ;
    this.ⲆΔΔ[bs.ᐃΔᐃⵠΔ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ᐃΔᐃⵠΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ⲆᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔᐃΔⲆᐃⵠ], 3);
    this.ⲆΔΔ[bs.ⲆᐃⵠⲆΔ].id = bs.ⲆᐃⵠⲆΔ;
    this.ⲆΔΔ[bs.ⵠΔⵠΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃⵠΔⵠΔ], 3);
    this.ⲆΔΔ[bs.ⵠΔⵠΔⵠ].id = bs.ⵠΔⵠΔⵠ;
    this.ⲆΔΔ[bs.ⵠΔⵠΔⵠ].info.Ⲇⵠ[lt] = this.ⲆΔΔ[bs.ⵠΔⵠΔⵠ].info.Ⲇⵠ[Cn];
    this.ⲆΔΔ[bs.ΔⵠⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔΔΔᐃᐃ], 3);
    this.ⲆΔΔ[bs.ΔⵠⲆⲆⲆ].id = bs.ΔⵠⲆⲆⲆ;
    this.ⲆΔΔ[bs.ⲆΔΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⵠⵠΔⵠⲆ], 3);
    this.ⲆΔΔ[bs.ⲆΔΔⲆᐃ].id = bs.ⲆΔΔⲆᐃ;
    this.ⲆΔΔ[bs.ᐃⵠⵠΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠⵠⲆΔᐃ], 3);
    this.ⲆΔΔ[bs.ᐃⵠⵠΔᐃ].id = bs.ᐃⵠⵠΔᐃ;
    this.ⲆΔΔ[bs.ᐃⵠⵠΔᐃ].info.Ⲇⵠ[Zt] = this.ⲆΔΔ[bs.ᐃⵠⵠΔᐃ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ᐃᐃΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⲆᐃⵠᐃ], Kj);
    this.ⲆΔΔ[bs.ᐃᐃΔⲆⵠ].id = bs.ᐃᐃΔⲆⵠ;
    this.ⲆΔΔ[bs.ⵠⵠⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆᐃⲆᐃΔ], 3);
    this.ⲆΔΔ[bs.ⵠⵠⲆⵠⵠ].id = bs.ⵠⵠⲆⵠⵠ;
    this.ⲆΔΔ[bs.ᐃⵠⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠⵠⵠⵠΔ], $b);
    this.ⲆΔΔ[bs.ᐃⵠⵠᐃⵠ].id = bs.ᐃⵠⵠᐃⵠ;
    this.ⲆΔΔ[bs.ᐃⵠᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃⲆⵠᐃᐃ], Z);
    this.ⲆΔΔ[bs.ᐃⵠᐃⵠΔ].id = bs.ᐃⵠᐃⵠΔ;
    this.ⲆΔΔ[bs.ⲆΔᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃΔⲆᐃⵠ], 3);
    this.ⲆΔΔ[bs.ⲆΔᐃᐃΔ].id = bs.ⲆΔᐃᐃΔ;
    this.ⲆΔΔ[bs.ⲆⲆΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⲆΔⲆΔᐃ], Sg);
    this.ⲆΔΔ[bs.ⲆⲆΔΔΔ].id = bs.ⲆⲆΔΔΔ;
    this.ⲆΔΔ[bs.ⲆΔⲆⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆΔΔᐃⵠ], Kj);
    this.ⲆΔΔ[bs.ⲆΔⲆⵠⲆ].id = bs.ⲆΔⲆⵠⲆ;
    this.ⲆΔΔ[bs.ΔᐃⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔᐃⵠⲆⲆΔ], Wb);
    this.ⲆΔΔ[bs.ΔᐃⵠⲆⵠ].id = bs.ΔᐃⵠⲆⵠ;
    this.ⲆΔΔ[bs.ⵠΔⵠᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆΔᐃᐃΔΔ], 3);
    this.ⲆΔΔ[bs.ⵠΔⵠᐃᐃ].id = bs.ⵠΔⵠᐃᐃ;
    this.ⲆΔΔ[bs.ⵠΔⵠᐃᐃ].info.Ⲇⵠ[Zt] = this.ⲆΔΔ[bs.ⵠΔⵠᐃᐃ].info.Ⲇⵠ[uh];
    this.ⲆΔΔ[bs.ⵠᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠΔⵠΔΔΔ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⵠⲆΔ].id = bs.ⵠᐃⵠⲆΔ;
    this.ⲆΔΔ[bs.ⵠᐃⵠⲆΔ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ⵠᐃⵠⲆΔ].info.Ⲇⵠ[Ih];
    this.ⲆΔΔ[bs.ΔΔᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠΔᐃΔⲆ], 3);
    this.ⲆΔΔ[bs.ΔΔᐃⲆΔ].id = bs.ΔΔᐃⲆΔ;
    this.ⲆΔΔ[bs.ⲆⲆᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃⲆⵠⲆⲆ], 3);
    this.ⲆΔΔ[bs.ⲆⲆᐃⲆΔ].id = bs.ⲆⲆᐃⲆΔ;
    this.ⲆΔΔ[bs.ⲆⲆᐃⲆΔ].info.Ⲇⵠ[Zn] = this.ⲆΔΔ[bs.ⲆⲆᐃⲆΔ].info.Ⲇⵠ[qn];
    this.ⲆΔΔ[bs.ⵠᐃⵠᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔᐃⲆⵠⲆⲆ], 3);
    this.ⲆΔΔ[bs.ⵠᐃⵠᐃᐃ].id = bs.ⵠᐃⵠᐃᐃ;
    this.ⲆΔΔ[bs.ᐃⵠⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃΔⵠᐃⵠΔ], 3);
    this.ⲆΔΔ[bs.ᐃⵠⲆᐃΔ].id = bs.ᐃⵠⲆᐃΔ;
    this.ⲆΔΔ[bs.ⲆⵠⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆⲆⵠᐃⵠ], Jh);
    this.ⲆΔΔ[bs.ⲆⵠⲆⲆⲆ].id = bs.ⲆⵠⲆⲆⲆ;
    this.ⲆΔΔ[bs.ⲆⲆΔᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠᐃΔᐃⲆ], Sg);
    this.ⲆΔΔ[bs.ⲆⲆΔᐃΔ].id = bs.ⲆⲆΔᐃΔ;
    this.ⲆΔΔ[bs.ᐃᐃⵠⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆⵠⵠⵠᐃ], Sg);
    this.ⲆΔΔ[bs.ᐃᐃⵠⵠᐃ].id = bs.ᐃᐃⵠⵠᐃ;
    this.ⲆΔΔ[bs.ᐃᐃⵠⵠᐃ].info.Ⲇⵠ[lt] = this.ⲆΔΔ[bs.ᐃᐃⵠⵠᐃ].info.Ⲇⵠ[Tg];
    this.ⲆΔΔ[bs.ⲆⵠΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠⵠΔⵠᐃ], 3);
    this.ⲆΔΔ[bs.ⲆⵠΔᐃᐃ].id = bs.ⲆⵠΔᐃᐃ;
    this.ⲆΔΔ[bs.ⲆⵠΔᐃᐃ].info.Ⲇⵠ[vk] = this.ⲆΔΔ[bs.ⲆⵠΔᐃᐃ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ΔⲆΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ], Ka);
    this.ⲆΔΔ[bs.ΔⲆΔᐃⲆ].id = bs.ΔⲆΔᐃⲆ;
    this.ⲆΔΔ[bs.ΔⲆⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ], xs);
    this.ⲆΔΔ[bs.ΔⲆⵠⲆᐃ].id = bs.ΔⲆⵠⲆᐃ;
    this.ⲆΔΔ[bs.ⵠΔΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠᐃⲆⵠΔ], 3);
    this.ⲆΔΔ[bs.ⵠΔΔΔΔ].id = bs.ⵠΔΔΔΔ;
    this.ⲆΔΔ[bs.ⵠΔΔΔΔ].info.Ⲇⵠ[Pt] = this.ⲆΔΔ[bs.ⵠΔΔΔΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ᐃⲆⲆⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⲆΔΔΔ], 3);
    this.ⲆΔΔ[bs.ᐃⲆⲆⵠΔ].id = bs.ᐃⲆⲆⵠΔ;
    this.ⲆΔΔ[bs.ᐃⲆⲆⵠΔ].info.Ⲇⵠ[zk] = this.ⲆΔΔ[bs.ᐃⲆⲆⵠΔ].info.Ⲇⵠ[0];
    this.ⲆΔΔ[bs.ⲆⲆⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆΔⲆⲆⵠ], Jh);
    this.ⲆΔΔ[bs.ⲆⲆⵠΔⲆ].id = bs.ⲆⲆⵠΔⲆ;
    this.ⲆΔΔ[bs.ᐃᐃⲆⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⲆⲆⵠᐃ], dt);
    this.ⲆΔΔ[bs.ᐃᐃⲆⲆΔ].id = bs.ᐃᐃⲆⲆΔ;
    this.ⲆΔΔ[bs.ᐃᐃⲆⲆΔ].info.Ⲇⵠ[re] = this.ⲆΔΔ[bs.ᐃᐃⲆⲆΔ].info.Ⲇⵠ[Rl];
    this.ⲆΔΔ[bs.ΔᐃΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠᐃᐃᐃⵠⲆ], 3);
    this.ⲆΔΔ[bs.ΔᐃΔΔⵠ].id = bs.ΔᐃΔΔⵠ;
    this.ⲆΔΔ[bs.ΔᐃΔΔⵠ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ΔᐃΔΔⵠ].info.Ⲇⵠ[Fj];
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆΔᐃΔᐃᐃ], Qk);
    this.ⲆΔΔ[bs.ⵠⲆⲆⵠΔ].id = bs.ⵠⲆⲆⵠΔ;
    this.ⲆΔΔ[bs.ⲆⲆΔⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔᐃᐃⲆᐃ], 3);
    this.ⲆΔΔ[bs.ⲆⲆΔⵠΔ].id = bs.ⲆⲆΔⵠΔ;
    this.ⲆΔΔ[bs.ⲆⲆΔⵠΔ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ⲆⲆΔⵠΔ].info.Ⲇⵠ[qn];
    this.ⲆΔΔ[bs.ⲆⲆⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⲆᐃⵠⲆ], Kj);
    this.ⲆΔΔ[bs.ⲆⲆⲆᐃᐃ].id = bs.ⲆⲆⲆᐃᐃ;
    this.ⲆΔΔ[bs.ᐃⲆᐃΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃᐃⵠⲆⵠⲆ], 3);
    this.ⲆΔΔ[bs.ᐃⲆᐃΔⲆ].id = bs.ᐃⲆᐃΔⲆ;
    this.ⲆΔΔ[bs.ⵠΔᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃΔᐃᐃΔ], Gl);
    this.ⲆΔΔ[bs.ⵠΔᐃᐃⲆ].id = bs.ⵠΔᐃᐃⲆ;
    this.ⲆΔΔ[bs.ᐃᐃⲆᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆⲆᐃⵠΔ], Sg);
    this.ⲆΔΔ[bs.ᐃᐃⲆᐃⲆ].id = bs.ᐃᐃⲆᐃⲆ;
    this.ⲆΔΔ[bs.ⲆⲆⵠⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔⲆⵠΔⲆ], $b);
    this.ⲆΔΔ[bs.ⲆⲆⵠⵠΔ].id = bs.ⲆⲆⵠⵠΔ;
    this.ⲆΔΔ[bs.ⵠⲆᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆΔΔᐃⵠ], Wb);
    this.ⲆΔΔ[bs.ⵠⲆᐃⵠΔ].id = bs.ⵠⲆᐃⵠΔ;
    this.ⲆΔΔ[bs.ᐃΔΔⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆⵠᐃⲆⵠ], 3);
    this.ⲆΔΔ[bs.ᐃΔΔⵠⲆ].id = bs.ᐃΔΔⵠⲆ;
    this.ⲆΔΔ[bs.ΔΔⵠᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠᐃΔΔⲆᐃ], 3);
    this.ⲆΔΔ[bs.ΔΔⵠᐃⲆ].id = bs.ΔΔⵠᐃⲆ;
    this.ⲆΔΔ[bs.ⲆΔⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠⵠⲆⲆⵠ], ol);
    this.ⲆΔΔ[bs.ⲆΔⲆⵠⵠ].id = bs.ⲆΔⲆⵠⵠ;
    this.ⲆΔΔ[bs.ᐃᐃᐃⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆᐃⵠⵠⲆ], 3);
    this.ⲆΔΔ[bs.ᐃᐃᐃⲆⵠ].id = bs.ᐃᐃᐃⲆⵠ;
    this.ⲆΔΔ[bs.Δᐃᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⲆᐃᐃᐃ], 3);
    this.ⲆΔΔ[bs.Δᐃᐃᐃᐃ].id = bs.Δᐃᐃᐃᐃ;
    this.ⲆΔΔ[bs.ⵠΔΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠΔΔⵠⵠ], 3);
    this.ⲆΔΔ[bs.ⵠΔΔΔⵠ].id = bs.ⵠΔΔΔⵠ;
    this.ⲆΔΔ[bs.ⲆΔⲆΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠᐃᐃΔΔ], og);
    this.ⲆΔΔ[bs.ⲆΔⲆΔᐃ].id = bs.ⲆΔⲆΔᐃ;
    this.ⲆΔΔ[bs.ᐃΔⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆⲆⵠⲆⵠ], Ka);
    this.ⲆΔΔ[bs.ᐃΔⵠⲆᐃ].id = bs.ᐃΔⵠⲆᐃ;
    this.ⲆΔΔ[bs.ᐃⵠΔⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⵠΔΔΔΔ], Kj);
    this.ⲆΔΔ[bs.ᐃⵠΔⵠⲆ].id = bs.ᐃⵠΔⵠⲆ;
    this.ⲆΔΔ[bs.ΔⲆⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔᐃⵠⵠⲆ], 3);
    this.ⲆΔΔ[bs.ΔⲆⵠⵠⲆ].id = bs.ΔⲆⵠⵠⲆ;
    this.ⲆΔΔ[bs.ᐃⲆᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⲆᐃⵠᐃᐃ], Qt);
    this.ⲆΔΔ[bs.ᐃⲆᐃⵠΔ].id = bs.ᐃⲆᐃⵠΔ;
    this.ⲆΔΔ[bs.ⲆⲆΔⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠᐃᐃⲆⲆⲆ], Wb);
    this.ⲆΔΔ[bs.ⲆⲆΔⵠⲆ].id = bs.ⲆⲆΔⵠⲆ;
    this.ⲆΔΔ[bs.ᐃΔᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⲆⲆⵠᐃᐃ], Kj);
    this.ⲆΔΔ[bs.ᐃΔᐃᐃΔ].id = bs.ᐃΔᐃᐃΔ;
    this.ⲆΔΔ[bs.ᐃⵠΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⵠᐃᐃᐃ], 3);
    this.ⲆΔΔ[bs.ᐃⵠΔᐃⵠ].id = bs.ᐃⵠΔᐃⵠ;
    this.ⲆΔΔ[bs.ⲆⵠᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆᐃᐃᐃⲆ], 3);
    this.ⲆΔΔ[bs.ⲆⵠᐃᐃΔ].id = bs.ⲆⵠᐃᐃΔ;
    this.ⲆΔΔ[bs.ᐃᐃᐃⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃΔⵠⵠⲆ], ol);
    this.ⲆΔΔ[bs.ᐃᐃᐃⲆᐃ].id = bs.ᐃᐃᐃⲆᐃ;
    this.ⲆΔΔ[bs.ⲆᐃᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠⲆⲆⲆⲆ], 3);
    this.ⲆΔΔ[bs.ⲆᐃᐃΔᐃ].id = bs.ⲆᐃᐃΔᐃ;
    this.ⲆΔΔ[bs.ᐃⵠⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⲆΔⵠΔ], nn);
    this.ⲆΔΔ[bs.ᐃⵠⵠⵠⲆ].id = bs.ᐃⵠⵠⵠⲆ;
    this.ⲆΔΔ[bs.ΔⲆⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔᐃⲆⵠⵠ], mt);
    this.ⲆΔΔ[bs.ΔⲆⵠⲆΔ].id = bs.ΔⲆⵠⲆΔ;
    this.ⲆΔΔ[bs.ᐃᐃⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆⵠⵠⲆⲆ], X);
    this.ⲆΔΔ[bs.ᐃᐃⵠⲆⵠ].id = bs.ᐃᐃⵠⲆⵠ;
    this.ⲆΔΔ[bs.ⲆⵠΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆᐃᐃⵠⵠ], yh);
    this.ⲆΔΔ[bs.ⲆⵠΔᐃⲆ].id = bs.ⲆⵠΔᐃⲆ;
    this.ⲆΔΔ[bs.ΔᐃⵠᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆᐃⲆⲆⵠ], Qt);
    this.ⲆΔΔ[bs.ΔᐃⵠᐃⲆ].id = bs.ΔᐃⵠᐃⲆ;
    this.ⲆΔΔ[bs.ⵠⲆΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⵠΔᐃⲆⵠ], Qk);
    this.ⲆΔΔ[bs.ⵠⲆΔΔᐃ].id = bs.ⵠⲆΔΔᐃ;
    this.ⲆΔΔ[bs.ⵠᐃΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⵠΔᐃΔ], 3);
    this.ⲆΔΔ[bs.ⵠᐃΔⲆⵠ].id = bs.ⵠᐃΔⲆⵠ;
    this.ⲆΔΔ[bs.ᐃⲆⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⵠΔᐃⵠⵠ], Qt);
    this.ⲆΔΔ[bs.ᐃⲆⲆᐃᐃ].id = bs.ᐃⲆⲆᐃᐃ;
    this.ⲆΔΔ[bs.ΔΔⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃᐃⲆⵠΔ], 3);
    this.ⲆΔΔ[bs.ΔΔⵠᐃⵠ].id = bs.ΔΔⵠᐃⵠ;
    this.ⲆΔΔ[bs.ⲆⲆⲆΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠᐃⲆΔΔΔ], Wb);
    this.ⲆΔΔ[bs.ⲆⲆⲆΔᐃ].id = bs.ⲆⲆⲆΔᐃ;
    this.ⲆΔΔ[bs.ᐃⲆΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔᐃᐃⵠⲆⵠ], 3);
    this.ⲆΔΔ[bs.ᐃⲆΔᐃⲆ].id = bs.ᐃⲆΔᐃⲆ;
    this.ⲆΔΔ[bs.ΔᐃΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔᐃΔⲆⲆΔ], 3);
    this.ⲆΔΔ[bs.ΔᐃΔⲆᐃ].id = bs.ΔᐃΔⲆᐃ;
    this.ⲆΔΔ[bs.ⵠⵠᐃⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠⲆΔⲆⵠ], Sg);
    this.ⲆΔΔ[bs.ⵠⵠᐃⵠᐃ].id = bs.ⵠⵠᐃⵠᐃ;
    this.ⲆΔΔ[bs.ᐃⲆⵠᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠΔᐃᐃⵠ], 3);
    this.ⲆΔΔ[bs.ᐃⲆⵠᐃᐃ].id = bs.ᐃⲆⵠᐃᐃ;
    this.ⲆΔΔ[bs.ΔⵠΔⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠⲆⵠⲆΔ], $b);
    this.ⲆΔΔ[bs.ΔⵠΔⲆΔ].id = bs.ΔⵠΔⲆΔ;
    this.ΔⲆᐃ = [];
    this.ΔⲆᐃ[as.ᐃᐃᐃΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃΔΔⲆⵠ], 3);
    this.ΔⲆᐃ[as.ᐃᐃᐃΔⵠ].id = as.ᐃᐃᐃΔⵠ;
    this.ΔⲆᐃ[as.ᐃᐃⲆⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠⲆΔᐃΔ], 3);
    this.ΔⲆᐃ[as.ᐃᐃⲆⵠΔ].id = as.ᐃᐃⲆⵠΔ;
    this.ΔⲆᐃ[as.ⵠΔⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆΔⵠⵠⲆ], Kj);
    this.ΔⲆᐃ[as.ⵠΔⵠΔⲆ].id = as.ⵠΔⵠΔⲆ;
    this.ΔⲆᐃ[as.ᐃⲆᐃΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔᐃΔⵠⲆⲆ], $b);
    this.ΔⲆᐃ[as.ᐃⲆᐃΔⵠ].id = as.ᐃⲆᐃΔⵠ;
    this.ΔⲆᐃ[as.Ⲇᐃᐃⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃΔΔⵠᐃ], Qt);
    this.ΔⲆᐃ[as.Ⲇᐃᐃⵠᐃ].id = as.Ⲇᐃᐃⵠᐃ;
    this.ΔⲆᐃ[as.ΔⵠⲆᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔᐃᐃⵠⲆᐃ], co);
    this.ΔⲆᐃ[as.ΔⵠⲆᐃⲆ].id = as.ΔⵠⲆᐃⲆ;
    this.ΔⲆᐃ[as.ᐃⲆⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠᐃⲆⲆⵠⵠ], Wb);
    this.ΔⲆᐃ[as.ᐃⲆⲆⲆⵠ].id = as.ᐃⲆⲆⲆⵠ;
    this.ΔⲆᐃ[as.ⲆΔᐃⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔᐃⵠⵠⲆΔ], 3);
    this.ΔⲆᐃ[as.ⲆΔᐃⲆⵠ].id = as.ⲆΔᐃⲆⵠ;
    this.ΔⲆᐃ[as.ΔΔᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠΔᐃⲆΔ], Wb);
    this.ΔⲆᐃ[as.ΔΔᐃᐃᐃ].id = as.ΔΔᐃᐃᐃ;
    this.ΔⲆᐃ[as.ΔᐃᐃΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆⵠΔΔᐃ], Wb);
    this.ΔⲆᐃ[as.ΔᐃᐃΔⲆ].id = as.ΔᐃᐃΔⲆ;
    this.ΔⲆᐃ[as.ⲆᐃⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⵠΔⲆΔⵠ], Qt);
    this.ΔⲆᐃ[as.ⲆᐃⲆᐃΔ].id = as.ⲆᐃⲆᐃΔ;
    this.ΔⲆᐃ[as.ⵠΔΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠⵠⲆⵠᐃ], 3);
    this.ΔⲆᐃ[as.ⵠΔΔⲆᐃ].id = as.ⵠΔΔⲆᐃ;
    this.ΔⲆᐃ[as.ⵠᐃⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆΔΔᐃΔᐃ], Kj);
    this.ΔⲆᐃ[as.ⵠᐃⲆⲆⲆ].id = as.ⵠᐃⲆⲆⲆ;
    this.ΔⲆᐃ[as.ᐃⲆⲆⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔⲆΔΔⵠ], 3);
    this.ΔⲆᐃ[as.ᐃⲆⲆⲆᐃ].id = as.ᐃⲆⲆⲆᐃ;
    this.ΔⲆᐃ[as.ΔΔⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔⲆⲆΔⵠ], dt);
    this.ΔⲆᐃ[as.ΔΔⲆⵠᐃ].id = as.ΔΔⲆⵠᐃ;
    this.ΔⲆᐃ[as.Δⵠᐃⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆⲆⲆᐃⲆ], Qk);
    this.ΔⲆᐃ[as.Δⵠᐃⵠⵠ].id = as.Δⵠᐃⵠⵠ;
    this.ΔⲆᐃ[as.ᐃΔⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃΔⵠⵠᐃⲆ], Gl);
    this.ΔⲆᐃ[as.ᐃΔⵠⵠⲆ].id = as.ᐃΔⵠⵠⲆ;
    this.ΔⲆᐃ[as.ⵠᐃᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆΔⵠᐃⵠⵠ], $b);
    this.ΔⲆᐃ[as.ⵠᐃᐃⲆΔ].id = as.ⵠᐃᐃⲆΔ;
    this.ΔⲆᐃ[as.ⲆΔⲆⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃΔⲆΔᐃⵠ], 3);
    this.ΔⲆᐃ[as.ⲆΔⲆⲆᐃ].id = as.ⲆΔⲆⲆᐃ;
    this.ΔⲆᐃ[as.ⵠᐃᐃⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔᐃⲆⵠΔ], 3);
    this.ΔⲆᐃ[as.ⵠᐃᐃⲆⲆ].id = as.ⵠᐃᐃⲆⲆ;
    this.ΔⲆᐃ[as.ΔⲆᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⲆⲆᐃⲆ], Kj);
    this.ΔⲆᐃ[as.ΔⲆᐃᐃⲆ].id = as.ΔⲆᐃᐃⲆ;
    this.ΔⲆᐃ[as.ⵠΔᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠᐃᐃᐃⵠⵠ], Wb);
    this.ΔⲆᐃ[as.ⵠΔᐃᐃΔ].id = as.ⵠΔᐃᐃΔ;
    this.ΔⲆᐃ[as.ᐃⲆᐃⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆⲆᐃⵠΔ], 3);
    this.ΔⲆᐃ[as.ᐃⲆᐃⵠⲆ].id = as.ᐃⲆᐃⵠⲆ;
    this.ΔⲆᐃ[as.ⵠΔΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃᐃΔᐃⵠⲆ], 3);
    this.ΔⲆᐃ[as.ⵠΔΔᐃⲆ].id = as.ⵠΔΔᐃⲆ;
    this.ΔⲆᐃ[as.ᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃⵠΔⲆᐃ], 3);
    this.ΔⲆᐃ[as.ᐃⵠⲆΔ].id = as.ᐃⵠⲆΔ;
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃⵠⲆⵠⲆ], 3);
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠᐃ].id = as.ⵠⲆⲆⵠᐃ;
    this.ΔⲆᐃ[as.ⵠⵠΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔⲆⵠⵠⵠ], 3);
    this.ΔⲆᐃ[as.ⵠⵠΔⲆⵠ].id = as.ⵠⵠΔⲆⵠ;
    this.ΔⲆᐃ[as.ⵠᐃΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠΔⵠⵠⲆ], 3);
    this.ΔⲆᐃ[as.ⵠᐃΔΔⲆ].id = as.ⵠᐃΔΔⲆ;
    this.ΔⲆᐃ[as.ΔᐃⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠᐃᐃⵠΔΔ], 3);
    this.ΔⲆᐃ[as.ΔᐃⲆⵠⵠ].id = as.ΔᐃⲆⵠⵠ;
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃⵠⲆⵠⲆ], 3);
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠᐃ].id = as.ⵠⲆⲆⵠᐃ;
    this.ΔⲆᐃ[as.ⲆᐃΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⵠⵠⵠⲆⲆ], yh);
    this.ΔⲆᐃ[as.ⲆᐃΔΔΔ].id = as.ⲆᐃΔΔΔ;
    this.ΔⲆᐃ[as.ⵠⲆΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⲆᐃᐃΔⵠ], 3);
    this.ΔⲆᐃ[as.ⵠⲆΔΔᐃ].id = as.ⵠⲆΔΔᐃ;
    this.ΔⲆᐃ[as.ΔΔⵠⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆΔΔΔⵠ], Kj);
    this.ΔⲆᐃ[as.ΔΔⵠⵠⵠ].id = as.ΔΔⵠⵠⵠ;
    this.ΔⲆᐃ[as.ΔⵠΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⲆᐃΔᐃ], 3);
    this.ΔⲆᐃ[as.ΔⵠΔΔΔ].id = as.ΔⵠΔΔΔ;
    this.ΔⲆᐃ[as.ΔΔᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠⵠΔⵠᐃ], mt);
    this.ΔⲆᐃ[as.ΔΔᐃᐃⲆ].id = as.ΔΔᐃᐃⲆ;
    this.ΔⲆᐃ[as.ⵠᐃΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃᐃⲆⲆᐃ], 3);
    this.ΔⲆᐃ[as.ⵠᐃΔⲆⵠ].id = as.ⵠᐃΔⲆⵠ;
    this.ΔⲆᐃ[as.ᐃⵠᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⵠⵠⲆⵠⲆ], 3);
    this.ΔⲆᐃ[as.ᐃⵠᐃᐃᐃ].id = as.ᐃⵠᐃᐃᐃ;
    this.ΔⲆᐃ[as.ⲆΔΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆᐃΔΔΔΔ], X);
    this.ΔⲆᐃ[as.ⲆΔΔⵠᐃ].id = as.ⲆΔΔⵠᐃ;
    this.ΔⲆᐃ[as.ᐃⲆΔⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃⵠⵠΔⵠ], 3);
    this.ΔⲆᐃ[as.ᐃⲆΔⵠⲆ].id = as.ᐃⲆΔⵠⲆ;
    this.ΔⲆᐃ[as.ⲆⵠⵠⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆᐃⲆΔΔ], 3);
    this.ΔⲆᐃ[as.ⲆⵠⵠⲆⲆ].id = as.ⲆⵠⵠⲆⲆ;
    this.ΔⲆᐃ[as.ⵠᐃⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆᐃΔᐃΔ], 3);
    this.ΔⲆᐃ[as.ⵠᐃⲆᐃᐃ].id = as.ⵠᐃⲆᐃᐃ;
    this.ΔⲆᐃ[as.ΔΔΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆᐃΔΔᐃⲆ], 3);
    this.ΔⲆᐃ[as.ΔΔΔΔⵠ].id = as.ΔΔΔΔⵠ;
    this.ΔⲆᐃ[as.ᐃⵠⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⲆⵠⵠᐃ], 3);
    this.ΔⲆᐃ[as.ᐃⵠⲆⵠᐃ].id = as.ᐃⵠⲆⵠᐃ;
    this.ΔⲆᐃ[as.ΔⵠⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆΔⵠⲆⲆΔ], 3);
    this.ΔⲆᐃ[as.ΔⵠⵠΔⲆ].id = as.ΔⵠⵠΔⲆ;
    this.ΔⲆᐃ[as.ⵠⲆΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔΔⵠΔΔ], mt);
    this.ΔⲆᐃ[as.ⵠⲆΔⵠᐃ].id = as.ⵠⲆΔⵠᐃ;
    this.ΔⲆᐃ[as.ᐃⲆⵠⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆΔᐃⵠⵠⵠ], 3);
    this.ΔⲆᐃ[as.ᐃⲆⵠⵠΔ].id = as.ᐃⲆⵠⵠΔ;
    this.ΔⲆᐃ[as.ᐃΔᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⲆⵠᐃΔᐃ], 3);
    this.ΔⲆᐃ[as.ᐃΔᐃᐃⲆ].id = as.ᐃΔᐃᐃⲆ;
    this.ΔⲆᐃ[as.ᐃᐃΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠΔΔᐃᐃ], 3);
    this.ΔⲆᐃ[as.ᐃᐃΔⵠᐃ].id = as.ᐃᐃΔⵠᐃ;
    this.ΔⲆᐃ[as.ᐃᐃΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⵠⵠᐃΔ], co);
    this.ΔⲆᐃ[as.ᐃᐃΔᐃᐃ].id = as.ᐃᐃΔᐃᐃ;
    this.ΔⲆᐃ[as.ⵠᐃⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⵠᐃⵠⲆᐃ], xs);
    this.ΔⲆᐃ[as.ⵠᐃⲆⵠᐃ].id = as.ⵠᐃⲆⵠᐃ;
    this.ΔⲆᐃ[as.ⵠⵠⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⲆⲆⵠΔⲆ], dt);
    this.ΔⲆᐃ[as.ⵠⵠⵠΔⲆ].id = as.ⵠⵠⵠΔⲆ;
    this.ΔⲆᐃ[as.ⲆⲆᐃⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠΔⲆΔⵠ], Qk);
    this.ΔⲆᐃ[as.ⲆⲆᐃⵠᐃ].id = as.ⲆⲆᐃⵠᐃ;
    this.ΔⲆᐃ[as.ⵠⵠⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠΔⲆΔᐃ], xs);
    this.ΔⲆᐃ[as.ⵠⵠⵠᐃΔ].id = as.ⵠⵠⵠᐃΔ;
    this.ΔⲆᐃ[as.ᐃⲆΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆᐃⵠⲆΔ], ol);
    this.ΔⲆᐃ[as.ᐃⲆΔΔⲆ].id = as.ᐃⲆΔΔⲆ;
    this.ΔⲆᐃ[as.ⵠⲆⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆΔᐃΔΔΔ], 3);
    this.ΔⲆᐃ[as.ⵠⲆⲆᐃᐃ].id = as.ⵠⲆⲆᐃᐃ;
    this.ΔⲆᐃ[as.ⵠᐃⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⵠⵠΔⲆ], Ka);
    this.ΔⲆᐃ[as.ⵠᐃⵠⵠⲆ].id = as.ⵠᐃⵠⵠⲆ;
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠᐃΔⲆᐃ], $b);
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠⵠ].id = as.ⵠⲆⲆⵠⵠ;
    this.ΔⲆᐃ[as.ΔᐃΔⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔⲆΔⲆⲆ], Ka);
    this.ΔⲆᐃ[as.ΔᐃΔⲆΔ].id = as.ΔᐃΔⲆΔ;
    this.ΔⲆᐃ[as.ⵠⲆᐃⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⵠⲆⲆⵠⵠ], nn);
    this.ΔⲆᐃ[as.ⵠⲆᐃⲆⵠ].id = as.ⵠⲆᐃⲆⵠ;
    this.ΔⲆᐃ[as.ᐃΔΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔⵠᐃⲆᐃ], nn);
    this.ΔⲆᐃ[as.ᐃΔΔΔᐃ].id = as.ᐃΔΔΔᐃ;
    this.ΔⲆᐃ[as.ΔΔⵠⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔᐃᐃΔⲆ], Kj);
    this.ΔⲆᐃ[as.ΔΔⵠⲆⲆ].id = as.ΔΔⵠⲆⲆ;
    this.ΔⲆᐃ[as.ⲆⵠⲆΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃⵠΔᐃⲆ], 3);
    this.ΔⲆᐃ[as.ⲆⵠⲆΔⲆ].id = as.ⲆⵠⲆΔⲆ;
    this.ΔⲆᐃ[as.ⵠⲆΔⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔⲆᐃⲆⵠ], Gl);
    this.ΔⲆᐃ[as.ⵠⲆΔⲆⲆ].id = as.ⵠⲆΔⲆⲆ;
    this.ΔⲆᐃ[as.Ⲇⵠᐃᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⵠΔᐃⲆ], 3);
    this.ΔⲆᐃ[as.Ⲇⵠᐃᐃⵠ].id = as.Ⲇⵠᐃᐃⵠ;
    this.ΔⲆᐃ[as.ⲆᐃᐃⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔⵠⵠⵠⲆ], ar);
    this.ΔⲆᐃ[as.ⲆᐃᐃⵠⲆ].id = as.ⲆᐃᐃⵠⲆ;
    this.ΔⲆᐃ[as.ΔⵠⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃᐃⵠⲆⵠ], Kj);
    this.ΔⲆᐃ[as.ΔⵠⵠⵠⲆ].id = as.ΔⵠⵠⵠⲆ;
    this.ΔⲆᐃ[as.ⵠΔⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔⵠΔΔΔ], 3);
    this.ΔⲆᐃ[as.ⵠΔⲆⵠᐃ].id = as.ⵠΔⲆⵠᐃ;
    this.ΔⲆᐃ[as.ⲆᐃⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆΔᐃᐃᐃ], 3);
    this.ΔⲆᐃ[as.ⲆᐃⲆΔⵠ].id = as.ⲆᐃⲆΔⵠ;
    this.ΔⲆᐃ[as.ΔΔⲆΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃᐃᐃⵠⲆ], 3);
    this.ΔⲆᐃ[as.ΔΔⲆΔΔ].id = as.ΔΔⲆΔΔ;
    this.ΔⲆᐃ[as.ΔⵠⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⲆⵠⵠⲆᐃ], 3);
    this.ΔⲆᐃ[as.ΔⵠⵠⲆΔ].id = as.ΔⵠⵠⲆΔ;
    this.ΔⲆᐃ[as.ⵠⲆᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠΔᐃⵠⲆⵠ], 3);
    this.ΔⲆᐃ[as.ⵠⲆᐃⲆΔ].id = as.ⵠⲆᐃⲆΔ;
    this.ΔⲆᐃ[as.ᐃⲆΔⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⵠΔⵠΔ], 3);
    this.ΔⲆᐃ[as.ᐃⲆΔⵠΔ].id = as.ᐃⲆΔⵠΔ;
    this.ΔⲆᐃ[as.ⵠⵠⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆΔΔΔᐃ], 3);
    this.ΔⲆᐃ[as.ⵠⵠⲆⵠᐃ].id = as.ⵠⵠⲆⵠᐃ;
    this.ΔⲆᐃ[as.ⵠᐃⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⵠΔⵠᐃΔ], Qt);
    this.ΔⲆᐃ[as.ⵠᐃⵠⲆᐃ].id = as.ⵠᐃⵠⲆᐃ;
    this.ΔⲆᐃ[as.ᐃⵠΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆⲆᐃⵠΔ], Kj);
    this.ΔⲆᐃ[as.ᐃⵠΔΔΔ].id = as.ᐃⵠΔΔΔ;
    this.ΔⲆᐃ[as.ᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃⵠΔⲆᐃ], dt);
    this.ΔⲆᐃ[as.ᐃⵠⲆΔ].id = as.ᐃⵠⲆΔ;
    this.ΔⲆᐃ[as.ⵠᐃᐃⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆΔΔΔᐃ], mt);
    this.ΔⲆᐃ[as.ⵠᐃᐃⵠⵠ].id = as.ⵠᐃᐃⵠⵠ;
    this.ΔⲆᐃ[as.ⲆΔΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆΔⵠⲆⲆ], Qt);
    this.ΔⲆᐃ[as.ⲆΔΔΔⲆ].id = as.ⲆΔΔΔⲆ;
    this.ΔⲆᐃ[as.ΔⵠⲆΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆΔΔᐃⵠⵠ], 3);
    this.ΔⲆᐃ[as.ΔⵠⲆΔΔ].id = as.ΔⵠⲆΔΔ;
    this.ΔⲆᐃ[as.ⲆⲆᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆⲆⲆΔᐃ], og);
    this.ΔⲆᐃ[as.ⲆⲆᐃᐃᐃ].id = as.ⲆⲆᐃᐃᐃ;
    this.ΔⲆᐃ[as.ΔΔᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠΔΔⲆᐃ], 3);
    this.ΔⲆᐃ[as.ΔΔᐃΔᐃ].id = as.ΔΔᐃΔᐃ;
    this.ΔⲆᐃ[as.ᐃⲆΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃΔⲆⵠⵠⲆ], dt);
    this.ΔⲆᐃ[as.ᐃⲆΔΔⵠ].id = as.ᐃⲆΔΔⵠ;
    this.ΔⲆᐃ[as.ΔⵠΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔᐃⲆⵠⵠ], ar);
    this.ΔⲆᐃ[as.ΔⵠΔⲆⵠ].id = as.ΔⵠΔⲆⵠ;
    this.ΔⲆᐃ[as.ⵠⵠᐃⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃΔᐃⵠᐃⵠ], Wb);
    this.ΔⲆᐃ[as.ⵠⵠᐃⲆⲆ].id = as.ⵠⵠᐃⲆⲆ;
    this.ΔⲆᐃ[as.Δᐃⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔᐃⵠⲆΔⵠ], Jh);
    this.ΔⲆᐃ[as.Δᐃⵠᐃⵠ].id = as.Δᐃⵠᐃⵠ;
    this.ΔⲆᐃ[as.ᐃΔⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔΔᐃΔⵠ], Z);
    this.ΔⲆᐃ[as.ᐃΔⵠⲆΔ].id = as.ᐃΔⵠⲆΔ;
    this.ΔⲆᐃ[as.ⵠΔⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃⲆⲆᐃⲆ], Qk);
    this.ΔⲆᐃ[as.ⵠΔⵠⲆΔ].id = as.ⵠΔⵠⲆΔ;
    this.ΔⲆᐃ[as.ⵠᐃⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠΔⲆⲆⲆⲆ], 3);
    this.ΔⲆᐃ[as.ⵠᐃⲆΔⵠ].id = as.ⵠᐃⲆΔⵠ;
    this.ΔⲆᐃ[as.ⵠΔⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠⵠΔᐃᐃ], 3);
    this.ΔⲆᐃ[as.ⵠΔⵠⲆⵠ].id = as.ⵠΔⵠⲆⵠ;
    this.ΔⲆᐃ[as.Δⵠᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⲆΔⵠᐃΔ], 3);
    this.ΔⲆᐃ[as.Δⵠᐃᐃᐃ].id = as.Δⵠᐃᐃᐃ;
    this.ΔⲆᐃ[as.ΔⵠᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆᐃΔⲆΔ], nn);
    this.ΔⲆᐃ[as.ΔⵠᐃΔᐃ].id = as.ΔⵠᐃΔᐃ;
    this.ΔⲆᐃ[as.ⵠᐃⵠΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠⵠⲆⲆΔ], 3);
    this.ΔⲆᐃ[as.ⵠᐃⵠΔΔ].id = as.ⵠᐃⵠΔΔ;
    this.ΔⲆᐃ[as.ⵠΔᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔᐃᐃⲆΔⲆ], 3);
    this.ΔⲆᐃ[as.ⵠΔᐃΔᐃ].id = as.ⵠΔᐃΔᐃ;
    this.ΔⲆᐃ[as.ᐃⲆΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔⵠⲆⲆᐃ], 3);
    this.ΔⲆᐃ[as.ᐃⲆΔⲆᐃ].id = as.ᐃⲆΔⲆᐃ;
    this.ΔⲆᐃ[as.ΔⵠᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔⵠⲆⵠⲆⵠ], $b);
    this.ΔⲆᐃ[as.ΔⵠᐃⵠΔ].id = as.ΔⵠᐃⵠΔ;
    this.ΔⲆᐃ[as.ⵠΔⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠΔΔⵠᐃⵠ], Gl);
    this.ΔⲆᐃ[as.ⵠΔⵠⲆᐃ].id = as.ⵠΔⵠⲆᐃ;
    this.ΔⲆᐃ[as.ⵠⵠⲆⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔᐃΔΔΔ], 3);
    this.ΔⲆᐃ[as.ⵠⵠⲆⲆΔ].id = as.ⵠⵠⲆⲆΔ;
    this.ΔⲆᐃ[as.ⲆΔⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆᐃΔⵠΔᐃ], 3);
    this.ΔⲆᐃ[as.ⲆΔⵠⲆᐃ].id = as.ⲆΔⵠⲆᐃ;
    this.ΔⲆᐃ[as.ΔᐃⲆⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⲆᐃⲆⵠΔ], Gl);
    this.ΔⲆᐃ[as.ΔᐃⲆⲆᐃ].id = as.ΔᐃⲆⲆᐃ;
    this.ΔⲆᐃ[as.ⲆⵠⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠΔⲆⵠΔΔ], Wb);
    this.ΔⲆᐃ[as.ⲆⵠⵠᐃΔ].id = as.ⲆⵠⵠᐃΔ;
    this.ΔⲆᐃ[as.ⵠⲆⵠⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆⵠⵠᐃΔ], ar);
    this.ΔⲆᐃ[as.ⵠⲆⵠⵠⵠ].id = as.ⵠⲆⵠⵠⵠ;
    this.ΔⲆᐃ[as.ⵠᐃⵠⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃᐃⲆⲆⲆΔ], dt);
    this.ΔⲆᐃ[as.ⵠᐃⵠⵠΔ].id = as.ⵠᐃⵠⵠΔ;
    this.ΔⲆᐃ[as.ⵠΔⲆᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⲆΔⵠⵠⵠ], Qk);
    this.ΔⲆᐃ[as.ⵠΔⲆᐃⵠ].id = as.ⵠΔⲆᐃⵠ;
    this.ΔⲆᐃ[as.ᐃⵠᐃⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠᐃᐃⲆᐃᐃ], mt);
    this.ΔⲆᐃ[as.ᐃⵠᐃⲆⲆ].id = as.ᐃⵠᐃⲆⲆ;
    this.ΔⲆᐃ[as.ᐃΔᐃᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⲆΔΔⲆ], 3);
    this.ΔⲆᐃ[as.ᐃΔᐃᐃⵠ].id = as.ᐃΔᐃᐃⵠ;
    this.ΔⲆᐃ[as.ΔⲆⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔⵠⲆΔⲆ], Qt);
    this.ΔⲆᐃ[as.ΔⲆⲆⲆⲆ].id = as.ΔⲆⲆⲆⲆ;
    this.ΔⲆᐃ[as.ΔΔΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠᐃⲆⲆⲆ], 3);
    this.ΔⲆᐃ[as.ΔΔΔᐃⵠ].id = as.ΔΔΔᐃⵠ;
    this.ΔⲆᐃ[as.ⵠᐃⲆⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆᐃΔⲆⵠ], 3);
    this.ΔⲆᐃ[as.ⵠᐃⲆⵠⲆ].id = as.ⵠᐃⲆⵠⲆ;
    this.ΔⲆᐃ[as.ᐃᐃᐃΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠΔⵠΔⲆ], Ka);
    this.ΔⲆᐃ[as.ᐃᐃᐃΔΔ].id = as.ᐃᐃᐃΔΔ;
    this.ΔⲆᐃ[as.ⵠΔⲆⵠⲆⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠΔⵠΔⲆ], X);
    this.ΔⲆᐃ[as.ⵠΔⲆⵠⲆⵠᐃ].id = as.ⵠΔⲆⵠⲆⵠᐃ;
    this.ΔⲆᐃ[as.ᐃⵠΔⵠⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠΔⵠΔⲆ], Qt);
    this.ΔⲆᐃ[as.ᐃⵠΔⵠⵠᐃΔ].id = as.ᐃⵠΔⵠⵠᐃΔ;
    this.ΔⲆᐃ[as.ΔⵠΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃΔᐃⵠⵠⲆ], 3);
    this.ΔⲆᐃ[as.ΔⵠΔΔⵠ].id = as.ΔⵠΔΔⵠ;
    this.ΔⲆᐃ[as.ⵠᐃΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⵠⵠΔΔ], 3);
    this.ΔⲆᐃ[as.ⵠᐃΔΔⵠ].id = as.ⵠᐃΔΔⵠ;
    this.ΔⲆᐃ[as.ΔⲆΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆᐃᐃⵠⲆ], 3);
    this.ΔⲆᐃ[as.ΔⲆΔᐃⵠ].id = as.ΔⲆΔᐃⵠ;
    this.ΔⲆᐃ[as.ᐃⲆΔᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆⵠᐃⲆⵠ], mt);
    this.ΔⲆᐃ[as.ᐃⲆΔᐃᐃ].id = as.ᐃⲆΔᐃᐃ;
    this.ΔⲆᐃ[as.ⲆΔⲆᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃᐃⲆⲆⲆ], 3);
    this.ΔⲆᐃ[as.ⲆΔⲆᐃⵠ].id = as.ⲆΔⲆᐃⵠ;
    this.ΔⲆᐃ[as.ⲆᐃⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆᐃᐃΔⲆⲆ], 3);
    this.ΔⲆᐃ[as.ⲆᐃⵠⲆΔ].id = as.ⲆᐃⵠⲆΔ;
    this.ΔⲆᐃ[as.ΔⵠⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃᐃᐃⵠⲆ], 3);
    this.ΔⲆᐃ[as.ΔⵠⲆⲆⲆ].id = as.ΔⵠⲆⲆⲆ;
    this.ΔⲆᐃ[as.ⲆΔΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆᐃⲆᐃΔ], 3);
    this.ΔⲆᐃ[as.ⲆΔΔⲆᐃ].id = as.ⲆΔΔⲆᐃ;
    this.ΔⲆᐃ[as.ᐃᐃΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆᐃᐃᐃⵠΔ], nn);
    this.ΔⲆᐃ[as.ᐃᐃΔⲆⵠ].id = as.ᐃᐃΔⲆⵠ;
    this.ΔⲆᐃ[as.ⵠⵠⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⵠΔᐃᐃΔ], Wb);
    this.ΔⲆᐃ[as.ⵠⵠⲆⵠⵠ].id = as.ⵠⵠⲆⵠⵠ;
    this.ΔⲆᐃ[as.ᐃⵠⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃΔΔΔΔⵠ], Z);
    this.ΔⲆᐃ[as.ᐃⵠⵠᐃⵠ].id = as.ᐃⵠⵠᐃⵠ;
    this.ΔⲆᐃ[as.ᐃⵠᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⲆᐃΔⵠⲆ], 3);
    this.ΔⲆᐃ[as.ᐃⵠᐃⵠΔ].id = as.ᐃⵠᐃⵠΔ;
    this.ΔⲆᐃ[as.ⲆΔᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠⲆⲆᐃⲆ], Kj);
    this.ΔⲆᐃ[as.ⲆΔᐃᐃΔ].id = as.ⲆΔᐃᐃΔ;
    this.ΔⲆᐃ[as.ⲆⲆΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆΔⵠᐃΔᐃ], Z);
    this.ΔⲆᐃ[as.ⲆⲆΔΔΔ].id = as.ⲆⲆΔΔΔ;
    this.ΔⲆᐃ[as.ΔᐃⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⵠⵠⵠΔ], 3);
    this.ΔⲆᐃ[as.ΔᐃⵠⲆⵠ].id = as.ΔᐃⵠⲆⵠ;
    this.ΔⲆᐃ[as.ΔΔᐃⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⲆⲆᐃⵠ], 3);
    this.ΔⲆᐃ[as.ΔΔᐃⲆΔ].id = as.ΔΔᐃⲆΔ;
    this.ΔⲆᐃ[as.ⵠᐃⵠᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔᐃⲆΔⵠ], Qk);
    this.ΔⲆᐃ[as.ⵠᐃⵠᐃᐃ].id = as.ⵠᐃⵠᐃᐃ;
    this.ΔⲆᐃ[as.ᐃⵠⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠᐃΔⲆⵠ], 3);
    this.ΔⲆᐃ[as.ᐃⵠⲆᐃΔ].id = as.ᐃⵠⲆᐃΔ;
    this.ΔⲆᐃ[as.ⲆⵠⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⵠⵠⵠⵠᐃ], 3);
    this.ΔⲆᐃ[as.ⲆⵠⲆⲆⲆ].id = as.ⲆⵠⲆⲆⲆ;
    this.ΔⲆᐃ[as.ⲆⲆΔᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠᐃΔᐃⲆ], mt);
    this.ΔⲆᐃ[as.ⲆⲆΔᐃΔ].id = as.ⲆⲆΔᐃΔ;
    this.ΔⲆᐃ[as.ⲆⲆⵠΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠΔΔⲆⲆ], 3);
    this.ΔⲆᐃ[as.ⲆⲆⵠΔⲆ].id = as.ⲆⲆⵠΔⲆ;
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆᐃᐃᐃΔ], 3);
    this.ΔⲆᐃ[as.ⵠⲆⲆⵠΔ].id = as.ⵠⲆⲆⵠΔ;
    this.ΔⲆᐃ[as.ⲆⲆⲆᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃΔᐃⵠⵠᐃ], ol);
    this.ΔⲆᐃ[as.ⲆⲆⲆᐃᐃ].id = as.ⲆⲆⲆᐃᐃ;
    this.ΔⲆᐃ[as.ᐃⲆᐃΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⲆᐃⵠᐃ], og);
    this.ΔⲆᐃ[as.ᐃⲆᐃΔⲆ].id = as.ᐃⲆᐃΔⲆ;
    this.ΔⲆᐃ[as.ⵠΔᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠᐃΔᐃᐃ], Sg);
    this.ΔⲆᐃ[as.ⵠΔᐃᐃⲆ].id = as.ⵠΔᐃᐃⲆ;
    this.ΔⲆᐃ[as.ⵠⲆᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆᐃⲆᐃⵠⲆ], Ka);
    this.ΔⲆᐃ[as.ⵠⲆᐃⵠΔ].id = as.ⵠⲆᐃⵠΔ;
    this.ΔⲆᐃ[as.ᐃΔΔⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠᐃᐃⵠⵠ], Ka);
    this.ΔⲆᐃ[as.ᐃΔΔⵠⲆ].id = as.ᐃΔΔⵠⲆ;
    this.ΔⲆᐃ[as.ΔΔⵠᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆⲆᐃᐃᐃ], 3);
    this.ΔⲆᐃ[as.ΔΔⵠᐃⲆ].id = as.ΔΔⵠᐃⲆ;
    this.ΔⲆᐃ[as.ⲆΔⲆⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆΔᐃⲆⵠ], 3);
    this.ΔⲆᐃ[as.ⲆΔⲆⵠⵠ].id = as.ⲆΔⲆⵠⵠ;
    this.ΔⲆᐃ[as.ᐃᐃᐃⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆᐃⲆⲆⲆ], 3);
    this.ΔⲆᐃ[as.ᐃᐃᐃⲆⵠ].id = as.ᐃᐃᐃⲆⵠ;
    this.ΔⲆᐃ[as.Δᐃᐃᐃᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠⵠⵠᐃⲆ], 3);
    this.ΔⲆᐃ[as.Δᐃᐃᐃᐃ].id = as.Δᐃᐃᐃᐃ;
    this.ΔⲆᐃ[as.ⵠΔΔΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃⲆⵠⵠⵠ], 3);
    this.ΔⲆᐃ[as.ⵠΔΔΔⵠ].id = as.ⵠΔΔΔⵠ;
    this.ΔⲆᐃ[as.ᐃΔⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠⲆⵠⲆᐃⲆ], Ka);
    this.ΔⲆᐃ[as.ᐃΔⵠⲆᐃ].id = as.ᐃΔⵠⲆᐃ;
    this.ΔⲆᐃ[as.ΔⲆⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔΔⵠᐃΔ], Z);
    this.ΔⲆᐃ[as.ΔⲆⵠⵠⲆ].id = as.ΔⲆⵠⵠⲆ;
    this.ΔⲆᐃ[as.ᐃⲆᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠᐃᐃᐃⵠⵠ], ar);
    this.ΔⲆᐃ[as.ᐃⲆᐃⵠΔ].id = as.ᐃⲆᐃⵠΔ;
    this.ΔⲆᐃ[as.ⲆⵠᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃΔΔᐃⵠⲆ], 3);
    this.ΔⲆᐃ[as.ⲆⵠᐃᐃΔ].id = as.ⲆⵠᐃᐃΔ;
    this.ΔⲆᐃ[as.ᐃΔᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠⲆⲆⲆⲆ], Gl);
    this.ΔⲆᐃ[as.ᐃΔᐃᐃΔ].id = as.ᐃΔᐃᐃΔ;
    this.ΔⲆᐃ[as.ⲆᐃᐃΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠⲆΔⵠΔ], ar);
    this.ΔⲆᐃ[as.ⲆᐃᐃΔᐃ].id = as.ⲆᐃᐃΔᐃ;
    this.ΔⲆᐃ[as.ΔⲆⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⲆⵠⵠⲆΔ], Ka);
    this.ΔⲆᐃ[as.ΔⲆⵠⲆΔ].id = as.ΔⲆⵠⲆΔ;
    this.ΔⲆᐃ[as.ⵠⲆΔΔᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⲆᐃᐃΔⵠ], ar);
    this.ΔⲆᐃ[as.ⵠⲆΔΔᐃ].id = as.ⵠⲆΔΔᐃ;
    this.ΔⲆᐃ[as.ⵠᐃΔⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔᐃᐃⲆⲆᐃ], og);
    this.ΔⲆᐃ[as.ⵠᐃΔⲆⵠ].id = as.ⵠᐃΔⲆⵠ;
    this.ΔⲆᐃ[as.ΔΔⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆᐃΔⵠΔ], Jh);
    this.ΔⲆᐃ[as.ΔΔⵠᐃⵠ].id = as.ΔΔⵠᐃⵠ;
    this.ΔⲆᐃ[as.ᐃⲆΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆΔⲆⵠⵠ], ar);
    this.ΔⲆᐃ[as.ᐃⲆΔᐃⲆ].id = as.ᐃⲆΔᐃⲆ;
    this.ΔⲆᐃ[as.ΔᐃΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃⲆⵠⲆΔ], 3);
    this.ΔⲆᐃ[as.ΔᐃΔⲆᐃ].id = as.ΔᐃΔⲆᐃ;
    this.ΔᐃΔ[bs.ΔⵠⲆⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠΔⵠΔⵠΔΔ], 3);
    this.ΔᐃΔ[bs.ΔⵠⲆⲆⵠ].id = bs.ΔⵠⲆⲆⵠ;
    this.ⲆΔΔ[bs.ΔⵠⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃΔⲆⵠⵠ], Wb);
    this.ⲆΔΔ[bs.ΔⵠⲆⲆⵠ].id = bs.ΔⵠⲆⲆⵠ;
    this.ΔⲆᐃ[as.ΔⵠⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⵠⵠⲆⲆⲆ], Kj);
    this.ΔⲆᐃ[as.ΔⵠⲆⲆⵠ].id = as.ΔⵠⲆⲆⵠ;
    this.ΔᐃΔ[bs.ⲆⲆⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔⵠΔᐃᐃⲆ], Gl);
    this.ΔᐃΔ[bs.ⲆⲆⵠⵠⲆ].id = bs.ⲆⲆⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⲆⲆⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔΔⵠⲆⵠⵠ], X);
    this.ⲆΔΔ[bs.ⲆⲆⵠⵠⲆ].id = bs.ⲆⲆⵠⵠⲆ;
    this.ΔⲆᐃ[as.ⲆⲆⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆᐃΔⵠⲆ], 3);
    this.ΔⲆᐃ[as.ⲆⲆⵠⵠⲆ].id = as.ⲆⲆⵠⵠⲆ;
    this.ΔᐃΔ[bs.ⵠᐃᐃᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆⵠᐃΔΔⵠ], $b);
    this.ΔᐃΔ[bs.ⵠᐃᐃᐃΔ].id = bs.ⵠᐃᐃᐃΔ;
    this.ⲆΔΔ[bs.ⵠᐃᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⲆⲆᐃⲆᐃ], Z);
    this.ⲆΔΔ[bs.ⵠᐃᐃᐃΔ].id = bs.ⵠᐃᐃᐃΔ;
    this.ΔⲆᐃ[as.ⵠᐃᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔⲆᐃΔⲆ], 3);
    this.ΔⲆᐃ[as.ⵠᐃᐃᐃΔ].id = as.ⵠᐃᐃᐃΔ;
    this.ΔᐃΔ[bs.ΔⲆΔⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⵠⵠΔᐃⲆ], 3);
    this.ΔᐃΔ[bs.ΔⲆΔⵠⵠ].id = bs.ΔⲆΔⵠⵠ;
    this.ⲆΔΔ[bs.ΔⲆΔⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃᐃΔᐃᐃᐃ], X);
    this.ⲆΔΔ[bs.ΔⲆΔⵠⵠ].id = bs.ΔⲆΔⵠⵠ;
    this.ΔⲆᐃ[as.ΔⲆΔⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⲆΔΔⵠⲆ], 3);
    this.ΔⲆᐃ[as.ΔⲆΔⵠⵠ].id = as.ΔⲆΔⵠⵠ;
    this.ΔᐃΔ[bs.ΔᐃᐃᐃⵠᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠᐃΔᐃⵠⲆ], 3);
    this.ΔᐃΔ[bs.ΔᐃᐃᐃⵠᐃΔ].id = bs.ΔᐃᐃᐃⵠᐃΔ;
    this.ⲆΔΔ[bs.ΔᐃᐃᐃⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔⲆᐃⵠⲆⵠ], 3);
    this.ⲆΔΔ[bs.ΔᐃᐃᐃⵠᐃΔ].id = bs.ΔᐃᐃᐃⵠᐃΔ;
    this.ΔᐃΔ[bs.ᐃᐃⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆΔᐃⵠⵠ], 3);
    this.ΔᐃΔ[bs.ᐃᐃⲆⲆⲆ].id = bs.ᐃᐃⲆⲆⲆ;
    this.ⲆΔΔ[bs.ᐃᐃⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔΔᐃΔᐃⵠ], Ka);
    this.ⲆΔΔ[bs.ᐃᐃⲆⲆⲆ].id = bs.ᐃᐃⲆⲆⲆ;
    this.ΔᐃΔ[bs.ⵠⲆⵠⵠⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔΔΔᐃΔ], 3);
    this.ΔᐃΔ[bs.ⵠⲆⵠⵠⵠⵠⲆ].id = bs.ⵠⲆⵠⵠⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⵠⲆⵠⵠⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆⵠΔⵠΔ], 3);
    this.ⲆΔΔ[bs.ⵠⲆⵠⵠⵠⵠⲆ].id = bs.ⵠⲆⵠⵠⵠⵠⲆ;
    this.ΔᐃΔ[bs.ⲆⲆᐃᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠΔΔᐃᐃΔ], ar);
    this.ΔᐃΔ[bs.ⲆⲆᐃᐃΔ].id = bs.ⲆⲆᐃᐃΔ;
    this.ⲆΔΔ[bs.ⲆⲆᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆΔⵠⲆⲆΔ], 3);
    this.ⲆΔΔ[bs.ⲆⲆᐃᐃΔ].id = bs.ⲆⲆᐃᐃΔ;
    this.ΔⲆᐃ[as.ⲆⲆᐃᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠⵠⵠᐃⲆ], mt);
    this.ΔⲆᐃ[as.ⲆⲆᐃᐃΔ].id = as.ⲆⲆᐃᐃΔ;
    this.ΔᐃΔ[bs.ΔᐃᐃⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃᐃΔᐃᐃⵠ], ar);
    this.ΔᐃΔ[bs.ΔᐃᐃⵠⲆ].id = bs.ΔᐃᐃⵠⲆ;
    this.ⲆΔΔ[bs.ΔᐃᐃⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔᐃΔⵠⲆ], 3);
    this.ⲆΔΔ[bs.ΔᐃᐃⵠⲆ].id = bs.ΔᐃᐃⵠⲆ;
    this.ΔⲆᐃ[as.ΔᐃᐃⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃΔΔⲆⵠΔ], dt);
    this.ΔⲆᐃ[as.ΔᐃᐃⵠⲆ].id = as.ΔᐃᐃⵠⲆ;
    this.ΔᐃΔ[bs.ᐃⵠᐃⵠⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠΔⲆⵠⵠᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⵠᐃⵠⵠ].id = bs.ᐃⵠᐃⵠⵠ;
    this.ⲆΔΔ[bs.ᐃⵠᐃⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠΔⲆᐃⵠΔ], mt);
    this.ⲆΔΔ[bs.ᐃⵠᐃⵠⵠ].id = bs.ᐃⵠᐃⵠⵠ;
    this.ΔⲆᐃ[as.ᐃⵠᐃⵠⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆΔⵠᐃΔⵠⲆ], 3);
    this.ΔⲆᐃ[as.ᐃⵠᐃⵠⵠ].id = as.ᐃⵠᐃⵠⵠ;
    this.ΔᐃΔ[bs.ⲆⲆⲆΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔⲆⵠⵠΔ], ar);
    this.ΔᐃΔ[bs.ⲆⲆⲆΔⵠ].id = bs.ⲆⲆⲆΔⵠ;
    this.ⲆΔΔ[bs.ⲆⲆⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔᐃΔⵠΔⲆ], Qk);
    this.ⲆΔΔ[bs.ⲆⲆⲆΔⵠ].id = bs.ⲆⲆⲆΔⵠ;
    this.ΔⲆᐃ[as.ⲆⲆⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠⵠⵠⵠⵠ], 3);
    this.ΔⲆᐃ[as.ⲆⲆⲆΔⵠ].id = as.ⲆⲆⲆΔⵠ;
    this.ΔᐃΔ[bs.ⵠⵠⵠⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⵠⲆⲆᐃⵠ], X);
    this.ΔᐃΔ[bs.ⵠⵠⵠⲆⵠ].id = bs.ⵠⵠⵠⲆⵠ;
    this.ⲆΔΔ[bs.ⵠⵠⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⲆΔⵠΔⲆ], Gl);
    this.ⲆΔΔ[bs.ⵠⵠⵠⲆⵠ].id = bs.ⵠⵠⵠⲆⵠ;
    this.ΔⲆᐃ[as.ⵠⵠⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠΔᐃⲆᐃΔ], 3);
    this.ΔⲆᐃ[as.ⵠⵠⵠⲆⵠ].id = as.ⵠⵠⵠⲆⵠ;
    this.ΔᐃΔ[bs.ⵠΔⵠⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⵠΔⲆⵠⲆ], og);
    this.ΔᐃΔ[bs.ⵠΔⵠⵠᐃ].id = bs.ⵠΔⵠⵠᐃ;
    this.ⲆΔΔ[bs.ⵠΔⵠⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃⵠΔΔⲆ], 3);
    this.ⲆΔΔ[bs.ⵠΔⵠⵠᐃ].id = bs.ⵠΔⵠⵠᐃ;
    this.ΔⲆᐃ[as.ⵠΔⵠⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃⲆⲆⲆⵠ], Sg);
    this.ΔⲆᐃ[as.ⵠΔⵠⵠᐃ].id = as.ⵠΔⵠⵠᐃ;
    this.ΔᐃΔ[bs.ⲆᐃⵠⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆᐃⲆⵠⲆⲆ], 3);
    this.ΔᐃΔ[bs.ⲆᐃⵠⲆⵠ].id = bs.ⲆᐃⵠⲆⵠ;
    this.ⲆΔΔ[bs.ⲆᐃⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆᐃⵠⲆΔⲆ], 3);
    this.ⲆΔΔ[bs.ⲆᐃⵠⲆⵠ].id = bs.ⲆᐃⵠⲆⵠ;
    this.ΔⲆᐃ[as.ⲆᐃⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆⵠⲆⵠᐃ], Wb);
    this.ΔⲆᐃ[as.ⲆᐃⵠⲆⵠ].id = as.ⲆᐃⵠⲆⵠ;
    this.ΔᐃΔ[bs.ⵠᐃᐃⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔⵠⵠΔⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃᐃⲆᐃ].id = bs.ⵠᐃᐃⲆᐃ;
    this.ⲆΔΔ[bs.ⵠᐃᐃⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠᐃⵠⲆΔⲆ], 3);
    this.ⲆΔΔ[bs.ⵠᐃᐃⲆᐃ].id = bs.ⵠᐃᐃⲆᐃ;
    this.ΔⲆᐃ[as.ⵠᐃᐃⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⵠᐃᐃⲆᐃΔ], Gl);
    this.ΔⲆᐃ[as.ⵠᐃᐃⲆᐃ].id = as.ⵠᐃᐃⲆᐃ;
    this.ΔᐃΔ[bs.ΔΔᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⲆΔᐃⲆⲆ], 3);
    this.ΔᐃΔ[bs.ΔΔᐃⵠΔ].id = bs.ΔΔᐃⵠΔ;
    this.ⲆΔΔ[bs.ΔΔᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃΔⲆᐃᐃᐃ], 3);
    this.ⲆΔΔ[bs.ΔΔᐃⵠΔ].id = bs.ΔΔᐃⵠΔ;
    this.ΔⲆᐃ[as.ΔΔᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆᐃᐃⲆΔᐃ], 3);
    this.ΔⲆᐃ[as.ΔΔᐃⵠΔ].id = as.ΔΔᐃⵠΔ;
    this.ΔᐃΔ[bs.ᐃΔΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃⵠⵠΔΔ], Gl);
    this.ΔᐃΔ[bs.ᐃΔΔᐃⲆ].id = bs.ᐃΔΔᐃⲆ;
    this.ⲆΔΔ[bs.ᐃΔΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆΔⲆΔΔᐃ], 3);
    this.ⲆΔΔ[bs.ᐃΔΔᐃⲆ].id = bs.ᐃΔΔᐃⲆ;
    this.ΔⲆᐃ[as.ᐃΔΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠᐃᐃⵠⵠ], X);
    this.ΔⲆᐃ[as.ᐃΔΔᐃⲆ].id = as.ᐃΔΔᐃⲆ;
    this.ΔᐃΔ[bs.ᐃⲆⲆⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔⵠΔᐃᐃⵠᐃ], 3);
    this.ΔᐃΔ[bs.ᐃⲆⲆⵠⲆ].id = bs.ᐃⲆⲆⵠⲆ;
    this.ⲆΔΔ[bs.ᐃⲆⲆⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠΔⲆᐃΔ], X);
    this.ⲆΔΔ[bs.ᐃⲆⲆⵠⲆ].id = bs.ᐃⲆⲆⵠⲆ;
    this.ΔⲆᐃ[as.ᐃⲆⲆⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠⵠⲆΔᐃ], 3);
    this.ΔⲆᐃ[as.ᐃⲆⲆⵠⲆ].id = as.ᐃⲆⲆⵠⲆ;
    this.ΔᐃΔ[bs.ⵠⵠⲆᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆᐃΔΔⵠ], 3);
    this.ΔᐃΔ[bs.ⵠⵠⲆᐃΔ].id = bs.ⵠⵠⲆᐃΔ;
    this.ⲆΔΔ[bs.ⵠⵠⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔᐃⲆΔΔⵠ], 3);
    this.ⲆΔΔ[bs.ⵠⵠⲆᐃΔ].id = bs.ⵠⵠⲆᐃΔ;
    this.ΔⲆᐃ[as.ⵠⵠⲆᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠᐃⲆᐃΔ], 3);
    this.ΔⲆᐃ[as.ⵠⵠⲆᐃΔ].id = as.ⵠⵠⲆᐃΔ;
    this.ΔᐃΔ[bs.ΔⲆⵠᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⵠⵠⲆⲆⵠΔ], 3);
    this.ΔᐃΔ[bs.ΔⲆⵠᐃⵠ].id = bs.ΔⲆⵠᐃⵠ;
    this.ⲆΔΔ[bs.ΔⲆⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃᐃⵠΔᐃΔ], 3);
    this.ⲆΔΔ[bs.ΔⲆⵠᐃⵠ].id = bs.ΔⲆⵠᐃⵠ;
    this.ΔⲆᐃ[as.ΔⲆⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔΔⲆΔⵠᐃ], Z);
    this.ΔⲆᐃ[as.ΔⲆⵠᐃⵠ].id = as.ΔⲆⵠᐃⵠ;
    this.ΔᐃΔ[bs.ⲆᐃⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⵠΔⲆⵠⲆ], nn);
    this.ΔᐃΔ[bs.ⲆᐃⵠⵠⲆ].id = bs.ⲆᐃⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⲆᐃⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⵠᐃⵠⲆΔ], og);
    this.ⲆΔΔ[bs.ⲆᐃⵠⵠⲆ].id = bs.ⲆᐃⵠⵠⲆ;
    this.ΔⲆᐃ[as.ⲆᐃⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠⲆⵠⲆⵠ], 3);
    this.ΔⲆᐃ[as.ⲆᐃⵠⵠⲆ].id = as.ⲆᐃⵠⵠⲆ;
    this.ΔᐃΔ[bs.ᐃΔΔᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔⲆⲆᐃᐃⵠ], 3);
    this.ΔᐃΔ[bs.ᐃΔΔᐃⵠ].id = bs.ᐃΔΔᐃⵠ;
    this.ⲆΔΔ[bs.ᐃΔΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⲆⲆΔᐃᐃ], 3);
    this.ⲆΔΔ[bs.ᐃΔΔᐃⵠ].id = bs.ᐃΔΔᐃⵠ;
    this.ΔⲆᐃ[as.ᐃΔΔᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔΔⵠᐃᐃ], Gl);
    this.ΔⲆᐃ[as.ᐃΔΔᐃⵠ].id = as.ᐃΔΔᐃⵠ;
    this.ΔᐃΔ[bs.ᐃᐃⲆΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔᐃΔΔΔⵠᐃ], nn);
    this.ΔᐃΔ[bs.ᐃᐃⲆΔⲆ].id = bs.ᐃᐃⲆΔⲆ;
    this.ⲆΔΔ[bs.ᐃᐃⲆΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆⵠⵠⲆΔ], nn);
    this.ⲆΔΔ[bs.ᐃᐃⲆΔⲆ].id = bs.ᐃᐃⲆΔⲆ;
    this.ⲆΔΔ[bs.ᐃᐃⲆΔⲆ].info.Ⲇⵠ[2] = this.ⲆΔΔ[bs.ᐃᐃⲆΔⲆ].info.Ⲇⵠ[Rl];
    this.ΔᐃΔ[bs.ⵠᐃΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔᐃⵠⲆⵠⵠ], 3);
    this.ΔᐃΔ[bs.ⵠᐃΔᐃⲆ].id = bs.ⵠᐃΔᐃⲆ;
    this.ⲆΔΔ[bs.ⵠᐃΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃⲆᐃⲆᐃ], 3);
    this.ⲆΔΔ[bs.ⵠᐃΔᐃⲆ].id = bs.ⵠᐃΔᐃⲆ;
    this.ⲆΔΔ[bs.ⵠᐃΔᐃⲆ].info.Ⲇⵠ[wr] = this.ⲆΔΔ[bs.ⵠᐃΔᐃⲆ].info.Ⲇⵠ[0];
    this.ΔᐃΔ[bs.ⵠΔⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⵠⲆⲆᐃⵠ], $b);
    this.ΔᐃΔ[bs.ⵠΔⲆΔ].id = bs.ⵠΔⲆΔ;
    this.ⲆΔΔ[bs.ⵠΔⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠⵠΔⲆᐃ], 3);
    this.ⲆΔΔ[bs.ⵠΔⲆΔ].id = bs.ⵠΔⲆΔ;
    this.ⲆΔΔ[bs.ⵠΔⲆΔ].info.Ⲇⵠ[Ss] = this.ⲆΔΔ[bs.ⵠΔⲆΔ].info.Ⲇⵠ[qn];
    this.ΔᐃΔ[bs.ᐃⵠⵠᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔⵠᐃΔᐃ], ar);
    this.ΔᐃΔ[bs.ᐃⵠⵠᐃⲆ].id = bs.ᐃⵠⵠᐃⲆ;
    this.ⲆΔΔ[bs.ᐃⵠⵠᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠᐃΔΔⲆ], 3);
    this.ⲆΔΔ[bs.ᐃⵠⵠᐃⲆ].id = bs.ᐃⵠⵠᐃⲆ;
    this.ΔⲆᐃ[as.ᐃⵠⵠᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃΔΔΔΔⵠⲆ], Kj);
    this.ΔⲆᐃ[as.ᐃⵠⵠᐃⲆ].id = as.ᐃⵠⵠᐃⲆ;
    this.ΔᐃΔ[bs.ᐃⵠⵠⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⲆⵠⲆⲆⲆⵠ], 3);
    this.ΔᐃΔ[bs.ᐃⵠⵠⲆⵠ].id = bs.ᐃⵠⵠⲆⵠ;
    this.ⲆΔΔ[bs.ᐃⵠⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠΔⵠΔⵠΔ], yh);
    this.ⲆΔΔ[bs.ᐃⵠⵠⲆⵠ].id = bs.ᐃⵠⵠⲆⵠ;
    this.ΔⲆᐃ[as.ᐃⵠⵠⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⲆⵠᐃΔⵠ], 3);
    this.ΔⲆᐃ[as.ᐃⵠⵠⲆⵠ].id = as.ᐃⵠⵠⲆⵠ;
    this.ΔᐃΔ[bs.ᐃⲆⲆΔⵠ] = kw(68, 68, 0, ΔΔ[Ur.ᐃⵠⵠᐃⵠᐃⲆ], Jh);
    this.ΔᐃΔ[bs.ᐃⲆⲆΔⵠ].id = bs.ᐃⲆⲆΔⵠ;
    this.ⲆΔΔ[bs.ᐃⲆⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆⲆⵠΔᐃ], 3);
    this.ⲆΔΔ[bs.ᐃⲆⲆΔⵠ].id = bs.ᐃⲆⲆΔⵠ;
    this.ΔⲆᐃ[as.ᐃⲆⲆΔⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃⵠⵠⲆᐃΔ], nn);
    this.ΔⲆᐃ[as.ᐃⲆⲆΔⵠ].id = as.ᐃⲆⲆΔⵠ;
    this.ΔᐃΔ[bs.ΔᐃΔⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔΔΔΔᐃΔ], 3);
    this.ΔᐃΔ[bs.ΔᐃΔⵠᐃ].id = bs.ΔᐃΔⵠᐃ;
    this.ⲆΔΔ[bs.ΔᐃΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.Δᐃᐃᐃᐃᐃⵠ], 3);
    this.ⲆΔΔ[bs.ΔᐃΔⵠᐃ].id = bs.ΔᐃΔⵠᐃ;
    this.ΔⲆᐃ[as.ΔᐃΔⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔⵠⲆΔⵠᐃᐃ], 3);
    this.ΔⲆᐃ[as.ΔᐃΔⵠᐃ].id = as.ΔᐃΔⵠᐃ;
    this.ΔᐃΔ[bs.ⲆᐃⵠᐃΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠΔⲆⲆⵠᐃ], Qt);
    this.ΔᐃΔ[bs.ⲆᐃⵠᐃΔ].id = bs.ⲆᐃⵠᐃΔ;
    this.ⲆΔΔ[bs.ⲆᐃⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃⵠΔⲆⲆⵠ], 3);
    this.ⲆΔΔ[bs.ⲆᐃⵠᐃΔ].id = bs.ⲆᐃⵠᐃΔ;
    this.ΔⲆᐃ[as.ⲆᐃⵠᐃΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠΔⲆⲆΔⵠ], 3);
    this.ΔⲆᐃ[as.ⲆᐃⵠᐃΔ].id = as.ⲆᐃⵠᐃΔ;
    this.ΔᐃΔ[bs.ⵠⲆΔΔⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃⵠᐃⲆⵠᐃ], 3);
    this.ΔᐃΔ[bs.ⵠⲆΔΔⲆ].id = bs.ⵠⲆΔΔⲆ;
    this.ⲆΔΔ[bs.ⵠⲆΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠᐃⵠⵠⵠⲆⵠ], 3);
    this.ⲆΔΔ[bs.ⵠⲆΔΔⲆ].id = bs.ⵠⲆΔΔⲆ;
    this.ΔⲆᐃ[as.ⵠⲆΔΔⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠΔⲆⵠᐃᐃ], 3);
    this.ΔⲆᐃ[as.ⵠⲆΔΔⲆ].id = as.ⵠⲆΔΔⲆ;
    this.ΔᐃΔ[bs.ⲆⵠᐃⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⵠⲆⲆᐃΔᐃⵠ], dt);
    this.ΔᐃΔ[bs.ⲆⵠᐃⵠΔ].id = bs.ⲆⵠᐃⵠΔ;
    this.ⲆΔΔ[bs.ⲆⵠᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆⵠⲆΔᐃ], 3);
    this.ⲆΔΔ[bs.ⲆⵠᐃⵠΔ].id = bs.ⲆⵠᐃⵠΔ;
    this.ΔⲆᐃ[as.ⲆⵠᐃⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔⵠⲆΔⲆ], 3);
    this.ΔⲆᐃ[as.ⲆⵠᐃⵠΔ].id = as.ⲆⵠᐃⵠΔ;
    this.ΔᐃΔ[bs.ⲆΔⲆⲆⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆᐃⵠᐃᐃΔ], 3);
    this.ΔᐃΔ[bs.ⲆΔⲆⲆⲆ].id = bs.ⲆΔⲆⲆⲆ;
    this.ⲆΔΔ[bs.ⲆΔⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔ], $b);
    this.ⲆΔΔ[bs.ⲆΔⲆⲆⲆ].id = bs.ⲆΔⲆⲆⲆ;
    this.ΔⲆᐃ[as.ⲆΔⲆⲆⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⵠⲆΔΔⵠ], co);
    this.ΔⲆᐃ[as.ⲆΔⲆⲆⲆ].id = as.ⲆΔⲆⲆⲆ;
    this.ΔᐃΔ[bs.ΔΔⲆⲆⵠ] = kw(68, 68, 0, ΔΔ[Ur.ΔⲆᐃⲆΔᐃⵠ], Z);
    this.ΔᐃΔ[bs.ΔΔⲆⲆⵠ].id = bs.ΔΔⲆⲆⵠ;
    this.ⲆΔΔ[bs.ΔΔⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃΔᐃᐃᐃⵠ], 3);
    this.ⲆΔΔ[bs.ΔΔⲆⲆⵠ].id = bs.ΔΔⲆⲆⵠ;
    this.ΔⲆᐃ[as.ΔΔⲆⲆⵠ] = kw(60, 60, 0, ΔΔ[Ur.ΔⲆⵠᐃⲆΔⵠ], Jh);
    this.ΔⲆᐃ[as.ΔΔⲆⲆⵠ].id = as.ΔΔⲆⲆⵠ;
    this.ΔᐃΔ[bs.Ⲇᐃⵠᐃⵠ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⵠⲆⲆⲆⵠ], $b);
    this.ΔᐃΔ[bs.Ⲇᐃⵠᐃⵠ].id = bs.Ⲇᐃⵠᐃⵠ;
    this.ⲆΔΔ[bs.Ⲇᐃⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⲆⵠⲆΔⲆᐃ], yh);
    this.ⲆΔΔ[bs.Ⲇᐃⵠᐃⵠ].id = bs.Ⲇᐃⵠᐃⵠ;
    this.ΔⲆᐃ[as.Ⲇᐃⵠᐃⵠ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃΔⵠⵠⲆΔⵠΔ], Z);
    this.ΔⲆᐃ[as.Ⲇᐃⵠᐃⵠ].id = as.Ⲇᐃⵠᐃⵠ;
    this.ΔᐃΔ[bs.ⵠⵠⵠⵠⲆ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⵠⲆᐃΔᐃᐃ], 3);
    this.ΔᐃΔ[bs.ⵠⵠⵠⵠⲆ].id = bs.ⵠⵠⵠⵠⲆ;
    this.ⲆΔΔ[bs.ⵠⵠⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠⵠΔⵠⲆⲆ], $b);
    this.ⲆΔΔ[bs.ⵠⵠⵠⵠⲆ].id = bs.ⵠⵠⵠⵠⲆ;
    this.ΔⲆᐃ[as.ⵠⵠⵠⵠⲆ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⵠΔⲆⵠⵠΔ], Jh);
    this.ΔⲆᐃ[as.ⵠⵠⵠⵠⲆ].id = as.ⵠⵠⵠⵠⲆ;
    this.ΔᐃΔ[bs.ⵠⲆᐃᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃᐃᐃⲆᐃᐃᐃ], co);
    this.ΔᐃΔ[bs.ⵠⲆᐃᐃⲆ].id = bs.ⵠⲆᐃᐃⲆ;
    this.ⲆΔΔ[bs.ⵠⲆᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆᐃⵠᐃⲆΔΔ], 3);
    this.ⲆΔΔ[bs.ⵠⲆᐃᐃⲆ].id = bs.ⵠⲆᐃᐃⲆ;
    this.ΔⲆᐃ[as.ⵠⲆᐃᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⵠⵠⲆⲆΔΔᐃ], 3);
    this.ΔⲆᐃ[as.ⵠⲆᐃᐃⲆ].id = as.ⵠⲆᐃᐃⲆ;
    this.ΔᐃΔ[bs.ΔⲆΔᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ᐃΔΔΔΔⵠᐃ], Sg);
    this.ΔᐃΔ[bs.ΔⲆΔᐃⲆ].id = bs.ΔⲆΔᐃⲆ;
    this.ⲆΔΔ[bs.ΔⲆΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⵠᐃⲆᐃⲆ], Ka);
    this.ⲆΔΔ[bs.ΔⲆΔᐃⲆ].id = bs.ΔⲆΔᐃⲆ;
    this.ΔⲆᐃ[as.ΔⲆΔᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ΔᐃᐃᐃΔⲆⵠ], co);
    this.ΔⲆᐃ[as.ΔⲆΔᐃⲆ].id = as.ΔⲆΔᐃⲆ;
    this.ΔᐃΔ[bs.ΔⲆⵠⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⵠᐃⵠⵠⲆⵠⲆ], 3);
    this.ΔᐃΔ[bs.ΔⲆⵠⲆᐃ].id = bs.ΔⲆⵠⲆᐃ;
    this.ⲆΔΔ[bs.ΔⲆⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔΔⵠⵠⵠᐃ], yh);
    this.ⲆΔΔ[bs.ΔⲆⵠⲆᐃ].id = bs.ΔⲆⵠⲆᐃ;
    this.ΔⲆᐃ[as.ΔⲆⵠⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ΔΔⲆⲆᐃⵠΔ], 3);
    this.ΔⲆᐃ[as.ΔⲆⵠⲆᐃ].id = as.ΔⲆⵠⲆᐃ;
    this.ΔᐃΔ[bs.ⵠΔΔΔΔ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔⵠᐃⵠⲆᐃ], Ka);
    this.ΔᐃΔ[bs.ⵠΔΔΔΔ].id = bs.ⵠΔΔΔΔ;
    this.ⲆΔΔ[bs.ⵠΔΔΔΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⵠᐃⲆⵠΔ], Z);
    this.ⲆΔΔ[bs.ⵠΔΔΔΔ].id = bs.ⵠΔΔΔΔ;
    this.ΔᐃΔ[bs.ⵠⲆᐃⲆⵠⵠΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆⲆⲆΔⲆⵠᐃΔⲆ], 3);
    this.ΔᐃΔ[bs.ⵠⲆᐃⲆⵠⵠΔ].id = bs.ⵠⲆᐃⲆⵠⵠΔ;
    this.ⲆΔΔ[bs.ⵠⲆᐃⲆⵠⵠΔ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆⲆΔΔᐃⲆΔᐃ], 3);
    this.ⲆΔΔ[bs.ⵠⲆᐃⲆⵠⵠΔ].id = bs.ⵠⲆᐃⲆⵠⵠΔ;
    this.ΔᐃΔ[bs.ΔⲆⵠⲆΔⲆᐃ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔΔΔⲆᐃⲆⲆⲆ], yh);
    this.ΔᐃΔ[bs.ΔⲆⵠⲆΔⲆᐃ].id = bs.ΔⲆⵠⲆΔⲆᐃ;
    this.ⲆΔΔ[bs.ΔⲆⵠⲆΔⲆᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃⲆΔⵠΔᐃⲆⲆΔ], ar);
    this.ⲆΔΔ[bs.ΔⲆⵠⲆΔⲆᐃ].id = bs.ΔⲆⵠⲆΔⲆᐃ;
    this.ΔᐃΔ[bs.ⵠΔⵠΔⵠⵠᐃ] = kw(68, 68, 0, ΔΔ[Ur.ⲆᐃΔⵠⵠⲆⲆⲆⵠ], Qt);
    this.ΔᐃΔ[bs.ⵠΔⵠΔⵠⵠᐃ].id = bs.ⵠΔⵠΔⵠⵠᐃ;
    this.ⲆΔΔ[bs.ⵠΔⵠΔⵠⵠᐃ] = kw(60, 60, 0, ΔΔ[Ur.ᐃᐃᐃΔΔΔᐃΔᐃ], X);
    this.ⲆΔΔ[bs.ⵠΔⵠΔⵠⵠᐃ].id = bs.ⵠΔⵠΔⵠⵠᐃ;
    this.ΔᐃΔ[bs.ⲆⵠⲆⵠⵠⲆΔ] = kw(68, 68, 0, ΔΔ[Ur.ⲆΔᐃᐃᐃΔΔᐃᐃ], Ka);
    this.ΔᐃΔ[bs.ⲆⵠⲆⵠⵠⲆΔ].id = bs.ⲆⵠⲆⵠⵠⲆΔ;
    this.ⲆΔΔ[bs.ⲆⵠⲆⵠⵠⲆΔ] = kw(60, 60, 0, ΔΔ[Ur.ⵠΔΔⲆᐃᐃⵠΔⵠ], dt);
    this.ⲆΔΔ[bs.ⲆⵠⲆⵠⵠⲆΔ].id = bs.ⲆⵠⲆⵠⵠⲆΔ;
    this.ΔᐃΔ[bs.ΔⲆⵠⵠⲆᐃⲆ] = kw(68, 68, 0, ΔΔ[Ur.ΔΔᐃⵠΔΔΔⵠΔ], Qt);
    this.ΔᐃΔ[bs.ΔⲆⵠⵠⲆᐃⲆ].id = bs.ΔⲆⵠⵠⲆᐃⲆ;
    this.ⲆΔΔ[bs.ΔⲆⵠⵠⲆᐃⲆ] = kw(60, 60, 0, ΔΔ[Ur.ⲆⲆⲆⵠΔⵠΔᐃⲆ], Z);
    this.ⲆΔΔ[bs.ΔⲆⵠⵠⲆᐃⲆ].id = bs.ΔⲆⵠⵠⲆᐃⲆ;
    this.ⲆⲆΔΔΔΔᐃ = function () {
      for (var a = bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ, b = Hs, c = 10, d = 0; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = fg;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += fg + a[d].info.height;
      }
    };
    this.ᐃⵠᐃⲆⲆᐃΔ = function () {
      var a = Math.floor((10 + this.ΔᐃΔ[Cq].info.Ⲇⵠ[Nl].width) * Math.floor((Jh + bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ.length) / Eg) + 35);
      for (var b = 0; b < this.ΔᐃΔ.length; b++) {
        if (this.ΔᐃΔ[b]) {
          this.ΔᐃΔ[b].info.translate.x = a;
          this.ΔᐃΔ[b].info.translate.y = 22;
        }
      }
      this.ΔᐃⲆΔⵠⲆᐃ.info.translate.x = a + _q;
      this.ΔᐃⲆΔⵠⲆᐃ.info.translate.y = 22 + ΔΔ[Ur.ᐃⵠΔΔⵠⲆⲆ].height;
      this.ⲆΔⲆᐃⲆⵠⵠ.info.translate.x = a + 17;
      this.ⲆΔⲆᐃⲆⵠⵠ.info.translate.y = 30;
      this.ΔΔᐃᐃΔⲆΔ.info.translate.x = a + 17;
      this.ΔΔᐃᐃΔⲆΔ.info.translate.y = 22 + ΔΔ[Ur.ᐃⵠΔΔⵠⲆⲆ].height;
    };
    this.ⵠⵠⵠΔᐃᐃΔⵠᐃ = function () {
      var a = Math.floor((ro - ΔΔ[Ur.ΔΔⵠⲆΔⵠΔ][0].width) / 2);
      for (var b = 0; b < this.ΔⲆᐃᐃΔ.length; b++) {
        this.ΔⲆᐃᐃΔ[b].button.info.translate.x = a;
        this.ΔⲆᐃᐃΔ[b].button.info.translate.y = -13;
      }
    };
    this.ᐃᐃΔΔΔᐃⵠ = function () {
      var a = 12 + Math.floor((ae + this.ΔᐃⲆⵠΔⵠᐃ.info.Ⲇⵠ[ur].width) * Math.floor((3 + bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ.length) / 4) + 35);
      this.ΔᐃⲆⵠΔⵠᐃ.info.translate.x = a;
      this.ΔᐃⲆⵠΔⵠᐃ.info.translate.y = 33;
      this.ᐃⵠᐃⵠⵠⵠⵠ.info.translate.x = this.ΔᐃⲆⵠΔⵠᐃ.info.translate.x;
      this.ᐃⵠᐃⵠⵠⵠⵠ.info.translate.y = 137;
      this.ⲆΔᐃⲆⵠᐃⵠ.info.translate.x = this.ΔᐃⲆⵠΔⵠᐃ.info.translate.x;
      this.ⲆΔᐃⲆⵠᐃⵠ.info.translate.y = 240;
    };
    this.ⲆᐃⲆⵠΔᐃⲆ = function () {
      var a = $q + Math.floor((Va + this.ᐃⲆᐃᐃᐃⵠΔ.info.Ⲇⵠ[uh].width) * Math.floor((3 + bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ.length) / 4) + 35);
      this.ᐃⲆᐃᐃᐃⵠΔ.info.translate.x = a;
      this.ᐃⲆᐃᐃᐃⵠΔ.info.translate.y = 36;
      a += 83;
      this.ⲆⵠⵠⵠⵠᐃⲆ.info.translate.x = a;
      this.ⲆⵠⵠⵠⵠᐃⲆ.info.translate.y = 36;
      this.ⵠⲆᐃᐃᐃⲆΔ.info.translate.x = a;
      this.ⵠⲆᐃᐃᐃⲆΔ.info.translate.y = 36;
      this.ⲆⵠΔⵠⵠΔᐃ.info.translate.x = a;
      this.ⲆⵠΔⵠⵠΔᐃ.info.translate.y = 36;
      this.ⲆⲆⵠΔΔᐃⲆ.info.translate.x = a;
      this.ⲆⲆⵠΔΔᐃⲆ.info.translate.y = 36;
      this.ᐃⲆⵠⲆᐃΔⲆ.info.translate.x = a;
      this.ᐃⲆⵠⲆᐃΔⲆ.info.translate.y = 36;
    };
    this.ⵠⲆⲆᐃⲆΔᐃ = function () {
      var a = 12 + Math.floor(Math.floor((Ka + bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ.length) / _l) * (Ln + this.ΔⲆΔᐃΔⲆᐃ.info.Ⲇⵠ[0].width) + 35);
      this.ΔⲆΔᐃΔⲆᐃ.info.translate.x = a;
      this.ΔⲆΔᐃΔⲆᐃ.info.translate.y = 36;
      a += 83;
      this.ΔᐃⲆⵠⵠΔⲆ.info.translate.x = a;
      this.ΔᐃⲆⵠⵠΔⲆ.info.translate.y = 36;
    };
    this.ⲆⵠⲆᐃⲆᐃⵠ = function () {
      var a = Math.floor((10 + this.ⲆᐃⵠⵠⲆΔΔ.info.Ⲇⵠ[0].width) * Math.floor((ol + bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ.length) / Xb) + 35);
      this.ⲆᐃⵠⵠⲆΔΔ.info.translate.x = a;
      this.ⲆᐃⵠⵠⲆΔΔ.info.translate.y = 22;
    };
    this.ᐃⵠⲆⲆⵠⲆᐃ = function () {
      var a = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ;
      if (tj < a.length) {
        var b = Math.floor((ro - bx.ⵠⵠΔΔ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = ne; a.length > c; c++) {
        a[c].info.translate.x = b + (a[c].info.width + pr) * c;
        a[c].info.translate.y = so - a[c].info.width - fg;
        this.ΔⲆⲆⵠⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ΔⲆⲆⵠⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔⲆⲆⵠⵠ[a[c].id].info.Ⲇⵠ[Tg].height - 6;
      }
    };
    var n;
    var p = 0;
    function q() {
      k.ᐃⲆΔ();
      if (++p == 30) {
        k.ᐃⵠⵠΔⲆΔⲆ();
        k.ᐃⲆΔ();
        return;
      }
      kj.setTimeout(q, 33);
    }
    this.ⲆⲆΔᐃⲆ = function (a) {
      if (bx.ᐃⵠⵠΔⲆ.open) {
        bx.ᐃⵠⵠΔⲆ.ⲆⲆΔᐃⲆ();
      }
      if (bx.ᐃᐃᐃᐃᐃ.open) {
        bx.ᐃᐃᐃᐃᐃ.ⲆⲆΔᐃⲆ();
      }
      document.getElementById("team_box").style.display = "none";
      k.ⲆᐃⵠⵠΔ.style.display = "none";
      k.ⲆᐃⵠⵠΔ.open = false;
      k.sign.style.display = "none";
      k.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      k.ⲆΔᐃⲆ.open = Rn;
      document.getElementById("option_in_game").style.display = "none";
      k.options.open = false;
      document.getElementById("sure_delete").style.display = "none";
      k.ⲆᐃⲆᐃ.open = yj;
      document.getElementById("cancel_sure_delete").style.display = "none";
      k.ᐃⵠⵠΔⵠ.open = false;
      document.getElementById("chronoquest").style.display = "none";
      k.ⲆᐃⵠⲆ.open = Rs;
      n = a;
      k.ⲆΔⵠⵠⲆΔⲆ();
      k.ΔⲆ.style.cursor = k.ΔᐃᐃⵠᐃᐃΔ;
      ex.ⲆⲆΔᐃⲆ();
      l = -ag;
      t();
      Bf();
    };
    var l = -1;
    function t() {
      k.ᐃⲆΔ();
      if (++l == 30) {
        k.stop();
        n();
        return;
      }
      kj.setTimeout(t, 33);
    }
    this.ⲆⵠΔⲆⵠ = false;
    this.stop = function () {
      this.ⲆⵠΔⲆⵠ = false;
    };
    this.ΔⲆᐃⵠΔ = function () {
      ⵠⵠⵠⲆ.ΔⲆΔᐃᐃⲆΔⵠⲆ();
      k.ⲆⵠΔⲆⵠ = true;
      l = -1;
      p = ms;
      q();
    };
    this.ᐃⲆΔ = function () {
      this.ᐃΔΔⵠ.translate.x = ro - this.ᐃΔΔⵠ.Ⲇⵠ.width - 10;
      this.ᐃΔΔⵠ.translate.y = Ui;
      ff.Δⵠⵠⵠⵠ.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ⵠⵠᐃⲆΔᐃⵠ][Tg].width - 85;
      ff.Δⵠⵠⵠⵠ.translate.y = xk;
      this.ⲆΔᐃⲆ.button.info.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ][ne].width - Ho;
      this.ⲆΔᐃⲆ.button.info.translate.y = xk;
      this.ⲆᐃⵠⲆ.button.info.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ΔⵠⲆΔⵠⵠⵠ][0].width - pg;
      this.ⲆᐃⵠⲆ.button.info.translate.y = this.ⲆΔᐃⲆ.button.info.translate.y + ΔΔ[Ur.ᐃΔⲆⲆΔΔΔ][0].height + ha;
      this.options.button.info.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ][Gr].width - Ja;
      this.options.button.info.translate.y = this.ⲆᐃⵠⲆ.button.info.translate.y + ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ][0].height + 18;
      this.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.info.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ][Rl].width - pg;
      this.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.info.translate.y = this.options.button.info.translate.y + ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ][0].height;
      this.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.info.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ⲆⵠⲆⲆⵠⵠᐃ][_a].width - dh;
      this.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.info.translate.y = this.options.button.info.translate.y + ΔΔ[Ur.ᐃᐃΔⲆⵠⵠΔ][0].height;
      this.ⲆᐃⵠⵠΔ.button.info.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ][0].width - Kk;
      this.ⲆᐃⵠⵠΔ.button.info.translate.y = this.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.info.translate.y + ΔΔ[Ur.ᐃᐃⵠⲆⲆⵠⲆ][0].height;
      bx.ΔⲆᐃΔΔ.translate.x = this.ᐃΔΔⵠ.translate.x - 63 - 85;
      bx.ΔⲆᐃΔΔ.translate.y = mg;
      bx.ⲆⲆⲆΔⲆ.translate.x = this.ᐃΔΔⵠ.translate.x - ΔΔ[Ur.ΔⲆⵠΔⵠⵠⲆ].width - 85;
      bx.ⲆⲆⲆΔⲆ.translate.y = bx.ΔⲆᐃΔΔ.translate.y + Yt + ΔΔ[Ur.ⵠⵠⵠⲆᐃⲆⲆ].height;
      this.ΔΔᐃΔⲆ.translate.y = so - 3 - 193;
      this.ΔΔᐃΔⲆ.translate.x = ro - Kj - 193;
      this.ⲆⲆⲆΔ.translate.x = 5;
      this.ⲆⲆⲆΔ.translate.y = so - this.ⲆⲆⲆΔ.Ⲇⵠ.height - 5;
      this.ⵠⵠᐃⲆᐃ.button.info.translate.x = oq - 45.5;
      this.ⵠⵠᐃⲆᐃ.button.info.translate.y = 50;
      this.ⲆⲆΔΔΔΔᐃ();
      this.ᐃⵠⲆⲆⵠⲆᐃ();
      this.ᐃⵠᐃⲆⲆᐃΔ();
      this.ⲆⵠⲆᐃⲆᐃⵠ();
      this.ⵠⲆⲆᐃⲆΔᐃ();
      this.ⲆᐃⲆⵠΔᐃⲆ();
      this.ᐃᐃΔΔΔᐃⵠ();
      this.ⵠⵠⵠΔᐃᐃΔⵠᐃ();
      this.sign.ΔⲆⲆᐃⲆᐃᐃ();
      Bm();
      bx.ᐃⵠⵠΔⲆ.ᐃⲆΔ();
      bx.ᐃᐃᐃᐃᐃ.ᐃⲆΔ();
      this.ᐃΔΔΔⵠⲆᐃⲆΔ.ᐃⲆΔ();
      this.ⲆΔᐃⲆ.ⵠⲆⲆΔⲆΔⵠ.ᐃⲆΔ();
      this.ⲆΔᐃⲆ.list.ᐃⲆΔ();
      this.ⲆᐃⲆᐃ.ᐃⲆΔ();
      this.ᐃⵠⵠΔⵠ.ᐃⲆΔ();
      this.ⲆᐃⵠⲆ.ᐃⲆΔ();
      this.ⵠⵠᐃⲆᐃ.ᐃⲆΔ();
      this.options.ᐃⲆΔ();
      this.ⲆᐃⵠⵠΔ.ᐃⲆΔ();
      this.sign.ᐃⲆΔ();
      var a = Tg;
      if (p != 30) {
        a = 1500 / (p + Fh) - 50;
      }
      if (l != -Fh) {
        a = -(1500 / (30 - l + 1) - 48);
      }
      this.ⵠⵠᐃⲆᐃ.button.info.translate.y -= Cn < a ? a : -a;
      this.ᐃΔΔⵠ.translate.y -= Tg < a ? a : -a;
      bx.ΔⲆᐃΔΔ.translate.y -= a > Tg ? a : -a;
      bx.ⲆⲆⲆΔⲆ.translate.y -= Nl < a ? a : -a;
      this.ⲆΔᐃⲆ.button.info.translate.y -= Tg < a ? a : -a;
      this.ⲆᐃⵠⲆ.button.info.translate.y -= a > uh ? a : -a;
      this.options.button.info.translate.y -= a > ne ? a : -a;
      this.ⲆᐃⵠⵠΔ.button.info.translate.y -= a > ur ? a : -a;
      this.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.info.translate.y -= ur < a ? a : -a;
      this.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.info.translate.y -= a > 0 ? a : -a;
      ff.Δⵠⵠⵠⵠ.translate.y -= a > Tg ? a : -a;
      this.ⲆⲆⲆΔ.translate.y -= a < Cq ? a : -a;
      this.ΔΔᐃΔⲆ.translate.y -= a < Ih ? a : -a;
    };
    this.ⵠⵠΔⵠᐃⵠΔⲆΔ = function () {
      if (!bx.ᐃⲆΔΔᐃ.enabled && this.ⲆⵠΔⵠᐃⵠⵠ && !bx.ᐃⵠⲆⵠⲆ) {
        Vm();
      }
      hp();
      (function () {
        var a = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
        if (ff.mode === uw.ⵠΔⵠⵠⲆ || uw.ΔΔⲆΔⵠ === ff.mode || ff.mode === uw.ΔΔⵠⲆΔ || ff.mode === uw.ΔᐃⵠΔᐃ || ff.mode === uw.ⵠⲆΔⵠⵠΔᐃ || ff.mode === uw.ΔⵠⵠⲆᐃ) {
          for (var b = Rl; b < a.length; b++) {
            a[b].ΔⵠᐃⲆⲆᐃⲆ();
          }
        } else if (ff.mode === uw.ΔⲆΔⲆⲆⵠᐃ) {
          for (b = _a; a.length > b; b++) {
            if (bx.ᐃᐃΔᐃⲆⲆⵠ || bx.ⲆⲆⲆΔⲆ.enabled || a[b].ᐃᐃᐃⲆ.ⵠᐃΔⵠⲆ !== "spectator") {
              a[b].ΔⵠᐃⲆⲆᐃⲆ();
            }
          }
        }
      })();
      Ba.ⲆⵠⵠⲆⵠᐃΔ();
      if (this.ⲆⵠΔⵠᐃⵠⵠ) {
        Lm();
        if (this.ᐃᐃⲆⲆⵠⲆΔ === 1) {
          this.ⲆΔᐃⲆ.button.ⵠΔᐃⵠ(f);
        }
        if (ff.mode !== uw.ΔΔⵠⲆΔ && uw.ΔᐃⵠΔᐃ !== ff.mode && ff.mode !== uw.ⵠⲆΔⵠⵠΔᐃ && Eo === this.ΔⲆⵠⲆⵠᐃⵠ) {
          this.ⲆᐃⵠⲆ.button.ⵠΔᐃⵠ(f);
        }
        this.options.button.ⵠΔᐃⵠ(f);
        if (this.ⲆΔΔⵠᐃᐃⲆ === Ag) {
          this.ⲆᐃⵠⵠΔ.button.ⵠΔᐃⵠ(f);
        }
        if (ex.ΔⲆᐃⵠΔ) {
          this.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.ⵠΔᐃⵠ(f);
        } else {
          this.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.ⵠΔᐃⵠ(f);
        }
        Hm();
        sp();
        this.ⲆⲆⲆΔ.ⵠΔᐃⵠ();
        gp();
        Xm();
        $m();
        ep();
        bp();
        Gm();
        Fm();
        (function () {
          if (!bx.Ⲇⵠⵠⵠ.open && !bx.ΔⵠΔᐃⲆ.open && !bx.ⵠΔⲆⲆ.open && !bx.ΔⲆⵠⲆ.open && !bx.ⲆΔᐃⵠ.open) {
            bx.ⲆΔⵠⵠⵠ.open = false;
            var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
            var b = uw.ⲆΔⲆⲆⲆᐃΔⵠⵠ;
            if (a) {
              for (var c = 0; c < ff.ᐃᐃᐃ[xw.ᐃᐃᐃⲆⵠ].length; c++) {
                var d = ff.ᐃᐃᐃ[xw.ᐃᐃᐃⲆⵠ][c];
                var e = ᐃⵠΔⵠ.ⲆⵠⲆᐃ(d, a);
                if (b > e) {
                  b = e;
                  bx.ⲆΔⵠⵠⵠ.open = true;
                  bx.ⲆΔⵠⵠⵠ.ΔΔΔⵠ = d.ΔΔΔⵠ;
                  bx.ⲆΔⵠⵠⵠ.ⲆΔΔᐃᐃ = d.id;
                }
              }
            }
          }
        })();
        _m();
        Mm();
        jm();
        Rm();
        Bm();
        Wm();
      }
      if (bx.ᐃⲆΔΔᐃ.enabled) {
        Qm();
      }
      Sm();
      if (this.ⲆⵠΔⵠᐃⵠⵠ && this.ⵠⲆⲆΔᐃⵠᐃ === 1) {
        op();
      }
      bx.ⲆΔᐃᐃΔⵠⵠ.ⵠΔᐃⵠ();
      bx.alert.ⵠΔᐃⵠ("#FFF", "#000");
      if (this.ⲆⵠΔⵠᐃⵠⵠ) {
        bx.ᐃⲆΔΔᐃ.ⵠΔᐃⵠ();
        bx.ⵠⵠᐃⲆᐃ.ⵠΔᐃⵠ();
        bx.ⵠⵠΔΔ.ΔᐃᐃⲆⵠᐃᐃ.ⵠΔᐃⵠ(kf.ⲆⲆⲆⲆ.x, kf.ⲆⲆⲆⲆ.y);
      }
      Im();
    };
    this.ⲆⵠᐃⲆΔⲆᐃΔᐃ = function () {
      bx.ᐃᐃⵠ.ᐃⲆΔ();
      bx.ⲆⲆⲆΔ.ᐃⲆΔ();
      if (!bx.reconnect.enabled && bx.ⲆⲆΔΔᐃ) {
        bx.control.ᐃⲆΔ();
        bx.ΔⲆᐃΔΔ.ᐃⲆΔ();
      }
      ff.ᐃⲆΔ();
      this.ⲆᐃⵠⲆ.ΔⲆⵠⵠⵠΔᐃⵠⵠ();
    };
    this.ᐃⵠΔᐃⵠΔⵠⵠΔ = function () {
      Ov();
    };
    this.ᐃᐃⲆᐃΔΔᐃᐃⵠ = function () {
      ⵠⵠⵠⲆ.ΔⲆΔΔΔⵠⵠⵠᐃ();
      ⵠⵠⵠⲆ.ᐃⵠⲆᐃⵠᐃⲆⵠⵠ();
      ⵠⵠⵠⲆ.ᐃⵠⵠΔΔⲆⲆᐃᐃ();
      ⵠⵠⵠⲆ.ⲆⵠΔⵠᐃᐃⵠⲆΔ();
    };
    this.ⵠΔᐃⵠ = function () {
      if (!bx.reconnect.enabled && bx.ⲆⲆΔΔᐃ) {
        this.ᐃᐃⲆᐃΔΔᐃᐃⵠ();
      }
      ex.ⵠⵠᐃᐃᐃⲆⲆΔⲆ();
      this.ⲆⵠᐃⲆΔⲆᐃΔᐃ();
      if (Zq !== pf.ⵠⲆⲆⵠⵠᐃΔ) {
        this.ᐃⵠΔᐃⵠΔⵠⵠΔ();
        this.ⵠⵠΔⵠᐃⵠΔⲆΔ();
      } else {
        var a = ⵠᐃ.ⲆⵠᐃΔᐃᐃᐃ;
        Em(f, a, oq - a.width / 4, pq - a.height / 4, a.width / ld, a.height / ql);
      }
    };
    this.ⲆᐃⵠΔΔᐃⲆ = function (a) {
      if (bx.ᐃⵠⵠΔⲆ.open && a.keyCode === 27) {
        bx.ᐃⵠⵠΔⲆ.ⲆⲆΔᐃⲆ();
      } else if (bx.ᐃᐃᐃᐃᐃ.open && a.keyCode === 27) {
        bx.ᐃᐃᐃᐃᐃ.ⲆⲆΔᐃⲆ();
      } else if (bx.ᐃⵠⵠΔⲆ.open || bx.ᐃᐃᐃᐃᐃ.open || a.keyCode != 79 || l != -1) {
        if (a.keyCode == 13 && l == -j) {
          if (bx.ᐃᐃᐃᐃᐃ.open) {
            bx.ᐃᐃᐃᐃᐃ.ᐃⲆᐃΔⲆᐃⲆ();
          } else {
            bx.ᐃⵠⵠΔⲆ.ΔⲆᐃⵠΔ();
          }
        } else if (!bx.ᐃⵠⵠΔⲆ.open && !bx.ᐃᐃᐃᐃᐃ.open) {
          if (a.keyCode === 82) {
            bx.ΔⲆᐃΔΔ.ⵠΔΔⵠᐃΔΔ();
          } else if (a.keyCode !== 80 || uw.ΔⲆΔⲆⲆⵠᐃ !== ff.mode || bx.ᐃᐃΔᐃⲆⲆⵠ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (ur > bx.ⵠⲆⵠᐃ.id) {
                var b = a.keyCode - 49;
                var c = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ[b];
                if (c) {
                  ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              bx.ⵠⵠᐃⲆᐃᐃᐃ = !bx.ⵠⵠᐃⲆᐃᐃᐃ;
            } else if (a.keyCode == 71) {
              bx.ⵠⲆⵠᐃ.ⵠΔᐃⵠⲆⵠΔⵠᐃ();
            }
          } else {
            bx.ⲆⲆⲆΔⲆ.ⵠΔΔⵠᐃΔΔ();
          }
        }
      } else {
        bx.ᐃᐃᐃᐃᐃ.ⲆⵠⵠΔⵠⵠΔⲆⲆ();
      }
      Af.up(a);
    };
    this.ᐃⲆΔᐃⵠⲆⲆ = function (a) {
      Af.down(a);
      if (a.keyCode == le && !bx.ᐃⵠⵠΔⲆ.open && !bx.ᐃᐃᐃᐃᐃ.open) {
        a.preventDefault();
      }
    };
    this.ⵠᐃⲆⲆⵠΔΔ = function (b) {
      kf.ⲆⲆⲆⲆ = iw(k.ΔⲆ, b);
      var c = cg;
      if (rl > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ) {
        k.ΔΔᐃΔⲆ.focus(kf.ⲆⲆⲆⲆ);
      }
      var d = bx.Ⲇⵠⵠⵠ;
      if (bx.ⵠⲆⵠᐃ.id < 0 && d.id >= 0 && (!bx.Ⲇⵠⵠⵠ.lock || bx.id === bx.Ⲇⵠⵠⵠ.ΔΔΔⵠ)) {
        c |= k.ΔᐃΔ[bx.Ⲇⵠⵠⵠ.id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      var e = bx.ⵠΔⲆⲆ;
      if (e.open && e.ΔΔⵠⵠΔ > 0) {
        c |= k.ΔᐃⲆⵠⵠΔⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      var f = bx.ⲆΔᐃⵠ;
      if (f.open && f.ⵠᐃΔᐃⵠᐃⲆ > 0) {
        c |= k.ⲆⵠⵠⵠⵠᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        c |= k.ⵠⲆᐃᐃᐃⲆΔ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        c |= k.ⲆⵠΔⵠⵠΔᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        c |= k.ⲆⲆⵠΔΔᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        c |= k.ᐃⲆⵠⲆᐃΔⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      var j = bx.ΔⲆⵠⲆ;
      if (j.open && j.ⲆᐃⵠᐃᐃᐃΔ > Cn) {
        c |= k.ⲆΔᐃⲆⵠᐃⵠ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (bx.sign.open) {
        c |= k.sign.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (!bx.Ⲇⵠⵠⵠ.lock) {
        if (bx.Ⲇⵠⵠⵠ.ⵠⲆⲆⵠΔᐃⵠ) {
          c |= k.ΔΔᐃᐃΔⲆΔ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        }
      }
      if (bx.Ⲇⵠⵠⵠ.ΔΔⲆⵠⲆᐃⲆ) {
        c |= k.ΔᐃⲆΔⵠⲆᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (bx.ⵠⲆⵠᐃ.id < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open && !k.ⲆᐃⵠⵠΔ.open) {
        for (var a = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ, m = 0; m < a.length; m++) {
          var n = a[m].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
          c |= n;
          if (n) {
            bx.ⵠⵠΔΔ.ΔᐃᐃⲆⵠᐃᐃ.start(m, kf.ⲆⲆⲆⲆ);
          }
          if (d.open && (d.id < 0 || d.id == a[m].id) || bx.ΔⵠΔᐃⲆ.open && bs.ΔΔΔᐃ === a[m].id || bx.ⲆΔⵠⵠⵠ.open && bs.ΔΔⵠᐃⲆ === a[m].id || bx.ΔⲆⵠⲆ.open && (a[m].id === bs.ΔΔΔᐃ || a[m].id === bs.ⵠΔⵠΔⵠ) || bx.ⵠΔⲆⲆ.open && bs.ᐃⵠⵠΔᐃ === a[m].id || bx.ⲆΔᐃⵠ.open && bs.ΔΔΔᐃ === a[m].id) {
            c |= k.ΔⲆⲆⵠⵠ[a[m].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
          }
        }
      }
      if (bx.ᐃⵠᐃⲆᐃ.open) {
        c |= k.ᐃⵠᐃⲆᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (k.ⵠⵠΔⵠⲆ != -Fh) {
        if (c |= k.ΔⲆᐃᐃΔ[k.ⵠⵠΔⵠⲆ].button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw)) {
          var o = true;
        }
      } else {
        o = false;
      }
      if (bx.ⵠⲆⵠᐃ.id < Nl && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < Nl && !o && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⵠΔ.open && !bx.ᐃⵠⲆⵠⲆ) {
        a = bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ;
        m = Cn;
        for (; m < a.length; m++) {
          c |= a[m].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        }
      }
      if (Gr > bx.ⵠⲆⵠᐃ.id && Tg > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && bx.ⵠⵠᐃⲆᐃ.open && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open) {
        c |= k.ⵠⵠᐃⲆᐃ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open) {
        c |= k.ⲆΔᐃⲆ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open) {
        c |= k.options.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < qn && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open) {
        c |= k.ⲆᐃⵠⵠΔ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open && !k.ⲆᐃⵠⵠΔ.open) {
        if (ex.ΔⲆᐃⵠΔ) {
          c |= k.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        } else {
          c |= k.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        }
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⵠⵠΔ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && uw.ΔΔⵠⲆΔ !== ff.mode && ff.mode !== uw.ΔᐃⵠΔᐃ && ff.mode !== uw.ⵠⲆΔⵠⵠΔᐃ) {
        c |= k.ⲆᐃⵠⲆ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
      }
      if (!c && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open && !k.sign.open) {
        if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ >= ur) {
          ⵠⵠⵠⲆ.ᐃⲆⵠⵠΔⲆΔΔᐃ();
        } else if (!o) {
          kf.down();
        }
      }
    };
    this.ⵠΔⲆᐃⲆⵠΔ = function (b) {
      kf.ⲆⲆⲆⲆ = iw(k.ΔⲆ, b);
      kf.up();
      if (!bx.ⵠⵠΔΔ.ΔᐃᐃⲆⵠᐃᐃ.release()) {
        var c = bx.Ⲇⵠⵠⵠ;
        var d = bx.ΔⵠΔᐃⲆ;
        var e = bx.ⲆΔⵠⵠⵠ;
        var f = bx.ⵠΔⲆⲆ;
        var i = bx.ⲆΔᐃⵠ;
        var j = bx.ΔⲆⵠⲆ;
        if (bx.control.attack) {
          bx.control.attack = 0;
          ⵠⵠⵠⲆ.ⵠᐃΔⵠⵠΔⵠⵠᐃ();
        }
        if (k.ⵠⵠΔⵠⲆ != -Zq) {
          var m = k.ΔⲆᐃᐃΔ[k.ⵠⵠΔⵠⲆ].button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            k.ΔⲆᐃᐃΔ[k.ⵠⵠΔⵠⲆ].action();
          }
        }
        if (bx.ⵠⲆⵠᐃ.id < 0 && c.id >= 0 && !k.ⲆᐃⲆᐃ.open) {
          if (!bx.Ⲇⵠⵠⵠ.lock || bx.Ⲇⵠⵠⵠ.ΔΔΔⵠ === bx.id) {
            if (m = k.ΔᐃΔ[bx.Ⲇⵠⵠⵠ.id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
              ⵠⵠⵠⲆ.ΔΔΔⲆᐃⲆΔⲆᐃ(c);
            }
          }
        }
        if ((f = bx.ⵠΔⲆⲆ).open && f.ΔΔⵠⵠΔ > 0 && !k.ⲆᐃⲆᐃ.open) {
          if (m = k.ΔᐃⲆⵠⵠΔⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            ⵠⵠⵠⲆ.ⲆⲆΔᐃⵠⲆΔᐃΔ(f);
          }
        }
        if ((i = bx.ⲆΔᐃⵠ).open && vq < i.ⵠᐃΔᐃⵠᐃⲆ && !k.ⲆᐃⲆᐃ.open) {
          switch (i.type) {
            case xw.ᐃⲆⲆⵠⲆ:
              if (m = k.ⲆⵠⵠⵠⵠᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
                ⵠⵠⵠⲆ.ⲆᐃⲆΔⵠⵠⵠ(i);
              }
              break;
            case xw.ⵠⵠⲆᐃΔ:
              if (m = k.ⵠⲆᐃᐃᐃⲆΔ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
                ⵠⵠⵠⲆ.ⲆᐃⲆΔⵠⵠⵠ(i);
              }
              break;
            case xw.ΔⲆⵠᐃⵠ:
              if (m = k.ⲆⵠΔⵠⵠΔᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
                ⵠⵠⵠⲆ.ⲆᐃⲆΔⵠⵠⵠ(i);
              }
              break;
            case xw.ⲆᐃⵠⵠⲆ:
              if (m = k.ⲆⲆⵠΔΔᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
                ⵠⵠⵠⲆ.ⲆᐃⲆΔⵠⵠⵠ(i);
              }
              break;
            case xw.ᐃΔΔᐃⵠ:
              if (m = k.ᐃⲆⵠⲆᐃΔⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
                ⵠⵠⵠⲆ.ⲆᐃⲆΔⵠⵠⵠ(i);
              }
          }
        }
        if ((j = bx.ΔⲆⵠⲆ).open && Tg < j.ⲆᐃⵠᐃᐃᐃΔ && !k.ⲆᐃⲆᐃ.open) {
          if (m = k.ⲆΔᐃⲆⵠᐃⵠ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            ⵠⵠⵠⲆ.ⵠᐃᐃᐃⵠⲆⵠⵠⵠ(j);
          }
        }
        if (bx.sign.open && !k.ⲆᐃⲆᐃ.open) {
          if (m = k.sign.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            k.sign.select();
          }
        }
        if (!bx.Ⲇⵠⵠⵠ.lock && !k.ⲆᐃⲆᐃ.open) {
          if (bx.Ⲇⵠⵠⵠ.ⵠⲆⲆⵠΔᐃⵠ && (m = k.ΔΔᐃᐃΔⲆΔ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw))) {
            ⵠⵠⵠⲆ.ΔΔⲆᐃᐃᐃⲆᐃᐃ(c);
          }
        }
        if (bx.Ⲇⵠⵠⵠ.ΔΔⲆⵠⲆᐃⲆ && !k.ⲆᐃⲆᐃ.open && (m = k.ΔᐃⲆΔⵠⲆᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw))) {
          ⵠⵠⵠⲆ.ΔⵠⵠᐃΔⵠⲆᐃᐃ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (bx.ᐃⵠᐃⲆᐃ.open) {
          if (m = k.ᐃⵠᐃⲆᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            ⵠⵠⵠⲆ.ᐃⵠᐃⲆᐃ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (bx.ⵠⲆⵠᐃ.id < 0 && !bx.ᐃⲆΔΔᐃ.enabled && !k.ⲆᐃⲆᐃ.open) {
          for (var l = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ, o = 0; o < l.length; o++) {
            if (m = l[o].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
              if (Ag != b.which || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == yh) && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0) {
                  k.ⲆᐃⲆᐃ.ᐃⵠᐃΔᐃᐃᐃ(l[o].id);
                }
              } else {
                ⵠⵠⵠⲆ.ⲆᐃᐃⲆΔ(l[o].id, o);
              }
            } else if (c.open && (c.id < vq || c.id === l[o].id)) {
              if ((m = k.ΔⲆⲆⵠⵠ[l[o].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0) {
                ⵠⵠⵠⲆ.ⲆⵠⵠⲆᐃⲆᐃⲆⲆ(c, l[o].id, b.shiftKey ? Fl : Ht);
              }
            } else if (e.open && l[o].id === bs.ΔΔⵠᐃⲆ) {
              if ((m = k.ΔⲆⲆⵠⵠ[l[o].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < qn) {
                ⵠⵠⵠⲆ.ⵠⵠⵠᐃΔΔⵠᐃⲆ(e);
              }
            } else if (d.open && l[o].id === bs.ΔΔΔᐃ) {
              if ((m = k.ΔⲆⲆⵠⵠ[l[o].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) && Gr > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ) {
                ⵠⵠⵠⲆ.ΔᐃⵠᐃⵠᐃᐃⵠΔ(d, b.shiftKey ? ih : 1);
              }
            } else if (f.open && bs.ᐃⵠⵠΔᐃ === l[o].id) {
              if ((m = k.ΔⲆⲆⵠⵠ[l[o].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) && Fj > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ) {
                ⵠⵠⵠⲆ.ΔΔΔⲆⵠⲆⵠⲆⵠ(f, b.shiftKey ? 10 : Fh);
              }
            } else if (i.open && bs.ΔΔΔᐃ === l[o].id) {
              if ((m = k.ΔⲆⲆⵠⵠ[l[o].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0) {
                ⵠⵠⵠⲆ.ΔᐃⵠΔⲆⵠᐃΔΔ(i, b.shiftKey ? 10 : jq);
              }
            } else if (j.open && (l[o].id === bs.ΔΔΔᐃ || bs.ⵠΔⵠΔⵠ === l[o].id)) {
              if ((m = k.ΔⲆⲆⵠⵠ[l[o].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0) {
                if (bs.ΔΔΔᐃ === l[o].id) {
                  ⵠⵠⵠⲆ.ⵠΔⲆΔⲆᐃⵠ(j, b.shiftKey ? 10 : 1, qn);
                } else {
                  ⵠⵠⵠⲆ.ⵠΔⲆΔⲆᐃⵠ(j, Nl, b.shiftKey ? ct : 1);
                }
              }
            }
          }
        }
        if (gr > bx.ⵠⲆⵠᐃ.id && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < gr && !bx.ᐃⲆΔΔᐃ.enabled && !k.ⲆᐃⲆᐃ.open && !bx.ᐃⵠⲆⵠⲆ) {
          l = bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ;
          o = vq;
          for (; l.length > o; o++) {
            if (m = l[o].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
              ΔⵠΔⲆᐃ = ⵠⵠⵠⲆ.ΔⲆⲆⵠⵠᐃⵠᐃᐃ(l[o].id);
              if (ΔⵠΔⲆᐃ && ga) {
                ga("send", "event", "Game", "craft", es[Ng[l[o].id].ΔᐃⲆⲆ].name);
              }
            }
          }
        }
        if (bx.ⵠⲆⵠᐃ.id < 0 && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && bx.ⵠⵠᐃⲆᐃ.open && !k.ⲆᐃⵠⵠΔ.open && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open) {
          if (m = k.ⵠⵠᐃⲆᐃ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw)) {
            dx.ⵠⵠᐃⲆᐃ.select();
          }
        }
        if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ⲆᐃⵠⵠΔ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open) {
          if (ex.ΔⲆᐃⵠΔ) {
            if (m = k.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
              ex.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = k.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            ex.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < Cq && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open) {
          if (m = k.options.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            k.options.ⲆⲆΔΔⲆᐃᐃΔⲆ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (qn > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open && k.ⲆΔΔⵠᐃᐃⲆ === 1) {
          if (m = k.ⲆᐃⵠⵠΔ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            k.ⲆᐃⵠⵠΔ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆᐃⲆᐃ.open && !k.ⲆᐃⵠⵠΔ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && Ej === k.ᐃᐃⲆⲆⵠⲆΔ) {
          if (m = k.ⲆΔᐃⲆ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            k.ⲆΔᐃⲆ.ⵠⲆᐃᐃⲆⵠⲆΔΔ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (ms > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⵠΔ.open && uw.ΔΔⵠⲆΔ !== ff.mode && ff.mode !== uw.ΔᐃⵠΔᐃ && uw.ⵠⲆΔⵠⵠΔᐃ !== ff.mode && k.ΔⲆⵠⲆⵠᐃⵠ === aa) {
          if (m = k.ⲆᐃⵠⲆ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
            k.ⲆᐃⵠⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (bx.ⵠⲆⵠᐃ.Δᐃᐃⵠᐃ && b.which == X) {
          k.ᐃⵠⵠΔⵠ.ᐃⵠᐃΔᐃᐃᐃ();
        }
      }
    };
    this.ⵠⵠⵠⵠⵠⲆⲆ = false;
    this.ΔᐃᐃⲆⵠⵠⲆ = function (b) {
      kf.ⲆⲆⲆⲆ = iw(k.ΔⲆ, b);
      var d = Ps;
      dx.ᐃⵠΔⵠΔ.display = Tg;
      bx.ⵠⵠΔΔ.ΔᐃᐃⲆⵠᐃᐃ.ⲆΔⵠᐃΔ(kf.ⲆⲆⲆⲆ);
      if (-As != k.ⵠⵠΔⵠⲆ) {
        d |= k.ΔⲆᐃᐃΔ[k.ⵠⵠΔⵠⲆ].button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      var e = bx.ⵠΔⲆⲆ;
      if (e.open && ur < e.ΔΔⵠⵠΔ) {
        d |= k.ΔᐃⲆⵠⵠΔⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      var f = bx.ⲆΔᐃⵠ;
      if (f.open && f.ⵠᐃΔᐃⵠᐃⲆ > 0) {
        d |= k.ⲆⵠⵠⵠⵠᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        d |= k.ⵠⲆᐃᐃᐃⲆΔ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        d |= k.ⲆⵠΔⵠⵠΔᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        d |= k.ⲆⲆⵠΔΔᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        d |= k.ᐃⲆⵠⲆᐃΔⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      var i = bx.ΔⲆⵠⲆ;
      if (i.open && i.ⲆᐃⵠᐃᐃᐃΔ > 0) {
        d |= k.ⲆΔᐃⲆⵠᐃⵠ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (bx.sign.open) {
        d |= k.sign.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      var a = bx.Ⲇⵠⵠⵠ;
      if (gr > bx.ⵠⲆⵠᐃ.id && a.id >= 0 && !bx.ᐃⲆΔΔᐃ.enabled) {
        if (!bx.Ⲇⵠⵠⵠ.lock || bx.Ⲇⵠⵠⵠ.ΔΔΔⵠ === bx.id) {
          d |= k.ΔᐃΔ[a.id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        }
      }
      if (bx.ᐃⵠᐃⲆᐃ.open) {
        d |= k.ᐃⵠᐃⲆᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (!bx.Ⲇⵠⵠⵠ.lock && !bx.ᐃⲆΔΔᐃ.enabled) {
        if (bx.Ⲇⵠⵠⵠ.ⵠⲆⲆⵠΔᐃⵠ) {
          d |= k.ΔΔᐃᐃΔⲆΔ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        }
      }
      if (bx.Ⲇⵠⵠⵠ.ΔΔⲆⵠⲆᐃⲆ && !bx.ᐃⲆΔΔᐃ.enabled) {
        d |= k.ΔᐃⲆΔⵠⲆᐃ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (bx.ⵠⲆⵠᐃ.id < 0 && !bx.ᐃⲆΔΔᐃ.enabled) {
        for (var j = bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ, m = Gr; j.length > m; m++) {
          var o = j[m].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
          d |= dx.ᐃⵠΔⵠΔ.ⲆᐃᐃⲆ(o, j[m], uh);
          if (a.open && (a.id < 0 || j[m].id == a.id) || bx.ΔⵠΔᐃⲆ.open && bs.ΔΔΔᐃ == j[m].id || bx.ⲆΔⵠⵠⵠ.open && bs.ΔΔⵠᐃⲆ === j[m].id || bx.ΔⲆⵠⲆ.open && (j[m].id == bs.ΔΔΔᐃ || bs.ⵠΔⵠΔⵠ == j[m].id) || bx.ⵠΔⲆⲆ.open && j[m].id == bs.ᐃⵠⵠΔᐃ || bx.ⲆΔᐃⵠ.open && j[m].id == bs.ΔΔΔᐃ) {
            d |= k.ΔⲆⲆⵠⵠ[j[m].id].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
          }
        }
      }
      if (qk > bx.ⵠⲆⵠᐃ.id && Rl > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && !bx.ᐃⲆΔΔᐃ.enabled && !bx.ᐃⵠⲆⵠⲆ) {
        j = bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ;
        m = ms;
        for (; m < j.length; m++) {
          o = false;
          o = j[m].ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
          d |= dx.ᐃⵠΔⵠΔ.ⲆᐃᐃⲆ(o, j[m], 1);
        }
      }
      if (bx.ⵠⲆⵠᐃ.id < vq && bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !!bx.ⵠⵠᐃⲆᐃ.open && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open) {
        d |= k.ⵠⵠᐃⲆᐃ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (qn > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open && Al === k.ᐃᐃⲆⲆⵠⲆΔ) {
        d |= k.ⲆΔᐃⲆ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.ⲆᐃⵠⵠΔ.open) {
        d |= k.options.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (Nl > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open && k.ⲆΔΔⵠᐃᐃⲆ === 1) {
        d |= k.ⲆᐃⵠⵠΔ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ < 0 && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⲆ.open && !k.options.open && !k.ⲆᐃⵠⵠΔ.open) {
        if (ex.ΔⲆᐃⵠΔ) {
          d |= k.ᐃΔΔΔ.ⲆᐃᐃᐃΔᐃⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        } else {
          d |= k.ᐃΔΔΔ.ᐃᐃΔⵠⲆⲆⲆ.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        }
      }
      if (ur > bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ && !k.ⲆΔᐃⲆ.open && !k.ⲆᐃⲆᐃ.open && !k.options.open && !k.ᐃⵠⵠΔⵠ.open && !k.ⲆᐃⵠⵠΔ.open && uw.ΔΔⵠⲆΔ !== ff.mode && ff.mode !== uw.ΔᐃⵠΔᐃ && uw.ΔⲆⲆΔⵠⵠᐃⲆᐃ !== ff.mode && Ue === k.ΔⲆⵠⲆⵠᐃⵠ) {
        d |= k.ⲆᐃⵠⲆ.button.ⲆᐃᐃⲆ(k.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
      }
      if (k.ⵠⵠⵠⵠⵠⲆⲆ !== d) {
        k.ⵠⵠⵠⵠⵠⲆⲆ = d;
        c.style.cursor = d ? k.ⵠⲆΔⲆⵠⵠᐃ : k.ΔᐃᐃⵠᐃᐃΔ;
      }
    };
    this.ᐃⵠⵠΔⲆΔⲆ = function () {
      kj.addEventListener("mousedown", this.ⵠᐃⲆⲆⵠΔΔ, xg);
      kj.addEventListener("mouseup", this.ⵠΔⲆᐃⲆⵠΔ, false);
      kj.addEventListener("mousemove", this.ΔᐃᐃⲆⵠⵠⲆ, Fq);
      kj.addEventListener("keyup", this.ⲆᐃⵠΔΔᐃⲆ, cg);
      kj.addEventListener("keydown", this.ᐃⲆΔᐃⵠⲆⲆ, d);
    };
    this.ⲆΔⵠⵠⲆΔⲆ = function () {
      kj.removeEventListener("mousedown", this.ⵠᐃⲆⲆⵠΔΔ, Rn);
      kj.removeEventListener("mouseup", this.ⵠΔⲆᐃⲆⵠΔ, yj);
      kj.removeEventListener("mousemove", this.ΔᐃᐃⲆⵠⵠⲆ, cg);
      kj.removeEventListener("keyup", this.ⲆᐃⵠΔΔᐃⲆ, false);
      kj.removeEventListener("keydown", this.ᐃⲆΔᐃⵠⲆⲆ, false);
    };
  }
  function Vw(b, c, d, e) {
    const f = b ^ 51095;
    const g = (16 << (c >> 8 & Tj)) + (24 << (c >> 24 & 255)) + (0 << (c & bq)) + (8 << (c >> 16 & 255));
    const i = (48879 + d) % 65513;
    const a = (e | 14695) & ~(e & 14695);
    const j = Tw(f, g, i, a, f, g);
    const h = tf(i, a, f, g, i, a);
    return (0 << ((j ^ h) & Kt)) + (8 << ((j ^ h) >> 16 & 255)) + (16 << ((j ^ h) >> 8 & 255)) + (24 << ((j ^ h) >> 24 & 255));
  }
  function Ww(c, k) {
    this.ΔⲆ = c;
    this.Ⲇ = k;
    if (kj.navigator.userAgent.indexOf("Edge") > -1) {
      this.ΔᐃᐃⵠᐃᐃΔ = "default";
      this.ⵠⲆΔⲆⵠⵠᐃ = "pointer";
    } else {
      this.ΔᐃᐃⵠᐃᐃΔ = "url('img/cursor0.png'), default";
      this.ⵠⲆΔⲆⵠⵠᐃ = "url('img/cursor1.png'), pointer";
    }
    var q = this;
    function e(c, d, e, f, i) {
      var j = this;
      for (var k = d + Eh, m = ne, a = f, n = d; k > n; n++) {
        q.buttons[n].info.callback = o;
        q.buttons[n].info.ⵠⲆᐃΔⵠⵠⲆⲆᐃ = c;
      }
      function p() {
        var b = c[a];
        pf.ⲆᐃΔΔΔΔᐃ = hw(b.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, ps, Qa, qh);
        if (b.level !== qr) {
          pf.ᐃᐃᐃⲆⵠΔΔ = hw("Level " + b.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, xk, 8);
        } else {
          pf.ᐃᐃᐃⲆⵠΔΔ = hw("by " + b.ⲆⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, Eq);
        }
      }
      function o() {
        if (this.ⵠᐃⲆΔΔᐃⲆ !== a && -ag !== this.ⵠᐃⲆΔΔᐃⲆ) {
          if (this.ΔⵠⵠΔⲆⵠΔ > 0) {
            if (d === ΔⵠⲆᐃⵠⲆⲆ) {
              Y(w, pa, "none");
            } else {
              Y(y, pa, "none");
            }
          } else if (ΔⵠⲆᐃⵠⲆⲆ === d) {
            Y(w, qa, "inline-block");
          } else {
            Y(y, qa, "inline-block");
          }
          a = this.ⵠᐃⲆΔΔᐃⲆ;
          e(this.ⵠᐃⲆΔΔᐃⲆ);
          p();
        }
      }
      this.ΔᐃΔΔᐃ = function () {
        for (var b = d, e = m * nn; k > b && c.length > e; b++, e++) {
          if (c[e].Ⲇᐃⵠ !== ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ || i[e] !== Gr) {
            q.buttons[b].info.ⵠᐃⲆΔΔᐃⲆ = e;
            for (var f = Ih; f < 3; f++) {
              q.buttons[b].info.Ⲇⵠ[f] = ᐃⲆⲆᐃⲆ[c[e].Ⲇᐃⵠ][f];
              q.buttons[b].info.active = qa;
              q.buttons[b].info.ΔⵠⵠΔⲆⵠΔ = i[e];
            }
          } else {
            q.buttons[b].info.ⵠᐃⲆΔΔᐃⲆ = -1;
            q.buttons[b].info.active = pa;
          }
        }
        for (; k > b; b++) {
          q.buttons[b].info.ⵠᐃⲆΔΔᐃⲆ = -ie;
          q.buttons[b].info.active = pa;
        }
        p();
      };
      q.buttons[k].info.callback = function () {
        if (m > 0) {
          m--;
        }
        j.ΔᐃΔΔᐃ();
      };
      q.buttons[k + Zq].info.callback = function () {
        if (m * 3 + Cs < c.length) {
          m++;
        }
        j.ΔᐃΔΔᐃ();
      };
    }
    function f() {
      var b = Number(ⲆⵠΔΔ.get("starve_crate"));
      var c = Number(ⲆⵠΔΔ.get("starve_dead"));
      var d = Number(ⲆⵠΔΔ.get("starve_book"));
      var e = Number(ⲆⵠΔΔ.get("starve_bag"));
      var f = Number(ⲆⵠΔΔ.get("starve_skin"));
      var g = Number(ⲆⵠΔΔ.get("starve_accessory"));
      q.ᐃᐃΔᐃ = f || ms;
      q.ΔΔᐃᐃⵠ = d || ne;
      q.ΔᐃⵠⲆⲆ = b || 1;
      q.ᐃΔᐃⵠⵠ = g || 0;
      q.ᐃⵠΔᐃⲆ = e || 0;
      q.ΔΔᐃⵠⲆ = c || 0;
    }
    function g() {
      for (var a = ⲆⲆᐃΔ.ΔⲆⲆⵠΔ, b = 0; b < a.length; b++) {
        if (a[b].Ⲇᐃⵠ === ⵠⲆΔ.ⲆᐃⲆⲆΔ) {
          q.unlock.ᐃᐃΔᐃ[b] = Ue;
        } else {
          q.unlock.ᐃᐃΔᐃ[b] = Tg;
        }
      }
      a = ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].Ⲇᐃⵠ === ⵠⲆΔ.ⲆᐃⲆⲆΔ) {
          q.unlock.ᐃΔᐃⵠⵠ[b] = 1;
        } else {
          q.unlock.ᐃΔᐃⵠⵠ[b] = gr;
        }
      }
      a = ⲆⲆᐃΔ.ᐃⵠⲆΔ;
      b = 0;
      for (; b < a.length; b++) {
        if (ⵠⲆΔ.ⲆᐃⲆⲆΔ === a[b].Ⲇᐃⵠ) {
          q.unlock.ᐃⵠΔᐃⲆ[b] = Oj;
        } else {
          q.unlock.ᐃⵠΔᐃⲆ[b] = 0;
        }
      }
      a = ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ;
      b = 0;
      for (; a.length > b; b++) {
        if (ⵠⲆΔ.ⲆᐃⲆⲆΔ === a[b].Ⲇᐃⵠ) {
          q.unlock.ΔΔᐃᐃⵠ[b] = Ag;
        } else {
          q.unlock.ΔΔᐃᐃⵠ[b] = qn;
        }
      }
      a = ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].Ⲇᐃⵠ === ⵠⲆΔ.ⲆᐃⲆⲆΔ) {
          q.unlock.ΔᐃⵠⲆⲆ[b] = Ej;
          q.unlock.ΔΔᐃⵠⲆ[b] = Ok;
        } else {
          q.unlock.ΔᐃⵠⲆⲆ[b] = rl;
          q.unlock.ΔΔᐃⵠⲆ[b] = Qs;
        }
      }
    }
    this.waiting = false;
    this.ⲆⵠᐃⵠᐃⲆⵠ = 0;
    this.ⲆᐃⵠⵠΔᐃⲆ = -1;
    this.ⲆⲆΔΔⲆⲆⵠ = {
      translate: {
        x: tj,
        y: 0
      },
      angle: 0,
      Ⲇⵠ: ΔΔ[Ur.ⵠⲆⵠⲆᐃᐃΔ],
      ⵠΔᐃⵠ: function () {
        this.angle += xf * 2;
        k.save();
        k.translate(this.translate.x + this.Ⲇⵠ.width / sh, this.translate.y + this.Ⲇⵠ.height / qd);
        k.rotate(this.angle);
        Em(k, this.Ⲇⵠ, -this.Ⲇⵠ.width / re, -this.Ⲇⵠ.height / 2);
        k.restore();
      }
    };
    this.ΔⲆⵠⲆⵠΔΔ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: Fj,
        x: Nl
      },
      ᐃⲆΔ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃᐃⵠⲆᐃ = Rl;
    this.ⵠΔΔΔΔᐃⲆ = -1;
    this.ᐃᐃᐃΔᐃᐃᐃ = Gh;
    this.ⵠⲆᐃᐃⵠΔⲆ = "";
    this.ⲆⲆΔᐃⲆᐃΔ = "";
    this.ᐃᐃⵠⲆⲆⵠᐃ = undefined;
    this.ᐃΔΔⵠⵠ = 0;
    this.ᐃⲆᐃᐃΔᐃⵠ = -_b;
    this.ᐃⲆⲆΔᐃΔⲆ = undefined;
    this.ᐃΔᐃⲆⵠⵠΔ = 0;
    this.ⵠⲆΔᐃΔⵠⵠ = 0;
    this.ⵠⲆΔⲆⲆⲆΔ = Ih;
    this.ⵠΔⲆᐃΔ = rl;
    this.ⵠΔΔⲆᐃⲆΔ = ms;
    this.time = 0;
    this.ⵠⲆΔⵠΔ = 0;
    this.ⵠᐃⲆΔⵠᐃⵠ = 0;
    this.ᐃⵠᐃᐃⵠⵠⲆ = 0;
    this.ᐃⲆⲆᐃⲆᐃⲆ = rl;
    this.ΔᐃⲆΔᐃⵠΔ = qk;
    this.ΔᐃⵠⵠⲆⵠᐃ = [];
    this.ᐃᐃⵠᐃᐃ = -ie;
    this.ⲆΔᐃⲆⵠΔⵠ = -1;
    this.ⲆᐃⲆᐃΔⵠⵠ = -1;
    this.ⲆΔⲆΔᐃⵠⲆ = undefined;
    this.ᐃⵠᐃⲆᐃΔᐃ = Gh;
    this.ΔⲆᐃΔⲆⵠΔ = -$l;
    this.ΔΔⲆⵠᐃⵠⵠ = -1;
    this.ⵠⵠᐃⲆᐃᐃⵠ = -Ht;
    this.ⵠⲆΔᐃⲆᐃΔ = -Oj;
    this.ⵠΔᐃΔⲆᐃⲆ = undefined;
    this.ⲆᐃⵠᐃΔⲆⲆ = undefined;
    this.ⲆⵠⵠΔᐃᐃΔ = on;
    this.ⲆᐃΔΔΔΔᐃ = ht;
    this.ᐃᐃᐃⲆⵠΔΔ = Hj;
    this.ᐃΔΔⲆⲆⲆᐃ = on;
    this.ΔⵠᐃᐃΔᐃⵠ = undefined;
    this.ΔᐃⵠΔΔᐃΔ = undefined;
    this.ΔΔᐃⵠⲆΔᐃ = undefined;
    this.ⵠⵠᐃⲆΔⲆⵠ = xs;
    this.ⵠᐃᐃᐃ = 0;
    this.ⵠⲆΔⵠΔᐃΔⲆΔ = false;
    this.ⲆⵠⲆⲆⵠ = ⲆⵠΔΔ.get("starve_quality") ? ⲆⵠΔΔ.get("starve_quality") : "high";
    if (this.ⲆⵠⲆⲆⵠ === "high") {
      document.getElementById("high_ing").style.backgroundColor = p[nk];
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆⵠⲆⲆⵠ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = p[qh];
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⲆⵠⲆⲆⵠ = Cq;
    }
    this.ⵠᐃᐃΔᐃΔⵠΔⵠ = function () {
      document.getElementById("high_ing").style.backgroundColor = p[ph];
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⲆⵠΔΔ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = aa;
      dx.ᐃᐃΔΔᐃΔⲆ();
      pf.ⲆⵠⲆⲆⵠ = Gs;
    };
    this.ⲆⵠⵠᐃⵠⵠΔᐃΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⲆⵠΔΔ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (za / ya);
      dx.ᐃᐃΔΔᐃΔⲆ();
      pf.ⲆⵠⲆⲆⵠ = 0;
    };
    if (Gg === ⲆⵠΔΔ.get("starve_mapping") && Fa === "FR") {
      Af.ΔⲆⵠᐃΔᐃΔ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⲆⵠΔΔ.get("starve_mapping") ? ⲆⵠΔΔ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Af.ΔⲆⵠᐃΔᐃΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = p[R];
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ΔⲆⵠᐃΔᐃΔ = function () {
      Af.ΔⲆⵠᐃΔᐃΔ();
      document.getElementById("azerty_ing").style.backgroundColor = p[ys];
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⲆⵠΔΔ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ᐃᐃⲆⲆᐃⲆⵠ = function () {
      Af.ᐃᐃⲆⲆᐃⲆⵠ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⲆⵠΔΔ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ΔⲆⵠⲆⵠΔⲆ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    f();
    this.unlock = {};
    this.unlock.ᐃᐃΔᐃ = [];
    this.unlock.ᐃⵠΔᐃⲆ = [];
    this.unlock.ΔΔᐃᐃⵠ = [];
    this.unlock.ΔᐃⵠⲆⲆ = [];
    this.unlock.ΔΔᐃⵠⲆ = [];
    this.unlock.ᐃΔᐃⵠⵠ = [];
    this.ΔⲆᐃⲆᐃⵠΔ = Gr;
    this.ⵠΔⲆⵠΔⲆᐃ = g;
    g();
    this.ᐃᐃΔⵠⲆ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: Qs,
        y: 0
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var i;
    var n = Cn;
    function o() {
      q.ᐃⲆΔ();
      if (++n == 30) {
        q.ᐃⵠⵠΔⲆΔⲆ();
        q.ⲆⵠᐃⵠᐃⲆⵠ = true;
        q.ᐃⲆΔ();
        return;
      }
      kj.setTimeout(o, 33);
    }
    this.ⲆⲆΔᐃⲆ = function (a) {
      i = a;
      q.ⲆΔⵠⵠⲆΔⲆ();
      q.ⲆⵠᐃⵠᐃⲆⵠ = Nl;
      h = -ag;
      r();
    };
    var h = -1;
    function r() {
      q.ᐃⲆΔ();
      if (++h == 30) {
        ⲆⵠΔΔ.set("starve_nickname", q.ⵠᐃΔⵠⲆ.input.value, {
          expires: 30
        });
        q.ⵠᐃΔⵠⲆ.style.display = "none";
        q.ⲆⲆᐃᐃⵠ.style.display = "none";
        q.ΔⲆⵠⲆⵠΔΔ.style.display = "none";
        q.ΔⲆⵠⲆⵠΔⲆ.style.display = "none";
        q.ᐃᐃΔⵠⲆ.style.display = "none";
        q.stop();
        i();
        return;
      }
      kj.setTimeout(r, 33);
    }
    this.ⲆⵠΔⲆⵠ = false;
    this.stop = function () {
      this.ⲆⵠΔⲆⵠ = _i;
    };
    this.ΔⲆᐃⵠΔ = function () {
      hx();
      document.getElementById("game_body").style.backgroundColor = Ur.ⵠᐃⵠⲆΔ[ax.time];
      q.ⵠᐃΔⵠⲆ.style.display = "inline-block";
      q.ⲆⲆᐃᐃⵠ.style.display = "inline-block";
      q.ΔⲆⵠⲆⵠΔΔ.style.display = "inline-block";
      q.ΔⲆⵠⲆⵠΔⲆ.style.display = "inline-block";
      q.ᐃᐃΔⵠⲆ.style.display = "inline-block";
      q.waiting = vl;
      q.ⲆⵠΔⲆⵠ = Xi;
      h = -1;
      n = 0;
      o();
    };
    this.ΔⵠⵠⲆᐃΔⲆ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ma) === ma) {
        if (ha === (a.position & ha)) {
          a.translate.x = oq + a.translate.ΔΔⵠᐃΔ - b;
        } else if ((a.position & ja) === ja) {
          a.translate.x = oq + a.translate.ΔΔⵠᐃΔ + b;
        } else {
          a.translate.x = oq + a.translate.ΔΔⵠᐃΔ;
        }
      } else if (ha === (a.position & ha)) {
        a.translate.x = a.translate.ΔΔⵠᐃΔ - b;
      } else if (ja === (a.position & ja)) {
        a.translate.x = ro - a.translate.ΔΔⵠᐃΔ + b;
      } else {
        a.translate.x = a.translate.ΔΔⵠᐃΔ;
      }
      if ((a.position & oa) === oa) {
        if (ka === (a.position & ka)) {
          a.translate.y = pq + a.translate.Δⵠᐃᐃⵠ - b;
        } else if ((a.position & la) === la) {
          a.translate.y = pq + a.translate.Δⵠᐃᐃⵠ + b;
        } else {
          a.translate.y = pq + a.translate.Δⵠᐃᐃⵠ;
        }
      } else if ((a.position & ka) === ka) {
        a.translate.y = a.translate.Δⵠᐃᐃⵠ - b;
      } else if ((a.position & la) === la) {
        a.translate.y = so + a.translate.Δⵠᐃᐃⵠ + b;
      } else {
        a.translate.y = a.translate.Δⵠᐃᐃⵠ;
      }
      if (a.style !== undefined) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ᐃⲆΔ = function () {
      var a = 0;
      if (n != 30 || h != -1) {
        if (n != 30) {
          a = 1500 / (n + 1) - 50;
        }
        if (h != -1) {
          a = -(1750 / (30 - h + 1) - 48);
        }
      }
      for (var b = Ih; b < this.ⵠⵠⲆΔ.length; b++) {
        this.ΔⵠⵠⲆᐃΔⲆ(this.ⵠⵠⲆΔ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ΔⵠⵠⲆᐃΔⲆ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ⲆⵠⵠΔⲆ.length; b++) {
        this.ΔⵠⵠⲆᐃΔⲆ(this.ⲆⵠⵠΔⲆ[b], a);
      }
      this.ⲆⲆΔΔⲆⲆⵠ.translate.x = (ro - this.ⲆⲆΔΔⲆⲆⵠ.Ⲇⵠ.width) / sh;
      this.ⲆⲆΔΔⲆⲆⵠ.translate.y = uh;
      this.ΔⲆⵠⲆⵠΔΔ.translate.x = ro - 450;
      this.ΔⲆⵠⲆⵠΔΔ.translate.y = so - 40;
      this.ΔⲆⵠⲆⵠΔⲆ.translate.x = ro - 340;
      this.ΔⲆⵠⲆⵠΔⲆ.translate.y = so - 25;
      this.ᐃᐃΔⵠⲆ.translate.x = ro - 320;
      this.ᐃᐃΔⵠⲆ.translate.y = 80;
      if (n != 30 || h != -1) {
        var c = 0;
        if (n != 30) {
          c = 1500 / (n + 1) - 50;
        }
        if (h != -1) {
          c = -(1750 / (30 - h + 1) - 48);
        }
        this.ⲆⲆΔΔⲆⲆⵠ.translate.y -= c > _a ? c : -c;
        this.ΔⲆⵠⲆⵠΔΔ.translate.y -= c < 0 ? c : -c;
        this.ΔⲆⵠⲆⵠΔⲆ.translate.y -= c < tj ? c : -c;
      }
      this.ΔⲆⵠⲆⵠΔΔ.ᐃⲆΔ();
      this.ΔⲆⵠⲆⵠΔⲆ.ᐃⲆΔ();
      this.ᐃᐃΔⵠⲆ.ᐃⲆΔ();
    };
    this.ⵠᐃⲆΔⲆᐃᐃ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][Cn];
        var h = b[f][1] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ᐃⲆⵠᐃᐃⵠⵠᐃⵠ = function () {
      this.ⵠⲆᐃᐃⵠΔⲆ = document.getElementById("account_nickname_input").value;
      if (this.ⵠⲆᐃᐃⵠΔⲆ !== this.ⲆⲆΔᐃⲆᐃΔ) {
        this.ⲆⲆΔᐃⲆᐃΔ = this.ⵠⲆᐃᐃⵠΔⲆ;
        this.ᐃᐃⵠⲆⲆⵠᐃ = hw(this.ⵠⲆᐃᐃⵠΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⵠΔᐃⵠ = function () {
      mm();
      pf.ᐃΔᐃⲆⵠⵠΔ = ᐃⵠΔⵠ.ⲆⵠⵠᐃⵠᐃⲆ(pf.ᐃΔᐃⲆⵠⵠΔ, pf.ⵠⲆΔᐃΔⵠⵠ, 0.03);
      this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ].translate.x = this.ⵠⵠⲆΔ[qk].translate.x + -72 + pf.ᐃΔᐃⲆⵠⵠΔ * 165;
      this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ].translate.ΔΔⵠᐃΔ = this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ].translate.x;
      this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ].translate.y = this.ⵠⵠⲆΔ[0].translate.y + 30;
      this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ].translate.Δⵠᐃᐃⵠ = this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ].translate.y;
      for (var d = 2; this.ⵠⵠⲆΔ.length > d; d++) {
        if (this.ⵠⵠⲆΔ[d].active === qa) {
          this.ⵠⵠⲆΔ[d].ⵠΔᐃⵠ(k);
        }
      }
      var i = this.ᐃᐃⵠᐃᐃ - Date.now();
      if (rl < i) {
        var p = Math.floor(i / 60000);
        var t = Math.floor(p / 60);
        if ((p %= 60) !== this.ⲆᐃⲆᐃΔⵠⵠ) {
          this.ⲆᐃⲆᐃΔⵠⵠ = p;
          p = p < 10 ? "0" + p : "" + p;
          q.ⲆΔⲆΔᐃⵠⲆ = hw(p, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (t !== this.ⲆΔᐃⲆⵠΔⵠ) {
          this.ⲆΔᐃⲆⵠΔⵠ = t;
          t = t < 10 ? "0" + t : "" + t;
          q.ᐃⵠᐃⲆᐃΔᐃ = hw(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (R = this.ⵠⵠⲆΔ[ⵠⲆⵠⵠⵠⲆⵠ]).ⵠΔᐃⵠ(k);
        var y = this.ᐃⵠᐃⲆᐃΔᐃ;
        Em(k, y, R.translate.x - y.width / rg + 182, R.translate.y - y.height / 4 + 40, y.width / hc, y.height / 2);
        y = this.ⲆΔⲆΔᐃⵠⲆ;
        Em(k, y, R.translate.x - y.width / Aq + 251, R.translate.y - y.height / Yi + 40, y.width / 2, y.height / 2);
      }
      if ((i = this.ΔⲆᐃΔⲆⵠΔ - Date.now()) > 0) {
        p = Math.floor(i / 60000);
        t = Math.floor(p / 60);
        var R;
        var V = Math.floor(t / 24);
        t %= 24;
        if ((p %= 60) !== this.ⵠⲆΔᐃⲆᐃΔ) {
          this.ⵠⲆΔᐃⲆᐃΔ = p;
          p = p < 10 ? "0" + p : "" + p;
          q.ⵠΔᐃΔⲆᐃⲆ = hw(p, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠⵠᐃⲆᐃᐃⵠ !== t) {
          this.ⵠⵠᐃⲆᐃᐃⵠ = t;
          t = t < ct ? "0" + t : "" + t;
          q.ⲆᐃⵠᐃΔⲆⲆ = hw(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (V !== this.ΔΔⲆⵠᐃⵠⵠ) {
          this.ΔΔⲆⵠᐃⵠⵠ = V;
          V = V < 10 ? "0" + V : "" + V;
          q.ⲆⵠⵠΔᐃᐃΔ = hw(V, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (R = this.ⵠⵠⲆΔ[ᐃⲆᐃⵠⵠⲆⵠ]).ⵠΔᐃⵠ(k);
        y = this.ⲆⵠⵠΔᐃᐃΔ;
        Em(k, y, R.translate.x - y.width / 4 + 113, R.translate.y - y.height / 4 + 40, y.width / 2, y.height / ql);
        y = this.ⲆᐃⵠᐃΔⲆⲆ;
        Em(k, y, R.translate.x - y.width / Aq + 182, R.translate.y - y.height / 4 + 40, y.width / 2, y.height / Zt);
        y = this.ⵠΔᐃΔⲆᐃⲆ;
        Em(k, y, R.translate.x - y.width / ea + 251, R.translate.y - y.height / _g + 40, y.width / 2, y.height / 2);
      }
      if (A === (this.ⵠΔΔⲆⲆ & A)) {
        this.buttons[ΔⲆⵠⵠⵠⲆⲆ].info.state = gw;
      } else if (z === (this.ⵠΔΔⲆⲆ & z)) {
        this.buttons[ΔᐃⲆᐃⵠⵠΔ].info.state = gw;
      } else if ((this.ⵠΔΔⲆⲆ & m) === m) {
        this.buttons[ᐃΔΔΔᐃⵠⲆ].info.state = gw;
      } else if (v === (this.ⵠΔΔⲆⲆ & v)) {
        this.buttons[ⵠⲆΔⵠᐃⵠΔ].info.state = gw;
      } else if ((this.ⵠΔΔⲆⲆ & C) === C) {
        this.buttons[ΔⲆⲆΔᐃΔΔ].info.state = gw;
      } else if ((this.ⵠΔΔⲆⲆ & K) === K) {
        this.buttons[ΔⵠⲆΔᐃⲆⵠ].info.state = gw;
      } else if ((this.ⵠΔΔⲆⲆ & Q) === Q || x === (this.ⵠΔΔⲆⲆ & x) || J === (this.ⵠΔΔⲆⲆ & J) || (this.ⵠΔΔⲆⲆ & M) === M || (this.ⵠΔΔⲆⲆ & B) === B || D === (this.ⵠΔΔⲆⲆ & D) || I === (this.ⵠΔΔⲆⲆ & I)) {
        this.buttons[ᐃᐃⲆᐃΔΔᐃ].info.state = gw;
      } else if (E === (this.ⵠΔΔⲆⲆ & E) || S === (this.ⵠΔΔⲆⲆ & S) || P === (this.ⵠΔΔⲆⲆ & P) || F === (this.ⵠΔΔⲆⲆ & F) || X === (this.ⵠΔΔⲆⲆ & X) || (this.ⵠΔΔⲆⲆ & G) === G) {
        this.buttons[ᐃΔΔΔᐃⵠⲆ].info.state = gw;
      } else if ((this.ⵠΔΔⲆⲆ & O) === O || (this.ⵠΔΔⲆⲆ & N) === N || H === (this.ⵠΔΔⲆⲆ & H)) {
        this.buttons[ⲆΔᐃΔⲆᐃⲆ].info.state = gw;
      } else if ((this.ⵠΔΔⲆⲆ & U) === U) {
        this.buttons[ⵠⲆΔⵠᐃⵠΔ].info.state = gw;
      }
      if (z === (this.ⵠΔΔⲆⲆ & z)) {
        if (this.ΔⵠᐃᐃΔᐃⵠ === this.ΔⲆⵠⵠⵠⵠΔ) {
          this.ᐃΔΔⲆⲆⲆᐃ = this.ΔⵠᐃΔΔᐃΔ;
          this.buttons[this.ΔⵠᐃΔΔᐃΔ].info.active = pa;
          this.buttons[this.ᐃᐃⵠⵠⲆᐃⵠ].info.active = pa;
          this.buttons[this.ᐃⵠⵠΔᐃᐃᐃ].info.active = pa;
        } else {
          this.buttons[this.ΔⵠᐃΔΔᐃΔ].info.active = qa;
          this.buttons[this.ᐃᐃⵠⵠⲆᐃⵠ].info.active = qa;
          this.buttons[this.ᐃⵠⵠΔᐃᐃᐃ].info.active = qa;
        }
        if (this.ΔⵠᐃᐃΔᐃⵠ === this.ΔᐃⵠⲆⵠⵠᐃ) {
          this.buttons[this.ΔᐃⵠⲆⵠⵠᐃ].info.state = gw;
        } else if (this.ᐃᐃⵠⲆⵠᐃΔ === this.ΔⵠᐃᐃΔᐃⵠ) {
          this.buttons[this.ᐃᐃⵠⲆⵠᐃΔ].info.state = gw;
        } else if (this.ΔⲆⵠⵠⵠⵠΔ === this.ΔⵠᐃᐃΔᐃⵠ) {
          this.buttons[this.ΔⲆⵠⵠⵠⵠΔ].info.state = gw;
        } else if (this.ΔⵠᐃᐃΔᐃⵠ === this.ΔΔⵠⲆⲆΔΔ) {
          this.buttons[this.ΔΔⵠⲆⲆΔΔ].info.state = gw;
        } else if (this.ᐃΔⲆΔᐃΔⲆ === this.ΔⵠᐃᐃΔᐃⵠ) {
          this.buttons[this.ᐃΔⲆΔᐃΔⲆ].info.state = gw;
        }
        if (this.ΔⵠᐃΔΔᐃΔ === this.ᐃΔΔⲆⲆⲆᐃ) {
          this.buttons[this.ΔⵠᐃΔΔᐃΔ].info.state = gw;
        } else if (this.ᐃᐃⵠⵠⲆᐃⵠ === this.ᐃΔΔⲆⲆⲆᐃ) {
          this.buttons[this.ᐃᐃⵠⵠⲆᐃⵠ].info.state = gw;
        } else if (this.ᐃΔΔⲆⲆⲆᐃ === this.ᐃⵠⵠΔᐃᐃᐃ) {
          this.buttons[this.ᐃⵠⵠΔᐃᐃᐃ].info.state = gw;
        }
        if (this.ⵠⲆⵠᐃⲆΔⵠ === this.ΔᐃⵠΔΔᐃΔ) {
          this.buttons[this.ⵠⲆⵠᐃⲆΔⵠ].info.state = gw;
        } else if (this.ΔᐃⵠΔΔᐃΔ === this.ⲆⵠᐃⲆⵠⵠⵠ) {
          this.buttons[this.ⲆⵠᐃⲆⵠⵠⵠ].info.state = gw;
        } else if (this.ΔⵠⲆⵠⵠⵠΔ === this.ΔᐃⵠΔΔᐃΔ) {
          this.buttons[this.ΔⵠⲆⵠⵠⵠΔ].info.state = gw;
        }
        if (this.ΔᐃΔΔᐃᐃⵠ === this.ΔΔᐃⵠⲆΔᐃ) {
          this.buttons[this.ΔᐃΔΔᐃᐃⵠ].info.state = gw;
        } else if (this.ⵠᐃⵠⵠΔⲆⵠ === this.ΔΔᐃⵠⲆΔᐃ) {
          this.buttons[this.ⵠᐃⵠⵠΔⲆⵠ].info.state = gw;
        } else if (this.ΔΔᐃⵠⲆΔᐃ === this.ᐃⲆⲆⲆⵠᐃⲆ) {
          this.buttons[this.ᐃⲆⲆⲆⵠᐃⲆ].info.state = gw;
        } else if (this.ΔΔᐃⵠⲆΔᐃ === this.ⲆⵠΔⵠᐃΔⲆ) {
          this.buttons[this.ⲆⵠΔⵠᐃΔⲆ].info.state = gw;
        } else if (this.ΔΔᐃⵠⲆΔᐃ === this.ⵠⲆΔᐃΔᐃΔ) {
          this.buttons[this.ⵠⲆΔᐃΔᐃΔ].info.state = gw;
        } else if (this.ᐃⲆᐃⲆᐃΔᐃ === this.ΔΔᐃⵠⲆΔᐃ) {
          this.buttons[this.ᐃⲆᐃⲆᐃΔᐃ].info.state = gw;
        }
      }
      if ((this.ⵠΔΔⲆⲆ & v) === v) {
        if (-Oj === this.ⲆᐃⵠⵠΔᐃⲆ) {
          this.buttons[Ka].info.state = gw;
        } else if (this.ⲆᐃⵠⵠΔᐃⲆ === uw.ⵠΔⵠⵠⲆ) {
          this.buttons[La].info.state = gw;
        } else if (uw.ΔΔⵠⲆΔ === this.ⲆᐃⵠⵠΔᐃⲆ) {
          this.buttons[Na].info.state = gw;
        } else if (uw.ΔⵠⵠⲆᐃ === this.ⲆᐃⵠⵠΔᐃⲆ) {
          this.buttons[Oa].info.state = gw;
        } else if (this.ⲆᐃⵠⵠΔᐃⲆ === uw.ΔᐃⵠΔᐃ) {
          this.buttons[Ma].info.state = gw;
        }
        if (this.ⵠⵠᐃⲆΔⲆⵠ === 0) {
          this.buttons[Da].info.state = gw;
        } else if (this.ⵠⵠᐃⲆΔⲆⵠ === 1) {
          this.buttons[Ea].info.state = gw;
        } else if (this.ⵠⵠᐃⲆΔⲆⵠ === 2) {
          this.buttons[Ga].info.state = gw;
        } else if (this.ⵠⵠᐃⲆΔⲆⵠ === 3) {
          this.buttons[Ha].info.state = gw;
        } else if (rg === this.ⵠⵠᐃⲆΔⲆⵠ) {
          this.buttons[Ia].info.state = gw;
        } else if (this.ⵠⵠᐃⲆΔⲆⵠ === 5) {
          this.buttons[Ja].info.state = gw;
        }
      }
      if ((this.ⵠΔΔⲆⲆ & A) === A && ⵠⵠⵠⲆ.ⲆᐃⵠΔΔⵠⵠ === 0) {
        if (this.buttons[ua].ⲆᐃΔⲆⵠⵠΔ(kf.ⲆⲆⲆⲆ)) {
          this.buttons[ua].hint = Math.min(1, this.buttons[ua].hint + xf * 1.5);
        } else {
          this.buttons[ua].hint = Math.max(Nl, this.buttons[ua].hint - xf * 1.5);
        }
        if (this.buttons[va].ⲆᐃΔⲆⵠⵠΔ(kf.ⲆⲆⲆⲆ)) {
          this.buttons[va].hint = Math.min(1, this.buttons[va].hint + xf * 1.5);
        } else {
          this.buttons[va].hint = Math.max(Qs, this.buttons[va].hint - xf * 1.5);
        }
        if (this.buttons[wa].ⲆᐃΔⲆⵠⵠΔ(kf.ⲆⲆⲆⲆ)) {
          this.buttons[wa].hint = Math.min(1, this.buttons[wa].hint + xf * 1.5);
        } else {
          this.buttons[wa].hint = Math.max(0, this.buttons[wa].hint - xf * 1.5);
        }
        if (this.buttons[Ba].ⲆᐃΔⲆⵠⵠΔ(kf.ⲆⲆⲆⲆ)) {
          this.buttons[Ba].hint = Math.min(Ht, this.buttons[Ba].hint + xf * 1.5);
        } else {
          this.buttons[Ba].hint = Math.max(uh, this.buttons[Ba].hint - xf * 1.5);
        }
        if (this.buttons[xa].ⲆᐃΔⲆⵠⵠΔ(kf.ⲆⲆⲆⲆ)) {
          this.buttons[xa].hint = Math.min(Ej, this.buttons[xa].hint + xf * 1.5);
        } else {
          this.buttons[xa].hint = Math.max(Gr, this.buttons[xa].hint - xf * 1.5);
        }
        if (this.buttons[Aa].ⲆᐃΔⲆⵠⵠΔ(kf.ⲆⲆⲆⲆ)) {
          this.buttons[Aa].hint = Math.min(1, this.buttons[Aa].hint + xf * 1.5);
        } else {
          this.buttons[Aa].hint = Math.max(Ih, this.buttons[Aa].hint - xf * 1.5);
        }
      }
      var W = 1;
      if (Zq < (this.ⵠΔΔⲆⲆ & (x | J | M | B | D | I))) {
        y = ⵠᐃ.ⲆᐃᐃᐃΔⲆⲆ;
        k.save();
        k.translate(oq, ta + y.height / _l);
        if (this.ⵠⵠⵠⲆⲆ === 1) {
          this.ⲆᐃⵠⲆΔΔΔ += xf / 3;
          W = this.ᐃⲆᐃⵠᐃⲆⵠ - yg / Math.pow(1 + this.ⲆᐃⵠⲆΔΔΔ, 1 + this.ⲆᐃⵠⲆΔΔΔ);
          k.rotate(W);
        }
        Em(k, y, -y.width / Aq, -y.height / 4, y.width / 2, y.height / 2);
        k.restore();
      }
      if (ⵠⵠⵠⲆ.ⲆᐃⵠΔΔⵠⵠ === 0) {
        if (uw.ⵠΔⵠⵠⲆ === ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ) {
          this.buttons[ua].info.state = gw;
        } else if (uw.ΔᐃⵠΔᐃ === ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ) {
          this.buttons[va].info.state = gw;
        } else if (uw.ΔΔⵠⲆΔ === ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ) {
          this.buttons[xa].info.state = gw;
        } else if (ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ === uw.ΔⵠⵠⲆᐃ) {
          this.buttons[Aa].info.state = gw;
        } else if (ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ === uw.ⲆⲆᐃⲆⵠ) {
          this.buttons[wa].info.state = gw;
        } else if (uw.ΔΔⲆΔⵠ === ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ) {
          this.buttons[Ba].info.state = gw;
        }
      }
      for (d = Fh; d < this.buttons.length; d++) {
        if (qa === this.buttons[d].info.active) {
          this.buttons[d].ⵠΔᐃⵠ(k);
        }
      }
      this.ⵠⵠⲆΔ[_a].ⵠΔᐃⵠ(k);
      if ((this.ⵠΔΔⲆⲆ & (L | _)) > 0) {
        y = this.ᐃᐃⵠⲆⲆⵠᐃ;
        Em(k, y, oq - y.width / xt, 138, y.width / 2, y.height / Xh);
      }
      var Y = Math.max(1, Math.min(Bn, Math.floor((pf.ᐃΔΔⵠⵠ + 3) / zk)));
      this.ⵠⵠⲆΔ[Y].active = qa;
      this.ⵠⵠⲆΔ[Y].ⵠΔᐃⵠ(k);
      this.ⵠⵠⲆΔ[Y].active = pa;
      this.buttons[0].ⵠΔᐃⵠ(k);
      if (aa < (this.ⵠΔΔⲆⲆ & (m | S | F | E | X))) {
        var g = (this.ⵠΔΔⲆⲆ & (S | F | E | X)) > Ht ? -190 : Cq;
        y = ΔΔ[Ur.ᐃⵠⲆΔ][this.ᐃⵠΔᐃⲆ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / 4 + g, 183, y.width / Xh, y.height / 2);
        this.ⵠᐃᐃᐃ = (this.ⵠᐃᐃᐃ + xf * 1000) % 2000;
        var u = (this.ⵠᐃᐃᐃ < 1000) * 4.5 ? this.ⵠᐃᐃᐃ / 1000 : (2000 - this.ⵠᐃᐃᐃ) / 1000;
        y = ΔΔ[Ur.ⵠᐃⵠⲆᐃ][this.ΔΔᐃᐃⵠ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / 4 - 62 + u + g, 240, y.width / 2, y.height / 2);
        y = ΔΔ[Ur.ᐃⵠⲆΔᐃ][this.ᐃᐃΔᐃ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / ea - 54 + u + g, 272, y.width / 2, y.height / 2);
        Em(k, y, oq - y.width / Xb + 54 - u + g, 272, y.width / gc, y.height / vk);
        y = ΔΔ[Ur.ⲆᐃⲆⵠᐃΔᐃ][this.ᐃᐃΔᐃ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / _l + g, 222, y.width / Zn, y.height / ql);
        y = ΔΔ[Ur.ⲆⲆΔⲆⲆ][this.ᐃΔᐃⵠⵠ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / Db + g, 222, y.width / 2, y.height / 2);
      }
      if ((this.ⵠΔΔⲆⲆ & m) === m) {
        y = ΔΔ[Ur.ⲆⵠⵠⲆⵠ][this.ΔᐃⵠⲆⲆ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / _g - 61, 406 - y.height / 4, y.width / ld, y.height / gc);
        y = ΔΔ[Ur.ⲆⵠⵠⲆⵠ][this.ΔΔᐃⵠⲆ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / rg + 53, 406 - y.height / ch, y.width / 2, y.height / Zn);
      }
      if (P === (this.ⵠΔΔⲆⲆ & P)) {
        y = ΔΔ[Ur.ⲆⵠⵠⲆⵠ][this.ΔΔᐃⵠⲆ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / uj - 200, 268 - y.height / 4, y.width / 2, y.height / zk);
      }
      if ((this.ⵠΔΔⲆⲆ & G) === G) {
        y = ΔΔ[Ur.ⲆⵠⵠⲆⵠ][this.ΔᐃⵠⲆⲆ][this.ΔⲆᐃⲆᐃⵠΔ];
        Em(k, y, oq - y.width / Db - 200, 268 - y.height / 4, y.width / wr, y.height / 2);
      }
      if ((this.ⵠΔΔⲆⲆ & (S | F | E | X | P | G)) > 1) {
        for (d = 1; d < this.buttons.length; d++) {
          if (this.buttons[d].view & this.ⵠΔΔⲆⲆ) {
            var ba = this.buttons[d].info;
            if (ba.ⵠᐃⲆΔΔᐃⲆ >= 0) {
              y = ba.ⵠⲆᐃΔⵠⵠⲆⲆᐃ[ba.ⵠᐃⲆΔΔᐃⲆ].ⲆΔⵠ;
              Em(k, y, ba.translate.x - y.width / 8 + 44.5, ba.translate.y - y.height / le + 45.5, y.width / 4, y.height / ch);
              if (ba.ΔⵠⵠΔⲆⵠΔ !== 1) {
                y = ⵠᐃ.ΔΔᐃⲆᐃⲆᐃ;
                Em(k, y, ba.translate.x - y.width / 4 + 44.5, ba.translate.y - y.height / 4 + 44.5, y.width / Zn, y.height / Ss);
              }
            }
          }
        }
        y = this.ⲆᐃΔΔΔΔᐃ;
        Em(k, y, oq - 312, 375, y.width / 2, y.height / vk);
        y = this.ᐃᐃᐃⲆⵠΔΔ;
        Em(k, y, oq - 312, 395, y.width / sh, y.height / Ss);
      }
      if (this.ᐃᐃⵠⲆᐃ !== this.ⵠΔΔΔΔᐃⲆ) {
        this.ⵠΔΔΔΔᐃⲆ = this.ᐃᐃⵠⲆᐃ;
        this.ᐃᐃᐃΔᐃᐃᐃ = hw("" + this.ᐃᐃⵠⲆᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Em(k, this.ᐃᐃᐃΔᐃᐃᐃ, this.ⵠⵠⲆΔ[0].translate.x + 350, Ds, this.ᐃᐃᐃΔᐃᐃᐃ.w2, this.ᐃᐃᐃΔᐃᐃᐃ.ⲆᐃᐃΔΔ);
      if (this.ᐃⲆᐃᐃΔᐃⵠ !== this.ᐃΔΔⵠⵠ) {
        this.ᐃⲆᐃᐃΔᐃⵠ = this.ᐃΔΔⵠⵠ;
        this.ᐃⲆⲆΔᐃΔⲆ = hw("LVL " + (this.ᐃΔΔⵠⵠ + Ok), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, ng, pl, undefined, undefined, "#3F3019", Hq);
      }
      Em(k, this.ᐃⲆⲆΔᐃΔⲆ, this.ⵠⵠⲆΔ[qk].translate.x + 94, Fj, this.ᐃⲆⲆΔᐃΔⲆ.w2, this.ᐃⲆⲆΔᐃΔⲆ.ⲆᐃᐃΔΔ);
      if (ⵠⵠⵠⲆ.ⲆᐃⵠΔΔⵠⵠ === 0) {
        var ca = this.buttons[ua].hint;
        if (Rl < ca) {
          y = ⵠᐃ.ⵠᐃᐃΔⵠᐃΔ;
          Em(k, y, oq - y.width / 4, -36 - ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(1 - ca) * y.height / 2, y.width / 2, y.height / re);
        }
        if ((ca = this.buttons[va].hint) > 0) {
          y = ⵠᐃ.ⲆⲆᐃⲆⲆⵠΔ;
          Em(k, y, oq - y.width / 4, -36 - ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(Zq - ca) * y.height / re, y.width / 2, y.height / 2);
        }
        if ((ca = this.buttons[wa].hint) > vq) {
          y = ⵠᐃ.ⲆⵠΔⲆⲆⲆΔ;
          Em(k, y, oq - y.width / ug, -36 - ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(Ej - ca) * y.height / 2, y.width / Cl, y.height / 2);
        }
        ca = this.buttons[Ba].hint;
        if (ms < ca) {
          y = ⵠᐃ.ΔᐃⲆⲆⵠⲆΔ;
          Em(k, y, oq - y.width / 4, -36 - y.height * ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(1 - ca) / hc, y.width / vk, y.height / 2);
        }
        ca = this.buttons[Aa].hint;
        if (Nl < ca) {
          y = ⵠᐃ.Ⲇᐃᐃⵠᐃᐃⵠ;
          Em(k, y, oq - y.width / 4, -36 - ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(Ht - ca) * y.height / Cl, y.width / re, y.height / 2);
        }
        if ((ca = this.buttons[xa].hint) > 0) {
          y = ⵠᐃ.ᐃᐃᐃΔΔᐃΔ;
          Em(k, y, oq - y.width / 4, -36 - ᐃⵠΔⵠ.ⵠΔᐃⲆΔ(1 - ca) * y.height / Tt, y.width / 2, y.height / 2);
        }
      }
      if (this.ⵠⵠⵠⲆⲆ === 1 && Math.abs(W - this.ᐃⲆᐃⵠᐃⲆⵠ) < 0.006) {
        k.globalAlpha = Math.min(1, this.ᐃΔᐃΔΔᐃΔ * 3);
        y = ⵠᐃ.ᐃⲆⵠᐃΔΔΔ;
        k.save();
        k.translate(oq, 260);
        this.ᐃΔᐃΔΔᐃΔ += xf;
        k.rotate(this.ᐃΔᐃΔΔᐃΔ);
        Em(k, y, -y.width / 2, -y.height / sh, y.width, y.height);
        k.restore();
        u = 1.05 + Math.cos(this.ᐃΔᐃΔΔᐃΔ * 5) * 0.05;
        if (Cq === this.ⵠⲆⲆⵠⲆⲆΔ) {
          var da = (y = ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[this.ΔᐃⵠᐃΔᐃΔ].ⲆΔⵠ).width * u;
          var fa = y.height * u;
          Em(k, y, oq - da / 2, 260 - fa / gc, da, fa);
        } else if (this.ⵠⲆⲆⵠⲆⲆΔ === $l) {
          da = (y = ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[vq].ⲆΔⵠ).width * u;
          fa = y.height * u;
          Em(k, y, oq - da / 2, 260 - fa / 2, da, fa);
          da = u * (y = ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ[this.ΔᐃⵠᐃΔᐃΔ].ⲆΔⵠ).width;
          fa = u * y.height;
          Em(k, y, oq - da / Xr, 260 - fa / 2, da, fa);
        } else if (this.ⵠⲆⲆⵠⲆⲆΔ === 2) {
          da = u * (y = ⲆⲆᐃΔ.ᐃⵠⲆΔ[this.ΔᐃⵠᐃΔᐃΔ].ⲆΔⵠ).width;
          fa = y.height * u;
          Em(k, y, oq - da / gc, 180 - fa / 2, da, fa);
          da = u * (y = ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[Ih].ⲆΔⵠ).width;
          fa = u * y.height;
          Em(k, y, oq - da / 2, 260 - fa / 2, da, fa);
        } else if (this.ⵠⲆⲆⵠⲆⲆΔ === 3) {
          da = (y = ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ[this.ΔᐃⵠᐃΔᐃΔ].ⲆΔⵠ).width * u;
          fa = u * y.height;
          k.save();
          k.translate(oq, 260);
          k.rotate(Math.PI);
          Em(k, y, -da / Tt, -fa / Cl, da, fa);
          k.restore();
        } else if (this.ⵠⲆⲆⵠⲆⲆΔ === 4) {
          da = (y = ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ[this.ΔᐃⵠᐃΔᐃΔ].ⲆΔⵠ).width * u;
          fa = y.height * u;
          Em(k, y, oq - da / 2, 260 - fa / qd, da, fa);
        }
        y = this.ΔᐃΔⲆⲆⲆᐃ;
        Em(k, y, oq - y.width / xt, 340, y.width / 2, y.height / 2);
        y = this.ᐃᐃⵠΔⵠⵠΔ;
        Em(k, y, oq - y.width / Aq, 365, y.width / 2, y.height / sh);
        if (Kl < this.ᐃΔᐃΔΔᐃΔ) {
          this.ⵠⵠⵠⲆⲆ = Rl;
          Z(Q);
        }
        k.globalAlpha = j;
      }
      bx.alert.ⵠΔᐃⵠ("#FFF", "#000");
      if (q.waiting) {
        this.ⲆⲆΔΔⲆⲆⵠ.ⵠΔᐃⵠ();
      }
    };
    var t = 0;
    var A = Math.pow(2, t++);
    var v = Math.pow(2, t++);
    this.ⵠᐃⲆⵠⵠ = v;
    var K = Math.pow(Ss, t++);
    var m = Math.pow(2, t++);
    var Q = Math.pow(ld, t++);
    var C = Math.pow(Xr, t++);
    var z = Math.pow(2, t++);
    var u = Math.pow(2, t++);
    this.ΔᐃᐃΔᐃ = u;
    var w = Math.pow(2, t++);
    var y = Math.pow(2, t++);
    var x = Math.pow(hc, t++);
    var J = Math.pow(tg, t++);
    var M = Math.pow(Pt, t++);
    var B = Math.pow(2, t++);
    var D = Math.pow(2, t++);
    var I = Math.pow(sh, t++);
    var E = Math.pow(zk, t++);
    var P = Math.pow(Xr, t++);
    var S = Math.pow(sh, t++);
    var F = Math.pow(re, t++);
    var X = Math.pow(ql, t++);
    var G = Math.pow(Zt, t++);
    var _ = Math.pow(lt, t++);
    var L = Math.pow(2, t++);
    var O = Math.pow(2, t++);
    this.ⵠⲆΔᐃⵠ = O;
    var N = Math.pow(Tt, t++);
    this.ⵠΔⲆⵠⵠ = N;
    var H = Math.pow(2, t++);
    this.ᐃⵠᐃⲆⵠ = H;
    var U = Math.pow(2, t++);
    function Y(a, b, c) {
      for (var d = 0; d < q.ⵠⵠⲆΔ.length; d++) {
        if (q.ⵠⵠⲆΔ[d].view & a) {
          q.ⵠⵠⲆΔ[d].active = b;
        }
      }
      for (d = 0; q.buttons.length > d; d++) {
        if (ms !== (q.buttons[d].view & a)) {
          q.buttons[d].info.active = b;
        }
      }
      for (d = Cq; d < q.ⲆⵠⵠΔⲆ.length; d++) {
        if (q.ⲆⵠⵠΔⲆ[d].view & a) {
          q.ⲆⵠⵠΔⲆ[d].style.display = c;
        }
      }
    }
    this.ⵠΔΔⲆⲆ = A;
    function V() {
      var a = Number(ⲆⵠΔΔ.get("starve_crate"));
      var b = Number(ⲆⵠΔΔ.get("starve_dead"));
      var c = Number(ⲆⵠΔΔ.get("starve_book"));
      var d = Number(ⲆⵠΔΔ.get("starve_bag"));
      var e = Number(ⲆⵠΔΔ.get("starve_skin"));
      var f = Number(ⲆⵠΔΔ.get("starve_accessory"));
      if (pf.unlock.ᐃᐃΔᐃ[pf.ᐃᐃΔᐃ] <= ur) {
        pf.ᐃᐃΔᐃ = pf.unlock.ᐃᐃΔᐃ[e] > 0 ? e : qk;
      }
      if (pf.unlock.ΔΔᐃᐃⵠ[pf.ΔΔᐃᐃⵠ] <= 0) {
        pf.ΔΔᐃᐃⵠ = pf.unlock.ΔΔᐃᐃⵠ[c] > Cn ? c : ur;
      }
      if (pf.unlock.ΔΔᐃⵠⲆ[pf.ΔΔᐃⵠⲆ] <= 0) {
        pf.ΔΔᐃⵠⲆ = pf.unlock.ΔΔᐃⵠⲆ[b] > Rl ? b : Cq;
      }
      if (pf.unlock.ΔᐃⵠⲆⲆ[pf.ΔᐃⵠⲆⲆ] <= 0) {
        pf.ΔᐃⵠⲆⲆ = pf.unlock.ΔᐃⵠⲆⲆ[a] > 0 ? a : tj;
      }
      if (pf.unlock.ᐃΔᐃⵠⵠ[pf.ᐃΔᐃⵠⵠ] <= 0) {
        pf.ᐃΔᐃⵠⵠ = pf.unlock.ᐃΔᐃⵠⵠ[f] > 0 ? f : 0;
      }
      if (pf.unlock.ᐃⵠΔᐃⲆ[pf.ᐃⵠΔᐃⲆ] <= 0) {
        pf.ᐃⵠΔᐃⲆ = pf.unlock.ᐃⵠΔᐃⲆ[d] > Cq ? d : 0;
      }
    }
    function Z(a) {
      if (q.ⲆⵠᐃⵠᐃⲆⵠ !== false) {
        Y(w, pa, "none");
        Y(y, pa, "none");
        V();
        if (q.ⵠΔΔⲆⲆ !== a && aa > q.ⵠⵠⵠⲆⲆ) {
          q.ᐃᐃΔⵠⲆ.style.display = a === A || Q === a || v === a || a === z || m === a || C === a ? "inline-block" : "none";
          Y(q.ⵠΔΔⲆⲆ, pa, "none");
          q.ⵠΔΔⲆⲆ = a;
          Y(q.ⵠΔΔⲆⲆ, qa, "inline-block");
        }
      }
    }
    function ca(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (Eg == this.readyState && this.status == 200) {
          if (sb !== b) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && yq !== c) {
          c();
        }
      };
      d.send();
    }
    function fa() {
      if (bx.ᐃᐃᐃⲆΔΔⵠ !== ps && bx.ΔΔᐃᐃᐃΔⲆ !== $r && bx.ΔⲆᐃⲆΔⲆᐃ !== yq) {
        V();
        if (Ef % vk) {
          console.log(undefined);
          ⵠⵠⵠⲆ.connect();
        } else {
          console.log(undefined);
          if (Al === kj.Widget.isBlocked) {
            kj.Widget.createAdPlayer(ⵠⵠⵠⲆ.connect.bind(ⵠⵠⵠⲆ), ⵠⵠⵠⲆ.connect.bind(ⵠⵠⵠⲆ));
          } else {
            kj.Widget.preroll();
            kj.Widget.play = ⵠⵠⵠⲆ.connect.bind(ⵠⵠⵠⲆ);
          }
        }
      }
    }
    this.ⵠⲆⲆⵠⵠᐃΔ = 0;
    this.ᐃⵠⲆⲆ = Z;
    this.ΔⵠΔΔᐃⲆᐃ = function () {
      if (q.waiting === false) {
        bx.reconnect.enabled = false;
        q.waiting = Kh;
        if (bx.ᐃᐃᐃⲆΔΔⵠ) {
          fa();
        } else {
          ca(`${Ff}token`, function (a) {
            const b = a.split("_");
            const c = b[ur] + "_";
            const d = Number(b[Oj]);
            const e = Math.abs(function (a) {
              return hq(a, 8260, 46947, 8004, 37330, 5330);
            }(d));
            bx.ᐃᐃᐃⲆΔΔⵠ = c + e;
            fa();
          }, function () {
            q.waiting = yj;
          });
        }
        ca(`${Rf}get`, function (a) {
          const b = a.split("_");
          const c = b[ne] + "_";
          const d = Number(b[Ag]);
          const e = Math.abs(function (a) {
            return Yn(a, 11035, 30264, 36388);
          }(d));
          bx.ΔΔᐃᐃᐃΔⲆ = c + e;
          fa();
        }, function () {
          q.waiting = false;
        });
        ca(`${Rf}set`, function (a) {
          const b = a.split("_");
          const c = b[0] + "_";
          const d = Number(b[1]);
          const e = Math.abs(Xa(d));
          bx.ΔⲆᐃⲆΔⲆᐃ = c + e;
          fa();
        }, function () {
          q.waiting = false;
        });
      }
    };
    var ha = 1;
    var ja = 2;
    var ka = Db;
    var la = au;
    var ma = 16;
    var oa = 32;
    var pa = qn;
    var qa = Ag;
    if (kj.innerWidth < 1300) {
      this.ⵠᐃΔⵠⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: qa,
        position: ka | ha,
        view: A,
        translate: {
          x: 0,
          Δⵠᐃᐃⵠ: 184,
          ΔΔⵠᐃΔ: 200,
          y: Nl
        }
      };
    } else {
      this.ⵠᐃΔⵠⲆ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: qa,
        position: ka | ma,
        view: A,
        translate: {
          x: 0,
          ΔΔⵠᐃΔ: -180,
          Δⵠᐃᐃⵠ: 184,
          y: Fj
        }
      };
    }
    this.ⵠᐃΔⵠⲆ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == pn && !q.waiting && !q.ⵠⲆΔⵠΔᐃΔⲆΔ) {
        q.ΔⵠΔΔᐃⲆᐃ();
      }
    });
    this.ⵠᐃΔⵠⲆ.input.value = ⲆⵠΔΔ.get("starve_nickname") ? ⲆⵠΔΔ.get("starve_nickname") : "";
    this.ᐃΔΔⵠⵠⲆⵠΔΔ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: pa,
      position: ka | ma,
      view: v,
      translate: {
        x: 0,
        ΔΔⵠᐃΔ: -122,
        Δⵠᐃᐃⵠ: 110,
        y: Fj
      }
    };
    if (kj.innerWidth < 1300) {
      this.ⲆⲆᐃᐃⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: qa,
        position: ka | ha,
        view: A,
        translate: {
          x: Gr,
          Δⵠᐃᐃⵠ: 225,
          ΔΔⵠᐃΔ: 208,
          y: Qs
        }
      };
    } else {
      this.ⲆⲆᐃᐃⵠ = {
        id: document.getElementById(p[Go]),
        style: document.getElementById("servselect").style,
        active: qa,
        position: ka | ma,
        view: A,
        translate: {
          ΔΔⵠᐃΔ: -180,
          x: 0,
          Δⵠᐃᐃⵠ: 225,
          y: 0
        }
      };
    }
    this.ᐃΔΔⵠ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: pa,
      position: ka | ma,
      view: z,
      translate: {
        ΔΔⵠᐃΔ: -294.5,
        y: gr,
        Δⵠᐃᐃⵠ: 190,
        x: Ih
      }
    };
    this.ΔᐃΔΔⲆⵠⵠᐃⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: pa,
      position: ka | ma,
      view: v,
      translate: {
        Δⵠᐃᐃⵠ: 187,
        y: gr,
        x: 0,
        ΔΔⵠᐃΔ: 125
      }
    };
    this.ⲆⵠᐃΔᐃᐃᐃⲆⵠ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: pa,
      position: ka | ma,
      view: H,
      translate: {
        ΔΔⵠᐃΔ: -220,
        x: ne,
        y: ne,
        Δⵠᐃᐃⵠ: 350
      }
    };
    t = 0;
    this.ⲆⵠⵠΔⲆ = [];
    this.ⲆⵠⵠΔⲆ[t++] = this.ⵠᐃΔⵠⲆ;
    this.ⲆⵠⵠΔⲆ[t++] = this.ⲆⲆᐃᐃⵠ;
    this.ⲆⵠⵠΔⲆ[t++] = this.ᐃΔΔⵠ;
    this.ⲆⵠⵠΔⲆ[t++] = this.ᐃΔΔⵠⵠⲆⵠΔΔ;
    this.ⲆⵠⵠΔⲆ[t++] = this.ΔᐃΔΔⲆⵠⵠᐃⵠ;
    this.ⲆⵠⵠΔⲆ[t++] = this.ⲆⵠᐃΔᐃᐃᐃⲆⵠ;
    t = 0;
    this.ⵠⵠⲆΔ = [];
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃⵠⵠΔΔⵠΔ, qa, tj, vq, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⵠⵠᐃⲆᐃⵠⲆ, pa, 0, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⵠΔⵠⲆᐃⲆᐃ, pa, 0, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ΔΔᐃΔⲆΔⵠ, pa, Nl, qk, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⵠΔᐃⵠΔⵠⵠ, pa, 0, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⵠⲆⵠⲆΔᐃΔ, pa, tj, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃᐃⵠⲆΔⵠⵠ, pa, 0, Fj, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ΔΔⲆⵠᐃΔᐃ, pa, 0, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃΔΔⲆⲆΔⵠ, pa, qk, Rl, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⲆᐃⵠᐃᐃᐃⲆ, pa, ur, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃΔΔⲆᐃⲆΔ, pa, 0, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃⲆΔⲆⵠⵠⵠ, pa, Cn, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃΔΔΔΔΔΔ, pa, 0, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ΔⲆⵠΔΔΔⲆ, pa, 0, Tg, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⲆⲆΔⲆΔⲆⵠ, pa, Fj, Fj, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ΔᐃⵠᐃᐃᐃΔ, pa, Cq, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃⲆⵠⲆᐃⲆᐃ, pa, Gr, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃΔⲆⲆΔⲆΔ, pa, tj, 0, ha);
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ⵠΔΔΔΔΔᐃ, pa, Cn, 0, ha);
    if (kj.innerWidth < 1300) {
      this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆᐃⲆᐃᐃⲆᐃ, qa, 200, Wl, ka | ha);
    } else {
      this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆᐃⲆᐃᐃⲆᐃ, qa, -753 / 4, 100, ka | ma);
    }
    this.ⵠⵠⲆΔ[t++].view = A;
    this.ⵠⵠⲆΔ[t++] = jw(ⵠᐃ.ᐃⲆⵠⲆⵠⲆⲆ, qa, 403, -Va, ja);
    if (kj.innerWidth > 1300) {
      this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃΔΔⵠΔⵠᐃ, qa, -885 / 4, -319 / Pt, la | ma);
      this.ⵠⵠⲆΔ[t++].view = A;
    }
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃᐃᐃⵠⵠᐃᐃ, pa, -323.25, 100, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = v;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠⵠΔⵠᐃⲆⵠ, pa, -356.25, 100, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = m;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠⲆⵠⵠᐃⵠⲆ, pa, -905 / 4, 50, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = K;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃⲆᐃΔᐃⲆᐃ, pa, -1608 / _g, 130, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = Q;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ΔⲆΔⵠⵠΔⵠ, pa, -279.25, 130, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = O;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃΔᐃᐃΔᐃⲆ, pa, -1222 / Xb, 130, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = N;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃΔⵠⲆᐃⵠⵠ, pa, -305.5, rj, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = H;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃΔΔⵠⵠⲆΔ, pa, -ⵠᐃ.ᐃΔΔⵠⵠⲆΔ.width / _g - 350, -kg, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = U;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃⲆⵠΔΔⵠⵠ, pa, -374.25, 110, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = C;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ΔΔᐃⵠⵠΔⲆ, pa, -306.5, 100, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = z;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃᐃⲆⵠᐃⲆⲆ, pa, -1381 / xt, 80, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = u;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆⵠᐃᐃΔᐃⵠ, pa, -1542 / ug, 150, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = x;
    var ra = 360 / Wl;
    var sa = this.ⵠᐃⲆΔⲆᐃᐃ([["#25c5d6", ra * 3], ["#e2cf27", ra * Ye], ["#afac98", ra * 30], ["#d88e23", ra * 57]]);
    this.ⵠⵠⲆΔ[t] = jw(sa, pa, -sa.width / Eg, 178, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = x;
    this.ⲆΔⵠⵠᐃⲆᐃᐃⵠ = function (a, b, c) {
      var d;
      q.ⵠⵠⵠⲆⲆ = Fh;
      q.ⲆᐃⵠⲆΔΔΔ = qk;
      q.ᐃΔᐃΔΔᐃΔ = 0;
      q.ᐃⲆᐃⵠᐃⲆⵠ = a;
      q.ⵠⲆⲆⵠⲆⲆΔ = b;
      var e = 0;
      if (b === tj) {
        for (e = Cq; ⲆⲆᐃΔ.ΔⲆⲆⵠΔ.length > e && ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[e].id !== c; e++);
        d = ⲆⲆᐃΔ.ΔⲆⲆⵠΔ[e];
        q.unlock.ᐃᐃΔᐃ[e] = ie;
      } else if (b === Ok) {
        for (e = Cq; e < ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ.length && c !== ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ[e].id; e++);
        d = ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ[e];
        q.unlock.ᐃΔᐃⵠⵠ[e] = aa;
      } else if (b === 2) {
        for (e = 0; ⲆⲆᐃΔ.ᐃⵠⲆΔ.length > e && ⲆⲆᐃΔ.ᐃⵠⲆΔ[e].id !== c; e++);
        d = ⲆⲆᐃΔ.ᐃⵠⲆΔ[e];
        q.unlock.ᐃⵠΔᐃⲆ[e] = 1;
      } else if (b === Qt) {
        for (e = 0; e < ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ.length && ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ[e].id !== c; e++);
        d = ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ[e];
        q.unlock.ΔΔᐃᐃⵠ[e] = 1;
      } else if (uj === b) {
        for (e = Cn; e < ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ.length && ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ[e].id !== c; e++);
        d = ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ[e];
        q.unlock.ΔᐃⵠⲆⲆ[e] = 1;
        q.unlock.ΔΔᐃⵠⲆ[e] = 1;
      }
      q.ΔᐃⵠᐃΔᐃΔ = e;
      q.ᐃᐃⵠΔⵠⵠΔ = hw("by " + d.ⲆⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, Gk, 30, 24, pl, undefined, Gh, Gg, "#000000", 24);
      q.ΔᐃΔⲆⲆⲆᐃ = hw(d.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, oh, undefined, $r, "#000000", Ws);
    };
    this.ⵠⵠⵠⲆⲆ = qn;
    this.ⲆᐃⵠⲆΔΔΔ = Cq;
    this.ᐃⲆᐃⵠᐃⲆⵠ = 0;
    this.ⵠⲆⲆⵠⲆⲆΔ = 0;
    this.ᐃΔᐃΔΔᐃΔ = 0;
    this.ᐃᐃⵠΔⵠⵠΔ = ht;
    this.ΔᐃΔⲆⲆⲆᐃ = undefined;
    var ta = 262 - 260 / vs;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ΔⲆΔⲆⲆⵠΔ, pa, -1542 / hn, 150, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = D;
    sa = this.ⵠᐃⲆΔⲆᐃᐃ([["#d45ce5", ra * 3], ["#25c5d6", ra * 10], ["#e2cf27", ra * 30], ["#afac98", ra * 57]]);
    this.ⵠⵠⲆΔ[t] = jw(sa, pa, -sa.width / rg, 178, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = D;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃⵠⲆⵠⵠⲆⵠ, pa, -1542 / Xb, 150, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = M;
    sa = this.ⵠᐃⲆΔⲆᐃᐃ([["#d33a2a", Qk * ra], ["#d45ce5", ra * ws], ["#25c5d6", ra * 30], ["#e2cf27", ra * 57]]);
    this.ⵠⵠⲆΔ[t] = jw(sa, pa, -sa.width / gl, 178, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = M;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ᐃⲆⲆⲆⵠᐃᐃ, pa, -385.5, 150, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = B;
    sa = this.ⵠᐃⲆΔⲆᐃᐃ([["#25c5d6", ra * 3], ["#e2cf27", ra * 10], ["#afac98", ra * 30], ["#d88e23", ra * 57]]);
    this.ⵠⵠⲆΔ[t] = jw(sa, pa, -sa.width / Rb, 178, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = B;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆⵠⵠᐃⲆⲆΔ, pa, -1542 / uj, 150, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = J;
    sa = this.ⵠᐃⲆΔⲆᐃᐃ([["#d45ce5", ra * 3], ["#25c5d6", ra * ct], ["#e2cf27", ra * 30], ["#afac98", ra * 57]]);
    this.ⵠⵠⲆΔ[t] = jw(sa, pa, -sa.width / 4, 178, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = J;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆᐃⵠΔᐃΔⲆ, pa, -385.5, 150, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = I;
    sa = this.ⵠᐃⲆΔⲆᐃᐃ([["#d33a2a", ra * $b], ["#d45ce5", ws * ra], ["#25c5d6", ra * 30], ["#e2cf27", ra * 57]]);
    this.ⵠⵠⲆΔ[t] = jw(sa, pa, -sa.width / Db, 178, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = I;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠⲆⵠⲆⲆⲆⲆ, pa, -341.5, rj, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = E;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆⲆⵠᐃᐃΔᐃ, pa, -341.5, W, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = X;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠⵠⲆΔᐃΔᐃ, pa, -341.5, Kq, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = S;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ΔⲆⲆΔᐃⲆⵠ, pa, -341.5, ba, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = F;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆⵠᐃⲆᐃⵠᐃ, pa, -1366 / Ch, No, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = P;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠΔⵠᐃⲆᐃΔ, pa, -1366 / Db, Nh, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = G;
    ⵠⲆⵠⵠⵠⲆⵠ = t++;
    this.ⵠⵠⲆΔ[ⵠⲆⵠⵠⵠⲆⵠ] = jw(ⵠᐃ.ⵠⲆⵠⵠⵠⲆⵠ, pa, 484, 0, ka);
    ᐃⲆᐃⵠⵠⲆⵠ = t++;
    this.ⵠⵠⲆΔ[ᐃⲆᐃⵠⵠⲆⵠ] = jw(ⵠᐃ.ᐃⲆᐃⵠⵠⲆⵠ, pa, 454 + 597 / ql + 60, Gr, ka);
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠⵠⵠⵠⲆⵠΔ, pa, -189.5, -Ya, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = y;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⵠᐃⵠⲆΔⲆⲆ, pa, -758 / gl, -sj, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = w;
    ᐃᐃΔᐃΔΔⲆ = t++;
    this.ⵠⵠⲆΔ[ᐃᐃΔᐃΔΔⲆ] = jw(ⵠᐃ.ⲆⵠⵠⵠΔⵠΔ, qa, 93, 30, ka);
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆⵠΔΔⲆⲆΔ, pa, -692 / rg, 110, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = _;
    this.ⵠⵠⲆΔ[t] = jw(ⵠᐃ.ⲆᐃᐃⲆⵠΔΔ, pa, -173, 110, ka | ma);
    this.ⵠⵠⲆΔ[t++].view = L;
    t = 0;
    this.buttons = [];
    this.buttons[t] = kw(50, 57, 0, [ⵠᐃ.ΔⵠᐃᐃⲆᐃⵠ, ⵠᐃ.ΔᐃⵠⲆⲆΔᐃ, ⵠᐃ.ᐃⵠᐃΔΔᐃⵠ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        Z(u);
      } else {
        Z(K);
      }
    }, 320, qn, ha, qa);
    t++;
    if (kj.innerWidth < 1300) {
      this.buttons[t] = kw(202, 97, 0, [ⵠᐃ.ᐃΔΔᐃΔⵠⵠ, ⵠᐃ.ΔⲆᐃⲆⵠⵠᐃ, ⵠᐃ.ⲆᐃⲆΔᐃᐃⲆ], 1, 0, this.ΔⵠΔΔᐃⲆᐃ, 462, 235, ka | ha, qa);
    } else {
      this.buttons[t] = kw(202, 97, 0, [ⵠᐃ.ᐃΔΔᐃΔⵠⵠ, ⵠᐃ.ΔⲆᐃⲆⵠⵠᐃ, ⵠᐃ.ⲆᐃⲆΔᐃᐃⲆ], 1, 0, this.ΔⵠΔΔᐃⲆᐃ, 74, 235, ka | ma, qa);
    }
    this.buttons[t].view = A;
    t++;
    if (kj.innerWidth > 1300) {
      this.buttons[t] = kw(355, 168, 0, [ⵠᐃ.ⲆⲆⵠᐃⵠⲆⵠ, ⵠᐃ.ⲆⲆⵠᐃⵠⲆⵠ, ⵠᐃ.ⲆⲆⵠᐃⵠⲆⵠ], 1, 0, function () {
        kj.open("./changelog.html", "_blank");
      }, -195, -115, la | ma, qa);
      this.buttons[t++].view = A;
      this.buttons[t] = kw(355, 168, 0, [ⵠᐃ.ᐃᐃΔᐃΔⵠⲆ, ⵠᐃ.ᐃᐃΔᐃΔⵠⲆ, ⵠᐃ.ᐃᐃΔᐃΔⵠⲆ], 1, 0, function () {
        kj.open("https://taming.io", "_blank");
      }, 20, -115, la | ma, qa);
      this.buttons[t++].view = A;
    }
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ᐃΔᐃⲆⵠⲆⵠ, ⵠᐃ.ΔⲆⲆⵠᐃⵠⲆ, ⵠᐃ.ⵠⵠⲆᐃⵠⵠΔ], 1, 0, function () {
      kj.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, ia, ja, qa);
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ᐃⲆⲆᐃΔΔᐃ, ⵠᐃ.ⵠᐃᐃⲆᐃⲆᐃ, ⵠᐃ.ᐃⲆᐃᐃᐃⵠⲆ], 1, 0, function () {
      kj.open("https://discord.gg/starveio", "_blank");
    }, 330, ih, ja, qa);
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ᐃⲆᐃⲆΔⲆΔ, ⵠᐃ.ⵠⲆⲆⵠⵠΔⲆ, ⵠᐃ.ΔΔⲆΔⵠᐃⲆ], 1, 0, function () {
      kj.open("https://reddit.com/r/starveio", "_blank");
    }, 280, pj, ja, qa);
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ⵠⵠΔΔⵠΔⲆ, ⵠᐃ.ΔⲆⲆᐃⲆᐃⵠ, ⵠᐃ.ⵠⲆⵠΔᐃΔⵠ], 1, 0, function () {
      kj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, ws, ja, qa);
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ⵠⲆⲆᐃⵠᐃΔ, ⵠᐃ.ⲆΔᐃⵠⵠᐃⲆ, ⵠᐃ.ⵠⵠⵠⵠΔΔⲆ], 1, 0, function () {
      kj.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, ja, qa);
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ᐃⵠᐃᐃⲆᐃΔ, ⵠᐃ.ⵠⲆⵠⵠⵠΔΔ, ⵠᐃ.ⵠⲆⲆᐃΔΔⲆ], 1, 0, function () {
      kj.open("https://twitter.com/lapamauve", "_blank");
    }, 105, Yt, ja, qa);
    this.buttons[t++] = kw(80, 80, 0, [ⵠᐃ.ΔΔΔᐃⲆⲆᐃ, ⵠᐃ.ⵠⲆⲆᐃⵠⵠᐃ, ⵠᐃ.ΔⲆⲆⲆΔᐃᐃ], 1, 0, function () {
      kj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, ct, ja, qa);
    ΔᐃⲆᐃⵠⵠΔ = t++;
    this.buttons[ΔᐃⲆᐃⵠⵠΔ] = kw(232, 142, 0, [ⵠᐃ.ⲆᐃⵠΔⲆΔΔ, ⵠᐃ.ⵠⵠⲆⲆⲆⵠⵠ, ⵠᐃ.ⲆⵠⲆⵠᐃᐃΔ], 1, 0, function () {
      Z(z);
      ox(pf.ΔⵠᐃΔΔᐃΔ, pf.ΔⲆⵠⵠⵠⵠΔ, pf.ⲆⵠᐃⲆⵠⵠⵠ, pf.ᐃⲆᐃⲆᐃΔᐃ);
    }, -5, 573, ha, qa);
    this.buttons[t++] = kw(236, 165, 0, [ⵠᐃ.ᐃΔⲆⵠⵠΔΔ, ⵠᐃ.ᐃΔⲆⵠⵠΔΔ, ⵠᐃ.ᐃΔⲆⵠⵠΔΔ], 1, 1, function () {
      Z(z);
    }, -5, 566, ha, qa);
    ΔⲆⲆΔᐃΔΔ = t++;
    this.buttons[ΔⲆⲆΔᐃΔΔ] = kw(236, 165, 0, [ⵠᐃ.ΔⲆⵠⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆΔⵠⲆⵠᐃ, ⵠᐃ.ᐃᐃΔⲆᐃⲆᐃ], 1, 0, function () {
      Z(C);
    }, -Jn, 494, ha, qa);
    this.buttons[t++] = kw(236, 165, 0, [ⵠᐃ.ΔⲆΔΔⲆⵠΔ, ⵠᐃ.ΔⲆΔΔⲆⵠΔ, ⵠᐃ.ΔⲆΔΔⲆⵠΔ], 1, 1, function () {
      Z(C);
    }, -5, 494, ha, qa);
    ⲆΔᐃΔⲆᐃⲆ = t++;
    this.buttons[ⲆΔᐃΔⲆᐃⲆ] = kw(236, 165, 0, [ⵠᐃ.ΔⲆⵠⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆΔⵠⲆⵠᐃ, ⵠᐃ.ᐃᐃΔⲆᐃⲆᐃ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        if (pf.ΔⲆᐃΔⲆⵠΔ - Date.now() > Nl) {
          Z(H);
        }
      } else {
        Z(K);
      }
    }, -xj, 415, ha, qa);
    this.buttons[t++] = kw(236, 165, 0, [ⵠᐃ.ΔⲆΔⵠⵠᐃᐃ, ⵠᐃ.ΔⲆΔⵠⵠᐃᐃ, ⵠᐃ.ΔⲆΔⵠⵠᐃᐃ], 1, 1, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        if (pf.ΔⲆᐃΔⲆⵠΔ - Date.now() > qn) {
          Z(H);
        }
      } else {
        Z(K);
      }
    }, -5, 415, ha, qa);
    ᐃᐃⲆᐃΔΔᐃ = t++;
    this.buttons[ᐃᐃⲆᐃΔΔᐃ] = kw(236, 165, 0, [ⵠᐃ.ΔⲆⵠⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆΔⵠⲆⵠᐃ, ⵠᐃ.ᐃᐃΔⲆᐃⲆᐃ], 1, 0, function () {
      Z(Q);
    }, -5, 336, ha, qa);
    this.buttons[t++] = kw(236, 165, 0, [ⵠᐃ.ᐃΔⵠᐃΔΔᐃ, ⵠᐃ.ᐃΔⵠᐃΔΔᐃ, ⵠᐃ.ᐃΔⵠᐃΔΔᐃ], 1, 1, function () {
      Z(Q);
    }, -5, 336, ha, qa);
    ᐃΔΔΔᐃⵠⲆ = t++;
    this.buttons[ᐃΔΔΔᐃⵠⲆ] = kw(236, 165, 0, [ⵠᐃ.ΔⲆⵠⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆΔⵠⲆⵠᐃ, ⵠᐃ.ᐃᐃΔⲆᐃⲆᐃ], 1, 0, function () {
      Z(m);
    }, -5, 257, ha, qa);
    this.buttons[t++] = kw(236, 165, 0, [ⵠᐃ.ⲆⲆⵠⵠΔⲆⵠ, ⵠᐃ.ⲆⲆⵠⵠΔⲆⵠ, ⵠᐃ.ⲆⲆⵠⵠΔⲆⵠ], 1, 1, function () {
      Z(m);
    }, -Vh, 257, ha, qa);
    ΔⲆⵠⵠⵠⲆⲆ = t++;
    this.buttons[ΔⲆⵠⵠⵠⲆⲆ] = kw(236, 165, 0, [ⵠᐃ.ΔⲆⵠⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆΔⵠⲆⵠᐃ, ⵠᐃ.ᐃᐃΔⲆᐃⲆᐃ], 1, 0, function () {
      Z(A);
    }, -5, 178, ha, qa);
    this.buttons[t++] = kw(236, 165, 0, [ⵠᐃ.ᐃⲆⵠⵠᐃⲆⲆ, ⵠᐃ.ᐃⲆⵠⵠᐃⲆⲆ, ⵠᐃ.ᐃⲆⵠⵠᐃⲆⲆ], 1, 1, function () {
      Z(A);
    }, -xj, 178, ha, qa);
    ΔⵠⲆΔᐃⲆⵠ = t++;
    this.ΔⵠⲆΔᐃⲆⵠ = ΔⵠⲆΔᐃⲆⵠ;
    this.buttons[ΔⵠⲆΔᐃⲆⵠ] = kw(324, 222, 0, [ⵠᐃ.ᐃⲆⲆΔΔᐃⲆ, ⵠᐃ.ⵠⵠᐃⵠᐃΔΔ, ⵠᐃ.ⵠΔᐃⲆⵠᐃⲆ], 1, 0, function () {
      Z(K);
    }, ne, 70, ha, qa);
    ⵠⲆΔⵠᐃⵠΔ = t++;
    ᐃⵠΔⲆΔᐃⲆ = t++;
    this.ⵠⲆΔⵠᐃⵠΔ = ⵠⲆΔⵠᐃⵠΔ;
    this.ᐃⵠΔⲆΔᐃⲆ = ᐃⵠΔⲆΔᐃⲆ;
    this.buttons[ⵠⲆΔⵠᐃⵠΔ] = kw(324, 222, 0, [ⵠᐃ.ⵠⵠⲆⵠⲆΔᐃ, ⵠᐃ.ᐃⵠᐃΔᐃⲆᐃ, ⵠᐃ.ⵠᐃΔⲆᐃᐃᐃ], 1, 0, function () {
      Z(v);
      Ca(-1);
    }, 0, 70, ha, pa);
    this.buttons[ᐃⵠΔⲆΔᐃⲆ] = kw(324, 222, 0, [ⵠᐃ.ΔⵠΔⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔⲆⲆⵠⲆ], 1, 1, function () {
      Z(v);
      Ca(-As);
    }, 0, 70, ha, pa);
    if (Qs === ⵠⵠⵠⲆ.ⲆᐃⵠΔΔⵠⵠ) {
      var ua = t++;
      if (kj.innerWidth < 1300) {
        this.buttons[ua] = kw(266, 176, 0, [ⵠᐃ.ⵠⲆᐃΔⵠᐃⵠ, ⵠᐃ.ΔⲆΔⵠΔΔᐃ, ⵠᐃ.ᐃⵠⵠⵠⵠΔᐃ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ⵠΔⵠⵠⲆ);
        }, 150, 300, ha | ka, qa);
      } else {
        this.buttons[ua] = kw(266, 176, 0, [ⵠᐃ.ⵠⲆᐃΔⵠᐃⵠ, ⵠᐃ.ΔⲆΔⵠΔΔᐃ, ⵠᐃ.ᐃⵠⵠⵠⵠΔᐃ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ⵠΔⵠⵠⲆ);
        }, -340, ut, ma | ka, qa);
      }
      this.buttons[ua].view = A;
      this.buttons[ua].hint = 0;
      var va = t++;
      if (kj.innerWidth < 1300) {
        this.buttons[va] = kw(266, 176, 0, [ⵠᐃ.ⵠⲆⲆᐃΔᐃⲆ, ⵠᐃ.ⲆΔⵠΔΔΔᐃ, ⵠᐃ.ⲆᐃᐃⲆᐃᐃⲆ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔᐃⵠΔᐃ);
        }, 150, 400, ha | ka, qa);
      } else {
        this.buttons[va] = kw(266, 176, 0, [ⵠᐃ.ⵠⲆⲆᐃΔᐃⲆ, ⵠᐃ.ⲆΔⵠΔΔΔᐃ, ⵠᐃ.ⲆᐃᐃⲆᐃᐃⲆ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔᐃⵠΔᐃ);
        }, -340, 200, ma | ka, qa);
      }
      this.buttons[va].view = A;
      this.buttons[va].hint = 0;
      var wa = t++;
      if (kj.innerWidth < 1300) {
        this.buttons[wa] = kw(266, 176, 0, [ⵠᐃ.ⵠⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆΔⲆⵠⵠⵠⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠΔⵠ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ⲆⲆᐃⲆⵠ);
        }, 450, 300, ha | ka, qa);
      } else {
        this.buttons[wa] = kw(266, 176, 0, [ⵠᐃ.ⵠⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆΔⲆⵠⵠⵠⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠΔⵠ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ⲆⲆᐃⲆⵠ);
        }, -340, 300, ma | ka, qa);
      }
      this.buttons[wa].view = A;
      this.buttons[wa].hint = 0;
      var xa = t++;
      if (kj.innerWidth < 1300) {
        this.buttons[xa] = kw(266, 176, 0, [ⵠᐃ.ⵠⵠᐃⵠⵠⲆΔ, ⵠᐃ.ΔⲆᐃⲆᐃΔⵠ, ⵠᐃ.ΔⵠᐃΔⵠΔⲆ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔΔⵠⲆΔ);
        }, 300, 300, ha | ka, qa);
      } else {
        this.buttons[xa] = kw(266, 176, 0, [ⵠᐃ.ⵠⵠᐃⵠⵠⲆΔ, ⵠᐃ.ΔⲆᐃⲆᐃΔⵠ, ⵠᐃ.ΔⵠᐃΔⵠΔⲆ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔΔⵠⲆΔ);
        }, 204, Mk, ma | ka, qa);
      }
      this.buttons[xa].view = A;
      this.buttons[xa].hint = Qs;
      var Aa = t++;
      if (kj.innerWidth < 1300) {
        this.buttons[Aa] = kw(266, 176, 0, [ⵠᐃ.ⲆⲆΔⲆᐃΔᐃ, ⵠᐃ.ⵠᐃΔΔΔΔΔ, ⵠᐃ.ⵠⲆⵠⲆΔⲆⵠ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔⵠⵠⲆᐃ);
        }, 300, 400, ha | ka, qa);
      } else {
        this.buttons[Aa] = kw(266, 176, 0, [ⵠᐃ.ⲆⲆΔⲆᐃΔᐃ, ⵠᐃ.ⵠᐃΔΔΔΔΔ, ⵠᐃ.ⵠⲆⵠⲆΔⲆⵠ], 1, 0, function () {
          ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔⵠⵠⲆᐃ);
        }, 204, 200, ma | ka, qa);
      }
      this.buttons[Aa].view = A;
      this.buttons[Aa].hint = qn;
      var Ba = t++;
      this.buttons[Ba] = kw(266, 176, 0, [ⵠᐃ.ⲆⲆⵠΔΔΔⲆ, ⵠᐃ.ᐃⵠΔⲆᐃᐃⲆ, ⵠᐃ.ᐃΔⲆⵠⵠⵠΔ], 1, 0, function () {
        ⵠⵠⵠⲆ.ⲆᐃᐃΔⲆ(uw.ΔΔⲆΔⵠ);
      }, kj.innerWidth < 1300 ? 450 : 204, kj.innerWidth < 1300 ? 400 : 300, (kj.innerWidth < 1300 ? ha : ma) | ka, qa);
      this.buttons[Ba].view = A;
      this.buttons[Ba].hint = Nl;
    }
    function Ca(a, b) {
      if (b !== ps) {
        pf.ⵠⵠᐃⲆΔⲆⵠ = b;
        var c = pf.ΔᐃⵠⵠⲆⵠᐃ[b];
        pf.ⵠⲆΔⵠΔ = c.score;
        pf.ⵠΔⲆᐃΔ = c.kill;
        pf.ⵠΔΔⲆᐃⲆΔ = c.death;
        pf.time = c.time;
        pf.ΔᐃⲆΔᐃⵠΔ = c.bestScore;
        pf.ᐃⵠᐃᐃⵠⵠⲆ = c.bestKill;
        pf.ᐃⲆⲆᐃⲆᐃⲆ = c.bestTime;
        pf.ⵠᐃⲆΔⵠᐃⵠ = c.scoreTotal;
      }
      if (Hj === a) {
        a = pf.ⲆᐃⵠⵠΔᐃⲆ;
      }
      pf.ⲆᐃⵠⵠΔᐃⲆ = a;
      if (a >= 0) {
        document.getElementById("stats_box_time").innerHTML = pf.ᐃⲆⲆᐃⲆᐃⲆ[a];
        document.getElementById("stats_box_kill").innerHTML = pf.ᐃⵠᐃᐃⵠⵠⲆ[a];
        document.getElementById("stats_box_score").innerHTML = pf.ΔᐃⲆΔᐃⵠΔ[a];
      } else {
        var d = qn;
        for (var f = 0; pf.ⵠΔⲆᐃΔ.length > f; f++) {
          d += pf.ⵠΔⲆᐃΔ[f];
        }
        var g = rl;
        for (f = Rl; f < pf.time.length; f++) {
          g += pf.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = d;
        document.getElementById("stats_box_score").innerHTML = pf.ⵠⲆΔⵠΔ;
      }
    }
    this.buttons[t] = kw(87, 78, 0, [ⵠᐃ.ⵠΔᐃᐃⵠⲆⵠ, ⵠᐃ.ΔⲆᐃⲆⲆⲆᐃ, ⵠᐃ.ⲆⵠΔⵠΔΔⲆ], 1, 0, function () {
      pf.ᐃⲆⵠᐃᐃⵠⵠᐃⵠ();
      if (pf.ⵠⲆΔⲆⲆⲆΔ === ur) {
        Z(L);
      } else {
        Z(_);
      }
    }, 127, 110, ma | ka, pa);
    this.buttons[t++].view = v;
    this.buttons[t] = kw(87, 78, 0, [ⵠᐃ.ᐃⲆΔⲆΔⵠⲆ, ⵠᐃ.ᐃⵠⲆⵠΔᐃΔ, ⵠᐃ.ΔⲆᐃᐃΔⵠᐃ], 1, 0, function () {
      (function () {
        if (jf === Wf && kj.FB.getUserID()) {
          kj.FB.logout();
        }
        if (Wf === Gf && mx !== undefined) {
          kj.gapi.auth2.getAuthInstance().signOut();
          mx = sb;
        }
        jx = undefined;
        ix = undefined;
        Wf = Bl;
        pf.ᐃᐃⵠᐃᐃ = gr;
        pf.ᐃᐃⵠⲆᐃ = Qs;
        pf.ⵠⲆΔⵠΔ = ms;
        pf.ⵠΔⲆⵠΔⲆᐃ();
        ⲆΔⲆΔᐃⲆⲆᐃⵠ();
      })();
    }, T, 110, ma | ka, pa);
    this.buttons[t++].view = v;
    this.buttons[t] = kw(58, 64, 0, [ⵠᐃ.ᐃΔᐃⵠΔΔΔ, ⵠᐃ.ⲆᐃΔⵠⵠᐃⲆ, ⵠᐃ.ᐃΔΔⲆⵠⲆΔ], 1, 0, function () {
      Z(A);
    }, 189, 118, ma | ka, pa);
    this.buttons[t++].view = K;
    this.buttons[t] = kw(497, 72, 0, [ⵠᐃ.ᐃᐃⵠᐃΔΔⲆ, ⵠᐃ.ᐃΔⲆⲆΔΔᐃ, ⵠᐃ.ⲆᐃΔᐃⲆᐃᐃ], 1, 0, function () {
      kj.gapi.auth2.getAuthInstance().signIn();
    }, -130, 390, ma | ka, pa);
    this.buttons[t++].view = K;
    this.buttons[t] = kw(497, 72, 0, [ⵠᐃ.ⲆᐃⵠΔᐃᐃⲆ, ⵠᐃ.Δᐃᐃᐃᐃⵠᐃ, ⵠᐃ.ᐃⲆⲆⵠᐃⵠⲆ], 1, 0, function () {
      kj.FB.login(function (a) {
        if (a.authResponse) {
          kj.FB.api("/me", function (a) {
            Wf = jf;
            ix = kj.FB.getAuthResponse().accessToken;
            ux();
            kj.ⵠⲆᐃΔⲆᐃⵠ(jx);
          });
        }
      });
    }, -130, 430, ma | ka, pa);
    this.buttons[t++].view = K;
    ⵠᐃⲆⲆᐃⵠⵠ = 20000;
    this.ⵠΔᐃⲆΔᐃΔ = function (a) {
      var b = pf.ⲆⵠⵠᐃⵠⲆⵠ(a);
      var c = ⵠᐃⲆⲆᐃⵠⵠ * (b * b);
      return (a -= c) / ((b + Ej) * (b + 1) * ⵠᐃⲆⲆᐃⵠⵠ - c);
    };
    this.ⲆⵠⵠᐃⵠⲆⵠ = function (a) {
      return Math.floor(Math.sqrt(a / ⵠᐃⲆⲆᐃⵠⵠ));
    };
    this.ⵠᐃⵠΔΔΔᐃᐃⲆ = function (a) {
      pf.ᐃΔΔⵠⵠ = pf.ⲆⵠⵠᐃⵠⲆⵠ(a);
      pf.ⵠⲆΔᐃΔⵠⵠ = pf.ⵠΔᐃⲆΔᐃΔ(a);
      pf.ᐃΔᐃⲆⵠⵠΔ = 0;
      pf.ⵠⲆΔⵠΔ = a;
    };
    this.ⵠⲆΔΔⲆⵠⲆⲆᐃ = function (b) {
      pf.buttons[pf.ΔⵠⲆΔᐃⲆⵠ].info.active = 0;
      pf.buttons[pf.ⵠⲆΔⵠᐃⵠΔ].info.active = 1;
      pf.buttons[pf.ᐃⵠΔⲆΔᐃⲆ].info.active = Ht;
      f();
      if (b.name.indexOf("Starver#") === -ag) {
        document.getElementById("account_nickname_input").value = kj.decodeURIComponent(kj.escape(kj.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      pf.ᐃᐃⵠⲆᐃ = b.bread;
      var c = b.seasons;
      var d = c[c.length - ag];
      pf.ΔᐃⵠⵠⲆⵠᐃ = c;
      q.ⵠᐃⵠΔΔΔᐃᐃⲆ(d.score);
      pf.ⵠⲆΔⵠΔ = d.score;
      pf.ⵠΔⲆᐃΔ = d.kill;
      pf.ⵠΔΔⲆᐃⲆΔ = d.death;
      pf.time = d.time;
      pf.ΔᐃⲆΔᐃⵠΔ = d.bestScore;
      pf.ᐃⵠᐃᐃⵠⵠⲆ = d.bestKill;
      pf.ᐃⲆⲆᐃⲆᐃⲆ = d.bestTime;
      pf.ⵠᐃⲆΔⵠᐃⵠ = d.scoreTotal;
      pf.ⵠⲆΔⲆⲆⲆΔ = b.firstName;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.privateServer;
      if (qr === pf.ⵠⲆΔⲆⲆⲆΔ) {
        pf.ⵠⲆΔⲆⲆⲆΔ = Tg;
      }
      pf.ΔⲆᐃΔⲆⵠΔ = Date.now() + b.privateServerTime;
      if (Number(b.privateServerTime) > Cq) {
        pf.ΔⲆᐃΔⲆⵠΔ = Date.now() + Number(b.privateServerTime);
      }
      pf.ᐃᐃⵠᐃᐃ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        pf.ᐃᐃⵠᐃᐃ = Date.now() + Number(b.kit);
      }
      var e = ⲆⲆᐃΔ.ΔⲆⲆⵠΔ;
      for (var g = Nl; b.skins.length > g; g++) {
        if (b.skins[g] > Nl) {
          for (var h = 0; h < e.length; h++) {
            if (e[h].id === g) {
              q.unlock.ᐃᐃΔᐃ[h] = As;
            }
          }
        }
      }
      e = ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ;
      g = Rl;
      for (; b.accessories.length > g; g++) {
        if (b.accessories[g] > 0) {
          for (h = Cq; e.length > h; h++) {
            if (g === e[h].id) {
              q.unlock.ᐃΔᐃⵠⵠ[h] = Ue;
            }
          }
        }
      }
      e = ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ;
      g = 0;
      for (; b.books.length > g; g++) {
        if (b.books[g] > 0) {
          for (h = 0; e.length > h; h++) {
            if (g === e[h].id) {
              q.unlock.ΔΔᐃᐃⵠ[h] = Ok;
            }
          }
        }
      }
      e = ⲆⲆᐃΔ.ᐃⵠⲆΔ;
      g = 0;
      for (; g < b.bags.length; g++) {
        if (b.bags[g] > 0) {
          for (h = 0; e.length > h; h++) {
            if (e[h].id === g) {
              q.unlock.ᐃⵠΔᐃⲆ[h] = 1;
            }
          }
        }
      }
      e = ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ;
      g = Nl;
      for (; b.crates.length > g; g++) {
        if (b.crates[g] > 0) {
          for (h = 0; h < e.length; h++) {
            if (e[h].id === g) {
              q.unlock.ΔᐃⵠⲆⲆ[h] = Ht;
              q.unlock.ΔΔᐃⵠⲆ[h] = 1;
            }
          }
        }
      }
    };
    this.ⲆⵠᐃⵠᐃⲆᐃⲆᐃ = function () {
      kj.ⵠⲆᐃΔⲆᐃⵠ = function () {
        Z(A);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Ff + "login?token=" + ix + "&type=" + Wf);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(q.ⵠⲆΔΔⲆⵠⲆⲆᐃ);
      };
      if (kx === 1) {
        kj.ⵠⲆᐃΔⲆᐃⵠ();
      }
    };
    kj.ⲆΔⲆΔᐃⲆⲆᐃⵠ = function () {
      pf.buttons[pf.ΔⵠⲆΔᐃⲆⵠ].info.active = 1;
      pf.buttons[pf.ⵠⲆΔⵠᐃⵠΔ].info.active = 0;
      pf.buttons[pf.ᐃⵠΔⲆΔᐃⲆ].info.active = rl;
      Z(A);
    };
    this.ΔΔⵠⲆⵠ = function () {
      return pf.buttons[pf.ⵠⲆΔⵠᐃⵠΔ].info.active;
    };
    this.buttons[t] = kw(461, 105, 0, [ⵠᐃ.ᐃⲆᐃⲆⵠⲆΔ, ⵠᐃ.ᐃΔⲆⲆᐃΔⵠ, ⵠᐃ.ᐃⲆΔⵠΔⲆⵠ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        Z(u);
      } else {
        Z(K);
      }
    }, -Vj, 80, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(157, 158, 0, [ⵠᐃ.ⲆΔᐃⵠⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ, ⵠᐃ.ΔΔᐃⲆᐃΔᐃ], 1, 0, function () {
      kj.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ma | ka, pa);
    this.buttons[t++].view = C;
    this.buttons[t] = kw(66, 73, 0, [ⵠᐃ.ⲆΔⵠⲆΔⵠΔ, ⵠᐃ.ⵠᐃⵠⲆⲆⵠΔ, ⵠᐃ.ᐃⵠⵠⲆⲆⲆⵠ], 1, 0, on, -68, 340, ma | ka, pa);
    this.buttons[t++].view = C;
    this.buttons[t] = kw(66, 73, 0, [ⵠᐃ.ΔᐃΔΔⲆⵠⵠ, ⵠᐃ.ᐃⲆΔᐃⲆⵠΔ, ⵠᐃ.ⲆⲆΔΔⲆⲆⲆ], 1, 0, undefined, -30, 340, ma | ka, pa);
    this.buttons[t++].view = C;
    this.ⵠⵠΔᐃⵠᐃΔⵠᐃ = t;
    this.buttons[t] = kw(97, 66, 0, [ⵠᐃ.ΔΔⵠᐃⵠΔΔ, ⵠᐃ.ΔΔⲆⲆⵠⲆⲆ, ⵠᐃ.ⵠᐃΔⵠⵠΔⲆ], 1, 0, function () {
      ox(undefined, ht, pf.ⲆⵠᐃⲆⵠⵠⵠ);
    }, -14, 151, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ⵠⲆⵠᐃⲆΔⵠ = t;
    this.buttons[t] = kw(135, 66, 0, [ⵠᐃ.ⵠᐃΔⲆΔΔᐃ, ⵠᐃ.ⲆⵠⲆᐃⵠⵠᐃ, ⵠᐃ.ᐃᐃⵠⵠⲆⵠⵠ], 1, 0, function () {
      ox(on, undefined, pf.ⵠⲆⵠᐃⲆΔⵠ);
    }, 37.5, 151, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ΔⵠⲆⵠⵠⵠΔ = t;
    this.buttons[t] = kw(160, 66, 0, [ⵠᐃ.ΔᐃΔⵠⲆⵠⲆ, ⵠᐃ.ⲆΔⲆⵠΔⲆⵠ, ⵠᐃ.ⵠⵠⵠΔΔⲆⵠ], 1, 0, function () {
      ox(ng, jn, pf.ΔⵠⲆⵠⵠⵠΔ);
    }, 107.5, 151, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ⲆⵠᐃⲆⵠⵠⵠ = t;
    this.buttons[t] = kw(207, 66, 0, [ⵠᐃ.ᐃⲆᐃΔᐃᐃᐃ, ⵠᐃ.ΔᐃᐃⵠⵠⲆⵠ, ⵠᐃ.ΔᐃⵠΔΔΔⵠ], 1, 0, function () {
      ox(Gk, ps, pf.ⲆⵠᐃⲆⵠⵠⵠ);
    }, 190.5, 151, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ᐃⵠⵠΔᐃᐃᐃ = t;
    this.buttons[t] = kw(144, 66, 0, [ⵠᐃ.ΔΔⵠᐃΔⵠⲆ, ⵠᐃ.ΔⲆⵠΔᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⵠΔⲆ], 1, 0, function () {
      ox(pf.ᐃⵠⵠΔᐃᐃᐃ);
    }, 103.5, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ᐃᐃⵠⵠⲆᐃⵠ = t;
    this.buttons[t] = kw(124, 66, 0, [ⵠᐃ.ΔⵠᐃⲆᐃΔⵠ, ⵠᐃ.ᐃⵠᐃᐃⵠⲆᐃ, ⵠᐃ.ᐃⵠᐃΔΔⲆⵠ], 1, 0, function () {
      ox(pf.ᐃᐃⵠⵠⲆᐃⵠ);
    }, 177.5, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ΔⵠᐃΔΔᐃΔ = t;
    this.buttons[t] = kw(104, 66, 0, [ⵠᐃ.ⵠⲆᐃᐃᐃᐃⵠ, ⵠᐃ.ⲆΔⵠᐃΔΔᐃ, ⵠᐃ.ⵠⵠᐃᐃⲆΔΔ], 1, 0, function () {
      ox(pf.ΔⵠᐃΔΔᐃΔ);
    }, 242, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ΔᐃΔΔᐃᐃⵠ = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⲆⲆΔⵠΔΔⵠ, ⵠᐃ.ΔⵠΔⵠᐃᐃᐃ, ⵠᐃ.ⲆΔⲆΔΔΔΔ], 1, 0, function () {
      ox(undefined, ht, pl, pf.ΔᐃΔΔᐃᐃⵠ);
    }, -185, 528, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ⵠᐃⵠⵠΔⲆⵠ = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⵠΔᐃⵠⵠᐃⲆ, ⵠᐃ.ΔΔⲆᐃᐃᐃᐃ, ⵠᐃ.ⲆⲆΔΔⵠⵠᐃ], 1, 0, function () {
      ox(undefined, on, undefined, pf.ⵠᐃⵠⵠΔⲆⵠ);
    }, -149, 528, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ᐃⲆⲆⲆⵠᐃⲆ = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⵠⲆΔⲆᐃⵠᐃ, ⵠᐃ.ΔⲆᐃᐃᐃᐃⲆ, ⵠᐃ.ΔⲆⵠΔΔᐃΔ], 1, 0, function () {
      ox(Bl, undefined, undefined, pf.ᐃⲆⲆⲆⵠᐃⲆ);
    }, -113, 528, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ⲆⵠΔⵠᐃΔⲆ = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⵠᐃⵠΔᐃⲆⵠ, ⵠᐃ.ⲆᐃⵠΔⲆⲆΔ, ⵠᐃ.ΔΔⲆΔⵠᐃᐃ], 1, 0, function () {
      ox(Hj, undefined, Gh, pf.ⲆⵠΔⵠᐃΔⲆ);
    }, -77, 528, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ⵠⲆΔᐃΔᐃΔ = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ΔⵠⵠⵠⵠΔᐃ, ⵠᐃ.ΔΔΔΔΔΔⵠ, ⵠᐃ.ⵠⵠⲆⲆΔⵠᐃ], 1, 0, function () {
      ox(undefined, oh, on, pf.ⵠⲆΔᐃΔᐃΔ);
    }, -41, 528, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ᐃⲆᐃⲆᐃΔᐃ = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ᐃⵠⵠΔⲆⵠᐃ, ⵠᐃ.ΔΔⵠΔⵠⵠⲆ, ⵠᐃ.ⵠΔⲆⲆⵠΔΔ], 1, 0, function () {
      ox(jn, undefined, undefined, pf.ᐃⲆᐃⲆᐃΔᐃ);
    }, -5, 528, ma | ka, pa);
    this.buttons[t++].view = z;
    this.buttons[t] = kw(232, 352, 0, [ⵠᐃ.ⵠⵠⲆᐃⲆⵠⲆ, ⵠᐃ.ΔⲆᐃⵠᐃⲆⵠ, ⵠᐃ.ᐃᐃᐃⲆⲆᐃᐃ], 1, 0, function () {
      $f(300);
    }, -330, 135, ma | ka, pa);
    this.buttons[t++].view = u;
    this.buttons[t] = kw(232, 352, 0, [ⵠᐃ.ⵠⲆΔⵠⵠⲆⲆ, ⵠᐃ.ᐃⵠΔⵠᐃᐃⵠ, ⵠᐃ.ⵠΔⵠᐃⲆⵠⲆ], 1, 0, function () {
      $f(600);
    }, -195, 135, ma | ka, pa);
    this.buttons[t++].view = u;
    this.buttons[t] = kw(243, 374, 0, [ⵠᐃ.ΔⵠⵠᐃᐃⵠⲆ, ⵠᐃ.ⲆΔΔⵠⵠⲆⲆ, ⵠᐃ.ⵠⲆⲆᐃΔΔᐃ], 1, 0, function () {
      $f(2600);
    }, -60, 130, ma | ka, pa);
    this.buttons[t++].view = u;
    this.buttons[t] = kw(232, 352, 0, [ⵠᐃ.ΔΔᐃⵠᐃⲆⵠ, ⵠᐃ.ⵠᐃⲆᐃᐃΔΔ, ⵠᐃ.ΔⵠᐃᐃⲆΔⵠ], 1, 0, function () {
      $f(7000);
    }, 78, 135, ma | ka, pa);
    this.buttons[t++].view = u;
    this.buttons[t] = kw(243, 374, 0, [ⵠᐃ.ΔΔᐃⵠⵠᐃᐃ, ⵠᐃ.ΔⲆⵠΔⲆⲆᐃ, ⵠᐃ.ᐃⲆΔᐃΔⲆᐃ], 1, 0, function () {
      $f(20000);
    }, 213, 130, ma | ka, pa);
    this.buttons[t++].view = u;
    this.buttons[t] = kw(58, 64, 0, [ⵠᐃ.ᐃΔᐃⵠΔΔΔ, ⵠᐃ.ⲆᐃΔⵠⵠᐃⲆ, ⵠᐃ.ᐃΔΔⲆⵠⲆΔ], 1, 0, function () {
      Z(Q);
    }, 300, 88, ma | ka, pa);
    this.buttons[t++].view = u;
    this.buttons[t] = kw(323, 112, 0, [ⵠᐃ.ⵠⲆⲆⵠⵠΔᐃ, ⵠᐃ.ⵠᐃⵠΔᐃᐃⵠ, ⵠᐃ.Δᐃᐃⵠᐃⵠᐃ], 1, 0, function () {
      Z(E);
      Pa.ΔᐃΔΔᐃ();
    }, -315, 185, ma | ka, pa);
    this.buttons[t++].view = m;
    this.buttons[t] = kw(323, 112, 0, [ⵠᐃ.ⵠΔᐃᐃⲆΔΔ, ⵠᐃ.ΔⵠⵠⲆⵠΔΔ, ⵠᐃ.ⵠⲆΔᐃⵠΔᐃ], 1, 0, function () {
      Z(X);
      Wa.ΔᐃΔΔᐃ();
    }, -315, 321, ma | ka, pa);
    this.buttons[t++].view = m;
    this.buttons[t] = kw(323, 112, 0, [ⵠᐃ.ᐃⲆⲆΔΔⲆⵠ, ⵠᐃ.ΔⲆΔΔΔΔΔ, ⵠᐃ.ⵠⵠⲆⵠΔⵠᐃ], 1, 0, function () {
      Z(S);
      Ra.ΔᐃΔΔᐃ();
    }, 153, 185, ma | ka, pa);
    this.buttons[t++].view = m;
    this.buttons[t] = kw(323, 112, 0, [ⵠᐃ.ⵠᐃΔⲆⵠⵠᐃ, ⵠᐃ.ⲆⲆᐃᐃⵠΔΔ, ⵠᐃ.ᐃΔⲆⲆⲆⵠᐃ], 1, 0, function () {
      Z(F);
      Sa.ΔᐃΔΔᐃ();
    }, 153, 321, ma | ka, pa);
    this.buttons[t++].view = m;
    this.buttons[t] = kw(323, 112, 0, [ⵠᐃ.ⲆⲆⵠΔⵠΔⲆ, ⵠᐃ.ΔᐃⲆⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆⲆΔᐃⵠⲆ], 1, 0, function () {
      Z(P);
      Ta.ΔᐃΔΔᐃ();
    }, 153, 463, ma | ka, pa);
    this.buttons[t++].view = m;
    this.buttons[t] = kw(323, 112, 0, [ⵠᐃ.ᐃⲆⲆᐃᐃⵠᐃ, ⵠᐃ.ⵠᐃΔⵠⵠᐃⲆ, ⵠᐃ.ⵠᐃΔⵠⲆᐃᐃ], 1, 0, function () {
      Z(G);
      Ua.ΔᐃΔΔᐃ();
    }, -315, 463, ma | ka, pa);
    this.buttons[t++].view = m;
    this.buttons[t] = kw(327, 117, 0, [ⵠᐃ.ⵠⲆᐃΔΔᐃᐃ, ⵠᐃ.ᐃⵠΔⵠΔⵠΔ, ⵠᐃ.ⲆᐃⵠⵠΔⲆⲆ], 1, 0, function () {
      Z(U);
    }, 155, 70, ha, qa);
    this.buttons[t++].view = A;
    this.buttons[t] = kw(130, 129, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃⵠⲆ, ⵠᐃ.ⵠⵠᐃΔⲆᐃᐃ, ⵠᐃ.ⵠⲆᐃⲆⲆΔΔ], 1, 0, function () {
      Y(w, pa, "none");
      Z(Q);
    }, ih, 40, ma | ka, pa);
    this.buttons[t++].view = w;
    this.buttons[t] = kw(130, 129, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃⵠⲆ, ⵠᐃ.ⵠⵠᐃΔⲆᐃᐃ, ⵠᐃ.ⵠⲆᐃⲆⲆΔΔ], 1, 0, function () {
      Y(y, pa, "none");
      Z(Q);
    }, Uh, 40, ma | ka, pa);
    this.buttons[t++].view = y;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 200, 140, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ᐃΔΔᐃᐃⲆⵠ, ⵠᐃ.ΔⲆᐃΔⲆⲆΔ, ⵠᐃ.ᐃΔΔΔⵠⵠⵠ], 1, 0, function () {
      tx("Atlanta");
    }, -265, 300, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ᐃᐃΔⲆΔⲆᐃ, ⵠᐃ.ⵠΔᐃⲆᐃΔⲆ, ⵠᐃ.ⲆⲆΔⲆⲆᐃᐃ], 1, 0, function () {
      tx("Dallas");
    }, -130, 300, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ⵠΔⲆⵠⲆᐃΔ, ⵠᐃ.ΔⵠΔᐃⲆⵠⲆ, ⵠᐃ.ⵠΔⲆⲆⵠΔⵠ], 1, 0, function () {
      tx("Fremont");
    }, Os, 300, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ⲆⵠΔⲆᐃⲆⲆ, ⵠᐃ.ⲆΔⵠⲆᐃⵠⵠ, ⵠᐃ.ⲆᐃᐃⲆᐃⵠᐃ], 1, 0, function () {
      tx("Newark");
    }, 140, 300, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.Ⲇⵠᐃⵠᐃᐃⵠ, ⵠᐃ.ⲆⵠⵠⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⲆⵠⵠⲆⲆ], 1, 0, function () {
      tx("London");
    }, -265, 365, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ⵠᐃⵠᐃᐃⵠΔ, ⵠᐃ.ⲆⲆⲆⲆⲆᐃⵠ, ⵠᐃ.ⵠⲆᐃⲆΔⵠᐃ], 1, 0, function () {
      tx("Frankfurt");
    }, -130, 365, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ⵠⲆⵠΔⲆⲆⵠ, ⵠᐃ.ᐃΔⲆΔⵠⲆΔ, ⵠᐃ.ⲆᐃⲆⲆⵠⲆⲆ], 1, 0, function () {
      tx("Singapore");
    }, 5, 365, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ⲆΔᐃΔΔⲆᐃ, ⵠᐃ.Δⵠᐃᐃᐃᐃⵠ, ⵠᐃ.ⵠⲆⲆᐃᐃᐃⲆ], 1, 0, function () {
      tx("Tokyo");
    }, 140, 365, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ᐃⲆΔⲆΔⲆΔ, ⵠᐃ.ᐃΔⲆᐃⵠΔΔ, ⵠᐃ.ΔⵠΔΔΔⲆᐃ], 1, 0, function () {
      tx("Toronto");
    }, -265, 430, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(253, 110, 0, [ⵠᐃ.ⵠΔⲆⵠΔⲆⵠ, ⵠᐃ.ⲆΔᐃΔᐃⵠⲆ, ⵠᐃ.ΔⵠΔⲆᐃⵠⵠ], 1, 0, function () {
      tx("Mumbai");
    }, -130, 430, ma | ka, pa);
    this.buttons[t++].view = O;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(O);
    }, 230, 140, ma | ka, pa);
    this.buttons[t++].view = N;
    this.buttons[t] = kw(230, 352, 0, [ⵠᐃ.ᐃⵠⲆᐃᐃⲆΔ, ⵠᐃ.ΔᐃΔⲆᐃΔΔ, ⵠᐃ.ⵠⲆⵠⲆΔΔΔ], 1, 0, function () {
      $f(350);
    }, -280, 240, ma | ka, pa);
    this.buttons[t++].view = N;
    this.buttons[t] = kw(230, 352, 0, [ⵠᐃ.ⵠΔΔⵠⵠⲆᐃ, ⵠᐃ.ΔΔⲆⵠᐃⲆⵠ, ⵠᐃ.ⲆⲆⵠⲆⵠⵠΔ], 1, 0, function () {
      $f(700);
    }, -130, 240, ma | ka, pa);
    this.buttons[t++].view = N;
    this.buttons[t] = kw(230, 352, 0, [ⵠᐃ.ΔΔΔⲆΔⵠΔ, ⵠᐃ.ΔΔⲆⵠᐃΔⲆ, ⵠᐃ.ΔᐃⵠⵠⵠⲆⵠ], 1, 0, function () {
      $f(1400);
    }, 20, 240, ma | ka, pa);
    this.buttons[t++].view = N;
    this.buttons[t] = kw(230, 352, 0, [ⵠᐃ.ᐃⲆⵠⲆⲆᐃΔ, ⵠᐃ.ΔᐃⵠΔⲆᐃⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⵠⵠ], 1, 0, function () {
      $f(3000);
    }, 170, 240, ma | ka, pa);
    this.buttons[t++].view = N;
    this.buttons[t] = kw(105, 119, 0, [ⵠᐃ.ⵠΔΔⵠⲆⵠΔ, ⵠᐃ.ⲆⵠΔⲆⵠⲆᐃ, ⵠᐃ.ⵠΔⵠⲆⲆⲆᐃ], 1, 0, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, ma | ka, pa);
    this.buttons[t++].view = H;
    this.buttons[t] = kw(105, 119, 0, [ⵠᐃ.ᐃⲆⲆⵠᐃᐃⵠ, ⵠᐃ.ᐃᐃⵠΔᐃᐃΔ, ⵠᐃ.ⵠᐃΔΔⵠΔᐃ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Ff + "rebootServer?token=" + ix + "&userid=" + jx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (xt === this.readyState && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, ma | ka, pa);
    this.buttons[t++].view = H;
    this.buttons[t] = kw(204, 115, 0, [ⵠᐃ.ᐃΔⵠⲆᐃⵠΔ, ⵠᐃ.ᐃⵠⵠᐃⵠⵠⵠ, ⵠᐃ.ᐃⲆⵠᐃⵠΔᐃ], 1, 0, function () {
      kj.open("./commands.html", "_blank");
    }, -265, 490, ma | ka, pa);
    this.buttons[t++].view = H;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⵠΔΔᐃΔⵠⵠ, ⵠᐃ.ⲆⲆᐃᐃⲆᐃⵠ, ⵠᐃ.ⲆᐃⲆᐃΔᐃⲆ], 1, 0, function () {
      Z(x);
    }, -210, 170, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ΔⵠⵠⵠⵠⲆᐃ, ⵠᐃ.ΔⲆᐃⵠΔⵠΔ, ⵠᐃ.ΔⲆⲆⵠΔᐃⵠ], 1, 0, function () {
      Z(B);
    }, 70, 170, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⵠⲆᐃⲆⲆᐃᐃ, ⵠᐃ.ⲆΔᐃΔΔⵠᐃ, ⵠᐃ.ⲆⲆⲆᐃᐃⲆᐃ], 1, 0, function () {
      Z(J);
    }, 70, 204, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⲆᐃⲆΔΔⵠⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆᐃⲆ, ⵠᐃ.ⵠᐃᐃⵠⵠⵠΔ], 1, 0, function () {
      Z(D);
    }, -210, 204, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⲆᐃⲆΔΔⵠⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆᐃⲆ, ⵠᐃ.ⵠᐃᐃⵠⵠⵠΔ], 1, 0, function () {
      Z(I);
    }, 70, 238, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⲆᐃⲆΔΔⵠⲆ, ⵠᐃ.ᐃᐃⵠᐃⲆᐃⲆ, ⵠᐃ.ⵠᐃᐃⵠⵠⵠΔ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        rx(0, 300);
      } else {
        Z(K);
      }
    }, 307, 205, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⲆᐃᐃⵠΔᐃⲆ, ⵠᐃ.ⲆⲆⲆⵠⲆⲆⵠ, ⵠᐃ.ΔⲆΔⲆⵠᐃΔ], 1, 0, function () {
      Z(M);
    }, -210, 238, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(145, 69, 0, [ⵠᐃ.ⲆᐃᐃⵠΔᐃⲆ, ⵠᐃ.ⲆⲆⲆⵠⲆⲆⵠ, ⵠᐃ.ΔⲆΔⲆⵠᐃΔ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        rx(Ht, 600);
      } else {
        Z(K);
      }
    }, 307, 239, ma | ka, pa);
    this.buttons[t++].view = Q;
    this.buttons[t] = kw(192, 101, 0, [ⵠᐃ.ⲆⲆⵠⵠⲆⵠΔ, ⵠᐃ.ⵠⵠΔⵠᐃⲆΔ, ⵠᐃ.ΔⵠⵠⵠᐃΔᐃ], 1, 0, function () {
      px();
    }, -100, 250, ma | ka, pa);
    this.buttons[t++].view = L;
    this.buttons[t] = kw(192, 104, 0, [ⵠᐃ.ᐃΔᐃⲆΔᐃᐃ, ⵠᐃ.ΔᐃⲆΔⲆⲆΔ, ⵠᐃ.ᐃⵠⵠⲆᐃⲆⵠ], 1, 0, function () {
      px();
    }, -100, 239, ma | ka, pa);
    this.buttons[t++].view = _;
    this.buttons[t] = kw(192, 101, 0, [ⵠᐃ.ⵠⲆⲆΔᐃⵠⲆ, ⵠᐃ.ⲆⲆᐃⲆΔⵠᐃ, ⵠᐃ.ΔⵠⵠⵠᐃⲆⵠ], 1, 0, function () {
      Z(v);
    }, 10, 250, ma | ka, pa);
    this.buttons[t++].view = L;
    this.buttons[t] = kw(192, 104, 0, [ⵠᐃ.ᐃⲆᐃⲆⲆᐃΔ, ⵠᐃ.ΔⲆΔⲆᐃⲆΔ, ⵠᐃ.ΔᐃⲆᐃⲆΔⲆ], 1, 0, function () {
      Z(v);
    }, ct, 239, ma | ka, pa);
    this.buttons[t++].view = _;
    ᐃⲆⲆᐃⲆ = [];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ⲆᐃⲆⲆΔ] = [ⵠᐃ.ᐃⵠⵠᐃⵠⲆᐃ, ⵠᐃ.ΔΔΔⲆΔⲆⲆ, ⵠᐃ.ᐃΔⵠⵠⲆΔΔ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ΔΔΔᐃ] = [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ᐃΔⲆᐃ] = [ⵠᐃ.ΔⵠᐃⲆⲆⲆⵠ, ⵠᐃ.ᐃΔᐃⲆⲆⵠᐃ, ⵠᐃ.ⵠⵠᐃⵠᐃⲆⵠ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ΔΔΔΔ] = [ⵠᐃ.ⲆᐃΔΔᐃΔΔ, ⵠᐃ.ⲆⵠᐃᐃΔⲆᐃ, ⵠᐃ.ᐃᐃΔⲆⲆᐃⵠ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ΔⲆⲆΔ] = [ⵠᐃ.ⲆᐃΔⲆᐃᐃⲆ, ⵠᐃ.ⲆΔΔΔᐃΔΔ, ⵠᐃ.ΔᐃΔⵠⲆⲆⲆ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ΔⲆⲆⲆ] = [ⵠᐃ.ΔⲆⲆⵠᐃΔⲆ, ⵠᐃ.ⲆⲆΔΔⲆᐃΔ, ⵠᐃ.ⲆⲆⵠᐃⵠᐃᐃ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ⵠΔⲆΔ] = [ⵠᐃ.ΔⲆᐃΔⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃᐃΔΔ, ⵠᐃ.ⲆⲆᐃᐃⲆⲆⵠ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.Ⲇⵠᐃⵠⵠ] = [ⵠᐃ.ⵠᐃⲆᐃΔⲆΔ, ⵠᐃ.ᐃᐃᐃⲆⵠᐃⵠ, ⵠᐃ.ⵠⵠⵠⲆΔⲆᐃ];
    ᐃⲆⲆᐃⲆ[ⵠⲆΔ.ⵠᐃᐃᐃⵠΔⲆ] = [ⵠᐃ.ⲆⲆᐃᐃᐃΔΔ, ⵠᐃ.ⵠᐃΔΔⲆΔⵠ, ⵠᐃ.ⲆⵠΔΔⵠⵠᐃ];
    ΔⵠⲆᐃⵠⲆⲆ = t;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, $r, -29, 205, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qr, -29, 300, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gg, -29, 395, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Zi, 65, 205, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 65, 300, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 65, 395, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 205, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Bl, 159, 300, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, sb, 159, 395, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ΔᐃᐃᐃΔⵠΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃⵠ], 1, 0, jn, -61, 315, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⵠΔⵠⵠᐃⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ], 1, 0, on, 260, 315, ma | ka, pa);
    this.buttons[t++].view = E;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(m);
    }, -320, 470, ma | ka, pa);
    this.buttons[t++].view = E;
    ᐃⲆⵠᐃⵠⲆᐃΔⲆ = t;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 205, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 300, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, ng, -29, 395, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Bl, 65, 205, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gk, 65, 300, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gg, 65, 395, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Hj, 159, 205, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, yq, 159, 300, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, ps, 159, 395, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ΔᐃᐃᐃΔⵠΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃⵠ], 1, 0, undefined, -61, 315, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⵠΔⵠⵠᐃⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ], 1, 0, oh, 260, 315, ma | ka, pa);
    this.buttons[t++].view = X;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(m);
    }, -320, 470, ma | ka, pa);
    this.buttons[t++].view = X;
    ⵠΔⲆᐃΔⲆᐃⵠⵠ = t;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qj, -29, 205, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 300, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 395, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gk, 65, 205, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Bl, 65, 300, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Hj, 65, 395, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 205, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 300, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 395, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ΔᐃᐃᐃΔⵠΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃⵠ], 1, 0, yq, -61, 315, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⵠΔⵠⵠᐃⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ], 1, 0, undefined, 260, 315, ma | ka, pa);
    this.buttons[t++].view = G;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(m);
    }, -320, 470, ma | ka, pa);
    this.buttons[t++].view = G;
    ⵠΔⲆᐃⲆⵠᐃᐃΔ = t;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qr, -29, 205, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qj, -29, 300, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 395, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 65, 205, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 65, 300, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, on, 65, 395, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qj, 159, 205, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 300, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 395, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ΔᐃᐃᐃΔⵠΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃⵠ], 1, 0, undefined, -61, 315, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⵠΔⵠⵠᐃⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ], 1, 0, yr, 260, 315, ma | ka, pa);
    this.buttons[t++].view = S;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(m);
    }, -320, 470, ma | ka, pa);
    this.buttons[t++].view = S;
    ᐃⵠⲆⵠⵠΔΔⵠⲆ = t;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 205, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, jn, -29, 300, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 395, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gg, 65, 205, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 65, 300, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, da, 65, 395, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 205, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gk, 159, 300, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Zi, 159, 395, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ΔᐃᐃᐃΔⵠΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃⵠ], 1, 0, pl, -61, 315, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⵠΔⵠⵠᐃⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ], 1, 0, ng, 260, 315, ma | ka, pa);
    this.buttons[t++].view = F;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(m);
    }, -320, 470, ma | ka, pa);
    this.buttons[t++].view = F;
    ⵠΔⵠᐃΔᐃⲆᐃⲆ = t;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qj, -29, 205, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Gg, -29, 300, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, -29, 395, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, pl, 65, 205, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, qr, 65, 300, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 65, 395, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Zi, 159, 205, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, Hj, 159, 300, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(178, 182, 0, [ⵠᐃ.ⲆΔⲆⲆ, ⵠᐃ.Δᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠΔ], 1, 0, undefined, 159, 395, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⵠᐃⲆⵠᐃᐃᐃ, ⵠᐃ.ΔᐃᐃᐃΔⵠΔ, ⵠᐃ.ᐃⲆΔⲆΔᐃⵠ], 1, 0, ps, -61, 315, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(39, 122, 0, [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ᐃⵠΔⵠⵠᐃⲆ, ⵠᐃ.ᐃⵠᐃΔⲆⲆΔ], 1, 0, jn, 260, 315, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(m);
    }, -320, 470, ma | ka, pa);
    this.buttons[t++].view = P;
    this.buttons[t] = kw(260, 260, 0, [ⵠᐃ.ᐃⵠΔΔⲆΔⵠ, ⵠᐃ.ⲆⲆⲆᐃᐃⲆⲆ, ⵠᐃ.ΔⵠᐃΔⲆΔᐃ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        qx(3, 50);
      } else {
        Z(K);
      }
    }, -260 / Aq, 150 + 448 / Eg - 65, ma | ka, pa);
    this.buttons[t++].view = B;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 309, 180, ma | ka, pa);
    this.buttons[t++].view = B;
    this.buttons[t] = kw(260, 260, 0, [ⵠᐃ.ᐃᐃⲆΔΔᐃᐃ, ⵠᐃ.ΔⵠⵠᐃΔⲆⲆ, ⵠᐃ.ⵠⵠⲆⲆⵠΔⲆ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        qx(_a, 100);
      } else {
        Z(K);
      }
    }, -260 / _l, 150 + 448 / ch - 260 / vs, ma | ka, pa);
    this.buttons[t++].view = x;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 309, 180, ma | ka, pa);
    this.buttons[t++].view = x;
    this.buttons[t] = kw(260, 260, 0, [ⵠᐃ.ⵠᐃⵠⵠΔΔⵠ, ⵠᐃ.ΔⵠᐃⵠΔⵠⵠ, ⵠᐃ.ⵠⲆⵠΔⵠⵠⲆ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        qx(4, 150);
      } else {
        Z(K);
      }
    }, -65, 150 + 448 / ea - 260 / _l, ma | ka, pa);
    this.buttons[t++].view = J;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 309, 180, ma | ka, pa);
    this.buttons[t++].view = J;
    this.buttons[t] = kw(260, 260, 0, [ⵠᐃ.ΔΔⲆΔⵠᐃⵠ, ⵠᐃ.ΔᐃΔᐃⵠΔⵠ, ⵠᐃ.ⵠⲆΔⲆΔⵠᐃ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        qx(1, 300);
      } else {
        Z(K);
      }
    }, -260 / Ph, 150 + 448 / vs - 65, ma | ka, pa);
    this.buttons[t++].view = D;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 309, 180, ma | ka, pa);
    this.buttons[t++].view = D;
    this.buttons[t] = kw(260, 260, 0, [ⵠᐃ.ΔⵠⵠᐃⲆⲆΔ, ⵠᐃ.ᐃΔᐃⲆᐃΔⵠ, ⵠᐃ.ᐃⵠⵠᐃᐃⲆⵠ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        qx(lt, 600);
      } else {
        Z(K);
      }
    }, -65, 150 + 448 / _g - 65, ma | ka, pa);
    this.buttons[t++].view = M;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 309, 180, ma | ka, pa);
    this.buttons[t++].view = M;
    this.buttons[t] = kw(260, 260, 0, [ⵠᐃ.ΔΔⲆΔⵠᐃⵠ, ⵠᐃ.ΔᐃΔᐃⵠΔⵠ, ⵠᐃ.ⵠⲆΔⲆΔⵠᐃ], 1, 0, function () {
      if (q.ΔΔⵠⲆⵠ()) {
        qx(ed, 300);
      } else {
        Z(K);
      }
    }, -260 / _g, 150 + 448 / Ph - 260 / gl, ma | ka, pa);
    this.buttons[t++].view = I;
    this.buttons[t] = kw(115, 73, 0, [ⵠᐃ.ᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⲆⵠᐃΔ, ⵠᐃ.ⵠΔᐃⵠΔ], 1, 0, function () {
      Z(Q);
    }, 309, 180, ma | ka, pa);
    this.buttons[t++].view = I;
    var Da = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⲆⵠⲆⲆⲆΔᐃ, ⵠᐃ.ⵠΔΔⵠⲆᐃⵠ, ⵠᐃ.ⵠᐃᐃΔΔⵠⵠ], 1, 0, function () {
      Ca(undefined, Rl);
    }, -305, 132, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ea = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⲆᐃᐃⵠⲆΔᐃ, ⵠᐃ.ⲆᐃⵠⵠΔⲆⵠ, ⵠᐃ.ᐃᐃΔΔⲆⲆᐃ], 1, 0, function () {
      Ca(undefined, Eo);
    }, -273, 132, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ga = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ΔⵠᐃⲆΔᐃᐃ, ⵠᐃ.ⵠΔΔⵠⲆⵠᐃ, ⵠᐃ.ΔⵠᐃᐃⲆΔᐃ], 1, 0, function () {
      Ca(ps, 2);
    }, -241, 132, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ha = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⲆⲆᐃᐃᐃᐃΔ, ⵠᐃ.ⵠΔⲆᐃⵠΔΔ, ⵠᐃ.ᐃⲆⵠΔᐃᐃⵠ], 1, 0, function () {
      Ca(undefined, co);
    }, -305, 165, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ia = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ⵠᐃᐃΔᐃΔⵠ, ⵠᐃ.ΔᐃⵠⲆΔⵠᐃ, ⵠᐃ.ⵠΔΔᐃⵠⵠᐃ], 1, 0, function () {
      Ca(ht, og);
    }, -273, 165, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ja = t;
    this.buttons[t] = kw(46, 51, 0, [ⵠᐃ.ΔΔⲆΔⲆᐃⵠ, ⵠᐃ.ⵠⲆⵠⲆⵠᐃΔ, ⵠᐃ.ⲆⵠΔⲆⲆΔⲆ], 1, 0, function () {
      Ca(Gk, mt);
    }, -241, 165, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ka = t;
    this.buttons[t] = kw(460, 73, 0, [ⵠᐃ.ⲆΔⲆⵠᐃⵠⲆ, ⵠᐃ.ⲆⵠΔᐃΔᐃⲆ, ⵠᐃ.ᐃᐃⲆⲆⵠᐃᐃ], 1, 0, function () {
      Ca(-Zq);
    }, -180, 170, ma | ka, pa);
    this.buttons[t++].view = v;
    var La = t;
    this.buttons[t] = kw(222, 68, 0, [ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ⲆⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆΔⲆⵠᐃᐃⵠ], 1, 0, function () {
      Ca(uw.ⵠΔⵠⵠⲆ);
    }, -180, 215, ma | ka, pa);
    this.buttons[t++].view = v;
    var Ma = t;
    this.buttons[t] = kw(222, 68, 0, [ⵠᐃ.ᐃⵠᐃⲆᐃᐃᐃ, ⵠᐃ.ΔᐃΔΔⲆΔⲆ, ⵠᐃ.ⵠᐃΔⲆⲆΔΔ], 1, 0, function () {
      Ca(uw.ΔᐃⵠΔᐃ);
    }, -180, 260, ma | ka, pa);
    this.buttons[t++].view = v;
    var Na = t;
    this.buttons[t] = kw(222, 68, 0, [ⵠᐃ.ᐃᐃⵠᐃⵠᐃᐃ, ⵠᐃ.ᐃΔⵠᐃᐃⲆΔ, ⵠᐃ.ᐃΔΔΔⲆᐃⵠ], 1, 0, function () {
      Ca(uw.ΔΔⵠⲆΔ);
    }, -60, 215, ma | ka, pa);
    this.buttons[t++].view = v;
    var Oa = t;
    this.buttons[t] = kw(222, 68, 0, [ⵠᐃ.ΔⲆⵠⲆΔⲆⲆ, ⵠᐃ.ΔⲆⵠⲆⲆⵠᐃ, ⵠᐃ.ⵠⲆᐃⲆᐃⲆⲆ], 1, 0, function () {
      Ca(uw.ΔⵠⵠⲆᐃ);
    }, -60, 260, ma | ka, pa);
    this.buttons[t++].view = v;
    this.ΔⲆⵠⵠⵠⵠΔ = t;
    this.buttons[t] = kw(143, 66, 0, [ⵠᐃ.ⵠⵠⲆᐃᐃⲆᐃ, ⵠᐃ.ⵠΔⲆᐃᐃⲆⵠ, ⵠᐃ.ᐃⲆΔΔⵠᐃΔ], 1, 0, function () {
      ox(Gh, pf.ΔⲆⵠⵠⵠⵠΔ);
    }, -298, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ΔᐃⵠⲆⵠⵠᐃ = t;
    this.buttons[t] = kw(104, 66, 0, [ⵠᐃ.ⵠⲆΔΔΔΔⵠ, ⵠᐃ.ΔⵠⲆⲆΔⵠᐃ, ⵠᐃ.ⵠΔⵠⵠΔᐃⵠ], 1, 0, function () {
      ox(jn, pf.ΔᐃⵠⲆⵠⵠᐃ);
    }, -223, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ᐃΔⲆΔᐃΔⲆ = t;
    this.buttons[t] = kw(110, 66, 0, [ⵠᐃ.ⵠⲆⲆΔⲆΔⲆ, ⵠᐃ.ⲆⵠⵠⵠⲆᐃⵠ, ⵠᐃ.ⲆⵠⲆⵠⲆᐃᐃ], 1, 0, function () {
      ox(undefined, pf.ᐃΔⲆΔᐃΔⲆ);
    }, -168, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ΔΔⵠⲆⲆΔΔ = t;
    this.buttons[t] = kw(88, 66, 0, [ⵠᐃ.ᐃΔⲆΔⵠⵠⲆ, ⵠᐃ.ΔⵠᐃᐃⲆⵠᐃ, ⵠᐃ.ⵠᐃΔⲆⵠᐃⲆ], 1, 0, function () {
      ox(pl, pf.ΔΔⵠⲆⲆΔΔ);
    }, -110, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.ᐃᐃⵠⲆⵠᐃΔ = t;
    this.buttons[t] = kw(88, 66, 0, [ⵠᐃ.ⵠΔΔᐃⲆᐃᐃ, ⵠᐃ.ᐃΔᐃⲆⲆⲆΔ, ⵠᐃ.ΔⲆΔΔⵠᐃⲆ], 1, 0, function () {
      ox(on, pf.ᐃᐃⵠⲆⵠᐃΔ);
    }, -63, 110, ma | ka, pa);
    this.buttons[t++].view = z;
    this.buttons[t] = kw(86, 44, 0, [ⵠᐃ.ᐃᐃⵠⲆᐃΔΔ, ⵠᐃ.ⲆⵠᐃΔⵠΔᐃ, ⵠᐃ.ⵠⵠⲆΔᐃᐃᐃ], 1, 0, function () {
      kj.open("./terms.html", "_blank");
    }, 349, 290, ma | ka, pa);
    this.buttons[t++].view = Q;
    var Pa = new e(ⲆⲆᐃΔ.ΔⲆⲆⵠΔ, ΔⵠⲆᐃⵠⲆⲆ, function (a) {
      pf.ᐃᐃΔᐃ = a;
      if (pf.unlock.ᐃᐃΔᐃ[a] === Ue) {
        ⲆⵠΔΔ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃᐃΔᐃ, this.unlock.ᐃᐃΔᐃ);
    var Ra = new e(ⲆⲆᐃΔ.ᐃⵠⲆΔ, ⵠΔⲆᐃⲆⵠᐃᐃΔ, function (a) {
      pf.ᐃⵠΔᐃⲆ = a;
      if (pf.unlock.ᐃⵠΔᐃⲆ[a] === Fh) {
        ⲆⵠΔΔ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠΔᐃⲆ, this.unlock.ᐃⵠΔᐃⲆ);
    var Sa = new e(ⲆⲆᐃΔ.ⵠᐃⵠⲆᐃ, ᐃⵠⲆⵠⵠΔΔⵠⲆ, function (a) {
      pf.ΔΔᐃᐃⵠ = a;
      if (pf.unlock.ΔΔᐃᐃⵠ[a] === 1) {
        ⲆⵠΔΔ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ΔΔᐃᐃⵠ, this.unlock.ΔΔᐃᐃⵠ);
    var Ta = new e(ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ, ⵠΔⵠᐃΔᐃⲆᐃⲆ, function (a) {
      pf.ΔΔᐃⵠⲆ = a;
      if (pf.unlock.ΔΔᐃⵠⲆ[a] === 1) {
        ⲆⵠΔΔ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ΔΔᐃⵠⲆ, this.unlock.ΔΔᐃⵠⲆ);
    var Ua = new e(ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ, ⵠΔⲆᐃΔⲆᐃⵠⵠ, function (a) {
      pf.ΔᐃⵠⲆⲆ = a;
      if (pf.unlock.ΔᐃⵠⲆⲆ[a] === 1) {
        ⲆⵠΔΔ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ΔᐃⵠⲆⲆ, this.unlock.ΔᐃⵠⲆⲆ);
    var Wa = new e(ⲆⲆᐃΔ.ⲆⲆΔⲆⲆ, ᐃⲆⵠᐃⵠⲆᐃΔⲆ, function (a) {
      pf.ᐃΔᐃⵠⵠ = a;
      if (pf.unlock.ᐃΔᐃⵠⵠ[a] === Zq) {
        ⲆⵠΔΔ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔᐃⵠⵠ, this.unlock.ᐃΔᐃⵠⵠ);
    this.ⵠᐃⲆⲆⵠΔΔ = function (a) {
      kf.ⲆⲆⲆⲆ = iw(q.ΔⲆ, a);
      for (var b = 0; q.buttons.length > b; b++) {
        if (qa === q.buttons[b].info.active) {
          q.buttons[b].ⲆᐃᐃⲆ(q.ΔⲆ, kf.ⲆⲆⲆⲆ, cw);
        }
      }
    };
    this.ⵠΔⲆᐃⲆⵠΔ = function (a) {
      kf.ⲆⲆⲆⲆ = iw(q.ΔⲆ, a);
      for (var b = qk; q.buttons.length > b; b++) {
        var c = q.buttons[b];
        if (c.info.active === qa && c.ⲆᐃᐃⲆ(q.ΔⲆ, kf.ⲆⲆⲆⲆ, dw)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ⵠⵠⵠⵠⵠⲆⲆ = false;
    this.ΔᐃᐃⲆⵠⵠⲆ = function (a) {
      kf.ⲆⲆⲆⲆ = iw(q.ΔⲆ, a);
      var b = false;
      for (var d = 0; d < q.buttons.length; d++) {
        if (q.buttons[d].info.active === qa) {
          b |= q.buttons[d].ⲆᐃᐃⲆ(q.ΔⲆ, kf.ⲆⲆⲆⲆ, bw);
        }
      }
      if (b !== q.ⵠⵠⵠⵠⵠⲆⲆ) {
        q.ⵠⵠⵠⵠⵠⲆⲆ = b;
        c.style.cursor = b ? q.ⵠⲆΔⲆⵠⵠᐃ : q.ΔᐃᐃⵠᐃᐃΔ;
      }
    };
    this.ᐃⵠⵠΔⲆΔⲆ = function () {
      kj.addEventListener("mousedown", this.ⵠᐃⲆⲆⵠΔΔ, false);
      kj.addEventListener("mouseup", this.ⵠΔⲆᐃⲆⵠΔ, Rs);
      kj.addEventListener("mousemove", this.ΔᐃᐃⲆⵠⵠⲆ, Rs);
    };
    this.ⲆΔⵠⵠⲆΔⲆ = function () {
      kj.removeEventListener("mousedown", this.ⵠᐃⲆⲆⵠΔΔ, na);
      kj.removeEventListener("mouseup", this.ⵠΔⲆᐃⲆⵠΔ, d);
      kj.removeEventListener("mousemove", this.ΔᐃᐃⲆⵠⵠⲆ, false);
    };
  }
  function Xw(b, c, d, e, f) {
    const i = b ^ 53068;
    const j = ~(c & 44595) & (c | 44595);
    const a = (12345 + (22077 + d) * 1103515245) % 2147483648;
    const k = e ^ 40383;
    const h = (16 << (f & bq)) + (24 << (f >> 24 & 255)) + (8 << (f >> 8 & 255)) + (Gr << (f >> 16 & 255));
    const l = ef(i, j);
    $n(a, k, h, i, j);
    return ~(l & 21050) & l | ~(l & 21050) & 21050;
  }
  function Yw(a, b, c, d) {
    Ne(Ys, a, b, c, d);
    return ((1 + (eo($s[Qs], $s[1], $s[lt], $s[dt]) ^ On($s[0], $s[1], $s[2], $s[Qt], $s[rl], $s[Ag]))) * 8121 + 28411) % 134456;
  }
  function Zw() {
    ᐃⵠΔⵠ.ⲆⵠⵠᐃΔⲆⲆ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function $w(a, b, c, d) {
    Ze(Ys, a, b, c, d);
    const e = Rw($s[0], $s[Ej], $s[2], $s[3], $s[Ih], $s[1]);
    const f = km($s[gc], $s[ol], $s[0], $s[1], $s[2], $s[Wb]);
    return (ph << ((e ^ f) >> 24 & ks)) + (0 << ((e ^ f) >> 16 & 255)) + (16 << ((e ^ f) >> 8 & 255)) + (24 << ((e ^ f) & 255));
  }
  function ef(a, b) {
    const c = ~(a & 25136) & a | ~(a & 25136) & 25136;
    const d = ~(b & 57377) & 57377 | ~(b & 57377) & b;
    const e = Ik(c, d);
    of(c, d, c);
    return ~(e & 22487) & e | ~(e & 22487) & 22487;
  }
  function tf(b, c, d, e, f, g) {
    const i = ((47177 + d) * 2147483629 + 2147483587) % 2147483647;
    const a = (24 << (e >> 16 & 255)) + (8 << (e & 255)) + (0 << (e >> R & al)) + (16 << (e >> 24 & 255));
    const j = rf(~(b & 34384) & b | ~(b & 34384) & 34384, (c | 42369) & ~(c & 42369));
    rf(i, a);
    return j ^ 45551;
  }
  function nf(b, c) {
    this.ΔⲆ = b;
    this.Ⲇ = c;
    var d = this;
    this.ΔᐃΔΔⵠΔΔ = En;
    this.ᐃΔᐃⵠᐃⲆᐃ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: uh
      },
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ΔᐃΔⲆⵠ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + bx.ⵠΔⵠΔᐃⲆΔ.ᐃⲆᐃᐃΔΔⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + qt[ΔΔᐃⵠ.ⲆᐃⵠⵠΔΔᐃ] + " : " + bx.ⲆΔⵠ + "</div><div class=\"stats\"> " + qt[ΔΔᐃⵠ.ⲆΔΔΔⵠᐃᐃ] + " : " + bx.ⵠΔⵠΔᐃⲆΔ.ⵠΔⲆᐃΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + qt[ΔΔᐃⵠ.ΔⲆᐃⲆΔΔⵠ] + " : " + bx.ⵠΔⵠΔᐃⲆΔ.ⵠⲆΔⵠΔ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + bx.ⵠΔⵠΔᐃⲆΔ.ⲆⵠΔⵠΔⲆᐃ + " " + qt[ΔΔᐃⵠ.POINTS] + "</div></div><div id=\"shop_points\">" + qt[ΔΔᐃⵠ.ⵠⲆⲆⵠⵠΔΔ] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + qt[ΔΔᐃⵠ.ΔⲆⵠⵠⵠⵠⲆ] + "</div><div class=\"social\" id=\"fffacebook\">" + qt[ΔΔᐃⵠ.ⵠⲆΔᐃᐃⲆΔ] + "</div></div><div id=\"bbback\">" + qt[ΔΔᐃⵠ.ⵠΔⵠⲆᐃΔⲆ] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", af, Y);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          cx.ⲆⲆΔᐃⲆ(pf.ΔⲆᐃⵠΔ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Zw, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Ff + "getBreadAndScore?userid=" + jx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (Ch == this.readyState && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - pf.ᐃᐃⵠⲆᐃ;
              pf.ᐃᐃⵠⲆᐃ = b.b;
              pf.ⵠⲆΔⵠΔ = b.s;
              pf.ᐃΔΔⵠⵠ = pf.ⲆⵠⵠᐃⵠⲆⵠ(pf.ⵠⲆΔⵠΔ);
              pf.ⵠⲆΔᐃΔⵠⵠ = pf.ⵠΔᐃⲆΔᐃΔ(pf.ⵠⲆΔⵠΔ);
              pf.ᐃΔᐃⲆⵠⵠΔ = Ih;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var f;
    var g = 0;
    function e() {
      d.ᐃⲆΔ();
      if (++g != 30) {
        kj.setTimeout(e, 33);
      } else {
        d.ᐃⲆΔ();
      }
    }
    this.ⲆⲆΔᐃⲆ = function (a) {
      if (ra === d.ΔᐃΔΔⵠΔΔ) {
        d.ΔᐃΔΔⵠΔΔ = false;
        f = a;
        h = -Ej;
        i();
        Bf();
      }
    };
    var h = -1;
    function i() {
      d.ᐃⲆΔ();
      if (++h == 30) {
        d.stop();
        d.ᐃΔᐃⵠᐃⲆᐃ.style.display = "none";
        f();
        return;
      }
      kj.setTimeout(i, 33);
    }
    this.ⲆⵠΔⲆⵠ = false;
    this.stop = function () {
      this.ⲆⵠΔⲆⵠ = false;
    };
    this.ΔⲆᐃⵠΔ = function () {
      hx();
      document.getElementById("game_body").style.backgroundColor = Ur.ⵠᐃⵠⲆΔ[ax.time];
      d.ᐃΔᐃⵠᐃⲆᐃ.ΔᐃΔⲆⵠ();
      pf.ᐃᐃΔⵠⲆ.style.display = "inline-block";
      d.ⲆⵠΔⲆⵠ = true;
      d.ΔᐃΔΔⵠΔΔ = true;
      h = -Al;
      g = 0;
      e();
    };
    this.ᐃⲆΔ = function () {
      this.ᐃΔᐃⵠᐃⲆᐃ.translate.x = Math.floor(oq - 275);
      this.ᐃΔᐃⵠᐃⲆᐃ.translate.y = Math.floor(pq - this.ᐃΔᐃⵠᐃⲆᐃ.height - 28);
      pf.ᐃᐃΔⵠⲆ.translate.x = this.ᐃΔᐃⵠᐃⲆᐃ.translate.x - 350;
      pf.ᐃᐃΔⵠⲆ.translate.y = this.ᐃΔᐃⵠᐃⲆᐃ.translate.y + _a;
      pf.ᐃᐃΔⵠⲆ.ᐃⲆΔ();
      if (g != 30 || -Ej != h) {
        var a = ur;
        if (g != 30) {
          a = 1500 / (g + Ej) - 50;
        }
        if (h != -1) {
          a = -(1750 / (30 - h + zs) - 48);
        }
        this.ᐃΔᐃⵠᐃⲆᐃ.translate.y -= a;
      }
      this.ᐃΔᐃⵠᐃⲆᐃ.ᐃⲆΔ();
    };
    this.ⵠΔᐃⵠ = function () {
      mm();
      bx.alert.ⵠΔᐃⵠ("#FFF", "#000");
    };
  }
  function of(a, b, c) {
    const d = a ^ 28;
    const e = c ^ 17850;
    return (1013904223 + (58756 + (function (a, b) {
      const c = (a | 2156) & ~(a & 2156);
      const d = (40092 + b) % 65345;
      const e = Df(c, d);
      Ts(c, d);
      return e ^ 65074;
    }(d, (24 << (b >> 24 & 255)) + (qk << (b >> w & 255)) + (16 << (b >> 8 & 255)) + (8 << (b & 255))) ^ Ts(e, d))) * 1664525) % 4294967296;
  }
  function rf(a, b) {
    return (~(a & 31417) & a | ~(a & 31417) & 31417) ^ 50577;
  }
  function af() {
    ᐃⵠΔⵠ.ⲆⵠⵠᐃΔⲆⲆ("https://twitter.com/intent/tweet?text=I%20survived%20" + bx.ⲆΔⵠ + "%20days%20with%20" + bx.ⵠΔⵠΔᐃⲆΔ.ⵠⲆΔⵠΔ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  (function () {
    function b() {
      this.ΔᐃΔⲆⵠ();
    }
    b.prototype = {
      ΔᐃΔⲆⵠ: function () {
        var a = this || f;
        a.ΔⲆᐃΔᐃᐃⵠ = 1000;
        a.ᐃⲆⵠᐃⲆᐃΔ = {};
        a.ᐃⲆᐃᐃⵠ = [];
        a.ΔⲆⲆᐃΔ = !Ej;
        a.ΔⲆᐃⵠⲆ = 1;
        a.ΔⲆΔⵠⲆΔΔ = "canplaythrough";
        a.ΔⲆΔΔⲆ = typeof kj != "undefined" && kj.navigator ? kj.navigator : null;
        a.ᐃⲆⵠⲆᐃΔΔ = null;
        a.ⵠᐃΔΔⵠⲆΔ = !Zq;
        a.ᐃᐃⵠⵠⲆ = !gr;
        a.ᐃᐃΔⲆᐃᐃⵠ = true;
        a.Ⲇ = null;
        a.ⲆᐃΔⲆᐃΔᐃ = !Ih;
        a.ΔΔᐃⲆⵠΔΔ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.Ⲇ) {
          h();
        }
        if (b !== undefined && b >= 0 && b <= Oj) {
          c.ΔⲆᐃⵠⲆ = b;
          if (c.ΔⲆⲆᐃΔ) {
            return c;
          }
          if (c.ᐃᐃⵠⵠⲆ) {
            c.ᐃⲆⵠⲆᐃΔΔ.gain.value = b;
          }
          for (var d = rl; d < c.ᐃⲆᐃᐃⵠ.length; d++) {
            if (!c.ᐃⲆᐃᐃⵠ[d].Δⵠⵠⵠᐃ) {
              for (var g = c.ᐃⲆᐃᐃⵠ[d].ⵠⲆᐃⵠⲆ(), i = Rl; i < g.length; i++) {
                var j = c.ᐃⲆᐃᐃⵠ[d].ⲆᐃⵠΔΔ(g[i]);
                if (j && j.ⵠⲆⲆⵠ) {
                  j.ⵠⲆⲆⵠ.volume = j.ΔⲆᐃⵠⲆ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ΔⲆᐃⵠⲆ;
      },
      ᐃᐃᐃⵠⵠⲆⲆ: function (b) {
        var c = this || f;
        if (!c.Ⲇ) {
          h();
        }
        c.ΔⲆⲆᐃΔ = b;
        if (c.ᐃᐃⵠⵠⲆ) {
          c.ᐃⲆⵠⲆᐃΔΔ.gain.value = b ? Ih : c.ΔⲆᐃⵠⲆ;
        }
        for (var d = Rl; d < c.ᐃⲆᐃᐃⵠ.length; d++) {
          if (!c.ᐃⲆᐃᐃⵠ[d].Δⵠⵠⵠᐃ) {
            for (var e = c.ᐃⲆᐃᐃⵠ[d].ⵠⲆᐃⵠⲆ(), g = 0; g < e.length; g++) {
              var i = c.ᐃⲆᐃᐃⵠ[d].ⲆᐃⵠΔΔ(e[g]);
              if (i && i.ⵠⲆⲆⵠ) {
                i.ⵠⲆⲆⵠ.muted = !!b || i.ΔⲆⲆᐃΔ;
              }
            }
          }
        }
        return c;
      },
      ΔⲆⲆΔΔᐃⲆ: function () {
        var a = this || f;
        for (var b = a.ᐃⲆᐃᐃⵠ.length - 1; b >= 0; b--) {
          a.ᐃⲆᐃᐃⵠ[b].ΔⲆⲆΔΔᐃⲆ();
        }
        if (a.ᐃᐃⵠⵠⲆ && a.Ⲇ && a.Ⲇ.close !== undefined) {
          a.Ⲇ.close();
          a.Ⲇ = null;
          h();
        }
        return a;
      },
      ⲆⲆᐃΔΔⲆⵠⵠⲆ: function (a) {
        return (this || f).ᐃⲆⵠᐃⲆᐃΔ[a.replace(/^x-/, "")];
      },
      ΔΔᐃⲆⵠΔΔ: function () {
        var a = this || f;
        a.state = a.Ⲇ && a.Ⲇ.state || "running";
        a.ΔⵠᐃⵠΔⵠᐃ();
        if (!a.ᐃᐃⵠⵠⲆ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ΔⲆΔⵠⲆΔΔ = "canplay";
              }
            } catch (b) {
              a.ⵠᐃΔΔⵠⲆΔ = !Qs;
            }
          } else {
            a.ⵠᐃΔΔⵠⲆΔ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ⵠᐃΔΔⵠⲆΔ = !Tg;
          }
        } catch (a) { }
        if (!a.ⵠᐃΔΔⵠⲆΔ) {
          a.ⵠⲆⲆⲆᐃᐃⲆⵠΔ();
        }
        return a;
      },
      ⵠⲆⲆⲆᐃᐃⲆⵠΔ: function () {
        var a = this || f;
        var b = null;
        try {
          b = typeof Audio != "undefined" ? new Audio() : null;
        } catch (b) {
          return a;
        }
        if (!b || typeof b.canPlayType != "function") {
          return a;
        }
        var c = b.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var d = a.ΔⲆΔΔⲆ && a.ΔⲆΔΔⲆ.userAgent.match(/OPR\/([0-6].)/g);
        var e = d && parseInt(d[Gr].split("/")[_b], no) < 33;
        a.ᐃⲆⵠᐃⲆᐃΔ = {
          ᐃΔⵠᐃⵠⵠᐃⵠΔ: !e && (!!c || !!b.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ⲆⵠⲆⲆⲆⲆΔᐃⲆ: !!c,
          ᐃⲆⲆⵠᐃⵠⲆⲆⲆ: !!b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ᐃΔΔΔⵠΔΔΔⲆ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆⵠᐃΔⲆΔⵠΔΔ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⲆᐃⵠΔᐃⵠⵠⵠⵠ: !!b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ΔΔᐃⵠΔⵠⲆᐃⵠ: !!b.canPlayType("audio/aac;").replace(/^no$/, ""),
          ᐃⵠⵠⵠᐃᐃⲆⵠᐃ: !!b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ΔΔⵠⲆⵠⵠΔᐃⵠ: !!(b.canPlayType("audio/x-m4a;") || b.canPlayType("audio/m4a;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⵠΔᐃⵠΔΔΔΔⲆ: !!(b.canPlayType("audio/x-mp4;") || b.canPlayType("audio/mp4;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ΔⵠᐃⲆΔᐃΔⵠⵠ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ΔΔⵠⵠⵠⵠΔⲆᐃ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⵠΔΔⵠΔⵠⲆᐃⲆ: !!b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ΔΔⲆᐃᐃΔⲆⲆᐃ: !!(b.canPlayType("audio/x-flac;") || b.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return a;
      },
      ⵠⲆⲆⵠᐃᐃⲆᐃᐃ: function () {
        var a = this || f;
        var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ΔⲆΔΔⲆ && a.ΔⲆΔΔⲆ.userAgent);
        var c = !!("ontouchend" in kj) || !!a.ΔⲆΔΔⲆ && a.ΔⲆΔΔⲆ.maxTouchPoints > qk || !!a.ΔⲆΔΔⲆ && a.ΔⲆΔΔⲆ.ΔΔⵠᐃⲆᐃΔⲆⵠ > 0;
        if (!a.ᐃΔΔᐃⵠΔᐃ && a.Ⲇ && (b || c)) {
          a.ᐃΔΔᐃⵠΔᐃ = !Gs;
          if (!a.ⵠΔⲆΔⲆᐃΔⵠᐃ && a.Ⲇ.sampleRate !== 44100) {
            a.ⵠΔⲆΔⲆᐃΔⵠᐃ = true;
            a.ΔⲆⲆΔΔᐃⲆ();
          }
          a.ⲆᐃⵠⲆⲆᐃΔ = a.Ⲇ.createBuffer(Ag, _b, 22050);
          function b() {
            f.ΔᐃᐃΔΔⲆⵠ();
            var c = a.Ⲇ.createBufferSource();
            c.buffer = a.ⲆᐃⵠⲆⲆᐃΔ;
            c.connect(a.Ⲇ.destination);
            if (c.start === undefined) {
              c.ᐃⵠⵠΔΔΔⲆᐃΔ(ne);
            } else {
              c.start(Fj);
            }
            if (typeof a.Ⲇ.resume == "function") {
              a.Ⲇ.resume();
            }
            c.onended = function () {
              c.disconnect(0);
              a.ᐃΔΔᐃⵠΔᐃ = !uh;
              a.ⲆᐃΔⲆᐃΔᐃ = !Ej;
              document.removeEventListener("touchend", b, true);
            };
          }
          document.addEventListener("touchend", b, !qk);
          return a;
        }
      },
      ΔⵠᐃⵠΔⵠᐃ: function () {
        var a = this;
        if (a.ᐃᐃΔⲆᐃᐃⵠ && a.Ⲇ && a.Ⲇ.suspend !== undefined && f.ᐃᐃⵠⵠⲆ) {
          for (var b = Qs; b < a.ᐃⲆᐃᐃⵠ.length; b++) {
            if (a.ᐃⲆᐃᐃⵠ[b].Δⵠⵠⵠᐃ) {
              for (var c = 0; c < a.ᐃⲆᐃᐃⵠ[b].ᐃⵠⵠⵠᐃ.length; c++) {
                if (!a.ᐃⲆᐃᐃⵠ[b].ᐃⵠⵠⵠᐃ[c].ⵠⲆΔⵠⵠ) {
                  return a;
                }
              }
            }
          }
          if (a.ΔⲆⲆᐃⵠⵠⲆ) {
            clearTimeout(a.ΔⲆⲆᐃⵠⵠⲆ);
          }
          a.ΔⲆⲆᐃⵠⵠⲆ = setTimeout(function () {
            if (a.ᐃᐃΔⲆᐃᐃⵠ) {
              a.ΔⲆⲆᐃⵠⵠⲆ = null;
              a.state = "suspending";
              a.Ⲇ.suspend().then(function () {
                a.state = "suspended";
                if (a.ᐃΔΔⵠⲆΔⵠ) {
                  delete a.ᐃΔΔⵠⲆΔⵠ;
                  a.ΔᐃᐃΔΔⲆⵠ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ΔᐃᐃΔΔⲆⵠ: function () {
        var a = this;
        if (a.Ⲇ && a.Ⲇ.resume !== undefined && f.ᐃᐃⵠⵠⲆ) {
          if (a.state === "running" && a.ΔⲆⲆᐃⵠⵠⲆ) {
            clearTimeout(a.ΔⲆⲆᐃⵠⵠⲆ);
            a.ΔⲆⲆᐃⵠⵠⲆ = null;
          } else if (a.state === "suspended") {
            a.Ⲇ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ᐃⲆᐃᐃⵠ.length; b++) {
                a.ᐃⲆᐃᐃⵠ[b].ⲆⲆⵠᐃΔ("resume");
              }
            });
            if (a.ΔⲆⲆᐃⵠⵠⲆ) {
              clearTimeout(a.ΔⲆⲆᐃⵠⵠⲆ);
              a.ΔⲆⲆᐃⵠⵠⲆ = null;
            }
          } else if (a.state === "suspending") {
            a.ᐃΔΔⵠⲆΔⵠ = !uh;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ΔᐃΔⲆⵠ(a);
      } else {
        console.error(undefined);
      }
    }
    c.prototype = {
      ΔᐃΔⲆⵠ: function (a) {
        var b = this;
        if (!f.Ⲇ) {
          h();
        }
        b.ΔⵠⵠⲆᐃΔᐃⲆⵠ = a.autoplay || false;
        b.ⲆⵠᐃⵠΔᐃᐃ = typeof a.Δⵠⵠᐃⵠⵠⵠ != "string" ? a.Δⵠⵠᐃⵠⵠⵠ : [a.Δⵠⵠᐃⵠⵠⵠ];
        b.ⵠⵠΔᐃΔᐃΔ = a.ᐃⲆΔⲆᐃΔⲆΔⲆ || false;
        b.ΔⲆⲆᐃΔ = a.ᐃᐃᐃⵠⵠⲆⲆ || !zs;
        b.ⵠΔΔⲆⵠ = a.loop || false;
        b.ⲆᐃᐃΔΔΔΔᐃᐃ = a.ⲆᐃᐃᐃΔᐃⲆⵠΔ || Os;
        b.ⵠⵠⲆΔᐃⵠᐃⵠΔ = typeof a.preload != "boolean" || a.preload;
        b.ⵠᐃⵠⲆⲆ = a.rate || Ok;
        b.ᐃΔΔᐃΔ = a.ΔΔ || {};
        b.ⵠⲆⲆΔᐃ = typeof a.src != "string" ? a.src : [a.src];
        b.ΔⲆᐃⵠⲆ = a.volume !== undefined ? a.volume : 1;
        b.ᐃᐃᐃⵠⲆᐃᐃ = uh;
        b.ⲆⵠᐃΔᐃ = "unloaded";
        b.ᐃⵠⵠⵠᐃ = [];
        b.ᐃⲆΔⲆⲆΔⵠ = {};
        b.ⲆⲆⵠΔΔ = [];
        b.ᐃⵠΔᐃⲆᐃⲆⵠΔ = a.onend ? [{
          ⲆⲆⵠⲆᐃ: a.onend
        }] : [];
        b.ⵠⵠⲆΔⲆΔΔᐃⲆ = a.onfade ? [{
          ⲆⲆⵠⲆᐃ: a.onfade
        }] : [];
        b.ⵠⲆⲆⵠᐃᐃⵠⲆᐃ = a.onload ? [{
          ⲆⲆⵠⲆᐃ: a.onload
        }] : [];
        b.ⵠⲆⲆΔⵠⵠⲆᐃⲆ = a.ΔⲆⵠΔⵠΔΔⲆᐃ ? [{
          ⲆⲆⵠⲆᐃ: a.ΔⲆⵠΔⵠΔΔⲆᐃ
        }] : [];
        b.ᐃᐃⲆᐃᐃᐃⲆᐃⲆ = a.onpause ? [{
          ⲆⲆⵠⲆᐃ: a.onpause
        }] : [];
        b.ΔⲆⲆⲆᐃⲆⲆⲆᐃ = a.onplay ? [{
          ⲆⲆⵠⲆᐃ: a.onplay
        }] : [];
        b.ⵠⲆᐃᐃᐃⲆⲆⵠΔ = a.onstop ? [{
          ⲆⲆⵠⲆᐃ: a.onstop
        }] : [];
        b.ΔⲆᐃΔⵠᐃⵠⲆΔ = a.onmute ? [{
          ⲆⲆⵠⲆᐃ: a.onmute
        }] : [];
        b.ⵠⲆᐃΔⲆᐃΔᐃⵠ = a.ΔⵠᐃⵠΔⲆⵠⲆⵠ ? [{
          ⲆⲆⵠⲆᐃ: a.ΔⵠᐃⵠΔⲆⵠⲆⵠ
        }] : [];
        b.ⲆᐃⵠΔΔΔΔⲆΔ = a.ΔⵠⵠⵠΔⲆⲆᐃᐃ ? [{
          ⲆⲆⵠⲆᐃ: a.ΔⵠⵠⵠΔⲆⲆᐃᐃ
        }] : [];
        b.ΔΔΔⵠⵠᐃⵠⵠΔ = a.ⲆⵠⲆⵠΔΔᐃⵠᐃ ? [{
          ⲆⲆⵠⲆᐃ: a.ⲆⵠⲆⵠΔΔᐃⵠᐃ
        }] : [];
        b.ΔΔⵠⲆᐃᐃⵠⵠΔ = [];
        b.Δⵠⵠⵠᐃ = f.ᐃᐃⵠⵠⲆ && !b.ⵠⵠΔᐃΔᐃΔ;
        if (f.Ⲇ !== undefined && f.Ⲇ && f.ⲆᐃΔⲆᐃΔᐃ) {
          f.ⵠⲆⲆⵠᐃᐃⲆᐃᐃ();
        }
        f.ᐃⲆᐃᐃⵠ.push(b);
        if (b.ΔⵠⵠⲆᐃΔᐃⲆⵠ) {
          b.ⲆⲆⵠΔΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ⵠⵠⲆΔᐃⵠᐃⵠΔ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var b = this;
        var c = null;
        if (!f.ⵠᐃΔΔⵠⲆΔ) {
          if (typeof b.ⵠⲆⲆΔᐃ == "string") {
            b.ⵠⲆⲆΔᐃ = [b.ⵠⲆⲆΔᐃ];
          }
          for (var e = Tg; e < b.ⵠⲆⲆΔᐃ.length; e++) {
            var g;
            var h;
            if (b.ⲆⵠᐃⵠΔᐃᐃ && b.ⲆⵠᐃⵠΔᐃᐃ[e]) {
              g = b.ⲆⵠᐃⵠΔᐃᐃ[e];
            } else {
              if (typeof (h = b.ⵠⲆⲆΔᐃ[e]) != "string") {
                b.ⲆⲆⵠᐃΔ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(g = /^data:audio\/([^;,]+);/i.exec(h))) {
                g = /\.([^.]+)$/.exec(h.split("?", zs)[0]);
              }
              g &&= g[Ht].toLowerCase();
            }
            if (!g) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (g && f.ⲆⲆᐃΔΔⲆⵠⵠⲆ(g)) {
              c = b.ⵠⲆⲆΔᐃ[e];
              break;
            }
          }
          if (c) {
            b.ⵠⲆⲆΔᐃ = c;
            b.ⲆⵠᐃΔᐃ = "loading";
            if (kj.location.protocol === "https:" && c.slice(0, 5) === "http:") {
              b.ⵠⵠΔᐃΔᐃΔ = true;
              b.Δⵠⵠⵠᐃ = !Ue;
            }
            new d(b);
            if (b.Δⵠⵠⵠᐃ) {
              i(b);
            }
            return b;
          } else {
            b.ⲆⲆⵠᐃΔ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        b.ⲆⲆⵠᐃΔ("loaderror", null, "No audio support.");
      },
      play: function (d, g) {
        var i = this;
        var j = null;
        if (typeof d == "number") {
          j = d;
          d = null;
        } else {
          if (typeof d == "string" && i.ⲆⵠᐃΔᐃ === "loaded" && !i.ᐃΔΔᐃΔ[d]) {
            return null;
          }
          if (d === undefined) {
            d = "__default";
            var k = 0;
            for (var n = 0; n < i.ᐃⵠⵠⵠᐃ.length; n++) {
              if (i.ᐃⵠⵠⵠᐃ[n].ⵠⲆΔⵠⵠ && !i.ᐃⵠⵠⵠᐃ[n].ΔⵠⲆⵠΔ) {
                k++;
                j = i.ᐃⵠⵠⵠᐃ[n].ᐃᐃⵠΔ;
              }
            }
            if (Eo === k) {
              d = null;
            } else {
              j = null;
            }
          }
        }
        var q = j ? i.ⲆᐃⵠΔΔ(j) : i.ⵠⵠΔᐃⵠΔΔⲆⵠ();
        if (!q) {
          return null;
        }
        if (j && !d) {
          d = q.ᐃΔΔᐃΔ || "__default";
        }
        if (i.ⲆⵠᐃΔᐃ !== "loaded") {
          q.ᐃΔΔᐃΔ = d;
          q.ΔⵠⲆⵠΔ = false;
          var p = q.ᐃᐃⵠΔ;
          i.ⲆⲆⵠΔΔ.push({
            event: "play",
            action: function () {
              i.play(p);
            }
          });
          return p;
        }
        if (j && !q.ⵠⲆΔⵠⵠ) {
          if (!g) {
            setTimeout(function () {
              i.ⲆⲆⵠᐃΔ("play", q.ᐃᐃⵠΔ);
            }, 0);
          }
          return q.ᐃᐃⵠΔ;
        }
        if (i.Δⵠⵠⵠᐃ) {
          f.ΔᐃᐃΔΔⲆⵠ();
        }
        var h = Math.max(0, q.ᐃᐃΔΔΔ > 0 ? q.ᐃᐃΔΔΔ : i.ᐃΔΔᐃΔ[d][0] / 1000);
        var l = Math.max(gr, (i.ᐃΔΔᐃΔ[d][qn] + i.ᐃΔΔᐃΔ[d][Al]) / 1000 - h);
        var s = l * 1000 / Math.abs(q.ⵠᐃⵠⲆⲆ);
        q.ⵠⲆΔⵠⵠ = false;
        q.ΔⵠⲆⵠΔ = !As;
        q.ᐃΔΔᐃΔ = d;
        q.ᐃᐃΔΔΔ = h;
        q.ⲆᐃΔⲆⵠ = i.ᐃΔΔᐃΔ[d][0] / 1000;
        q.ΔᐃⲆⲆᐃΔᐃ = (i.ᐃΔΔᐃΔ[d][0] + i.ᐃΔΔᐃΔ[d][ie]) / 1000;
        q.ⵠΔΔⲆⵠ = !!q.ⵠΔΔⲆⵠ || !!i.ᐃΔΔᐃΔ[d][2];
        var b = q.ⵠⲆⲆⵠ;
        if (i.Δⵠⵠⵠᐃ) {
          function a() {
            i.ⲆⵠⵠⲆᐃⲆⵠᐃⲆ(q);
            var a = q.ΔⲆⲆᐃΔ || i.ΔⲆⲆᐃΔ ? Fj : q.ΔⲆᐃⵠⲆ;
            b.gain.setValueAtTime(a, f.Ⲇ.currentTime);
            q.ⵠⵠΔΔⲆⵠᐃ = f.Ⲇ.currentTime;
            if (b.ᐃΔΔⲆⵠ.start === undefined) {
              if (q.ⵠΔΔⲆⵠ) {
                b.ᐃΔΔⲆⵠ.ᐃᐃᐃᐃⵠᐃⲆΔⵠ(Qs, h, 86400);
              } else {
                b.ᐃΔΔⲆⵠ.ᐃᐃᐃᐃⵠᐃⲆΔⵠ(0, h, l);
              }
            } else if (q.ⵠΔΔⲆⵠ) {
              b.ᐃΔΔⲆⵠ.start(Tg, h, 86400);
            } else {
              b.ᐃΔΔⲆⵠ.start(0, h, l);
            }
            if (s !== _b / gr) {
              i.ᐃⲆΔⲆⲆΔⵠ[q.ᐃᐃⵠΔ] = setTimeout(i.ΔⵠⲆⵠΔ.bind(i, q), s);
            }
            if (!g) {
              setTimeout(function () {
                i.ⲆⲆⵠᐃΔ("play", q.ᐃᐃⵠΔ);
              }, 0);
            }
          }
          var t = f.state === "running";
          if (i.ⲆⵠᐃΔᐃ === "loaded" && t) {
            a();
          } else {
            var c = t || i.ⲆⵠᐃΔᐃ !== "loaded" ? "load" : "resume";
            i.once(c, a, t ? q.ᐃᐃⵠΔ : null);
            i.ᐃΔΔⵠⵠΔⵠ(q.ᐃᐃⵠΔ);
          }
        } else {
          function a() {
            b.currentTime = h;
            b.muted = q.ΔⲆⲆᐃΔ || i.ΔⲆⲆᐃΔ || f.ΔⲆⲆᐃΔ || b.muted;
            b.volume = q.ΔⲆᐃⵠⲆ * f.volume();
            b.playbackRate = q.ⵠᐃⵠⲆⲆ;
            b.play();
            if (s !== Infinity) {
              i.ᐃⲆΔⲆⲆΔⵠ[q.ᐃᐃⵠΔ] = setTimeout(i.ΔⵠⲆⵠΔ.bind(i, q), s);
            }
            if (!g) {
              i.ⲆⲆⵠᐃΔ("play", q.ᐃᐃⵠΔ);
            }
          }
          var m = i.ⲆⵠᐃΔᐃ === "loaded" && (kj && kj.Δⵠᐃⵠⵠⵠᐃᐃᐃ || !b.readyState && f.ΔⲆΔΔⲆ.ΔⵠᐃΔⲆᐃⲆᐃⲆ);
          if (ug === b.readyState || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ΔⲆΔⵠⲆΔΔ, c, !Fh);
            }
            b.addEventListener(f.ΔⲆΔⵠⲆΔΔ, c, false);
            i.ᐃΔΔⵠⵠΔⵠ(q.ᐃᐃⵠΔ);
          }
        }
        return q.ᐃᐃⵠΔ;
      },
      pause: function (a) {
        var b = this;
        if (b.ⲆⵠᐃΔᐃ !== "loaded") {
          b.ⲆⲆⵠΔΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ⵠⲆᐃⵠⲆ(a), d = vq; d < c.length; d++) {
          b.ᐃΔΔⵠⵠΔⵠ(c[d]);
          var e = b.ⲆᐃⵠΔΔ(c[d]);
          if (e && !e.ⵠⲆΔⵠⵠ && (e.ᐃᐃΔΔΔ = b.ΔⵠΔⵠⵠⵠⲆ(c[d]), e.ⵠⵠⲆⲆᐃᐃᐃ = 0, e.ⵠⲆΔⵠⵠ = true, b.ᐃⵠⲆⲆᐃΔΔ(c[d]), e.ⵠⲆⲆⵠ)) {
            if (b.Δⵠⵠⵠᐃ) {
              if (!e.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ) {
                continue;
              }
              if (e.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.stop === undefined) {
                e.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.ⵠⵠΔᐃΔⲆΔⵠⵠ(0);
              } else {
                e.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.stop(0);
              }
              b.ⲆΔⲆΔΔⵠⵠ(e.ⵠⲆⲆⵠ);
            } else if (!isNaN(e.ⵠⲆⲆⵠ.duration) || e.ⵠⲆⲆⵠ.duration === jq / Nl) {
              e.ⵠⲆⲆⵠ.pause();
            }
          }
          if (!arguments[j]) {
            b.ⲆⲆⵠᐃΔ("pause", e ? e.ᐃᐃⵠΔ : null);
          }
        }
        return b;
      },
      stop: function (a, b) {
        var c = this;
        if (c.ⲆⵠᐃΔᐃ !== "loaded") {
          c.ⲆⲆⵠΔΔ.push({
            event: "stop",
            action: function () {
              c.stop(a);
            }
          });
          return c;
        }
        for (var d = c.ⵠⲆᐃⵠⲆ(a), e = ur; e < d.length; e++) {
          c.ᐃΔΔⵠⵠΔⵠ(d[e]);
          var f = c.ⲆᐃⵠΔΔ(d[e]);
          if (f) {
            f.ᐃᐃΔΔΔ = f.ⲆᐃΔⲆⵠ || 0;
            f.ⵠⵠⲆⲆᐃᐃᐃ = Cn;
            f.ⵠⲆΔⵠⵠ = true;
            f.ΔⵠⲆⵠΔ = true;
            c.ᐃⵠⲆⲆᐃΔΔ(d[e]);
            if (f.ⵠⲆⲆⵠ) {
              if (c.Δⵠⵠⵠᐃ) {
                if (f.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ) {
                  if (f.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.stop === undefined) {
                    f.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.ⵠⵠΔᐃΔⲆΔⵠⵠ(Nl);
                  } else {
                    f.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.stop(qn);
                  }
                  c.ⲆΔⲆΔΔⵠⵠ(f.ⵠⲆⲆⵠ);
                }
              } else if (!isNaN(f.ⵠⲆⲆⵠ.duration) || f.ⵠⲆⲆⵠ.duration === 1 / _a) {
                f.ⵠⲆⲆⵠ.currentTime = f.ⲆᐃΔⲆⵠ || ne;
                f.ⵠⲆⲆⵠ.pause();
              }
            }
            if (!b) {
              c.ⲆⲆⵠᐃΔ("stop", f.ᐃᐃⵠΔ);
            }
          }
        }
        return c;
      },
      ᐃᐃᐃⵠⵠⲆⲆ: function (b, c) {
        var d = this;
        if (d.ⲆⵠᐃΔᐃ !== "loaded") {
          d.ⲆⲆⵠΔΔ.push({
            event: "mute",
            action: function () {
              d.ᐃᐃᐃⵠⵠⲆⲆ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ΔⲆⲆᐃΔ;
          }
          d.ΔⲆⲆᐃΔ = b;
        }
        for (var e = d.ⵠⲆᐃⵠⲆ(c), g = 0; g < e.length; g++) {
          var h = d.ⲆᐃⵠΔΔ(e[g]);
          if (h) {
            h.ΔⲆⲆᐃΔ = b;
            if (d.Δⵠⵠⵠᐃ && h.ⵠⲆⲆⵠ) {
              h.ⵠⲆⲆⵠ.gain.setValueAtTime(b ? 0 : h.ΔⲆᐃⵠⲆ, f.Ⲇ.currentTime);
            } else if (h.ⵠⲆⲆⵠ) {
              h.ⵠⲆⲆⵠ.muted = !!f.ΔⲆⲆᐃΔ || b;
            }
            d.ⲆⲆⵠᐃΔ("mute", h.ᐃᐃⵠΔ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (Qs === h.length) {
          return g.ΔⲆᐃⵠⲆ;
        }
        if (Ag === h.length || h.length === 2 && h[1] === undefined) {
          if (g.ⵠⲆᐃⵠⲆ().indexOf(h[0]) >= 0) {
            c = parseInt(h[0], bb);
          } else {
            b = parseFloat(h[0]);
          }
        } else if (h.length >= 2) {
          b = parseFloat(h[0]);
          c = parseInt(h[Al], ct);
        }
        if (b === undefined || b < 0 || b > 1) {
          if (d = c ? g.ⲆᐃⵠΔΔ(c) : g.ᐃⵠⵠⵠᐃ[Tg]) {
            return d.ΔⲆᐃⵠⲆ;
          } else {
            return uh;
          }
        }
        if (g.ⲆⵠᐃΔᐃ !== "loaded") {
          g.ⲆⲆⵠΔΔ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ΔⲆᐃⵠⲆ = b;
        }
        c = g.ⵠⲆᐃⵠⲆ(c);
        for (var i = 0; i < c.length; i++) {
          if (d = g.ⲆᐃⵠΔΔ(c[i])) {
            d.ΔⲆᐃⵠⲆ = b;
            if (!h[gc]) {
              g.ᐃⵠⲆⲆᐃΔΔ(c[i]);
            }
            if (g.Δⵠⵠⵠᐃ && d.ⵠⲆⲆⵠ && !d.ΔⲆⲆᐃΔ) {
              d.ⵠⲆⲆⵠ.gain.setValueAtTime(b, f.Ⲇ.currentTime);
            } else if (d.ⵠⲆⲆⵠ && !d.ΔⲆⲆᐃΔ) {
              d.ⵠⲆⲆⵠ.volume = b * f.volume();
            }
            g.ⲆⲆⵠᐃΔ("volume", d.ᐃᐃⵠΔ);
          }
        }
        return g;
      },
      fade: function (j, e, i, k) {
        var m = this;
        var n = Math.abs(j - e);
        var a = j > e ? "out" : "in";
        var o = n / 0.01;
        var q = o > ur ? i / o : i;
        if (q < hn) {
          o = Math.ceil(o / (4 / q));
          q = uj;
        }
        if (m.ⲆⵠᐃΔᐃ !== "loaded") {
          m.ⲆⲆⵠΔΔ.push({
            event: p[zh],
            action: function () {
              m.fade(j, e, i, k);
            }
          });
          return m;
        }
        m.volume(j, k);
        for (var r = m.ⵠⲆᐃⵠⲆ(k), g = 0; g < r.length; g++) {
          var s = m.ⲆᐃⵠΔΔ(r[g]);
          if (s) {
            if (!k) {
              m.ᐃⵠⲆⲆᐃΔΔ(r[g]);
            }
            if (m.Δⵠⵠⵠᐃ && !s.ΔⲆⲆᐃΔ) {
              var t = f.Ⲇ.currentTime;
              var w = t + i / 1000;
              s.ΔⲆᐃⵠⲆ = j;
              s.ⵠⲆⲆⵠ.gain.setValueAtTime(j, t);
              s.ⵠⲆⲆⵠ.gain.linearRampToValueAtTime(e, w);
            }
            var x = j;
            s.ΔⲆⲆᐃⲆΔⵠ = setInterval(function (b, c) {
              if (o > uh) {
                x += a === "in" ? 0.01 : -0.01;
              }
              x = Math.max(0, x);
              x = Math.min(1, x);
              x = Math.round(x * 100) / ut;
              if (m.Δⵠⵠⵠᐃ) {
                if (k === undefined) {
                  m.ΔⲆᐃⵠⲆ = x;
                }
                c.ΔⲆᐃⵠⲆ = x;
              } else {
                m.volume(x, b, !qn);
              }
              if (e < j && x <= e || e > j && x >= e) {
                clearInterval(c.ΔⲆⲆᐃⲆΔⵠ);
                c.ΔⲆⲆᐃⲆΔⵠ = null;
                m.volume(e, b);
                m.ⲆⲆⵠᐃΔ(p[at], b);
              }
            }.bind(m, r[g], s), q);
          }
        }
        return m;
      },
      ᐃⵠⲆⲆᐃΔΔ: function (a) {
        var b = this;
        var c = b.ⲆᐃⵠΔΔ(a);
        if (c && c.ΔⲆⲆᐃⲆΔⵠ) {
          if (b.Δⵠⵠⵠᐃ) {
            c.ⵠⲆⲆⵠ.gain.cancelScheduledValues(f.Ⲇ.currentTime);
          }
          clearInterval(c.ΔⲆⲆᐃⲆΔⵠ);
          c.ΔⲆⲆᐃⲆΔⵠ = null;
          b.ⲆⲆⵠᐃΔ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (rl === g.length) {
          return f.ⵠΔΔⲆⵠ;
        }
        if (aa === g.length) {
          if (typeof g[Qs] != "boolean") {
            return !!(d = f.ⲆᐃⵠΔΔ(parseInt(g[uh], xk))) && d.ⵠΔΔⲆⵠ;
          }
          b = g[0];
          f.ⵠΔΔⲆⵠ = b;
        } else if (g.length === 2) {
          b = g[gr];
          c = parseInt(g[j], 10);
        }
        for (var h = f.ⵠⲆᐃⵠⲆ(c), k = uh; k < h.length; k++) {
          if (d = f.ⲆᐃⵠΔΔ(h[k])) {
            d.ⵠΔΔⲆⵠ = b;
            if (f.Δⵠⵠⵠᐃ && d.ⵠⲆⲆⵠ && d.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ) {
              d.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.loop = b;
              if (b) {
                d.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.loopStart = d.ⲆᐃΔⲆⵠ || Cn;
                d.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.loopEnd = d.ΔᐃⲆⲆᐃΔᐃ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var i = arguments;
        if (Rl === i.length) {
          c = g.ᐃⵠⵠⵠᐃ[uh].ᐃᐃⵠΔ;
        } else if (i.length === 1) {
          if (g.ⵠⲆᐃⵠⲆ().indexOf(i[0]) >= 0) {
            c = parseInt(i[Nl], 10);
          } else {
            b = parseFloat(i[qk]);
          }
        } else if (Tt === i.length) {
          b = parseFloat(i[Gr]);
          c = parseInt(i[Zq], 10);
        }
        if (typeof b != "number") {
          if (d = g.ⲆᐃⵠΔΔ(c)) {
            return d.ⵠᐃⵠⲆⲆ;
          } else {
            return g.ⵠᐃⵠⲆⲆ;
          }
        }
        if (g.ⲆⵠᐃΔᐃ !== "loaded") {
          g.ⲆⲆⵠΔΔ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, i);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⵠᐃⵠⲆⲆ = b;
        }
        c = g.ⵠⲆᐃⵠⲆ(c);
        for (var j = uh; j < c.length; j++) {
          if (d = g.ⲆᐃⵠΔΔ(c[j])) {
            d.ⵠⵠⲆⲆᐃᐃᐃ = g.ΔⵠΔⵠⵠⵠⲆ(c[j]);
            d.ⵠⵠΔΔⲆⵠᐃ = g.Δⵠⵠⵠᐃ ? f.Ⲇ.currentTime : d.ⵠⵠΔΔⲆⵠᐃ;
            d.ⵠᐃⵠⲆⲆ = b;
            if (g.Δⵠⵠⵠᐃ && d.ⵠⲆⲆⵠ && d.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ) {
              d.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.playbackRate.value = b;
            } else if (d.ⵠⲆⲆⵠ) {
              d.ⵠⲆⲆⵠ.playbackRate = b;
            }
            var k = g.ΔⵠΔⵠⵠⵠⲆ(c[j]);
            var l = ((g.ᐃΔΔᐃΔ[d.ᐃΔΔᐃΔ][uh] + g.ᐃΔΔᐃΔ[d.ᐃΔΔᐃΔ][As]) / 1000 - k) * 1000 / Math.abs(d.ⵠᐃⵠⲆⲆ);
            if (!!g.ᐃⲆΔⲆⲆΔⵠ[c[j]] || !d.ⵠⲆΔⵠⵠ) {
              g.ᐃΔΔⵠⵠΔⵠ(c[j]);
              g.ᐃⲆΔⲆⲆΔⵠ[c[j]] = setTimeout(g.ΔⵠⲆⵠΔ.bind(g, d), l);
            }
            g.ⲆⲆⵠᐃΔ("rate", d.ᐃᐃⵠΔ);
          }
        }
        return g;
      },
      ΔⵠΔⵠⵠⵠⲆ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (rl === g.length) {
          c = d.ᐃⵠⵠⵠᐃ[Nl].ᐃᐃⵠΔ;
        } else if (Ue === g.length) {
          if (d.ⵠⲆᐃⵠⲆ().indexOf(g[Cn]) >= gr) {
            c = parseInt(g[0], Hs);
          } else {
            c = d.ᐃⵠⵠⵠᐃ[0].ᐃᐃⵠΔ;
            b = parseFloat(g[ne]);
          }
        } else if (tg === g.length) {
          b = parseFloat(g[Cn]);
          c = parseInt(g[1], Qa);
        }
        if (c === undefined) {
          return d;
        }
        if (d.ⲆⵠᐃΔᐃ !== "loaded") {
          d.ⲆⲆⵠΔΔ.push({
            event: "seek",
            action: function () {
              d.ΔⵠΔⵠⵠⵠⲆ.apply(d, g);
            }
          });
          return d;
        }
        var i = d.ⲆᐃⵠΔΔ(c);
        if (i) {
          if (typeof b != "number" || b < qn) {
            if (d.Δⵠⵠⵠᐃ) {
              var j = d.ⵠⵠⲆⵠΔⲆᐃ(c) ? f.Ⲇ.currentTime - i.ⵠⵠΔΔⲆⵠᐃ : qk;
              var a = i.ⵠⵠⲆⲆᐃᐃᐃ ? i.ⵠⵠⲆⲆᐃᐃᐃ - i.ᐃᐃΔΔΔ : Cn;
              return i.ᐃᐃΔΔΔ + (a + j * Math.abs(i.ⵠᐃⵠⲆⲆ));
            }
            return i.ⵠⲆⲆⵠ.currentTime;
          }
          var k = d.ⵠⵠⲆⵠΔⲆᐃ(c);
          if (k) {
            d.pause(c, true);
          }
          i.ᐃᐃΔΔΔ = b;
          i.ΔⵠⲆⵠΔ = false;
          d.ᐃΔΔⵠⵠΔⵠ(c);
          if (k) {
            d.play(c, !uh);
          }
          if (!d.Δⵠⵠⵠᐃ && i.ⵠⲆⲆⵠ) {
            i.ⵠⲆⲆⵠ.currentTime = b;
          }
          d.ⲆⲆⵠᐃΔ("seek", c);
        }
        return d;
      },
      ⵠⵠⲆⵠΔⲆᐃ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ⲆᐃⵠΔΔ(a);
          return !!c && !c.ⵠⲆΔⵠⵠ;
        }
        for (var d = 0; d < b.ᐃⵠⵠⵠᐃ.length; d++) {
          if (!b.ᐃⵠⵠⵠᐃ[d].ⵠⲆΔⵠⵠ) {
            return true;
          }
        }
        return !Eo;
      },
      duration: function (a) {
        var b = this;
        var c = b.ᐃᐃᐃⵠⲆᐃᐃ;
        var d = b.ⲆᐃⵠΔΔ(a);
        if (d) {
          c = b.ᐃΔΔᐃΔ[d.ᐃΔΔᐃΔ][j] / 1000;
        }
        return c;
      },
      state: function () {
        return this.ⲆⵠᐃΔᐃ;
      },
      ΔⲆⲆΔΔᐃⲆ: function () {
        var b = this;
        for (var c = b.ᐃⵠⵠⵠᐃ, d = gr; d < c.length; d++) {
          if (!c[d].ⵠⲆΔⵠⵠ) {
            b.stop(c[d].ᐃᐃⵠΔ);
          }
          if (!b.Δⵠⵠⵠᐃ) {
            if (!/MSIE |Trident\//.test(f.ΔⲆΔΔⲆ && f.ΔⲆΔΔⲆ.userAgent)) {
              c[d].ⵠⲆⲆⵠ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].ⵠⲆⲆⵠ.removeEventListener("error", c[d].ⲆᐃΔΔᐃⵠⵠ, !ag);
            c[d].ⵠⲆⲆⵠ.removeEventListener(f.ΔⲆΔⵠⲆΔΔ, c[d].ⲆΔⲆΔⲆΔⵠ, false);
          }
          delete c[d].ⵠⲆⲆⵠ;
          b.ᐃΔΔⵠⵠΔⵠ(c[d].ᐃᐃⵠΔ);
          var h = f.ᐃⲆᐃᐃⵠ.indexOf(b);
          if (h >= qk) {
            f.ᐃⲆᐃᐃⵠ.splice(h, 1);
          }
        }
        var i = true;
        for (d = 0; d < f.ᐃⲆᐃᐃⵠ.length; d++) {
          if (f.ᐃⲆᐃᐃⵠ[d].ⵠⲆⲆΔᐃ === b.ⵠⲆⲆΔᐃ) {
            i = !ie;
            break;
          }
        }
        if (g && i) {
          delete g[b.ⵠⲆⲆΔᐃ];
        }
        f.ⵠᐃΔΔⵠⲆΔ = false;
        b.ⲆⵠᐃΔᐃ = "unloaded";
        b.ᐃⵠⵠⵠᐃ = [];
        b = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this["_on" + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⲆⲆⵠⲆᐃ: b,
            once: d
          } : {
            id: c,
            ⲆⲆⵠⲆᐃ: b
          });
        }
        return this;
      },
      ⲆⲆⲆᐃΔⲆⲆⲆⵠ: function (b, c, d) {
        var e = this;
        var f = e["_on" + b];
        var g = Tg;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = 0; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⲆⲆⵠⲆᐃ && h || !c && h) {
              f.splice(g, 1);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = tj; g < j.length; g++) {
            if (qn === j[g].indexOf("_on") && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ⲆⲆⵠᐃΔ: function (a, b, c) {
        var d = this;
        var e = d["_on" + a];
        for (var f = e.length - Ht; f >= Cn; f--) {
          if (!e[f].id || e[f].id === b || a === "load") {
            setTimeout(function (a) {
              a.call(this, b, c);
            }.bind(d, e[f].ⲆⲆⵠⲆᐃ), qn);
            if (e[f].once) {
              d.ⲆⲆⲆᐃΔⲆⲆⲆⵠ(a, e[f].ⲆⲆⵠⲆᐃ, e[f].id);
            }
          }
        }
        return d;
      },
      ᐃⵠᐃⲆⲆⲆΔ: function () {
        var a = this;
        if (a.ⲆⲆⵠΔΔ.length > _a) {
          var b = a.ⲆⲆⵠΔΔ[0];
          a.once(b.event, function () {
            a.ⲆⲆⵠΔΔ.shift();
            a.ᐃⵠᐃⲆⲆⲆΔ();
          });
          b.action();
        }
        return a;
      },
      ΔⵠⲆⵠΔ: function (a) {
        var b = this;
        var c = a.ᐃΔΔᐃΔ;
        if (!b.Δⵠⵠⵠᐃ && b.ⵠⲆⲆⵠ && !b.ⵠⲆⲆⵠ.ended) {
          setTimeout(b.ΔⵠⲆⵠΔ.bind(b, a), Tk);
          return b;
        }
        var d = !!a.ⵠΔΔⲆⵠ || !!b.ᐃΔΔᐃΔ[c][re];
        b.ⲆⲆⵠᐃΔ("end", a.ᐃᐃⵠΔ);
        if (!b.Δⵠⵠⵠᐃ && d) {
          b.stop(a.ᐃᐃⵠΔ, !Tg).play(a.ᐃᐃⵠΔ);
        }
        if (b.Δⵠⵠⵠᐃ && d) {
          b.ⲆⲆⵠᐃΔ("play", a.ᐃᐃⵠΔ);
          a.ᐃᐃΔΔΔ = a.ⲆᐃΔⲆⵠ || uh;
          a.ⵠⵠⲆⲆᐃᐃᐃ = 0;
          a.ⵠⵠΔΔⲆⵠᐃ = f.Ⲇ.currentTime;
          var e = (a.ΔᐃⲆⲆᐃΔᐃ - a.ⲆᐃΔⲆⵠ) * 1000 / Math.abs(a.ⵠᐃⵠⲆⲆ);
          b.ᐃⲆΔⲆⲆΔⵠ[a.ᐃᐃⵠΔ] = setTimeout(b.ΔⵠⲆⵠΔ.bind(b, a), e);
        }
        if (b.Δⵠⵠⵠᐃ && !d) {
          a.ⵠⲆΔⵠⵠ = !Nl;
          a.ΔⵠⲆⵠΔ = !tj;
          a.ᐃᐃΔΔΔ = a.ⲆᐃΔⲆⵠ || 0;
          a.ⵠⵠⲆⲆᐃᐃᐃ = vq;
          b.ᐃΔΔⵠⵠΔⵠ(a.ᐃᐃⵠΔ);
          b.ⲆΔⲆΔΔⵠⵠ(a.ⵠⲆⲆⵠ);
          f.ΔⵠᐃⵠΔⵠᐃ();
        }
        if (!b.Δⵠⵠⵠᐃ && !d) {
          b.stop(a.ᐃᐃⵠΔ);
        }
        return b;
      },
      ᐃΔΔⵠⵠΔⵠ: function (a) {
        var b = this;
        if (b.ᐃⲆΔⲆⲆΔⵠ[a]) {
          clearTimeout(b.ᐃⲆΔⲆⲆΔⵠ[a]);
          delete b.ᐃⲆΔⲆⲆΔⵠ[a];
        }
        return b;
      },
      ⲆᐃⵠΔΔ: function (a) {
        for (var b = this, c = 0; c < b.ᐃⵠⵠⵠᐃ.length; c++) {
          if (a === b.ᐃⵠⵠⵠᐃ[c].ᐃᐃⵠΔ) {
            return b.ᐃⵠⵠⵠᐃ[c];
          }
        }
        return null;
      },
      ⵠⵠΔᐃⵠΔΔⲆⵠ: function () {
        var a = this;
        a.ᐃⵠⲆⲆΔⵠᐃᐃⲆ();
        for (var b = _a; b < a.ᐃⵠⵠⵠᐃ.length; b++) {
          if (a.ᐃⵠⵠⵠᐃ[b].ΔⵠⲆⵠΔ) {
            return a.ᐃⵠⵠⵠᐃ[b].reset();
          }
        }
        return new d(a);
      },
      ᐃⵠⲆⲆΔⵠᐃᐃⲆ: function () {
        var a = this;
        var b = a.ⲆᐃᐃΔΔΔΔᐃᐃ;
        var c = 0;
        var d = 0;
        if (a.ᐃⵠⵠⵠᐃ.length >= b) {
          for (d = 0; d < a.ᐃⵠⵠⵠᐃ.length; d++) {
            if (a.ᐃⵠⵠⵠᐃ[d].ΔⵠⲆⵠΔ) {
              c++;
            }
          }
          for (d = a.ᐃⵠⵠⵠᐃ.length - 1; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.ᐃⵠⵠⵠᐃ[d].ΔⵠⲆⵠΔ) {
              if (a.Δⵠⵠⵠᐃ && a.ᐃⵠⵠⵠᐃ[d].ⵠⲆⲆⵠ) {
                a.ᐃⵠⵠⵠᐃ[d].ⵠⲆⲆⵠ.disconnect(0);
              }
              a.ᐃⵠⵠⵠᐃ.splice(d, Oj);
              c--;
            }
          }
        }
      },
      ⵠⲆᐃⵠⲆ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = Qs; c < this.ᐃⵠⵠⵠᐃ.length; c++) {
            b.push(this.ᐃⵠⵠⵠᐃ[c].ᐃᐃⵠΔ);
          }
          return b;
        }
        return [a];
      },
      ⲆⵠⵠⲆᐃⲆⵠᐃⲆ: function (a) {
        a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ = f.Ⲇ.createBufferSource();
        a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.buffer = g[this.ⵠⲆⲆΔᐃ];
        if (a.ⲆⲆΔΔⵠ) {
          a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.connect(a.ⲆⲆΔΔⵠ);
        } else {
          a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.connect(a.ⵠⲆⲆⵠ);
        }
        a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.loop = a.ⵠΔΔⲆⵠ;
        if (a.ⵠΔΔⲆⵠ) {
          a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.loopStart = a.ⲆᐃΔⲆⵠ || 0;
          a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.loopEnd = a.ΔᐃⲆⲆᐃΔᐃ;
        }
        a.ⵠⲆⲆⵠ.ᐃΔΔⲆⵠ.playbackRate.value = a.ⵠᐃⵠⲆⲆ;
        return this;
      },
      ⲆΔⲆΔΔⵠⵠ: function (a) {
        var b = this;
        if (b.ⲆᐃⵠⲆⲆᐃΔ) {
          a.ᐃΔΔⲆⵠ.onended = null;
          a.ᐃΔΔⲆⵠ.disconnect(ms);
          try {
            a.ᐃΔΔⲆⵠ.buffer = b.ⲆᐃⵠⲆⲆᐃΔ;
          } catch (a) { }
        }
        a.ᐃΔΔⲆⵠ = null;
        return b;
      }
    };
    function d(a) {
      this.ⵠᐃΔᐃⲆⲆⲆ = a;
      this.ΔᐃΔⲆⵠ();
    }
    d.prototype = {
      ΔᐃΔⲆⵠ: function () {
        var a = this;
        var b = a.ⵠᐃΔᐃⲆⲆⲆ;
        a.ΔⲆⲆᐃΔ = b.ΔⲆⲆᐃΔ;
        a.ⵠΔΔⲆⵠ = b.ⵠΔΔⲆⵠ;
        a.ΔⲆᐃⵠⲆ = b.ΔⲆᐃⵠⲆ;
        a.ⵠᐃⵠⲆⲆ = b.ⵠᐃⵠⲆⲆ;
        a.ᐃᐃΔΔΔ = 0;
        a.ⵠⲆΔⵠⵠ = true;
        a.ΔⵠⲆⵠΔ = true;
        a.ᐃΔΔᐃΔ = "__default";
        a.ᐃᐃⵠΔ = ++f.ΔⲆᐃΔᐃᐃⵠ;
        b.ᐃⵠⵠⵠᐃ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ⵠᐃΔᐃⲆⲆⲆ;
        var c = f.ΔⲆⲆᐃΔ || a.ΔⲆⲆᐃΔ || a.ⵠᐃΔᐃⲆⲆⲆ.ΔⲆⲆᐃΔ ? gr : a.ΔⲆᐃⵠⲆ;
        if (b.Δⵠⵠⵠᐃ) {
          a.ⵠⲆⲆⵠ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⵠⵠΔⵠᐃᐃᐃΔᐃ() : f.Ⲇ.createGain();
          a.ⵠⲆⲆⵠ.gain.setValueAtTime(c, f.Ⲇ.currentTime);
          a.ⵠⲆⲆⵠ.paused = !_a;
          a.ⵠⲆⲆⵠ.connect(f.ᐃⲆⵠⲆᐃΔΔ);
        } else {
          a.ⵠⲆⲆⵠ = new Audio();
          a.ⲆᐃΔΔᐃⵠⵠ = a.ᐃΔΔⲆⵠᐃᐃⵠⲆ.bind(a);
          a.ⵠⲆⲆⵠ.addEventListener("error", a.ⲆᐃΔΔᐃⵠⵠ, !$l);
          a.ⲆΔⲆΔⲆΔⵠ = a.ⲆⵠΔⵠᐃⲆⲆᐃⲆ.bind(a);
          a.ⵠⲆⲆⵠ.addEventListener(f.ΔⲆΔⵠⲆΔΔ, a.ⲆΔⲆΔⲆΔⵠ, !_b);
          a.ⵠⲆⲆⵠ.src = b.ⵠⲆⲆΔᐃ;
          a.ⵠⲆⲆⵠ.preload = "auto";
          a.ⵠⲆⲆⵠ.volume = c * f.volume();
          a.ⵠⲆⲆⵠ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ⵠᐃΔᐃⲆⲆⲆ;
        a.ΔⲆⲆᐃΔ = b.ΔⲆⲆᐃΔ;
        a.ⵠΔΔⲆⵠ = b.ⵠΔΔⲆⵠ;
        a.ΔⲆᐃⵠⲆ = b.ΔⲆᐃⵠⲆ;
        a.ⵠᐃⵠⲆⲆ = b.ⵠᐃⵠⲆⲆ;
        a.ᐃᐃΔΔΔ = Tg;
        a.ⵠⵠⲆⲆᐃᐃᐃ = tj;
        a.ⵠⲆΔⵠⵠ = true;
        a.ΔⵠⲆⵠΔ = true;
        a.ᐃΔΔᐃΔ = "__default";
        a.ᐃᐃⵠΔ = ++f.ΔⲆᐃΔᐃᐃⵠ;
        return a;
      },
      ᐃΔΔⲆⵠᐃᐃⵠⲆ: function () {
        var a = this;
        a.ⵠᐃΔᐃⲆⲆⲆ.ⲆⲆⵠᐃΔ("loaderror", a.ᐃᐃⵠΔ, a.ⵠⲆⲆⵠ.error ? a.ⵠⲆⲆⵠ.error.code : 0);
        a.ⵠⲆⲆⵠ.removeEventListener("error", a.ⲆᐃΔΔᐃⵠⵠ, false);
      },
      ⲆⵠΔⵠᐃⲆⲆᐃⲆ: function () {
        var a = this;
        var b = a.ⵠᐃΔᐃⲆⲆⲆ;
        b.ᐃᐃᐃⵠⲆᐃᐃ = Math.ceil(Ln * a.ⵠⲆⲆⵠ.duration) / 10;
        if (Object.keys(b.ᐃΔΔᐃΔ).length === 0) {
          b.ᐃΔΔᐃΔ = {
            ⲆΔΔΔᐃⵠᐃᐃΔ: [Gr, b.ᐃᐃᐃⵠⲆᐃᐃ * 1000]
          };
        }
        if (b.ⲆⵠᐃΔᐃ !== "loaded") {
          b.ⲆⵠᐃΔᐃ = "loaded";
          b.ⲆⲆⵠᐃΔ("load");
          b.ᐃⵠᐃⲆⲆⲆΔ();
        }
        a.ⵠⲆⲆⵠ.removeEventListener(f.ΔⲆΔⵠⲆΔΔ, a.ⲆΔⲆΔⲆΔⵠ, false);
      }
    };
    var g = {};
    function i(b) {
      var c = b.ⵠⲆⲆΔᐃ;
      if (g[c]) {
        b.ᐃᐃᐃⵠⲆᐃᐃ = g[c].duration;
        m(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[Ej]), e = new Uint8Array(d.length), f = qk; f < d.length; ++f) {
          e[f] = d.charCodeAt(f);
        }
        a(e.buffer, b);
      } else {
        var h = new XMLHttpRequest();
        h.open("GET", c, true);
        h.responseType = "arraybuffer";
        h.onload = function () {
          var c = (h.status + "")[0];
          if (c === "0" || c === "2" || c === "3") {
            a(h.response, b);
          } else {
            b.ⲆⲆⵠᐃΔ("loaderror", null, "Failed loading audio file with status: " + h.status + ".");
          }
        };
        h.onerror = function () {
          if (b.Δⵠⵠⵠᐃ) {
            b.ⵠⵠΔᐃΔᐃΔ = !tj;
            b.Δⵠⵠⵠᐃ = false;
            b.ᐃⵠⵠⵠᐃ = [];
            delete g[c];
            b.load();
          }
        };
        k(h);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function a(a, b) {
      f.Ⲇ.decodeAudioData(a, function (a) {
        if (a && b.ᐃⵠⵠⵠᐃ.length > 0) {
          g[b.ⵠⲆⲆΔᐃ] = a;
          m(b, a);
        }
      }, function () {
        b.ⲆⲆⵠᐃΔ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function m(a, b) {
      if (b && !a.ᐃᐃᐃⵠⲆᐃᐃ) {
        a.ᐃᐃᐃⵠⲆᐃᐃ = b.duration;
      }
      if (Object.keys(a.ᐃΔΔᐃΔ).length === 0) {
        a.ᐃΔΔᐃΔ = {
          ⲆΔΔΔᐃⵠᐃᐃΔ: [ms, a.ᐃᐃᐃⵠⲆᐃᐃ * 1000]
        };
      }
      if (a.ⲆⵠᐃΔᐃ !== "loaded") {
        a.ⲆⵠᐃΔᐃ = "loaded";
        a.ⲆⲆⵠᐃΔ("load");
        a.ᐃⵠᐃⲆⲆⲆΔ();
      }
    }
    function h() {
      try {
        if (typeof AudioContext != "undefined") {
          f.Ⲇ = new AudioContext();
        } else if (typeof ⲆⵠΔᐃᐃⲆᐃᐃⲆ != "undefined") {
          f.Ⲇ = new ⲆⵠΔᐃᐃⲆᐃᐃⲆ();
        } else {
          f.ᐃᐃⵠⵠⲆ = !Ue;
        }
      } catch (a) {
        f.ᐃᐃⵠⵠⲆ = false;
      }
      var a = /iP(hone|od|ad)/.test(f.ΔⲆΔΔⲆ && f.ΔⲆΔΔⲆ.platform);
      var b = f.ΔⲆΔΔⲆ && f.ΔⲆΔΔⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[Zq], Uh) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(f.ΔⲆΔΔⲆ && f.ΔⲆΔΔⲆ.userAgent.toLowerCase());
        if (f.ΔⲆΔΔⲆ && f.ΔⲆΔΔⲆ.ⵠⲆⵠⵠⲆⵠᐃⵠⲆ && !d || f.ΔⲆΔΔⲆ && !f.ΔⲆΔΔⲆ.ⵠⲆⵠⵠⲆⵠᐃⵠⲆ && !d) {
          f.ᐃᐃⵠⵠⲆ = false;
        }
      }
      if (f.ᐃᐃⵠⵠⲆ) {
        f.ᐃⲆⵠⲆᐃΔΔ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⵠⵠΔⵠᐃᐃᐃΔᐃ() : f.Ⲇ.createGain();
        f.ᐃⲆⵠⲆᐃΔΔ.gain.value = f.ΔⲆⲆᐃΔ ? gr : 1;
        f.ᐃⲆⵠⲆᐃΔΔ.connect(f.Ⲇ.destination);
      }
      f.ΔΔᐃⲆⵠΔΔ();
    }
    if (typeof ΔⲆᐃᐃΔΔΔ == "function" && ΔⲆᐃᐃΔΔΔ.ΔⲆⵠΔᐃⲆᐃ) {
      ΔⲆᐃᐃΔΔΔ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ΔᐃⵠΔΔⲆⵠ != "undefined") {
      ΔᐃⵠΔΔⲆⵠ.Howler = f;
      ΔᐃⵠΔΔⲆⵠ.Howl = c;
    }
    if (typeof kj != "undefined") {
      kj.ΔⲆᐃⲆⵠⲆⲆ = b;
      kj.Howler = f;
      kj.Howl = c;
      kj.ⵠΔⲆⵠⵠⲆⵠ = d;
    } else if (typeof ΔⲆᐃΔᐃᐃΔ != "undefined") {
      ΔⲆᐃΔᐃᐃΔ.ΔⲆᐃⲆⵠⲆⲆ = b;
      ΔⲆᐃΔᐃᐃΔ.Howler = f;
      ΔⲆᐃΔᐃᐃΔ.Howl = c;
      ΔⲆᐃΔᐃᐃΔ.ⵠΔⲆⵠⵠⲆⵠ = d;
    }
  })();
  (function () {
    ΔⲆᐃⲆⵠⲆⲆ.prototype.ⵠΔᐃΔⵠ = [Qs, _a, _a];
    ΔⲆᐃⲆⵠⲆⲆ.prototype.ⲆᐃΔⲆᐃ = [Rl, 0, -Ok, 0, 1, 0];
    ΔⲆᐃⲆⵠⲆⲆ.prototype.ᐃⵠΔᐃⵠⲆⲆ = function (a) {
      var b = this;
      if (!b.Ⲇ || !b.Ⲇ.listener) {
        return b;
      }
      for (var c = b.ᐃⲆᐃᐃⵠ.length - Ue; c >= Tg; c--) {
        b.ᐃⲆᐃᐃⵠ[c].ᐃⵠΔᐃⵠⲆⲆ(a);
      }
      return b;
    };
    ΔⲆᐃⲆⵠⲆⲆ.prototype.ⲆⲆⲆⲆ = function (a, b, c) {
      var d = this;
      if (d.Ⲇ && d.Ⲇ.listener) {
        b = typeof b != "number" ? d.ⵠΔᐃΔⵠ[ie] : b;
        c = typeof c != "number" ? d.ⵠΔᐃΔⵠ[re] : c;
        if (typeof a != "number") {
          return d.ⵠΔᐃΔⵠ;
        } else {
          d.ⵠΔᐃΔⵠ = [a, b, c];
          d.Ⲇ.listener.setPosition(d.ⵠΔᐃΔⵠ[_a], d.ⵠΔᐃΔⵠ[1], d.ⵠΔᐃΔⵠ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ΔⲆᐃⲆⵠⲆⲆ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.Ⲇ || !h.Ⲇ.listener) {
        return h;
      }
      var a = h.ⲆᐃΔⲆᐃ;
      c = typeof c != "number" ? a[1] : c;
      d = typeof d != "number" ? a[2] : d;
      e = typeof e != "number" ? a[Qt] : e;
      f = typeof f != "number" ? a[4] : f;
      g = typeof g != "number" ? a[cd] : g;
      if (typeof b != "number") {
        return a;
      } else {
        h.ⲆᐃΔⲆᐃ = [b, c, d, e, f, g];
        h.Ⲇ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ΔᐃΔⲆⵠ = function (a) {
      return function (b) {
        var c = this;
        c.ⲆᐃΔⲆᐃ = b.orientation || [1, qk, Rl];
        c.ⵠᐃⵠⲆⵠᐃⲆ = b.ᐃⵠΔᐃⵠⲆⲆ || null;
        c.ⵠΔᐃΔⵠ = b.ⲆⲆⲆⲆ || null;
        c.ⲆΔΔⵠⲆ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : tj,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : Ej
        };
        c.ΔᐃᐃᐃᐃᐃΔⲆⲆ = b.ΔⲆⲆⲆΔᐃⵠΔΔ ? [{
          ⲆⲆⵠⲆᐃ: b.ΔⲆⲆⲆΔᐃⵠΔΔ
        }] : [];
        c.ᐃᐃⲆᐃᐃᐃⵠΔⵠ = b.ⲆᐃᐃⵠΔᐃⲆⵠⲆ ? [{
          ⲆⲆⵠⲆᐃ: b.ⲆᐃᐃⵠΔᐃⲆⵠⲆ
        }] : [];
        c.ⵠⲆΔΔΔⲆⵠᐃΔ = b.ⵠⲆⵠⲆᐃⲆⵠⵠⲆ ? [{
          ⲆⲆⵠⲆᐃ: b.ⵠⲆⵠⲆᐃⲆⵠⵠⲆ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ΔᐃΔⲆⵠ);
    Howl.prototype.ᐃⵠΔᐃⵠⲆⲆ = function (b, c) {
      var d = this;
      if (!d.Δⵠⵠⵠᐃ) {
        return d;
      }
      if (d.ⲆⵠᐃΔᐃ !== "loaded") {
        d.ⲆⲆⵠΔΔ.push({
          event: "stereo",
          action: function () {
            d.ᐃⵠΔᐃⵠⲆⲆ(b, c);
          }
        });
        return d;
      }
      var e = Howler.Ⲇ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (c === undefined) {
        if (typeof b != "number") {
          return d.ⵠᐃⵠⲆⵠᐃⲆ;
        }
        d.ⵠᐃⵠⲆⵠᐃⲆ = b;
        d.ⵠΔᐃΔⵠ = [b, 0, Gr];
      }
      for (var f = d.ⵠⲆᐃⵠⲆ(c), g = gr; g < f.length; g++) {
        var h = d.ⲆᐃⵠΔΔ(f[g]);
        if (h) {
          if (typeof b != "number") {
            return h.ⵠᐃⵠⲆⵠᐃⲆ;
          }
          h.ⵠᐃⵠⲆⵠᐃⲆ = b;
          h.ⵠΔᐃΔⵠ = [b, 0, 0];
          if (h.ⵠⲆⲆⵠ) {
            h.ⲆΔΔⵠⲆ.panningModel = "equalpower";
            if (!h.ⲆⲆΔΔⵠ || !h.ⲆⲆΔΔⵠ.pan) {
              a(h, e);
            }
            if (e === "spatial") {
              h.ⲆⲆΔΔⵠ.setPosition(b, qn, 0);
            } else {
              h.ⲆⲆΔΔⵠ.pan.value = b;
            }
          }
          d.ⲆⲆⵠᐃΔ("stereo", h.ᐃᐃⵠΔ);
        }
      }
      return d;
    };
    Howl.prototype.ⲆⲆⲆⲆ = function (b, c, d, e) {
      var f = this;
      if (!f.Δⵠⵠⵠᐃ) {
        return f;
      }
      if (f.ⲆⵠᐃΔᐃ !== "loaded") {
        f.ⲆⲆⵠΔΔ.push({
          event: "pos",
          action: function () {
            f.ⲆⲆⲆⲆ(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? _a : c;
      d = typeof d != "number" ? -0.5 : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⵠΔᐃΔⵠ;
        }
        f.ⵠΔᐃΔⵠ = [b, c, d];
      }
      for (var g = f.ⵠⲆᐃⵠⲆ(e), i = Qs; i < g.length; i++) {
        var j = f.ⲆᐃⵠΔΔ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⵠΔᐃΔⵠ;
          }
          j.ⵠΔᐃΔⵠ = [b, c, d];
          if (j.ⵠⲆⲆⵠ) {
            if (!j.ⲆⲆΔΔⵠ || !!j.ⲆⲆΔΔⵠ.pan) {
              a(j, "spatial");
            }
            j.ⲆⲆΔΔⵠ.setPosition(b, c, d);
          }
          f.ⲆⲆⵠᐃΔ("pos", j.ᐃᐃⵠΔ);
        }
      }
      return f;
    };
    Howl.prototype.orientation = function (b, c, d, e) {
      var f = this;
      if (!f.Δⵠⵠⵠᐃ) {
        return f;
      }
      if (f.ⲆⵠᐃΔᐃ !== "loaded") {
        f.ⲆⲆⵠΔΔ.push({
          event: "orientation",
          action: function () {
            f.orientation(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? f.ⲆᐃΔⲆᐃ[Gs] : c;
      d = typeof d != "number" ? f.ⲆᐃΔⲆᐃ[2] : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆᐃΔⲆᐃ;
        }
        f.ⲆᐃΔⲆᐃ = [b, c, d];
      }
      for (var g = f.ⵠⲆᐃⵠⲆ(e), i = 0; i < g.length; i++) {
        var j = f.ⲆᐃⵠΔΔ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆᐃΔⲆᐃ;
          }
          j.ⲆᐃΔⲆᐃ = [b, c, d];
          if (j.ⵠⲆⲆⵠ) {
            if (!j.ⲆⲆΔΔⵠ) {
              j.ⵠΔᐃΔⵠ ||= f.ⵠΔᐃΔⵠ || [0, qk, -0.5];
              a(j, "spatial");
            }
            j.ⲆⲆΔΔⵠ.setOrientation(b, c, d);
          }
          f.ⲆⲆⵠᐃΔ("orientation", j.ᐃᐃⵠΔ);
        }
      }
      return f;
    };
    Howl.prototype.ⲆᐃⵠΔᐃᐃⵠⲆᐃ = function () {
      var b;
      var c;
      var d;
      var e = this;
      var f = arguments;
      if (!e.Δⵠⵠⵠᐃ) {
        return e;
      }
      if (Qs === f.length) {
        return e.ⲆΔΔⵠⲆ;
      }
      if (f.length === 1) {
        if (typeof f[0] != "object") {
          if (d = e.ⲆᐃⵠΔΔ(parseInt(f[ur], 10))) {
            return d.ⲆΔΔⵠⲆ;
          } else {
            return e.ⲆΔΔⵠⲆ;
          }
        }
        b = f[vq];
        if (c === undefined) {
          e.ⲆΔΔⵠⲆ = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : e.ᐃΔΔΔⵠⵠⲆⲆⲆ,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : e.ᐃⵠⲆⵠⲆⲆⵠⵠⵠ,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : e.ᐃⲆᐃΔΔⲆᐃΔⲆ,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : e.ⵠΔΔⲆΔΔᐃⵠᐃ,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : e.ΔᐃᐃᐃΔⵠⵠⵠⲆ,
            panningModel: b.panningModel !== undefined ? b.panningModel : e.ⲆΔⵠΔⲆⲆΔⵠⵠ,
            refDistance: b.refDistance !== undefined ? b.refDistance : e.ᐃᐃⵠΔⵠᐃΔⲆⵠ,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : e.ⵠΔᐃΔΔⲆⲆⲆᐃ
          };
        }
      } else if (Ss === f.length) {
        b = f[Nl];
        c = parseInt(f[1], Ye);
      }
      for (var g = e.ⵠⲆᐃⵠⲆ(c), j = 0; j < g.length; j++) {
        if (d = e.ⲆᐃⵠΔΔ(g[j])) {
          var k = d.ⲆΔΔⵠⲆ;
          k = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : k.coneOuterGain,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : k.distanceModel,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : k.maxDistance,
            panningModel: b.panningModel !== undefined ? b.panningModel : k.panningModel,
            refDistance: b.refDistance !== undefined ? b.refDistance : k.refDistance,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : k.rolloffFactor
          };
          var m = d.ⲆⲆΔΔⵠ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            d.ⵠΔᐃΔⵠ ||= e.ⵠΔᐃΔⵠ || [Tg, 0, -0.5];
            a(d, "spatial");
          }
        }
      }
      return e;
    };
    ⵠΔⲆⵠⵠⲆⵠ.prototype.ΔᐃΔⲆⵠ = function (a) {
      return function () {
        var b = this;
        var c = b.ⵠᐃΔᐃⲆⲆⲆ;
        b.ⲆᐃΔⲆᐃ = c.ⲆᐃΔⲆᐃ;
        b.ⵠᐃⵠⲆⵠᐃⲆ = c.ⵠᐃⵠⲆⵠᐃⲆ;
        b.ⵠΔᐃΔⵠ = c.ⵠΔᐃΔⵠ;
        b.ⲆΔΔⵠⲆ = c.ⲆΔΔⵠⲆ;
        a.call(this);
        if (b.ⵠᐃⵠⲆⵠᐃⲆ) {
          c.ᐃⵠΔᐃⵠⲆⲆ(b.ⵠᐃⵠⲆⵠᐃⲆ);
        } else if (b.ⵠΔᐃΔⵠ) {
          c.ⲆⲆⲆⲆ(b.ⵠΔᐃΔⵠ[0], b.ⵠΔᐃΔⵠ[Ok], b.ⵠΔᐃΔⵠ[Tt], b.ᐃᐃⵠΔ);
        }
      };
    }(ⵠΔⲆⵠⵠⲆⵠ.prototype.ΔᐃΔⲆⵠ);
    ⵠΔⲆⵠⵠⲆⵠ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ⵠᐃΔᐃⲆⲆⲆ;
        b.ⲆᐃΔⲆᐃ = c.ⲆᐃΔⲆᐃ;
        b.ⵠΔᐃΔⵠ = c.ⵠΔᐃΔⵠ;
        b.ⲆΔΔⵠⲆ = c.ⲆΔΔⵠⲆ;
        return a.call(this);
      };
    }(ⵠΔⲆⵠⵠⲆⵠ.prototype.reset);
    function a(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ⲆⲆΔΔⵠ = Howler.Ⲇ.createPanner();
        a.ⲆⲆΔΔⵠ.coneInnerAngle = a.ⲆΔΔⵠⲆ.coneInnerAngle;
        a.ⲆⲆΔΔⵠ.coneOuterAngle = a.ⲆΔΔⵠⲆ.coneOuterAngle;
        a.ⲆⲆΔΔⵠ.coneOuterGain = a.ⲆΔΔⵠⲆ.coneOuterGain;
        a.ⲆⲆΔΔⵠ.distanceModel = a.ⲆΔΔⵠⲆ.distanceModel;
        a.ⲆⲆΔΔⵠ.maxDistance = a.ⲆΔΔⵠⲆ.maxDistance;
        a.ⲆⲆΔΔⵠ.panningModel = a.ⲆΔΔⵠⲆ.panningModel;
        a.ⲆⲆΔΔⵠ.refDistance = a.ⲆΔΔⵠⲆ.refDistance;
        a.ⲆⲆΔΔⵠ.rolloffFactor = a.ⲆΔΔⵠⲆ.rolloffFactor;
        a.ⲆⲆΔΔⵠ.setPosition(a.ⵠΔᐃΔⵠ[Gr], a.ⵠΔᐃΔⵠ[j], a.ⵠΔᐃΔⵠ[2]);
        a.ⲆⲆΔΔⵠ.setOrientation(a.ⲆᐃΔⲆᐃ[Qs], a.ⲆᐃΔⲆᐃ[Ok], a.ⲆᐃΔⲆᐃ[2]);
      } else {
        a.ⲆⲆΔΔⵠ = Howler.Ⲇ.createStereoPanner();
        a.ⲆⲆΔΔⵠ.pan.value = a.ⵠᐃⵠⲆⵠᐃⲆ;
      }
      a.ⲆⲆΔΔⵠ.connect(a.ⵠⲆⲆⵠ);
      if (!a.ⵠⲆΔⵠⵠ) {
        a.ⵠᐃΔᐃⲆⲆⲆ.pause(a.ᐃᐃⵠΔ, true).play(a.ᐃᐃⵠΔ);
      }
    }
  })();
  var sf = Ht;
  var hf = 1;
  var lf = {
    ᐃᐃΔⲆΔᐃⲆⵠⲆ: 12,
    ΔⵠΔΔⵠ: ar,
    ⵠⵠⵠⲆⲆⲆⲆ: 460000,
    ⲆᐃᐃⵠΔΔᐃⵠΔ: 12,
    ⵠⵠΔᐃⲆᐃᐃ: lq,
    ⵠᐃΔⵠᐃᐃᐃᐃᐃ: 5000,
    ⵠⲆΔⲆⵠΔⲆ: 3000,
    ᐃⵠⲆΔᐃ: 1,
    ΔΔⲆⵠ: 8,
    ⲆⵠᐃᐃⵠᐃⲆᐃΔ: 5000,
    ΔⵠⲆ: Gt,
    ᐃΔⲆⵠᐃᐃᐃᐃⵠ: 5000,
    ⵠΔⲆΔᐃ: 2
  };
  var gf = [];
  gf[-1] = lf.ᐃⵠⲆΔᐃ;
  gf[bs.ⵠᐃⵠⲆᐃ] = lf.ᐃⵠⲆΔᐃ;
  gf[bs.ᐃⵠᐃⵠΔ] = lf.ᐃⵠⲆΔᐃ;
  gf[bs.ΔΔⲆΔΔᐃⵠⲆᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠᐃⲆⲆⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ᐃᐃⲆⵠΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⲆΔᐃⲆⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔΔᐃᐃᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⵠⲆΔΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⲆⲆᐃᐃᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⲆΔΔΔⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⲆᐃⲆᐃΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ᐃᐃᐃΔⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⲆⵠⲆᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⲆΔᐃⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔᐃᐃΔⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠΔΔⲆᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠᐃᐃⵠⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔΔⲆᐃᐃⵠⲆΔᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔΔⵠᐃⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠⲆΔΔᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔΔⵠⵠⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⵠΔΔΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔΔᐃᐃⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠᐃΔⲆⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔΔᐃΔᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ᐃΔⵠⵠⵠΔⲆⲆᐃ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ᐃⲆΔΔⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⵠΔⲆⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠⵠᐃⲆⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.Δᐃⵠᐃⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ᐃΔⵠⲆΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⵠⵠⲆⲆΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⲆⲆΔᐃΔ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ⲆⲆⵠⵠⲆ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⵠⲆⲆⵠ] = lf.ⵠΔⲆΔᐃ;
  gf[bs.ΔⵠΔΔⵠ] = lf.ΔⵠΔΔⵠ;
  gf[bs.ⵠᐃΔΔⵠ] = lf.ΔⵠΔΔⵠ;
  gf[bs.ΔⲆΔᐃⵠ] = lf.ΔⵠΔΔⵠ;
  gf[bs.ᐃⲆΔᐃᐃ] = lf.ΔⵠΔΔⵠ;
  ᐃⲆᐃⵠ = [];
  ᐃⲆᐃⵠ[0] = 0;
  ᐃⲆᐃⵠ[ie] = 1;
  ᐃⲆᐃⵠ[2] = Gs;
  ᐃⲆᐃⵠ[3] = j;
  ᐃⲆᐃⵠ[4] = 0;
  ᐃⲆᐃⵠ[5] = 0;
  ᐃⲆᐃⵠ[6] = 0;
  ᐃⲆᐃⵠ[jl] = 0;
  ᐃⲆᐃⵠ[8] = 0;
  ᐃⲆᐃⵠ[hk] = 0;
  ᐃⲆᐃⵠ[10] = 1;
  ᐃⲆᐃⵠ[Ns] = 1;
  ᐃⲆᐃⵠ[12] = As;
  ᐃⲆᐃⵠ[je] = Zq;
  ᐃⲆᐃⵠ[tr] = 1;
  ᐃⲆᐃⵠ[15] = 1;
  ᐃⲆᐃⵠ[In] = 0;
  ᐃⲆᐃⵠ[17] = Nl;
  ᐃⲆᐃⵠ[I] = 0;
  ᐃⲆᐃⵠ[wl] = 0;
  ᐃⲆᐃⵠ[pg] = 0;
  ᐃⲆᐃⵠ[21] = Cq;
  ᐃⲆᐃⵠ[22] = 0;
  ᐃⲆᐃⵠ[23] = Ok;
  ᐃⲆᐃⵠ[24] = 1;
  ᐃⲆᐃⵠ[25] = ag;
  ᐃⲆᐃⵠ[26] = 1;
  ᐃⲆᐃⵠ[27] = 1;
  ᐃⲆᐃⵠ[28] = Eo;
  ᐃⲆᐃⵠ[29] = 1;
  ᐃⲆᐃⵠ[30] = Ok;
  ᐃⲆᐃⵠ[31] = 1;
  ᐃⲆᐃⵠ[32] = 1;
  ᐃⲆᐃⵠ[33] = 1;
  ᐃⲆᐃⵠ[34] = ag;
  ᐃⲆᐃⵠ[35] = Ht;
  ᐃⲆᐃⵠ[36] = Gs;
  ᐃⲆᐃⵠ[37] = 1;
  ᐃⲆᐃⵠ[38] = 1;
  ᐃⲆᐃⵠ[40] = vq;
  ᐃⲆᐃⵠ[41] = 0;
  ᐃⲆᐃⵠ[42] = tj;
  ᐃⲆᐃⵠ[50] = 1;
  ᐃⲆᐃⵠ[51] = Ht;
  ᐃⲆᐃⵠ[52] = 1;
  ᐃⲆᐃⵠ[55] = gr;
  ᐃⲆᐃⵠ[56] = 0;
  ᐃⲆᐃⵠ[57] = 0;
  ᐃⲆᐃⵠ[58] = 0;
  ⲆⵠᐃΔΔ = [];
  ⲆⵠᐃΔΔ[xw.ᐃⲆΔᐃⵠ] = Gr;
  ⲆⵠᐃΔΔ[xw.ⵠΔⵠΔⲆ] = _a;
  ⲆⵠᐃΔΔ[xw.ΔⵠᐃⵠΔ] = 0;
  ⲆⵠᐃΔΔ[xw.ΔΔⲆⵠᐃ] = uh;
  ⲆⵠᐃΔΔ[xw.ᐃⲆⲆⲆⵠ] = -1;
  ⲆⵠᐃΔΔ[xw.ΔⵠⲆⲆⲆ] = -Ok;
  ⲆⵠᐃΔΔ[xw.ᐃⲆᐃΔⵠ] = rl;
  ⲆⵠᐃΔΔ[xw.Ⲇᐃᐃⵠᐃ] = Rl;
  ⲆⵠᐃΔΔ[xw.ⲆΔⵠⲆᐃ] = Nl;
  ⲆⵠᐃΔΔ[xw.ΔΔᐃⲆΔ] = 0;
  ⲆⵠᐃΔΔ[xw.ᐃᐃΔⲆⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ᐃᐃᐃⲆⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ᐃΔⵠⵠⲆ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠᐃᐃⲆΔ] = 1;
  ⲆⵠᐃΔΔ[xw.ⲆΔⲆⲆᐃ] = aa;
  ⲆⵠᐃΔΔ[xw.ⵠΔⵠⲆΔ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠᐃᐃⲆᐃ] = 1;
  ⲆⵠᐃΔΔ[xw.ΔⵠⲆᐃⲆ] = rl;
  ⲆⵠᐃΔΔ[xw.ⵠΔᐃᐃΔ] = ag;
  ⲆⵠᐃΔΔ[xw.ᐃⲆᐃⵠⲆ] = Zq;
  ⲆⵠᐃΔΔ[xw.ⵠΔΔᐃⲆ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠᐃⲆΔⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ΔΔᐃⵠΔ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠᐃᐃⲆⲆ] = 0;
  ⲆⵠᐃΔΔ[xw.ⵠⵠΔⲆⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠᐃΔΔⲆ] = 1;
  ⲆⵠᐃΔΔ[xw.ΔᐃⲆⵠⵠ] = zs;
  ⲆⵠᐃΔΔ[xw.ⵠΔⵠⲆⵠ] = Zq;
  ⲆⵠᐃΔΔ[xw.ᐃΔΔᐃⲆ] = Ht;
  ⲆⵠᐃΔΔ[xw.ΔᐃᐃⵠⲆ] = 0;
  ⲆⵠᐃΔΔ[xw.ᐃⵠᐃⵠⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ⲆⲆⲆΔⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠⵠⵠⲆⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ⵠΔⵠⵠᐃ] = 1;
  ⲆⵠᐃΔΔ[xw.ⲆᐃⵠⲆⵠ] = 1;
  ⲆⵠᐃΔΔ[xw.ᐃⵠᐃᐃᐃ] = Ok;
  ⲆⵠᐃΔΔ[xw.ⵠΔᐃΔᐃ] = Ag;
  ⲆⵠᐃΔΔ[xw.ⲆⲆᐃᐃΔ] = Gs;
  ⲆⵠᐃΔΔ[xw.ΔⲆᐃᐃⲆ] = 0;
  ⲆⵠᐃΔΔ[xw.ⵠᐃⵠᐃᐃ] = Ag;
  var uf = {
    ᐃΔⲆᐃⵠᐃΔ: {
      ΔⵠⲆⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        d1: [90391, 300, _i],
        d2: [90684, 300, vl],
        d0: [90086, 300, false]
      },
      sample: {
        d0: lf.ΔΔⲆⵠ,
        d1: lf.ΔΔⲆⵠ,
        d2: lf.ΔΔⲆⵠ
      }
    },
    ⵠΔΔⲆⵠⵠⵠ: {
      ΔⵠⲆⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        p0: [89303, 300, _i],
        p2: [89815, 300, false],
        p1: [89549, 300, false]
      },
      sample: {
        p0: lf.ΔΔⲆⵠ,
        p1: lf.ΔΔⲆⵠ,
        p2: lf.ΔΔⲆⵠ
      }
    },
    ⲆΔᐃⵠᐃⵠΔ: {
      ΔⵠⲆⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        w3: [89025, 300, _i],
        w0: [88195, 300, false],
        w1: [88473, 300, false],
        w2: [88751, 300, ds]
      },
      sample: {
        w0: lf.ΔΔⲆⵠ,
        w1: lf.ΔΔⲆⵠ,
        w2: lf.ΔΔⲆⵠ,
        w3: lf.ΔΔⲆⵠ
      }
    },
    ᐃⵠⲆΔⵠⵠⲆ: {
      ΔⵠⲆⲆᐃ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        ⵠΔⲆⵠΔ: [91431, 400, Ao],
        ᐃΔᐃᐃⲆΔΔ: [92249, 500, ds],
        ΔⵠⲆᐃᐃⲆⵠ: [32604, 21890, ra],
        ⵠᐃⵠΔᐃⵠΔ: [66961, 21223, true],
        ᐃⵠᐃΔⲆΔΔ: [66014, 925, true],
        ΔⵠⲆᐃΔΔΔ: [3100, 8800, Xj],
        ⵠⲆⵠⲆⵠᐃⲆ: [30562, 655, Xj],
        ᐃΔⵠΔⵠ: [12356, 6965, wq],
        ⵠⲆᐃⵠⲆᐃⵠ: [91022, 400, vl],
        ⵠᐃⲆⵠᐃΔⵠ: [19882, 8301, nr],
        ⵠΔⲆᐃΔⵠⵠ: [66961, 21223, true],
        ⲆⲆⲆⲆᐃⲆⲆⵠⲆ: [100, 2800, wq],
        ΔΔⲆⲆⵠⵠΔ: [31658, 813, true],
        ᐃⵠᐃⲆᐃΔⵠ: [54524, 11393, an],
        ⲆΔΔΔΔ: [28380, 1797, true]
      },
      sample: {
        ⲆⲆⲆⲆᐃⲆⲆⵠⲆ: j,
        ΔⵠⲆᐃΔΔΔ: 1,
        ⵠᐃⲆⵠᐃΔⵠ: 1,
        ΔⵠⲆᐃᐃⲆⵠ: Ht,
        ᐃⵠᐃⲆᐃΔⵠ: ag,
        ⵠᐃⵠΔᐃⵠΔ: Ue,
        ⵠΔⲆᐃΔⵠⵠ: $l,
        ᐃΔⵠΔⵠ: lf.ΔΔⲆⵠ,
        ⲆΔΔΔΔ: lf.ΔΔⲆⵠ,
        ⵠⲆⵠⲆⵠᐃⲆ: lf.ΔΔⲆⵠ,
        ΔΔⲆⲆⵠⵠΔ: lf.ΔΔⲆⵠ,
        ᐃⵠᐃΔⲆΔΔ: lf.ΔΔⲆⵠ,
        ⵠⲆᐃⵠⲆᐃⵠ: lf.ΔⵠⲆ,
        ⵠΔⲆⵠΔ: lf.ΔⵠⲆ,
        ᐃΔᐃᐃⲆΔΔ: lf.ΔⵠⲆ
      }
    }
  };
  function bf(b, c, d, e, f) {
    const i = (16 << (b & rh)) + (24 << (b >> 24 & 255)) + (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255));
    const j = (0 << (c >> In & 255)) + (24 << (c >> 8 & 255)) + (8 << (c & 255)) + (w << (c >> 24 & 255));
    const a = (12345 + (6055 + d) * 1103515245) % 2147483648;
    const k = ~(e & 40511) & e | ~(e & 40511) & 40511;
    const h = f ^ 6879;
    const l = Un(i, j, a, k);
    tf(h, i, j, a);
    return l ^ 31470;
  }
  function vf(b, c, d, e) {
    const f = b ^ 33063;
    const g = (1 + (13601 + c) * 22695477) % 4294967296;
    const h = d ^ 57507;
    const a = ((29073 + e) * 1664525 + 1013904223) % 4294967296;
    return (1 + (9812 + (tf(f, g, h, a) ^ Sa(h, a, f))) * 22695477) % 4294967296;
  }
  function df(b, c, d, e, f, i, j, a, k, h, l) {
    this.r = Zq;
    this.ⲆᐃᐃⲆⵠ = b;
    this.ΔⵠΔΔΔᐃΔ = b;
    this.Ⲇⵠⵠ = c;
    this.ⲆΔⵠ = d;
    this.fade = e;
    this.ΔᐃⵠⲆᐃᐃⵠ = f;
    this.ΔⵠΔᐃⵠⲆⲆ = i;
    this.ᐃᐃᐃⲆ = j;
    this.ΔⵠⲆᐃΔⵠΔ = a;
    this.source = k;
    this.source.ΔᐃⵠⲆᐃΔᐃ = k.x + k.w;
    this.source.ⵠΔΔⵠΔ = k.y + k.ⵠΔⵠ;
    this.ΔⲆΔⵠᐃⲆΔⲆⵠ = h;
    this.ⵠΔᐃᐃⲆΔⲆ = l;
    this.ⵠᐃⲆⲆᐃⲆⲆ = 0;
    this.ΔᐃⵠⵠⵠΔΔ = {
      ΔΔⵠΔ: Ui,
      d: pr
    };
    this.ⲆΔᐃΔᐃ = function () {
      this.ⲆᐃᐃⲆⵠ -= xf;
      if (this.ⲆᐃᐃⲆⵠ < Nl) {
        this.ⲆᐃᐃⲆⵠ = this.ΔⵠΔΔΔᐃΔ;
        var a = uf.ᐃⵠⲆΔⵠⵠⲆ.ΔⵠⲆⲆᐃ.playing(this.Ⲇⵠⵠ);
        var b = uf.ᐃⵠⲆΔⵠⵠⲆ.ΔⵠⲆⲆᐃ.playing(this.ⲆΔⵠ);
        if (a && !b) {
          var c = this.ᐃᐃᐃⲆ.volume(this.Ⲇⵠⵠ) * hf;
          var d = (this.ΔⵠΔᐃⵠⲆⲆ * Math.random() + this.ΔᐃⵠⲆᐃᐃⵠ) * hf;
          this.ᐃᐃᐃⲆ.fade(c, d, this.fade, this.Ⲇⵠⵠ);
        } else if (!a && b) {
          c = hf * this.ᐃᐃᐃⲆ.volume(this.ⲆΔⵠ);
          d = hf * (this.ΔⵠΔᐃⵠⲆⲆ * Math.random() + this.ΔᐃⵠⲆᐃᐃⵠ);
          this.ᐃᐃᐃⲆ[p[Ul]](c, d, this.fade, this.ⲆΔⵠ);
        }
      }
    };
    this.transition = function () {
      this.ⲆᐃᐃⲆⵠ = this.ΔⵠΔΔΔᐃΔ;
      this.ΔᐃⵠⵠⵠΔΔ.d = this.ΔᐃⵠⵠⵠΔΔ.ΔΔⵠΔ;
      if (ff.time) {
        this.ᐃᐃᐃⲆ.fade(ne, this.ΔᐃⵠⲆᐃᐃⵠ * hf, this.ΔⵠⲆᐃΔⵠΔ, this.Ⲇⵠⵠ);
        this.ᐃᐃᐃⲆ.play(this.Ⲇⵠⵠ);
        if (this.ᐃᐃᐃⲆ.playing(this.ⲆΔⵠ)) {
          var a = hf * this.ᐃᐃᐃⲆ.volume(this.ⲆΔⵠ);
          this.ᐃᐃᐃⲆ[p[rk]](a, 0, this.ΔⵠⲆᐃΔⵠΔ, this.ⲆΔⵠ);
        }
      } else {
        this.ᐃᐃᐃⲆ.fade(qk, this.ΔᐃⵠⲆᐃᐃⵠ * hf, this.ΔⵠⲆᐃΔⵠΔ, this.ⲆΔⵠ);
        this.ᐃᐃᐃⲆ.play(this.ⲆΔⵠ);
        if (this.ᐃᐃᐃⲆ.playing(this.Ⲇⵠⵠ)) {
          a = this.ᐃᐃᐃⲆ.volume(this.Ⲇⵠⵠ) * hf;
          this.ᐃᐃᐃⲆ[p[Bs]](a, Cn, this.ΔⵠⲆᐃΔⵠΔ, this.Ⲇⵠⵠ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⵠᐃⲆⲆᐃⲆⲆ) {
        if (ᐃⵠΔⵠ.ⵠΔᐃᐃⲆΔⲆ(a, this.ΔⲆΔⵠᐃⲆΔⲆⵠ)) {
          if (!ex.transition && lf.ⵠⵠⵠⲆⲆⲆⲆ > ff.Δⵠⵠⵠⵠ.now) {
            if (ff.time) {
              if (!this.ᐃᐃᐃⲆ.playing(this.Ⲇⵠⵠ)) {
                this.ΔᐃⵠⵠⵠΔΔ.d -= xf;
                if (this.ΔᐃⵠⵠⵠΔΔ.d < qk) {
                  this.transition();
                }
              }
            } else if (!this.ᐃᐃᐃⲆ.playing(this.ⲆΔⵠ)) {
              this.ΔᐃⵠⵠⵠΔΔ.d -= xf;
              if (this.ΔᐃⵠⵠⵠΔΔ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⵠᐃⲆⲆᐃⲆⲆ = 0;
          if (this.ᐃᐃᐃⲆ.playing(this.Ⲇⵠⵠ)) {
            var b = this.ᐃᐃᐃⲆ.volume(this.Ⲇⵠⵠ) * hf;
            this.ᐃᐃᐃⲆ.fade(b, 0, this.ΔⵠⲆᐃΔⵠΔ, this.Ⲇⵠⵠ);
          }
          if (this.ᐃᐃᐃⲆ.playing(this.ⲆΔⵠ)) {
            b = hf * this.ᐃᐃᐃⲆ.volume(this.ⲆΔⵠ);
            this.ᐃᐃᐃⲆ[p[Iq]](b, vq, this.ΔⵠⲆᐃΔⵠΔ, this.ⲆΔⵠ);
          }
        }
      } else if (ᐃⵠΔⵠ.ⵠΔᐃᐃⲆΔⲆ(a, this.ⵠΔᐃᐃⲆΔⲆ)) {
        this.ⵠᐃⲆⲆᐃⲆⲆ = jq;
        if (!ex.transition && lf.ⵠⵠⵠⲆⲆⲆⲆ > ff.Δⵠⵠⵠⵠ.now) {
          this.transition();
        }
      }
    };
    this.ᐃⲆΔ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? ex.ᐃᐃⵠᐃᐃⵠⲆ(this.source.x) : this.source.ΔᐃⵠⲆᐃΔᐃ < a.x ? ex.ᐃᐃⵠᐃᐃⵠⲆ(this.source.ΔᐃⵠⲆᐃΔᐃ) : b.x;
      d = a.y < this.source.y ? ex.ⲆⵠΔᐃΔⲆⵠ(this.source.y) : this.source.ⵠΔΔⵠΔ < a.y ? ex.ⲆⵠΔᐃΔⲆⵠ(this.source.ⵠΔΔⵠΔ) : b.y;
      this.ᐃᐃᐃⲆ.pos(c, d, -0.5, this.Ⲇⵠⵠ);
      this.ᐃᐃᐃⲆ.pos(c, d, -0.5, this.ⲆΔⵠ);
    };
  }
  ᐃΔΔΔⵠ = {
    ⵠⲆΔᐃᐃ: 2,
    ΔⵠᐃΔΔΔᐃΔΔ: 0.2,
    ΔⲆⲆⵠⵠΔΔ: Ue,
    ⲆⵠⵠⲆⲆⵠⵠⵠᐃ: 0.2,
    ⲆΔᐃⵠⵠΔⲆ: _g,
    ΔᐃⲆᐃᐃⲆⲆ: 2,
    ⵠᐃΔⲆⵠᐃΔ: 100,
    ΔΔⲆⵠΔⲆᐃ: 3,
    ⲆᐃΔᐃⵠΔΔ: P,
    ⵠᐃᐃⲆⲆⵠΔΔᐃ: 0.4,
    ᐃᐃΔⵠᐃⵠΔ: Ih,
    ⵠᐃⲆΔⲆᐃᐃᐃΔ: 0.2,
    ⲆⵠΔⲆⵠⲆΔ: Vj,
    ΔⲆⲆⵠΔⲆᐃ: 300
  };
  function cf(a, b, c) {
    this.ⵠᐃΔΔⵠⲆⲆ = a;
    this.c = 0;
    this.ᐃᐃᐃⲆ = b;
    this.ⲆⲆΔⵠᐃ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ⲆⲆΔⵠᐃ[this.c];
      this.ⵠᐃΔΔⵠⲆⲆ.ⲆⲆᐃⵠᐃⵠΔ(this.ᐃᐃᐃⲆ, a);
      this.ᐃᐃᐃⲆ.play(a);
    };
  }
  function mf(a) {
    this.ΔⵠⲆᐃᐃᐃⲆ = Oj;
    this.ⵠᐃΔΔ = qn;
    this.mode = -1;
    this.ⲆΔΔΔΔ = ex.sample.ⲆΔΔΔΔ[a];
    this.ⵠⲆⵠⲆⵠᐃⲆ = ex.sample.ⵠⲆⵠⲆⵠᐃⲆ[a];
    this.ΔΔⲆⲆⵠⵠΔ = ex.sample.ΔΔⲆⲆⵠⵠΔ[a];
    this.ᐃⵠᐃΔⲆΔΔ = ex.sample.ᐃⵠᐃΔⲆΔΔ[a];
    this.ᐃᐃⵠΔᐃⲆᐃ = new cf(this, uf.ⵠΔΔⲆⵠⵠⵠ.ΔⵠⲆⲆᐃ, ex.ⵠⵠⲆⵠΔ.ᐃᐃⵠΔᐃⲆᐃ[a]);
    this.ΔᐃΔⵠⵠ = new cf(this, uf.ⲆΔᐃⵠᐃⵠΔ.ΔⵠⲆⲆᐃ, ex.ⵠⵠⲆⵠΔ.ΔᐃΔⵠⵠ[a]);
    this.ⲆⲆᐃΔᐃ = new cf(this, uf.ᐃΔⲆᐃⵠᐃΔ.ΔⵠⲆⲆᐃ, ex.ⵠⵠⲆⵠΔ.ⲆⲆᐃΔᐃ[a]);
    this.Ⲇⵠⵠᐃⵠ = a;
    this.x = 0;
    this.y = 0;
    this.ⲆΔⵠᐃΔ = ne;
    this.ⲆᐃᐃⲆⵠ = ᐃΔΔΔⵠ.ᐃᐃᐃⵠᐃⵠⲆⵠΔ;
    this.ⲆⲆⲆⲆ = {
      y: qk,
      x: Ih
    };
    this.ⲆᐃΔᐃΔ = uf.ᐃⵠⲆΔⵠⵠⲆ.ΔⵠⲆⲆᐃ;
    this.ⵠΔⵠⲆⵠᐃΔᐃⵠ = function (a) {
      if (lf.ᐃⵠⲆΔᐃ === a) {
        this.ᐃᐃⵠΔᐃⲆᐃ.play();
      } else if (lf.ⵠΔⲆΔᐃ === a) {
        this.ΔᐃΔⵠⵠ.play();
      } else if (lf.ΔⵠΔΔⵠ === a) {
        this.ⲆⲆᐃΔᐃ.play();
      }
    };
    this.ᐃΔⵠΔⲆⵠΔ = function (a) {
      if (a.ᐃⲆⲆΔⵠᐃⵠ > Cn) {
        return ᐃΔΔΔⵠ.ⵠⲆΔᐃᐃ;
      } else if (a.Δᐃⵠᐃⵠⵠᐃ > 0) {
        return ᐃΔΔΔⵠ.ΔⲆⲆⵠⵠΔΔ;
      } else if (a.ᐃⲆⲆᐃⵠ > 0 || a.ᐃⲆΔⲆⵠ > gr) {
        return ᐃΔΔΔⵠ.ΔΔⲆⵠΔⲆᐃ;
      } else {
        return ᐃΔΔΔⵠ.ᐃᐃΔⵠᐃⵠΔ;
      }
    };
    this.ΔᐃΔⲆⵠ = function (a) {
      this.ΔⵠⲆᐃᐃᐃⲆ = 0;
      this.ⵠᐃΔΔ = a;
      var b = ff.ⵠΔΔⲆ[a];
      b.Ⲇⵠⵠᐃⵠ = this.Ⲇⵠⵠᐃⵠ;
      this.mode = this.ᐃΔⵠΔⲆⵠΔ(b);
      this.ⲆⲆⲆⲆ.x = b.x;
      this.ⲆⲆⲆⲆ.y = b.y;
    };
    this.ΔⵠⵠⲆⲆⲆⲆ = function () {
      this.ΔⵠⲆᐃᐃᐃⲆ = j;
      this.mode = -Ag;
      this.ⲆᐃΔᐃΔ.stop(this.ⲆΔΔΔΔ);
      this.ⲆᐃΔᐃΔ.stop(this.ⵠⲆⵠⲆⵠᐃⲆ);
      this.ⲆᐃΔᐃΔ.stop(this.ΔΔⲆⲆⵠⵠΔ);
      this.ⲆᐃΔᐃΔ.stop(this.ᐃⵠᐃΔⲆΔΔ);
    };
    this.fade = function (a, b) {
      var c = this.ⲆᐃΔᐃΔ.volume(a) * sf;
      this.ⲆᐃΔᐃΔ.fade(c, 0, b, a);
    };
    this.ⲆⲆᐃⵠᐃⵠΔ = function (a, b) {
      if (this.ⲆΔⵠᐃΔ && this.Ⲇⵠⵠᐃⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⲆΔᐃΔᐃ = function (b, c, d, e, f, g, i) {
      this.ⲆᐃᐃⲆⵠ = g;
      if (e && this.mode === f) {
        var a = sf * this.ⲆᐃΔᐃΔ.volume(b);
        if (this.ⲆΔⵠᐃΔ) {
          var j = (Math.random() * d + c) * sf;
          this.ⲆᐃΔᐃΔ.fade(a, j, i, b);
        } else {
          this.ⲆᐃΔᐃΔ[p[Iq]](a, ne, i, b);
        }
      } else if (this.mode != f && this.ⲆΔⵠᐃΔ) {
        this.ⲆᐃΔᐃΔ[p[wa]](0, (c + d) * sf, i, b);
      } else if (this.ⲆΔⵠᐃΔ) {
        a = this.ⲆᐃΔᐃΔ.volume(b) * sf;
        j = sf * (Math.random() * d + c);
        this.ⲆᐃΔᐃΔ[p[Wk]](a, j, i, b);
      }
      this.ⲆⲆᐃⵠᐃⵠΔ(this.ⲆᐃΔᐃΔ, b);
      this.ⲆᐃΔᐃΔ.play(b);
    };
    this.ᐃⲆΔ = function () {
      var a = ff.ⵠΔΔⲆ[this.ⵠᐃΔΔ];
      this.ⲆᐃᐃⲆⵠ -= xf;
      if (this.ⲆᐃᐃⲆⵠ <= 0) {
        var b = ne;
        if (this.ⲆⲆⲆⲆ.x != a.x || a.y != this.ⲆⲆⲆⲆ.y) {
          if (!this.ⲆΔⵠᐃΔ) {
            b = 1;
            this.ⲆΔⵠᐃΔ = 1;
          }
          this.x = ex.ΔᐃᐃⲆΔΔᐃ(a.x, ᐃΔΔΔⵠ.ΔᐃⲆᐃᐃⲆⲆ);
          this.y = ex.ⲆᐃΔᐃⵠⵠⵠ(a.y, ᐃΔΔΔⵠ.ΔᐃⲆᐃᐃⲆⲆ);
        } else if (this.ⲆΔⵠᐃΔ) {
          b = Ok;
          this.ⲆΔⵠᐃΔ = Tg;
        }
        this.ⲆⲆⲆⲆ.x = a.x;
        this.ⲆⲆⲆⲆ.y = a.y;
        ⵠⲆᐃⲆ = this.ᐃΔⵠΔⲆⵠΔ(a);
        if (this.mode != ⵠⲆᐃⲆ) {
          if (this.mode === ᐃΔΔΔⵠ.ΔⲆⲆⵠⵠΔΔ) {
            this.fade(this.ⲆΔΔΔΔ, ᐃΔΔΔⵠ.ΔⲆⲆⵠΔⲆᐃ);
          } else if (ᐃΔΔΔⵠ.ⵠⲆΔᐃᐃ === this.mode) {
            this.fade(this.ⵠⲆⵠⲆⵠᐃⲆ, ᐃΔΔΔⵠ.ⲆᐃΔᐃⵠΔΔ);
          } else if (ᐃΔΔΔⵠ.ᐃᐃΔⵠᐃⵠΔ === this.mode) {
            this.fade(this.ΔΔⲆⲆⵠⵠΔ, ᐃΔΔΔⵠ.ⲆⵠΔⲆⵠⲆΔ);
          } else if (this.mode === ᐃΔΔΔⵠ.ΔΔⲆⵠΔⲆᐃ) {
            this.fade(this.ᐃⵠᐃΔⲆΔΔ, ᐃΔΔΔⵠ.ⵠᐃΔⲆⵠᐃΔ);
          }
        }
        if (ⵠⲆᐃⲆ === ᐃΔΔΔⵠ.ΔⲆⲆⵠⵠΔΔ) {
          this.ⲆΔᐃΔᐃ(this.ⲆΔΔΔΔ, 0.08, 0.3, b, ⵠⲆᐃⲆ, ᐃΔΔΔⵠ.ⵠᐃᐃⲆⲆⵠΔΔᐃ, ᐃΔΔΔⵠ.ΔⲆⲆⵠΔⲆᐃ);
        } else if (ⵠⲆᐃⲆ === ᐃΔΔΔⵠ.ⵠⲆΔᐃᐃ) {
          this.ⲆΔᐃΔᐃ(this.ⵠⲆⵠⲆⵠᐃⲆ, 0.2, 0.3, b, ⵠⲆᐃⲆ, ᐃΔΔΔⵠ.ΔⵠᐃΔΔΔᐃΔΔ, ᐃΔΔΔⵠ.ⲆᐃΔᐃⵠΔΔ);
        } else if (ᐃΔΔΔⵠ.ᐃᐃΔⵠᐃⵠΔ === ⵠⲆᐃⲆ) {
          this.ⲆΔᐃΔᐃ(this.ΔΔⲆⲆⵠⵠΔ, 0.3, 0.6, b, ⵠⲆᐃⲆ, ᐃΔΔΔⵠ.ⲆⵠⵠⲆⲆⵠⵠⵠᐃ, ᐃΔΔΔⵠ.ⲆⵠΔⲆⵠⲆΔ);
        } else if (ᐃΔΔΔⵠ.ΔΔⲆⵠΔⲆᐃ === ⵠⲆᐃⲆ) {
          this.ⲆΔᐃΔᐃ(this.ᐃⵠᐃΔⲆΔΔ, 0.1, 0.25, b, ⵠⲆᐃⲆ, ᐃΔΔΔⵠ.ⵠᐃⲆΔⲆᐃᐃᐃΔ, ᐃΔΔΔⵠ.ⵠᐃΔⲆⵠᐃΔ);
        }
        this.mode = ⵠⲆᐃⲆ;
      }
    };
    this.check = function () {
      var a = ff.ⵠΔΔⲆ[this.ⵠᐃΔΔ];
      if (a) {
        return Qn;
      } else {
        this.ΔⵠⵠⲆⲆⲆⲆ(a);
        return ds;
      }
    };
  }
  ⲆⲆⵠΔΔΔᐃ = 0;
  document.getElementById("version").innerHTML = sw.ⲆⵠΔΔᐃⵠⲆ + ".3";
  var pf;
  var _w = [];
  var ax = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Ur.ⵠᐃⵠⲆΔ[ax.time];
  ax.items.push(new Cw(xw.ⵠΔⵠΔⲆ, 0, tj, 0, Gr, Math.random() * Math.PI * ql, 2, 1));
  ax.items.push(new Cw(xw.ⲆΔΔΔⵠ, _a, 0, tj, 0, 0, Cn, 5));
  ax.items.push(new Cw(xw.ᐃⲆᐃΔⵠ, tj, 0, 0, ms, Math.PI / 4, 0, Rl));
  ax.items.push(new Cw(xw.ⲆΔΔΔⵠ, 0, ne, 0, Cq, Tg, 0, 5));
  ⵠⵠⵠⲆ = new function () {
    var b = this;
    function a(a) {
      if (Lk === Pk) {
        fetch(`${Ff}rivet-token`).then(a => {
          if (a.ok) {
            return a.text();
          }
          throw "Failed to list lobbies: " + a.status;
        }).then(b => {
          a(b);
        });
      } else {
        a(null);
      }
    }
    this.ⲆⵠⲆⵠ = null;
    this.ⲆΔᐃᐃᐃ = 0;
    this.ⲆⲆᐃᐃⵠ = [];
    this.ⵠᐃΔⵠⵠ = [[], [], [], [], [], [], [], [], []];
    this.ⵠᐃΔⵠⲆΔⲆ = [-Al, -Gs, -1, -Ok, -Gs, -Ue, -Ok, -1, -1];
    this.ᐃᐃᐃⵠⵠ = 0;
    this.ⲆᐃⵠΔΔⵠⵠ = Cq;
    this.ᐃⵠᐃⲆⵠⲆⲆⵠΔ = function (c) {
      if (ow !== undefined) {
        b.ⲆⲆᐃᐃⵠ.push({
          a: ow.name,
          gm: ow.mode,
          idx: 0,
          m: 100,
          nu: _a,
          id: 0
        });
        c();
        return;
      }
      a(function (a) {
        let d = {};
        if (a) {
          d.Authorization = `Bearer ${a}`;
        }
        fetch(pw + "/matchmaker/lobbies/list", {
          method: "GET",
          headers: d
        }).then(a => {
          if (!a.ok) {
            console.error(Gg);
            throw "Failed to list lobbies";
          }
          a.json().then(d => {
            console.log(undefined, yq);
            b.ⲆⲆᐃᐃⵠ = [];
            let e = {};
            for (let a of d.game_modes) {
              b.ⲆⲆᐃᐃⵠ.push({
                a: "Auto Select",
                gm: a.game_mode_id,
                m: 100,
                nu: Qs,
                auto: Fs
              });
            }
            for (let c of d.lobbies) {
              let f;
              let g = c.game_mode_id;
              f = g in e ? ++e[g] : e[g] = 1;
              let h = d.regions.find(a => a.region_id == c.region_id);
              b.ⲆⲆᐃᐃⵠ.push({
                a: h.region_display_name + " " + f,
                gm: c.game_mode_id,
                idx: f,
                m: c.max_players_normal,
                nu: c.total_player_count,
                id: c.lobby_id
              });
            }
            c();
          });
        });
      });
    };
    this.ⲆⵠᐃⲆᐃᐃᐃⲆᐃ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf(qa) !== -1) {
          b.push(c);
        }
      }
      if (b.length === Fj) {
        return Gr;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⵠΔⲆⵠⲆΔΔ = function (a) {
      var b = 0;
      for (var c = 0; c < a.length; c++) {
        b += a[c].nu;
      }
      var d = document.getElementById(p[ka]);
      if (ⵠⵠⵠⲆ.ⵠᐃΔⵠⲆΔⲆ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ] === -1) {
        ⵠⵠⵠⲆ.ⵠᐃΔⵠⲆΔⲆ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ] = d.selectedIndex = ⵠⵠⵠⲆ.ⲆⵠᐃⲆᐃᐃᐃⲆᐃ(a);
      } else {
        d.selectedIndex = ⵠⵠⵠⲆ.ⵠᐃΔⵠⲆΔⲆ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ];
      }
      var e = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + a[d.selectedIndex].a + (a[d.selectedIndex].nu > 0 ? " [" + a[d.selectedIndex].nu + " " + qt[ΔΔᐃⵠ.ΔΔⲆⵠ] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + qt[ΔΔᐃⵠ.ΔᐃⵠⵠⲆⲆⲆ] + " (" + this.ⲆΔᐃᐃᐃⵠΔ + ") " + qt[ΔΔᐃⵠ.ΔⵠΔΔᐃⲆⵠ] + "</li>";
      for (c = 0; c < a.length; c++) {
        e += "<li role=\"option\">" + a[c].a;
        e += " [" + a[c].nu + " " + qt[ΔΔᐃⵠ.ΔΔⲆⵠ] + "]";
        e += "</li>\n";
      }
      e += "<li role=\"option\" id=\"selectDisabled\">(" + b + ") " + qt[ΔΔᐃⵠ.ⵠᐃᐃⵠⲆΔᐃ] + "</li>";
      e += "</div>";
      d.innerHTML = e;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var a = $(this).text();
        var b = -1;
        for (var c = ⵠⵠⵠⲆ.ⵠᐃΔⵠⵠ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ], d = rl; c.length > d; d++) {
          if (c[d].a + " [" + c[d].nu + " " + qt[ΔΔᐃⵠ.ΔΔⲆⵠ] + "]" === a) {
            b = d;
            break;
          }
        }
        if (b !== -1) {
          document.getElementById("servselect").selectedIndex = b;
          ⵠⵠⵠⲆ.ⵠᐃΔⵠⲆΔⲆ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ] = b;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(a);
        }
      });
    };
    this.ⲆΔᐃᐃᐃⵠΔ = 0;
    this.ⵠᐃⵠΔⲆᐃᐃΔⵠ = function () {
      this.ⲆΔᐃᐃᐃⵠΔ = 0;
      for (var a = ur; ⵠⵠⵠⲆ.ⲆⲆᐃᐃⵠ.length > a; a++) {
        if (this.ⲆⲆᐃᐃⵠ[a].gm == "experimental") {
          this.ⵠᐃΔⵠⵠ[uw.ΔΔⲆΔⵠ].push(this.ⲆⲆᐃᐃⵠ[a]);
        } else if (this.ⲆⲆᐃᐃⵠ[a].gm == "zombies") {
          this.ⵠᐃΔⵠⵠ[uw.ΔΔⵠⲆΔ].push(this.ⲆⲆᐃᐃⵠ[a]);
        } else if (this.ⲆⲆᐃᐃⵠ[a].gm == "forest") {
          this.ⵠᐃΔⵠⵠ[uw.ΔᐃⵠΔᐃ].push(this.ⲆⲆᐃᐃⵠ[a]);
        } else if (this.ⲆⲆᐃᐃⵠ[a].gm == "battle-royale") {
          this.ⵠᐃΔⵠⵠ[uw.ⵠⲆΔⵠⵠΔᐃ].push(this.ⲆⲆᐃᐃⵠ[a]);
        } else if (this.ⲆⲆᐃᐃⵠ[a].gm == "vampires") {
          this.ⵠᐃΔⵠⵠ[uw.ΔⵠⵠⲆᐃ].push(this.ⲆⲆᐃᐃⵠ[a]);
        } else {
          this.ⵠᐃΔⵠⵠ[uw.ⵠΔⵠⵠⲆ].push(this.ⲆⲆᐃᐃⵠ[a]);
        }
        this.ⲆΔᐃᐃᐃⵠΔ += this.ⲆⲆᐃᐃⵠ[a].nu;
      }
      for (a = 0; a < this.ⵠᐃΔⵠⵠ.length; a++) {
        if (this.ⵠᐃΔⵠⵠ[a].length === Ih) {
          this.ⵠᐃΔⵠⵠ[a].push({
            a: qt[ΔΔᐃⵠ.ᐃΔⵠⲆᐃΔᐃ],
            ᐃⲆⵠⵠᐃΔᐃⲆᐃ: 0,
            Δⵠ: "127.0.0.1",
            ΔⲆⵠ: 80
          });
        }
      }
      this.ⵠΔⲆⵠⲆΔΔ(this.ⵠᐃΔⵠⵠ[ur]);
      this.ⲆᐃᐃΔⲆ = function (a) {
        ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ = a;
        ⵠⵠⵠⲆ.ⵠΔⲆⵠⲆΔΔ(ⵠⵠⵠⲆ.ⵠᐃΔⵠⵠ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ]);
        ⵠⵠⵠⲆ.ⵠΔⲆⵠⲆΔΔ(ⵠⵠⵠⲆ.ⵠᐃΔⵠⵠ[ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ]);
        document.getElementById(p[fu]).selectedIndex = ⵠⵠⵠⲆ.ᐃᐃᐃⵠⵠ;
      };
    };
    this.ᐃⲆΔᐃⲆΔⵠ = 0;
    this.ⲆᐃⵠⵠⵠⲆⲆ = gr;
    this.Ⲇᐃᐃⵠⵠ = null;
    this.timeout = function () {
      b.ⲆᐃⵠⵠⵠⲆⲆ++;
      b.ⲆⵠⲆⵠ.close();
      if (b.ⲆᐃⵠⵠⵠⲆⲆ > sw.ᐃⵠⲆᐃᐃⵠᐃⵠⲆ) {
        Ef = Ag;
        pf.ΔΔᐃⲆΔⵠⲆΔᐃ = sw.ⵠⵠᐃⵠⵠΔⵠΔⵠ;
        b.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ᐃᐃΔⵠᐃⵠⵠ]);
        pf.waiting = false;
        if (bx.reconnect.enabled) {
          dx.ⲆⲆΔᐃⲆ(pf.ΔⲆᐃⵠΔ);
        }
      } else {
        b.ᐃᐃᐃⵠⵠΔⵠ();
      }
    };
    this.ⵠⲆⲆᐃⵠᐃⲆ = function (a) {
      if (this.ⲆΔᐃᐃᐃ == this.ⲆⵠⲆⵠ.ⲆΔᐃᐃᐃ) {
        this.ⲆΔᐃᐃᐃ++;
        this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⵠᐃᐃⲆⲆᐃⵠ] + a);
        dx.ⲆⲆΔᐃⲆ(pf.ΔⲆᐃⵠΔ);
      }
    };
    this.ᐃᐃᐃⵠⵠⲆⲆ = function () {
      this.ΔΔΔⵠᐃ("You speak too much");
    };
    this.ⵠⲆⲆΔᐃΔⵠⲆⵠ = function () {
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ᐃⲆᐃΔᐃⵠⲆ]);
      pf.waiting = false;
    };
    this.ⲆΔⲆⵠᐃⲆⲆⲆⵠ = function () {
      bx.ⵠⵠᐃⲆᐃ.open = Ao;
    };
    this.ⵠⲆΔᐃⵠΔᐃΔᐃ = function () {
      dx.ᐃᐃⲆⲆⵠⲆΔ = 0;
    };
    this.ⵠⵠⵠⵠⲆⵠⵠᐃⵠ = function () {
      dx.ⵠⲆⲆΔᐃⵠᐃ = Nl;
    };
    this.ΔⲆⲆΔᐃⵠⵠΔⲆ = function (a) {
      bx.ⵠⲆᐃᐃᐃ.ΔᐃⲆⵠᐃ = a;
      if (ff.ⵠⵠᐃΔΔ > -300) {
        if (a === 0) {
          this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⵠⵠⲆΔⵠᐃⲆ]);
        } else {
          this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⵠⲆᐃᐃⵠⵠⲆ]);
        }
      }
    };
    this.ⵠⵠΔⵠᐃ = function (a) {
      bx.ⵠⵠΔⵠᐃ = a;
    };
    this.ΔⲆᐃᐃⵠᐃΔⲆⵠ = function (a) {
      bx.ᐃΔΔⲆⲆⲆⲆ = a;
    };
    this.ᐃΔΔⲆⲆⲆⲆ = function (a) {
      bx.ⵠΔΔⵠⵠ.ΔᐃⲆⵠᐃ = a;
      if (ff.ᐃⲆⲆᐃⵠ > -300) {
        if (a === 0) {
          this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ᐃⵠⲆᐃⵠⵠⲆ]);
        } else {
          this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔᐃⲆⲆⵠⲆⲆ]);
        }
      }
    };
    this.ΔΔⵠⵠⲆᐃᐃⵠⵠ = function (a) {
      if (Rl === a) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === co) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃⲆⲆⲆⵠᐃⵠⲆᐃ = function () {
      dx.ⲆΔΔⵠᐃᐃⲆ = vq;
    };
    this.ΔΔⵠΔⵠⲆᐃᐃⵠ = function () {
      dx.ΔⲆⵠⲆⵠᐃⵠ = Qs;
    };
    this.ⵠᐃᐃᐃⲆΔⵠⵠⲆ = function () {
      bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ = [];
      bx.ⵠⵠΔΔ.ⵠΔⲆ = [];
      bx.ⵠⵠΔΔ.id = -1;
      bx.ⵠⵠΔΔ.ΔᐃᐃⲆⵠᐃᐃ.stop();
      bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ = [];
      bx.ⵠⲆⵠᐃ.Δᐃᐃⵠᐃ = false;
      bx.ⵠⲆⵠᐃ.ᐃΔΔᐃΔⵠᐃⵠΔ = hr;
      bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -aa;
      bx.ⵠⲆⵠᐃ.id = -1;
      bx.ⵠⲆⵠᐃ.ᐃⲆᐃⲆΔ = false;
      bx.ⵠⲆⵠᐃ.ⲆΔⵠⵠⵠ = En;
      bx.ⵠⲆⵠᐃ.ᐃΔⵠΔⵠ = cg;
      bx.ⵠⲆⵠᐃ.ᐃΔⲆⲆΔⲆⲆ = false;
      bx.ⵠⲆⵠᐃ.timeout = new ᐃⵠΔⵠ.ΔⲆΔᐃ(hr, 0, 1, qn, As, jq);
    };
    this.ΔΔΔⲆⲆⲆΔⵠⵠ = function () {
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ();
      pf.waiting = false;
    };
    this.ⵠⵠⲆᐃᐃΔⵠ = function (a) {
      for (var b = 0; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ᐃⵠΔⵠ.ⵠΔΔᐃᐃⲆⵠ(a[b]);
        }
      }
      bx.ᐃᐃᐃᐃᐃ.ᐃΔⲆⵠΔ(a[$l], a[zk], a[3], a[Eg]);
    };
    this.message = function (a) {
      this.ΔΔΔⵠᐃ(a);
    };
    this.ΔΔΔᐃⵠⵠⵠΔΔ = function () {
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⲆⵠᐃᐃΔⲆⵠ]);
      pf.waiting = false;
    };
    this.ⵠᐃᐃΔᐃᐃᐃᐃⲆ = function () {
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔΔⵠⵠⵠⲆΔ]);
      pf.waiting = false;
    };
    this.ⲆⲆᐃΔⵠΔΔΔⲆ = function () {
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔⵠᐃΔᐃⵠⲆ]);
      pf.waiting = Sh;
    };
    this.ᐃΔⵠᐃΔᐃⵠⵠΔ = function () {
      bx.ⵠⵠΔΔ.ⲆⵠⵠΔⲆᐃΔ(Ht, Fj);
      dx.ᐃⵠⲆⲆⵠⲆᐃ();
    };
    this.ⲆⵠΔΔⲆⵠⲆᐃⲆ = function (a) {
      var b = a[Ag];
      var c = ff.ⲆΔⲆΔ[b];
      c.ᐃᐃΔᐃ = a[ql];
      c.ᐃΔᐃⵠⵠ = a[3];
      c.ⲆⲆⵠᐃⲆⲆΔ = a[4];
      c.ΔΔᐃᐃⵠ = a[cd];
      c.ΔᐃⵠⲆⲆ = a[wg];
      c.ΔΔᐃⵠⲆ = a[Qr];
      c.level = a[le];
      var d = ff.ⵠΔΔⲆ[b * ff.ΔᐃᐃΔⵠⵠᐃ];
      if (d) {
        d.ᐃᐃΔᐃ = a[2];
        d.ᐃΔᐃⵠⵠ = a[Qt];
        d.ⲆⲆⵠᐃⲆⲆΔ = a[4];
        d.ΔΔᐃᐃⵠ = a[Os];
      }
    };
    this.ⲆⵠⲆᐃΔⲆⵠᐃⲆ = function (a) {
      if (bs.ᐃⵠⲆΔ === a) {
        bx.ⵠⵠΔΔ.ⲆⵠⵠΔⲆᐃΔ(Ue, ne);
        dx.ᐃⵠⲆⲆⵠⲆᐃ();
      } else {
        this.ⲆᐃⵠⵠⲆᐃᐃ([0, a, Fh]);
      }
      bx.ⵠⲆⵠᐃ.ΔⵠⲆᐃΔⲆΔ();
    };
    this.ⵠᐃⲆΔⵠⵠᐃᐃⲆ = function (a) {
      bx.ΔⲆᐃΔΔ.ⲆᐃᐃⲆⵠ = 0;
      bx.ⵠⲆⵠᐃ.ΔⲆᐃⵠⵠᐃᐃᐃⲆ(a);
    };
    this.ᐃᐃᐃᐃⵠⲆⵠⲆⲆ = function (a) {
      for (var b = Ng[a].r, c = 0; b.length > c; c++) {
        if (bx.ⵠⵠΔΔ.max > bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length || Qs < bx.ⵠⵠΔΔ.ⵠΔⲆ[b[c][gr]]) {
          var d = Math.floor(b[c][As] * 0.8);
          if (!d) {
            continue;
          }
          this.ⲆᐃⵠⵠⲆᐃᐃ([Tg, b[c][0], d]);
        }
      }
      bx.ⵠⲆⵠᐃ.ΔⵠⲆᐃΔⲆΔ();
    };
    this.ⵠΔᐃⲆᐃᐃᐃⵠⲆ = function (a) {
      bx.ΔⲆᐃΔΔ.ⲆᐃᐃⲆⵠ = uh;
      bx.ⵠⲆⵠᐃ.ΔⲆΔᐃⵠᐃⲆΔⲆ(a);
    };
    this.ΔΔΔⵠᐃ = function (a) {
      if (bx.alert.text) {
        if (bx.alert.text !== a && a !== bx.alert.list[bx.alert.list.length - 1]) {
          bx.alert.list.push(a);
        }
      } else {
        bx.alert.text = a;
      }
    };
    this.ᐃΔᐃⵠⵠᐃⲆⵠⵠ = function () {
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⲆⲆᐃᐃⲆⲆⲆ]);
    };
    this.ⵠⵠⲆⲆᐃΔᐃⵠᐃ = function () {
      var a;
      a = bx.ⲆΔⵠ == 0 ? qt[ΔΔᐃⵠ.ΔΔⵠᐃΔⵠΔ] : qt[ΔΔᐃⵠ.ΔⵠΔᐃⵠᐃⲆ] + (bx.ⲆΔⵠ + _b) + qt[ΔΔᐃⵠ.ⲆᐃⲆᐃᐃΔⵠ];
      this.ΔΔΔⵠᐃ(a);
      bx.ⲆΔⵠ++;
    };
    this.ⵠᐃᐃⲆΔⵠΔΔⵠ = function () {
      clearTimeout(b.Ⲇᐃᐃⵠⵠ);
      bx.reconnect.enabled = false;
      bx.ⲆⲆΔΔᐃ = Rs;
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ᐃΔΔⵠᐃⲆⵠ]);
      dx.ⲆⲆΔᐃⲆ(pf.ΔⲆᐃⵠΔ);
      this.ⲆⵠⲆⵠ.close();
    };
    this.ⵠⵠΔⲆⵠᐃⵠᐃΔ = function () {
      Ef = Ht;
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⵠΔᐃΔⵠⵠⵠ]);
      pf.waiting = false;
    };
    this.ⲆⲆⲆΔΔⵠΔᐃΔ = function () {
      Ef = Gs;
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔΔⲆᐃᐃⵠΔ]);
      pf.waiting = Y;
    };
    this.ⲆⵠΔΔΔΔⵠΔⲆ = function (a) {
      var b = a[1];
      var c = ff.ⲆΔⲆΔ;
      c[b].ⵠᐃΔⵠⲆ = a[qd];
      c[b].ᐃᐃΔᐃ = a[3];
      c[b].ᐃΔᐃⵠⵠ = a[4];
      c[b].ⲆⲆⵠᐃⲆⲆΔ = a[5];
      c[b].ΔΔᐃᐃⵠ = a[M];
      c[b].ΔᐃⵠⲆⲆ = a[$j];
      c[b].ΔΔᐃⵠⲆ = a[8];
      c[b].level = a[rn];
      c[b].ⵠⲆΔⵠΔ = Tg;
      c[b].ⵠᐃΔⲆⵠΔⲆ = null;
      c[b].label = null;
      c[b].ΔΔⵠΔᐃⲆⲆ = null;
      c[b].ⲆⲆΔΔᐃ = f;
      if (mw === Ok) {
        c[b].ⵠᐃΔⵠⲆ += "|" + b;
      }
    };
    this.ⲆⵠΔᐃⵠᐃΔᐃⲆ = function () {
      this.ⲆⵠⲆⵠ[lw](Mo[jo].stringify([uq]));
    };
    this.ⵠᐃⲆᐃⵠⲆᐃᐃΔ = function () {
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.EMPTY]);
    };
    this.ⲆᐃᐃⵠⲆⲆᐃ = function () {
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⵠⲆⵠⲆⲆⲆΔ]);
    };
    this.ⵠᐃⵠᐃᐃⵠⵠΔᐃ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Dq[Sq].stringify([21, a]));
      bx.ⵠⵠᐃⲆᐃ.open = kl;
    };
    this.ᐃⲆᐃΔⲆⵠᐃᐃⲆ = function (a) {
      for (var b = rw[a - 1].items, c = Gr; c < b.length && bx.ⵠⵠΔΔ.max > bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === bs.ᐃⵠⲆΔ) {
          bx.ⵠⵠΔΔ.ⲆⵠⵠΔⲆᐃΔ(Ej, gr);
        } else {
          this.ⲆᐃⵠⵠⲆᐃᐃ([gr, d, e]);
        }
      }
    };
    this.ⲆᐃⵠⵠⲆᐃᐃ = function (b) {
      for (var c = b.length, d = bx.ⵠⵠΔΔ, e = 1; e < c; e += re) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; d.ⲆΔⲆᐃᐃ.length > h; h++) {
          if (f == d.ⲆΔⲆᐃᐃ[h].id) {
            d.ⵠΔⲆ[f] += g;
            break;
          }
        }
        if (h == d.ⲆΔⲆᐃᐃ.length) {
          d.ⵠΔⲆ[f] = g;
          d.ⲆΔⲆᐃᐃ.push(dx.ⲆΔΔ[f]);
          dx.ᐃⵠⲆⲆⵠⲆᐃ();
        }
      }
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ⲆⲆⲆΔ = function (b, c, d, e, f, g, h) {
      bx.ⲆⲆⲆΔ.ΔΔⵠⵠ = b / F;
      bx.ⲆⲆⲆΔ.ⵠΔⵠ = c / Mk;
      bx.ⲆⲆⲆΔ.c = d / P;
      bx.ⲆⲆⲆΔ.ᐃΔΔ = e / 100;
      bx.ⲆⲆⲆΔ.ⲆⵠΔ = f / 100;
      bx.ⲆⲆⲆΔ.ⲆⲆⲆⵠⲆᐃΔ = g / fs;
      bx.ⵠⵠΔⵠᐃ = h;
    };
    this.ᐃⵠⲆⲆⵠᐃᐃⲆⵠ = function (a) {
      dx.ⲆᐃⵠⲆ.modify(a, Zt);
    };
    this.ⵠⵠⲆⲆΔⵠΔᐃⲆ = function (a) {
      dx.ⲆᐃⵠⲆ.modify(a, ne);
    };
    this.claimed = function (a) {
      dx.ⲆᐃⵠⲆ.modify(a, 3);
    };
    this.ΔΔΔΔΔⲆΔᐃⲆ = function (a, b) {
      bx.ⲆⲆⲆΔ.ΔΔⵠⵠ = a / Nh;
      bx.ⵠⵠΔⵠᐃ = b;
    };
    this.ΔⵠⲆᐃⲆⲆΔᐃⵠ = function (a) {
      bx.ⲆⲆⲆΔ.ᐃΔΔ = a / mg;
    };
    this.ΔᐃΔᐃⵠⲆⲆⵠⵠ = function (a) {
      bx.ⲆⲆⲆΔ.ⵠΔⵠ = a / 100;
    };
    this.ΔⲆⵠⲆᐃⵠᐃᐃⵠ = function (a) {
      bx.ⲆⲆⲆΔ.ⲆⲆⲆⵠⲆᐃΔ = a / 100;
    };
    this.ᐃΔⵠᐃΔⲆⵠⲆᐃ = function (a) {
      bx.ⲆⲆⲆΔ.c = a / 100;
    };
    this.ⲆⲆᐃΔⲆⵠⲆⵠⲆ = function (a) {
      ff.time = a;
      ff.transition = true;
      ex.transition = 1;
    };
    this.ΔⲆΔᐃᐃⲆΔⵠⲆ = function () {
      document.getElementById("game_body").style.backgroundColor = Ur.ⵠᐃⵠⲆΔ[ff.time];
    };
    this.ⵠᐃⵠⵠⲆᐃΔⲆⲆ = function (a) {
      if (ff.mode == uw.ΔⲆΔⲆⲆⵠᐃ && ff.ⲆΔⲆΔ[a].ⵠᐃΔⵠⲆ !== "spectator") {
        this.ΔΔΔⵠᐃ(ff.ⲆΔⲆΔ[a].ⵠᐃΔⵠⲆ + qt[ΔΔᐃⵠ.ⵠᐃΔⵠᐃΔᐃ]);
      }
      ff.ⲆΔⲆΔ[a].ⲆⲆΔΔᐃ = d;
    };
    this.ⲆⵠᐃⵠⲆⲆⵠⲆᐃ = function (a) {
      var b = new Uint16Array(a);
      ᐃᐃᐃⲆ.ᐃᐃⵠ.ΔⵠᐃΔⵠ(b[1], b[2]);
    };
    this.ᐃᐃⵠᐃᐃᐃⲆⲆΔ = function (a) {
      var b = new Uint16Array(a);
      bx.ᐃᐃⵠ.ΔⵠᐃΔⵠ(b[Ht], b[gc]);
    };
    this.ᐃᐃⵠⲆⲆⵠⵠⵠⲆ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - Zn) / 4, f = rl; e > f; f++) {
        var g = d[_b + tg * f];
        var i = b[4 + Cg * f];
        var j = (b[5 + Eg * f] >> As) / 127 * Math.PI * 2;
        var k = ff.ⵠΔΔⲆ[i * ff.ΔᐃᐃΔⵠⵠᐃ + g];
        if (k && k.ΔΔΔ) {
          if (ex.loaded && ex.ΔⲆᐃⵠΔ) {
            ex.ΔΔΔ(b[5 + Db * f] & Ue, ⲆⵠᐃΔΔ[k.type], k.x, k.y);
          }
          k.ΔΔΔ.angle = j;
          k.ΔΔΔ.ᐃⲆΔ = j;
        }
      }
    };
    this.ⵠΔΔᐃⵠᐃᐃⵠᐃ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / rg, e = 0; d > e; e++) {
        var i;
        var j = e * 4;
        var k = c[Oj + j];
        var m = c[hc + j];
        var p = Math.PI * ((c[3 + j] >> Ag) / 127) * 2;
        var q = c[4 + j];
        var t = _w.ⵠⲆⵠⵠ[m][k];
        switch (q) {
          case tj:
            (i = t.p[0][qk]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 1:
            (i = t.s[0][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 2:
            (i = t.s[Ok][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case co:
            (i = t.s[wr][Tg]).angle = p;
            i.ᐃⲆΔ = Fs;
            break;
          case 4:
            (i = t.t[0][0]).angle = p;
            i.ᐃⲆΔ = Qn;
            break;
          case gg:
            (i = t.t[1][Cq]).angle = p;
            i.ᐃⲆΔ = f;
            break;
          case 6:
            (i = t.t[wr][ne]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case th:
            (i = t.t[Kj][Rl]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case ph:
            (i = t.t[4][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case Dk:
            (i = t.t[ha][0]).angle = p;
            i.ᐃⲆΔ = an;
            break;
          case Fl:
            (i = t.g[Ih][0]).angle = p;
            i.ᐃⲆΔ = nr;
            break;
          case $h:
            (i = t.g[ag][qn]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case Jt:
            (i = t.g[wr][0]).angle = p;
            i.ᐃⲆΔ = nr;
            break;
          case 13:
            (i = t.d[Qs][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case Bh:
            (i = t.d[Ag][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case kg:
            (i = t.d[2][ur]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 16:
            (i = t.b[0][ms]).angle = p;
            i.ᐃⲆΔ = dn;
            break;
          case 17:
            (i = t.b[1][0]).angle = p;
            i.ᐃⲆΔ = Fs;
            break;
          case I:
            (i = t.b[gc][ne]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case Vs:
            (i = t.b[3][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 20:
            (i = t.f[0][Fj]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 21:
            (i = t.f[Gs][0]).angle = p;
            i.ᐃⲆΔ = ra;
            break;
          case 22:
            (i = t.f[lt][Qs]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 23:
            (i = t.sw[Fj][Rl]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 24:
            (i = t.sw[1][0]).angle = p;
            i.ᐃⲆΔ = dn;
            break;
          case 25:
            (i = t.sw[hc][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 26:
            (i = t.gw[ne][_a]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 27:
            (i = t.gw[1][gr]).angle = p;
            i.ᐃⲆΔ = an;
            break;
          case 28:
            (i = t.gw[Zt][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 29:
            (i = t.dw[ur][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 30:
            (i = t.dw[1][0]).angle = p;
            i.ᐃⲆΔ = zo;
            break;
          case 31:
            (i = t.dw[2][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 32:
            (i = t.a[rl][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 33:
            (i = t.a[Ht][0]).angle = p;
            i.ᐃⲆΔ = Xn;
            break;
          case 34:
            (i = t.a[2][Qs]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 35:
            (i = t.cs[0][Cn]).angle = p;
            i.ᐃⲆΔ = an;
            break;
          case 36:
            (i = t.cs[Ht][Tg]).angle = p;
            i.ᐃⲆΔ = Xn;
            break;
          case 37:
            (i = t.cs[ld][0]).angle = p;
            i.ᐃⲆΔ = Mh;
            break;
          case 38:
            (i = t.cs[dt][tj]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 40:
            (i = t.plm[0][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 41:
            (i = t.plm[1][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 42:
            (i = t.plm[2][0]).angle = p;
            i.ᐃⲆΔ = Ir;
            break;
          case 50:
            (i = t.re[0][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 51:
            (i = t.re[1][0]).angle = p;
            i.ᐃⲆΔ = Vr;
            break;
          case 52:
            (i = t.re[2][0]).angle = p;
            i.ᐃⲆΔ = Xn;
            break;
          case 55:
            (i = t.c[0][0]).angle = p;
            i.ᐃⲆΔ = f;
            break;
          case 56:
            (i = t.m[Gr][Tg]).angle = p;
            i.ᐃⲆΔ = nr;
            break;
          case 57:
            (i = t.m[1][0]).angle = p;
            i.ᐃⲆΔ = true;
            break;
          case 58:
            (i = t.m[2][0]).angle = p;
            i.ᐃⲆΔ = Kh;
        }
        if (ex.loaded && ex.ΔⲆᐃⵠΔ && i) {
          ex.ΔΔΔ(c[xs + j] & zs, ᐃⲆᐃⵠ[q], i.x, i.y);
        }
      }
    };
    this.ᐃⵠᐃⲆᐃ = function () {
      this.ⲆⵠⲆⵠ[lw](zq[Qo].stringify([it, bx.ᐃⵠᐃⲆᐃ.ΔΔΔⵠ, bx.ᐃⵠᐃⲆᐃ.ⲆΔΔᐃᐃ]));
    };
    this.ΔΔΔⲆⵠⲆⵠⲆⵠ = function (a, b) {
      this.ⲆⵠⲆⵠ[lw](zq[$o].stringify([22, b, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ⵠΔⲆΔⲆᐃⵠ = function (a, b, c) {
      if (b) {
        this.ⲆⵠⲆⵠ[lw](zq[$o].stringify([25, b, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
      } else {
        this.ⲆⵠⲆⵠ[lw](zq[Uo].stringify([24, c, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
      }
    };
    this.ⵠᐃᐃᐃⵠⲆⵠⵠⵠ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([26, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ⵠᐃΔΔⵠΔᐃᐃⲆ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Mq[br].stringify([27, a]));
    };
    this.ⵠⵠⵠᐃΔΔⵠᐃⲆ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Jq[Qo].stringify([30, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ΔᐃⵠΔⲆⵠᐃΔΔ = function (a, b) {
      this.ⲆⵠⲆⵠ[lw](Dq[Lq].stringify([38, b, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ, a.type]));
    };
    this.ΔᐃⵠᐃⵠᐃᐃⵠΔ = function (a, b) {
      this.ⲆⵠⲆⵠ[lw](Dq[Lq].stringify([Rh, b, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ⲆⵠⵠⲆᐃⲆᐃⲆⲆ = function (a, b, c) {
      this.ⲆⵠⲆⵠ[lw](Jq[$o].stringify([tu, b, c, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ⲆᐃⲆΔⵠⵠⵠ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([37, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ, a.type]));
    };
    this.ⲆⲆΔᐃⵠⲆΔᐃΔ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([23, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ΔΔΔⲆᐃⲆΔⲆᐃ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([9, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ΔⵠⵠᐃΔⵠⲆᐃᐃ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Tq[Rq].stringify([15, a.ΔΔΔⵠ, a.ⲆΔΔᐃᐃ]));
    };
    this.ΔΔⲆᐃᐃᐃⲆᐃᐃ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Xq[Sq].stringify([Pq, a.ⲆΔΔᐃᐃ]));
    };
    this.ⲆᐃⵠΔⵠᐃᐃ = function (a) {
      b.ⲆⵠⲆⵠ[lw](dr[br].stringify([20, bx.ⵠⲆⵠⲆΔ.id, bx.ⲆΔΔΔᐃ[a]]));
    };
    this.ⵠⲆΔᐃΔΔⵠᐃⵠ = function () {
      b.ⲆⵠⲆⵠ[lw](Ar[jr].stringify([at, bx.ⵠⲆⵠⲆΔ.ΔΔΔⵠ, bx.ⵠⲆⵠⲆΔ.id]));
    };
    this.ΔⵠᐃⵠᐃᐃΔ = function () {
      b.ⲆⵠⲆⵠ[lw](Dr[Cr].stringify([Ko]));
    };
    this.ⵠⵠᐃⵠⵠΔΔⲆᐃ = function () {
      b.ⲆⵠⲆⵠ[lw](Dr[br].stringify([35, bx.ⵠⲆⵠⲆΔ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        bx.ⵠⲆⵠⲆΔ.lock = jq;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        bx.ⵠⲆⵠⲆΔ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ᐃᐃᐃ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        ff.ᐃⵠⵠⲆΔⵠⲆᐃᐃ();
      }
      for (var n = (e.length - Zt) / at, o = tj; n > o; o++) {
        var q = sh + fa * o;
        var t = jq + o * Cs;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * ff.ΔᐃᐃΔⵠⵠᐃ + y;
        if (x & qw.ⲆᐃΔΔᐃΔᐃⵠΔ) {
          ff.ᐃⲆΔΔⵠⵠⲆⲆΔ(z);
        } else {
          var A = k[t + wr];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + nb];
          var H = e[q + 1] / al * Math.PI * 2;
          if (ff.ⵠΔΔⲆ[z]) {
            var I = ff.ⵠΔΔⲆ[z];
            I.r.x = B;
            I.r.y = D;
            if (Cq != w && sw.ⲆⲆᐃⲆⵠᐃⵠΔⵠ < ᐃⵠΔⵠ.ⲆⵠⲆᐃ(I, I.r)) {
              I.x = B;
              I.y = D;
            }
            if (I.id !== bx.id || Cq === w) {
              I.ⲆΔⲆΔΔᐃΔ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⲆᐃⲆⲆⲆ = F;
            I.ᐃᐃⵠΔⵠ = G;
            if (I.ᐃⲆΔ) {
              I.ᐃⲆΔ(x);
            }
          } else {
            var J = new Cw(A, w, y, B, D, H, x, E, F, G);
            ff.ⵠΔΔⲆ[z] = J;
            ff.ᐃᐃᐃ[A].push(J);
          }
        }
      }
    };
    this.ᐃΔΔⵠ = function (a) {
      this.ᐃⲆΔᐃⲆΔⵠ = fx;
      var b = new Uint16Array(a);
      bx.ⵠⵠΔᐃⵠ.ΔᐃΔⲆⵠ(b);
    };
    this.ᐃᐃⲆⲆΔΔΔᐃⵠ = function (a) {
      if (Lg !== undefined) {
        Ng = Lg;
      }
      if (a.length > 0) {
        Lg = JSON.parse(JSON.stringify(Ng));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = Ng[c.item];
          if (d !== Zi) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⲆⵠΔ = c.water;
            d.e = c.well;
            d.time = ag / c.time;
          }
        }
      }
    };
    this.ⲆΔᐃᐃΔⵠⵠ = function (a) {
      if (a && a.length !== qk) {
        bx.ⲆΔᐃᐃΔⵠⵠ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; -Zq !== b.indexOf("\\n");) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          Ⲇᐃ = [];
          var f = fh;
          var g = (f + Ph) * b.length + Va;
          var h = Nl;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; i < b.length; i++) {
            if (b[i].charAt(ne) === "#") {
              Ⲇᐃ[i] = b[i].substring(0, th);
              b[i] = b[i].substring(yb);
            } else {
              Ⲇᐃ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + 16, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; i < b.length; i++) {
            var j = Wu($l, b[i], f, Ⲇᐃ[i], null, null, null, null, null, "#000", gq);
            d.drawImage(j, le, (f + 4) * i + Ku);
          }
          return c;
        }(a);
      } else {
        bx.ⲆΔᐃᐃΔⵠⵠ.message = yr;
      }
    };
    this.ᐃⵠⵠΔⲆ = function (a) {
      var b = ff.ⵠΔΔⲆ[a[1] * ff.ΔᐃᐃΔⵠⵠᐃ];
      if (b) {
        if (uw.ΔΔⵠⲆΔ === ff.mode && b.ᐃᐃΔᐃ === uw.ΔⲆⲆⵠᐃᐃᐃ) {
          if (bx.ᐃⵠⲆⵠⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ΔⵠᐃⲆᐃ);
            } else {
              b.text.push(ΔⵠᐃⲆᐃ + "... " + a[wr]);
            }
          } else {
            b.text.push(ᐃⲆⲆᐃΔΔΔ[Math.floor(Math.random() * ᐃⲆⲆᐃΔΔΔ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ΔⲆⲆⵠⵠᐃⵠᐃᐃ = function (a) {
      if (bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ.length !== bx.ⵠⵠΔΔ.max || Ng[a].ΔᐃⲆⲆ === bs.ᐃⵠⲆΔ || bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(Ng[a].ΔᐃⲆⲆ) != -Ue || bx.ⵠⵠΔΔ.ⲆΔΔⲆΔᐃⵠΔΔ(Ng[a].r)) {
        this.ⲆⵠⲆⵠ[lw](Mo[jo].stringify([Ck, a]));
        return Eo;
      } else {
        this.ⲆᐃᐃⵠⲆⲆᐃ();
        return 0;
      }
    };
    this.ᐃⲆᐃⲆΔ = function (a) {
      bx.ⵠⲆⵠᐃ.ΔⵠⲆᐃΔΔⲆⲆⲆ(a);
    };
    this.ⲆΔⵠⵠⵠ = function (a) {
      bx.ⵠⲆⵠᐃ.ⲆΔⵠⵠⵠ = a;
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ᐃΔⵠΔⵠ = function (a) {
      bx.ⵠⲆⵠᐃ.ᐃΔⵠΔⵠ = a;
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ᐃΔⲆⲆΔⲆⲆ = function (a) {
      bx.ⵠⲆⵠᐃ.ᐃΔⲆⲆΔⲆⲆ = a;
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ΔΔⵠΔⲆᐃⵠⵠⵠ = function (a) {
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔⲆΔᐃΔᐃᐃ]);
    };
    this.Ⲇⵠⵠᐃⵠⵠᐃⵠⵠ = function () {
      bx.ⵠⲆⵠᐃ.ΔⵠⲆᐃΔⲆΔ();
    };
    this.ΔΔᐃΔⲆ = function (a) {
      dx.ΔΔᐃΔⲆ.ⲆΔⲆΔ = [];
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      var c = qk;
      for (var d = Ue; d < a.length; d += Pt) {
        var e = {
          x: Math.floor(a[d] * ff.w / 250),
          y: Math.floor(a[d + Oj] * ff.ⵠΔⵠ / 250)
        };
        if (b && !c && !bx.ᐃᐃΔᐃⲆⲆⵠ && ᐃⵠΔⵠ.ⲆⵠⲆᐃ(e, b) < 250) {
          c += Al;
        } else {
          dx.ΔΔᐃΔⲆ.ⲆΔⲆΔ.push(e);
        }
      }
    };
    this.ⵠⵠⵠΔΔΔᐃⲆᐃ = function () {
      bx.ᐃⵠᐃⲆᐃ.open = false;
      bx.ᐃⲆΔΔᐃ.enabled = false;
      bx.ᐃⲆΔΔᐃ.ⲆᐃᐃⲆⵠ = -1;
      bx.ᐃⲆΔΔᐃ.label = null;
      bx.ᐃⲆΔΔᐃ.ᐃⵠᐃᐃΔⵠⵠ = null;
      bx.ᐃⲆΔΔᐃ.now = -j;
    };
    this.ᐃⲆΔΔᐃ = function (a) {
      uw.ΔⲆᐃⲆⵠⲆᐃ = a;
      bx.ᐃⲆΔΔᐃ.enabled = true;
      bx.ᐃⲆΔΔᐃ.ⲆᐃᐃⲆⵠ = new Date().getTime();
      bx.ᐃⲆΔΔᐃ.label = null;
      bx.ᐃⲆΔΔᐃ.now = -Ej;
      for (var b = [bs.ⵠⵠⲆⲆΔ, bs.ΔᐃΔΔΔ, bs.ⲆᐃⲆᐃΔ, bs.ᐃᐃᐃΔⵠ, bs.ΔᐃᐃΔⲆ, bs.ⵠΔΔⲆᐃ, bs.ⵠᐃᐃⵠⵠ, bs.ᐃⵠⵠᐃⲆ, bs.ⲆⲆΔᐃΔ, bs.ΔⲆⵠⲆᐃ, bs.ⲆΔΔΔⲆ, bs.ΔΔⵠⵠⵠ, bs.ⵠⲆΔΔᐃ, bs.ΔⵠΔΔΔ, bs.ΔΔᐃᐃⲆ, bs.ΔΔᐃΔᐃ, bs.ⵠⵠⵠⵠⲆ, bs.ⵠᐃΔⲆⵠ, bs.ΔⲆΔᐃⲆ, bs.ΔΔⵠᐃⵠ, bs.ⵠⲆⲆᐃᐃ, bs.ⵠᐃⵠⵠⲆ, bs.ⵠⲆⲆⵠⵠ, bs.ΔᐃΔⲆΔ, bs.ⵠⲆᐃⲆⵠ, bs.ᐃΔΔΔᐃ, bs.ΔⵠⵠΔⲆ, bs.ᐃΔᐃᐃⲆ, bs.ⵠᐃⲆⵠᐃ, bs.ⵠⵠⵠᐃΔ, bs.ⲆⵠⲆΔⲆ, bs.ⲆᐃᐃⵠⲆ, bs.ⲆᐃⲆΔⵠ, bs.ᐃⲆⵠⵠΔ, bs.ᐃᐃΔᐃᐃ, bs.ⲆⲆᐃⵠᐃ, bs.ΔΔⵠⲆⲆ, bs.Ⲇⵠᐃᐃⵠ, bs.ⵠΔⲆⵠᐃ, bs.ⲆⵠᐃⵠΔ, bs.ⲆΔⲆⲆⲆ, bs.ⵠᐃⲆⲆⲆ, bs.ᐃᐃⲆⵠΔ, bs.ⲆΔᐃⲆⵠ, bs.ΔΔᐃᐃᐃ, bs.ΔⵠⲆΔΔ, bs.ⲆⲆᐃᐃᐃ, bs.ⲆΔⲆᐃⵠ, bs.ΔⵠⲆⲆⵠ, bs.ⲆⲆⵠⵠⲆ], c = Fj; c < b.length; c++) {
        var d = bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(b[c]);
        if (d != -zs) {
          bx.ⵠⵠΔΔ.ⵠⲆⵠⲆⲆΔⵠ(b.length[c], d);
        }
      }
      bx.ⵠⲆⵠᐃ.ΔⵠⲆᐃΔⲆΔ();
    };
    this.ⲆⲆᐃΔⵠΔⲆⵠⵠ = function (a, b, c) {
      this.ⵠᐃΔⵠⲆⲆᐃ(a, b * 256 + c);
    };
    this.ⵠᐃΔⵠⲆⲆᐃ = function (a, b) {
      bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -1;
      bx.ⵠⵠΔΔ.ΔⲆᐃⲆⲆⵠⵠ(a, b, bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(a));
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ⲆⲆΔⲆᐃⵠⵠⲆΔ = function (a) {
      bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -zs;
      bx.ⲆᐃⲆΔΔ.wait = true;
      var b = bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(a);
      bx.ⵠⵠΔΔ.ΔⲆᐃⲆⲆⵠⵠ(a, 1, b);
      if (b >= Nl && !bx.ⵠⵠΔΔ.ⵠΔⲆ[a]) {
        bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
      }
      if (bs.ΔⵠᐃⵠΔ == a) {
        bx.ⲆΔΔΔᐃ = [bx.id];
      }
    };
    this.ⲆⲆⵠⵠⵠⲆⵠΔΔ = function () {
      this.ⲆⵠⲆⵠ[lw](zq[Qo].stringify([31]));
    };
    this.Δⵠᐃᐃⵠᐃᐃᐃᐃ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Dq[Uo].stringify([32, a.ΔⵠΔᐃⵠ, a.id]));
    };
    this.ᐃᐃᐃᐃⲆⵠΔΔⲆ = function (a, b) {
      this.ⲆⵠⲆⵠ[lw](Dq[Lq].stringify([33, a, b]));
    };
    this.ᐃⲆⵠⵠΔⲆΔΔᐃ = function () {
      var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      if (a) {
        var b = zk * Math.PI;
        this.ⲆⵠⲆⵠ[lw](Dq[Uo].stringify([10, bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ, Math.floor((a.angle + b) % b * 255 / b), bx.ⵠⲆⵠᐃ.mode]));
      }
    };
    this.ⲆᐃᐃⲆΔ = function (a, b) {
      switch (a) {
        case bs.Δⵠᐃⵠⵠ:
        case bs.ᐃⲆΔᐃⵠ:
        case bs.ⲆⲆⵠᐃᐃ:
        case bs.ᐃⲆⲆⲆᐃ:
        case bs.ᐃⵠⲆᐃΔ:
        case bs.ᐃᐃᐃΔΔ:
        case bs.ⲆΔΔⲆᐃ:
        case bs.ⲆΔᐃᐃΔ:
        case bs.ⲆⲆᐃⲆΔ:
        case bs.ⲆⲆΔΔΔ:
        case bs.ⲆΔⲆΔᐃ:
        case bs.ᐃᐃᐃⲆᐃ:
        case bs.ⵠΔⲆⲆⵠ:
        case bs.ᐃⵠΔᐃⵠ:
        case bs.ᐃⵠⵠⵠⲆ:
        case bs.ᐃᐃⵠⲆⵠ:
        case bs.ᐃⵠΔⵠⲆ:
        case bs.ⲆΔⲆⵠⲆ:
        case bs.ΔᐃⵠⲆⵠ:
        case bs.ᐃⲆⲆᐃᐃ:
        case bs.ⲆⲆⲆΔᐃ:
        case bs.ᐃⲆⵠᐃᐃ:
        case bs.ΔⵠΔⲆΔ:
          bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -1;
          this.ⲆⵠⲆⵠ[lw](Jq[$o].stringify([Os, a]));
          break;
        case bs.ᐃⲆᐃΔⵠ:
        case bs.ΔⵠⲆᐃⲆ:
        case bs.ᐃⲆⲆⲆⵠ:
        case bs.ΔⵠⲆⲆⲆ:
        case bs.ⵠΔΔΔⵠ:
        case bs.ⲆⵠᐃᐃΔ:
        case bs.ᐃΔᐃᐃΔ:
        case bs.ᐃΔⵠⲆᐃ:
        case bs.ᐃⲆᐃⵠΔ:
        case bs.ⲆᐃᐃΔᐃ:
        case bs.ΔⲆⵠⲆΔ:
        case bs.ⵠΔⵠΔⲆ:
        case bs.Ⲇᐃᐃⵠᐃ:
        case bs.ᐃΔⵠⵠⲆ:
        case bs.ⵠᐃᐃⲆΔ:
        case bs.ⲆΔⲆⲆᐃ:
        case bs.ΔΔⲆⵠᐃ:
        case bs.ΔⲆᐃᐃⲆ:
        case bs.ⵠΔᐃΔᐃ:
        case bs.ⲆⲆᐃᐃΔ:
        case bs.ⵠᐃᐃⲆⲆ:
        case bs.ⵠⵠΔⲆⵠ:
        case bs.ⵠᐃΔΔⲆ:
        case bs.ΔᐃⲆⵠⵠ:
        case bs.ⵠΔⵠⲆⵠ:
        case bs.ᐃΔΔᐃⲆ:
        case bs.ΔᐃᐃⵠⲆ:
        case bs.ᐃⵠᐃⵠⵠ:
        case bs.ⲆⲆⲆΔⵠ:
        case bs.ⵠⵠⵠⲆⵠ:
        case bs.ⵠΔⵠⵠᐃ:
        case bs.ⲆᐃⵠⲆⵠ:
        case bs.ⵠΔᐃᐃΔ:
        case bs.ᐃⲆᐃⵠⲆ:
        case bs.ⵠΔΔᐃⲆ:
        case bs.ᐃⵠᐃᐃᐃ:
        case bs.ⵠΔⵠⲆΔ:
        case bs.ⵠᐃⲆΔⵠ:
        case bs.ⵠᐃᐃⲆᐃ:
        case bs.ΔΔᐃⵠΔ:
        case bs.ⲆΔⵠⲆᐃ:
        case bs.ΔⲆⵠⵠⲆ:
        case bs.ΔΔᐃⲆΔ:
        case bs.ᐃᐃΔⲆⵠ:
        case bs.ᐃⲆⲆⵠⲆ:
        case bs.ⵠⵠⲆᐃΔ:
        case bs.ΔⲆⵠᐃⵠ:
        case bs.ⲆᐃⵠⵠⲆ:
        case bs.ᐃΔΔᐃⵠ:
        case bs.ᐃⲆΔᐃⲆ:
        case bs.ⵠⵠᐃⵠᐃ:
        case bs.ᐃᐃᐃⲆⵠ:
        case bs.Δᐃᐃᐃᐃ:
        case bs.ⵠᐃⵠᐃᐃ:
        case bs.ΔⵠᐃⵠΔ:
        case bs.ΔᐃⲆⲆᐃ:
          if (!bx.ᐃⵠⲆⵠⲆ) {
            if (bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ === a) {
              bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -1;
            } else {
              bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = a;
            }
          }
          break;
        case bs.ᐃᐃᐃΔⵠ:
        case bs.ⲆᐃⲆᐃΔ:
        case bs.ΔᐃᐃΔⲆ:
        case bs.ⵠΔΔⲆᐃ:
        case bs.ⵠᐃᐃⵠⵠ:
        case bs.ᐃⵠⵠᐃⲆ:
        case bs.ⲆΔΔΔⲆ:
        case bs.ⲆⲆΔᐃΔ:
        case bs.ΔⲆⵠⲆᐃ:
        case bs.ΔⵠⵠΔⲆ:
        case bs.ᐃΔᐃᐃⲆ:
        case bs.ⵠᐃⲆⵠᐃ:
        case bs.ⵠⵠⵠᐃΔ:
        case bs.ⲆⵠⲆΔⲆ:
        case bs.ⲆᐃᐃⵠⲆ:
        case bs.ⲆᐃⲆΔⵠ:
        case bs.ⲆⵠᐃⵠΔ:
        case bs.ⲆΔⲆⲆⲆ:
        case bs.ⵠⲆΔΔᐃ:
        case bs.ΔΔⵠⵠⵠ:
        case bs.ΔⵠΔΔΔ:
        case bs.ΔΔᐃᐃⲆ:
        case bs.ΔΔᐃΔᐃ:
        case bs.ᐃΔⵠⵠⵠΔⲆⲆᐃ:
        case bs.ⵠᐃΔⲆⵠ:
        case bs.ΔⲆΔᐃⲆ:
        case bs.ⵠⵠⵠⵠⲆ:
        case bs.ΔΔⵠᐃⵠ:
        case bs.ⵠⲆⲆᐃᐃ:
        case bs.ⵠᐃⵠⵠⲆ:
        case bs.ⵠⲆⲆⵠⵠ:
        case bs.ΔᐃΔⲆΔ:
        case bs.ⵠⲆᐃⲆⵠ:
        case bs.ᐃΔΔΔᐃ:
          if (!bx.ᐃⵠⲆⵠⲆ) {
            bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -Ok;
            if ((c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ]) && a === c.right) {
              this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([jt, bs.ᐃⵠⲆΔᐃ]));
            } else {
              bx.ΔᐃΔⵠⵠ.wait = true;
              this.ⲆⵠⲆⵠ[lw](Tq[Rq].stringify([5, a]));
            }
          }
          break;
        case bs.ᐃᐃⲆⵠΔ:
        case bs.ⵠᐃⲆⲆⲆ:
        case bs.ⲆΔᐃⲆⵠ:
        case bs.ΔΔᐃᐃᐃ:
        case bs.ᐃⲆΔΔⵠ:
        case bs.ΔⵠΔⲆⵠ:
        case bs.ⵠⵠᐃⲆⲆ:
        case bs.ⵠᐃⵠⲆᐃ:
        case bs.Δᐃⵠᐃⵠ:
        case bs.ᐃΔⵠⲆΔ:
        case bs.ΔⵠⲆΔΔ:
        case bs.ⲆⲆᐃᐃᐃ:
        case bs.ⵠⵠⲆⲆΔ:
        case bs.ΔⵠΔΔⵠ:
        case bs.ⵠᐃΔΔⵠ:
        case bs.ΔⲆΔᐃⵠ:
        case bs.ᐃⲆΔᐃᐃ:
        case bs.ⲆΔⲆᐃⵠ:
        case bs.ⵠᐃᐃᐃΔ:
        case bs.ΔⵠⲆⲆⵠ:
        case bs.ⲆⲆⵠⵠⲆ:
        case bs.ⵠΔⲆᐃⵠ:
        case bs.ᐃⵠᐃⵠΔ:
        case bs.ᐃⲆⵠⵠΔ:
        case bs.ᐃᐃΔᐃᐃ:
        case bs.ⲆⲆᐃⵠᐃ:
        case bs.ΔΔⵠⲆⲆ:
        case bs.Ⲇⵠᐃᐃⵠ:
        case bs.ⵠΔⲆⵠᐃ:
          if (!bx.ᐃⵠⲆⵠⲆ) {
            bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -1;
            if ((c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ]) && a === c.right) {
              this.ⲆⵠⲆⵠ[lw](Xq[Sq].stringify([gh, bs.ᐃⵠⲆΔᐃ]));
            } else {
              this.ⲆⵠⲆⵠ[lw](dr[br].stringify([5, a]));
            }
          }
          break;
        case bs.ⲆⵠⵠᐃΔ:
        case bs.ⵠⲆⵠⵠⵠ:
        case bs.ᐃⵠᐃⲆⲆ:
        case bs.ΔⲆⲆⲆⲆ:
        case bs.ΔΔΔᐃⵠ:
        case bs.ᐃΔᐃᐃⵠ:
        case bs.ᐃΔⲆᐃⲆ:
        case bs.ⲆⵠΔΔⲆ:
        case bs.ⵠᐃⵠⵠΔ:
        case bs.ΔΔⲆⲆⵠ:
          if (!bx.ᐃⵠⲆⵠⲆ) {
            bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -1;
            var c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
            this.ⲆⵠⲆⵠ[lw](dr[br].stringify([Ku, a]));
          }
          break;
        case bs.ⲆⲆⵠΔⲆ:
        case bs.ⵠⲆⲆⵠΔ:
        case bs.ⲆⲆⲆᐃᐃ:
        case bs.ΔⵠⵠⲆΔ:
        case bs.ⵠⲆᐃⲆΔ:
        case bs.ᐃⲆΔⵠΔ:
        case bs.ⵠⵠⲆⵠᐃ:
        case bs.ⵠΔⵠⲆᐃ:
        case bs.ⵠⲆᐃᐃⲆ:
        case bs.ᐃⵠⵠⲆⵠ:
        case bs.ᐃⲆⲆΔⵠ:
        case bs.ΔᐃΔⵠᐃ:
        case bs.ⲆⵠⲆⲆⲆ:
        case bs.ⲆᐃⵠᐃΔ:
        case bs.ⵠⲆΔΔⲆ:
        case bs.ΔᐃΔⲆᐃ:
        case bs.ⵠⵠⲆⵠⵠ:
          if ((c = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ]) && a !== c.ΔΔᐃΔΔ) {
            bx.ⲆΔⲆΔⵠ.wait = Xn;
          }
          this.ⲆⵠⲆⵠ[lw](Jq[Lq].stringify([xj, a]));
          break;
        case bs.ⵠⲆⲆⵠᐃ:
        case bs.ᐃⲆᐃΔⲆ:
        case bs.ⵠΔᐃᐃⲆ:
        case bs.ⵠⲆᐃⵠΔ:
        case bs.ⲆᐃΔΔΔ:
        case bs.Δⵠᐃᐃᐃ:
        case bs.ⵠᐃⲆᐃᐃ:
        case bs.ΔⲆΔⵠⵠ:
        case bs.ΔΔΔΔⵠ:
        case bs.ᐃⵠⲆⵠᐃ:
        case bs.ⲆⵠΔᐃⲆ:
        case bs.ΔᐃⵠᐃⲆ:
        case bs.ᐃΔΔⵠⲆ:
        case bs.ⲆΔΔⵠᐃ:
        case bs.ᐃⲆΔⵠⲆ:
        case bs.ᐃⵠⵠᐃⵠ:
          this.ⲆⵠⲆⵠ[lw](Ar[jr].stringify([5, a]));
      }
    };
    this.ᐃⲆⵠΔᐃⲆⲆⲆΔ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Dq[jo].stringify([6, a]));
    };
    this.ⵠⵠᐃⵠⲆⵠΔⲆⲆ = function (a) {
      bx.ⲆᐃⲆΔΔ.wait = true;
      var b = bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(a);
      bx.ⵠⵠΔΔ.ⵠⲆⵠⲆⲆΔⵠ(a, b);
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ⲆⵠⵠᐃⲆⲆⵠΔᐃ = function (a, b) {
      this.ⲆⵠⲆⵠ[lw](Mo[Sq].stringify([29, a]));
    };
    this.ⵠⵠⲆΔⲆⲆⵠⵠᐃ = function (a, b) {
      this.ⲆⵠⲆⵠ[lw](zq[Qo].stringify([28, a]));
    };
    this.ⵠᐃᐃΔΔΔⲆⲆⲆ = function (a) {
      bx.ⲆᐃⲆΔΔ.wait = true;
      var b = bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(a);
      bx.ⵠⵠΔΔ.ΔⲆᐃⲆⲆⵠⵠ(a, aa, b);
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ⵠⲆⲆΔⵠⵠᐃΔⲆ = function (a) {
      var b = a[1];
      var c = a[tg];
      bx.ⲆᐃⲆΔΔ.wait = true;
      var d = bx.ⵠⵠΔΔ.ᐃΔⲆᐃᐃ(b);
      bx.ⵠⵠΔΔ.ΔⲆᐃⲆⲆⵠⵠ(b, c, d);
      bx.ⵠⲆⵠᐃ.ᐃⲆΔ();
    };
    this.ⵠᐃΔⵠⵠΔⵠⵠᐃ = function () {
      this.ⲆⵠⲆⵠ[lw](zq[Qo].stringify([14]));
    };
    this.ᐃⵠΔⲆᐃⲆᐃΔⵠ = function (a) {
      var b = Math.PI * hc;
      this.ⲆⵠⲆⵠ[lw](Dq[Uo].stringify([Ph, Math.floor((a + b) % b * el / b)]));
    };
    this.ᐃᐃⵠⲆⵠⲆΔⵠᐃ = function (a) {
      var b = Math.PI * 2;
      this.ⲆⵠⲆⵠ[lw](Dq[Uo].stringify([3, Math.floor((a + b) % b * Qh / b)]));
    };
    this.ⲆΔΔᐃⲆΔΔΔᐃ = function (a) {
      this.ⲆⵠⲆⵠ[lw](ⲆΔᐃᐃⲆΔΔ[0].stringify([2, a]));
    };
    this.ⵠⵠΔΔⲆᐃᐃΔⵠ = function (a) {
      this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([36, a]));
    };
    this.ⵠⵠⵠⵠⲆⵠΔⲆΔ = function (a) {
      var b = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
      if (bx.ᐃⵠⲆⵠⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + ΔⵠᐃⲆᐃ);
        } else {
          b.text.push(ΔⵠᐃⲆᐃ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⲆⵠⲆⵠ[lw](Mq[Lq].stringify([0, a]));
    };
    this.ΔᐃⲆᐃⲆ = function (a) {
      var b = ᐃᐃᐃⲆ.select.ᐃᐃᐃ;
      if (b.length != 0) {
        var c = [ld];
        var d = [];
        ᐃⵠΔⵠ.ⲆⲆⲆⲆⵠⲆⵠ(a, {
          x: ᐃᐃᐃⲆ.ᐃᐃⵠ.rx,
          y: ᐃᐃᐃⲆ.ᐃᐃⵠ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ᐃΔⲆⵠΔΔⵠⵠⵠ);
        }
        c.push(d);
        this.ⲆⵠⲆⵠ[lw](Tq[Rq].stringify(c));
      }
    };
    this.ΔΔⲆⵠΔᐃⲆ = 0;
    this.ⵠΔΔᐃΔⵠᐃ = {
      Δⵠ: 0,
      ΔⲆᐃΔ: Fj
    };
    this.ⲆⵠΔⵠᐃᐃⵠⲆΔ = function () {
      if (sw.ⵠⵠⵠΔΔⲆⵠⵠⵠ < fx - this.ΔΔⲆⵠΔᐃⲆ) {
        this.ΔΔⲆⵠΔᐃⲆ = fx;
        var a = bx.ᐃᐃⵠ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / yg);
        if (this.ⵠΔΔᐃΔⵠᐃ.Δⵠ != b || c != this.ⵠΔΔᐃΔⵠᐃ.ΔⲆᐃΔ) {
          this.ⲆⵠⲆⵠ[lw](dr[Sq].stringify([1, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ⵠΔΔᐃΔⵠᐃ.Δⵠ = b;
          this.ⵠΔΔᐃΔⵠᐃ.ΔⲆᐃΔ = c;
        }
      }
    };
    this.ΔΔⵠΔⵠⲆΔ = 0;
    this.ᐃⵠⵠΔΔⲆⲆᐃᐃ = function () {
      if (sw.ⲆⲆᐃⲆΔⵠᐃΔⲆ < fx - this.ΔΔⵠΔⵠⲆΔ) {
        this.ΔΔⵠΔⵠⲆΔ = fx;
        this.ping();
      }
    };
    this.ΔᐃⲆⲆⲆᐃⵠᐃΔ = function () {
      bx.reconnect.enabled = true;
      if (this.ⲆΔᐃᐃᐃ == this.ⲆⵠⲆⵠ.ⲆΔᐃᐃᐃ) {
        this.ⲆΔᐃᐃᐃ++;
        this.ⲆⵠⲆⵠ.close();
        ⵠⵠⵠⲆ.connect();
      }
    };
    this.ᐃΔᐃⲆᐃⵠⲆⲆⵠ = function (a) {
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ᐃⲆᐃᐃᐃⲆⵠ]);
      for (var b = 1; b < a.length; b++) {
        bx.ⲆΔΔΔᐃ.push(a[b]);
      }
    };
    this.ⵠⲆⵠΔⲆΔⵠΔⵠ = function (a) {
      this.ΔΔΔⵠᐃ(ff.ⲆΔⲆΔ[a].ⵠᐃΔⵠⲆ + qt[ΔΔᐃⵠ.ᐃⵠΔᐃⲆⵠⵠ]);
      bx.ⲆΔΔΔᐃ.push(a);
      var b = document.getElementById("team_box");
      if (-Ue != dx.ⵠⵠΔⵠⲆ && b.style.display == "inline-block") {
        dx.ΔⲆᐃᐃΔ[dx.ⵠⵠΔⵠⲆ].action();
      }
    };
    this.ᐃⵠⵠⵠᐃΔⵠⵠⵠ = function () {
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔⵠΔⵠΔⲆⵠ]);
      bx.ⵠⲆⵠⲆΔ.wait = Xj;
      bx.ⲆΔΔΔᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ΔⲆᐃⵠΔⲆⲆⲆΔ = function (a) {
      if (bx.id == a) {
        this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ΔᐃᐃᐃⵠΔΔ]);
        bx.ⵠⲆⵠⲆΔ.wait = zo;
        bx.ⲆΔΔΔᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ΔΔΔⵠᐃ(ff.ⲆΔⲆΔ[a].ⵠᐃΔⵠⲆ + qt[ΔΔᐃⵠ.ⵠⵠⵠⲆΔⲆΔ]);
        for (var b = 0; bx.ⲆΔΔΔᐃ.length > b; b++) {
          if (bx.ⲆΔΔΔᐃ[b] == a) {
            bx.ⲆΔΔΔᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (dx.ⵠⵠΔⵠⲆ != -Oj && c.style.display == "inline-block") {
          dx.ΔⲆᐃᐃΔ[dx.ⵠⵠΔⵠⲆ].action();
        }
      }
    };
    this.ⲆᐃⲆⲆᐃⲆᐃⵠⲆ = function (a) {
      bx.ⲆⲆΔΔᐃ = xg;
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⵠᐃⲆⲆΔ]);
      if (this.ⲆⵠⲆⵠ.ⲆΔᐃᐃᐃ == this.ⲆΔᐃᐃᐃ) {
        this.ⲆΔᐃᐃᐃ++;
        dx.ⲆⲆΔᐃⲆ(pf.ΔⲆᐃⵠΔ);
        this.ⲆⵠⲆⵠ.close();
      }
    };
    this.ᐃΔΔⲆΔⲆⲆᐃΔ = function (a, b) {
      bx.ⲆⲆΔΔᐃ = Ta;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      bx.ⵠΔⵠΔᐃⲆΔ.ᐃⲆᐃᐃΔΔⲆ = st[a][Math.floor(Math.random() * st[a].length)];
      bx.ⵠΔⵠΔᐃⲆΔ.ⵠⲆΔⵠΔ = ᐃⵠΔⵠ.ΔⲆᐃΔⵠΔⵠ(ff.ⲆΔⲆΔ[bx.id].ⵠⲆΔⵠΔ);
      bx.ⵠΔⵠΔᐃⲆΔ.ⲆⵠΔⵠΔⲆᐃ = ᐃⵠΔⵠ.ΔⲆᐃΔⵠΔⵠ(d[aa]);
      bx.ⵠΔⵠΔᐃⲆΔ.ⵠΔⲆᐃΔ = c[Ag];
      this.ΔΔΔⵠᐃ(qt[ΔΔᐃⵠ.ⲆⵠⲆΔΔᐃΔ]);
      if (this.ⲆⵠⲆⵠ.ⲆΔᐃᐃᐃ == this.ⲆΔᐃᐃᐃ) {
        this.ⲆΔᐃᐃᐃ++;
        dx.ⲆⲆΔᐃⲆ(cx.ΔⲆᐃⵠΔ);
        this.ⲆⵠⲆⵠ.close();
        try {
          kj.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ⲆⵠⲆⵠ[lw](sw.ΔᐃⵠᐃⲆΔⲆΔΔ);
    };
    this.ΔⲆΔΔΔⵠⵠⵠᐃ = function () {
      if (this.ⲆⵠⲆⵠ.readyState == 3) {
        this.ᐃⲆΔᐃⲆΔⵠ -= sw.ΔᐃⲆᐃⵠΔⲆ;
      }
    };
    this.ᐃⵠⲆᐃⵠᐃⲆⵠⵠ = function () {
      if (xf > sw.ⵠΔⲆⲆΔⲆⲆⵠᐃ) {
        this.ᐃⲆΔᐃⲆΔⵠ = fx;
      }
      if (sw.ΔᐃⲆᐃⵠΔⲆ < fx - this.ᐃⲆΔᐃⲆΔⵠ) {
        this.ᐃⲆΔᐃⲆΔⵠ = fx;
        this.ΔᐃⲆⲆⲆᐃⵠᐃΔ();
      }
    };
    this.ⲆⲆⵠᐃᐃⵠᐃΔΔ = function (c) {
      Ef++;
      clearTimeout(this.Ⲇᐃᐃⵠⵠ);
      document.getElementById("commandMainBoxName").innerHTML = this.ⵠᐃΔⵠⵠ[this.ᐃᐃᐃⵠⵠ][this.ⵠᐃΔⵠⲆΔⲆ[this.ᐃᐃᐃⵠⵠ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ᐃⲆΔᐃⲆΔⵠ = fx;
      bx.ⲆⲆⲆΔ.ᐃⵠⵠⲆΔ.ⵠᐃⵠⵠⵠ = bx.ⲆⲆⲆΔ.ᐃⵠⵠⲆΔ.ⲆΔᐃΔΔ;
      bx.ⲆⲆⲆΔ.ⵠᐃᐃⲆⵠⲆΔ.ⵠᐃⵠⵠⵠ = bx.ⲆⲆⲆΔ.ⵠᐃᐃⲆⵠⲆΔ.ⲆΔᐃΔΔ;
      bx.ⲆⲆⲆΔ.ⲆⵠⲆⵠⲆⲆⵠ.ⵠᐃⵠⵠⵠ = bx.ⲆⲆⲆΔ.ⲆⵠⲆⵠⲆⲆⵠ.ⲆΔᐃΔΔ;
      bx.ⲆⲆⲆΔ.ΔⲆΔⵠᐃⵠΔ.ⵠᐃⵠⵠⵠ = bx.ⲆⲆⲆΔ.ΔⲆΔⵠᐃⵠΔ.ⲆΔᐃΔΔ;
      bx.ⲆⲆⲆΔ.ᐃⵠⲆⵠⵠ.ⵠᐃⵠⵠⵠ = bx.ⲆⲆⲆΔ.ᐃⵠⲆⵠⵠ.ⲆΔᐃΔΔ;
      bx.ⲆⲆⲆΔ.ΔΔⵠⵠ = 1;
      bx.ⲆⲆⲆΔ.c = Ej;
      bx.ⲆⲆⲆΔ.ⵠΔⵠ = Ag;
      bx.ⲆⲆⲆΔ.ᐃΔΔ = Fh;
      bx.ⲆⲆⲆΔ.ⲆⵠΔ = Ej;
      bx.ⲆⲆⲆΔ.ⲆⲆⲆⵠⲆᐃΔ = _b;
      bx.ⵠⵠᐃⲆᐃᐃᐃ = false;
      dx.ᐃⵠΔⵠΔ.display = 0;
      bx.ⵠⵠΔΔ.ⲆΔⲆᐃᐃ = [];
      bx.ⵠⵠΔΔ.ⵠΔⲆ = [];
      bx.ⵠⵠΔΔ.max = uw.ᐃⲆᐃⵠΔᐃΔ;
      bx.ⵠⵠΔΔ.ⵠⵠΔᐃᐃᐃΔ = Cq;
      bx.ⵠⵠΔΔ.ᐃⵠΔᐃⲆ = Fj;
      bx.ⵠⵠΔΔ.id = -1;
      dx.ᐃᐃⲆⲆⵠⲆΔ = 1;
      dx.ⵠⲆⲆΔᐃⵠᐃ = aa;
      dx.ΔⲆⵠⲆⵠᐃⵠ = 1;
      dx.ⲆΔΔⵠᐃᐃⲆ = 1;
      bx.ⲆⲆΔΔᐃ = true;
      bx.ⵠⵠΔΔ.ΔᐃᐃⲆⵠᐃᐃ.stop();
      bx.ⵠⲆⵠᐃ.ᐃⵠΔᐃΔ = [];
      bx.ⵠⲆⵠᐃ.Δᐃᐃⵠᐃ = false;
      bx.ⵠⲆⵠᐃ.ᐃΔΔᐃΔⵠᐃⵠΔ = xg;
      bx.ⵠⲆⵠᐃ.ⵠΔⲆᐃ = -1;
      bx.ⵠⲆⵠᐃ.id = -1;
      bx.ⵠⲆⵠᐃ.ᐃⲆᐃⲆΔ = Y;
      bx.ⵠⲆⵠᐃ.ⲆΔⵠⵠⵠ = false;
      bx.ⵠⲆⵠᐃ.ᐃΔⵠΔⵠ = false;
      bx.ⵠⲆⵠᐃ.ᐃΔⲆⲆΔⲆⲆ = false;
      bx.ⵠⲆⵠᐃ.timeout = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Rs, 0, _b, 0, aa, aa);
      bx.ΔᐃΔⵠⵠ.timeout = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0, j, ur, 0.1, j);
      bx.ΔᐃΔⵠⵠ.wait = false;
      bx.ⲆΔⲆΔⵠ.timeout = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ps, 0, 1, _a, 0.2, Ok);
      bx.ⲆΔⲆΔⵠ.wait = false;
      bx.ⲆᐃⲆΔΔ.timeout = new ᐃⵠΔⵠ.ΔⲆΔᐃ(Ps, 0, As, qk, 1, $l);
      bx.ⲆᐃⲆΔΔ.wait = xg;
      bx.ⵠⲆⵠⲆΔ.id = -1;
      bx.ⵠⲆⵠⲆΔ.ΔΔΔⵠ = -Ej;
      bx.ⵠⲆⵠⲆΔ.wait = Ta;
      bx.ⵠⲆⵠⲆΔ.timeout = new ᐃⵠΔⵠ.ΔⲆΔᐃ(false, 0, aa, 0, 1 / 30, 1);
      dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.x = -1;
      dx.ΔΔᐃΔⲆ.ᐃⵠᐃⵠⲆ.y = -1;
      dx.ⲆΔᐃⲆ.open = En;
      dx.ΔΔᐃΔⲆ.ⲆΔⲆΔ = [];
      bx.ⲆⲆⲆΔⲆ.enabled = false;
      ff.mode = c[1];
      if (c[20] !== undefined && c[21] !== undefined) {
        ff.ΔΔⲆⲆⲆ = c[ir];
        ff.ᐃⵠⵠⵠⵠ = c[21];
        ff.w = ff.ΔΔⲆⲆⲆ * ff.ⵠᐃᐃΔᐃⲆΔ;
        ff.ⵠΔⵠ = ff.ⲆᐃⲆΔⲆᐃΔ * ff.ᐃⵠⵠⵠⵠ;
      }
      ff.ⵠⲆΔⵠⲆᐃⲆ = c[22];
      ff.ΔΔⵠΔⵠ = c[23];
      b.ⲆΔᐃᐃΔⵠⵠ(c[24]);
      b.ᐃᐃⲆⲆΔΔΔᐃⵠ(c[25]);
      bx.ⵠⲆᐃᐃᐃ.ΔᐃⲆⵠᐃ = c[26];
      bx.ᐃΔΔⲆⲆⲆⲆ = 0;
      bx.ⵠΔΔⵠⵠ.ΔᐃⲆⵠᐃ = c[27];
      ff.ᐃⲆⵠⵠⲆΔᐃᐃᐃ(c[Xl]);
      ff.time = c[5];
      ff.Δⵠⵠⵠⵠ.ᐃᐃⵠᐃⲆ = c[15];
      ff.Δⵠⵠⵠⵠ.ΔᐃΔⲆⵠ = new Date().getTime();
      dx.ⲆᐃⵠⲆ.ᐃⲆΔΔⲆⵠΔ = c[16];
      ff.transition = cg;
      bx.ⲆΔⵠ = c[gc];
      dx.ⲆᐃⵠⲆ.reset();
      bx.ⲆΔΔΔᐃ = c[8];
      ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆΔΔΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆᐃΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔⵠΔⲆ] = [];
      ff.ᐃᐃᐃ[xw.ΔΔⲆⵠᐃ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆⲆⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ΔⵠⲆⲆⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔΔΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⵠᐃᐃΔ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃΔ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔⵠⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆᐃⵠΔ] = [];
      ff.ᐃᐃᐃ[xw.ⲆᐃᐃΔᐃ] = [];
      ff.ᐃᐃᐃ[xw.ΔⲆⵠⲆΔ] = [];
      ff.ᐃᐃᐃ[xw.Ⲇᐃᐃⵠᐃ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔⵠⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆΔ] = [];
      ff.ᐃᐃᐃ[xw.ⲆΔⲆⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⵠΔⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃΔΔⲆ] = [];
      ff.ᐃᐃᐃ[xw.ΔᐃⲆⵠⵠ] = [];
      ff.ᐃᐃᐃ[xw.ΔᐃᐃⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⵠᐃⵠⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⲆⲆΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⵠⵠⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔⵠⵠᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⲆᐃⵠⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ΔⲆᐃᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔᐃΔᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⲆᐃᐃΔ] = [];
      ff.ᐃᐃᐃ[xw.ΔⵠⲆᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔᐃᐃΔ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆᐃⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔΔᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔΔᐃᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔᐃⵠᐃ] = [];
      ff.ᐃᐃᐃ[xw.ΔΔΔᐃⵠ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃⵠ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔⲆᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⵠΔΔⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⲆᐃᐃΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⲆΔⵠΔⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⲆⵠⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⵠⵠⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃⵠᐃᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⲆᐃⵠⵠ] = [];
      ff.ᐃᐃᐃ[xw.ΔᐃᐃᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⲆⲆⲆΔ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⵠΔⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆᐃⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆⲆΔⲆ] = [];
      ff.ᐃᐃᐃ[xw.ΔⲆⲆⲆⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⲆΔⲆᐃΔ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔᐃᐃᐃⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⵠᐃⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ΔⵠⵠⲆⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃᐃⲆΔⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔᐃⲆΔ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔⲆⲆⲆⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⲆΔΔᐃⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆΔᐃΔΔΔΔ] = [];
      ff.ᐃᐃᐃ[xw.ΔᐃᐃⵠᐃᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⲆⲆΔⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆΔⵠⵠᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⲆᐃΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.Ⲇᐃⵠᐃⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃᐃⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⵠᐃᐃᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔⵠⲆΔ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃⲆΔⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠΔⵠⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠᐃᐃⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ΔΔᐃⵠΔ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔΔᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ΔⵠᐃⵠΔ] = [];
      ff.ᐃᐃᐃ[xw.ΔᐃⲆⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ⲆΔⵠⲆᐃ] = [];
      ff.ᐃᐃᐃ[xw.ΔⲆⵠⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ΔΔᐃⲆΔ] = [];
      ff.ᐃᐃᐃ[xw.ᐃᐃΔⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆⲆⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⵠⲆᐃΔ] = [];
      ff.ᐃᐃᐃ[xw.ΔⲆⵠᐃⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⲆᐃⵠⵠⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃΔΔᐃⵠ] = [];
      ff.ᐃᐃᐃ[xw.ⵠⵠᐃⵠᐃ] = [];
      ff.ᐃᐃᐃ[xw.ᐃⲆΔᐃⲆ] = [];
      ff.ᐃᐃᐃ[xw.ᐃᐃᐃⲆⵠ] = [];
      ff.ᐃᐃᐃ[xw.Δᐃᐃᐃᐃ] = [];
      ff.ⵠΔΔⲆ = [];
      ff.ΔᐃᐃΔⵠⵠᐃ = c[7];
      bx.id = c[Dk];
      bx.ⵠᐃΔΔ = ff.ΔᐃᐃΔⵠⵠᐃ * bx.id;
      if (ex.loaded) {
        ex.ⲆΔⲆΔ[Gr].ⵠᐃΔΔ = bx.ⵠᐃΔΔ;
        ex.ⲆΔⲆΔ[0].ΔⵠⲆᐃᐃᐃⲆ = Ih;
      }
      Af.ΔⵠⵠⲆⲆⵠᐃ();
      bx.ᐃᐃⵠ.ΔⵠᐃΔⵠ(c[3], c[10]);
      ff.ⲆΔⲆΔ = [];
      var e = ff.ⲆΔⲆΔ;
      for (var f = 0; f < c[11]; f++) {
        e.push(new zw());
      }
      f = 0;
      for (var g = c[4]; f < g.length; f++) {
        var h = e[g[f].i];
        h.ⵠᐃΔⵠⲆ = g[f].n;
        h.ᐃᐃΔᐃ = g[f].s;
        h.ᐃΔᐃⵠⵠ = g[f].a;
        h.ΔᐃⵠⲆⲆ = g[f].c;
        h.ΔΔᐃᐃⵠ = g[f].b;
        h.ΔΔᐃⵠⲆ = g[f].d;
        h.ⲆⲆⵠᐃⲆⲆΔ = g[f].g;
        h.level = g[f].l;
        h.ⵠⲆΔⵠΔ = ᐃⵠΔⵠ.ΔⲆᐃⲆᐃᐃᐃ(g[f].p);
        h.ⲆⲆΔΔᐃ = Ir;
        if (zs === mw) {
          h.ⵠᐃΔⵠⲆ += "|" + g[f].i;
        }
      }
      bx.ⵠⵠΔᐃⵠ.sort();
      if (uw.ΔⲆΔⲆⲆⵠᐃ === ff.mode && ff.ⲆΔⲆΔ[bx.id].ⵠᐃΔⵠⲆ === "spectator") {
        bx.ᐃᐃΔᐃⲆⲆⵠ = true;
      } else {
        bx.ᐃᐃΔᐃⲆⲆⵠ = Rs;
      }
      if (ff.mode === uw.ΔΔⵠⲆΔ && uw.ΔⲆⲆⵠᐃᐃᐃ === ff.ⲆΔⲆΔ[bx.id].ᐃᐃΔᐃ) {
        bx.ᐃⵠⲆⵠⲆ = nr;
      } else {
        bx.ᐃⵠⲆⵠⲆ = d;
      }
      if (uw.ΔⵠⵠⲆᐃ === ff.mode && ff.ⲆΔⲆΔ[bx.id].ᐃᐃΔᐃ === uw.ⵠⵠⲆᐃᐃⲆⵠ) {
        bx.ᐃⲆⵠᐃⵠᐃⲆ = true;
      } else {
        bx.ᐃⲆⵠᐃⵠᐃⲆ = false;
      }
      ⲆⵠΔΔ.set("starve_token", bx.ⲆⲆⲆⲆᐃ);
      if (qn === c[12]) {
        bx.ⵠⵠᐃⲆᐃ.ⲆᐃᐃⲆⵠ = 0;
        dx.ⲆᐃⵠⲆ.restore(c[Hk]);
        var i = c[14];
        if (i[bs.ᐃⵠⲆΔ]) {
          bx.ⵠⵠΔΔ.ⲆⵠⵠΔⲆᐃΔ(1, 0);
        }
        for (f = Fj; f < i.length; f++) {
          if (i[f]) {
            if (bs.ᐃⵠⲆΔ == f) {
              continue;
            }
            if (f == bs.ᐃⵠⲆΔᐃ) {
              continue;
            }
            this.ⲆᐃⵠⵠⲆᐃᐃ([0, f, i[f]]);
          }
        }
        bx.ⵠⵠᐃⲆᐃ.open = Rn;
      } else {
        if (ff.mode === uw.ΔᐃⵠΔᐃ) {
          this.ⲆᐃⵠⵠⲆᐃᐃ([tj, bs.ᐃᐃⲆⲆⲆ, 1]);
        } else if (uw.ΔⵠⵠⲆᐃ === ff.mode) {
          if (bx.ᐃⲆⵠᐃⵠᐃⲆ) {
            this.ⲆᐃⵠⵠⲆᐃᐃ([0, bs.ΔⲆⵠⵠⲆ, Ph]);
          } else {
            this.ⲆᐃⵠⵠⲆᐃᐃ([0, bs.ᐃΔⵠⲆᐃ, 3]);
          }
        }
        if (ff.mode === uw.ⵠΔⵠⵠⲆ || uw.ΔⵠⵠⲆᐃ === ff.mode || uw.ΔΔⲆΔⵠ === ff.mode || ff.mode === uw.ΔᐃⵠΔᐃ) {
          bx.ⵠⵠᐃⲆᐃ.ⲆᐃᐃⲆⵠ = new Date().getTime();
          bx.ⵠⵠᐃⲆᐃ.open = true;
          bx.ⵠⵠᐃⲆᐃ.value = c[13];
          dx.ⵠⵠᐃⲆᐃ.ΔᐃΔⲆⵠ();
        } else {
          bx.ⵠⵠᐃⲆᐃ.ⲆᐃᐃⲆⵠ = 0;
          bx.ⵠⵠᐃⲆᐃ.open = false;
          bx.ⵠⵠᐃⲆᐃ.value = Qs;
        }
        bx.ⵠΔⵠΔᐃΔΔ = c[Jt].toString();
      }
      bx.ᐃⲆΔΔᐃ.enabled = c[Gt];
      bx.ᐃⲆΔΔᐃ.ⲆᐃᐃⲆⵠ = -j;
      bx.ᐃⲆΔΔᐃ.label = null;
      bx.ᐃⲆΔΔᐃ.now = -Ok;
      ⲆⵠΔΔ.set("starve_token_id", bx.ⵠΔⵠΔᐃΔΔ);
      if (bx.reconnect.enabled) {
        bx.reconnect.rotate = 0;
        bx.reconnect.enabled = false;
      } else {
        pf.ⲆⲆΔᐃⲆ(dx.ΔⲆᐃⵠΔ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + pf.ᐃᐃΔᐃ + "A" + pf.ᐃΔᐃⵠⵠ);
        }
      }
    };
    this.connect = function () {
      b.ⲆᐃⵠⵠⵠⲆⲆ = 0;
      b.ᐃᐃᐃⵠⵠΔⵠ();
    };
    this.ΔΔⵠᐃⲆΔΔⵠⲆ = function (c) {
      let d = uw.ⲆΔⵠΔⲆⵠⲆⵠᐃ[b.ᐃᐃᐃⵠⵠ];
      console.log(jn, undefined, ht);
      let e;
      let f;
      let g = b.ⵠᐃΔⵠⲆΔⲆ[b.ᐃᐃᐃⵠⵠ];
      if (g == Rl) {
        e = pw + "/matchmaker/lobbies/find";
        f = {
          game_modes: [d]
        };
      } else {
        console.log(undefined, undefined, undefined, undefined);
        let a = b.ⲆⲆᐃᐃⵠ.find(a => a.gm == d && a.idx == g);
        console.log(pl, undefined);
        e = pw + "/matchmaker/lobbies/join";
        f = {
          lobby_id: a.id
        };
      }
      let h = {};
      if (c) {
        h.Authorization = `Bearer ${c}`;
      }
      fetch(e, {
        method: "POST",
        headers: h,
        body: JSON.stringify(f)
      }).then(a => {
        if (a.ok) {
          a.json().then(a => {
            console.log(undefined, ht);
            b.ⵠΔⵠⲆⵠᐃᐃ(a);
          });
        } else {
          alert("Failed to join lobby");
        }
      });
    };
    this.ᐃᐃᐃⵠⵠΔⵠ = function () {
      console.log(undefined);
      if (ow === Gk) {
        a(b.ΔΔⵠᐃⲆΔΔⵠⲆ);
      } else {
        b.ⵠΔⵠⲆⵠᐃᐃ({
          lobby: {
            player: {
              token: qn
            },
            ports: {
              default: {
                host: ow.host,
                is_tls: 0
              }
            }
          }
        });
      }
    };
    this.ⵠΔⵠⲆⵠᐃᐃ = function (a) {
      let c = a.lobby.ports.default;
      let d = c.host;
      let e = "ws" + (c.is_tls ? "s" : "") + "://" + d + "?token=" + a.lobby.player.token;
      console.log(ps, undefined);
      b.ⲆⵠⲆⵠ = new kj.WebSocket(e);
      b.ⲆⵠⲆⵠ.binaryType = "arraybuffer";
      b.ⲆⵠⲆⵠ.ⲆΔᐃᐃᐃ = b.ⲆΔᐃᐃᐃ;
      b.ⲆⵠⲆⵠ.onmessage = function (a) {
        if (b.ⲆΔᐃᐃᐃ == b.ⲆΔᐃᐃᐃ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case qk:
                b.ᐃⵠⵠΔⲆ(c);
                break;
              case 1:
                b.ⵠⲆⲆᐃⵠᐃⲆ(c[jq]);
                break;
              case tg:
                b.ⲆⵠΔΔΔΔⵠΔⲆ(c);
                break;
              case 3:
                b.ⲆⲆⵠᐃᐃⵠᐃΔΔ(c);
                break;
              case _g:
                b.message(c[zs]);
                break;
              case jt:
                b.ⵠⵠⲆᐃᐃΔⵠ(c);
                break;
              case Vi:
                b.ⲆΔᐃᐃΔⵠⵠ(c[1]);
            }
          } else {
            var d = new Uint8Array(a.data);
            switch (d[0]) {
              case 0:
                b.ᐃᐃᐃ(a.data, d, false);
                break;
              case Ag:
                b.ᐃᐃᐃ(a.data, d, true);
                break;
              case 2:
                b.Ⲇⵠⵠᐃⵠⵠᐃⵠⵠ();
                break;
              case 3:
                b.ⲆᐃⵠⵠⲆᐃᐃ(new Uint16Array(a.data));
                break;
              case ch:
                b.ⲆⲆᐃΔⵠΔΔΔⲆ();
                break;
              case 5:
                b.ⲆⲆⲆΔΔⵠΔᐃΔ();
                break;
              case 6:
                b.ΔΔⵠΔⲆᐃⵠⵠⵠ();
                break;
              case or:
                b.ⵠΔΔᐃⵠᐃᐃⵠᐃ(a.data);
                break;
              case 8:
                b.ⲆⵠⲆᐃΔⲆⵠᐃⲆ(d[1]);
                break;
              case 9:
                b.ⵠΔᐃⲆᐃᐃᐃⵠⲆ(d[1]);
                break;
              case ct:
                b.ⲆᐃᐃⵠⲆⲆᐃ();
                break;
              case 11:
                b.ⵠᐃΔⵠⲆⲆᐃ(d[_b], d[Xh]);
                break;
              case 12:
                b.ᐃⲆᐃⲆΔ(d[As]);
                break;
              case 13:
                b.ᐃᐃⵠⲆⲆⵠⵠⵠⲆ(d, a.data);
                break;
              case Wn:
                b.ᐃᐃᐃⵠⵠⲆⲆ();
                break;
              case Hb:
                b.ⵠᐃⵠⵠⲆᐃΔⲆⲆ(d[ie]);
                break;
              case In:
                b.ⲆⲆⲆΔ(d[_b], d[Cl], d[3], d[4], d[5], d[sg], d[7]);
                break;
              case 17:
                b.ᐃᐃⵠᐃᐃᐃⲆⲆΔ(a.data);
                break;
              case 18:
                b.ⵠᐃⲆᐃⵠⲆᐃᐃΔ();
                break;
              case Vs:
                b.ᐃΔⵠΔⵠ(d[jq]);
                break;
              case k:
                b.ⵠⵠⲆⲆᐃΔᐃⵠᐃ();
                break;
              case 21:
                b.ᐃΔΔⵠ(a.data);
                break;
              case 22:
                b.ⲆⲆᐃΔⲆⵠⲆⵠⲆ(d[1]);
                break;
              case 23:
                b.ⲆⵠᐃⵠⲆⲆⵠⲆᐃ(a.data);
                break;
              case 24:
                b.ⲆⲆΔⲆᐃⵠⵠⲆΔ(d[ag]);
                break;
              case 25:
                b.ᐃΔΔⲆΔⲆⲆᐃΔ(d[Zq], a.data);
                break;
              case 26:
                b.ΔΔᐃΔⲆ(d);
                break;
              case 27:
                b.ⵠᐃᐃⲆΔⵠΔΔⵠ();
                break;
              case 28:
                b.ᐃⲆΔΔᐃ(d[1]);
                break;
              case 29:
                b.ⵠⵠⵠΔΔΔᐃⲆᐃ();
                break;
              case 30:
                b.ⲆᐃⲆⲆᐃⲆᐃⵠⲆ();
                break;
              case 31:
                b.ᐃΔᐃⲆᐃⵠⲆⲆⵠ(d);
                break;
              case 32:
                b.ΔⲆᐃⵠΔⲆⲆⲆΔ(d[_b]);
                break;
              case 33:
                b.ⵠⲆⵠΔⲆΔⵠΔⵠ(d[As]);
                break;
              case 34:
                b.ᐃⵠⵠⵠᐃΔⵠⵠⵠ();
                break;
              case 35:
                b.ᐃⲆᐃΔⲆⵠᐃᐃⲆ(d[Zq]);
                break;
              case 36:
                b.ᐃΔⲆⲆΔⲆⲆ(d[1]);
                break;
              case 37:
                b.ΔΔΔΔΔⲆΔᐃⲆ(d[jq], d[Zt]);
                break;
              case 38:
                b.ΔᐃΔᐃⵠⲆⲆⵠⵠ(d[1]);
                break;
              case 39:
                b.ΔⵠⲆᐃⲆⲆΔᐃⵠ(d[1]);
                break;
              case 40:
                b.ᐃΔⵠᐃΔᐃⵠⵠΔ();
                break;
              case 41:
                b.ⲆⵠΔΔⲆⵠⲆᐃⲆ(d);
                break;
              case 42:
                b.ᐃⵠⲆⲆⵠᐃᐃⲆⵠ(d[ag]);
                break;
              case 43:
                b.ⵠⵠⲆⲆΔⵠΔᐃⲆ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ⵠᐃⲆΔⵠⵠᐃᐃⲆ(d[1]);
                break;
              case 46:
                b.ᐃᐃᐃᐃⵠⲆⵠⲆⲆ(d[1]);
                break;
              case 47:
                b.ⲆΔⵠⵠⵠ(d[1]);
                break;
              case 48:
                b.ᐃΔᐃⵠⵠᐃⲆⵠⵠ();
                break;
              case 50:
                b.ⲆⲆᐃΔⵠΔⲆⵠⵠ(d[1], d[sh], d[3]);
                break;
              case 51:
                b.ⵠⵠΔⲆⵠᐃⵠᐃΔ();
                break;
              case 52:
                b.ⵠⵠᐃⵠⲆⵠΔⲆⲆ(d[Eo]);
                break;
              case 53:
                b.ⵠᐃᐃΔΔΔⲆⲆⲆ(d[Zq]);
                break;
              case 54:
                b.ⲆᐃᐃΔⵠᐃᐃΔᐃ();
                break;
              case 55:
                b.ΔⲆⵠⲆᐃⵠᐃᐃⵠ(d[1]);
                break;
              case 56:
                b.ᐃΔⵠᐃΔⲆⵠⲆᐃ(d[Ej]);
                break;
              case 57:
                b.ⵠᐃᐃΔᐃᐃᐃᐃⲆ();
                break;
              case 58:
                b.ΔΔΔᐃⵠⵠⵠΔΔ();
                break;
              case 59:
                b.ⵠᐃᐃᐃⲆΔⵠⵠⲆ();
                break;
              case 60:
                b.ⲆΔⲆⵠᐃⲆⲆⲆⵠ();
                break;
              case 61:
                bx.ᐃᐃⵠ.ⵠⵠⲆⲆⲆⵠΔ = 0.2;
                bx.ᐃᐃⵠ.ⲆᐃᐃⲆⵠ = 3;
                break;
              case 62:
                b.ⵠⲆⲆΔⵠⵠᐃΔⲆ(new Uint16Array(a.data));
                break;
              case 63:
                b.ⵠⵠⵠⵠⲆⵠⵠᐃⵠ();
                break;
              case 64:
                b.ⵠⲆΔᐃⵠΔᐃΔᐃ();
                break;
              case 65:
                b.ΔΔⵠΔⵠⲆᐃᐃⵠ();
                break;
              case 66:
                b.ᐃⲆⲆⲆⵠᐃⵠⲆᐃ();
                break;
              case 67:
                b.ΔΔⵠⵠⲆᐃᐃⵠⵠ(d[Ej]);
                break;
              case 68:
                b.ΔⲆⲆΔᐃⵠⵠΔⲆ(d[ag]);
                break;
              case 69:
                b.ᐃΔΔⲆⲆⲆⲆ(d[1]);
                break;
              case 70:
                b.ΔⲆᐃᐃⵠᐃΔⲆⵠ(d[zs]);
                break;
              case 71:
                b.ⵠⵠΔⵠᐃ(d[Eo]);
            }
          }
        }
      };
      this.ⲆⵠⲆⵠ.onopen = function () {
        clearTimeout(b.Ⲇᐃᐃⵠⵠ);
        bx.ᐃᐃᐃⲆΔΔⵠ = bx.ᐃᐃᐃⲆΔΔⵠ || ᐃⵠΔⵠ.ⲆⵠⵠⵠΔᐃⲆ("token");
        ᐃⵠΔⵠ.ᐃᐃⵠⵠⵠᐃⵠ().then(a => {
          b.ⲆⵠⲆⵠ[lw](Dr[jr].stringify([
            pf.ⵠᐃΔⵠⲆ.input.value,
            screen.width + 200,
            screen.height + 200,
            sw.ⲆⵠΔΔᐃⵠⲆ,
            bx.ⲆⲆⲆⲆᐃ,
            bx.ⵠΔⵠΔᐃΔΔ,
            bx.reconnect.enabled ? 1 : 0,
            pf.ᐃᐃΔᐃ,
            pf.ᐃΔᐃⵠⵠ,
            pf.ᐃⵠΔᐃⲆ,
            pf.ΔΔᐃᐃⵠ,
            pf.ΔᐃⵠⲆⲆ,
            pf.ΔΔᐃⵠⲆ,
            jx === undefined ? Gr : jx,
            ix === undefined ? Tg : ix.substring(ix.length - 50),
            nw,
            bx.ᐃᐃᐃⲆΔΔⵠ,
            a,
            bx.ΔΔᐃᐃᐃΔⲆ,
            bx.ΔⲆᐃⲆΔⲆᐃ,
          ]));
          bx.ᐃᐃᐃⲆΔΔⵠ = undefined;
          bx.ΔΔᐃᐃᐃΔⲆ = yr;
          bx.ΔⲆᐃⲆΔⲆᐃ = undefined;
          b.Ⲇᐃᐃⵠⵠ = setTimeout(b.timeout, sw.ᐃΔⲆΔⵠⲆⵠᐃΔ);
        });
      };
    };
  }();
  var ff;
  var bx = {};
  var cx;
  var dx = {
    ⲆⵠΔⲆⵠ: Sk
  };
  var ex = new function () {
    this.ΔⲆᐃⵠΔ = Ih;
    this.loaded = 0;
    this.transition = 0;
    this.ᐃᐃⵠᐃᐃⵠⲆ = function (a) {
      return a / ff.w * 100;
    };
    this.ⲆⵠΔᐃΔⲆⵠ = function (a) {
      return Vj * (a / ff.ⵠΔⵠ);
    };
    this.ΔᐃᐃⲆΔΔᐃ = function (a, b) {
      a = this.ᐃᐃⵠᐃᐃⵠⲆ(a) - this.ᐃΔⲆⲆΔ.x;
      return this.ᐃΔⲆⲆΔ.x + b * a;
    };
    this.ⲆᐃΔᐃⵠⵠⵠ = function (a, b) {
      a = Math.abs(this.ⲆⵠΔᐃΔⲆⵠ(a) - this.ᐃΔⲆⲆΔ.y);
      return this.ᐃΔⲆⲆΔ.y + b * a;
    };
    this.sample = {};
    this.ⵠⵠⲆⵠΔ = {};
    this.ᐃᐃᐃⲆ = {};
    this.ᐃⵠⲆΔⵠᐃⵠ = function (a, b, c, d) {
      for (var e = 0; b.length > e; e++) {
        var f = b[e];
        if (!a.playing(f)) {
          a.pos(c, d, -0.5, f);
          a.play(f);
          return true;
        }
      }
      return hr;
    };
    this.ΔΔΔ = function (a, b, c, d) {
      c = this.ΔᐃᐃⲆΔΔᐃ(c, ᐃΔΔΔⵠ.ⲆΔᐃⵠⵠΔⲆ);
      d = this.ⲆᐃΔᐃⵠⵠⵠ(d, ᐃΔΔΔⵠ.ⲆΔᐃⵠⵠΔⲆ);
      console.log("HIT", a, b, c, d, ᐃΔΔΔⵠ.ⲆΔᐃⵠⵠΔⲆ);
      if (a) {
        if (b === ie) {
          this.ᐃⵠⲆΔⵠᐃⵠ(this.ᐃᐃᐃⲆ.ᐃΔᐃᐃⲆΔΔ, this.sample.ᐃΔᐃᐃⲆΔΔ, c, d);
        } else if (qk === b) {
          this.ᐃⵠⲆΔⵠᐃⵠ(this.ᐃᐃᐃⲆ.ⵠⲆᐃⵠⲆᐃⵠ, this.sample.ⵠⲆᐃⵠⲆᐃⵠ, c, d);
        }
      } else {
        this.ᐃⵠⲆΔⵠᐃⵠ(this.ᐃᐃᐃⲆ.ⵠΔⲆⵠΔ, this.sample.ⵠΔⲆⵠΔ, c, d);
      }
    };
    this.ᐃΔⲆⲆΔ = {
      y: 0,
      x: tj
    };
    this.ΔΔⲆⲆΔⲆΔ = {
      x: qn,
      y: 0
    };
    this.ⵠⵠᐃⵠΔ = {};
    this.ⲆΔⲆΔ = [];
    this.ⲆᐃΔᐃΔ = function (a, b) {
      for (var c in this.ⵠⵠᐃⵠΔ) {
        var d = this.ⵠⵠᐃⵠΔ[c];
        d.check(a);
        if (d.ⵠᐃⲆⲆᐃⲆⲆ) {
          if (ff.Δⵠⵠⵠⵠ.now < lf.ⵠⵠⵠⲆⲆⲆⲆ) {
            d.ⲆΔᐃΔᐃ();
          }
          if (b) {
            d.ᐃⲆΔ(a, this.ᐃΔⲆⲆΔ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ᐃΔΔᐃⲆΔⵠⵠᐃ = function () {
      var a = [];
      for (var b = ms; b < this.ⲆΔⲆΔ.length; b++) {
        if ((e = this.ⲆΔⲆΔ[b]).ΔⵠⲆᐃᐃᐃⲆ) {
          a.push(b);
        } else if (!e.ΔⵠⲆᐃᐃᐃⲆ && !ff.ⵠΔΔⲆ[e.ⵠᐃΔΔ]) {
          e.ΔⵠⵠⲆⲆⲆⲆ();
          a.push(b);
        }
      }
      var c = ff.ᐃᐃᐃ[xw.ΔΔⲆⵠ];
      var d = ms;
      for (b = uh; c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((uw.ΔⲆΔⲆⲆⵠᐃ != ff.mode || ff.ⲆΔⲆΔ[e.id].ⵠᐃΔⵠⲆ !== "spectator") && e.Ⲇⵠⵠᐃⵠ === -1 && bx.ⵠᐃΔΔ !== e.ⵠᐃΔΔ) {
          this.ⲆΔⲆΔ[a[d]].ΔᐃΔⲆⵠ(e.ⵠᐃΔΔ);
          d++;
        }
      }
    };
    this.ⵠⵠΔΔᐃⲆᐃⵠᐃ = function () {
      this.ᐃΔΔᐃⲆΔⵠⵠᐃ();
      for (var a = 0; a < this.ⲆΔⲆΔ.length; a++) {
        var b = this.ⲆΔⲆΔ[a];
        if (!b.ΔⵠⲆᐃᐃᐃⲆ && b.check()) {
          b.ᐃⲆΔ();
        }
      }
    };
    this.ΔⵠⲆⲆⲆᐃⲆΔⵠ = function (a) {
      if (this.ΔΔⲆⲆΔⲆΔ.x === a.x && this.ΔΔⲆⲆΔⲆΔ.y === a.y) {
        return 0;
      } else {
        this.ΔΔⲆⲆΔⲆΔ.x = a.x;
        this.ΔΔⲆⲆΔⲆΔ.y = a.y;
        this.ᐃΔⲆⲆΔ.x = this.ᐃᐃⵠᐃᐃⵠⲆ(a.x);
        this.ᐃΔⲆⲆΔ.y = this.ⲆⵠΔᐃΔⲆⵠ(a.y);
        Howler.pos(this.ᐃΔⲆⲆΔ.x, this.ᐃΔⲆⲆΔ.y, 0);
        return 1;
      }
    };
    this.ⵠⵠᐃᐃᐃⲆⲆΔⲆ = function () {
      if (this.ΔⲆᐃⵠΔ && this.loaded) {
        var a = ff.ⵠΔΔⲆ[bx.ⵠᐃΔΔ];
        if (a) {
          a.Ⲇⵠⵠᐃⵠ = Cn;
          var b = this.ΔⵠⲆⲆⲆᐃⲆΔⵠ(a);
          if (ff.mode !== uw.ΔΔⵠⲆΔ && ff.mode !== uw.ΔᐃⵠΔᐃ && ff.mode !== uw.ⵠⲆΔⵠⵠΔᐃ) {
            this.ⲆᐃΔᐃΔ(a, b);
          }
          this.ⵠⵠΔΔᐃⲆᐃⵠᐃ();
        }
      }
    };
    this.ⵠΔᐃᐃᐃᐃⵠᐃᐃ = function () {
      for (var b in uf) {
        var c = uf[b];
        if (typeof c === "object" && c.path) {
          c.ΔⵠⲆⲆᐃ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ΔΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = rl; h < f; h++) {
            var j = c.ΔⵠⲆⲆᐃ.play(d);
            c.ΔⵠⲆⲆᐃ.stop(j);
            c.ΔⵠⲆⲆᐃ.on(p[wa], function (a) {
              if (!this.volume(a)) {
                console.log(undefined, undefined);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > Al) {
            ex.sample[d] = g;
          } else {
            ex.sample[d] = g[0];
          }
          ex.ᐃᐃᐃⲆ[d] = c.ΔⵠⲆⲆᐃ;
        }
      }
    };
    this.ⵠᐃⵠⲆⲆᐃⲆ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⵠᐃⲆⵠΔⲆⵠ = function (b, c, d, e, f, g) {
      var i = b;
      for (var a = 0; a < d; a++) {
        var j = i[a] = [];
        for (ΔⲆᐃΔ = Ih; ΔⲆᐃΔ < e; ΔⲆᐃΔ++) {
          j[ΔⲆᐃΔ] = ex.sample[f + ΔⲆᐃΔ][a];
          c.ΔⵠⲆⲆᐃ.volume(g, j[ΔⲆᐃΔ]);
        }
      }
    };
    this.ΔᐃΔⲆⵠ = function () {
      ex.ⵠΔᐃᐃᐃᐃⵠᐃᐃ();
      ex.ⵠⵠⲆⵠΔ.ᐃᐃⵠΔᐃⲆᐃ = [];
      ex.ⵠⵠⲆⵠΔ.ΔᐃΔⵠⵠ = [];
      ex.ⵠⵠⲆⵠΔ.ⲆⲆᐃΔᐃ = [];
      ex.ⵠᐃⲆⵠΔⲆⵠ(ex.ⵠⵠⲆⵠΔ.ᐃᐃⵠΔᐃⲆᐃ, uf.ⵠΔΔⲆⵠⵠⵠ, lf.ΔΔⲆⵠ, 3, "p", 0.15);
      ex.ⵠᐃⲆⵠΔⲆⵠ(ex.ⵠⵠⲆⵠΔ.ΔᐃΔⵠⵠ, uf.ⲆΔᐃⵠᐃⵠΔ, lf.ΔΔⲆⵠ, 4, "w", 0.15);
      ex.ⵠᐃⲆⵠΔⲆⵠ(ex.ⵠⵠⲆⵠΔ.ⲆⲆᐃΔᐃ, uf.ᐃΔⲆᐃⵠᐃΔ, lf.ΔΔⲆⵠ, xs, "d", 0.09);
      ex.ⵠᐃⵠⲆⲆᐃⲆ(ex.sample.ⵠΔⲆⵠΔ, ex.ᐃᐃᐃⲆ.ⵠΔⲆⵠΔ, 0.15);
      ex.ⵠᐃⵠⲆⲆᐃⲆ(ex.sample.ⵠⲆᐃⵠⲆᐃⵠ, ex.ᐃᐃᐃⲆ.ⵠⲆᐃⵠⲆᐃⵠ, 0.2);
      ex.ⵠᐃⵠⲆⲆᐃⲆ(ex.sample.ᐃΔᐃᐃⲆΔΔ, ex.ᐃᐃᐃⲆ.ᐃΔᐃᐃⲆΔΔ, ie);
      ex.ⵠⵠᐃⵠΔ.ᐃⵠⲆⲆⲆᐃΔⵠⵠ = new df(lf.ᐃᐃΔⲆΔᐃⲆⵠⲆ, this.sample.ⵠᐃⲆⵠᐃΔⵠ, this.sample.ΔⵠⲆᐃΔΔΔ, lf.ⲆⵠᐃᐃⵠᐃⲆᐃΔ, 0.05, 0.4, uf.ᐃⵠⲆΔⵠⵠⲆ.ΔⵠⲆⲆᐃ, lf.ⵠⲆΔⲆⵠΔⲆ, {
        x: Ur.ᐃⲆⵠⵠᐃⵠⵠ,
        y: Ur.ΔΔΔⵠᐃⵠⵠ,
        w: ff.w,
        ⵠΔⵠ: ff.ⵠΔⵠ
      }, {
        x: Ur.ᐃⲆⵠⵠᐃⵠⵠ - 2300,
        y: Ur.ΔΔΔⵠᐃⵠⵠ - 4000,
        w: ff.w,
        ⵠΔⵠ: ff.ⵠΔⵠ
      }, {
        x: Ur.ᐃⲆⵠⵠᐃⵠⵠ - 1500,
        y: Ur.ΔΔΔⵠᐃⵠⵠ - 2000,
        w: ff.w,
        ⵠΔⵠ: ff.ⵠΔⵠ
      });
      ex.ⵠⵠᐃⵠΔ.ΔⲆⵠΔΔⲆⵠΔΔ = new df(lf.ⵠⵠΔᐃⲆᐃᐃ, this.sample.ᐃⵠᐃⲆᐃΔⵠ, this.sample.ΔⵠⲆᐃᐃⲆⵠ, lf.ᐃΔⲆⵠᐃᐃᐃᐃⵠ, 0.03, 0.25, uf.ᐃⵠⲆΔⵠⵠⲆ.ΔⵠⲆⲆᐃ, lf.ⵠⲆΔⲆⵠΔⲆ, {
        x: 0,
        y: Ur.ΔΔΔⵠᐃⵠⵠ + 800,
        w: Ur.ᐃⲆⵠⵠᐃⵠⵠ - 2300,
        ⵠΔⵠ: ff.ⵠΔⵠ
      }, {
        x: -100,
        y: Ur.ΔΔΔⵠᐃⵠⵠ - 300,
        w: Ur.ᐃⲆⵠⵠᐃⵠⵠ - No,
        ⵠΔⵠ: ff.ⵠΔⵠ
      }, {
        x: -rj,
        y: Ur.ΔΔΔⵠᐃⵠⵠ + 400,
        w: Ur.ᐃⲆⵠⵠᐃⵠⵠ - 1400,
        ⵠΔⵠ: ff.ⵠΔⵠ
      });
      ex.ⵠⵠᐃⵠΔ.ᐃⵠᐃΔⲆΔΔ = new df(lf.ⵠⵠΔᐃⲆᐃᐃ, this.sample.ⵠΔⲆᐃΔⵠⵠ, this.sample.ⵠᐃⵠΔᐃⵠΔ, lf.ⵠᐃΔⵠᐃᐃᐃᐃᐃ, 0.01, 0.22, uf.ᐃⵠⲆΔⵠⵠⲆ.ΔⵠⲆⲆᐃ, lf.ⵠⲆΔⲆⵠΔⲆ, {
        x: -yg,
        y: -100,
        w: ff.w + 200,
        ⵠΔⵠ: Ur.ΔΔΔⵠᐃⵠⵠ - 1000
      }, {
        x: -100,
        y: -fs,
        w: ff.w + 200,
        ⵠΔⵠ: Ur.ΔΔΔⵠᐃⵠⵠ + 600
      }, {
        x: -Nh,
        y: -100,
        w: ff.w + 200,
        ⵠΔⵠ: Ur.ΔΔΔⵠᐃⵠⵠ + 100
      });
      for (var a = 0; lf.ΔΔⲆⵠ > a; a++) {
        ex.ⲆΔⲆΔ[a] = new mf(a);
      }
      ex.ⲆΔⲆΔ[Cq].ΔᐃΔⲆⵠ(bx.ⵠᐃΔΔ);
      ex.loaded = 1;
    };
    this.ⵠΔΔⲆⲆⲆΔᐃᐃ = function () {
      if (!this.transition && lf.ⵠⵠⵠⲆⲆⲆⲆ > ff.Δⵠⵠⵠⵠ.now) {
        this.transition = jq;
      }
    };
    this.ⲆⲆΔᐃⲆ = function () {
      if (this.ΔⲆᐃⵠΔ && this.loaded) {
        for (var a in ex.sample) {
          var b = ex.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              ex.ᐃᐃᐃⲆ[a].stop(b[c]);
            }
          } else {
            ex.ᐃᐃᐃⲆ[a].stop(b);
          }
        }
        for (c = 0; ex.ⲆΔⲆΔ.length > c; c++) {
          ex.ⲆΔⲆΔ[c].ΔⵠⵠⲆⲆⲆⲆ();
        }
      }
    };
    this.select = function () {
      if (ex.ΔⲆᐃⵠΔ) {
        ex.ⲆⲆΔᐃⲆ();
      } else {
        if (!ex.loaded) {
          ex.ΔᐃΔⲆⵠ();
        }
        ex.ⲆΔⲆΔ[Nl].ⵠᐃΔΔ = bx.ⵠᐃΔΔ;
        ex.ⲆΔⲆΔ[0].ΔⵠⲆᐃᐃᐃⲆ = 0;
        ex.ⵠΔΔⲆⲆⲆΔᐃᐃ();
      }
      ex.ΔⲆᐃⵠΔ = !ex.ΔⲆᐃⵠΔ;
    };
  }();
  var Af = new function () {
    this.ΔⲆⵠᐃΔᐃΔ = function () {
      this.ⵠⲆⵠᐃᐃ = 81;
      this.ᐃⲆⵠᐃΔ = 68;
      this.ΔⵠⵠⲆⵠ = 90;
      this.ᐃⲆⵠⲆᐃᐃⵠ = 83;
    };
    this.ᐃᐃⲆⲆᐃⲆⵠ = function () {
      this.ⵠⲆⵠᐃᐃ = 65;
      this.ᐃⲆⵠᐃΔ = 68;
      this.ΔⵠⵠⲆⵠ = 87;
      this.ᐃᐃⲆᐃⵠ = 83;
    };
    this.ΔᐃᐃⲆⵠ = qk;
    this.ᐃⲆⵠⲆᐃᐃⵠ = Ok;
    this.ᐃⵠⲆΔⵠΔᐃ = 49;
    this.ΔⲆΔⲆⲆΔᐃ = 50;
    this.ΔΔᐃⲆΔⵠⲆ = 51;
    this.ᐃΔⲆⲆΔΔⵠ = 52;
    this.ᐃⵠⵠᐃⵠΔⵠⲆᐃ = 53;
    this.ΔᐃⵠⵠΔᐃᐃ = gk;
    this.ⲆⵠⲆⲆΔⲆⵠ = 37;
    this.Ⲇⵠᐃⵠⵠⵠᐃ = 39;
    this.ⵠΔΔⵠⲆⲆᐃ = 38;
    this.ⵠⵠⵠⵠᐃⵠⲆ = 40;
    this.ⲆΔΔΔⵠⲆᐃ = 32;
    this.ᐃΔΔⵠⲆᐃᐃ = 82;
    this.ⲆⲆⵠⲆⲆⵠΔ = 71;
    this.ⲆᐃᐃᐃⵠⲆⵠ = 86;
    this.ΔΔΔⲆⲆⵠⵠ = 66;
    this.ᐃᐃⲆⲆᐃⲆⵠ();
    this.keys = new Array(255);
    for (var a = Fj; a < 255; a++) {
      this.keys[a] = this.ΔᐃᐃⲆⵠ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ΔᐃᐃⲆⵠ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (b == this.ⵠⲆⵠᐃᐃ || b == this.ⲆⵠⲆⲆΔⲆⵠ) {
        this.ⲆⵠᐃⲆΔⲆⲆ();
      } else if (b == this.ΔⵠⵠⲆⵠ || this.ⵠΔΔⵠⲆⲆᐃ == b) {
        this.ᐃΔᐃΔⵠⲆᐃ();
      } else if (this.ᐃⲆⵠⲆᐃᐃⵠ == b || b == this.ⲆΔⵠᐃⲆᐃᐃΔⲆ) {
        this.ⵠΔⲆⲆᐃᐃᐃ();
      } else if (b == this.ᐃⲆⵠᐃΔ || b == this.Ⲇⵠᐃⵠⵠⵠᐃ) {
        this.ⲆΔⲆⵠΔΔΔ();
      }
      this.keys[b] = this.ᐃⲆⵠⲆᐃᐃⵠ;
      return b;
    };
    this.ⲆⵠᐃⲆΔⲆⲆ = function () {
      this.keys[this.ᐃⲆⵠᐃΔ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.Ⲇⵠᐃⵠⵠⵠᐃ] = this.ΔᐃᐃⲆⵠ;
    };
    this.ⲆΔⲆⵠΔΔΔ = function () {
      this.keys[this.ⵠⲆⵠᐃᐃ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⲆⵠⲆⲆΔⲆⵠ] = this.ΔᐃᐃⲆⵠ;
    };
    this.ⵠΔⲆⲆᐃᐃᐃ = function () {
      this.keys[this.ΔⵠⵠⲆⵠ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⵠΔΔⵠⲆⲆᐃ] = this.ΔᐃᐃⲆⵠ;
    };
    this.ᐃΔᐃΔⵠⲆᐃ = function () {
      this.keys[this.ᐃᐃⲆᐃⵠ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⵠⵠⵠⵠᐃⵠⲆ] = this.ΔᐃᐃⲆⵠ;
    };
    this.ΔⵠⵠⲆⲆⵠᐃ = function () {
      this.keys[this.ᐃⲆⵠᐃΔ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.Ⲇⵠᐃⵠⵠⵠᐃ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⵠⲆⵠᐃᐃ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⲆⵠⲆⲆΔⲆⵠ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ΔⵠⵠⲆⵠ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⵠΔΔⵠⲆⲆᐃ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ᐃᐃⲆᐃⵠ] = this.ΔᐃᐃⲆⵠ;
      this.keys[this.ⵠⵠⵠⵠᐃⵠⲆ] = this.ΔᐃᐃⲆⵠ;
    };
    this.ⲆΔⵠΔᐃᐃⵠ = function () {
      return this.keys[this.ⵠⲆⵠᐃᐃ] || this.keys[this.ⲆⵠⲆⲆΔⲆⵠ];
    };
    this.ⲆᐃΔⲆᐃΔⵠ = function () {
      return this.keys[this.ᐃⲆⵠᐃΔ] || this.keys[this.Ⲇⵠᐃⵠⵠⵠᐃ];
    };
    this.ΔⲆⲆⵠⵠⵠΔ = function () {
      return this.keys[this.ΔⵠⵠⲆⵠ] || this.keys[this.ⵠΔΔⵠⲆⲆᐃ];
    };
    this.ⵠⲆΔⲆⲆΔⵠ = function () {
      return this.keys[this.ᐃᐃⲆᐃⵠ] || this.keys[this.ⵠⵠⵠⵠᐃⵠⲆ];
    };
    this.ΔΔⵠᐃⲆⲆΔⲆᐃ = function () {
      return this.keys[this.ΔᐃⵠⵠΔᐃᐃ];
    };
    this.ᐃⵠⵠΔⲆⲆΔᐃⵠ = function () {
      return this.keys[this.ᐃⵠⲆΔⵠΔᐃ];
    };
    this.ⲆᐃΔⵠᐃᐃᐃⵠᐃ = function () {
      return this.keys[this.ΔⲆΔⲆⲆΔᐃ];
    };
    this.ΔⵠⵠⵠᐃᐃⵠⲆΔ = function () {
      return this.keys[this.ΔΔᐃⲆΔⵠⲆ];
    };
    this.ⵠⲆⵠᐃᐃⲆⲆᐃⲆ = function () {
      return this.keys[this.ᐃΔⲆⲆΔΔⵠ];
    };
    this.ⵠᐃⲆᐃⵠⵠΔⵠᐃ = function () {
      return this.keys[this.ⲆΔΔΔⵠⲆᐃ];
    };
    this.ⲆⲆⵠⵠᐃⵠⵠⵠΔ = function () {
      return this.keys[this.ᐃΔΔⵠⲆᐃᐃ];
    };
    this.ⲆⲆΔⲆΔⵠⲆᐃᐃ = function () {
      return this.keys[this.ⲆⲆⵠⲆⲆⵠΔ];
    };
    this.ᐃᐃΔⵠⲆΔΔⵠⲆ = function () {
      return this.keys[this.ⲆᐃᐃᐃⵠⲆⵠ];
    };
    this.ⵠⲆΔⲆⵠⵠⵠΔⲆ = function () {
      return this.keys[this.ΔΔΔⲆⲆⵠⵠ];
    };
  }();
  var kf = new function () {
    this.ᐃⲆⵠⲆᐃᐃⵠ = 0;
    this.ΔᐃᐃⲆⵠ = 1;
    this.IDLE = vk;
    this.ⲆΔⵠᐃⵠΔⲆ = ne;
    this.ᐃΔⲆⲆⵠᐃΔΔᐃ = Oj;
    this.ⲆⲆⲆⲆ = {
      x: 0,
      y: qn
    };
    this.ⲆⲆⲆⵠΔⲆΔ = Fj;
    this.ᐃΔΔᐃⲆᐃⲆ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ⲆⵠⲆᐃ = this.ⲆΔⵠᐃⵠΔⲆ;
    this.down = function () {
      this.state = this.ᐃⲆⵠⲆᐃᐃⵠ;
    };
    this.up = function () {
      this.state = this.ΔᐃᐃⲆⵠ;
    };
    this.ᐃⲆΔ = function () {
      return (this.ⲆⲆⲆⵠΔⲆΔ != this.ⲆⲆⲆⲆ.x || this.ᐃΔΔᐃⲆᐃⲆ != this.ⲆⲆⲆⲆ.y) && (this.ⲆⲆⲆⵠΔⲆΔ = this.ⲆⲆⲆⲆ.x, this.ᐃΔΔᐃⲆᐃⲆ = this.ⲆⲆⲆⲆ.y, Xj);
    };
  }();
  var xf = uh;
  var fx = 0;
  var gx = new function (f, e, g) {
    this.ΔⲆ = f;
    this.Ⲇ = e;
    this.ᐃΔⲆᐃⵠⲆᐃ = {
      translate: {
        x: Cn,
        y: 0
      },
      style: document.getElementById("loading").style,
      ᐃⲆΔ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ᐃΔⲆᐃⵠⲆᐃ.style.position = "absolute";
    this.ᐃΔⲆᐃⵠⲆᐃ.style.display = "inline-block";
    this.ᐃΔⲆᐃⵠⲆᐃ.ᐃⲆΔ();
    this.ⲆⵠΔⲆⵠ = true;
    this.stop = function () {
      this.ⲆⵠΔⲆⵠ = false;
    };
    this.ⲆⲆΔΔⲆⲆⵠ = {
      total: 1
    };
    var i = this;
    function j() { }
    var k = Fj;
    function m(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -Ag) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || -Zq !== a.indexOf("night-book") || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -Zq || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || -Oj !== a.indexOf("night-crate") || -_b !== a.indexOf("day-skin") || a.indexOf("night-skin") !== -1 || -ag !== a.indexOf("day-river") || -Ok !== a.indexOf("night-river") || a.indexOf("day-river") !== -Ue || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -Gs || a.indexOf("night-rock") !== -_b || -Ht !== a.indexOf("day-flower") || a.indexOf("night-flower") !== -ag || -aa !== a.indexOf("day-leaf") || a.indexOf("night-leaf") !== -1 || -Oj !== a.indexOf("day-herb") || a.indexOf("night-herb") !== -jq || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || -Oj !== a.indexOf("day-hand-skin") || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -$l || a.indexOf("bigday") !== -Al || a.indexOf("bigzday") !== -_b || a.indexOf("bigznight") !== -ie || a.indexOf("tutorial-box") !== -Al || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -_b || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -Fh || -Zq !== a.indexOf("night-lava-") || a.indexOf("-click.png") !== -1 || -Ej !== a.indexOf("-in.png") || a.indexOf("-fog") !== -$l || a.indexOf("-lava") !== -Ag || -$l !== a.indexOf("pebblecompo") || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ΔΔⲆᐃᐃ = function () {
      i.ᐃⲆΔ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      kj.setTimeout(i.ΔΔⲆᐃᐃ, 33);
    };
    this.ⲆⲆΔᐃⲆ = function (a) {
      j = a;
      i.ΔΔⲆᐃᐃ();
    };
    new Date().getTime();
    Object.keys(ⵠᐃ).length;
    console.log(da, ng);
    for (var a in ⵠᐃ) {
      if (m(ⵠᐃ[a]) === Nl) {
        0;
      }
    }
    console.log(Gg, da);
    function n() {
      if (Nl !== this.ⵠᐃᐃΔⲆᐃᐃ) {
        return this.ⵠᐃᐃΔⲆᐃᐃ;
      } else {
        this.ⵠᐃᐃΔⲆᐃᐃ = 2;
        this.src = this.ⵠⲆⲆΔᐃ;
        return 0;
      }
    }
    function h(a) {
      this.ⵠᐃᐃΔⲆᐃᐃ = 1;
    }
    var l = 0;
    function p() {
      console.log(undefined);
      if (_b !== l) {
        l = 1;
        console.log(undefined);
        if (Hg !== Ct) {
          Hg();
        }
        Ct();
        var a = ᐃⵠΔⵠ.ⲆⵠⵠⵠΔᐃⲆ("server");
        if (a !== null) {
          ⵠⵠⵠⲆ.ⲆᐃⵠΔΔⵠⵠ = As;
          ⵠⵠⵠⲆ.ⲆⲆᐃᐃⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: "Private Server " + a,
            ssl: zs
          }];
        }
        ⵠⵠⵠⲆ.ⵠᐃⵠΔⲆᐃᐃΔⵠ();
        setTimeout(g, 100);
      }
    }
    function b() {
      let a = function () {
        ⵠⵠⵠⲆ.ᐃⵠᐃⲆⵠⲆⲆⵠΔ(p);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, mg);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function q() {
      this.ⵠⲆⵠⵠⵠΔⲆ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠⲆⵠⵠⵠΔⲆ}`, this);
      if (this.ⵠⲆⵠⵠⵠΔⲆ > X) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⵠⲆⵠⵠⵠΔⲆ;
      var b = this.src;
      var c = m(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ᐃΔⵠᐃⵠΔⲆ) {
          if (b.indexOf(ᐃΔⵠᐃⵠΔⲆ[c]) !== -Ht) {
            ⵠᐃ[c] = new Image();
            ⵠᐃ[c].onload = h;
            ⵠᐃ[c].onerror = q;
            ⵠᐃ[c].ⵠⲆⵠⵠⵠΔⲆ = a;
            ⵠᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function d(a) {
      for (var b in ⵠᐃ) {
        var c = ⵠᐃ[b];
        if (typeof c === "string" && m(c) === a) {
          ⵠᐃ[b] = new Image();
          ⵠᐃ[b].ⵠᐃᐃΔⲆᐃᐃ = vq;
          ⵠᐃ[b].ⵠⲆⵠⵠⵠΔⲆ = 0;
          ⵠᐃ[b].onload = h;
          ⵠᐃ[b].onerror = q;
          ⵠᐃ[b].ᐃⲆⵠⲆΔΔⲆ = n;
          ⵠᐃ[b].ⵠⲆⲆΔᐃ = c;
        }
      }
    }
    d(1);
    d(0);
    Wu(ag, "l", 20, "#000");
    b();
    Ec();
    this.ᐃⲆΔ = function () {
      this.ᐃΔⲆᐃⵠⲆᐃ.translate.x = (ro - 500) / 2;
      this.ᐃΔⲆᐃⵠⲆᐃ.translate.y = (so - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ᐃΔⲆᐃⵠⲆᐃ.translate.y -= a;
      this.ᐃΔⲆᐃⵠⲆᐃ.ᐃⲆΔ();
    };
    this.ᐃΔⲆᐃⵠⲆᐃ.ᐃⲆΔ();
    this.ⵠΔᐃⵠ = function () {
      try {
        mm();
      } catch (a) { }
      this.ᐃⲆΔ();
    };
  }(to, oo, function () {
    wm();
    dx = new Uw(to, oo);
    (pf = new Ww(to, oo)).ⲆⵠᐃⵠᐃⲆᐃⲆᐃ();
    cx = new nf(to, oo);
    ff = new Aw();
    bx = new Lw();
    gx.ⲆⲆΔᐃⲆ(function () {
      gx.ᐃΔⲆᐃⵠⲆᐃ.style.display = "none";
      pf.ΔⲆᐃⵠΔ();
    });
  });
  function Bf() {
    try {
      kj.Widget.adsRefresh();
    } catch (a) { }
  }
  function Df(a, b) {
    const c = a ^ 51289;
    const d = b ^ 3099;
    return ((25194 + (Sw(c, d, c, d) ^ Vw(c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
  }
  function If(b, c, d, e, f) {
    const g = ((d + 30124) * 2147483629 + 2147483587) % 2147483647;
    const i = (e + 24091) % 65333;
    const a = (16 << (f >> 16 & 255)) + (0 << (f & Xg)) + (8 << (f >> 8 & 255)) + (24 << (f >> 24 & 255));
    const j = Ts(~(b & 16113) & 16113 | ~(b & 16113) & b, ((c + 42389) * 214013 + 2531011) % 4294967296);
    Sa(g, i, a);
    return (j | 30143) & ~(j & 30143);
  }
  kj.onbeforeunload = function () {
    if (dx.ⲆⵠΔⲆⵠ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Aa();
  (function b(a) {
    kj.requestAnimationFrame(b);
    xf = (a - fx) / 1000;
    fx = a;
    xf = Oj < xf ? 1 : xf;
    if (dx.ⲆⵠΔⲆⵠ) {
      dx.ⵠΔᐃⵠ();
    } else {
      oo.clearRect(qk, uh, ro, so);
      if (gx.ⲆⵠΔⲆⵠ) {
        gx.ⵠΔᐃⵠ();
      } else if (pf.ⲆⵠΔⲆⵠ) {
        pf.ⵠΔᐃⵠ();
      } else if (cx.ⲆⵠΔⲆⵠ) {
        cx.ⵠΔᐃⵠ();
      }
    }
  })(vq);
  var Ef = ur;
  function hx() {
    Qf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Fs);
    Qf.send();
  }
  var Qf = new XMLHttpRequest();
  function _f(b, c, d, e, f) {
    const i = (16 << (b >> 24 & 255)) + (24 << (b & 255)) + (8 << (b >> 16 & 255)) + (0 << (b >> 8 & 255));
    const j = ~(c & 58020) & c | ~(c & 58020) & 58020;
    const a = d ^ 9523;
    const k = (e | 27740) & ~(e & 27740);
    const h = ((f + 45279) * 22695477 + 1) % 4294967296;
    const l = function (b, c, d, e, f) {
      const i = ((b + 25001) * 1103515245 + 12345) % 2147483648;
      const j = (1013904223 + (51393 + c) * 1664525) % 4294967296;
      const a = d ^ 38136;
      const k = (0 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)) + (24 << (e >> 16 & 255));
      const h = Xw(i, j, a, k, f ^ 33292);
      const l = Sw(i, j, a, k);
      return (16 << ((h ^ l) >> 16 & io)) + (8 << ((h ^ l) >> 24 & 255)) + (24 << ((h ^ l) >> 8 & vg)) + (0 << ((h ^ l) & Lo));
    }(i, j, a, k, h);
    $n(i, j, a, k, h);
    return ~(l & 58621) & l | ~(l & 58621) & 58621;
  }
  Qf.onreadystatechange = function () {
    if (Xb === this.readyState) {
      this.status;
    }
  };
  var Ff = "https://token.starve.io/";
  var Rf = "https://token2.starve.io/";
  var Gf = Nl;
  var jf = Eo;
  var Wf = Hj;
  var ix = da;
  var jx = undefined;
  var kx = 0;
  kj.ⵠⲆᐃΔⲆᐃⵠ = function () {
    kx = 1;
  };
  var lx = {
    ⲆⲆᐃΔⲆΔⵠⲆⵠ: "ACCESS_TOKEN"
  };
  var Hf = document.createElement("script");
  Hf.type = "text/javascript";
  Hf.async = true;
  Hf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Hf.addEventListener("load", function (a) {
    kj.XPayStationWidget.init(lx);
    kj.XPayStationWidget.on("status-done", sx);
  }, false);
  document.getElementsByTagName("head")[Cq].appendChild(Hf);
  kj.fbAsyncInit = function () {
    ux();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Uf = yr;
  var mx = Bl;
  function nx() {
    kj.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Uf = a).isSignedIn.listen(Vf);
      Uf.currentUser.listen(Zf);
      if (Uf.isSignedIn.get()) {
        Uf.signIn();
      }
      Xf();
    });
  }
  function Vf(a) { }
  function Zf(a) {
    ux();
    if (qr === ix && mx !== oh) {
      ix = mx.getAuthResponse().id_token;
      console.log(undefined, undefined);
      if (ix !== Zi) {
        Wf = Gf;
        kj.ⵠⲆᐃΔⲆᐃⵠ(jx);
      }
    }
    if (a !== undefined && a.isSignedIn() === true) {
      mx = a;
      kj.ⵠⲆᐃΔⲆᐃⵠ(a.id);
    }
  }
  function Xf() {
    if (Uf) {
      mx = Uf.currentUser.get();
    }
  }
  function $f(a) {
    if (jx) {
      var b = new XMLHttpRequest();
      b.open("GET", Ff + "xsolla?userid=" + jx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == ug && this.status == 200 && b.responseText !== "0") {
          lx.access_token = b.responseText;
          kj.XPayStationWidget[p[Zs]](lx);
          kj.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function ox(a, b, c, d) {
    a = Hj === a ? pf.ᐃΔΔⲆⲆⲆᐃ : a;
    b = qj === b ? pf.ΔⵠᐃᐃΔᐃⵠ : b;
    c = qr === c ? pf.ΔᐃⵠΔΔᐃΔ : c;
    d = d === undefined ? pf.ΔΔᐃⵠⲆΔᐃ : d;
    if (pf.ᐃΔΔⲆⲆⲆᐃ !== a || pf.ΔⵠᐃᐃΔᐃⵠ !== b || pf.ΔᐃⵠΔΔᐃΔ !== c || d !== pf.ΔΔᐃⵠⲆΔᐃ) {
      pf.ᐃΔΔⲆⲆⲆᐃ = a;
      pf.ΔⵠᐃᐃΔᐃⵠ = b;
      pf.ΔᐃⵠΔΔᐃΔ = c;
      pf.ΔΔᐃⵠⲆΔᐃ = d;
      if (d === pf.ΔᐃΔΔᐃᐃⵠ) {
        d = "0";
      } else if (d === pf.ⵠᐃⵠⵠΔⲆⵠ) {
        d = "1";
      } else if (d === pf.ᐃⲆⲆⲆⵠᐃⲆ) {
        d = "2";
      } else if (d === pf.ⲆⵠΔⵠᐃΔⲆ) {
        d = "3";
      } else if (d === pf.ⵠⲆΔᐃΔᐃΔ) {
        d = "4";
      } else if (pf.ᐃⲆᐃⲆᐃΔᐃ === d) {
        d = "5";
      }
      if (pf.ΔⲆⵠⵠⵠⵠΔ === b) {
        b = "total";
      } else if (b === pf.ΔᐃⵠⲆⵠⵠᐃ) {
        b = "normal";
      } else if (b === pf.ΔΔⵠⲆⲆΔΔ) {
        b = "zombie";
      } else if (b === pf.ᐃᐃⵠⲆⵠᐃΔ) {
        b = "vampire";
      } else if (b === pf.ᐃΔⲆΔᐃΔⲆ) {
        b = "forest";
      }
      if (a === pf.ΔⵠᐃΔΔᐃΔ) {
        a = "all";
      }
      if (pf.ᐃᐃⵠⵠⲆᐃⵠ === a) {
        a = "week";
      }
      if (a === pf.ᐃⵠⵠΔᐃᐃᐃ) {
        a = "today";
      }
      if (pf.ⵠⲆⵠᐃⲆΔⵠ === c) {
        c = "kill";
      } else if (c === pf.ⲆⵠᐃⲆⵠⵠⵠ) {
        c = "score";
      } else if (pf.ΔⵠⲆⵠⵠⵠΔ === c) {
        c = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", Ff + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == gl && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
            ΔᐃΔΔⲆ = a[c];
            var d = ΔᐃΔΔⲆ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = kj.decodeURIComponent(kj.escape(kj.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + Eo + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += pf.ⲆⵠⵠᐃⵠⲆⵠ(ΔᐃΔΔⲆ[wh]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ΔᐃΔΔⲆ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ΔᐃΔΔⲆ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ΔᐃΔΔⲆ[Jh] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function px() {
    if (pf.ᐃᐃⵠⲆᐃ >= 300 || pf.ⵠⲆΔⲆⲆⲆΔ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= c) {
        var b = new XMLHttpRequest();
        b.open("GET", Ff + "changeNickname?token=" + ix + "&userid=" + jx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > gr) {
              pf.ᐃᐃⵠⲆᐃ -= a;
            }
            pf.ⵠⲆΔⲆⲆⲆΔ = As;
            pf.ᐃⵠⲆⲆ(pf.ⵠᐃⲆⵠⵠ);
          }
        };
        b.send();
      }
    }
  }
  function qx(a, b) {
    if (pf.ⵠⵠⵠⲆⲆ <= 0) {
      if (pf.ᐃᐃⵠⲆᐃ < b) {
        pf.ᐃⵠⲆⲆ(pf.ΔᐃᐃΔᐃ);
      } else {
        pf.ⵠⵠⵠⲆⲆ = Xr;
        pf.ⲆᐃⵠⲆΔΔΔ = 0;
        pf.ᐃⲆᐃⵠᐃⲆⵠ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Ff + "buySpin?token=" + ix + "&userid=" + jx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == _l && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              pf.ⲆΔⵠⵠᐃⲆᐃᐃⵠ(a.rand * Math.PI * 2, a.type, a.id);
              pf.ᐃᐃⵠⲆᐃ -= b;
            } else {
              pf.ⵠⵠⵠⲆⲆ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function rx(a, b) {
    if (b > pf.ᐃᐃⵠⲆᐃ) {
      pf.ᐃⵠⲆⲆ(pf.ΔᐃᐃΔᐃ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Ff + "buyKit?token=" + ix + "&userid=" + jx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          pf.ᐃᐃⵠⲆᐃ -= b;
          pf.ᐃᐃⵠᐃᐃ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function sx() {
    var a = new XMLHttpRequest();
    a.open("GET", Ff + "claimBread?userid=" + jx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          pf.ᐃᐃⵠⲆᐃ = b;
        }
      }
    };
    a.send();
  }
  function tx(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Ff + "setRegion?token=" + ix + "&userid=" + jx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === Ch && this.status === 200) {
        if (b.responseText !== "0") {
          pf.ᐃⵠⲆⲆ(pf.ⵠΔⲆⵠⵠ);
        } else {
          pf.ᐃⵠⲆⲆ(pf.ⲆⵠΔⵠⲆ);
        }
      }
    };
    b.send();
  }
  function ux() {
    kj.FB.init({
      xfbml: true,
      cookie: Yq,
      appId: "642017356260407",
      version: "v15.0"
    });
    if (jx === Zi) {
      (function () {
        try {
          if (kj.FB && kj.FB.getUserID()) {
            jx = kj.FB.getUserID();
            if (ix === undefined) {
              kj.FB.getLoginStatus(function () {
                Wf = jf;
                ix = kj.FB.getAuthResponse().accessToken;
                kj.ⵠⲆᐃΔⲆᐃⵠ(jx);
              });
            }
          }
        } catch (a) { }
        try {
          jx = mx.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  kj.onload = function () {
    kj.gapi.load("auth2", nx);
  };
})();
